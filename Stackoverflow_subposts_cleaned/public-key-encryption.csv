post_link,title,body_question,body_answer,viewcount,tags,score,score_answer,answercount,LastActivityDate,AcceptedAnswerId,CommentCount,FavoriteCount,LastEditorUserId,LastEditorDisplayName,LastEditDate,CreationDate,ClosedDate
"5244129","Use RSA private key to generate public key?","I don't really understand this one:
according to: http://www.madboa.com/geek/openssl/#key-rsa , You can generate a public key from a private key.
openssl genrsa -out mykey.pem 1024
openssl rsa -in mykey.pem -pubout > mykey.pub

My initial thinking was that they are generated in a pair together.
Does RSA private key contain the sum? or the public key? 
","openssl genrsa -out mykey.pem 1024

will actually produce a public - private key pair. The pair is stored in the generated mykey.pem file.
openssl rsa -in mykey.pem -pubout > mykey.pub

will extract the public key and print that out. Here is a link to a page that describes this better. 
EDIT: Check the examples section here. To just output the public part of a private key:
openssl rsa -in key.pem -pubout -out pubkey.pem

To get a usable public key for SSH purposes, use ssh-keygen:
ssh-keygen -y -f key.pem > key.pub

","455510","<openssl><rsa><public-key-encryption>","362","523","8","2019-04-10 21:22:46","5246045","5","152","1033581","","2017-03-26 04:14:56","2011-03-09 10:03:47",""
"5244129","Use RSA private key to generate public key?","I don't really understand this one:
according to: http://www.madboa.com/geek/openssl/#key-rsa , You can generate a public key from a private key.
openssl genrsa -out mykey.pem 1024
openssl rsa -in mykey.pem -pubout > mykey.pub

My initial thinking was that they are generated in a pair together.
Does RSA private key contain the sum? or the public key? 
","In most software that generates RSA private keys, including openssl's, the private key is represented as a PKCS#1 RSAPrivatekey object or some variant thereof:

A.1.2 RSA private key syntax
An RSA private key should be represented with the ASN.1 type
  RSAPrivateKey:
  RSAPrivateKey ::= SEQUENCE {
      version           Version,
      modulus           INTEGER,  -- n
      publicExponent    INTEGER,  -- e
      privateExponent   INTEGER,  -- d
      prime1            INTEGER,  -- p
      prime2            INTEGER,  -- q
      exponent1         INTEGER,  -- d mod (p-1)
      exponent2         INTEGER,  -- d mod (q-1)
      coefficient       INTEGER,  -- (inverse of q) mod p
      otherPrimeInfos   OtherPrimeInfos OPTIONAL
  }


As you can see, this format has a number of fields including the modulus and public exponent and thus is a strict superset of the information in an RSA public key.
","455510","<openssl><rsa><public-key-encryption>","362","67","8","2019-04-10 21:22:46","5246045","5","152","1033581","","2017-03-26 04:14:56","2011-03-09 10:03:47",""
"5244129","Use RSA private key to generate public key?","I don't really understand this one:
according to: http://www.madboa.com/geek/openssl/#key-rsa , You can generate a public key from a private key.
openssl genrsa -out mykey.pem 1024
openssl rsa -in mykey.pem -pubout > mykey.pub

My initial thinking was that they are generated in a pair together.
Does RSA private key contain the sum? or the public key? 
","here in this code first we are creating RSA key which is private but it has pair of its public key as well so to get your actual public key we simply do this
openssl rsa -in mykey.pem -pubout > mykey.pub

hope you get it for more info check this
","455510","<openssl><rsa><public-key-encryption>","362","8","8","2019-04-10 21:22:46","5246045","5","152","1033581","","2017-03-26 04:14:56","2011-03-09 10:03:47",""
"5244129","Use RSA private key to generate public key?","I don't really understand this one:
according to: http://www.madboa.com/geek/openssl/#key-rsa , You can generate a public key from a private key.
openssl genrsa -out mykey.pem 1024
openssl rsa -in mykey.pem -pubout > mykey.pub

My initial thinking was that they are generated in a pair together.
Does RSA private key contain the sum? or the public key? 
","People looking for SSH public key...
If you're looking to extract the public key for use with OpenSSH, you will need to get the public key a bit differently
$ ssh-keygen -y -f mykey.pem > mykey.pub

This public key format is compatible with OpenSSH. Append the public key to remote:~/.ssh/authorized_keys and you'll be good to go 

docs from SSH-KEYGEN(1)

ssh-keygen -y [-f input_keyfile]  

-y This option will read a private OpenSSH format file and print an OpenSSH public key to stdout.

","455510","<openssl><rsa><public-key-encryption>","362","265","8","2019-04-10 21:22:46","5246045","5","152","1033581","","2017-03-26 04:14:56","2011-03-09 10:03:47",""
"5244129","Use RSA private key to generate public key?","I don't really understand this one:
according to: http://www.madboa.com/geek/openssl/#key-rsa , You can generate a public key from a private key.
openssl genrsa -out mykey.pem 1024
openssl rsa -in mykey.pem -pubout > mykey.pub

My initial thinking was that they are generated in a pair together.
Does RSA private key contain the sum? or the public key? 
","The Public Key is not stored in the PEM file as some people think. The following DER structure is present on the Private Key File:

openssl rsa -text -in mykey.pem

RSAPrivateKey ::= SEQUENCE {
  version           Version,
  modulus           INTEGER,  -- n
  publicExponent    INTEGER,  -- e
  privateExponent   INTEGER,  -- d
  prime1            INTEGER,  -- p
  prime2            INTEGER,  -- q
  exponent1         INTEGER,  -- d mod (p-1)
  exponent2         INTEGER,  -- d mod (q-1)
  coefficient       INTEGER,  -- (inverse of q) mod p
  otherPrimeInfos   OtherPrimeInfos OPTIONAL
}

So there is enough data to calculate the Public Key (modulus and public exponent), which is what openssl rsa -in mykey.pem -pubout does
","455510","<openssl><rsa><public-key-encryption>","362","21","8","2019-04-10 21:22:46","5246045","5","152","1033581","","2017-03-26 04:14:56","2011-03-09 10:03:47",""
"5244129","Use RSA private key to generate public key?","I don't really understand this one:
according to: http://www.madboa.com/geek/openssl/#key-rsa , You can generate a public key from a private key.
openssl genrsa -out mykey.pem 1024
openssl rsa -in mykey.pem -pubout > mykey.pub

My initial thinking was that they are generated in a pair together.
Does RSA private key contain the sum? or the public key? 
","Use the following commands:

1. openssl req -x509 -nodes -days 365 -sha256 -newkey rsa:2048 -keyout mycert.pem -out mycert.pem

Loading 'screen' into random state - done
Generating a 2048 bit RSA private key
.............+++
..................................................................................................................................................................+++
writing new private key to 'mycert.pem'
-----
You are about to be asked to enter information that will be incorporated
into your certificate request.
What you are about to enter is what is called a Distinguished Name or a DN.
There are quite a few fields but you can leave some blank
For some fields there will be a default value,
If you enter '.', the field will be left blank.

2. If you check there will be a file created by the name : mycert.pem

3. openssl rsa -in mycert.pem -pubout > mykey.txt
writing RSA key

4. If you check the same file location a new public key : mykey.txt will be created.

","455510","<openssl><rsa><public-key-encryption>","362","0","8","2019-04-10 21:22:46","5246045","5","152","1033581","","2017-03-26 04:14:56","2011-03-09 10:03:47",""
"5244129","Use RSA private key to generate public key?","I don't really understand this one:
according to: http://www.madboa.com/geek/openssl/#key-rsa , You can generate a public key from a private key.
openssl genrsa -out mykey.pem 1024
openssl rsa -in mykey.pem -pubout > mykey.pub

My initial thinking was that they are generated in a pair together.
Does RSA private key contain the sum? or the public key? 
","My answer below is a bit lengthy, but hopefully it provides some details that are missing in previous answers. I'll start with some related statements and finally answer the initial question.
To encrypt something using RSA algorithm you need modulus and encryption (public) exponent pair (n, e). That's your public key. To decrypt something using RSA algorithm you need modulus and decryption (private) exponent pair (n, d). That's your private key.
To encrypt something using RSA public key you treat your plaintext as a number and raise it to the power of e modulus n:
ciphertext = ( plaintext^e ) mod n

To decrypt something using RSA private key you treat your ciphertext as a number and raise it to the power of d modulus n:
plaintext = ( ciphertext^d ) mod n

To generate private (d,n) key using openssl you can use the following command:
openssl genrsa -out private.pem 1024

To generate public (e,n) key from the private key using openssl you can use the following command:
openssl rsa -in private.pem -out public.pem -pubout

To dissect the contents of the private.pem private RSA key generated by the openssl command above run the following (output truncated to labels here):
openssl rsa -in private.pem -text -noout | less

modulus         - n
privateExponent - d
publicExponent  - e
prime1          - p
prime2          - q
exponent1       - d mod (p-1)
exponent2       - d mod (q-1)
coefficient     - (q^-1) mod p

Shouldn't private key consist of (n, d) pair only? Why are there 6 extra components? It contains e (public exponent) so that public RSA key can be generated/extracted/derived from the private.pem private RSA key. The rest 5 components are there to speed up the decryption process. It turns out that by pre-computing and storing those 5 values it is possible to speed the RSA decryption by the factor of 4. Decryption will work without those 5 components, but it can be done faster if you have them handy. The speeding up algorithm is based on the Chinese Remainder Theorem.
Yes, private.pem RSA private key actually contains all of those 8 values; none of them are generated on the fly when you run the previous command. Try running the following commands and compare output:
# Convert the key from PEM to DER (binary) format
openssl rsa -in private.pem -outform der -out private.der

# Print private.der private key contents as binary stream
xxd -p private.der

# Now compare the output of the above command with output 
# of the earlier openssl command that outputs private key
# components. If you stare at both outputs long enough
# you should be able to confirm that all components are
# indeed lurking somewhere in the binary stream
openssl rsa -in private.pem -text -noout | less

This structure of the RSA private key is recommended by the PKCS#1 v1.5 as an alternative (second) representation. PKCS#1 v2.0 standard excludes e and d exponents from the alternative representation altogether. PKCS#1 v2.1 and v2.2 propose further changes to the alternative representation, by optionally including more CRT-related components.
To see the contents of the public.pem public RSA key run the following (output truncated to labels here):
openssl rsa -in public.pem -text -pubin -noout

Modulus             - n
Exponent (public)   - e

No surprises here. It's just (n, e) pair, as promised.
Now finally answering the initial question: As was shown above private RSA key generated using openssl contains components of both public and private keys and some more. When you generate/extract/derive public key from the private key, openssl copies two of those components (e,n) into a separate file which becomes your public key.
","455510","<openssl><rsa><public-key-encryption>","362","24","8","2019-04-10 21:22:46","5246045","5","152","1033581","","2017-03-26 04:14:56","2011-03-09 10:03:47",""
"5244129","Use RSA private key to generate public key?","I don't really understand this one:
according to: http://www.madboa.com/geek/openssl/#key-rsa , You can generate a public key from a private key.
openssl genrsa -out mykey.pem 1024
openssl rsa -in mykey.pem -pubout > mykey.pub

My initial thinking was that they are generated in a pair together.
Does RSA private key contain the sum? or the public key? 
","Firstly a quick recap on RSA key generation.

Randomly pick two random probable primes of the appropriate size (p and q).
Multiply the two primes together to produce the modulus (n).
Pick a public exponent (e). 
Do some math with the primes and the public exponent to produce the private exponent (d).

The public key consists of the modulus and the public exponent.
A minimal private key would consist of the modulus and the private exponent. There is no computationally feasible surefire way to go from a known modulus and private exponent to the corresponding public exponent.
However:

Practical private key formats nearly always store more than n and d. 
e is normally not picked randomly, one of a handful of well-known values is used. If e is one of the well-known values and you know d then it would be easy to figure out e by trial and error. 

So in most practical RSA implementations you can get the public key from the private key. It would be possible to build a RSA based cryptosystem where this was not possible, but it is not the done thing.
","455510","<openssl><rsa><public-key-encryption>","362","5","8","2019-04-10 21:22:46","5246045","5","152","1033581","","2017-03-26 04:14:56","2011-03-09 10:03:47",""
"12749858","RSA Public Key format","Where can i find some documentation on the format of an RSA public key?
An RSA public key formatted by OpenSSH:

ssh-rsa AAAAB3NzaC1yc2EAAAABJQAAAQB/nAmOjTmezNUDKYvEeIRf2YnwM9/uUG1d0BYsc8/tRtx+RGi7N2lUbp728MXGwdnL9od4cItzky/zVdLZE2cycOa18xBK9cOWmcKS0A8FYBxEQWJ/q9YVUgZbFKfYGaGQxsER+A0w/fX8ALuk78ktP31K69LcQgxIsl7rNzxsoOQKJ/CIxOGMMxczYTiEoLvQhapFQMs3FL96didKr/QbrfB1WT6s3838SEaXfgZvLef1YB2xmfhbT9OXFE3FXvh2UPBfN+ffE7iiayQf/2XR+8j4N4bW30DiPtOQLGUrH1y5X/rpNZNlWW2+jGIxqZtgWg7lTy3mXy5x836Sj/6L

The same public key formatted for use in Secure Shell (RFC 4716 - The Secure Shell (SSH) Public Key File Format):
---- BEGIN SSH2 PUBLIC KEY ----
AAAAB3NzaC1yc2EAAAABJQAAAQB/nAmOjTmezNUDKYvEeIRf2YnwM9/uUG1d0BYs
c8/tRtx+RGi7N2lUbp728MXGwdnL9od4cItzky/zVdLZE2cycOa18xBK9cOWmcKS
0A8FYBxEQWJ/q9YVUgZbFKfYGaGQxsER+A0w/fX8ALuk78ktP31K69LcQgxIsl7r
NzxsoOQKJ/CIxOGMMxczYTiEoLvQhapFQMs3FL96didKr/QbrfB1WT6s3838SEaX
fgZvLef1YB2xmfhbT9OXFE3FXvh2UPBfN+ffE7iiayQf/2XR+8j4N4bW30DiPtOQ
LGUrH1y5X/rpNZNlWW2+jGIxqZtgWg7lTy3mXy5x836Sj/6L
---- END SSH2 PUBLIC KEY ----

The same public key formatted as an RSA public key (note the five -, and no space):
-----BEGIN RSA PUBLIC KEY-----
MIIBCgKCAQEA+xGZ/wcz9ugFpP07Nspo6U17l0YhFiFpxxU4pTk3Lifz9R3zsIsu
ERwta7+fWIfxOo208ett/jhskiVodSEt3QBGh4XBipyWopKwZ93HHaDVZAALi/2A
+xTBtWdEo7XGUujKDvC2/aZKukfjpOiUI8AhLAfjmlcD/UZ1QPh0mHsglRNCmpCw
mwSXA9VNmhz+PiB+Dml4WWnKW/VHo2ujTXxq7+efMU4H2fny3Se3KYOsFPFGZ1TN
QSYlFuShWrHPtiLmUdPoP6CV2mML1tk+l7DIIqXrQhLUKDACeM5roMx0kLhUWB8P
+0uj1CNlNN4JRZlC7xFfqiMbFRU9Z4N6YwIDAQAB
-----END RSA PUBLIC KEY-----

The hex dump of the base-64 encoded data:
00 00 00 07 73 73 68 2d 72 73 61 00 00 00 01 25 00 00 01 00 7f 9c 09
8e 8d 39 9e cc d5 03 29 8b c4 78 84 5f d9 89 f0 33 df ee 50 6d 5d d0 
16 2c 73 cf ed 46 dc 7e 44 68 bb 37 69 54 6e 9e f6 f0 c5 c6 c1 d9 cb
f6 87 78 70 8b 73 93 2f f3 55 d2 d9 13 67 32 70 e6 b5 f3 10 4a f5 c3 
96 99 c2 92 d0 0f 05 60 1c 44 41 62 7f ab d6 15 52 06 5b 14 a7 d8 19 
a1 90 c6 c1 11 f8 0d 30 fd f5 fc 00 bb a4 ef c9 2d 3f 7d 4a eb d2 dc 
42 0c 48 b2 5e eb 37 3c 6c a0 e4 0a 27 f0 88 c4 e1 8c 33 17 33 61 38 
84 a0 bb d0 85 aa 45 40 cb 37 14 bf 7a 76 27 4a af f4 1b ad f0 75 59 
3e ac df cd fc 48 46 97 7e 06 6f 2d e7 f5 60 1d b1 99 f8 5b 4f d3 97 
14 4d c5 5e f8 76 50 f0 5f 37 e7 df 13 b8 a2 6b 24 1f ff 65 d1 fb c8 
f8 37 86 d6 df 40 e2 3e d3 90 2c 65 2b 1f 5c b9 5f fa e9 35 93 65 59 
6d be 8c 62 31 a9 9b 60 5a 0e e5 4f 2d e6 5f 2e 71 f3 7e 92 8f fe 8b

i've read that there are a couple of formats🕗:

Key data may be encoded in three general ways:

Binary DER-encoded format. This is sometimes called ASN.1 BER-encoded
PEM or base64 format. This is the same data as the DER-encoded file but it is encoded in base64 with additional header and footer lines
XML format.


If it's ASN.1, the hex certainly doesn't look like it.
What's the format of an RSA public key?

See also

RSA Key Formats
Abstract Syntax Notation One
Convert Base64 Public Key to XML Signature 🕗
Decode PEM formats

","You can't just change the delimiters from ---- BEGIN SSH2 PUBLIC KEY ---- to -----BEGIN RSA PUBLIC KEY----- and expect that it will be sufficient to convert from one format to another (which is what you've done in your example).
This article has a good explanation about both formats.
What you get in an RSA PUBLIC KEY is closer to the content of a PUBLIC KEY, but you need to offset the start of your ASN.1 structure to reflect the fact that PUBLIC KEY also has an indicator saying which type of key it is (see RFC 3447). You can see this using openssl asn1parse and -strparse 19, as described in this answer.
EDIT: Following your edit, your can get the details of your RSA PUBLIC KEY structure using grep -v -- ----- | tr -d '\n' | base64 -d | openssl asn1parse -inform DER:
    0:d=0  hl=4 l= 266 cons: SEQUENCE          
    4:d=1  hl=4 l= 257 prim: INTEGER           :FB1199FF0733F6E805A4FD3B36CA68E94D7B974621162169C71538A539372E27F3F51DF3B08B2E111C2D6BBF9F5887F13A8DB4F1EB6DFE386C92256875212DDD00468785C18A9C96A292B067DDC71DA0D564000B8BFD80FB14C1B56744A3B5C652E8CA0EF0B6FDA64ABA47E3A4E89423C0212C07E39A5703FD467540F874987B209513429A90B09B049703D54D9A1CFE3E207E0E69785969CA5BF547A36BA34D7C6AEFE79F314E07D9F9F2DD27B72983AC14F1466754CD41262516E4A15AB1CFB622E651D3E83FA095DA630BD6D93E97B0C822A5EB4212D428300278CE6BA0CC7490B854581F0FFB4BA3D4236534DE09459942EF115FAA231B15153D67837A63
  265:d=1  hl=2 l=   3 prim: INTEGER           :010001

To decode the SSH key format, you need to use the data format specification in RFC 4251 too, in conjunction with RFC 4253:

   The ""ssh-rsa"" key format has the following specific encoding:

      string    ""ssh-rsa""
      mpint     e
      mpint     n


For example, at the beginning, you get 00 00 00 07 73 73 68 2d 72 73 61. The first four bytes (00 00 00 07) give you the length. The rest is the string itself: 73=s, 68=h, ... -> 73 73 68 2d 72 73 61=ssh-rsa, followed by the exponent of length 1 (00 00 00 01 25) and the modulus of length 256 (00 00 01 00 7f ...).
","205755","<encryption><rsa><public-key-encryption>","132","65","3","2019-05-06 14:06:45","12750380","0","62","12597","","2019-05-06 14:06:45","2012-10-05 15:55:50",""
"12749858","RSA Public Key format","Where can i find some documentation on the format of an RSA public key?
An RSA public key formatted by OpenSSH:

ssh-rsa AAAAB3NzaC1yc2EAAAABJQAAAQB/nAmOjTmezNUDKYvEeIRf2YnwM9/uUG1d0BYsc8/tRtx+RGi7N2lUbp728MXGwdnL9od4cItzky/zVdLZE2cycOa18xBK9cOWmcKS0A8FYBxEQWJ/q9YVUgZbFKfYGaGQxsER+A0w/fX8ALuk78ktP31K69LcQgxIsl7rNzxsoOQKJ/CIxOGMMxczYTiEoLvQhapFQMs3FL96didKr/QbrfB1WT6s3838SEaXfgZvLef1YB2xmfhbT9OXFE3FXvh2UPBfN+ffE7iiayQf/2XR+8j4N4bW30DiPtOQLGUrH1y5X/rpNZNlWW2+jGIxqZtgWg7lTy3mXy5x836Sj/6L

The same public key formatted for use in Secure Shell (RFC 4716 - The Secure Shell (SSH) Public Key File Format):
---- BEGIN SSH2 PUBLIC KEY ----
AAAAB3NzaC1yc2EAAAABJQAAAQB/nAmOjTmezNUDKYvEeIRf2YnwM9/uUG1d0BYs
c8/tRtx+RGi7N2lUbp728MXGwdnL9od4cItzky/zVdLZE2cycOa18xBK9cOWmcKS
0A8FYBxEQWJ/q9YVUgZbFKfYGaGQxsER+A0w/fX8ALuk78ktP31K69LcQgxIsl7r
NzxsoOQKJ/CIxOGMMxczYTiEoLvQhapFQMs3FL96didKr/QbrfB1WT6s3838SEaX
fgZvLef1YB2xmfhbT9OXFE3FXvh2UPBfN+ffE7iiayQf/2XR+8j4N4bW30DiPtOQ
LGUrH1y5X/rpNZNlWW2+jGIxqZtgWg7lTy3mXy5x836Sj/6L
---- END SSH2 PUBLIC KEY ----

The same public key formatted as an RSA public key (note the five -, and no space):
-----BEGIN RSA PUBLIC KEY-----
MIIBCgKCAQEA+xGZ/wcz9ugFpP07Nspo6U17l0YhFiFpxxU4pTk3Lifz9R3zsIsu
ERwta7+fWIfxOo208ett/jhskiVodSEt3QBGh4XBipyWopKwZ93HHaDVZAALi/2A
+xTBtWdEo7XGUujKDvC2/aZKukfjpOiUI8AhLAfjmlcD/UZ1QPh0mHsglRNCmpCw
mwSXA9VNmhz+PiB+Dml4WWnKW/VHo2ujTXxq7+efMU4H2fny3Se3KYOsFPFGZ1TN
QSYlFuShWrHPtiLmUdPoP6CV2mML1tk+l7DIIqXrQhLUKDACeM5roMx0kLhUWB8P
+0uj1CNlNN4JRZlC7xFfqiMbFRU9Z4N6YwIDAQAB
-----END RSA PUBLIC KEY-----

The hex dump of the base-64 encoded data:
00 00 00 07 73 73 68 2d 72 73 61 00 00 00 01 25 00 00 01 00 7f 9c 09
8e 8d 39 9e cc d5 03 29 8b c4 78 84 5f d9 89 f0 33 df ee 50 6d 5d d0 
16 2c 73 cf ed 46 dc 7e 44 68 bb 37 69 54 6e 9e f6 f0 c5 c6 c1 d9 cb
f6 87 78 70 8b 73 93 2f f3 55 d2 d9 13 67 32 70 e6 b5 f3 10 4a f5 c3 
96 99 c2 92 d0 0f 05 60 1c 44 41 62 7f ab d6 15 52 06 5b 14 a7 d8 19 
a1 90 c6 c1 11 f8 0d 30 fd f5 fc 00 bb a4 ef c9 2d 3f 7d 4a eb d2 dc 
42 0c 48 b2 5e eb 37 3c 6c a0 e4 0a 27 f0 88 c4 e1 8c 33 17 33 61 38 
84 a0 bb d0 85 aa 45 40 cb 37 14 bf 7a 76 27 4a af f4 1b ad f0 75 59 
3e ac df cd fc 48 46 97 7e 06 6f 2d e7 f5 60 1d b1 99 f8 5b 4f d3 97 
14 4d c5 5e f8 76 50 f0 5f 37 e7 df 13 b8 a2 6b 24 1f ff 65 d1 fb c8 
f8 37 86 d6 df 40 e2 3e d3 90 2c 65 2b 1f 5c b9 5f fa e9 35 93 65 59 
6d be 8c 62 31 a9 9b 60 5a 0e e5 4f 2d e6 5f 2e 71 f3 7e 92 8f fe 8b

i've read that there are a couple of formats🕗:

Key data may be encoded in three general ways:

Binary DER-encoded format. This is sometimes called ASN.1 BER-encoded
PEM or base64 format. This is the same data as the DER-encoded file but it is encoded in base64 with additional header and footer lines
XML format.


If it's ASN.1, the hex certainly doesn't look like it.
What's the format of an RSA public key?

See also

RSA Key Formats
Abstract Syntax Notation One
Convert Base64 Public Key to XML Signature 🕗
Decode PEM formats

","Starting from the decoded base64 data of an OpenSSL rsa-ssh Key, i've been able to guess a format:

00 00 00 07: four byte length prefix (7 bytes)
73 73 68 2d 72 73 61: ""ssh-rsa""
00 00 00 01: four byte length prefix (1 byte)
25: RSA Exponent (e): 25
00 00 01 00: four byte length prefix (256 bytes)
RSA Modulus (n): 
7f 9c 09 8e 8d 39 9e cc d5 03 29 8b c4 78 84 5f
d9 89 f0 33 df ee 50 6d 5d d0 16 2c 73 cf ed 46 
dc 7e 44 68 bb 37 69 54 6e 9e f6 f0 c5 c6 c1 d9 
cb f6 87 78 70 8b 73 93 2f f3 55 d2 d9 13 67 32 
70 e6 b5 f3 10 4a f5 c3 96 99 c2 92 d0 0f 05 60 
1c 44 41 62 7f ab d6 15 52 06 5b 14 a7 d8 19 a1 
90 c6 c1 11 f8 0d 30 fd f5 fc 00 bb a4 ef c9 2d 
3f 7d 4a eb d2 dc 42 0c 48 b2 5e eb 37 3c 6c a0 
e4 0a 27 f0 88 c4 e1 8c 33 17 33 61 38 84 a0 bb 
d0 85 aa 45 40 cb 37 14 bf 7a 76 27 4a af f4 1b 
ad f0 75 59 3e ac df cd fc 48 46 97 7e 06 6f 2d 
e7 f5 60 1d b1 99 f8 5b 4f d3 97 14 4d c5 5e f8 
76 50 f0 5f 37 e7 df 13 b8 a2 6b 24 1f ff 65 d1 
fb c8 f8 37 86 d6 df 40 e2 3e d3 90 2c 65 2b 1f 
5c b9 5f fa e9 35 93 65 59 6d be 8c 62 31 a9 9b 
60 5a 0e e5 4f 2d e6 5f 2e 71 f3 7e 92 8f fe 8b


The closest validation of my theory i can find it from RFC 4253:

The ""ssh-rsa"" key format has the following specific encoding:
  string    ""ssh-rsa""
  mpint     e
  mpint     n

Here the 'e' and 'n' parameters form the signature key blob.

But it doesn't explain the length prefixes.

Taking the random RSA PUBLIC KEY i found (in the question), and decoding the base64 into hex:
30 82 01 0a 02 82 01 01 00 fb 11 99 ff 07 33 f6 e8 05 a4 fd 3b 36 ca 68 
e9 4d 7b 97 46 21 16 21 69 c7 15 38 a5 39 37 2e 27 f3 f5 1d f3 b0 8b 2e 
11 1c 2d 6b bf 9f 58 87 f1 3a 8d b4 f1 eb 6d fe 38 6c 92 25 68 75 21 2d 
dd 00 46 87 85 c1 8a 9c 96 a2 92 b0 67 dd c7 1d a0 d5 64 00 0b 8b fd 80 
fb 14 c1 b5 67 44 a3 b5 c6 52 e8 ca 0e f0 b6 fd a6 4a ba 47 e3 a4 e8 94 
23 c0 21 2c 07 e3 9a 57 03 fd 46 75 40 f8 74 98 7b 20 95 13 42 9a 90 b0 
9b 04 97 03 d5 4d 9a 1c fe 3e 20 7e 0e 69 78 59 69 ca 5b f5 47 a3 6b a3 
4d 7c 6a ef e7 9f 31 4e 07 d9 f9 f2 dd 27 b7 29 83 ac 14 f1 46 67 54 cd 
41 26 25 16 e4 a1 5a b1 cf b6 22 e6 51 d3 e8 3f a0 95 da 63 0b d6 d9 3e 
97 b0 c8 22 a5 eb 42 12 d4 28 30 02 78 ce 6b a0 cc 74 90 b8 54 58 1f 0f 
fb 4b a3 d4 23 65 34 de 09 45 99 42 ef 11 5f aa 23 1b 15 15 3d 67 83 7a 
63 02 03 01 00 01

From RFC3447 - Public-Key Cryptography Standards (PKCS) #1: RSA Cryptography Specifications Version 2.1:

A.1.1 RSA public key syntax
An RSA public key should be represented with the ASN.1 type RSAPublicKey:
  RSAPublicKey ::= SEQUENCE {
     modulus           INTEGER,  -- n
     publicExponent    INTEGER   -- e
  }

The fields of type RSAPublicKey have the following meanings:

modulus is the RSA modulus n.
publicExponent is the RSA public exponent e.


Using Microsoft's excellent (and the only real) ASN.1 documentation: 
30 82 01 0a       ;SEQUENCE (0x010A bytes: 266 bytes)
|  02 82 01 01    ;INTEGER  (0x0101 bytes: 257 bytes)
|  |  00          ;leading zero because high-bit, but number is positive
|  |  fb 11 99 ff 07 33 f6 e8 05 a4 fd 3b 36 ca 68 
|  |  e9 4d 7b 97 46 21 16 21 69 c7 15 38 a5 39 37 2e 27 f3 f5 1d f3 b0 8b 2e 
|  |  11 1c 2d 6b bf 9f 58 87 f1 3a 8d b4 f1 eb 6d fe 38 6c 92 25 68 75 21 2d 
|  |  dd 00 46 87 85 c1 8a 9c 96 a2 92 b0 67 dd c7 1d a0 d5 64 00 0b 8b fd 80 
|  |  fb 14 c1 b5 67 44 a3 b5 c6 52 e8 ca 0e f0 b6 fd a6 4a ba 47 e3 a4 e8 94 
|  |  23 c0 21 2c 07 e3 9a 57 03 fd 46 75 40 f8 74 98 7b 20 95 13 42 9a 90 b0 
|  |  9b 04 97 03 d5 4d 9a 1c fe 3e 20 7e 0e 69 78 59 69 ca 5b f5 47 a3 6b a3 
|  |  4d 7c 6a ef e7 9f 31 4e 07 d9 f9 f2 dd 27 b7 29 83 ac 14 f1 46 67 54 cd 
|  |  41 26 25 16 e4 a1 5a b1 cf b6 22 e6 51 d3 e8 3f a0 95 da 63 0b d6 d9 3e 
|  |  97 b0 c8 22 a5 eb 42 12 d4 28 30 02 78 ce 6b a0 cc 74 90 b8 54 58 1f 0f 
|  |  fb 4b a3 d4 23 65 34 de 09 45 99 42 ef 11 5f aa 23 1b 15 15 3d 67 83 7a 
|  |  63 
|  02 03          ;INTEGER (3 bytes)
|     01 00 01

giving the public key modulus and exponent:

modulus = 0xfb1199ff0733f6e805a4fd3b36ca68...837a63
exponent = 65,537


Update: My expanded form of this answer in another question
","205755","<encryption><rsa><public-key-encryption>","132","53","3","2019-05-06 14:06:45","12750380","0","62","12597","","2019-05-06 14:06:45","2012-10-05 15:55:50",""
"12749858","RSA Public Key format","Where can i find some documentation on the format of an RSA public key?
An RSA public key formatted by OpenSSH:

ssh-rsa AAAAB3NzaC1yc2EAAAABJQAAAQB/nAmOjTmezNUDKYvEeIRf2YnwM9/uUG1d0BYsc8/tRtx+RGi7N2lUbp728MXGwdnL9od4cItzky/zVdLZE2cycOa18xBK9cOWmcKS0A8FYBxEQWJ/q9YVUgZbFKfYGaGQxsER+A0w/fX8ALuk78ktP31K69LcQgxIsl7rNzxsoOQKJ/CIxOGMMxczYTiEoLvQhapFQMs3FL96didKr/QbrfB1WT6s3838SEaXfgZvLef1YB2xmfhbT9OXFE3FXvh2UPBfN+ffE7iiayQf/2XR+8j4N4bW30DiPtOQLGUrH1y5X/rpNZNlWW2+jGIxqZtgWg7lTy3mXy5x836Sj/6L

The same public key formatted for use in Secure Shell (RFC 4716 - The Secure Shell (SSH) Public Key File Format):
---- BEGIN SSH2 PUBLIC KEY ----
AAAAB3NzaC1yc2EAAAABJQAAAQB/nAmOjTmezNUDKYvEeIRf2YnwM9/uUG1d0BYs
c8/tRtx+RGi7N2lUbp728MXGwdnL9od4cItzky/zVdLZE2cycOa18xBK9cOWmcKS
0A8FYBxEQWJ/q9YVUgZbFKfYGaGQxsER+A0w/fX8ALuk78ktP31K69LcQgxIsl7r
NzxsoOQKJ/CIxOGMMxczYTiEoLvQhapFQMs3FL96didKr/QbrfB1WT6s3838SEaX
fgZvLef1YB2xmfhbT9OXFE3FXvh2UPBfN+ffE7iiayQf/2XR+8j4N4bW30DiPtOQ
LGUrH1y5X/rpNZNlWW2+jGIxqZtgWg7lTy3mXy5x836Sj/6L
---- END SSH2 PUBLIC KEY ----

The same public key formatted as an RSA public key (note the five -, and no space):
-----BEGIN RSA PUBLIC KEY-----
MIIBCgKCAQEA+xGZ/wcz9ugFpP07Nspo6U17l0YhFiFpxxU4pTk3Lifz9R3zsIsu
ERwta7+fWIfxOo208ett/jhskiVodSEt3QBGh4XBipyWopKwZ93HHaDVZAALi/2A
+xTBtWdEo7XGUujKDvC2/aZKukfjpOiUI8AhLAfjmlcD/UZ1QPh0mHsglRNCmpCw
mwSXA9VNmhz+PiB+Dml4WWnKW/VHo2ujTXxq7+efMU4H2fny3Se3KYOsFPFGZ1TN
QSYlFuShWrHPtiLmUdPoP6CV2mML1tk+l7DIIqXrQhLUKDACeM5roMx0kLhUWB8P
+0uj1CNlNN4JRZlC7xFfqiMbFRU9Z4N6YwIDAQAB
-----END RSA PUBLIC KEY-----

The hex dump of the base-64 encoded data:
00 00 00 07 73 73 68 2d 72 73 61 00 00 00 01 25 00 00 01 00 7f 9c 09
8e 8d 39 9e cc d5 03 29 8b c4 78 84 5f d9 89 f0 33 df ee 50 6d 5d d0 
16 2c 73 cf ed 46 dc 7e 44 68 bb 37 69 54 6e 9e f6 f0 c5 c6 c1 d9 cb
f6 87 78 70 8b 73 93 2f f3 55 d2 d9 13 67 32 70 e6 b5 f3 10 4a f5 c3 
96 99 c2 92 d0 0f 05 60 1c 44 41 62 7f ab d6 15 52 06 5b 14 a7 d8 19 
a1 90 c6 c1 11 f8 0d 30 fd f5 fc 00 bb a4 ef c9 2d 3f 7d 4a eb d2 dc 
42 0c 48 b2 5e eb 37 3c 6c a0 e4 0a 27 f0 88 c4 e1 8c 33 17 33 61 38 
84 a0 bb d0 85 aa 45 40 cb 37 14 bf 7a 76 27 4a af f4 1b ad f0 75 59 
3e ac df cd fc 48 46 97 7e 06 6f 2d e7 f5 60 1d b1 99 f8 5b 4f d3 97 
14 4d c5 5e f8 76 50 f0 5f 37 e7 df 13 b8 a2 6b 24 1f ff 65 d1 fb c8 
f8 37 86 d6 df 40 e2 3e d3 90 2c 65 2b 1f 5c b9 5f fa e9 35 93 65 59 
6d be 8c 62 31 a9 9b 60 5a 0e e5 4f 2d e6 5f 2e 71 f3 7e 92 8f fe 8b

i've read that there are a couple of formats🕗:

Key data may be encoded in three general ways:

Binary DER-encoded format. This is sometimes called ASN.1 BER-encoded
PEM or base64 format. This is the same data as the DER-encoded file but it is encoded in base64 with additional header and footer lines
XML format.


If it's ASN.1, the hex certainly doesn't look like it.
What's the format of an RSA public key?

See also

RSA Key Formats
Abstract Syntax Notation One
Convert Base64 Public Key to XML Signature 🕗
Decode PEM formats

","Reference Decoder of CRL,CRT,CSR,NEW CSR,PRIVATE KEY, PUBLIC KEY,RSA,RSA Public Key Parser
RSA Public Key 
-----BEGIN RSA PUBLIC KEY-----
-----END RSA PUBLIC KEY-----

Encrypted Private Key 
-----BEGIN RSA PRIVATE KEY-----
Proc-Type: 4,ENCRYPTED
-----END RSA PRIVATE KEY-----

CRL 
-----BEGIN X509 CRL-----
-----END X509 CRL-----

CRT 
-----BEGIN CERTIFICATE-----
-----END CERTIFICATE-----

CSR
-----BEGIN CERTIFICATE REQUEST-----
-----END CERTIFICATE REQUEST-----

NEW CSR
-----BEGIN NEW CERTIFICATE REQUEST-----
-----END NEW CERTIFICATE REQUEST-----

PEM
-----BEGIN RSA PRIVATE KEY-----
-----END RSA PRIVATE KEY-----

PKCS7
-----BEGIN PKCS7-----
-----END PKCS7-----

PRIVATE KEY
-----BEGIN PRIVATE KEY-----
-----END PRIVATE KEY-----

DSA KEY
-----BEGIN DSA PRIVATE KEY-----
-----END DSA PRIVATE KEY-----

Elliptic Curve
-----BEGIN EC PRIVATE KEY-----
-----END EC PRIVATE KEY-----

PGP Private Key
-----BEGIN PGP PRIVATE KEY BLOCK-----
-----END PGP PRIVATE KEY BLOCK-----

PGP Public Key
-----BEGIN PGP PUBLIC KEY BLOCK-----
-----END PGP PUBLIC KEY BLOCK-----

","205755","<encryption><rsa><public-key-encryption>","132","6","3","2019-05-06 14:06:45","12750380","0","62","12597","","2019-05-06 14:06:45","2012-10-05 15:55:50",""
"14459078","Unable to load config info from /usr/local/ssl/openssl.cnf on Windows","While using OpenSSL on Windows:
openssl genrsa -out privatekey.pem 1024 -->
Created successfully
openssl req -new -x509 -key privatekey.pem -out publickey.cer -days 365 
---->

Showing error message as 

unable to load config info from /usr/local/ssl/openssl.cnf

","After installing OpenSSL, you need to restart your computer and use Run As Administrator. Then its works.
","196310","<windows><openssl><public-key-encryption>","174","12","13","2019-09-26 20:06:07","","1","34","123671","","2018-10-29 14:57:45","2013-01-22 12:56:12",""
"14459078","Unable to load config info from /usr/local/ssl/openssl.cnf on Windows","While using OpenSSL on Windows:
openssl genrsa -out privatekey.pem 1024 -->
Created successfully
openssl req -new -x509 -key privatekey.pem -out publickey.cer -days 365 
---->

Showing error message as 

unable to load config info from /usr/local/ssl/openssl.cnf

","In Windows 7 I didn't have to restart, simply run command prompt in administrator mode.
","196310","<windows><openssl><public-key-encryption>","174","6","13","2019-09-26 20:06:07","","1","34","123671","","2018-10-29 14:57:45","2013-01-22 12:56:12",""
"14459078","Unable to load config info from /usr/local/ssl/openssl.cnf on Windows","While using OpenSSL on Windows:
openssl genrsa -out privatekey.pem 1024 -->
Created successfully
openssl req -new -x509 -key privatekey.pem -out publickey.cer -days 365 
---->

Showing error message as 

unable to load config info from /usr/local/ssl/openssl.cnf

","You should specify the absolute path to the config, something like this:
openssl req -x509 -config ""C:\OpenSSL-Win64\bin\openssl.cnf"" ...

","196310","<windows><openssl><public-key-encryption>","174","72","13","2019-09-26 20:06:07","","1","34","123671","","2018-10-29 14:57:45","2013-01-22 12:56:12",""
"14459078","Unable to load config info from /usr/local/ssl/openssl.cnf on Windows","While using OpenSSL on Windows:
openssl genrsa -out privatekey.pem 1024 -->
Created successfully
openssl req -new -x509 -key privatekey.pem -out publickey.cer -days 365 
---->

Showing error message as 

unable to load config info from /usr/local/ssl/openssl.cnf

","After installing OpenSSL I was required to create a new environment variable:

Name: OPENSSL_CONF
Value: C:\Program Files\OpenSSL\openssl.cnf

In powershell:
$env:OPENSSL_CONF = ""${env:ProgramFiles}\OpenSSL\openssl.cnf""

This value differs from previous installation versions (as seen in a previous edit of this post).  Also, don't forget to add the openssl binary folder ${env:ProgramFiles}\OpenSSL to your Path.
","196310","<windows><openssl><public-key-encryption>","174","164","13","2019-09-26 20:06:07","","1","34","123671","","2018-10-29 14:57:45","2013-01-22 12:56:12",""
"14459078","Unable to load config info from /usr/local/ssl/openssl.cnf on Windows","While using OpenSSL on Windows:
openssl genrsa -out privatekey.pem 1024 -->
Created successfully
openssl req -new -x509 -key privatekey.pem -out publickey.cer -days 365 
---->

Showing error message as 

unable to load config info from /usr/local/ssl/openssl.cnf

","In windows , [Similar scenario] 
I was facing the same problem But It was during requesting for Certificate Signing Request.
I did the below , It Worked for me.
Once OpenSSL installed, Ran command prompt as administrator after the system reboot.[for the best I did both.. run as admin and system reboot]
did,
1.[Error Case]
C:\OpenSSL-Win64\bin>openssl req -new -key server.key -out server.csr

WARNING: can't open config file: C:\OpenSSL-Win64\bin\openssl.cnf
AND
Unable to load config info from C:\OpenSSL-Win64\bin\openssl.cnf
2.[Worked with Warning]
C:\OpenSSL-Win64\bin> openssl req -new -key server.key -out server.csr -config C:\OpenSSL-Win64\bin\openssl.cfg


[Warning message]: WARNING: can't open config file: C:\OpenSSL-Win64\bin\openssl.cnf

But prompted me for the Pass Phrase for server.key 
It worked for me.
I referred,This link for my assistance. 
Thank you.
","196310","<windows><openssl><public-key-encryption>","174","20","13","2019-09-26 20:06:07","","1","34","123671","","2018-10-29 14:57:45","2013-01-22 12:56:12",""
"14459078","Unable to load config info from /usr/local/ssl/openssl.cnf on Windows","While using OpenSSL on Windows:
openssl genrsa -out privatekey.pem 1024 -->
Created successfully
openssl req -new -x509 -key privatekey.pem -out publickey.cer -days 365 
---->

Showing error message as 

unable to load config info from /usr/local/ssl/openssl.cnf

","With the GnuWin32 tools I found the openssl.cnf under C:\gnuwin32\share
set OPENSSL_CONF=C:\gnuwin32\share\openssl.cnf

","196310","<windows><openssl><public-key-encryption>","174","11","13","2019-09-26 20:06:07","","1","34","123671","","2018-10-29 14:57:45","2013-01-22 12:56:12",""
"14459078","Unable to load config info from /usr/local/ssl/openssl.cnf on Windows","While using OpenSSL on Windows:
openssl genrsa -out privatekey.pem 1024 -->
Created successfully
openssl req -new -x509 -key privatekey.pem -out publickey.cer -days 365 
---->

Showing error message as 

unable to load config info from /usr/local/ssl/openssl.cnf

","For me on Windows 8, I simply found openssl.cnf file and copied it on the C drive. then:
openssl req -new -key server.key -out server.csr -config C:\openssl.cnf

Worked perfectly.
","196310","<windows><openssl><public-key-encryption>","174","8","13","2019-09-26 20:06:07","","1","34","123671","","2018-10-29 14:57:45","2013-01-22 12:56:12",""
"14459078","Unable to load config info from /usr/local/ssl/openssl.cnf on Windows","While using OpenSSL on Windows:
openssl genrsa -out privatekey.pem 1024 -->
Created successfully
openssl req -new -x509 -key privatekey.pem -out publickey.cer -days 365 
---->

Showing error message as 

unable to load config info from /usr/local/ssl/openssl.cnf

","For me put variable before calling did the trick:
OPENSSL_CONF=/usr/ssl/openssl.cnf openssl req -new -x509 -key privatekey.pem -out publickey.cer -days 365

","196310","<windows><openssl><public-key-encryption>","174","0","13","2019-09-26 20:06:07","","1","34","123671","","2018-10-29 14:57:45","2013-01-22 12:56:12",""
"14459078","Unable to load config info from /usr/local/ssl/openssl.cnf on Windows","While using OpenSSL on Windows:
openssl genrsa -out privatekey.pem 1024 -->
Created successfully
openssl req -new -x509 -key privatekey.pem -out publickey.cer -days 365 
---->

Showing error message as 

unable to load config info from /usr/local/ssl/openssl.cnf

","The only thing that worked for me in this situation was the self-created openssl.cnf file.
Here are the basics needed for this exercise (edit as needed):
#
# OpenSSL configuration file.
#

# Establish working directory.

dir                         = .

[ ca ]
default_ca                  = CA_default

[ CA_default ]
serial                      = $dir/serial
database                    = $dir/certindex.txt
new_certs_dir               = $dir/certs
certificate                 = $dir/cacert.pem
private_key                 = $dir/private/cakey.pem
default_days                = 365
default_md                  = md5
preserve                    = no
email_in_dn                 = no
nameopt                     = default_ca
certopt                     = default_ca
policy                      = policy_match

[ policy_match ]
countryName                 = match
stateOrProvinceName         = match
organizationName            = match
organizationalUnitName      = optional
commonName                  = supplied
emailAddress                = optional

[ req ]
default_bits                = 1024          # Size of keys
default_keyfile             = key.pem       # name of generated keys
default_md                  = md5               # message digest algorithm
string_mask                 = nombstr       # permitted characters
distinguished_name          = req_distinguished_name
req_extensions              = v3_req

[ req_distinguished_name ]
# Variable name             Prompt string
#-------------------------    ----------------------------------
0.organizationName          = Organization Name (company)
organizationalUnitName      = Organizational Unit Name (department, division)
emailAddress                = Email Address
emailAddress_max            = 40
localityName                = Locality Name (city, district)
stateOrProvinceName         = State or Province Name (full name)
countryName                 = Country Name (2 letter code)
countryName_min             = 2
countryName_max             = 2
commonName                  = Common Name (hostname, IP, or your name)
commonName_max              = 64

# Default values for the above, for consistency and less typing.
# Variable name             Value
#------------------------     ------------------------------
0.organizationName_default  = My Company
localityName_default        = My Town
stateOrProvinceName_default = State or Providence
countryName_default         = US

[ v3_ca ]
basicConstraints            = CA:TRUE
subjectKeyIdentifier        = hash
authorityKeyIdentifier      = keyid:always,issuer:always

[ v3_req ]
basicConstraints            = CA:FALSE
subjectKeyIdentifier        = hash

I hope that helps.
","196310","<windows><openssl><public-key-encryption>","174","15","13","2019-09-26 20:06:07","","1","34","123671","","2018-10-29 14:57:45","2013-01-22 12:56:12",""
"14459078","Unable to load config info from /usr/local/ssl/openssl.cnf on Windows","While using OpenSSL on Windows:
openssl genrsa -out privatekey.pem 1024 -->
Created successfully
openssl req -new -x509 -key privatekey.pem -out publickey.cer -days 365 
---->

Showing error message as 

unable to load config info from /usr/local/ssl/openssl.cnf

","In Windows 10, no need to restart nor run in Administrator's mode but instead set openssl config like so:
set OPENSSL_CONF=C:\Program Files (x86)\GnuWin32\share\openssl.cnf

Of course, if you are using GnuWin32
","196310","<windows><openssl><public-key-encryption>","174","31","13","2019-09-26 20:06:07","","1","34","123671","","2018-10-29 14:57:45","2013-01-22 12:56:12",""
"14459078","Unable to load config info from /usr/local/ssl/openssl.cnf on Windows","While using OpenSSL on Windows:
openssl genrsa -out privatekey.pem 1024 -->
Created successfully
openssl req -new -x509 -key privatekey.pem -out publickey.cer -days 365 
---->

Showing error message as 

unable to load config info from /usr/local/ssl/openssl.cnf

","In my case, I need to set the path of openssl.cnf file manually on the command using config option. So the command 
openssl req -x509 -config ""C:\Users\sk\Downloads\openssl-0.9.8k_X64\openssl.cnf"" -newkey rsa:4096 -keyout key.pem -out cert.pem -nodes -days 900

","196310","<windows><openssl><public-key-encryption>","174","4","13","2019-09-26 20:06:07","","1","34","123671","","2018-10-29 14:57:45","2013-01-22 12:56:12",""
"14459078","Unable to load config info from /usr/local/ssl/openssl.cnf on Windows","While using OpenSSL on Windows:
openssl genrsa -out privatekey.pem 1024 -->
Created successfully
openssl req -new -x509 -key privatekey.pem -out publickey.cer -days 365 
---->

Showing error message as 

unable to load config info from /usr/local/ssl/openssl.cnf

","If you're using Win32 OpenSSL v1.1.0g, setting up this environment variable:
set OPENSSL_CONF=C:\OpenSSL-Win32\bin\cnf\openssl.cnf

Before running this command with ""server.key"", successfully creating ""server.csr"":
openssl req -new -key server.key -out server.csr

","196310","<windows><openssl><public-key-encryption>","174","2","13","2019-09-26 20:06:07","","1","34","123671","","2018-10-29 14:57:45","2013-01-22 12:56:12",""
"14459078","Unable to load config info from /usr/local/ssl/openssl.cnf on Windows","While using OpenSSL on Windows:
openssl genrsa -out privatekey.pem 1024 -->
Created successfully
openssl req -new -x509 -key privatekey.pem -out publickey.cer -days 365 
---->

Showing error message as 

unable to load config info from /usr/local/ssl/openssl.cnf

","On the basic question of why openssl is not found:
Short answer:Some installation packages for openssl have a default openssl.cnf pre-included.  Other packages do not.
In the latter case you will include one from the link shown below;
You can enter additional user-specifics --DN name,etc-- as needed.
From https://www.openssl.org/docs/manmaster/man5/config.html,I quote directly:
""OPENSSL LIBRARY CONFIGURATION
Applications can automatically configure certain aspects of OpenSSL using the master OpenSSL configuration file, or optionally an alternative configuration file. The openssl utility includes this functionality: any sub command uses the master OpenSSL configuration file unless an option is used in the sub command to use an alternative configuration file.
To enable library configuration the default section needs to contain an appropriate line which points to the main configuration section. The default name is openssl_conf which is used by the openssl utility. Other applications may use an alternative name such as myapplication_conf. All library configuration lines appear in the default section at the start of the configuration file.
The configuration section should consist of a set of name value pairs which contain specific module configuration information. The name represents the name of the configuration module. The meaning of the value is module specific: it may, for example, represent a further configuration section containing configuration module specific information. E.g.:""
So it appears one must self configure openssl.cnf according to your
Distinguished Name (DN), along with other entries specific to your use.
Here is the template file from which you can generate openssl.cnf
with your specific entries.
One Application actually has a demo installation that includes a demo .cnf file.
Additionally, if you need to programmatically access .cnf files, you can
include appropriate headers --openssl/conf.h-- and parse your .cnf files
using 
CONF_modules_load_file(const char *filename, const char *appname,
                            unsigned long flags);

Here are docs for ""CONF_modules_load_file"";
","196310","<windows><openssl><public-key-encryption>","174","1","13","2019-09-26 20:06:07","","1","34","123671","","2018-10-29 14:57:45","2013-01-22 12:56:12",""
"10271197","How to extract public key using OpenSSL?","The following command generates a file which contains both public and private key:
openssl genrsa -des3 -out privkey.pem 2048

Source: here
With OpenSSL, the private key contains the public key information as well, so a public key doesn't need to be generated separately
How can we extract the public key from the privkey.pem file?
Thanks.
","openssl rsa -in privkey.pem -pubout > key.pub

That writes the public key to key.pub
","143577","<openssl><public-key-encryption><pki>","112","176","5","2018-03-17 13:29:29","10271238","0","28","608639","","2017-06-10 10:31:46","2012-04-22 19:12:57",""
"10271197","How to extract public key using OpenSSL?","The following command generates a file which contains both public and private key:
openssl genrsa -des3 -out privkey.pem 2048

Source: here
With OpenSSL, the private key contains the public key information as well, so a public key doesn't need to be generated separately
How can we extract the public key from the privkey.pem file?
Thanks.
","For those interested in the details - you can see what's inside the public key file (generated as explained above), by doing this:-
openssl rsa -noout -text -inform PEM -in key.pub -pubin

or for the private key file, this:-
openssl rsa -noout -text -in key.private

which outputs as text on the console the actual components of the key (modulus, exponents, primes, ...)
","143577","<openssl><public-key-encryption><pki>","112","5","5","2018-03-17 13:29:29","10271238","0","28","608639","","2017-06-10 10:31:46","2012-04-22 19:12:57",""
"10271197","How to extract public key using OpenSSL?","The following command generates a file which contains both public and private key:
openssl genrsa -des3 -out privkey.pem 2048

Source: here
With OpenSSL, the private key contains the public key information as well, so a public key doesn't need to be generated separately
How can we extract the public key from the privkey.pem file?
Thanks.
","Though, the above technique works for the general case, it didn't work on Amazon Web Services (AWS) PEM files. 
I did find in the AWS docs the following command works:
ssh-keygen -y
http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html
edit
Thanks @makenova for the complete line:
ssh-keygen -y -f key.pem > key.pub

","143577","<openssl><public-key-encryption><pki>","112","119","5","2018-03-17 13:29:29","10271238","0","28","608639","","2017-06-10 10:31:46","2012-04-22 19:12:57",""
"10271197","How to extract public key using OpenSSL?","The following command generates a file which contains both public and private key:
openssl genrsa -des3 -out privkey.pem 2048

Source: here
With OpenSSL, the private key contains the public key information as well, so a public key doesn't need to be generated separately
How can we extract the public key from the privkey.pem file?
Thanks.
","If your looking how to copy an Amazon AWS .pem keypair into a different 
region do the following:
openssl rsa -in .ssh/amazon-aws.pem -pubout > .ssh/amazon-aws.pub

Then
aws ec2 import-key-pair --key-name amazon-aws --public-key-material '$(cat .ssh/amazon-aws.pub)' --region us-west-2

","143577","<openssl><public-key-encryption><pki>","112","2","5","2018-03-17 13:29:29","10271238","0","28","608639","","2017-06-10 10:31:46","2012-04-22 19:12:57",""
"10271197","How to extract public key using OpenSSL?","The following command generates a file which contains both public and private key:
openssl genrsa -des3 -out privkey.pem 2048

Source: here
With OpenSSL, the private key contains the public key information as well, so a public key doesn't need to be generated separately
How can we extract the public key from the privkey.pem file?
Thanks.
","For AWS importing an existing public key,

Export from the .pem doing this... (on linux)
openssl rsa -in ./AWSGeneratedKey.pem -pubout -out PublicKey.pub


This will produce a file which if you open in a text editor looking something like this...
-----BEGIN PUBLIC KEY-----
MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAn/8y3uYCQxSXZ58OYceG
A4uPdGHZXDYOQR11xcHTrH13jJEzdkYZG8irtyG+m3Jb6f9F8WkmTZxl+4YtkJdN
9WyrKhxq4Vbt42BthadX3Ty/pKkJ81Qn8KjxWoL+SMaCGFzRlfWsFju9Q5C7+aTj
eEKyFujH5bUTGX87nULRfg67tmtxBlT8WWWtFe2O/wedBTGGQxXMpwh4ObjLl3Qh
bfwxlBbh2N4471TyrErv04lbNecGaQqYxGrY8Ot3l2V2fXCzghAQg26Hc4dR2wyA
PPgWq78db+gU3QsePeo2Ki5sonkcyQQQlCkL35Asbv8khvk90gist4kijPnVBCuv
cwIDAQAB
-----END PUBLIC KEY-----


However AWS will NOT accept this file.
You have to strip off the -----BEGIN PUBLIC KEY----- and -----END PUBLIC KEY----- from the file. Save it and import and it should work in AWS.

","143577","<openssl><public-key-encryption><pki>","112","1","5","2018-03-17 13:29:29","10271238","0","28","608639","","2017-06-10 10:31:46","2012-04-22 19:12:57",""
"28321712","gpg decryption fails with no secret key error","I have a gpg .key file that is used as passphrase for decrypting a .dat.pgp file. The encrypted .data.pgp file gets successfully decrypted on one server with same .key file using following command
cat xxx_gpg.key | /usr/bin/gpg --batch --quiet -o xxx.dat --passphrase-fd O -d xxx.dat.pgp

But, when I move same key to another server xxx_gpg.key and run same above command, I get following error - 
gpg: decryption failed: No secret key

EDIT: 
I find that gpg --list-secret-keys returns some data on server where it works but no results are returned for other server.
How can we configure secret key
","Looks like the secret key isn't on the other machine, so even with the right passphrase (read from a file) it wouldn't work.
These options should work, to 

Either copy the keyrings (maybe only secret keyring required, but public ring is public anyway) over to the other machine
Or export the secret key & then import it on the other machine

A few useful looking options from man gpg:

--export
  Either export all keys from all keyrings (default keyrings and  those
                registered  via  option --keyring), or if at least one name is given,
                those of the given name. The new keyring is written to STDOUT  or  to
                the  file  given  with  option --output. Use together with --armor to
                mail those keys.
--export-secret-keys
               Same as --export, but exports the secret keys instead.
--import
--fast-import
               Import/merge keys. This adds the given keys to the keyring. The  fast
                version is currently just a synonym.

And maybe

--keyring file
               Add file to the current list of keyrings. If file begins with a tilde
                and a slash, these are replaced by the $HOME directory. If the  file‐
                name  does not contain a slash, it is assumed to be in the GnuPG home
                directory (""~/.gnupg"" if --homedir or $GNUPGHOME is not used).
Note that this adds a keyring to the current list. If the  intent  is
                to  use  the  specified keyring alone, use --keyring along with --no-default-keyring.
--secret-keyring file
               Same as --keyring but for the secret keyrings.

","92361","<unix><encryption><public-key-encryption><gnupg>","30","18","3","2019-02-25 22:48:36","28345295","6","8","1742932","","2015-02-04 14:51:46","2015-02-04 12:42:35",""
"28321712","gpg decryption fails with no secret key error","I have a gpg .key file that is used as passphrase for decrypting a .dat.pgp file. The encrypted .data.pgp file gets successfully decrypted on one server with same .key file using following command
cat xxx_gpg.key | /usr/bin/gpg --batch --quiet -o xxx.dat --passphrase-fd O -d xxx.dat.pgp

But, when I move same key to another server xxx_gpg.key and run same above command, I get following error - 
gpg: decryption failed: No secret key

EDIT: 
I find that gpg --list-secret-keys returns some data on server where it works but no results are returned for other server.
How can we configure secret key
","I just ran into this issue, on the gpg CLI in Arch Linux.  I needed to kill the existing ""gpg-agent"" process, then everything was back to normal ( a new gpg-agent auto-launched; ...).
","92361","<unix><encryption><public-key-encryption><gnupg>","30","34","3","2019-02-25 22:48:36","28345295","6","8","1742932","","2015-02-04 14:51:46","2015-02-04 12:42:35",""
"28321712","gpg decryption fails with no secret key error","I have a gpg .key file that is used as passphrase for decrypting a .dat.pgp file. The encrypted .data.pgp file gets successfully decrypted on one server with same .key file using following command
cat xxx_gpg.key | /usr/bin/gpg --batch --quiet -o xxx.dat --passphrase-fd O -d xxx.dat.pgp

But, when I move same key to another server xxx_gpg.key and run same above command, I get following error - 
gpg: decryption failed: No secret key

EDIT: 
I find that gpg --list-secret-keys returns some data on server where it works but no results are returned for other server.
How can we configure secret key
","You can also sometimes get this error if you try to decrypt a secret while su-ed to a different user on a system with GPG 2.x installed.  This bug has been reported against RHEL 6 but there is no fix available; apparently this is due to some design decisions in GPG 2.x.  One workaround suggested in the bug report is to run the decryption inside of a tmux or screen session.  More reading here.
","92361","<unix><encryption><public-key-encryption><gnupg>","30","4","3","2019-02-25 22:48:36","28345295","6","8","1742932","","2015-02-04 14:51:46","2015-02-04 12:42:35",""
"4078902","Cracking short RSA keys","Given the following RSA keys, how does one go about determining what the values of p and q are?
Public Key: (10142789312725007, 5)
Private Key: (10142789312725007, 8114231289041741)

","Wolframalpha tells me that the factors are 100711409 and 100711423
I just wrote a naive Python script to bruteforce it.
As amdfan pointed out, starting from the top is a better approach:
p = 10142789312725007
for i in xrange(int(p**0.5+2), 3, -2):
    if p%i == 0:
        print i
        print p/i
        break

This could be heavily improved, but it still works without a problem. You could improve it by just testing primfactors, but for small values like yours this should be enough.
","79821","<math><rsa><encryption-asymmetric><public-key-encryption>","51","10","12","2019-09-26 13:45:33","4079137","7","41","717442","Roger Pate","2014-12-18 18:42:33","2010-11-02 14:58:06",""
"4078902","Cracking short RSA keys","Given the following RSA keys, how does one go about determining what the values of p and q are?
Public Key: (10142789312725007, 5)
Private Key: (10142789312725007, 8114231289041741)

","I suggest you read about the Quadratic Sieve. If you implement one yourself, this is surely worth the credit. If you understand the principles, you already gained something.
","79821","<math><rsa><encryption-asymmetric><public-key-encryption>","51","1","12","2019-09-26 13:45:33","4079137","7","41","717442","Roger Pate","2014-12-18 18:42:33","2010-11-02 14:58:06",""
"4078902","Cracking short RSA keys","Given the following RSA keys, how does one go about determining what the values of p and q are?
Public Key: (10142789312725007, 5)
Private Key: (10142789312725007, 8114231289041741)

","The definition of RSA tells you that the modulus n = pq. You know n so you just need to find two numbers p and q that multiply to produce n. You know that p and q are prime, so this is the prime factorisation problem.
You can solve this by brute force for relatively small numbers but the overall security of RSA depends on the fact that this problem is intractable in general.
","79821","<math><rsa><encryption-asymmetric><public-key-encryption>","51","4","12","2019-09-26 13:45:33","4079137","7","41","717442","Roger Pate","2014-12-18 18:42:33","2010-11-02 14:58:06",""
"4078902","Cracking short RSA keys","Given the following RSA keys, how does one go about determining what the values of p and q are?
Public Key: (10142789312725007, 5)
Private Key: (10142789312725007, 8114231289041741)

","Here's a relatively simple way to look at it (and one that is doable by hand). If you were to factor the number completely, then the highest factor you would need to consider is sqrt(N):
sqrt(10142789312725007) = 100711415.9999997567

The first prime below this is 100711409, just 6 below the sqrt(N). 
10142789312725007 / 100711409 = 100711423 

therefore these are two factors of N. Your professor made it pretty easy - the trick is to recognize that no one would choose a small p or q so starting your check from the bottom (as in the python script someone posted) is a bad idea. If it's going to be practical by hand, the large p and q must lie near sqrt(N).
","79821","<math><rsa><encryption-asymmetric><public-key-encryption>","51","15","12","2019-09-26 13:45:33","4079137","7","41","717442","Roger Pate","2014-12-18 18:42:33","2010-11-02 14:58:06",""
"4078902","Cracking short RSA keys","Given the following RSA keys, how does one go about determining what the values of p and q are?
Public Key: (10142789312725007, 5)
Private Key: (10142789312725007, 8114231289041741)

","You need to factorize the modulus, that's the first parameter of the public key, 10142789312725007. Brute force will do (check every odd number from 3 to sqrt(n) if it's a factor), although more sophisticated/fast algorithms exist.
Since the number is too big to fit into a conventional integer (even 64-bit), you might want a numeric library that supports arbitrary-lenth integers. For C, there's GMP and MPIR (more Windows-friendly). For PHP, there's Bignum. Python comes with a built-in one - the built-in integer datatype is already arbitrary-length.
","79821","<math><rsa><encryption-asymmetric><public-key-encryption>","51","0","12","2019-09-26 13:45:33","4079137","7","41","717442","Roger Pate","2014-12-18 18:42:33","2010-11-02 14:58:06",""
"4078902","Cracking short RSA keys","Given the following RSA keys, how does one go about determining what the values of p and q are?
Public Key: (10142789312725007, 5)
Private Key: (10142789312725007, 8114231289041741)

","Your teacher gave you: 

Public Key: (10142789312725007, 5)

which means
n = 10142789312725007
e = 5 

where n is the modulus and e is the public exponent.
In addition, you're given

Private Key: (10142789312725007, 8114231289041741)

meaning that
 d = 8114231289041741

where d is the decryption exponent that should remain secret. 
You can ""break"" RSA by knowing how to factor ""n"" into its ""p"" and ""q"" prime factors:
n = p * q

The easiest way is probably to check all odd numbers starting just below the square root of n:
Floor[Sqrt[10142789312725007]] = 100711415

You would get the first factor in 4 tries:
10142789312725007 mod 100711415 = 100711367
10142789312725007 mod 100711413 = 100711373
10142789312725007 mod 100711411 = 100711387
10142789312725007 mod 100711409 = 0 <-- Winner since it evenly divides n

So we have
 p = 100711409

Now,
 q = n / p 
   = 10142789312725007 / 100711409
   = 100711423

Why is this important? It's because d is a special number such that 
d = e^-1 mod phi(n)
  = e^-1 mod (p-1)*(q-1)

We can verify this
d * e = 40571156445208705 = 1 mod 10142789111302176

This is important because if you have a plaintext message m then the ciphertext is
c = m^e mod n

and you decrypt it by
m = c^d = (m^e)^d = (m^(e*d)) = (m^(e*e^-1)) = m^1 (mod n)

For example, I can ""encrypt"" the message 123456789 using your teacher's public key:
m = 123456789

This will give me the following ciphertext:
c = m^e mod n 
  = 123456789^5 mod 10142789312725007
  = 7487844069764171

(Note that ""e"" should be much larger in practice because for small values of ""m"" you don't even exceed n)
Anyways, now we have ""c"" and can reverse it with ""d""
m = c^d mod n
  = 7487844069764171^8114231289041741 mod 10142789312725007
  = 123456789

Obviously, you can't compute ""7487844069764171^8114231289041741"" directly because it has 128,808,202,574,088,302 digits, so you must use the modular exponentiation trick.
In the ""Real World"", n is obviously much larger. If you'd like to see a real example of how HTTPS uses RSA under the covers with a 617-digit n and an e of 65537, see my blog post ""The First Few Milliseconds of an HTTPS Connection.""
","79821","<math><rsa><encryption-asymmetric><public-key-encryption>","51","131","12","2019-09-26 13:45:33","4079137","7","41","717442","Roger Pate","2014-12-18 18:42:33","2010-11-02 14:58:06",""
"4078902","Cracking short RSA keys","Given the following RSA keys, how does one go about determining what the values of p and q are?
Public Key: (10142789312725007, 5)
Private Key: (10142789312725007, 8114231289041741)

","There are various fast algorithms to solve the problem of factoring n given n, e, and d. You can find a good description of one such algorithm in the Handbook of Applied Cryptography, Chapter 8, section 8.2.2. You can find these chapters online for free download here. The algorithm is essentially a careful elaboration of Henno Brandsma's answer to this very question.
UPDATE Sep 25, 2019:
In the comment below, user Imperishable Night suggests an alternative method which should be at least conceptually easier to understand.
He notes that usually e is small. In fact e is almost always 65537. In the case that e is small you can develop a quadratic equation in the unknown prime p and thus easily solve for it using e.g. the quadratic formula. To proceed, lets set x=p and solve for x, just to stick with convention. We know that ed = 1 mod phi(n), or equivalently 
ed - 1 = k * (p-1)*(q-1). Now setting x=p, and therefore n/x=q, multiplying both sides by x and rearranging terms we have
k*x2 + (d*e - k*n - k - 1)*x + k*n = 0.
 Now we have an equation
of the form ax2 + bx + c = 0 and we can solve for x using the quadratic formula. So we can try values of k in a small range around e and there should be only one integer solution to the quadratic, the solution for the correct k. 
Notes:

Everything must be an integer, thus the discriminant must be a perfect square or we can discard k and try the next one. Also, the numerator must be divisible by 2*k.
Sometimes the Carmichael lambda function is used in place of the Euler phi function. This complicates things just a little bit because we must now also guess the g = gcd(p-1, q-1). g is always even, is often 2, and is otherwise almost always a small multiple of 2.

UPDATE Sep 26, 2019:
Finding k is actually very easy when e is small. By taking the equation
ed - 1 = k * (p-1)*(q-1) and dividing both sides by n it is fairly easy to see that floor((ed-1)/n) + 1 == k. Now using equations
31 and 32 of M.J. Wiener's ""Cryptanalysis of Short RSA Secret Exponents"" one can directly recover p and q.
","79821","<math><rsa><encryption-asymmetric><public-key-encryption>","51","12","12","2019-09-26 13:45:33","4079137","7","41","717442","Roger Pate","2014-12-18 18:42:33","2010-11-02 14:58:06",""
"4078902","Cracking short RSA keys","Given the following RSA keys, how does one go about determining what the values of p and q are?
Public Key: (10142789312725007, 5)
Private Key: (10142789312725007, 8114231289041741)

","Here is a Java implementation of the fast factoring method from the Handbook of Applied Cryptography chapter 8 section 8.2.2 (thanks to GregS for finding it):
/**
 * Computes the factors of n given d and e.
 * Given are the public RSA key (n,d)
 * and the corresponding private RSA key (n,e).
 */
public class ComputeRsaFactors
{
    /**
     * Executes the program.
     *
     * @param args  The command line arguments.
     */
    public static void main(String[] args)
    {
        final BigInteger n = BigInteger.valueOf(10142789312725007L);
        final BigInteger d = BigInteger.valueOf(5);
        final BigInteger e = BigInteger.valueOf(8114231289041741L);

        final long t0 = System.currentTimeMillis();

        final BigInteger kTheta = d.multiply(e).subtract(BigInteger.ONE);
        final int exponentOfTwo = kTheta.getLowestSetBit();

        final Random random = new Random();
        BigInteger factor = BigInteger.ONE;
        do
        {
            final BigInteger a = nextA(n, random);

            for (int i = 1; i <= exponentOfTwo; i++)
            {
                final BigInteger exponent = kTheta.shiftRight(i);
                final BigInteger power = a.modPow(exponent, n);

                final BigInteger gcd = n.gcd(power.subtract(BigInteger.ONE));
                if (!factor.equals(BigInteger.ONE))
                {
                    break;
                }
            }
        }
        while (factor.equals(BigInteger.ONE));

        final long t1 = System.currentTimeMillis();

        System.out.printf(""%s %s (%dms)\n"", factor, n.divide(factor), t1 - t0);
    }


    private static BigInteger nextA(final BigInteger n, final Random random)
    {
        BigInteger r;
        do
        {
            r = new BigInteger(n.bitLength(), random);
        }
        while (r.signum() == 0 || r.compareTo(n) >= 0);
        return r;
    }
}

A typical output is
100711423 100711409 (3ms)

","79821","<math><rsa><encryption-asymmetric><public-key-encryption>","51","4","12","2019-09-26 13:45:33","4079137","7","41","717442","Roger Pate","2014-12-18 18:42:33","2010-11-02 14:58:06",""
"4078902","Cracking short RSA keys","Given the following RSA keys, how does one go about determining what the values of p and q are?
Public Key: (10142789312725007, 5)
Private Key: (10142789312725007, 8114231289041741)

","These two papers could possibly come in useful

Andrej Dujella - A Variant of Wiener's Attack on RSA
Andrej Dujella - Continued Fractions and RSA with small secret exponent

Came across them when I was doing some basic research on continued fractions.
","79821","<math><rsa><encryption-asymmetric><public-key-encryption>","51","3","12","2019-09-26 13:45:33","4079137","7","41","717442","Roger Pate","2014-12-18 18:42:33","2010-11-02 14:58:06",""
"4078902","Cracking short RSA keys","Given the following RSA keys, how does one go about determining what the values of p and q are?
Public Key: (10142789312725007, 5)
Private Key: (10142789312725007, 8114231289041741)

","The algorithm to do this is (and this will work for any example, not only this small one that can be factored easily by any computer):
ed - 1 is a multiple of phi(n) = (p-1)(q-1), so is at least a multiple of 4.
ed - 1 can be computed as 40571156445208704 which equals 2^7 * 316962159728193,
and we call s=7 and t = 316962159728193.
(in general: any even number is a power of 2 times an odd number).
Now pick a in [2,n-1) at random, and compute (by successive squaring modulo n) the sequence 
a^t (mod n), a^(2t) (mod n), a^(4t) (mod n).. until at most a^((2^7)*t) (mod n), 
where the last one is guaranteed to be 1, by the construction of e and d.
We now look for the first 1 in that sequence. The one before it will either be +1 or -1
    (a trivial root of 1, mod n) and we redo with a different a, or some number x which does not equal +1 or -1 mod n.
    In the latter case gcd(x-1, n) is a non-trivial divisor of n, and so p or q, and we are done. One can show that a random a will work with probability about 0.5, so we need a few tries, but not very many in general.
","79821","<math><rsa><encryption-asymmetric><public-key-encryption>","51","3","12","2019-09-26 13:45:33","4079137","7","41","717442","Roger Pate","2014-12-18 18:42:33","2010-11-02 14:58:06",""
"4078902","Cracking short RSA keys","Given the following RSA keys, how does one go about determining what the values of p and q are?
Public Key: (10142789312725007, 5)
Private Key: (10142789312725007, 8114231289041741)

","Sorry for the necromancy, but a friend asked me about this, and after pointing him here, I realized that I didn't really like any of the answers.  After factoring the modulus and getting the primes (p and q), you need to find the totient, which is (p-1)*(q-1).
Now, to find the private exponent, you find the inverse of the public exponent mod the totient.
public_exponent * private_exponent = 1 mod totient

And now you have your private key, that easy.  All of this except for the factorization can be done almost instantly for huge integers.
I wrote some code:
// tinyrsa.c
//
// apt-get install libgmp-dev
// yum install gmp-devel
//
// gcc tinyrsa.c -o tinyrsa -lm -lgmp

#include<stdio.h>
#include<gmp.h>

int main()
{
  // declare some multi-precision integers
  mpz_t pub_exp, priv_exp, modulus, totient, fac_p, fac_q, next_prime;

  mpz_init_set_str(pub_exp,""5"",10);
  mpz_init_set_str(modulus,""10142789312725007"",10);

  mpz_init(priv_exp);
  mpz_init(totient);
  mpz_init(fac_p);
  mpz_init(fac_q);

  // now we factor the modulus (the hard part)
  mpz_init(next_prime);
  mpz_sqrt(next_prime,modulus);
  unsigned long removed=0;
  while(!removed)
  {
    mpz_nextprime(next_prime,next_prime);
    removed=mpz_remove(fac_p,modulus,next_prime);
  }

  mpz_remove(fac_q,modulus,fac_p);
  // we now have p and q

  // the totient is (p-1)*(q-1)  
  mpz_t psub, qsub;
  mpz_init(psub);
  mpz_init(qsub);

  mpz_sub_ui(psub,fac_p,1);
  mpz_sub_ui(qsub,fac_q,1);
  mpz_mul(totient,psub,qsub);

  // inverse of the public key, mod the totient..
  mpz_invert(priv_exp,pub_exp,totient);

  gmp_printf(""private exponent:\n%Zd\n"",priv_exp);

}

The factorization algorithm I used is stupid, but concise, so grain of salt there.  In this particular example the code runs almost instantly, but that is largely because the instructor in question provided an example that uses two primes in a row, which isn't really realistic for RSA.
If you wanted to cut out my stupid iterative search, you could put in some real factorization algorithm, and factor keys likely up to around 256 bits in a reasonable amount of time.
","79821","<math><rsa><encryption-asymmetric><public-key-encryption>","51","1","12","2019-09-26 13:45:33","4079137","7","41","717442","Roger Pate","2014-12-18 18:42:33","2010-11-02 14:58:06",""
"4078902","Cracking short RSA keys","Given the following RSA keys, how does one go about determining what the values of p and q are?
Public Key: (10142789312725007, 5)
Private Key: (10142789312725007, 8114231289041741)

","There is a lot of bad speculation about factorization of large semi primes which go into brute force or sieving neither of which is required to factorise the semi prime. 64 bit takes 1 - 2 seconds on my pc, and 256 bit generally less than 2 days 
","79821","<math><rsa><encryption-asymmetric><public-key-encryption>","51","-1","12","2019-09-26 13:45:33","4079137","7","41","717442","Roger Pate","2014-12-18 18:42:33","2010-11-02 14:58:06",""
"8750780","Encrypting data with Public Key in node.js","I need to encrypt a string using a public key (pem file), and then sign it using a private key (also a pem). 
I am loading the pem files fine:
publicCert = fs.readFileSync(publicCertFile).toString();

but after hours of scouring google I can't seem to find a way to encrypt data using the public key. In php I simply call openssl_public_encrypt, but I don't see any corresponding function in node or in any modules. 
If anyone has any suggestions, let me know.
","How about this node-rsa module?  Here's a link to the test.js file that demonstrates usage.
","61899","<node.js><public-key-encryption><encryption-asymmetric>","36","7","6","2019-02-11 19:55:44","31061352","0","30","","","","2012-01-05 22:26:44",""
"8750780","Encrypting data with Public Key in node.js","I need to encrypt a string using a public key (pem file), and then sign it using a private key (also a pem). 
I am loading the pem files fine:
publicCert = fs.readFileSync(publicCertFile).toString();

but after hours of scouring google I can't seem to find a way to encrypt data using the public key. In php I simply call openssl_public_encrypt, but I don't see any corresponding function in node or in any modules. 
If anyone has any suggestions, let me know.
","The updated public/private decrypt and encryption module is URSA. node-rsa module is outdated.

This Node module provides a fairly complete set of wrappers for the
  RSA public/private key crypto functionality of OpenSSL.

npm install ursa
See: https://github.com/Obvious/ursa
","61899","<node.js><public-key-encryption><encryption-asymmetric>","36","8","6","2019-02-11 19:55:44","31061352","0","30","","","","2012-01-05 22:26:44",""
"8750780","Encrypting data with Public Key in node.js","I need to encrypt a string using a public key (pem file), and then sign it using a private key (also a pem). 
I am loading the pem files fine:
publicCert = fs.readFileSync(publicCertFile).toString();

but after hours of scouring google I can't seem to find a way to encrypt data using the public key. In php I simply call openssl_public_encrypt, but I don't see any corresponding function in node or in any modules. 
If anyone has any suggestions, let me know.
","TL;DR: Ursa is your best bet. Its really funky that this doesn't come standard with node crypto.
Every other solutions I found either doesn't work in windows or aren't actually encryption libraries. Ursa, recommended by Louie, looks like the best bet. If you don't care about windows, you're even more golden. Note on Ursa, I had to install Open SSL along with something called ""Visual C++ 2008 Redistributables"" in order to get the npm install to work. Get that junk here: http://slproweb.com/products/Win32OpenSSL.html 
The breakdown:

Annoying additional manual installation steps for windows

https://github.com/Obvious/ursa - probably the best of the lot

Not compatible with windows

https://npmjs.org/package/rsautl - says BADPLATFORM
https://github.com/katyo/node-rsa - node-waf isn't available on windows
https://github.com/paspao/simple_rsa_encrypt - unistd.h isn't on windows
https://npmjs.org/package/pripub - large amounts of linker errors, also not on github

Not encryption libraries

https://github.com/substack/secure-peer
https://github.com/substack/rsa-json - just generates keys, doesn't use them
https://github.com/substack/rsa-unpack - just unpacks PEM strings


This is literally all I could find.
","61899","<node.js><public-key-encryption><encryption-asymmetric>","36","5","6","2019-02-11 19:55:44","31061352","0","30","","","","2012-01-05 22:26:44",""
"8750780","Encrypting data with Public Key in node.js","I need to encrypt a string using a public key (pem file), and then sign it using a private key (also a pem). 
I am loading the pem files fine:
publicCert = fs.readFileSync(publicCertFile).toString();

but after hours of scouring google I can't seem to find a way to encrypt data using the public key. In php I simply call openssl_public_encrypt, but I don't see any corresponding function in node or in any modules. 
If anyone has any suggestions, let me know.
","This is not supported natively by node version v0.11.13 or below but it seems that next version of node ( a.k.a v0.12) will support this.
Here is the clue:  https://github.com/joyent/node/blob/v0.12/lib/crypto.js#L358
see   crypto.publicEncrypt and crypto.privateDecrypt 
Here is the future documentation for this 
https://github.com/joyent/node/blob/7c0419730b237dbfa0ec4e6fb33a99ff01825a8f/doc/api/crypto.markdown#cryptopublicencryptpublic_key-buffer
","61899","<node.js><public-key-encryption><encryption-asymmetric>","36","3","6","2019-02-11 19:55:44","31061352","0","30","","","","2012-01-05 22:26:44",""
"8750780","Encrypting data with Public Key in node.js","I need to encrypt a string using a public key (pem file), and then sign it using a private key (also a pem). 
I am loading the pem files fine:
publicCert = fs.readFileSync(publicCertFile).toString();

but after hours of scouring google I can't seem to find a way to encrypt data using the public key. In php I simply call openssl_public_encrypt, but I don't see any corresponding function in node or in any modules. 
If anyone has any suggestions, let me know.
","No library necessary friends,
Enter crypto
Here's a janky little module you could use to encrypt/decrypt strings with RSA keys:
var crypto = require(""crypto"");
var path = require(""path"");
var fs = require(""fs"");

var encryptStringWithRsaPublicKey = function(toEncrypt, relativeOrAbsolutePathToPublicKey) {
    var absolutePath = path.resolve(relativeOrAbsolutePathToPublicKey);
    var publicKey = fs.readFileSync(absolutePath, ""utf8"");
    var buffer = Buffer.from(toEncrypt);
    var encrypted = crypto.publicEncrypt(publicKey, buffer);
    return encrypted.toString(""base64"");
};

var decryptStringWithRsaPrivateKey = function(toDecrypt, relativeOrAbsolutePathtoPrivateKey) {
    var absolutePath = path.resolve(relativeOrAbsolutePathtoPrivateKey);
    var privateKey = fs.readFileSync(absolutePath, ""utf8"");
    var buffer = Buffer.from(toDecrypt, ""base64"");
    var decrypted = crypto.privateDecrypt(privateKey, buffer);
    return decrypted.toString(""utf8"");
};

module.exports = {
    encryptStringWithRsaPublicKey: encryptStringWithRsaPublicKey,
    decryptStringWithRsaPrivateKey: decryptStringWithRsaPrivateKey
}

I would recommend not using synchronous fs methods where possible, and you could use Promises to make this better, but for simple use cases this is the approach that I have seen work and would take
","61899","<node.js><public-key-encryption><encryption-asymmetric>","36","113","6","2019-02-11 19:55:44","31061352","0","30","","","","2012-01-05 22:26:44",""
"8750780","Encrypting data with Public Key in node.js","I need to encrypt a string using a public key (pem file), and then sign it using a private key (also a pem). 
I am loading the pem files fine:
publicCert = fs.readFileSync(publicCertFile).toString();

but after hours of scouring google I can't seem to find a way to encrypt data using the public key. In php I simply call openssl_public_encrypt, but I don't see any corresponding function in node or in any modules. 
If anyone has any suggestions, let me know.
","I tested this in Node 10, you can use encrypt/decrypt functions (small changes on Jacob's answer)
const crypto = require('crypto')
const path = require('path')
const fs = require('fs')

function encrypt(toEncrypt, relativeOrAbsolutePathToPublicKey) {
  const absolutePath = path.resolve(relativeOrAbsolutePathToPublicKey)
  const publicKey = fs.readFileSync(absolutePath, 'utf8')
  const buffer = Buffer.from(toEncrypt, 'utf8')
  const encrypted = crypto.publicEncrypt(publicKey, buffer)
  return encrypted.toString('base64')
}

function decrypt(toDecrypt, relativeOrAbsolutePathtoPrivateKey) {
  const absolutePath = path.resolve(relativeOrAbsolutePathtoPrivateKey)
  const privateKey = fs.readFileSync(absolutePath, 'utf8')
  const buffer = Buffer.from(toDecrypt, 'base64')
  const decrypted = crypto.privateDecrypt(
    {
      key: privateKey.toString(),
      passphrase: '',
    },
    buffer,
  )
  return decrypted.toString('utf8')
}

const enc = encrypt('hello', `public.pem`)
console.log('enc', enc)

const dec = decrypt(enc, `private.pem`)
console.log('dec', dec)


For the keys you can generate them with
const { writeFileSync } = require('fs')
const { generateKeyPairSync } = require('crypto')

function generateKeys() {
  const { privateKey, publicKey } = generateKeyPairSync('rsa', {
    modulusLength: 4096,
    publicKeyEncoding: {
      type: 'pkcs1',
      format: 'pem',
    },
    privateKeyEncoding: {
      type: 'pkcs1',
      format: 'pem',
      cipher: 'aes-256-cbc',
      passphrase: '',
    },
  })

  writeFileSync('private.pem', privateKey)
  writeFileSync('public.pem', publicKey)
}

","61899","<node.js><public-key-encryption><encryption-asymmetric>","36","9","6","2019-02-11 19:55:44","31061352","0","30","","","","2012-01-05 22:26:44",""
"12471999","RSA Encryption Decryption in Android","I am implementing a demo for RSA Encryption and Decryption in Android. I can Perform Encryption very well, but In Decryption I get an Exception: >>java.security.InvalidKeyException: unknown key type passed to RSA.
    KeyPairGenerator kpg;
    KeyPair kp;
    PublicKey publicKey;
    PrivateKey privateKey;
    byte [] encryptedBytes,decryptedBytes;
    Cipher cipher,cipher1;
    String encrypted,decrypted;

    public String RSAEncrypt (final String plain) throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException, IllegalBlockSizeException, BadPaddingException 
    {
        kpg = KeyPairGenerator.getInstance(""RSA"");
        kpg.initialize(1024);
        kp = kpg.genKeyPair();
        publicKey = kp.getPublic();
        privateKey = kp.getPrivate();

        cipher = Cipher.getInstance(""RSA"");
        cipher.init(Cipher.ENCRYPT_MODE, publicKey);
        encryptedBytes = cipher.doFinal(plain.getBytes());
        encrypted = new String(encryptedBytes);
        System.out.println(""EEncrypted?????""+encrypted);
        return encrypted;

    }

    public String RSADecrypt (final String result) throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException, IllegalBlockSizeException, BadPaddingException 
    {

        cipher1=Cipher.getInstance(""RSA"");
        cipher1.init(Cipher.DECRYPT_MODE, privateKey);
        decryptedBytes = cipher1.doFinal(result.getBytes());
        decrypted = new String(decryptedBytes);
        System.out.println(""DDecrypted?????""+decrypted);
        return decrypted;

    }

And I am calling the function from here:
encrypt.setOnClickListener(new OnClickListener()
        { 
            public void onClick(View arg0) 
            {
                    try
                    {
                        RSAEncrypt rsaencrypt=new RSAEncrypt();
                        rsaencrypt.RSAEncrypt(name);

                        result=rsaencrypt.RSAEncrypt(name);
                        Toast.makeText(getBaseContext(), result.toString(),Toast.LENGTH_SHORT).show();

                        System.out.println(""Result:""+result);
                    }
                    catch(Exception e)
                    {
                        e.printStackTrace();
                        Toast.makeText(getBaseContext(), e.toString(),Toast.LENGTH_LONG).show();
                    }
            }
        });

        decrypt.setOnClickListener(new OnClickListener()
        { 
            public void onClick(View arg0) 
            {
                {
                    try
                    {
                        RSAEncrypt rsadecrypt=new RSAEncrypt();

                        rsadecrypt.RSADecrypt(result);

                        ans=rsadecrypt.RSADecrypt(result);
                        System.out.println(""Result is""+ans);
                        Toast.makeText(getBaseContext(), ans.toString(),Toast.LENGTH_LONG).show();
                    }
                    catch(Exception e)
                    {
                        e.printStackTrace();
                        Toast.makeText(getBaseContext(), e.toString(),Toast.LENGTH_LONG).show();
                        System.out.println(""Exception is>>""+e);
                    }
            }
        });

","I think the problem is that you should use the same key pair to encrypt and decrypt the cipher. Referring to the JavaDoc:
 genKeyPair() This will generate a new key pair every time it is called.

","61880","<android><rsa><public-key-encryption><encryption>","43","1","5","2018-06-13 14:25:58","12474193","0","30","5002633","","2016-01-28 10:45:43","2012-09-18 07:08:10",""
"12471999","RSA Encryption Decryption in Android","I am implementing a demo for RSA Encryption and Decryption in Android. I can Perform Encryption very well, but In Decryption I get an Exception: >>java.security.InvalidKeyException: unknown key type passed to RSA.
    KeyPairGenerator kpg;
    KeyPair kp;
    PublicKey publicKey;
    PrivateKey privateKey;
    byte [] encryptedBytes,decryptedBytes;
    Cipher cipher,cipher1;
    String encrypted,decrypted;

    public String RSAEncrypt (final String plain) throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException, IllegalBlockSizeException, BadPaddingException 
    {
        kpg = KeyPairGenerator.getInstance(""RSA"");
        kpg.initialize(1024);
        kp = kpg.genKeyPair();
        publicKey = kp.getPublic();
        privateKey = kp.getPrivate();

        cipher = Cipher.getInstance(""RSA"");
        cipher.init(Cipher.ENCRYPT_MODE, publicKey);
        encryptedBytes = cipher.doFinal(plain.getBytes());
        encrypted = new String(encryptedBytes);
        System.out.println(""EEncrypted?????""+encrypted);
        return encrypted;

    }

    public String RSADecrypt (final String result) throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException, IllegalBlockSizeException, BadPaddingException 
    {

        cipher1=Cipher.getInstance(""RSA"");
        cipher1.init(Cipher.DECRYPT_MODE, privateKey);
        decryptedBytes = cipher1.doFinal(result.getBytes());
        decrypted = new String(decryptedBytes);
        System.out.println(""DDecrypted?????""+decrypted);
        return decrypted;

    }

And I am calling the function from here:
encrypt.setOnClickListener(new OnClickListener()
        { 
            public void onClick(View arg0) 
            {
                    try
                    {
                        RSAEncrypt rsaencrypt=new RSAEncrypt();
                        rsaencrypt.RSAEncrypt(name);

                        result=rsaencrypt.RSAEncrypt(name);
                        Toast.makeText(getBaseContext(), result.toString(),Toast.LENGTH_SHORT).show();

                        System.out.println(""Result:""+result);
                    }
                    catch(Exception e)
                    {
                        e.printStackTrace();
                        Toast.makeText(getBaseContext(), e.toString(),Toast.LENGTH_LONG).show();
                    }
            }
        });

        decrypt.setOnClickListener(new OnClickListener()
        { 
            public void onClick(View arg0) 
            {
                {
                    try
                    {
                        RSAEncrypt rsadecrypt=new RSAEncrypt();

                        rsadecrypt.RSADecrypt(result);

                        ans=rsadecrypt.RSADecrypt(result);
                        System.out.println(""Result is""+ans);
                        Toast.makeText(getBaseContext(), ans.toString(),Toast.LENGTH_LONG).show();
                    }
                    catch(Exception e)
                    {
                        e.printStackTrace();
                        Toast.makeText(getBaseContext(), e.toString(),Toast.LENGTH_LONG).show();
                        System.out.println(""Exception is>>""+e);
                    }
            }
        });

","In RSA you should use the public key for encryption and the private key for decryption. 
Your sample code uses for encryption and decryption the public key - this can not work.
Hence in the decryption part you should initialize the cipher this way:
cipher1.init(Cipher.DECRYPT_MODE, privateKey);

Furthermor your code has a second significant bug:
You are converting a byte array with binary content to a String.
Never ever convert binary data to a String!
Strings are for string characters, not binary data. If you want to pack binary data into a String encode it to printable characters for example using Hex or Base64.
The following example uses the hexadecimal encoder fro org.apache.common.codec package - a third party library with has to be installed.
public byte[] RSAEncrypt(final String plain) throws NoSuchAlgorithmException, NoSuchPaddingException,
        InvalidKeyException, IllegalBlockSizeException, BadPaddingException {
    kpg = KeyPairGenerator.getInstance(""RSA"");
    kpg.initialize(2048);
    kp = kpg.genKeyPair();
    publicKey = kp.getPublic();
    privateKey = kp.getPrivate();

    cipher = Cipher.getInstance(""RSA"");
    cipher.init(Cipher.ENCRYPT_MODE, publicKey);
    encryptedBytes = cipher.doFinal(plain.getBytes());
    System.out.println(""EEncrypted?????"" + new String(org.apache.commons.codec.binary.Hex.encodeHex(encryptedBytes)));
    return encryptedBytes;
}

public String RSADecrypt(final byte[] encryptedBytes) throws NoSuchAlgorithmException, NoSuchPaddingException,
        InvalidKeyException, IllegalBlockSizeException, BadPaddingException {

    cipher1 = Cipher.getInstance(""RSA"");
    cipher1.init(Cipher.DECRYPT_MODE, privateKey);
    decryptedBytes = cipher1.doFinal(encryptedBytes);
    decrypted = new String(decryptedBytes);
    System.out.println(""DDecrypted?????"" + decrypted);
    return decrypted;
}

","61880","<android><rsa><public-key-encryption><encryption>","43","41","5","2018-06-13 14:25:58","12474193","0","30","5002633","","2016-01-28 10:45:43","2012-09-18 07:08:10",""
"12471999","RSA Encryption Decryption in Android","I am implementing a demo for RSA Encryption and Decryption in Android. I can Perform Encryption very well, but In Decryption I get an Exception: >>java.security.InvalidKeyException: unknown key type passed to RSA.
    KeyPairGenerator kpg;
    KeyPair kp;
    PublicKey publicKey;
    PrivateKey privateKey;
    byte [] encryptedBytes,decryptedBytes;
    Cipher cipher,cipher1;
    String encrypted,decrypted;

    public String RSAEncrypt (final String plain) throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException, IllegalBlockSizeException, BadPaddingException 
    {
        kpg = KeyPairGenerator.getInstance(""RSA"");
        kpg.initialize(1024);
        kp = kpg.genKeyPair();
        publicKey = kp.getPublic();
        privateKey = kp.getPrivate();

        cipher = Cipher.getInstance(""RSA"");
        cipher.init(Cipher.ENCRYPT_MODE, publicKey);
        encryptedBytes = cipher.doFinal(plain.getBytes());
        encrypted = new String(encryptedBytes);
        System.out.println(""EEncrypted?????""+encrypted);
        return encrypted;

    }

    public String RSADecrypt (final String result) throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException, IllegalBlockSizeException, BadPaddingException 
    {

        cipher1=Cipher.getInstance(""RSA"");
        cipher1.init(Cipher.DECRYPT_MODE, privateKey);
        decryptedBytes = cipher1.doFinal(result.getBytes());
        decrypted = new String(decryptedBytes);
        System.out.println(""DDecrypted?????""+decrypted);
        return decrypted;

    }

And I am calling the function from here:
encrypt.setOnClickListener(new OnClickListener()
        { 
            public void onClick(View arg0) 
            {
                    try
                    {
                        RSAEncrypt rsaencrypt=new RSAEncrypt();
                        rsaencrypt.RSAEncrypt(name);

                        result=rsaencrypt.RSAEncrypt(name);
                        Toast.makeText(getBaseContext(), result.toString(),Toast.LENGTH_SHORT).show();

                        System.out.println(""Result:""+result);
                    }
                    catch(Exception e)
                    {
                        e.printStackTrace();
                        Toast.makeText(getBaseContext(), e.toString(),Toast.LENGTH_LONG).show();
                    }
            }
        });

        decrypt.setOnClickListener(new OnClickListener()
        { 
            public void onClick(View arg0) 
            {
                {
                    try
                    {
                        RSAEncrypt rsadecrypt=new RSAEncrypt();

                        rsadecrypt.RSADecrypt(result);

                        ans=rsadecrypt.RSADecrypt(result);
                        System.out.println(""Result is""+ans);
                        Toast.makeText(getBaseContext(), ans.toString(),Toast.LENGTH_LONG).show();
                    }
                    catch(Exception e)
                    {
                        e.printStackTrace();
                        Toast.makeText(getBaseContext(), e.toString(),Toast.LENGTH_LONG).show();
                        System.out.println(""Exception is>>""+e);
                    }
            }
        });

","when using RSAEcvypt method, its fill PublicKey and private key.
And when your Decrypt your generated byte[], your publicKey and privateKey being NULL.
Because of that you get this error.
You should use your keys static;
enter code here

KeyPairGenerator kpg;
KeyPair kp;
static PublicKey publicKey;
static PrivateKey privateKey;
byte [] encryptedBytes,decryptedBytes;
Cipher cipher,cipher1;
String encrypted,decrypted;

","61880","<android><rsa><public-key-encryption><encryption>","43","0","5","2018-06-13 14:25:58","12474193","0","30","5002633","","2016-01-28 10:45:43","2012-09-18 07:08:10",""
"12471999","RSA Encryption Decryption in Android","I am implementing a demo for RSA Encryption and Decryption in Android. I can Perform Encryption very well, but In Decryption I get an Exception: >>java.security.InvalidKeyException: unknown key type passed to RSA.
    KeyPairGenerator kpg;
    KeyPair kp;
    PublicKey publicKey;
    PrivateKey privateKey;
    byte [] encryptedBytes,decryptedBytes;
    Cipher cipher,cipher1;
    String encrypted,decrypted;

    public String RSAEncrypt (final String plain) throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException, IllegalBlockSizeException, BadPaddingException 
    {
        kpg = KeyPairGenerator.getInstance(""RSA"");
        kpg.initialize(1024);
        kp = kpg.genKeyPair();
        publicKey = kp.getPublic();
        privateKey = kp.getPrivate();

        cipher = Cipher.getInstance(""RSA"");
        cipher.init(Cipher.ENCRYPT_MODE, publicKey);
        encryptedBytes = cipher.doFinal(plain.getBytes());
        encrypted = new String(encryptedBytes);
        System.out.println(""EEncrypted?????""+encrypted);
        return encrypted;

    }

    public String RSADecrypt (final String result) throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException, IllegalBlockSizeException, BadPaddingException 
    {

        cipher1=Cipher.getInstance(""RSA"");
        cipher1.init(Cipher.DECRYPT_MODE, privateKey);
        decryptedBytes = cipher1.doFinal(result.getBytes());
        decrypted = new String(decryptedBytes);
        System.out.println(""DDecrypted?????""+decrypted);
        return decrypted;

    }

And I am calling the function from here:
encrypt.setOnClickListener(new OnClickListener()
        { 
            public void onClick(View arg0) 
            {
                    try
                    {
                        RSAEncrypt rsaencrypt=new RSAEncrypt();
                        rsaencrypt.RSAEncrypt(name);

                        result=rsaencrypt.RSAEncrypt(name);
                        Toast.makeText(getBaseContext(), result.toString(),Toast.LENGTH_SHORT).show();

                        System.out.println(""Result:""+result);
                    }
                    catch(Exception e)
                    {
                        e.printStackTrace();
                        Toast.makeText(getBaseContext(), e.toString(),Toast.LENGTH_LONG).show();
                    }
            }
        });

        decrypt.setOnClickListener(new OnClickListener()
        { 
            public void onClick(View arg0) 
            {
                {
                    try
                    {
                        RSAEncrypt rsadecrypt=new RSAEncrypt();

                        rsadecrypt.RSADecrypt(result);

                        ans=rsadecrypt.RSADecrypt(result);
                        System.out.println(""Result is""+ans);
                        Toast.makeText(getBaseContext(), ans.toString(),Toast.LENGTH_LONG).show();
                    }
                    catch(Exception e)
                    {
                        e.printStackTrace();
                        Toast.makeText(getBaseContext(), e.toString(),Toast.LENGTH_LONG).show();
                        System.out.println(""Exception is>>""+e);
                    }
            }
        });

","My class:
package com.infovale.cripto;

import java.io.UnsupportedEncodingException;
import java.math.BigInteger;
import java.security.InvalidKeyException;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.NoSuchAlgorithmException;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.util.Arrays;

import javax.crypto.BadPaddingException;
import javax.crypto.Cipher;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.NoSuchPaddingException;

public class RSA {

KeyPairGenerator kpg;
KeyPair kp;
PublicKey publicKey;
PrivateKey privateKey;
byte[] encryptedBytes, decryptedBytes;
Cipher cipher, cipher1;
String encrypted, decrypted;

public String Encrypt (String plain) throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException, IllegalBlockSizeException, BadPaddingException 
{
    kpg = KeyPairGenerator.getInstance(""RSA"");
    kpg.initialize(1024);
    kp = kpg.genKeyPair();
    publicKey = kp.getPublic();
    privateKey = kp.getPrivate();

    cipher = Cipher.getInstance(""RSA"");
    cipher.init(Cipher.ENCRYPT_MODE, publicKey);
    encryptedBytes = cipher.doFinal(plain.getBytes());

    encrypted = bytesToString(encryptedBytes);
    return encrypted;

}

public String Decrypt (String result) throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException, IllegalBlockSizeException, BadPaddingException 
{           

    cipher1=Cipher.getInstance(""RSA"");
    cipher1.init(Cipher.DECRYPT_MODE, privateKey);
    decryptedBytes = cipher1.doFinal(stringToBytes(result));
    decrypted = new String(decryptedBytes);
    return decrypted;

}

public  String bytesToString(byte[] b) {
    byte[] b2 = new byte[b.length + 1];
    b2[0] = 1;
    System.arraycopy(b, 0, b2, 1, b.length);
    return new BigInteger(b2).toString(36);
}

public  byte[] stringToBytes(String s) {
    byte[] b2 = new BigInteger(s, 36).toByteArray();
    return Arrays.copyOfRange(b2, 1, b2.length);
}
}

","61880","<android><rsa><public-key-encryption><encryption>","43","11","5","2018-06-13 14:25:58","12474193","0","30","5002633","","2016-01-28 10:45:43","2012-09-18 07:08:10",""
"12471999","RSA Encryption Decryption in Android","I am implementing a demo for RSA Encryption and Decryption in Android. I can Perform Encryption very well, but In Decryption I get an Exception: >>java.security.InvalidKeyException: unknown key type passed to RSA.
    KeyPairGenerator kpg;
    KeyPair kp;
    PublicKey publicKey;
    PrivateKey privateKey;
    byte [] encryptedBytes,decryptedBytes;
    Cipher cipher,cipher1;
    String encrypted,decrypted;

    public String RSAEncrypt (final String plain) throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException, IllegalBlockSizeException, BadPaddingException 
    {
        kpg = KeyPairGenerator.getInstance(""RSA"");
        kpg.initialize(1024);
        kp = kpg.genKeyPair();
        publicKey = kp.getPublic();
        privateKey = kp.getPrivate();

        cipher = Cipher.getInstance(""RSA"");
        cipher.init(Cipher.ENCRYPT_MODE, publicKey);
        encryptedBytes = cipher.doFinal(plain.getBytes());
        encrypted = new String(encryptedBytes);
        System.out.println(""EEncrypted?????""+encrypted);
        return encrypted;

    }

    public String RSADecrypt (final String result) throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException, IllegalBlockSizeException, BadPaddingException 
    {

        cipher1=Cipher.getInstance(""RSA"");
        cipher1.init(Cipher.DECRYPT_MODE, privateKey);
        decryptedBytes = cipher1.doFinal(result.getBytes());
        decrypted = new String(decryptedBytes);
        System.out.println(""DDecrypted?????""+decrypted);
        return decrypted;

    }

And I am calling the function from here:
encrypt.setOnClickListener(new OnClickListener()
        { 
            public void onClick(View arg0) 
            {
                    try
                    {
                        RSAEncrypt rsaencrypt=new RSAEncrypt();
                        rsaencrypt.RSAEncrypt(name);

                        result=rsaencrypt.RSAEncrypt(name);
                        Toast.makeText(getBaseContext(), result.toString(),Toast.LENGTH_SHORT).show();

                        System.out.println(""Result:""+result);
                    }
                    catch(Exception e)
                    {
                        e.printStackTrace();
                        Toast.makeText(getBaseContext(), e.toString(),Toast.LENGTH_LONG).show();
                    }
            }
        });

        decrypt.setOnClickListener(new OnClickListener()
        { 
            public void onClick(View arg0) 
            {
                {
                    try
                    {
                        RSAEncrypt rsadecrypt=new RSAEncrypt();

                        rsadecrypt.RSADecrypt(result);

                        ans=rsadecrypt.RSADecrypt(result);
                        System.out.println(""Result is""+ans);
                        Toast.makeText(getBaseContext(), ans.toString(),Toast.LENGTH_LONG).show();
                    }
                    catch(Exception e)
                    {
                        e.printStackTrace();
                        Toast.makeText(getBaseContext(), e.toString(),Toast.LENGTH_LONG).show();
                        System.out.println(""Exception is>>""+e);
                    }
            }
        });

","Here is an example for Android of:

generating a private/public RSA key pair
encrypting a string
decrypting the encrypted string

These methods deal with all the base 64 encoding/decoding. 
    public void TestEncryptData(String dataToEncrypt) {
        // generate a new public/private key pair to test with (note. you should only do this once and keep them!)
        KeyPair kp = getKeyPair();

        PublicKey publicKey = kp.getPublic();
        byte[] publicKeyBytes = publicKey.getEncoded();
        String publicKeyBytesBase64 = new String(Base64.encode(publicKeyBytes, Base64.DEFAULT));

        PrivateKey privateKey = kp.getPrivate();
        byte[] privateKeyBytes = privateKey.getEncoded();
        String privateKeyBytesBase64 = new String(Base64.encode(privateKeyBytes, Base64.DEFAULT));

        // test encryption
        String encrypted = encryptRSAToString(dataToEncrypt, publicKeyBytesBase64);

        // test decryption
        String decrypted = decryptRSAToString(encrypted, privateKeyBytesBase64);
    }

    public static KeyPair getKeyPair() {
        KeyPair kp = null;
        try {
            KeyPairGenerator kpg = KeyPairGenerator.getInstance(""RSA"");
            kpg.initialize(2048);
            kp = kpg.generateKeyPair();
        } catch (Exception e) {
            e.printStackTrace();
        }

        return kp;
    }

    public static String encryptRSAToString(String clearText, String publicKey) {
        String encryptedBase64 = """";
        try {
            KeyFactory keyFac = KeyFactory.getInstance(""RSA"");
            KeySpec keySpec = new X509EncodedKeySpec(Base64.decode(publicKey.trim().getBytes(), Base64.DEFAULT));
            Key key = keyFac.generatePublic(keySpec);

            // get an RSA cipher object and print the provider
            final Cipher cipher = Cipher.getInstance(""RSA/ECB/OAEPWITHSHA-256ANDMGF1PADDING"");
            // encrypt the plain text using the public key
            cipher.init(Cipher.ENCRYPT_MODE, key);

            byte[] encryptedBytes = cipher.doFinal(clearText.getBytes(""UTF-8""));
            encryptedBase64 = new String(Base64.encode(encryptedBytes, Base64.DEFAULT));
        } catch (Exception e) {
            e.printStackTrace();
        }

        return encryptedBase64.replaceAll(""(\\r|\\n)"", """");
    }

    public static String decryptRSAToString(String encryptedBase64, String privateKey) {

        String decryptedString = """";
        try {
            KeyFactory keyFac = KeyFactory.getInstance(""RSA"");
            KeySpec keySpec = new PKCS8EncodedKeySpec(Base64.decode(privateKey.trim().getBytes(), Base64.DEFAULT));
            Key key = keyFac.generatePrivate(keySpec);

            // get an RSA cipher object and print the provider
            final Cipher cipher = Cipher.getInstance(""RSA/ECB/OAEPWITHSHA-256ANDMGF1PADDING"");
            // encrypt the plain text using the public key
            cipher.init(Cipher.DECRYPT_MODE, key);

            byte[] encryptedBytes = Base64.decode(encryptedBase64, Base64.DEFAULT);
            byte[] decryptedBytes = cipher.doFinal(encryptedBytes);
            decryptedString = new String(decryptedBytes);
        } catch (Exception e) {
            e.printStackTrace();
        }

        return decryptedString;
    }

","61880","<android><rsa><public-key-encryption><encryption>","43","5","5","2018-06-13 14:25:58","12474193","0","30","5002633","","2016-01-28 10:45:43","2012-09-18 07:08:10",""
"2821736","What's the difference between id_rsa.pub and id_dsa.pub?","Is one more secure than the other?
","One uses DSA and one uses RSA.
","60308","<encryption><ssh><rsa><public-key-encryption><dsa>","85","-7","4","2019-01-18 16:17:14","","0","21","519360","","2017-01-05 02:21:22","2010-05-12 18:38:09",""
"2821736","What's the difference between id_rsa.pub and id_dsa.pub?","Is one more secure than the other?
","id_rsa.pub and id_dsa.pub are the public keys for id_rsa and id_dsa. 
If you are asking in relation to SSH, id_rsa is an RSA key and can be used with the SSH protocol 1 or 2, whereas id_dsa is a DSA key and can only be used with SSH protocol 2.  Both are very secure, but DSA does seem to be the standard these days (assuming all your clients/servers support SSH 2).
Update: Since this was written DSA has been shown to be insecure. More information available in the answer below.
","60308","<encryption><ssh><rsa><public-key-encryption><dsa>","85","61","4","2019-01-18 16:17:14","","0","21","519360","","2017-01-05 02:21:22","2010-05-12 18:38:09",""
"2821736","What's the difference between id_rsa.pub and id_dsa.pub?","Is one more secure than the other?
","SSH uses public/private key pairs, so
id_rsa is your RSA private key (based on prime numbers), which is more secure than your id_dsa DSA private key (based on exponents).  Keep your private keys safe and share your id_rsa.pub and id_dsa.pub public keys broadly.
DSA is insecure
DSA has a guessable parameter if your computer's random number generator is sub par, which will reveal your secret key.  ECDSA (DSA's elliptical curve upgrade) is similarly vulnerable.  Even with good random numbers, DSA has other strength concerns (these are also found in Diffie-Hellman).
OpenSSH creates insecure 1024 bit keys(workaround) and now disables DSA by default.
Use Ed25519 when possible
Elliptic curve cryptography offers increased complexity with smaller key sizes.  Ed25519 (based on the complexity of plane-modeled elliptical curves) is the preferred implementation due to its assumed lack of meddling (leaked documents show that the US NSA weakens crypto standards).
Unfortunately, Ed25519 is still rather new, requiring OpenSSH 6.5 or GnuPG 2.1 (see the full list).
Use RSA with 4096 bits when Ed25519 is unavailable
RSA key sizes of 4096 bits should have comparable complexity to Ed25519.
Ed25519 is still preferred to RSA due to a worry that RSA may be vulnerable to the same strength concerns as DSA, though applying that exploit to RSA is expected to be considerably harder.
","60308","<encryption><ssh><rsa><public-key-encryption><dsa>","85","43","4","2019-01-18 16:17:14","","0","21","519360","","2017-01-05 02:21:22","2010-05-12 18:38:09",""
"2821736","What's the difference between id_rsa.pub and id_dsa.pub?","Is one more secure than the other?
","Yes, rsa is considered more secure.
In October 2014, OpenSSH 7 (the default with Ubuntu 16.04LTS) has disabled default support for DSA. Take this as a strong sign that DSA is not a recommended method anymore. 
https://www.gentoo.org/support/news-items/2015-08-13-openssh-weak-keys.html
","60308","<encryption><ssh><rsa><public-key-encryption><dsa>","85","1","4","2019-01-18 16:17:14","","0","21","519360","","2017-01-05 02:21:22","2010-05-12 18:38:09",""
"18257185","How does a public key verify a signature?","I am trying to get a better grapple on how public/private keys work. I understand that a sender may add a digital signature to a document using his/her private key to essentially obtain a hash of the document, but what I do not understand is how the public key can be used to verify that signature. 
My understanding was that public keys encrypt, private keys decrypt... can anyone help me understand? 
","Your understanding of ""public keys encrypt, private keys decrypt"" is correct...  for data/message ENCRYPTION.  For digital signatures, it is the reverse.  With a digital signature, you are trying to prove that the document signed by you came from you.  To do that, you need to use something that only YOU have:  your private key.
A digital signature in its simplest description is a hash (SHA1, MD5, etc.) of the data (file, message, etc.) that is subsequently encrypted with the signer's private key.  Since that is something only the signer has (or should have) that is where the trust comes from.  EVERYONE has (or should have) access to the signer's public key.   
So, to validate a digital signature, the recipient 

Calculates a hash of the same data (file, message, etc.),
Decrypts the digital signature using the sender's PUBLIC key, and 
Compares the 2 hash values.    

If they match, the signature is considered valid.  If they don't match, it either means that a different key was used to sign it, or that the data has been altered (either intentionally or unintentionally).
Hope that helps!
","59332","<digital-signature><public-key-encryption><private-key><public-key><pki>","139","175","4","2019-07-18 08:06:18","","2","57","63550","","2018-08-10 23:12:20","2013-08-15 16:29:20",""
"18257185","How does a public key verify a signature?","I am trying to get a better grapple on how public/private keys work. I understand that a sender may add a digital signature to a document using his/her private key to essentially obtain a hash of the document, but what I do not understand is how the public key can be used to verify that signature. 
My understanding was that public keys encrypt, private keys decrypt... can anyone help me understand? 
","The keys work inversely:

Public key encrypts, private key decrypts (encrypting):

openssl rsautl -encrypt -inkey public.pem -pubin -in message.txt -out message.ssl
openssl rsautl -decrypt -inkey private.pem       -in message.ssl -out message.txt


Private key encrypts, public key decrypts (signing):

openssl rsautl -sign -inkey private.pem       -in message.txt -out message.ssl
openssl rsautl       -inkey public.pem -pubin -in message.ssl -out message.txt

Below is an example script to test this whole flow with openssl.
#!/bin/sh
# Create message to be encrypted
echo ""Creating message file""
echo ""---------------------""
echo ""My secret message"" > message.txt
echo ""done\n""

# Create asymmetric keypair
echo ""Creating asymmetric key pair""
echo ""----------------------------""
openssl genrsa -out private.pem 1024
openssl rsa -in private.pem -out public.pem -pubout
echo ""done\n""

# Encrypt with public & decrypt with private
echo ""Public key encrypts and private key decrypts""
echo ""--------------------------------------------""
openssl rsautl -encrypt -inkey public.pem -pubin -in message.txt         -out message_enc_pub.ssl
openssl rsautl -decrypt -inkey private.pem       -in message_enc_pub.ssl -out message_pub.txt
xxd message_enc_pub.ssl # Print the binary contents of the encrypted message
cat message_pub.txt # Print the decrypted message
echo ""done\n""

# Encrypt with private & decrypt with public
echo ""Private key encrypts and public key decrypts""
echo ""--------------------------------------------""
openssl rsautl -sign    -inkey private.pem -in message.txt          -out message_enc_priv.ssl
openssl rsautl -inkey public.pem -pubin    -in message_enc_priv.ssl -out message_priv.txt
xxd message_enc_priv.ssl
cat message_priv.txt
echo ""done\n""

This script outputs the following:
Creating message file
---------------------
done

Creating asymmetric key pair
----------------------------
Generating RSA private key, 1024 bit long modulus
...........++++++
....++++++
e is 65537 (0x10001)
writing RSA key
done

Public key encrypts and private key decrypts
--------------------------------------------
00000000: 31c0 f70d 7ed2 088d 9675 801c fb9b 4f95  1...~....u....O.
00000010: c936 8cd0 0cc4 9159 33c4 9625 d752 5b77  .6.....Y3..%.R[w
00000020: 5bfc 988d 19fe d790 b633 191f 50cf 1bf7  [........3..P...
00000030: 34c0 7788 efa2 4967 848f 99e2 a442 91b9  4.w...Ig.....B..
00000040: 5fc7 6c79 40ea d0bc 6cd4 3c9a 488e 9913  _.ly@...l.<.H...
00000050: 387f f7d6 b8e6 5eba 0771 371c c4f0 8c7f  8.....^..q7.....
00000060: 8c87 39a9 0c4c 22ab 13ed c117 c718 92e6  ..9..L"".........
00000070: 3d5b 8534 7187 cc2d 2f94 0743 1fcb d890  =[.4q..-/..C....
My secret message
done

Private key encrypts and public key decrypts
--------------------------------------------
00000000: 6955 cdd0 66e4 3696 76e1 a328 ac67 4ca3  iU..f.6.v..(.gL.
00000010: d6bb 5896 b6fe 68f1 55f1 437a 831c fee9  ..X...h.U.Cz....
00000020: 133a a7e9 005b 3fc5 88f7 5210 cdbb 2cba  .:...[?...R...,.
00000030: 29f1 d52d 3131 a88b 78e5 333e 90cf 3531  )..-11..x.3>..51
00000040: 08c3 3df8 b76e 41f2 a84a c7fb 0c5b c3b2  ..=..nA..J...[..
00000050: 9d3b ed4a b6ad 89bc 9ebc 9154 da48 6f2d  .;.J.......T.Ho-
00000060: 5d8e b686 635f b6a4 8774 a621 5558 7172  ]...c_...t.!UXqr
00000070: fbd3 0c35 df0f 6a16 aa84 f5da 5d5e 5336  ...5..j.....]^S6
My secret message
done

","59332","<digital-signature><public-key-encryption><private-key><public-key><pki>","139","57","4","2019-07-18 08:06:18","","2","57","63550","","2018-08-10 23:12:20","2013-08-15 16:29:20",""
"18257185","How does a public key verify a signature?","I am trying to get a better grapple on how public/private keys work. I understand that a sender may add a digital signature to a document using his/her private key to essentially obtain a hash of the document, but what I do not understand is how the public key can be used to verify that signature. 
My understanding was that public keys encrypt, private keys decrypt... can anyone help me understand? 
","Thought I'd provide a supplemental explanation for anyone looking for something more intuitively revealing.
A big part of this confusion arises from naming 'public keys' and 'private keys' as such because how these things actually work is directly at odds with how a 'key' is understood to be.
Take encryption for example. It could be thought of as working like so:

The parties that want to be able to read the secret messages each keep a key
hidden (i.e. a private key)
The parties that want to be able to send secret messages all have the ability to obtain an unlocked locked (i.e. a public lock)
Then sending a secret message is as easy as locking it with an unlocked lock, but unlocking it afterwards can only be done with one of the hidden keys.

This allows secret messages to be sent between parties, but from an intuitive standpoint here, 'public lock' is a more suitable name than 'public key'.
However, for sending digital signatures the roles are somewhat reversed:

The party that wants to sign messages is the only one with access to the unlocked locks (i.e. a private lock)
The parties that want to verify the signature all have the ability to obtain a key (i.e. a public key)
Then what the signer does is create two identical messages: the one that anyone can read and one to accompany it, but which they lock with one of their private locks.
Then when the receiver gets the message, they can read it, and then use the public key to unlock the locked message and compare the two messages. If the messages are the same, then they know that:

The unlocked message wasn't tampered with during travel and,
The message must have been from the person who has the matching lock to their public key.

And finally, this entire system only works if anyone who wants to validate a signer's signature has an authoritative place to go to to get the matching key to the signer's locks. Otherwise, anyone can say ""Hey, here's the key to so-and-so's private lock"", send you a message pretending to be them but lock it with their private lock, you perform all the above steps and believe the message must actually be from the person you thought, but you're fooled because you were mislead as to the true owner of a public key.

So long as there's a trust-worthy source for retrieving a signer's public key, you'll know who the rightful owner of a public key is, and will be able to validate their signature.
","59332","<digital-signature><public-key-encryption><private-key><public-key><pki>","139","3","4","2019-07-18 08:06:18","","2","57","63550","","2018-08-10 23:12:20","2013-08-15 16:29:20",""
"18257185","How does a public key verify a signature?","I am trying to get a better grapple on how public/private keys work. I understand that a sender may add a digital signature to a document using his/her private key to essentially obtain a hash of the document, but what I do not understand is how the public key can be used to verify that signature. 
My understanding was that public keys encrypt, private keys decrypt... can anyone help me understand? 
","The public key encrypts and only the private key can decrypt it, and the reverse is true. They both encrypt to different hashes but each key can decrypt the other's encryption. 
There are a few different ways to verify that a message came from some expected sender. For example:
The sender sends:

The message
The hash of the message encrypted with their private key

The receiver:

Decrypts the signature (2) with the public key to obtain a message, supposedly the same message as (1) but we don't know yet. We now have two messages that we need to verify are identical. So to do this, we will encrypt them both with our public key and compare the two hashes. So we will ....
Encrypt the original message (1) with the public key to obtain a hash
Encrypt the decrypted message (3) to get a second hash and compare to (4) to verify that they are identical. 

If they aren't identical it means either the message was tampered with or it was signed with some other key and not the one we thought...
Another example would be for the sender to use a common hash that the receiver might know to use as well. For example:
The sender sends:

A message 
Takes a known hash of the message, then encrypts the hash with the private key

The receiver:

Decrypts (2) and gets a hash value
Hashes the message (1) with the same hash used by the sender
Compares the two hashes to make sure they match

This again ensures the message wasn't tampered with and it is from the expected sender. 
","59332","<digital-signature><public-key-encryption><private-key><public-key><pki>","139","9","4","2019-07-18 08:06:18","","2","57","63550","","2018-08-10 23:12:20","2013-08-15 16:29:20",""
"10471009","How does the man in the middle attack work in Diffie–Hellman?","I'm having doubts about the mechanics of a man in the middle attack during a Diffie–Hellman key exchange. I have heard that it can happen during the key agreement communication. But in the presence of CA (Certificate Authority) the receiver can authenticate the sender as he received the sender's public key. Therefore, how is a man in the middle attack possible?
","I think you're confusing the basic Diffe-Hellman, which is a key exchange protocol, with the 'authenticated version' which uses a certificate authority (CA).
Nice explanation of how the basic Diffe-Hellman is vulnerable to man-in-the-middle from RSA Labs.

""The Diffie-Hellman key exchange is vulnerable to a man-in-the-middle
  attack. In this attack, an opponent Carol intercepts Alice's public
  value and sends her own public value to Bob. When Bob transmits his
  public value, Carol substitutes it with her own and sends it to Alice.
  Carol and Alice thus agree on one shared key and Carol and Bob agree
  on another shared key. After this exchange, Carol simply decrypts any
  messages sent out by Alice or Bob, and then reads and possibly
  modifies them before re-encrypting with the appropriate key and
  transmitting them to the other party. This vulnerability is present
  because Diffie-Hellman key exchange does not authenticate the
  participants. Possible solutions include the use of digital signatures
  and other protocol variants.""

and it follows with the authenticated version, also known as the Station-to-Station protocol:

""Roughly speaking, the basic idea is as follows. Prior to execution of
  the protocol, the two parties Alice and Bob each obtain a
  public/private key pair and a certificate for the public key. During
  the protocol, Alice computes a signature on certain messages, covering
  the public value ga mod p. Bob proceeds in a similar way. Even though
  Carol is still able to intercept messages between Alice and Bob, she
  cannot forge signatures without Alice's private key and Bob's private
  key. Hence, the enhanced protocol defeats the man-in-the-middle
  attack.""

So the basic version is susceptible to a man-in-the-middle attack, the authenticated version that uses public key certificates is not.
","55469","<public-key-encryption><diffie-hellman>","26","73","2","2018-08-12 22:54:03","10496684","0","9","104223","","2012-05-25 12:34:20","2012-05-06 13:48:18",""
"10471009","How does the man in the middle attack work in Diffie–Hellman?","I'm having doubts about the mechanics of a man in the middle attack during a Diffie–Hellman key exchange. I have heard that it can happen during the key agreement communication. But in the presence of CA (Certificate Authority) the receiver can authenticate the sender as he received the sender's public key. Therefore, how is a man in the middle attack possible?
","This is how Diffie-Hellman works:

And this is how the man-in-the-middle attack works in Diffie-Hellman:

There are two D-H key exchange, Alice and Attacker share the same key with k1, while Bob and Attacker share the other same key with k2. 
Because Alice and Bob had no prior knowledge of each other. 
But the Attacker must keep listening and forwarding.  
","55469","<public-key-encryption><diffie-hellman>","26","26","2","2018-08-12 22:54:03","10496684","0","9","104223","","2012-05-25 12:34:20","2012-05-06 13:48:18",""
"10161198","Is there a way to ""autosign"" commits in Git with a GPG key?","Is there an easy way to make Git always signs each commit or tag that is created?
I tried it with something like:
alias commit = commit -S
But that didn't do the trick.
I don't want to install a different program to make this happen. Is it doable with ease?
Just a side question, maybe commits shouldn't be signed, only tags, which I never create, as I submit single commits for a project like Homebrew, etc.
","Edit: As of Git version 1.7.9, it is possible to sign Git commits (git commit -S). Updating the answer slightly to reflect this. 
The question title is:

Is there a way to “autosign” commits in Git with a GPG key?

Short answer: yes, but don't do it. 
Addressing the typo in the question: git commit -s does not sign the commit. Rather, from the man git-commit page:

-s, --signoff
         Add Signed-off-by line by the committer at the end of the commit log message.

This gives a log output similar to the following:

± $ git log                                                                                 [0:43:31]
commit 155deeaef1896c63519320c7cbaf4691355143f5
Author: User Name 
Date:   Mon Apr 16 00:43:27 2012 +0200

    Added .gitignore

    Signed-off-by: User Name 

Note the ""Signed-off-by: ..."" bit; that was generated by the -s flag on the git-commit. 
Quoting the release announcement email:


""git commit"" learned ""-S"" to GPG-sign the commit; this can be shown
  with the ""--show-signature"" option to ""git log"".


So yes, you can sign commits. However, I personally urge caution with this option; automatically signing commits is next to pointless, see below:

Just a side question, maybe commits shouldn't be signed, only tags, which I never create, as I submit single commits. 

That's correct. Commits are not signed; tags are. The reason for this can be found in this message by Linus Torvalds, the last paragraph of which says:

Signing 
  each commit is totally stupid. It just means that you automate it, and you 
  make the signature worth less. It also doesn't add any real value, since 
  the way the git DAG-chain of SHA1's work, you only ever need one 
  signature to make all the commits reachable from that one be effectively 
  covered by that one. So signing each commit is simply missing the point. 

I'd encourage a browse of the linked message, which clarifies why signing commits automatically is not a good idea in a far better way than I could. 
However, if you want to automatically sign a tag, you would be able to do that by wrapping the git-tag -[s|u] in an alias; if you're going to do that, you probably want to setup your key id in ~/.gitconfig or the project-specific .git/config file. More information about that process can be seen in the git community book. Signing tags is infinitely more useful than signing each commit you make. 
","55264","<git><public-key-encryption><gnupg>","197","48","5","2018-02-03 20:21:30","20628522","2","79","5464891","","2017-11-24 21:25:12","2012-04-15 10:26:03",""
"10161198","Is there a way to ""autosign"" commits in Git with a GPG key?","Is there an easy way to make Git always signs each commit or tag that is created?
I tried it with something like:
alias commit = commit -S
But that didn't do the trick.
I don't want to install a different program to make this happen. Is it doable with ease?
Just a side question, maybe commits shouldn't be signed, only tags, which I never create, as I submit single commits for a project like Homebrew, etc.
","You need to make clear that if you sign a commit or tag, that you do not mean that you approve the whole history. In case of commits you only sign the change at hand, and in case of tag, well.. you need to define what you mean with it. You might have pulled a change which claims it is from you but was not (because somebody else pushed it to your remote). Or it is a change you dont want to be in, but you just signed the tag.
In typical OSS projects this might be less common, but in a enterprise scenario where you only touch code every now and then and you don't read the whole history it might get unnoticed.
Signing commits is a problem if they will get rebased or cherry-picked to other parents. But it would be good if a modified commit could point to the ""original"" commit which actually verifies.
","55264","<git><public-key-encryption><gnupg>","197","0","5","2018-02-03 20:21:30","20628522","2","79","5464891","","2017-11-24 21:25:12","2012-04-15 10:26:03",""
"10161198","Is there a way to ""autosign"" commits in Git with a GPG key?","Is there an easy way to make Git always signs each commit or tag that is created?
I tried it with something like:
alias commit = commit -S
But that didn't do the trick.
I don't want to install a different program to make this happen. Is it doable with ease?
Just a side question, maybe commits shouldn't be signed, only tags, which I never create, as I submit single commits for a project like Homebrew, etc.
","Note: if you don't want to add -S all the time to make sure your commits are signed, there is a proposal (branch 'pu' for now, December 2013, so no guarantee it will make it to a git release) to add a config which will take care of that option for you.
Update May 2014: it is in Git 2.0 (after being resend in this patch series)
See commit 2af2ef3 by Nicolas Vigier (boklm):
Add the commit.gpgsign option to sign all commits

If you want to GPG sign all your commits, you have to add the -S option all the time.
  The commit.gpgsign config option allows to sign all commits automatically.

commit.gpgsign


A boolean to specify whether all commits should be GPG signed.
  Use of this option when doing operations such as rebase can result in a large number of commits being signed. It may be convenient to use an agent to avoid typing your GPG passphrase several times.


That config is usually set per repo (you don't need to sign your private experimental local repos):
cd /path/to/repo/needing/gpg/signature
git config commit.gpgsign true

You would combine that with user.signingKey used as a global setting (unique key used for all repo where you want to sign commit)
git config --global user.signingkey F2C7AB29


user.signingKey was introduced in git 1.5.0 (Jan. 2007) with commit d67778e:

There shouldn't be a requirement that I use the same form of my name in
  my git repository and my gpg key.
  Further I might have multiple keys in my keyring, and might want to use one that doesn't match up with the address I use in commit messages.
This patch adds a configuration entry ""user.signingKey"" which, if present, will be passed to the ""-u"" switch for gpg, allowing the tag signing key to be overridden.

This is enforced with commit aba9119 (git 1.5.3.2) in order to catch the case where If the user has misconfigured user.signingKey in their .git/config or just doesn't have any secret keys on their keyring.
Notes:

By convention, since git 2.4.0 March 2015, it is signingKey, not signingkey, even though the git config keys are case insensitive. That would matter only if you do git config --get-regexp, which is case sensitive, otherwise, it is only a readability convention;
If you want the git server to check the signature for each push, you will need git 2.2+ (Oct. 2014) at least (commit b945901), as git push --signed failed to consider the user.signingKey config value;
git 2.9 (June 2016) will use user.signingKey to force signing annotated tags as well as commits: commit 61c2fe0.

","55264","<git><public-key-encryption><gnupg>","197","247","5","2018-02-03 20:21:30","20628522","2","79","5464891","","2017-11-24 21:25:12","2012-04-15 10:26:03",""
"10161198","Is there a way to ""autosign"" commits in Git with a GPG key?","Is there an easy way to make Git always signs each commit or tag that is created?
I tried it with something like:
alias commit = commit -S
But that didn't do the trick.
I don't want to install a different program to make this happen. Is it doable with ease?
Just a side question, maybe commits shouldn't be signed, only tags, which I never create, as I submit single commits for a project like Homebrew, etc.
","git config --global user.signingKey 9E08524833CB3038FDE385C54C0AFCCFED5CDE14
git config --global commit.gpgSign true

Replace 9E08524833CB3038FDE385C54C0AFCCFED5CDE14 by your key ID. Remember: It's never a good idea to use the short ID.
UPDATE: Per a new git edict, all config keys should be in camelCase.
","55264","<git><public-key-encryption><gnupg>","197","152","5","2018-02-03 20:21:30","20628522","2","79","5464891","","2017-11-24 21:25:12","2012-04-15 10:26:03",""
"10161198","Is there a way to ""autosign"" commits in Git with a GPG key?","Is there an easy way to make Git always signs each commit or tag that is created?
I tried it with something like:
alias commit = commit -S
But that didn't do the trick.
I don't want to install a different program to make this happen. Is it doable with ease?
Just a side question, maybe commits shouldn't be signed, only tags, which I never create, as I submit single commits for a project like Homebrew, etc.
","To make auto signing work pre git version 2.0, you'll have to add git alias for commit.
# git config --global alias.commit commit -S
[alias]
    commit = commit -S

","55264","<git><public-key-encryption><gnupg>","197","5","5","2018-02-03 20:21:30","20628522","2","79","5464891","","2017-11-24 21:25:12","2012-04-15 10:26:03",""
"1020320","How to do PGP in Python (generate keys, encrypt/decrypt)","I'm making a program in Python to be distributed to windows users via an installer.
The program needs to be able to download a file every day encrypted with the user's public key and then decrypt it.
So I need to find a Python library that will let me generate public and private PGP keys, and also decrypt files encrypted with the public key.
Is this something pyCrypto will do (documentation is nebulous)?  Are there other pure Python libraries?  How about a standalone command line tool in any language?
All I saw so far was GNUPG but installing that on Windows does stuff to the registry and throws dll's everywhere, and then I have to worry about whether the user already has this installed, how to backup their existing keyrings, etc.  I'd rather just have a python library or command line tool and mange the keys myself.
Update: pyME might work but it doesn't seem to be compatible with Python 2.4 which I have to use.
","PyCrypto supports PGP - albeit you should test it to make sure that it works to your specifications.
Although documentation is hard to come by, if you look through Util/test.py (the module test script), you can find a rudimentary example of their PGP support:
if verbose: print '  PGP mode:',
obj1=ciph.new(password, ciph.MODE_PGP, IV)
obj2=ciph.new(password, ciph.MODE_PGP, IV)
start=time.time()
ciphertext=obj1.encrypt(str)
plaintext=obj2.decrypt(ciphertext)
end=time.time()
if (plaintext!=str):
    die('Error in resulting plaintext from PGP mode')
print_timing(256, end-start, verbose)
del obj1, obj2

Futhermore, PublicKey/pubkey.py provides for the following relevant methods:
def encrypt(self, plaintext, K)
def decrypt(self, ciphertext):
def sign(self, M, K):
def verify (self, M, signature):
def can_sign (self):
    """"""can_sign() : bool
    Return a Boolean value recording whether this algorithm can
    generate signatures.  (This does not imply that this
    particular key object has the private information required to
    to generate a signature.)
    """"""
    return 1

","47999","<python><encryption><public-key-encryption><gnupg><pgp>","31","7","6","2018-04-25 19:36:18","1053752","0","17","42223","","2018-04-25 19:36:18","2009-06-19 22:28:46",""
"1020320","How to do PGP in Python (generate keys, encrypt/decrypt)","I'm making a program in Python to be distributed to windows users via an installer.
The program needs to be able to download a file every day encrypted with the user's public key and then decrypt it.
So I need to find a Python library that will let me generate public and private PGP keys, and also decrypt files encrypted with the public key.
Is this something pyCrypto will do (documentation is nebulous)?  Are there other pure Python libraries?  How about a standalone command line tool in any language?
All I saw so far was GNUPG but installing that on Windows does stuff to the registry and throws dll's everywhere, and then I have to worry about whether the user already has this installed, how to backup their existing keyrings, etc.  I'd rather just have a python library or command line tool and mange the keys myself.
Update: pyME might work but it doesn't seem to be compatible with Python 2.4 which I have to use.
","PyMe does claim full compatibility with Python 2.4, and I quote:

The latest version of PyMe (as of this
  writing) is v0.8.0. Its binary
  distribution for Debian was compiled
  with SWIG v1.3.33 and GCC v4.2.3 for
  GPGME v1.1.6 and Python v2.3.5,
  v2.4.4, and v2.5.2 (provided in
  'unstable' distribution at the time).
  Its binary distribution for Windows
  was compiled with SWIG v1.3.29 and
  MinGW v4.1 for GPGME v1.1.6 and Python
  v2.5.2 (although the same binary get
  installed and works fine in v2.4.2 as
  well).

I'm not sure why you say ""it doesn't seem to be compatible with Python 2.4 which I have to use"" -- specifics please?
And yes it does exist as a semi-Pythonic (SWIGd) wrapper on GPGME -- that's a popular way to develop Python extensions once you have a C library that basically does the job.
PyPgp has a much simpler approach -- that's why it's a single, simple Python script: basically it does nothing more than ""shell out"" to command-line PGP commands. For example, decryption is just:
def decrypt(data):
    ""Decrypt a string - if you have the right key.""
    pw,pr = os.popen2('pgpv -f')
    pw.write(data)
    pw.close()
    ptext = pr.read()
    return ptext

i.e., write the encrypted cyphertext to the standard input of pgpv -f, read pgpv's standard output as the decrypted plaintext.
PyPgp is also a very old project, though its simplicity means that making it work with modern Python (e.g., subprocess instead of now-deprecated os.popen2) would not be hard. But you still do need PGP installed, or PyPgp won't do anything;-).
","47999","<python><encryption><public-key-encryption><gnupg><pgp>","31","3","6","2018-04-25 19:36:18","1053752","0","17","42223","","2018-04-25 19:36:18","2009-06-19 22:28:46",""
"1020320","How to do PGP in Python (generate keys, encrypt/decrypt)","I'm making a program in Python to be distributed to windows users via an installer.
The program needs to be able to download a file every day encrypted with the user's public key and then decrypt it.
So I need to find a Python library that will let me generate public and private PGP keys, and also decrypt files encrypted with the public key.
Is this something pyCrypto will do (documentation is nebulous)?  Are there other pure Python libraries?  How about a standalone command line tool in any language?
All I saw so far was GNUPG but installing that on Windows does stuff to the registry and throws dll's everywhere, and then I have to worry about whether the user already has this installed, how to backup their existing keyrings, etc.  I'd rather just have a python library or command line tool and mange the keys myself.
Update: pyME might work but it doesn't seem to be compatible with Python 2.4 which I have to use.
","M2Crypto has PGP module, but I have actually never tried to use it. If you try it, and it works, please let me know (I am the current M2Crypto maintainer). Some links:

Module sources
Demo Script
unit tests

Update: The PGP module does not provide ways to generate keys, but presumably these could be created with the lower level RSA, DSA etc. modules. I don't know PGP insides, so you'd have to dig up the details. Also, if you know how to generate these using openssl command line commands, it should be reasonably easy to convert that to M2Crypto calls.
","47999","<python><encryption><public-key-encryption><gnupg><pgp>","31","3","6","2018-04-25 19:36:18","1053752","0","17","42223","","2018-04-25 19:36:18","2009-06-19 22:28:46",""
"1020320","How to do PGP in Python (generate keys, encrypt/decrypt)","I'm making a program in Python to be distributed to windows users via an installer.
The program needs to be able to download a file every day encrypted with the user's public key and then decrypt it.
So I need to find a Python library that will let me generate public and private PGP keys, and also decrypt files encrypted with the public key.
Is this something pyCrypto will do (documentation is nebulous)?  Are there other pure Python libraries?  How about a standalone command line tool in any language?
All I saw so far was GNUPG but installing that on Windows does stuff to the registry and throws dll's everywhere, and then I have to worry about whether the user already has this installed, how to backup their existing keyrings, etc.  I'd rather just have a python library or command line tool and mange the keys myself.
Update: pyME might work but it doesn't seem to be compatible with Python 2.4 which I have to use.
","You don't need PyCrypto or PyMe, fine though those packages may be - you will have all kinds of problems building under Windows. Instead, why not avoid the rabbit-holes and do what I did? Use gnupg 1.4.9. You don't need to do a full installation on end-user machines - just gpg.exe and iconv.dll from the distribution are sufficient, and you just need to have them somewhere in the path or accessed from your Python code using a full pathname. No changes to the registry are needed, and everything (executables and data files) can be confined to a single folder if you want.
There's a module GPG.py which was originally written by Andrew Kuchling, improved by Richard Jones and improved further by Steve Traugott. It's available here, but as-is it's not suitable for Windows because it uses os.fork(). Although originally part of PyCrypto, it is completely independent of the other parts of PyCrypto and needs only gpg.exe/iconv.dll in order to work.
I have a version (gnupg.py) derived from Traugott's GPG.py, which uses the subprocess module. It works fine under Windows, at least for my purposes - I use it to do the following:

Key management - generation, listing, export etc.
Import keys from an external source (e.g. public keys received from a partner company)
Encrypt and decrypt data
Sign and verify signatures

The module I've got is not ideal to show right now, because it includes some other stuff which shouldn't be there - which means I can't release it as-is at the moment. At some point, perhaps in the next couple of weeks, I hope to be able to tidy it up, add some more unit tests (I don't have any unit tests for sign/verify, for example) and release it (either under the original PyCrypto licence or a similar commercial-friendly license). If you can't wait, go with Traugott's module and modify it yourself - it wasn't too much work to make it work with the subprocess module.
This approach was a lot less painful than the others (e.g. SWIG-based solutions, or solutions which require building with MinGW/MSYS), which I considered and experimented with. I've used the same (gpg.exe/iconv.dll) approach with systems written in other languages, e.g. C#, with equally painless results.
P.S. It works with Python 2.4 as well as Python 2.5 and later. Not tested with other versions, though I don't foresee any problems.
","47999","<python><encryption><public-key-encryption><gnupg><pgp>","31","28","6","2018-04-25 19:36:18","1053752","0","17","42223","","2018-04-25 19:36:18","2009-06-19 22:28:46",""
"1020320","How to do PGP in Python (generate keys, encrypt/decrypt)","I'm making a program in Python to be distributed to windows users via an installer.
The program needs to be able to download a file every day encrypted with the user's public key and then decrypt it.
So I need to find a Python library that will let me generate public and private PGP keys, and also decrypt files encrypted with the public key.
Is this something pyCrypto will do (documentation is nebulous)?  Are there other pure Python libraries?  How about a standalone command line tool in any language?
All I saw so far was GNUPG but installing that on Windows does stuff to the registry and throws dll's everywhere, and then I have to worry about whether the user already has this installed, how to backup their existing keyrings, etc.  I'd rather just have a python library or command line tool and mange the keys myself.
Update: pyME might work but it doesn't seem to be compatible with Python 2.4 which I have to use.
","As other have noted, PyMe is the canonical solution for this, since it's based on GpgME, which is part of the GnuPG ecosystem.
For Windows, I strongly recommend to use Gpg4win as the GnuPG distribution, for two reasons:
It's based on GnuPG 2, which, among other things, includes gpg2.exe, which can (finally, I might add :) start gpg-agent.exe on-demand (gpg v1.x can't).
And secondly, it's the only official Windows build by the GnuPG developers. E.g. it's entirely cross-compiled from Linux to Windows, so not a iota of non-free software was used in preparing it (quite important for a  security suite :).
","47999","<python><encryption><public-key-encryption><gnupg><pgp>","31","3","6","2018-04-25 19:36:18","1053752","0","17","42223","","2018-04-25 19:36:18","2009-06-19 22:28:46",""
"1020320","How to do PGP in Python (generate keys, encrypt/decrypt)","I'm making a program in Python to be distributed to windows users via an installer.
The program needs to be able to download a file every day encrypted with the user's public key and then decrypt it.
So I need to find a Python library that will let me generate public and private PGP keys, and also decrypt files encrypted with the public key.
Is this something pyCrypto will do (documentation is nebulous)?  Are there other pure Python libraries?  How about a standalone command line tool in any language?
All I saw so far was GNUPG but installing that on Windows does stuff to the registry and throws dll's everywhere, and then I have to worry about whether the user already has this installed, how to backup their existing keyrings, etc.  I'd rather just have a python library or command line tool and mange the keys myself.
Update: pyME might work but it doesn't seem to be compatible with Python 2.4 which I have to use.
","After a LOT of digging, I found a package that worked for me. Although it is said to support the generation of keys, I didn't test it. However I did manage to decrypt a message that was encrypted using a GPG public key. The advantage of this package is that it does not require a GPG executable file on the machine, and is a Python based implementation of the OpenPGP (rather than a wrapper around the executable). 
I created the private and public keys using GPG4win and kleopatra for windows
See my code below.
import pgpy
emsg = pgpy.PGPMessage.from_file(<path to the file from the client that was encrypted using your public key>)
key,_  = pgpy.PGPKey.from_file(<path to your private key>)
with key.unlock(<your private key passpharase>):
    print (key.decrypt(emsg).message)

Although the question is very old. I hope this helps future users.
","47999","<python><encryption><public-key-encryption><gnupg><pgp>","31","9","6","2018-04-25 19:36:18","1053752","0","17","42223","","2018-04-25 19:36:18","2009-06-19 22:28:46",""
"22154423","How is SSH_AUTH_SOCK setup and used by ssh-agent?","I have been able to setup the sharing of ssh-agent for public-key authentication after reading https://superuser.com/a/230872/301446
The environment file thus generated has the following contents:
SSH_AUTH_SOCK=/tmp/ssh-OwqeSuxmEsQN/agent.4744; export SSH_AUTH_SOCK;
SSH_AGENT_PID=8960; export SSH_AGENT_PID;
#echo Agent pid 8960;

And agent.4744 has:
!<socket >24194 s 07DF88C6-E9997283-4C471010-2FE57D77

Would you know how this socket is used by ssh-agent? I can understand that it's used by ssh-agent to share authentication information but exactly how?
","From here:

$SSH_AUTH_SOCK contains the path of the unix file socket that the
  agent uses for communication with other processes. This is essential
  for ssh-add.

","46028","<sockets><ssh><public-key-encryption><ssh-agent>","20","19","1","2016-07-23 06:16:04","22852524","0","3","-1","","2017-03-20 10:18:18","2014-03-03 18:28:11",""
"4192296","C# How to simply encrypt a text file with a PGP Public Key?","I've researched a bit about how to achieve what I said in the question and found several APIs but most of them look very complicated and since I'm just a noobie in this area I just want a simple method like:
public String Encrypt(String message, PublicKey publicKey)

Don't know if this can be done? If not then please someone enlighten me another way to achieve this :)
Thank you.
UPDATE:
So far I have only seen that all of the library for OpenPGP encryption require both the public key and private key to do the encrypt while I only want to encrypt with the public key (because I don't have the private key to use it)!
","There's an article on code project http://www.codeproject.com/KB/security/sharpprivacy.aspx?df=100&forumid=15716&exp=0&select=573797, that has methods:
public static string EncryptText(string strMessage, PublicKeyRing pkrPublicKeyRing, SecretKeyRing skrSecretKeyRing, bool bSign
private static void DecryptAndVerify(SecretKeyRing skrSecretKeyRing, PublicKeyRing pkrPublicKeyRing, byte[] bData)

Which may be what you're looking for, or at least point you in the right direction to writing your own.
","43532","<c#><encryption><public-key><pgp><public-key-encryption>","20","4","4","2018-05-30 08:21:54","4202096","0","9","2039695","","2015-12-14 14:03:15","2010-11-16 08:33:22",""
"4192296","C# How to simply encrypt a text file with a PGP Public Key?","I've researched a bit about how to achieve what I said in the question and found several APIs but most of them look very complicated and since I'm just a noobie in this area I just want a simple method like:
public String Encrypt(String message, PublicKey publicKey)

Don't know if this can be done? If not then please someone enlighten me another way to achieve this :)
Thank you.
UPDATE:
So far I have only seen that all of the library for OpenPGP encryption require both the public key and private key to do the encrypt while I only want to encrypt with the public key (because I don't have the private key to use it)!
","Did you take a look at the bouncycastle pgp? http://www.bouncycastle.org/
There is a source example here of enrypting a file taken from the BouncyCastle site: Need example for BouncyCastle PGP File encryption in C#
","43532","<c#><encryption><public-key><pgp><public-key-encryption>","20","6","4","2018-05-30 08:21:54","4202096","0","9","2039695","","2015-12-14 14:03:15","2010-11-16 08:33:22",""
"4192296","C# How to simply encrypt a text file with a PGP Public Key?","I've researched a bit about how to achieve what I said in the question and found several APIs but most of them look very complicated and since I'm just a noobie in this area I just want a simple method like:
public String Encrypt(String message, PublicKey publicKey)

Don't know if this can be done? If not then please someone enlighten me another way to achieve this :)
Thank you.
UPDATE:
So far I have only seen that all of the library for OpenPGP encryption require both the public key and private key to do the encrypt while I only want to encrypt with the public key (because I don't have the private key to use it)!
","I found a tutorial here but it requires both Secret Key and Public Key to encrypt data. However I've modified the codes a bit to only require public key (no signing, no compress) and thought I should publish it here in case anyone also looking for a solution for this question. Belows is the modified codes, all the credits for the author - Mr. Kim.
public class PgpEncrypt
    {
        private PgpEncryptionKeys m_encryptionKeys;
        private const int BufferSize = 0x10000; 
        /// <summary>
        /// Instantiate a new PgpEncrypt class with initialized PgpEncryptionKeys.
        /// </summary>
        /// <param name=""encryptionKeys""></param>
        /// <exception cref=""ArgumentNullException"">encryptionKeys is null</exception>
        public PgpEncrypt(PgpEncryptionKeys encryptionKeys)
        {
            if (encryptionKeys == null)
            {
                throw new ArgumentNullException(""encryptionKeys"", ""encryptionKeys is null."");
            }
            m_encryptionKeys = encryptionKeys;
        }
        /// <summary>
        /// Encrypt and sign the file pointed to by unencryptedFileInfo and
        /// write the encrypted content to outputStream.
        /// </summary>
        /// <param name=""outputStream"">The stream that will contain the
        /// encrypted data when this method returns.</param>
        /// <param name=""fileName"">FileInfo of the file to encrypt</param>
        public void Encrypt(Stream outputStream, FileInfo unencryptedFileInfo)
        {
            if (outputStream == null)
            {
                throw new ArgumentNullException(""outputStream"", ""outputStream is null."");
            }
            if (unencryptedFileInfo == null)
            {
                throw new ArgumentNullException(""unencryptedFileInfo"", ""unencryptedFileInfo is null."");
            }
            if (!File.Exists(unencryptedFileInfo.FullName))
            {
                throw new ArgumentException(""File to encrypt not found."");
            }
            using (Stream encryptedOut = ChainEncryptedOut(outputStream))
            {
                using (Stream literalOut = ChainLiteralOut(encryptedOut, unencryptedFileInfo))
                using (FileStream inputFile = unencryptedFileInfo.OpenRead())
                {
                    WriteOutput(literalOut, inputFile);
                }
            }
        }

        private static void WriteOutput(Stream literalOut,
            FileStream inputFile)
        {
            int length = 0;
            byte[] buf = new byte[BufferSize];
            while ((length = inputFile.Read(buf, 0, buf.Length)) > 0)
            {
                literalOut.Write(buf, 0, length);
            }
        }

        private Stream ChainEncryptedOut(Stream outputStream)
        {
            PgpEncryptedDataGenerator encryptedDataGenerator;
            encryptedDataGenerator =
                new PgpEncryptedDataGenerator(SymmetricKeyAlgorithmTag.TripleDes,
                                              new SecureRandom());
            encryptedDataGenerator.AddMethod(m_encryptionKeys.PublicKey);
            return encryptedDataGenerator.Open(outputStream, new byte[BufferSize]);
        }

        private static Stream ChainLiteralOut(Stream encryptedOut, FileInfo file)
        {
            PgpLiteralDataGenerator pgpLiteralDataGenerator = new PgpLiteralDataGenerator();
            return pgpLiteralDataGenerator.Open(encryptedOut, PgpLiteralData.Binary, 

file);
            } 
}

Of course to run these codes you have to include BouncyCastle library in your project.
I've tested encrypting and then decrypting and it runs fine :)
","43532","<c#><encryption><public-key><pgp><public-key-encryption>","20","10","4","2018-05-30 08:21:54","4202096","0","9","2039695","","2015-12-14 14:03:15","2010-11-16 08:33:22",""
"4192296","C# How to simply encrypt a text file with a PGP Public Key?","I've researched a bit about how to achieve what I said in the question and found several APIs but most of them look very complicated and since I'm just a noobie in this area I just want a simple method like:
public String Encrypt(String message, PublicKey publicKey)

Don't know if this can be done? If not then please someone enlighten me another way to achieve this :)
Thank you.
UPDATE:
So far I have only seen that all of the library for OpenPGP encryption require both the public key and private key to do the encrypt while I only want to encrypt with the public key (because I don't have the private key to use it)!
","Here is perhaps a cleaner approach:

        var pkr = asciiPublicKeyToRing(ascfilein);
        if (pkr != null)
        {
            try
            {
                EncryptFile(
                tbUnencryptedFile.Text, tbEncryptedFile.Text, getFirstPublicEncryptionKeyFromRing(pkr), true, true);

                MessageBox.Show(""File Encrypted."");
            }
            catch (Exception ex)
            {
                MessageBox.Show(""Error: "" + ex.Message);
            }
        }
        else
        {
             MessageBox.Show(ascfilein + "" is not a public key."");
        }


    private PgpPublicKeyRing asciiPublicKeyToRing(string ascfilein)
    {
        using (Stream pubFis = File.OpenRead(ascfilein))
        {
            var pubArmoredStream = new ArmoredInputStream(pubFis);

            PgpObjectFactory pgpFact = new PgpObjectFactory(pubArmoredStream);
            Object opgp = pgpFact.NextPgpObject();
            var pkr = opgp as PgpPublicKeyRing;
            return pkr;
        }
    }

    private PgpPublicKey getFirstPublicEncryptionKeyFromRing(PgpPublicKeyRing pkr)
    {
        foreach (PgpPublicKey k in pkr.GetPublicKeys())
        {
            if (k.IsEncryptionKey)
                return k;
        }
        throw new ArgumentException(""Can't find encryption key in key ring."");
    }

    public static void EncryptFile(string inputFile, string outputFile, PgpPublicKey encKey, bool armor,
        bool withIntegrityCheck)
    {
        using (MemoryStream bOut = new MemoryStream())
        {
            PgpCompressedDataGenerator comData = new PgpCompressedDataGenerator(CompressionAlgorithmTag.Zip);
            PgpUtilities.WriteFileToLiteralData(comData.Open(bOut), PgpLiteralData.Binary,
                new FileInfo(inputFile));

            comData.Close();
            PgpEncryptedDataGenerator cPk = new PgpEncryptedDataGenerator(SymmetricKeyAlgorithmTag.Aes256,
                withIntegrityCheck, new SecureRandom());

            cPk.AddMethod(encKey);
            byte[] bytes = bOut.ToArray();

            using (Stream outputStream = File.Create(outputFile))
            {
                if (armor)
                {
                    using (ArmoredOutputStream armoredStream = new ArmoredOutputStream(outputStream))
                    using (Stream cOut = cPk.Open(armoredStream, bytes.Length))
                    {
                        cOut.Write(bytes, 0, bytes.Length);
                    }
                }
                else
                {
                    using (Stream cOut = cPk.Open(outputStream, bytes.Length))
                    {
                        cOut.Write(bytes, 0, bytes.Length);
                    }
                }
            }
        }
    }

","43532","<c#><encryption><public-key><pgp><public-key-encryption>","20","8","4","2018-05-30 08:21:54","4202096","0","9","2039695","","2015-12-14 14:03:15","2010-11-16 08:33:22",""
"14034508","DH vs. DHE and ECDHE and perfect forward secrecy","Does Diffie-Hellman (DH) provide perfect forward secrecy? or is it a feature for Ephemeral Diffie-Hellman (DHE) only ?
Is Elliptic Curve Ephemeral diffie-Hellman (ECDHE) is better than DHE ? 
","It's the ephemeral aspect of DHE and ECDHE that provides perfect forward secrecy.
The idea is that even if someone records traffic and compromises the server to get its private key, they won't be able to decipher that traffic, because they'll be missing the ephemeral DH parameters that won't have been saved. With fixed DH, the private DH parameters are effectively the private key: they would also be compromised in the same way and allow the attacker to decipher past traffic too.
(Note that support for fixed DH, non-anonymous cipher suites is quite rare in practice anyway.)
The perfect forward secrecy offered by DHE comes at a price: more computation. The ECDHE variants uses elliptic curve cryptography to reduce this computational cost. You may find further details and benchmarks in Vincent Bernat's SSL/TLS & Perfect Forward Secrecy article.
","41788","<ssl><public-key-encryption><diffie-hellman>","37","44","1","2012-12-26 13:08:41","14041040","0","16","1810868","","2012-12-25 23:41:22","2012-12-25 22:43:05",""
"16212816","Setting up OpenSSH for Windows using public key authentication","I am having issues setting up OpenSSH for Windows, using public key authentication.
I have this working on my local desktop and can ssh with a key from Unix machines or other OpenSSH for Windows machines.
I have replicated the build onto a server, I can get password authentication working fine, but when I use the keys I get the following issue:
debug1: Authentications that can continue: publickey,password,keyboard-interactive
debug3: start over, passed a different list publickey,password,keyboard-interactive
debug3: preferred publickey,keyboard-interactive,password
debug3: authmethod_lookup publickey
debug3: remaining preferred: keyboard-interactive,password
debug3: authmethod_is_enabled publickey
debug1: Next authentication method: publickey
debug1: Offering RSA public key: /cygdrive/c/sshusers/jsadmint2232/.ssh/id_rsa
debug3: send_pubkey_test
debug2: we sent a publickey packet, wait for reply
Connection closed by 127.0.0.1

So for the purposes of testing, I have been just trying to SSH to localhost, but even when tried remotely I get the same issue.
Even more strange, is that when I have both password & public key enabled in sshd_config, it will only attempt to use keys and then bomb out with the above message and won't even try to use password.
Here are the steps I have taken:

Install OpenSSH for Windows
mkgroup -l >>..\etc\group (added local groups)
mkgroup -d >>..\etc\group (added domain groups)
mkpasswd -L -u openssh >>..\passwd (added my local user)
mkpasswd -D -u jsadmint2232 >>..\passwd (added my domain user)
Edited the homedir in passwd to point to c:\sshusers\%USER% - where %USER% is the user name
Enabled password auth, disabled key auth
Created ssh keys for both jsadmint2232 / openssh and ensured that the files were created in homedirs
Added authorized_keys files into .ssh dirs for each user and added keys for incoming connecting users
net stop opensshd / net start opensshd
Test Password auth works both locally and remotely
Updated sshd_config, to enabled key auth - restart opensshd
Test connection and get above error, also doesn't even try password auth?
Updated sshd_config, to disable password auth completely - restart opensshd
Test connection and still get above error

It appears the server is killing the connection for some reason?
","I have solved the issue...
It is related to the account that started the service - its was using the Local System account - this was stopping it accessing the pub key and authorized_keys file.
Once I stopped the service and started as the user I was trying to connect into, it worked!
So basically, you need to start with a service account and then external users connect in as that user.
","37697","<windows><ssh><public-key-encryption><openssh><public-key>","26","5","4","2019-10-21 22:23:35","16213584","0","16","1589422","","2016-06-20 04:25:57","2013-04-25 10:51:39",""
"16212816","Setting up OpenSSH for Windows using public key authentication","I am having issues setting up OpenSSH for Windows, using public key authentication.
I have this working on my local desktop and can ssh with a key from Unix machines or other OpenSSH for Windows machines.
I have replicated the build onto a server, I can get password authentication working fine, but when I use the keys I get the following issue:
debug1: Authentications that can continue: publickey,password,keyboard-interactive
debug3: start over, passed a different list publickey,password,keyboard-interactive
debug3: preferred publickey,keyboard-interactive,password
debug3: authmethod_lookup publickey
debug3: remaining preferred: keyboard-interactive,password
debug3: authmethod_is_enabled publickey
debug1: Next authentication method: publickey
debug1: Offering RSA public key: /cygdrive/c/sshusers/jsadmint2232/.ssh/id_rsa
debug3: send_pubkey_test
debug2: we sent a publickey packet, wait for reply
Connection closed by 127.0.0.1

So for the purposes of testing, I have been just trying to SSH to localhost, but even when tried remotely I get the same issue.
Even more strange, is that when I have both password & public key enabled in sshd_config, it will only attempt to use keys and then bomb out with the above message and won't even try to use password.
Here are the steps I have taken:

Install OpenSSH for Windows
mkgroup -l >>..\etc\group (added local groups)
mkgroup -d >>..\etc\group (added domain groups)
mkpasswd -L -u openssh >>..\passwd (added my local user)
mkpasswd -D -u jsadmint2232 >>..\passwd (added my domain user)
Edited the homedir in passwd to point to c:\sshusers\%USER% - where %USER% is the user name
Enabled password auth, disabled key auth
Created ssh keys for both jsadmint2232 / openssh and ensured that the files were created in homedirs
Added authorized_keys files into .ssh dirs for each user and added keys for incoming connecting users
net stop opensshd / net start opensshd
Test Password auth works both locally and remotely
Updated sshd_config, to enabled key auth - restart opensshd
Test connection and get above error, also doesn't even try password auth?
Updated sshd_config, to disable password auth completely - restart opensshd
Test connection and still get above error

It appears the server is killing the connection for some reason?
","If you are using mls-software.com's version of OpenSSH here is another note.
If you install using the SSHD_SERVER account and privilege separation you will be able to use public key authentication (per http://www.mls-software.com/opensshd-pki.html). However if UAC is enable you will not be successful with the install. The user(s) will not be created properly and the service will not be created. Manually trying to get these items up after the fact is very difficult. Simply disabling UAC before installation will allow the installation process to properly create the user(s) and the service. After installation you can re-enable UAC.
When I created the SSHD_SERVER account manually authentication succeed when using password authentication but the client termination the connection with ""/bin/bash: Operation not permitted"". Authentication with public keys was closed by the server (original error posted by Cambolie). 
","37697","<windows><ssh><public-key-encryption><openssh><public-key>","26","3","4","2019-10-21 22:23:35","16213584","0","16","1589422","","2016-06-20 04:25:57","2013-04-25 10:51:39",""
"16212816","Setting up OpenSSH for Windows using public key authentication","I am having issues setting up OpenSSH for Windows, using public key authentication.
I have this working on my local desktop and can ssh with a key from Unix machines or other OpenSSH for Windows machines.
I have replicated the build onto a server, I can get password authentication working fine, but when I use the keys I get the following issue:
debug1: Authentications that can continue: publickey,password,keyboard-interactive
debug3: start over, passed a different list publickey,password,keyboard-interactive
debug3: preferred publickey,keyboard-interactive,password
debug3: authmethod_lookup publickey
debug3: remaining preferred: keyboard-interactive,password
debug3: authmethod_is_enabled publickey
debug1: Next authentication method: publickey
debug1: Offering RSA public key: /cygdrive/c/sshusers/jsadmint2232/.ssh/id_rsa
debug3: send_pubkey_test
debug2: we sent a publickey packet, wait for reply
Connection closed by 127.0.0.1

So for the purposes of testing, I have been just trying to SSH to localhost, but even when tried remotely I get the same issue.
Even more strange, is that when I have both password & public key enabled in sshd_config, it will only attempt to use keys and then bomb out with the above message and won't even try to use password.
Here are the steps I have taken:

Install OpenSSH for Windows
mkgroup -l >>..\etc\group (added local groups)
mkgroup -d >>..\etc\group (added domain groups)
mkpasswd -L -u openssh >>..\passwd (added my local user)
mkpasswd -D -u jsadmint2232 >>..\passwd (added my domain user)
Edited the homedir in passwd to point to c:\sshusers\%USER% - where %USER% is the user name
Enabled password auth, disabled key auth
Created ssh keys for both jsadmint2232 / openssh and ensured that the files were created in homedirs
Added authorized_keys files into .ssh dirs for each user and added keys for incoming connecting users
net stop opensshd / net start opensshd
Test Password auth works both locally and remotely
Updated sshd_config, to enabled key auth - restart opensshd
Test connection and get above error, also doesn't even try password auth?
Updated sshd_config, to disable password auth completely - restart opensshd
Test connection and still get above error

It appears the server is killing the connection for some reason?
","I solved it by:

Installing in SSHD_SERVER + privilege separation mode. I also set privilege separation to ""yes"" in the config manually. This didn't work for me for a lot time, the user didn't get created. Then it worked, I don't know why. I only went to user accounts in control panel to check that UAC is off. I also had /var/empty with full access for everyone.
For C:\openssh\var\empty I've set ""attributes get/set"" permissions to Everyone and myself and ""full"" permissions to .\sshd_server. I also made it the owner.

","37697","<windows><ssh><public-key-encryption><openssh><public-key>","26","1","4","2019-10-21 22:23:35","16213584","0","16","1589422","","2016-06-20 04:25:57","2013-04-25 10:51:39",""
"16212816","Setting up OpenSSH for Windows using public key authentication","I am having issues setting up OpenSSH for Windows, using public key authentication.
I have this working on my local desktop and can ssh with a key from Unix machines or other OpenSSH for Windows machines.
I have replicated the build onto a server, I can get password authentication working fine, but when I use the keys I get the following issue:
debug1: Authentications that can continue: publickey,password,keyboard-interactive
debug3: start over, passed a different list publickey,password,keyboard-interactive
debug3: preferred publickey,keyboard-interactive,password
debug3: authmethod_lookup publickey
debug3: remaining preferred: keyboard-interactive,password
debug3: authmethod_is_enabled publickey
debug1: Next authentication method: publickey
debug1: Offering RSA public key: /cygdrive/c/sshusers/jsadmint2232/.ssh/id_rsa
debug3: send_pubkey_test
debug2: we sent a publickey packet, wait for reply
Connection closed by 127.0.0.1

So for the purposes of testing, I have been just trying to SSH to localhost, but even when tried remotely I get the same issue.
Even more strange, is that when I have both password & public key enabled in sshd_config, it will only attempt to use keys and then bomb out with the above message and won't even try to use password.
Here are the steps I have taken:

Install OpenSSH for Windows
mkgroup -l >>..\etc\group (added local groups)
mkgroup -d >>..\etc\group (added domain groups)
mkpasswd -L -u openssh >>..\passwd (added my local user)
mkpasswd -D -u jsadmint2232 >>..\passwd (added my domain user)
Edited the homedir in passwd to point to c:\sshusers\%USER% - where %USER% is the user name
Enabled password auth, disabled key auth
Created ssh keys for both jsadmint2232 / openssh and ensured that the files were created in homedirs
Added authorized_keys files into .ssh dirs for each user and added keys for incoming connecting users
net stop opensshd / net start opensshd
Test Password auth works both locally and remotely
Updated sshd_config, to enabled key auth - restart opensshd
Test connection and get above error, also doesn't even try password auth?
Updated sshd_config, to disable password auth completely - restart opensshd
Test connection and still get above error

It appears the server is killing the connection for some reason?
","Following are setup steps for OpenSSH shipped with Windows 10 v.1803 (April 2018 update. See comments to this post, it might not work with 1809).
Server setup (elevated powershell):

Install OpenSSH server: Add-WindowsCapability -Online -Name OpenSSH.Server~~~~0.0.1.0.
Start agent and sshd services: Start-Service ssh-agent; Start-Service sshd (this will generate host keys and default configuration automatically in $env:ProgramData\ssh).
[Optional] Install OpenSSHUtils powershell module: Install-Module -Force OpenSSHUtils

Client setup (non-elevated powershell):

Generate user key: cd $env:USERPROFILE\.ssh; ssh-keygen.exe, follow prompts, agree to the default suggested file location. This will create 2 files: id_rsa and id_rsa.pub;
[Optional] add key to authentication agent, so you don't have to enter password each time you use it: ssh-add .\id_rsa (or whatever file was generated);

Server setup continued (non-elevated powershell):

Log in as a user, for which public key auth to be used
cd $env:USERPROFILE; mkdir .ssh; cd .ssh; New-Item authorized_keys;
Paste the contents of the id_rsa.pub file from the client to the .ssh\authorized_keys file from the previous step.
Setup permissions properly (important!!!): 


Run start . to open explorer with the current folder ($env:USERPROFILE\.ssh);
Right click authorized_keys, go to Properties -> Security -> Advanced
Click ""Disable inheritance"";
Choose ""Convert inherited permissions into explicit permissions on this object"" when prompted;
(really, really important) Remove all permissions on file except for the SYSTEM and yourself. There must be exactly two permission entries on the file. Some guides suggest running the Repair-AuthorizedKeyPermission $env:USERPROFILE\.ssh\authorized_keys - this will try to add the sshd user to the permission list and it will break the authentication, so, don't do that, or at least do not agree on adding the sshd user). Both SYSTEM and yourself should have full control over the file.

If your Windows build is 1809 or later, it is required to comment out the following lines in C:\ProgramData\ssh\sshd_config file. Then restart the sshd service.

# Match Group administrators                                                    
#       AuthorizedKeysFile __PROGRAMDATA__/ssh/administrators_authorized_keys  


Client:

Run ssh <serverusername>@<serverhostname>. It should work at this point.

Tried that with Windows 10 as server and both itself and a Debian Linux as a client.
","37697","<windows><ssh><public-key-encryption><openssh><public-key>","26","73","4","2019-10-21 22:23:35","16213584","0","16","1589422","","2016-06-20 04:25:57","2013-04-25 10:51:39",""
"33361068","gnupg: There is no assurance this key belongs to the named user","I'm trying to use interesting password management tool named Pass.
I did the following:

Installed gpg tool $ sudo dnf install gpg
Generated a key using $ gpg --gen-key 
Typed $ pass init ""foobar id of my gpg key"" as stated here
Got

mkdir: created directory ‘/home/chichivica/.password-store/’
 Password store initialized for foobar@email.com

Tried to add a simple password 

$ pass insert foo
Enter password for foo: 
Retype password for foo:

And there is the problem

gpg: A45A123C: There is no assurance this key belongs to the named user
gpg: [stdin]: encryption failed: Unusable public key
Could anyone give me some advice?
Maybe something I misunderstand?
Thanks in advance.
","I had the same issue after copying my key pair from one machine to another. The solution for me was the set the trust level of the keys:
gpg --edit-key <KEY_ID>
gpg> trust

You will be asked to select the trust level from the following:
1 = I don't know or won't say
2 = I do NOT trust
3 = I trust marginally
4 = I trust fully
5 = I trust ultimately
m = back to the main menu

I selected 5 since I created the key so of course I trust it ultimately :). It will ask you to confirm your decision:
Your decision? 5
Do you really want to set this key to ultimate trust? (y/N) y

After confirming, you should be able to encrypt using that key.
","35031","<encryption><passwords><public-key-encryption><gnupg>","99","195","1","2016-08-10 12:02:47","34132924","12","21","","","","2015-10-27 06:16:22",""
"6990671","Command to send public key to remote host","I remember there is a command to send public key to the remote host that I want. I want to use that feature to send one of my public keys to the other host. How can I do that?
","You are looking for ssh-copy-id.  All this command does is create .ssh and .ssh/authorized_keys and set their permissions appropriately if they don't exist.  Then it appends your public key to the end of .ssh/authorized_keys.
","32179","<ssh><public-key-encryption>","32","54","4","2016-09-05 02:31:54","6990680","0","6","","","","2011-08-09 02:03:15",""
"6990671","Command to send public key to remote host","I remember there is a command to send public key to the remote host that I want. I want to use that feature to send one of my public keys to the other host. How can I do that?
","The selected answer is correct, but here is a simple bash script for anyone that wants to combine keygen+copy: https://gist.github.com/wilcollins/bc420581da87962b8b47
This file creates an SSH key on a client machine, applies the appropriate file permissions, copies to the local ~/.ssh directory, & copies to specified server.
","32179","<ssh><public-key-encryption>","32","0","4","2016-09-05 02:31:54","6990680","0","6","","","","2011-08-09 02:03:15",""
"6990671","Command to send public key to remote host","I remember there is a command to send public key to the remote host that I want. I want to use that feature to send one of my public keys to the other host. How can I do that?
","You might be looking for this command:
cat ~/.ssh/id_rsa.pub | ssh user@hostname 'cat >> .ssh/authorized_keys'

It appends your public key to the servers authorized keys. 
Source
","32179","<ssh><public-key-encryption>","32","12","4","2016-09-05 02:31:54","6990680","0","6","","","","2011-08-09 02:03:15",""
"6990671","Command to send public key to remote host","I remember there is a command to send public key to the remote host that I want. I want to use that feature to send one of my public keys to the other host. How can I do that?
","If your server is already set up to not accept password-based login, you might get a Permission denied (publickey) error.  
This is another method to send the key, using netcat, so you don't have to authenticate.  It will only work over a local network, but you can use port forwarding to do this over the internet.  
On the server: 
$ nc -l 55555 >> ~/.ssh/authorized_keys

On the client (replace HOSTNAME with the hostname or IP of the server):
$ nc HOSTNAME 55555 < ~/.ssh/id_rsa.pub

You can replace 55555 with an open port of your choice.  
source: chat over lan from linux to linux?

Appendix for total newbies: I don't think anyone's mentioned this yet, but if you get ERROR: failed to open ID file '/home/username/.pub': No such file, you need to generate a key first.  The Ubuntu help pages have a great guide on Generating RSA Keys.  
","32179","<ssh><public-key-encryption>","32","2","4","2016-09-05 02:31:54","6990680","0","6","","","","2011-08-09 02:03:15",""
"25622894","java.security.InvalidKeyException: invalid key format on generating RSA public key","Background:
I have created an applet to extract public key of a certificate extracted from a smart card.
This public key is then stored in database.
The private key of certificate is used to sign data and the public key is then used to verify the signature.
Code for extracting public key from certificate:
private byte[] getPublicKey(KeyStore paramKeyStore)
    throws GeneralSecurityException {
  Enumeration localEnumeration = paramKeyStore.aliases();

  if (localEnumeration.hasMoreElements()) {
    String element = (String) localEnumeration.nextElement();
    Certificate[] arrayOfCertificate =
        paramKeyStore.getCertificateChain(element);
    byte[] publicKeyByteArray =
        arrayOfCertificate[0].getPublicKey().getEncoded();

    return publicKeyByteArray;
  }
  throw new KeyStoreException(""The keystore is empty!"");
}

This publicKeyByteArray is then storeed in database as BLOB after converting to string using bytes2String method:
private static String bytes2String(byte[] bytes) {
  StringBuilder string = new StringBuilder();
  for (byte b : bytes) {
    String hexString = Integer.toHexString(0x00FF & b);
    string.append(hexString.length() == 1 ? ""0"" + hexString : hexString);
  }
  return string.toString();
}

The content of the BLOB(key) saved in database is:
30820122300d06092a864886f70d01010105000382010f003082010a02820101009bd307e4fc38adae43b93ba1152a4d6dbf82689336bb4e3af5160d16bf1599fe070f7acbfefd93e866e52043de1620bd57d9a3f244fb4e6ef758d70d19e0be86e1b12595af748fbc00aad9009bd61120d3348079b00af8462de46e254f6d2b092cbc85c7f6194c6c37f8955ef7b9b8937a7e9999541dbbea8c1b2349c712565482dbd573cd9b7ec56a59e7683b4c246620cf0d8148ed38da937f1e4e930eb05d5b4c6054712928fa59870763468c07e71265525e1e40839b51c833579f5742d3c8e0588766e3ed6deef1593b10baad0a2abea34734de1505d37710e1cfaa4225b562b96a6a4e87fecb1d627d4c61916e543eba87054ee9212e8183125cdb49750203010001

After reading the stored public key byte[] from database, I try to convert it back to Public Key using following code: 
Cipher rsa;
rsa = Cipher.getInstance(""RSA"");
KeyFactory keyFactory = KeyFactory.getInstance(""RSA"");
X509EncodedKeySpec publicKeySpec = new X509EncodedKeySpec(pkey.getBytes());
PublicKey pk = keyFactory.generatePublic(publicKeySpec);
rsa.init(Cipher.DECRYPT_MODE, pk);
byte[] cipherDecrypt = rsa.doFinal(encryptedText.getBytes());

but it gives following error:
Caused by: java.security.InvalidKeyException: invalid key format
    at sun.security.x509.X509Key.decode(X509Key.java:387)
    at sun.security.x509.X509Key.decode(X509Key.java:403)
    at sun.security.rsa.RSAPublicKeyImpl.<init>(RSAPublicKeyImpl.java:83)
    at sun.security.rsa.RSAKeyFactory.generatePublic(RSAKeyFactory.java:298)
    at sun.security.rsa.RSAKeyFactory.engineGeneratePublic(RSAKeyFactory.java:201)

Please suggest the reason and resolution for this issue.
","You must have an error in the way you read the key back from the database. The following code works just fine for me:
String key = ""3082012230...""; // full key omitted for brevity
byte[] derPublicKey = DatatypeConverter.parseHexBinary(key);

KeyFactory keyFactory = KeyFactory.getInstance(""RSA"");
X509EncodedKeySpec publicKeySpec = new X509EncodedKeySpec(derPublicKey);
keyFactory.generatePublic(publicKeySpec);

I would guess, based on the use of pkey.getBytes(), that you've simply tried to get the bytes from the string rather than hex-decoding it.
","26823","<java><rsa><public-key-encryption><x509><public-key>","3","5","1","2014-09-02 12:25:27","25623417","4","5","474189","","2014-09-02 12:22:58","2014-09-02 11:59:33",""
"31915617","How to Encrypt String With Public Key and Decrypt with Private key ?","i want to encrypt a password with a key from server and decrypt the encrypted password in serverside. this is the code i have used in my application
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package publicprivatekey;

import java.security.*;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.PKCS8EncodedKeySpec;
import java.security.spec.X509EncodedKeySpec;
import java.util.Base64;
import javax.crypto.*;

/**
 *
 * @author Rajorshi
 */
public class PublicPrivateKey {

    public static String getEncrypted(String data, String Key) throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException, InvalidKeySpecException, IllegalBlockSizeException, BadPaddingException {
        Cipher cipher = Cipher.getInstance(""RSA/ECB/PKCS1Padding"");
        PublicKey publicKey = KeyFactory.getInstance(""RSA"").generatePublic(new X509EncodedKeySpec(Base64.getDecoder().decode(Key.getBytes())));
        cipher.init(Cipher.ENCRYPT_MODE, publicKey);
        byte[] encryptedbytes = cipher.doFinal(data.getBytes());
        return new String(Base64.getEncoder().encode(encryptedbytes));
    }

    public static String getDecrypted(String data, String Key) throws NoSuchAlgorithmException, InvalidKeySpecException, NoSuchPaddingException, InvalidKeyException, IllegalBlockSizeException, BadPaddingException {
        Cipher cipher = Cipher.getInstance(""RSA/ECB/PKCS1Padding"");
        PrivateKey pk = KeyFactory.getInstance(""RSA"").generatePrivate(new PKCS8EncodedKeySpec(Base64.getDecoder().decode(Key.getBytes())));
        cipher.init(Cipher.DECRYPT_MODE, pk);
        byte[] encryptedbytes = cipher.doFinal(Base64.getDecoder().decode(data.getBytes()));
        return new String(encryptedbytes);
    }

    public static void main(String[] args) throws NoSuchAlgorithmException, NoSuchProviderException, InvalidKeySpecException, NoSuchPaddingException, InvalidKeyException, IllegalBlockSizeException, BadPaddingException {
        // TODO code application logic here
        KeyGenerator keyGenerator = KeyGenerator.getInstance(""Blowfish"");
        keyGenerator.init(448);
        KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance(""RSA"");
        keyPairGenerator.initialize(1024);
        KeyPair keyPair = keyPairGenerator.genKeyPair();

        String pubKey = new String(Base64.getEncoder().encode(keyPair.getPublic().getEncoded()));
        String priKey = new String(Base64.getEncoder().encode(keyPair.getPrivate().getEncoded()));
        System.out.println(""Public Key:"" + pubKey);
        System.out.println(""Private Key:"" + priKey);
        String cipherText = getEncrypted(""hi this is a string"", pubKey);

        System.out.println(""CHIPHER:"" + cipherText);
        String decryptedText = getDecrypted(cipherText, priKey);
        System.out.println(""DECRYPTED STRING:"" + decryptedText);

    }

}

i want to encrypt a password with a key from server and decrypt the encrypted password in serverside. this is the code i have used in my application.
","If you are looking for a java program to encrypt data with public key and decrypt it with private key then here is the code (using RSA algorithm),
import java.security.KeyFactory;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.NoSuchAlgorithmException;
import java.security.NoSuchProviderException;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.SecureRandom;
import java.security.spec.PKCS8EncodedKeySpec;
import java.security.spec.X509EncodedKeySpec;

import javax.crypto.Cipher;

/**
 * @author visruthcv
 *
 */
public class CryptographyUtil {

    private static final String ALGORITHM = ""RSA"";

    public static byte[] encrypt(byte[] publicKey, byte[] inputData)
            throws Exception {

        PublicKey key = KeyFactory.getInstance(ALGORITHM)
                .generatePublic(new X509EncodedKeySpec(publicKey));

        Cipher cipher = Cipher.getInstance(ALGORITHM);
        cipher.init(Cipher.ENCRYPT_MODE, key);

        byte[] encryptedBytes = cipher.doFinal(inputData);

        return encryptedBytes;
    }

    public static byte[] decrypt(byte[] privateKey, byte[] inputData)
            throws Exception {

        PrivateKey key = KeyFactory.getInstance(ALGORITHM)
                .generatePrivate(new PKCS8EncodedKeySpec(privateKey));

        Cipher cipher = Cipher.getInstance(ALGORITHM);
        cipher.init(Cipher.DECRYPT_MODE, key);

        byte[] decryptedBytes = cipher.doFinal(inputData);

        return decryptedBytes;
    }

    public static KeyPair generateKeyPair()
            throws NoSuchAlgorithmException, NoSuchProviderException {

        KeyPairGenerator keyGen = KeyPairGenerator.getInstance(ALGORITHM);

        SecureRandom random = SecureRandom.getInstance(""SHA1PRNG"", ""SUN"");

        // 512 is keysize
        keyGen.initialize(512, random);

        KeyPair generateKeyPair = keyGen.generateKeyPair();
        return generateKeyPair;
    }

    public static void main(String[] args) throws Exception {

        KeyPair generateKeyPair = generateKeyPair();

        byte[] publicKey = generateKeyPair.getPublic().getEncoded();
        byte[] privateKey = generateKeyPair.getPrivate().getEncoded();

        byte[] encryptedData = encrypt(publicKey,
                ""hi this is Visruth here"".getBytes());

        byte[] decryptedData = decrypt(privateKey, encryptedData);

        System.out.println(new String(decryptedData));

    }

}

","25329","<java><public-key-encryption><password-encryption>","6","13","2","2019-10-22 06:39:19","","3","9","207421","","2015-08-10 10:00:20","2015-08-10 09:07:56",""
"31915617","How to Encrypt String With Public Key and Decrypt with Private key ?","i want to encrypt a password with a key from server and decrypt the encrypted password in serverside. this is the code i have used in my application
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package publicprivatekey;

import java.security.*;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.PKCS8EncodedKeySpec;
import java.security.spec.X509EncodedKeySpec;
import java.util.Base64;
import javax.crypto.*;

/**
 *
 * @author Rajorshi
 */
public class PublicPrivateKey {

    public static String getEncrypted(String data, String Key) throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException, InvalidKeySpecException, IllegalBlockSizeException, BadPaddingException {
        Cipher cipher = Cipher.getInstance(""RSA/ECB/PKCS1Padding"");
        PublicKey publicKey = KeyFactory.getInstance(""RSA"").generatePublic(new X509EncodedKeySpec(Base64.getDecoder().decode(Key.getBytes())));
        cipher.init(Cipher.ENCRYPT_MODE, publicKey);
        byte[] encryptedbytes = cipher.doFinal(data.getBytes());
        return new String(Base64.getEncoder().encode(encryptedbytes));
    }

    public static String getDecrypted(String data, String Key) throws NoSuchAlgorithmException, InvalidKeySpecException, NoSuchPaddingException, InvalidKeyException, IllegalBlockSizeException, BadPaddingException {
        Cipher cipher = Cipher.getInstance(""RSA/ECB/PKCS1Padding"");
        PrivateKey pk = KeyFactory.getInstance(""RSA"").generatePrivate(new PKCS8EncodedKeySpec(Base64.getDecoder().decode(Key.getBytes())));
        cipher.init(Cipher.DECRYPT_MODE, pk);
        byte[] encryptedbytes = cipher.doFinal(Base64.getDecoder().decode(data.getBytes()));
        return new String(encryptedbytes);
    }

    public static void main(String[] args) throws NoSuchAlgorithmException, NoSuchProviderException, InvalidKeySpecException, NoSuchPaddingException, InvalidKeyException, IllegalBlockSizeException, BadPaddingException {
        // TODO code application logic here
        KeyGenerator keyGenerator = KeyGenerator.getInstance(""Blowfish"");
        keyGenerator.init(448);
        KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance(""RSA"");
        keyPairGenerator.initialize(1024);
        KeyPair keyPair = keyPairGenerator.genKeyPair();

        String pubKey = new String(Base64.getEncoder().encode(keyPair.getPublic().getEncoded()));
        String priKey = new String(Base64.getEncoder().encode(keyPair.getPrivate().getEncoded()));
        System.out.println(""Public Key:"" + pubKey);
        System.out.println(""Private Key:"" + priKey);
        String cipherText = getEncrypted(""hi this is a string"", pubKey);

        System.out.println(""CHIPHER:"" + cipherText);
        String decryptedText = getDecrypted(cipherText, priKey);
        System.out.println(""DECRYPTED STRING:"" + decryptedText);

    }

}

i want to encrypt a password with a key from server and decrypt the encrypted password in serverside. this is the code i have used in my application.
","Actually, 
I found a solution which helped on my end:
delete from ""configuration"" where 'automation#enabled'='false';

","25329","<java><public-key-encryption><password-encryption>","6","0","2","2019-10-22 06:39:19","","3","9","207421","","2015-08-10 10:00:20","2015-08-10 09:07:56",""
"25699187","RSA Encryption output size","What is RSA encryption output size when using 2048 bit key (using pkcs1padding). Is it always 256 bytes independent of input size?
how can i calculate it for other key sizes?
","Yes, it is.
The output-size should always equals the size of the Modulus (part of the key), so:
2048 bit Modulus -> 2048 bit output
1024 bit Modulus -> 1024 bit output
...

If it is not, there exist numerous attacks on RSA, see here for basic information about that.
So to guarantee that the output is 2048 bit even when the input to encrypt is, let's say 7, a padding must always be applied!
","25286","<encryption><rsa><public-key-encryption>","18","16","3","2018-03-12 23:58:30","25699277","3","2","","","","2014-09-06 10:13:55",""
"25699187","RSA Encryption output size","What is RSA encryption output size when using 2048 bit key (using pkcs1padding). Is it always 256 bytes independent of input size?
how can i calculate it for other key sizes?
","The output size of plain RSA (using some padding scheme, but no hybrid encryption) is always the key size. The reason is that for some public key n the result is some integer c with 0<=c<n.  There are lots of introductions for RSA, e.g. http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-045j-automata-computability-and-complexity-spring-2011/lecture-notes/MIT6_045JS11_rsa.pdf
","25286","<encryption><rsa><public-key-encryption>","18","2","3","2018-03-12 23:58:30","25699277","3","2","","","","2014-09-06 10:13:55",""
"25699187","RSA Encryption output size","What is RSA encryption output size when using 2048 bit key (using pkcs1padding). Is it always 256 bytes independent of input size?
how can i calculate it for other key sizes?
","The output (as integer) of RSAEP (RSA encryption primitive) is always between 0 and n:

If the message representative m is not between 0 and n-1, output
message representative out of range and stop.
Let c = m^e mod n.
Output c.

Of course, c is a number. So you have to convert it to bytes for it to be usable. The only thing known about c is that it is smaller than n for a large value of m. It may be that c is a few bytes smaller even if m is large.

You've mentioned PKCS1Padding, which is part of the RSAES-PKCS1-V1_5-ENCRYPT encryption scheme. The padding will make sure that m is always large and randomized; requirements for RSA encryption to be secure.
You'll find that the encoding of c is specified in there:
...
Step 4: Convert the ciphertext representative c to a ciphertext C of
   length k octets: C = I2OSP (c, k)
...
where k is the size of the modulus in octets (bytes).
So yes, the answer is always k, the size of the modulus in bytes. Simply because the standard requires it that way. It is a value encoded as unsigned big endian number prefixed with as many zero bytes as required. 

Notes:

the modulus size defines the key size. So the output of an RSA encryption is the same as the key size: ceil(keySize / 8.0) using floats or (keySize + 8 - 1) / 8 using integers.
RSA with OAEP padding uses the same technique, so the answer is correct for OAEP as well (and most other, less known schemes such as RSA-KEM).
Many library routines that perform ""raw"" RSA (just modular exponentiation of the message with the public exponent) still perform the I2OSP function - but better check to make sure. 

","25286","<encryption><rsa><public-key-encryption>","18","4","3","2018-03-12 23:58:30","25699277","3","2","","","","2014-09-06 10:13:55",""
"6069369","RSA Encryption: Difference between Java and Android","I am using RSA to encrypt username and password on Android and decrypt them on server (tomcat 6, java 1.6).
Android Encryption:
    PublicKey pubKey = readPublicKeyFromFile(mod, ex);
    Cipher cipher = Cipher.getInstance(""RSA"");
    cipher.init(Cipher.ENCRYPT_MODE, pubKey);
    byte[] cipherData = cipher.doFinal(data);
    return cipherData;

Java Tomcat Decryption:
    PrivateKey pubKey = readPrivateKeyFromFile(mod, ex);
    Cipher cipher = Cipher.getInstance(""RSA"");
    cipher.init(Cipher.DECRYPT_MODE, pubKey);
    byte[] cipherData = cipher.doFinal(data);
    return cipherData;

If I use the android part OUTSIDE android (Just in a main method) it works fine. But not inside my android (Emulator). On de server side I get the following error: 
javax.crypto.BadPaddingException: Blocktype mismatch: 0
    at sun.security.rsa.RSAPadding.unpadV15(RSAPadding.java:311)
    at sun.security.rsa.RSAPadding.unpad(RSAPadding.java:255)
    at com.sun.crypto.provider.RSACipher.a(DashoA13*..)
    at com.sun.crypto.provider.RSACipher.engineDoFinal(DashoA13*..)
    at javax.crypto.Cipher.doFinal(DashoA13*..)

I keep the mod and ex as BigIntegers constants so I don't write them in to a file.
I know that there are difference between java1.6 and java 1.5 encryption, so both are compiled with java 1.6.
Some debug info:
During debug in android I can see that pubKey contains modulus and exponent in hexadecimal. And if I debug in a main method (again the same code) I can see that pubKey contains modulus and exponent in decimal.
What am I doing wrong?
Thanks
","Firstly, it looks like you're initializing both ciphers with the public key. Encryption uses public key, decryption used private key. I hope that's just a typo though.
I had a lot of trouble with RSA encryption as well, much was trial and error. I suggest you try another provider. I managed to implement RSA using BouncyCastle.
Cipher wrapper = Cipher.getInstance(""RSA"", ""BC"");
wrapper.init(Cipher.ENCRYPT_MODE, publicKey);
encryptedData= wrapper.doFinal(unencryptedData);

Although, I generated my own keypair since this was a session encryption.
kpg = KeyPairGenerator.getInstance(""RSA"");
        kpg.initialize(1024);
        KeyPair kp = kpg.genKeyPair();
        publicKey = kp.getPublic();
        privateKey = kp.getPrivate();

","23749","<java><android><encryption><rsa><public-key-encryption>","26","1","3","2017-01-29 21:32:56","","3","16","257110","","2011-05-20 09:01:22","2011-05-20 08:33:18",""
"6069369","RSA Encryption: Difference between Java and Android","I am using RSA to encrypt username and password on Android and decrypt them on server (tomcat 6, java 1.6).
Android Encryption:
    PublicKey pubKey = readPublicKeyFromFile(mod, ex);
    Cipher cipher = Cipher.getInstance(""RSA"");
    cipher.init(Cipher.ENCRYPT_MODE, pubKey);
    byte[] cipherData = cipher.doFinal(data);
    return cipherData;

Java Tomcat Decryption:
    PrivateKey pubKey = readPrivateKeyFromFile(mod, ex);
    Cipher cipher = Cipher.getInstance(""RSA"");
    cipher.init(Cipher.DECRYPT_MODE, pubKey);
    byte[] cipherData = cipher.doFinal(data);
    return cipherData;

If I use the android part OUTSIDE android (Just in a main method) it works fine. But not inside my android (Emulator). On de server side I get the following error: 
javax.crypto.BadPaddingException: Blocktype mismatch: 0
    at sun.security.rsa.RSAPadding.unpadV15(RSAPadding.java:311)
    at sun.security.rsa.RSAPadding.unpad(RSAPadding.java:255)
    at com.sun.crypto.provider.RSACipher.a(DashoA13*..)
    at com.sun.crypto.provider.RSACipher.engineDoFinal(DashoA13*..)
    at javax.crypto.Cipher.doFinal(DashoA13*..)

I keep the mod and ex as BigIntegers constants so I don't write them in to a file.
I know that there are difference between java1.6 and java 1.5 encryption, so both are compiled with java 1.6.
Some debug info:
During debug in android I can see that pubKey contains modulus and exponent in hexadecimal. And if I debug in a main method (again the same code) I can see that pubKey contains modulus and exponent in decimal.
What am I doing wrong?
Thanks
","I suggest you use specific cipher initialization: as an example,
Cipher cipher = Cipher.getInstance(""RSA/ECB/NoPadding"");

will work on both. The exception you are getting (BadPaddingException) is occuring because the default cipher initialization padding appears to be different between the desktop JVM and the Android JVM.
","23749","<java><android><encryption><rsa><public-key-encryption>","26","11","3","2017-01-29 21:32:56","","3","16","257110","","2011-05-20 09:01:22","2011-05-20 08:33:18",""
"6069369","RSA Encryption: Difference between Java and Android","I am using RSA to encrypt username and password on Android and decrypt them on server (tomcat 6, java 1.6).
Android Encryption:
    PublicKey pubKey = readPublicKeyFromFile(mod, ex);
    Cipher cipher = Cipher.getInstance(""RSA"");
    cipher.init(Cipher.ENCRYPT_MODE, pubKey);
    byte[] cipherData = cipher.doFinal(data);
    return cipherData;

Java Tomcat Decryption:
    PrivateKey pubKey = readPrivateKeyFromFile(mod, ex);
    Cipher cipher = Cipher.getInstance(""RSA"");
    cipher.init(Cipher.DECRYPT_MODE, pubKey);
    byte[] cipherData = cipher.doFinal(data);
    return cipherData;

If I use the android part OUTSIDE android (Just in a main method) it works fine. But not inside my android (Emulator). On de server side I get the following error: 
javax.crypto.BadPaddingException: Blocktype mismatch: 0
    at sun.security.rsa.RSAPadding.unpadV15(RSAPadding.java:311)
    at sun.security.rsa.RSAPadding.unpad(RSAPadding.java:255)
    at com.sun.crypto.provider.RSACipher.a(DashoA13*..)
    at com.sun.crypto.provider.RSACipher.engineDoFinal(DashoA13*..)
    at javax.crypto.Cipher.doFinal(DashoA13*..)

I keep the mod and ex as BigIntegers constants so I don't write them in to a file.
I know that there are difference between java1.6 and java 1.5 encryption, so both are compiled with java 1.6.
Some debug info:
During debug in android I can see that pubKey contains modulus and exponent in hexadecimal. And if I debug in a main method (again the same code) I can see that pubKey contains modulus and exponent in decimal.
What am I doing wrong?
Thanks
","Im doing RSA Encrypt in Android 2.2+ and decrypt on a tomcat 6 java 1.6 server.
I was getting this exact problem, reading all over the place and in part thanks to @Femi 's answer I came across what I needed.
The solution was to use the folowing algorithm specification for the Cipher:
Cipher cipher = Cipher.getInstance(""RSA/ECB/PKCS1Padding"");

This works doing encryption from both Android and BlackBerry smartphones. I know its been four months since the question was asked, but just in case someone else goes through this problem.
","23749","<java><android><encryption><rsa><public-key-encryption>","26","42","3","2017-01-29 21:32:56","","3","16","257110","","2011-05-20 09:01:22","2011-05-20 08:33:18",""
"35584461","GPG encryption and decryption of a folder using command line","man page of gpg command line (Gnupg) has commands to encrypt and decrypt files. Here is a standard command to encrypt/decrypt files with gpg. 
gpg --encrypt --recipient xxx@mail.com ~/xxx/xxx.txt - to encrypt 
gpg --output ~/xxx/xxx.txt --decrypt ~/xxx/xxx.gpg - to decrypt 
But if i have a folder with multiple files and folders, how can i encrypt it with command line?
","Solution 1:
Use gpg-zip.
Encrypt the contents of directory mydocs for user Bob to file test1:
gpg-zip --encrypt --output test1 --gpg-args  -r Bob mydocs

List the contents of archive test1:
gpg-zip --list-archive test1

This is an example directly from Encrypt or sign files into an archive. If you read that page in detail it will help you out a lot.
Solution 2:
Turn a directory into a file                                                  
If you want to encrypt a directory, you will need to convert it to a file first. Run the command:
tar czf myfiles.tar.gz mydirectory/

This gives you a new file 'myfiles.tar.gz' which you can then encrypt/decrypt. To turn a tarball back into a directory:
tar xzf myfiles.tar.gz

now you can use encrypt in the same way that you have above. So:
gpg --encrypt --recipient xxx@mail.com ~/xxx/xxx.txt

This is taken directly from an example on berkeley encrypting, which is also a quick and useful read. 
You can review the man page here: gnu gpg man
","23478","<encryption><public-key-encryption><gnupg>","13","23","3","2019-03-05 13:32:07","35584764","1","7","3704230","","2016-02-23 19:49:47","2016-02-23 17:40:49","2019-03-12 17:07:46"
"35584461","GPG encryption and decryption of a folder using command line","man page of gpg command line (Gnupg) has commands to encrypt and decrypt files. Here is a standard command to encrypt/decrypt files with gpg. 
gpg --encrypt --recipient xxx@mail.com ~/xxx/xxx.txt - to encrypt 
gpg --output ~/xxx/xxx.txt --decrypt ~/xxx/xxx.gpg - to decrypt 
But if i have a folder with multiple files and folders, how can i encrypt it with command line?
","If you don't want to tarball everything together and want to encrypt multiple files individually:
cd into the folder
encrypt: $ls | gpg --multifile --encrypt or  $ls | gpg --encrypt-files -r <recipient>
decrypt: $ls | gpg --multifile --decrypt or $ls | gpg --decrypt-files
","23478","<encryption><public-key-encryption><gnupg>","13","3","3","2019-03-05 13:32:07","35584764","1","7","3704230","","2016-02-23 19:49:47","2016-02-23 17:40:49","2019-03-12 17:07:46"
"35584461","GPG encryption and decryption of a folder using command line","man page of gpg command line (Gnupg) has commands to encrypt and decrypt files. Here is a standard command to encrypt/decrypt files with gpg. 
gpg --encrypt --recipient xxx@mail.com ~/xxx/xxx.txt - to encrypt 
gpg --output ~/xxx/xxx.txt --decrypt ~/xxx/xxx.gpg - to decrypt 
But if i have a folder with multiple files and folders, how can i encrypt it with command line?
","gpgtar is another option as well. gpgtar encrypts or signs files into an archive.  It is a gpg-ized tar using the same format as used by PGP's PGP Zip.
It installs along with gnupg on MacOS and Linux.
Encrypt Directory
gpgtar --encrypt --output <out_file_name> -r <recipient> <dir_name>

Decrypt Directory
gpgtar --decrypt <out_file_name>

gpgtar man page
","23478","<encryption><public-key-encryption><gnupg>","13","2","3","2019-03-05 13:32:07","35584764","1","7","3704230","","2016-02-23 19:49:47","2016-02-23 17:40:49","2019-03-12 17:07:46"
"9891708","Ruby: file encryption/decryption with private/public keys","I am searching for an algorithm for file encryption/decryption which satisfies the following requirements:

Algorithm must be reliable
Algorithm should be fast for rather big files
Private key can be generated by some parameter (for example, password)
Generated private key must be compatible with public key (public key is generated only once and stored in database)

Is there any Ruby implementation of suggested algorithms?
","
Note Well: As emboss mentions in the comments, this answer is a poor fit for an actual system. Firstly, file encryption should not be carried out using this method (The lib provides AES, for example.). Secondly, this answer does not address any of the wider issues that will also affect how you engineer your solution.
The original source also goes into more details.

Ruby can use openssl to do this:
#!/usr/bin/env ruby

# ENCRYPT

require 'openssl'
require 'base64'

public_key_file = 'public.pem';
string = 'Hello World!';

public_key = OpenSSL::PKey::RSA.new(File.read(public_key_file))
encrypted_string = Base64.encode64(public_key.public_encrypt(string))

And decrypt:
#!/usr/bin/env ruby

# DECRYPT

require 'openssl'
require 'base64'

private_key_file = 'private.pem';
password = 'boost facile'

encrypted_string = %Q{
...
}

private_key = OpenSSL::PKey::RSA.new(File.read(private_key_file),password)
string = private_key.private_decrypt(Base64.decode64(encrypted_string))

from here
","20974","<ruby-on-rails><ruby><encryption><public-key-encryption><encryption-asymmetric>","21","32","4","2017-07-28 20:33:59","9891824","0","9","238886","","2016-05-15 01:15:10","2012-03-27 14:36:26",""
"9891708","Ruby: file encryption/decryption with private/public keys","I am searching for an algorithm for file encryption/decryption which satisfies the following requirements:

Algorithm must be reliable
Algorithm should be fast for rather big files
Private key can be generated by some parameter (for example, password)
Generated private key must be compatible with public key (public key is generated only once and stored in database)

Is there any Ruby implementation of suggested algorithms?
","I'm afraid you are mixing two concepts here, authentication/authorization and confidentiality, trying to cover both aspects in one single step, and that won't work. You should never encrypt ""real data"" with asymmetric algorithms. a) they are way too slow for that, b) there are subtle issues that, if not done right, will severely weaken the security of your solution. 
A good rule of thumb is that the only thing you should end up encrypting with private asymmetric keys is symmetric keys used by a much faster symmetric algorithm. But in almost all cases you shouldn't even be doing that, because in 90% of the cases what you actually want is TLS (SSL) in those cases - I tried to explain why here a while ago.
In your case, I assume the requirements are:

confidentiality of the data that is to be stored in the database: the general public shouldn't be able to read it (or even access it)
a selected few (probably just one person) should be able to access and read that data

The first goal is generally achieved by using symmetric encryption. The second goal is, albeit related, realized by quite different means. You want the user accessing the file to be authenticated (i.e. establish the identity) and on top of that you also want them to be authorized (i.e. check whether the established identity has the right to do what they intend to). This is where asymmetric cryptography may enter the stage, but not necessarily. Since your question is tagged with Rails I assume we are talking about a Rails application. You typically already have some means to authenticate and authorize users there (most likely involving the afore-mentioned TLS), you may simply reuse them in order to establish a symmetric key for actual file encryption/decryption. Password-based encryption would fit for this purpose, if you want to avoid asymmetric crypto at all. Things get even more complicated if you also want to ensure integrity of the already confidential data, that is, you want to give a kind of guarantee to the authenticated and authorized user in the sense that what they finally access has not been altered in any way in the meantime. 
Developing a solution for this will be no trivial task and depend to a large extent on your given requirements, so I'm afraid there's no ""golden way"" that suits everyone. I would suggest to do some research, get a clearer picture of what you are trying to achieve and how, then try to get additional advice on subjects that you still feel uncertain/uncomfortable with. 
","20974","<ruby-on-rails><ruby><encryption><public-key-encryption><encryption-asymmetric>","21","11","4","2017-07-28 20:33:59","9891824","0","9","238886","","2016-05-15 01:15:10","2012-03-27 14:36:26",""
"9891708","Ruby: file encryption/decryption with private/public keys","I am searching for an algorithm for file encryption/decryption which satisfies the following requirements:

Algorithm must be reliable
Algorithm should be fast for rather big files
Private key can be generated by some parameter (for example, password)
Generated private key must be compatible with public key (public key is generated only once and stored in database)

Is there any Ruby implementation of suggested algorithms?
","I made a gem to help with this. It's called cryptosystem. Simply configure the path and password to your private key as well as the path to your public key, and it does the rest.
Encrypting is as simple as:
rsa = Cryptosystem::RSA.new
rsa.encrypt('secret') # => ""JxpuhTpEqRtMLmaSfaq/X6XONkBnMe...""

And decrypting:
encrypted_value = rsa.encrypt('secret') # => ""Y8DWJc2/+7TIxdLEolV99XI2sclHuK...""
rsa.decrypt(encrypted_value) # => ""secret""

You can check it out on GitHub or RubyGems.
","20974","<ruby-on-rails><ruby><encryption><public-key-encryption><encryption-asymmetric>","21","0","4","2017-07-28 20:33:59","9891824","0","9","238886","","2016-05-15 01:15:10","2012-03-27 14:36:26",""
"9891708","Ruby: file encryption/decryption with private/public keys","I am searching for an algorithm for file encryption/decryption which satisfies the following requirements:

Algorithm must be reliable
Algorithm should be fast for rather big files
Private key can be generated by some parameter (for example, password)
Generated private key must be compatible with public key (public key is generated only once and stored in database)

Is there any Ruby implementation of suggested algorithms?
","Symmetric Encryption is definitely fast and has excellent support for streaming of very large files.
SymmetricEncryption::Writer.open('my_file.enc') do |file|
  file.write ""Hello World\n""
  file.write ""Keep this secret""
end

Symmetric Encryption is designed for encrypting data and large files within an organization. 
When it comes to sharing files with other organizations then the best option is PGP. For streaming of very large files with PGP consider: IOStreams
IOStreams.writer('hello.pgp', recipient: 'receiver@example.org') do |writer|
  writer.write('Hello World')
  writer.write('and some more')
end

Look at the file iostreams/lib/io_streams/pgp.rb for more PGP examples. It also supports PGP key management directly from Ruby.
","20974","<ruby-on-rails><ruby><encryption><public-key-encryption><encryption-asymmetric>","21","1","4","2017-07-28 20:33:59","9891824","0","9","238886","","2016-05-15 01:15:10","2012-03-27 14:36:26",""
"16282179","How to convert a Public Key to a base64 Public Key?","Im trying to write a script, which is sending data to a sftp server via public key auth.
Im using cURL for that.
After some try and error I got an valid connection, but with the following output:
* SSH authentication methods available: publickey,gssapi-keyex,gssapi-with-mic
* Using ssh public key file pub.key
* Using ssh private key file private.ppk
* SSH public key authentication failed: Invalid key data, not base64 encoded
* Agent based authentication successful
* Authentication complete

It worked on my laptop so i just tried to make the script running to my colleague, but on her laptop the connections fails.
After that I realized the line SSH public key authentication failed: Invalid key data, not base64 encode.
I neither know why a ""Agent based authentication"" is successful on my side (or what this really means)  nor why its not working on my colleagues laptop.
I also didn't found a way to convert my public-key into a base64 public-key.
Kind Regards
Animal21
EDIT:
OK after searching the web and trying things out I have decided to check if my keys are valid base64 string, so I wrote a function is C# and surprise surprise my keys ARE base64 encoded...
What does this tells my now?
Kind Regards
","Try this:
http://www.freeformatter.com/base64-encoder.html
Online way to Encodes or decodes a string so that it conforms to the Base64 Data Encodings specification (RFC 4648).
","20653","<curl><base64><public-key-encryption>","1","-1","1","2013-05-06 07:32:19","16394108","0","","2289706","","2013-05-06 07:25:39","2013-04-29 15:11:35",""
"24492981","X.509 Certificate Public Key in Base64","I am trying to find the base64 public key for a certificate I am working with. The public key I find in the detail tab of the certificate is not base64 and I am requested to provide the base64 public key.
Is there a way I can get a base64 version of public key? Can it be done by taking the public key from the certificate and encrypting it to base64? For example, below is the public key I find for a certificate:
""
30 82 01 0a 02 82 01 01 00 bc 39 25 06 5d 99 a4 05 5f e7 fc 59 1f 28 b5 48 d2 0d 2e ea aa eb ed 74 ef c9 2f 90 f8 ad 96 80 24 0f c2 dc 71 58 ea 3e fa 5c c9 29 87 51 7c cb 54 28 7c f9 10 15 b0 ac 8f eb 9e d3 d7 70 35 93 8a c7 1f 45 97 e3 c8 0b 72 a1 65 79 cf 74 6c 87 d9 eb 7d a0 b9 0e 4b 45 3d 81 f0 18 6e 9f 97 11 54 cb d8 e2 35 1a 4b e7 4d bf 68 1d ad 4e ca 57 25 9e 2f f7 f8 44 6f c2 0c 78 d8 19 ef 22 5a 9f 78 9f 17 1a b8 c0 72 0f 51 5c 21 6f c9 1e 80 de 7c 25 47 d0 28 01 2a 94 6e 34 39 1f 42 39 be 5f 0e c2 7c b4 fa a5 b9 05 4e 9c 45 75 63 a3 87 c3 e5 dd 54 35 85 d4 8d c2 5f da 6f 86 12 cf b3 8b 65 23 1d 34 43 c5 2e b1 49 56 56 25 93 f7 09 bf 9e 48 21 91 6a de 27 9e 6d 38 2f f5 f4 93 23 46 e8 41 b4 21 b4 02 50 79 71 48 72 0f 57 46 a0 20 c0 19 02 f9 d4 76 02 2d 85 fd 79 cd 70 fc 41 8b 02 03 01 00 01
""
How can I convert this to base64? Thank you for all the help!
","I'll assume you're on windows.
The way I did it was to install the certificate.  Open certificates (from mmc or directly)  Open the certificate in question.
In the details tab, there is the option to 'Copy To File'. Press next until it gives you the export file format.
Select Base-64 encoded X.509 (.cer).  Save to Desktop.  
If you open this file with notepad, it will display the base64 encoded public key in between the ----BEGIN CERTIFICATE---- and -----END CERTIFICATE------
Edit:
I save this base64 string and then convert back in code to get the actual certificate. It's pretty easy.
var base64Cert = // read from Db or somewhere
var base64EncodedStr = Encoding.Unicode.GetString(base64Cert);
var cert = new X509Certificate2(Convert.FromBase64String(base64EncodedStr), ""password"", X509KeyStorageFlags.PersistKeySet);
if(cert != null)
{
    // use certificate
}

","20504","<base64><ssl-certificate><public-key-encryption><x509>","7","16","2","2014-06-30 17:36:56","24493093","0","2","","","","2014-06-30 14:53:36",""
"24492981","X.509 Certificate Public Key in Base64","I am trying to find the base64 public key for a certificate I am working with. The public key I find in the detail tab of the certificate is not base64 and I am requested to provide the base64 public key.
Is there a way I can get a base64 version of public key? Can it be done by taking the public key from the certificate and encrypting it to base64? For example, below is the public key I find for a certificate:
""
30 82 01 0a 02 82 01 01 00 bc 39 25 06 5d 99 a4 05 5f e7 fc 59 1f 28 b5 48 d2 0d 2e ea aa eb ed 74 ef c9 2f 90 f8 ad 96 80 24 0f c2 dc 71 58 ea 3e fa 5c c9 29 87 51 7c cb 54 28 7c f9 10 15 b0 ac 8f eb 9e d3 d7 70 35 93 8a c7 1f 45 97 e3 c8 0b 72 a1 65 79 cf 74 6c 87 d9 eb 7d a0 b9 0e 4b 45 3d 81 f0 18 6e 9f 97 11 54 cb d8 e2 35 1a 4b e7 4d bf 68 1d ad 4e ca 57 25 9e 2f f7 f8 44 6f c2 0c 78 d8 19 ef 22 5a 9f 78 9f 17 1a b8 c0 72 0f 51 5c 21 6f c9 1e 80 de 7c 25 47 d0 28 01 2a 94 6e 34 39 1f 42 39 be 5f 0e c2 7c b4 fa a5 b9 05 4e 9c 45 75 63 a3 87 c3 e5 dd 54 35 85 d4 8d c2 5f da 6f 86 12 cf b3 8b 65 23 1d 34 43 c5 2e b1 49 56 56 25 93 f7 09 bf 9e 48 21 91 6a de 27 9e 6d 38 2f f5 f4 93 23 46 e8 41 b4 21 b4 02 50 79 71 48 72 0f 57 46 a0 20 c0 19 02 f9 d4 76 02 2d 85 fd 79 cd 70 fc 41 8b 02 03 01 00 01
""
How can I convert this to base64? Thank you for all the help!
","You could use ASN.1 Editor. It has a  nice Data Converter which allows you to convert from HEX, BASE64, PEM to any of the before mentioned.

","20504","<base64><ssl-certificate><public-key-encryption><x509>","7","1","2","2014-06-30 17:36:56","24493093","0","2","","","","2014-06-30 14:53:36",""
"6309958","Encrypting a file with RSA in Python","I'm implementing file encryption with RSA, using PyCrypto.
I know it's somewhat wrong, first of all because RSA is very slow and second because PyCrypto RSA can only encrypt 128 characters, so you have to explode the file in 128 characters chunks.
This is the code so far:
from Crypto.PublicKey import RSA

file_to_encrypt = open('my_file.ext', 'rb').read()
pub_key = open('my_pub_key.pem', 'rb').read()
o = RSA.importKey(pub_key)

to_join = []
step = 0

while 1:
    # Read 128 characters at a time.
    s = file_to_encrypt[step*128:(step+1)*128]
    if not s: break
    # Encrypt with RSA and append the result to list.
    # RSA encryption returns a tuple containing 1 string, so i fetch the string.
    to_join.append(o.encrypt(s, 0)[0])
    step += 1

# Join the results.
# I hope the \r\r\r sequence won't appear in the encrypted result,
# when i explode the string back for decryption.
encrypted = '\r\r\r'.join(to_join)
# Write the encrypted file.
open('encrypted_file.ext', 'wb').write(encrypted)

So my question is : are there any better methods for using Private/ Public key encryption ON FILES ?
I heard about Mcrypt and OpenSSL, but I don't know if they can encrypt files.
","Public-key cryptography is usually used for small amounts of data only. It is slow, and can be hard to use right. The usual practice is to use other methods to reduce the asymmetric problem to one where the security is provided by a shared key, then use public-key cryptography to protect that shared key. For example:

To encrypt a file, randomly generate a secret key for a block or stream cipher (e.g. AES). Store the data encrypted with this cipher, and store the secret key encrypted with the public key alongside the encrypted payload.
To sign a file, compute a cryptographic digest (e.g. SHA-256). Sign the digest of the file with the private key and store that alongside the file.

So here's a sketch of how encryption can look like (warning, untested code, typed directly in the browser):
import os
from Crypto.Cipher import AES
from Crypto.PublicKey import RSA
import Crypto.Util.number
def encrypt_file(rsa, input, output):
    # Generate secret key
    secret_key = os.urandom(16)
    # Padding (see explanations below)
    plaintext_length = (Crypto.Util.number.size(rsa.n) - 2) / 8
    padding = '\xff' + os.urandom(16)
    padding += '\0' * (plaintext_length - len(padding) - len(secret_key))
    # Encrypt the secret key with RSA
    encrypted_secret_key = rsa.encrypt(padding + secret_key, None)
    # Write out the encrypted secret key, preceded by a length indication
    output.write(str(len(encrypted_secret_key)) + '\n')
    output.write(encrypted_secret_key)
    # Encrypt the file (see below regarding iv)
    iv = '\x00' * 16
    aes_engine = AES.new(secret_key, AES.MODE_CBC, iv)
    output.write(aes_engine.encrypt(input.read()))

The iv is an initialization vector for the CBC mode of operation. It needs to be unique per key per message. Normally, it's sent alongside the data in cleartext. Here, since the key is only ever used once, you can use a known IV.
The API of the block cipher is described in PEP 272. Unfortunately, it only supports all-at-once encryption. For large files, it would be better to encrypt chunk by chunk; you can encrypt as little as a block at a time (16 bytes for AES), but you need a better crypto library for that.
Note that in general, you should not directly encrypt data with RSA. The most obvious concern is that the attacker knows the public key and can therefore attempt to guess the plaintext (if the attacker thinks the plaintext may be swordfish, then the attacker can encrypt swordfish with the RSA public key, and compare the result with the output of the RSA encryption). Another concern which would arise if you wanted to send the file to multiple recipients is that if the RSA encryption step is deterministic, then the attacker can tell that the plaintexts are the same because the ciphertexts are the same. The normal defense against these problems is to use a padding scheme, which consists of adding some random secret data to the plaintext; this data is called padding. The attacker then cannot guess the random data, and sees different outcomes for every encryption because the same plaintext is never encrypted twice; as far as the legitimate recipient is concerned, the padding is just data that can be thrown away.
Here, it may appear that the above concerns do not apply in this scenario. However, there are other weaknesses that can arise from using RSA unprotected. In particular, if the public exponent is very small (not the case here as PyCrypto uses 65537) or you encrypt the same material for many different recipients (again, probably not the case here since each message has its own secret key), then a simple mathematical calculation would allow the attacker to recover the RSA plaintext. To avoid this attack, the value that is encrypted with RSA needs to be “close enough” to the RSA modulus, so that the encryption operation actually performs a modular exponentiation. The padding I propose ensures that by making the highest-order byte that fits 0xff; this is believed to be safe, although in the real world you should used an approved padding mode (OAEP).
","19661","<python><encryption><public-key-encryption>","13","31","1","2017-07-13 19:31:57","9039039","9","16","321731","","2014-05-09 12:34:47","2011-06-10 17:25:33",""
"3706177","How to generate ssh compatible id_rsa(.pub) from Java","I'm looking for a way to programmatically create ssh compatible id_rsa and id_rsa.pub files in Java. 
I got as far as creating the KeyPair:
KeyPairGenerator generator;
generator = KeyPairGenerator.getInstance(""RSA"");
// or: generator = KeyPairGenerator.getInstance(""DSA"");
generator.initialize(2048);
keyPair = generator.genKeyPair();

I can't figure out however how to create the String representation of the PrivateKey and PublicKey in the KeyPair.
","The key format used by ssh is defined in the RFC #4253. The format for RSA public key is the following :
  string    ""ssh-rsa""
  mpint     e /* key public exponent */
  mpint     n /* key modulus */

All data type encoding is defined in the section #5 of RFC #4251. string and mpint (multiple precision integer) types are encoded this way :
  4-bytes word: data length (unsigned big-endian 32 bits integer)
  n bytes     : binary representation of the data

for instance, the encoding of the string ""ssh-rsa"" is:
  byte[] data = new byte[] {0, 0, 0, 7, 's', 's', 'h', '-', 'r', 's', 'a'};

To encode the public :
   public byte[] encodePublicKey(RSAPublicKey key) throws IOException
   {
       ByteArrayOutputStream out = new ByteArrayOutputStream();
       /* encode the ""ssh-rsa"" string */
       byte[] sshrsa = new byte[] {0, 0, 0, 7, 's', 's', 'h', '-', 'r', 's', 'a'};
       out.write(sshrsa);
       /* Encode the public exponent */
       BigInteger e = key.getPublicExponent();
       byte[] data = e.toByteArray();
       encodeUInt32(data.length, out);
       out.write(data);
       /* Encode the modulus */
       BigInteger m = key.getModulus();
       data = m.toByteArray();
       encodeUInt32(data.length, out);
       out.write(data);
       return out.toByteArray();
   }

   public void encodeUInt32(int value, OutputStream out) throws IOException
   {
       byte[] tmp = new byte[4];
       tmp[0] = (byte)((value >>> 24) & 0xff);
       tmp[1] = (byte)((value >>> 16) & 0xff);
       tmp[2] = (byte)((value >>> 8) & 0xff);
       tmp[3] = (byte)(value & 0xff);
       out.write(tmp);
   }

To have a string représentation of the key just encode the returned byte array in Base64. 
For the private key encoding there is two cases:

the private key is not protected by a password. In that case the private key is encoded according to the PKCS#8 standard and then encoded with Base64. It is possible to get the PKCS8 encoding of the private key by calling getEncoded on RSAPrivateKey.
the private key is protected by a password. In that case the key encoding is an OpenSSH dedicated format. I don't know if there is any documentation on this format (except the OpenSSH source code of course)

","18673","<java><ssh><public-key-encryption><openssh>","15","26","4","2017-04-07 22:15:48","3706631","1","16","642653","","2016-02-08 15:45:02","2010-09-14 04:41:11",""
"3706177","How to generate ssh compatible id_rsa(.pub) from Java","I'm looking for a way to programmatically create ssh compatible id_rsa and id_rsa.pub files in Java. 
I got as far as creating the KeyPair:
KeyPairGenerator generator;
generator = KeyPairGenerator.getInstance(""RSA"");
// or: generator = KeyPairGenerator.getInstance(""DSA"");
generator.initialize(2048);
keyPair = generator.genKeyPair();

I can't figure out however how to create the String representation of the PrivateKey and PublicKey in the KeyPair.
","As Carsten has mentioned, JSch can generate those keypair easily.
Refer to its example, KeyGen.java
","18673","<java><ssh><public-key-encryption><openssh>","15","3","4","2017-04-07 22:15:48","3706631","1","16","642653","","2016-02-08 15:45:02","2010-09-14 04:41:11",""
"3706177","How to generate ssh compatible id_rsa(.pub) from Java","I'm looking for a way to programmatically create ssh compatible id_rsa and id_rsa.pub files in Java. 
I got as far as creating the KeyPair:
KeyPairGenerator generator;
generator = KeyPairGenerator.getInstance(""RSA"");
// or: generator = KeyPairGenerator.getInstance(""DSA"");
generator.initialize(2048);
keyPair = generator.genKeyPair();

I can't figure out however how to create the String representation of the PrivateKey and PublicKey in the KeyPair.
","gotoalberto's answer (quoted below) for a different question works for both RSA and DSA keys:

If you want reverse the process, i.e. encode a PublicKey Java object
  to a Linux authorized_keys entry format, one can use this code:
    /**
     * Encode PublicKey (DSA or RSA encoded) to authorized_keys like string
     *
     * @param publicKey DSA or RSA encoded
     * @param user username for output authorized_keys like string
     * @return authorized_keys like string
     * @throws IOException
     */
    public static String encodePublicKey(PublicKey publicKey, String user)
            throws IOException {
        String publicKeyEncoded;
        if(publicKey.getAlgorithm().equals(""RSA"")){
            RSAPublicKey rsaPublicKey = (RSAPublicKey) publicKey;
            ByteArrayOutputStream byteOs = new ByteArrayOutputStream();
            DataOutputStream dos = new DataOutputStream(byteOs);
            dos.writeInt(""ssh-rsa"".getBytes().length);
            dos.write(""ssh-rsa"".getBytes());
            dos.writeInt(rsaPublicKey.getPublicExponent().toByteArray().length);
            dos.write(rsaPublicKey.getPublicExponent().toByteArray());
            dos.writeInt(rsaPublicKey.getModulus().toByteArray().length);
            dos.write(rsaPublicKey.getModulus().toByteArray());
            publicKeyEncoded = new String(
                    Base64.encodeBase64(byteOs.toByteArray()));
            return ""ssh-rsa "" + publicKeyEncoded + "" "" + user;
        }
        else if(publicKey.getAlgorithm().equals(""DSA"")){
            DSAPublicKey dsaPublicKey = (DSAPublicKey) publicKey;
            DSAParams dsaParams = dsaPublicKey.getParams();

            ByteArrayOutputStream byteOs = new ByteArrayOutputStream();
            DataOutputStream dos = new DataOutputStream(byteOs);
            dos.writeInt(""ssh-dss"".getBytes().length);
            dos.write(""ssh-dss"".getBytes());
            dos.writeInt(dsaParams.getP().toByteArray().length);
            dos.write(dsaParams.getP().toByteArray());
            dos.writeInt(dsaParams.getQ().toByteArray().length);
            dos.write(dsaParams.getQ().toByteArray());
            dos.writeInt(dsaParams.getG().toByteArray().length);
            dos.write(dsaParams.getG().toByteArray());
            dos.writeInt(dsaPublicKey.getY().toByteArray().length);
            dos.write(dsaPublicKey.getY().toByteArray());
            publicKeyEncoded = new String(
                    Base64.encodeBase64(byteOs.toByteArray()));
            return ""ssh-dss "" + publicKeyEncoded + "" "" + user;
        }
        else{
            throw new IllegalArgumentException(
                    ""Unknown public key encoding: "" + publicKey.getAlgorithm());
        }
    }


","18673","<java><ssh><public-key-encryption><openssh>","15","3","4","2017-04-07 22:15:48","3706631","1","16","642653","","2016-02-08 15:45:02","2010-09-14 04:41:11",""
"3706177","How to generate ssh compatible id_rsa(.pub) from Java","I'm looking for a way to programmatically create ssh compatible id_rsa and id_rsa.pub files in Java. 
I got as far as creating the KeyPair:
KeyPairGenerator generator;
generator = KeyPairGenerator.getInstance(""RSA"");
// or: generator = KeyPairGenerator.getInstance(""DSA"");
generator.initialize(2048);
keyPair = generator.genKeyPair();

I can't figure out however how to create the String representation of the PrivateKey and PublicKey in the KeyPair.
","The generic solution for any PublicKey type (RSA, DSA, etc.) is a one-liner using SSHJ:
byte[] b = new Buffer.PlainBuffer().putPublicKey(key).getCompactData()

and then encode using Base64.getEncoder().encodeToString(b).
","18673","<java><ssh><public-key-encryption><openssh>","15","2","4","2017-04-07 22:15:48","3706631","1","16","642653","","2016-02-08 15:45:02","2010-09-14 04:41:11",""
"13425811","Git SSH authentication","I have Debian, Fisheye and Git on my server.
My git repos are managed by Fisheye. There is no authentication at the Fisheye part. All authentication procedures are managed by git.
I would like to use SSH authentication, so that I do not need to provide username and password as I push my changes to the server. I know how to create an rsa key, but where do I copy my public key at the server?
","You need to paste your public key inside ~/.ssh/authorized_keys. Create the file if it doesn't exist.
","18064","<git><ssh><public-key-encryption><public-key><atlassian-fisheye>","3","1","2","2018-03-30 09:47:45","13428529","0","3","13750","","2013-02-09 04:37:52","2012-11-16 23:14:37",""
"13425811","Git SSH authentication","I have Debian, Fisheye and Git on my server.
My git repos are managed by Fisheye. There is no authentication at the Fisheye part. All authentication procedures are managed by git.
I would like to use SSH authentication, so that I do not need to provide username and password as I push my changes to the server. I know how to create an rsa key, but where do I copy my public key at the server?
","The key part of the article ""Git on the Server - Setting Up the Server"" is:

you need to add some developer SSH public keys to the ~/.ssh/authorized_keys file for that user.
  Let’s assume you’ve received a few keys by e-mail and saved them to temporary files. Again, the public keys look something like this:

$ cat /tmp/id_rsa.john.pub
ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCB007n/ww+ouN4gSLKssMxXnBOvf9LGt4L
ojG6rs6hPB09j9R/T17/x4lhJA0F3FR1rP6kYBRsWj2aThGw6HXLm9/5zytK6Ztg3RPKK+4k
Yjh6541NYsnEAZuXz0jTTyAUfrtU3Z5E003C4oxOj6H0rfIF1kKI9MAQLMdpGW1GYEIgS9Ez
Sdfd8AcCIicTDWbqLAcU4UpkaX8KyGlLwsNuuGztobF8m72ALC/nLF6JLtPofwFBlgc+myiv
O7TCUSBdLQlgMVOFq1I2uPWQOkOWQAHukEOmfjy2jctxSDBQ220ymjaNsHT4kgtZg2AYYgPq
dAv8JggJICUvax2T9va5 gsg-keypair

(Note: make sure the key is displayed on one single line)

You just append them to your authorized_keys file:

$ cat /tmp/id_rsa.john.pub >> ~/.ssh/authorized_keys

If you don't have an authorized_keys file on your server, create it, but make sure to protect it correctly.
server$ mkdir ~/.ssh
server$ chmod 700 ~/.ssh
server$ cat ~/id_rsa.pub >> ~/.ssh/authorized_keys
server$ chmod 600 ~/.ssh/authorized_keys
server$ rm ~/id_rsa.pub

See ""Creating SSH keys for Gerrit and Hudson"" for a concrete example.

Make sure git is in the PATH used by your ssh daemon.
Make sure all parent directories of your ~/.ssh are not writable for the group (chmod 755 only).

","18064","<git><ssh><public-key-encryption><public-key><atlassian-fisheye>","3","6","2","2018-03-30 09:47:45","13428529","0","3","13750","","2013-02-09 04:37:52","2012-11-16 23:14:37",""
"19249396","Encrypting Data using RSA Public and Private Key in C#","I am trying to encrypt a message using RSA public key and decrypt it using my private key. It encrypted the message, but I was not able to decrypt it.  The message was still encrypt after the final process.  When I exported the private key, it also included the public keys. I tried to remove the public key leaving, but it would not work. 
Here are the private and public keys
//This is the public key
private const string public_key =  ""<RSAKeyValue><Modulus>uznzVPilsR1rWPkpq6m6IALaafDnVZTDDcnEyBD3A/PBx2JZTKM0DTgiTDDwCEmQBNBpPILcIBdtg3aSUgicair+2ksYrVFT+uiy0Zy1nU6qoJ+SsapLKrpCa1zHpV4LMO/pFo4Foqzw0C1FNe56FXo1xj77GPgeYl0MHUVtAUc=</Modulus><Exponent>AQAB</Exponent></RSAKeyValue>"";

//This is the private and public key.
private const String private_key = ""<RSAKeyValue><Modulus>uznzVPilsR1rWPkpq6m6IALaafDnVZTDDcnEyBD3A/PBx2JZTKM0DTgiTDDwCEmQBNBpPILcIBdtg3aSUgicair+2ksYrVFT+uiy0Zy1nU6qoJ+SsapLKrpCa1zHpV4LMO/pFo4Foqzw0C1FNe56FXo1xj77GPgeYl0MHUVtAUc=</Modulus><Exponent>AQAB</Exponent><P>+jPKs9JxpCSzNY+YNanz49Eo/A6RaU1DZWoFm/bawffZOompeL1jzpUlJUIrKVZJkNFvlxE90uXVwjxWBLv9BD==</P><Q>v5CVWKZ5Wo7W0QyoEOQS/OD8tkKS9DjzZnbnuo6lhcMaxsBrCWLstac1Xm2oFNtZgLtrPGbPfCNC5Su4Rz/P5w==</Q><DP>ZnyikmgobqEt20m3gnvcUDxT+nOJMsYYTklQhONoFj4M+EJ9bdy+Lle/gHSLM4KJ3c08VXgVh/bnSYnnfkb20Q==</DP><DQ>sSYGRfWk0W64Dpfyr7QKLxnr+Kv186zawU2CG44gWWNEVrnIAeUeWxnmi41CWw9BZH9sum2kv/pnuT/F6PWEzw==</DQ><InverseQ>XpWZQKXa1IXhF4FX3XRXVZGnIQP8YJFJlSiYx6YcdZF24Hg3+Et6CZ2/rowMFYVy+o999Y5HDC+4Qa1yWvW1vA==</InverseQ><D>Kkfb+8RrJqROKbma/3lE3xXNNQ7CL0F5CxQVrGcN8DxL9orvVdyjlJiopiwnCLgUHgIywceLjnO854Q/Zucq6ysm2ZRq36dpGLOao9eg+Qe8pYYO70oOkEe1HJCtP1Laq+f3YK7vCq7GkgvKAI9uzOd1vjQv7tIwTIADK19ObgE=</D></RSAKeyValue>"";

//Encrypting the text using the public key
private RSACryptoServiceProvider cipher = null;
cipher = new RSACryptoServiceProvider();
            cipher.FromXmlString(public_key);
            byte[] data = Encoding.UTF8.GetBytes(txtUnencrypt.Text);
            byte[] cipherText = cipher.Encrypt(data, false);
            lblUnencryptMessage.Text = Convert.ToBase64String(cipherText);

        //    decryptText();

//Trying to decrypt the text using the private key

cipher = new RSACryptoServiceProvider();
            cipher.FromXmlString(private_key);

            byte[] ciphterText = Convert.FromBase64String(lblUnencryptMessage.Text);
            byte[] plainText = cipher.Decrypt(ciphterText, false);
            lblDecript.Text = Convert.ToBase64String(plainText);

What am I missing here? 
Updated at 11:37 AM
For example, I encrypted the word ""Testing"", the encrypted text was kkqs+UGHNI7/3cKhQvSnJrKzNeCBQX9xHX2VrlyMvnwtszJAoFuViBZlfwmpVhqddnVUrlaqqkD7971E8L3wWltfGetK9nIljeo0GeietLYljoY0Gy3gatU++JPrqajAKxpIB75tvVlKXuYIs0qE3XWZu9bj0zAa4BVT2MhVNQM=""
The decrypted text was
dGVzdGluZw==
","There appears to be nothing wrong with the encryption/decryption code, just how you're handling the decrypted data. Specifically this line:
lblDecript.Text = Convert.ToBase64String(plainText);

You are taking the decrypted data and Base64 encoding it, which is why you get: dGVzdGluZw== (since this is the Base64 encoded version of the string ""testing"").
You need to use the following instead:
lblDecript.Text = Encoding.UTF8.GetString(plainText);

This should correctly convert the decrypted byte array to a the original string.
","17943","<asp.net><asp.net-mvc-3><rsa><public-key-encryption>","3","8","2","2016-11-28 12:44:03","19257767","3","2","1881162","","2013-10-08 15:38:03","2013-10-08 13:43:22",""
"19249396","Encrypting Data using RSA Public and Private Key in C#","I am trying to encrypt a message using RSA public key and decrypt it using my private key. It encrypted the message, but I was not able to decrypt it.  The message was still encrypt after the final process.  When I exported the private key, it also included the public keys. I tried to remove the public key leaving, but it would not work. 
Here are the private and public keys
//This is the public key
private const string public_key =  ""<RSAKeyValue><Modulus>uznzVPilsR1rWPkpq6m6IALaafDnVZTDDcnEyBD3A/PBx2JZTKM0DTgiTDDwCEmQBNBpPILcIBdtg3aSUgicair+2ksYrVFT+uiy0Zy1nU6qoJ+SsapLKrpCa1zHpV4LMO/pFo4Foqzw0C1FNe56FXo1xj77GPgeYl0MHUVtAUc=</Modulus><Exponent>AQAB</Exponent></RSAKeyValue>"";

//This is the private and public key.
private const String private_key = ""<RSAKeyValue><Modulus>uznzVPilsR1rWPkpq6m6IALaafDnVZTDDcnEyBD3A/PBx2JZTKM0DTgiTDDwCEmQBNBpPILcIBdtg3aSUgicair+2ksYrVFT+uiy0Zy1nU6qoJ+SsapLKrpCa1zHpV4LMO/pFo4Foqzw0C1FNe56FXo1xj77GPgeYl0MHUVtAUc=</Modulus><Exponent>AQAB</Exponent><P>+jPKs9JxpCSzNY+YNanz49Eo/A6RaU1DZWoFm/bawffZOompeL1jzpUlJUIrKVZJkNFvlxE90uXVwjxWBLv9BD==</P><Q>v5CVWKZ5Wo7W0QyoEOQS/OD8tkKS9DjzZnbnuo6lhcMaxsBrCWLstac1Xm2oFNtZgLtrPGbPfCNC5Su4Rz/P5w==</Q><DP>ZnyikmgobqEt20m3gnvcUDxT+nOJMsYYTklQhONoFj4M+EJ9bdy+Lle/gHSLM4KJ3c08VXgVh/bnSYnnfkb20Q==</DP><DQ>sSYGRfWk0W64Dpfyr7QKLxnr+Kv186zawU2CG44gWWNEVrnIAeUeWxnmi41CWw9BZH9sum2kv/pnuT/F6PWEzw==</DQ><InverseQ>XpWZQKXa1IXhF4FX3XRXVZGnIQP8YJFJlSiYx6YcdZF24Hg3+Et6CZ2/rowMFYVy+o999Y5HDC+4Qa1yWvW1vA==</InverseQ><D>Kkfb+8RrJqROKbma/3lE3xXNNQ7CL0F5CxQVrGcN8DxL9orvVdyjlJiopiwnCLgUHgIywceLjnO854Q/Zucq6ysm2ZRq36dpGLOao9eg+Qe8pYYO70oOkEe1HJCtP1Laq+f3YK7vCq7GkgvKAI9uzOd1vjQv7tIwTIADK19ObgE=</D></RSAKeyValue>"";

//Encrypting the text using the public key
private RSACryptoServiceProvider cipher = null;
cipher = new RSACryptoServiceProvider();
            cipher.FromXmlString(public_key);
            byte[] data = Encoding.UTF8.GetBytes(txtUnencrypt.Text);
            byte[] cipherText = cipher.Encrypt(data, false);
            lblUnencryptMessage.Text = Convert.ToBase64String(cipherText);

        //    decryptText();

//Trying to decrypt the text using the private key

cipher = new RSACryptoServiceProvider();
            cipher.FromXmlString(private_key);

            byte[] ciphterText = Convert.FromBase64String(lblUnencryptMessage.Text);
            byte[] plainText = cipher.Decrypt(ciphterText, false);
            lblDecript.Text = Convert.ToBase64String(plainText);

What am I missing here? 
Updated at 11:37 AM
For example, I encrypted the word ""Testing"", the encrypted text was kkqs+UGHNI7/3cKhQvSnJrKzNeCBQX9xHX2VrlyMvnwtszJAoFuViBZlfwmpVhqddnVUrlaqqkD7971E8L3wWltfGetK9nIljeo0GeietLYljoY0Gy3gatU++JPrqajAKxpIB75tvVlKXuYIs0qE3XWZu9bj0zAa4BVT2MhVNQM=""
The decrypted text was
dGVzdGluZw==
","I found a full tutorial with helper class here
This will explain how to validate JWS token in asp.net c# environment, also it validates time expiration.
check it on the below link
http://www.techdoubts.net/2015/01/json-web-signature-jws-rsa-public-key-aps-net.html, it will help beginners too.
","17943","<asp.net><asp.net-mvc-3><rsa><public-key-encryption>","3","-3","2","2016-11-28 12:44:03","19257767","3","2","1881162","","2013-10-08 15:38:03","2013-10-08 13:43:22",""
"9436323","RSA code in matlab","I want to encrypt a message such as 'HELO1234 and then decrypt to get the original one.I have written RSA code in matlab which is not working correctly.

PARAMETER CALCULATION

temp=1;
range=1:10;
k=isprime(range)
prime_mat=range(find(k))
p=randsample(prime_mat,1);
q=randsample(prime_mat,1);
if(p~=q)
n=p*q;
phi_n=(p-1)*(q-1);
u=1:phi_n -1;
end
while temp
 enckey=randsample(u,1);
  deckey=randsample(u,1);
  if(enckey~=deckey)
  if(gcd(enckey,phi_n)~=1 ...
     && gcd(deckey,phi_n)~=1 ...
   &&gcd(enckey*deckey,phi_n)~=1)
    temp=1;
 else 
 temp=0;
  end
  end
end


ENCRYPTION PROCESS

 char t= 'hello123';
      t=uint8(t);
        len=length(t)
         pow=[];
         cipher_text=[];
           for i=1:len                                   
               pow=[pow;t(i).^(enckey)];  %each element of the pt matrix(plain text) is raised    to the power of encryption key(enc_key) and stored in pow matrix(power matrix)

    cipher_text=[cipher_text;mod(pow(i),n)];% cipher text is calculate

d

OUTPUT OF encryption process

k =
 0     1     1     0     1     0     1     0     0     0

prime_mat =
 2     3     5     7

p =
 7

q =
 2

n =
14

enckey =
 5

deckey =
 1

phi_n =
 6

len =
28

cipher_text =
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3


DECRYPTION PROCESS

plain_text=[];
pow1=[];
len1=length(cipher_text);
for i=1:len
    pow1=[pow1;cipher_text(i).^(deckey)]
    plain_text=[plain_text;mod(pow1(i),n)]

uint8(plain_text);
","Don't bother implementing it yourself. Writing crypto is hard and bugs have security consequences. Use a well-known library from a trusted vendor.
In Matlab, you can call down to the standard Java cryptography classes included with the JVM bundled with Matlab. The Matlab code will look something like this.
import javax.crypto.Cipher;

plaintext = 'foobar';

cipher = Cipher.getInstance('RSA');
keygen = java.security.KeyPairGenerator.getInstance('RSA');
keyPair = keygen.genKeyPair();
cipher.init(Cipher.ENCRYPT_MODE, keyPair.getPrivate());

plaintextUnicodeVals = uint16(plaintext);
plaintextBytes = typecast(plaintextUnicodeVals, 'int8');
ciphertext = cipher.doFinal(plaintextBytes)'  %'

% And back out
cipher.init(Cipher.DECRYPT_MODE, keyPair.getPublic());
decryptedBytes = cipher.doFinal(ciphertext);
decryptedText = char(typecast(decryptedBytes, 'uint16'))'

","17362","<matlab><encryption><rsa><public-key-encryption>","7","11","1","2012-02-24 19:17:36","9436658","8","1","1199668","","2012-02-24 18:59:16","2012-02-24 18:50:00",""
"7187883","How to encrypt a .jar file","I'm working in a project where we need to encrypt the .jar file so no one can access to the .class files which inside the jar file.... is there any java coding which can help me to encrypt the .jar file ?
","No. Since your program needs to be able to run the code it would be pointless anyway.
You can obfuscate your code though so decompiling the .class files results in less readable code (meaningless variable/class names etc).
","16810","<java><encryption><ant><public-key-encryption>","5","1","8","2017-07-01 05:19:25","7187961","0","3","2959","","2011-08-25 09:42:53","2011-08-25 09:19:11",""
"7187883","How to encrypt a .jar file","I'm working in a project where we need to encrypt the .jar file so no one can access to the .class files which inside the jar file.... is there any java coding which can help me to encrypt the .jar file ?
","As far as I know this is not supported by standard JVM. But you can do the following. Separate your application into 2 parts. First will not be encrypted. It will be a simple loader that will instantiate the rest using custom class loader. This class loader will get Classes as arrays of bytes, decrypt and load them. 
","16810","<java><encryption><ant><public-key-encryption>","5","1","8","2017-07-01 05:19:25","7187961","0","3","2959","","2011-08-25 09:42:53","2011-08-25 09:19:11",""
"7187883","How to encrypt a .jar file","I'm working in a project where we need to encrypt the .jar file so no one can access to the .class files which inside the jar file.... is there any java coding which can help me to encrypt the .jar file ?
","Even if you encrypt the jar file, it must be decrypted before the JVM is able to run it, so you'll need another jar file containing classes that decrypt and loads in the JVM.
Since this second jar file cannot be itself encrypted, a malicious user wanting to see you class files, can simply look at classes in this second jar file, and then decrypt your super-secret jar file and have access to it.
Maybe you can increase security of your code using an obfuscator, but it will eventually protect (make it harder but not impossible) your class files from decompilation, not from being used.
If obfuscation is not enough, you could consider compiling your jar file to a DLL for windows or a SO for unix/linux, that will make it much harder to decompile, but it's not always possible to do that correctly and it's generally a PITA. GCJ is able to do this somehow, and there are other commercial products that will actually compile .class/.jar directly to machine code.
However please consider that it does not matter how much security you put in it, since the client computer MUST be able to execute it, it must be able to read it, so no matter what your code will be exposed, you can only make it harder.
If you really have an algorithm so secret you don't want to disclose no matter what, consider converting it to a web service, hosting it on your server, so that you don't have to send the actual code to the client machines and can also better prevent unauthorized copies of your application by checking access to that vital part of it.
","16810","<java><encryption><ant><public-key-encryption>","5","16","8","2017-07-01 05:19:25","7187961","0","3","2959","","2011-08-25 09:42:53","2011-08-25 09:19:11",""
"7187883","How to encrypt a .jar file","I'm working in a project where we need to encrypt the .jar file so no one can access to the .class files which inside the jar file.... is there any java coding which can help me to encrypt the .jar file ?
","if you don't want to provide an access to the class files inside the jar, why should you supply your jar with the application?
It feels like your question is kind of wrong conceptually...
If you need some custom way of loading the classes, consider to use custom classloader.
","16810","<java><encryption><ant><public-key-encryption>","5","0","8","2017-07-01 05:19:25","7187961","0","3","2959","","2011-08-25 09:42:53","2011-08-25 09:19:11",""
"7187883","How to encrypt a .jar file","I'm working in a project where we need to encrypt the .jar file so no one can access to the .class files which inside the jar file.... is there any java coding which can help me to encrypt the .jar file ?
","I assume you are aware of the fact that any skilled java coder can reverse-engineer the Java tool you use (or write) and still decode the app's jars? Also writing custom classloaders which read your ""encrypted"" code can be decompiled and a tool could be written to bypass it.
Even with obfuscation and bytecode modification and custom classloaders, java is hackable/decompileable and the source can almost always be brought to a somewhat readable state.
","16810","<java><encryption><ant><public-key-encryption>","5","3","8","2017-07-01 05:19:25","7187961","0","3","2959","","2011-08-25 09:42:53","2011-08-25 09:19:11",""
"7187883","How to encrypt a .jar file","I'm working in a project where we need to encrypt the .jar file so no one can access to the .class files which inside the jar file.... is there any java coding which can help me to encrypt the .jar file ?
","You want to obfuscate, not encrypt, the jar file.
A popular choice for doing this in Java is ProGuard.
","16810","<java><encryption><ant><public-key-encryption>","5","3","8","2017-07-01 05:19:25","7187961","0","3","2959","","2011-08-25 09:42:53","2011-08-25 09:19:11",""
"7187883","How to encrypt a .jar file","I'm working in a project where we need to encrypt the .jar file so no one can access to the .class files which inside the jar file.... is there any java coding which can help me to encrypt the .jar file ?
","i prefer jCrypt!
It is a simple tool where you can crypt the classes(and ressources)
","16810","<java><encryption><ant><public-key-encryption>","5","-1","8","2017-07-01 05:19:25","7187961","0","3","2959","","2011-08-25 09:42:53","2011-08-25 09:19:11",""
"7187883","How to encrypt a .jar file","I'm working in a project where we need to encrypt the .jar file so no one can access to the .class files which inside the jar file.... is there any java coding which can help me to encrypt the .jar file ?
","if you are packaging in jar -> just rename it to jarname.ABCD or any misleading extension or even take off the extension, and accordingly specify the jar name in your application.
","16810","<java><encryption><ant><public-key-encryption>","5","0","8","2017-07-01 05:19:25","7187961","0","3","2959","","2011-08-25 09:42:53","2011-08-25 09:19:11",""
"13749736","Encryption with certificate","I'm quite new to all this encryption thing and I'm trying to do a simple app to encrypt a given string. Here's my code:
public static X509Certificate2 getPublicKey()
{
    RSACryptoServiceProvider RSA = new RSACryptoServiceProvider();

    X509Certificate2 cert2 = new X509Certificate2(""c:\\certificate.cer"");

    return cert2;
}


public static string cipherRequest(byte[] stringToEncrypt)
{
    X509Certificate2 certificate = getPublicKey();

    RSACryptoServiceProvider rsa = certificate.PublicKey.Key as RSACryptoServiceProvider;

    byte[] cryptedData = rsa.Encrypt(stringToEncrypt, true);

    return Convert.ToBase64String(cryptedData);
}

public static void Main()
{

    try
    {

        ASCIIEncoding ByteConverter = new ASCIIEncoding();

        byte[] test = ByteConverter.GetBytes(""stringtoencrypt"");

        string first = cipherRequest(test);
        string second= cipherRequest(test);

        Console.WriteLine(""first: {0}"", first);
        Console.WriteLine(""second: {0}"", second);

    }
    catch(CryptographicException e)
    {
        Console.WriteLine(e.Message);
    }

}

So every time I call the cipherRequest it produces different results. I've checked the certificate is loaded but it produces different results.
Any thoughts?
","Random padding is added before the actual encryption to avoid certain attacks. This is why you are getting different results each time you call the encryption method.
For more info, see this post:
RSA in C# does not produce same encrypted string for specific keys?
","16710","<c#><certificate><public-key-encryption>","7","7","1","2012-12-06 18:56:51","","2","3","1712248","","2012-12-06 18:08:48","2012-12-06 18:03:57",""
"27568570","how to convert raw modulus & exponent to RSA public key (.pem format)","I have the modulus & exponent of an RSA public key embedded into a binary file, and I am trying to extract the entire blob and create a usable .pem public key.
Currently, I am extracting the full 260 bytes (4 bytes for the exponent, 256 bytes for the modulus) 
and encoding as base64. I am doing that using the following shell command :
tail -c $((filesize - start_of_key_data)) filename | head -c $size_of_key_data | base64 > outkey

This gives me the following string :
<<<<<< modulus & exponent extracted from binary file, base64-encoded >>>>>>

tZyrQA6cZFJfVm6FyXwtZaLQYg8EecuO+ObrHTwc8JO+XrgnpNAdmlhbAEPxSNnjwhNnbYGYGL4F
vzmnZXzZU71Key42HQPh1k2Zx1UDbrH5ciODKx1ZbuEx8K24SHnL1nY/H75hwhT/ZRRVGQDvYDT+
sgzw2vmV66+dflw1Zs8BLhqjLjczdHvjeVXsDRJ9Mvvd/dhFH8UlTf4JpLGya9nsNIfNBBIf1Lll
RWwCTiEIbaOMgWcLjLV/2tk/j5Dra/oQnVf/2hVsEF/hXEx41YjeEW/warweoDVG7zaxrHEc/k/r
ZCUCZKxf8nBKdqax/gRICvkG6e5xg2GQw0W/ZwABAAE=

Now, when I take the key.pem keypair that the modulus & exponent were originally extracted from, and display the public portion like so
openssl rsa -in key.pem -pubout -out pubkey.pem

I get this string (I have omitted the header & footer lines :
<<<<<<<<< valid public key data extracted from keypair >>>>>>>>>

MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAtZyrQA6cZFJfVm6FyXwt
ZaLQYg8EecuO+ObrHTwc8JO+XrgnpNAdmlhbAEPxSNnjwhNnbYGYGL4FvzmnZXzZ
U71Key42HQPh1k2Zx1UDbrH5ciODKx1ZbuEx8K24SHnL1nY/H75hwhT/ZRRVGQDv
YDT+sgzw2vmV66+dflw1Zs8BLhqjLjczdHvjeVXsDRJ9Mvvd/dhFH8UlTf4JpLGy
a9nsNIfNBBIf1LllRWwCTiEIbaOMgWcLjLV/2tk/j5Dra/oQnVf/2hVsEF/hXEx4
1YjeEW/warweoDVG7zaxrHEc/k/rZCUCZKxf8nBKdqax/gRICvkG6e5xg2GQw0W/
ZwIDAQAB

You can see that the key data which I have extracted and base64-encoded myself is
actually present in the data of the valid public key data extracted from the key.pem using openssl.
However there are 45 characters at the beginning, that my own extracted data does not have -
MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA

and the last 8 characters also differ.
ZwIDAQAB

Can anybody offer some advice on how to convert a modulus and exponent into a usable public key?
(the goal is to do this in a bash script, not python or C as I've seen many suggest.)    
","Command which you used, openssl rsa -in key.pem -pubout -out pubkey.pem, produces the ASN.1 structure like this:
SEQUENCE(2 elem)
  SEQUENCE(2 elem)
    OBJECT IDENTIFIER 1.2.840.113549.1.1.1
    NULL
  BIT STRING(1 elem)
    SEQUENCE(2 elem)
      INTEGER(2048 bit) 229263895356027367204242482830890190076375310244080661230946245232688…
      INTEGER 65537

(You can see the structure with openssl asn1parse -in pubkey.pem, or using an online ASN.1 decoder).
It contents: 

a fixed header (contains all bytes, specifying the encoding of the
whole sequence plus the encoding of the modulus)
modulus
header, specifying encoding of the exponent
exponent

If you have the modulus and exponent bytes correctly collected, you can construct the the public key in form, understandable by OpenSSL, by concatenating these four things. You already have the first longer header. The ""middle header"" is '02 03':

'02' for the integer
length of the integer itself is 3 bytes (65537 = 01 00 01) 

If your modulus is 2048 bytes and exponent 3 bytes (so that the length fields remain valid), the PEM file can be produced by concatenating these four:
<header> <modulus> 0x02 0x03 <exponent>

That is why the last bytes from the binary dump differ from the OpenSSL output: the extracted 260 bytes do not contain 02 03, but instead record 65537 as 00 01 00 01 (not 01 00 01 as in ASN.1 encoding).
To summarize, you can produce the PEM file like this:
Convert your extracted modulus+exponent back from base64 and extract them (note the 257 byte offset to skip the leading zero byte of 65537!):
echo 'tZyrQA6cZFJfVm6FyXwtZaLQYg8EecuO+ObrHTwc8JO+XrgnpNAdmlhbAEPxSNnjwhNnbYGYGL4FvzmnZXzZU71Key42HQPh1k2Zx1UDbrH5ciODKx1ZbuEx8K24SHnL1nY/H75hwhT/ZRRVGQDvYDT+sgzw2vmV66+dflw1Zs8BLhqjLjczdHvjeVXsDRJ9Mvvd/dhFH8UlTf4JpLGya9nsNIfNBBIf1LllRWwCTiEIbaOMgWcLjLV/2tk/j5Dra/oQnVf/2hVsEF/hXEx41YjeEW/warweoDVG7zaxrHEc/k/rZCUCZKxf8nBKdqax/gRICvkG6e5xg2GQw0W/ZwABAAE=' | base64 -d > modulus-exp.bin
dd if=modulus-exp.bin of=modulus.bin bs=1 count=256
dd if=modulus-exp.bin of=exponent.bin bs=1 skip=257 count=3

Create the headers:
echo 'MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA' | base64 -d > header.bin
echo '02 03' | xxd -r -p > mid-header.bin

Concatenate them together:
cat header.bin modulus.bin mid-header.bin exponent.bin > key.der

Convert to PEM:
openssl pkey -inform der -outform pem -pubin -in key.der -out key.pem

Test that you get the working key - by checking it with ASN.1 decoder, or by
openssl asn1parse -in key.pem
openssl asn1parse -in key.pem -strparse 19

","14890","<bash><rsa><public-key-encryption>","9","15","1","2015-12-27 00:59:34","27570866","0","8","2539954","","2015-12-27 00:59:34","2014-12-19 14:58:54",""
"17670446","what is the difference between various keys in public key encryption","I am confused between various keys used in encryption.
Amazon gave me key.pem
In linux i generate keys like  id_rsa and id_rsa.pub
Now putty used key like key.ppk
I am really confused what type of key is used where
","key.pem can contain anything - a certificate with a public key, an SSH public key, public key + private key, certificate with a public key + private key. PEM is a text file so you can open it in notepad and check its contents. 
id_rsa is an SSH private key in OpenSSH format. id_rsa.pub is an SSH public key in OpenSSH format. 
.ppk file is Putty's private key (if memory serves).
To authenticate on remote server you give its admins your public key and use the private key in your SSH client. Alternatively (if admins give you the key pair), you use the private key from that keypair. 
","14873","<encryption><ssh><amazon-web-services><putty><public-key-encryption>","44","33","1","2013-07-16 10:29:49","17674179","1","4","","","","2013-07-16 07:24:14",""
"14434343","how to encrypt a file using private key in gpg","I'm producing an update for some systems and I want to encrypt the updates for keeping confidentiality, integrity and validity of my signature. I want to encrypt the file with my private key and send them to my client so that they can decrypt it with my public key. But the way GPG works is encryption with public and decrypt with private. I don't want to send my private key so that I can change it and send public key to anyone else . Any idea how to do that???
","You might need to have a separate key pair for that explicit purpose, and distribute the private key, while keeping the public key secret (yes, it's kind of backwards with regard to the terms); then you just encrypt the updates normally with the public key, and your recipients can decrypt them with the private key.
","14370","<linux><encryption><public-key-encryption><private-key><gnupg>","7","-4","5","2018-03-20 21:00:26","","2","4","1169096","","2017-10-11 08:00:35","2013-01-21 07:47:57",""
"14434343","how to encrypt a file using private key in gpg","I'm producing an update for some systems and I want to encrypt the updates for keeping confidentiality, integrity and validity of my signature. I want to encrypt the file with my private key and send them to my client so that they can decrypt it with my public key. But the way GPG works is encryption with public and decrypt with private. I don't want to send my private key so that I can change it and send public key to anyone else . Any idea how to do that???
","What you mean is not called ""encryption"" but ""signing"" in gpg lingo.
Signing is basically encrypting with your private key and decrypting with the public key.
Use
 gpg --sign myfile.ext

Or use your email-client's signing capabilities.
Signing will obviously allow anybody who has access to your ""public"" key to read the contents of your file (and since a ""public"" key is usually, well..., public, this will allow everybody to decypher the content).
If you are looking for a method, where only the recipient can decode the content, then you need to encrypt the data in a way where only the recipient has access to the decrypting token. obviously the recipient need to have such a token (that is: you encode with their public key, so they can decode with their private key)
UPDATE
To make it simple: if you want to guarantee integrity (that is: the recipient knows for sure, that the data comes from you and nobody else), you need to sign the data.
If you want to guarantee confidentiality (that is: only your recipient can read the data), you need to encrypt the data.
Both signing and encryption are really the same thing.
The only difference is, who has access to the keys.
With signing, you use your private key to encrypt the data, and it can be decrypted with your public key (and since everybody has access to the public key, everybody can decrypt it, and thus everybody can validate that the data has been signed by you)
With encrypting, you use your recipients public key to encrypt the data, and they use their private key to decrypt it (so only they can read it; but everybody can send them an encrypted datum, they have no guarantee that it really comes from the sender, but it is guaranteed that only they can read it).
If you need both confidentiality and integrity, you need to do both signing and encryption, and for this to work, both you and your recipients need to have a (different) public/private key pair.
CONCLUSION
Since both signing and encrypting are the same thing, you can use both to guarantee validity and integrity of your data, as long as you have full control over the availability of the keys involved.
","14370","<linux><encryption><public-key-encryption><private-key><gnupg>","7","15","5","2018-03-20 21:00:26","","2","4","1169096","","2017-10-11 08:00:35","2013-01-21 07:47:57",""
"14434343","how to encrypt a file using private key in gpg","I'm producing an update for some systems and I want to encrypt the updates for keeping confidentiality, integrity and validity of my signature. I want to encrypt the file with my private key and send them to my client so that they can decrypt it with my public key. But the way GPG works is encryption with public and decrypt with private. I don't want to send my private key so that I can change it and send public key to anyone else . Any idea how to do that???
","It is not true that GnuPG requires you to publish your private key in order to encrypt a document. You should never publish your private key to anyone.
GnuPG supports two different encryption methods, asymmetric and symmetric encryption.
Asymmetric encryption requires to to know the public key of your recipient. This is usually not a problem because as the name already suggests these keys are not a secret but known to everyone. For decrypting it again only the private key can be used which is known only to your recipient. Asymmetric encryption using GnuPG is done with the --encrypt option.
If you don't know the public key of your recipient then you can use symmetric encryption where both parties share the same key. This requires a secure channel for transmitting the shared secret, of course. For symmetric encryption, use the --symmetric option. Neither a public nor a private key is required here but the secure exchange of the shared key makes symmetric encryption prone to attacks.
If you just need integrity and accountability (the document can't be modified without detecting it and you are able to verify who created/signed it) then you can use the --sign option to create a signature using your private key. Everybody having access to your public key can check this signature to verify both integrity and accountability. But note that everybody can read your original message content because this signature is no encryption. The resulting .gpg-file looks like binary data but only contains compressed but not encrypted text. You can also disable compression by specifying --compress-level 0 and you will see that the output file contains your original message in plaintext. So don't use this option if you want confidentiality.
","14370","<linux><encryption><public-key-encryption><private-key><gnupg>","7","8","5","2018-03-20 21:00:26","","2","4","1169096","","2017-10-11 08:00:35","2013-01-21 07:47:57",""
"14434343","how to encrypt a file using private key in gpg","I'm producing an update for some systems and I want to encrypt the updates for keeping confidentiality, integrity and validity of my signature. I want to encrypt the file with my private key and send them to my client so that they can decrypt it with my public key. But the way GPG works is encryption with public and decrypt with private. I don't want to send my private key so that I can change it and send public key to anyone else . Any idea how to do that???
","Simple answer: forget the idea of keys. You only need a shared secret passphrase. So get together with your client. Call them on the phone. Or if you're paranoid, do it face to face. Agree on a passphrase you will share and keep it as secret as you need to. Based on my experience, I recommend using diceware together to pick a shared passphrase. Both of you keep a secure copy of that shared secret. If you're paranoid, don't write it down—memorize it! Now you can encrypt anything using that shared secret as the passphrase. Any symmetric encryption tool can do that for you, including GPG.
","14370","<linux><encryption><public-key-encryption><private-key><gnupg>","7","0","5","2018-03-20 21:00:26","","2","4","1169096","","2017-10-11 08:00:35","2013-01-21 07:47:57",""
"14434343","how to encrypt a file using private key in gpg","I'm producing an update for some systems and I want to encrypt the updates for keeping confidentiality, integrity and validity of my signature. I want to encrypt the file with my private key and send them to my client so that they can decrypt it with my public key. But the way GPG works is encryption with public and decrypt with private. I don't want to send my private key so that I can change it and send public key to anyone else . Any idea how to do that???
","I am working on a similar problem: distribute software updates from a central source to be applied to many end-users in the field.  End users need to validate that the update came from the official source (signed with private key), but I also want the update to travel confidentially (encrypted).
In the cryptography course I had at University ~30 years ago now, they taught that encrypting with one's private key was the same thing as signing a message - when the recipient decrypts using the public key, the fact that they do not get gibberish confirms use of the private key to encrypt.  This also provides a measure of confidentiality if the public key is kept ""close to the vest,"" which would be my preferred implementation.
As mentioned by others, I have confirmed that the gpg --sign operation does not encrypt the message, the message is visible in plaintext in the signed file.  To use gpg to accomplish both certain authenticity with a signature from the private key, and a reasonable measure of confidentiality, I have settled on the solution of giving the field based receivers their own key pair, in addition to the public key of the update distributor.  This isn't a terribly secure solution, anyone can reverse engineer a device in the field and get ahold of the ""secret"" key that it will hold, with that they can decrypt the signed update message and see its cleartext contents.  What they cannot do is create a file with the distributor's secret key signature on it, and so they cannot make an update of their own that will be accepted by the devices in the field which are looking for both encryption with their public key, and a signature from the update distributor's privately held key.
It's a matter of degrees of exposure.  The updates in transit are secure from anyone who does not have access to an endpoint device to reverse engineer.  With physical access to an endpoint (something we cannot prevent), they will eventually be able to reverse engineer the installed software, and even the updates themselves, but they will never be able to sign their own update and push it to un-compromised machines.  At least as long as RSA is secure.
","14370","<linux><encryption><public-key-encryption><private-key><gnupg>","7","2","5","2018-03-20 21:00:26","","2","4","1169096","","2017-10-11 08:00:35","2013-01-21 07:47:57",""
"24223275","When to use X509EncodedKeySpec vs RSAPublicKeySpec?","I have a certificate in a text file, its contents look like:
-----BEGIN PUBLIC KEY-----
xxxx
xxxx
xxxx
-----END PUBLIC KEY-----

I believe this is a pem encoded certificate? So I want to load it now, I'm trying the following:
X509EncodedKeySpec publicKeySpec = new X509EncodedKeySpec(
    readFileToByteArray(""keyfile""));

but I get an InvalidKeySpecException. 
If I load the file, cut off the begin/end header/footer, then base64 decode the 'xxxx' contents, I don't get any complaints:
String contents = readFileToString(""keyfile"");
contents = contents.replace(""-----BEGIN PUBLIC KEY-----"", """");
contents = contents.replace(""-----END PUBLIC KEY-----"", """");
byte[] prepared = Base64.decode(contents);

// ok.
X509EncodedKeySpec publicKeySpec = new X509EncodedKeySpec(prepared);

is this the right way to load the key file? I see there's also a RSAPublicKeySpec class, which, based on the name, seems like something I'd be interested in here. But I believe it is only for generating certificates, not reading existing ones?
Thanks
","There is a good summary of the common key formats here. As indicated by the javadocs for X509EncodedKeySpec this class is designed to convert between the SubjectPublicKeyInfo ASN.1 struct that is in the X.509 standard and Java public key formats. And since the first link indicated that a file of the form    

-----BEGIN PUBLIC KEY-----
  xxxx
  xxxx
  -----END PUBLIC KEY-----

is indeed a SubjectPublicKeyInfo, you are correctly parsing the file. There is one final step you're missing, and that's to convert your X509EncodedKeySpec into a public key. That is the function of the KeyFactory class. To extend your example by two more lines, it would be    
KeyFactory kf = KeyFactory.getInstance(""RSA""); // Assuming this is an RSA key
RSAPublicKey rsaPubKey = (RSAPublicKey) kf.generatePublic(publicKeySpec);

","14219","<java><encryption><public-key-encryption>","7","7","3","2018-05-07 13:30:42","24224570","1","5","","","","2014-06-14 19:04:14",""
"24223275","When to use X509EncodedKeySpec vs RSAPublicKeySpec?","I have a certificate in a text file, its contents look like:
-----BEGIN PUBLIC KEY-----
xxxx
xxxx
xxxx
-----END PUBLIC KEY-----

I believe this is a pem encoded certificate? So I want to load it now, I'm trying the following:
X509EncodedKeySpec publicKeySpec = new X509EncodedKeySpec(
    readFileToByteArray(""keyfile""));

but I get an InvalidKeySpecException. 
If I load the file, cut off the begin/end header/footer, then base64 decode the 'xxxx' contents, I don't get any complaints:
String contents = readFileToString(""keyfile"");
contents = contents.replace(""-----BEGIN PUBLIC KEY-----"", """");
contents = contents.replace(""-----END PUBLIC KEY-----"", """");
byte[] prepared = Base64.decode(contents);

// ok.
X509EncodedKeySpec publicKeySpec = new X509EncodedKeySpec(prepared);

is this the right way to load the key file? I see there's also a RSAPublicKeySpec class, which, based on the name, seems like something I'd be interested in here. But I believe it is only for generating certificates, not reading existing ones?
Thanks
","The answer is not straightforward. Following code works for me when loading RSA public key string (encoded in PEM format as mentioned above) to java.security.PublicKey object. Note: the headers and ends should be stripped beforehand.
    public PublicKey convertToPublicKey(String publicKeyString) {
    try {
        byte[] decodedPublicKey = Base64.decode(publicKeyString, Base64.DEFAULT);
        org.spongycastle.asn1.ASN1InputStream in = new org.spongycastle.asn1.ASN1InputStream(decodedPublicKey);
        org.spongycastle.asn1.ASN1Primitive obj = in.readObject();
        org.spongycastle.asn1.pkcs.RSAPublicKey keyStruct = org.spongycastle.asn1.pkcs.RSAPublicKey.getInstance(obj);
        java.security.spec.RSAPublicKeySpec keySpec = new java.security.spec.RSAPublicKeySpec(keyStruct.getModulus(), keyStruct.getPublicExponent());
        java.security.KeyFactory keyFactory = java.security.KeyFactory.getInstance(""RSA"");
        return keyFactory.generatePublic(keySpec);
    } catch (NoSuchAlgorithmException e) {
        e.printStackTrace();
    } catch (InvalidKeySpecException e) {
        e.printStackTrace();
    } catch (IOException e) {
        e.printStackTrace();
    }
    return null;
}

Then, the java.security.PublicKey instance can be used to encrypt your string as follows:
Cipher rsaCipher = Cipher.getInstance(""RSA/None/PKCS1Padding"", ""SC"");
rsaCipher.init(Cipher.ENCRYPT_MODE, apiPublicKey);
byte[] ENCRYPTED_YOUR_STRING = rsaCipher.doFinal(YOUR_STRING);

The bytes can then be converted to string by:
    Base64.encodeToString(ENCRYPTED_YOUR_STRING, Base64.DEFAULT)
The solution is tested on Android API 25 Platform and spongycastle 1.56
","14219","<java><encryption><public-key-encryption>","7","0","3","2018-05-07 13:30:42","24224570","1","5","","","","2014-06-14 19:04:14",""
"24223275","When to use X509EncodedKeySpec vs RSAPublicKeySpec?","I have a certificate in a text file, its contents look like:
-----BEGIN PUBLIC KEY-----
xxxx
xxxx
xxxx
-----END PUBLIC KEY-----

I believe this is a pem encoded certificate? So I want to load it now, I'm trying the following:
X509EncodedKeySpec publicKeySpec = new X509EncodedKeySpec(
    readFileToByteArray(""keyfile""));

but I get an InvalidKeySpecException. 
If I load the file, cut off the begin/end header/footer, then base64 decode the 'xxxx' contents, I don't get any complaints:
String contents = readFileToString(""keyfile"");
contents = contents.replace(""-----BEGIN PUBLIC KEY-----"", """");
contents = contents.replace(""-----END PUBLIC KEY-----"", """");
byte[] prepared = Base64.decode(contents);

// ok.
X509EncodedKeySpec publicKeySpec = new X509EncodedKeySpec(prepared);

is this the right way to load the key file? I see there's also a RSAPublicKeySpec class, which, based on the name, seems like something I'd be interested in here. But I believe it is only for generating certificates, not reading existing ones?
Thanks
","Use this class
Note: use RSA only by less then 129 byte string.
public class RSA
{
private PublicKey internalPublicKey;
private PrivateKey internalPrivateKey;
private KeyPairGenerator kpg = null;
private int SIZE = 4096;

public RSA(int size)
{
    try
    {
        SIZE = size;
        kpg = KeyPairGenerator.getInstance(""RSA"");
        init();
    }
    catch(Exception e){}
}

public RSA()
{
    this(1024);
}

private void init()
{
    kpg.initialize(SIZE, new SecureRandom());

    KeyPair kp = kpg.genKeyPair();
    internalPublicKey = kp.getPublic();
    internalPrivateKey = kp.getPrivate();
}

public int getSize()
{
    return SIZE;
}

public PublicKey getPublic()
{
    return internalPublicKey;
}

public PrivateKey getPrivate()
{
    return internalPrivateKey;
}

public String getPublicModule()
{
    String s = internalPublicKey.toString();
    return s.substring(s.indexOf(""modulus"")+8, s.indexOf("",publicExponent""));
}

public String getPublicExponent()
{
    String s = internalPublicKey.toString();
    return s.substring(s.indexOf(""publicExponent"")+15, s.lastIndexOf(""}""));
}

public String getPrivateExponent()
{
    String s = internalPrivateKey.toString();
    return s.substring(s.indexOf(""privateExponent"")+16, s.indexOf("",primeP""));
}

public String getPrivatePrimP()
{
    String s = internalPrivateKey.toString();
    return s.substring(s.indexOf(""primeP="")+7, s.indexOf("",primeQ""));
}

public String getPrivatePrimQ()
{
    String s = internalPrivateKey.toString();
    return s.substring(s.indexOf(""primeQ="")+7, s.indexOf("",primeExponentP""));
}

public String getPrivatePrimExponentP()
{
    String s = internalPrivateKey.toString();
    return s.substring(s.indexOf(""primeExponentP="")+15, s.indexOf("",primeExponentQ""));
}

public String getPrivatePrimExponentQ()
{
    String s = internalPrivateKey.toString();
    return s.substring(s.indexOf(""primeExponentQ="")+15, s.indexOf("",crtCoefficient""));
}

public String getPrivateCrtCoefficient()
{
    String s = internalPrivateKey.toString();
    return s.substring(s.indexOf(""crtCoefficient="")+15, s.lastIndexOf("",""));
}

public byte[] getPublicKey()
{
    return internalPublicKey.getEncoded();
}

public byte[] getPrivateKey()
{
    return internalPrivateKey.getEncoded();
}

public String getPublicKeyAsString()
{
    return Base64.encodeToString(internalPublicKey.getEncoded(), Base64.DEFAULT);
}

public String getPrivateKeyAsString()
{
    return Base64.encodeToString(internalPrivateKey.getEncoded(), Base64.DEFAULT);
}

public byte[] getEncrypt(String plain)
{
    try
    {
        //Cipher cipher = Cipher.getInstance(""RSA/ECB/OAEPWithSHA-256AndMGF1Padding"");
        Cipher cipher = Cipher.getInstance(""RSA"");
        cipher.init(Cipher.ENCRYPT_MODE, internalPublicKey);

        return cipher.doFinal(plain.getBytes(""UTF-8""));
    }
    catch(Exception e)
    {
        ThreadHelper.exceptionAlert(e, Constants.TAG_FOR_LOG, ""Err: getEncrypt(String x), "", Constants.DEFAULT_ALERT_STATE);
    }

    return null;
}

public String getStringEncrypt(String plain)
{
    return new String(getEncrypt(plain), Charset.forName(""UTF-8""));
}

public byte[] getDecrypt(byte[] encryptedBytes)
{
    try
    {
        Cipher cipher = Cipher.getInstance(""RSA"");
        cipher.init(Cipher.DECRYPT_MODE, internalPrivateKey);

        return cipher.doFinal(encryptedBytes);
    }
    catch(Exception e)
    {
        ThreadHelper.exceptionAlert(e, Constants.TAG_FOR_LOG, ""Err: getDecrypt(byte[] x), "", Constants.DEFAULT_ALERT_STATE);
    }

    return null;
}

public byte[] getDecrypt(String encrypted)
{
    return getDecrypt(encrypted.getBytes());
}

public String getStringDecrypt(byte[] encryptedBytes)
{
    return new String(getDecrypt(encryptedBytes), Charset.forName(""UTF-8""));
}

public String getStringDecrypt(String encrypted)
{
    return new String(getDecrypt(encrypted), Charset.forName(""UTF-8""));
}

public static byte[] getEncrypt(String plain, String modulus, String exponent)
{
    try
    {
        BigInteger modBigInteger = new BigInteger(modulus, 16);
        BigInteger exBigInteger = new BigInteger(exponent, 16);
        RSAPublicKeySpec spec = new RSAPublicKeySpec(modBigInteger, exBigInteger);

        KeyFactory factory = KeyFactory.getInstance(""RSA"");
        PublicKey pk = factory.generatePublic(spec);

        Cipher cipher = Cipher.getInstance(""RSA"");
        cipher.init(Cipher.ENCRYPT_MODE, pk);

        return cipher.doFinal(plain.getBytes(""UTF-8""));
    }
    catch(Exception e)
    {
        ThreadHelper.exceptionAlert(e, Constants.TAG_FOR_LOG, ""Err: getEncrypt, "", Constants.DEFAULT_ALERT_STATE);
    }

    return null;
}

public static String getStringEncrypt(final String plain, String modulus, String exponent)
{
    return Base64.encodeToString(getEncrypt(plain, modulus, exponent), Base64.DEFAULT);
}

public static byte[] getDecrypt(byte[] encryptedBytes, String modulus, String publicExpo, String privateExpo, String primP, String primQ, String ePrimP, String ePrimQ, String cof)
{
    try
    {
        BigInteger module = new BigInteger(modulus, 16);
        BigInteger expo1 = new BigInteger(publicExpo, 16);
        BigInteger expo2 = new BigInteger(privateExpo, 16);
        BigInteger prim_P = new BigInteger(primP, 16);
        BigInteger prim_Q = new BigInteger(primQ, 16);
        BigInteger prim_EP = new BigInteger(ePrimP, 16);
        BigInteger prim_EQ = new BigInteger(ePrimQ, 16);
        BigInteger coefficient = new BigInteger(cof, 16);
        /*BigInteger module = new BigInteger(1, Base64.encode(modulus.getBytes(), Base64.DEFAULT));
        BigInteger expo1 = new BigInteger(1, Base64.encode(publicExpo.getBytes(), Base64.DEFAULT));
        BigInteger expo2 = new BigInteger(1, Base64.encode(privateExpo.getBytes(), Base64.DEFAULT));
        BigInteger prim_P = new BigInteger(1, Base64.encode(primP.getBytes(), Base64.DEFAULT));
        BigInteger prim_Q = new BigInteger(1, Base64.encode(primQ.getBytes(), Base64.DEFAULT));
        BigInteger prim_EP = new BigInteger(1, Base64.encode(ePrimP.getBytes(), Base64.DEFAULT));
        BigInteger prim_EQ = new BigInteger(1, Base64.encode(ePrimQ.getBytes(), Base64.DEFAULT));
        BigInteger coefficient = new BigInteger(1, Base64.encode(cof.getBytes(), Base64.DEFAULT));*/

        RSAPrivateCrtKeySpec spec = new RSAPrivateCrtKeySpec(module, expo1, expo2, prim_P, prim_Q, prim_EP, prim_EQ, coefficient);

        KeyFactory factory = KeyFactory.getInstance(""RSA"");
        PrivateKey pk = factory.generatePrivate(spec);

        Cipher cipher1 = Cipher.getInstance(""RSA"");
        cipher1.init(Cipher.DECRYPT_MODE, pk);

        //return cipher1.doFinal(Base64.decode(encryptedBytes, Base64.DEFAULT));
        return cipher1.doFinal(encryptedBytes);
    }
    catch(Exception e)
    {
        ThreadHelper.exceptionAlert(e, Constants.TAG_FOR_LOG, """", Constants.DEFAULT_ALERT_STATE);
    }

    return null;
}

public static String getStringDecrypt(byte[] encryptedBytes, String modulus, String publicExpo, String privateExpo, String primP, String primQ, String ePrimP, String ePrimQ, String cof)
{
    return Converter.byteToString_UTF8(getDecrypt(encryptedBytes, modulus, publicExpo, privateExpo, primP, primQ, ePrimP, ePrimQ, cof));
}

public static byte[] getDecrypt(final byte[] encryptedBytes, byte[] privateKey)
{
    try
    {
        KeyFactory keyFac = KeyFactory.getInstance(""RSA"");
        KeySpec keySpec = new PKCS8EncodedKeySpec(privateKey);
        PrivateKey pk = keyFac.generatePrivate(keySpec);

        Cipher cipher1 = Cipher.getInstance(""RSA"");
        cipher1.init(Cipher.DECRYPT_MODE, pk);
        return cipher1.doFinal(encryptedBytes);
    }
    catch(Exception e)
    {
        ThreadHelper.exceptionAlert(e, Constants.TAG_FOR_LOG, """", Constants.DEFAULT_ALERT_STATE);
    }

    return null;
}

public static String getStringDecrypt(final byte[] encryptedBytes, byte[] privateKey)
{
    return Converter.byteToString_UTF8(getDecrypt(encryptedBytes, privateKey));
}

public static String sign(String plainText, PrivateKey privateKey)
{
    try
    {
        Signature privateSignature = Signature.getInstance(""SHA256withRSA"");
        privateSignature.initSign(privateKey);
        privateSignature.update(plainText.getBytes());

        byte[] signature = privateSignature.sign();

        return Base64.encodeToString(signature, Base64.DEFAULT);
    }
    catch(Exception e)
    {
        ThreadHelper.exceptionAlert(e, Constants.TAG_FOR_LOG, ""Err: sign(), "", Constants.DEFAULT_ALERT_STATE);
    }

    return null;
}

public static boolean verify(String plainText, String signature, PublicKey publicKey)
{
    Signature publicSignature;

    try
    {
        publicSignature = Signature.getInstance(""SHA256withRSA"");
        publicSignature.initVerify(publicKey);
        publicSignature.update(plainText.getBytes());

        byte[] signatureBytes = Base64.decode(signature, Base64.DEFAULT);

        return publicSignature.verify(signatureBytes);
    }
    catch(Exception e)
    {
        ThreadHelper.exceptionAlert(e, Constants.TAG_FOR_LOG, ""Err: verify(), "", Constants.DEFAULT_ALERT_STATE);
    }

    return false;
}

}
","14219","<java><encryption><public-key-encryption>","7","-1","3","2018-05-07 13:30:42","24224570","1","5","","","","2014-06-14 19:04:14",""
"11047103","How can I get the public key of a webpage?","How can I get the public key of a website like VeriSign and all other websites which use https(secure protocol)?
","It depends on the browser you're using, if you let me know I'll update my answer.
Chrome 55 and above You can now find this information in Developer Tools. Options (3 dots) -> More Tools -> Developer tools, or press F12, then click the ""Security"" tab and you'll get a ""Security Overview"" with a ""View certificate"" button. As per another SO post from Chrome 60 you can actually enable the option again if you go to chrome://flags/#show-cert-link.
Chrome 54 and below: If you're using Chrome then click on the green bar to the left of the 'https:' in the address bar, for the VeriSign website the green bar says Symantec Corperation [US], this will open a pop up. On the pop up click 'Certificate Information'. This will open another pop up. On this go the 'Details' tab at the top and scroll down to 'Public key' which shows the public key the website is using for it's SSL. In VeriSigns case the public key is a 2048 bit key.

IE: the green bar to click on is to the right of the web address. Clicking this brings a similar pop up where you have to click 'View certificates' which then brings up the same pop up as on Chrome where you go to the Details tab and scroll down to 'Public Key'

This is the pop up that opens after clicking the 'Certificate information' or 'View certificates' links.

","13989","<public-key-encryption><public-key>","7","6","2","2017-10-06 18:05:26","11058735","0","1","902766","","2012-06-15 23:04:58","2012-06-15 08:26:39",""
"11047103","How can I get the public key of a webpage?","How can I get the public key of a website like VeriSign and all other websites which use https(secure protocol)?
","In Chrome you can get it via developer tools (F12 in windows) or pick it in the menu (Menu -> More Tools -> Developer Tools).
Then all you need to do is to pick the security tab, here are all information you need.

Just clicking on a secure popup does not work anymore.
","13989","<public-key-encryption><public-key>","7","0","2","2017-10-06 18:05:26","11058735","0","1","902766","","2012-06-15 23:04:58","2012-06-15 08:26:39",""
"5724650","SSL Alternative - encrypt password with JavaScript submit to PHP to decrypt","I'm building a website and my payment methods will be Google Checkout and Paypal. There will be links/buttons which will redirect the user to the secure Google/Paypal sites for processing the payments. This means I do not need the $150/year added expense and complexity of installing SSL certificates for my site.
However I would like to encrypt user's passwords as they are logging in so that if they are on a network some malicious person running FireSheep etc can't read the user's actual password as it is being sent to the server. The rest of the site doesn't need encryption as it's not really sensitive data and would probably slow the user experience down significantly.
My thoughts are this could be implemented with public key cryptography. Lets say the process goes something like this:

Public key is in the JavaScript external file, private key in PHP on the server
User enters their username and password into the form and clicks submit
The JavaScript runs and encrypts the password, storing it back in the text field
Form is submitted to server and the password is decrypted with PHP
Plain text password in PHP is salted & hashed then compared to hash in database.
Possible similar process for the registration/change password functions.

I'm thinking something like RSA would do the trick. But I've hunted around the net for a working JavaScript library to do it but none seem to be compatible with the PHP libraries available. At any rate it needs to generate a set of keys that are compatible with the JavaScript and PHP.
Anyone know of an actual working solution for this? If not how about we write one then open source it. Unfortunately writing encryption/decryption code is pretty complex so I don't really know exactly what the existing libraries are doing and how to modify them to make it work. I already have protection for session fixation/hijacking so I'm not interested in that. Just interested in encrypting the data before it gets to the web server.
NB: Please don't post a bunch of links to standalone Javascript or PHP encryption libraries, I've found those already on Google. That's not actually useful. What I need is code for JavaScript encryption AND PHP decryption that actually works together harmoniously to produce the intended result outlined above.
Also if you could refrain from posting comments like ""just use SSL"". I'd actually like a solution to this exact problem even if it's not best practice, it would be interesting none the less.
Many thanks!
","First, I don't think this is a good idea. I found some examples using Google that may be useful for you (I have not tested these, however):
GPL JavaScript Public Key Encryption
RSA Public Key Encryption Test in JavaScript
PGP Encryption in JavaScript
RSA Algorithm Example in JavaScript
You should establish some salting mechanism to salt every encrypted value otherwise the key could get compromised.
","13131","<php><javascript><encryption><ssl><public-key-encryption>","5","3","6","2015-07-15 07:29:04","7023705","6","6","569447","","2011-04-20 02:37:01","2011-04-20 01:38:28",""
"5724650","SSL Alternative - encrypt password with JavaScript submit to PHP to decrypt","I'm building a website and my payment methods will be Google Checkout and Paypal. There will be links/buttons which will redirect the user to the secure Google/Paypal sites for processing the payments. This means I do not need the $150/year added expense and complexity of installing SSL certificates for my site.
However I would like to encrypt user's passwords as they are logging in so that if they are on a network some malicious person running FireSheep etc can't read the user's actual password as it is being sent to the server. The rest of the site doesn't need encryption as it's not really sensitive data and would probably slow the user experience down significantly.
My thoughts are this could be implemented with public key cryptography. Lets say the process goes something like this:

Public key is in the JavaScript external file, private key in PHP on the server
User enters their username and password into the form and clicks submit
The JavaScript runs and encrypts the password, storing it back in the text field
Form is submitted to server and the password is decrypted with PHP
Plain text password in PHP is salted & hashed then compared to hash in database.
Possible similar process for the registration/change password functions.

I'm thinking something like RSA would do the trick. But I've hunted around the net for a working JavaScript library to do it but none seem to be compatible with the PHP libraries available. At any rate it needs to generate a set of keys that are compatible with the JavaScript and PHP.
Anyone know of an actual working solution for this? If not how about we write one then open source it. Unfortunately writing encryption/decryption code is pretty complex so I don't really know exactly what the existing libraries are doing and how to modify them to make it work. I already have protection for session fixation/hijacking so I'm not interested in that. Just interested in encrypting the data before it gets to the web server.
NB: Please don't post a bunch of links to standalone Javascript or PHP encryption libraries, I've found those already on Google. That's not actually useful. What I need is code for JavaScript encryption AND PHP decryption that actually works together harmoniously to produce the intended result outlined above.
Also if you could refrain from posting comments like ""just use SSL"". I'd actually like a solution to this exact problem even if it's not best practice, it would be interesting none the less.
Many thanks!
","Only one problem: An attacker does not need to know the actual password. All he needs to see is the value that is sent to the server. This value allows the user to log in. It does not matter what that value is; whether it's plaintext, encrypted text or a picture of a cat. It's just a token that authenticates the user. If an attacker can see this token and repeat the same request and that same request allows him to log in, you gained nothing.
","13131","<php><javascript><encryption><ssl><public-key-encryption>","5","18","6","2015-07-15 07:29:04","7023705","6","6","569447","","2011-04-20 02:37:01","2011-04-20 01:38:28",""
"5724650","SSL Alternative - encrypt password with JavaScript submit to PHP to decrypt","I'm building a website and my payment methods will be Google Checkout and Paypal. There will be links/buttons which will redirect the user to the secure Google/Paypal sites for processing the payments. This means I do not need the $150/year added expense and complexity of installing SSL certificates for my site.
However I would like to encrypt user's passwords as they are logging in so that if they are on a network some malicious person running FireSheep etc can't read the user's actual password as it is being sent to the server. The rest of the site doesn't need encryption as it's not really sensitive data and would probably slow the user experience down significantly.
My thoughts are this could be implemented with public key cryptography. Lets say the process goes something like this:

Public key is in the JavaScript external file, private key in PHP on the server
User enters their username and password into the form and clicks submit
The JavaScript runs and encrypts the password, storing it back in the text field
Form is submitted to server and the password is decrypted with PHP
Plain text password in PHP is salted & hashed then compared to hash in database.
Possible similar process for the registration/change password functions.

I'm thinking something like RSA would do the trick. But I've hunted around the net for a working JavaScript library to do it but none seem to be compatible with the PHP libraries available. At any rate it needs to generate a set of keys that are compatible with the JavaScript and PHP.
Anyone know of an actual working solution for this? If not how about we write one then open source it. Unfortunately writing encryption/decryption code is pretty complex so I don't really know exactly what the existing libraries are doing and how to modify them to make it work. I already have protection for session fixation/hijacking so I'm not interested in that. Just interested in encrypting the data before it gets to the web server.
NB: Please don't post a bunch of links to standalone Javascript or PHP encryption libraries, I've found those already on Google. That's not actually useful. What I need is code for JavaScript encryption AND PHP decryption that actually works together harmoniously to produce the intended result outlined above.
Also if you could refrain from posting comments like ""just use SSL"". I'd actually like a solution to this exact problem even if it's not best practice, it would be interesting none the less.
Many thanks!
","RSA is overkill; what you probably need is a simple challenge-response protocol.  For example:

Generate a random nonce value; this helps prevent replay attacks.
Send that nonce value and the password salt to the browser along with the rest of the login form.

You are storing passwords in salted and hashed form, right?

When the user enters a password, have the script on the form compute and send back hash(hash(password, salt), nonce) instead.
When the server receives the form submission, have it compute hash(storedSaltedPassword, nonce) and verify that it equals the submitted value.

Retain the nonce value at the server; don't trust the client to echo it back to you, or your replay protection is gone.


The weakness of this scheme is that the password hashes in the database are in some sense password-equivalent; while it's likely infeasible to extract the original password used to produce those hashes, knowledge of the stored hash is sufficient to impersonate the user on your site.
SSL certificates serve an entirely different purpose: the purpose of an SSL certificate is to make it difficult for a third-party rogue server to claim to be your server, because it doesn't have a certificate signed by some mutually trusted third party that it belongs on your domain.  On the other hand, if you can't stop a rogue server from impersonating yours, you can't protect your users from giving their password to that rogue server, cryptography notwithstanding.
","13131","<php><javascript><encryption><ssl><public-key-encryption>","5","7","6","2015-07-15 07:29:04","7023705","6","6","569447","","2011-04-20 02:37:01","2011-04-20 01:38:28",""
"5724650","SSL Alternative - encrypt password with JavaScript submit to PHP to decrypt","I'm building a website and my payment methods will be Google Checkout and Paypal. There will be links/buttons which will redirect the user to the secure Google/Paypal sites for processing the payments. This means I do not need the $150/year added expense and complexity of installing SSL certificates for my site.
However I would like to encrypt user's passwords as they are logging in so that if they are on a network some malicious person running FireSheep etc can't read the user's actual password as it is being sent to the server. The rest of the site doesn't need encryption as it's not really sensitive data and would probably slow the user experience down significantly.
My thoughts are this could be implemented with public key cryptography. Lets say the process goes something like this:

Public key is in the JavaScript external file, private key in PHP on the server
User enters their username and password into the form and clicks submit
The JavaScript runs and encrypts the password, storing it back in the text field
Form is submitted to server and the password is decrypted with PHP
Plain text password in PHP is salted & hashed then compared to hash in database.
Possible similar process for the registration/change password functions.

I'm thinking something like RSA would do the trick. But I've hunted around the net for a working JavaScript library to do it but none seem to be compatible with the PHP libraries available. At any rate it needs to generate a set of keys that are compatible with the JavaScript and PHP.
Anyone know of an actual working solution for this? If not how about we write one then open source it. Unfortunately writing encryption/decryption code is pretty complex so I don't really know exactly what the existing libraries are doing and how to modify them to make it work. I already have protection for session fixation/hijacking so I'm not interested in that. Just interested in encrypting the data before it gets to the web server.
NB: Please don't post a bunch of links to standalone Javascript or PHP encryption libraries, I've found those already on Google. That's not actually useful. What I need is code for JavaScript encryption AND PHP decryption that actually works together harmoniously to produce the intended result outlined above.
Also if you could refrain from posting comments like ""just use SSL"". I'd actually like a solution to this exact problem even if it's not best practice, it would be interesting none the less.
Many thanks!
","You don't need to encrypt the password. You need to hash the password. You really really don't want to have any access to the plaintext password yourself whatsoever, otherwise you lose non-repudiation, which has serious legal consequences. You need to investigate the meaning of this thoroughly before proceeeding.
","13131","<php><javascript><encryption><ssl><public-key-encryption>","5","1","6","2015-07-15 07:29:04","7023705","6","6","569447","","2011-04-20 02:37:01","2011-04-20 01:38:28",""
"5724650","SSL Alternative - encrypt password with JavaScript submit to PHP to decrypt","I'm building a website and my payment methods will be Google Checkout and Paypal. There will be links/buttons which will redirect the user to the secure Google/Paypal sites for processing the payments. This means I do not need the $150/year added expense and complexity of installing SSL certificates for my site.
However I would like to encrypt user's passwords as they are logging in so that if they are on a network some malicious person running FireSheep etc can't read the user's actual password as it is being sent to the server. The rest of the site doesn't need encryption as it's not really sensitive data and would probably slow the user experience down significantly.
My thoughts are this could be implemented with public key cryptography. Lets say the process goes something like this:

Public key is in the JavaScript external file, private key in PHP on the server
User enters their username and password into the form and clicks submit
The JavaScript runs and encrypts the password, storing it back in the text field
Form is submitted to server and the password is decrypted with PHP
Plain text password in PHP is salted & hashed then compared to hash in database.
Possible similar process for the registration/change password functions.

I'm thinking something like RSA would do the trick. But I've hunted around the net for a working JavaScript library to do it but none seem to be compatible with the PHP libraries available. At any rate it needs to generate a set of keys that are compatible with the JavaScript and PHP.
Anyone know of an actual working solution for this? If not how about we write one then open source it. Unfortunately writing encryption/decryption code is pretty complex so I don't really know exactly what the existing libraries are doing and how to modify them to make it work. I already have protection for session fixation/hijacking so I'm not interested in that. Just interested in encrypting the data before it gets to the web server.
NB: Please don't post a bunch of links to standalone Javascript or PHP encryption libraries, I've found those already on Google. That's not actually useful. What I need is code for JavaScript encryption AND PHP decryption that actually works together harmoniously to produce the intended result outlined above.
Also if you could refrain from posting comments like ""just use SSL"". I'd actually like a solution to this exact problem even if it's not best practice, it would be interesting none the less.
Many thanks!
","http://www.jcryption.org/ -- Is the combination you are looking for.
","13131","<php><javascript><encryption><ssl><public-key-encryption>","5","2","6","2015-07-15 07:29:04","7023705","6","6","569447","","2011-04-20 02:37:01","2011-04-20 01:38:28",""
"5724650","SSL Alternative - encrypt password with JavaScript submit to PHP to decrypt","I'm building a website and my payment methods will be Google Checkout and Paypal. There will be links/buttons which will redirect the user to the secure Google/Paypal sites for processing the payments. This means I do not need the $150/year added expense and complexity of installing SSL certificates for my site.
However I would like to encrypt user's passwords as they are logging in so that if they are on a network some malicious person running FireSheep etc can't read the user's actual password as it is being sent to the server. The rest of the site doesn't need encryption as it's not really sensitive data and would probably slow the user experience down significantly.
My thoughts are this could be implemented with public key cryptography. Lets say the process goes something like this:

Public key is in the JavaScript external file, private key in PHP on the server
User enters their username and password into the form and clicks submit
The JavaScript runs and encrypts the password, storing it back in the text field
Form is submitted to server and the password is decrypted with PHP
Plain text password in PHP is salted & hashed then compared to hash in database.
Possible similar process for the registration/change password functions.

I'm thinking something like RSA would do the trick. But I've hunted around the net for a working JavaScript library to do it but none seem to be compatible with the PHP libraries available. At any rate it needs to generate a set of keys that are compatible with the JavaScript and PHP.
Anyone know of an actual working solution for this? If not how about we write one then open source it. Unfortunately writing encryption/decryption code is pretty complex so I don't really know exactly what the existing libraries are doing and how to modify them to make it work. I already have protection for session fixation/hijacking so I'm not interested in that. Just interested in encrypting the data before it gets to the web server.
NB: Please don't post a bunch of links to standalone Javascript or PHP encryption libraries, I've found those already on Google. That's not actually useful. What I need is code for JavaScript encryption AND PHP decryption that actually works together harmoniously to produce the intended result outlined above.
Also if you could refrain from posting comments like ""just use SSL"". I'd actually like a solution to this exact problem even if it's not best practice, it would be interesting none the less.
Many thanks!
","This is the code to take the input and then encrypt the content by java script
The entire code is also available in github.you guys can search for it encrypt_js_decrypt_php. The problem was running since long.I have come up with the solution.Just import it into localhost. 
<html>

<input type=""text"" id=""code"" name=""code""/>
<input type=""submit"" name=""submit"" value=""submit"" onclick=""return encryptCode();""/>
<script src=""https://ajax.googleapis.com/ajax/libs/jquery/1.11.3/jquery.min.js""></script>
<script type=""text/javascript"">
function rc4(key, str)
{
    var s = [], j = 0, x, res = '';
    for (var i = 0; i < 256; i++) 
    {
        s[i] = i;
    }
    for (i = 0; i < 256; i++) 
    {
        j = (j + s[i] + key.charCodeAt(i % key.length)) % 256;
        x = s[i];
        s[i] = s[j];
        s[j] = x;
    }
    i = 0;
    j = 0;
    for (var y = 0; y < str.length; y++) 
    {
        i = (i + 1) % 256;
        j = (j + s[i]) % 256;
        x = s[i];
        s[i] = s[j];
        s[j] = x;
        res += String.fromCharCode(str.charCodeAt(y) ^ s[(s[i] + s[j]) % 256]);
    }
    return res;
}

function encryptCode()
{
  var value = document.getElementById(""code"").value;
  var key = ""secretKeyToProvide"";  /*--Provide Your secret key here--*/
  var codeValue = rc4(key, value);
  var arr = {code:codeValue, Age:25};
  $.ajax({
                url: ""response.php"",
                type: ""POST"",
                data: JSON.stringify(arr),
                dataType: 'json',
                async: false,
                contentType: 'application/json; charset=utf-8',
                success: function(data) 
                {
                    alert(data);
                }
            });   
}
</script>
</html>

Now,lets decrypt the code in php
<?php

function mb_chr($char) 
{
    return mb_convert_encoding('&#'.intval($char).';', 'UTF-8', 'HTML-ENTITIES');
}

function mb_ord($char)
{
    $result = unpack('N', mb_convert_encoding($char, 'UCS-4BE', 'UTF-8'));
    if (is_array($result) === true) 
    {
        return $result[1];
    }
        return ord($char);
}

function rc4($key, $str) 
{   
    if (extension_loaded('mbstring') === true) 
    {
        mb_language('Neutral');
        mb_internal_encoding('UTF-8');
        mb_detect_order(array('UTF-8', 'ISO-8859-15', 'ISO-8859-1', 'ASCII'));
    }
    $s = array();
    for ($i = 0; $i < 256; $i++)
    {
        $s[$i] = $i;
    }
    $j = 0;
    for ($i = 0; $i < 256; $i++)
    {
        $j = ($j + $s[$i] + mb_ord(mb_substr($key, $i % mb_strlen($key), 1))) % 256;
        $x = $s[$i];
        $s[$i] = $s[$j];
        $s[$j] = $x;
    }
    $i = 0;
    $j = 0;
    $res = '';
    for ($y = 0; $y < mb_strlen($str); $y++)
    {
        $i = ($i + 1) % 256;
        $j = ($j + $s[$i]) % 256;
        $x = $s[$i];
        $s[$i] = $s[$j];
        $s[$j] = $x;
        $res .= mb_chr(mb_ord(mb_substr($str, $y, 1)) ^ $s[($s[$i] + $s[$j]) % 256]);
    }
    return $res;
}

$request_body = file_get_contents('php://input');
$json = json_decode($request_body);
$secretCode =$json->code ;
$age =$json->Age  ;
$key = ""secretKeyToProvide"";  /*--Provide Your secret key here what you have given in javascript--*/
$decryptedSecretCode  = rc4($key, $secretCode) ;
echo $decryptedSecretCode;
exit;
?>

","13131","<php><javascript><encryption><ssl><public-key-encryption>","5","0","6","2015-07-15 07:29:04","7023705","6","6","569447","","2011-04-20 02:37:01","2011-04-20 01:38:28",""
"6116883","Are there any asymmetric encryption options for JavaScript?","I have to transfer some sensitive information over a JavaScript AJAX Call, over an unencrypted channel (HTTP, not HTTPS).
I'd like to encrypt the data, but encryption on the JavaScript side means I expose the key, which makes symmetric encryption only an exercise in security by obscurity.
Is there any asymmetric encryption for JavaScript? That way, I can keep the Server decryption key secret. (I'm not worried about the security of Server > JavaScript messages, only about the security of a certain JavaScript > Server message)
","This question seems to have what you're after, Javascript cryptography library to sign form data in browser The PGP link: http://www.hanewin.net/encrypt/ has RSA
","13017","<javascript><security><encryption><encryption-asymmetric><public-key-encryption>","22","3","5","2014-05-16 16:37:16","","0","8","","","","2011-05-24 21:06:16",""
"6116883","Are there any asymmetric encryption options for JavaScript?","I have to transfer some sensitive information over a JavaScript AJAX Call, over an unencrypted channel (HTTP, not HTTPS).
I'd like to encrypt the data, but encryption on the JavaScript side means I expose the key, which makes symmetric encryption only an exercise in security by obscurity.
Is there any asymmetric encryption for JavaScript? That way, I can keep the Server decryption key secret. (I'm not worried about the security of Server > JavaScript messages, only about the security of a certain JavaScript > Server message)
","Are the Server > JavaScript messages sent over HTTPS?
If not, nothing prevents a man in the middle from changing the scripts. Any encryption will be useless if the code that has access to the unencrypted data is compromised.
","13017","<javascript><security><encryption><encryption-asymmetric><public-key-encryption>","22","3","5","2014-05-16 16:37:16","","0","8","","","","2011-05-24 21:06:16",""
"6116883","Are there any asymmetric encryption options for JavaScript?","I have to transfer some sensitive information over a JavaScript AJAX Call, over an unencrypted channel (HTTP, not HTTPS).
I'd like to encrypt the data, but encryption on the JavaScript side means I expose the key, which makes symmetric encryption only an exercise in security by obscurity.
Is there any asymmetric encryption for JavaScript? That way, I can keep the Server decryption key secret. (I'm not worried about the security of Server > JavaScript messages, only about the security of a certain JavaScript > Server message)
","The reason why you need encryption at all is probably to protect against a man-in-the-middle. There are scenarios where an attacker is able to sniff at the traffic without being able to change it. This solution would protect against that threat, but it would provide no protection at all against a man-in-the-middle that is able to modify the traffic. 
If the attacker can change the traffic, then he will also be able to change the script that does the encryption. The easiest attack would be to just remove the encryption completely from the script. If you don't have https, and a man-in-the-middle is possible (which is the case in almost every scenario) then you don't have any control at all over the html or javascript that is presented to the end user. The attacker may rewrite your html code and javascript completely, disablign encryption, creating new form fields in your form etc.  Https is a prerequisite for secure communication in the web-channel. 
","13017","<javascript><security><encryption><encryption-asymmetric><public-key-encryption>","22","13","5","2014-05-16 16:37:16","","0","8","","","","2011-05-24 21:06:16",""
"6116883","Are there any asymmetric encryption options for JavaScript?","I have to transfer some sensitive information over a JavaScript AJAX Call, over an unencrypted channel (HTTP, not HTTPS).
I'd like to encrypt the data, but encryption on the JavaScript side means I expose the key, which makes symmetric encryption only an exercise in security by obscurity.
Is there any asymmetric encryption for JavaScript? That way, I can keep the Server decryption key secret. (I'm not worried about the security of Server > JavaScript messages, only about the security of a certain JavaScript > Server message)
","I've done it. I use this JavaScript client-side asymetric RSA encryption to prevent the login credentials to be send in plain text over HTTP.
The goal is to prevent login request replay attacks based on network sniffing. Of course, this is not as secure as HTTPS since it would not resist to man-in-the-middle attacks, but it can be sufficient for local networks.
The client-side encryption uses Travis Tridwell's excellent work which is based on JSBN. Travis' web page can also generate the private and public RSA keys (if you are too lazy to use openssl). The keys are generated in PKCS#1 PEM format. I encrypt username+password+timeInMs+timezone so that the encrypted content changes at each login.
On the server-side, my Java code read read the PKCS#1 PEM file using Apache JMeter's org.apache.jmeter.protocol.oauth.sampler.PrivateKeyReader :
PrivateKey pk = (new PrivateKeyReader(""myPrivateKeyFile.pem"")).getPrivateKey();

Then I decrypt the encrypted content using 
byte[] enc = DatatypeConverter.parseBase64Binary(clientData);
Cipher rsa = Cipher.getInstance(""RSA"");
rsa.init(Cipher.DECRYPT_MODE, pk);
byte[] dec = rsa.doFinal(enc);
String out = new String(dec, ""UTF8"");

Then I check if the client-side timestamp/timezone match the server-side timestamp/timezone. If the delay is less than a few seconds, the login process continues. Otherwise the request is considered a replay attack and the login fails. 
","13017","<javascript><security><encryption><encryption-asymmetric><public-key-encryption>","22","9","5","2014-05-16 16:37:16","","0","8","","","","2011-05-24 21:06:16",""
"6116883","Are there any asymmetric encryption options for JavaScript?","I have to transfer some sensitive information over a JavaScript AJAX Call, over an unencrypted channel (HTTP, not HTTPS).
I'd like to encrypt the data, but encryption on the JavaScript side means I expose the key, which makes symmetric encryption only an exercise in security by obscurity.
Is there any asymmetric encryption for JavaScript? That way, I can keep the Server decryption key secret. (I'm not worried about the security of Server > JavaScript messages, only about the security of a certain JavaScript > Server message)
","asymmetric public key/ private key is the only way to do this. To protect against MIM attacks the server can hash the public key with the users password, then the user (in the browser) re-computes the hash - if they match then the user can be confident that the public key sent from the server has not been tampered with - this relies on the fact that only the server and the user know the users password.
PS I wanted to write this as a comment as that would be more appropiate than an answer, but I don't have enough points :)
","13017","<javascript><security><encryption><encryption-asymmetric><public-key-encryption>","22","3","5","2014-05-16 16:37:16","","0","8","","","","2011-05-24 21:06:16",""
"8275592","Encryption and decryption error 0x0407106B using OpenSSL","I'm writing a routine in C that reads a base64 string with the public key and proceeds to encrypt a string. I also test the same string's decryption but I'm getting error 0x0407106B when trying to do the decoding:
$ openssl errstr 0x0407106B
error:0407106B:rsa routines:RSA_padding_check_PKCS1_type_2:block type is not 02

Here's the code 
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <ctype.h>
#include <openssl/rsa.h>
#include <openssl/engine.h>

//#define PADDING RSA_PKCS1_OAEP_PADDING
#define PADDING RSA_PKCS1_PADDING
//#define PADDING RSA_NO_PADDING

main() {

// public key
char *b64_pKey = ""-----BEGIN PUBLIC KEY-----\nMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCp2w+8HUdECo8V5yuKYrWJmUbL\ntD6nSyVifN543axXvNSFzQfWNOGVkMsCo6W4hpl5eHv1p9Hqdcf/ZYQDWCK726u6\nhsZA81AblAOOXKaUaxvFC+ZKRJf+MtUGnv0v7CrGoblm1mMC/OQI1JfSsYi68Epn\naOLepTZw+GLTnusQgwIDAQAB\n-----END PUBLIC KEY-----\n"";

// private key
char *b64priv_key = ""-----BEGIN RSA PRIVATE KEY-----\nMIICXAIBAAKBgQCp2w+8HUdECo8V5yuKYrWJmUbLtD6nSyVifN543axXvNSFzQfW\nNOGVkMsCo6W4hpl5eHv1p9Hqdcf/ZYQDWCK726u6hsZA81AblAOOXKaUaxvFC+ZK\nRJf+MtUGnv0v7CrGoblm1mMC/OQI1JfSsYi68EpnaOLepTZw+GLTnusQgwIDAQAB\nAoGBAKDuq3PikblH/9YS11AgwjwC++7ZcltzeZJdGTSPY1El2n6Dip9ML0hUjeSM\nROIWtac/nsNcJCnvOnUjK/c3NIAaGJcfRPiH/S0Ga6ROiDfFj2UXAmk/v4wRRUzr\n5lsA0jgEt5qcq2Xr/JPQVGB4wUgL/yQK0dDhW0EdrJ707e3BAkEA1aIHbmcVfCP8\nY/uWuK0lvWxrIWfR5MlHhI8tD9lvkot2kyXiV+jB6/gktwk1QaFsy7dCXn7w03+k\nxrjEGGN+kQJBAMuKf55lDtU9K2Js3YSStTZAXP+Hz7XpoLxmbWFyGvBx806WjgAD\n624irwS+0tBxkERbRcisfb2cXmAx8earT9MCQDZuVCpjBWxd1t66qYpgQ29iAmG+\njBIY3qn9uOOC6RSTiCCx1FvFqDMxRFmGdRVFxeyZwsVE3qNksF0Zko0MPKECQCEe\noDV97DP2iCCz5je0R5hUUM2jo8DOC0GcyR+aGZgWcqjPBrwp5x08t43mHxeb4wW8\ndFZ6+trnntO4TMxkA9ECQB+yCPgO1zisJWYuD46KISoesYhwHe5C1BQElQgi9bio\nU39fFo88w1pok23a2CZBEXguSvCvexeB68OggdDXvy0=\n-----END RSA PRIVATE KEY-----\n"";

// String to encrypt
char *str = ""1234"";

ERR_load_crypto_strings();  

BIO *bpo = BIO_new_mem_buf(b64_pKey, -1);
RSA *pubKey = PEM_read_bio_RSA_PUBKEY(bpo, NULL, NULL, NULL);

if ( !pubKey ) {
    printf(""%s\n"", ERR_error_string(ERR_get_error(), NULL));
    return;
}

int rsa_length = RSA_size(pubKey);

BIO *b64 = NULL;
BIO *bmem = NULL;
BUF_MEM *bptr = NULL;

unsigned char encrypted[2560] = { 0 };
unsigned char retencrypted[2560] = { 0 };

int resultEncrypt = RSA_public_encrypt(PADDING, str, encrypted, pubKey, PADDING);
if ( resultEncrypt == -1 ) {
    printf(""%s\n"", ERR_error_string(ERR_get_error(), NULL));
    return;
}

/*
 * Show base 64 encrypted string  
 */ 
b64 = BIO_new((BIO_METHOD *)BIO_f_base64());
BIO_set_flags(b64,BIO_FLAGS_BASE64_NO_NL);
bmem = BIO_new(BIO_s_mem());
b64 = BIO_push(b64, bmem);
BIO_write(b64, encrypted, resultEncrypt);
BIO_flush(b64);
BIO_get_mem_ptr(b64, &bptr);

memcpy(retencrypted, bptr->data, bptr->length);
BIO_free(b64);
BIO_free(bpo);
RSA_free(pubKey);

printf(""Encrypted string:%s\n"",retencrypted);

/*
 * Now decrypt this very string with the private key
 */ 

BIO *bpop = BIO_new_mem_buf(b64priv_key, -1);
RSA *privKey = PEM_read_bio_RSAPrivateKey(bpop, NULL, NULL, NULL);

if ( !privKey ) {
    printf(""%s\n"", ERR_error_string(ERR_get_error(), NULL));
    return;
}

rsa_length = RSA_size(privKey);

unsigned char decrypted[2560] = { 0 };

int resultDecrypt = RSA_private_decrypt( RSA_size(privKey), retencrypted, decrypted, privKey, PADDING);

if ( resultDecrypt == -1 ) {
    printf(""%s\n"", ERR_error_string(ERR_get_error(), NULL));
    return;
}

printf(""resultDecrypt=%d\ndecrypted string: %s\n"",resultDecrypt,decrypted);
BIO_free(bpop);
RSA_free(privKey);
ERR_free_strings();
}

Note: I exported the private key using
openssl rsa -in rsa_privatekey.pem -check

and the public key:
openssl rsa -in rsa_privatekey.pem -pubout

Why am I getting the error?
","The problem is that you're trying to decrypt the base64 encoded result.
You should try to decrypt the result of the encryption.
That is, instead of:
int resultDecrypt = RSA_private_decrypt( RSA_size(privKey), retencrypted, decrypted, privKey, PADDING);

You should call:
int resultDecrypt = RSA_private_decrypt( RSA_size(privKey), encrypted, decrypted, privKey, PADDING);

Also, there is a problem in the encryption call:
int resultEncrypt = RSA_public_encrypt(PADDING, str, encrypted, pubKey, PADDING);

Why are you passing PADDING as flen? This should be the length of the string (i.e. 4 or 5, depending on whether you want to encrypt the null character).
If you want to write the encrypted string as ASCII (encoded using base64), that's fine. But you have to decode it back before you decrypt it.
","12807","<c><openssl><rsa><public-key-encryption>","7","3","2","2016-11-18 09:32:05","","4","3","608639","","2016-11-18 09:32:05","2011-11-26 01:20:46",""
"8275592","Encryption and decryption error 0x0407106B using OpenSSL","I'm writing a routine in C that reads a base64 string with the public key and proceeds to encrypt a string. I also test the same string's decryption but I'm getting error 0x0407106B when trying to do the decoding:
$ openssl errstr 0x0407106B
error:0407106B:rsa routines:RSA_padding_check_PKCS1_type_2:block type is not 02

Here's the code 
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <ctype.h>
#include <openssl/rsa.h>
#include <openssl/engine.h>

//#define PADDING RSA_PKCS1_OAEP_PADDING
#define PADDING RSA_PKCS1_PADDING
//#define PADDING RSA_NO_PADDING

main() {

// public key
char *b64_pKey = ""-----BEGIN PUBLIC KEY-----\nMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCp2w+8HUdECo8V5yuKYrWJmUbL\ntD6nSyVifN543axXvNSFzQfWNOGVkMsCo6W4hpl5eHv1p9Hqdcf/ZYQDWCK726u6\nhsZA81AblAOOXKaUaxvFC+ZKRJf+MtUGnv0v7CrGoblm1mMC/OQI1JfSsYi68Epn\naOLepTZw+GLTnusQgwIDAQAB\n-----END PUBLIC KEY-----\n"";

// private key
char *b64priv_key = ""-----BEGIN RSA PRIVATE KEY-----\nMIICXAIBAAKBgQCp2w+8HUdECo8V5yuKYrWJmUbLtD6nSyVifN543axXvNSFzQfW\nNOGVkMsCo6W4hpl5eHv1p9Hqdcf/ZYQDWCK726u6hsZA81AblAOOXKaUaxvFC+ZK\nRJf+MtUGnv0v7CrGoblm1mMC/OQI1JfSsYi68EpnaOLepTZw+GLTnusQgwIDAQAB\nAoGBAKDuq3PikblH/9YS11AgwjwC++7ZcltzeZJdGTSPY1El2n6Dip9ML0hUjeSM\nROIWtac/nsNcJCnvOnUjK/c3NIAaGJcfRPiH/S0Ga6ROiDfFj2UXAmk/v4wRRUzr\n5lsA0jgEt5qcq2Xr/JPQVGB4wUgL/yQK0dDhW0EdrJ707e3BAkEA1aIHbmcVfCP8\nY/uWuK0lvWxrIWfR5MlHhI8tD9lvkot2kyXiV+jB6/gktwk1QaFsy7dCXn7w03+k\nxrjEGGN+kQJBAMuKf55lDtU9K2Js3YSStTZAXP+Hz7XpoLxmbWFyGvBx806WjgAD\n624irwS+0tBxkERbRcisfb2cXmAx8earT9MCQDZuVCpjBWxd1t66qYpgQ29iAmG+\njBIY3qn9uOOC6RSTiCCx1FvFqDMxRFmGdRVFxeyZwsVE3qNksF0Zko0MPKECQCEe\noDV97DP2iCCz5je0R5hUUM2jo8DOC0GcyR+aGZgWcqjPBrwp5x08t43mHxeb4wW8\ndFZ6+trnntO4TMxkA9ECQB+yCPgO1zisJWYuD46KISoesYhwHe5C1BQElQgi9bio\nU39fFo88w1pok23a2CZBEXguSvCvexeB68OggdDXvy0=\n-----END RSA PRIVATE KEY-----\n"";

// String to encrypt
char *str = ""1234"";

ERR_load_crypto_strings();  

BIO *bpo = BIO_new_mem_buf(b64_pKey, -1);
RSA *pubKey = PEM_read_bio_RSA_PUBKEY(bpo, NULL, NULL, NULL);

if ( !pubKey ) {
    printf(""%s\n"", ERR_error_string(ERR_get_error(), NULL));
    return;
}

int rsa_length = RSA_size(pubKey);

BIO *b64 = NULL;
BIO *bmem = NULL;
BUF_MEM *bptr = NULL;

unsigned char encrypted[2560] = { 0 };
unsigned char retencrypted[2560] = { 0 };

int resultEncrypt = RSA_public_encrypt(PADDING, str, encrypted, pubKey, PADDING);
if ( resultEncrypt == -1 ) {
    printf(""%s\n"", ERR_error_string(ERR_get_error(), NULL));
    return;
}

/*
 * Show base 64 encrypted string  
 */ 
b64 = BIO_new((BIO_METHOD *)BIO_f_base64());
BIO_set_flags(b64,BIO_FLAGS_BASE64_NO_NL);
bmem = BIO_new(BIO_s_mem());
b64 = BIO_push(b64, bmem);
BIO_write(b64, encrypted, resultEncrypt);
BIO_flush(b64);
BIO_get_mem_ptr(b64, &bptr);

memcpy(retencrypted, bptr->data, bptr->length);
BIO_free(b64);
BIO_free(bpo);
RSA_free(pubKey);

printf(""Encrypted string:%s\n"",retencrypted);

/*
 * Now decrypt this very string with the private key
 */ 

BIO *bpop = BIO_new_mem_buf(b64priv_key, -1);
RSA *privKey = PEM_read_bio_RSAPrivateKey(bpop, NULL, NULL, NULL);

if ( !privKey ) {
    printf(""%s\n"", ERR_error_string(ERR_get_error(), NULL));
    return;
}

rsa_length = RSA_size(privKey);

unsigned char decrypted[2560] = { 0 };

int resultDecrypt = RSA_private_decrypt( RSA_size(privKey), retencrypted, decrypted, privKey, PADDING);

if ( resultDecrypt == -1 ) {
    printf(""%s\n"", ERR_error_string(ERR_get_error(), NULL));
    return;
}

printf(""resultDecrypt=%d\ndecrypted string: %s\n"",resultDecrypt,decrypted);
BIO_free(bpop);
RSA_free(privKey);
ERR_free_strings();
}

Note: I exported the private key using
openssl rsa -in rsa_privatekey.pem -check

and the public key:
openssl rsa -in rsa_privatekey.pem -pubout

Why am I getting the error?
","The error you're getting is block type is not 02.
Although Omri is correct that you're passing the wrong data, and you are only going to encrypt 1 byte, the error is because the sizeof( encrypted ) is way too large (2560).  In other words your data receiver for RSA_public_encrypt must be a regular unsigned char* pointer, not an unsigned char[2560].
Where you have
unsigned char encrypted[2560] = { 0 }; //X 2560?? RSA_public_encrypt fails.

You should be using
unsigned char *encrypted = (unsigned char*)malloc( rsa_length ) ;
RSA_public_encrypt( DATALEN, (const unsigned char*)str, encrypted, pubKey, PADDING ) ;

Notice the error Omri pointed out, that you used PADDING as the first arg to RSA_public_encrypt, while it should be the DATALEN data length.
If you fix that you'll get a similar error later with the private key decrypt.  Fix it and you're on your way.
","12807","<c><openssl><rsa><public-key-encryption>","7","1","2","2016-11-18 09:32:05","","4","3","608639","","2016-11-18 09:32:05","2011-11-26 01:20:46",""
"28808101","Seckey from public key string from server in Swift","I want to encrypt data using RSA , I tried to generate the key in my code and it's working , But what I actually need is to get the public key as a string from server and then use it as Seckey so I can use it to encrypt data using RSA,
I tried this code:
//KeyString is the string of the key from server
let KeyData = (keyString as NSString).dataUsingEncoding(NSUTF8StringEncoding) as NSData!


    var cert : Unmanaged<SecCertificateRef>!;
    var  policy : Unmanaged<SecPolicy>!;
    cert = SecCertificateCreateWithData(kCFAllocatorDefault, KeyData);
    policy = SecPolicyCreateBasicX509();
    var status : OSStatus = noErr
    var trust: SecTrust?
    var certArray : [Unmanaged<SecCertificateRef>!] = [cert];
    var certArrayPointer = UnsafeMutablePointer<UnsafePointer<Void>>(certArray)
    status = SecTrustCreateWithCertificates(cert, policy, trust);
    let publicKey: SecKeyRef = SecTrustCopyPublicKey(trust!).takeUnretainedValue()

I couldn't run this code because SecTrustCreateWithCertificates Method is expecting certificate as anyObject! , I don't Know how to fix this,And if solving this will let me get the SecKey.
I got the code above from this answer in objective-c 
So if any one can help me getting the right code to solve this , I will be very thankful :)
","Here's how I did this:
let cert = SecCertificateCreateWithData(kCFAllocatorDefault, certData)?.takeRetainedValue()

if cert != nil {
    var trust: Unmanaged<SecTrust>?

    let policy = SecPolicyCreateBasicX509().takeRetainedValue()
    let status = SecTrustCreateWithCertificates(cert, policy, &trust)

    if status == errSecSuccess {
        let trustRef = trust!.takeRetainedValue()
        let key = SecTrustCopyPublicKey(trustRef)!.takeRetainedValue();
    }
}

This works, but you need to make sure that what you pass to SecCertificateCreateWithData() is a DER-encoded certificate, and not just a DER-encoded key. You need a certificate signed by your server's private key to the get the associated public key.
","12785","<ios><swift><public-key-encryption><encryption-asymmetric><seckeyref>","5","0","3","2019-05-30 20:18:53","34157062","0","3","-1","","2017-05-23 12:33:32","2015-03-02 10:59:10",""
"28808101","Seckey from public key string from server in Swift","I want to encrypt data using RSA , I tried to generate the key in my code and it's working , But what I actually need is to get the public key as a string from server and then use it as Seckey so I can use it to encrypt data using RSA,
I tried this code:
//KeyString is the string of the key from server
let KeyData = (keyString as NSString).dataUsingEncoding(NSUTF8StringEncoding) as NSData!


    var cert : Unmanaged<SecCertificateRef>!;
    var  policy : Unmanaged<SecPolicy>!;
    cert = SecCertificateCreateWithData(kCFAllocatorDefault, KeyData);
    policy = SecPolicyCreateBasicX509();
    var status : OSStatus = noErr
    var trust: SecTrust?
    var certArray : [Unmanaged<SecCertificateRef>!] = [cert];
    var certArrayPointer = UnsafeMutablePointer<UnsafePointer<Void>>(certArray)
    status = SecTrustCreateWithCertificates(cert, policy, trust);
    let publicKey: SecKeyRef = SecTrustCopyPublicKey(trust!).takeUnretainedValue()

I couldn't run this code because SecTrustCreateWithCertificates Method is expecting certificate as anyObject! , I don't Know how to fix this,And if solving this will let me get the SecKey.
I got the code above from this answer in objective-c 
So if any one can help me getting the right code to solve this , I will be very thankful :)
","I Did this used Alamofire: 
private static func publicKeyForCertificate(certificate: SecCertificate) -> SecKey? {
    var publicKey: SecKey?
    var trust: Unmanaged<SecTrust>?

    let policy = SecPolicyCreateBasicX509().takeRetainedValue()
    let status = SecTrustCreateWithCertificates(certificate, policy, &trust)

    if status == errSecSuccess {
        let trustRef = trust!.takeRetainedValue()
        publicKey = SecTrustCopyPublicKey(trustRef)!.takeRetainedValue()

    }
    return publicKey

}

","12785","<ios><swift><public-key-encryption><encryption-asymmetric><seckeyref>","5","0","3","2019-05-30 20:18:53","34157062","0","3","-1","","2017-05-23 12:33:32","2015-03-02 10:59:10",""
"28808101","Seckey from public key string from server in Swift","I want to encrypt data using RSA , I tried to generate the key in my code and it's working , But what I actually need is to get the public key as a string from server and then use it as Seckey so I can use it to encrypt data using RSA,
I tried this code:
//KeyString is the string of the key from server
let KeyData = (keyString as NSString).dataUsingEncoding(NSUTF8StringEncoding) as NSData!


    var cert : Unmanaged<SecCertificateRef>!;
    var  policy : Unmanaged<SecPolicy>!;
    cert = SecCertificateCreateWithData(kCFAllocatorDefault, KeyData);
    policy = SecPolicyCreateBasicX509();
    var status : OSStatus = noErr
    var trust: SecTrust?
    var certArray : [Unmanaged<SecCertificateRef>!] = [cert];
    var certArrayPointer = UnsafeMutablePointer<UnsafePointer<Void>>(certArray)
    status = SecTrustCreateWithCertificates(cert, policy, trust);
    let publicKey: SecKeyRef = SecTrustCopyPublicKey(trust!).takeUnretainedValue()

I couldn't run this code because SecTrustCreateWithCertificates Method is expecting certificate as anyObject! , I don't Know how to fix this,And if solving this will let me get the SecKey.
I got the code above from this answer in objective-c 
So if any one can help me getting the right code to solve this , I will be very thankful :)
","For mac:
let pubKey = ""-----BEGIN PUBLIC KEY-----MIICIjANBgAgK.......InbFk1FkucQqruMyUCAwEAAQ==-----END PUBLIC KEY-----""
let pubKeyData = pubKey.dataUsingEncoding(NSASCIIStringEncoding)
var error: Unmanaged<CFErrorRef>?
let secKey = SecKeyCreateFromData(NSDictionary(), pubKeyData!, &error)

Where pubKey is a string representation of your public key.
If you don't know your public key, you can infer it from your private key with the following command:
openssl rsa -in server.key -pubout  > mykey.pub

Where server.key is the file containing -----BEGIN RSA PRIVATE KEY-----
as the first line.
For iOS:
It's a bit more complicate.
You need a der file. It's a binary representation of your certificate.
If you need to convert an existing certificate, you can do so with the following command:
 openssl x509 -outform der -in file.crt|pem -out mycert.der

The .crt or .pem file contains -----BEGIN CERTIFICATE----- as the first line.
Put the der file in your bundle and do:
let certificateData = NSData(contentsOfURL:NSBundle.mainBundle().URLForResource(""mycert"", withExtension: ""der"")!)

let certificate = SecCertificateCreateWithData(nil, certificateData!)

var trust: SecTrustRef?

let policy = SecPolicyCreateBasicX509()
let status = SecTrustCreateWithCertificates(certificate!, policy, &trust)

if status == errSecSuccess {
    let key = SecTrustCopyPublicKey(trust!)!;
}

Yatta ! Key now contains a SecKey representation of your public key. Happy Pinning.
","12785","<ios><swift><public-key-encryption><encryption-asymmetric><seckeyref>","5","15","3","2019-05-30 20:18:53","34157062","0","3","-1","","2017-05-23 12:33:32","2015-03-02 10:59:10",""
"21861230","How to consume third party https wsdl web service in c#","In SoapUI tool I've configured .Jks file with Outgoing WS-Security Configurations Signature is BinarySecurityToken and algorithm is CanonicalizationMethod and SignatureMethod it is working perfectly.
Now I try to consume from C# code as below :
SprintApiService.QueryCsaPortTypeClient client = new QueryCsaPortTypeClient();

ClientCredentials ce = new ClientCredentials();
string fileName = Server.MapPath("""");
fileName = fileName + ""/test-01.pfx"";
ce.ClientCertificate.Certificate = new X509Certificate2(fileName, ""tag123"");
var val = ce.ClientCertificate.Certificate.GetSerialNumber();
ce.ClientCertificate.SetCertificate(""CN=jaitest-01, OU=TPA, OU=BMP, OU=Projects, O=Sprint, C=us"", StoreLocation.CurrentUser, StoreName.TrustedPeople);

System.IdentityModel.Selectors.SecurityTokenManager sTokenMgr = ce.CreateSecurityTokenManager();
//var sTokenMgr = ce.CreateSecurityTokenManager();

But I could not succeed. I am always getting ""Rejected by Client (Policy)"" please help me.
This is sample request which is created in SoapUI tool :
<wsse:Security SOAP-ENV:mustUnderstand=""1"" xmlns:wsse=""http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd"">
         <wsu:Timestamp wsu:Id=""Timestamp-c55ce328-af36-4b0f-97d8-3bab57ee6a46"" xmlns:wsu=""http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd"">
            <wsu:Created>2014-02-18T12:27:52Z</wsu:Created>
            <wsu:Expires>2014-02-18T12:32:52Z</wsu:Expires>
         </wsu:Timestamp>
         <wsse:BinarySecurityToken wsu:Id=""SecurityToken-1da2e6b0-3a0d-4943-bcae-de0805d9c4c5"" EncodingType=""http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-soap-message-security-1.0#Base64Binary"" ValueType=""http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-x509-token-profile-1.0#X509v3"" xmlns:wsu=""http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd"">MIIDmTCCAwKgAwIBAgIERxqCLDANBgkqhkiG9w0BAQUFADAeMQswCQYDVQQGEwJVUzEPMA0GA1UEChMGU3ByaW50MB4XDTExMDgwMjIwMDc0OVoXDTE4MDgwNDA0MDAwMFowYjELMAkGA1UEBhMCVVMxDzANBgNVBAoTBlNwcmludDERMA8GA1UECxMIUHJvamVjdHMxDDAKBgNVBAsTA0JNUDEMMAoGA1UECxMDVFBBMRMwEQYDVQQDEwpzcHJpbnQtbXNvMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCG2yDWPQBNG9bjt+sVMzlaooX3jON7tOoqtIxPkXl7XCEvbzZpXL2tYtHXqxVfPo9h1weulbj0dE4LlVjlTjzW4upBI92StqDVYdzTLvZWie1fEslIThHDoX7paQpnrSew3TZ6fk4qVnF4h44J/rLnFt3jLEO6IyRhddganpoOowIDAQABo4IBnjCCAZowCwYDVR0PBAQDAgWgMCsGA1UdEAQkMCKADzIwMTEwODAyMjAwNzQ5WoEPMjAxODA4MDQwNDAwMDBaMBEGCWCGSAGG+EIBAQQEAwIFoDCB5AYDVR0fBIHcMIHZMDagNKAypDAwLjELMAkGA1UEBhMCVVMxDzANBgNVBAoTBlNwcmludDEOMAwGA1UEAxMFQ1JMMjkwgZ6ggZuggZiGSmxkYXA6Ly9jYXg1MDAxLnNwcmludC5jb206Mzg5L289U3ByaW50LGM9VVM/Y2VydGlmaWNhdGVSZXZvY2F0aW9uTGlzdD9iYXNlhkpsZGFwOi8vY2F4NTAwMi5zcHJpbnQuY29tOjM4OS9vPVNwcmludCxjPVVTP2NlcnRpZmljYXRlUmV2b2NhdGlvbkxpc3Q/YmFzZTAfBgNVHSMEGDAWgBRFTY2yujBdccYEb58W/Dt7VY3NHzAdBgNVHQ4EFgQUzUEoNuQ9ummaIU8K6h28izpV2YUwCQYDVR0TBAIwADAZBgkqhkiG9n0HQQAEDDAKGwRWNy4xAwIDKDANBgkqhkiG9w0BAQUFAAOBgQCTDjwpnYdx9JZpBrIwm4qIF4tZmXCCUIBEcoER1oUw/NSdgbbRjpU5AxUR/aK1K3taa27HS+WBQYTeMw+Y/LFhp8m+UjHBx/O1kfk4JAz201Kk0HeGgFvt9sscLfK8YD0aavdDJ6Z0rMpHBlcv8VQ7P+1zqJLay3TY+atl9wuD/Q==</wsse:BinarySecurityToken>
         <Signature xmlns=""http://www.w3.org/2000/09/xmldsig#"">
            <SignedInfo>
               <CanonicalizationMethod Algorithm=""http://www.w3.org/2001/10/xml-exc-c14n#""/>
               <SignatureMethod Algorithm=""http://www.w3.org/2000/09/xmldsig#rsa-sha1""/>
               <Reference URI=""#Timestamp-c55ce328-af36-4b0f-97d8-3bab57ee6a46"">
                  <Transforms>
                     <Transform Algorithm=""http://www.w3.org/2001/10/xml-exc-c14n#""/>
                  </Transforms>
                  <DigestMethod Algorithm=""http://www.w3.org/2000/09/xmldsig#sha1""/>
                  <DigestValue>8H8usvOvRYPwOKHVHdOXO6Y3Cz4=</DigestValue>
               </Reference>
               <Reference URI=""#Body-db900962-5b93-4a49-a70a-a1745bed8255"">
                  <Transforms>
                     <Transform Algorithm=""http://www.w3.org/2001/10/xml-exc-c14n#""/>
                  </Transforms>
                  <DigestMethod Algorithm=""http://www.w3.org/2000/09/xmldsig#sha1""/>
                  <DigestValue>54u/0PxaY+S7RigxrisF2Chnplc=</DigestValue>
               </Reference>
            </SignedInfo>
            <SignatureValue>HC10RHq8lweC1KLGAzw1pxjju5LbWASn5GUCxane36DqUxaXQQnBrF0fyBkpI70H+ncrYaO00sxVd1QWnLfYxzl/YEWfHus/qObmFckRnNsEnx9MV5ejHhntbXdzIc9RFbXoFGPcoEGAsKoUbeOi7UWKbofzATG6VMlKhLFz01k=</SignatureValue>
            <KeyInfo>
               <wsse:SecurityTokenReference xmlns="""">
                  <wsse:Reference URI=""#SecurityToken-1da2e6b0-3a0d-4943-bcae-de0805d9c4c5"" ValueType=""http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-x509-token-profile-1.0#X509v3""/>
               </wsse:SecurityTokenReference>
            </KeyInfo>
         </Signature>
</wsse:Security>      

Thanks...
","
Thank god, finally i've found a solution after a long research,
  googling/binging and hard work. Just Recap: Third party web service
  (coded in Java) with X509 SecurityToken Https certificate consume in
  .NET.
Yes, we can consume the above service using old technology using WSE
  2.0 / WSE 3.0 (Web Services Enhancements) and Latest using WCF. I've just tried using WSE 2.0 it's working as expected but with Error code 
  ""WSE464: No policy could be found for this message"" still i can able to get see response in try..catch block and use appropriate decrypt XML response message.

Steps followed

Install the client given certificate (.pfx)
Open Microsoft Management Console (MMC) in run command type mmc → Enter
a. File → Add/Remove snap in → Select certificate in list box → Click Add → Select My
           Current User → Finish –> Click Ok.
     b. Select Trusted Root Certification → Expand it → Select Certificate → Right click on           
         Certificate → Select All Tasks → Import → Select your Certificate location and finish the  
          wizard process

Repeat Step 2 for Local Machine (Local Computer)
Install Microsoft WSE (Web Services Enhancements) 2.0 SP3 / WSE 3.0    Note. WSE 2.0/3.0 will support .Net Framework 2.0 only.
http://www.microsoft.com/en-in/download/details.aspx?id=23689
Create new web application project in Visual Studio
Expand project → Right click on Reference → Add Service Reference → Advanced → Add Web Reference → Paste your Service WSDL link in URL text box → Click on Go button (Pointing right arrow) → Since it's https it will show with popup with warning message click Yes until it's stops → Enter Web Reference name and click Add Reference button
Right click → Reference → Add reference → Click Browse → \Program Files\Microsoft WSE\v2.0\ → Select “Microsoft.Web.Services2.dll” → Click Add 
Proxy/Stubbed class generated now → Look for Reference.cs file under Web Reference folder if not visible click Show all files in Solution Explorer. → Open Reference.cs file and Replace “System.Web.Services.Protocols.SoapHttpClientProtocol” with “WebServicesClientProtocol” 
    protected void Page_Load(object sender, EventArgs e)
    {
        private static string ClientBase64KeyId = ""XPaTfx6Lx8dV/oh6ebOeOo4Xdummy"";
        MyService myClient = new MyService();
        try
        {
           SecurityToken signingToken = GetClientToken(false);
           //Get the SoapContext for the SOAP request.
           SoapContext requestContext = client.RequestSoapContext;

           // Expire this message one minute after it is sent.
           requestContext.Security.Timestamp.TtlInSeconds = 3600;

            // Add the X509 certificate to the WS-Security header.
            requestContext.Security.Tokens.Add(signingToken);

            MessageSignature sig = new MessageSignature(signingToken);

            requestContext.Security.Elements.Add(sig);

            RequestClass request = new RequestClass();
            request.Name =””;
            ResponceClass  responce  = myClient.QueryCsa(request);
        }
        catch(Exception ex)
        {
           lblResultMessage.Text = ex.Message;
        }


    public static X509SecurityToken GetClientToken(bool selectFromList)
    {
        X509SecurityToken token = null;

        // Open the CurrentUser Certificate Store and try MyStore only
        X509CertificateStore store = X509CertificateStore.CurrentUserStore(X509CertificateStore.MyStore);
        if (selectFromList)
        {
            //token = RetrieveTokenFromDialog(store);
        }
        else
        {
            token = RetrieveTokenFromStore(store, ClientBase64KeyId);
        }

        return token;
    }

   private static X509SecurityToken RetrieveTokenFromStore(X509CertificateStore store, string keyIdentifier)
    {
        if (store == null)
            throw new ArgumentNullException(""store"");

        X509SecurityToken token = null;

        try
        {
            if (store.OpenRead())
            {
                // Place the key ID of the certificate in a byte array
                // This KeyID represents the Wse2Quickstart certificate included with the WSE 2.0 Quickstarts
                // ClientBase64KeyId is defined in the ClientBase.AppBase class
                Microsoft.Web.Services2.Security.X509.X509CertificateCollection certs = store.FindCertificateByKeyIdentifier(Convert.FromBase64String(keyIdentifier));

                if (certs.Count > 0)
                {

                    if (!certs[0].SupportsDigitalSignature ||
                (certs[0].Key == null))
                    {
                        //MessageBox.Show(
                        //    ""The certificate must support digital "" +
                        //    ""signatures and have a private key available."");
                        //securityToken = null;
                    }
                    // Get the first certificate in the collection
                    token = new X509SecurityToken(((Microsoft.Web.Services2.Security.X509.X509Certificate)certs[0]));
                }
            }
        }
        finally
        {
            if (store != null)
                store.Close();
        }

        return token;
    }

}
Add the following code in in your page and Get  ClientBase64KeyId value from X509 Certficate Tool. 
Start → Program Files → Microsoft WSE 2.0 → X509 Certificate Tool → Select Certificate Location is Local Computer  → Sore Name is Personal → Click Open Certificate Button, listed with certificates and select appropriates which is one installed using MMC. Now pick the values from Key Identifier (Based64 Encoded) value and use it below code. If your application is Asp.Net Web application, it may not accessible so click 'View Private Keys File Properties' button and assign appropriate Security permission in the same tool itself.
Almost we've done 70% of work. Now it's very crucial part going to do now... Yes we're going to apply Policy details.This is all about Security Policy related to X509 Certificate which defines about what part it's going to Sign (Signature), Encryption, Integrity, Confidentiality and so on. Don't panic we have helper called WSE 2.0 Tool,
Yes chumma :) try it Start → Program Files → Microsoft WSE 2.0 → Configuration Editor → File → Open → Point to Web.config from your application
General => Check both the Check Boxes
Security, Routing and Customized Filters => They are not called me:) 
So Leave It.  
Policy => Very Important. 1. Check Enable Policy 2.Click Add → Name
it / Enter any name → Next → Leave it default (Secure Client
Application) → (Default) Next → Next → (Default: X509 Certificate) → 
Next → Select Certificate → Select appropriate certificate from the
list → Ok → Next → Finish
TokenIssuing => Leave it
Diagnostics => Check it appropriate check boxes for tracing and
logging purpose
File → Save → Close it :)
Now one would've created policyCache.config which is referenced in Web.config file. Here we have add our HTTPS service URL in . Done

This is achieved by WSE 2.0. Yes i know this is old technology. I am
trying to consume with WCF as Client... I will post it next session....
:) Happy Programming :)
JaiSankar
","12676","<web-services><https><wsdl><ssl-certificate><public-key-encryption>","2","5","1","2016-03-10 21:41:45","22560639","0","4","2600248","","2014-03-21 13:57:41","2014-02-18 17:34:46",""
"7779191","How to encrypt data with public key in NodeJS?","In crypto, I see only Signer/Verifier for doing digital signature and Cipher/Decipher with symmetric key encryption. 
How do I encrypt data with public key?
","You might be interested in my NaCl bindings. From its API:
// encrypt and sign
box(message, nonce, pubkey, privkey)
// decrypt and validate
unbox(box, nonce, pubkey, privkey)
// generates a new keypair, returns {private: <buffer>, public: <buffer>}
boxKeypair()
// lengths of nonces and public and private keys in bytes
// { nonce: x, pubkey: x, privkey: x }
lengths.box

","12667","<encryption><node.js><public-key-encryption>","11","2","3","2018-03-19 10:03:50","","1","2","","","","2011-10-15 16:45:39",""
"7779191","How to encrypt data with public key in NodeJS?","In crypto, I see only Signer/Verifier for doing digital signature and Cipher/Decipher with symmetric key encryption. 
How do I encrypt data with public key?
","For those who run into this question when googling, the other SO question has it answered already Encrypting data with Public Key in node.js which works well.
","12667","<encryption><node.js><public-key-encryption>","11","9","3","2018-03-19 10:03:50","","1","2","","","","2011-10-15 16:45:39",""
"7779191","How to encrypt data with public key in NodeJS?","In crypto, I see only Signer/Verifier for doing digital signature and Cipher/Decipher with symmetric key encryption. 
How do I encrypt data with public key?
","

var encrypted = crypto.publicEncrypt(publicKey, buffer);



","12667","<encryption><node.js><public-key-encryption>","11","4","3","2018-03-19 10:03:50","","1","2","","","","2011-10-15 16:45:39",""
"28444819","Getting BouncyCastle to decrypt a GPG-encrypted message","How can I get BouncyCastle to decrypt a GPG-encrypted message? 
I have created a GPG key pair at the CentOS 7 command line using gpg --gen-key.  I chose RSA RSA as the encryption types, and I exported the keys using gpg --export-secret-key -a ""User Name"" > /home/username/username_private.key and gpg --armor --export 66677FC6 > /home/username/username_pubkey.asc
I am able to import username_pubkey.asc into a remote Thunderbird client of another email account and successfully send an encrypted email to username@mydomain.com.  But when my Java/BouncyCastle code running at mydomain.com tries to decrypt the GPG-encoded data, it gives the following error:  
org.bouncycastle.openpgp.PGPException:  
Encrypted message contains a signed message - not literal data.

If you look at the code below, you will see this corresponds with the line in PGPUtils.decryptFile() which states else if (message instanceof  PGPOnePassSignatureList) {throw new PGPException(""Encrypted message contains a signed message - not literal data."");
The original code for this came from the blog entry at this link, though I made minor changes to get it to compile in Eclipse Luna with Java 7.  A user of the linked blog reported the same error, and the blog author replied by saying that it does not work with GPG.  So how do I fix this to make it work with GPG? 
The Java decryption code starts when the GPG-encoded-file and the GPG-secret-key are passed into Tester.testDecrypt() as follows:  
Tester.java contains:  
public InputStream testDecrypt(String input, String output, String passphrase, String skeyfile) throws Exception {
    PGPFileProcessor p = new PGPFileProcessor();
    p.setInputFileName(input);//this is GPG-encoded data sent from another email address using Thunderbird
    p.setOutputFileName(output);
    p.setPassphrase(passphrase);
    p.setSecretKeyFileName(skeyfile);//this is the GPG-generated key
    return p.decrypt();//this line throws the error
}

PGPFileProcessor.java includes:  
public InputStream decrypt() throws Exception {
    FileInputStream in = new FileInputStream(inputFileName);
    FileInputStream keyIn = new FileInputStream(secretKeyFileName);
    FileOutputStream out = new FileOutputStream(outputFileName);
    PGPUtils.decryptFile(in, out, keyIn, passphrase.toCharArray());//error thrown here
    in.close();
    out.close();
    keyIn.close();
    InputStream result = new FileInputStream(outputFileName);//I changed return type from boolean on 1/27/15
    Files.deleteIfExists(Paths.get(outputFileName));//I also added this to accommodate change of return type on 1/27/15
    return result;
}

PGPUtils.java includes:
/**
 * decrypt the passed in message stream
 */
@SuppressWarnings(""unchecked"")
public static void decryptFile(InputStream in, OutputStream out, InputStream keyIn, char[] passwd)
    throws Exception
{
    Security.addProvider(new BouncyCastleProvider());

    in = org.bouncycastle.openpgp.PGPUtil.getDecoderStream(in);

    //1/26/15 added Jca prefix to avoid eclipse warning, also used https://www.bouncycastle.org/docs/pgdocs1.5on/index.html
    PGPObjectFactory pgpF = new JcaPGPObjectFactory(in);
    PGPEncryptedDataList enc;

    Object o = pgpF.nextObject();
    //
    // the first object might be a PGP marker packet.
    //
    if (o instanceof  PGPEncryptedDataList) {enc = (PGPEncryptedDataList) o;}
    else {enc = (PGPEncryptedDataList) pgpF.nextObject();}

    //
    // find the secret key
    //
    Iterator<PGPPublicKeyEncryptedData> it = enc.getEncryptedDataObjects();
    PGPPrivateKey sKey = null;
    PGPPublicKeyEncryptedData pbe = null;

    while (sKey == null && it.hasNext()) {
        pbe = it.next(); 
        sKey = findPrivateKey(keyIn, pbe.getKeyID(), passwd);
    }

    if (sKey == null) {throw new IllegalArgumentException(""Secret key for message not found."");}

    InputStream clear = pbe.getDataStream(new BcPublicKeyDataDecryptorFactory(sKey));

    //1/26/15 added Jca prefix to avoid eclipse warning, also used https://www.bouncycastle.org/docs/pgdocs1.5on/index.html
    PGPObjectFactory plainFact = new JcaPGPObjectFactory(clear);

    Object message = plainFact.nextObject();

    if (message instanceof  PGPCompressedData) {
        PGPCompressedData cData = (PGPCompressedData) message;
        //1/26/15 added Jca prefix to avoid eclipse warning, also used https://www.bouncycastle.org/docs/pgdocs1.5on/index.html
        PGPObjectFactory pgpFact = new JcaPGPObjectFactory(cData.getDataStream()); 
        message = pgpFact.nextObject();
    }

    if (message instanceof  PGPLiteralData) {
        PGPLiteralData ld = (PGPLiteralData) message;

        InputStream unc = ld.getInputStream();
        int ch;

        while ((ch = unc.read()) >= 0) {out.write(ch);}
    } else if (message instanceof  PGPOnePassSignatureList) {
        throw new PGPException(""Encrypted message contains a signed message - not literal data."");
    } else {
        throw new PGPException(""Message is not a simple encrypted file - type unknown."");
    }

    if (pbe.isIntegrityProtected()) {
        if (!pbe.verify()) {throw new PGPException(""Message failed integrity check"");}
    }
}

/**
 * Load a secret key ring collection from keyIn and find the private key corresponding to
 * keyID if it exists.
 *
 * @param keyIn input stream representing a key ring collection.
 * @param keyID keyID we want.
 * @param pass passphrase to decrypt secret key with.
 * @return
 * @throws IOException
 * @throws PGPException
 * @throws NoSuchProviderException
 */
public  static PGPPrivateKey findPrivateKey(InputStream keyIn, long keyID, char[] pass)
    throws IOException, PGPException, NoSuchProviderException
{
    //1/26/15 added Jca prefix to avoid eclipse warning, also used https://www.bouncycastle.org/docs/pgdocs1.5on/index.html
    PGPSecretKeyRingCollection pgpSec = new JcaPGPSecretKeyRingCollection(PGPUtil.getDecoderStream(keyIn));
    return findPrivateKey(pgpSec.getSecretKey(keyID), pass);

}

/**
 * Load a secret key and find the private key in it
 * @param pgpSecKey The secret key
 * @param pass passphrase to decrypt secret key with
 * @return
 * @throws PGPException
 */
public static PGPPrivateKey findPrivateKey(PGPSecretKey pgpSecKey, char[] pass)
    throws PGPException
{
    if (pgpSecKey == null) return null;

    PBESecretKeyDecryptor decryptor = new BcPBESecretKeyDecryptorBuilder(new BcPGPDigestCalculatorProvider()).build(pass);
    return pgpSecKey.extractPrivateKey(decryptor);
}  

The complete code of all three Java files can be found on a file sharing site by clicking on this link.  
The complete stack trace for the error can be found by clicking on this link.  
For reference, the GUI instructions for encryption by the remote Thunderbird sender are summarized in the following screen shot:  


I have read many postings and links about this.  In particular, this other SO posting looks similar, but is different.  My Keys use RSA RSA, but the other posting does not.  
EDIT#1 
As per @DavidHook's suggestion, I have read SignedFileProcessor, and I am starting to read the much longer RFC 4880.  However, I need actual working code to study in order to understand this.  Most people who find this via google searches will also need working code to illustrate the examples.  
For reference, the SignedFileProcessor.verifyFile() method recommended by @DavidHook is as follows.  How should this be customized to fix the problems in the code above? 
private static void verifyFile(InputStream in, InputStream keyIn) throws Exception {
    in = PGPUtil.getDecoderStream(in);
    PGPObjectFactory pgpFact = new PGPObjectFactory(in);
    PGPCompressedData c1 = (PGPCompressedData)pgpFact.nextObject();
    pgpFact = new PGPObjectFactory(c1.getDataStream());
    PGPOnePassSignatureList p1 = (PGPOnePassSignatureList)pgpFact.nextObject();
    PGPOnePassSignature ops = p1.get(0);
    PGPLiteralData p2 = (PGPLiteralData)pgpFact.nextObject();
    InputStream dIn = p2.getInputStream();
    int ch;
    PGPPublicKeyRingCollection  pgpRing = new PGPPublicKeyRingCollection(PGPUtil.getDecoderStream(keyIn));
    PGPPublicKey key = pgpRing.getPublicKey(ops.getKeyID());
    FileOutputStream out = new FileOutputStream(p2.getFileName());
    ops.initVerify(key, ""BC"");
    while ((ch = dIn.read()) >= 0){
        ops.update((byte)ch);
        out.write(ch);
    }
    out.close();
    PGPSignatureList p3 = (PGPSignatureList)pgpFact.nextObject();
    if (ops.verify(p3.get(0))){System.out.println(""signature verified."");}
    else{System.out.println(""signature verification failed."");}
}

EDIT#2 
The SignedFileProcessor.verifyFile() method recommended by @DavidHook is almost identical to the PGPUtils.verifyFile() method in my code above, except that PGPUtils.verifyFile() makes a copy of extractContentFile and calls PGPOnePassSignature.init() instead of PGPOnePassSignature.initVerify().  This may be due to a version difference.  Also, PGPUtils.verifyFile() returns a boolean, while SignedFileProcessor.verifyFile() gives SYSO for the two boolean values and returns void after the SYSO.  
If I interpret @JRichardSnape's comments correctly, this means that the verifyFile() method might best be called upstream to confirm the signature of the incoming file using the sender's public key, and then, if the signature on the file is verified, using another method to decrypt the file using the recipient's private key.  Is this correct?  If so, how do I restructure the code to accomplish this?
","It just means that content has been signed and then encrypted, the routine provided does not know how to deal with it, but at least tells you that. PGP protocol presents as a series of packets some of which can be wrapped in other ones (for example compressed data can also wrap signed data or simply literal data, these can be used to generate encrypted data as well, actual content always appears in literal data).
If you look at the verifyFile method in the SignedFileProcessor in the Bouncy Castle OpenPGP examples package you will see how to handle the signature data and get to the literal data containing the actual content.
I would also recommend looking at RFC 4880 so you have some idea of how the protocol works. The protocol is very loose and both GPG, BC, and the variety of products out there reflect this - that said the looseness does mean that if you try and cut and paste your way to a solution you'll end up with a disaster. It's not complicated, but understanding is required here as well.
","12340","<java><encryption><bouncycastle><public-key-encryption><gnupg>","3","1","2","2019-09-25 19:28:11","","5","2","4751173","","2019-09-25 19:28:11","2015-02-11 01:00:34",""
"28444819","Getting BouncyCastle to decrypt a GPG-encrypted message","How can I get BouncyCastle to decrypt a GPG-encrypted message? 
I have created a GPG key pair at the CentOS 7 command line using gpg --gen-key.  I chose RSA RSA as the encryption types, and I exported the keys using gpg --export-secret-key -a ""User Name"" > /home/username/username_private.key and gpg --armor --export 66677FC6 > /home/username/username_pubkey.asc
I am able to import username_pubkey.asc into a remote Thunderbird client of another email account and successfully send an encrypted email to username@mydomain.com.  But when my Java/BouncyCastle code running at mydomain.com tries to decrypt the GPG-encoded data, it gives the following error:  
org.bouncycastle.openpgp.PGPException:  
Encrypted message contains a signed message - not literal data.

If you look at the code below, you will see this corresponds with the line in PGPUtils.decryptFile() which states else if (message instanceof  PGPOnePassSignatureList) {throw new PGPException(""Encrypted message contains a signed message - not literal data."");
The original code for this came from the blog entry at this link, though I made minor changes to get it to compile in Eclipse Luna with Java 7.  A user of the linked blog reported the same error, and the blog author replied by saying that it does not work with GPG.  So how do I fix this to make it work with GPG? 
The Java decryption code starts when the GPG-encoded-file and the GPG-secret-key are passed into Tester.testDecrypt() as follows:  
Tester.java contains:  
public InputStream testDecrypt(String input, String output, String passphrase, String skeyfile) throws Exception {
    PGPFileProcessor p = new PGPFileProcessor();
    p.setInputFileName(input);//this is GPG-encoded data sent from another email address using Thunderbird
    p.setOutputFileName(output);
    p.setPassphrase(passphrase);
    p.setSecretKeyFileName(skeyfile);//this is the GPG-generated key
    return p.decrypt();//this line throws the error
}

PGPFileProcessor.java includes:  
public InputStream decrypt() throws Exception {
    FileInputStream in = new FileInputStream(inputFileName);
    FileInputStream keyIn = new FileInputStream(secretKeyFileName);
    FileOutputStream out = new FileOutputStream(outputFileName);
    PGPUtils.decryptFile(in, out, keyIn, passphrase.toCharArray());//error thrown here
    in.close();
    out.close();
    keyIn.close();
    InputStream result = new FileInputStream(outputFileName);//I changed return type from boolean on 1/27/15
    Files.deleteIfExists(Paths.get(outputFileName));//I also added this to accommodate change of return type on 1/27/15
    return result;
}

PGPUtils.java includes:
/**
 * decrypt the passed in message stream
 */
@SuppressWarnings(""unchecked"")
public static void decryptFile(InputStream in, OutputStream out, InputStream keyIn, char[] passwd)
    throws Exception
{
    Security.addProvider(new BouncyCastleProvider());

    in = org.bouncycastle.openpgp.PGPUtil.getDecoderStream(in);

    //1/26/15 added Jca prefix to avoid eclipse warning, also used https://www.bouncycastle.org/docs/pgdocs1.5on/index.html
    PGPObjectFactory pgpF = new JcaPGPObjectFactory(in);
    PGPEncryptedDataList enc;

    Object o = pgpF.nextObject();
    //
    // the first object might be a PGP marker packet.
    //
    if (o instanceof  PGPEncryptedDataList) {enc = (PGPEncryptedDataList) o;}
    else {enc = (PGPEncryptedDataList) pgpF.nextObject();}

    //
    // find the secret key
    //
    Iterator<PGPPublicKeyEncryptedData> it = enc.getEncryptedDataObjects();
    PGPPrivateKey sKey = null;
    PGPPublicKeyEncryptedData pbe = null;

    while (sKey == null && it.hasNext()) {
        pbe = it.next(); 
        sKey = findPrivateKey(keyIn, pbe.getKeyID(), passwd);
    }

    if (sKey == null) {throw new IllegalArgumentException(""Secret key for message not found."");}

    InputStream clear = pbe.getDataStream(new BcPublicKeyDataDecryptorFactory(sKey));

    //1/26/15 added Jca prefix to avoid eclipse warning, also used https://www.bouncycastle.org/docs/pgdocs1.5on/index.html
    PGPObjectFactory plainFact = new JcaPGPObjectFactory(clear);

    Object message = plainFact.nextObject();

    if (message instanceof  PGPCompressedData) {
        PGPCompressedData cData = (PGPCompressedData) message;
        //1/26/15 added Jca prefix to avoid eclipse warning, also used https://www.bouncycastle.org/docs/pgdocs1.5on/index.html
        PGPObjectFactory pgpFact = new JcaPGPObjectFactory(cData.getDataStream()); 
        message = pgpFact.nextObject();
    }

    if (message instanceof  PGPLiteralData) {
        PGPLiteralData ld = (PGPLiteralData) message;

        InputStream unc = ld.getInputStream();
        int ch;

        while ((ch = unc.read()) >= 0) {out.write(ch);}
    } else if (message instanceof  PGPOnePassSignatureList) {
        throw new PGPException(""Encrypted message contains a signed message - not literal data."");
    } else {
        throw new PGPException(""Message is not a simple encrypted file - type unknown."");
    }

    if (pbe.isIntegrityProtected()) {
        if (!pbe.verify()) {throw new PGPException(""Message failed integrity check"");}
    }
}

/**
 * Load a secret key ring collection from keyIn and find the private key corresponding to
 * keyID if it exists.
 *
 * @param keyIn input stream representing a key ring collection.
 * @param keyID keyID we want.
 * @param pass passphrase to decrypt secret key with.
 * @return
 * @throws IOException
 * @throws PGPException
 * @throws NoSuchProviderException
 */
public  static PGPPrivateKey findPrivateKey(InputStream keyIn, long keyID, char[] pass)
    throws IOException, PGPException, NoSuchProviderException
{
    //1/26/15 added Jca prefix to avoid eclipse warning, also used https://www.bouncycastle.org/docs/pgdocs1.5on/index.html
    PGPSecretKeyRingCollection pgpSec = new JcaPGPSecretKeyRingCollection(PGPUtil.getDecoderStream(keyIn));
    return findPrivateKey(pgpSec.getSecretKey(keyID), pass);

}

/**
 * Load a secret key and find the private key in it
 * @param pgpSecKey The secret key
 * @param pass passphrase to decrypt secret key with
 * @return
 * @throws PGPException
 */
public static PGPPrivateKey findPrivateKey(PGPSecretKey pgpSecKey, char[] pass)
    throws PGPException
{
    if (pgpSecKey == null) return null;

    PBESecretKeyDecryptor decryptor = new BcPBESecretKeyDecryptorBuilder(new BcPGPDigestCalculatorProvider()).build(pass);
    return pgpSecKey.extractPrivateKey(decryptor);
}  

The complete code of all three Java files can be found on a file sharing site by clicking on this link.  
The complete stack trace for the error can be found by clicking on this link.  
For reference, the GUI instructions for encryption by the remote Thunderbird sender are summarized in the following screen shot:  


I have read many postings and links about this.  In particular, this other SO posting looks similar, but is different.  My Keys use RSA RSA, but the other posting does not.  
EDIT#1 
As per @DavidHook's suggestion, I have read SignedFileProcessor, and I am starting to read the much longer RFC 4880.  However, I need actual working code to study in order to understand this.  Most people who find this via google searches will also need working code to illustrate the examples.  
For reference, the SignedFileProcessor.verifyFile() method recommended by @DavidHook is as follows.  How should this be customized to fix the problems in the code above? 
private static void verifyFile(InputStream in, InputStream keyIn) throws Exception {
    in = PGPUtil.getDecoderStream(in);
    PGPObjectFactory pgpFact = new PGPObjectFactory(in);
    PGPCompressedData c1 = (PGPCompressedData)pgpFact.nextObject();
    pgpFact = new PGPObjectFactory(c1.getDataStream());
    PGPOnePassSignatureList p1 = (PGPOnePassSignatureList)pgpFact.nextObject();
    PGPOnePassSignature ops = p1.get(0);
    PGPLiteralData p2 = (PGPLiteralData)pgpFact.nextObject();
    InputStream dIn = p2.getInputStream();
    int ch;
    PGPPublicKeyRingCollection  pgpRing = new PGPPublicKeyRingCollection(PGPUtil.getDecoderStream(keyIn));
    PGPPublicKey key = pgpRing.getPublicKey(ops.getKeyID());
    FileOutputStream out = new FileOutputStream(p2.getFileName());
    ops.initVerify(key, ""BC"");
    while ((ch = dIn.read()) >= 0){
        ops.update((byte)ch);
        out.write(ch);
    }
    out.close();
    PGPSignatureList p3 = (PGPSignatureList)pgpFact.nextObject();
    if (ops.verify(p3.get(0))){System.out.println(""signature verified."");}
    else{System.out.println(""signature verification failed."");}
}

EDIT#2 
The SignedFileProcessor.verifyFile() method recommended by @DavidHook is almost identical to the PGPUtils.verifyFile() method in my code above, except that PGPUtils.verifyFile() makes a copy of extractContentFile and calls PGPOnePassSignature.init() instead of PGPOnePassSignature.initVerify().  This may be due to a version difference.  Also, PGPUtils.verifyFile() returns a boolean, while SignedFileProcessor.verifyFile() gives SYSO for the two boolean values and returns void after the SYSO.  
If I interpret @JRichardSnape's comments correctly, this means that the verifyFile() method might best be called upstream to confirm the signature of the incoming file using the sender's public key, and then, if the signature on the file is verified, using another method to decrypt the file using the recipient's private key.  Is this correct?  If so, how do I restructure the code to accomplish this?
","if anyone is interested to know how to encrypt and decrypt gpg files using bouncy castle openPGP library, check the below java code:
The below are the 4 methods you going to need:
The below method will read and import your secret key from .asc file:
public static PGPSecretKey readSecretKeyFromCol(InputStream in, long keyId) throws IOException, PGPException {
in = PGPUtil.getDecoderStream(in);
PGPSecretKeyRingCollection pgpSec = new PGPSecretKeyRingCollection(in, new BcKeyFingerprintCalculator());

PGPSecretKey key = pgpSec.getSecretKey(keyId);

if (key == null) {
    throw new IllegalArgumentException(""Can't find encryption key in key ring."");
}
return key;
}

The below method will read and import your public key from .asc file:
@SuppressWarnings(""rawtypes"")
public static PGPPublicKey readPublicKeyFromCol(InputStream in) throws IOException, PGPException {
    in = PGPUtil.getDecoderStream(in);
    PGPPublicKeyRingCollection pgpPub = new PGPPublicKeyRingCollection(in, new BcKeyFingerprintCalculator());
    PGPPublicKey key = null;
    Iterator rIt = pgpPub.getKeyRings();
    while (key == null && rIt.hasNext()) {
        PGPPublicKeyRing kRing = (PGPPublicKeyRing) rIt.next();
        Iterator kIt = kRing.getPublicKeys();
        while (key == null && kIt.hasNext()) {
            PGPPublicKey k = (PGPPublicKey) kIt.next();
            if (k.isEncryptionKey()) {
                key = k;
            }
        }
    }
    if (key == null) {
        throw new IllegalArgumentException(""Can't find encryption key in key ring."");
    }
    return key;
}

The below 2 methods to decrypt and encrypt gpg files:
public void decryptFile(InputStream in, InputStream secKeyIn, InputStream pubKeyIn, char[] pass) throws IOException, PGPException, InvalidCipherTextException {
    Security.addProvider(new BouncyCastleProvider());

    PGPPublicKey pubKey = readPublicKeyFromCol(pubKeyIn);

    PGPSecretKey secKey = readSecretKeyFromCol(secKeyIn, pubKey.getKeyID());

    in = PGPUtil.getDecoderStream(in);

    JcaPGPObjectFactory pgpFact;


    PGPObjectFactory pgpF = new PGPObjectFactory(in, new BcKeyFingerprintCalculator());

    Object o = pgpF.nextObject();
    PGPEncryptedDataList encList;

    if (o instanceof PGPEncryptedDataList) {

        encList = (PGPEncryptedDataList) o;

    } else {

        encList = (PGPEncryptedDataList) pgpF.nextObject();

    }

    Iterator<PGPPublicKeyEncryptedData> itt = encList.getEncryptedDataObjects();
    PGPPrivateKey sKey = null;
    PGPPublicKeyEncryptedData encP = null;
    while (sKey == null && itt.hasNext()) {
        encP = itt.next();
        secKey = readSecretKeyFromCol(new FileInputStream(""PrivateKey.asc""), encP.getKeyID());
        sKey = secKey.extractPrivateKey(new BcPBESecretKeyDecryptorBuilder(new BcPGPDigestCalculatorProvider()).build(pass));
    }
    if (sKey == null) {
        throw new IllegalArgumentException(""Secret key for message not found."");
    }

    InputStream clear = encP.getDataStream(new BcPublicKeyDataDecryptorFactory(sKey));

    pgpFact = new JcaPGPObjectFactory(clear);

    PGPCompressedData c1 = (PGPCompressedData) pgpFact.nextObject();

    pgpFact = new JcaPGPObjectFactory(c1.getDataStream());

    PGPLiteralData ld = (PGPLiteralData) pgpFact.nextObject();
    ByteArrayOutputStream bOut = new ByteArrayOutputStream();

    InputStream inLd = ld.getDataStream();

    int ch;
    while ((ch = inLd.read()) >= 0) {
        bOut.write(ch);
    }

    //System.out.println(bOut.toString());

    bOut.writeTo(new FileOutputStream(ld.getFileName()));
    //return bOut;

}

public static void encryptFile(OutputStream out, String fileName, PGPPublicKey encKey) throws IOException, NoSuchProviderException, PGPException {
    Security.addProvider(new BouncyCastleProvider());

    ByteArrayOutputStream bOut = new ByteArrayOutputStream();

    PGPCompressedDataGenerator comData = new PGPCompressedDataGenerator(PGPCompressedData.ZIP);

    PGPUtil.writeFileToLiteralData(comData.open(bOut), PGPLiteralData.BINARY, new File(fileName));

    comData.close();

    PGPEncryptedDataGenerator cPk = new PGPEncryptedDataGenerator(new BcPGPDataEncryptorBuilder(SymmetricKeyAlgorithmTags.TRIPLE_DES).setSecureRandom(new SecureRandom()));

    cPk.addMethod(new BcPublicKeyKeyEncryptionMethodGenerator(encKey));

    byte[] bytes = bOut.toByteArray();

    OutputStream cOut = cPk.open(out, bytes.length);

    cOut.write(bytes);

    cOut.close();

    out.close();
}

Now here is how to invoke/run the above:
try {
         decryptFile(new FileInputStream(""encryptedFile.gpg""), new FileInputStream(""PrivateKey.asc""), new FileInputStream(""PublicKey.asc""), ""yourKeyPassword"".toCharArray());

        PGPPublicKey pubKey = readPublicKeyFromCol(new FileInputStream(""PublicKey.asc""));

        encryptFile(new FileOutputStream(""encryptedFileOutput.gpg""), ""fileToEncrypt.txt"", pubKey);




    } catch (PGPException e) {
        fail(""exception: "" + e.getMessage(), e.getUnderlyingException());
    }

","12340","<java><encryption><bouncycastle><public-key-encryption><gnupg>","3","4","2","2019-09-25 19:28:11","","5","2","4751173","","2019-09-25 19:28:11","2015-02-11 01:00:34",""
"20586276","java.security.spec.InvalidKeySpecException: java.security.InvalidKeyException: IOException: Detect premature EOF","i have this code :
// Turn the encoded key into a real RSA public key.
// Public keys are encoded in X.509.
X509EncodedKeySpec keySpec = new X509EncodedKeySpec(keyBytes);
KeyFactory keyFactory = KeyFactory.getInstance(""RSA"");
PublicKey publicKey = keyFactory.generatePublic(keySpec);

error:

java.security.spec.InvalidKeySpecException:
  java.security.InvalidKeyException: IOException: Detect premature EOF

where is the problem?
","public static PublicKey getPublicKey(String key) throws Exception {
      byte[] keyBytes;  
      keyBytes = (new BASE64Decoder()).decodeBuffer(key); 
      X509EncodedKeySpec keySpec = new X509EncodedKeySpec(keyBytes); 
      KeyFactory keyFactory = KeyFactory.getInstance(""RSA"");
      PublicKey publicKey = keyFactory.generatePublic(keySpec); 
      return publicKey;
  }

this is how i turn ""String key"" into real rsa key(PublicKey publicKey).
maybe helps.
","12315","<public-key-encryption><x509>","0","1","1","2018-05-17 08:55:41","","8","","","","","2013-12-14 17:39:26",""
"13570029","How can I fill in RSAParameters value in c#","I was using below code for encryption in my project and everything was working fine.
RSACryptoServiceProvider x_alg = new RSACryptoServiceProvider(  );

// export only the public key 
RSAParameters x_public_params = x_alg.ExportParameters(false);

// export the private key 
RSAParameters x_private_params = x_alg.ExportParameters(true);

Now client changed the requirement and he want to store all the RSAParameters value into config file and provided below details for demo
<project name=""netCard Server1"">
  <key length=""256""></key>
  <D length=""64"">00000000000000000000000000000000000000000000000000000000000019C5</D>
  <DP length=""32"">00000000000000000000000000000061</DP>
  <DQ length=""32"">00000000000000000000000000000065</DQ>
  <Exponent length=""6"">000DCD</Exponent>
  <InverseQ length=""32"">0000000000000000000000000000003B</InverseQ>
  <Modulus length=""64"">0000000000000000000000000000000000000000000000000000000000002C95</Modulus>
  <P length=""32"">00000000000000000000000000000065</P>
  <Q length=""32"">00000000000000000000000000000071</Q>
  <text length =""64"">0123456789ABCDEF111111111111111125FE2222222222222233333333334444</text>
  <cipher length =""64"">0000000000000000000000000000000000000000000000000000000000000000</cipher>
</project>

Now,the problem is that when I am importing the RSAParameters value,I am getting Bad Data Exception
","The problem that you have is that the XML that your customer has given you is not in the format required to deserialize to an object of type RSAParameters
I've run this code to show what the XML generated by the XML serializer looks like
var provider = new RSACryptoServiceProvider();

var parameters = provider.ExportParameters(true);

var x = new XmlSerializer(parameters.GetType());
x.Serialize(Console.Out, parameters);
Console.WriteLine();

The output that it generates is something like:
<RSAParameters>
  <Exponent>AQAB</Exponent>
  <Modulus>ruCEpD3XnR...g/waE=</Modulus>
  <P>90amUU3dDazsqN9+...jJUQ==</P>
  <Q>tQv5hGehNLLmv4aC...NfUQ==</Q>
  <DP>azJiiZ6itPoBQph...zBcQ==</DP>
  <DQ>OmewiOw9bxi/o82...f44Q==</DQ>
  <InverseQ>wNohk0NNl...YDg==</InverseQ>
  <D>fNOOWp46FckcvtI+...PpXAE=</D>
</RSAParameters>

where the ... is truncated output. What your customer has supplied looks like a superset of that (key, text and cipher are not in the parameter list) but the format is a bit different.
You can either ask them to supply the data in exactly the required format then serialize from that; or you can accept their format, deserialize it to XML and build the RSAParameters object manually by mapping the XML content to the appropriate fields on the RSAParameters object. You also need to work out what it is that they want to do with the key, text and cipher data as these will be lost in this process.
","12137","<c#><rsa><public-key-encryption>","6","7","2","2012-11-30 18:07:21","13611575","1","2","","","","2012-11-26 17:29:23",""
"13570029","How can I fill in RSAParameters value in c#","I was using below code for encryption in my project and everything was working fine.
RSACryptoServiceProvider x_alg = new RSACryptoServiceProvider(  );

// export only the public key 
RSAParameters x_public_params = x_alg.ExportParameters(false);

// export the private key 
RSAParameters x_private_params = x_alg.ExportParameters(true);

Now client changed the requirement and he want to store all the RSAParameters value into config file and provided below details for demo
<project name=""netCard Server1"">
  <key length=""256""></key>
  <D length=""64"">00000000000000000000000000000000000000000000000000000000000019C5</D>
  <DP length=""32"">00000000000000000000000000000061</DP>
  <DQ length=""32"">00000000000000000000000000000065</DQ>
  <Exponent length=""6"">000DCD</Exponent>
  <InverseQ length=""32"">0000000000000000000000000000003B</InverseQ>
  <Modulus length=""64"">0000000000000000000000000000000000000000000000000000000000002C95</Modulus>
  <P length=""32"">00000000000000000000000000000065</P>
  <Q length=""32"">00000000000000000000000000000071</Q>
  <text length =""64"">0123456789ABCDEF111111111111111125FE2222222222222233333333334444</text>
  <cipher length =""64"">0000000000000000000000000000000000000000000000000000000000000000</cipher>
</project>

Now,the problem is that when I am importing the RSAParameters value,I am getting Bad Data Exception
","From the sample structure you've provided it looks like there is extra data there, which you may (or may not) be able to provide.

create a wrapper class
wrapper properties to call conversion function to transform the Base64 to Hex
XmlElement attributes to control the output format
Cipher and Text are not in RSAProperties, so client will have to spec them for you
[XmlRoot(""Project"")]
    public class RSAWrapper{
    [XmlIgnore]
    public RSAParameters RsaWrap{get;set;} 
// replicate Key for Text and Cipher, subject to client's specs
private LenghtyValue _key = null; 
[XmlElement]
public LenghtyValue Key{
    get{ return (_key!=null) ? _key.Value : null;}
    set{ _key = (value!=null) ? new LenghtyValue { Value = value} : null;}
}


// replicate Exponent for D, DP, DQ, InverseQ, Modulus, P and Q
[XmlElement]
public LenghtyValue Exponent{
   get{
       return new LenghtyValue { Value = ToHexFromB64(RsaWrap.Exponent);} // look up how to convert this
   }
   set {}
} 

public class LenghtyValue{
    [XmlText]
    public string Value{get;set;}

    [XmlAttribute(""length"")]
    public int Length {get{ return (""""+Value"").Length;} set{}}
}

}

// then use the class above as such:
    .... 
    RSACryptoServiceProvider x_alg = new RSACryptoServiceProvider(); 
RSAParameters x_public_params = x_alg.ExportParameters(false); // or true

RSAWrapper wrapForClient = new RSAWrapper {
    RsaWrap = x_public_params,
    Key = ""1024"", // or whatever size you have
    Cipher = ""???"", // whatever this field means per client specs
    Text = ""???"", // whatever this field means per client specs
}

// with simplifications....
XmlSerializer xser = new XmlSerializer(typeof(RSAWrapper));
xser.Serialize(File.Create(yourFileName), wrapForClient);

","12137","<c#><rsa><public-key-encryption>","6","2","2","2012-11-30 18:07:21","13611575","1","2","","","","2012-11-26 17:29:23",""
"44053426","'Cannot find the requested object' exception while creating X509Certificate2 from string","I am trying to create X509Certificate2 from string. Let me show an example:
string keyBase64String = Convert.ToBase64String(file.PKCS7);
var cert = new X509Certificate2(Convert.FromBase64String(keyBase64String));

and keyBase64String has a such content: ""MIIF0QYJKoZI ........hvcNAQcCoIIFwjCCBb4CA0=""
and file.PKCS7 is byte array which I downloaded from database.
I've got the following exception when creating X509Certificate2:

Cannot find the requested object

And the stack trace:

""Cannot find requested object"" X509Certificate2 Exception ""Cannot find
  requested object""}    at
  System.Security.Cryptography.CryptographicException.ThrowCryptographicException(Int32
  hr)    at
  System.Security.Cryptography.X509Certificates.X509Utils._QueryCertBlobType(Byte[]
  rawData)    at
  System.Security.Cryptography.X509Certificates.X509Certificate.LoadCertificateFromBlob(Byte[]
  rawData, Object password, X509KeyStorageFlags keyStorageFlags)    at
  System.Security.Cryptography.X509Certificates.X509Certificate2..ctor(Byte[]
  rawData)    at
  WebApp.SoupController.d__7.MoveNext()
  in
  D:\Projects\WebApp\Controllers\SoupController.cs:line
  118

Please, say me what I am doing wrong. Any help would be greatly appreciated!
","The constructor of of X509Certificate2 expects to get a the certificate file name, but you are giving it a key (X509Certificate2 Constructor (String))
I assume that keyBase64String  is the certificate key, and that the certificate is installed on the machine that executes the code. Try this:
var store = new X509Store(StoreName.My, StoreLocation.LocalMachine);
store.Open(OpenFlags.ReadOnly);
var certCollection = store.Certificates.Find(X509FindType.FindByThumbprint, keyBase64String , false);
//var certCollection = store.Certificates.Find(X509FindType.FindByKeyUsage, keyBase64String , false);
//var certCollection = store.Certificates.Find(X509FindType.FindBySubjectKeyIdentifier, keyBase64String , false);
var cert = certCollection[0];

You can also try FindByKeyUsage, FindBySubjectKeyIdentifier, or other types of X509FindType Enumeration
","12019","<c#><encryption><public-key-encryption><x509certificate2>","9","1","2","2017-05-19 14:58:45","44073265","3","","1646240","","2017-05-19 06:37:19","2017-05-18 16:36:44",""
"44053426","'Cannot find the requested object' exception while creating X509Certificate2 from string","I am trying to create X509Certificate2 from string. Let me show an example:
string keyBase64String = Convert.ToBase64String(file.PKCS7);
var cert = new X509Certificate2(Convert.FromBase64String(keyBase64String));

and keyBase64String has a such content: ""MIIF0QYJKoZI ........hvcNAQcCoIIFwjCCBb4CA0=""
and file.PKCS7 is byte array which I downloaded from database.
I've got the following exception when creating X509Certificate2:

Cannot find the requested object

And the stack trace:

""Cannot find requested object"" X509Certificate2 Exception ""Cannot find
  requested object""}    at
  System.Security.Cryptography.CryptographicException.ThrowCryptographicException(Int32
  hr)    at
  System.Security.Cryptography.X509Certificates.X509Utils._QueryCertBlobType(Byte[]
  rawData)    at
  System.Security.Cryptography.X509Certificates.X509Certificate.LoadCertificateFromBlob(Byte[]
  rawData, Object password, X509KeyStorageFlags keyStorageFlags)    at
  System.Security.Cryptography.X509Certificates.X509Certificate2..ctor(Byte[]
  rawData)    at
  WebApp.SoupController.d__7.MoveNext()
  in
  D:\Projects\WebApp\Controllers\SoupController.cs:line
  118

Please, say me what I am doing wrong. Any help would be greatly appreciated!
","If file.PKCS7 represents a PKCS#7 SignedData blob (what gets produced from X509Certificate2(Collection).Export(X509ContentType.Pkcs7)) then there are two different ways of opening it:

new X509Certificate2(byte[])/new X509Certificate2(string)

The single certificate constructor will extract the signing certificate of the SignedData blob.  If this was just being exported as a collection of certs, but not signing anything, there is no such certificate, and so it fails with Cannot find the original signer. (Win 2012r2, other versions could map it to a different string)

X509Certificate2Collection::Import(byte[])/X509Certificate2Collection::Import(string)

The collection import will consume all of the ""extra"" certificates, ignoring the signing certificate.


So if it's really PKCS#7 you likely want the collection Import (instance) method.  If it isn't, you have some odd variable/field/property names.
","12019","<c#><encryption><public-key-encryption><x509certificate2>","9","2","2","2017-05-19 14:58:45","44073265","3","","1646240","","2017-05-19 06:37:19","2017-05-18 16:36:44",""
"7669598","How to implement OpenSSL functionality in Python?","I would like to encrypt a secret text by public-key and decrypt it by private-key in Python.
I can achieve that with the openssl command:
echo ""secrettext/2011/09/14 22:57:23"" | openssl rsautl -encrypt -pubin -inkey public.pem | base64  data.cry
base64 -D data.cry | openssl rsautl -decrypt -inkey private.pem

How would one implement that in Python?
","The m2crypto module(s) expose much of OpenSSL's functionality to Python, including public/private encryption, decryption, and signing.
Most Linux distribution provide the m2crypto module as a native package.
","11874","<python><openssl><public-key-encryption><private-key>","13","1","3","2016-11-12 21:24:11","","0","6","200291","","2011-10-06 01:56:43","2011-10-06 01:48:33",""
"7669598","How to implement OpenSSL functionality in Python?","I would like to encrypt a secret text by public-key and decrypt it by private-key in Python.
I can achieve that with the openssl command:
echo ""secrettext/2011/09/14 22:57:23"" | openssl rsautl -encrypt -pubin -inkey public.pem | base64  data.cry
base64 -D data.cry | openssl rsautl -decrypt -inkey private.pem

How would one implement that in Python?
","Encrypt
#!/usr/bin/env python
import fileinput
from M2Crypto import RSA

rsa = RSA.load_pub_key(""public.pem"")
ctxt = rsa.public_encrypt(fileinput.input().read(), RSA.pkcs1_oaep_padding)
print ctxt.encode('base64')

Decrypt
#!/usr/bin/env python
import fileinput
from M2Crypto import RSA

priv = RSA.load_key(""private.pem"")
ctxt = fileinput.input().read().decode('base64')
print priv.private_decrypt(ctxt, RSA.pkcs1_oaep_padding)

Dependencies:

M2Crypto (seems to be Python 2 only)

See also How to encrypt a string using the key and What is the best way to encode string by public-key in python.
","11874","<python><openssl><public-key-encryption><private-key>","13","20","3","2016-11-12 21:24:11","","0","6","200291","","2011-10-06 01:56:43","2011-10-06 01:48:33",""
"7669598","How to implement OpenSSL functionality in Python?","I would like to encrypt a secret text by public-key and decrypt it by private-key in Python.
I can achieve that with the openssl command:
echo ""secrettext/2011/09/14 22:57:23"" | openssl rsautl -encrypt -pubin -inkey public.pem | base64  data.cry
base64 -D data.cry | openssl rsautl -decrypt -inkey private.pem

How would one implement that in Python?
","Probably the easiest way to get exactly the same behaviour would be using pyOpenSSL - it's a thin Python wrapper for OpenSSL itself.
","11874","<python><openssl><public-key-encryption><private-key>","13","3","3","2016-11-12 21:24:11","","0","6","200291","","2011-10-06 01:56:43","2011-10-06 01:48:33",""
"14309894","Javascript RSA decryption using private key","Hello I have this script that I set in Javascript :
<!DOCTYPE html>
    <html lang=""en"">
            <head>
            <script src=""jquery-1.7.2.min.js"" type=""text/javascript""></script>
            <script language=""JavaScript"" type=""text/javascript"" src=""jsbn.js""></script>
            <script language=""JavaScript"" type=""text/javascript"" src=""rsa.js""></script>
            <script language=""JavaScript"">

                function encryptData(){
                    var pem =""-----BEGIN PUBLIC KEY-----\
                    MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQC+tii3IwzHa4i142kAB0dRVXoXA2Q8oF48UgMA\
                    AV54+JDED5iVyJK1s7J/xGi4U3+9sRoraE7bS19Nihs5DuYa0gsbKs/5jXOtKiw94fAtMyJTcX0d\
                    SzZhJKcX9vEzI27Hdu1rNFY64Ixz3KjrG1N/pXHtwjE1Ira5XZdTezx0wwIDAQAB\
                    -----END PUBLIC KEY-----"";
                    var key = RSA.getPublicKey(pem);
                    var message = ""some text to RSA encrypt"";
                    var encryptedMessage = RSA.encrypt(message, key);
                    $('#RSAMessageEncrypted').html(encryptedMessage);
                }
            </script>
            </head>
        <body onload=encryptData();>
        <form>
            <strong>RSA encrypted Message :</strong> <textarea rows=""10"" cols=""100""   id=""RSAMessageEncrypted""></textarea><br>
        </form> 
        </body>
    </html>

My text area is filled with my message encrypted in RSA using the public key above.
The encrypted message is :
oH1JVWIT7MOH4ObCjFlBuFcAUvooSZANMokFy5jApSi8n0ABVc9vwXP2EFl2x5+UColU6s2VAU+RsZPV4ZgZu3+GhN9pDUb1ZMVyYRECDy/7h+mE+UdDZTPwP1TAcBrspL/XM6+q6mJfUWbEKfR/2vyNUhBxpt6QOhVaI29aHfU=

My question is as following: How can I decrypt my message using the private key pair that this public key was derived from? Is there any library for decryption?
My private key is :
-----BEGIN RSA PRIVATE KEY-----
MIICXQIBAAKBgQC+tii3IwzHa4i142kAB0dRVXoXA2Q8oF48UgMAAV54+JDED5iVyJK1s7J/xGi4
U3+9sRoraE7bS19Nihs5DuYa0gsbKs/5jXOtKiw94fAtMyJTcX0dSzZhJKcX9vEzI27Hdu1rNFY6
4Ixz3KjrG1N/pXHtwjE1Ira5XZdTezx0wwIDAQABAoGBAJY4Gd4XZ6t1Epxi4oQ5N33jXGXgMAZp
M5FD8EUCzw1ujWlB96iT8qvZPdLSPMJkUwxyAfELGoI13n3POR46lBhRpYKkTZm1UmEBscdO2B9w
B7YUM9caJG4TgWBKxD8KLriQANnXZrv9zNGx4Cs0USeQgWuDfgkBF+PvL5AVq+jRAkEA+O0MNvBM
kGtGCLt/V34jiivGs9HtXKSJY6vI60GYZYB7D3SniYVUsMocC+O3vyqdpMiO/szfLTAWdXB2yl3Q
VwJBAMQhmQkT57rJ07SS40t1HGonryrmGF3BcHw9sVCijZF/jrbKeL5XmhnbCr9Lhy/InepcSRFI
Pqzj32w0timLi3UCQCVsliKIXCp2RlA3yDxiNXunezc7v4DnJ9S5VfqwoPXZrCa1th6B0irGKBNN
iCmQgaTtljoOmRsVGLtNTj68ff8CQGeiLR/b0bUkEeY3OzzS27nH0EoFnNhlbw9m9btauR0pXnp9
j8FbvoRs9kfQG9WG1tJQAxfLqbpnCdY+IAbhwkUCQQDOIrm78sSuVL+U6f98P2eDSzhKgnepEEVJ
u5iBs3lT5T+p+Xov6DPLd13Pm7Lyppj8S7pW/1CwkTVwW+U3O2kj
-----END RSA PRIVATE KEY-----

","First of all, I hope that's not the RSA private key that you are going to use in production.
As regards to doing the encryption/decryption on JavaScript side, there are various libraries such as Standford's JSBN RSA Encryption library and ohdave.com's RSA in JavaScript utility for doing simple encryption/decryption, but your main concern with these tools and even your architecture is performance. I would not do RSA encryption with JavaScript unless it was absolutely necessary and there were no other workarounds. 
","11309","<javascript><rsa><public-key-encryption><encryption><private-key>","1","6","1","2015-05-12 11:30:40","","3","1","","","","2013-01-14 00:27:09",""
"8208476","How can I get the private key from an RSA public key?","Is is possible to get the private key for RSA encryption given: 
Public key:
n=14471312083473289027
e=17

I found out that:
p=2612029591
q=5540255797

Now, how do I find d??
This is where I got the description from
","Private key is an integer d such that e*d = 1 modulo both p-1 and q-1. Details are given in the second answer (the one with more than 30 upvotes) to the question you link to.
","11251","<encryption><encoding><rsa><public-key-encryption>","3","2","2","2012-10-28 07:57:36","8211602","0","","-1","","2017-05-23 10:30:18","2011-11-21 07:24:20",""
"8208476","How can I get the private key from an RSA public key?","Is is possible to get the private key for RSA encryption given: 
Public key:
n=14471312083473289027
e=17

I found out that:
p=2612029591
q=5540255797

Now, how do I find d??
This is where I got the description from
","RSA Practitioner:
e.d=1+k.@n
where k=1,e=17,n=14471312083473289027;

find the dataype for n, you will get d ans!

class temp{
    public static void main(String[] args){
    int d,e,inc=1;
    datatype n=14471312083473289027;
    e=17;
    n=60;

        do{
            d=(1+(inc*n))%e;
            inc++;
        }while(d!=0);
        System.out.println(inc);

    }
}


After getting output, add inc to following formula:
then ans=[((inc-1)*k)+1]/e;
","11251","<encryption><encoding><rsa><public-key-encryption>","3","2","2","2012-10-28 07:57:36","8211602","0","","-1","","2017-05-23 10:30:18","2011-11-21 07:24:20",""
"16070790","RSA Implementation in C#","I am trying to implement the RSA Algorithm in C#. The code below works when p and q are small, but not when trying to replicate RSA-100 or greater where p and q are very large.
For example when:
p = 61, q = 53, n = 3233, phi(n) = 3120, e = 17, d = 2753

Once decrypted, I get the correct original messsage. I got these values from the RSA Wikipedia page. The code also works for other small values of p and q.
However, when using RSA-100 or greater, I do not get back my original message. I have tried using different values for the exponent (e) and made sure it is coprime with phi(n) but I cannot get the correct result. Am I missing something simple/obvious? 
Thank you in advance for your help!
//p and q for RSA-100
//string p = ""37975227936943673922808872755445627854565536638199"";
//string q = ""40094690950920881030683735292761468389214899724061"";

string p = ""61"";
string q = ""53"";

//Convert string to BigInteger
BigInteger rsa_p = BigInteger.Parse(p);
BigInteger rsa_q = BigInteger.Parse(q);

//n = p * q
BigInteger rsa_n = BigInteger.Multiply(rsa_p, rsa_q);

//phi(n) = (p-1)*(q-1)
BigInteger rsa_fn = BigInteger.Multiply((rsa_p - 1), (rsa_q - 1));

BigInteger rsa_e = 17;

//Compute d
BigInteger rsa_d = BigInteger.ModPow(rsa_e, (rsa_fn - 1), rsa_fn);

//Encrypt the message, in this case 3007
//C = (3007^rsa_e) mod rsa_n
BigInteger C = BigInteger.ModPow(3007, rsa_e, rsa_n);

//Decrypt the message, M should equal 3007
//M = (3007^rsa_d) mod rsa_n
BigInteger M = BigInteger.ModPow(C, rsa_d, rsa_n);

","d=e^(phi(n)-1) mod phi(n) looks wrong to me. You either need d=e^(phi(phi(n))-1) mod phi(n), or you could use extended euclid.
","11024","<c#><encryption><rsa><biginteger><public-key-encryption>","2","3","2","2013-04-19 21:53:48","16071396","2","2","436641","","2013-04-18 04:43:59","2013-04-17 21:44:16",""
"16070790","RSA Implementation in C#","I am trying to implement the RSA Algorithm in C#. The code below works when p and q are small, but not when trying to replicate RSA-100 or greater where p and q are very large.
For example when:
p = 61, q = 53, n = 3233, phi(n) = 3120, e = 17, d = 2753

Once decrypted, I get the correct original messsage. I got these values from the RSA Wikipedia page. The code also works for other small values of p and q.
However, when using RSA-100 or greater, I do not get back my original message. I have tried using different values for the exponent (e) and made sure it is coprime with phi(n) but I cannot get the correct result. Am I missing something simple/obvious? 
Thank you in advance for your help!
//p and q for RSA-100
//string p = ""37975227936943673922808872755445627854565536638199"";
//string q = ""40094690950920881030683735292761468389214899724061"";

string p = ""61"";
string q = ""53"";

//Convert string to BigInteger
BigInteger rsa_p = BigInteger.Parse(p);
BigInteger rsa_q = BigInteger.Parse(q);

//n = p * q
BigInteger rsa_n = BigInteger.Multiply(rsa_p, rsa_q);

//phi(n) = (p-1)*(q-1)
BigInteger rsa_fn = BigInteger.Multiply((rsa_p - 1), (rsa_q - 1));

BigInteger rsa_e = 17;

//Compute d
BigInteger rsa_d = BigInteger.ModPow(rsa_e, (rsa_fn - 1), rsa_fn);

//Encrypt the message, in this case 3007
//C = (3007^rsa_e) mod rsa_n
BigInteger C = BigInteger.ModPow(3007, rsa_e, rsa_n);

//Decrypt the message, M should equal 3007
//M = (3007^rsa_d) mod rsa_n
BigInteger M = BigInteger.ModPow(C, rsa_d, rsa_n);

","I see that you already accepted the solution. However, I would like to point you to the article that shows a more complex example on RSA encryption in C#. Check this post (There is also source code available):
http://xmight.blogspot.com/2011/07/multithreaded-rsa-encryption-with-keys.html
","11024","<c#><encryption><rsa><biginteger><public-key-encryption>","2","2","2","2013-04-19 21:53:48","16071396","2","2","436641","","2013-04-18 04:43:59","2013-04-17 21:44:16",""
"17069827","Using an RSA Public key to decrypt a string that was encrypted using an RSA private key","This is a duplicate of an unanswered question here: Using an RSA Public Key to decrypt a string that was encrypted using RSA Private Key
You can see the author found a solution using some code from here:
http://www.codeproject.com/KB/security/PrivateEncryption.aspx
Using code from that link looks very promising.  The only thing missing is the padding.  I typically use PKCS1.5 padding which is the default for OpenSSL RSA.
I know the answer to this question is very close.  I know the only thing holding back decryption is the pkcs1.5 padding on the encrypted openssl ciphertext.
I was surprised to see how little information is out there on this subject because there are many situations where you would need a server to encrypt something, sign something, etc, and have a client application verify, decrypt, etc with the public key.
I also extensively tried using the RSACryptoServiceProvider to verify hash's resulting from the encryption using OpenSSL.  For example, I would do a private key encryption using a SHA256 hash of the plaintext, then try to do a RSACryptoServiceProvider verify on that signature, and it does not work.  I think the way MS does this is non standard and there are perhaps special customization at work with that.
So, the alternative is this question, which is simply taking private key encrypted ciphertext and using C# to decrypt it, thus, verifying it's authenticity.  Hashes can be incorporated to make a simple signature verification system for data objects signed by the server and verified on the client.
I've looked through the PKCS1 RFC's, OpenSSL rsa source code, and other projects, I cannot get a solid answer on how to account for PKCS1 padding when doing my RSA Decrypt.   I cannot locate where in the OpenSSL source code they handle the PKCS1 padding, otherwise, I might have an answer by now.
Also, this is my first question, I know it's a duplicate of an unanswered question, so, what to do?  I googled that too, and found nothing.
The other thing I don't understand is why my decrypt method doesn't work.  Since padding is removed after decryption, my decrypted data should resemble plaintext, and it's not even close.  So, I'm almost sure that pkcs1 padding means that other things are happening, specifically, to the ciphertext which means that the ciphertext must be preprocessed prior to decryption to remove padding elements.
Perhaps simply filtering the ciphertext to remove padding elements is the simplest solution here...
Here is my Decrypt method:
    public static byte[] PublicDecryption(this RSACryptoServiceProvider rsa, byte[] cipherData)
    {
        if (cipherData == null)
            throw new ArgumentNullException(""cipherData"");

        BigInteger numEncData = new BigInteger(cipherData);

        RSAParameters rsaParams = rsa.ExportParameters(false);
        BigInteger Exponent = GetBig(rsaParams.Exponent);
        BigInteger Modulus = GetBig(rsaParams.Modulus);

        BigInteger decData = BigInteger.ModPow(numEncData, Exponent, Modulus);

        byte[] data = decData.ToByteArray();
        byte[] result = new byte[data.Length - 1];
        Array.Copy(data, result, result.Length);
        result = RemovePadding(result);
        Array.Reverse(result);
        return result;
    }

    private static byte[] RemovePadding(byte[] data)
    {
        byte[] results = new byte[data.Length - 4];
        Array.Copy(data, results, results.Length);
        return results;
    }

","The problem isn't with the padding. In fact, removing padding values from decrypted ciphertext is actually very simple. The problem was with the software at this location:
You can see the author found a solution using some code from here: http://www.codeproject.com/KB/security/PrivateEncryption.aspx
And with Microsoft's implementation of System.Numeric which simply cannot handle larger integers...
To fix the issue, I looked at previous releases of code on the codeproject site and ended up with this PublicDecrypt method.
    public static byte[] PublicDecryption(this RSACryptoServiceProvider rsa, byte[] cipherData)
    {
        if (cipherData == null)
            throw new ArgumentNullException(""cipherData"");

        BigInteger numEncData = new BigInteger(cipherData);
        RSAParameters rsaParams = rsa.ExportParameters(false);
        BigInteger Exponent = new BigInteger(rsaParams.Exponent);
        BigInteger Modulus = new BigInteger(rsaParams.Modulus);

        BigInteger decData2 = numEncData.modPow(Exponent, Modulus);
        byte[] data = decData2.getBytes();
        bool first = false;
        List<byte> bl = new List<byte>();
        for (int i = 0; i < data.Length; ++i)
        {
            if (!first && data[i] == 0x00)
            {
                first = true;
            }
            else if (first)
            {
                if (data[i] == 0x00)
                {
                    return bl.ToArray();
                }
                bl.Add(data[i]);
            }
        }
        if (bl.Count > 0)
            return bl.ToArray();
        return new byte[0];
    }

That will perfectly decrypt ciphertext created by openssl using the rsautl utility, or the Perl Crypt::OpenSSL::RSA private_encrypt method.
The other big change was dropping the Microsoft BitInteger library which simply didn't work.  I ended up using the one mentioned in the Code Project article , and found here:
http://www.codeproject.com/Articles/2728/C-BigInteger-Class
The key here is to set the maxintsize in the library to a value which is larger based on how big of a key size you are using.  For 4096 bit, a value of 500 worked fine (approx length of the modulus).
Here is the calling method:
            var encmsg3 = ""JIA7qtOrbBthptILxnurAeiQM3JzSoi5WiPCpZrIIqURKfVQMN1BrondF9kyNzbjTs1DaEKEuMBVwKExZe22yCvXXpm8pwcEGc9EHcVK2MPqNo89tIF8LJcaDqBMwLvxdaa/QgebtpmOVN/TIWfuiV8KR+Wn07KwsgV+3SALbNgbOIR3RtCx3IiQ3tZzybJb08+ZKwJEOT011uwvvGmtJskQgq9PC8kr1RPXMgaP6xMX7PHFJ8ORhkuWOFfCh+R4NhY1cItVhnRewKpIC2qVlpzUYRAgKIKdCXuZDqUQdIponR29eTovvLb0DvKQCLTf9WI1SzUm6pKRn0vLsQL7L3UYHWl43ISrTpDdp+3oclhgRF3uITR4WCvoljephbGc6Gelk5z3Vi6lN0oQaazJ7zIen+a/Ts7ZX3KKlwPl4/lAFRjdjoqu7u4IAK7O7u1Jf2xDiGw18C/eGt8UHl09zU4qQf9/u+7gtJ+10z2NERlLSaCDjVqslwmmxu81pG2gCv8LfpR4JlPaFfBZMGfGBihyGryWhJwizUXXo8wgdoYbHRXe8/gL19qro0ea5pA9aAhDjTpX1Zzbwu2rUU7j6wtwQtUDJOGXXCw1VOHsx6WXeW196RkqG72ucVIaSAlx5TFJv8cnj6werEx1Ung5456gth3gj19zHc8E/Mwcpsk="";
            byte[] enc = Convert.FromBase64String(encmsg3);
            var dec = rsa2.PublicDecryption(enc);
            Debug.Print(""PLAINTEXT: "" + Encoding.UTF8.GetString(dec));

The only last thing someone would need to completely replicate this would be getting the private key into openssl format so that they could pass the private and public keys back and forth between openssl and C#.
I used openssl.net, and created an RSA instance, and set all the variables using bignumbers.  Here's the code for that:
        RSACryptoServiceProvider rsa = new RSACryptoServiceProvider();
        rsa.FromXmlString(Properties.Resources.RSAParameters);

        RSAParameters par = rsa.ExportParameters(true); // export the private key


        using (OpenSSL.Crypto.RSA rsaos = new OpenSSL.Crypto.RSA())
        using (BigNumber bnmod = BigNumber.FromArray(par.Modulus))
        using (BigNumber bnexp = BigNumber.FromArray(par.Exponent))
        using (BigNumber bnD = BigNumber.FromArray(par.D))
        using (BigNumber bnP = BigNumber.FromArray(par.P))
        using (BigNumber bnQ = BigNumber.FromArray(par.Q))
        using (BigNumber bnDmodP = BigNumber.FromArray(par.DP))
        using (BigNumber bnDmodQ = BigNumber.FromArray(par.DQ))
        using (BigNumber bnInverse = BigNumber.FromArray(par.InverseQ))
        {
            rsaos.PublicExponent = bnexp;
            rsaos.PublicModulus = bnmod;

            rsaos.IQmodP = bnInverse;
            rsaos.DmodP1 = bnDmodP;
            rsaos.DmodQ1 = bnDmodQ;
            rsaos.SecretPrimeFactorP = bnP;
            rsaos.SecretPrimeFactorQ = bnQ;
            rsaos.PrivateExponent = bnD;
            string privatekey = rsaos.PrivateKeyAsPEM;   
            string publickey = rsaos.PublicKeyAsPEM
        }

With that you can easily create an RSA key, export everything to OpenSSL, and encrypt/decrypt anything you want within reason. It is enough to handle private key encryption followed by public key decryption.
Cool.
","10969","<c#><openssl><rsa><public-key-encryption>","3","1","2","2016-12-01 15:30:33","","1","2","-1","","2017-05-23 12:02:11","2013-06-12 15:46:44",""
"17069827","Using an RSA Public key to decrypt a string that was encrypted using an RSA private key","This is a duplicate of an unanswered question here: Using an RSA Public Key to decrypt a string that was encrypted using RSA Private Key
You can see the author found a solution using some code from here:
http://www.codeproject.com/KB/security/PrivateEncryption.aspx
Using code from that link looks very promising.  The only thing missing is the padding.  I typically use PKCS1.5 padding which is the default for OpenSSL RSA.
I know the answer to this question is very close.  I know the only thing holding back decryption is the pkcs1.5 padding on the encrypted openssl ciphertext.
I was surprised to see how little information is out there on this subject because there are many situations where you would need a server to encrypt something, sign something, etc, and have a client application verify, decrypt, etc with the public key.
I also extensively tried using the RSACryptoServiceProvider to verify hash's resulting from the encryption using OpenSSL.  For example, I would do a private key encryption using a SHA256 hash of the plaintext, then try to do a RSACryptoServiceProvider verify on that signature, and it does not work.  I think the way MS does this is non standard and there are perhaps special customization at work with that.
So, the alternative is this question, which is simply taking private key encrypted ciphertext and using C# to decrypt it, thus, verifying it's authenticity.  Hashes can be incorporated to make a simple signature verification system for data objects signed by the server and verified on the client.
I've looked through the PKCS1 RFC's, OpenSSL rsa source code, and other projects, I cannot get a solid answer on how to account for PKCS1 padding when doing my RSA Decrypt.   I cannot locate where in the OpenSSL source code they handle the PKCS1 padding, otherwise, I might have an answer by now.
Also, this is my first question, I know it's a duplicate of an unanswered question, so, what to do?  I googled that too, and found nothing.
The other thing I don't understand is why my decrypt method doesn't work.  Since padding is removed after decryption, my decrypted data should resemble plaintext, and it's not even close.  So, I'm almost sure that pkcs1 padding means that other things are happening, specifically, to the ciphertext which means that the ciphertext must be preprocessed prior to decryption to remove padding elements.
Perhaps simply filtering the ciphertext to remove padding elements is the simplest solution here...
Here is my Decrypt method:
    public static byte[] PublicDecryption(this RSACryptoServiceProvider rsa, byte[] cipherData)
    {
        if (cipherData == null)
            throw new ArgumentNullException(""cipherData"");

        BigInteger numEncData = new BigInteger(cipherData);

        RSAParameters rsaParams = rsa.ExportParameters(false);
        BigInteger Exponent = GetBig(rsaParams.Exponent);
        BigInteger Modulus = GetBig(rsaParams.Modulus);

        BigInteger decData = BigInteger.ModPow(numEncData, Exponent, Modulus);

        byte[] data = decData.ToByteArray();
        byte[] result = new byte[data.Length - 1];
        Array.Copy(data, result, result.Length);
        result = RemovePadding(result);
        Array.Reverse(result);
        return result;
    }

    private static byte[] RemovePadding(byte[] data)
    {
        byte[] results = new byte[data.Length - 4];
        Array.Copy(data, results, results.Length);
        return results;
    }

","There is a problem in the line in the PublicDecryption function:
BigInteger numEncData = new BigInteger(cipherData);
it shall be:
BigInteger numEncData = GetBig(cipherData);
This line shall also be removed:
Array.Reverse(result);
You may encounter some padding problem, but if you can get the data right, it shall be easy to correct that.
","10969","<c#><openssl><rsa><public-key-encryption>","3","-1","2","2016-12-01 15:30:33","","1","2","-1","","2017-05-23 12:02:11","2013-06-12 15:46:44",""
"28430315","How to use apache vfs2 for sftp with public-private-key and without password","Currently I am using apache vfs2 to download files from a sftp. For authentication I use user-name and password.
Is there a way to use vfs2 only with public-private-keys and without a password?
I think I have use this function,but how? Set it only to ""yes""?
SftpFileSystemConfigBuilder.getInstance().setStrictHostKeyChecking(options, ""no"");

This is my current code (snippet):
private boolean downloadFile(){

    StandardFileSystemManager sysManager = new StandardFileSystemManager();

    //download der Datei
    try {
        sysManager.init();

        FileObject localFile = sysManager.resolveFile(localFilePath);

        FileObject remoteFile = sysManager.resolveFile(createConnectionString(host, user, password, fileName, port),createDefaultOptions());

        //Selectors.SELECT_FILES --> A FileSelector that selects only the base file/folder.
        localFile.copyFrom(remoteFile, Selectors.SELECT_FILES);


    } catch (Exception e) {
        logger.error(""Downloading file failed: "" + e.toString());
        return false;
    }finally{
        sysManager.close();
    }
    return true;
}

and
private FileSystemOptions createDefaultOptions() throws FileSystemException{

    //create options for sftp
    FileSystemOptions options = new FileSystemOptions();
    //ssh key
    SftpFileSystemConfigBuilder.getInstance().setStrictHostKeyChecking(options, ""no"");
    //set root directory to user home
    SftpFileSystemConfigBuilder.getInstance().setUserDirIsRoot(options, true);
    //timeout
    SftpFileSystemConfigBuilder.getInstance().setTimeout(options, timeout);

    return options;
}

","Taking your code and wrapping it into a runnable example.  Notice the IdentityInfo implementation.  This can work with a key-with-passphrase by changing the obvious lines.
$ javac -cp 'jsch-0.1.51.jar;commons-vfs2-2.0.jar' SftpGet.java
$ java -cp 'jsch-0.1.51.jar;commons-vfs2-2.0.jar;commons-logging-1.1.1.jar;.' SftpGet

with
import java.io.File;

import com.jcraft.jsch.UserInfo;

import org.apache.commons.vfs2.FileObject;
import org.apache.commons.vfs2.FileSystemException;
import org.apache.commons.vfs2.FileSystemManager;
import org.apache.commons.vfs2.FileSystemOptions;
import org.apache.commons.vfs2.Selectors;
import org.apache.commons.vfs2.impl.StandardFileSystemManager;
import org.apache.commons.vfs2.provider.sftp.SftpFileSystemConfigBuilder;
import org.apache.commons.vfs2.provider.sftp.IdentityInfo;


    public class SftpGet {

        public static void main(String[] args) {
            downloadFile();
        }


        private static boolean downloadFile(){

            String host = ""HOSTNAMEHERE"";
            String user = ""USERNAMEHERE"";
            String password = """";
            String fileName = ""/lines.txt"";
            String localFilePath = ""c:/cygwin64/home/woddle/wrote_lines.txt"";

            // without passphrase
            String keyPath = ""c:/cygwin64/home/woddle/.ssh/id_dsa_nopass"";
            String passphrase = null;

            // with passphrase
            // String keyPath = ""c:/cygwin64/home/woddle/.ssh/id_dsa_withpass"";
            // String passphrase = ""super-secrets"";

            StandardFileSystemManager sysManager = new StandardFileSystemManager();

            //download der Datei
            try {
                sysManager.init();

                FileObject localFile = sysManager.resolveFile(localFilePath);

                FileObject remoteFile = sysManager.resolveFile(createConnectionString(host, user, password, keyPath, passphrase, fileName), createDefaultOptions(keyPath, passphrase));

                //Selectors.SELECT_FILES --> A FileSelector that selects only the base file/folder.
                localFile.copyFrom(remoteFile, Selectors.SELECT_FILES);


            } catch (Exception e) {
                System.out.println(""Downloading file failed: "" + e.toString());
                return false;
            }finally{
                sysManager.close();
            }
            return true;
        }


        public static String createConnectionString(String hostName, String username, String password, String keyPath, String passphrase, String remoteFilePath) {

            if (keyPath != null) {
                return ""sftp://"" + username + ""@"" + hostName + ""/"" + remoteFilePath;
            } else {
                return ""sftp://"" + username + "":"" + password + ""@"" + hostName + ""/"" + remoteFilePath;
            }
        }



        private static FileSystemOptions createDefaultOptions(final String keyPath, final String passphrase) throws FileSystemException{

            //create options for sftp
            FileSystemOptions options = new FileSystemOptions();
            //ssh key
            SftpFileSystemConfigBuilder.getInstance().setStrictHostKeyChecking(options, ""no"");
            //set root directory to user home
            SftpFileSystemConfigBuilder.getInstance().setUserDirIsRoot(options, true);
            //timeout
            SftpFileSystemConfigBuilder.getInstance().setTimeout(options, 10000);

            if (keyPath != null) {
                IdentityInfo identityInfo = null;
                if(passPhrase!=null){
                    identityInfo = new IdentityInfo(new File(keyPath), passPhrase.getBytes());
                }else{
                    identityInfo =  new IdentityInfo(new File(keyPath));
                }
          SftpFileSystemConfigBuilder.getInstance().setIdentityInfo(options, identityInfo);
            }


            return options;
        }


    }

","10878","<java><sftp><public-key-encryption><apache-commons-vfs>","5","8","1","2017-11-14 15:49:59","28579926","1","5","563945","","2015-02-11 12:06:45","2015-02-10 11:17:27",""
"9893080","PyCrypto: Decrypt only with public key in file (no private+public key)","Hello everyone.
I am trying to play a bit with RSA public and private keys and encryption/decryption with PyCrypto and I have encountered and issue that seems kind of strange to me (it probably makes a lot of sense the way it's working now, but I don't know much about RSA asymmetric encryption and that's why it's puzzling me). It is the inability I have encountered to decrypt something having only the public key.
Here's the thing: I have a server and a client. I want the server to ""recognize"" and register the client and show it in a list of ""known devices"". The client will have the public key of the server and the server will have the public key of the client, so when the client communicates with the server, it will encrypt its data with his client's private key and with the server's public key. By doing this, only the proper server will be able to open the data (with its private key) and will be able to verify that the sender is actually the client that claims to be... well... or at least, that's what I think, because I'm pretty newbie in this asymmetric encryption. The idea is that when one of those clients wakes up, it will send its public key (encrypted with the server's public key, of course, but that's probably not relevant at this point... yet) saying ""Hey, I'm a new client and this is my public key. Register that key with my UUID"" and the server will obey, associating that public key with the client's UUID and use that key to decrypt data coming from that client. I just want to transmit the client's public key, keeping its private key secret, secret, secret (it's private, right?)
I am doing some tests with openssl and very simple Python scripts that use PyCrypto (actually, not even in a server/client architecture or anything... just trying to encrypt something with a private key and decrypt it with the public key)
First of all, I have created a public/private key set with:
openssl genrsa -out ~/myTestKey.pem -passout pass:""f00bar"" -des3 2048

Ok, first thing that puzzles me a bit... It generates only one file, with both the private and the public keys... Well... O'right... whatever. I can extract the public key with:
openssl rsa -pubout -in ~/myTestKey.pem -passin pass:""f00bar"" -out ~/myTestKey.pub

So I thought I had my couple of private (private+public, actually) and public keys in ~/myTestKey.pem and ~/myTestKey.pub respectively. Well... apparently I'm doing something wrong, because PyCrypto doesn't like this assembly. And I don't know why.
I have two very simple test scripts, ""encryptor.py"" and ""decryptor.py"". The ""encryptor.py"" should encrypt something with the private key, and ""decryptor.py"", decrypt it with the public key. I know... I'm a parangon of originality...
So, I encrypt the string ""Loren ipsum"" with my ""encryptor.py"" (with private key):
----------- encryptor.py ----------------
#!/usr/bin/python

from Crypto.PublicKey import RSA

def encrypt(message):
    externKey=""/home/borrajax/myTestKey.pem""
    privatekey = open(externKey, ""r"")
    encryptor = RSA.importKey(privatekey, passphrase=""f00bar"")
    encriptedData=encryptor.encrypt(message, 0)
    file = open(""/tmp/cryptThingy.txt"", ""wb"")
    file.write(encriptedData[0])
    file.close()

if __name__ == ""__main__"":
    encryptedThingy=encrypt(""Loren ipsum"")


And it works fine. Well... I suppose so, because in the file ""/tmp/cryptThingy.txt"" I get a lot of gibberish. It looks really, really encrypted to me.
But when I try to decrypt it using just the file that contains just the public key...
----------- decryptor.py ---------------
#!/usr/bin/python

from Crypto.PublicKey import RSA

def decrypt():
    externKey=""/home/borrajax/myTestKey.pub""
    publickey = open(externKey, ""r"")
    decryptor = RSA.importKey(publickey, passphrase=""f00bar"")
    retval=None

    file = open(""/tmp/cryptThingy.txt"", ""rb"")
    retval = decryptor.decrypt(file.read())
    file.close()
    return retval


if __name__ == ""__main__"":
    decryptedThingy=decrypt()   
    print ""Decrypted: %s"" % decryptedThingy


... PyCrypto yells at me with a:
  File ""/usr/local/lib/python2.7/dist-packages/pycrypto-2.5-py2.7-linux-i686.egg/Crypto/PublicKey/RSA.py"", line 107, in _decrypt
    mp = self.key._decrypt(cp)
TypeError: Private key not available in this object

Yeah, of course it's not available! I extracted the public key! It took me 2 hours finding how to do it properly!! 
What am I missing? As I said, I'm pretty newbie in this public/private asymmetric key encryption so I might have a core ""conceptual error""... Any hint will be appreciated.
¡Thank you in advance!
","You have it the wrong way round, you encrypt with the public key, and decrypt with the private key.

The publicly available encrypting-key is widely distributed, while the private decrypting-key is known only to the recipient. Messages are encrypted with the recipient's public key and can be decrypted only with the corresponding private key.
  Source

The idea is that you give the sending side the public key (which anyone can have, so you can distribute it in the open) then you encrypt the data with it, then decrypt it on your end with your private key (which only you have). This way the data stays secure.
You can encrypt something with the private key as the private key contains the information required to make the public key, but it would be unusual to do so, as normally the person encrypting the data does not have the private key.
","10197","<python><public-key-encryption><encryption><pycrypto>","3","2","1","2012-03-27 15:59:02","9893231","1","","","","","2012-03-27 15:51:14",""
"13990181","RSA 2048 Encryption Decryption - Exception","I am trying to encrypt and decrypt the data with RSA 2048.
We have one public key and private key and will be using same throughout.
but the problem is, when I decrypt, I am getting javax.crypto.BadPaddingException: Data must start with zero
File file = new File(""C:\\temp-ldi\\pubkey.txt"");
FileWriter writer = new FileWriter(file);
file.createNewFile();
encryptedText = RSACrypto.encrypt(""PLAIN TEXT""); //no argument of pub-key, generate key pair
writer.write(new BASE64Encoder().encode(RSACrypto.pubKeyToBytes(RSACrypto.publicKey)));
writer.close();
file = new File(""C:\\temp-ldi\\privkey.txt"");
writer = new FileWriter(file);
file.createNewFile();
writer.write(new BASE64Encoder().encode(RSACrypto.privKeyToBytes(RSACrypto.privateKey)));
writer.close();

then I am using below code to decrypt the data 
File privfile = new File(""C:\\temp-ldi\\privkey.txt"");
File pubfile = new File(""C:\\temp-ldi\\pubkey.txt"");
FileReader reader = new FileReader(pubfile);
// file.createNewFile();
BufferedReader br = new BufferedReader(reader);
StringBuilder sb = new StringBuilder();
String s;
while ((s = br.readLine()) != null) {
    sb.append(s);
}
br.close();
reader.close();
this.encryptedText = RSACrypto.encrypt(""PLAIN TEXT"", sb.toString());
reader = new FileReader(privfile);
br = new BufferedReader(reader);
sb = new StringBuilder();
while ((s = br.readLine()) != null) {
    sb.append(s);
}
br.close();
reader.close();
System.out.println(RSACrypto.decrypt(this.encryptedText, sb.toString()));

all the encryption/decryption string will return in Base64Encoder/Base64Decoder format.
How do I pass the private key from file/simple string so that the key is not modified.
Update
RSACrypto class : http://sebsauvage.net/paste/?83517f2b3db94d24#Sdu12/vXPuxa5AxO95FPgKSF6N40R2DzD6lwQkvroyE=
","OK, problem in RSACrypto. When you encrypt file, it creates every time new keypair (in encrypt). Just remove new keypair generation from encrypt, call newKeyPair direcly, when you need it. 
And that static variables does no good for multi-thread environment. 
I'll suggest to throw RSACrypto class, or rewrite it at least. I don't know why you so afraid of using byte[] type and why you need everything be BASE64 encoded. Code will a lot simple without additional encoding/decoding.
Here is working example (without RSACrypto), you can use it as template:
    File file = new File(""C:\\temp-ldi\\pubkey.txt"");
    FileWriter writer = new FileWriter(file);
    file.createNewFile();
    KeyPairGenerator generator = KeyPairGenerator.getInstance(""RSA"");
    generator.initialize(2048, new SecureRandom());
    KeyPair keyPayr = generator.generateKeyPair();
    writer.write(new BASE64Encoder().encode(keyPayr.getPublic().getEncoded()));
    writer.flush();
    writer.close();
    file = new File(""C:\\temp-ldi\\privkey.txt"");
    writer = new FileWriter(file);
    file.createNewFile();
    writer.write(new BASE64Encoder().encode(keyPayr.getPrivate().getEncoded()));
    writer.flush();
    writer.close();


    File privfile = new File(""C:\\temp-ldi\\privkey.txt"");
    File pubfile = new File(""C:\\temp-ldi\\pubkey.txt"");
    FileReader reader = new FileReader(pubfile);

    BufferedReader br = new BufferedReader(reader);
    StringBuilder sb = new StringBuilder();
    String s;
    while ((s = br.readLine()) != null) {
        sb.append(s);
    }
    br.close();
    reader.close();
    PublicKey publicKey = KeyFactory.getInstance(""RSA"").generatePublic(new X509EncodedKeySpec(new BASE64Decoder().decodeBuffer(sb.toString())));
    Cipher cipher = Cipher.getInstance(""RSA/ECB/PKCS1Padding"");
    cipher.init(Cipher.ENCRYPT_MODE, publicKey);
    String encryptedText = new BASE64Encoder().encode(cipher.doFinal(""PLAIN TEXT"".getBytes(""UTF-8"")));
    System.out.println(""encrypted: "" + encryptedText);
    reader = new FileReader(privfile);
    br = new BufferedReader(reader);
    sb = new StringBuilder();
    while ((s = br.readLine()) != null) {
        sb.append(s);
    }
    br.close();
    reader.close();
    PrivateKey privateKey =  KeyFactory.getInstance(""RSA"").generatePrivate(new PKCS8EncodedKeySpec(new BASE64Decoder().decodeBuffer(sb.toString())));
    cipher.init(Cipher.DECRYPT_MODE, privateKey);
    System.out.println( new String(cipher.doFinal (new BASE64Decoder().decodeBuffer(encryptedText))));

","10067","<java><encryption><rsa><public-key-encryption><private-key>","3","3","1","2012-12-21 14:01:08","13991540","4","4","1503535","","2012-12-21 13:41:27","2012-12-21 12:26:10",""
"8589814","Encrypt and decrypt a string of text with RSA and DES3 key","I am using the Linux command line, I have created a Private Key using the following command:
openssl genrsa -des3 -out private.pem 2048

I have extracted the public key from the private key like so:
openssl rsa -in private.pem -out public.pem -outform PEM -pubout

I want to use the public key to encrypt a string of text, lets say ""foo bar"", and then decrypt this string again.
How do I go about this?
Thanks
","I think you want
openssl rsautl -encrypt -inkey public.pem -pubin -in unencrypted_file.txt -out encrypted_file.ssl

See more at devco.
","9933","<linux><public-key-encryption>","11","10","1","2018-02-23 11:02:40","8590464","0","1","608639","","2018-02-23 11:02:40","2011-12-21 12:26:55",""
"3491481","Encrypting large files using a public key","I need to encrypt a 100KB file using a public key. I've been reading some posts claiming that it is not practical to directly encrypt large files using a public key, and that the preferred method is to encrypt the file using a symmetric key and then encrypt this symmetric key using the public key.
It seems that a naive solution would be to break the large file to pieces and encrypt each one of them using the same public key. My question is whether and why this solution is wrong?
","If I understand you right, you want to encrypt the file with someone else's public key, to be decrypted by their private key?
The advantage of using symmetric encryption and only using public key cryptography for the (symmetric) key is performance: symmetric cryptography is computationally much less resource-intensive (trade-off: you have to keep the key secret -- and that's what the second, asymmetric step is for).
Breaking up the file adds management overhead (how can you be sure how many chunks there will be? that you have transmitted them all?) and doesn't add any security. On the contrary.
","9747","<public-key-encryption><encryption-asymmetric>","10","2","5","2015-09-30 16:07:57","","0","2","5324723","","2015-09-30 15:44:01","2010-08-16 08:02:00",""
"3491481","Encrypting large files using a public key","I need to encrypt a 100KB file using a public key. I've been reading some posts claiming that it is not practical to directly encrypt large files using a public key, and that the preferred method is to encrypt the file using a symmetric key and then encrypt this symmetric key using the public key.
It seems that a naive solution would be to break the large file to pieces and encrypt each one of them using the same public key. My question is whether and why this solution is wrong?
","The hybrid approach you mention (generate a random symmetric key, use this to encrypt the data, and encrypt only the key asymmetrically) has a massive performance advantage.
You could ""break the large file to pieces and encrypt each one of them using the same public key"" as well, there is nothing wrong with that, but it is much slower.
","9747","<public-key-encryption><encryption-asymmetric>","10","4","5","2015-09-30 16:07:57","","0","2","5324723","","2015-09-30 15:44:01","2010-08-16 08:02:00",""
"3491481","Encrypting large files using a public key","I need to encrypt a 100KB file using a public key. I've been reading some posts claiming that it is not practical to directly encrypt large files using a public key, and that the preferred method is to encrypt the file using a symmetric key and then encrypt this symmetric key using the public key.
It seems that a naive solution would be to break the large file to pieces and encrypt each one of them using the same public key. My question is whether and why this solution is wrong?
","Splitting file into smaller pieces and then encrypting them with some asymmetric cipher has nothing to do with the runtime cost of the encryption process. Best practice is encrypting the data with a good symmetric cipher using a relatively strong key and encrypting the secret key you used in symmetric encryption with an asymmetric cipher(using your public key).
","9747","<public-key-encryption><encryption-asymmetric>","10","1","5","2015-09-30 16:07:57","","0","2","5324723","","2015-09-30 15:44:01","2010-08-16 08:02:00",""
"3491481","Encrypting large files using a public key","I need to encrypt a 100KB file using a public key. I've been reading some posts claiming that it is not practical to directly encrypt large files using a public key, and that the preferred method is to encrypt the file using a symmetric key and then encrypt this symmetric key using the public key.
It seems that a naive solution would be to break the large file to pieces and encrypt each one of them using the same public key. My question is whether and why this solution is wrong?
","Asymmetric cryptography is too slow, the most used approach is to encrypt random symmetric key with asymmetric, and encrypt your data with that symmetric key.
And, as well, the best way is to use well-known protocol/standard for that purpose (OpenPGP for instance).
","9747","<public-key-encryption><encryption-asymmetric>","10","1","5","2015-09-30 16:07:57","","0","2","5324723","","2015-09-30 15:44:01","2010-08-16 08:02:00",""
"3491481","Encrypting large files using a public key","I need to encrypt a 100KB file using a public key. I've been reading some posts claiming that it is not practical to directly encrypt large files using a public key, and that the preferred method is to encrypt the file using a symmetric key and then encrypt this symmetric key using the public key.
It seems that a naive solution would be to break the large file to pieces and encrypt each one of them using the same public key. My question is whether and why this solution is wrong?
","Aside from the speed-boost of symmetric key encryption, there's another possible benefit: By first encrypting the message with a random securely-generated symmetric key, you can then encrypt the symmetric key for multiple recipients, once in each recipient's own public asymmetric key, without having to re-encrypt the entire message.
","9747","<public-key-encryption><encryption-asymmetric>","10","1","5","2015-09-30 16:07:57","","0","2","5324723","","2015-09-30 15:44:01","2010-08-16 08:02:00",""
"7414044","Can PHP OpenSSL generate private/public key/certificate pairs?","I wonder if PHP's OpenSSL extension can be used to generate private/public key/certificate pairs?
","Sure, use openssl_pkey_new:
$privateKey = openssl_pkey_new(array('private_key_bits' => 2048));
$details = openssl_pkey_get_details($privateKey);
$publicKey = $details['key'];

You can export the keys with openssl_pkey_export or openssl_pkey_export_to_file.
","9530","<php><openssl><public-key-encryption>","5","11","2","2019-08-05 00:17:31","7414108","0","1","","","","2011-09-14 09:23:44",""
"7414044","Can PHP OpenSSL generate private/public key/certificate pairs?","I wonder if PHP's OpenSSL extension can be used to generate private/public key/certificate pairs?
","I really appreciate the answer from phihag but was still struggling. 
Ultimately, this helped:
$privateKeyResource = openssl_pkey_new([
    'private_key_bits' => 2048,
    'private_key_type' => OPENSSL_KEYTYPE_RSA
]);

// Save the private key to a file. Never share this file with anyone. See https://serverfault.com/questions/9708/what-is-a-pem-file-and-how-does-it-differ-from-other-openssl-generated-key-file
openssl_pkey_export_to_file($privateKeyResource, '/path/to/myNewPrivateKey.key');

// Generate the public key for the private key
$privateKeyDetailsArray = openssl_pkey_get_details($privateKeyResource);

// Save the public key to another file. Make this file available to anyone (especially anyone who wants to send you encrypted data).
file_put_contents('/path/to/myNewPublicKey.key', $privateKeyDetailsArray['key']);

// Free the key from memory.
openssl_free_key($privateKeyResource);

See docs:

https://www.php.net/manual/en/function.openssl-pkey-new.php
https://www.php.net/manual/en/function.openssl-pkey-get-details.php

","9530","<php><openssl><public-key-encryption>","5","1","2","2019-08-05 00:17:31","7414108","0","1","","","","2011-09-14 09:23:44",""
"20749112","Which public key (SP or remote IDP) to use while signing SAML request","I am trying to configure my application (SP) to work with remote IDP. The IDP provided me with a certificate to configure with SP. For SAML request, do I use SP's public key or IDP's? 
Also, where can I find good resources to study SAML in detail (apart from the oasis formal documents). The tutorials that I find are very simplistic (i.e. they just describe that SP goes to IDP and then it is redirected back but do not go into detail on SAML messages). The oasis documents are confusing.
Thanks for any answers
","I'm not 100% sure, but it looks from these two sources that you should sign with your (SP's) private key and share the associated public key with the IdP so they can verify the signature.

How to created signed AuthNRequest?
http://docs.oasis-open.org/security/saml/v2.0/saml-metadata-2.0-os.pdf (p.25)

","9383","<public-key-encryption><saml-2.0><signing>","6","5","2","2014-02-11 07:46:12","20773787","3","3","1889167","","2014-02-11 07:46:12","2013-12-23 18:25:55",""
"20749112","Which public key (SP or remote IDP) to use while signing SAML request","I am trying to configure my application (SP) to work with remote IDP. The IDP provided me with a certificate to configure with SP. For SAML request, do I use SP's public key or IDP's? 
Also, where can I find good resources to study SAML in detail (apart from the oasis formal documents). The tutorials that I find are very simplistic (i.e. they just describe that SP goes to IDP and then it is redirected back but do not go into detail on SAML messages). The oasis documents are confusing.
Thanks for any answers
","Signing is done using private keys - not public keys. 
So, if the SAML request needs to be signed, SP must use its private key for it. Also, a certificate containing SP's public key should be given to the IdP to validate the signature.
The reason for IdP providing you its certificate is for SP to validate the signed SAML responses sent by the IdP.  
","9383","<public-key-encryption><saml-2.0><signing>","6","7","2","2014-02-11 07:46:12","20773787","3","3","1889167","","2014-02-11 07:46:12","2013-12-23 18:25:55",""
"6277990","How to encrypt long strings in PHP?","I'm using PHP's openssl_public_encrypt() to encrypt data using RSA. But it won't encrypt data larger than a certain size.
How can I get it to encrypt data of an arbitrary length?
","The php.net page has an excellent hint for this problem (as usual) http://www.php.net/manual/en/function.openssl-public-encrypt.php#95307
","9303","<php><rsa><public-key-encryption>","11","4","3","2019-02-12 12:05:06","6278071","0","2","","","","2011-06-08 11:25:07",""
"6277990","How to encrypt long strings in PHP?","I'm using PHP's openssl_public_encrypt() to encrypt data using RSA. But it won't encrypt data larger than a certain size.
How can I get it to encrypt data of an arbitrary length?
","RSA, using PKCS1 padding, only lets you do do strings that are the length the key (in bytes) - 11. This isn't an OpenSSL or PHP restriction but rather an RSA restriction.
If you want to do longer strings using the openssl_* set of functions use openssl_seal and openssl_open. openssl_seal generates a random string, encrypts it with RSA and then encrypts the data you're actually trying to encrypt with RC4 using the previously mentioned random string as the key.
phpseclib, a pure PHP RSA implementation, takes a different approach. If you insist on encrypting a string larger than the RSA key it'll split that string into chunks that are the max size RSA can handle and then concatenate the results.
The phpseclib OpenSSL Interoperability page discusses how you can use phpseclib to do the same thing as openssl_seal / openssl_open.
Hope that helps!
","9303","<php><rsa><public-key-encryption>","11","6","3","2019-02-12 12:05:06","6278071","0","2","","","","2011-06-08 11:25:07",""
"6277990","How to encrypt long strings in PHP?","I'm using PHP's openssl_public_encrypt() to encrypt data using RSA. But it won't encrypt data larger than a certain size.
How can I get it to encrypt data of an arbitrary length?
","You can either:

Encrypt the data using a symmetric encryption method, using a random key that is then encrypted using the public key of an asymmetric encryption method (The random key, encrypted with the public key, is necessary to the user who decrypts the data.)
Encrypt the data using an asymmetric encryption method, after splitting the data in chunks of the size handled by the asymmetric encryption method

The first implements a hybrid cryptosystem. Using PHP and the openSSL extension you can use openssl_seal(), which (since PHP 5.3.0) allows to set the cipher method (by default, RC4) and (since PHP 7.0.0) the initialization vector. If you aren't using PHP 7.x, or you want to write code compatible with PHP 5.3.3 and higher versions, and you want to be able the initialization vector, you could 
use openssl_random_pseudo_bytes() to generate the random key, openssl_encrypt() to encrypt the data, and openssl_public_encrypt() to encrypt the random key.
I would not use openssl_seal() with a PHP version that doesn't allow me to set the cipher method (but then, I would not use that PHP version because it's not supported anymore), and I would not use RC4 as cipher method, on PHP versions that allows me to select the cipher method.
","9303","<php><rsa><public-key-encryption>","11","0","3","2019-02-12 12:05:06","6278071","0","2","","","","2011-06-08 11:25:07",""
"16500499","nodeJS ReferenceError : navigator is not defined.","Hello I'm trying to make some Javascript files working on nodeJS everything is well set however here is the error I get :
C:\>node myServer.js

C:\myFunctionsCallTest.js:750
if( (j_lm && (navigator.appName == ""Microsoft Internet Explorer"")) || navigato
              ^
ReferenceError: navigator is not defined
    at Object.<anonymous> (C:\myFunctionsCallTest.js:750:15)
    at Module._compile (module.js:456:26)
    at Object.Module._extensions..js (module.js:474:10)
    at Module.load (module.js:356:32)
    at Function.Module._load (module.js:312:12)
    at Module.require (module.js:364:17)
    at require (module.js:380:17)
    at Object.<anonymous> (C:\myServer.js:1:79)
    at Module._compile (module.js:456:26)
    at Object.Module._extensions..js (module.js:474:10)

C:\>

The files I'm using are :
myServer.js

var my_module = require(""./myFunctionsCallTest.js"");
console.log(""RSA encrypted message :""+ my_module.Encrypt(""myKey"",""myMessage""));

myFunctionsCallTest.js //This file contains some call of prototypes like : 
.....................................
RSAKey.prototype.setPublic = RSASetPublic;
RSAKey.prototype._short_encrypt = RSAEncrypt;
RSAKey.prototype.encrypt = RSAEncryptLong;
RSAKey.prototype.encrypt_b64 = RSAEncryptB64;
..............................................

Any idea from where this issue could come?
Thanks.
","It looks like you're using Tom Wu's BitInteger and RSA JavaScript library. This library was designed for use in the browser and doesn't work quite right in Node.js.
Luckily, someone has already gone through the work of packaging this library in a Node.js compatible format; it's on GitHub at https://github.com/eschnou/node-bignumber and available via npm as the package ""bignumber"", and comes with a nice example.
","9296","<node.js><rsa><public-key-encryption>","2","4","1","2013-05-11 19:52:34","","0","","","","","2013-05-11 18:38:03",""
"40094108","I have a RSA public key exponent and modulus. How can I encrypt a string using Python?","Given a public key exponent and modulus like the following, how can I encrypt a string and send it to a server as text?
publicKey: 10001,
modulus: 'd0eeaf178015d0418170055351711be1e4ed1dbab956603ac04a6e7a0dca1179cf33f90294782e9db4dc24a2b1d1f2717c357f32373fb3d9fd7dce91c40b6602'

I am trying to replicate the functionality provided by the javascript rsa library http://www.ohdave.com/rsa/ in python. In javascript, it looks something like this:
setMaxDigits(67); //sets a max digits for bigInt
var key = new RSAKeyPair('10001', '10001', 'd0eeaf178015d0418170055351711be1e4ed1dbab956603ac04a6e7a0dca1179cf33f90294782e9db4dc24a2b1d1f2717c357f32373fb3d9fd7dce91c40b6602');
var encrypted = encryptedString(key, 'message');
console.log(encrypted); //prints '88d58fec172269e5186592dd20446c594dbeb82c01edad41f841666500c9a530e24a282c6527ec66f4c826719f12478c6535bdc2baef86e4ff26906a26398413'

I imagine there is a way to do this with the PyCrypto library but I couldn't find any examples that use the exponent and modulus. 
Edit 1:
Using the solution below, it appears to be working. Since I'm using python 2.7 I modified it to look like this: 
from Crypto.PublicKey.RSA import construct
from binascii import unhexlify
from codecs import encode

e = long(10001)
n = int(encode('d0eeaf17801.....5d041817005535171', 'hex'), 16)

key = construct((n, e))
a = key.encrypt('hello', None)
print(a)

('.X?\xdc\x81\xfb\x9b(\x0b\xa1\xc6\xf7\xc0\xa3\xd7}U{Q?\xa6VR\xbdJ\xe9\xc5\x1f\x
f9i+\xb2\xf7\xcc\x8c&_\x9bD\x00\x86}V[z&3\\]_\xde\xed\xdc~\xf2\xe1\xa9^\x96\xc3\
xd5R\xc2*\xcb\xd9\x1d\x88$\x98\xb0\x07\xfaG+>G#\xf7cG\xd8\xa6\xf3y_ 4\x17\x0b\x0
3z\x0cvk7\xf7\xebPyo-\xa1\x81\xf5\x81\xec\x17\x9e\xfe3j\x98\xf2\xd5\x80\x1d\xdd\
xaf\xa4\xc8I\xeeB\xdaP\x85\xa7',)

Now I want to convert this encrypted text to a string to send via a post request. But this doesn't seem to work:
a.decode('utf-8')

","With PyCrypto, you can use the Crypto.PublicKey.RSA.construct() function. You'll need to convert the modulus to an int. Here's an example (assuming big-endian):
from Crypto.PublicKey.RSA import construct

e = int('10001', 16)
n = int('d0eeaf...0b6602', 16)  #snipped for brevity
pubkey = construct((n, e))

Then you can do the usual things (like encrypt) with the key:
pubkey.encrypt(b'abcde', None)

Edit: Note that your public exponent, 10001, is mostly likely hexadecimal. This would correspond to the common public exponent 65537. I've updated the above to reflect that.
","9164","<python><public-key-encryption>","3","7","1","2016-10-18 17:12:28","40095575","0","1","1910490","","2016-10-18 17:12:28","2016-10-17 19:23:25",""
"17076475","PHP OpenSSL Public Key Encryption With String Public Key","I have a public key
-----BEGIN PUBLIC KEY-----
MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAwKMDEDjbP5v/9kcvpQKf
IG3nU5Yid/tUNIeXBSDlxqhTEOKs8iQHXk0T17C4g7KHmrT2hxUomaAa2wwbfL+Z
4ppqvZZ4cu7CO6jaA0HyoBCU96siSuE0mPt8kU/PRA9+nAwu9lu9oYZUiVVJ3D4f
o2bc+jWWL4GGY+PdSlz81ZW5cW/LOmNs9D0jJIxbwNocHxGgJ+xTZ3JKp6AO4MvL
zXyipXu562N8wVc7UIgYYnvr63zFU8vzRL180X5x5MiJbjTYbfLH3z7qINPMZZLv
A5vzJ0HX3J8rG96tmFuUzopCnvf+WVLvaS2T5uMxieK9dfA32CFQp4i3cj39c2b7
NwIDAQAB
-----END PUBLIC KEY-----

stored as a base64 encoded string (in MySQL, set as $row['public_key'])
LS0tLS1CRUdJTiBQVUJMSUMgS0VZLS0tLS0KTUlJQklqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FROEFNSUlCQ2dLQ0FRRUF3S01ERURqYlA1di85a2N2cFFLZgpJRzNuVTVZaWQvdFVOSWVYQlNEbHhxaFRFT0tzOGlRSFhrMFQxN0M0ZzdLSG1yVDJoeFVvbWFBYTJ3d2JmTCtaCjRwcHF2Wlo0Y3U3Q082amFBMEh5b0JDVTk2c2lTdUUwbVB0OGtVL1BSQTkrbkF3dTlsdTlvWVpVaVZWSjNENGYKbzJiYytqV1dMNEdHWStQZFNsejgxWlc1Y1cvTE9tTnM5RDBqSkl4YndOb2NIeEdnSit4VFozSktwNkFPNE12TAp6WHlpcFh1NTYyTjh3VmM3VUlnWVludnI2M3pGVTh2elJMMTgwWDV4NU1pSmJqVFliZkxIM3o3cUlOUE1aWkx2CkE1dnpKMEhYM0o4ckc5NnRtRnVVem9wQ252ZitXVkx2YVMyVDV1TXhpZUs5ZGZBMzJDRlFwNGkzY2ozOWMyYjcKTndJREFRQUIKLS0tLS1FTkQgUFVCTElDIEtFWS0tLS0tCg== 

in PHP. I'm trying to use this string to encrypt string data, but it just fails without telling me why when I use the following code:
$success = openssl_public_encrypt($data, $encrypted, base64_decode($row['public_key']));

When the above is run, $success is always false and $encrypted is blank. I've tried running the public key through openssl_pkey_get_public() and sending the resource to openssl_public_encrypt() with no luck either. Writing to a file is not an option, nor is storing the private key. 
Does anyone know how to get this to work? (or does it work for everyone else and it's just a weird server issue?)
EDIT: Since there seems to be some confusion about my issue, here is the testing code I'm using and its output. (Note: I've removed the base64 encoding, just to see if that made any difference)
$pubkey = openssl_get_publickey($row['public_key']);
$publicKey = openssl_pkey_get_details($res);
$encrypted = null;
$success = openssl_public_encrypt($data, $encrypted, $pubkey);
print ""\npubkey1 "" . $row['public_key'];
print ""\npubkey2 "" . $pubkey;
print ""\npubkey3 "" . $publicKey;
print ""\npubkey4 "" . $publicKey[""key""];
print ""\nencryption "" . ($success ? 'true' : 'false') . ' ""' . $encrypted . '""';
$success = openssl_public_encrypt($data, $encrypted, $row['public_key']);
print ""\nencryption2 "" . ($success ? 'true' : 'false') . ' ""' . $encrypted . '""';   

Output:
pubkey1 -----BEGIN PUBLIC KEY-----
MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA89FgfElm36q7iAf8frqa
o58naoROsAljaFbmztfnqlmzXfyijK5CNJFdkUCgsu2zGxN7UlGiBOassTd4ijWm
1rz6/ad9fGXplfMGxZxyPCz31VreSWXmTG/PeSIYs1Co+dibV3imYt5jTxfLs7BZ
WsT8nuLxGPw/o/gyKut0Ru+jXI2GgT4s3SylXinn/IbIA497SohqYA7/ViQnBwSL
ZKUysOx2QgBmc9m0viRqDSKNUtDw7+L7bjhlwgZUGr6fxfTuNj9PWo97aPSE74CD
owYYl2ToTboKSjZUszeNwQKpUnlHY/DBkwmYUJ7SAYDY70VNooadN5dZ4ehjdaka
6QIDAQAB
-----END PUBLIC KEY-----

pubkey2 Resource id #50
pubkey3 
pubkey4 
encryption false """"
encryption2 false """"

","The key that you should pass to this function is a PHP resource object, and not the string representation of the key itself.
$pubkey = openssl_get_publickey(base64_decode($row['public_key']));
$success = openssl_public_encrypt($data, $encrypted, $pubkey);

","9130","<php><openssl><public-key-encryption><pki>","5","2","2","2013-06-13 15:42:58","17091356","1","2","1010181","","2013-06-13 14:44:51","2013-06-12 22:30:38",""
"17076475","PHP OpenSSL Public Key Encryption With String Public Key","I have a public key
-----BEGIN PUBLIC KEY-----
MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAwKMDEDjbP5v/9kcvpQKf
IG3nU5Yid/tUNIeXBSDlxqhTEOKs8iQHXk0T17C4g7KHmrT2hxUomaAa2wwbfL+Z
4ppqvZZ4cu7CO6jaA0HyoBCU96siSuE0mPt8kU/PRA9+nAwu9lu9oYZUiVVJ3D4f
o2bc+jWWL4GGY+PdSlz81ZW5cW/LOmNs9D0jJIxbwNocHxGgJ+xTZ3JKp6AO4MvL
zXyipXu562N8wVc7UIgYYnvr63zFU8vzRL180X5x5MiJbjTYbfLH3z7qINPMZZLv
A5vzJ0HX3J8rG96tmFuUzopCnvf+WVLvaS2T5uMxieK9dfA32CFQp4i3cj39c2b7
NwIDAQAB
-----END PUBLIC KEY-----

stored as a base64 encoded string (in MySQL, set as $row['public_key'])
LS0tLS1CRUdJTiBQVUJMSUMgS0VZLS0tLS0KTUlJQklqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FROEFNSUlCQ2dLQ0FRRUF3S01ERURqYlA1di85a2N2cFFLZgpJRzNuVTVZaWQvdFVOSWVYQlNEbHhxaFRFT0tzOGlRSFhrMFQxN0M0ZzdLSG1yVDJoeFVvbWFBYTJ3d2JmTCtaCjRwcHF2Wlo0Y3U3Q082amFBMEh5b0JDVTk2c2lTdUUwbVB0OGtVL1BSQTkrbkF3dTlsdTlvWVpVaVZWSjNENGYKbzJiYytqV1dMNEdHWStQZFNsejgxWlc1Y1cvTE9tTnM5RDBqSkl4YndOb2NIeEdnSit4VFozSktwNkFPNE12TAp6WHlpcFh1NTYyTjh3VmM3VUlnWVludnI2M3pGVTh2elJMMTgwWDV4NU1pSmJqVFliZkxIM3o3cUlOUE1aWkx2CkE1dnpKMEhYM0o4ckc5NnRtRnVVem9wQ252ZitXVkx2YVMyVDV1TXhpZUs5ZGZBMzJDRlFwNGkzY2ozOWMyYjcKTndJREFRQUIKLS0tLS1FTkQgUFVCTElDIEtFWS0tLS0tCg== 

in PHP. I'm trying to use this string to encrypt string data, but it just fails without telling me why when I use the following code:
$success = openssl_public_encrypt($data, $encrypted, base64_decode($row['public_key']));

When the above is run, $success is always false and $encrypted is blank. I've tried running the public key through openssl_pkey_get_public() and sending the resource to openssl_public_encrypt() with no luck either. Writing to a file is not an option, nor is storing the private key. 
Does anyone know how to get this to work? (or does it work for everyone else and it's just a weird server issue?)
EDIT: Since there seems to be some confusion about my issue, here is the testing code I'm using and its output. (Note: I've removed the base64 encoding, just to see if that made any difference)
$pubkey = openssl_get_publickey($row['public_key']);
$publicKey = openssl_pkey_get_details($res);
$encrypted = null;
$success = openssl_public_encrypt($data, $encrypted, $pubkey);
print ""\npubkey1 "" . $row['public_key'];
print ""\npubkey2 "" . $pubkey;
print ""\npubkey3 "" . $publicKey;
print ""\npubkey4 "" . $publicKey[""key""];
print ""\nencryption "" . ($success ? 'true' : 'false') . ' ""' . $encrypted . '""';
$success = openssl_public_encrypt($data, $encrypted, $row['public_key']);
print ""\nencryption2 "" . ($success ? 'true' : 'false') . ' ""' . $encrypted . '""';   

Output:
pubkey1 -----BEGIN PUBLIC KEY-----
MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA89FgfElm36q7iAf8frqa
o58naoROsAljaFbmztfnqlmzXfyijK5CNJFdkUCgsu2zGxN7UlGiBOassTd4ijWm
1rz6/ad9fGXplfMGxZxyPCz31VreSWXmTG/PeSIYs1Co+dibV3imYt5jTxfLs7BZ
WsT8nuLxGPw/o/gyKut0Ru+jXI2GgT4s3SylXinn/IbIA497SohqYA7/ViQnBwSL
ZKUysOx2QgBmc9m0viRqDSKNUtDw7+L7bjhlwgZUGr6fxfTuNj9PWo97aPSE74CD
owYYl2ToTboKSjZUszeNwQKpUnlHY/DBkwmYUJ7SAYDY70VNooadN5dZ4ehjdaka
6QIDAQAB
-----END PUBLIC KEY-----

pubkey2 Resource id #50
pubkey3 
pubkey4 
encryption false """"
encryption2 false """"

","So the issue actually relates to the data. PKI for php has a really small length restriction and can't be used to encrypt large amounts of data. Instead you're supposed to use PKI to encrypt a symmetric key which is then used to encrypt/decrypt data.
See more @ How to encrypt long strings in PHP?
","9130","<php><openssl><public-key-encryption><pki>","5","1","2","2013-06-13 15:42:58","17091356","1","2","1010181","","2013-06-13 14:44:51","2013-06-12 22:30:38",""
"19294413","Create .pem file for public key RSA encryption C# .net","I want to create .pem file for the public key generated by this method 
public static Tuple<string, string> CreateKeyPair()
{
    CspParameters cspParams = 
        new CspParameters { 
            ProviderType = 1 /* PROV_RSA_FULL */ 
        };

    RSACryptoServiceProvider rsaProvider = 
        new RSACryptoServiceProvider(1024, cspParams);

    string publicKey = Convert.ToBase64String(rsaProvider.ExportCspBlob(false));
    string privateKey = Convert.ToBase64String(rsaProvider.ExportCspBlob(true));

    return new Tuple<string, string>(privateKey, publicKey);
}

Because I was generating this key for mobile application and they can not read it, they requested .pem file instead of public key as string
Please advice,
","First off, a so-called .pem file is not really a fixed specification or format. Several different kinds of distinct file formats are generally described as ""PEM"" files. When the SSLeay (now OpenSSL) project needed to produce a base64 encoded output file containing key information they borrowed formatting concepts from the old Privacy-Enhanced Mail RFCs 1421-1424 and they added the extension .pem to the end of these files. But such a file may contain public keys, private keys, certificate requests, certificates, certificate lists, and so on. Each is different. So if all you're told is to produce a .pem file you're going to have to guess what's really needed.
The easiest way to write such files is to use the Bouncycastle C# library. The package Org.BouncyCastle.OpenSsl contains a number of utilities including a PemWriter class that should help you.
","8888","<c#><encryption><rsa><public-key-encryption><encryption-asymmetric>","5","6","2","2017-06-09 14:49:29","19296996","0","2","1019724","","2013-10-10 11:58:52","2013-10-10 11:22:00",""
"19294413","Create .pem file for public key RSA encryption C# .net","I want to create .pem file for the public key generated by this method 
public static Tuple<string, string> CreateKeyPair()
{
    CspParameters cspParams = 
        new CspParameters { 
            ProviderType = 1 /* PROV_RSA_FULL */ 
        };

    RSACryptoServiceProvider rsaProvider = 
        new RSACryptoServiceProvider(1024, cspParams);

    string publicKey = Convert.ToBase64String(rsaProvider.ExportCspBlob(false));
    string privateKey = Convert.ToBase64String(rsaProvider.ExportCspBlob(true));

    return new Tuple<string, string>(privateKey, publicKey);
}

Because I was generating this key for mobile application and they can not read it, they requested .pem file instead of public key as string
Please advice,
","Recently I need to save PublicKey and PrivateKey generated in my C# application to file, and works with it later. I use for this purpose such library as CSharp-easy-RSA-PEM.
It is very simple and quick solution, so I will recommend this library to other guys.
I use following code to get PublicKey as string (and save it to pem file in format Base64):
string publicKeyStr = Crypto.ExportPublicKeyToX509PEM(_cryptoServiceProvider);

it returns something like this:
-----BEGIN PUBLIC KEY-----
MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCxnBvS8cdsnAev2sRDRYWxznm1
QxZzaypfNXLvK7CDGk8TR7K+Pzsa+tpJfoyN/Z4B6xdlpsERo2Cu6AzolvrDLx5w
ZoI0kgdfaBMbUkdOB1m97zFYjKWoPeTskFzWZ3GHcQ3EXT0NJXXFXAskY45vEpbc
5qFgEhcPy3BMqHRibwIDAQAB
-----END PUBLIC KEY-----

And I use following code to get PrivateKey as string:
string privateKeyStr = Crypto.ExportPrivateKeyToRSAPEM(_cryptoServiceProvider);

it returns something like this:
-----BEGIN RSA PRIVATE KEY-----
MIICWwIBAAKBgQCxnBvS8cdsnAev2sRDRYWxznm1QxZzaypfNXLvK7CDGk8TR7K+
Pzsa+tpJfoyN/Z4B6xdlpsERo2Cu6AzolvrDLx5wZoI0kgdfaBMbUkdOB1m97zFY
jKWoPeTskFzWZ3GHcQ3EXT0NJXXFXAskY45vEpbc5qFgEhcPy3BMqHRibwIDAQAB
AoGAAdwpqm7fxh0S3jOYpJULeQ45gL11dGX7Pp4CWHYzq1vQ14SDtFxYfnLWwGLz
499zvSoSHP1pvjPgz6lxy9Rw8dUxCgvh8VQydMQzaug2XD1tkmtcSWInwFKBAfQ7
rceleyD0aK8JHJiuzM1p+yIJ/ImGK0Zk2U/svqrdJrNR4EkCQQDo3d5iWcjd3OLD
38k1GALEuN17KNpJqLvJcIEJl0pcHtOiNnyy2MR/XUghDpuxwhrhudB/TvX4tuI0
MUeVo5fjAkEAw0D6m9jkwE5uuEYN/l/84rbQ79p2I7r5Sk6zbMyBOvgl6CDlJyxY
434DDm6XW7c55ALrnlratEW5HPiPxuHZBQJANnE4vtGy7nvn4Fd/mRQmAYwe695f
On1iefP9lxpx3huu6uvGN6IKPqS2alQZ/nMdCc0Be+IgC6fmNsGWtNtsdQJAJvB4
ikgxJqD9t8ZQ2CAwgM5Q0OTSlsGdIdKcOeB3DVmbxbV5vdw8RfJFjcVEbkgWRYDH
mKcp4rXc+wgfNFyqOQJATZ1I5ER8AZAn5JMMH9zK+6oFvhLUgKyWO18W+dbcFrBd
AzlTB+HHYEIyTmaDtXWAwgBvJNIHk4BbM1meCH4QnA==
-----END RSA PRIVATE KEY-----

Then you can use
RSACryptoServiceProvider publicX509key = Crypto.DecodeX509PublicKey(publicKeyStr);
RSACryptoServiceProvider privateRSAkey = Crypto.DecodeRsaPrivateKey(privateKeyStr);

to restore saved keys back to RSACryptoServiceProvider.
So, if someone need to resolve similar issue, you can just download this library, go to Solution Explorer -> (Right click on your project) -> Add -> Reference -> Overview in your Visual Studio to add this library in your project, and add using CSharp_easy_RSA_PEM; where you need it :)
","8888","<c#><encryption><rsa><public-key-encryption><encryption-asymmetric>","5","8","2","2017-06-09 14:49:29","19296996","0","2","1019724","","2013-10-10 11:58:52","2013-10-10 11:22:00",""
"10288521","Authentication with public/private key signatures: What's a good message (digest)?","I'm build an application with a client/server infrastructure and would like to implement an authentication mechanism using the public/private key method.
Let's assume that a client owns the private key and the server only has the public key. During authentication the client signs a message with the private key, sends it to the server where it's validated with the public key. If validation succeeds the client is authenticated.
Here's some JUnit test code where I made myself familiar with the concepts:
@Test
public void testSignature() throws Exception {
    final String message = ""Hello world is a stupid message to be signed"";

    final KeyPair keyPair = KeyPairGenerator.getInstance(""RSA"").generateKeyPair();

    final Signature privSig = Signature.getInstance(""SHA1withRSA"");

    privSig.initSign(keyPair.getPrivate());
    privSig.update(message.getBytes());

    byte[] signature = privSig.sign();

    final Signature pubSig = Signature.getInstance(""SHA1withRSA"");

    pubSig.initVerify(keyPair.getPublic());
    pubSig.update(message.getBytes());

    assertTrue(pubSig.verify(signature));
}

Of course in order for this to work both server and clients must be in possession of the plain message (digest).
Now my question is: What is a good message (digest) to be used for the signature? For example can this be a static, hardcoded string (which is used for all clients) or would this impose some kind of security issue on this concept? If a static string is bad would it be a good idea to negotiate some random string before authentication? This random string could be used as a ""session"" key for example and invalidated after some time.
","The static String would be bad since its susceptible to a repeat attack  (The signed string would be the same every time).  
Although, you seem to be reinventing what has been done before.  Using certificates is the trusted way.  See this example for more info on it: Java HTTPS client certificate authentication
If you want to implement it yourself you'll probably need to read up on how SSL works and mimic that.  Any other solution is likely to have some flaws in it, unless it was very bespoke (e.g. your client would keep a list of 1000's of shared static strings which it never reused, and the server had that same list and kept track of what had been used. or alternatively, keep track of a shared number which increments, as suggested in the comments below.)
","8475","<java><security><authentication><digital-signature><public-key-encryption>","2","2","1","2015-06-18 12:47:39","10288843","4","2","1816580","","2015-06-18 12:47:39","2012-04-23 21:21:29",""
"29512300","encrypting and decryption large file using rsa in java","I am using RSA algorithm for encryption and decryption of a file with size more than rsa key size. 
In the code below for encryption, i am reading file content in block-wise and converting into cipher text. Block-size is 32 bytes.
FileInputStream fin1 = new FileInputStream(genfile);

FileOutputStream fout = new FileOutputStream(seedcipher);

byte[] block = new byte[32];
int i;
while ((i = fin1.read(block)) != -1)
{
    byte[] inputfile= cipher.doFinal(block);
    fout.write(inputfile);
}

fin1.close();

At decryption part, same block-wise decryption is done in the code where i have mentioned the block size as 128 bytes
FileInputStream fin1 = new FileInputStream(encryptedfile);
FileOutputStream fout = new FileOutputStream(seedcipher);

DataInputStream dos =new DataInputStream(fin1);
DataOutputStream dosnew =new DataOutputStream(fout);
byte[] block = new byte[128];
int i;
while ((i = fin1.read(block)) != -1)
{
    byte[] inputfile= cipher.doFinal(block);
      fout.write(inputfile);
}

Input file size is 81.3 kB and file contains

0
1
2
3
4.....29000 

After the file is decrypted,output contain some extra values which are not relevant. why is that extra data in the result?
","You could solve this by runlength encoding. Use a DataOutputStream to write an integer at the start that represents the amount of bytes that are written afterwards. When decrypting, read that integer, and only use the amount of bytes it says.
I noticed you are using the Cipher class in a wrong way. Use the update method to add bytes to cipher and only use doFinal once. It is important that you use this overloaded version of the update method. Set the inputOffset parameter to zero and the inputLen parameter to i. This will make sure, that the Cipher is only using the bytes it should.
See JB Nizets answer.
","8329","<java><encryption><rsa><public-key-encryption>","3","0","3","2019-04-18 15:36:35","29512737","7","3","1816580","","2015-04-08 11:49:41","2015-04-08 10:35:17",""
"29512300","encrypting and decryption large file using rsa in java","I am using RSA algorithm for encryption and decryption of a file with size more than rsa key size. 
In the code below for encryption, i am reading file content in block-wise and converting into cipher text. Block-size is 32 bytes.
FileInputStream fin1 = new FileInputStream(genfile);

FileOutputStream fout = new FileOutputStream(seedcipher);

byte[] block = new byte[32];
int i;
while ((i = fin1.read(block)) != -1)
{
    byte[] inputfile= cipher.doFinal(block);
    fout.write(inputfile);
}

fin1.close();

At decryption part, same block-wise decryption is done in the code where i have mentioned the block size as 128 bytes
FileInputStream fin1 = new FileInputStream(encryptedfile);
FileOutputStream fout = new FileOutputStream(seedcipher);

DataInputStream dos =new DataInputStream(fin1);
DataOutputStream dosnew =new DataOutputStream(fout);
byte[] block = new byte[128];
int i;
while ((i = fin1.read(block)) != -1)
{
    byte[] inputfile= cipher.doFinal(block);
      fout.write(inputfile);
}

Input file size is 81.3 kB and file contains

0
1
2
3
4.....29000 

After the file is decrypted,output contain some extra values which are not relevant. why is that extra data in the result?
","Your IO code for reading block by block is incorrect:
while ((i = fin1.read(block)) != -1) {
    byte[] inputfile= cipher.doFinal(block);
    fout.write(inputfile);
}


It assumes that every time you ask to read a block, a whole block is read. That is not necessarily the case. Only a few bytes might be read. The number of bytes that are actually read are returned by the read() method (and stored in i). You should not ignore it.
The last block has a pretty good chance of being incomplete, unless your file size is a multiple of 32. So at the last iteration, you're encrypting the last N remaining bytes of the file + the 32 - N bytes that were stored in the byte array at the previous iteration.

Using RSA to encrypt a large file is not a good idea. You could for example generate a random AES key, encrypt it using RSA and store it in the output file, and then encrypt the file itself with AES, which is much faster and doesn't have any problem with large inputs. The decryption would read the encrypted AES key, decrypt it, and then decrypt the rest of the file with AES.
","8329","<java><encryption><rsa><public-key-encryption>","3","5","3","2019-04-18 15:36:35","29512737","7","3","1816580","","2015-04-08 11:49:41","2015-04-08 10:35:17",""
"29512300","encrypting and decryption large file using rsa in java","I am using RSA algorithm for encryption and decryption of a file with size more than rsa key size. 
In the code below for encryption, i am reading file content in block-wise and converting into cipher text. Block-size is 32 bytes.
FileInputStream fin1 = new FileInputStream(genfile);

FileOutputStream fout = new FileOutputStream(seedcipher);

byte[] block = new byte[32];
int i;
while ((i = fin1.read(block)) != -1)
{
    byte[] inputfile= cipher.doFinal(block);
    fout.write(inputfile);
}

fin1.close();

At decryption part, same block-wise decryption is done in the code where i have mentioned the block size as 128 bytes
FileInputStream fin1 = new FileInputStream(encryptedfile);
FileOutputStream fout = new FileOutputStream(seedcipher);

DataInputStream dos =new DataInputStream(fin1);
DataOutputStream dosnew =new DataOutputStream(fout);
byte[] block = new byte[128];
int i;
while ((i = fin1.read(block)) != -1)
{
    byte[] inputfile= cipher.doFinal(block);
      fout.write(inputfile);
}

Input file size is 81.3 kB and file contains

0
1
2
3
4.....29000 

After the file is decrypted,output contain some extra values which are not relevant. why is that extra data in the result?
","Hybrid Cryptosystem
Example: For a 1024 bit key, you can encrypt around 1024 / 8 = 128 bytes
Note: Exact value is 128 bytes - 11 bytes for padding
You can use a symmetric key to encrypt and decrypt the data (> 128 bytes) to be transferred. RSA can only encrypt data up to a certain extent (e.g. 128 bytes) which depends on the RSA key length.
This means that if you want to transfer anything bigger than 128 bytes, you have to transfer a symmetric key < 128 bytes first so you can have the following:


Generate a symmetric key (< 128 bytes)
Encrypt symmetric key with RSA
Transfer encrypted symmetric key
Decrypt symmetric key with RSA
Encrypt data (> 128 bytes) with symmetric key
Transfer encrypted data
Decrypt encrypted data with symmetric key


or (transfer encrypted symmetric key and encrypted data at the same time)


Generate a symmetric key (< 128 bytes)
Encrypt symmetric key with RSA
Encrypt data (> 128 bytes) with symmetric key
Transfer encrypted symmetric key & encrypted data
Decrypt symmetric key with RSA
Decrypt encrypted data with symmetric key


For more information, click here (Hybrid cryptosystem)
","8329","<java><encryption><rsa><public-key-encryption>","3","2","3","2019-04-18 15:36:35","29512737","7","3","1816580","","2015-04-08 11:49:41","2015-04-08 10:35:17",""
"11398659","Encrypt Post Data Before Sending","I've been searching for a solution to this problem for some time. I need a way to encrypt form data using JS. Then I need to be able to decrypt it using PHP. A public/private key system seems perfect, however I can't find any solutions or documentation on how to implement it. I really want to be able to implement this myself. I just need some resources to get me started.
And yes, I'm aware of SSL. Please don't recommend it. I don't want to invest the money unless the site is a success.
An example of public key encryption then private key decryption in any language would be very helpful.
","You could try symmetric encryption using RC4:-
https://gist.github.com/2185197
However, SSL is relatively cheap these days and would be far easier, more secure and less error prone than a roll-your-own solution so I really wouldn't just write it off because you want to save money, it will save you in the long run.
","8013","<php><javascript><public-key-encryption><encryption>","2","1","2","2012-07-11 22:10:08","","5","2","1393837","","2012-07-09 15:57:58","2012-07-09 15:50:18",""
"11398659","Encrypt Post Data Before Sending","I've been searching for a solution to this problem for some time. I need a way to encrypt form data using JS. Then I need to be able to decrypt it using PHP. A public/private key system seems perfect, however I can't find any solutions or documentation on how to implement it. I really want to be able to implement this myself. I just need some resources to get me started.
And yes, I'm aware of SSL. Please don't recommend it. I don't want to invest the money unless the site is a success.
An example of public key encryption then private key decryption in any language would be very helpful.
","You could do this:
http://www.frostjedi.com/terra/dev/rsa/index.php
More info:
http://area51.phpbb.com/phpBB/viewtopic.php?f=84&t=33024&start=0
","8013","<php><javascript><public-key-encryption><encryption>","2","1","2","2012-07-11 22:10:08","","5","2","1393837","","2012-07-09 15:57:58","2012-07-09 15:50:18",""
"3241461","How to send and receive encrypted email using PHP","I work at a hospital and have developed a way to estimate the total patient financial responsibility for services, after insurance has paid it's obligation, and before any services are rendered. A lot of patients are calling for quotes, and I wanted to find a secure way to email those results to the patient at their request.
I'm considering removing all patient information from the generated quote, so there would not be any security concerns, but would like to find a way to encrypt the email, send it, and allow the patient's email client to decrypt the email.
I'm not sure how to use security certificates, though they might be the best option for me, even though I'd have to jump through corporate hoops to be granted access to internet facing hosting for certificates, all applications other than email are hospital side only.
I'm also considering creating a PDF from the generated letter and encrypting the PDF, assigning their last four of their social, or some other private info they've shared with us during the quote generation process, as their password.
","I accomplished this about 10 years ago using PGP. GPG is a similar library.
These options may be way too involved for an older user though, as I believe they both involve the recipient installing a certificate of sorts on their end.
Might be a good place to start looking...
","7821","<php><email><pdf-generation><public-key-encryption>","7","2","4","2010-07-14 14:54:31","","2","2","","","","2010-07-13 20:56:36",""
"3241461","How to send and receive encrypted email using PHP","I work at a hospital and have developed a way to estimate the total patient financial responsibility for services, after insurance has paid it's obligation, and before any services are rendered. A lot of patients are calling for quotes, and I wanted to find a secure way to email those results to the patient at their request.
I'm considering removing all patient information from the generated quote, so there would not be any security concerns, but would like to find a way to encrypt the email, send it, and allow the patient's email client to decrypt the email.
I'm not sure how to use security certificates, though they might be the best option for me, even though I'd have to jump through corporate hoops to be granted access to internet facing hosting for certificates, all applications other than email are hospital side only.
I'm also considering creating a PDF from the generated letter and encrypting the PDF, assigning their last four of their social, or some other private info they've shared with us during the quote generation process, as their password.
","From what I know, this is essentially impossible unless the recipient is also using the same e-mail client. The problem is that even if you encrypt on your end, the recipient will received a garbage message simply because they don't have the functionality to decrypt.
While I was typing this, TomWilsonFL posted information on a possible encryption method, but you will still need to provide the recipient an application to decrypt the data.
","7821","<php><email><pdf-generation><public-key-encryption>","7","-1","4","2010-07-14 14:54:31","","2","2","","","","2010-07-13 20:56:36",""
"3241461","How to send and receive encrypted email using PHP","I work at a hospital and have developed a way to estimate the total patient financial responsibility for services, after insurance has paid it's obligation, and before any services are rendered. A lot of patients are calling for quotes, and I wanted to find a secure way to email those results to the patient at their request.
I'm considering removing all patient information from the generated quote, so there would not be any security concerns, but would like to find a way to encrypt the email, send it, and allow the patient's email client to decrypt the email.
I'm not sure how to use security certificates, though they might be the best option for me, even though I'd have to jump through corporate hoops to be granted access to internet facing hosting for certificates, all applications other than email are hospital side only.
I'm also considering creating a PDF from the generated letter and encrypting the PDF, assigning their last four of their social, or some other private info they've shared with us during the quote generation process, as their password.
","You would be better off sending a link to an SSL encrypted site that has all the information. It would not require any additional software on the client side, and would allow you to have a bit more control and accounting of who is accessing it.
You must of course secure it with username/password of some kind, you could even just use their social security + a generated hash sent in the email. The hash prevents a user from guessing random ssn's.
","7821","<php><email><pdf-generation><public-key-encryption>","7","6","4","2010-07-14 14:54:31","","2","2","","","","2010-07-13 20:56:36",""
"3241461","How to send and receive encrypted email using PHP","I work at a hospital and have developed a way to estimate the total patient financial responsibility for services, after insurance has paid it's obligation, and before any services are rendered. A lot of patients are calling for quotes, and I wanted to find a secure way to email those results to the patient at their request.
I'm considering removing all patient information from the generated quote, so there would not be any security concerns, but would like to find a way to encrypt the email, send it, and allow the patient's email client to decrypt the email.
I'm not sure how to use security certificates, though they might be the best option for me, even though I'd have to jump through corporate hoops to be granted access to internet facing hosting for certificates, all applications other than email are hospital side only.
I'm also considering creating a PDF from the generated letter and encrypting the PDF, assigning their last four of their social, or some other private info they've shared with us during the quote generation process, as their password.
","If you're employed by a hospital in the USA, you had better not try to email protected health information. (Similar things are true in other countries.)  Even if you scrub the patient's name out of the message, you'll definitely have the patient's email address in the message (duh!).  You'll most likely have diagnoses, dates of birth, dates of proposed care, medical record numbers, or account numbers.  That's all protected data.  Bad. Bad.  See here for the regulations, which are rigid.
http://www.hhs.gov/ocr/privacy/hipaa/understanding/summary/index.html
If you want to do this, you must use TLS (https) security, and you must go to some length both to ensure that the person logging in to your secure web site is who they claim to be, and you must log accesses.
Please, if you value your job and your savings account, check with your hospital's privacy officer before sending emails with PHI in them. The ARRA 2009 law makes individuals personally liable for breaches even if they work for corporations.  Plus, your hospital does NOT want its name in lights here.
http://www.hhs.gov/ocr/privacy/hipaa/administrative/breachnotificationrule/postedbreaches.html
You could use encrypted email, as long as the unencrypted part (e.g. the subject line) only said ""here's the information you requested"" or something like that.  But, you know, many persons seeking medical care won't be able to cope with a complex addin to their mail client software.  
The PGP company offers an encrypted email gateway system that some people with PHI use.
http://www.pgp.com/products/universal_gateway_email/index.html
But you should still check with your privacy officer.
","7821","<php><email><pdf-generation><public-key-encryption>","7","3","4","2010-07-14 14:54:31","","2","2","","","","2010-07-13 20:56:36",""
"12645128","Certificate & Hash checking?","I'm asking this question in order for be 100% sure.
link

To validate the certificate to ensure it contains the information
  digitally signed by the certificate authority, the web browser
  verifies the digital signature. Because the digital signature is an
  encrypted hash value that was computed based on the contents of the
  certificate, the web browser needs to compare hash values. The web
  browser computes a hash value based on the contents of the certificate
  it received. It then decrypts the digital signature to determine the
  hash value that the certificate authority computed. If the two hash
  values match, the web browser is assured that the certificate contains
  the information that the certificate authority verified and digitally
  signed.

questions :

The web browser computes a hash value based on the contents of the
  certificate it received

The browser knows in which digest algorithm the certificate was used inside , so he uses it also to calculate a hash - based on the certificate content.

It then decrypts the digital signature to determine the hash value
  that the certificate authority computed

The browser knows which CA created the certificate , so he takes the public key from the appropriate computer store location and apply it on the encrypted hash value . the result is the decrypted hash value. 
It then see if both the same.
Am I right ?
","(You may be interested in this question on Security.SE.)
This is the structure of an X.509 certificate:

Certificate  ::=  SEQUENCE  {
     tbsCertificate       TBSCertificate,
     signatureAlgorithm   AlgorithmIdentifier,
     signatureValue       BIT STRING  }

TBSCertificate  ::=  SEQUENCE  {
     version         [0]  EXPLICIT Version DEFAULT v1,
     serialNumber         CertificateSerialNumber,
     signature            AlgorithmIdentifier,
     issuer               Name,
     validity             Validity,
     subject              Name,
     subjectPublicKeyInfo SubjectPublicKeyInfo,
     issuerUniqueID  [1]  IMPLICIT UniqueIdentifier OPTIONAL,
                          -- If present, version MUST be v2 or v3
     subjectUniqueID [2]  IMPLICIT UniqueIdentifier OPTIONAL,
                          -- If present, version MUST be v2 or v3
     extensions      [3]  EXPLICIT Extensions OPTIONAL
                          -- If present, version MUST be v3
     }


When presented with the certificate, the browser gets the signature algorithm from the certificate itself. Typically, this is something like RSAwithSHA1.
In this case, it can indeed recalculate the SHA-1 digest of the TBSCertificate (the actual content of the certificate).
In addition, from the TBSCertificate, it can find the issuer name: this is what's used to find a trust anchor from the known CA certificates (the issuer name must match the subject of the CA certificate). When it has found the CA certificate with the right name in the list it already trusts, it can get the public RSA key from that CA certificate.
Having both the SHA-1 digest and the RSA public key, it can verify that the signatureValue matches.

the digital signature is an encrypted hash value

That's not strictly true, although it's commonly said. Digital signatures are digital signatures, not encryption.
The problem is that RSA uses the same maths to encrypt and sign: encryption with the public key and signature with the private key. Often, one is confused with the other (even in the OpenSSL API). It doesn't make sense to ""encrypt"" with a private key, since ""encrypting"" implies hiding (and you're not hiding anything if you're giving the public key away so the it can ""decrypt"" the signature).
This subtly about hash and encryption with digital signatures wouldn't work with some other algorithms such as DSA, which are for signatures only.
This is why a number of digital signature APIs combine the hash and key usage into a single ""sign"" or ""verify"" operation. This is what the Java Signature API does, for example: you tell it to use RSAwithSHA1 or DSAwithSHA1, give it the key and the message, and tell it to sign or verify, you don't have to do the digest or ""encryption"" manually.
For the purpose of certificate verification: the browser gets the issuer from the cert and find the corresponding public key (from trusted CA certs), it also gets the signature algorithm from the cert, and then verifies the signature with that public key and the TBSCertificate content, according to what the signature algorithm dictates.
","7817","<security><ssl><certificate><public-key-encryption>","0","4","1","2014-05-20 16:09:28","12646090","0","3","859154","","2012-09-28 18:10:09","2012-09-28 18:03:52",""
"14303431","How long would it take my i-7 processor to factorise a 1024 bits number (consisting of just 2 prime factors)","We're examining the RSA algorithm and would like to know how much time it would take an intel i-7 core (@ 2.50 gHz) to factorise the RSA-public key.
we wrote a piece of java for this, and I don't know how effective it is
public static String factorise(long l)
{
    double a = Math.floor(Math.sqrt(l));
    while(l/a != Math.round(l/a))
    {
        a--;
    }
    return (long)a + "", "" + (long)(l/a);    
}

With a number around 2^45 it took the PC approximately 33 milliseconds. In theory, how long would it take to factorise a number around 2^1024?
Thanks in advance :)
","Your algorithm is O(2^n), where n is the number of bits in the original number l. (that means that a single bit more will double the runtime, because twice as many numbers a must be checked - on average)
If 45 bits took 33 ms, then 1024 bits will take approx. 2^1024 / 2^45 * 33ms = 5.34654 * 10^285 years.
This of course assumes, that the 1024bit code is exactly as efficient as your code for long numbers (64bit?). Which is a bold statement, considering that 10^285 years is more than enough time to switch to the General number field sieve and scratch a few million years of that time...

In 2009 the 768 bit number rsa-768 was cracked using about 1000 cores and 2 years of calculations. Assuming they used the General number field sieve (a very fair assumption) it would take them 7481 years to crack a 1024 bit number using the same hardware.
Or using only your i7 with this algorithm: about 3 million years. Still a long time.... ;)
","7774","<rsa><public-key-encryption><factorization>","2","13","1","2013-01-13 13:17:41","14303492","3","0","1974031","","2013-01-13 13:17:41","2013-01-13 12:27:32","2013-01-13 13:59:37"
"30718174","Encrypt with private key and decrypt with public key","What I'd like to know is simple.
Can I use OpenSSL to encrypt a string ""hello"" with a private key then send it to everyone who can decrypt it with the public key to retrieve the original string.
I've searched all around and can't really find anything.
Mathematically I can use the private exponent and public modulus to perform an encryption then use the public exponent and public modulus to perform the decryption.
Can I do this with OpenSSL?
I've read that this is considered signing. 
Then how can I sign with my private key and receive the original data from the signed file with just the public key?
I've read a lot of the responses on the web and they're all vague. 
Can anyone give me clear solutions?
If it is possible to encrypt with a private key and decrypt with public can anyone give me an example on how to do it with the openssl tool? Or do I have to write my own implementation?
","Signing and encrypting are two entirely different concepts. It wouldn't make much sense to encrypt something with your private key and then distribute it to be encrypted with your public key. Your public key is inherently available, being that it is public, which defeats the purpose of encrypting. 
Traditionally, encryption is done with someone else's public key in a way that permits the message to be decrypted only with the private key. 
Signing, on the other, generally involves hashing the message using your private key as a seed value. Using the public key you hash the message again and compare your hash to the original hash. If they correspond (they won't be identical), then you have verified that the only possible sender is the holder of the private key (which may or may not be who you believe it is, if that has been compromised)
","7720","<c><encryption><openssl><public-key-encryption>","2","1","2","2015-06-09 20:00:43","","10","0","608639","","2015-06-09 03:32:42","2015-06-08 20:09:25","2015-06-09 02:36:23"
"30718174","Encrypt with private key and decrypt with public key","What I'd like to know is simple.
Can I use OpenSSL to encrypt a string ""hello"" with a private key then send it to everyone who can decrypt it with the public key to retrieve the original string.
I've searched all around and can't really find anything.
Mathematically I can use the private exponent and public modulus to perform an encryption then use the public exponent and public modulus to perform the decryption.
Can I do this with OpenSSL?
I've read that this is considered signing. 
Then how can I sign with my private key and receive the original data from the signed file with just the public key?
I've read a lot of the responses on the web and they're all vague. 
Can anyone give me clear solutions?
If it is possible to encrypt with a private key and decrypt with public can anyone give me an example on how to do it with the openssl tool? Or do I have to write my own implementation?
","Encrypting with the private key is not considered signing. Using RSA, there is in fact encryption using the private key, but this is just an implementation detail of RSA, and it is not encrypting the message, but a hash of the message, so no, verifying the signature does not bring back the original plaintext message.
Yes you can sign and verify signatures in OpenSSL -- cf. https://www.openssl.org/docs/crypto/RSA_sign.html
No, you should not use ""textbook RSA"" with the modulus and exponent to roll your own encryption. Cf. here, for example: https://crypto.stackexchange.com/questions/1448/definition-of-textbook-rsa
No, you should not swap the use of the private and public keys by encrypting data with the private key and decrypting with the public. Cf. for example https://stackoverflow.com/a/2350959/233596.
UPDATE:
This page suggests that you can use the OpenSSL C interface to encrypt with the private key and decrypt with the public key, by way of these function prototypes:
 int RSA_public_encrypt(int flen, unsigned char *from,
    unsigned char *to, RSA *rsa, int padding);
 int RSA_private_decrypt(int flen, unsigned char *from,
    unsigned char *to, RSA *rsa, int padding);
 int RSA_private_encrypt(int flen, unsigned char *from,
    unsigned char *to, RSA *rsa,int padding);
 int RSA_public_decrypt(int flen, unsigned char *from, 
    unsigned char *to, RSA *rsa,int padding);

(I did not actually try using these functions.)
I tried using the openssl rsautl command line:
$ openssl rsautl -in HELLO -out HELLO.encrypt_by_private -inkey private.pem -encrypt

However:
$ openssl rsautl -in  HELLO.encrypt_by_private -pubin -inkey public.pem -decrypt
A private key is needed for this operation

So, I would say that the command line tool will not do it.
","7720","<c><encryption><openssl><public-key-encryption>","2","1","2","2015-06-09 20:00:43","","10","0","608639","","2015-06-09 03:32:42","2015-06-08 20:09:25","2015-06-09 02:36:23"
"8884076","programmatically generate `d` from `p` and `q` (RSA)","I have two numbers, p, and q. I know that I can get phi = (p-1)*(q-1) and that ed = 1 (mod phi)... but I'm not sure I get what this means.
I wrote some Python:
p = NUM
q = NUM
e = NUM
phi = (p-1)*(q-1)
d = (1 % phi)/float(e)

But I always get a decimal, and d is supposed to be an integer. what am I doing wrong?
EDIT: I may just not understand RSA. Right now, I'm looking at this page: http://www.di-mgt.com.au/rsa_alg.html
","It's returning a decimal because you're dividing by a floating point number 
float(e)

You can get the final number to be converted into an integer by wrapping the whole computation in an int() function like this : 
d = int( (1 mod phi)/float(e) )

","7617","<python><encryption><rsa><public-key-encryption>","1","-1","3","2012-01-16 17:58:56","8884226","4","1","569183","","2012-01-16 17:51:19","2012-01-16 17:45:36",""
"8884076","programmatically generate `d` from `p` and `q` (RSA)","I have two numbers, p, and q. I know that I can get phi = (p-1)*(q-1) and that ed = 1 (mod phi)... but I'm not sure I get what this means.
I wrote some Python:
p = NUM
q = NUM
e = NUM
phi = (p-1)*(q-1)
d = (1 % phi)/float(e)

But I always get a decimal, and d is supposed to be an integer. what am I doing wrong?
EDIT: I may just not understand RSA. Right now, I'm looking at this page: http://www.di-mgt.com.au/rsa_alg.html
","Since the dnominator on the division is a float, Python will always promote the result of the division to a float.
If you want to explictely have the result as an integer, do not promote any of the operators to float, and use the ""//"" operator instead - it prevents, in a ""future compatible"" way, automatic conversion of the division result to a float.
d = (1 % phi)// e
","7617","<python><encryption><rsa><public-key-encryption>","1","0","3","2012-01-16 17:58:56","8884226","4","1","569183","","2012-01-16 17:51:19","2012-01-16 17:45:36",""
"8884076","programmatically generate `d` from `p` and `q` (RSA)","I have two numbers, p, and q. I know that I can get phi = (p-1)*(q-1) and that ed = 1 (mod phi)... but I'm not sure I get what this means.
I wrote some Python:
p = NUM
q = NUM
e = NUM
phi = (p-1)*(q-1)
d = (1 % phi)/float(e)

But I always get a decimal, and d is supposed to be an integer. what am I doing wrong?
EDIT: I may just not understand RSA. Right now, I'm looking at this page: http://www.di-mgt.com.au/rsa_alg.html
","Your understanding of the math is wrong. The equation

ed ≡ 1 (mod φ)

means that, the remainder of number ed dividing φ is equal to 1, i.e. in terms of Python,
>>> (e*d) % phi
1

For instance, if φ = (7 - 1)(11 - 1) = 60, and e = 17, then if we choose d = 53, then we'll get
>>> e = 17
>>> d = 53
>>> phi = 60
>>> (e*d) % phi
1

We call d a modular multiplicative inverse of e.
To generate d from e and φ, usually extended Euclidean algorithm is used. Please read http://en.wikipedia.org/wiki/Modular_multiplicative_inverse or https://stackoverflow.com/search?q=python+%22multiplicative+inverse%22&submit=search for more info
","7617","<python><encryption><rsa><public-key-encryption>","1","5","3","2012-01-16 17:58:56","8884226","4","1","569183","","2012-01-16 17:51:19","2012-01-16 17:45:36",""
"6587614","Git ""ERROR:gitosis.serve.main:Repository read access denied"" when using public keys","I have setup a git server using gitosis and everything was going fine. I decided to switch to using public keys for security reasons. I generated my key on my computer using this command.
ssh-keygen -t rsa -C ""email@address.com""

I then added the public key to the keydir and included the key in my gitosis.conf file. I committed the changes and uploaded them to the server. When I tried to pull the changes in my git repo it gave me this error.
Error
sfa-e1505-dn:VIIAD stefanbossbaly$ git pull
DEBUG:gitosis.serve.main:Got command ""git-upload-pack 'git/VIIAD.git'""
DEBUG:gitosis.access.haveAccess:Access check for 'mac' as 'writable' on 'git/VIIAD.git'...
DEBUG:gitosis.access.haveAccess:Stripping .git suffix from 'git/VIIAD.git', new value 'git/VIIAD'
DEBUG:gitosis.group.getMembership:found 'mac' in 'app-dev'
DEBUG:gitosis.group.getMembership:found 'mac' in 'test'
DEBUG:gitosis.access.haveAccess:Access check for 'mac' as 'writeable' on 'git/VIIAD.git'...
DEBUG:gitosis.access.haveAccess:Stripping .git suffix from 'git/VIIAD.git', new value 'git/VIIAD'
DEBUG:gitosis.group.getMembership:found 'mac' in 'app-dev'
DEBUG:gitosis.group.getMembership:found 'mac' in 'test'
DEBUG:gitosis.access.haveAccess:Access check for 'mac' as 'readonly' on 'git/VIIAD.git'...
DEBUG:gitosis.access.haveAccess:Stripping .git suffix from 'git/VIIAD.git', new value 'git/VIIAD'
DEBUG:gitosis.group.getMembership:found 'mac' in 'app-dev'
DEBUG:gitosis.group.getMembership:found 'mac' in 'test'
ERROR:gitosis.serve.main:Repository read access denied
fatal: The remote end hung up unexpectedly

gitosis.conf
[gitosis]

loglevel = DEBUG

[group app-dev]
writable = VIIAD android-backend
members = home mac

[group test]
writable = test
members = home mac

[group gitosis-admin]
members = home
writable = gitosis-admin mac

Notice that I already have a key ""home"" and it is working fine. The ""mac"" key is giving me problems. Does anyone know how to solve this problem?
","Connect using ssh -vvvv yourgitserver to see what key is getting served up. You can control which key is given and make aliases for your server to give different keys to the same machine via the ~/.ssh/config file.
Hope this helps.
As an aside, use gitolite instead. It's actively developed and maintained; gitosis is not.
","7497","<linux><security><git><gitosis><public-key-encryption>","1","1","1","2011-07-05 19:43:56","6588011","0","","","","","2011-07-05 19:08:10",""
"27112213","ECC Encryption and Decryption in Java","Can we encrypt large files with ECC or it is like RSA works for small only? can anyone please recommend a good website for ECC Java implementation.
Thanks
","In general you are required to perform hybrid encryption with ECC. ECIES for instance is basically a key agreement followed by symmetric encryption. So you cannot directly encrypt anything with ECIES, which is the most common ECC method for encryption. Basically you should couple it to a symmetric cipher. This is actually the best scheme for RSA encryption as well, most of the time.

As you can see you can use this directly as a Cipher using CBC mode & PKCS#7 padding, but beware of the large header (117 bytes for a 384 curve, no less). This is required to perform the key derivation. Make sure that the public key is properly validated (I'm not sure about the Bouncy Castle code in this regards, haven't taken a look at it).
public static void main(String[] args) throws Exception {
    Security.addProvider(new BouncyCastleProvider());

    KeyPairGenerator ecKeyGen = KeyPairGenerator.getInstance(""EC"", BouncyCastleProvider.PROVIDER_NAME);
    ecKeyGen.initialize(new ECGenParameterSpec(""brainpoolP384r1""));

    // doesn't work, which means we are dancing on the leading edge :)
    // KeyPairGenerator ecKeyGen = KeyPairGenerator.getInstance(""EC"");
    // ecKeyGen.initialize(new ECGenParameterSpec(""secp384r1""));

    KeyPair ecKeyPair = ecKeyGen.generateKeyPair();
    System.out.println(""What is slow?"");

    Cipher iesCipher = Cipher.getInstance(""ECIESwithAES"");
    iesCipher.init(Cipher.ENCRYPT_MODE, ecKeyPair.getPublic());

    byte[] ciphertext = iesCipher.doFinal(com.google.common.base.Strings.repeat(""owlstead"", 1000).getBytes());

    iesCipher.init(Cipher.DECRYPT_MODE, ecKeyPair.getPrivate());
    byte[] plaintext = iesCipher.doFinal(ciphertext);

    System.out.println(Hex.toHexString(ciphertext));
    System.out.println(new String(plaintext));
}

","7350","<java><encryption><public-key-encryption>","-2","3","1","2014-11-26 00:09:20","","2","3","589259","","2014-11-26 00:09:20","2014-11-24 19:02:04",""
"18397927","Pushing to TFS git using public/private key","I have a TFS server which is using git for source-control. How do I use ssh style public/private keys to push/pull/fetch from the TFS server? That is, where do I add my public key on the TFS server?
","As per DaveShaw's comment, it's currently not supported as there is a Change request on the visual studio feedback portal.
https://visualstudio.uservoice.com/forums/121579-visual-studio/suggestions/3801342-add-support-for-ssh-keys-as-alternate-authenticati
","7331","<git><tfs><public-key-encryption>","22","18","5","2016-06-30 21:12:29","19266681","1","4","","","","2013-08-23 08:10:45",""
"18397927","Pushing to TFS git using public/private key","I have a TFS server which is using git for source-control. How do I use ssh style public/private keys to push/pull/fetch from the TFS server? That is, where do I add my public key on the TFS server?
","As saying by @abbottdev, there is not possible to public/private key, as far as I konw.
Besides, Windows Credential Store is a tool which could be useful, (it seems to mean ""Once and for all"").
PS: It works also for BitBucket.
Good explication on this topic here.
","7331","<git><tfs><public-key-encryption>","22","0","5","2016-06-30 21:12:29","19266681","1","4","","","","2013-08-23 08:10:45",""
"18397927","Pushing to TFS git using public/private key","I have a TFS server which is using git for source-control. How do I use ssh style public/private keys to push/pull/fetch from the TFS server? That is, where do I add my public key on the TFS server?
","Since git sends cmds and content through ssh, you could install openssh and a separate git client on the tfs server, cygwin is what i used, tfs wouldn't know the difference. You just would need to install openssh as a service. Although I did this with an Atlassian's bamboo server, the concept is the same. 
","7331","<git><tfs><public-key-encryption>","22","-1","5","2016-06-30 21:12:29","19266681","1","4","","","","2013-08-23 08:10:45",""
"18397927","Pushing to TFS git using public/private key","I have a TFS server which is using git for source-control. How do I use ssh style public/private keys to push/pull/fetch from the TFS server? That is, where do I add my public key on the TFS server?
","TFS 2015 update 3 support SSH authentication, You can find the details in below link
 https://www.visualstudio.com/en-us/docs/git/use-ssh-keys-to-authenticate
For TFS 2013 and TFS 2015 U1 and U2, you can connect to the TFS GIT repository by remotely by changing authentication settings like
Windows authentication : Disabled
Basic authentication : Enabled 
","7331","<git><tfs><public-key-encryption>","22","5","5","2016-06-30 21:12:29","19266681","1","4","","","","2013-08-23 08:10:45",""
"18397927","Pushing to TFS git using public/private key","I have a TFS server which is using git for source-control. How do I use ssh style public/private keys to push/pull/fetch from the TFS server? That is, where do I add my public key on the TFS server?
","By using TFS 2015 update 3, you can connect the TFS-GIT repository remotely from GIT Installed Linux server using SSH authentication. For this you need to generate public and private key from Linux server by using SSH -keygen command. Then copy the public in TFS 2015.3 profile window. Then you can connect the TFS-GIT repository.
","7331","<git><tfs><public-key-encryption>","22","0","5","2016-06-30 21:12:29","19266681","1","4","","","","2013-08-23 08:10:45",""
"11905983","Asymmetric encryption using PHP","I have a problem that is driving me crazy.
I have created a pair of keys doing:
$res = openssl_pkey_new(array('private_key_bits' => 2048));

/* Extract the private key from $res to $privKey */
openssl_pkey_export($res, $privKey);

/* Extract the public key from $res to $pubKey */
$pubKey = openssl_pkey_get_details($res);
$pubKey = $pubKey[""key""];

Using this code, I have $pubKey and $privKey.
I can encrypt/decrypt correctly, but I have a big doubt regarding the DECRYPTION.
At the moment I crypt data doing:
openssl_public_encrypt($data, $encrypted, $pubKey);

It encrypt my data correctly, but reading the PHP Doc, I found:
http://php.net/manual/en/function.openssl-public-decrypt.php
Can I decrypt data using PUBLIC KEY ?? Why ??
I know the public key is useful to ENCRYPT data, but only the owner of the private key can DECRYPT data.
If I can decrypt data using the public key, let the users that know the public key decrypt easily the messages.
Could someone explain this to me? I'm looking for a method to use two keys, the first to ENCRYPT and the second (only the second) to DECRYPT.
Thanks
","The whole idea of public-key cryptography is that every 'user' has a 'Public key' and a 'Private key'. There are 3 main implementations for these keys: confidential, authenticated and combined.
In my answer, I'll go by the 'confidential' technique.
Each user has a 'Public key' that they distribute and which will be used by the other user to encrypt the message that will be sent back, and a 'Private key' that they keep only for themselves which is used to decrypt the messages that they will receive. 
The key that you have used to encrypt your message, isn't the same key that is used to decrypt.
Example of 'confedential key use':

Bob has: Bob private key, Bob public key, Alice public key
Alice has: Alice private key, Alice public key, Bob public key

Bob wants to send a message to Alice:
Bob uses 'Alice public key' to encrypt the message, sends it =>
Alice uses 'Alice private key' to decrypt the message.
Alice wants to reply and sends a message to Bob:
Alice uses 'Bob public key' to encrypt the message, sends it =>
Bob uses 'Bob private key' to decrypt the message.

Public key is only used to encrypt message
  Private key is only used to decrypt message encrypted with Public key

Now that you know what the basic idea of the 'Public key' and 'Private key' is, have a look at this image explaining the typical SSL communication and the use of the keys.
","7110","<php><openssl><public-key-encryption>","6","7","4","2019-08-02 11:32:59","30370806","0","3","411022","","2013-01-11 17:21:44","2012-08-10 16:48:05",""
"11905983","Asymmetric encryption using PHP","I have a problem that is driving me crazy.
I have created a pair of keys doing:
$res = openssl_pkey_new(array('private_key_bits' => 2048));

/* Extract the private key from $res to $privKey */
openssl_pkey_export($res, $privKey);

/* Extract the public key from $res to $pubKey */
$pubKey = openssl_pkey_get_details($res);
$pubKey = $pubKey[""key""];

Using this code, I have $pubKey and $privKey.
I can encrypt/decrypt correctly, but I have a big doubt regarding the DECRYPTION.
At the moment I crypt data doing:
openssl_public_encrypt($data, $encrypted, $pubKey);

It encrypt my data correctly, but reading the PHP Doc, I found:
http://php.net/manual/en/function.openssl-public-decrypt.php
Can I decrypt data using PUBLIC KEY ?? Why ??
I know the public key is useful to ENCRYPT data, but only the owner of the private key can DECRYPT data.
If I can decrypt data using the public key, let the users that know the public key decrypt easily the messages.
Could someone explain this to me? I'm looking for a method to use two keys, the first to ENCRYPT and the second (only the second) to DECRYPT.
Thanks
","Signatures, a kind of hash proving the owner of the private key created the encrypted message.  Good for Alice to prove Bob wrote her a message (encrypted with Alice's public key) - rather than Joe.  Bob creates a unique signature using his private key, which Alice can confirm using Bob's public.
:)
","7110","<php><openssl><public-key-encryption>","6","3","4","2019-08-02 11:32:59","30370806","0","3","411022","","2013-01-11 17:21:44","2012-08-10 16:48:05",""
"11905983","Asymmetric encryption using PHP","I have a problem that is driving me crazy.
I have created a pair of keys doing:
$res = openssl_pkey_new(array('private_key_bits' => 2048));

/* Extract the private key from $res to $privKey */
openssl_pkey_export($res, $privKey);

/* Extract the public key from $res to $pubKey */
$pubKey = openssl_pkey_get_details($res);
$pubKey = $pubKey[""key""];

Using this code, I have $pubKey and $privKey.
I can encrypt/decrypt correctly, but I have a big doubt regarding the DECRYPTION.
At the moment I crypt data doing:
openssl_public_encrypt($data, $encrypted, $pubKey);

It encrypt my data correctly, but reading the PHP Doc, I found:
http://php.net/manual/en/function.openssl-public-decrypt.php
Can I decrypt data using PUBLIC KEY ?? Why ??
I know the public key is useful to ENCRYPT data, but only the owner of the private key can DECRYPT data.
If I can decrypt data using the public key, let the users that know the public key decrypt easily the messages.
Could someone explain this to me? I'm looking for a method to use two keys, the first to ENCRYPT and the second (only the second) to DECRYPT.
Thanks
","In asymetric public/private key encripcion usually:

Bob generated his public/private key pair
Bob shared his public key 
Alice crypts some message with the public key of Bob
She sends the message 
Only Bob can decrypt with his private key. 


Using that aproach and the following code Alice can succesfully send a message to Bob
/**  BOB CODE  **/
$key = openssl_pkey_new(array('private_key_bits' => 2048));

$bob_key = openssl_pkey_get_details($key);
$bob_public_key = $bob_key['key'];

That's the basic infrastructure you had in your code and now is code that Bob executes. Bob generates the key pair and sends to Alice, in a real environment there must be a public key sharing mechanism.
When Alice gets Bob's public key, she cyphers her message with this key:
/** ALICE CODE **/
$alice_msg = ""Hi Bob, im sending you a private message"";
openssl_public_encrypt($alice_msg, $pvt_msg, $bob_public_key);

Finally Bob receives the message and decrypts it
/**  BOB CODE **/
openssl_private_decrypt( $pvt_msg, $bob_received_msg, $key);
print $bob_received_msg;

","7110","<php><openssl><public-key-encryption>","6","7","4","2019-08-02 11:32:59","30370806","0","3","411022","","2013-01-11 17:21:44","2012-08-10 16:48:05",""
"11905983","Asymmetric encryption using PHP","I have a problem that is driving me crazy.
I have created a pair of keys doing:
$res = openssl_pkey_new(array('private_key_bits' => 2048));

/* Extract the private key from $res to $privKey */
openssl_pkey_export($res, $privKey);

/* Extract the public key from $res to $pubKey */
$pubKey = openssl_pkey_get_details($res);
$pubKey = $pubKey[""key""];

Using this code, I have $pubKey and $privKey.
I can encrypt/decrypt correctly, but I have a big doubt regarding the DECRYPTION.
At the moment I crypt data doing:
openssl_public_encrypt($data, $encrypted, $pubKey);

It encrypt my data correctly, but reading the PHP Doc, I found:
http://php.net/manual/en/function.openssl-public-decrypt.php
Can I decrypt data using PUBLIC KEY ?? Why ??
I know the public key is useful to ENCRYPT data, but only the owner of the private key can DECRYPT data.
If I can decrypt data using the public key, let the users that know the public key decrypt easily the messages.
Could someone explain this to me? I'm looking for a method to use two keys, the first to ENCRYPT and the second (only the second) to DECRYPT.
Thanks
","Short Answer
A message encrypted by a public key can only be decrypted by the matching private key. 
Long Answer
Asymmetric encryption works both ways.
So why is there even an openssl_public_decrypt() function? you might ask. As the documentation states it can decrypt a message which has been encrypted by a private key. As wally mentioned before this can be used for signatures.
Let's say Alice waits for a message from Bob, but not from anybody else. So Bob uses his own private key to encrypt the message (e.g using openssl_private_encrypt()). When Alice recieves any message she tries to decrypt it using Bob's public key. If this succeeds she knows that the message came from Bob.
Note that encrypting using the private key would not be secure because anybody (who has access to the public key) can decrypt the message. In practise you would probably use a combination of both methods (append a signature encrypted with Bob's private key and then encrypt the entire message using Alice's public key).
","7110","<php><openssl><public-key-encryption>","6","1","4","2019-08-02 11:32:59","30370806","0","3","411022","","2013-01-11 17:21:44","2012-08-10 16:48:05",""
"9599124","GnuPG/PGP and SSL: Sharing the same private key?","I'm trying to sort out my use of digital signatures and encryption. I understand that there are 2 main ways to do this: the PGP way and the SSL way.
What I would like to know if it's possible to use the same private key for both SSL certificate and GnuPG, providing that this is a RSA 2048 bit key.
I already have an SSL certificate signed by a CA, so I was hoping to use that certificate's private key as the GnuPG master private key.
I know that we can't make assertions between the SSL and GnuPG this way, but I would like to have only one private key (thus only having to protect one piece of data)
Thanks
","You can do this, but it's not necessarily good practice.
Firstly, when you say ""SSL certificate"", you probably mean ""X.509 certificate"". SSL/TLS uses X.509 certificates most of the time, but it can also use OpenPGP certificates (as far as I'm aware, only GnuTLS supports them).
Note that I'm also using the expression ""OpenPGP certificate"". Most people call them ""(Open)PGP public keys"", but they are in fact certificates: they're the combination of a public key, an identifier and some attributes, signed by other entities which attach their signature to it, so as to form the overall certificate. Strictly speaking, it's not just a public key.
The main difference between an X.509 certificate and a PGP certificate is that the X.509 can only have one signature (that of the issuer), whereas multiple signatures can be added onto a PGP certificate. (The PGP model can be used for a hierarchical PKI-like model, whereas the PKI model can't be used to handle the Web-of-Trust model.)
This Java code demonstrates how to ""convert"" a set of PGP keys into a self-signed X.509 certificate. In principle, you could also turn it into a CSR to get an X.509 certificate from CA. Whether it's a good idea to do so is a different matter.
Firstly, it's usually a good idea to re-generate new key-pairs once in a while. Typically, that's one of the reasons X.509 certificates used for SSL have an end of validity date (PGP signatures can also be limited in time).
You would also effectively put all your eggs in the same basket. If one of the key is compromised, both your X.509 and PGP certificates would be compromised.
More importantly, it's considered bad practice to re-use the same keys for signing and encryption: using them for two different applications (SSL/TLS and GnuPG) would only make the problem worse.
","6947","<encryption><ssl><public-key-encryption><gnupg><openpgp>","7","10","1","2012-03-07 11:19:19","9600481","2","","","","","2012-03-07 09:51:12",""
"7983488","Java RSA/CBC encryption implementation","Help, anybody could give me a Java implementation of RSA/CBC?
Audit said RSA/ECB/PKCS1Padding is too weak cannot put into law court.
(Is he challenging Java PKI in fact? He suggested AES...)
I know nothing about Bouncy Castle, tell me if I can plug in.
http://bouncy-castle.1462172.n4.nabble.com/RSA-CBC-encoding-td1465404.html
","I think it's natively supported by the JDK. See http://download.oracle.com/javase/6/docs/technotes/guides/security/StandardNames.html
But AES and RSA are two very different algorithms, which are not normally used for the same kind of problem. You would typically use RSA in a handshake to negociate a secret AES key, and use AES to encrypt the rest of the conversation.
","6828","<java><rsa><bouncycastle><public-key-encryption><pki>","2","3","1","2011-11-02 16:11:35","","3","","","","","2011-11-02 16:03:28",""
"21586660","Simple RMI Server with SSL","Trying to setup a simple RMI server with SSL encryption. It's for a simple chat application that has a java server app and a java client app, however, I can't even get it working with a simple RMI example at the moment!
The only way I can get it to work is if both the client & server have both the same truststore & keystore. To me though, this sounds incorrect as it means each client has the server's private key too.. 
I followed this guide to create the trust/keystores. I first tried generating a keystore & truststore and just running the server with the keystore & the client with the truststore. That didn't work so I then generated a pair for each and loaded as shown in the code below.
It think I might be missing something obvious somewhere just can't for the life of my figure out what I'm doing wrong. I currently have the following, but when running the server I get the errors below: 
Error:
Server exception: java.rmi.ConnectIOException: error during JRMP connection establishment; nested exception is: 
    javax.net.ssl.SSLHandshakeException: sun.security.validator.ValidatorException: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target
java.rmi.ConnectIOException: error during JRMP connection establishment; nested exception is: 
    javax.net.ssl.SSLHandshakeException: sun.security.validator.ValidatorException: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target
    at sun.rmi.transport.tcp.TCPChannel.createConnection(Unknown Source)
    at sun.rmi.transport.tcp.TCPChannel.newConnection(Unknown Source)
    at sun.rmi.server.UnicastRef.newCall(Unknown Source)
    at sun.rmi.registry.RegistryImpl_Stub.bind(Unknown Source)
    at Server.main(Server.java:38)

Hello.java
import java.rmi.Remote;
import java.rmi.RemoteException;

public interface Hello extends Remote {

    String sayHello() throws RemoteException;

}

Server.java
import java.io.IOException;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;

import javax.net.ssl.SSLServerSocket;
import javax.net.ssl.SSLServerSocketFactory;
import javax.net.ssl.SSLSocket;
import javax.net.ssl.SSLSocketFactory;
import javax.rmi.ssl.SslRMIClientSocketFactory;
import javax.rmi.ssl.SslRMIServerSocketFactory;


public class Server extends UnicastRemoteObject implements Hello {

    private static final long serialVersionUID = 5186776461749320975L;

    protected Server(int port) throws IOException {

        super(port, new SslRMIClientSocketFactory(), new SslRMIServerSocketFactory(null, null, true));      
    }

    @Override
    public String sayHello() {
        return ""Hello, world!"";
    }

    public static void main(String[] args) throws RemoteException, IllegalArgumentException {

        try {           

            setSettings();

            Server server = new Server(2020);

            LocateRegistry.createRegistry(2020, new SslRMIClientSocketFactory(), new SslRMIServerSocketFactory(null, null, true));
            System.out.println(""RMI registry running on port "" + 2020);             

            Registry registry = LocateRegistry.getRegistry(""DAVE-PC"", 2020, new SslRMIClientSocketFactory());

            registry.bind(""Hello"",  server);

        } catch (Exception e) {
            System.err.println(""Server exception: "" + e.toString());
            e.printStackTrace();
        }

    }

    private static void setSettings() {

        String pass = ""password"";

        System.setProperty(""javax.net.ssl.debug"", ""all"");

    System.setProperty(""javax.net.ssl.keyStore"", ""C:\\ssl\\serverkeystore.jks"");
    System.setProperty(""javax.net.ssl.keyStorePassword"", pass);
    System.setProperty(""javax.net.ssl.trustStore"", ""C:\\ssl\\servertruststore.jks"");
    System.setProperty(""javax.net.ssl.trustStorePassword"", pass);




    }

}

Client.java
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import javax.rmi.ssl.SslRMIClientSocketFactory;

public class Client {

    private Client() {}

    public static void main(String[] args) {        

        try {

            setSettings();  

            Registry registry = LocateRegistry.getRegistry(""DAVE-PC"", 2020, new SslRMIClientSocketFactory());

            Hello hello = (Hello) registry.lookup(""Hello"");

            String message = hello.sayHello();

            System.out.println(message);            

        } catch (Exception e) {
            System.err.println(""Client exception: "" + e.toString());
            e.printStackTrace();
        }
    }

private static void setSettings() {

        String pass = ""password"";
        System.setProperty(""javax.net.ssl.debug"", ""all"");
    System.setProperty(""javax.net.ssl.keyStore"", ""C:\\ssl\\clientkeystore.jks"");
    System.setProperty(""javax.net.ssl.keyStorePassword"", pass);
    System.setProperty(""javax.net.ssl.trustStore"", ""C:\\ssl\\clienttruststore.jks"");
    System.setProperty(""javax.net.ssl.trustStorePassword"", pass);

    }

}

","The PKIX error means that the client didn't trust the server certificate, where the server in this case was the Registry. 
To clarify, you need two private keys and two keystores to hold them in, one each. You then need to create certificates in each keystore, export them, and import them into the peer's truststore. The server's truststore must trust the client's keystore, and vice versa.
Your code looks mostly OK. The result of createRegistry() should be stored in a static variable, to prevent it being GC'd. You don't need a serialVersionUID in the server class, whatever your IDE may tell you. It doesn't get serialized, at least not by RMI.
EDIT The problem is here:
System.setProperty(""javax.net.ssl.keyStore"", ""C:\\ssl\\keystore-server.jks"");
System.setProperty(""javax.net.ssl.trustStore"", ""C:\\ssl\\truststore-client.jks"");

which should be:
System.setProperty(""javax.net.ssl.keyStore"", ""C:\\ssl\\keystore-server.jks"");
System.setProperty(""javax.net.ssl.trustStore"", ""C:\\ssl\\truststore-server.jks"");

and here:
System.setProperty(""javax.net.ssl.keyStore"", ""C:\\ssl\\keystore-client.jks"");
System.setProperty(""javax.net.ssl.trustStore"", ""C:\\ssl\\truststore-server.jks""

which should be:
System.setProperty(""javax.net.ssl.keyStore"", ""C:\\ssl\\keystore-client.jks"");
System.setProperty(""javax.net.ssl.trustStore"", ""C:\\ssl\\truststore-client.jks""

EDIT 2 The underlying problem is that the trust store you need when binding to the Registry is the client truststore, but the truststore you need when running the server is the server truststore.
There are at least three possible solutions, in increasing order of merit:

Set up a subclass of SslRMIClientSocketFactory with its own SSLContext with its own TrustManager loaded from the client truststore, and override createSocket(). Ouch.
Import the server's certificate into the server's truststore as well.
Use the return value of createRegistry() to do the bind() instead of calling getRegistry() in the server at all, and avoid the whole problem.

","6804","<java><ssl><rmi><keystore><public-key-encryption>","7","2","1","2017-10-13 06:21:36","21588835","1","8","-1","","2017-10-13 06:21:36","2014-02-05 19:28:12",""
"22842235","java.lang.RuntimeException: error:0D0680A8:asn1 encoding routines:ASN1_CHECK_TLEN:wrong tag","I get this error(in the title). I am not sure why, help, please. Code below:
public static String decryptRSA(Context mContext, byte[] message) throws Exception { 


    InputStream in = mContext.getResources().openRawResource(R.raw.publicrsakey);
    X509EncodedKeySpec x509EncodedKeySpec = new X509EncodedKeySpec(org.apache.commons.io.IOUtils.toByteArray(in));

    PublicKey publicKey = 
            KeyFactory.getInstance(""RSA"").generatePublic(x509EncodedKeySpec);

    Cipher cipher = Cipher.getInstance(""RSA"");
    cipher.init(Cipher.ENCRYPT_MODE, publicKey);
    final String encryptedString = Base64.encode(cipher.doFinal(message));

    return encryptedString;


}   

Edit. In the end i managed this problem using public key file with .der extension (before it was .crt), and the code that worked was:
InputStream in = mContext.getResources().openRawResource(R.raw.key);

        CertificateFactory cf = CertificateFactory.getInstance(""X509"");
        Certificate cert = cf.generateCertificate(new ByteArrayInputStream(org.apache.commons.io.IOUtils.toByteArray(in)));
        PublicKey pubKey = cert.getPublicKey();
        try
        {
            Cipher cipher = Cipher.getInstance(""RSA/ECB/PKCS1Padding"");            
            cipher.init(Cipher.ENCRYPT_MODE, pubKey);
            final String encryptedString = Base64.encode(cipher.doFinal(message));
            return encryptedString;
        }
        catch (Exception e)
        {
            e.printStackTrace();
        }
        return """";   

But ""divanov"" answered the question i was asking.
","Exception error:0D0680A8:asn1 encoding routines:ASN1_CHECK_TLEN:wrong tag means that result of
InputStream in = mContext.getResources().openRawResource(R.raw.publicrsakey);
byte[] pubKeyBytes = org.apache.commons.io.IOUtils.toByteArray(in);

doesn't represent ASN.1 DER encoded message. Print it somewhere as hex to verify what is an exact problem
Log.v(""HEX"", org.apache.commons.codec.binary.Hex.encodeHexString(pubKeyBytes);

","6744","<java><android><public-key-encryption>","4","2","1","2014-04-04 16:02:17","22844876","0","4","3325759","","2014-04-04 16:02:17","2014-04-03 15:27:59",""
"6886240","Python - Pycrypto - Sending encrypted data over network","I am trying to get 2 programs to share encrypted data over a network using public keys, but I am stuck with a difficult problem : the information that is shared (the keys and/or the encrypted data) seems to get modified. I am hoping to keep the encrypted data format as well as the format of the keys as simple as possible in order to allow compatibility with other languages.
To break down the problem, I have created 2 programs : Keyreceive and Keysend.
They execute in this order : 

Keyreceive starts up and waits to receive the encrypted data
Keysend starts up and generates an RSA key, saving the exported private key to a file
Keysend encrypts a piece of data and sends it to Keyreceive over the network
Keyreceive imports the private key from the same file, and uses it to decrypt the encrypted data
Keysend also decrypts the encrypted data to verify the result

Keysend.py
import socket
import os
from Crypto.PublicKey import RSA
from Crypto import Random

rng = Random.new().read
RSAkey = RSA.generate(1024, rng) 

privatekey = RSAkey
publickey = RSAkey.publickey()
print(privatekey.exportKey()) #export under the 'PEM' format (I think)
print(publickey.exportKey())

file = open(""Keys.txt"", ""w"")
file.write(privatekey.exportKey()) #save exported private key
file.close()

data = ""hello world""
enc_data = publickey.encrypt(data, 16) #encrypt message with public key
print(str(enc_data))

host = ""localhost""
port = 12800
connexion = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
connexion.connect((host, port))
connexion.send(str(enc_data)) # send encrypted data, this appears to be the source of the problem

dec_data = RSAkey.decrypt(enc_data) # test decryption
print(dec_data)

os.system(""pause"")

Keyreceive.py
import socket
import os
from Crypto.PublicKey import RSA
from Crypto import Random

host = ''
port = 12800

connexion = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
connexion.bind((host, port))
connexion.listen(5)
clientconnexion, connexioninfo = connexion.accept()
enc_data = clientconnexion.recv(1024) # receive encrypted data
print(enc_data)

file = open(""Keys.txt"", ""r"")
privatestr = file.read() # retrieve exported private key from file
file.close()
print(privatestr)

privatekey = RSA.importKey(privatestr) # import private key
data = privatekey.decrypt(enc_data) # decrypt sent encrypted data
print(data)

os.system(""pause"")

After both files have finished decrypting the encrypted data, Keysender outputs the original message : ""hello world"", whereas Keyreceiver outputs gibberish.
If there is ""hidden"" information in the encrypted data and key formats, would there be some way of writing them in a ""pure"" text format?
","You're right about which line is the source of the problem.
connexion.send(str(enc_data))

enc_data here is a tuple, the first (and in fact only) element of which is a string containing the actual ciphertext. When you are calling str on it, you're getting Python's attempt to convert the tuple to a string, which is not what you want. If you change it to this:
connexion.send(enc_data[0])

then it should do what you want.
","6705","<python><file><networking><public-key-encryption><pycrypto>","3","5","1","2011-12-07 15:55:48","6886318","1","2","308903","","2011-12-07 15:55:48","2011-07-30 22:01:57",""
"4162240","key algorithm in keytool of java","HI,
Im very new to this cryptography field .I have a small doubt regarding key algo and signature algo in using the keytool in generating public-private key pairs .I just wanna know what exactly is use of these two algorithms .
Thanks,
Bhaswanth
","You can read all about Java Crypto here.
","6527","<java><keytool><public-key-encryption>","2","3","2","2011-05-24 11:37:13","","0","","","","","2010-11-12 06:46:04",""
"4162240","key algorithm in keytool of java","HI,
Im very new to this cryptography field .I have a small doubt regarding key algo and signature algo in using the keytool in generating public-private key pairs .I just wanna know what exactly is use of these two algorithms .
Thanks,
Bhaswanth
","A well explained article about keytool you can find at devdaily.com blog. At this site you can also find more resources about java cryptography and true license library.
","6527","<java><keytool><public-key-encryption>","2","0","2","2011-05-24 11:37:13","","0","","","","","2010-11-12 06:46:04",""
"20164397","decrypt a message with RSA public key with PyCrypto","I want to decrypt a message with RSA public key with PyCrypto I am useing code below but getting no private key error what should changed in code below?
from Crypto.PublicKey import RSA
from Crypto.Cipher import PKCS1_OAEP
import base64
licence_key=""bla bla""
licence_key_in_bytes=licence_key.encode(""utf-8"")
encrypted=base64.b16decode(licence_key_in_bytes)
key = open(""public_key"", ""r"").read() 
rsakey = RSA.importKey(key)
rsakey = PKCS1_OAEP.new(rsakey)
decrypted_message= rsakey.decrypt(encrypted)

","Encryption (providing confidentiality)

If you want to encrypt/decrypt in the same application, then you simple should swap the public key and the private key.
Encryption is always performed by the public key, decryption by the private key.
RSA does not have any security if you do it the other way around. 
If you know the private key then a public key with a small public exponent can be easily guessed by an attacker.

Signature generation (providing authenticity & integrity)

From the code however it seems you want to sign a message, but you are using an algorithm (RSA OAEP) that has been designed explicitly for encryption. 
Unfortunately both concepts are not compatible. First of all, OAEP padding mechanism is not compatible with the one for signing.

Furthermore, there may be differences in handling the keys 

the library will handle private keys operations differently from public key operations. - - Private keys require security, such as protection against side channel attacks.
Note that that a public key allows for a larger range of values than a private key (the public exponent may be small or large, the private exponent should always be near the key size). 

So the components of a private key will always match those of a public key. But as public keys normally have a small public exponent, public keys may not always be accepted as private keys.

The only good solution is to replace your own signing operation with the correct one. - -- Fortunately Python handles PSS signing operations, take a look at the documentation here, which helpfully contains sample code.

","6402","<python><rsa><public-key-encryption><pycrypto>","5","3","1","2014-05-14 11:04:54","20174993","7","","","","","2013-11-23 15:52:37",""
"19233053","Hashing from a public key to a bitcoin address in php","I am trying to follow the instructions required to turn a 65 byte public key into a bitcoin address using php.  The instructions are quite explicit.  Can anyone help me with the practicality of doing that in php?
Instructions are
1 - Take the corresponding public key generated with it (65 bytes, 1 byte 0x04, 32 bytes corresponding to X coordinate, 32 bytes corresponding to Y coordinate)
0450863AD64A87AE8A2FE83C1AF1A8403CB53F53E486D8511DAD8A04887E5B23522CD470243453A299FA9E77237716103ABC11A1DF38855ED6F2EE187E9C582BA6
2 - Perform SHA-256 hashing on the public key
600FFE422B4E00731A59557A5CCA46CC183944191006324A447BDB2D98D4B408
3 - Perform RIPEMD-160 hashing on the result of SHA-256
010966776006953D5567439E5E39F86A0D273BEE
4 - Add version byte in front of RIPEMD-160 hash (0x00 for Main Network)
00010966776006953D5567439E5E39F86A0D273BEE
5 - Perform SHA-256 hash on the extended RIPEMD-160 result
445C7A8007A93D8733188288BB320A8FE2DEBD2AE1B47F0F50BC10BAE845C094
6 - Perform SHA-256 hash on the result of the previous SHA-256 hash
D61967F63C7DD183914A4AE452C9F6AD5D462CE3D277798075B107615C1A8A30
7 - Take the first 4 bytes of the second SHA-256 hash. This is the address checksum
D61967F6
8 - Add the 4 checksum bytes from point 7 at the end of extended RIPEMD-160 hash from point 4. This is the 25-byte binary Bitcoin Address.
00010966776006953D5567439E5E39F86A0D273BEED61967F6
9 - Convert the result from a byte string into a base58 string using Base58Check encoding. This is the most commonly used Bitcoin Address format
16UwLL9Risc3QfPqBUvKofHmBQ7wMtjvM
My first attempt is 
// step 1

$publickey='0450863AD64A87AE8A2FE83C1AF1A8403CB53F53E486D8511DAD8A04887E5B23522CD470243453A299FA9E77237716103ABC11A1DF38855ED6F2EE187E9C582BA6';
$step1=$publickey;

echo ""step1 "".$publickey.""<br>"";

// step 2

$step2=hash(""sha256"",$step1);
echo ""step2 "".$step2.""<br>"";

// step 3

$step3=hash('ripemd160',$step2);
echo ""step3 "".$step3.""<br>"";

// step 4

$step4=""00"".$step3;
echo ""step4 "".$step4.""<br>"";

// step 5

$step5=hash(""sha256"",$step4);
echo ""step5 "".$step5.""<br>"";

// step 6

$step6=hash(""sha256"",$step5);
echo ""step6 "".$step6.""<br>"";

// step 7

$checksum=substr($step6,0,8);
echo ""step7 "".$checksum.""<br>"";

// step 8

$step8=$step4.$checksum;
echo ""step8 "".$step8.""<br>"";

//step 9

$step9=base58_encode($step8);
echo ""step9 "".$step9.""<br><br>"";

This fails at the first step.  Any help appreciated.
This is the output
step1 0450863AD64A87AE8A2FE83C1AF1A8403CB53F53E486D8511DAD8A04887E5B23522CD470243453A299FA9E77237716103ABC11A1DF38855ED6F2EE187E9C582BA6
step2 32511e82d56dcea68eb774094e25bab0f8bdd9bc1eca1ceeda38c7a43aceddce
step3 7528c664cdc34c5ce809778eb688d32f89a538c0
step4 007528c664cdc34c5ce809778eb688d32f89a538c0
step5 86e76f4ff0bf0387339ac70a552e0fed615f7def34cc4809df1429e243f6c1fa
step6 b885b7225b370e7ff27ee0afb4f89b52b8675d5dc342d63de3abe7535f86cadb
step7 b885b722
step8 007528c664cdc34c5ce809778eb688d32f89a538c0b885b722
step9 1

Base58 function is
function base58_encode($input)
{
    $alphabet =     '123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ';
    $base_count = strval(strlen($alphabet));
    $encoded = '';
    while (floatval($input) >= floatval($base_count))
    {
        $div = bcdiv($input, $base_count);
        $mod = bcmod($input, $base_count);
        $encoded = substr($alphabet, intval($mod), 1) . $encoded;
        $input = $div;
    }
    if (floatval($input) > 0)
    {
        $encoded = substr($alphabet, intval($input), 1) . $encoded;
    }
    return($encoded);
}

","Look carefully at your variable names. $publickey is not the same as $publicKey - note capitalisation.
","6366","<php><hash><public-key-encryption><bitcoin>","3","2","4","2019-02-28 19:17:50","19243008","6","2","2855984","","2013-10-07 20:52:22","2013-10-07 19:32:50",""
"19233053","Hashing from a public key to a bitcoin address in php","I am trying to follow the instructions required to turn a 65 byte public key into a bitcoin address using php.  The instructions are quite explicit.  Can anyone help me with the practicality of doing that in php?
Instructions are
1 - Take the corresponding public key generated with it (65 bytes, 1 byte 0x04, 32 bytes corresponding to X coordinate, 32 bytes corresponding to Y coordinate)
0450863AD64A87AE8A2FE83C1AF1A8403CB53F53E486D8511DAD8A04887E5B23522CD470243453A299FA9E77237716103ABC11A1DF38855ED6F2EE187E9C582BA6
2 - Perform SHA-256 hashing on the public key
600FFE422B4E00731A59557A5CCA46CC183944191006324A447BDB2D98D4B408
3 - Perform RIPEMD-160 hashing on the result of SHA-256
010966776006953D5567439E5E39F86A0D273BEE
4 - Add version byte in front of RIPEMD-160 hash (0x00 for Main Network)
00010966776006953D5567439E5E39F86A0D273BEE
5 - Perform SHA-256 hash on the extended RIPEMD-160 result
445C7A8007A93D8733188288BB320A8FE2DEBD2AE1B47F0F50BC10BAE845C094
6 - Perform SHA-256 hash on the result of the previous SHA-256 hash
D61967F63C7DD183914A4AE452C9F6AD5D462CE3D277798075B107615C1A8A30
7 - Take the first 4 bytes of the second SHA-256 hash. This is the address checksum
D61967F6
8 - Add the 4 checksum bytes from point 7 at the end of extended RIPEMD-160 hash from point 4. This is the 25-byte binary Bitcoin Address.
00010966776006953D5567439E5E39F86A0D273BEED61967F6
9 - Convert the result from a byte string into a base58 string using Base58Check encoding. This is the most commonly used Bitcoin Address format
16UwLL9Risc3QfPqBUvKofHmBQ7wMtjvM
My first attempt is 
// step 1

$publickey='0450863AD64A87AE8A2FE83C1AF1A8403CB53F53E486D8511DAD8A04887E5B23522CD470243453A299FA9E77237716103ABC11A1DF38855ED6F2EE187E9C582BA6';
$step1=$publickey;

echo ""step1 "".$publickey.""<br>"";

// step 2

$step2=hash(""sha256"",$step1);
echo ""step2 "".$step2.""<br>"";

// step 3

$step3=hash('ripemd160',$step2);
echo ""step3 "".$step3.""<br>"";

// step 4

$step4=""00"".$step3;
echo ""step4 "".$step4.""<br>"";

// step 5

$step5=hash(""sha256"",$step4);
echo ""step5 "".$step5.""<br>"";

// step 6

$step6=hash(""sha256"",$step5);
echo ""step6 "".$step6.""<br>"";

// step 7

$checksum=substr($step6,0,8);
echo ""step7 "".$checksum.""<br>"";

// step 8

$step8=$step4.$checksum;
echo ""step8 "".$step8.""<br>"";

//step 9

$step9=base58_encode($step8);
echo ""step9 "".$step9.""<br><br>"";

This fails at the first step.  Any help appreciated.
This is the output
step1 0450863AD64A87AE8A2FE83C1AF1A8403CB53F53E486D8511DAD8A04887E5B23522CD470243453A299FA9E77237716103ABC11A1DF38855ED6F2EE187E9C582BA6
step2 32511e82d56dcea68eb774094e25bab0f8bdd9bc1eca1ceeda38c7a43aceddce
step3 7528c664cdc34c5ce809778eb688d32f89a538c0
step4 007528c664cdc34c5ce809778eb688d32f89a538c0
step5 86e76f4ff0bf0387339ac70a552e0fed615f7def34cc4809df1429e243f6c1fa
step6 b885b7225b370e7ff27ee0afb4f89b52b8675d5dc342d63de3abe7535f86cadb
step7 b885b722
step8 007528c664cdc34c5ce809778eb688d32f89a538c0b885b722
step9 1

Base58 function is
function base58_encode($input)
{
    $alphabet =     '123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ';
    $base_count = strval(strlen($alphabet));
    $encoded = '';
    while (floatval($input) >= floatval($base_count))
    {
        $div = bcdiv($input, $base_count);
        $mod = bcmod($input, $base_count);
        $encoded = substr($alphabet, intval($mod), 1) . $encoded;
        $input = $div;
    }
    if (floatval($input) > 0)
    {
        $encoded = substr($alphabet, intval($input), 1) . $encoded;
    }
    return($encoded);
}

","Your problems are as follow:

Variable names $publickey and $publicKey are not equivalent.
$checksum=substr($step6,0,4); should be $checksum=substr($step6,0,8); because you need two hex chars to represent one byte.
$step8=$step4+$checksum; should be $step8=$step4.$checksum; 

Also, I don't know where your base58_encode() function comes from, but I hope it uses BCmath, because the number represented by 00ba084d3f143f2896809d3f1d7dffed472b39d8de7a39cf51 [step 8's result] is too large for PHP to handle internally.
edit
I'm super bored at work today, here's my conversion code with bonus BCmath for ginormous [say, 58-digit?] numbers.
<?php

// original arbitrary encode function
function arb_encode($num, $basestr) {
    $base = strlen($basestr);
    $rep = '';

    while($num > 0) {
        $rem = $num % $base;
        $rep = $basestr[$rem] . $rep;
        $num = ($num - $rem) / $base;
    }
    return $rep;
}

function arb_decode($num, $basestr) {
    $base = strlen($basestr);
    $dec = 0;

    $num_arr = str_split((string)$num);
    $cnt = strlen($num);
    for($i=0; $i < $cnt; $i++) {
        $pos = strpos($basestr, $num_arr[$i]);
        if( $pos === false ) {
            Throw new Exception(sprintf('Unknown character %s at offset %d', $num_arr[$i], $i));
        }
        $dec = ($dec * $base) + $pos;
    }
    return $dec;
}

// BCmath version for huge numbers
function bc_arb_encode($num, $basestr) {
    if( ! function_exists('bcadd') ) {
        Throw new Exception('You need the BCmath extension.');
    }

    $base = strlen($basestr);
    $rep = '';

    while( true ){
        if( strlen($num) < 2 ) {
            if( intval($num) <= 0 ) { break; }
        }
        $rem = bcmod($num, $base);
        $rep = $basestr[intval($rem)] . $rep;
        $num = bcdiv(bcsub($num, $rem), $base);
    }
    return $rep;
}

function bc_arb_decode($num, $basestr) {
    if( ! function_exists('bcadd') ) {
        Throw new Exception('You need the BCmath extension.');
    }

    $base = strlen($basestr);
    $dec = '0';

    $num_arr = str_split((string)$num);
    $cnt = strlen($num);
    for($i=0; $i < $cnt; $i++) {
        $pos = strpos($basestr, $num_arr[$i]);
        if( $pos === false ) {
            Throw new Exception(sprintf('Unknown character %s at offset %d', $num_arr[$i], $i));
        }
        $dec = bcadd(bcmul($dec, $base), $pos);
    }
    return $dec;
}


// base 58 alias
function bc_base58_encode($num) {
    return bc_arb_encode($num, '123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ');
}
function bc_base58_decode($num) {
    return bc_arb_decode($num, '123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ');
}

//hexdec with BCmath
function bc_hexdec($num) {
    return bc_arb_decode(strtolower($num), '0123456789abcdef');
}
function bc_dechex($num) {
    return bc_arb_encode($num, '0123456789abcdef');
}

// example
$orig    = '00ba084d3f143f2896809d3f1d7dffed472b39d8de7a39cf51';
$bten    = bc_hexdec($orig);
$base58  = bc_base58_encode($bten);
$backten = bc_base58_decode($base58);
$back    = bc_dechex($backten);
echo ""Orig: "" . $orig . ""\n"";
echo ""bten: "" . $bten . ""\n"";
echo ""58:   "" . $base58 . ""\n"";
echo ""ag10: "" . $backten . ""\n"";
echo ""Back:   "" . $back  . ""\n"";

edit2
Don't use base_convert() for numbers this large, it appears to be unreliable. I was writing the necessary bc_arb_decode() counterparts and found that the input and output were differing using base_convert() versus arb_convert($num, '0123456789abcdef'); and after comparing the results with Wolfram Alpha it seems that PHP is incorrectly converting the number.
Hex:           00ba084d3f143f2896809d3f1d7dffed472b39d8de7a39cf51
PHP's decode:  4561501878697786606686086062428080084446806606846864824262
Mine:          4561501878697784703577561586669353227270827349968709865297
Wolfram Alpha: 4561501878697784703577561586669353227270827349968709865297

You can see that PHP is way off. [1.9E42 aka 1.9 quintillion septillion] I've updated my code to include the arb_decode() functions which appear to do things correctly.
","6366","<php><hash><public-key-encryption><bitcoin>","3","2","4","2019-02-28 19:17:50","19243008","6","2","2855984","","2013-10-07 20:52:22","2013-10-07 19:32:50",""
"19233053","Hashing from a public key to a bitcoin address in php","I am trying to follow the instructions required to turn a 65 byte public key into a bitcoin address using php.  The instructions are quite explicit.  Can anyone help me with the practicality of doing that in php?
Instructions are
1 - Take the corresponding public key generated with it (65 bytes, 1 byte 0x04, 32 bytes corresponding to X coordinate, 32 bytes corresponding to Y coordinate)
0450863AD64A87AE8A2FE83C1AF1A8403CB53F53E486D8511DAD8A04887E5B23522CD470243453A299FA9E77237716103ABC11A1DF38855ED6F2EE187E9C582BA6
2 - Perform SHA-256 hashing on the public key
600FFE422B4E00731A59557A5CCA46CC183944191006324A447BDB2D98D4B408
3 - Perform RIPEMD-160 hashing on the result of SHA-256
010966776006953D5567439E5E39F86A0D273BEE
4 - Add version byte in front of RIPEMD-160 hash (0x00 for Main Network)
00010966776006953D5567439E5E39F86A0D273BEE
5 - Perform SHA-256 hash on the extended RIPEMD-160 result
445C7A8007A93D8733188288BB320A8FE2DEBD2AE1B47F0F50BC10BAE845C094
6 - Perform SHA-256 hash on the result of the previous SHA-256 hash
D61967F63C7DD183914A4AE452C9F6AD5D462CE3D277798075B107615C1A8A30
7 - Take the first 4 bytes of the second SHA-256 hash. This is the address checksum
D61967F6
8 - Add the 4 checksum bytes from point 7 at the end of extended RIPEMD-160 hash from point 4. This is the 25-byte binary Bitcoin Address.
00010966776006953D5567439E5E39F86A0D273BEED61967F6
9 - Convert the result from a byte string into a base58 string using Base58Check encoding. This is the most commonly used Bitcoin Address format
16UwLL9Risc3QfPqBUvKofHmBQ7wMtjvM
My first attempt is 
// step 1

$publickey='0450863AD64A87AE8A2FE83C1AF1A8403CB53F53E486D8511DAD8A04887E5B23522CD470243453A299FA9E77237716103ABC11A1DF38855ED6F2EE187E9C582BA6';
$step1=$publickey;

echo ""step1 "".$publickey.""<br>"";

// step 2

$step2=hash(""sha256"",$step1);
echo ""step2 "".$step2.""<br>"";

// step 3

$step3=hash('ripemd160',$step2);
echo ""step3 "".$step3.""<br>"";

// step 4

$step4=""00"".$step3;
echo ""step4 "".$step4.""<br>"";

// step 5

$step5=hash(""sha256"",$step4);
echo ""step5 "".$step5.""<br>"";

// step 6

$step6=hash(""sha256"",$step5);
echo ""step6 "".$step6.""<br>"";

// step 7

$checksum=substr($step6,0,8);
echo ""step7 "".$checksum.""<br>"";

// step 8

$step8=$step4.$checksum;
echo ""step8 "".$step8.""<br>"";

//step 9

$step9=base58_encode($step8);
echo ""step9 "".$step9.""<br><br>"";

This fails at the first step.  Any help appreciated.
This is the output
step1 0450863AD64A87AE8A2FE83C1AF1A8403CB53F53E486D8511DAD8A04887E5B23522CD470243453A299FA9E77237716103ABC11A1DF38855ED6F2EE187E9C582BA6
step2 32511e82d56dcea68eb774094e25bab0f8bdd9bc1eca1ceeda38c7a43aceddce
step3 7528c664cdc34c5ce809778eb688d32f89a538c0
step4 007528c664cdc34c5ce809778eb688d32f89a538c0
step5 86e76f4ff0bf0387339ac70a552e0fed615f7def34cc4809df1429e243f6c1fa
step6 b885b7225b370e7ff27ee0afb4f89b52b8675d5dc342d63de3abe7535f86cadb
step7 b885b722
step8 007528c664cdc34c5ce809778eb688d32f89a538c0b885b722
step9 1

Base58 function is
function base58_encode($input)
{
    $alphabet =     '123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ';
    $base_count = strval(strlen($alphabet));
    $encoded = '';
    while (floatval($input) >= floatval($base_count))
    {
        $div = bcdiv($input, $base_count);
        $mod = bcmod($input, $base_count);
        $encoded = substr($alphabet, intval($mod), 1) . $encoded;
        $input = $div;
    }
    if (floatval($input) > 0)
    {
        $encoded = substr($alphabet, intval($input), 1) . $encoded;
    }
    return($encoded);
}

","Solution below with thanks to Sammitch for spotting syntax and providing the base conversions.
<?php

// step 1

$publickey='0450863AD64A87AE8A2FE83C1AF1A8403CB53F53E486D8511DAD8A04887E5B23522CD470243453A299FA9E77237716103ABC11A1DF38855ED6F2EE187E9C582BA6';

$step1=hexStringToByteString($publickey);

echo ""step1 "".$publickey.""<br>"";

// step 2

$step2=hash(""sha256"",$step1);
echo ""step2 "".$step2.""<br>"";

// step 3

$step3=hash('ripemd160',hexStringToByteString($step2));
echo ""step3 "".$step3.""<br>"";

// step 4

$step4=""00"".$step3;
echo ""step4 "".$step4.""<br>"";

// step 5

$step5=hash(""sha256"",hexStringToByteString($step4));
echo ""step5 "".$step5.""<br>"";

// step 6

$step6=hash(""sha256"",hexStringToByteString($step5));
echo ""step6 "".$step6.""<br>"";

// step 7

$checksum=substr($step6,0,8);
echo ""step7 "".$checksum.""<br>"";

// step 8

$step8=$step4.$checksum;
echo ""step8 "".$step8.""<br>"";

// step 9
// base conversion is from hex to base58 via decimal. 
// Leading hex zero converts to 1 in base58 but it is dropped
// in the intermediate decimal stage.  Simply added back manually.

$step9=""1"".bc_base58_encode(bc_hexdec($step8));
echo ""step9 "".$step9.""<br><br>"";

?>

hash requires a byte string not a hex string.  hexStringToByteString is
function hexStringToByteString($hexString){
    $len=strlen($hexString);

    $byteString="""";
    for ($i=0;$i<$len;$i=$i+2){
        $charnum=hexdec(substr($hexString,$i,2));
        $byteString.=chr($charnum);
    }

return $byteString;
}

base conversion (thanks to Sammitch - amended to use Bitcoin base58)
// BCmath version for huge numbers
function bc_arb_encode($num, $basestr) {
    if( ! function_exists('bcadd') ) {
        Throw new Exception('You need the BCmath extension.');
    }

    $base = strlen($basestr);
    $rep = '';

    while( true ){
        if( strlen($num) < 2 ) {
            if( intval($num) <= 0 ) {
                break;
            }
        }
        $rem = bcmod($num, $base);
        $rep = $basestr[intval($rem)] . $rep;
        $num = bcdiv(bcsub($num, $rem), $base);
    }
    return $rep;
}

function bc_arb_decode($num, $basestr) {
    if( ! function_exists('bcadd') ) {
        Throw new Exception('You need the BCmath extension.');
    }

    $base = strlen($basestr);
    $dec = '0';

    $num_arr = str_split((string)$num);
    $cnt = strlen($num);
    for($i=0; $i < $cnt; $i++) {
        $pos = strpos($basestr, $num_arr[$i]);
        if( $pos === false ) {
            Throw new Exception(sprintf('Unknown character %s at offset %d', $num_arr[$i], $i));
        }
        $dec = bcadd(bcmul($dec, $base), $pos);
    }
    return $dec;
}


// base 58 alias
function bc_base58_encode($num) {   
    return bc_arb_encode($num, '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz');
}
function bc_base58_decode($num) {
    return bc_arb_decode($num, '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz');
}

//hexdec with BCmath
function bc_hexdec($num) {
    return bc_arb_decode(strtolower($num), '0123456789abcdef');
}
function bc_dechex($num) {
    return bc_arb_encode($num, '0123456789abcdef');
}

final output 
step1 0450863AD64A87AE8A2FE83C1AF1A8403CB53F53E486D8511DAD8A04887E5B23522CD470243453A299FA9E77237716103ABC11A1DF38855ED6F2EE187E9C582BA6
step2 600ffe422b4e00731a59557a5cca46cc183944191006324a447bdb2d98d4b408
step3 010966776006953d5567439e5e39f86a0d273bee
step4 00010966776006953d5567439e5e39f86a0d273bee
step5 445c7a8007a93d8733188288bb320a8fe2debd2ae1b47f0f50bc10bae845c094
step6 d61967f63c7dd183914a4ae452c9f6ad5d462ce3d277798075b107615c1a8a30
step7 d61967f6
step8 00010966776006953d5567439e5e39f86a0d273beed61967f6
step9 16UwLL9Risc3QfPqBUvKofHmBQ7wMtjvM

","6366","<php><hash><public-key-encryption><bitcoin>","3","6","4","2019-02-28 19:17:50","19243008","6","2","2855984","","2013-10-07 20:52:22","2013-10-07 19:32:50",""
"19233053","Hashing from a public key to a bitcoin address in php","I am trying to follow the instructions required to turn a 65 byte public key into a bitcoin address using php.  The instructions are quite explicit.  Can anyone help me with the practicality of doing that in php?
Instructions are
1 - Take the corresponding public key generated with it (65 bytes, 1 byte 0x04, 32 bytes corresponding to X coordinate, 32 bytes corresponding to Y coordinate)
0450863AD64A87AE8A2FE83C1AF1A8403CB53F53E486D8511DAD8A04887E5B23522CD470243453A299FA9E77237716103ABC11A1DF38855ED6F2EE187E9C582BA6
2 - Perform SHA-256 hashing on the public key
600FFE422B4E00731A59557A5CCA46CC183944191006324A447BDB2D98D4B408
3 - Perform RIPEMD-160 hashing on the result of SHA-256
010966776006953D5567439E5E39F86A0D273BEE
4 - Add version byte in front of RIPEMD-160 hash (0x00 for Main Network)
00010966776006953D5567439E5E39F86A0D273BEE
5 - Perform SHA-256 hash on the extended RIPEMD-160 result
445C7A8007A93D8733188288BB320A8FE2DEBD2AE1B47F0F50BC10BAE845C094
6 - Perform SHA-256 hash on the result of the previous SHA-256 hash
D61967F63C7DD183914A4AE452C9F6AD5D462CE3D277798075B107615C1A8A30
7 - Take the first 4 bytes of the second SHA-256 hash. This is the address checksum
D61967F6
8 - Add the 4 checksum bytes from point 7 at the end of extended RIPEMD-160 hash from point 4. This is the 25-byte binary Bitcoin Address.
00010966776006953D5567439E5E39F86A0D273BEED61967F6
9 - Convert the result from a byte string into a base58 string using Base58Check encoding. This is the most commonly used Bitcoin Address format
16UwLL9Risc3QfPqBUvKofHmBQ7wMtjvM
My first attempt is 
// step 1

$publickey='0450863AD64A87AE8A2FE83C1AF1A8403CB53F53E486D8511DAD8A04887E5B23522CD470243453A299FA9E77237716103ABC11A1DF38855ED6F2EE187E9C582BA6';
$step1=$publickey;

echo ""step1 "".$publickey.""<br>"";

// step 2

$step2=hash(""sha256"",$step1);
echo ""step2 "".$step2.""<br>"";

// step 3

$step3=hash('ripemd160',$step2);
echo ""step3 "".$step3.""<br>"";

// step 4

$step4=""00"".$step3;
echo ""step4 "".$step4.""<br>"";

// step 5

$step5=hash(""sha256"",$step4);
echo ""step5 "".$step5.""<br>"";

// step 6

$step6=hash(""sha256"",$step5);
echo ""step6 "".$step6.""<br>"";

// step 7

$checksum=substr($step6,0,8);
echo ""step7 "".$checksum.""<br>"";

// step 8

$step8=$step4.$checksum;
echo ""step8 "".$step8.""<br>"";

//step 9

$step9=base58_encode($step8);
echo ""step9 "".$step9.""<br><br>"";

This fails at the first step.  Any help appreciated.
This is the output
step1 0450863AD64A87AE8A2FE83C1AF1A8403CB53F53E486D8511DAD8A04887E5B23522CD470243453A299FA9E77237716103ABC11A1DF38855ED6F2EE187E9C582BA6
step2 32511e82d56dcea68eb774094e25bab0f8bdd9bc1eca1ceeda38c7a43aceddce
step3 7528c664cdc34c5ce809778eb688d32f89a538c0
step4 007528c664cdc34c5ce809778eb688d32f89a538c0
step5 86e76f4ff0bf0387339ac70a552e0fed615f7def34cc4809df1429e243f6c1fa
step6 b885b7225b370e7ff27ee0afb4f89b52b8675d5dc342d63de3abe7535f86cadb
step7 b885b722
step8 007528c664cdc34c5ce809778eb688d32f89a538c0b885b722
step9 1

Base58 function is
function base58_encode($input)
{
    $alphabet =     '123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ';
    $base_count = strval(strlen($alphabet));
    $encoded = '';
    while (floatval($input) >= floatval($base_count))
    {
        $div = bcdiv($input, $base_count);
        $mod = bcmod($input, $base_count);
        $encoded = substr($alphabet, intval($mod), 1) . $encoded;
        $input = $div;
    }
    if (floatval($input) > 0)
    {
        $encoded = substr($alphabet, intval($input), 1) . $encoded;
    }
    return($encoded);
}

","Very Important!
Replace this: '123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ'
With this: '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'
Using the wrong code here would cause Bitcoin transactions to fail or worse, cause coins to disappear to a phantom wallet where they can never be retrieved.
I am not a developer but I confirmed the correction. The Base58 symbol chart is here, https://en.bitcoin.it/wiki/Base58Check_encoding
I checked my work here  http://brainwallet.org/
Enter the passphrase: ""test address"" without the quotes.
The public key is then: 047969a753f71135d4c792f384e546cd508514024b4ee40d12a014019b77d1b292763dfb8a108cf7a7119f80ca4a06e81b92464f5d8a7544d52cd2e641023a96d7
Your address result : 1gBG1mbVtyNTgGZhggJ21A6mnjbNtqPCSr 
My result: 1Gch1MBvUZotGhzHGGj21b6MNKBoURpdsS 
brainwallet.org result:  1Gch1MBvUZotGhzHGGj21b6MNKBoURpdsS
I hope this saves someone from a time consuming or costly error.
","6366","<php><hash><public-key-encryption><bitcoin>","3","2","4","2019-02-28 19:17:50","19243008","6","2","2855984","","2013-10-07 20:52:22","2013-10-07 19:32:50",""
"4508779","How to read public key from PFX file in java","I am able to read private key from PFX file but not public key. I am using following code to read public key.
InputStream inStream = new FileInputStream(certFile); 
CertificateFactory cf = CertificateFactory.getInstance(""X.509""); 
BufferedInputStream bis = new BufferedInputStream(inStream);
// if (bis.available() > 0) {
java.security.cert.Certificate cert = cf.generateCertificate(bis);
System.out.println(""This part is not getting printed in case of PFX file"");
// }
puk = (PublicKey) cert.getPublicKey();

This code is working properly when i read from .cer file. Please help
","Use the KeyStore class and treat the file as a PKCS#12 KeyStore. Use KeyStore.getInstance(""PKCS12"") to get an instance of a PKCS12 keystore.
The Javadocs for KeyStore contain sample code.
","6239","<java><public-key><digital-certificate><public-key-encryption>","0","3","1","2010-12-28 10:35:02","","1","1","","","","2010-12-22 11:38:53",""
"7625205","How to protect media content (video, audio) on Android from being saved/redistributed?","What opportunities are there for regular app developers (with that I mean, you're not a million dollar content producing company or distribution channel provider, but a regular, small app development company) to secure video/audio content for the app from being saved/distributed. 
I mention the 'regular developer', because I had seen in the Android core code that Sony had added some code portions into it, in the DRM packages. Let's assume we're not that powerful to talk to Google to include such in their core code.
Are there any real secure ways to protect video/audio (as part of an app) on Android.
Assumptions (correct me if I'm wrong):

devices could be rooted by the users, need to be aware of that
detection whether a device is rooted or not (within an app) is not really possible on Android, as a super user can basically fake any state of the device.
we cannot modify any hardware or the user's system (meaning: we don't bundle our app product with a device, the app should be available as a 'regular' app on the App Market for download)
the media files/stream could be locally on the device or come remotely from a server, both is ok

I have researched this topic quite a bit, googled a lot, went through (hopefully) all related questions here on SO, I have talked to one DRM provider (which is really hard to get in touch with as a small company or freelance developer, or at least to get some real relevant information, technical docs and details). 
I looked into DRM as one approach, but ""security-by-obscurity"" does not seem to be a very good way. Besides, I haven't found any information or real solutions/APIs for regular developers.
Public-key encryption was another idea, but where to store the private key really safely? Furthermore, I assume that in such case, the entire media framework & player would need to be rewritten, in order to pass a secure video stream to the player. Or am I mistaken?
I would like to get some opinions from other experienced developers in the field, as it's really hard to find information about media content protection for Android anywhere.
Update:
In the context of my question, I found this Question and it's update interesting: Streaming to the Android MediaPlayer
","I don't think there is a solution to protect media content in apps from being ripped off. DRM is of course not suitable for regular developer. I don't see also why public key can help.
","6138","<android><public-key-encryption><drm><android-mediaplayer>","14","0","2","2016-09-17 19:37:08","7627734","1","6","-1","","2017-05-23 10:29:51","2011-10-02 07:57:54",""
"7625205","How to protect media content (video, audio) on Android from being saved/redistributed?","What opportunities are there for regular app developers (with that I mean, you're not a million dollar content producing company or distribution channel provider, but a regular, small app development company) to secure video/audio content for the app from being saved/distributed. 
I mention the 'regular developer', because I had seen in the Android core code that Sony had added some code portions into it, in the DRM packages. Let's assume we're not that powerful to talk to Google to include such in their core code.
Are there any real secure ways to protect video/audio (as part of an app) on Android.
Assumptions (correct me if I'm wrong):

devices could be rooted by the users, need to be aware of that
detection whether a device is rooted or not (within an app) is not really possible on Android, as a super user can basically fake any state of the device.
we cannot modify any hardware or the user's system (meaning: we don't bundle our app product with a device, the app should be available as a 'regular' app on the App Market for download)
the media files/stream could be locally on the device or come remotely from a server, both is ok

I have researched this topic quite a bit, googled a lot, went through (hopefully) all related questions here on SO, I have talked to one DRM provider (which is really hard to get in touch with as a small company or freelance developer, or at least to get some real relevant information, technical docs and details). 
I looked into DRM as one approach, but ""security-by-obscurity"" does not seem to be a very good way. Besides, I haven't found any information or real solutions/APIs for regular developers.
Public-key encryption was another idea, but where to store the private key really safely? Furthermore, I assume that in such case, the entire media framework & player would need to be rewritten, in order to pass a secure video stream to the player. Or am I mistaken?
I would like to get some opinions from other experienced developers in the field, as it's really hard to find information about media content protection for Android anywhere.
Update:
In the context of my question, I found this Question and it's update interesting: Streaming to the Android MediaPlayer
","
Are there any real secure ways to protect video/audio (as part of an app) on Android.

If by ""secure"", you mean ""fullproof"", then no. See Analog hole.

detection whether a device is rooted or not (within an app) is not really possible on Android

Nor is it possible anywhere. the laws of the universe make it impossible to detect such a thing, (okay, maybe you could exploit quantum physics for this, but even then I'm not sure) you can only add code to detect known techniques, all of which are trivial to bypass.

Public-key encryption was another idea, but where to store the private key really safely?

There is nowhere to store it safely. Think about it, you want to encrypt content and give the user the key to decrypt it (so he can watch it), but you don't want him to be able to decrypt it (so he can't copy it). This is a contradiction.
The most you can do is encrypt your stream to prevent the user from being able to just intercept it and use it. Then obfuscate the code that decodes/plays the stream. Though by implementing that you risk introducing more bugs (and worse performance), making the legitimate user's experience worse. If decide not to roll your own obfuscation, and use some automatic obfuscater product already available by some big company, it will already be generically cracked, and it will be extremely easy for someone who hardly knows what he's doing to crack your product in a small amount of time. As long as your product becomes remotely popular, one person is going to crack it and upload all the videos to torrent, then everyone will be able to pirate your product without doing any work.
","6138","<android><public-key-encryption><drm><android-mediaplayer>","14","10","2","2016-09-17 19:37:08","7627734","1","6","-1","","2017-05-23 10:29:51","2011-10-02 07:57:54",""
"21308415","Converting NSData to SecKeyRef","i have a public key which i gathered from a remote server and i want to perform RSA encryption with that public key. But the problem is i get the public key data as byte array in buffer. I can convert it to NSData but i can not convert to SecKeyRef so i can keep going with encryption. My encryption code is like:
+(NSString *)encryptRSA:(NSString *)plainTextString withKey:(SecKeyRef)publicKey {
size_t cipherBufferSize = SecKeyGetBlockSize(publicKey);
uint8_t *cipherBuffer = malloc(cipherBufferSize);
uint8_t *nonce = (uint8_t *)[plainTextString UTF8String];
SecKeyEncrypt(publicKey,
              kSecPaddingOAEP,
              nonce,
              strlen( (char*)nonce ),
              &cipherBuffer[0],
              &cipherBufferSize);
NSData *encryptedData = [NSData dataWithBytes:cipherBuffer length:cipherBufferSize];
return [encryptedData base64EncodedStringWithOptions:NSDataBase64Encoding64CharacterLineLength];

}
As you can see i need SecKeyRef object type to complete my encryption. But my RSA public key is in NSData variable. So how can i convert NSData to SecKeyRef object type. Thanks in advance.
","Use this function to save your public key. Pass your RAS public key and any name for peername.
- (void)addPeerPublicKey:(NSString *)peerName keyBits:(NSData *)publicKeyData {

        OSStatus sanityCheck = noErr;
        CFTypeRef persistPeer = NULL;
        [self removePeerPublicKey:peerName];

        NSData * peerTag = [[NSData alloc] initWithBytes:(const void *)[peerName UTF8String] length:[peerName length]];
        NSMutableDictionary * peerPublicKeyAttr = [[NSMutableDictionary alloc] init];
        [peerPublicKeyAttr setObject:(id)kSecClassKey forKey:(id)kSecClass];
        [peerPublicKeyAttr setObject:(id)kSecAttrKeyTypeRSA forKey:(id)kSecAttrKeyType];
        [peerPublicKeyAttr setObject:peerTag forKey:(id)kSecAttrApplicationTag];
        [peerPublicKeyAttr setObject:publicKeyData forKey:(id)kSecValueData];
        [peerPublicKeyAttr setObject:[NSNumber numberWithBool:YES] forKey:(id)kSecReturnData];
        sanityCheck = SecItemAdd((CFDictionaryRef) peerPublicKeyAttr, (CFTypeRef *)&persistPeer);

        if(sanityCheck == errSecDuplicateItem){
            TRC_DBG(@""Problem adding the peer public key to the keychain, OSStatus == %ld."", sanityCheck );
        }

        TRC_DBG(@""SecItemAdd OSStATUS = %ld"", sanityCheck);

//        TRC_DBG(@""PersistPeer privatekey data after import into keychain %@"", persistPeer);
        persistPeer = NULL;
        [peerPublicKeyAttr removeObjectForKey:(id)kSecValueData];
        sanityCheck = SecItemCopyMatching((CFDictionaryRef) peerPublicKeyAttr, (CFTypeRef*)&persistPeer);

        TRC_DBG(@""SecItemCopying OSStATUS = %ld"", sanityCheck);
//        TRC_DBG(@""SecItem copy matching returned this public key data %@"", persistPeer);
        // The nice thing about persistent references is that you can write their value out to disk and
        // then use them later. I don't do that here but it certainly can make sense for other situations
        // where you don't want to have to keep building up dictionaries of attributes to get a reference.
        //
        // Also take a look at SecKeyWrapper's methods (CFTypeRef)getPersistentKeyRefWithKeyRef:(SecKeyRef)key
        // & (SecKeyRef)getKeyRefWithPersistentKeyRef:(CFTypeRef)persistentRef.
        [peerTag release];
        [peerPublicKeyAttr release];
        if (persistPeer) CFRelease(persistPeer);
    }

This is the function to retrieve the public key ref. Pass the same name which one is used for save.
-(SecKeyRef)getPublicKeyReference:(NSString*)peerName{

       OSStatus sanityCheck = noErr;

       SecKeyRef pubKeyRefData = NULL;
       NSData * peerTag = [[NSData alloc] initWithBytes:(const void *)[peerName UTF8String] length:[peerName length]];
       NSMutableDictionary * peerPublicKeyAttr = [[NSMutableDictionary alloc] init];

       [peerPublicKeyAttr setObject:(id)kSecClassKey forKey:(id)kSecClass];
       [peerPublicKeyAttr setObject:(id)kSecAttrKeyTypeRSA forKey:(id)kSecAttrKeyType];
       [peerPublicKeyAttr setObject:peerTag forKey:(id)kSecAttrApplicationTag];
       [peerPublicKeyAttr setObject:[NSNumber numberWithBool:YES] forKey:       (id)kSecReturnRef];
       sanityCheck = SecItemCopyMatching((CFDictionaryRef) peerPublicKeyAttr, (CFTypeRef*)&pubKeyRefData);
       [peerTag release];
       [peerPublicKeyAttr release];

       TRC_DBG(@""SecItemCopying OSStATUS = %ld"", sanityCheck);
       if(pubKeyRefData){
           TRC_DBG(@""SecItem copy matching returned this publickeyref  %@"", pubKeyRefData);
           return pubKeyRefData;
       }else{
           TRC_DBG(@""pubKeyRef is NULL"");
           return nil;
       }
   }

Pass your public key data to this function before addPeerPublicKey
- (NSData *)stripPublicKeyHeader:(NSData *)d_key
{
    // Skip ASN.1 public key header
    if (d_key == nil) return(nil);

    unsigned int len = [d_key length];
    if (!len) return(nil);

    unsigned char *c_key = (unsigned char *)[d_key bytes];
    unsigned int  idx    = 0;

    if (c_key[idx++] != 0x30) return(nil);

    if (c_key[idx] > 0x80) idx += c_key[idx] - 0x80 + 1;
    else idx++;

    // PKCS #1 rsaEncryption szOID_RSA_RSA
    static unsigned char seqiod[] =
    { 0x30,   0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01,
        0x01, 0x05, 0x00 };
    if (memcmp(&c_key[idx], seqiod, 15)) return(nil);

    idx += 15;

    if (c_key[idx++] != 0x03) return(nil);

    if (c_key[idx] > 0x80) idx += c_key[idx] - 0x80 + 1;
    else idx++;

    if (c_key[idx++] != '\0') return(nil);

    // Now make a new NSData from this buffer
    return([NSData dataWithBytes:&c_key[idx] length:len - idx]);

}

","6124","<ios><encryption><rsa><nsdata><public-key-encryption>","7","8","2","2014-03-03 07:47:53","21308764","0","5","","","","2014-01-23 12:39:41",""
"21308415","Converting NSData to SecKeyRef","i have a public key which i gathered from a remote server and i want to perform RSA encryption with that public key. But the problem is i get the public key data as byte array in buffer. I can convert it to NSData but i can not convert to SecKeyRef so i can keep going with encryption. My encryption code is like:
+(NSString *)encryptRSA:(NSString *)plainTextString withKey:(SecKeyRef)publicKey {
size_t cipherBufferSize = SecKeyGetBlockSize(publicKey);
uint8_t *cipherBuffer = malloc(cipherBufferSize);
uint8_t *nonce = (uint8_t *)[plainTextString UTF8String];
SecKeyEncrypt(publicKey,
              kSecPaddingOAEP,
              nonce,
              strlen( (char*)nonce ),
              &cipherBuffer[0],
              &cipherBufferSize);
NSData *encryptedData = [NSData dataWithBytes:cipherBuffer length:cipherBufferSize];
return [encryptedData base64EncodedStringWithOptions:NSDataBase64Encoding64CharacterLineLength];

}
As you can see i need SecKeyRef object type to complete my encryption. But my RSA public key is in NSData variable. So how can i convert NSData to SecKeyRef object type. Thanks in advance.
","Hope It will work....    
-(NSData*)convertIOSKeyToASNFormat:(NSData*)iosKey{

    static const unsigned char _encodedRSAEncryptionOID[15] = {
        /* Sequence of length 0xd made up of OID followed by NULL */
        0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86,
        0xf7, 0x0d, 0x01, 0x01, 0x01, 0x05, 0x00
    };

    // OK - that gives us the ""BITSTRING component of a full DER
    // encoded RSA public key - we now need to build the rest

    unsigned char builder[15];
    NSMutableData * encKey = [[[NSMutableData alloc] init] autorelease];
    int bitstringEncLength;

    // When we get to the bitstring - how will we encode it?
    if  ([iosKey length ] + 1  < 128 )
        bitstringEncLength = 1 ;
    else
        bitstringEncLength = (([iosKey length ] +1 ) / 256 ) + 2 ;

    // Overall we have a sequence of a certain length
    builder[0] = 0x30;    // ASN.1 encoding representing a SEQUENCE

    // Build up overall size made up of -
    size_t i = sizeof(_encodedRSAEncryptionOID) + 2 + bitstringEncLength +
    [iosKey length];

    size_t j = [self encodeLen:&builder[1] length:i];
    [encKey appendBytes:builder length:j +1];

    // First part of the sequence is the OID
    [encKey appendBytes:_encodedRSAEncryptionOID
                 length:sizeof(_encodedRSAEncryptionOID)];

    // Now add the bitstring
    builder[0] = 0x03;
    j = [self encodeLen:&builder[1] length:[iosKey length] + 1];

    builder[j+1] = 0x00;
    [encKey appendBytes:builder length:j + 2];

    // Now the actual key
    [encKey appendData:iosKey];
    return encKey;
}

","6124","<ios><encryption><rsa><nsdata><public-key-encryption>","7","0","2","2014-03-03 07:47:53","21308764","0","5","","","","2014-01-23 12:39:41",""
"14431379","Android in-app billing signature verification in php server","I am working on the IAB v3 in my android application.
After every succes purchase, I want my app to send back the sign data and signature to my php server for verification by the public key generated by google developer console.
I found the following code.
<?php
// $data and $signature are assumed to contain the data and the signature

// fetch public key from certificate and ready it
$fp = fopen(""/src/openssl-0.9.6/demos/sign/cert.pem"", ""r"");
$cert = fread($fp, 8192);
fclose($fp);
$pubkeyid = openssl_get_publickey($cert);

// state whether signature is okay or not
$ok = openssl_verify($data, $signature, $pubkeyid);
if ($ok == 1) {
    echo ""good"";
} elseif ($ok == 0) {
    echo ""bad"";
} else {
    echo ""ugly, error checking signature"";
}
// free the key from memory
openssl_free_key($pubkeyid);
?>

Now I have a problem. The public key given by google is in String Base64 Encoded. I do not know how to convert that string key to a "".pem"" format.
If I put my Base64 Encoded key to ""$pubkeyid"" on the above code. A warning will be given.
Warning: openssl_verify() [function.openssl-verify]: supplied key param cannot be coerced into a public key in myxxx.php.
How can I convert my String Base64 Encoded public key to the php accept format ?
Do anyone have the above experience or solution? Please help. Many thanks.
","My problem was fixed by this API.
https://github.com/mgoldsborough/google-play-in-app-billing-verification
","6076","<php><android><in-app-billing><public-key-encryption>","3","1","3","2016-09-05 15:06:11","","2","1","","","","2013-01-21 01:35:12",""
"14431379","Android in-app billing signature verification in php server","I am working on the IAB v3 in my android application.
After every succes purchase, I want my app to send back the sign data and signature to my php server for verification by the public key generated by google developer console.
I found the following code.
<?php
// $data and $signature are assumed to contain the data and the signature

// fetch public key from certificate and ready it
$fp = fopen(""/src/openssl-0.9.6/demos/sign/cert.pem"", ""r"");
$cert = fread($fp, 8192);
fclose($fp);
$pubkeyid = openssl_get_publickey($cert);

// state whether signature is okay or not
$ok = openssl_verify($data, $signature, $pubkeyid);
if ($ok == 1) {
    echo ""good"";
} elseif ($ok == 0) {
    echo ""bad"";
} else {
    echo ""ugly, error checking signature"";
}
// free the key from memory
openssl_free_key($pubkeyid);
?>

Now I have a problem. The public key given by google is in String Base64 Encoded. I do not know how to convert that string key to a "".pem"" format.
If I put my Base64 Encoded key to ""$pubkeyid"" on the above code. A warning will be given.
Warning: openssl_verify() [function.openssl-verify]: supplied key param cannot be coerced into a public key in myxxx.php.
How can I convert my String Base64 Encoded public key to the php accept format ?
Do anyone have the above experience or solution? Please help. Many thanks.
","To convert the long base64-encoded public key you get from Google into one that you can use in PHP, try this:
$base64EncodedPublicKeyFromGoogle = ""...""; // This is the public key for your app you get from Google.

$openSslFriendlyKey = ""-----BEGIN PUBLIC KEY-----\n"" . chunk_split($base64EncodedPublicKeyFromGoogle, 64, ""\n"") .  ""-----END PUBLIC KEY-----"";

Then you can pass that into openssl_get_publickey().
$publicKeyId = openssl_get_publickey($openSslFriendlyKey);

As you can see, the format from Google is almost the right kind. It just needs to be broken up into 64-character lines, and prepended/appended with the right header/footer.
You can also use the OpenSSL command to convert the public key like this:
openssl enc -base64 -d -in publickey.base64 -A | openssl rsa -inform DER -pubin > publickey.pem

Then you can read in the generated publickey.pem file with PHP and pass its contents to the openssl_get_publickey() function.
","6076","<php><android><in-app-billing><public-key-encryption>","3","9","3","2016-09-05 15:06:11","","2","1","","","","2013-01-21 01:35:12",""
"14431379","Android in-app billing signature verification in php server","I am working on the IAB v3 in my android application.
After every succes purchase, I want my app to send back the sign data and signature to my php server for verification by the public key generated by google developer console.
I found the following code.
<?php
// $data and $signature are assumed to contain the data and the signature

// fetch public key from certificate and ready it
$fp = fopen(""/src/openssl-0.9.6/demos/sign/cert.pem"", ""r"");
$cert = fread($fp, 8192);
fclose($fp);
$pubkeyid = openssl_get_publickey($cert);

// state whether signature is okay or not
$ok = openssl_verify($data, $signature, $pubkeyid);
if ($ok == 1) {
    echo ""good"";
} elseif ($ok == 0) {
    echo ""bad"";
} else {
    echo ""ugly, error checking signature"";
}
// free the key from memory
openssl_free_key($pubkeyid);
?>

Now I have a problem. The public key given by google is in String Base64 Encoded. I do not know how to convert that string key to a "".pem"" format.
If I put my Base64 Encoded key to ""$pubkeyid"" on the above code. A warning will be given.
Warning: openssl_verify() [function.openssl-verify]: supplied key param cannot be coerced into a public key in myxxx.php.
How can I convert my String Base64 Encoded public key to the php accept format ?
Do anyone have the above experience or solution? Please help. Many thanks.
","A complete solution to the poster's question:
<?php
// $data and $signature are assumed to contain the data and the signature

// Paste your google public key below:
$base64EncodedPublicKeyFromGoogle  = ""###############################""

//Convert the key to the right format for open SSL
$openSslFriendlyKey = ""-----BEGIN PUBLIC KEY-----\n"" . chunk_split($base64EncodedPublicKeyFromGoogle, 64, ""\n"") .  ""-----END PUBLIC KEY-----"";
$publicKeyId = openssl_get_publickey($openSslFriendlyKey);

// free the key from memory
openssl_free_key($publicKeyId);

//Perform signature verification. Don't forget to decode the signature!
$ok = openssl_verify($data, base64_decode($signature), $publicKeyId, OPENSSL_ALGO_SHA1);
if ($ok == 1) {
    echo ""good"";
} elseif ($ok == 0) {
    echo ""bad"";
} else {
    echo openssl_error_string();
}

?>

","6076","<php><android><in-app-billing><public-key-encryption>","3","1","3","2016-09-05 15:06:11","","2","1","","","","2013-01-21 01:35:12",""
"43669237","Swift 3 export SecKey to String","I am developing an iOS app using swift 3.
I need to export an SecKey (which is the user RSA publickey reference) to a string (e.g base64) in order to share it through a generated QRCode.
It also has to work the other way since the other user that scans the QRCode, will be able to rebuild a SecKey reference from the string extracted from the QRCode.
I found few tutorials but I don't understand exactly what I need to extract from the SecKey reference, and I don't know how to convert it to a String.
","Export Key (iOS 10 only)
var error:Unmanaged<CFError>?
if let cfdata = SecKeyCopyExternalRepresentation(publicKey!, &error) {
   let data:Data = cfdata as Data
   let b64Key = data.base64EncodedString()
}

See https://stackoverflow.com/a/30662270/5276890 and https://stackoverflow.com/a/27935528/5276890 for longer ways which probably support iOS < 10.
Reimport Key
guard let data2 = Data.init(base64Encoded: b64Key) else {
   return
}

let keyDict:[NSObject:NSObject] = [
   kSecAttrKeyType: kSecAttrKeyTypeRSA,
   kSecAttrKeyClass: kSecAttrKeyClassPublic,
   kSecAttrKeySizeInBits: NSNumber(value: 512),
   kSecReturnPersistentRef: true as NSObject
]

guard let publicKey = SecKeyCreateWithData(data2 as CFData, keyDict as CFDictionary, nil) else {
    return
}

Note: This generates a base64 key and not a certificate. A lot of code samples online deal with how to generate a public key from a certificate using SecCertificateCreateWithData
Also: 512 bit is fast to generate but worthless. Pick a longer and secure value once you're satisfied with the results.
I got valid results back when importing the key I generated and exported, so I assume it works, but I did not try to encrypt and decrypt with it.
","6073","<ios><swift><swift3><public-key-encryption><seckeyref>","5","13","1","2019-05-30 20:20:40","43675366","3","5","","","","2017-04-27 22:59:56",""
"15818782","How to verify a certificate using .cer file in Java","I'm trying to verify a certificate , that was given to me using Java, in the following manner
        try{
        FileInputStream fr = new FileInputStream(pathtoCertificate);
        CertificateFactory cf =   CertificateFactory.getInstance(""X509"");
        X509Certificate c = (X509Certificate) 
                            cf.generateCertificate(fr);
        System.out.println(""++++Certificate Verification++++++++"");
        PublicKey pk = c.getPublicKey();
        c.verify(pk);....//63
System.out.println(""++This certificate is VALID++"");
    .....

    }
    catch(CertificateException e){
                e.printStackTrace();
                System.out.println(""Certificate is Invalid"");
            }

However, I keep getting the following error
java.security.SignatureException: Signature does not match.
    at sun.security.x509.X509CertImpl.verify(Unknown Source)
    at sun.security.x509.X509CertImpl.verify(Unknown Source)
    at Main.printCertificate(Main.java:63)
    at Main.main(Main.java:41)

I've only been provided with a certificate file(which I need to verify), a private key(corresponding to the above file ) and a certificate from a CA.
I'm quite new to Java Security. So any thoughts on how I could verify the certificate file would be great. 
","Well I finally figured it out. For folks who may reach here in the future.
The reason the error was being thrown is that the certificate in my case was not self signed . Therefore I merely had to use the certificate issued by the CA(as mentioned in my Q) to verify the public key.
The rest remained the same.
","6046","<java><security><java-ee><x509certificate><public-key-encryption>","3","3","1","2013-04-05 21:54:58","15844265","0","3","919858","","2013-04-04 20:09:49","2013-04-04 18:21:21",""
"11725991","Is it possible to prevent man-in-the-middle attack when using self-signed certificates?","I'm not sure is similar question has been asked before (I couldn't find any), but is it possible to   protect Client/Server from Man-In-The-Middle attack? 
I'm writing a Client application to communicate with Server. Communication will be SSLv3 based. 
I am OK with server's self-signed certificates, but worried about someone else generating same self-signed certificate in the same server name and pretend to be it. My Client application uses OpenSSL library. [Client and Server are thrift based, if it makes any difference]. Can I avoid such attack at the same time maintaining support for self-signed certificates?
","If you can protect your private keys well enough, a middleman will not be able to masquerade as you, assuming the user actually looks at the certificate. The problem with self-signed is that if you want the user to add the exception to their browser, or just ignore the warning, then you are exposed to man-in-the-middle attack, because anyone else may create their own certificate.
Of course, ""protecting your private keys well enough"" is not trivial at all. When you pay for a ""Verisign"" certificate, you're not paying for their software creating the certificate - you're paying for the security forces they have guarding the building in which the private keys are stored. 
","6011","<ssl><https><openssl><ssl-certificate><public-key-encryption>","7","1","3","2012-07-30 20:59:03","11726273","2","2","","","","2012-07-30 16:50:01",""
"11725991","Is it possible to prevent man-in-the-middle attack when using self-signed certificates?","I'm not sure is similar question has been asked before (I couldn't find any), but is it possible to   protect Client/Server from Man-In-The-Middle attack? 
I'm writing a Client application to communicate with Server. Communication will be SSLv3 based. 
I am OK with server's self-signed certificates, but worried about someone else generating same self-signed certificate in the same server name and pretend to be it. My Client application uses OpenSSL library. [Client and Server are thrift based, if it makes any difference]. Can I avoid such attack at the same time maintaining support for self-signed certificates?
","You can hard-code the server's certificate and compare it against what you receive. 
Or better yet, create a CA certificate and server certificate, signed by the CA. Have the CA trusted on the client (again by hardcoding it in your application) and validate received server certificate using the CA certificate. 
","6011","<ssl><https><openssl><ssl-certificate><public-key-encryption>","7","4","3","2012-07-30 20:59:03","11726273","2","2","","","","2012-07-30 16:50:01",""
"11725991","Is it possible to prevent man-in-the-middle attack when using self-signed certificates?","I'm not sure is similar question has been asked before (I couldn't find any), but is it possible to   protect Client/Server from Man-In-The-Middle attack? 
I'm writing a Client application to communicate with Server. Communication will be SSLv3 based. 
I am OK with server's self-signed certificates, but worried about someone else generating same self-signed certificate in the same server name and pretend to be it. My Client application uses OpenSSL library. [Client and Server are thrift based, if it makes any difference]. Can I avoid such attack at the same time maintaining support for self-signed certificates?
","Yes. 
In short, a self signed certificate is more insecure than a CA certificate only when the client does not know the certificate in advance and therefore has no way to validate that the server is who it says it is. 
If you add the self signed certificate to the client and don't accept any other certificate, you're actually as secure (or, one could argue, even more so) than having a certificate authority signed certificate.
The important parts to keep SSL secure with or without a certificate authority are;

The server private key (and in the case of a CA, the private keys of all its roots) is kept secret.
The client knows the server certificate (or its CA root).

","6011","<ssl><https><openssl><ssl-certificate><public-key-encryption>","7","12","3","2012-07-30 20:59:03","11726273","2","2","","","","2012-07-30 16:50:01",""
"9046676","java convert pfx to a format that can be imported into default keystore","I am programatically loading a certificate into a default keystore with the following code
KeyStore kStore = KeyStore.getInstance(KeyStore.getDefaultType());
java.io.FileInputStream fis = new FileInputStream(keystorePath);
kStore.load(fis, new String(keystorePass).toCharArray());
fis.close();

I have a certificate from a third party in pfx format. If I try to load it, it fails with invalid format. 
If I update to use the following it works. But I don't want to change the code. 
KeyStore keystore = KeyStore.getInstance(""PKCS12"");  

How can I convert the pfx file to a format that will be accepted by the following
KeyStore kStore = KeyStore.getInstance(KeyStore.getDefaultType());    

","Certificate stuff is never simple . You need openssl (the Cygwin version works on Windows) to convert the pfx / p12 file to a pem file, then you can create a certificate from the pem. Finally, you can use the Java keytool program to convert the certificate to JKS format (the KeyStore default).
Convert the pfx to pem:
openssl pkcs12 -in whatever.pfx -out whatever.pem -clcerts -nokeys

Create an X509 certificate from the pem file:
openssl x509 -in whatever.pem -inform PEM -out whatever.crt -outform DER

Use Java's keytool to create a JKS file from the cert:
keytool -import -trustcacerts -keystore whatever.jks -storepass somepassword -noprompt -file whatever.crt -alias localhost

Note the -alias can be whatever unique name you want to use for this cert. The convention is to use the URL of your web site.
Now, you should be able to load the JKS file with the KeyStore instance in your code. Maybe it's easier to just change your Java code to use a PKCS12 instance?
","5997","<java><openssl><ssl-certificate><keystore><public-key-encryption>","4","2","2","2012-01-29 18:37:43","9048594","0","1","114340","","2012-01-29 04:36:15","2012-01-28 16:07:43",""
"9046676","java convert pfx to a format that can be imported into default keystore","I am programatically loading a certificate into a default keystore with the following code
KeyStore kStore = KeyStore.getInstance(KeyStore.getDefaultType());
java.io.FileInputStream fis = new FileInputStream(keystorePath);
kStore.load(fis, new String(keystorePass).toCharArray());
fis.close();

I have a certificate from a third party in pfx format. If I try to load it, it fails with invalid format. 
If I update to use the following it works. But I don't want to change the code. 
KeyStore keystore = KeyStore.getInstance(""PKCS12"");  

How can I convert the pfx file to a format that will be accepted by the following
KeyStore kStore = KeyStore.getInstance(KeyStore.getDefaultType());    

","
If I update to use the following it works. But I don't want to change
  the code. 
KeyStore keystore = KeyStore.getInstance(""PKCS12"");   How can I
  convert the pfx file to a format that will be accepted by the
  following
KeyStore kStore = KeyStore.getInstance(KeyStore.getDefaultType());

Why not?
The default keystore format for Java is JKS.  
But there are other formats and #PKCS12 is the most frequently used.  
If you need you application to be more ""robust"" I would recommend to not convert the file you have to the JKS format.  
Instead you can support more than the JKS and e.g. try the default keystore type and if it fails try the #PKCS12 
I would go further and suggest that the KeyStore.getInstance(KeyStore.getDefaultType()); is replaced by something like:  
KeyStore.getInstance(UserPreferences.getDefaultType()); 
where the user has chose which should be the default keystore file (could be #PKCS12)
","5997","<java><openssl><ssl-certificate><keystore><public-key-encryption>","4","0","2","2012-01-29 18:37:43","9048594","0","1","114340","","2012-01-29 04:36:15","2012-01-28 16:07:43",""
"23691995","Bouncy Castle ""encoded key spec not recognised""","I'm encountering this particular error after running my jar in an amazon linux. It was working fine in my OsX. I'm using the same public and private key in both machines. The only difference is the java version which is 
Machine where I made, test and compiled my script:

Java(TM) SE Runtime Environment (build 1.6.0_65-b14-462-11M4609)

Amazon server:

OpenJDK Runtime Environment (amzn-2.4.7.1.40.amzn1-x86_64 u55-b13)

This is the section of the script that's causing the error:
public PublicKey getPublicKey(String _file)
    throws
        NoSuchAlgorithmException,
        NoSuchProviderException,
        InvalidKeySpecException,
        IOException
{
    X509EncodedKeySpec _spec = new X509EncodedKeySpec(_getFileContents(_file));
    KeyFactory _keyFactory = KeyFactory.getInstance(this._keyFactoryAlgo, this._provider);

    this._publicKey = _keyFactory.generatePublic(_spec);

    return this._publicKey;
}

GetFileContents:
private byte[] _getFileContents(String _fileName) throws IOException
{

    File _file = new File(_fileName);
    FileInputStream _fileStream = new FileInputStream(_file);

    byte[] _contents = new byte[(int) _file.length()];

    _fileStream.read(_contents);

    if(_fileStream != null)
    {
        _fileStream.close();
        _fileStream = null;
    }

    return _contents;
}

Here is the full error message:
java.security.spec.InvalidKeySpecException: encoded key spec not recognised
at org.bouncycastle.jcajce.provider.asymmetric.util.BaseKeyFactorySpi.engineGeneratePublic(Unknown Source)
at org.bouncycastle.jcajce.provider.asymmetric.rsa.KeyFactorySpi.engineGeneratePublic(Unknown Source)
at java.security.KeyFactory.generatePublic(KeyFactory.java:328)
at xxx.CryptKey.getPublicKey(CryptKey.java:167)
at xxx.CryptSession.encryptWithPublicKey(CryptSession.java:316)
at xxx.Crypt.encrypt(Crypt.java:57)
at snippet.Snippet.main(Snippet.java:201)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:606)
at org.eclipse.jdt.internal.jarinjarloader.JarRsrcLoader.main(JarRsrcLoader.java:58)

","You are indeed reading file incorrectly. You are ignoring the return value of the InputStream.read(). You should call this method in cycle because the individual call is not guaranteed to read the entire byte array.
You can read it manually:
int offset = 0;
int read =  _fileStream.read(_contents, 0, contents.length);
while (read > 0) {
    offset += read;
    read = _fileStream.read(_contents, offset , contents.length - offset );

}

Or you can wrap the underlying input stream into DataInputStream and just use DataInputStream.readFully() method.
","5953","<java><encryption><amazon-web-services><bouncycastle><public-key-encryption>","0","2","1","2015-12-10 18:41:25","23692761","7","","426062","","2014-05-16 04:15:25","2014-05-16 03:05:59",""
"47816938","Java ssh-rsa string to public key","I want to get the public key of the content of an .pub file. This is an example what the content of a .pub file looks like(generated with ssh-keygen):
ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQDBPL2s+25Ank3zS6iHUoVk0tS63dZM0LzAaniiDon0tdWwq4vcL4+fV8BsAEcpMeijS92JhDDc9FccXlHbdDcmd6c4ITOt9h9xxhIefGsi1FTVJ/EjVtbqF5m0bu7ruIMGvuP1p5s004roHx9y0UdHvD/yNWLISMhy4nio6jLailIj3FS53Emj1WRNsOrpja3LzPXzhuuj6YnD9yfByT7iGZipxkmleaXrknChPClLI9uhcqtAzBLdd0NVTJLOt/3+d1cSNwdBw9e53wJvpEmH+P8UOZd+oV/y7cHIej4jQpBXVvpJR1Yaluh5RuxY90B0hSescUAj4g/3HVPpR/gE7op6i9Ab//0iXF15uWGlGzipI4lA2/wYEtv8swTjmdCTMNcTDw/1huTDEzZjghIKVpskHde/Lj416c7eSByLqsMg2OhlZGChKznpIjhuNRXz93DwqKuIKvJKSnhqaJDxmDGfG7nlQ/eTwGeAZ6VR50yMPiRTIpuYd767+Nsg486z7p0pnKoBlL6ffTbfeolUX2b6Nb9ZIOxJdpCSNTQRKQ50p4Y3S580cUM1Y2EfjlfIQG1JdmTQYB75AZXi/cB2PvScmF0bXRoj7iHg4lCnSUvRprWA0xbwzCW/wjNqw6MyRX42FFlvSRrmfaxGZxKYbmk3TzBv+Fp+CADPqQm3OQ== test@test.com

If I am right this is not the public key, but it is possible to get the public key from this string.
This answer gives answer to my question https://stackoverflow.com/a/19387517/2735398
But the answer doesn't seem to work. I get an exception:
java.security.spec.InvalidKeySpecException: java.security.InvalidKeyException: invalid key format

When looking at the comments of the answer I am not the only person with the problem...
How can I fix the exception? Or is there another way to get the public key from the string?
","You have to convert your key to pkcs8 spec. Use below command 
ssh-keygen -f private.key -e -m pkcs8 > test-pkcs8.pub

Then convert it to  x509 
openssl rsa -pubin -in test-pkcs8.pub -outform pem > test-x509.pem

You can then use below code to read the public key as RSAPublicKey in Java 
import java.io.IOException;

import java.net.URISyntaxException;

import java.nio.file.Files;

import java.nio.file.Paths;

import java.security.KeyFactory;

import java.security.NoSuchAlgorithmException;

import java.security.PrivateKey;

import java.security.interfaces.RSAPublicKey;

import java.security.spec.InvalidKeySpecException;

import java.security.spec.PKCS8EncodedKeySpec;

import java.security.spec.X509EncodedKeySpec;

import java.util.Base64;


/**

* This file is intended to be used on a IDE for testing purposes.

* ClassLoader.getSystemResource won't work in a JAR

*/

public class Main {


    public static void main(String[] args) throws InvalidKeySpecException, NoSuchAlgorithmException, IOException, URISyntaxException {


        String privateKeyContent = new String(Files.readAllBytes(Paths.get(ClassLoader.getSystemResource(""private_key_pkcs8.pem"").toURI())));

        String publicKeyContent = new String(Files.readAllBytes(Paths.get(ClassLoader.getSystemResource(""public_key.pem"").toURI())));


        privateKeyContent = privateKeyContent.replaceAll(""\\n"", """").replace(""-----BEGIN PRIVATE KEY-----"", """").replace(""-----END PRIVATE KEY-----"", """");

        publicKeyContent = publicKeyContent.replaceAll(""\\n"", """").replace(""-----BEGIN PUBLIC KEY-----"", """").replace(""-----END PUBLIC KEY-----"", """");;


        KeyFactory kf = KeyFactory.getInstance(""RSA"");


        PKCS8EncodedKeySpec keySpecPKCS8 = new PKCS8EncodedKeySpec(Base64.getDecoder().decode(privateKeyContent));

        PrivateKey privKey = kf.generatePrivate(keySpecPKCS8);


        X509EncodedKeySpec keySpecX509 = new X509EncodedKeySpec(Base64.getDecoder().decode(publicKeyContent));

        RSAPublicKey pubKey = (RSAPublicKey) kf.generatePublic(keySpecX509);


        System.out.println(privKey);

        System.out.println(pubKey);

    }

}

Got the answer from below two links
Converting ssh-rsa to X509 Spec in Java
Loading X509 spec key in Java as RSAPublicKey object
Hope this will give you some intuition. 
","5899","<java><encryption><ssh><rsa><public-key-encryption>","6","2","4","2019-08-22 09:55:10","","5","3","2735398","","2017-12-14 21:06:40","2017-12-14 15:30:57",""
"47816938","Java ssh-rsa string to public key","I want to get the public key of the content of an .pub file. This is an example what the content of a .pub file looks like(generated with ssh-keygen):
ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQDBPL2s+25Ank3zS6iHUoVk0tS63dZM0LzAaniiDon0tdWwq4vcL4+fV8BsAEcpMeijS92JhDDc9FccXlHbdDcmd6c4ITOt9h9xxhIefGsi1FTVJ/EjVtbqF5m0bu7ruIMGvuP1p5s004roHx9y0UdHvD/yNWLISMhy4nio6jLailIj3FS53Emj1WRNsOrpja3LzPXzhuuj6YnD9yfByT7iGZipxkmleaXrknChPClLI9uhcqtAzBLdd0NVTJLOt/3+d1cSNwdBw9e53wJvpEmH+P8UOZd+oV/y7cHIej4jQpBXVvpJR1Yaluh5RuxY90B0hSescUAj4g/3HVPpR/gE7op6i9Ab//0iXF15uWGlGzipI4lA2/wYEtv8swTjmdCTMNcTDw/1huTDEzZjghIKVpskHde/Lj416c7eSByLqsMg2OhlZGChKznpIjhuNRXz93DwqKuIKvJKSnhqaJDxmDGfG7nlQ/eTwGeAZ6VR50yMPiRTIpuYd767+Nsg486z7p0pnKoBlL6ffTbfeolUX2b6Nb9ZIOxJdpCSNTQRKQ50p4Y3S580cUM1Y2EfjlfIQG1JdmTQYB75AZXi/cB2PvScmF0bXRoj7iHg4lCnSUvRprWA0xbwzCW/wjNqw6MyRX42FFlvSRrmfaxGZxKYbmk3TzBv+Fp+CADPqQm3OQ== test@test.com

If I am right this is not the public key, but it is possible to get the public key from this string.
This answer gives answer to my question https://stackoverflow.com/a/19387517/2735398
But the answer doesn't seem to work. I get an exception:
java.security.spec.InvalidKeySpecException: java.security.InvalidKeyException: invalid key format

When looking at the comments of the answer I am not the only person with the problem...
How can I fix the exception? Or is there another way to get the public key from the string?
","Late response but I had the same issue and came up with the following: You'll need Apache commons-io and guava libraries
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.math.BigInteger;
import java.security.spec.RSAPublicKeySpec;

import org.apache.commons.io.IOUtils;

import com.google.common.base.Splitter;
import com.google.common.io.ByteSource;
import com.google.common.io.ByteStreams;
import com.google.common.base.Charsets;

import static com.google.common.base.Preconditions.checkArgument;
import static com.google.common.collect.Iterables.get;
import static com.google.common.collect.Iterables.size;
import static com.google.common.io.BaseEncoding.base64;

public class SSHEncodedToRSAPublicConverter {

  private static final String SSH_MARKER = ""ssh-rsa"";

  private ByteSource supplier;

  public SSHEncodedToRSAPublicConverter(String fileName) {
    this(new File(fileName));
  }

  public SSHEncodedToRSAPublicConverter(File file) {
    try {
      byte[] data = IOUtils.toByteArray(new FileInputStream(file));
      this.supplier = ByteSource.wrap(data);
    } catch (Exception ex) {
      throw new RuntimeException(ex);
    }
  }

  public SSHEncodedToRSAPublicConverter(byte[] data) {
    this.supplier = ByteSource.wrap(data);
  }

  /**
   * Converts an SSH public key to a x.509 compliant format RSA public key spec
   * Source: https://github.com/jclouds/jclouds/blob/master/compute/src/main/java/org/jclouds/ssh/SshKeys.java
   * @return RSAPublicKeySpec
   */
  public RSAPublicKeySpec convertToRSAPublicKey() {
    try {
      InputStream stream = supplier.openStream();
      Iterable<String> parts = Splitter.on(' ').split(IOUtils.toString(stream, Charsets.UTF_8));
      checkArgument(size(parts) >= 2 && SSH_MARKER.equals(get(parts,0)), ""bad format, should be: ssh-rsa AAAB3...."");
      stream = new ByteArrayInputStream(base64().decode(get(parts, 1)));
      String marker = new String(readLengthFirst(stream));
      checkArgument(SSH_MARKER.equals(marker), ""looking for marker %s but received %s"", SSH_MAKER, marker);
      BigInteger publicExponent = new BigInteger(readLengthFirst(stream));
      BigInteger modulus = new BigInteger(readLengthFirst(stream));
      RSAPublicKeySpec keySpec = new RSAPublicKeySpec(modulus, publicExponent);
      return keySpec;
    } catch (Exception ex) {
      throw new RuntimeException(ex);
    }
  }

  private static byte[] readLengthFirst(InputStream in) throws IOException {
    int[] bytes = new int[]{ in.read(), in.read(), in.read(), in.read() };
    int length = 0;
    int shift = 24;
    for (int i = 0; i < bytes.length; i++) {
      length += bytes[i] << shift;
      shift -= 8;
    }
    byte[] val = new byte[length];
    ByteStreams.readFully(in, val);
    return val;
  }
}

Then to use it you can do something like:
File keyFile = new File(""id_rsa.pub"");
Keyspec spec = new SSHEncodedToRSAPublicConverter(keyFile).convertToRSAPublicKey();
KeyFactory kf = KeyFactory.getInstance(""RSA"");
Key key = kf.generatePublic(spec);

I got the conversion (special thanks) portion from the following link:
https://github.com/jclouds/jclouds/blob/master/compute/src/main/java/org/jclouds/ssh/SshKeys.java
","5899","<java><encryption><ssh><rsa><public-key-encryption>","6","1","4","2019-08-22 09:55:10","","5","3","2735398","","2017-12-14 21:06:40","2017-12-14 15:30:57",""
"47816938","Java ssh-rsa string to public key","I want to get the public key of the content of an .pub file. This is an example what the content of a .pub file looks like(generated with ssh-keygen):
ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQDBPL2s+25Ank3zS6iHUoVk0tS63dZM0LzAaniiDon0tdWwq4vcL4+fV8BsAEcpMeijS92JhDDc9FccXlHbdDcmd6c4ITOt9h9xxhIefGsi1FTVJ/EjVtbqF5m0bu7ruIMGvuP1p5s004roHx9y0UdHvD/yNWLISMhy4nio6jLailIj3FS53Emj1WRNsOrpja3LzPXzhuuj6YnD9yfByT7iGZipxkmleaXrknChPClLI9uhcqtAzBLdd0NVTJLOt/3+d1cSNwdBw9e53wJvpEmH+P8UOZd+oV/y7cHIej4jQpBXVvpJR1Yaluh5RuxY90B0hSescUAj4g/3HVPpR/gE7op6i9Ab//0iXF15uWGlGzipI4lA2/wYEtv8swTjmdCTMNcTDw/1huTDEzZjghIKVpskHde/Lj416c7eSByLqsMg2OhlZGChKznpIjhuNRXz93DwqKuIKvJKSnhqaJDxmDGfG7nlQ/eTwGeAZ6VR50yMPiRTIpuYd767+Nsg486z7p0pnKoBlL6ffTbfeolUX2b6Nb9ZIOxJdpCSNTQRKQ50p4Y3S580cUM1Y2EfjlfIQG1JdmTQYB75AZXi/cB2PvScmF0bXRoj7iHg4lCnSUvRprWA0xbwzCW/wjNqw6MyRX42FFlvSRrmfaxGZxKYbmk3TzBv+Fp+CADPqQm3OQ== test@test.com

If I am right this is not the public key, but it is possible to get the public key from this string.
This answer gives answer to my question https://stackoverflow.com/a/19387517/2735398
But the answer doesn't seem to work. I get an exception:
java.security.spec.InvalidKeySpecException: java.security.InvalidKeyException: invalid key format

When looking at the comments of the answer I am not the only person with the problem...
How can I fix the exception? Or is there another way to get the public key from the string?
","Here is my SSH RSA -> RSAPublicKey converter implementation. I've found key format description somewhere in the net, so thanks to the one who provided it.
public class CertificateUtils {
    private static final int VALUE_LENGTH = 4;
    private static final byte[] INITIAL_PREFIX = new byte[]{0x00, 0x00, 0x00, 0x07, 0x73, 0x73, 0x68, 0x2d, 0x72, 0x73, 0x61};
    private static final Pattern SSH_RSA_PATTERN = Pattern.compile(""ssh-rsa[\\s]+([A-Za-z0-9/+]+=*)[\\s]+.*"");

// SSH-RSA key format
//
//        00 00 00 07             The length in bytes of the next field
//        73 73 68 2d 72 73 61    The key type (ASCII encoding of ""ssh-rsa"")
//        00 00 00 03             The length in bytes of the public exponent
//        01 00 01                The public exponent (usually 65537, as here)
//        00 00 01 01             The length in bytes of the modulus (here, 257)
//        00 c3 a3...             The modulus

    public static RSAPublicKey parseSSHPublicKey(String key) throws InvalidKeyException {
        Matcher matcher = SSH_RSA_PATTERN.matcher(key.trim());
        if (!matcher.matches()) {
            throw new InvalidKeyException(""Key format is invalid for SSH RSA."");
        }
        String keyStr = matcher.group(1);

        ByteArrayInputStream is = new ByteArrayInputStream(Base64.decodeBase64(keyStr));

        byte[] prefix = new byte[INITIAL_PREFIX.length];

        try {
            if (INITIAL_PREFIX.length != is.read(prefix) || !ArrayUtils.isEquals(INITIAL_PREFIX, prefix)) {
                throw new InvalidKeyException(""Initial [ssh-rsa] key prefix missed."");
            }

            BigInteger exponent = getValue(is);
            BigInteger modulus = getValue(is);

            return (RSAPublicKey) KeyFactory.getInstance(""RSA"").generatePublic(new RSAPublicKeySpec(modulus, exponent));
        } catch (IOException | InvalidKeySpecException | NoSuchAlgorithmException e) {
            throw new InvalidKeyException(""Failed to read SSH RSA certificate from string"", e);
        }
    }

    private static BigInteger getValue(InputStream is) throws IOException {
        byte[] lenBuff = new byte[VALUE_LENGTH];
        if (VALUE_LENGTH != is.read(lenBuff)) {
            throw new InvalidParameterException(""Unable to read value length."");
        }

        int len = ByteBuffer.wrap(lenBuff).getInt();
        byte[] valueArray = new byte[len];
        if (len != is.read(valueArray)) {
            throw new InvalidParameterException(""Unable to read value."");
        }

        return new BigInteger(valueArray);
    }
}

Hope this helps.
","5899","<java><encryption><ssh><rsa><public-key-encryption>","6","1","4","2019-08-22 09:55:10","","5","3","2735398","","2017-12-14 21:06:40","2017-12-14 15:30:57",""
"47816938","Java ssh-rsa string to public key","I want to get the public key of the content of an .pub file. This is an example what the content of a .pub file looks like(generated with ssh-keygen):
ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQDBPL2s+25Ank3zS6iHUoVk0tS63dZM0LzAaniiDon0tdWwq4vcL4+fV8BsAEcpMeijS92JhDDc9FccXlHbdDcmd6c4ITOt9h9xxhIefGsi1FTVJ/EjVtbqF5m0bu7ruIMGvuP1p5s004roHx9y0UdHvD/yNWLISMhy4nio6jLailIj3FS53Emj1WRNsOrpja3LzPXzhuuj6YnD9yfByT7iGZipxkmleaXrknChPClLI9uhcqtAzBLdd0NVTJLOt/3+d1cSNwdBw9e53wJvpEmH+P8UOZd+oV/y7cHIej4jQpBXVvpJR1Yaluh5RuxY90B0hSescUAj4g/3HVPpR/gE7op6i9Ab//0iXF15uWGlGzipI4lA2/wYEtv8swTjmdCTMNcTDw/1huTDEzZjghIKVpskHde/Lj416c7eSByLqsMg2OhlZGChKznpIjhuNRXz93DwqKuIKvJKSnhqaJDxmDGfG7nlQ/eTwGeAZ6VR50yMPiRTIpuYd767+Nsg486z7p0pnKoBlL6ffTbfeolUX2b6Nb9ZIOxJdpCSNTQRKQ50p4Y3S580cUM1Y2EfjlfIQG1JdmTQYB75AZXi/cB2PvScmF0bXRoj7iHg4lCnSUvRprWA0xbwzCW/wjNqw6MyRX42FFlvSRrmfaxGZxKYbmk3TzBv+Fp+CADPqQm3OQ== test@test.com

If I am right this is not the public key, but it is possible to get the public key from this string.
This answer gives answer to my question https://stackoverflow.com/a/19387517/2735398
But the answer doesn't seem to work. I get an exception:
java.security.spec.InvalidKeySpecException: java.security.InvalidKeyException: invalid key format

When looking at the comments of the answer I am not the only person with the problem...
How can I fix the exception? Or is there another way to get the public key from the string?
","I found a lot of answers how to get the public key - but none of them actually contained the part how to get the openssh public key as a string - it got a special format.
Cudos to @Jcs and @James K Polk
This depends on BouncyCastle. It could probably be done without. 
package cuul.stuff;

import lombok.SneakyThrows;
import org.bouncycastle.jcajce.provider.asymmetric.rsa.BCRSAPrivateCrtKey;
import org.bouncycastle.jce.provider.BouncyCastleProvider;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.math.BigInteger;
import java.nio.charset.StandardCharsets;
import java.security.KeyFactory;
import java.security.PrivateKey;
import java.security.Security;
import java.security.interfaces.RSAPublicKey;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.PKCS8EncodedKeySpec;
import java.security.spec.RSAPublicKeySpec;
import java.util.Base64;

/**
 * Takes an private SSH key and cranks out the corresponding public one.
 *
 * Just what this command would have done: <pre>ssh-keygen -y -f ~/.ssh/id_rsa > ~/.ssh/id_rsa.pub</pre>
 *
 * @link https://stackoverflow.com/questions/3706177/how-to-generate-ssh-compatible-id-rsa-pub-from-java
 * @link https://stackoverflow.com/questions/7216969/getting-rsa-private-key-from-pem-base64-encoded-private-key-file/7221381#7221381
 *
 * Why - because I can.
 */
public class ExtractPublicFromPrivateSshKey {

    private static final String BEGIN_RSA_PRIVATE_KEY = ""-----BEGIN RSA PRIVATE KEY-----\n"";
    private static final String END_RSA_PRIVATE_KEY = ""-----END RSA PRIVATE KEY-----"";

    static {
        Security.addProvider(new BouncyCastleProvider());
    }

    @SneakyThrows
    public static String extract(String privateKeyString) {
        if (!privateKeyString.startsWith(BEGIN_RSA_PRIVATE_KEY)) {
            throw new InvalidKeySpecException(""Can only extract public key from a RSA private. ""
                    + ""This is not an RSA key (header should have been '"" + BEGIN_RSA_PRIVATE_KEY + ""'"");
        }

        privateKeyString = privateKeyString.replace(BEGIN_RSA_PRIVATE_KEY, """");
        privateKeyString = privateKeyString.replace(END_RSA_PRIVATE_KEY, """");
        privateKeyString = privateKeyString.trim();

        byte[] privateKeyBytes = Base64.getMimeDecoder().decode(privateKeyString);

        BCRSAPrivateCrtKey rsaPrivateKey = (BCRSAPrivateCrtKey) getPrivate(privateKeyBytes);

        //create a KeySpec and let the Factory due the Rest. You could also create the KeyImpl by your own.
        RSAPublicKey publicKey = (RSAPublicKey) KeyFactory.getInstance(""RSA"").generatePublic(
                new RSAPublicKeySpec(rsaPrivateKey.getModulus(), rsaPrivateKey.getPublicExponent()));

        byte[] bytes = encodePublicKey(publicKey);
        return ""ssh-rsa "" + new String(Base64.getEncoder().encode(bytes), StandardCharsets.UTF_8) + "" some@user"";
    }

    private static PrivateKey getPrivate(byte[] privateKeyBytes)
            throws Exception {
        PKCS8EncodedKeySpec spec = new PKCS8EncodedKeySpec(privateKeyBytes);
        KeyFactory kf = KeyFactory.getInstance(""RSA"");
        return kf.generatePrivate(spec);
    }

    /**
     * @link https://stackoverflow.com/questions/3706177/how-to-generate-ssh-compatible-id-rsa-pub-from-java
     *
     * The key format used by ssh is defined in the RFC #4253. The format for RSA public key is the following :

     * string    ""ssh-rsa""
     * mpint     e  // key public exponent
     * mpint     n  // key modulus
     *
     * All data type encoding is defined in the section #5 of RFC #4251. string and mpint (multiple precision integer) types are encoded this way :
     *
     * 4-bytes word: data length (unsigned big-endian 32 bits integer)
     * n bytes     : binary representation of the data
     *
     * or instance, the encoding of the string ""ssh-rsa"" is:
     *
     * byte[] data = new byte[] {0, 0, 0, 7, 's', 's', 'h', '-', 'r', 's', 'a'};
     */
    private static byte[] encodePublicKey(RSAPublicKey key) throws IOException {
        ByteArrayOutputStream out = new ByteArrayOutputStream();
        /* encode the ""ssh-rsa"" string */
        byte[] sshrsa = new byte[] {0, 0, 0, 7, 's', 's', 'h', '-', 'r', 's', 'a'};
        out.write(sshrsa);
        /* Encode the public exponent */
        BigInteger e = key.getPublicExponent();
        byte[] data = e.toByteArray();
        encodeUInt32(data.length, out);
        out.write(data);
        /* Encode the modulus */
        BigInteger m = key.getModulus();
        data = m.toByteArray();
        encodeUInt32(data.length, out);
        out.write(data);
        return out.toByteArray();
    }

    private static void encodeUInt32(int value, OutputStream out) throws IOException {
        byte[] tmp = new byte[4];
        tmp[0] = (byte)((value >>> 24) & 0xff);
        tmp[1] = (byte)((value >>> 16) & 0xff);
        tmp[2] = (byte)((value >>> 8) & 0xff);
        tmp[3] = (byte)(value & 0xff);
        out.write(tmp);
    }
}

","5899","<java><encryption><ssh><rsa><public-key-encryption>","6","0","4","2019-08-22 09:55:10","","5","3","2735398","","2017-12-14 21:06:40","2017-12-14 15:30:57",""
"18856937","OpenPGP encryption with BouncyCastle","I have been trying to put together an in-memory public-key encryption infrastructure using OpenPGP via Bouncy Castle.  One of our vendors uses OpenPGP public key encryption to encrypt all their feeds, and requires us to do the same, so I'm stuck with the technology and the implementation.  So now I'm coding an OpenPGP encryption/ decryption toolkit for automating these feeds.
The examples at bouncycastle.org inexplicably default to writing encrypted data to and collecting keys from a file system; this is not what I want to do, so I've been trying to get everything stream-based.
I have gotten to the point where I can actually get my code to compile and run, but my encrypted payload is empty.  I think I'm missing something silly, but after several days of trying this and that, I have lost the ability to objectively examine this.
My utility class contains these methods:
    public static PgpPublicKey ImportPublicKey(
        this Stream publicIn)
    {
        var pubRings =
            new PgpPublicKeyRingBundle(PgpUtilities.GetDecoderStream(publicIn)).GetKeyRings().OfType<PgpPublicKeyRing>();
        var pubKeys = pubRings.SelectMany(x => x.GetPublicKeys().OfType<PgpPublicKey>());
        var pubKey = pubKeys.FirstOrDefault();
        return pubKey;
    }

    public static Stream Streamify(this string theString, Encoding encoding = null)
    {
        encoding = encoding ?? Encoding.UTF8;
        var stream = new MemoryStream(encoding.GetBytes(theString));
        return stream;
    }

    public static string Stringify(this Stream theStream,
                                   Encoding encoding = null)
    {
        encoding = encoding ?? Encoding.UTF8;
        using (var reader = new StreamReader(theStream, encoding))
        {
            return reader.ReadToEnd();
        }
    }

    public static byte[] ReadFully(this Stream stream)
    {
        if (!stream.CanRead) throw new ArgumentException(""This is not a readable stream."");
        var buffer = new byte[32768];
        using (var ms = new MemoryStream())
        {
            while (true)
            {
                var read = stream.Read(buffer, 0, buffer.Length);
                if (read <= 0)
                    return ms.ToArray();
                ms.Write(buffer, 0, read);
            }
        }
    }

    public static void PgpEncrypt(
        this Stream toEncrypt,
        Stream outStream,
        PgpPublicKey encryptionKey,
        bool armor = true,
        bool verify = true,
        CompressionAlgorithmTag compressionAlgorithm = CompressionAlgorithmTag.Zip)
    {
        if (armor) outStream = new ArmoredOutputStream(outStream);
        var compressor = new PgpCompressedDataGenerator(CompressionAlgorithmTag.Zip);
        outStream = compressor.Open(outStream);
        var data = toEncrypt.ReadFully();
        var encryptor = new PgpEncryptedDataGenerator(SymmetricKeyAlgorithmTag.Cast5, verify, new SecureRandom());
        encryptor.AddMethod(encryptionKey);
        outStream = encryptor.Open(outStream, data.Length);
        outStream.Write(data, 0, data.Length);
    }

My test method looks like this:
    private static void EncryptMessage()
    {
        var pubKey = @""<public key text>"";

        var clearText = ""This is an encrypted message.  There are many like it but this one is cryptic."";
        using (var stream = pubKey.Streamify())
        {
            var key = stream.ImportPublicKey();
            using (var clearStream = clearText.Streamify())
            using (var cryptoStream = new MemoryStream())
            {
                clearStream.PgpEncrypt(cryptoStream,key);
                cryptoStream.Position = 0;
                Console.WriteLine(cryptoStream.Stringify());
                Console.WriteLine(""Press any key to continue."");
            }
        }
        Console.ReadKey();
    }

The result I get looks like this:
-----BEGIN PGP MESSAGE-----
Version: BCPG C# v1.7.4114.6378


Press any key to continue.

Can someone tell me what I am doing wrong?
","OK, I managed to get this working.  There were several problems with this implementation.  One problem was that certain things had to be done in order.  Here is what seems to need to happen:

The raw data needs to be put into a PgpLiteralData object
The literal data needs to be encrypted.
The encrypted data needs to be compressed.
The compressed data (optionally) needs to be armored.
The underlying streams need to be closed in order of usage.

There should be a more elegant way to do this, but the streams used by the BouncyCastle library are all frustratingly one-way, and at several points, I needed to convert the stream to a byte array to get another part to work.  I include the code I used and independently verified; if someone has a verifyably better way of doing this, I would be quite interested.
public static class OpenPgpUtility
{
    public static void ExportKeyPair(
        Stream secretOut,
        Stream publicOut,
        AsymmetricKeyParameter publicKey,
        AsymmetricKeyParameter privateKey,
        string identity,
        char[] passPhrase,
        bool armor)
    {
        if (armor)
        {
            secretOut = new ArmoredOutputStream(secretOut);
        }

        var secretKey = new PgpSecretKey(
            PgpSignature.DefaultCertification,
            PublicKeyAlgorithmTag.RsaGeneral,
            publicKey,
            privateKey,
            DateTime.UtcNow,
            identity,
            SymmetricKeyAlgorithmTag.Cast5,
            passPhrase,
            null,
            null,
            new SecureRandom()
            );

        secretKey.Encode(secretOut);

        if (armor)
        {
            secretOut.Close();
            publicOut = new ArmoredOutputStream(publicOut);
        }

        var key = secretKey.PublicKey;

        key.Encode(publicOut);

        if (armor)
        {
            publicOut.Close();
        }
    }

    public static PgpPublicKey ImportPublicKey(
        this Stream publicIn)
    {
        var pubRings =
            new PgpPublicKeyRingBundle(PgpUtilities.GetDecoderStream(publicIn)).GetKeyRings().OfType<PgpPublicKeyRing>();
        var pubKeys = pubRings.SelectMany(x => x.GetPublicKeys().OfType<PgpPublicKey>());
        var pubKey = pubKeys.FirstOrDefault();
        return pubKey;
    }

    public static PgpSecretKey ImportSecretKey(
        this Stream secretIn)
    {
        var secRings =
            new PgpSecretKeyRingBundle(PgpUtilities.GetDecoderStream(secretIn)).GetKeyRings().OfType<PgpSecretKeyRing>();
        var secKeys = secRings.SelectMany(x => x.GetSecretKeys().OfType<PgpSecretKey>());
        var secKey = secKeys.FirstOrDefault();
        return secKey;
    }

    public static Stream Streamify(this string theString, Encoding encoding = null)
    {
        encoding = encoding ?? Encoding.UTF8;
        var stream = new MemoryStream(encoding.GetBytes(theString));
        return stream;
    }

    public static string Stringify(this Stream theStream,
                                   Encoding encoding = null)
    {
        encoding = encoding ?? Encoding.UTF8;
        using (var reader = new StreamReader(theStream, encoding))
        {
            return reader.ReadToEnd();
        }
    }

    public static byte[] ReadFully(this Stream stream, int position = 0)
    {
        if (!stream.CanRead) throw new ArgumentException(""This is not a readable stream."");
        if (stream.CanSeek) stream.Position = 0;
        var buffer = new byte[32768];
        using (var ms = new MemoryStream())
        {
            while (true)
            {
                var read = stream.Read(buffer, 0, buffer.Length);
                if (read <= 0)
                    return ms.ToArray();
                ms.Write(buffer, 0, read);
            }
        }
    }

    public static void PgpEncrypt(
        this Stream toEncrypt,
        Stream outStream,
        PgpPublicKey encryptionKey,
        bool armor = true,
        bool verify = false,
        CompressionAlgorithmTag compressionAlgorithm = CompressionAlgorithmTag.Zip)
    {
        var encryptor = new PgpEncryptedDataGenerator(SymmetricKeyAlgorithmTag.Cast5, verify, new SecureRandom());
        var literalizer = new PgpLiteralDataGenerator();
        var compressor = new PgpCompressedDataGenerator(compressionAlgorithm);
        encryptor.AddMethod(encryptionKey);

        //it would be nice if these streams were read/write, and supported seeking.  Since they are not,
        //we need to shunt the data to a read/write stream so that we can control the flow of data as
        //we go.
        using (var stream = new MemoryStream()) // this is the read/write stream
        using (var armoredStream = armor ? new ArmoredOutputStream(stream) : stream as Stream)
        using (var compressedStream = compressor.Open(armoredStream))
        {
            //data is encrypted first, then compressed, but because of the one-way nature of these streams,
            //other ""interim"" streams are required.  The raw data is encapsulated in a ""Literal"" PGP object.
            var rawData = toEncrypt.ReadFully();
            var buffer = new byte[1024];
            using (var literalOut = new MemoryStream())
            using (var literalStream = literalizer.Open(literalOut, 'b', ""STREAM"", DateTime.UtcNow, buffer))
            {
                literalStream.Write(rawData, 0, rawData.Length);
                literalStream.Close();
                var literalData = literalOut.ReadFully();

                //The literal data object is then encrypted, which flows into the compressing stream and
                //(optionally) into the ASCII armoring stream.
                using (var encryptedStream = encryptor.Open(compressedStream, literalData.Length))
                {
                    encryptedStream.Write(literalData, 0, literalData.Length);
                    encryptedStream.Close();
                    compressedStream.Close();
                    armoredStream.Close();

                    //the stream processes are now complete, and our read/write stream is now populated with 
                    //encrypted data.  Convert the stream to a byte array and write to the out stream.
                    stream.Position = 0;
                    var data = stream.ReadFully();
                    outStream.Write(data, 0, data.Length);
                }
            }
        }
    }
}

My test method looked like this:
    private static void EncryptMessage()
    {
        var pubKey = @""<public key text here>"";

        var clearText = @""<message text here>"";
        using (var stream = pubKey.Streamify())
        {
            var key = stream.ImportPublicKey();
            using (var clearStream = clearText.Streamify())
            using (var cryptoStream = new MemoryStream())
            {
                clearStream.PgpEncrypt(cryptoStream, key);
                cryptoStream.Position = 0;
                var cryptoString = cryptoStream.Stringify();
                Console.WriteLine(cryptoString);
                Console.WriteLine(""Press any key to continue."");
            }
        }
        Console.ReadKey();
    }

Since someone asked, my decryption algorithm looked like this:
public static Stream PgpDecrypt(
    this Stream encryptedData,
    string armoredPrivateKey,
    string privateKeyPassword,
    Encoding armorEncoding = null)
{
    armorEncoding = armorEncoding ?? Encoding.UTF8;
    var stream = PgpUtilities.GetDecoderStream(encryptedData);
    var layeredStreams = new List<Stream> { stream }; //this is to clean up/ dispose of any layered streams.
    var dataObjectFactory = new PgpObjectFactory(stream);
    var dataObject = dataObjectFactory.NextPgpObject();
    Dictionary<long, PgpSecretKey> secretKeys;

    using (var privateKeyStream = armoredPrivateKey.Streamify(armorEncoding))
    {
        var secRings =
            new PgpSecretKeyRingBundle(PgpUtilities.GetDecoderStream(privateKeyStream)).GetKeyRings()
                                                                                       .OfType<PgpSecretKeyRing>();
        var pgpSecretKeyRings = secRings as PgpSecretKeyRing[] ?? secRings.ToArray();
        if (!pgpSecretKeyRings.Any()) throw new ArgumentException(""No secret keys found."");
        secretKeys = pgpSecretKeyRings.SelectMany(x => x.GetSecretKeys().OfType<PgpSecretKey>())
                                      .ToDictionary(key => key.KeyId, value => value);
    }

    while (!(dataObject is PgpLiteralData) && dataObject != null)
    {
        try
        {
            var compressedData = dataObject as PgpCompressedData;
            var listedData = dataObject as PgpEncryptedDataList;

            //strip away the compression stream
            if (compressedData != null)
            {
                stream = compressedData.GetDataStream();
                layeredStreams.Add(stream);
                dataObjectFactory = new PgpObjectFactory(stream);
            }

            //strip the PgpEncryptedDataList
            if (listedData != null)
            {
                var encryptedDataList = listedData.GetEncryptedDataObjects()
                                                  .OfType<PgpPublicKeyEncryptedData>().First();
                var decryptionKey = secretKeys[encryptedDataList.KeyId]
                    .ExtractPrivateKey(privateKeyPassword.ToCharArray());
                stream = encryptedDataList.GetDataStream(decryptionKey);
                layeredStreams.Add(stream);
                dataObjectFactory = new PgpObjectFactory(stream);
            }

            dataObject = dataObjectFactory.NextPgpObject();
        }
        catch (Exception ex)
        {
            //Log exception here.
            throw new PgpException(""Failed to strip encapsulating streams."", ex);
        }
    }

    foreach (var layeredStream in layeredStreams)
    {
        layeredStream.Close();
        layeredStream.Dispose();
    }

    if (dataObject == null) return null;

    var literalData = (PgpLiteralData)dataObject;
    var ms = new MemoryStream();
    using (var clearData = literalData.GetInputStream())
    {
        Streams.PipeAll(clearData, ms);
    }
    ms.Position = 0;
    return ms;
}

","5890","<c#><bouncycastle><public-key-encryption><openpgp>","9","19","1","2019-10-17 06:33:19","18882130","0","10","","","","2013-09-17 18:11:31",""
"11996229","Whats wrong with being your own Certificate Authority and self-signing for your email encryption?","Is there any real reason to use a 3rd party Certificate Authority for your own email security?
( meaning using S/MIME )
I found I am able to become my own CAuthority and create my own self-signed root certificates...and they work just fine installed on my machines and mobile devices.
Is there a compelling reason to use a 3rd party's paid certificates instead of my own self-generated and signed ones that I control?  
I keep thinking - the person or entity I most trust with the authority of my validated encrypted emails... is ME!... why would I let an additional un-verifiable by me entity into that chain of communication? - if who Im sending emails to is others who know me and trust that its me..? and why would I PAY them? 
I can understand if the communication is between my commercial website and unknown outside individuals who don't know me and are transacting money... but for personal email? between family and well known friends or co-wokers?  
Is there something else I don't understand about public-private key encryption that makes having a validated big 3rd party give me the certificates worth paying for?
I understand the need for SSL 3rd party verify when dealing with commerce on websites or trusting websites with your secure connectivity.  But between individuals? it seems different...individuals that you know personally even more different. No?
","The only reason to use an external CA is so that there's a shared trust root between you and another party. If you control all the machines such as in a domain, then there's no reason at all you can't use your own CA. We have our own domain CA for Exchange. It's actually a lot easier than an external CA because the servers and clients will get the CA certs automatically.
","5886","<security><public-key-encryption><private-key><certificate-authority><smime>","6","8","5","2016-12-21 15:53:24","11996289","3","1","296899","","2012-08-18 08:10:04","2012-08-16 22:16:32",""
"11996229","Whats wrong with being your own Certificate Authority and self-signing for your email encryption?","Is there any real reason to use a 3rd party Certificate Authority for your own email security?
( meaning using S/MIME )
I found I am able to become my own CAuthority and create my own self-signed root certificates...and they work just fine installed on my machines and mobile devices.
Is there a compelling reason to use a 3rd party's paid certificates instead of my own self-generated and signed ones that I control?  
I keep thinking - the person or entity I most trust with the authority of my validated encrypted emails... is ME!... why would I let an additional un-verifiable by me entity into that chain of communication? - if who Im sending emails to is others who know me and trust that its me..? and why would I PAY them? 
I can understand if the communication is between my commercial website and unknown outside individuals who don't know me and are transacting money... but for personal email? between family and well known friends or co-wokers?  
Is there something else I don't understand about public-private key encryption that makes having a validated big 3rd party give me the certificates worth paying for?
I understand the need for SSL 3rd party verify when dealing with commerce on websites or trusting websites with your secure connectivity.  But between individuals? it seems different...individuals that you know personally even more different. No?
","this article describes it pretty well:
http://www.davidpashley.com/articles/cert-authority.html
and this one is really good too - look at the sidebar commentary:
http://www.area536.com/projects/be-your-own-certificate-authority-with-openssl/
he doesn't specifically mention SMIME email - but I think it falls under this category.
I believe that in my case ( small personal security ) being your own CA is a valid and ok way to do things - as long as you can wrap your head around the process and do it with careful understanding of the limits.
I'll still wait for someone to convince me otherwise here tho... thanks for all answers everyone is helpful!
","5886","<security><public-key-encryption><private-key><certificate-authority><smime>","6","1","5","2016-12-21 15:53:24","11996289","3","1","296899","","2012-08-18 08:10:04","2012-08-16 22:16:32",""
"11996229","Whats wrong with being your own Certificate Authority and self-signing for your email encryption?","Is there any real reason to use a 3rd party Certificate Authority for your own email security?
( meaning using S/MIME )
I found I am able to become my own CAuthority and create my own self-signed root certificates...and they work just fine installed on my machines and mobile devices.
Is there a compelling reason to use a 3rd party's paid certificates instead of my own self-generated and signed ones that I control?  
I keep thinking - the person or entity I most trust with the authority of my validated encrypted emails... is ME!... why would I let an additional un-verifiable by me entity into that chain of communication? - if who Im sending emails to is others who know me and trust that its me..? and why would I PAY them? 
I can understand if the communication is between my commercial website and unknown outside individuals who don't know me and are transacting money... but for personal email? between family and well known friends or co-wokers?  
Is there something else I don't understand about public-private key encryption that makes having a validated big 3rd party give me the certificates worth paying for?
I understand the need for SSL 3rd party verify when dealing with commerce on websites or trusting websites with your secure connectivity.  But between individuals? it seems different...individuals that you know personally even more different. No?
","When people encrypt their eMail, they just want the email to be transported over the web and to be stored on the target system as an encrypted data set which only the holder of the private key can read.
Signing the email is an additional feature which should identify the sender of the email. Traditionally a signature on paper is used in the western hemisphere which is easy to fake. Therefore an attestation of the signature was required for important documents. Digital Certificate Authorites for SMIME typically attest only that the requestor had access to a certain email address, which is probably worth nothing - certainly not 20 $/year.
For me it is perfectly OK to send my private key via email or exchange it on a memory stick. What's more important is to secure your private key when you really want secure communication. Typically everyone who can get access to your PC has also access to your private key! I'm using a smart card to generate and to store the private key. The key never leaves the card. However, you have to trust the smartcard. I do trust my card because it was developed by my team. This is certainly not an option lots of people have.  
","5886","<security><public-key-encryption><private-key><certificate-authority><smime>","6","-3","5","2016-12-21 15:53:24","11996289","3","1","296899","","2012-08-18 08:10:04","2012-08-16 22:16:32",""
"11996229","Whats wrong with being your own Certificate Authority and self-signing for your email encryption?","Is there any real reason to use a 3rd party Certificate Authority for your own email security?
( meaning using S/MIME )
I found I am able to become my own CAuthority and create my own self-signed root certificates...and they work just fine installed on my machines and mobile devices.
Is there a compelling reason to use a 3rd party's paid certificates instead of my own self-generated and signed ones that I control?  
I keep thinking - the person or entity I most trust with the authority of my validated encrypted emails... is ME!... why would I let an additional un-verifiable by me entity into that chain of communication? - if who Im sending emails to is others who know me and trust that its me..? and why would I PAY them? 
I can understand if the communication is between my commercial website and unknown outside individuals who don't know me and are transacting money... but for personal email? between family and well known friends or co-wokers?  
Is there something else I don't understand about public-private key encryption that makes having a validated big 3rd party give me the certificates worth paying for?
I understand the need for SSL 3rd party verify when dealing with commerce on websites or trusting websites with your secure connectivity.  But between individuals? it seems different...individuals that you know personally even more different. No?
","In my opinion, using a self-signed CA is an absolutely valid option. Certificates issued by this CA and used for e-mail encryption work the same way as if they were issued from a globally trusted CA with the one exception that the end user must manually trust the CA once.
This means that the crucial step is to trust the self-signed CA. However, you can make sure that the self-signed CA is correct, this step is even safer than relying on a global trust company which you must trust but do not have the choice to.
For example, we publish our public CA certificate on the web, asking others who we would like to exchange encrypted mail with to download, import and trust it. It is easy to make sure that they did not get a forged certificate by checking the certificate's finger print with us. 
Once they have trusted our CA, encrypted e-mail exchange is no difference to using a commercial, ""professional"" (intermediate) certificate.
","5886","<security><public-key-encryption><private-key><certificate-authority><smime>","6","0","5","2016-12-21 15:53:24","11996289","3","1","296899","","2012-08-18 08:10:04","2012-08-16 22:16:32",""
"11996229","Whats wrong with being your own Certificate Authority and self-signing for your email encryption?","Is there any real reason to use a 3rd party Certificate Authority for your own email security?
( meaning using S/MIME )
I found I am able to become my own CAuthority and create my own self-signed root certificates...and they work just fine installed on my machines and mobile devices.
Is there a compelling reason to use a 3rd party's paid certificates instead of my own self-generated and signed ones that I control?  
I keep thinking - the person or entity I most trust with the authority of my validated encrypted emails... is ME!... why would I let an additional un-verifiable by me entity into that chain of communication? - if who Im sending emails to is others who know me and trust that its me..? and why would I PAY them? 
I can understand if the communication is between my commercial website and unknown outside individuals who don't know me and are transacting money... but for personal email? between family and well known friends or co-wokers?  
Is there something else I don't understand about public-private key encryption that makes having a validated big 3rd party give me the certificates worth paying for?
I understand the need for SSL 3rd party verify when dealing with commerce on websites or trusting websites with your secure connectivity.  But between individuals? it seems different...individuals that you know personally even more different. No?
","Nowadays certificates can be obtained for free. A lot of the answers above are valid, but I still choose to use certificate to give host like gmail/yahoo/hotmail less reasons to throw me into spam (doesn't work all the time though). 
Spf,dkim,certs.. They are all free, so why not?
I'm using postfix+letsencrypt and working brilliantly. 
","5886","<security><public-key-encryption><private-key><certificate-authority><smime>","6","-1","5","2016-12-21 15:53:24","11996289","3","1","296899","","2012-08-18 08:10:04","2012-08-16 22:16:32",""
"6334141","How to establish a secure connection by using Synapse?","I'm testing Synapse and want to know how can I establish a secure connection. I noticed it supports SSL, but I'm not sure whether it suits my needs. I don't have a certificate from CA. I just want to encrypt all data between my server program and client program. Sure, I can encrypt the data myself before sending out. But if SSL can encrypt the data, maybe I can just use it. From what I know, SSL is for ""encryption"" and ""authentication"". What I need is only ""encryption"". Is it possible with Synapse? 
UPDATE:
Thanks for helping from daemon_x and the author of Synapse, Lukas Gebauer, I think I finally make it work. Here are what I did:
Server Side:
1) Uses ssl_openssl in your unit and put 'libeay32.dll' and 'ssleay32.dll' to the same directory of the exe file
2) After a connection is accepted, add following lines of code for the newly created socket.
fclient.SSLAcceptConnection;

Client side: 
1) Uses ssl_openssl in your unit and put 'libeay32.dll' and 'ssleay32.dll' to the same directory of the exe file
2) After connected to the server, add following line.
fclient.SSLDoConnect;

If no error occurred, the connection is secure now. But when you run your code, as said in document of Synapse, you may notice that the SSLAcceptConnection takes some time to return. So if you want to speed things up, you better create a certificate file and private key file upfront. And add following code before SSLAcceptConnection
  fclient.SSL.CertificateFile := 'bs-cert';
  fclient.SSL.PrivateKeyFile := 'bs-privatekey';

If you don't have a certificate and private key, please refer to ""CreateSelfSignedCert"" in ssl_openssl for getting a self-signed certificate and private key. You can save, by WriteStrToStream for example, FCertificate and FPrivatekey to files and use them later.
","Yes it is; you can use one of the plugins shipped with Synapse. As it's also mentioned there, the best is to use the ssl_openssl.pas. If you decide to follow this one you will need except Sysapse also the OpenSSL library. Author recommends OpenSSL 0.9.7 but as he said on our local forum it seems to works also with OpenSSL 1.0.0d.
Note if you are using D2009 up you will need a Unicode support which is not fully supported in version. Download the latest version instead.
The following sample code receives first 1024 bytes as a response to the HTTP GET method of a secured website using SSL encryption. I've used for it OpenSSL 0.9.8h with the latest version of Synapse. Note you need to put libssl32.dll and libeay32.dll from the OpenSSL package into your output directory to make it work properly. Let's have a form with a button and memo where we receive a result.
uses blcksock, synautil, synsock, ssl_openssl, ssl_openssl_lib;

procedure TForm1.Button1Click(Sender: TObject);
var Socket: TTCPBlockSocket;

begin
  Socket := TTCPBlockSocket.Create;

  try
    Socket.Connect('www.yousendit.com', '443'); // connect to the host
    Socket.SSLDoConnect; // start SSL connection; only server has a certificate

    if Socket.LastError = 0 then
      begin
        Socket.SendString('GET' + CRLF); // request GET method
        Memo1.Text := Socket.RecvBufferStr(1024, 1000); // receive 1024 bytes
      end;

  finally
    Socket.Free;
  end;
end;

","5880","<delphi><ssl><public-key-encryption><synapse>","9","6","1","2011-06-15 02:49:34","6336378","0","2","116709","","2011-06-15 02:49:34","2011-06-13 17:50:38",""
"48611041","Using node.js crypto to verify signatures","I am trying to use AWS lambda to verify signatures created with sec256r1 in swift.
Message: ""some text to sign""
Has been hashed with sha256 too
signatures will be in base64
encoding:MEYCIQCPfWhpzxMqu3gZWflBm5V0aetgb2/S+SGyGcElaOjgdgIhALaD4lbxVwa8HUUBFOLz+CGvIioDkf9oihSnXHCqh8yV

and public key will look like so:
-----BEGIN PUBLIC KEY-----
MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEXIvPbzLjaPLd8jgiv1TL/X8PXpJN
gDkGRj9U9Lcx1yKURpQFVavcMkfWyO8r7JlZNMax0JKfLZUM1IePRjHlFw==
-----END PUBLIC KEY-----

To clarify, 
I am trying to use lambda to verify signatures that come from the client side, and encrypt data with their public key if need be. 
Here is code:
    const crypto = require('crypto');
    const verify = crypto.createVerify('SHA256');

    verify.write('some text to sign');
    verify.end();

    const l1 = ""-----BEGIN PUBLIC KEY-----\n""
    const l2 = 
  ""MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEXIvPbzLjaPLd8jgiv1TL/X8PXpJNgDkGRj9U9Lcx1yKURpQFVavcMkfWyO8r7JlZNMax0JKfLZUM1IePRjHlFw==""

    const l3 = ""\n-----END PUBLIC KEY-----""

    const publicKey = l1 + l2 + l3

    const signature = ""MEYCIQCPfWhpzxMqu3gZWflBm5V0aetgb2/S+SGyGcElaOjgdgIhALaD4lbxVwa8HUUBFOLz+CGvIioDkf9oihSnXHCqh8yV"";

    console.log(verify.verify(publicKey, signature));// Prints: true or false

","Please see the fuller solution at this StackOverflow post which shows how to use the verify.update() and verify.verify() methods in node.js.
","5851","<node.js><digital-signature><public-key-encryption>","2","1","2","2019-02-15 05:43:32","48614131","8","","1373465","","2019-02-15 02:28:07","2018-02-04 17:35:07",""
"48611041","Using node.js crypto to verify signatures","I am trying to use AWS lambda to verify signatures created with sec256r1 in swift.
Message: ""some text to sign""
Has been hashed with sha256 too
signatures will be in base64
encoding:MEYCIQCPfWhpzxMqu3gZWflBm5V0aetgb2/S+SGyGcElaOjgdgIhALaD4lbxVwa8HUUBFOLz+CGvIioDkf9oihSnXHCqh8yV

and public key will look like so:
-----BEGIN PUBLIC KEY-----
MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEXIvPbzLjaPLd8jgiv1TL/X8PXpJN
gDkGRj9U9Lcx1yKURpQFVavcMkfWyO8r7JlZNMax0JKfLZUM1IePRjHlFw==
-----END PUBLIC KEY-----

To clarify, 
I am trying to use lambda to verify signatures that come from the client side, and encrypt data with their public key if need be. 
Here is code:
    const crypto = require('crypto');
    const verify = crypto.createVerify('SHA256');

    verify.write('some text to sign');
    verify.end();

    const l1 = ""-----BEGIN PUBLIC KEY-----\n""
    const l2 = 
  ""MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEXIvPbzLjaPLd8jgiv1TL/X8PXpJNgDkGRj9U9Lcx1yKURpQFVavcMkfWyO8r7JlZNMax0JKfLZUM1IePRjHlFw==""

    const l3 = ""\n-----END PUBLIC KEY-----""

    const publicKey = l1 + l2 + l3

    const signature = ""MEYCIQCPfWhpzxMqu3gZWflBm5V0aetgb2/S+SGyGcElaOjgdgIhALaD4lbxVwa8HUUBFOLz+CGvIioDkf9oihSnXHCqh8yV"";

    console.log(verify.verify(publicKey, signature));// Prints: true or false

","Here's how to inegrate with Nodejs.Crypto. First, the RSA private  and public keys need to be generated. There are several ways to do that, here's an a way to do this online with encrypt.JS. You can use getSignatureByInput function below after private and public keys have been stored into the filesystem which generates a unique signature given a string input:
const crypto = require('crypto')
const fs = require('fs')

const getSignatureByInput = (input) => {
  let privatePem = fs.readFileSync('PRIVATE_KEY_FILE_PATH_GOES_HERE')
  let key = privatePem.toString('ascii')
  let sign = crypto.createSign('RSA-SHA256')
  sign.update(input)
  let signature = sign.sign(key, 'hex')

  return signature
}

Thereafter, to verify a signature, you can use the following function:
const getSignatureVerifyResult = (input) => {
        let signatureSignedByPrivateKey = getSignatureByInput(input)

        let pem = fs.readFileSync('PUBLIC_KEY_FILE_PATH_GOES_HERE')
        let publicKey = pem.toString('ascii')
        const verifier = crypto.createVerify('RSA-SHA256')

        verifier.update(input, 'ascii')

        const publicKeyBuf = new Buffer(publicKey, 'ascii')
        const signatureBuf = new Buffer(signatureSignedByPrivateKey, 'hex')
        const result = verifier.verify(publicKeyBuf, signatureBuf)

        return result;
}

getSignatureVerifyResult will return true/false depending on whether the signature are verified. Keep in mind that there's a plethora of algorithms to choose when it comes to signing.
","5851","<node.js><digital-signature><public-key-encryption>","2","0","2","2019-02-15 05:43:32","48614131","8","","1373465","","2019-02-15 02:28:07","2018-02-04 17:35:07",""
"38659198","gpg: Sorry, no terminal at all requested - can't get input","When decrypting I get following error:
$ eyaml decrypt -s 'ENC and the key goes on here'


.gnupg --quiet --no-secmem-warning --no-permission-warning --no-tty --yes --decrypt)
failed with: gpg: Sorry, no terminal at all requested - can't get input
I have checked my keys, everything is in order. At this point I am out of options.
","You need to remove the option --no-tty

--no-tty
  Make sure that the TTY (terminal) is never used for any output. This option is needed in some cases because GnuPG sometimes
  prints warnings to the TTY even if --batch is used.

","5844","<linux><architecture><public-key-encryption><gnupg><snakeyaml>","6","5","2","2018-07-04 12:56:00","","1","3","712334","","2018-07-04 12:43:07","2016-07-29 12:43:05",""
"38659198","gpg: Sorry, no terminal at all requested - can't get input","When decrypting I get following error:
$ eyaml decrypt -s 'ENC and the key goes on here'


.gnupg --quiet --no-secmem-warning --no-permission-warning --no-tty --yes --decrypt)
failed with: gpg: Sorry, no terminal at all requested - can't get input
I have checked my keys, everything is in order. At this point I am out of options.
","If you configured Automatic Git commit signing with GPG on macOS and you see this error comment out no-tty in ~/.gnupg/gpg.conf as suggested by Fahl-Design.

This will also allow you to generate new GPG keys following the GitHub instructions for new keys.
","5844","<linux><architecture><public-key-encryption><gnupg><snakeyaml>","6","15","2","2018-07-04 12:56:00","","1","3","712334","","2018-07-04 12:43:07","2016-07-29 12:43:05",""
"29560095","Unable to decrypt data - openssl_private_decrypt(): key parameter is not a valid private key","<?php
    ini_set('display_errors', 1);

    $config = array(
        ""config"" => ""C:\wamp\bin\apache\Apache2.4.4\conf\openssl.cnf"",
        ""private_key_bits"" => 2048,
        ""private_key_type"" => OPENSSL_KEYTYPE_RSA,
    );

    // Create the private and public key
    $res = openssl_pkey_new($config);

    if ($res === false) die('Failed to generate key pair.'.""\n""); 

    if (!openssl_pkey_export($res, $privKey, ""phrase"", $config)) die('Failed to retrieve private key.'.""\n""); 

    // Extract the private key from $res to $privKey
    openssl_pkey_export($res, $privKey, ""phrase"", $config);

    echo ""<br/>"";
    echo ""Private Key = "".$privKey;
    echo ""<br/>"";

    // Extract the public key from $res to $pubKey
    $pubKey = openssl_pkey_get_details($res);
    $pubKey = $pubKey[""key""];

    echo ""<br/>"";
    echo ""Public Key = "".$pubKey;
    echo ""<br/>"";

    $data = 'plaintext data goes here';

    // Encrypt the data to $encrypted using the public key
    openssl_public_encrypt($data, $encrypted, $pubKey);
    echo ""<br/>"";
    echo ""Encrypted Data = "".$encrypted;
    echo ""<br/>"";

    // Decrypt the data using the private key and store the results in $decrypted
    openssl_private_decrypt($encrypted, $decrypted, $privKey);

    echo ""<br/>"";
    echo ""Decrypted Data = "".$decrypted;
    echo ""<br/>"";
?>

LOGS

Private Key = -----BEGIN ENCRYPTED PRIVATE KEY-----
  MIIFDjBABgkqhkiG9w0BBQ0wMzAbBgkqhkiG9w0BBQwwDgQIr2acPfh8YYQCAggA
  MBQGCCqGSIb3DQMHBAiCvohdiWAZ4QSCBMjKJUXF5ShKfW3TazpKYTxEV8JmGYLf
  AJWXzxdi0GrDuddz4aW1FeGwvUm2t/41CTxFsWtgoQJrzCgAQETn54majdrDeF4u
  zCmvFMKSoVP4xsZKke15e1K1LPmFNNuKKyCqMwL+tpQJ7zquvDTKHapUnNzfNXpZ
  D2K1r2qZWeDN1d36DA9wkN5GbpZYAjuHqHUNzorhxIbHGp2WOg8YKdemoTuKIqYC
  DUKncWtxRUOx6IIZuey+uTBzH7Bn9K9a71QTjUdeWgQZFzy9yVpetB+XrJA92IWt
  vMeKXCXNhOgkOvkUPNXSuMOVrECNcbKDAKxmK3EQWqb+8zlYFqjmaL/sCep8ihio
  1ZWpRaOd5HxnG5rpmz/BYzcF354mM8B4wAIk7MmFq/pHSKLjpr+2Ef1BpMmXfRpG
  Pj1jYDClSIQF6ovKOqhevFwfYrtl2jEOISyAggm/sbD750VBkwhbVAyQcarckAiI
  GlNcQPOC+JYZOV7o/9o+Tg24zwtAQ8y3hNvYyHjqYI5naVS9yuXEqB6zYoGivs/k
  bIblqTFebLEFtihjsa9wpXkyNzKD2NvdSa2oNC7IkCNi8TRNjy7MLylSmCIdhWAV
  YgL1hxShMgbnfiGjFQyYnKzZto9RqRlQBIoBOCfwP1EFnZjCJm02CCeGR+GHKXf7
  rJ0n6lIUEvVnENirAPtOuiE2ccbzmyjWQ9f2vwBSUea5nPTMG4uTVHrQjrgNYIyU
  +vLV6tL+MDKF4JGQGgzBUeqTMobmrOK+V20QIasYaAWHJrL8itBwZ++C8lo7kySa SImMXakI4rjgEmj+HmUJygT1EZWz5yQqOiwAYLhQZg+m6+32Pvt6mIrAXbznrdHP
  JxHb/9HV88mQdRKPBTkSTl71Ics+3oybYPbhSQByXOdtsw6VLYNo4ikgj3tXCz01
  DwVQqeQ5tLD4LY8/QaAHkOUq9K24yfkcN+aQh7cvR/HX53Ls6LsdUwkwSOWVj2na
  Wl4xn+j3ZaPhpgdzcMgknU7BAI2kZP83MxyKnNcnneyX4hTaM5PRZJXKd+onvhff
  nQ3zHDSYmRDKmTXBjCob3Vjg91LcMjg9dEH7aIFWit5dHK4ll/v1IiOFx8d4d/mV
  Oll0c0ujJuPjtyqesM2Bz3Ah5YkIT2Z7kxvRy7rTyytQG7hLNENAki9wW79fcEo7
  ln/OvEpjdWZngkL/UrMOX8DBrs0PLEH9jyDoCQx/LSqxMAXOwVXILfsfsUFu0M0o
  21YbeC33jOlocJ4Q6pwfRVz8lCQOuIVs1jEpvSmvHgvmHmXUI4Y6nZD4Roi0jIjS
  VvI73eULzc3j0jIptWxzrHWM6iHx1zRxkLMJSZOx0A27ngtSo7g6+aJnMO5FDfdR
  90vnr+bX4ki+X/N4wVF7eppyapLe/tQ54vAxsyIBrCXPjwBMehiFjOMhzSLW7xQj
  Qg2KcilfW6oKFzDQQ5nKPEXvQYMhQ1MeWKyNv6BMoc4EEpIGhtziUXWhgT4sN1ES
  5sxVcGVoIe1viO/kk3Zq55hETlZbNWs3V511BcEZCiQNrntnbYv6pwKpoB21ZV2E
  slVhYcslEGliIQKQsWSl5cfc+pqjLteiPrwk14WKJGXl9zX3YH6H7KKB/7SIRZk7 wq8=
  -----END ENCRYPTED PRIVATE KEY-----
Public Key = -----BEGIN PUBLIC KEY-----
  MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAriS8qflAjYSYhH2qgC5T
  yf98X1qoLMXIW9mMkhV8LcApBKOfNjUMc9xjD3a8CR/LYwa4MYhevoKcVfPG8XoE
  sDGyHh+h/vtYP0rORB1T3RULVUzDLjX558e2KqPrSN+rV+Jl1NB0SO5Of3JA+AKa
  0Q3botcjOM3WuFa/s+RzsiCrMMhzOZSTBj+GTP/VcDipF5PM7+/Lxr+edjRXccT2
  WQjsq0sUrtsmpzBE8Niph361RjfIisxKoksQGs7hC/Iv4yhBzZZIpRaZuvDj4ImP
  +4sUQgbdVVCso122kg34UtY5qchuSCcJfsGbD2zMw+8ZftIsJ7dfX1FxujgggDyn 0wIDAQAB -----END PUBLIC KEY-----

Encrypted Data = Uš6/ùÅËæÝmL4²G¾'gr¨Ñ­Ä‰ï‚zêbÀ)[îR0s‹yÝ`t™õ°Þe­Ïd>×o¯rß9ÌÔÅAü!-†D·¨ÎVZ¼?¶éžäýöaØT~=‚Fan¢ºq{M”ƒ¹Cû5N3¹.Ð(·#*ÏRÆ¹ñß÷õƒ_ò9c-Ÿ% ×óè2ê™‚õ“ÂÐgNÈ-ˆd«…ºt§¼Ô}yŠ""7èPš(¶R¤ßJÚ_h¶ðÞK(Cj“7‘YÂ ÀŠþrôZƒ4)JU•˜„üˆ k0â§Êë^ÚºGÚªúVKø†ë8ÏLÚó  „Ÿ¦¿¤

( ! ) Warning: openssl_private_decrypt(): key parameter is not a valid private key in C:\wamp\www\android\pki_example.php on line 41
Call Stack
#   Time    Memory  Function    Location
1   0.0020  252696  {main}( )   ..\pki_example.php:0
2   0.2043  258032  openssl_private_decrypt ( ) ..\pki_example.php:41

Decrypted Data = 

","// Decrypt the data using the private key and store the results in $decrypted
openssl_private_decrypt($encrypted, $decrypted, openssl_pkey_get_private($privKey, ""phrase""));

echo ""<br/>"";
echo ""Decrypted Data = "".$decrypted;
echo ""<br/>"";

openssl_private_decrypt function is capable to use PEM formatted private key but your key is encrypted and this function does not have an argument for password. You have to use openssl_pkey_get_private instead.
","5816","<php><openssl><public-key-encryption><private-key>","5","6","2","2016-06-07 05:39:48","29560553","0","1","","","","2015-04-10 11:18:41",""
"29560095","Unable to decrypt data - openssl_private_decrypt(): key parameter is not a valid private key","<?php
    ini_set('display_errors', 1);

    $config = array(
        ""config"" => ""C:\wamp\bin\apache\Apache2.4.4\conf\openssl.cnf"",
        ""private_key_bits"" => 2048,
        ""private_key_type"" => OPENSSL_KEYTYPE_RSA,
    );

    // Create the private and public key
    $res = openssl_pkey_new($config);

    if ($res === false) die('Failed to generate key pair.'.""\n""); 

    if (!openssl_pkey_export($res, $privKey, ""phrase"", $config)) die('Failed to retrieve private key.'.""\n""); 

    // Extract the private key from $res to $privKey
    openssl_pkey_export($res, $privKey, ""phrase"", $config);

    echo ""<br/>"";
    echo ""Private Key = "".$privKey;
    echo ""<br/>"";

    // Extract the public key from $res to $pubKey
    $pubKey = openssl_pkey_get_details($res);
    $pubKey = $pubKey[""key""];

    echo ""<br/>"";
    echo ""Public Key = "".$pubKey;
    echo ""<br/>"";

    $data = 'plaintext data goes here';

    // Encrypt the data to $encrypted using the public key
    openssl_public_encrypt($data, $encrypted, $pubKey);
    echo ""<br/>"";
    echo ""Encrypted Data = "".$encrypted;
    echo ""<br/>"";

    // Decrypt the data using the private key and store the results in $decrypted
    openssl_private_decrypt($encrypted, $decrypted, $privKey);

    echo ""<br/>"";
    echo ""Decrypted Data = "".$decrypted;
    echo ""<br/>"";
?>

LOGS

Private Key = -----BEGIN ENCRYPTED PRIVATE KEY-----
  MIIFDjBABgkqhkiG9w0BBQ0wMzAbBgkqhkiG9w0BBQwwDgQIr2acPfh8YYQCAggA
  MBQGCCqGSIb3DQMHBAiCvohdiWAZ4QSCBMjKJUXF5ShKfW3TazpKYTxEV8JmGYLf
  AJWXzxdi0GrDuddz4aW1FeGwvUm2t/41CTxFsWtgoQJrzCgAQETn54majdrDeF4u
  zCmvFMKSoVP4xsZKke15e1K1LPmFNNuKKyCqMwL+tpQJ7zquvDTKHapUnNzfNXpZ
  D2K1r2qZWeDN1d36DA9wkN5GbpZYAjuHqHUNzorhxIbHGp2WOg8YKdemoTuKIqYC
  DUKncWtxRUOx6IIZuey+uTBzH7Bn9K9a71QTjUdeWgQZFzy9yVpetB+XrJA92IWt
  vMeKXCXNhOgkOvkUPNXSuMOVrECNcbKDAKxmK3EQWqb+8zlYFqjmaL/sCep8ihio
  1ZWpRaOd5HxnG5rpmz/BYzcF354mM8B4wAIk7MmFq/pHSKLjpr+2Ef1BpMmXfRpG
  Pj1jYDClSIQF6ovKOqhevFwfYrtl2jEOISyAggm/sbD750VBkwhbVAyQcarckAiI
  GlNcQPOC+JYZOV7o/9o+Tg24zwtAQ8y3hNvYyHjqYI5naVS9yuXEqB6zYoGivs/k
  bIblqTFebLEFtihjsa9wpXkyNzKD2NvdSa2oNC7IkCNi8TRNjy7MLylSmCIdhWAV
  YgL1hxShMgbnfiGjFQyYnKzZto9RqRlQBIoBOCfwP1EFnZjCJm02CCeGR+GHKXf7
  rJ0n6lIUEvVnENirAPtOuiE2ccbzmyjWQ9f2vwBSUea5nPTMG4uTVHrQjrgNYIyU
  +vLV6tL+MDKF4JGQGgzBUeqTMobmrOK+V20QIasYaAWHJrL8itBwZ++C8lo7kySa SImMXakI4rjgEmj+HmUJygT1EZWz5yQqOiwAYLhQZg+m6+32Pvt6mIrAXbznrdHP
  JxHb/9HV88mQdRKPBTkSTl71Ics+3oybYPbhSQByXOdtsw6VLYNo4ikgj3tXCz01
  DwVQqeQ5tLD4LY8/QaAHkOUq9K24yfkcN+aQh7cvR/HX53Ls6LsdUwkwSOWVj2na
  Wl4xn+j3ZaPhpgdzcMgknU7BAI2kZP83MxyKnNcnneyX4hTaM5PRZJXKd+onvhff
  nQ3zHDSYmRDKmTXBjCob3Vjg91LcMjg9dEH7aIFWit5dHK4ll/v1IiOFx8d4d/mV
  Oll0c0ujJuPjtyqesM2Bz3Ah5YkIT2Z7kxvRy7rTyytQG7hLNENAki9wW79fcEo7
  ln/OvEpjdWZngkL/UrMOX8DBrs0PLEH9jyDoCQx/LSqxMAXOwVXILfsfsUFu0M0o
  21YbeC33jOlocJ4Q6pwfRVz8lCQOuIVs1jEpvSmvHgvmHmXUI4Y6nZD4Roi0jIjS
  VvI73eULzc3j0jIptWxzrHWM6iHx1zRxkLMJSZOx0A27ngtSo7g6+aJnMO5FDfdR
  90vnr+bX4ki+X/N4wVF7eppyapLe/tQ54vAxsyIBrCXPjwBMehiFjOMhzSLW7xQj
  Qg2KcilfW6oKFzDQQ5nKPEXvQYMhQ1MeWKyNv6BMoc4EEpIGhtziUXWhgT4sN1ES
  5sxVcGVoIe1viO/kk3Zq55hETlZbNWs3V511BcEZCiQNrntnbYv6pwKpoB21ZV2E
  slVhYcslEGliIQKQsWSl5cfc+pqjLteiPrwk14WKJGXl9zX3YH6H7KKB/7SIRZk7 wq8=
  -----END ENCRYPTED PRIVATE KEY-----
Public Key = -----BEGIN PUBLIC KEY-----
  MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAriS8qflAjYSYhH2qgC5T
  yf98X1qoLMXIW9mMkhV8LcApBKOfNjUMc9xjD3a8CR/LYwa4MYhevoKcVfPG8XoE
  sDGyHh+h/vtYP0rORB1T3RULVUzDLjX558e2KqPrSN+rV+Jl1NB0SO5Of3JA+AKa
  0Q3botcjOM3WuFa/s+RzsiCrMMhzOZSTBj+GTP/VcDipF5PM7+/Lxr+edjRXccT2
  WQjsq0sUrtsmpzBE8Niph361RjfIisxKoksQGs7hC/Iv4yhBzZZIpRaZuvDj4ImP
  +4sUQgbdVVCso122kg34UtY5qchuSCcJfsGbD2zMw+8ZftIsJ7dfX1FxujgggDyn 0wIDAQAB -----END PUBLIC KEY-----

Encrypted Data = Uš6/ùÅËæÝmL4²G¾'gr¨Ñ­Ä‰ï‚zêbÀ)[îR0s‹yÝ`t™õ°Þe­Ïd>×o¯rß9ÌÔÅAü!-†D·¨ÎVZ¼?¶éžäýöaØT~=‚Fan¢ºq{M”ƒ¹Cû5N3¹.Ð(·#*ÏRÆ¹ñß÷õƒ_ò9c-Ÿ% ×óè2ê™‚õ“ÂÐgNÈ-ˆd«…ºt§¼Ô}yŠ""7èPš(¶R¤ßJÚ_h¶ðÞK(Cj“7‘YÂ ÀŠþrôZƒ4)JU•˜„üˆ k0â§Êë^ÚºGÚªúVKø†ë8ÏLÚó  „Ÿ¦¿¤

( ! ) Warning: openssl_private_decrypt(): key parameter is not a valid private key in C:\wamp\www\android\pki_example.php on line 41
Call Stack
#   Time    Memory  Function    Location
1   0.0020  252696  {main}( )   ..\pki_example.php:0
2   0.2043  258032  openssl_private_decrypt ( ) ..\pki_example.php:41

Decrypted Data = 

","Don't know what is the reason. I think someone can edit this with exact reason.
When I use private key in one line, it gives the above error mentioned in this question.
But when I use the same private key by splitting it into several lines (64 characters per line) it works. In this way no need to use openssl_pkey_get_private($privKey, ""phrase"") function. Actually I had no pass phrase for my private key.
","5816","<php><openssl><public-key-encryption><private-key>","5","0","2","2016-06-07 05:39:48","29560553","0","1","","","","2015-04-10 11:18:41",""
"13382099","how to add ssh public key to a specific git repo","I have a git repo, i connect via root to push and pull. I have another user i'd like to have access to my repo. 
I have got him to create me a public key file for me to add to my servers ~/.ssh/authorized_keys
How do i then restrict him from having access to my entire server?
","Set git-shell as their login shell in /etc/passwd, as documented here. Doing this, you can have a single account dedicated to git access for you both.
The more complicated solution is to use something like gitolite to manage access to a collection of repos. I've used it and it's a bit of a pain to set up at first, but it works well and is currently maintained.
Alternatively, Bitbucket hosts unlimited private Git repos for free. You can both point your repos to Bitbucket as origin/master and collaborate there instead. This is what I do now.
","5814","<git><ubuntu><ssh><public-key-encryption><repository>","2","3","1","2012-11-14 16:00:20","13382288","0","","","","","2012-11-14 15:43:42",""
"32117087","How to generate PublicKey object from a file in Java","I have a file containing a public RSA key (generated with ssh-keygen). I'd like to read the file and generate a PublicKey object.
Prior to that I converted the file, since reading the original files seems to be impossible:
# http://unix.stackexchange.com/questions/220354/how-to-convert-public-key-from-pem-to-der-format/220356#220356
ssh-keygen -f ~/.ssh/id_rsa.pub -e -m PEM > ~/.ssh/id_rsa.pub.pem
openssl rsa -RSAPublicKey_in -in ~/.ssh/id_rsa.pub.pem -inform PEM -outform DER -out ~/.ssh/id_rsa.pub.der -RSAPublicKey_out

From Java - Encrypt String with existing public key file I defined the function readFileBytes:
public static byte[] readFileBytes(String filename) throws IOException {
    Path path = Paths.get(System.getProperty(""user.home"") + filename);
    return Files.readAllBytes(path);
}

Now I'd like to read the file and generate the PublicKey object, but I could not find a way to do that; java.security.spec.RSAPublicKeySpec does not provide a fitting constructor and java.security.spec.X509EncodedKeySpec throws an error java.security.spec.InvalidKeySpecException: java.security.InvalidKeyException: IOException: algid parse error, not a sequence:
//RSAPublicKeySpec publicSpec = new RSAPublicKeySpec(readFileBytes(""/.ssh/id_rsa.pub.der""));
// No fitting construktor

X509EncodedKeySpec publicSpec = new X509EncodedKeySpec(readFileBytes(""/.ssh/id_rsa.pub.der""));
// Gives: ""algid parse error, not a sequence""

","I had a project in which (RSA) encryption was necessary, this is how I reconstructed the publicKey given the publicKey's byte array, that was just read from the file.
public PublicKey reconstruct_public_key(String algorithm, byte[] pub_key) {
    PublicKey public_key = null;

    try {
        KeyFactory kf = KeyFactory.getInstance(algorithm);
        EncodedKeySpec pub_key_spec = new X509EncodedKeySpec(pub_key);
        public_key = kf.generatePublic(pub_key_spec);
    } catch(NoSuchAlgorithmException e) {
        System.out.println(""Could not reconstruct the public key, the given algorithm oculd not be found."");
    } catch(InvalidKeySpecException e) {
        System.out.println(""Could not reconstruct the public key"");
    }

    return public_key;
}

Then you could call the procedure similar to this call, reconstruct_public_key(""RSA"", readFileBytes(""path/to/your/publicKey/file""));
EDIT : I tried to do it myself (write the public key to a file, read that file and reconstruct the key). This works :
public static void main(String args[]) {
    String path = ""./pub_key_test.txt"";

    // Generate a keypair to write to file
    KeyPair kp = generate_key();
    PublicKey pub_key = kp.getPublic();
    File file = new File(path);

    try {
        // Write to file
        file.createNewFile();
        FileOutputStream out = new FileOutputStream(path);

        out.write(pub_key.getEncoded()); // Write public key to the file
        out.close();

        // Read from file
        FileInputStream in = new FileInputStream(path);
        byte[] pub_key_arr = new byte[in.available()];
        in.read(pub_key_arr, 0, in.available());
        in.close();

        // Reconstruct public key
        PublicKey reconstructed_pub_key = reconstruct_public_key(""RSA"", pub_key_arr);
    } catch(IOException e) {
        System.out.println(""Could not open the file : "" + e.getStackTrace());
    }
}

And this is the generate_key procedure :
public KeyPair generate_key() {
    while(true) { // Else the compiler will complain that this procedure does not always return a ""KeyPair""
        try {
            final KeyPairGenerator key_generator = KeyPairGenerator.getInstance(""RSA"");
            key_generator.initialize(2048); // Keys of 2048 bits (minimum key length for RSA keys) are safe enough (according to the slides 128bit keys > 16 years to brute force it)

            final KeyPair keys = key_generator.generateKeyPair();
            return keys;
        } catch(NoSuchAlgorithmException e) {
            System.out.println(""The given encryption algorithm (RSA) does not exist. -- generate_key() - Cryptography."");
        }
    }
}

If you test this, you will see that the publicKey is reconstructed successfully.
EDIT : I tried doing it myself, using the ssh-keygen tool. This is what i did :

First I generated a RSA private key (.PEM format)
Outputted the public key portion to .DER format, so it can be used by Java.

This is how I did the conversion, which is a bit different of yours :
openssl rsa -in private_key_file.pem -pubout -outform DER -out java_readable_file.der

And I did the file reading like here, which doesn't differ much of yours. I tested this and Java successfully reconstructed the public key.
","5748","<java><encryption><rsa><bouncycastle><public-key-encryption>","6","5","2","2015-08-31 00:25:16","","0","2","-1","","2017-05-23 11:50:41","2015-08-20 11:30:39",""
"32117087","How to generate PublicKey object from a file in Java","I have a file containing a public RSA key (generated with ssh-keygen). I'd like to read the file and generate a PublicKey object.
Prior to that I converted the file, since reading the original files seems to be impossible:
# http://unix.stackexchange.com/questions/220354/how-to-convert-public-key-from-pem-to-der-format/220356#220356
ssh-keygen -f ~/.ssh/id_rsa.pub -e -m PEM > ~/.ssh/id_rsa.pub.pem
openssl rsa -RSAPublicKey_in -in ~/.ssh/id_rsa.pub.pem -inform PEM -outform DER -out ~/.ssh/id_rsa.pub.der -RSAPublicKey_out

From Java - Encrypt String with existing public key file I defined the function readFileBytes:
public static byte[] readFileBytes(String filename) throws IOException {
    Path path = Paths.get(System.getProperty(""user.home"") + filename);
    return Files.readAllBytes(path);
}

Now I'd like to read the file and generate the PublicKey object, but I could not find a way to do that; java.security.spec.RSAPublicKeySpec does not provide a fitting constructor and java.security.spec.X509EncodedKeySpec throws an error java.security.spec.InvalidKeySpecException: java.security.InvalidKeyException: IOException: algid parse error, not a sequence:
//RSAPublicKeySpec publicSpec = new RSAPublicKeySpec(readFileBytes(""/.ssh/id_rsa.pub.der""));
// No fitting construktor

X509EncodedKeySpec publicSpec = new X509EncodedKeySpec(readFileBytes(""/.ssh/id_rsa.pub.der""));
// Gives: ""algid parse error, not a sequence""

","
Creating RSA Private Key
openssl genrsa -out rsaprivkey.pem 1024
Generates the public key in DER format.
openssl rsa -in rsaprivkey.pem -pubout -outform DER -out rsapubkey.der
We use this code extracts the public key RSA OR DSA from the X.509 certificate. 
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.security.KeyFactory;
import java.security.NoSuchAlgorithmException;
import java.security.PublicKey;
import java.security.cert.CertificateException;
import java.security.cert.CertificateFactory;
import java.security.cert.X509Certificate;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.X509EncodedKeySpec;

/**
 * This class is capable of extracting a public key from a X.509 certficate 
 * and returning the PublicKey representation from a referenced byte array.
 * 
 */
public class ExtractPublicKey {

  // Certificate Filename (Including Path Info)
  private static final String certFilename = ""cacert.pem"";

  // Public Key Filename (Including Path Info)
  private static final String pubKeyFilename = ""rsapublic.key"";

  public static PublicKey generatePublicKey(byte[] encodedKey)
      throws NoSuchAlgorithmException, InvalidKeySpecException {

    X509EncodedKeySpec pubSpec = new X509EncodedKeySpec(encodedKey);
    boolean isSupportedKey = false;
    KeyFactory factory;
    PublicKey retKey = null;

    //first try the DSA alg
    try {
      factory = KeyFactory.getInstance(""DSA"");
      retKey = factory.generatePublic(pubSpec);
      isSupportedKey = true;
    } catch (InvalidKeySpecException e) {
      System.out.println(""Could not create DSA Public Key: "" + e.toString());      
    }

    //if DSA didnt work, then try RSA    
    if (!isSupportedKey) {
      try {
        factory = KeyFactory.getInstance(""RSA"");
        retKey = factory.generatePublic(pubSpec);
        isSupportedKey = true;
      } catch (InvalidKeySpecException e) {
        System.out.println(""Could not create RSA Public Key: "" + e.toString());
      }      
    }

    // if not DSA or RSA
    if (!isSupportedKey) {
      throw new InvalidKeySpecException(""Unsupported key spec: Not RSA or DSA"");
    }

    return retKey;
  }   

}

","5748","<java><encryption><rsa><bouncycastle><public-key-encryption>","6","4","2","2015-08-31 00:25:16","","0","2","-1","","2017-05-23 11:50:41","2015-08-20 11:30:39",""
"4926126","RSA Encryption in Java: Cross Platform Issues?","The Situation
I'm working with RSA encryption in Java. I'm trying to encrypt data on an HTC Saphire (32B) developer phone equipped with Cyanogenmod's Android 2.2 and then decrypt said data on a 64 bit server running Mandriva Linux 2010. I am using the same public key, private key pair on both machines, can correctly encrypt/decrypt data on the Android phone, can correctly encrypt/decrypt data on the Linux server, but I am unable to encrypt data on the phone and then decrypt it on the server. I get bad padding exceptions. I have confirmed that the data is being sent correctly by the phone and is being parsed correctly by the server. As such, I cannot figure out why decryption fails. Can anyone help me with this? Perhaps the RSA algorithm in Java has some underlying assumption about word size?
Further information:

My encryption/decryption library is based on the guide found here.
My encryption key is 2048 bits in length, but I see similar behaviour with different key sizes.
I have packaged my RSA encryption/decryption code into a jar file. It was compiled through Eclipse on the server's machine.
The program using the encryption library on the Android phone uses the above library. It too was built using Eclipse.
The server program was built using Netbeans (as it was easier at the time to do so).

Other Questions

Are there other free public-key encryption algorithms / libraries available for Java? Do they work cross-platform? What performance would one expect from them? Etc., etc. I've looked into this and haven't found much; perhaps I'm looking with the wrong keywords.

Phew! I think that's it. Thanks for your help in  advance!
","Perhaps you should do a checksum of the data and make sure it is exactly what you want to be passed into the encryption/decryption APIs.
","5726","<java><android><cross-platform><encryption-asymmetric><public-key-encryption>","10","0","2","2012-01-17 04:07:56","4926325","6","8","","","","2011-02-07 20:22:29",""
"4926126","RSA Encryption in Java: Cross Platform Issues?","The Situation
I'm working with RSA encryption in Java. I'm trying to encrypt data on an HTC Saphire (32B) developer phone equipped with Cyanogenmod's Android 2.2 and then decrypt said data on a 64 bit server running Mandriva Linux 2010. I am using the same public key, private key pair on both machines, can correctly encrypt/decrypt data on the Android phone, can correctly encrypt/decrypt data on the Linux server, but I am unable to encrypt data on the phone and then decrypt it on the server. I get bad padding exceptions. I have confirmed that the data is being sent correctly by the phone and is being parsed correctly by the server. As such, I cannot figure out why decryption fails. Can anyone help me with this? Perhaps the RSA algorithm in Java has some underlying assumption about word size?
Further information:

My encryption/decryption library is based on the guide found here.
My encryption key is 2048 bits in length, but I see similar behaviour with different key sizes.
I have packaged my RSA encryption/decryption code into a jar file. It was compiled through Eclipse on the server's machine.
The program using the encryption library on the Android phone uses the above library. It too was built using Eclipse.
The server program was built using Netbeans (as it was easier at the time to do so).

Other Questions

Are there other free public-key encryption algorithms / libraries available for Java? Do they work cross-platform? What performance would one expect from them? Etc., etc. I've looked into this and haven't found much; perhaps I'm looking with the wrong keywords.

Phew! I think that's it. Thanks for your help in  advance!
","RSA encryption (or any encryption algorithm) should work regardless of environment.  However, it is possible that certain systems make different assumptions about default padding and the mode of operation.  Make sure that when you are performing encryption and decryption that you fully specify not only the algorithm, but also the mode of operation (CBC, etc) and the padding.  If that doesn't work, I suggest posting your code from both the device and the server so we can examine it more closely.
Edit To address your question, in Java, when you get a cipher from the crypto package, you usually do so with the following code:
Cipher cipher;
cipher = Cipher.getInstance(""AES/CBC/PKCS5Padding"");

The string provided to getInstance instructs the runtime to get a cipher instance that will use the AES algorithm, the cipher block chaining mode of operation and the PKCS5 Padding.  There are a number of supported algorithms and paddings.  I would check out this document from Oracle for more information about encryption in Java.
To be more specific, the string you use to request a cipher is in the format
<algorithm>/<mode of operation>/<padding>

To make matters worse, despite Java providing a number of algorithms, modes of operation and paddings, not all of them will work together.  You will need to read the documentation to find a configuration string that will work.
","5726","<java><android><cross-platform><encryption-asymmetric><public-key-encryption>","10","12","2","2012-01-17 04:07:56","4926325","6","8","","","","2011-02-07 20:22:29",""
"6752374","Cube root modulo P -- how do I do this?","I am trying to calculate the cube root of a many-hundred digit number modulo P in Python, and failing miserably.
I found code for the Tonelli-Shanks algorithm which supposedly is simple to modify from square roots to cube roots, but this eludes me. I've scoured the web and math libraries and a few books to no avail. Code would be wonderful, so would an algorithm explained in plain English.
Here is the Python (2.6?) code for finding square roots:
def modular_sqrt(a, p):
    """""" Find a quadratic residue (mod p) of 'a'. p
        must be an odd prime.

        Solve the congruence of the form:
            x^2 = a (mod p)
        And returns x. Note that p - x is also a root.

        0 is returned is no square root exists for
        these a and p.

        The Tonelli-Shanks algorithm is used (except
        for some simple cases in which the solution
        is known from an identity). This algorithm
        runs in polynomial time (unless the
        generalized Riemann hypothesis is false).
    """"""
    # Simple cases
    #
    if legendre_symbol(a, p) != 1:
        return 0
    elif a == 0:
        return 0
    elif p == 2:
        return n
    elif p % 4 == 3:
        return pow(a, (p + 1) / 4, p)

    # Partition p-1 to s * 2^e for an odd s (i.e.
    # reduce all the powers of 2 from p-1)
    #
    s = p - 1
    e = 0
    while s % 2 == 0:
        s /= 2
        e += 1

    # Find some 'n' with a legendre symbol n|p = -1.
    # Shouldn't take long.
    #
    n = 2
    while legendre_symbol(n, p) != -1:
        n += 1

    # Here be dragons!
    # Read the paper ""Square roots from 1; 24, 51,
    # 10 to Dan Shanks"" by Ezra Brown for more
    # information
    #

    # x is a guess of the square root that gets better
    # with each iteration.
    # b is the ""fudge factor"" - by how much we're off
    # with the guess. The invariant x^2 = ab (mod p)
    # is maintained throughout the loop.
    # g is used for successive powers of n to update
    # both a and b
    # r is the exponent - decreases with each update
    #
    x = pow(a, (s + 1) / 2, p)
    b = pow(a, s, p)
    g = pow(n, s, p)
    r = e

    while True:
        t = b
        m = 0
        for m in xrange(r):
            if t == 1:
                break
            t = pow(t, 2, p)

        if m == 0:
            return x

        gs = pow(g, 2 ** (r - m - 1), p)
        g = (gs * gs) % p
        x = (x * gs) % p
        b = (b * g) % p
        r = m

def legendre_symbol(a, p):
    """""" Compute the Legendre symbol a|p using
        Euler's criterion. p is a prime, a is
        relatively prime to p (if p divides
        a, then a|p = 0)

        Returns 1 if a has a square root modulo
        p, -1 otherwise.
    """"""
    ls = pow(a, (p - 1) / 2, p)
    return -1 if ls == p - 1 else ls

Source: Computing modular square roots in Python
","Note added later:  In the Tonelli-Shanks algorithm and here it is assumed that p is prime.  If we could compute modular square roots to composite moduli quickly in general we could factor numbers quickly.  I apologize for assuming that you knew that p was prime.
See here or here.  Note that the numbers modulo p are the finite field with p elements.
Edit:  See this also (this is the grandfather of those papers.)  
The easy part is when p = 2 mod 3, then everything is a cube and athe cube root of a is just a**((2*p-1)/3) %p 
Added:  Here is code to do all but the primes 1 mod 9.  I'll try to get to it this weekend. If no one else gets to it first 
#assumes p prime returns cube root of a mod p
def cuberoot(a, p):
    if p == 2:
        return a
    if p == 3:
        return a
    if (p%3) == 2:
        return pow(a,(2*p - 1)/3, p)
    if (p%9) == 4:
        root = pow(a,(2*p + 1)/9, p)
        if pow(root,3,p) == a%p:
            return root
        else:
            return None
    if (p%9) == 7:
        root = pow(a,(p + 2)/9, p)
        if pow(root,3,p) == a%p:
            return root
        else:
            return None
    else:
        print ""Not implemented yet. See the second paper""

","5692","<python><algorithm><rsa><modulo><public-key-encryption>","10","10","1","2014-11-07 04:01:04","6752874","5","10","1014938","","2013-06-20 22:18:22","2011-07-19 18:42:55",""
"6951413","iPhone Public-Key Encryption SecKeyEncrypt returns error 9809 (errSSLCrypto)","I am trying to use the iPhone's PKI libraries to encrypt a short string (12345678), but I keep getting the error -9809 (i.e. errSSLCrypto) whenever I try to use SecKeyEncrypt. The SecureTransport.h header file describes this error simply as ""underlying cryptographic error"", which wasn't very meaningful.
My code is as follows:
- (NSData *)encryptDataWithPublicKey:(NSString *)plainText {

    OSStatus result = -1;

    NSData *plainTextData = [plainText dataUsingEncoding:NSASCIIStringEncoding];
    size_t plainTextLength = [plainTextData length];

    SecTrustRef trustRef;
    SecTrustResultType trustResult;

    SecPolicyRef policy = SecPolicyCreateBasicX509();

    result = SecTrustCreateWithCertificates(m_oCert, policy, &trustRef);

    if (result != errSecSuccess) {
        NSLog(@""Trust create failed with code: %d"",result);
        return nil;
    }

    result = SecTrustEvaluate(trustRef, &trustResult);

    if (result != errSecSuccess) {
        NSLog(@""Trust eval failed with code: %d"",result);

        CFRelease(trustRef);
        return nil;
    }

    SecKeyRef publicKey = SecTrustCopyPublicKey(trustRef);

    uint8_t *cipherTextBuf = NULL;
    size_t cipherTextLen = 0;

    size_t keyBlockSize = SecKeyGetBlockSize(publicKey);
    int maxInputSize = keyBlockSize - 11; //If using PKCS1 Padding, else keyBlockSize

    if (plainTextLength > maxInputSize) {
        //Fail
        NSLog(@""Data size is larger than max permitted!"");

        CFRelease(trustRef);
        CFRelease(publicKey);
        CFRelease(policy);

        return nil;
    }

    cipherTextBuf = malloc(sizeof(uint8_t)*keyBlockSize);
    memset(cipherTextBuf,0,keyBlockSize);

    //result = SecKeyEncrypt(publicKey, kSecPaddingPKCS1, plainTextBuf, plainTextLength, cipherTextBuf, &cipherTextLen);
    result = SecKeyEncrypt(publicKey, kSecPaddingNone, (const uint8_t *)[plainTextData bytes], plainTextLength, cipherTextBuf, &cipherTextLen);

    NSData *cipherText = nil;
    if (result == errSecSuccess) {

        cipherText = [NSData dataWithBytes:cipherTextBuf length:cipherTextLen];

    } else {
        NSLog(@""Error detected: %d"",result);
    }

    free(cipherTextBuf);
    cipherTextBuf = NULL;

    CFRelease(trustRef);
    CFRelease(publicKey);
    CFRelease(policy);

    return cipherText;
}

It does not matter what padding I use, they both give the same error. The public key is derived from a certificate supplied by my client, and I've checked to make sure that the key is valid. What am I doing wrong and how do I use the function properly?
","When using SecKeyEncrypt, the input cipherTextLength should be the the size of the output buffer. Setting
size_t cipherTextLen = keyBlockSize;

solved the problem.
","5593","<iphone><x509certificate><public-key-encryption><pki><commoncrypto>","3","7","1","2011-08-08 07:16:23","6978861","3","3","69783","","2011-08-05 06:31:43","2011-08-05 04:24:09",""
"2364591","How does two-way asymmetric encryption work?","Say we have Alice and Bob.  
Alice sends Bob a message she encrypted with Bob's public key.  Bob is the only person who can decrypt it, using his private key.  But how can he be certain the message came from Alice?  
Suppose he replies, encrypting his message using Alice's public key.  Only Alice can decrypt the message.  But how can she be certain it was sent by Bob?
Would Alice have to add some kind of public hash to her message so bob can say ""This definitely came from Alice?""
","Bob has Alice's public key also, and Alice signed the message with her private key.  Bob uses Alice's public key to verify the signature.
Go in reverse for Alice to ensure the message was from Bob.
All you have to do now is make sure that Bob has Alice's real public key and not one injected by a man in the middle.
","5515","<public-key-encryption>","6","5","4","2010-04-20 01:13:04","2364619","0","2","","","","2010-03-02 16:08:07",""
"2364591","How does two-way asymmetric encryption work?","Say we have Alice and Bob.  
Alice sends Bob a message she encrypted with Bob's public key.  Bob is the only person who can decrypt it, using his private key.  But how can he be certain the message came from Alice?  
Suppose he replies, encrypting his message using Alice's public key.  Only Alice can decrypt the message.  But how can she be certain it was sent by Bob?
Would Alice have to add some kind of public hash to her message so bob can say ""This definitely came from Alice?""
","Because you make the assumption that a private key is really ""private"" --i.e., alice and bob don't leave their usb keys plugged into their machine when they leave work.
","5515","<public-key-encryption>","6","-1","4","2010-04-20 01:13:04","2364619","0","2","","","","2010-03-02 16:08:07",""
"2364591","How does two-way asymmetric encryption work?","Say we have Alice and Bob.  
Alice sends Bob a message she encrypted with Bob's public key.  Bob is the only person who can decrypt it, using his private key.  But how can he be certain the message came from Alice?  
Suppose he replies, encrypting his message using Alice's public key.  Only Alice can decrypt the message.  But how can she be certain it was sent by Bob?
Would Alice have to add some kind of public hash to her message so bob can say ""This definitely came from Alice?""
","The scenario you describe does indeed not provide authenticity. So both Alice and Bob cannot be certain that they are talking to each other. The scenario does only provide confidentiality and as such also not secrecy. 
Bob would have to manually confirm with Alice that the public key he thinks is Alice's public key is indeed hers (by calling her and reading it out load and confirming by her voice that it is Alice).
This problem is normally solved with a trusted third party (a Certificate Authority for example, like VeriSign) that issues certificates stating the e.g. Alice is indeed the owner of this particular public key. This is the way it is solved in modern browsers and this is the way all SSL sessions (with your bank of choice) work. A certificate authority signs the certificate from your bank (stating that your bank is indeed the owner of the public key the certificate contains) and your browser has an already built-in certificate from the certificate authority (building a chain of certificates that can be verified).
The scenario you describe is vulnerable to a so called MITM (Man-in-the-middle) attack and not solvable purely with public-key-encryption.
","5515","<public-key-encryption>","6","9","4","2010-04-20 01:13:04","2364619","0","2","","","","2010-03-02 16:08:07",""
"2364591","How does two-way asymmetric encryption work?","Say we have Alice and Bob.  
Alice sends Bob a message she encrypted with Bob's public key.  Bob is the only person who can decrypt it, using his private key.  But how can he be certain the message came from Alice?  
Suppose he replies, encrypting his message using Alice's public key.  Only Alice can decrypt the message.  But how can she be certain it was sent by Bob?
Would Alice have to add some kind of public hash to her message so bob can say ""This definitely came from Alice?""
","What you are talking about very very very loosely looks like another implementation of an Asymmetric Encryption Algorithm found in the .Net framework.
.Net employs two branches for Asymmetric Encryption !!!

RSA ** Grand Mac daddy used for all asymmetric enc' purposes.
DSA ** more related to using and creating digital signature to verify an author.

Both are Abstract
Both are very similar to one another as to how they work and how a developer implements them but underneath I have read that two very different algorithms exist.
You are talking option 2.
.Net provides a class called DSACryptoServiceProvider which allows you tag your data with a value that is commonly referred to as signature.
According to a MS official course textbook heres roughly how it works.
Data >>> Hash Alg >>> Hash Value >>>>>>>>> Asymm' Alg >>>> Signature
                      Sender's PVT.KEY >>> 
Below shows how Bob can check to see if Alice is indeed the sender.
Data >>> Hash Alg >>> Hash Value || Decrypted Signature <<< Asymm' Alg <<< Signature
                                                                       <<< Sender's PUB.KEY
                          ?      ==      ?
As you can see Bob has to compare the generated Hash and Decrypted Signature
in order to verify that Alice is the sender. The DSACrypto' class has 4 methods that 
can be used here but only two are effective contextually speaking. At this point in time, this is all Bob can do, if his public key is not alice's public key, then essentially the software application should stop Bob dead in his tracks from proceeding any further as bob is trying to use a bogus public key when trying to communicate with Alice. This is the imposed relationship and stressed importance of the public key. The signature allows you verify the public keys owner. 
Here why? ::
If Bob has Alice's public key then he can use the same algorithm again to decrypt the encrypted data using the .VerifyHash or VerifyData methods. Should be straight forward what they do given this context. This is all done ofc using the Alice's Public Key. Only Alice can use the SignHash and SignData methods as they require Alice's Private Key.
As you can see above, a certain level of functionality is encapsulated already inside the DSA and RSA CryptoServiceProvider classes. It boils down to how well you implement them to verify Alice's as the sender everytime as the DSA algorithm allows you to certify a sender by matching the generated output. A certain signature and hash should match, if they do then in essence DSA has granted you a certain level of confidentiality between Bob and Alice.
","5515","<public-key-encryption>","6","1","4","2010-04-20 01:13:04","2364619","0","2","","","","2010-03-02 16:08:07",""
"20020808","OpenSSL: I encrypt and decrypt files with RSA keys that I have stored con external files, but sometimes my program chrashes","I encrypt and decrypt files with RSA keys that I generate and store in "".bin"" files (it also works storing them in "".txt"" files).  Now, I read the keys from those files and encrypt/decrypt a message. My program crashes sometimes due to bad memory allocation. What am I missing? Here is my code:
#define RSA_KEY_LENGTH 2048
#define PUB_EXP     3

#define PRIVFILE ""rsa_privkey_file.bin""
#define PUBFILE ""rsa_pubkey_file.bin""

int main(int argc, char* argv[])
{
    // Generate a pair of keys and store them in different files

    RSA *keypair = RSA_generate_key(RSA_KEY_LENGTH, PUB_EXP, NULL, NULL);
    printf(""Comprobando par de claves (Si son buenas 1): %i \n"",RSA_check_key(keypair));

    FILE *rsa_pubkey_file = fopen(PUBFILE,""wb"");
    FILE *rsa_privkey_file = fopen(PRIVFILE,""wb"");

    int temp;
    temp = PEM_write_RSAPublicKey(rsa_pubkey_file, keypair);
    fflush(rsa_pubkey_file);
    fclose(rsa_pubkey_file);

    temp = PEM_write_RSAPrivateKey(rsa_privkey_file, keypair, NULL, NULL, 0, 0,NULL);
    fflush(rsa_privkey_file);
    fclose(rsa_privkey_file);
    printf(""claves generadas..\n\n"");

    // DONE GENERATING!

    // ENCRYPTION with public key readed from its correspondent file

    int retval = 0;
    RSA *rsa_pubkey = NULL;
    rsa_pubkey_file = fopen(PUBFILE,""rb"");
    rsa_privkey_file = fopen(PRIVFILE,""rb"");

    if (PEM_read_RSAPublicKey(rsa_pubkey_file, &rsa_pubkey, NULL, NULL) == NULL)
    {
        fprintf(stderr, ""HORROR!!! loading RSA Public Key File.\n"");
        ERR_print_errors_fp(stderr);
        retval = 2;
    } //key read

    printf(""size de keypair (asumo que sera 8 siempre): %lu\n"", sizeof(keypair));

    char msg[2048/8] = ""1234567A1234567B1234567C1234567D"";
    printf(""msg: %s\n"", msg);
    printf(""size msg (asumo 256): %lu\n"", sizeof(msg));
    unsigned char * encrypt = (unsigned char*)malloc(8);

    temp = RSA_public_encrypt((int)strlen(msg), (unsigned char*)msg, (unsigned char*)encrypt, rsa_pubkey, RSA_PKCS1_OAEP_PADDING);
    printf(""size encrypt(asumo 256):    %i\n"", temp);

    // DONE ENCRYPTING!

    // DECRYPT with private key readed from its correspondent file

    RSA *rsa_prikey = NULL;

    if (PEM_read_RSAPrivateKey(rsa_privkey_file, &rsa_prikey, NULL, NULL) == NULL)
    {
        fprintf(stderr, ""HORROR!!! loading RSA Public Key File.\n"");
        ERR_print_errors_fp(stderr);
        retval = 2;
    } //key read

    char * decrypt = (char*)malloc(8);
    temp = RSA_private_decrypt(256, (unsigned char*)encrypt, (unsigned char*)decrypt,rsa_prikey , RSA_PKCS1_OAEP_PADDING);
    printf(""size decrypt (asumo 32):    %i\n"", temp);
    printf(""decrypted: %s\n"", msg);

    //DONE DECRYPTING!

    free(keypair);
    free(rsa_pubkey);
    free(rsa_prikey);
    fclose(rsa_privkey_file);
    fclose(rsa_pubkey_file);
    free(encrypt);
    free(decrypt);

    return 0;
}

","char msg[2048/8] = ""1234567A1234567B1234567C1234567D"";
printf(""msg: %s\n"", msg);
printf(""size msg (asumo 256): %lu\n"", sizeof(msg));
unsigned char * encrypt = (unsigned char*)malloc(8);

This buffer seems pretty small to hold the results of the encryption of your source message.
","5463","<c++><encryption><openssl><rsa><public-key-encryption>","1","3","2","2014-04-20 11:53:34","20021836","5","0","608639","","2014-04-20 11:40:29","2013-11-16 16:27:05",""
"20020808","OpenSSL: I encrypt and decrypt files with RSA keys that I have stored con external files, but sometimes my program chrashes","I encrypt and decrypt files with RSA keys that I generate and store in "".bin"" files (it also works storing them in "".txt"" files).  Now, I read the keys from those files and encrypt/decrypt a message. My program crashes sometimes due to bad memory allocation. What am I missing? Here is my code:
#define RSA_KEY_LENGTH 2048
#define PUB_EXP     3

#define PRIVFILE ""rsa_privkey_file.bin""
#define PUBFILE ""rsa_pubkey_file.bin""

int main(int argc, char* argv[])
{
    // Generate a pair of keys and store them in different files

    RSA *keypair = RSA_generate_key(RSA_KEY_LENGTH, PUB_EXP, NULL, NULL);
    printf(""Comprobando par de claves (Si son buenas 1): %i \n"",RSA_check_key(keypair));

    FILE *rsa_pubkey_file = fopen(PUBFILE,""wb"");
    FILE *rsa_privkey_file = fopen(PRIVFILE,""wb"");

    int temp;
    temp = PEM_write_RSAPublicKey(rsa_pubkey_file, keypair);
    fflush(rsa_pubkey_file);
    fclose(rsa_pubkey_file);

    temp = PEM_write_RSAPrivateKey(rsa_privkey_file, keypair, NULL, NULL, 0, 0,NULL);
    fflush(rsa_privkey_file);
    fclose(rsa_privkey_file);
    printf(""claves generadas..\n\n"");

    // DONE GENERATING!

    // ENCRYPTION with public key readed from its correspondent file

    int retval = 0;
    RSA *rsa_pubkey = NULL;
    rsa_pubkey_file = fopen(PUBFILE,""rb"");
    rsa_privkey_file = fopen(PRIVFILE,""rb"");

    if (PEM_read_RSAPublicKey(rsa_pubkey_file, &rsa_pubkey, NULL, NULL) == NULL)
    {
        fprintf(stderr, ""HORROR!!! loading RSA Public Key File.\n"");
        ERR_print_errors_fp(stderr);
        retval = 2;
    } //key read

    printf(""size de keypair (asumo que sera 8 siempre): %lu\n"", sizeof(keypair));

    char msg[2048/8] = ""1234567A1234567B1234567C1234567D"";
    printf(""msg: %s\n"", msg);
    printf(""size msg (asumo 256): %lu\n"", sizeof(msg));
    unsigned char * encrypt = (unsigned char*)malloc(8);

    temp = RSA_public_encrypt((int)strlen(msg), (unsigned char*)msg, (unsigned char*)encrypt, rsa_pubkey, RSA_PKCS1_OAEP_PADDING);
    printf(""size encrypt(asumo 256):    %i\n"", temp);

    // DONE ENCRYPTING!

    // DECRYPT with private key readed from its correspondent file

    RSA *rsa_prikey = NULL;

    if (PEM_read_RSAPrivateKey(rsa_privkey_file, &rsa_prikey, NULL, NULL) == NULL)
    {
        fprintf(stderr, ""HORROR!!! loading RSA Public Key File.\n"");
        ERR_print_errors_fp(stderr);
        retval = 2;
    } //key read

    char * decrypt = (char*)malloc(8);
    temp = RSA_private_decrypt(256, (unsigned char*)encrypt, (unsigned char*)decrypt,rsa_prikey , RSA_PKCS1_OAEP_PADDING);
    printf(""size decrypt (asumo 32):    %i\n"", temp);
    printf(""decrypted: %s\n"", msg);

    //DONE DECRYPTING!

    free(keypair);
    free(rsa_pubkey);
    free(rsa_prikey);
    fclose(rsa_privkey_file);
    fclose(rsa_pubkey_file);
    free(encrypt);
    free(decrypt);

    return 0;
}

","You have a memory error. You can use Clang (or another memory tool) to check for problems at runtime.
Here's the command line for building your program with Clang 3.3 and two sanitizers:
$ /usr/local/bin/clang -fsanitize=undefined -fsanitize=address -DDEBUG=1 -O1 -g3
  -Wall -Wextra -std=c99 -I/usr/local/ssl/macosx-x64/include test-openssl.c
  -o test-openssl.exe /usr/local/ssl/macosx-x64/lib/libcrypto.a

Here's the result:
$ ./test-openssl.exe | asan_symbolize.py 
=================================================================
==7693==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x602000007118 at pc 0x10d86b0ff bp 0x7fff524bd560 sp 0x7fff524bcd20
WRITE of size 32 at 0x602000007118 thread T0
    #0 0x10d86b0fe (/usr/local/lib/clang/3.3/lib/darwin/libclang_rt.asan_osx_dynamic.dylib+0xc0fe)
    #1 0x10d777237 (/Users/jwalton/./test-openssl.exe+0x100035237)
    #2 0x10d7749b4 (/Users/jwalton/./test-openssl.exe+0x1000329b4)
    #3 0x10d7432b4 (/Users/jwalton/./test-openssl.exe+0x1000012b4)
    #4 0x7fff888ff7e0 (/usr/lib/system/libdyld.dylib+0x27e0)
    #5 0x0
0x602000007118 is located 0 bytes to the right of 8-byte region [0x602000007110,0x602000007118)
allocated by thread T0 here:
    #0 0x10d86ecd5 (/usr/local/lib/clang/3.3/lib/darwin/libclang_rt.asan_osx_dynamic.dylib+0xfcd5)
    #1 0x10d743279 (/Users/jwalton/./test-openssl.exe+0x100001279)
    #2 0x7fff888ff7e0 (/usr/lib/system/libdyld.dylib+0x27e0)
    #3 0x0
Shadow bytes around the buggy address:
  0x1c0400000dd0: fa fa fd fa fa fa fd fa fa fa fd fa fa fa fd fa
  0x1c0400000de0: fa fa fd fd fa fa fd fa fa fa fd fa fa fa fd fa
  0x1c0400000df0: fa fa fd fa fa fa fd fa fa fa fd fa fa fa fd fa
  0x1c0400000e00: fa fa fd fa fa fa fd fa fa fa fd fa fa fa fd fa
  0x1c0400000e10: fa fa 00 fa fa fa fd fa fa fa fd fa fa fa fd fa
=>0x1c0400000e20: fa fa 00[fa]fa fa 00 fa fa fa fd fd fa fa fd fd
  0x1c0400000e30: fa fa fd fa fa fa fd fa fa fa fd fa fa fa fd fa
  0x1c0400000e40: fa fa fd fd fa fa fd fa fa fa fd fa fa fa fd fa
  0x1c0400000e50: fa fa fd fa fa fa fd fa fa fa fd fa fa fa fd fa
  0x1c0400000e60: fa fa fd fd fa fa fd fa fa fa fd fa fa fa fd fa
  0x1c0400000e70: fa fa fd fa fa fa 00 fa fa fa 00 fa fa fa fd fd
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07 
  Heap left redzone:     fa
  Heap right redzone:    fb
  Freed heap region:     fd
  Stack left redzone:    f1
  Stack mid redzone:     f2
  Stack right redzone:   f3
  Stack partial redzone: f4
  Stack after return:    f5
  Stack use after scope: f8
  Global redzone:        f9
  Global init order:     f6
  Poisoned by user:      f7
  ASan internal:         fe
==7693==ABORTING

Valgrind may be able to help (but I've found OpenSSL's sloppiness pretty much neutralizes it).
You can find instructions on downloading, build and installing Clang 3.4 at Dynamic Analysis with Clang. Its a recipe based HowTo for developers.
","5463","<c++><encryption><openssl><rsa><public-key-encryption>","1","0","2","2014-04-20 11:53:34","20021836","5","0","608639","","2014-04-20 11:40:29","2013-11-16 16:27:05",""
"18335749","Enigmail GPG error - gpg: decryption failed: secret key not available","I have a brand new install of Linux Mint 14. Installed Thunderbird & Enigmail. 
Generated my key, got a friend's public key, imported it.
Sent my friend an encrypted email, he was able to decrypt it just fine.
However, when he responded, I got ""gpg: decryption failed: secret key not available"" 
I tried deleting my key and reimporting it. I tried changing various settings. But I can't figure out what the problem is. I've used Linux/Thunderbird/Enigmail in the past and never had this error.
","Sounds like your friend didn't encrypt the message to your public key in the first place.  That error message just means that you did not possess the secret key for any of the keys the message was encrypted to.
I think you'll find that if you save the encrypted message into a file and run ""gpg -v "" it will tell you that it can't find a key on your keyring to decrypt it.  I'm also willing to bet that running ""gpg --list-packets"" or ""pgpdump"" (which just makes the --list-packets option easier to read) on that file you'll find that the message was only encrypted to your friend's key.
","5408","<public-key-encryption><gnupg><linux-mint>","4","2","3","2019-04-24 16:36:50","","0","","3100482","","2014-09-16 15:52:47","2013-08-20 13:00:53",""
"18335749","Enigmail GPG error - gpg: decryption failed: secret key not available","I have a brand new install of Linux Mint 14. Installed Thunderbird & Enigmail. 
Generated my key, got a friend's public key, imported it.
Sent my friend an encrypted email, he was able to decrypt it just fine.
However, when he responded, I got ""gpg: decryption failed: secret key not available"" 
I tried deleting my key and reimporting it. I tried changing various settings. But I can't figure out what the problem is. I've used Linux/Thunderbird/Enigmail in the past and never had this error.
","Sounds stupid, but make sure you are not mixing up gpg keys and ssh keys. That's just the kind of brain fart that will have you tearing your hair out. That's why I keep my hair short :)
See this: Are GPG and SSH keys interchangeable?
","5408","<public-key-encryption><gnupg><linux-mint>","4","0","3","2019-04-24 16:36:50","","0","","3100482","","2014-09-16 15:52:47","2013-08-20 13:00:53",""
"18335749","Enigmail GPG error - gpg: decryption failed: secret key not available","I have a brand new install of Linux Mint 14. Installed Thunderbird & Enigmail. 
Generated my key, got a friend's public key, imported it.
Sent my friend an encrypted email, he was able to decrypt it just fine.
However, when he responded, I got ""gpg: decryption failed: secret key not available"" 
I tried deleting my key and reimporting it. I tried changing various settings. But I can't figure out what the problem is. I've used Linux/Thunderbird/Enigmail in the past and never had this error.
","I just had exactly the same thing happen as the OP but it was a different cause. I eventually noticed that Thunderbird Enigmail was looking in the keyring of gpg2 while I had used gpg to create the latest key pair. You can check if it is in gpg and bring it across:
 gpg2 --list-secret-keys 
 gpg2 --import ~/.gnupg/secring.gpg
 gpg2 --list-secret-keys

It will ask you for passwords of keys after the middle step.
","5408","<public-key-encryption><gnupg><linux-mint>","4","0","3","2019-04-24 16:36:50","","0","","3100482","","2014-09-16 15:52:47","2013-08-20 13:00:53",""
"7037780","Convert PHP RSA PublicKey into Android PublicKey","I am working on a client server based application.
Where I get PublicKey in this format 

as I saved it into String.
Now I want to use this key in my Android(Java code), how can I use this ?
","There is a project called ""bouncycastle"" we use it on j2me but it woll work on android too. it can be used to handle openssl certificates.
bouncycastle.org
Java KeyStore implementation:
import java.security.cert.Certificate
import java.security.KeyStore
and readme a LOT because openssl keys are not directly supported by java which is bringing their own mechanisms.
Java example for KeyStore stuff:
byte[] certData = ...       
/* create KeyStore */
KeyStore ks = KeyStore.getInstance(""JKS"", ""SUN"");
/* load key store (initialization */
ks.load(null, null);
/* create CertificateFactory */
CertificateFactory cf = CertificateFactory.getInstance(""X509"");
/* create certificate from input stream */
Certificate cert;
/* provide cert data */
ByteArrayInputStream in = new ByteArrayInputStream(makeCert(certData));



private static byte[] makeCert(byte[] data) {
    String headline = ""-----BEGIN CERTIFICATE-----"";
    String footline = ""-----END CERTIFICATE-----"";

    String certStr = headline;
    for (int i = 0; i < data.length; i++) {
        if (i%64 == 0) {
            certStr += ""\n"";
        }
        certStr += (char)data[i];
    }
    if ((data.length-1)%64 != 0) {
        certStr += ""\n"";
    }
    certStr += footline;
    return certStr.getBytes();
}

","5360","<php><android><public-key-encryption>","4","0","2","2017-01-21 04:31:47","12101100","1","4","550966","","2011-08-12 10:01:21","2011-08-12 08:55:42",""
"7037780","Convert PHP RSA PublicKey into Android PublicKey","I am working on a client server based application.
Where I get PublicKey in this format 

as I saved it into String.
Now I want to use this key in my Android(Java code), how can I use this ?
","First you need to generate the public key from the pem format you provided, here is my method for doing this:
/**
 * 
 * @param PEMString  -A file/string in .pem format with a generated RSA key (with ""des3"", using ""openssl genrsa"".)
 * @param isFilePath - If it's a file path or a string
 * @return java.security.PublicKey
 * @throws IOException -No key found
 * @throws NoSuchAlgorithmException 
 * @throws InvalidKeySpecException 
 * 
 * @author hsigmond
 */

private static PublicKey getPublicKeyFromPemFormat(String PEMString,
        boolean isFilePath) throws IOException, NoSuchAlgorithmException,
        InvalidKeySpecException {

    BufferedReader pemReader = null;
    if (isFilePath) {
        pemReader = new BufferedReader(new InputStreamReader(
                new FileInputStream(PEMString)));
    } else {
        pemReader = new BufferedReader(new InputStreamReader(
                new ByteArrayInputStream(PEMString.getBytes(""UTF-8""))));
    }
    StringBuffer content = new StringBuffer();
    String line = null;
    while ((line = pemReader.readLine()) != null) {
        if (line.indexOf(""-----BEGIN PUBLIC KEY-----"") != -1) {
            while ((line = pemReader.readLine()) != null) {
                if (line.indexOf(""-----END PUBLIC KEY"") != -1) {
                    break;
                }
                content.append(line.trim());
            }
            break;
        }
    }
    if (line == null) {
        throw new IOException(""PUBLIC KEY"" + "" not found"");
    }
Log.i(""PUBLIC KEY: "", ""PEM content = : "" + content.toString());

    KeyFactory keyFactory = KeyFactory.getInstance(""RSA"");
    return keyFactory.generatePublic(new X509EncodedKeySpec(Base64.decode(content.toString(), Base64.DEFAULT)));

}

And here is how I use it to read (decode) the content signed with the public key provided.
/**
 * 
 * @param PEMString  -A file/string in .pem format with a generated RSA key (with ""des3"", using ""openssl genrsa"".)
 * @param content
 * @return String value of content Decoded
 * @throws NoSuchAlgorithmException
 * @throws InvalidKeySpecException
 * @throws IOException
 * @throws NoSuchProviderException
 * @throws NoSuchPaddingException
 * @throws InvalidKeyException
 * @throws IllegalBlockSizeException
 * @throws BadPaddingException
 * 
 * @author hsigmond
 */


    public static String getContentWithPublicKeyFromPemFormat(String PEMString,
        String content,boolean isFilePath) throws NoSuchAlgorithmException,
        InvalidKeySpecException, IOException, NoSuchProviderException,
        NoSuchPaddingException, InvalidKeyException,
        IllegalBlockSizeException, BadPaddingException {

    PublicKey publicKey = getPublicKeyFromPemFormat(PEMString,isFilePath);
    if (publicKey != null)
        Log.i(""PUBLIC KEY: "", ""FORMAT : "" + publicKey.getFormat()
                + "" \ntoString : "" + publicKey.toString());

    byte[] contentBytes = Base64.decode(content, Base64.DEFAULT);
    byte[] decoded = null;

    Cipher cipher = Cipher.getInstance(""RSA/ECB/PKCS1Padding"", ""BC"");//BC=BouncyCastle Provider
    cipher.init(Cipher.DECRYPT_MODE, publicKey);
    decoded = cipher.doFinal(contentBytes);
    return new String(decoded, ""UTF-8"");
}

","5360","<php><android><public-key-encryption>","4","5","2","2017-01-21 04:31:47","12101100","1","4","550966","","2011-08-12 10:01:21","2011-08-12 08:55:42",""
"1058793","How to Verify Signature, Loading PUBLIC KEY From PEM file?","I'm posting this in the hope it saves somebody else the hours I lost on this really stupid problem involving converting formats of public keys. If anybody sees a simpler solution or a problem, please let me know!
The eCommerce system I'm using sends me some data along with a signature. They also give me their public key in .pem format. The .pem file looks like this:
-----BEGIN PUBLIC KEY-----
MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDe+hkicNP7ROHUssGNtHwiT2Ew
HFrSk/qwrcq8v5metRtTTFPE/nmzSkRnTs3GMpi57rBdxBBJW5W9cpNyGUh0jNXc
VrOSClpD5Ri2hER/GcNrxVRP7RlWOqB1C03q4QYmwjHZ+zlM4OUhCCAtSWflB4wC
Ka1g88CjFwRw/PB9kwIDAQAB
-----END PUBLIC KEY-----
Here's the magic code to turn the above into an ""RSACryptoServiceProvider"" which is capable of verifying the signature. Uses the BouncyCastle library, since .NET apparently (and appallingly cannot do it without some major headaches involving certificate files):
RSACryptoServiceProvider thingee;

using (var reader = File.OpenText(@""c:\pemfile.pem""))
{
    var x = new PemReader(reader);
    var y = (RsaKeyParameters)x.ReadObject();

    thingee = (RSACryptoServiceProvider)RSACryptoServiceProvider.Create();
    var pa = new RSAParameters();
    pa.Modulus = y.Modulus.ToByteArray();
    pa.Exponent = y.Exponent.ToByteArray();
    thingee.ImportParameters(pa);
}

And then the code to actually verify the signature:
var signature = ... //reads from the packet sent by the eCommerce system
var data = ... //reads from the packet sent by the eCommerce system
var sha = new SHA1CryptoServiceProvider();
byte[] hash = sha.ComputeHash(Encoding.ASCII.GetBytes(data));
byte[] bSignature = Convert.FromBase64String(signature);

///Verify signature, FINALLY:
var hasValidSig = thingee.VerifyHash(hash, CryptoConfig.MapNameToOID(""SHA1""), bSignature);

","Potential problem: using Encoding.ASCII.GetBytes(data) is almost certainly the wrong way to get the hash. That means they can only send a hash which doesn't have any high bits set.
If this is in a ""packet"" you should get the raw data from the packet as a byte array. If it is represented as text, it should be in some encoded form - e.g. hex or base64. What does the hash look like?
","5206","<c#><digital-signature><public-key-encryption>","4","2","1","2013-03-31 17:43:20","","0","4","27615","","2012-01-26 08:23:59","2009-06-29 14:57:37",""
"46689885","How to get public key from an OpenPGP smart card without using key servers?","I am working on a use-case where OpenPGP is being used to generate a public key pair on a smart card (Yubikey).
The smart card is then to be shipped off to the user.
Trying to emulate this locally the following is being done:

generate keys on smart card
remove GnuPG home directory
access smart card to re-generate GnuPG home directory

The issue is that I cannot test encrypting a file after the above steps have been performed as the public key seems to be missing.  fetch doesn't seem to work.
At this stage I do not want to share the public key on any online server.
Is there any way of retrieving the public key from the smart card after deleting the key rings?
Below are the steps being followed:
$ gpg --card-edit                                                                                                                                                       

Reader ...........: 1050:0404:X:0
Application ID ...: D2760001240102010006046314290000
Version ..........: 2.1
Manufacturer .....: Yubico
Serial number ....: 04631429
Name of cardholder: sm sm
Language prefs ...: en
Sex ..............: unspecified
URL of public key : [not set]
Login data .......: sm
Signature PIN ....: not forced
Key attributes ...: rsa4096 rsa4096 rsa4096
Max. PIN lengths .: 127 127 127
PIN retry counter : 3 0 3
Signature counter : 0
Signature key ....: 54D4 E469 7056 B390 AE72  CAA1 A507 3320 7876 0302
      created ....: 2017-10-11 13:16:52
Encryption key....: ADA3 2D7F 8D66 4F34 C04A  457C DFEB E3E4 A8F1 8611
      created ....: 2017-10-11 11:14:18
Authentication key: 18B9 7AB4 0723 46F4 C23A  3DD7 E5C0 6A93 049E F6A8
      created ....: 2017-10-11 11:14:18
General key info..: [none]

gpg/card> admin
Admin commands are allowed

gpg/card> generate
Make off-card backup of encryption key? (Y/n) n

gpg: Note: keys are already stored on the card!

Replace existing keys? (y/N) y
What keysize do you want for the Signature key? (4096) 
What keysize do you want for the Encryption key? (4096) 
What keysize do you want for the Authentication key? (4096) 
Key is valid for? (0) 0
Is this correct? (y/N) y
Real name: john doe
Email address: john.doe@foobar.com
Comment: 
You selected this USER-ID:
    ""john doe <<john.doe@foobar.com>""

Change (N)ame, (C)omment, (E)mail or (O)kay/(Q)uit? o

gpg: /home/xxx/.gnupg/trustdb.gpg: trustdb created
gpg: key 6825CB0EBDA94110 marked as ultimately trusted
gpg: directory '/home/xxx/.gnupg/openpgp-revocs.d' created
gpg: revocation certificate stored as '/home/xxx/.gnupg/openpgp-revocs.d/6858F119E93FB74BB561DE556825CB0EBDA94110.rev'
public and secret key created and signed.


gpg/card> list

Reader ...........: 1050:0404:X:0
Application ID ...: D2760001240102010006046314290000
Version ..........: 2.1
Manufacturer .....: Yubico
Serial number ....: 04631429
Name of cardholder: sm sm
Language prefs ...: en
Sex ..............: unspecified
URL of public key : [not set]
Login data .......: sm
Signature PIN ....: not forced
Key attributes ...: rsa4096 rsa4096 rsa4096
Max. PIN lengths .: 127 127 127
PIN retry counter : 3 0 3
Signature counter : 4
Signature key ....: 6858 F119 E93F B74B B561  DE55 6825 CB0E BDA9 4110
      created ....: 2017-10-11 13:18:11
Encryption key....: BE05 7FDF 9ACD 05F0 B75A  570F 4711 4B69 A622 C1DC
      created ....: 2017-10-11 13:18:11
Authentication key: 7275 2C47 B1EF BFB5 1E6D  0E65 31C7 7DBE 2D22 7E32
      created ....: 2017-10-11 13:18:11
General key info..: pub  rsa4096/6825CB0EBDA94110 2017-10-11     john doe <<john.doe@foobar.com>
sec>  rsa4096/6825CB0EBDA94110  created: 2017-10-11  expires: never     
                                card-no: 0006 04631429
ssb>  rsa4096/31C77DBE2D227E32  created: 2017-10-11  expires: never     
                                card-no: 0006 04631429
ssb>  rsa4096/47114B69A622C1DC  created: 2017-10-11  expires: never     
                                card-no: 0006 04631429

gpg/card> quit

$ rm -rf .gnupg/

$ gpg --card-status                                                                                                                                                     
gpg: directory '/home/smalatho/.gnupg' created
gpg: new configuration file '/home/smalatho/.gnupg/dirmngr.conf' created
gpg: new configuration file '/home/smalatho/.gnupg/gpg.conf' created
gpg: keybox '/home/smalatho/.gnupg/pubring.kbx' created
Reader ...........: 1050:0404:X:0
Application ID ...: D2760001240102010006046314290000
Version ..........: 2.1
Manufacturer .....: Yubico
Serial number ....: 04631429
Name of cardholder: sm sm
Language prefs ...: en
Sex ..............: unspecified
URL of public key : [not set]
Login data .......: sm
Signature PIN ....: not forced
Key attributes ...: rsa4096 rsa4096 rsa4096
Max. PIN lengths .: 127 127 127
PIN retry counter : 3 0 3
Signature counter : 4
Signature key ....: 6858 F119 E93F B74B B561  DE55 6825 CB0E BDA9 4110
      created ....: 2017-10-11 13:18:11
Encryption key....: BE05 7FDF 9ACD 05F0 B75A  570F 4711 4B69 A622 C1DC
      created ....: 2017-10-11 13:18:11
Authentication key: 7275 2C47 B1EF BFB5 1E6D  0E65 31C7 7DBE 2D22 7E32
      created ....: 2017-10-11 13:18:11
General key info..: [none]

","It requires the user to manually export the public key before deleting GNUPGHOME directory and then re-importing the public key in the smart card.
$ gpg --armor --export j.doe@example.com > public.asc
$ rm -rf ~/.gnupg
$ gpg --import public.asc

","5203","<security><public-key-encryption><gnupg>","9","1","2","2017-10-13 18:23:39","46735922","0","1","695343","","2017-10-13 18:23:39","2017-10-11 13:46:30",""
"46689885","How to get public key from an OpenPGP smart card without using key servers?","I am working on a use-case where OpenPGP is being used to generate a public key pair on a smart card (Yubikey).
The smart card is then to be shipped off to the user.
Trying to emulate this locally the following is being done:

generate keys on smart card
remove GnuPG home directory
access smart card to re-generate GnuPG home directory

The issue is that I cannot test encrypting a file after the above steps have been performed as the public key seems to be missing.  fetch doesn't seem to work.
At this stage I do not want to share the public key on any online server.
Is there any way of retrieving the public key from the smart card after deleting the key rings?
Below are the steps being followed:
$ gpg --card-edit                                                                                                                                                       

Reader ...........: 1050:0404:X:0
Application ID ...: D2760001240102010006046314290000
Version ..........: 2.1
Manufacturer .....: Yubico
Serial number ....: 04631429
Name of cardholder: sm sm
Language prefs ...: en
Sex ..............: unspecified
URL of public key : [not set]
Login data .......: sm
Signature PIN ....: not forced
Key attributes ...: rsa4096 rsa4096 rsa4096
Max. PIN lengths .: 127 127 127
PIN retry counter : 3 0 3
Signature counter : 0
Signature key ....: 54D4 E469 7056 B390 AE72  CAA1 A507 3320 7876 0302
      created ....: 2017-10-11 13:16:52
Encryption key....: ADA3 2D7F 8D66 4F34 C04A  457C DFEB E3E4 A8F1 8611
      created ....: 2017-10-11 11:14:18
Authentication key: 18B9 7AB4 0723 46F4 C23A  3DD7 E5C0 6A93 049E F6A8
      created ....: 2017-10-11 11:14:18
General key info..: [none]

gpg/card> admin
Admin commands are allowed

gpg/card> generate
Make off-card backup of encryption key? (Y/n) n

gpg: Note: keys are already stored on the card!

Replace existing keys? (y/N) y
What keysize do you want for the Signature key? (4096) 
What keysize do you want for the Encryption key? (4096) 
What keysize do you want for the Authentication key? (4096) 
Key is valid for? (0) 0
Is this correct? (y/N) y
Real name: john doe
Email address: john.doe@foobar.com
Comment: 
You selected this USER-ID:
    ""john doe <<john.doe@foobar.com>""

Change (N)ame, (C)omment, (E)mail or (O)kay/(Q)uit? o

gpg: /home/xxx/.gnupg/trustdb.gpg: trustdb created
gpg: key 6825CB0EBDA94110 marked as ultimately trusted
gpg: directory '/home/xxx/.gnupg/openpgp-revocs.d' created
gpg: revocation certificate stored as '/home/xxx/.gnupg/openpgp-revocs.d/6858F119E93FB74BB561DE556825CB0EBDA94110.rev'
public and secret key created and signed.


gpg/card> list

Reader ...........: 1050:0404:X:0
Application ID ...: D2760001240102010006046314290000
Version ..........: 2.1
Manufacturer .....: Yubico
Serial number ....: 04631429
Name of cardholder: sm sm
Language prefs ...: en
Sex ..............: unspecified
URL of public key : [not set]
Login data .......: sm
Signature PIN ....: not forced
Key attributes ...: rsa4096 rsa4096 rsa4096
Max. PIN lengths .: 127 127 127
PIN retry counter : 3 0 3
Signature counter : 4
Signature key ....: 6858 F119 E93F B74B B561  DE55 6825 CB0E BDA9 4110
      created ....: 2017-10-11 13:18:11
Encryption key....: BE05 7FDF 9ACD 05F0 B75A  570F 4711 4B69 A622 C1DC
      created ....: 2017-10-11 13:18:11
Authentication key: 7275 2C47 B1EF BFB5 1E6D  0E65 31C7 7DBE 2D22 7E32
      created ....: 2017-10-11 13:18:11
General key info..: pub  rsa4096/6825CB0EBDA94110 2017-10-11     john doe <<john.doe@foobar.com>
sec>  rsa4096/6825CB0EBDA94110  created: 2017-10-11  expires: never     
                                card-no: 0006 04631429
ssb>  rsa4096/31C77DBE2D227E32  created: 2017-10-11  expires: never     
                                card-no: 0006 04631429
ssb>  rsa4096/47114B69A622C1DC  created: 2017-10-11  expires: never     
                                card-no: 0006 04631429

gpg/card> quit

$ rm -rf .gnupg/

$ gpg --card-status                                                                                                                                                     
gpg: directory '/home/smalatho/.gnupg' created
gpg: new configuration file '/home/smalatho/.gnupg/dirmngr.conf' created
gpg: new configuration file '/home/smalatho/.gnupg/gpg.conf' created
gpg: keybox '/home/smalatho/.gnupg/pubring.kbx' created
Reader ...........: 1050:0404:X:0
Application ID ...: D2760001240102010006046314290000
Version ..........: 2.1
Manufacturer .....: Yubico
Serial number ....: 04631429
Name of cardholder: sm sm
Language prefs ...: en
Sex ..............: unspecified
URL of public key : [not set]
Login data .......: sm
Signature PIN ....: not forced
Key attributes ...: rsa4096 rsa4096 rsa4096
Max. PIN lengths .: 127 127 127
PIN retry counter : 3 0 3
Signature counter : 4
Signature key ....: 6858 F119 E93F B74B B561  DE55 6825 CB0E BDA9 4110
      created ....: 2017-10-11 13:18:11
Encryption key....: BE05 7FDF 9ACD 05F0 B75A  570F 4711 4B69 A622 C1DC
      created ....: 2017-10-11 13:18:11
Authentication key: 7275 2C47 B1EF BFB5 1E6D  0E65 31C7 7DBE 2D22 7E32
      created ....: 2017-10-11 13:18:11
General key info..: [none]

","OpenPGP smart cards do not store enough information to reconstruct a full OpenPGP public key. You must import the public key separately -- sharing it on a key servers is one solution, but you can also gpg --export the key and later gpg --import it again for testing.
","5203","<security><public-key-encryption><gnupg>","9","7","2","2017-10-13 18:23:39","46735922","0","1","695343","","2017-10-13 18:23:39","2017-10-11 13:46:30",""
"12192116","RSA - bitlength of p and q","I'm just trying to understand the key generation part of RSA, and more specifically, selecting the p and q primes. Given a target bit length for the modulus, n, what range I should be generating p and q in?
The modulus, n, is the product of p and q, where p and q are both prime numbers. I've read that p and q should be relatively close to each other, and somewhere around sqrt(n). If the target bit length is, for example, 32 bits (very small I realise), then does that follow that p and q should be a random prime of a maximum 16 bits?
Thanks for any clarification
Rob
","For a 32-bit modulus the question is a bit academic:  your primary aim in choosing p and q is to make the product hard to factorize, but finding the prime factorisation of a number smaller than 2^32 is so easy that there's little point worrying about the sizes of p and q in this case.  Note that the mathematics will work just fine so long as p and q are distinct primes.
For something more realistic, like a 1024-bit modulus, then yes, you're pretty safe choosing two 512-bit primes p and q at random:  that is, choose p and q uniformly from the set of all primes in the range [2^511, 2^512].  There's a notion of 'strong primes', which are primes designed to avoid particular possible known attacks---for example, you'll see recommendations that p and q should be chosen so that p-1 and q-1 have large factors, to guard against easy factorizations using Pollard's 'p-1' algorithm.  However, these recommendations don't really apply to large moduli and state-of-the-art factorization algorithms (GNFS, ECM).  There are other possible cases that in theory could give an easy factorization, but they're so unlikely to turn up in practice from random choices of p and q that they're not worth worrying about.
Summary: just choose two random primes with equal bitlength, and you're done.
A couple of additional comments and things to think about:

Of course, if you do choose two 512-bit primes, you'll end up with either a 1023-bit or a 1024-bit modulus;  that's probably not worth worrying about, but if you really cared about getting exactly a 1024-bit modulus you could either restrict the range of p and q further, say to [1.5 * 2^511, 2^512], or just throw out any 1023-bit modulus and try again.
Don't deliberately choose p and q so that they're near each other:  if p and q are truly close to each other (e.g., less than 10^10 apart, say), then their product pq is easily factorized by Fermat's method.  But if you're choosing random primes p and q in the range [2^511, 2^512], this isn't going to happen with any sort of realistic probability.
When choosing a prime at random, a tempting strategy is to pick a random (odd) integer in the range [2^511, 2^512] and then increment it until you find the first prime.  But note that that does not give a uniform choice amongst all primes:  primes occurring after a large gap would be more likely to come up than other primes.  A better strategy is just to keep picking random odd numbers and keep the first one that's a prime (or more likely, a strong probable prime to so many randomly-chosen bases that you can be sure in practice that it's prime).
Make sure you've got a really good cryptographic source of random numbers on hand for your prime number generation.

","5148","<math><rsa><public-key-encryption>","5","16","1","2012-08-30 11:32:49","12195783","0","2","","","","2012-08-30 07:41:36",""
"15206594","RSA Message too long Javascript JSBN","I am using JSBN in javascript to encrypt a set of string (message) of facebook data to securely send them to my server (PHP) and decrypt them there.
Some users are experiencing ""Message too long"" on something like 
""&fbemail='+fbemail+'&gender='+fbgender+'&birthday='+fbbirthday+'&name='+fbname+'&surname='+fbsurname+'&fbuser='+fbuserid""

I have generate a private key through:
$privateKey = openssl_pkey_new(array(
          'private_key_bits' => 1024,
          'private_key_type' => OPENSSL_KEYTYPE_RSA,
        ));

Why am I getting that message? The message is not that long.
I have looked at the following post, yet I dont understand how to use AES in javascript without having the AES passphrase compromised.
RSA Encryption Problem [Size of payload data]
","Without generating a symmetric key and encrypting the full message? Use a bigger key. 1024-bit keys can only encrypt 117 bytes without some sort of padding, but a 2048-bit one can handle up to 245 bytes, and a 4096-bit key up to 501 bytes. That could make your script handle bigger and accented names (non-ASCII characters uses two or more bytes per character).
I ended up with a similar problem, but Thoman Pornin answer to RSA Encryption Problem [Size of payload data] was great in explaining the reason of this limitation.
Also gave up trying to split up the message in several encrypted chunks after reading (the same) Thomas Pornin answer to Does RSA padding have to be unpredictable if the payload is?
","5062","<javascript><rsa><public-key-encryption><jsbn>","3","2","1","2014-01-24 13:05:18","21333471","4","","-1","","2017-05-23 12:17:27","2013-03-04 16:46:14",""
"10055858","Verify user's private key for website login","I'm trying to implement a login system to sign into a website using public key authentication. I'm not sure if this is feasible.
This is what I plan to do:-

While signing up, user's public key is saved in the website.
When the user tries to login later, the website asks the user for his corresponding private key.
User is authenticated if the private key matches the public key which the user provided while signing up.

I have seen sites like startssl.com asking for user's private key to verify their identity (see the screenshot attached). So what does it takes to implement such a system?

","Just to clarify the flow

The user signs up, using the plain old username and password pair. He is also asked to enter at least one public key (other ones can be added later from a profile administration panel)
The server stores the user's public key and associates it with its user in a certificate
Next time the client makes a request presenting his certificate (this should be handled by the browser, thus happening transparently to the user), the SSL engine on the server side checks if it knows the client and if it does the request is processed and the application code will authenticate and authorize the user since it knows the link between a public key and an user. If the client is not identified, the server should redirect to some page to allow signin up or manual login (maybe to add a new public key)

","5055","<authentication><web><public-key-encryption><public-key>","14","6","1","2014-08-13 15:35:53","10056208","4","8","","","","2012-04-07 15:47:48",""
"11665798","parse and read a public key in java","I have a requirement to read a public key using java and parse it, to check its validity, exponent, modulus or whether its valid or not. I tried the below code, and having issues. Can you please help me finding a solution for this problem?
public static void getPublicKey(String key) throws Exception {

key = key.replaceAll(""-----BEGIN SSH2 PUBLIC KEY-----"", """");
key = key.replaceAll(""-----END SSH2 PUBLIC KEY-----"", """");
KeyFactory kFactory = KeyFactory.getInstance(""RSA"", new BouncyCastleProvider());
byte pub_llave[] =  new BASE64Decoder().decodeBuffer( key ) ;
X509EncodedKeySpec spec =  new X509EncodedKeySpec(pub_llave);
PublicKey pubkey = (PublicKey) kFactory.generatePublic(spec);
}

And here is the exception:
java.lang.IllegalArgumentException: unknown object in getInstance: org.bouncycastle.asn1.DERApplicationSpecific
    at org.bouncycastle.asn1.ASN1Sequence.getInstance(Unknown Source)
    at org.bouncycastle.asn1.ASN1Sequence.getInstance(Unknown Source)
    at org.bouncycastle.asn1.x509.SubjectPublicKeyInfo.getInstance(Unknown Source)

","SSH keys are not X.509 keys, thus it cannot work (this way).
https://jsvnserve.googlecode.com/svn/trunk/src/main/java/com/googlecode/jsvnserve/sshd/PublicKeyReaderUtil.java shows a way how to parse SSH keys.
","4995","<java><bouncycastle><public-key-encryption>","6","2","1","2014-08-04 18:00:57","","5","1","812303","","2012-07-26 09:12:29","2012-07-26 09:00:02",""
"11399613","Issues with OpenSSL on PHP - different behaviour for different versions","(This question was originally posted on ServerFault - I have deleted it there and moved it here.)
I have a development machine running PHP 5.3.5 and a production machine running PHP 5.3.8.
The following code runs on the development machine:
<?php
$key = ""-----BEGIN PUBLIC KEY-----
MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQC0x+2RiQ+LCZNAUcl/Ecf1NrTr
lhjOiHaVC+w/y+UJevqVcDstD22OJGwT13B9T47OuQG9BmzcZQYLcShUMhVD/Owu
9+8PcK51EnBd0lym6+z/WixpnqfQonyKiqq5ytmYKUlUv39J8QQUI2geyvY9VpWS
wyNcFUs7wPl2zsLCPQIDAQAB
-----END PUBLIC KEY-----"";

$data = ""Hello, world!"";

$key1 = openssl_get_publickey($key);
print_r ($key1);
echo ""<p>"";

$res = openssl_public_encrypt($data, $encrypted_data, $key1, OPENSSL_PKCS1_PADDING);

echo base64_encode($encrypted_data);

On my development machine, this code outputs a resource and an encoded string. I would copy it here, but of course it changes each time. On the production machine, this code produces the resource number and the following PHP errors:
PHP Warning:  openssl_public_encrypt(): Don't know how to get public key from this private key in C:\xxx\test.php on line 15
PHP Warning:  openssl_public_encrypt(): key parameter is not a valid public key in C:\xxx\test.php on line 15

Unfortunately, installing an older version of PHP on the production machine is not an option at the moment because of other applications that are running on it which require 5.3.8 as a minimum.
Would it help if I upgraded to 5.4.x?
I do know that the version of OpenSSL on 5.3.5 is 0.9.8 whereas the version in 5.3.8 is 1.0.0. I imagine that there might be a problem there. Is there any way to work around that?
I have tried to find out as much as I can from the OpenSSL.org site, and the PHP bug tracker, but I don't know what I'm looking for.
Regards,
Philip
","According to this post, the issue is related to different OpenSSL versions of Apache and PHP in the XAMPP/Windows installation. I had a similar issue with openssl_verify. I solved it by using the same OpenSSL version for both Apache and PHP (replacing DLLs). Here's a link to the solution.
""I found a solution for the problem, it seems there are 2 wrong files in /apache/bin/ in the default 1.7.7 installation that need to be replaced by the files existing in /php/ (libeay32.ddl and ssleay32.dll)""
","4847","<php><openssl><public-key-encryption>","2","8","2","2013-11-14 13:39:15","11427989","3","","","","","2012-07-09 16:50:57",""
"11399613","Issues with OpenSSL on PHP - different behaviour for different versions","(This question was originally posted on ServerFault - I have deleted it there and moved it here.)
I have a development machine running PHP 5.3.5 and a production machine running PHP 5.3.8.
The following code runs on the development machine:
<?php
$key = ""-----BEGIN PUBLIC KEY-----
MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQC0x+2RiQ+LCZNAUcl/Ecf1NrTr
lhjOiHaVC+w/y+UJevqVcDstD22OJGwT13B9T47OuQG9BmzcZQYLcShUMhVD/Owu
9+8PcK51EnBd0lym6+z/WixpnqfQonyKiqq5ytmYKUlUv39J8QQUI2geyvY9VpWS
wyNcFUs7wPl2zsLCPQIDAQAB
-----END PUBLIC KEY-----"";

$data = ""Hello, world!"";

$key1 = openssl_get_publickey($key);
print_r ($key1);
echo ""<p>"";

$res = openssl_public_encrypt($data, $encrypted_data, $key1, OPENSSL_PKCS1_PADDING);

echo base64_encode($encrypted_data);

On my development machine, this code outputs a resource and an encoded string. I would copy it here, but of course it changes each time. On the production machine, this code produces the resource number and the following PHP errors:
PHP Warning:  openssl_public_encrypt(): Don't know how to get public key from this private key in C:\xxx\test.php on line 15
PHP Warning:  openssl_public_encrypt(): key parameter is not a valid public key in C:\xxx\test.php on line 15

Unfortunately, installing an older version of PHP on the production machine is not an option at the moment because of other applications that are running on it which require 5.3.8 as a minimum.
Would it help if I upgraded to 5.4.x?
I do know that the version of OpenSSL on 5.3.5 is 0.9.8 whereas the version in 5.3.8 is 1.0.0. I imagine that there might be a problem there. Is there any way to work around that?
I have tried to find out as much as I can from the OpenSSL.org site, and the PHP bug tracker, but I don't know what I'm looking for.
Regards,
Philip
","You passed the wrong parameter of openssl_public_encrypt
openssl_public_encrypt($data, $encrypted_data, $key1, OPENSSL_PKCS1_PADDING)
where $key1 is the resource id use $key instead of $key1. You can use 
openssl_public_encrypt($data, $encrypted_data, $key, OPENSSL_PKCS1_PADDING)
","4847","<php><openssl><public-key-encryption>","2","0","2","2013-11-14 13:39:15","11427989","3","","","","","2012-07-09 16:50:57",""
"8794588","Public key implementation in C for Linux","I'm trying to use public key crypto to sign and later verify a file. The file is a simple plaintext file that contains user information for authoring purposes.
I tried different sites for a C implementation of a public key crypto algorithm but I haven't found anything. A lot of sites point to using certificates (x.509, etc) but that is way beyond what I need. I am just looking for a way to generate and public and private keys and use a relatively well known algorithm to sign and verify a file.
Any pointers to a pure C implementation out there? The focus is on code that I can reuse and not external libs. The main problem being that I don't want to have to link against a full lib and its dependencies in order to have a very basic public key system.
Thanks.
","You may want to look at the well-respected, debugged, and tested OpenSSL libraries.  Although OpenSSL is primarily for SSL/TLS networking, it contains extremely good implementations of many cryptographic protocols, which are often used by themselves for general cryptography.
Hope this helps!
","4809","<c><linux><encryption><public-key-encryption>","4","5","5","2013-06-07 09:29:57","8794623","14","2","206247","","2012-01-09 20:24:39","2012-01-09 20:15:43",""
"8794588","Public key implementation in C for Linux","I'm trying to use public key crypto to sign and later verify a file. The file is a simple plaintext file that contains user information for authoring purposes.
I tried different sites for a C implementation of a public key crypto algorithm but I haven't found anything. A lot of sites point to using certificates (x.509, etc) but that is way beyond what I need. I am just looking for a way to generate and public and private keys and use a relatively well known algorithm to sign and verify a file.
Any pointers to a pure C implementation out there? The focus is on code that I can reuse and not external libs. The main problem being that I don't want to have to link against a full lib and its dependencies in order to have a very basic public key system.
Thanks.
","OpenSSL is a very good package. You can just use the crypto library portion, which provides basic RSA implementations. That might be in line with what you are looking for.
Cryptlib is another alternative that could work for you. It has some strange licensing issues though, so consider those depending on how you will be using it.
Crypto++ is a set of different crypto technologies, and includes RSA, so you might try that.
Finally, RSA is not terribly complex to implement, so you could even implement it yourself using GMP, which provides the necessary mathematical functions you would need.
","4809","<c><linux><encryption><public-key-encryption>","4","10","5","2013-06-07 09:29:57","8794623","14","2","206247","","2012-01-09 20:24:39","2012-01-09 20:15:43",""
"8794588","Public key implementation in C for Linux","I'm trying to use public key crypto to sign and later verify a file. The file is a simple plaintext file that contains user information for authoring purposes.
I tried different sites for a C implementation of a public key crypto algorithm but I haven't found anything. A lot of sites point to using certificates (x.509, etc) but that is way beyond what I need. I am just looking for a way to generate and public and private keys and use a relatively well known algorithm to sign and verify a file.
Any pointers to a pure C implementation out there? The focus is on code that I can reuse and not external libs. The main problem being that I don't want to have to link against a full lib and its dependencies in order to have a very basic public key system.
Thanks.
","The answers on this question contain some interesting links to other libraries.
However, I remember that there exists some reference source code in C for RSA and private key cryptography. I will add a link as soon as I have found it ;-)
EDIT
I just found ""this link"" (http://www.hackchina.com/en/cont/93068 - open on your own risk) - not sure about the source and details of that code. But, however, in the past the link to the original RSA reference implementation was contained somewhere in OpenSSL source or its documentation. Which is based on cryptsoft.com's library. I am sure the source can still be found somewhere on www.rsa.com/rsalabs/ - but I could not find it, and I am running out of time for now. Good luck ;-)
","4809","<c><linux><encryption><public-key-encryption>","4","1","5","2013-06-07 09:29:57","8794623","14","2","206247","","2012-01-09 20:24:39","2012-01-09 20:15:43",""
"8794588","Public key implementation in C for Linux","I'm trying to use public key crypto to sign and later verify a file. The file is a simple plaintext file that contains user information for authoring purposes.
I tried different sites for a C implementation of a public key crypto algorithm but I haven't found anything. A lot of sites point to using certificates (x.509, etc) but that is way beyond what I need. I am just looking for a way to generate and public and private keys and use a relatively well known algorithm to sign and verify a file.
Any pointers to a pure C implementation out there? The focus is on code that I can reuse and not external libs. The main problem being that I don't want to have to link against a full lib and its dependencies in order to have a very basic public key system.
Thanks.
","DJ Bernstein's curve25519 lets you create public/private key pairs. It does not have functions for signing, but you should be able to figure that part out with not too much hassle.
Update: In the mean time, there's also Ed25519 which already has the signature generation stuff figured out, without you having to jump through hoops. Same author, same availability of software (also e.g. ""Donna"" implementation and python binding), same ease of use, comparable speed.
The original implementation as well as the ""Donna"" implementation are both available under very liberal licenses.
You need to compile one file and call exactly one function to generate a key pair, and it's very fast. No obscure requirements for the public key. All one ever needs for some ""cheap, fast, easy public key crypto"".
","4809","<c><linux><encryption><public-key-encryption>","4","2","5","2013-06-07 09:29:57","8794623","14","2","206247","","2012-01-09 20:24:39","2012-01-09 20:15:43",""
"8794588","Public key implementation in C for Linux","I'm trying to use public key crypto to sign and later verify a file. The file is a simple plaintext file that contains user information for authoring purposes.
I tried different sites for a C implementation of a public key crypto algorithm but I haven't found anything. A lot of sites point to using certificates (x.509, etc) but that is way beyond what I need. I am just looking for a way to generate and public and private keys and use a relatively well known algorithm to sign and verify a file.
Any pointers to a pure C implementation out there? The focus is on code that I can reuse and not external libs. The main problem being that I don't want to have to link against a full lib and its dependencies in order to have a very basic public key system.
Thanks.
","I think that there was an answer[1] that fitted your question on :: Small RSA or DSA lib without dependencies

You may find LibTomCrypt useful. It's written in C, supports RSA and
  DSA (along with a host of other algorithms), and is public domain
  software. You can read about its features here: http://libtom.org/?page=features

[1] https://stackoverflow.com/a/1735526/68338 ( courtesy of https://stackoverflow.com/users/33837/emerick-rogul )
","4809","<c><linux><encryption><public-key-encryption>","4","2","5","2013-06-07 09:29:57","8794623","14","2","206247","","2012-01-09 20:24:39","2012-01-09 20:15:43",""
"5768130","bash/ssh test for public key authentication","Is there a way to programmatically test whether ssh can authenticate using a public key? I would like to do something like this (preferably in bash, but am open to a python solution):
ssh-test-thingy user@host || echo ""could not authenticate using publickey""

where ssh-test-thingyreturns a non-zero exit status if no public key matches on the remote host.
","I'd pass the option -o BatchMode=yes to ssh and see if that works.  It will disable prompting for a password, which I think is equivalent in practice to your desire to find out if authentication via keys is possible.  ssh-test-thingy could be written as a bash script like so:
exec ssh -o BatchMode=yes ""$@"" true

This will simply pass the user@host (and any other arguments) along, and try to run true on the remote host, which if it works will immediately return a status code of success (0).
","4781","<bash><ssh><public-key-encryption>","12","18","1","2014-03-13 14:15:53","5768198","0","4","26494","","2014-03-13 14:15:53","2011-04-24 01:47:42",""
"15639442","Encryption PHP, Decryption Java","I have a web-service in php that generates a keypair to encrypt a message, and one application in java that retrives the privatekey and decrypt the message.
For php I'm using http://phpseclib.sourceforge.net/ and have this two files:
keypair.php
<?php

set_time_limit(0);
if( file_exists('private.key') )
{
    echo file_get_contents('private.key');
}
else
{
    include('Crypt/RSA.php');
    $rsa = new Crypt_RSA();
    $rsa->createKey();
    $res = $rsa->createKey();

    $privateKey = $res['privatekey'];
    $publicKey  = $res['publickey'];

    file_put_contents('public.key', $publicKey);
    file_put_contents('private.key', $privateKey);
}

?>

encrypt.php
<?php

include('Crypt/RSA.php');

//header(""Content-type: text/plain"");

set_time_limit(0);
$rsa = new Crypt_RSA();
$rsa->setEncryptionMode(CRYPT_RSA_ENCRYPTION_OAEP);
$rsa->loadKey(file_get_contents('public.key')); // public key

$plaintext = 'Hello World!';
$ciphertext = $rsa->encrypt($plaintext);

echo base64_encode($ciphertext);

?>

and in java I have this code:
package com.example.app;

import java.io.DataInputStream;
import java.net.URL;
import java.security.Security;

import javax.crypto.Cipher;
import javax.crypto.spec.SecretKeySpec;

import sun.misc.BASE64Decoder;

public class MainClass {

    /**
     * @param args
     */
    public static void main(String[] args)
    {
        Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());

        try {
            BASE64Decoder decoder   = new BASE64Decoder();
            String b64PrivateKey    = getContents(""http://localhost/api/keypair.php"").trim();
            String b64EncryptedStr  = getContents(""http://localhost/api/encrypt.php"").trim();

            System.out.println(""PrivateKey (b64): "" + b64PrivateKey);
            System.out.println("" Encrypted (b64): "" + b64EncryptedStr);

            SecretKeySpec privateKey    = new SecretKeySpec( decoder.decodeBuffer(b64PrivateKey) , ""AES"");
            Cipher cipher               = Cipher.getInstance(""RSA/None/OAEPWithSHA1AndMGF1Padding"", ""BC"");
            cipher.init(Cipher.DECRYPT_MODE, privateKey);

            byte[] plainText            = decoder.decodeBuffer(b64EncryptedStr);

            System.out.println(""         Message: "" + plainText);
        }
        catch( Exception e )
        {
            System.out.println(""           Error: "" + e.getMessage());
        }

    }

    public static String getContents(String url)
    {
        try {
            String result = """";
            String line;
            URL u = new URL(url);
            DataInputStream theHTML = new DataInputStream(u.openStream());
            while ((line = theHTML.readLine()) != null)
                result = result + ""\n"" + line;

            return result;
        }
        catch(Exception e){}

        return """";
    }
}

My questions are:

Why I'm having a exception saying ""not an RSA key!""?
How can I improve this code? I have used base64 to avoid encoding and comunication errors between Java and PHP.
This concept is correct? I mean, I'm using it correctly?

","A few thoughts.

Shouldn't you be echo'ing out $privatekey in the else as well?
Are you using the latest Git version of phpseclib? I ask because a while ago there was this commit:
https://github.com/phpseclib/phpseclib/commit/e4ccaef7bf74833891386232946d2168a9e2fce2#phpseclib/Crypt/RSA.php
The commit was inspired by https://stackoverflow.com/a/13908986/569976
Might be worthwhile if you change your tags up a bit to include bouncycastle and phpseclib. I'd add those tags but some tags will have to be removed since you're already at the limit of 5. I'll let you decide which ones to remove (if you even want to do that).

","4770","<php><rsa><bouncycastle><public-key-encryption><phpseclib>","9","3","4","2013-04-10 07:04:27","15660170","3","5","1143201","","2013-03-26 17:57:18","2013-03-26 14:21:32",""
"15639442","Encryption PHP, Decryption Java","I have a web-service in php that generates a keypair to encrypt a message, and one application in java that retrives the privatekey and decrypt the message.
For php I'm using http://phpseclib.sourceforge.net/ and have this two files:
keypair.php
<?php

set_time_limit(0);
if( file_exists('private.key') )
{
    echo file_get_contents('private.key');
}
else
{
    include('Crypt/RSA.php');
    $rsa = new Crypt_RSA();
    $rsa->createKey();
    $res = $rsa->createKey();

    $privateKey = $res['privatekey'];
    $publicKey  = $res['publickey'];

    file_put_contents('public.key', $publicKey);
    file_put_contents('private.key', $privateKey);
}

?>

encrypt.php
<?php

include('Crypt/RSA.php');

//header(""Content-type: text/plain"");

set_time_limit(0);
$rsa = new Crypt_RSA();
$rsa->setEncryptionMode(CRYPT_RSA_ENCRYPTION_OAEP);
$rsa->loadKey(file_get_contents('public.key')); // public key

$plaintext = 'Hello World!';
$ciphertext = $rsa->encrypt($plaintext);

echo base64_encode($ciphertext);

?>

and in java I have this code:
package com.example.app;

import java.io.DataInputStream;
import java.net.URL;
import java.security.Security;

import javax.crypto.Cipher;
import javax.crypto.spec.SecretKeySpec;

import sun.misc.BASE64Decoder;

public class MainClass {

    /**
     * @param args
     */
    public static void main(String[] args)
    {
        Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());

        try {
            BASE64Decoder decoder   = new BASE64Decoder();
            String b64PrivateKey    = getContents(""http://localhost/api/keypair.php"").trim();
            String b64EncryptedStr  = getContents(""http://localhost/api/encrypt.php"").trim();

            System.out.println(""PrivateKey (b64): "" + b64PrivateKey);
            System.out.println("" Encrypted (b64): "" + b64EncryptedStr);

            SecretKeySpec privateKey    = new SecretKeySpec( decoder.decodeBuffer(b64PrivateKey) , ""AES"");
            Cipher cipher               = Cipher.getInstance(""RSA/None/OAEPWithSHA1AndMGF1Padding"", ""BC"");
            cipher.init(Cipher.DECRYPT_MODE, privateKey);

            byte[] plainText            = decoder.decodeBuffer(b64EncryptedStr);

            System.out.println(""         Message: "" + plainText);
        }
        catch( Exception e )
        {
            System.out.println(""           Error: "" + e.getMessage());
        }

    }

    public static String getContents(String url)
    {
        try {
            String result = """";
            String line;
            URL u = new URL(url);
            DataInputStream theHTML = new DataInputStream(u.openStream());
            while ((line = theHTML.readLine()) != null)
                result = result + ""\n"" + line;

            return result;
        }
        catch(Exception e){}

        return """";
    }
}

My questions are:

Why I'm having a exception saying ""not an RSA key!""?
How can I improve this code? I have used base64 to avoid encoding and comunication errors between Java and PHP.
This concept is correct? I mean, I'm using it correctly?

","I did some digging into the classes you're using and it seems like what you've posted has most of the default parameters matching your explicit parameters. However, this doesn't ensure that your configuration has those all set to match the current documentation if you're using older implementations.
Also, a tip from a senior Facebook security engineer who discussed a similar issue in a lecture recently; different libraries implementing the same security protocols will oftentimes be incompatible and even the same libraries in different environments or languages will oftentimes fail to work together. With that in mind, a few things to try given that working examples similar to your setup exist online:
Make sure you're using the latest versions of libraries. Also note that some javax functions and classes are deprecated and suggest using java.security now (didn't check if this applies to your case).
Force the key size to be consistent (1024 or 2048). The java implementation can do either and I didn't find consistent documentation for both libraries saying what your configuration default would be used (could be causing problem #2, though you might get a different exception for invalid key size).
Ensure that your privatekey matches expectation (length/reads the same between java and php).
Force default values to be explicitly defined (set CryptRSA hash to sha1, key lengths, anything else you can explicitly set).
Try encrypting the same message with both java and php to see if you can get the same outputs. Do this after ensuring your keys read the same and don't throw exceptions while being used in both applications. Encrypting a single character can tell you if the same padding scheme is actually being used (it appears from the source code that both use MGF1, but it never hurts to check outputs).
Finally try taking an example for php to java encryption which is said to already work and do one change at a time until you get back to your current encryption scheme. I saw a few examples googling quickly which used different parameters and settings with CryptRSA and java security that stated they were working together. Take a working example and try swapping the hash function and then the encryption, etc.
","4770","<php><rsa><bouncycastle><public-key-encryption><phpseclib>","9","1","4","2013-04-10 07:04:27","15660170","3","5","1143201","","2013-03-26 17:57:18","2013-03-26 14:21:32",""
"15639442","Encryption PHP, Decryption Java","I have a web-service in php that generates a keypair to encrypt a message, and one application in java that retrives the privatekey and decrypt the message.
For php I'm using http://phpseclib.sourceforge.net/ and have this two files:
keypair.php
<?php

set_time_limit(0);
if( file_exists('private.key') )
{
    echo file_get_contents('private.key');
}
else
{
    include('Crypt/RSA.php');
    $rsa = new Crypt_RSA();
    $rsa->createKey();
    $res = $rsa->createKey();

    $privateKey = $res['privatekey'];
    $publicKey  = $res['publickey'];

    file_put_contents('public.key', $publicKey);
    file_put_contents('private.key', $privateKey);
}

?>

encrypt.php
<?php

include('Crypt/RSA.php');

//header(""Content-type: text/plain"");

set_time_limit(0);
$rsa = new Crypt_RSA();
$rsa->setEncryptionMode(CRYPT_RSA_ENCRYPTION_OAEP);
$rsa->loadKey(file_get_contents('public.key')); // public key

$plaintext = 'Hello World!';
$ciphertext = $rsa->encrypt($plaintext);

echo base64_encode($ciphertext);

?>

and in java I have this code:
package com.example.app;

import java.io.DataInputStream;
import java.net.URL;
import java.security.Security;

import javax.crypto.Cipher;
import javax.crypto.spec.SecretKeySpec;

import sun.misc.BASE64Decoder;

public class MainClass {

    /**
     * @param args
     */
    public static void main(String[] args)
    {
        Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());

        try {
            BASE64Decoder decoder   = new BASE64Decoder();
            String b64PrivateKey    = getContents(""http://localhost/api/keypair.php"").trim();
            String b64EncryptedStr  = getContents(""http://localhost/api/encrypt.php"").trim();

            System.out.println(""PrivateKey (b64): "" + b64PrivateKey);
            System.out.println("" Encrypted (b64): "" + b64EncryptedStr);

            SecretKeySpec privateKey    = new SecretKeySpec( decoder.decodeBuffer(b64PrivateKey) , ""AES"");
            Cipher cipher               = Cipher.getInstance(""RSA/None/OAEPWithSHA1AndMGF1Padding"", ""BC"");
            cipher.init(Cipher.DECRYPT_MODE, privateKey);

            byte[] plainText            = decoder.decodeBuffer(b64EncryptedStr);

            System.out.println(""         Message: "" + plainText);
        }
        catch( Exception e )
        {
            System.out.println(""           Error: "" + e.getMessage());
        }

    }

    public static String getContents(String url)
    {
        try {
            String result = """";
            String line;
            URL u = new URL(url);
            DataInputStream theHTML = new DataInputStream(u.openStream());
            while ((line = theHTML.readLine()) != null)
                result = result + ""\n"" + line;

            return result;
        }
        catch(Exception e){}

        return """";
    }
}

My questions are:

Why I'm having a exception saying ""not an RSA key!""?
How can I improve this code? I have used base64 to avoid encoding and comunication errors between Java and PHP.
This concept is correct? I mean, I'm using it correctly?

","SecretKeySpec privateKey    = new SecretKeySpec( decoder.decodeBuffer(b64PrivateKey) , ""AES"");

b64PrivateKey is supposed to contain the private key right? 'cause looking it up in the docs it looks like SecretKeySpec is only intended for symmetric algorithms (like AES) - not asymmetric ones like RSA.
","4770","<php><rsa><bouncycastle><public-key-encryption><phpseclib>","9","2","4","2013-04-10 07:04:27","15660170","3","5","1143201","","2013-03-26 17:57:18","2013-03-26 14:21:32",""
"15639442","Encryption PHP, Decryption Java","I have a web-service in php that generates a keypair to encrypt a message, and one application in java that retrives the privatekey and decrypt the message.
For php I'm using http://phpseclib.sourceforge.net/ and have this two files:
keypair.php
<?php

set_time_limit(0);
if( file_exists('private.key') )
{
    echo file_get_contents('private.key');
}
else
{
    include('Crypt/RSA.php');
    $rsa = new Crypt_RSA();
    $rsa->createKey();
    $res = $rsa->createKey();

    $privateKey = $res['privatekey'];
    $publicKey  = $res['publickey'];

    file_put_contents('public.key', $publicKey);
    file_put_contents('private.key', $privateKey);
}

?>

encrypt.php
<?php

include('Crypt/RSA.php');

//header(""Content-type: text/plain"");

set_time_limit(0);
$rsa = new Crypt_RSA();
$rsa->setEncryptionMode(CRYPT_RSA_ENCRYPTION_OAEP);
$rsa->loadKey(file_get_contents('public.key')); // public key

$plaintext = 'Hello World!';
$ciphertext = $rsa->encrypt($plaintext);

echo base64_encode($ciphertext);

?>

and in java I have this code:
package com.example.app;

import java.io.DataInputStream;
import java.net.URL;
import java.security.Security;

import javax.crypto.Cipher;
import javax.crypto.spec.SecretKeySpec;

import sun.misc.BASE64Decoder;

public class MainClass {

    /**
     * @param args
     */
    public static void main(String[] args)
    {
        Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());

        try {
            BASE64Decoder decoder   = new BASE64Decoder();
            String b64PrivateKey    = getContents(""http://localhost/api/keypair.php"").trim();
            String b64EncryptedStr  = getContents(""http://localhost/api/encrypt.php"").trim();

            System.out.println(""PrivateKey (b64): "" + b64PrivateKey);
            System.out.println("" Encrypted (b64): "" + b64EncryptedStr);

            SecretKeySpec privateKey    = new SecretKeySpec( decoder.decodeBuffer(b64PrivateKey) , ""AES"");
            Cipher cipher               = Cipher.getInstance(""RSA/None/OAEPWithSHA1AndMGF1Padding"", ""BC"");
            cipher.init(Cipher.DECRYPT_MODE, privateKey);

            byte[] plainText            = decoder.decodeBuffer(b64EncryptedStr);

            System.out.println(""         Message: "" + plainText);
        }
        catch( Exception e )
        {
            System.out.println(""           Error: "" + e.getMessage());
        }

    }

    public static String getContents(String url)
    {
        try {
            String result = """";
            String line;
            URL u = new URL(url);
            DataInputStream theHTML = new DataInputStream(u.openStream());
            while ((line = theHTML.readLine()) != null)
                result = result + ""\n"" + line;

            return result;
        }
        catch(Exception e){}

        return """";
    }
}

My questions are:

Why I'm having a exception saying ""not an RSA key!""?
How can I improve this code? I have used base64 to avoid encoding and comunication errors between Java and PHP.
This concept is correct? I mean, I'm using it correctly?

","With the help of above answer, I got that SecretKeySpec is used wrong, and I found that PEM file from OpenSSL isn't a 'standart format', so I need to use the PEMReader to convert it to PrivateKey class.
Here is my working class:
package com.example.app;

import java.io.BufferedReader;
import java.io.DataInputStream;
import java.io.StringReader;
import java.net.URL;
import java.security.KeyPair;
import java.security.PrivateKey;
import java.security.Security;

import javax.crypto.Cipher;

import org.bouncycastle.openssl.PEMReader;

import sun.misc.BASE64Decoder;

public class MainClass {

    /**
     * @param args
     */
    public static void main(String[] args)
    {
        Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());

        try {
            BASE64Decoder decoder   = new BASE64Decoder();
            String b64PrivateKey    = getContents(""http://localhost/api/keypair.php"").trim();
            String b64EncryptedStr  = getContents(""http://localhost/api/encrypt.php"").trim();

            System.out.println(""PrivateKey (b64): "" + b64PrivateKey);
            System.out.println("" Encrypted (b64): "" + b64EncryptedStr);

            byte[] decodedKey           = decoder.decodeBuffer(b64PrivateKey);
            byte[] decodedStr           = decoder.decodeBuffer(b64EncryptedStr);
            PrivateKey privateKey       = strToPrivateKey(new String(decodedKey));

            Cipher cipher               = Cipher.getInstance(""RSA/None/OAEPWithSHA1AndMGF1Padding"", ""BC"");
            cipher.init(Cipher.DECRYPT_MODE, privateKey);


            byte[] plainText            = cipher.doFinal(decodedStr);

            System.out.println(""         Message: "" + new String(plainText));
        }
        catch( Exception e )
        {
            System.out.println(""           Error: "" + e.getMessage());
        }

    }

    public static String getContents(String url)
    {
        try {
            String result = """";
            String line;
            URL u = new URL(url);
            DataInputStream theHTML = new DataInputStream(u.openStream());
            while ((line = theHTML.readLine()) != null)
                result = result + ""\n"" + line;

            return result;
        }
        catch(Exception e){}

        return """";
    }

    public static PrivateKey strToPrivateKey(String s)
    {
        try {
            BufferedReader br   = new BufferedReader( new StringReader(s) );
            PEMReader pr        = new PEMReader(br);
            KeyPair kp          = (KeyPair)pr.readObject();
            pr.close();
            return kp.getPrivate();
        }
        catch( Exception e )
        {

        }

        return null;
    }
}

Here is my keypair.php
<?php

set_time_limit(0);
if( file_exists('private.key') )
{
    echo base64_encode(file_get_contents('private.key'));
}
else
{
    include('Crypt/RSA.php');

    $rsa = new Crypt_RSA();
    $rsa->setHash('sha1');
    $rsa->setMGFHash('sha1');
    $rsa->setEncryptionMode(CRYPT_RSA_ENCRYPTION_OAEP);
    $rsa->setPrivateKeyFormat(CRYPT_RSA_PRIVATE_FORMAT_PKCS1);
    $rsa->setPublicKeyFormat(CRYPT_RSA_PUBLIC_FORMAT_PKCS1);

    $res = $rsa->createKey(1024);

    $privateKey = $res['privatekey'];
    $publicKey  = $res['publickey'];

    file_put_contents('public.key', $publicKey);
    file_put_contents('private.key', $privateKey);

    echo base64_encode($privateKey);
}

?>

and my encrypt.php
<?php
    include('Crypt/RSA.php');
    set_time_limit(0);

    $rsa = new Crypt_RSA();
    $rsa->setHash('sha1');
    $rsa->setMGFHash('sha1');
    $rsa->setEncryptionMode(CRYPT_RSA_ENCRYPTION_OAEP);

    $rsa->loadKey(file_get_contents('public.key')); // public key

    $plaintext  = 'Hello World!';
    $ciphertext = $rsa->encrypt($plaintext);
    $md5        = md5($ciphertext);
    file_put_contents('md5.txt', $md5);
    file_put_contents('encrypted.txt', base64_encode($ciphertext));

    echo base64_encode($ciphertext);

?>

I hope it helps anyone and thanks.
","4770","<php><rsa><bouncycastle><public-key-encryption><phpseclib>","9","4","4","2013-04-10 07:04:27","15660170","3","5","1143201","","2013-03-26 17:57:18","2013-03-26 14:21:32",""
"37396855","How to encode a text with rsa/ecb/pkcs1 padding mode with a given public key in java?","I want to encode a string with rsa/ecb/pkcs1 padding mode with a given public key (the public key is a string) in java.
I also want to present the results in UTF-8 Format 
how to do it?
","Assuming you're using a valid RSA key, you'll need to:

Convert your public key from a string to an actual public key object
//This code is incorrect. You'll need bouncy castle for PKCS1
KeyFactory keyFactory = KeyFactory.getInstance(""RSA"");
byte[] keyBytes = Base64().getDecoder.decode(publicKey.getBytes()); //assuming base64 encoded key
PKCS1EncodedKeySpec KeySpec = new PKCS1EncodedKeySpec(keyBytes);
RSAPublicKey publicKey = (RSAPublicKey)keyFactory.generatePublic(KeySpec);

Get the bytes of your plain text
Encrypt using your public key
Encode to a readable format. 

Check out this answer for steps 1-3: RSA Encrypt/Decrypt in Java. Remember to use the correct algorithm spec, in your case PKCS1
Chances are your cipher text will not use only UTF-8 characters so you'll probably want to use Base 64 encoded text to display your cipher text. Base 64 is able to display all those wonky characters as ascii values.
Simply use: Base64.getEncoder().encodeToString(cipherTextBytes)
","4740","<java><encryption><rsa><padding><public-key-encryption>","1","-1","2","2016-05-23 22:19:35","37397545","2","4","2102634","","2016-05-23 17:18:09","2016-05-23 17:14:38",""
"37396855","How to encode a text with rsa/ecb/pkcs1 padding mode with a given public key in java?","I want to encode a string with rsa/ecb/pkcs1 padding mode with a given public key (the public key is a string) in java.
I also want to present the results in UTF-8 Format 
how to do it?
","i have done this code: 
        String pub = ""MIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEA4IJZLsjlx+o4RSvafaAcReoNnzrI0UXu7kZyXPe31ql32X9AvhC6QQIUmLkr1Evm0zP/SgVG9YX3DSqBUgPo04iv1I1/wNKwAf1/uH9EiiqdpczefyxxnzJiKUTcx2/4mA4E4QxCIL5JsZb78WoYZrd2kToW/WD01MnSFiCgSyjGdd812GY2EVzfvlv8kYuti3icMUyitEfHhtw8cAWI6/nVrRPNs0e5NsvtZJ0nfrXsfQDR0C7+ivQK+fQabi8oRGsbTZceAvVlqVE669zoIwIFLcB+eYXTxbka4E7veUMpaF9w//HdwVS2y/2jJiI+16qPStQQPIKQ4Cucoif7/UHfIBuVGVJ5MIVyK7NC7TV/lyoXmyo7ZcnVZnI7rZcw5/qZcqaZ0VCrzvHijwTK7100hOOjiarvRa2OJGXHLIeAUlbrHOXEXS6ah2glPhLDEg6Qzp/lKVSISolal7q73qyhF483P9jXn3hefSLA9J1/1LgeajWvuVkxuw+dy2Tlv7oUpNBkX47/TOho5qttr1y9K3hD5Q87RAJPdBtFdDbY8qUPxoiBsTbUWjVoEjJf2YAsLTJIIi2ZISkbD/VdrtZnS73QSJkJReOMNT9XYNGDJvwNIrRcNGFKlJcX6qq+ozGNsDkrt0ObxAD7YCTjAYQVTlbQOaTu5DbGxGDNCoMCAwEAAQ=="";

        KeyFactory keyFactory = KeyFactory.getInstance(""RSA"");
        byte[] keyBytes = Base64.getDecoder().decode(pub.getBytes(""UTF-8""));  
        PKCS1EncodedKeySpec KeySpec = new PKCS1EncodedKeySpec(keyBytes);
        RSAPublicKey publicKey = (RSAPublicKey)keyFactory.generatePublic((java.security.spec.KeySpec) KeySpec);

        Cipher cipher = Cipher.getInstance(""RSA/ECB/PKCS1Padding"");
        cipher.init(Cipher.ENCRYPT_MODE, publicKey);

        byte[] cipherData = cipher.doFinal(text.getBytes(""UTF-8""));


        return cipherData;

But it doesnot work.. 
it is said that Invalid DER: object is not integer
","4740","<java><encryption><rsa><padding><public-key-encryption>","1","0","2","2016-05-23 22:19:35","37397545","2","4","2102634","","2016-05-23 17:18:09","2016-05-23 17:14:38",""
"36869631","DHGEX failing with 2048-bit key under Java 8, but succeeding with 1024-bit key","I'm using JSCH 0.1.53 to connect to a remote SSH server, which uses a 1024-bit RSA key.  We are able to connect successfully to the remote server when we also use a 1024-bit RSA key, but when we generated stronger 2048-bit keys we stopped being able to connect.  We got an error message that reads ""prime size must be multiple of 64, and can only range from 512 to 2048"" and that originates from a call to DHGEX.java (Diffie-Hellman Group EXchange).
We're running Java 1.8, and the error message correctly specifies a max bit size of 2048, so the problem is not the JCE key limitation of 1024 bits in Java 1.6 and 1.7.  And we've confirmed that both our private and our public key are in fact 2048 bits, via openssl rsa -text -noout -in id_rsa and ssh-keygen -lf id_rsa.pub.
Since everything looked fine on our end, I started adding debugging lines to the JSCH code and recompiling the JAR, and I was eventually able to determine that the modulus being passed to us during the key exchange was in fact 2047 bits long.  Now, 2047 bits in length doesn't inherently mean that you didn't generate a 2048-bit key or that it's any less strong than a key that actually contains 2048 bits, it just means that you happened to get two primes that multiplied together to something whose first bit was a 0. So it's expected behavior (some of the time) and the JCE check should probably be (n % 64 == 0 || n % 64 == 63).  But JCE is a stickler on the point, so it rejects this key for not being of a length it considers valid.
Based on that, I thought I'd found the problem: the remote server had generated a 2048-bit key that only contained 2047 bits, so they just needed to generate a new one (and keep doing it till they got one that really was 2048 bits).  But when I asked their administrators about it, they were insistent that they were using a 1024-bit key, and indeed that's what you get in the known_hosts file when you SSH over.  So that doesn't appear to be the cause after all.
So I started logging the contents of the buffer that contained what they sent us and pulling out the p and g values (modulus and group), and I discovered that in just a few short periods of testing over a couple of days, there were 33 different modulus values, and all of them differed by only the last few characters when encoded in either base 64 or base 10.  Modulii values were reused, sometimes only once and sometimes a dozen times, but there were lots of distinct values, so the keys are neither generated for one-time use nor generated once and reused forever.
Is this (having the server send many different keys that are very close numerically, with some reuse but many unique values) expected behavior under any conditions, and especially is this expected behavior when the client uses a 2048-bit key but the server uses a 1024-bit key?  I know nothing about Diffie-Hellman group exchange besides what I've read since I started investigating last week, so maybe this is just how it works, but it seems strange to me.
Also, does the SSH standard specify anything about how keys should be generated in cases like these?  I haven't yet found out what SSH server the far side is using (I suspect OpenSSH, but don't know for sure and don't know what version), but I'm hopeful that there might be some standard that forces the use of keys that are of the same size as was requested (between 1^(n-1) and 1^n - 1), and that the remote server might have an option to force this or that I can submit a bug against them to get them to change the behavior.  I'll probably also submit a bug against the JDK to allow keys of n-1 bits, with 0-padding for the first bit.
Any guidance that anyone can give would be greatly appreciated.
I've also posted this question to the JSCH mailing list: https://sourceforge.net/p/jsch/mailman/message/35042955/
UPDATE:
After further reading, I believe that Diffie-Hellman's forward secrecy characteristic means that different primes (often from a pre-generated set stored somewhere like /etc/ssl/moduli) would be used for each session (source: https://en.wikipedia.org/wiki/Diffie%E2%80%93Hellman_key_exchange#Forward_secrecy) and that the prime used is not actually the RSA key (source: https://stackoverflow.com/a/23346185/1247705), so the fact that many different p values are seen no longer seems like a concern.  I'm still surprised that they're so close in value, but maybe that's expected as well.
The far side is using Solaris SSH 1.1.4 (which as I understand it is based on OpenSSH) as the SSH daemon.  Is it expected that that daemon would pass 2047-bit primes as part of the Diffie-Hellman key exchange, and is there anything that can be done to get it to send 2048-bit primes instead?
","We fixed similar symptoms with:
Security.insertProviderAt(new BouncyCastleProvider(), 1)

we were using Jsch 0.1.54 and saw:

java.security.InvalidAlgorithmParameterException: DH key size must be multiple of 64, and can only range from 512 to 4096 (inclusive). The specific key size 2047 is not supported

possibly related is JDK-8164963: InvalidAlgorithmParameterException prime size issue after JDK upgrade with JSCH libraries
","4723","<java><public-key-encryption><jsch><diffie-hellman>","3","4","2","2017-04-02 03:34:46","","5","1","-1","","2017-05-23 12:32:29","2016-04-26 15:39:31",""
"36869631","DHGEX failing with 2048-bit key under Java 8, but succeeding with 1024-bit key","I'm using JSCH 0.1.53 to connect to a remote SSH server, which uses a 1024-bit RSA key.  We are able to connect successfully to the remote server when we also use a 1024-bit RSA key, but when we generated stronger 2048-bit keys we stopped being able to connect.  We got an error message that reads ""prime size must be multiple of 64, and can only range from 512 to 2048"" and that originates from a call to DHGEX.java (Diffie-Hellman Group EXchange).
We're running Java 1.8, and the error message correctly specifies a max bit size of 2048, so the problem is not the JCE key limitation of 1024 bits in Java 1.6 and 1.7.  And we've confirmed that both our private and our public key are in fact 2048 bits, via openssl rsa -text -noout -in id_rsa and ssh-keygen -lf id_rsa.pub.
Since everything looked fine on our end, I started adding debugging lines to the JSCH code and recompiling the JAR, and I was eventually able to determine that the modulus being passed to us during the key exchange was in fact 2047 bits long.  Now, 2047 bits in length doesn't inherently mean that you didn't generate a 2048-bit key or that it's any less strong than a key that actually contains 2048 bits, it just means that you happened to get two primes that multiplied together to something whose first bit was a 0. So it's expected behavior (some of the time) and the JCE check should probably be (n % 64 == 0 || n % 64 == 63).  But JCE is a stickler on the point, so it rejects this key for not being of a length it considers valid.
Based on that, I thought I'd found the problem: the remote server had generated a 2048-bit key that only contained 2047 bits, so they just needed to generate a new one (and keep doing it till they got one that really was 2048 bits).  But when I asked their administrators about it, they were insistent that they were using a 1024-bit key, and indeed that's what you get in the known_hosts file when you SSH over.  So that doesn't appear to be the cause after all.
So I started logging the contents of the buffer that contained what they sent us and pulling out the p and g values (modulus and group), and I discovered that in just a few short periods of testing over a couple of days, there were 33 different modulus values, and all of them differed by only the last few characters when encoded in either base 64 or base 10.  Modulii values were reused, sometimes only once and sometimes a dozen times, but there were lots of distinct values, so the keys are neither generated for one-time use nor generated once and reused forever.
Is this (having the server send many different keys that are very close numerically, with some reuse but many unique values) expected behavior under any conditions, and especially is this expected behavior when the client uses a 2048-bit key but the server uses a 1024-bit key?  I know nothing about Diffie-Hellman group exchange besides what I've read since I started investigating last week, so maybe this is just how it works, but it seems strange to me.
Also, does the SSH standard specify anything about how keys should be generated in cases like these?  I haven't yet found out what SSH server the far side is using (I suspect OpenSSH, but don't know for sure and don't know what version), but I'm hopeful that there might be some standard that forces the use of keys that are of the same size as was requested (between 1^(n-1) and 1^n - 1), and that the remote server might have an option to force this or that I can submit a bug against them to get them to change the behavior.  I'll probably also submit a bug against the JDK to allow keys of n-1 bits, with 0-padding for the first bit.
Any guidance that anyone can give would be greatly appreciated.
I've also posted this question to the JSCH mailing list: https://sourceforge.net/p/jsch/mailman/message/35042955/
UPDATE:
After further reading, I believe that Diffie-Hellman's forward secrecy characteristic means that different primes (often from a pre-generated set stored somewhere like /etc/ssl/moduli) would be used for each session (source: https://en.wikipedia.org/wiki/Diffie%E2%80%93Hellman_key_exchange#Forward_secrecy) and that the prime used is not actually the RSA key (source: https://stackoverflow.com/a/23346185/1247705), so the fact that many different p values are seen no longer seems like a concern.  I'm still surprised that they're so close in value, but maybe that's expected as well.
The far side is using Solaris SSH 1.1.4 (which as I understand it is based on OpenSSH) as the SSH daemon.  Is it expected that that daemon would pass 2047-bit primes as part of the Diffie-Hellman key exchange, and is there anything that can be done to get it to send 2048-bit primes instead?
","I ended up working around this issue by disabling the key-exchange algorithms that used a variant of Diffie-Hellman Group key exchange.  @Brian Low appears to have worked around it by using BouncyCastle instead of the JDK's built-in security provider.
I consider both of those to be workarounds that don't solve the underlying problem (which appears to be a bug in either the JDK for what key sizes they accept or in OpenSSH for what key sizes they generate), but neither I nor my project cared enough to spend time and money trying to force one or the other to take ownership of the issue.
","4723","<java><public-key-encryption><jsch><diffie-hellman>","3","0","2","2017-04-02 03:34:46","","5","1","-1","","2017-05-23 12:32:29","2016-04-26 15:39:31",""
"20505325","How to Export Private Key For ECDiffieHellmanCng","I am trying to export the keys from a new instance of a ECDiffieHellmanCng object so I can create an instance of it later with the same keys. But I am getting an error when trying to export it.
//Create new ECDiffieHellmanCng which automatically creates new keys
var ecdh = new ECDiffieHellmanCng();
//Export the keys
var privateKey = ecdh.Key.Export(CngKeyBlobFormat.EccPrivateBlob);

I am getting a CryptographicException when I call the Export method with the message ""The requested operation is not supported.""  After putting some breakpoints in the code it looks like it is throwing the exception before even executing the method. Looking at the definition of the Export method it is adorned with a SecuritySafeCriticalAttribute so I am suspicious that this attribute is actually throwing the exception. What is causing this exception? How can I save the keys so I can create an instance of the same ECDiffieHellmanCng object at a later time?
","I believe you are specifying the wrong BLOB format. Try:
var privateKey = ecdh.Key.Export(CngKeyBlobFormat.Pkcs8PrivateBlob);

If that fails, you need to set up a key policy that allows private key export. See this answer: https://stackoverflow.com/a/10274270/2420979 for more details on your problem.
","4683","<c#><security><public-key-encryption><diffie-hellman><cng>","4","1","2","2013-12-13 13:26:41","20505976","0","1","","","","2013-12-10 21:11:36",""
"20505325","How to Export Private Key For ECDiffieHellmanCng","I am trying to export the keys from a new instance of a ECDiffieHellmanCng object so I can create an instance of it later with the same keys. But I am getting an error when trying to export it.
//Create new ECDiffieHellmanCng which automatically creates new keys
var ecdh = new ECDiffieHellmanCng();
//Export the keys
var privateKey = ecdh.Key.Export(CngKeyBlobFormat.EccPrivateBlob);

I am getting a CryptographicException when I call the Export method with the message ""The requested operation is not supported.""  After putting some breakpoints in the code it looks like it is throwing the exception before even executing the method. Looking at the definition of the Export method it is adorned with a SecuritySafeCriticalAttribute so I am suspicious that this attribute is actually throwing the exception. What is causing this exception? How can I save the keys so I can create an instance of the same ECDiffieHellmanCng object at a later time?
","By default, keys aren't exportable - they are securely stored in the KSP. When creating the key, it needs to be marked allowed for export. Example:
var ecdh = new ECDiffieHellmanCng(CngKey.Create(CngAlgorithm.ECDiffieHellmanP256, null, new CngKeyCreationParameters {ExportPolicy = CngExportPolicies.AllowPlaintextExport}));
//Export the keys
var privateKey = ecdh.Key.Export(CngKeyBlobFormat.EccPrivateBlob);

To make this simpler, we can just export it from the CngKey directly and not use the algorithm if all you want to do is create a new key and export the private key.
var cngKey = CngKey.Create(CngAlgorithm.ECDiffieHellmanP256, null, new CngKeyCreationParameters {ExportPolicy = CngExportPolicies.AllowPlaintextExport});
var privateKey = cngKey.Export(CngKeyBlobFormat.EccPrivateBlob);

You can re-create the CngKey from the exported blob by using CngKey.Import(yourBlob, CngKeyBlobFormat.EccPrivateBlob) and passing that to the constructor of ECDiffieHellmanCng.

SecuritySafeCriticalAttribute is part of the .NET Security Transparency model. It is not the source of your errors. 
","4683","<c#><security><public-key-encryption><diffie-hellman><cng>","4","11","2","2013-12-13 13:26:41","20505976","0","1","","","","2013-12-10 21:11:36",""
"14995711","Getting Public Key from the CSR file using Bouncy Castle in java","I have a client generated CSR file, from which I want to extract the Public Key.
They provided KeyStore Explorer software to check it.
However I am unable to extract the public key from it using the tool. How can get the public key from CSR file using Java program using BC?
CSR is generated with RSA 2048, using SHA1 with RSA.
From the tool, I can see the ASN1 data of the Public key but not ASCII format.
Atleast how do I use the ASN1 data to get the public key in ASCII format using BC
SEQUENCE
{
    SEQUENCE
    {
        OBJECT IDENTIFIER=RSA encryption (1.2.840.113549.1.1.1)
        NULL
    }
    BIT STRING= //BITS HERE
}

","It depends on what you mean by ""ASCII format"". But generally you can do something like that:
// Read the CSR
FileReader fileReader = new FileReader(""/path/to/your.csr"");
PemReader pemReader = new PemReader(fileReader);

PKCS10CertificationRequest csr = 
    new PKCS10CertificationRequest(pemReader.readPemObject().getContent());

pemReader.close();
fileReader.close();

// Write the Public Key as a PEM-File
StringWriter output = new StringWriter();
PemWriter pemWriter = new PemWriter(output);

PemObject pkPemObject = new PemObject(""PUBLIC KEY"", 
    csr.getSubjectPublicKeyInfo().getEncoded());

pemWriter.writeObject(pkPemObject);
pemWriter.close();

System.out.println(output.getBuffer());

// Extract the Public Key as ""RSAKeyParameters"" so you can use for
// encryption/signing operations.
RSAKeyParameters pubkey = 
    (RSAKeyParameters)PublicKeyFactory.createKey(csr.getSubjectPublicKeyInfo());

This is what you'll get:

-----BEGIN PUBLIC KEY-----
MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAxlRixVjOXAmUQ2zORREO
VSQDQejyjWzT3bDznPltiPMwM3SOmPmZyrB8jF3iFvzdFge1QG2WdDj7PzmysXNL
/1xRa0efWv8nURx1eV86hvU6ThNqY3WPyYYXSjTcN74uhGSJo7d5zG6JSL4Cj+l4
RO+nh/5Pa8438ufS+9hXndKPFT2aub9roKysxWpsctpNoOIjfyxkLv9Z9sqxuggG
nwYkwYmoDjPAQp2gRpCp7Hw5F6jSkA33NR5S/aPdyvzKZDbuoRdAl2sTubL1TLG3
nC6tetGsmFRRkNiJjPSNtbXXtN6RB2eJL0epyaFFLksFBaL6nvYIgB1uqFroUY15
2QIDAQAB
-----END PUBLIC KEY-----

I have tested this with the latest version of the BC-provider. You need both the ""provider"" and the ""PKIX/PKCS..."" jar  (otherwise you have to deal with deprecated API-calls).
","4679","<java><rsa><bouncycastle><public-key-encryption>","2","2","2","2014-07-07 10:26:10","14997008","0","2","515034","","2014-07-07 10:26:10","2013-02-21 06:11:21",""
"14995711","Getting Public Key from the CSR file using Bouncy Castle in java","I have a client generated CSR file, from which I want to extract the Public Key.
They provided KeyStore Explorer software to check it.
However I am unable to extract the public key from it using the tool. How can get the public key from CSR file using Java program using BC?
CSR is generated with RSA 2048, using SHA1 with RSA.
From the tool, I can see the ASN1 data of the Public key but not ASCII format.
Atleast how do I use the ASN1 data to get the public key in ASCII format using BC
SEQUENCE
{
    SEQUENCE
    {
        OBJECT IDENTIFIER=RSA encryption (1.2.840.113549.1.1.1)
        NULL
    }
    BIT STRING= //BITS HERE
}

","getSubjectPublicKeyInfo() is not availbale PKCS10CertificationRequest class.
","4679","<java><rsa><bouncycastle><public-key-encryption>","2","0","2","2014-07-07 10:26:10","14997008","0","2","515034","","2014-07-07 10:26:10","2013-02-21 06:11:21",""
"27853075","How do I export a public key <SecKey> that was generated using SecKeyGeneratePair to be used on a server?","I generated a keeper using SecKeyGeneratePair. 
        var publicKeyPtr, privateKeyPtr: Unmanaged<SecKey>?

        let publicKeyParameters: [String: AnyObject] = [
            kSecAttrIsPermanent: true,
            kSecAttrApplicationTag: ""com.example.site.public""
        ]
        let privateKeyParameters: [String: AnyObject] = [
            kSecAttrIsPermanent: true,
            kSecAttrApplicationTag: ""com.example.site.private""
        ]
        let parameters: [String: AnyObject] = [
            kSecAttrKeyType: kSecAttrKeyTypeRSA,
            kSecAttrKeySizeInBits: 2048,
            kSecPublicKeyAttrs.takeUnretainedValue() as String: publicKeyParameters,
            kSecPrivateKeyAttrs.takeUnretainedValue() as String: privateKeyParameters
        ]
        let result = SecKeyGeneratePair(parameters, &publicKeyPtr, &privateKeyPtr)
        let publicKey = publicKeyPtr!.takeRetainedValue()
        let privateKey = privateKeyPtr!.takeRetainedValue()
        let blockSize = SecKeyGetBlockSize(publicKey)

If I print out the publicKey I can see the modulus, which I'm pretty sure is what I need:
publicKey: <SecKeyRef algorithm id: 1, key type: RSAPublicKey, version: 3, block size: 2048 bits, exponent: {hex: 10001, decimal: 65537}, modulus: B2A7BD90C909F8084AD5B34040ABDAF7D1A6AFBADB35F3B6AB5CDDAB473449B0F175DEA32A7476F339D98F4AB3716AA2C1476D4009A80574B984DDFA1EF1A2550E48C46791CEFBFC39EF281049AA74E4C734C3B2A7B3F621B8A41F8B6689C4978696690D4EF9FFF0F90DB85C8ECBCF721FB7652AD7B337880A09D97EA736008C3ADBB72223F18C522C0C0889B05122561042D8637D1CBEF8F9F5AE88CDC43E411AA217E2A81C2D812B46D01C3BDC2799DFF3EAD46BB092A566E18EE94F63C4690ECE806B993FDDAC3159BE2098C2428F24969C109E221D8F066BEE3530848DE328D888B4C7E701435EACB116F97BB77B9379EF818B4D280890262EE678B92705, addr: 0x144841a00>

But I cannot figure out how to export the key so I can send it to my server for use there. 
From my understanding. A SecKey is stored in Keychain and is a pointer to it, the block size is the length of the key in the memory. So in theory I can extract it as NSData and then convert it to something my server can read. In theory I think that will work, I've hit a wall trying to do that in practice. All help will be greatly appreciated.
","SecItemCopyMatching is for you:
var dataPtr:Unmanaged<AnyObject>?
let query: [String:AnyObject] = [
    kSecClass: kSecClassKey,
    kSecAttrApplicationTag: ""com.example.site.public"",
    kSecReturnData: kCFBooleanTrue
]
let qResult = SecItemCopyMatching(query, &dataPtr)

// error handling with `qResult` ...

let publicKeyData = dataPtr!.takeRetainedValue() as NSData

// convert to Base64 string
let base64PublicKey = publicKeyData.base64EncodedStringWithOptions(nil)

Swift 4:
var dataPtr:CFTypeRef?
let query: [String: Any] = [
    kSecClass as String: kSecClassKey,
    kSecAttrApplicationTag as String: ""com.example.site.public"",
    kSecReturnData as String: true
]

let qResult = SecItemCopyMatching(query as CFDictionary, &dataPtr)

// error handling with `qResult` ...

let data = dataPtr as! Data
let base64PublicKey = data.base64EncodedString()

Note that the size of the data is 270, not the same as block size of the key. See this question on the crypto.stackexchange.com.
","4647","<swift><ios8><public-key-encryption>","2","6","1","2018-06-28 12:10:32","27935528","0","5","","","","2015-01-09 02:44:29",""
"5950045","PGP encryption from PHP","If I run the command
gpg -e -r john@doe.com my_secret_file.txt

from unix command prompt, it is working fine. But when I try to use the same command using PHP, it's not working :
$gpg = '/usr/bin/gpg';
$recipient = 'john@doe.com';
$secret_file = 'secret_file.txt';

echo shell_exec(""$gpg -e -r $recipient $secret_file"");

Please guide me for a solution.
","I tried your example on my machine and it works like expected. The result is an additional file in the local directory named secret_file.txt.gpg, encrypted for john@doe.com. This confirms that your actual script is fine and there might be other issues present.
You will not see any output from the script itself, the encrypted file is generated in silence. The echo in the last line of your program does nothing, because gpg does not generate any output if there are no problems. You should take a look at the manual of shell_exec.
If the file is not created on your machine, it might be a permission issue. If you do not call the script from the command line but from a web application, the webserver user needs the appropriate permissions on the file system to create a new file.
","4576","<php><pgp><public-key-encryption>","2","2","3","2011-06-26 17:16:42","","7","","366904","","2011-05-10 13:11:01","2011-05-10 12:31:21",""
"5950045","PGP encryption from PHP","If I run the command
gpg -e -r john@doe.com my_secret_file.txt

from unix command prompt, it is working fine. But when I try to use the same command using PHP, it's not working :
$gpg = '/usr/bin/gpg';
$recipient = 'john@doe.com';
$secret_file = 'secret_file.txt';

echo shell_exec(""$gpg -e -r $recipient $secret_file"");

Please guide me for a solution.
","Apart from permission issues as Demento suggests, it is also possible that the user the script runs as is not the same as when you work in the command line, and this user does not have the public key of john@doe.com, so it cannot encrypt the file for him. So... which user runs this script? Assuming it's www-data, if you do 
carlos@server:~$ su - www-data
(insert www-data's password or do sudo su - www-data if sudo it's available)
www-data@server:~$ gpg --list-keys

do you see the key for john@doe.com?
","4576","<php><pgp><public-key-encryption>","2","3","3","2011-06-26 17:16:42","","7","","366904","","2011-05-10 13:11:01","2011-05-10 12:31:21",""
"5950045","PGP encryption from PHP","If I run the command
gpg -e -r john@doe.com my_secret_file.txt

from unix command prompt, it is working fine. But when I try to use the same command using PHP, it's not working :
$gpg = '/usr/bin/gpg';
$recipient = 'john@doe.com';
$secret_file = 'secret_file.txt';

echo shell_exec(""$gpg -e -r $recipient $secret_file"");

Please guide me for a solution.
","You can see the error by using the following command:
$output = exec(""$gpg -e -r $recipient $secret_file 2>&1"", $out); 
echo ""<pre>$output</pre>"";

this will guide you.
possible problem to look at:

the file you are trying to encrypt is not in the right path..
GnuPG is trying to write to the /root/.gnupg directory with ""apache"" as a user. Obvisouly this is not possible unless you change you access rights to this dir (not recommended).
you don't have the right access to the GnuPG root dir (where ever it is)
you don't have WRITE in the dir apache is trying to create the new file..

Let me know what your code outputs and I'll be able to help. I ran into this already, it is tedious.
","4576","<php><pgp><public-key-encryption>","2","0","3","2011-06-26 17:16:42","","7","","366904","","2011-05-10 13:11:01","2011-05-10 12:31:21",""
"10598066","SAML2 assertion encryption using public key (opensaml)","I've recently tried to encrypt Saml2 assertion using relaying-party service public key. Unfortunately I can't finalise even the test phase
here is my code
public class EncryptionTest {

public static void main(String args[]){
    try {

    // The Assertion to be encrypted
        FileInputStream fis;
        DataInputStream in, in2;

        File f = new File(""src/main/resources/AssertionTest"");
        byte[] buffer = new byte[(int) f.length()];
        in = new DataInputStream(new FileInputStream(f));
        in.readFully(buffer);
        in.close();

        //Assertion = DataInputStream.readUTF(in);
        String in_assert = new String(buffer);  

        System.out.println(in_assert);

    org.apache.axiom.om.OMElement OMElementAssertion = org.apache.axiom.om.util.AXIOMUtil.stringToOM(in_assert);
    Assertion assertion = convertOMElementToAssertion2(OMElementAssertion);

    // Assume this contains a recipient's RSA public key
    Credential keyEncryptionCredential;

    keyEncryptionCredential = getCredentialFromFilePath(""src/main/resources/cert.pem"");


    EncryptionParameters encParams = new EncryptionParameters();
    encParams.setAlgorithm(EncryptionConstants.ALGO_ID_BLOCKCIPHER_AES128);

    KeyEncryptionParameters kekParams = new KeyEncryptionParameters();
    kekParams.setEncryptionCredential(keyEncryptionCredential);
    kekParams.setAlgorithm(EncryptionConstants.ALGO_ID_KEYTRANSPORT_RSAOAEP);
    KeyInfoGeneratorFactory kigf =
        Configuration.getGlobalSecurityConfiguration()
        .getKeyInfoGeneratorManager().getDefaultManager()
        .getFactory(keyEncryptionCredential);
    kekParams.setKeyInfoGenerator(kigf.newInstance());

    Encrypter samlEncrypter = new Encrypter(encParams, kekParams);
    samlEncrypter.setKeyPlacement(KeyPlacement.PEER);

    EncryptedAssertion encryptedAssertion = samlEncrypter.encrypt(assertion);

     System.out.println(encryptedAssertion);

    } catch (EncryptionException e) {
        e.printStackTrace();
    } catch (CertificateException e1) {
        // TODO Auto-generated catch block
        e1.printStackTrace();
    } catch (KeyException e1) {
        // TODO Auto-generated catch block
        e1.printStackTrace();
    } catch (IOException e1) {
        // TODO Auto-generated catch block
        e1.printStackTrace();
    } catch (XMLStreamException e2) {
        // TODO Auto-generated catch block
        e2.printStackTrace();
    }


}

  public static Credential getCredentialFromFilePath(String certPath) throws IOException, CertificateException, KeyException {
      InputStream inStream = new FileInputStream(certPath);
      CertificateFactory cf = CertificateFactory.getInstance(""X.509"");
      Certificate cert =  cf.generateCertificate(inStream);
      inStream.close();

      //""Show yourself!""
      System.out.println(cert.toString());

      BasicX509Credential cred = new BasicX509Credential();
      cred.setEntityCertificate((java.security.cert.X509Certificate) cert);
      cred.setPrivateKey(null);

      //System.out.println(cred.toString());

       return cred;

      //return (Credential) org.opensaml.xml.security.SecurityHelper.getSimpleCredential( (X509Certificate) cert, privatekey);
  }

  public static Assertion convertOMElementToAssertion2(OMElement element) {

        Element assertionSAMLDOOM = (Element) new StAXOMBuilder(DOOMAbstractFactory.getOMFactory(), element.getXMLStreamReader()).getDocumentElement();
        try {
          UnmarshallerFactory unmarshallerFactory = Configuration.getUnmarshallerFactory();
          Unmarshaller unmarshaller = unmarshallerFactory.getUnmarshaller(Assertion.DEFAULT_ELEMENT_NAME);

         return (Assertion) unmarshaller.unmarshall(assertionSAMLDOOM);      
        } catch (Exception e1) {
            System.out.println(""error: "" + e1.toString());
        }
        return null;
      }



}

I constantly recive Null pointer exception in
    KeyInfoGeneratorFactory kigf =
        Configuration.getGlobalSecurityConfiguration()
        .getKeyInfoGeneratorManager().getDefaultManager()
        .getFactory(keyEncryptionCredential);
    kekParams.setKeyInfoGenerator(kigf.newInstance());

How can I set GlobalSecurityConfiguration or is there different approach of encrypting Assertion which will work?
","This question was laying open for too long. The problem was initialization of OpenSaml.
Simple 
DefaultBootstrap.bootstrap();

helped and solved problem.
","4537","<encryption><public-key-encryption><assertion><saml-2.0><opensaml>","3","8","1","2012-12-04 12:26:05","11738110","0","","322166","","2012-12-04 12:26:05","2012-05-15 09:41:55",""
"50557120","Decryption failed: No secret key using GPG","Last night I setup Pass Password Manager. I used gpg2, and followed this tutorial. I didn't implement git integration. Everything worked successfully. To view my password I had to enter my master key, exactly like how I want it. This morning I try to use pass. In my terminal I typed in
pass account/adobe/my@email.com

I get the following error: 
gpg: decryption failed: No secret key

It didn't ask me to enter my master key. I tried restarting gpg-agent, I tried editing ~/.gnupg/gpg-agent.conf, but nothing is working.
This is how my ~/.gnupg/gpg-agent.conf looks like:
default-cache-ttl 28800
# 8 hours
pinentry-program /usr/bin/pinentry-curses
allow-loopback-pinentry                    

I should mention that I am using Linux Subsystem on Windows 10.
","I put this in ~/.gnupg/gpg-agent.conf  :
default-cache-ttl 3153600000
pinentry-program /usr/bin/pinentry-curses
allow-loopback-pinentry   

After enter the following  commands:
$ gpgconf --kill gpg-agent
$ gpg-connect-agent /bye

","4510","<linux><unix><encryption><public-key-encryption><gnupg>","-1","-1","1","2018-05-28 00:15:46","50557399","2","","608639","","2018-05-28 00:00:54","2018-05-27 22:34:20",""
"29669858","Generate RSA Public Key from Modulus and Exponent","I'm looking to generate a rsa public key (pem) from both the modulus and exponent in Objective-C. This function can be done in Java by the following;
PublicKey publicKey = KeyFactory.getInstance(""RSA"").generatePublic(new RSAPublicKeySpec(modulus, exponent));

Although I'm having some trouble writing this for the iOS platform. Am aware of OpenSSL, but I couldn't find a successful method and am still unable to generate this key. Also took a look at SCZ-BasicEncodingRules-iOS but this returns a NSData value and I'm stuck trying to figure out how to try convert it to a NSString.
","If you want to create a .PEM format you need to base64 encode the output from the berData method. You also need to add the header and footer lines.
Test data and code, see the end of the answer for bytesFromHexString:
NSString *modulusString =  @""c19bccae1e67743fab1c978f03122fb1a78ef05d565a2964728062ad0365e4751b8253df5fd13ab4ecb95c81ff17b91f969e4fb3d8274c30533338684278f6e5548027df775c055943a24a4117b0274c296c68b722c71670d4b21489a3da05d37ba06f2fb771b671a2c746bae4a049dc718fba19a75f1fb8ae1dd715b33d66a3"";
NSString *exponentString = @""010001"";

NSData *pubKeyModData = bytesFromHexString(modulusString);
NSData *pubKeyExpData = bytesFromHexString(exponentString);
NSArray *keyArray = @[pubKeyModData, pubKeyExpData];

//Given that you are using SCZ-BasicEncodingRules-iOS:
NSData *berData = [keyArray berData];
NSLog(@""berData:\n%@"", berData);

NSString *berBase64 = [berData base64EncodedStringWithOptions:0];
NSString *preamble = @""-----BEGIN CERTIFICATE REQUEST-----"";
NSString *postamble = @""-----END CERTIFICATE REQUEST-----"";
NSString *pem = [NSString stringWithFormat:@""%@\n%@\n%@"", preamble, berBase64, postamble];
NSLog(@""pem:\n%@"", pem);

Output with test data:  

berData:
30818802 8180c19b ccae1e67 743fab1c 978f0312 2fb1a78e f05d565a 29647280 62ad0365 e4751b82 53df5fd1 3ab4ecb9 5c81ff17 b91f969e 4fb3d827 4c305333 38684278 f6e55480 27df775c 055943a2 4a4117b0 274c296c 68b722c7 1670d4b2 1489a3da 05d37ba0 6f2fb771 b671a2c7 46bae4a0 49dc718f ba19a75f 1fb8ae1d d715b33d 66a30203 010001

pem:
-----BEGIN CERTIFICATE REQUEST-----
  MIGIAoGAwZvMrh5ndD+rHJePAxIvsaeO8F1WWilkcoBirQNl5HUbglPfX9E6tOy5XIH/F7kflp5Ps9gnTDBTMzhoQnj25VSAJ993XAVZQ6JKQRewJ0wpbGi3IscWcNSyFImj2gXTe6BvL7dxtnGix0a65KBJ3HGPuhmnXx+4rh3XFbM9ZqMCAwEAAQ==
-----END CERTIFICATE REQUEST-----

Convert hex-ascii to data:
NSData* bytesFromHexString(NSString * aString) {
    NSString *theString = [[aString componentsSeparatedByCharactersInSet:[NSCharacterSet whitespaceAndNewlineCharacterSet]] componentsJoinedByString:nil];

    NSMutableData* data = [NSMutableData data];
    int idx;
    for (idx = 0; idx+2 <= theString.length; idx+=2) {
        NSRange range = NSMakeRange(idx, 2);
        NSString* hexStr = [theString substringWithRange:range];
        NSScanner* scanner = [NSScanner scannerWithString:hexStr];
        unsigned int intValue;
        if ([scanner scanHexInt:&intValue])
            [data appendBytes:&intValue length:1];
    }
    return data;
}

","4439","<ios><objective-c><openssl><rsa><public-key-encryption>","5","9","1","2015-04-17 00:24:17","29679379","3","2","1952032","","2015-04-16 09:04:39","2015-04-16 08:55:44",""
"17315251","How do I Store and read PublicKey from data base? I am using postgresql and java","Hi I need to store and read public keys from a postgresql data base and i am using java.
I have this code to store
 cbd.ejecutarSeguro(""update persona set llave_publica = ? where cedula = 112345678"", x509EncodedKeySpec.getEncoded());


    public void ejecutarSeguro(String query, byte[] pkBytes) {
        try {
            Connection conn = DriverManager.getConnection(nombreConexion);
            PreparedStatement pstat;

            pstat = conn.prepareStatement(query);
            pstat.setBytes(1, pkBytes);
            pstat.execute();
        } catch (SQLException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }

    }

To read i use this 
String filePublicKey_s = cbd.consultarArray(""Select llave_publica from persona where cedula = 112345678"").get(0).get(0);
        byte[] encodedPublicKey = new byte[(int) filePublicKey.length()];
        //encodedPublicKey = (filePublicKey_s).substring(2).getBytes();
        System.out.println(""Public Key; ""+filePublicKey_s);
        System.out.println(""rescato de la base; ""+(filePublicKey_s).getBytes());// LA que rescato de la base
        fis.read(encodedPublicKey);
        System.out.println(""Public Key; ""+encodedPublicKey);
        fis.close();

In example I have the public key in a file in my computer... when I compare the output I see this
Public Key: 308201b83082012c06072a8648ce3804013082011f02818100fd7f53811d75122952df4a9c2eece4e7f611b7523cef4400c31e3f80b6512669455d402251fb593d8d58fabfc5f5ba30f6cb9b556cd7813b801d346ff26660b76b9950a5a49f9fe8047b1022c24fbba9d7feb7c61bf83b57e7c6a8a6150f04fb83f6d3c51ec3023554135a169132f675f3ae2b61d72aeff22203199dd14801c70215009760508f15230bccb292b982a2eb840bf0581cf502818100f7e1a085d69b3ddecbbcab5c36b857b97994afbbfa3aea82f9574c0b3d0782675159578ebad4594fe67107108180b449167123e84c281613b7cf09328cc8a6e13c167a8b547c8d28e0a3ae1e2bb3a675916ea37f0bfa213562f1fb627a01243bcca4f1bea8519089a883dfe15ae59f06928b665e807b552564014c3bfecf492a038185000281810096e492622ca7f93f51b96d44f15e69f6711b1eecc308f4b017a0e12b46a722b1b662a072f0cdf61b6853595f66eed2e697a4ba2af60f4eb78a24a169513acc6238dcbf6dc898a271d7f91b4b6ea4d2a5c504ee6970c7cd565d414d14305c786385558f06e47f3d2744fa0d73acdc3ca75e435a3a70dcebb1f997a02e7e96ab30
Public Key; \x308201b83082012c06072a8648ce3804013082011f02818100fd7f53811d75122952df4a9c2eece4e7f611b7523cef4400c31e3f80b6512669455d402251fb593d8d58fabfc5f5ba30f6cb9b556cd7813b801d346ff26660b76b9950a5a49f9fe8047b1022c24fbba9d7feb7c61bf83b57e7c6a8a6150f04fb83f6d3c51ec3023554135a169132f675f3ae2b61d72aeff22203199dd14801c70215009760508f15230bccb292b982a2eb840bf0581cf502818100f7e1a085d69b3ddecbbcab5c36b857b97994afbbfa3aea82f9574c0b3d0782675159578ebad4594fe67107108180b449167123e84c281613b7cf09328cc8a6e13c167a8b547c8d28e0a3ae1e2bb3a675916ea37f0bfa213562f1fb627a01243bcca4f1bea8519089a883dfe15ae59f06928b665e807b552564014c3bfecf492a038185000281810096e492622ca7f93f51b96d44f15e69f6711b1eecc308f4b017a0e12b46a722b1b662a072f0cdf61b6853595f66eed2e697a4ba2af60f4eb78a24a169513acc6238dcbf6dc898a271d7f91b4b6ea4d2a5c504ee6970c7cd565d414d14305c786385558f06e47f3d2744fa0d73acdc3ca75e435a3a70dcebb1f997a02e7e96ab30
From data base; [B@6a162595
From file; [B@53fd8f9

If I read the PK from the database i read an \x and all the PK change
thanks
","You can store in Blob, you can read the public key file and get java public key object. You can directly store this publickey object in database as blob. First do :
 byte [] bytes = publicKey.getEncoded();

then store bytes in database.
For retrieving public key do as:
public PublicKey blobToPublicKey(final byte[] blob) 
    {
        Object result = null;
        final ByteArrayInputStream bais = new ByteArrayInputStream(blob);
        ObjectInputStream ois;
        try
        {
            ois = new ObjectInputStream(bais);
            result = ois.readObject();
        }
        catch (final IOException e)
        {
           //
        }
        catch (final ClassNotFoundException e)
        {
           //
        }
        return (PublicKey)result;
    }

","4418","<java><database><postgresql><public-key-encryption><public-key>","0","1","2","2013-06-26 09:22:43","","0","","","","","2013-06-26 08:35:16",""
"17315251","How do I Store and read PublicKey from data base? I am using postgresql and java","Hi I need to store and read public keys from a postgresql data base and i am using java.
I have this code to store
 cbd.ejecutarSeguro(""update persona set llave_publica = ? where cedula = 112345678"", x509EncodedKeySpec.getEncoded());


    public void ejecutarSeguro(String query, byte[] pkBytes) {
        try {
            Connection conn = DriverManager.getConnection(nombreConexion);
            PreparedStatement pstat;

            pstat = conn.prepareStatement(query);
            pstat.setBytes(1, pkBytes);
            pstat.execute();
        } catch (SQLException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }

    }

To read i use this 
String filePublicKey_s = cbd.consultarArray(""Select llave_publica from persona where cedula = 112345678"").get(0).get(0);
        byte[] encodedPublicKey = new byte[(int) filePublicKey.length()];
        //encodedPublicKey = (filePublicKey_s).substring(2).getBytes();
        System.out.println(""Public Key; ""+filePublicKey_s);
        System.out.println(""rescato de la base; ""+(filePublicKey_s).getBytes());// LA que rescato de la base
        fis.read(encodedPublicKey);
        System.out.println(""Public Key; ""+encodedPublicKey);
        fis.close();

In example I have the public key in a file in my computer... when I compare the output I see this
Public Key: 308201b83082012c06072a8648ce3804013082011f02818100fd7f53811d75122952df4a9c2eece4e7f611b7523cef4400c31e3f80b6512669455d402251fb593d8d58fabfc5f5ba30f6cb9b556cd7813b801d346ff26660b76b9950a5a49f9fe8047b1022c24fbba9d7feb7c61bf83b57e7c6a8a6150f04fb83f6d3c51ec3023554135a169132f675f3ae2b61d72aeff22203199dd14801c70215009760508f15230bccb292b982a2eb840bf0581cf502818100f7e1a085d69b3ddecbbcab5c36b857b97994afbbfa3aea82f9574c0b3d0782675159578ebad4594fe67107108180b449167123e84c281613b7cf09328cc8a6e13c167a8b547c8d28e0a3ae1e2bb3a675916ea37f0bfa213562f1fb627a01243bcca4f1bea8519089a883dfe15ae59f06928b665e807b552564014c3bfecf492a038185000281810096e492622ca7f93f51b96d44f15e69f6711b1eecc308f4b017a0e12b46a722b1b662a072f0cdf61b6853595f66eed2e697a4ba2af60f4eb78a24a169513acc6238dcbf6dc898a271d7f91b4b6ea4d2a5c504ee6970c7cd565d414d14305c786385558f06e47f3d2744fa0d73acdc3ca75e435a3a70dcebb1f997a02e7e96ab30
Public Key; \x308201b83082012c06072a8648ce3804013082011f02818100fd7f53811d75122952df4a9c2eece4e7f611b7523cef4400c31e3f80b6512669455d402251fb593d8d58fabfc5f5ba30f6cb9b556cd7813b801d346ff26660b76b9950a5a49f9fe8047b1022c24fbba9d7feb7c61bf83b57e7c6a8a6150f04fb83f6d3c51ec3023554135a169132f675f3ae2b61d72aeff22203199dd14801c70215009760508f15230bccb292b982a2eb840bf0581cf502818100f7e1a085d69b3ddecbbcab5c36b857b97994afbbfa3aea82f9574c0b3d0782675159578ebad4594fe67107108180b449167123e84c281613b7cf09328cc8a6e13c167a8b547c8d28e0a3ae1e2bb3a675916ea37f0bfa213562f1fb627a01243bcca4f1bea8519089a883dfe15ae59f06928b665e807b552564014c3bfecf492a038185000281810096e492622ca7f93f51b96d44f15e69f6711b1eecc308f4b017a0e12b46a722b1b662a072f0cdf61b6853595f66eed2e697a4ba2af60f4eb78a24a169513acc6238dcbf6dc898a271d7f91b4b6ea4d2a5c504ee6970c7cd565d414d14305c786385558f06e47f3d2744fa0d73acdc3ca75e435a3a70dcebb1f997a02e7e96ab30
From data base; [B@6a162595
From file; [B@53fd8f9

If I read the PK from the database i read an \x and all the PK change
thanks
","Convert the PublicKey into byte array
    byte[] bytes = publicKey.getEncoded();

write the bytes to a BLOB or BINARY column
...              
PreparedStatement ps = conn.prepareStatement(""update tbl1 set col1=?"");
ps.setBytes(1, bytes);
ps.executeUpdate();

read it back to a  byte array 
...
byte[] bytes = resultSet.getBytes(1);

convert bytes back to PublicKey
KeyFactory keyFactory = KeyFactory.getInstance(alg);
X509EncodedKeySpec publicKeySpec = new X509EncodedKeySpec(bytes);
PublicKey pk = keyFactory.generatePublic(publicKeySpec);

","4418","<java><database><postgresql><public-key-encryption><public-key>","0","4","2","2013-06-26 09:22:43","","0","","","","","2013-06-26 08:35:16",""
"18842403","Get the key parameter is not a valid public key error in openssl_public_encrypt()","$publicKey = ""../ssh/public/pub"";
    $plaintext = ""String to encrypt"";
$pubKey = openssl_pkey_get_public($publicKey);

openssl_public_encrypt($plaintext, $encrypted, $pubKey);

echo $encrypted;   //encrypted string

above code generating following error
openssl_public_encrypt() [http://php.net/function.openssl-public-encrypt]: key parameter is not a valid public key [APP/controllers/supportservice_controller.php, line 144]
I created the keys with openssl using:
generate a 1024 bit rsa private key, ask for a passphrase to encrypt it and save to file
openssl genrsa -des3 -out /path/to/privatekey 1024
generate the public key for the private key and save to file
openssl rsa -in /path/to/privatekey -pubout -out /path/to/publickey
","The public key has to be encapsulated in an X.509 certificate when using OpenSSL's functions in PHP. You can create this with a CSR. Or you can use phpseclib, a pure PHP RSA implementation, and use the raw public key directly. eg.
<?php
include('Crypt/RSA.php');

$rsa = new Crypt_RSA();
$rsa->loadKey('...'); // public key

$plaintext = '...';

//$rsa->setEncryptionMode(CRYPT_RSA_ENCRYPTION_PKCS1);
$ciphertext = $rsa->encrypt($plaintext);

","4408","<php><encryption><openssl><public-key-encryption><php-openssl>","5","0","4","2019-09-02 14:48:55","","0","","569976","","2013-09-18 18:52:47","2013-09-17 06:07:07",""
"18842403","Get the key parameter is not a valid public key error in openssl_public_encrypt()","$publicKey = ""../ssh/public/pub"";
    $plaintext = ""String to encrypt"";
$pubKey = openssl_pkey_get_public($publicKey);

openssl_public_encrypt($plaintext, $encrypted, $pubKey);

echo $encrypted;   //encrypted string

above code generating following error
openssl_public_encrypt() [http://php.net/function.openssl-public-encrypt]: key parameter is not a valid public key [APP/controllers/supportservice_controller.php, line 144]
I created the keys with openssl using:
generate a 1024 bit rsa private key, ask for a passphrase to encrypt it and save to file
openssl genrsa -des3 -out /path/to/privatekey 1024
generate the public key for the private key and save to file
openssl rsa -in /path/to/privatekey -pubout -out /path/to/publickey
","Like this you can add your key and encrypt the text
  $data = json_decode(file_get_contents('php://input'), true);
  $enctext = $data['enctext'];

  $pubkey = '-----BEGIN PUBLIC KEY-----
             PUBLIC  KEY PLACED HERE
             -----END PUBLIC KEY-----';

  openssl_public_encrypt($enctext, $crypted, $pubkey);
  $data['enctext'] =  $enctext;
  $data['Encryption_text'] = base64_encode($crypted);
  echo json_encode($data);
  exit;

Or instead of this you can also call a .cert file of public key
  $fp=fopen(""publickey.crt"",""r""); 
  $pub_key_string=fread($fp,8192); 
  fclose($fp); 
  $key_resource = openssl_get_publickey($pub_key_string); 

  openssl_public_encrypt($enctext, $crypted, $key_resource );
  $data['enctext'] =  $enctext;
  $data['Encryption_text'] = base64_encode($crypted);
  echo json_encode($data);
  exit;

","4408","<php><encryption><openssl><public-key-encryption><php-openssl>","5","0","4","2019-09-02 14:48:55","","0","","569976","","2013-09-18 18:52:47","2013-09-17 06:07:07",""
"18842403","Get the key parameter is not a valid public key error in openssl_public_encrypt()","$publicKey = ""../ssh/public/pub"";
    $plaintext = ""String to encrypt"";
$pubKey = openssl_pkey_get_public($publicKey);

openssl_public_encrypt($plaintext, $encrypted, $pubKey);

echo $encrypted;   //encrypted string

above code generating following error
openssl_public_encrypt() [http://php.net/function.openssl-public-encrypt]: key parameter is not a valid public key [APP/controllers/supportservice_controller.php, line 144]
I created the keys with openssl using:
generate a 1024 bit rsa private key, ask for a passphrase to encrypt it and save to file
openssl genrsa -des3 -out /path/to/privatekey 1024
generate the public key for the private key and save to file
openssl rsa -in /path/to/privatekey -pubout -out /path/to/publickey
","In PHP 7.x and new versions of phpseclib (a pure PHP RSA implementation) and using composer to install phpseclib, you can do this:
    # Install the phpseclib from console
    composer require phpseclib/phpseclib:~2.0

    // In your php script:

    use phpseclib\Crypt\RSA;

    $rsa = new RSA();
    $rsa->loadKey($publicKey); # $publicKey is an string like ""QEFAAOCAQ8AMIIBCgKCAQEAoHcbG.....""
    $plaintext = '...';
    $ciphertext = $rsa->encrypt($plaintext);

    var_dump($ciphertext);

    #to decrypt:
    $rsa->loadKey('...'); // private key
    echo $rsa->decrypt($ciphertext);```




","4408","<php><encryption><openssl><public-key-encryption><php-openssl>","5","1","4","2019-09-02 14:48:55","","0","","569976","","2013-09-18 18:52:47","2013-09-17 06:07:07",""
"18842403","Get the key parameter is not a valid public key error in openssl_public_encrypt()","$publicKey = ""../ssh/public/pub"";
    $plaintext = ""String to encrypt"";
$pubKey = openssl_pkey_get_public($publicKey);

openssl_public_encrypt($plaintext, $encrypted, $pubKey);

echo $encrypted;   //encrypted string

above code generating following error
openssl_public_encrypt() [http://php.net/function.openssl-public-encrypt]: key parameter is not a valid public key [APP/controllers/supportservice_controller.php, line 144]
I created the keys with openssl using:
generate a 1024 bit rsa private key, ask for a passphrase to encrypt it and save to file
openssl genrsa -des3 -out /path/to/privatekey 1024
generate the public key for the private key and save to file
openssl rsa -in /path/to/privatekey -pubout -out /path/to/publickey
","In my case，I Splited the public key into mutiple lines，solved the problem.
PHP Version 7.1.17
    $publicKey = ""-----BEGIN PUBLIC KEY-----\n"" . wordwrap($publicKey, 64, ""\n"", true) . ""\n-----END PUBLIC KEY-----"";

    $str = ""str to be encrypted"";

    $opensslPublicEncrypt = openssl_public_encrypt($str, $encrypted, $publicKey);

","4408","<php><encryption><openssl><public-key-encryption><php-openssl>","5","0","4","2019-09-02 14:48:55","","0","","569976","","2013-09-18 18:52:47","2013-09-17 06:07:07",""
"11009745","PGP library for C","I am developing an client server communication application in C. I want to encrypt the messages between then using some public key encryption. I found PGP (pretty good privacy) is a good policy. So is there any library available for embedding PGP with my application. I need key generation, text message encryption (maximum 1024 byte length text), message decryption.
Thanks in advance
","You should take a look at GPG (GNU alternative to PGP).
There also GnuTLS or well known OpenSSL library.
","4387","<c><public-key-encryption><pgp>","0","7","1","2014-12-05 19:35:56","11009901","2","","1121249","","2012-06-13 07:12:45","2012-06-13 07:03:56","2014-12-06 09:01:34"
"15779392","Encrypted Key Exchange understanding","I am trying to understand the Encrypted Key Exchange mechanism. I got a little confused with this illustration:

 And did not find a lot of useful reference out there. Can anyone please explain the mechanism of EKE and how it works? What are the two sides exchanging and why that is safe to attack such as Man-in-the-middle? that will be greatly helpful. Thank you.
","While trying to find an implementation of EKE or DH-EKE, I anticipate that there are quite limited amount of references out there. The Wikipedia cross-links to each/other and the explanations I bump into are not necessarily that easy to understand. The original patent of EKE expired on 2011, leading to my understanding EAP-EKE being published. 
I found best explanation in ""Applied Cryptography"" by Bruce Schneier (2nd edition), including improvements to the algorithm. As you already have the image of the process, I'll try to layman-answer what happens there. I'm just learning myself, so I might mistake that image of yours, but it seems it's a DH-EKE implementation. I'll stick with EKE-idea on this answer, as that I think I've mostly understand ;-)
The basis is that Alice and Bob share a common secret. I might miss a point how ""weak"" it can be (in your image it's noted as weak), but let's assume it's a valid symmetric cryptography key.
Both parties have same symmetric key S, that's a shared secret

Alice generates public/private key pair unique for the session Pa (private) and P'a (public) Alice encrypts public key using S and sends it to Bob.
Bob (knowing S) decrypts Alices message and recovers Alice's public key P'a. Bob generates random session key K. Bob encrypts K with Alice's public key P'a and sends it to Alice.
Alice decrypts the message and obtains K. Alice generates random string Ra, encrypts it with K and sends to bob
Bob decrypts the message to obtain Ra, generates another random Rb, encrypts both with K and sends the encrypted message to Alice.
Alice decrypts message, verifies her own Ra being valid in the message. She encrypts only Rb with K and sends to Bob.
Bob decrypts Rb and verifies his own Rb being valid.

For Eve to pull off man-in-the-middle, she has only seen keys being encrypted with other keys. Guessworking the password from monitored traffic between Alice and Bob is not possible without cracking the public key algorithm as well. Weak shared secret however does allow Eve to try pretend to be Alice or Bob in the picture, so (my terminology may be flawed here) active attack against a listening server is possible to mount.
There are assumptions in the version that I described, best explained by others (published), Alice is trusted to generate good key pair, Bob is trusted to generate good session key. Also some algorithms suit better (or some quite much worse). There are things listed in the ""Applied Cryptography"", but as my 2nd edition seems to be a bit behind of things like AES, I'm trusting to dig more up-to-date information of good ciphers to choose for the algorithm.
For what it's worth, it seems that I need to implement EKE myself with C# and Java (Azure .NET back-end, Android client). I try to package it in a way that it could be useful for others.
UPDATE:
Very straightforward implementation on C# is available at:
https://github.com/kallex/sharp-eke-example
It's shortcutting few bits as it is now (just SHA256 of plaintext to use initial key), so take with caution. My current usage will machine-generate and distribute secure keys to both parties in separate channel, so I didn't need any more sophisticated implementation for this testbed.
","4352","<encryption><public-key-encryption>","3","4","1","2014-10-27 07:00:06","","0","1","","","","2013-04-03 05:17:04",""
"28050807","iOS Encryption using RSA public key file in DER format","I am trying to use an RSA public key to encrypt data within an iOS app to send to a customer's service over the web. The key was generated using openssl:
openssl genrsa -out private.pem 2048
openssl rsa -in private.pem -pubout -out public.der -outform der

I then try to use the key as follows:
NSString *aPublicKeyPath = [[NSBundle mainBundle] pathForResource:@""public"" ofType:@""der""];
NSFileManager* aFileMgr = [NSFileManager defaultManager];
NSData* myCertData = [aFileMgr contentsAtPath: aPublicKeyPath];
CFDataRef myCertDataRef = (__bridge CFDataRef)myCertData;
SecCertificateRef cert = SecCertificateCreateWithData (kCFAllocatorDefault, myCertDataRef);

The contents of the cert load correctly into myCertData, but SecCertificateCreateWithData returns nil without throwing an exception. There is no result code to check, so I don't know why it isn't working.
FYI - The key appears valid. If I check the key, I get this output:
$ openssl rsa -text -in public.der -inform DER -pubin
Modulus (2048 bit):
00:a7:21:90:62:96:15:38:f8:43:5b:33:9f:00:a0:
12:51:63:0e:5c:72:58:05:6a:99:93:d8:6e:f4:d8:
4a:91:cb:dc:74:de:3c:38:63:06:41:5f:63:1e:e9:
70:81:90:e9:f0:e4:78:0a:00:5c:d3:ee:6a:5a:c1:
d7:9a:62:af:f3:45:91:5a:86:bc:aa:8f:86:f5:4f:
3d:01:4b:64:11:31:6f:c1:ab:07:e5:b8:5b:46:8e:
b5:c0:a1:2c:7b:65:1b:09:a9:12:b4:99:f8:77:46:
fa:62:52:04:32:98:09:1c:69:89:52:8c:30:77:af:
51:f2:30:0d:99:33:d3:2b:39:6c:6b:0e:19:ad:67:
10:69:0f:4e:3c:7a:a4:41:bd:87:4e:1d:65:b7:62:
7e:0d:b5:f7:ab:3d:b8:40:f1:c9:8c:c3:1e:9e:7c:
02:67:3a:21:ca:3a:3c:cd:d8:98:fe:4c:ab:30:d4:
f8:2d:3e:78:c3:f0:39:54:15:8a:b7:16:77:ca:3b:
ab:42:5e:70:3e:48:fd:a3:6c:55:5e:66:4b:33:d6:
c0:9c:db:2d:d2:26:78:b8:ca:69:6c:77:6d:38:ab:
77:a0:68:ad:e5:2d:11:50:57:b6:16:dc:b3:e2:82:
bb:07:88:08:a4:87:4c:c6:37:9e:33:ea:5a:f9:b4:
0c:6f
Exponent: 65537 (0x10001)
writing RSA key
-----BEGIN PUBLIC KEY-----
MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEApyGQYpYVOPhDWzOfAKAS
UWMOXHJYBWqZk9hu9NhKkcvcdN48OGMGQV9jHulwgZDp8OR4CgBc0+5qWsHXmmKv
80WRWoa8qo+G9U89AUtkETFvwasH5bhbRo61wKEse2UbCakStJn4d0b6YlIEMpgJ
HGmJUowwd69R8jANmTPTKzlsaw4ZrWcQaQ9OPHqkQb2HTh1lt2J+DbX3qz24QPHJ
jMMennwCZzohyjo8zdiY/kyrMNT4LT54w/A5VBWKtxZ3yjurQl5wPkj9o2xVXmZL
M9bAnNst0iZ4uMppbHdtOKt3oGit5S0RUFe2Ftyz4oK7B4gIpIdMxjeeM+pa+bQM
bwIDAQAB
-----END PUBLIC KEY-----

Any suggestions?
UPDATE:
iOS does not appear to support directly reading a public key as generated above without some serious hacking, see this blog post where public header is manually stripped from key to get it to load. I was able to make this work, but I feel it is not a good approach for me to put into my app.
Finally got a solution I am happy with. As stated in the documentation, the certificate must be in DER format, so I regenerated it using this command and it worked:
$ openssl req -x509 -out public_key.crt -outform DER -new -newkey rsa:4096 -keyout private_key.pem

Then I use the key as follows:
NSString *aPublicKeyPath = [[NSBundle mainBundle] pathForResource:@""public"" ofType:@""der""];
NSFileManager* aFileMgr = [NSFileManager defaultManager];
NSData* aCertData = [aFileMgr contentsAtPath: aPublicKeyPath];
SecCertificateRef aCertRef = SecCertificateCreateWithData(kCFAllocatorDefault, (__bridge CFDataRef)aCertData);

if (aCertRef != NULL) {
    SecKeyRef aPublicKeyRef = NULL;
    SecTrustRef aTrustRef = NULL;
    SecPolicyRef aPolicyRef = SecPolicyCreateBasicX509();

    if (aPolicyRef) {
        if (SecTrustCreateWithCertificates((CFTypeRef)aCertRef, aPolicyRef, &aTrustRef) == noErr) {
            SecTrustResultType result;
            if (SecTrustEvaluate(aTrustRef, &result) == noErr) {
                aPublicKeyRef = SecTrustCopyPublicKey(aTrustRef);
            }
        }
    }

    if (aPolicyRef) CFRelease(aPolicyRef);
    if (aTrustRef) CFRelease(aTrustRef);
    if (aCertRef) CFRelease(aCertRef);
    NSString* aClearTextString = @""This is the test string"";
    NSString* aEncryptedString = [[self class] encryptRSA:aClearTextString
                                                      key:aPublicKeyRef];
}

The encryption routine is:
+(NSString *)encryptRSA:(NSString *)plainTextString key:(SecKeyRef)publicKey         
{
    size_t cipherBufferSize = SecKeyGetBlockSize(publicKey);
    uint8_t *cipherBuffer = malloc(cipherBufferSize);
    uint8_t *nonce = (uint8_t *)[plainTextString UTF8String];
    SecKeyEncrypt(publicKey,
              kSecPaddingOAEP,
              nonce,
              strlen( (char*)nonce ),
              &cipherBuffer[0],
              &cipherBufferSize);
    NSData *encryptedData = [NSData dataWithBytes:cipherBuffer length:cipherBufferSize];
    return [encryptedData base64EncodedStringWithOptions:0];
}

","See documentation at https://developer.apple.com/library/ios/documentation/Security/Reference/certifkeytrustservices/#//apple_ref/c/func/SecCertificateCreateWithData
You are trying to load public key. This API expects public key certificate, not public key.
It says 

Returns NULL if the data passed in the data parameter is not a valid
  DER-encoded X.509 certificate.

So, make public key of it or use other API to load public key.
","4302","<ios><objective-c><encryption><public-key-encryption>","3","0","1","2015-01-22 16:54:53","28059447","0","2","1256015","","2015-01-22 16:54:53","2015-01-20 16:48:24",""
"8209787","phpseclib Crypt_RSA: Why is public key used for decryption?","I was looking at the phpseclib manual for RSA encryption and noticed that the public key is used to decrypt the data and private key to encrypt.
From what I have read and understand is the public key ment to encrypt and private key to decrypt hence why it is private, or am I missing something?
Example
<?php
include('Crypt/RSA.php');

$rsa = new Crypt_RSA();
//extract($rsa->createKey());

$plaintext = 'Hello World!';
$privatekey = '-----BEGIN RSA PRIVATE KEY-----
MIICXQIBAAKBgQCjfQKsF6ExR/zLUKa2qiIr8jwh9s36z5dXIg+S+iZygO3p8ZNHzJlKj9JhHOnp
8FxObW93JwKeoyd17J6Dep1t2vm9SJt+jAm3psNpM2a1fZVJSMhKJSj/S9cNL8AwL8CuAyioKs4R
XFFuq2ASm0gXd1Y6bKHSzeZ49N8onIwueQIDAQABAoGAAvSZ1YQY1yP6wy8qUF+LfhljMmb8isXx
cbMNLoZEpynDA0lpdPETLVijwDsuVFsSxB0w2GnVX4pKBpT4OZ7AFUqphgv1CpeVGXP+6YISZApb
D3yliPL4fwWYi/ttC2ceMylKhohm+Ol6kxYeUitoiOuft2FzE70SCOxZOU23QsECQQDX9PIru6hr
8p4WBq6D829BB4WHnP7K/pj6gCi/iUXNS8cEHml/mJtgOxbSX8aWFDfJFlCmMcp3/zzw35zM/BJh
AkEAwc18aPgie472UunjlPLKelSlS/D8e2ZPLWbB3xyJcBn7CiCzeavpmQSOeVofrKyJfBb3FQut
VZL3AOMnIX9DGQJBALfsnfQxNxf44jrQJgGraq1vwoHla/tnKtLuI8Y9G33lc/JGFIPfbTVgHee+
OlvHjFtu7fEdptrcPwLG77yFUwECQQCq3HIpzVIBYwoSEXh+kgsnDMdqi3zdglad7XFRNcSJ263y
wN/ajlD1ggnmPSmdv8O6bjjKCjB4OIih9KJEKwHJAkBJAFKDTpAWMXBmSWl95Ibkr+2aU6VUQcVS
jhQbDsAWLNOkIrZsS33SS5kEc3LSl6oLH/Lh3759YLkOONHqFFN4
-----END RSA PRIVATE KEY-----';

$publickey = '-----BEGIN PUBLIC KEY-----
MIGJAoGBAKN9AqwXoTFH/MtQpraqIivyPCH2zfrPl1ciD5L6JnKA7enxk0fMmUqP0mEc6enwXE5t
b3cnAp6jJ3XsnoN6nW3a+b1Im36MCbemw2kzZrV9lUlIyEolKP9L1w0vwDAvwK4DKKgqzhFcUW6r
YBKbSBd3VjpsodLN5nj03yicjC55AgMBAAE=
-----END PUBLIC KEY-----';

$rsa->loadKey($privatekey);
$encrypt_text = $rsa->encrypt($plaintext);

$rsa->loadKey($publickey);
$decrypt_text = $rsa->decrypt($encrypt_text);

echo 'INPUT: '.$plaintext.'<br />';
echo 'ENCRYPTED: '.$encrypt_text.'<br />';
echo 'DECRYPTED: '.$decrypt_text.'<br /><br />';
echo 'PRIVATE KEY: '.$privatekey.'<br /><br />';
echo 'PUBLIC KEY: '.$publickey.'<br />';
?>

Thanks
","If you encrypt with the private key anyone can decrypt it but only with your public key, thus verifying that it came from you.  Of course, if you were doing that you'd probably be better off just signing your message.  The PKCS#1 standards does not define signing and encrypting identically and, indeed, the security proof for a signed message is stronger than the security proof for an encrypted message.
W.r.t. the phpseclib documentation...  it was probably just an oversight or a snafu on the developers part.  Maybe they realized the mistake but didn't want to fix it immediately as it wasn't a code issue and now just keep on forgetting about it?  I dunno...  I know I can do that.  I take more pride in my own code than I do in the documentation.
","4210","<php><rsa><public-key-encryption><phpseclib>","0","1","1","2013-01-12 16:51:07","8244134","1","","","user1469439","2013-01-12 16:51:07","2011-11-21 09:38:30",""
"20448764","difference between master key and session key in TLS","In TLS hanshake messages , the Client sends pre-master key to the Server.
Both sides generate a master key and use that to derive the session keys for TLS.
My question is why don't they just the master key as the symmetric key for encrypting the communication ? Why do they need to derive master key from it ?
Thanks,
","1) The master secret has a fixed size (48 bytes), which is often smaller than the amount of keying material needed for symmetric keys.  For example, the cipher suite TLS_RSA_WITH_AES_256_CBC_SHA requires two symmetric keys of length 32 bytes each, two initialization vectors of length 16 bytes each, and two MAC secrets of length 20 bytes each, for a total of 136 bytes.
2) The TLS protocol allows multiple connections within its sessions.  So, even if the master secret is long enough to provide all keying material for a single connection there would not be enough for all possible connections.  
3) The TLS process of generating symmetric keys from the master secret uses one-way hashes to protect the master secret from an attacker who knows some symmetric keys.  If the master secret and symmetric keys were the same (or easily computable from each other), this security guarantee would not be possible.
","4207","<ssl><public-key-encryption>","2","4","1","2014-02-21 17:50:10","","1","","","","","2013-12-08 01:20:49",""
"15556375","Verify digital signature with public key in iOS","How to Verify digital signature with public key in iOS without using any third party code(e.g.) open SSL?
I need to verify Digital signature in iOS App with a public key. Can some one help me how to achieve that without using third party software.
I am trying below code but the problem is I don't have certificate in my App so can not create SecTrustRef.
CODE:
    NSString *certPath              = [[NSBundle mainBundle] pathForResource:@""yyy"" 
                                                             ofType:@""xxx""];
    SecCertificateRef myCertificate = nil;
    NSData *certificateData         = [[NSData alloc] initWithContentsOfFile :certPath];
    myCertificate                   = SecCertificateCreateWithData(kCFAllocatorDefault, (__bridge CFDataRef)certificateData);

    SecPolicyRef myPolicy           = SecPolicyCreateBasicX509();
    SecTrustRef trustRef;
    SecTrustCreateWithCertificates(myCertificate, myPolicy, &trustRef);
    SecKeyRef keyRef      = SecTrustCopyPublicKey (trustRef);


    BOOL status = SecKeyRawVerify (keyRef,
                              kSecPaddingPKCS1SHA1,
                              (const uint8_t *)[data bytes],
                              (size_t)[data length],
                              (const uint8_t *)[signature bytes],
                              (size_t)[signature length]
                              );

I have the following:

Public Key (NSString*)
Signature (NSString*)
Data (NSString*)

Please help me what all option I have in iOS SDK if I don't want to use ant third party open source.
","If your key data is packaged as PKCS12 data, use SecPKCS12Import to import it and use the public key.
","4161","<ios><objective-c><security><openssl><public-key-encryption>","5","0","4","2019-07-04 10:09:49","","2","4","","","","2013-03-21 19:26:59",""
"15556375","Verify digital signature with public key in iOS","How to Verify digital signature with public key in iOS without using any third party code(e.g.) open SSL?
I need to verify Digital signature in iOS App with a public key. Can some one help me how to achieve that without using third party software.
I am trying below code but the problem is I don't have certificate in my App so can not create SecTrustRef.
CODE:
    NSString *certPath              = [[NSBundle mainBundle] pathForResource:@""yyy"" 
                                                             ofType:@""xxx""];
    SecCertificateRef myCertificate = nil;
    NSData *certificateData         = [[NSData alloc] initWithContentsOfFile :certPath];
    myCertificate                   = SecCertificateCreateWithData(kCFAllocatorDefault, (__bridge CFDataRef)certificateData);

    SecPolicyRef myPolicy           = SecPolicyCreateBasicX509();
    SecTrustRef trustRef;
    SecTrustCreateWithCertificates(myCertificate, myPolicy, &trustRef);
    SecKeyRef keyRef      = SecTrustCopyPublicKey (trustRef);


    BOOL status = SecKeyRawVerify (keyRef,
                              kSecPaddingPKCS1SHA1,
                              (const uint8_t *)[data bytes],
                              (size_t)[data length],
                              (const uint8_t *)[signature bytes],
                              (size_t)[signature length]
                              );

I have the following:

Public Key (NSString*)
Signature (NSString*)
Data (NSString*)

Please help me what all option I have in iOS SDK if I don't want to use ant third party open source.
","You can package your public key in a X509 certificate to use the iOS built in functions easily, using openSSL:
openssl req -x509 -out public_key.pem -outform pem -new -newkey rsa:2048 -keyout private_key.pem 

the PEM format is base64 encoded, you can switch the -outform to DER to get binary file.
you can import the PEM format by adding a const NSString to your program and adding category to NSData with this function:
- (id) initWithBase64EncodedString:(NSString *) string {
    NSMutableData *mutableData = nil;

    if( string ) {
        unsigned long ixtext = 0;
        unsigned long lentext = 0;
        unsigned char ch = 0;
        unsigned char inbuf[4], outbuf[3]; // buffer sizes fixed by AOL LLC
        short i = 0, ixinbuf = 0;
        BOOL flignore = NO;
        BOOL flendtext = NO;
        NSData *base64Data = nil;
        const unsigned char *base64Bytes = nil;

        // Convert the string to ASCII data.
        base64Data = [string dataUsingEncoding:NSASCIIStringEncoding];
        base64Bytes = [base64Data bytes];
        mutableData = [NSMutableData dataWithCapacity:[base64Data length]];
        lentext = [base64Data length];

        while( YES ) {
            if( ixtext >= lentext ) break;
            ch = base64Bytes[ixtext++];
            flignore = NO;

            if( ( ch >= 'A' ) && ( ch <= 'Z' ) ) ch = ch - 'A';
            else if( ( ch >= 'a' ) && ( ch <= 'z' ) ) ch = ch - 'a' + 26;
            else if( ( ch >= '0' ) && ( ch <= '9' ) ) ch = ch - '0' + 52;
            else if( ch == '+' ) ch = 62;
            else if( ch == '=' ) flendtext = YES;
            else if( ch == '/' ) ch = 63;
            else flignore = YES;

            if( ! flignore ) {
                short ctcharsinbuf = 3;
                BOOL flbreak = NO;

                if( flendtext ) {
                    if( ! ixinbuf ) break;
                    if( ( ixinbuf == 1 ) || ( ixinbuf == 2 ) ) ctcharsinbuf = 1;
                    else ctcharsinbuf = 2;
                    ixinbuf = 3;
                    flbreak = YES;
                }

                inbuf [ixinbuf++] = ch;

                if( ixinbuf == 4 ) {
                    ixinbuf = 0;
                    outbuf [0] = ( inbuf[0] << 2 ) | ( ( inbuf[1] & 0x30) >> 4 );
                    outbuf [1] = ( ( inbuf[1] & 0x0F ) << 4 ) | ( ( inbuf[2] & 0x3C ) >> 2 );
                    outbuf [2] = ( ( inbuf[2] & 0x03 ) << 6 ) | ( inbuf[3] & 0x3F );

                    for( i = 0; i < ctcharsinbuf; i++ )
                        [mutableData appendBytes:&outbuf[i] length:1];
                }

                if( flbreak )  break;
            }
        }
    }

    self = [self initWithData:mutableData];
    return self;
}

ofcourse you pull this file into the certificateData 
if you want to use your existing public key just pull it out and write it in a X509 cert format using openSSL
$ openssl rsa -in id_rsa -out pub.der -outform DER -pubout

good luck
","4161","<ios><objective-c><security><openssl><public-key-encryption>","5","1","4","2019-07-04 10:09:49","","2","4","","","","2013-03-21 19:26:59",""
"15556375","Verify digital signature with public key in iOS","How to Verify digital signature with public key in iOS without using any third party code(e.g.) open SSL?
I need to verify Digital signature in iOS App with a public key. Can some one help me how to achieve that without using third party software.
I am trying below code but the problem is I don't have certificate in my App so can not create SecTrustRef.
CODE:
    NSString *certPath              = [[NSBundle mainBundle] pathForResource:@""yyy"" 
                                                             ofType:@""xxx""];
    SecCertificateRef myCertificate = nil;
    NSData *certificateData         = [[NSData alloc] initWithContentsOfFile :certPath];
    myCertificate                   = SecCertificateCreateWithData(kCFAllocatorDefault, (__bridge CFDataRef)certificateData);

    SecPolicyRef myPolicy           = SecPolicyCreateBasicX509();
    SecTrustRef trustRef;
    SecTrustCreateWithCertificates(myCertificate, myPolicy, &trustRef);
    SecKeyRef keyRef      = SecTrustCopyPublicKey (trustRef);


    BOOL status = SecKeyRawVerify (keyRef,
                              kSecPaddingPKCS1SHA1,
                              (const uint8_t *)[data bytes],
                              (size_t)[data length],
                              (const uint8_t *)[signature bytes],
                              (size_t)[signature length]
                              );

I have the following:

Public Key (NSString*)
Signature (NSString*)
Data (NSString*)

Please help me what all option I have in iOS SDK if I don't want to use ant third party open source.
","You need to pass a digest (hash) of your data to the verification function. See iOS: Verifying a File With a Certificate and Signature - Public Key is Wrong, Verification Fails
","4161","<ios><objective-c><security><openssl><public-key-encryption>","5","0","4","2019-07-04 10:09:49","","2","4","","","","2013-03-21 19:26:59",""
"15556375","Verify digital signature with public key in iOS","How to Verify digital signature with public key in iOS without using any third party code(e.g.) open SSL?
I need to verify Digital signature in iOS App with a public key. Can some one help me how to achieve that without using third party software.
I am trying below code but the problem is I don't have certificate in my App so can not create SecTrustRef.
CODE:
    NSString *certPath              = [[NSBundle mainBundle] pathForResource:@""yyy"" 
                                                             ofType:@""xxx""];
    SecCertificateRef myCertificate = nil;
    NSData *certificateData         = [[NSData alloc] initWithContentsOfFile :certPath];
    myCertificate                   = SecCertificateCreateWithData(kCFAllocatorDefault, (__bridge CFDataRef)certificateData);

    SecPolicyRef myPolicy           = SecPolicyCreateBasicX509();
    SecTrustRef trustRef;
    SecTrustCreateWithCertificates(myCertificate, myPolicy, &trustRef);
    SecKeyRef keyRef      = SecTrustCopyPublicKey (trustRef);


    BOOL status = SecKeyRawVerify (keyRef,
                              kSecPaddingPKCS1SHA1,
                              (const uint8_t *)[data bytes],
                              (size_t)[data length],
                              (const uint8_t *)[signature bytes],
                              (size_t)[signature length]
                              );

I have the following:

Public Key (NSString*)
Signature (NSString*)
Data (NSString*)

Please help me what all option I have in iOS SDK if I don't want to use ant third party open source.
","@interface HDSecurityPolicy :AFSecurityPolicy
@end

@implementation HDSecurityPolicy
///pem formate(base64) ->  NSData
- (void)setPinnedCertificates:(NSSet *)pinnedCertificates {
    [super setPinnedCertificates:pinnedCertificates];
    if (self.pinnedCertificates) {
        NSMutableSet *mutablePinnedPublicKeys = [NSMutableSet setWithCapacity:[self.pinnedCertificates count]];
        for (NSData *pubCertificate in self.pinnedCertificates) {
            id publicKey = [HDSecurityPolicy publicSecKeyFromKeyBits:pubCertificate];
            if (!publicKey) {
                continue;
            }
            [mutablePinnedPublicKeys addObject:publicKey];
        }
        [self setValue:mutablePinnedPublicKeys forKey:@""pinnedPublicKeys""];
    }
}

// 从公钥证书文件中获取到公钥的SecKeyRef指针
+ (id)publicSecKeyFromKeyBits:(NSData *)givenData {
    NSMutableDictionary *options = [NSMutableDictionary dictionary];
    options[(__bridge id)kSecAttrKeyType] = (__bridge id) kSecAttrKeyTypeRSA;
    options[(__bridge id)kSecAttrKeyClass] = (__bridge id) kSecAttrKeyClassPublic;

    NSError *error = nil;
    CFErrorRef ee = (__bridge CFErrorRef)error;
    ////'SecKeyCreateWithData' is only available on iOS 10.0 or newer
    id ret = (__bridge_transfer id)SecKeyCreateWithData((__bridge CFDataRef)givenData, (__bridge CFDictionaryRef)options, &ee);
    if (error) {
        return nil;
    }
    return ret;
}
@end

","4161","<ios><objective-c><security><openssl><public-key-encryption>","5","0","4","2019-07-04 10:09:49","","2","4","","","","2013-03-21 19:26:59",""
"11279595","RSA Public exponent defaults to 65537. What should this value be?  What are the impacts of my choices?","I'm creating unit tests for software that may encounter different exponent sizes. (see section 3.3.1 of this RFC)
How can I use Bouncy Castle, or any other C# library to generate a RSA key pair that doesn't have a key size of 65537.
If the answer is that I can directly modify this, as long as I update the private key as well, what specific changes (or re-computation) should I make for the public and private key?
Here is the sample code that I'm using to create the key with the exponent of 65537:
        // Create key
        RsaKeyPairGenerator generator = new RsaKeyPairGenerator();
        var param = new KeyGenerationParameters(new SecureRandom(), 1024);
        generator.Init(param);
         AsymmetricCipherKeyPair keyPair= generator.GenerateKeyPair();

        // Save to export format
        SubjectPublicKeyInfo info = SubjectPublicKeyInfoFactory.CreateSubjectPublicKeyInfo(keyPair.Public);
        byte[] ret =  info.GetEncoded();
        string ovalue1 = Convert.ToBase64String(ret);

        // Read from export format
        byte[] publicKeyBytes = Convert.FromBase64String(ovalue1);
        AsymmetricKeyParameter asymmetricKeyParameter = PublicKeyFactory.CreateKey(publicKeyBytes);

        RsaKeyParameters rsaKeyParameters = (RsaKeyParameters)asymmetricKeyParameter;
        RSAParameters rsaParameters = new RSAParameters();
        rsaParameters.Modulus = rsaKeyParameters.Modulus.ToByteArray();
        rsaParameters.Exponent = rsaKeyParameters.Exponent.ToByteArray();
        RSACryptoServiceProvider rsa = new RSACryptoServiceProvider();
        rsa.ImportParameters(rsaParameters);

","Thanks to @BrettHale I was able to solve the issue. 
This is how to create a key pair in Bouncy Castle
      // Create key
        RsaKeyPairGenerator generator = new RsaKeyPairGenerator();

        /*
         * This value should be a Fermat number. 0x10001 (F4) is current recommended value. 3 (F1) is known to be safe also.
         * 3, 5, 17, 257, 65537, 4294967297, 18446744073709551617,
         * 
         * Practically speaking, Windows does not tolerate public exponents which do not fit in a 32-bit unsigned integer. Using e=3 or e=65537 works ""everywhere"". 
         */
        BigInteger exponentBigInt = new BigInteger(exponent.ToString());

        var param = new RsaKeyGenerationParameters(
            exponentBigInt, // new BigInteger(""10001"", 16)  publicExponent
            new SecureRandom(),  // SecureRandom.getInstance(""SHA1PRNG""),//prng
            keyStrength, //strength
            certaninty);//certainty
        generator.Init(param);

Additional links that relate to his recommendation to use RSAKeyGenerationParameters include:

Why is exponent value 65537 used, what are the alternatives and impacts?
What is certainty, and what is the correct value for this (hint: it depends on key length)

","4156","<c#><math><rsa><bouncycastle><public-key-encryption>","3","1","1","2012-07-03 01:45:45","","2","1","-1","","2017-04-13 12:48:18","2012-07-01 04:29:55",""
"10485145","Authentication with public keys and cx_Oracle using Python","I've Googled a bit but I haven't found any substantial results. Is it possible to use key-based authentication to connect to an Oracle server using Python? My objective is to be able to automate some reporting I'm doing with Python without having to store a username/password anywhere in the server.
","One possible solution is to implement Oracle Wallet. Creating an Oracle Wallet entry involves having:

a tnsname resolution name established for the said instance
a username and password

Example: The Oracle sid I'm working with is named ORCL, the user I have to connect with is named my_user. In your tnsnames.ora file you already have an entry that resolves the ORCL service name/sid, create one more with exactly the same parameters:
#initial local name entry:
ORCL = (DESCRIPTION = (ADDRESS_LIST = (ADDRESS = (PROTOCOL = TCP)(HOST = my_ip)(PORT = 1528))) (CONNECT_DATA = (SERVER = DEDICATED) (SERVICE_NAME = ORCL)))

#create an additional local name entry:
ORCL_MY_USER = (DESCRIPTION = (ADDRESS_LIST = (ADDRESS = (PROTOCOL = TCP)(HOST = my_ip)(PORT = 1528))) (CONNECT_DATA = (SERVER = DEDICATED) (SERVICE_NAME = ORCL)))

After the new entry resolves successfully, create the oracle wallet entry for the ORCL_MY_USER local name. This new local name you're going to use in your python script to connect without providing or hard coding a password in it.
Example:

import cx_Oracle
db = cx_Oracle.connect(""/@ORCL_MY_USER"")
cursor = db.cursor()
r = cursor.execute(""SELECT username, password,
  account_status, default_tablespace, temporary_tablespace from
  dba_users order by username"")
for username, password, account_status, default_tablespace,
  temporary_tablespace in cursor:
    print username, '\t', password, '\t', account_status, '\t', default_tablespace, '\t', temporary_tablespace


","4130","<python><oracle><authentication><public-key-encryption><cx-oracle>","5","6","2","2012-06-01 15:25:44","10838663","1","2","","","","2012-05-07 15:53:39",""
"10485145","Authentication with public keys and cx_Oracle using Python","I've Googled a bit but I haven't found any substantial results. Is it possible to use key-based authentication to connect to an Oracle server using Python? My objective is to be able to automate some reporting I'm doing with Python without having to store a username/password anywhere in the server.
","Yes, you do have to specify Oracle wallet's location in sqlnet.ora.
WALLET_LOCATION = (SOURCE = (METHOD = FILE) (METHOD_DATA = (DIRECTORY = /u01/app/oracle/product/11.2.0.2/dbhome_1/owm/wallets/oracle)))
SQLNET.WALLET_OVERRIDE = TRUE
SSL_CLIENT_AUTHENTICATION = FALSE
SSL_VERSION = 0

From my understanding, the Oracle wallet default location is under $ORACLE_HOME/owm/wallets/.
","4130","<python><oracle><authentication><public-key-encryption><cx-oracle>","5","2","2","2012-06-01 15:25:44","10838663","1","2","","","","2012-05-07 15:53:39",""
"36363325","SSH IdentitiesOnly=yes forwarding all my keys","I cannot for the life of me figure out why my SSH config is forwarding the wrong key. I have two keys, we'll call them home_rsa and work_rsa. I have done the following:
eval `ssh-agent`
ssh-add -K ~/.ssh/home_rsa
ssh-add -K ~/.ssh/work_rsa

Here is my ~/.ssh/config file:
Host home
  ForwardAgent yes
  HostName home.com
  IdentityFile ~/.ssh/home_rsa
  IdentitiesOnly yes
  User home

Host work
  ForwardAgent yes
  HostName work.com
  IdentitiesOnly yes
  IdentityFile ~/.ssh/work_rsa
  User work

Host bitbucket
  IdentityFile ~/.ssh/home_rsa

Host bitbucket-work
  IdentityFile ~/.ssh/work_rsa

Host bitbucket*
  HostName bitbucket.com
  User git

When I run the following…
ssh work
ssh git@bitbucket.org

…Bitbucket reports that I'm using my home user, though I'm clearly logged into my work server and should be forwarding my work key. If I add my SSH identities in the reverse order and run the same code above, Bitbucket reports I'm using my work user. Running ssh-add -l from my work server, I see that both SSH keys are being forwarded, but isn't that the job of IdentitiesOnly yes?
Really confused as to what's going on here.
","
Really confused as to what's going on here.

ForwardAgent option forwards the connection to your agent, with all the keys inside and does not forward your local ~/.ssh/config to remote host. What you do on the work host is controlled by your configuration on that host.
What are you trying to do with that?
","4041","<ssh><public-key-encryption><ssh-agent>","0","2","2","2019-10-06 14:11:06","36363402","4","1","","","","2016-04-01 18:24:03",""
"36363325","SSH IdentitiesOnly=yes forwarding all my keys","I cannot for the life of me figure out why my SSH config is forwarding the wrong key. I have two keys, we'll call them home_rsa and work_rsa. I have done the following:
eval `ssh-agent`
ssh-add -K ~/.ssh/home_rsa
ssh-add -K ~/.ssh/work_rsa

Here is my ~/.ssh/config file:
Host home
  ForwardAgent yes
  HostName home.com
  IdentityFile ~/.ssh/home_rsa
  IdentitiesOnly yes
  User home

Host work
  ForwardAgent yes
  HostName work.com
  IdentitiesOnly yes
  IdentityFile ~/.ssh/work_rsa
  User work

Host bitbucket
  IdentityFile ~/.ssh/home_rsa

Host bitbucket-work
  IdentityFile ~/.ssh/work_rsa

Host bitbucket*
  HostName bitbucket.com
  User git

When I run the following…
ssh work
ssh git@bitbucket.org

…Bitbucket reports that I'm using my home user, though I'm clearly logged into my work server and should be forwarding my work key. If I add my SSH identities in the reverse order and run the same code above, Bitbucket reports I'm using my work user. Running ssh-add -l from my work server, I see that both SSH keys are being forwarded, but isn't that the job of IdentitiesOnly yes?
Really confused as to what's going on here.
","You need to update your ssh keys with their equivalent bitbucket account first at their website (work user with work_rsa, user with user_rsa). Then maybe this could help.
Host                bitbucket-work
HostName            bitbucket.org
IdentitiesOnly      yes
IdentityFile        ~/.ssh/work_rsa
User                work

Usage:
ssh bitbucket-work

sshbitbucket
","4041","<ssh><public-key-encryption><ssh-agent>","0","2","2","2019-10-06 14:11:06","36363402","4","1","","","","2016-04-01 18:24:03",""
"18871091","RSA asymmentic encryption exception","I using the following code to generate the public and private key for RSA encryption
  public static string RSA_Decrypt(string encryptedText, string privateKey)
        {
            CspParameters cspParams = new CspParameters { ProviderType = 1 };
            RSACryptoServiceProvider rsaProvider = new RSACryptoServiceProvider(cspParams);

            rsaProvider.ImportCspBlob(Convert.FromBase64String(privateKey));

            var buffer = Convert.FromBase64String(encryptedText);

            byte[] plainBytes = rsaProvider.Decrypt(buffer, false);

            string plainText = Encoding.UTF8.GetString(plainBytes, 0, plainBytes.Length);

            return plainText;
        }

        public static string RSA_Encrypt(string data, string publicKey)
        {
            CspParameters cspParams = new CspParameters { ProviderType = 1 };
            RSACryptoServiceProvider rsaProvider = new RSACryptoServiceProvider(cspParams);

            rsaProvider.ImportCspBlob(Convert.FromBase64String(publicKey));

            byte[] plainBytes = Encoding.UTF8.GetBytes(data);
            byte[] encryptedBytes = rsaProvider.Encrypt(plainBytes, false);

            return Convert.ToBase64String(encryptedBytes);
        }

        public static Tuple<string, string> CreateKeyPair()
        {
            CspParameters cspParams = new CspParameters { ProviderType = 1 /* PROV_RSA_FULL */ };

            RSACryptoServiceProvider rsaProvider = new RSACryptoServiceProvider(2048, cspParams);

            string publicKey = Convert.ToBase64String(rsaProvider.ExportCspBlob(false));
            string privateKey = Convert.ToBase64String(rsaProvider.ExportCspBlob(true));

            return new Tuple<string, string>(privateKey, publicKey);
        }

the decrypt function return this exception exception

""key does not exist""

please advice me to fix this issue. 
","This code (using the methods you provided) works fine:
static void Main()
{
    var keyPair = CreateKeyPair();
    var encryptedText = Encrypt(keyPair.Item2, ""test data"");
    var decryptedText = Decrypt(keyPair.Item1, encryptedText);
    Console.WriteLine(""Encrypted text: {0}"", encryptedText);
    Console.WriteLine(""Decrypted text: {0}"", decryptedText);
}

public static string RSA_Decrypt(string encryptedText, string privateKey)
{
    CspParameters cspParams = new CspParameters { ProviderType = 1 };
    RSACryptoServiceProvider rsaProvider = new RSACryptoServiceProvider(cspParams);

    rsaProvider.ImportCspBlob(Convert.FromBase64String(privateKey));

    var buffer = Convert.FromBase64String(encryptedText);

    byte[] plainBytes = rsaProvider.Decrypt(buffer, false);

    string plainText = Encoding.UTF8.GetString(plainBytes, 0, plainBytes.Length);

    return plainText;
}

public static string RSA_Encrypt(string data, string publicKey)
{
    CspParameters cspParams = new CspParameters { ProviderType = 1 };
    RSACryptoServiceProvider rsaProvider = new RSACryptoServiceProvider(cspParams);

    rsaProvider.ImportCspBlob(Convert.FromBase64String(publicKey));

    byte[] plainBytes = Encoding.UTF8.GetBytes(data);
    byte[] encryptedBytes = rsaProvider.Encrypt(plainBytes, false);

    return Convert.ToBase64String(encryptedBytes);
}

public static Tuple<string, string> CreateKeyPair()
{
    CspParameters cspParams = new CspParameters { ProviderType = 1 /* PROV_RSA_FULL */ };

    RSACryptoServiceProvider rsaProvider = new RSACryptoServiceProvider(2048, cspParams);

    string publicKey = Convert.ToBase64String(rsaProvider.ExportCspBlob(false));
    string privateKey = Convert.ToBase64String(rsaProvider.ExportCspBlob(true));

    return new Tuple<string, string>(privateKey, publicKey);
}

","4009","<c#><encryption><rsa><public-key-encryption><encryption-asymmetric>","0","1","1","2017-04-26 10:55:32","18872346","5","2","1019724","","2013-09-18 12:45:18","2013-09-18 11:31:37",""
"8400364","Getting error in EVP_OpenInit() of OpenSSL EVP api for RSA decryption, in C","I am facing a problem in RSA decryption using OpenSSL Library (EVP api).
Here is my code for key generation 
#include <stdio.h>
#include <openssl/evp.h>
#include <openssl/rsa.h>
#include <openssl/bio.h>
#include <openssl/pem.h>

#define SECFILE ""sec.pem""
#define PUBFILE ""pub.pem""

int main()
{

    EVP_PKEY_CTX *ctx;
    EVP_PKEY *pkey = NULL;
    ctx = EVP_PKEY_CTX_new_id(EVP_PKEY_RSA, NULL);
    FILE *fp;

    if (!ctx)
    {
        /* Error occurred */
        perror(""Error in CTX \n"");

    }
    if (EVP_PKEY_keygen_init(ctx) <= 0)
    {
        /* Error */
        perror(""Error in EVP_PKEY_keygen_init \n"");
    }
    if (EVP_PKEY_CTX_set_rsa_keygen_bits(ctx, 2048) <= 0)
    {
        /* Error */
        perror(""Error in EVP_PKEY_CTX_set_rsa_keygen_bits \n"");
    }
    /* Generate key */
    if (EVP_PKEY_keygen(ctx, &pkey) <= 0)
    {   
        /* Error */
        perror(""Error in EVP_PKEY_keygen \n"");

    }


    fp = fopen(SECFILE, ""w"");
    PEM_write_PrivateKey(fp, pkey, NULL,NULL, 0,0, NULL);
    fclose(fp);

    fp = fopen(PUBFILE, ""w"");
    PEM_write_PUBKEY(fp,pkey);
    fclose(fp);


    return 0;
}

For encryption :
I used this link 
For decryption :
   int do_evp_open(FILE *rsa_pkey_file, FILE *in_file, FILE *out_file) 
{ 
    int retval = 0; 
    RSA *rsa_pkey = NULL; 
    EVP_PKEY *pkey = EVP_PKEY_new(); 
    EVP_CIPHER_CTX ctx; 
    unsigned char buffer[4096]; 
    unsigned char buffer_out[4096 + EVP_MAX_IV_LENGTH]; 
    size_t len; 
    int len_out; 
    unsigned char *ek; 
    int eklen ; 
    uint32_t eklen_n; 
    unsigned char iv[EVP_MAX_IV_LENGTH] = {122,205,106,192,4,183,69,176,84,28,214,226,220,140,86,174}; 


    /// Read RSA Private Key 
    if (PEM_read_RSAPrivateKey(rsa_pkey_file, &rsa_pkey, NULL, NULL) == NULL) 
    { 
        fprintf(stderr, ""Error loading RSA Private Key File.\n""); 
        ERR_print_errors_fp(stderr); 
        retval = -2; 
        goto out; 
    } 


    /// Assign RSA key to EVP key
    if (!EVP_PKEY_assign_RSA(pkey, rsa_pkey)) 
    { 
        fprintf(stderr, ""EVP_PKEY_assign_RSA: failed.\n""); 
        retval = -3; 
        goto out; 
    }

    EVP_CIPHER_CTX_init(&ctx); 

    ek = malloc( EVP_PKEY_size(pkey)); 



    if (!EVP_OpenInit(&ctx, EVP_aes_128_cbc(), ek, eklen, iv,pkey)) 
    { 
        fprintf(stderr, ""EVP_OpenInit: failed.\n""); 
       ERR_print_errors_fp(stderr); /// Prints error of occured in Openssl  
        retval = -3; 
        goto out_free; 
    } 




    while ((len = fread(buffer, 1, sizeof buffer, in_file)) > 0) 
    { 
        if (!EVP_OpenUpdate(&ctx, buffer_out, &len_out, buffer, len)) 
        { 
            fprintf(stderr, ""EVP_OpenUpdate: failed.\n""); 
            retval = 3; 
            goto out_free; 
        } 

        if (fwrite(buffer_out, len_out, 1, out_file) != 1) 
        { 
            perror(""output file""); 
            retval = -5; 
            goto out_free; 
        } 
    } 

    if (ferror(in_file)) 
    { 
        perror(""input file""); 
        retval = -4; 
        goto out_free; 
    } 

    if (!EVP_OpenFinal(&ctx, buffer_out, &len_out)) 
    { 
        fprintf(stderr, ""EVP_OpenFinal: failed.\n""); 
        retval = - 3; 
        goto out_free; 
    } 

    if (fwrite(buffer_out, len_out, 1, out_file) != 1) 
    { 
        perror(""output file""); 
        retval = -5; 
        goto out_free; 
    } 

    out_free: 
    EVP_PKEY_free(pkey); 
    free(ek); 

    out: 
    return retval; 
} 

My Private and public keys are :
-----BEGIN PRIVATE KEY-----
MIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQDj+g6m7KY5zK8z
FZ/MKFySr1ZB+n0b3GjhMUcUDn5S9N7oyoCzkOVVa7gl0jTI8dwCFVAy8693Rq+i
AT7dUTLViT9V8GkX9r0yFcppt5uc2YgI5aOOTvmQKQe08FSZ7QbviEL25MNnBfB1
wpd+mJN3nb0hkeo7x2IZD/ZVfs+TmOG9mHbQR8b1XcxEDoLx3aX1J8Eix1pN7YK6
nDAFm984Ho+PCz1aGl/TnDl3b90X5HXGHiD6uNDHokZ+th8B6AeFFRlkWlQd0w2R
e/EEZ36p4TQOHSc3sSUw6pen0N8YmBNZksBEr1vsZvYkKtRKCfy0fXtL4iqKzcgJ
ocos+Z6nAgMBAAECggEBALlWDdlYpF5y76/JEaso2PGLR8XFvTYMPttsc0tz6PDK
D/oSvwS8dCS4uPFObgk6ztCGwTda8rg2KAy9lHzaSUheFrZoBxgrSG5SVscRNJoU
IsqQ3iGQRMUVBiXsB+tHTg8nqMENA2pa4rzpoL2Tjrd87kg/VryYgEC9wFaLDHgB
FaXJJlaeuTBQXV7Ga9pg+KF1Kv91/q3T62Um0ggSajFpX15x6sLIo5EWm0DGksn0
chQeiEs33e8fHil95g0nXK+hXOMnMvbAln/eOCGktO4JnPTjicAA7iKliCsLiaeZ
t5Czscv/8AVlBAISGJcE8ASM+AbalXtnoOK6W+dv0gkCgYEA/cPi7U8bJ0tlvxF3
3vc8V7uzuAgKtOKQet1spQtAoi343ZoSyFHQEwO5PMmtB56/mk3+/mDpoKTQo0oK
f5COIlzW+PIMQCroalpJe+ZcY/PS8SPoOY39yiX4WQchgac01R0Qf6XDAOfyfZ9d
MZTtDgpkx/oyfRTzxI7D9SZUqZ0CgYEA5fwH5uwmc0fsIw3tl3pHHOK9g78Rs6XE
0feXplBCzx+qaEtAK1Jp1nMX/PmN575i3UN3dii9YV8v9geTf+hytpQd/TbrvsSY
Py9j95XYN75Z5TAsWnZbZr/gTdZSz0yObb/9GzxBipp+EHCEOSS0RF8u9XHlM9bC
0agB4VZKqBMCgYByIjxaR44K6lpkyVKEseYt/3ohd1x5Zr1cxWIsCReU2eBoqvdv
qXxQUQhrUrnEB55dpF7fwm7Rlc9Q4eg+36FNyzvU0+i2o5XM37bVRxKe0fc6BdBY
sohG9zTvtclYKwAUKfJVtxQxwCDMZ3Te7ACCpCIX32v93gKVkTCJfift8QKBgHZ9
PAEAZ+r7AjEpSuDBMgQy2ZsYBOG+pUHcQzh/n3wg/2XOZ1gqlLbVA2XlmPPtxffj
e5fX84JITWh/jMHYm8lvVGgSNLFLjnj3TJTRkd1eZ+hJwoA0/HBaqRDRPEbrVXI7
+QZgLBBh+lMz9RuPyoRzWblBHepwWl00JwvWro4bAoGBAKFAXVzbx74JM6wzr9H5
TusTwOM5mf/I1TkCq1Dd5n1vDVfrkNokZ2LfJWqiQHLZj2rGxSQSVjIsVaBmEDTZ
ob8duUsbkYQe4dToHFHcBO+akBtULC4HWv/D4pPVoyAE7WJBJBw0vl1sA15kiXBu
HBXffOzN/Erqvp90HLtefpMp
-----END PRIVATE KEY-----


-----BEGIN PUBLIC KEY-----
MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA4/oOpuymOcyvMxWfzChc
kq9WQfp9G9xo4TFHFA5+UvTe6MqAs5DlVWu4JdI0yPHcAhVQMvOvd0avogE+3VEy
1Yk/VfBpF/a9MhXKabebnNmICOWjjk75kCkHtPBUme0G74hC9uTDZwXwdcKXfpiT
d529IZHqO8diGQ/2VX7Pk5jhvZh20EfG9V3MRA6C8d2l9SfBIsdaTe2CupwwBZvf
OB6Pjws9Whpf05w5d2/dF+R1xh4g+rjQx6JGfrYfAegHhRUZZFpUHdMNkXvxBGd+
qeE0Dh0nN7ElMOqXp9DfGJgTWZLARK9b7Gb2JCrUSgn8tH17S+Iqis3ICaHKLPme
pwIDAQAB
-----END PUBLIC KEY-----

The error I am getting While EVP_OpenInit is :
140004942804648:error:0407106B:lib(4):func(113):reason(107):rsa_pk1.c:190: 140004942804648:error:04065072:lib(4):func(101):reason(114):rsa_eay.c:594 
Any help would be appreciated.
Thanks,
Pawan
","Are you absolutely sure, that you have initialized variable eklen?
","3965","<c><encryption><openssl><rsa><public-key-encryption>","2","3","2","2013-04-18 10:48:58","","0","2","-1","","2017-05-23 12:25:09","2011-12-06 13:05:22",""
"8400364","Getting error in EVP_OpenInit() of OpenSSL EVP api for RSA decryption, in C","I am facing a problem in RSA decryption using OpenSSL Library (EVP api).
Here is my code for key generation 
#include <stdio.h>
#include <openssl/evp.h>
#include <openssl/rsa.h>
#include <openssl/bio.h>
#include <openssl/pem.h>

#define SECFILE ""sec.pem""
#define PUBFILE ""pub.pem""

int main()
{

    EVP_PKEY_CTX *ctx;
    EVP_PKEY *pkey = NULL;
    ctx = EVP_PKEY_CTX_new_id(EVP_PKEY_RSA, NULL);
    FILE *fp;

    if (!ctx)
    {
        /* Error occurred */
        perror(""Error in CTX \n"");

    }
    if (EVP_PKEY_keygen_init(ctx) <= 0)
    {
        /* Error */
        perror(""Error in EVP_PKEY_keygen_init \n"");
    }
    if (EVP_PKEY_CTX_set_rsa_keygen_bits(ctx, 2048) <= 0)
    {
        /* Error */
        perror(""Error in EVP_PKEY_CTX_set_rsa_keygen_bits \n"");
    }
    /* Generate key */
    if (EVP_PKEY_keygen(ctx, &pkey) <= 0)
    {   
        /* Error */
        perror(""Error in EVP_PKEY_keygen \n"");

    }


    fp = fopen(SECFILE, ""w"");
    PEM_write_PrivateKey(fp, pkey, NULL,NULL, 0,0, NULL);
    fclose(fp);

    fp = fopen(PUBFILE, ""w"");
    PEM_write_PUBKEY(fp,pkey);
    fclose(fp);


    return 0;
}

For encryption :
I used this link 
For decryption :
   int do_evp_open(FILE *rsa_pkey_file, FILE *in_file, FILE *out_file) 
{ 
    int retval = 0; 
    RSA *rsa_pkey = NULL; 
    EVP_PKEY *pkey = EVP_PKEY_new(); 
    EVP_CIPHER_CTX ctx; 
    unsigned char buffer[4096]; 
    unsigned char buffer_out[4096 + EVP_MAX_IV_LENGTH]; 
    size_t len; 
    int len_out; 
    unsigned char *ek; 
    int eklen ; 
    uint32_t eklen_n; 
    unsigned char iv[EVP_MAX_IV_LENGTH] = {122,205,106,192,4,183,69,176,84,28,214,226,220,140,86,174}; 


    /// Read RSA Private Key 
    if (PEM_read_RSAPrivateKey(rsa_pkey_file, &rsa_pkey, NULL, NULL) == NULL) 
    { 
        fprintf(stderr, ""Error loading RSA Private Key File.\n""); 
        ERR_print_errors_fp(stderr); 
        retval = -2; 
        goto out; 
    } 


    /// Assign RSA key to EVP key
    if (!EVP_PKEY_assign_RSA(pkey, rsa_pkey)) 
    { 
        fprintf(stderr, ""EVP_PKEY_assign_RSA: failed.\n""); 
        retval = -3; 
        goto out; 
    }

    EVP_CIPHER_CTX_init(&ctx); 

    ek = malloc( EVP_PKEY_size(pkey)); 



    if (!EVP_OpenInit(&ctx, EVP_aes_128_cbc(), ek, eklen, iv,pkey)) 
    { 
        fprintf(stderr, ""EVP_OpenInit: failed.\n""); 
       ERR_print_errors_fp(stderr); /// Prints error of occured in Openssl  
        retval = -3; 
        goto out_free; 
    } 




    while ((len = fread(buffer, 1, sizeof buffer, in_file)) > 0) 
    { 
        if (!EVP_OpenUpdate(&ctx, buffer_out, &len_out, buffer, len)) 
        { 
            fprintf(stderr, ""EVP_OpenUpdate: failed.\n""); 
            retval = 3; 
            goto out_free; 
        } 

        if (fwrite(buffer_out, len_out, 1, out_file) != 1) 
        { 
            perror(""output file""); 
            retval = -5; 
            goto out_free; 
        } 
    } 

    if (ferror(in_file)) 
    { 
        perror(""input file""); 
        retval = -4; 
        goto out_free; 
    } 

    if (!EVP_OpenFinal(&ctx, buffer_out, &len_out)) 
    { 
        fprintf(stderr, ""EVP_OpenFinal: failed.\n""); 
        retval = - 3; 
        goto out_free; 
    } 

    if (fwrite(buffer_out, len_out, 1, out_file) != 1) 
    { 
        perror(""output file""); 
        retval = -5; 
        goto out_free; 
    } 

    out_free: 
    EVP_PKEY_free(pkey); 
    free(ek); 

    out: 
    return retval; 
} 

My Private and public keys are :
-----BEGIN PRIVATE KEY-----
MIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQDj+g6m7KY5zK8z
FZ/MKFySr1ZB+n0b3GjhMUcUDn5S9N7oyoCzkOVVa7gl0jTI8dwCFVAy8693Rq+i
AT7dUTLViT9V8GkX9r0yFcppt5uc2YgI5aOOTvmQKQe08FSZ7QbviEL25MNnBfB1
wpd+mJN3nb0hkeo7x2IZD/ZVfs+TmOG9mHbQR8b1XcxEDoLx3aX1J8Eix1pN7YK6
nDAFm984Ho+PCz1aGl/TnDl3b90X5HXGHiD6uNDHokZ+th8B6AeFFRlkWlQd0w2R
e/EEZ36p4TQOHSc3sSUw6pen0N8YmBNZksBEr1vsZvYkKtRKCfy0fXtL4iqKzcgJ
ocos+Z6nAgMBAAECggEBALlWDdlYpF5y76/JEaso2PGLR8XFvTYMPttsc0tz6PDK
D/oSvwS8dCS4uPFObgk6ztCGwTda8rg2KAy9lHzaSUheFrZoBxgrSG5SVscRNJoU
IsqQ3iGQRMUVBiXsB+tHTg8nqMENA2pa4rzpoL2Tjrd87kg/VryYgEC9wFaLDHgB
FaXJJlaeuTBQXV7Ga9pg+KF1Kv91/q3T62Um0ggSajFpX15x6sLIo5EWm0DGksn0
chQeiEs33e8fHil95g0nXK+hXOMnMvbAln/eOCGktO4JnPTjicAA7iKliCsLiaeZ
t5Czscv/8AVlBAISGJcE8ASM+AbalXtnoOK6W+dv0gkCgYEA/cPi7U8bJ0tlvxF3
3vc8V7uzuAgKtOKQet1spQtAoi343ZoSyFHQEwO5PMmtB56/mk3+/mDpoKTQo0oK
f5COIlzW+PIMQCroalpJe+ZcY/PS8SPoOY39yiX4WQchgac01R0Qf6XDAOfyfZ9d
MZTtDgpkx/oyfRTzxI7D9SZUqZ0CgYEA5fwH5uwmc0fsIw3tl3pHHOK9g78Rs6XE
0feXplBCzx+qaEtAK1Jp1nMX/PmN575i3UN3dii9YV8v9geTf+hytpQd/TbrvsSY
Py9j95XYN75Z5TAsWnZbZr/gTdZSz0yObb/9GzxBipp+EHCEOSS0RF8u9XHlM9bC
0agB4VZKqBMCgYByIjxaR44K6lpkyVKEseYt/3ohd1x5Zr1cxWIsCReU2eBoqvdv
qXxQUQhrUrnEB55dpF7fwm7Rlc9Q4eg+36FNyzvU0+i2o5XM37bVRxKe0fc6BdBY
sohG9zTvtclYKwAUKfJVtxQxwCDMZ3Te7ACCpCIX32v93gKVkTCJfift8QKBgHZ9
PAEAZ+r7AjEpSuDBMgQy2ZsYBOG+pUHcQzh/n3wg/2XOZ1gqlLbVA2XlmPPtxffj
e5fX84JITWh/jMHYm8lvVGgSNLFLjnj3TJTRkd1eZ+hJwoA0/HBaqRDRPEbrVXI7
+QZgLBBh+lMz9RuPyoRzWblBHepwWl00JwvWro4bAoGBAKFAXVzbx74JM6wzr9H5
TusTwOM5mf/I1TkCq1Dd5n1vDVfrkNokZ2LfJWqiQHLZj2rGxSQSVjIsVaBmEDTZ
ob8duUsbkYQe4dToHFHcBO+akBtULC4HWv/D4pPVoyAE7WJBJBw0vl1sA15kiXBu
HBXffOzN/Erqvp90HLtefpMp
-----END PRIVATE KEY-----


-----BEGIN PUBLIC KEY-----
MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA4/oOpuymOcyvMxWfzChc
kq9WQfp9G9xo4TFHFA5+UvTe6MqAs5DlVWu4JdI0yPHcAhVQMvOvd0avogE+3VEy
1Yk/VfBpF/a9MhXKabebnNmICOWjjk75kCkHtPBUme0G74hC9uTDZwXwdcKXfpiT
d529IZHqO8diGQ/2VX7Pk5jhvZh20EfG9V3MRA6C8d2l9SfBIsdaTe2CupwwBZvf
OB6Pjws9Whpf05w5d2/dF+R1xh4g+rjQx6JGfrYfAegHhRUZZFpUHdMNkXvxBGd+
qeE0Dh0nN7ElMOqXp9DfGJgTWZLARK9b7Gb2JCrUSgn8tH17S+Iqis3ICaHKLPme
pwIDAQAB
-----END PUBLIC KEY-----

The error I am getting While EVP_OpenInit is :
140004942804648:error:0407106B:lib(4):func(113):reason(107):rsa_pk1.c:190: 140004942804648:error:04065072:lib(4):func(101):reason(114):rsa_eay.c:594 
Any help would be appreciated.
Thanks,
Pawan
","I see you have used EVP_OpenInit(), EVP_OpenUpdate() and EVP_OpenFinal() for decryption. So I'm going to assume that you've used EVP_SealInit(), EVP_SealUpdate() and EVP_SealFinal() functions for encryption.
So if you have used EVP_SealInit(), you must have passed the address (pointer) to eklen (please check man EVP_SealInit) where the variable gets a value assigned. In analogous to that the eklen variable that you are passing to EVP_OpenInit() must contain a valid key length. 
The following is the description from man EVP_OpenInit.
EVP_OpenInit() initializes a cipher context ctx for decryption with cipher type. It decrypts the encrypted symmetric key of length ekl bytes passed in the ek parameter using the private key priv.  The IV is supplied in the iv parameter.
I'm not sure here, but I guess you need to use EVP_PKEY_size() function in this case to get the length of the key.
For example (in your decryption code):
....
..
. 
EVP_CIPHER_CTX_init(&ctx); 
ek = malloc( EVP_PKEY_size(pkey)); 

/* Add the following line */
eklen = EVP_PKEY_size(pkey);

if (!EVP_OpenInit(&ctx, EVP_aes_128_cbc(), ek, eklen, iv,pkey)) 
{ 
    fprintf(stderr, ""EVP_OpenInit: failed.\n""); 
...
..
.

","3965","<c><encryption><openssl><rsa><public-key-encryption>","2","2","2","2013-04-18 10:48:58","","0","2","-1","","2017-05-23 12:25:09","2011-12-06 13:05:22",""
"10831264","How can I make my WCF Client encrypt the SOAP Body of my request?","How can I sign and encrypt my WCF clients service call (from spec: All messages shall be signed and encrypted corresponding to WS-Security X.509 Token Profile. The specification can be found here).
I must use SOAP 1.1 and WS-Security, the service is provided by a 3rd party and I am pretty sure they wrote it using Java (IBM DataPower) (not WCf anyway).
I have tried the following, but I think it is the case of asking the wrong question as most of what I have read says that the client won't decide what is encrypted and that this is defined by the services protection level (SignAndEncrypt). I've also seen references to an X509SecurityToken that I should use to encrypt, however I think this is older .net.
Anyway this is what I have so far:
' Create the binding.
Dim myBinding As New BasicHttpBinding() ' FOR SOAP 1.1
myBinding.Security.Mode = BasicHttpSecurityMode.TransportWithMessageCredential
myBinding.Security.Message.ClientCredentialType = BasicHttpMessageCredentialType.Certificate
myBinding.Security.Transport.ClientCredentialType = HttpClientCredentialType.Certificate

' Create the endpoint address. 
Dim ea As New EndpointAddress(""https://removed"")

' Create the client. 
Dim starClientProxy As New wcfStarServiceProxy.starTransportPortTypesClient(myBinding, ea)

' Specify a certificate to use for authenticating the client.
starClientProxy.ClientCredentials.ClientCertificate.SetCertificate(StoreLocation.CurrentUser, StoreName.My, X509FindType.FindBySubjectName, ""removed"")

'Cert used for encryption
starClientProxy.ClientCredentials.ServiceCertificate.SetDefaultCertificate(StoreLocation.CurrentUser, StoreName.AddressBook, X509FindType.FindBySubjectName, ""removed"")

so now it should just encrypt it automatically? I can't find anything that I need to set
'call the service    
Dim response As wcfStarServiceProxy.AcknowledgeRepairOrderPayload = starClientProxy.ProcessMessage(payload)

So, I think I have succeeded in signing the request, however, the body isn't encrypted. How can I encrypt the body?
","I have created a custom binding to implement 2 levels of security - certificate AND username-password. I did it like this (code excerpt):
        CustomBinding customBinding = new CustomBinding();
        // ...
        HttpsTransportBindingElement httpsBindingElement = new HttpsTransportBindingElement();
        httpsBindingElement.AllowCookies = false;
        httpsBindingElement.BypassProxyOnLocal = false;
        httpsBindingElement.HostNameComparisonMode = HostNameComparisonMode.StrongWildcard;
        httpsBindingElement.MaxBufferPoolSize = 20480000;
        httpsBindingElement.MaxBufferSize = 20480000;
        httpsBindingElement.MaxReceivedMessageSize = 20480000;
        httpsBindingElement.RequireClientCertificate = true;
        httpsBindingElement.UseDefaultWebProxy = true;
        TransportSecurityBindingElement transportSecurityElement = new TransportSecurityBindingElement();
        transportSecurityElement.EndpointSupportingTokenParameters.SignedEncrypted.Add(new UserNameSecurityTokenParameters());
        transportSecurityElement.EndpointSupportingTokenParameters.SetKeyDerivation(false);
        // ...
        customBinding.Elements.Add(transportSecurityElement);
        customBinding.Elements.Add(httpsBindingElement);

This way the message is signed and encrypted by the client using the username and password, however you can modify this example and accomplish what you require.
","3857","<.net><soap><wcf-client><ws-security><public-key-encryption>","2","1","2","2013-06-14 15:09:35","10836261","0","2","198048","","2012-05-31 12:11:13","2012-05-31 09:53:09",""
"10831264","How can I make my WCF Client encrypt the SOAP Body of my request?","How can I sign and encrypt my WCF clients service call (from spec: All messages shall be signed and encrypted corresponding to WS-Security X.509 Token Profile. The specification can be found here).
I must use SOAP 1.1 and WS-Security, the service is provided by a 3rd party and I am pretty sure they wrote it using Java (IBM DataPower) (not WCf anyway).
I have tried the following, but I think it is the case of asking the wrong question as most of what I have read says that the client won't decide what is encrypted and that this is defined by the services protection level (SignAndEncrypt). I've also seen references to an X509SecurityToken that I should use to encrypt, however I think this is older .net.
Anyway this is what I have so far:
' Create the binding.
Dim myBinding As New BasicHttpBinding() ' FOR SOAP 1.1
myBinding.Security.Mode = BasicHttpSecurityMode.TransportWithMessageCredential
myBinding.Security.Message.ClientCredentialType = BasicHttpMessageCredentialType.Certificate
myBinding.Security.Transport.ClientCredentialType = HttpClientCredentialType.Certificate

' Create the endpoint address. 
Dim ea As New EndpointAddress(""https://removed"")

' Create the client. 
Dim starClientProxy As New wcfStarServiceProxy.starTransportPortTypesClient(myBinding, ea)

' Specify a certificate to use for authenticating the client.
starClientProxy.ClientCredentials.ClientCertificate.SetCertificate(StoreLocation.CurrentUser, StoreName.My, X509FindType.FindBySubjectName, ""removed"")

'Cert used for encryption
starClientProxy.ClientCredentials.ServiceCertificate.SetDefaultCertificate(StoreLocation.CurrentUser, StoreName.AddressBook, X509FindType.FindBySubjectName, ""removed"")

so now it should just encrypt it automatically? I can't find anything that I need to set
'call the service    
Dim response As wcfStarServiceProxy.AcknowledgeRepairOrderPayload = starClientProxy.ProcessMessage(payload)

So, I think I have succeeded in signing the request, however, the body isn't encrypted. How can I encrypt the body?
","@Dejan led me to an answer:
Private Function GetCustomBinding2() As Channels.Binding

    Dim httpsBindingElement As New HttpsTransportBindingElement()
    httpsBindingElement.AllowCookies = False
    httpsBindingElement.BypassProxyOnLocal = False
    httpsBindingElement.HostNameComparisonMode = HostNameComparisonMode.StrongWildcard
    httpsBindingElement.MaxBufferPoolSize = 524288
    httpsBindingElement.MaxBufferSize = 65536
    httpsBindingElement.MaxReceivedMessageSize = 65536
    httpsBindingElement.RequireClientCertificate = True
    httpsBindingElement.UseDefaultWebProxy = True



    Dim asbe As New Channels.AsymmetricSecurityBindingElement
    asbe.MessageSecurityVersion = MessageSecurityVersion.WSSecurity11WSTrustFebruary2005WSSecureConversationFebruary2005WSSecurityPolicy11
    asbe.InitiatorTokenParameters = New ServiceModel.Security.Tokens.X509SecurityTokenParameters
    asbe.RecipientTokenParameters = New ServiceModel.Security.Tokens.X509SecurityTokenParameters
    asbe.SecurityHeaderLayout = SecurityHeaderLayout.Strict
    asbe.DefaultAlgorithmSuite = Security.SecurityAlgorithmSuite.Basic128Sha256
    asbe.IncludeTimestamp = True
    asbe.SetKeyDerivation(False)
    'asbe.OnlySignEntireHeadersAndBody = True

    'asbe.EndpointSupportingTokenParameters.SignedEncrypted.Add(New ServiceModel.Security.Tokens.X509SecurityTokenParameters)
    'asbe.EndpointSupportingTokenParameters.SetKeyDerivation(False)

    Dim myBinding As New CustomBinding

    myBinding.Elements.Add(asbe)

    myBinding.Elements.Add(New TextMessageEncodingBindingElement(MessageVersion.Soap11, System.Text.Encoding.UTF8))
    'myBinding3.Elements.Add(New HttpsTransportBindingElement())
    myBinding.Elements.Add(httpsBindingElement)



    Return myBinding
End Function

","3857","<.net><soap><wcf-client><ws-security><public-key-encryption>","2","1","2","2013-06-14 15:09:35","10836261","0","2","198048","","2012-05-31 12:11:13","2012-05-31 09:53:09",""
"30064795","How to share a public key for OAuth2 JWT validation?","I am implementing an app that connects to an OAuth2 server and it gets back a Json Web Token (JWT).  I am passing the token along and I want to independently validate that the token came from the issuing source.
I can do this, no problem, with the public key from the issuing source.  I have it available to me for now.  Everything works.
But what if the OAuth server changes the signing key?  How does the validating app get the new key?  Is there a ""best practices"" convention for sharing the public key from an OAuth2 server?  Do we just expose it from an endpoint on the auth server?  
","There's no solution that is standardized as part of the OAuth 2.0 protocol suite (today). 
It was considered to be a single-domain problem that would be solved in various ways that were considered to be out of scope for the core OAuth specifications (much like the API between Resource Server and Authorization Server is/was), and much like any PKI based mechanism in general works today.
But OpenID Connect is a cross-domain SSO protocol that was built on top of OAuth 2.0, which also defined a more standardized option of dealing with key distribution in the form of JWKs URIs as part of the Discover, see the jwks_uri entry at: 

REQUIRED. URL of the OP's JSON Web Key Set [JWK] document. This
  contains the signing key(s) the RP uses to validate signatures from
  the OP. The JWK Set MAY also contain the Server's encryption key(s),
  which are used by RPs to encrypt requests to the Server. When both
  signing and encryption keys are made available, a use (Key Use)
  parameter value is REQUIRED for all keys in the referenced JWK Set to
  indicate each key's intended usage. Although some algorithms allow the
  same key to be used for both signatures and encryption, doing so is
  NOT RECOMMENDED, as it is less secure. The JWK x5c parameter MAY be
  used to provide X.509 representations of keys provided. When used, the
  bare key values MUST still be present and MUST match those in the
  certificate.

This would expose the key material over HTTPs protected channel, effectively leveraging the SSL CA for publishing and rollover of JWT signing key material.
At some point the jwks_uri definition may be part of the standardized OAuth 2.0 protocol extensions as well, but for now you'd have to rely on a custom agreement between Client and Authorization Server to do so. That may not be too hard to implement yourself though.
You may get lucky if your Authorization Server happens to be an OpenID Connect provider as well and uses the same key material for signing ID tokens as well as JWT access tokens.
","3849","<validation><oauth-2.0><public-key-encryption><jwt>","4","3","1","2015-05-06 16:19:29","30082258","0","","","","","2015-05-05 23:14:30",""
"4914196","public key cryptograpy with Java and OpenSSL","In an application I want to store sensitive data (which can be arbitrarily large) so that it can later be used for researching. The point is that I don't want the data to lie around unprotected, so I want to encrypt it before saving it.
On another computer (in a more trustworthy environment) I want to decrypt that data later. The decryption should be possible with readily available tools, for example OpenSSL. Now my question is: How do I do all that?
I already know the abstract steps:

Once and for all generate a public/private key pair.
Encrypt a byte[] in Java using the public key, store it somewhere.
Copy the encrypted data to a ""safer"" computer.
Decrypt the saved data using a simple OpenSSL command line.

What I'm missing now are the details:

What kind of key pair do I need?
What encryption scheme should I use? (it's probably something like ""rsa-encrypt a symmetric key, then encrypt the data with that key"")
How does the simple OpenSSL command line look like?

[Update 2011-02-13]
After a little research I found a page that describes exactly what I want to do: http://blog.altudov.com/2010/09/27/using-openssl-for-asymmetric-encryption-of-backups/. Basically the answer to my step 4 is this command line:
openssl smime -decrypt \
  -in data.smime -binary -inform DER \
  -inkey key.pem \
  -out data

Now my question is: How can I generate a file from Java whose format is compatible to OpenSSL so I can decompress it using this command line? I want to do this hundrets of times per second, so invoking an external process seems too slow. That's why I want to do it directly in Java.
","You should understand that SSL is about encrypting network traffic. Public key systems with certificates and so on are good for validating trust between parties. If you need to protect something that you will be using yourself later you should probably go without mixing the previous concepts into your solution. It makes your life easier.
Take for instance this question and the accepted answer it has as a pointer. What you probably should do is to use a hash function to generate a key from password. Then you would encrypt your data using AES. Later at a safe location you would use the same password to generate the actual key and decrypt the data.
","3792","<java><openssl><public-key-encryption>","2","0","2","2011-02-14 02:26:23","4988350","0","1","225757","","2011-02-14 01:39:15","2011-02-06 15:29:43",""
"4914196","public key cryptograpy with Java and OpenSSL","In an application I want to store sensitive data (which can be arbitrarily large) so that it can later be used for researching. The point is that I don't want the data to lie around unprotected, so I want to encrypt it before saving it.
On another computer (in a more trustworthy environment) I want to decrypt that data later. The decryption should be possible with readily available tools, for example OpenSSL. Now my question is: How do I do all that?
I already know the abstract steps:

Once and for all generate a public/private key pair.
Encrypt a byte[] in Java using the public key, store it somewhere.
Copy the encrypted data to a ""safer"" computer.
Decrypt the saved data using a simple OpenSSL command line.

What I'm missing now are the details:

What kind of key pair do I need?
What encryption scheme should I use? (it's probably something like ""rsa-encrypt a symmetric key, then encrypt the data with that key"")
How does the simple OpenSSL command line look like?

[Update 2011-02-13]
After a little research I found a page that describes exactly what I want to do: http://blog.altudov.com/2010/09/27/using-openssl-for-asymmetric-encryption-of-backups/. Basically the answer to my step 4 is this command line:
openssl smime -decrypt \
  -in data.smime -binary -inform DER \
  -inkey key.pem \
  -out data

Now my question is: How can I generate a file from Java whose format is compatible to OpenSSL so I can decompress it using this command line? I want to do this hundrets of times per second, so invoking an external process seems too slow. That's why I want to do it directly in Java.
","I finally found exactly what I was looking for. I had just been confused by all the terms like S/MIME, ASN.1, DER, and so on. But finally, and seemingly by coincident, I reached the CMS (whatever that means) package from bouncycastle, which does everything I want. So here is my code:
package de.roland_illig.crypto;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.security.GeneralSecurityException;
import java.security.Security;
import java.security.cert.CertificateFactory;
import java.security.cert.X509Certificate;

import org.apache.commons.io.IOUtils;
import org.bouncycastle.cms.CMSEnvelopedDataStreamGenerator;
import org.bouncycastle.cms.CMSEnvelopedGenerator;
import org.bouncycastle.cms.CMSException;
import org.bouncycastle.jce.provider.BouncyCastleProvider;

public class CryptDemo {

  private static final File DIR = new File(""c:/program files/cygwin/home/roland/crypto/"");

  private static X509Certificate certificate() throws IOException, GeneralSecurityException {
    InputStream is = new FileInputStream(new File(DIR, ""key.pub.der""));
    CertificateFactory cf = CertificateFactory.getInstance(""X.509"");
    X509Certificate cert = (X509Certificate) cf.generateCertificate(is);
    is.close();
    return cert;
  }

  private static void encrypt() throws IOException, GeneralSecurityException, CMSException {
    CMSEnvelopedDataStreamGenerator gen = new CMSEnvelopedDataStreamGenerator();
    gen.addKeyTransRecipient(certificate());

    InputStream is = new FileInputStream(new File(DIR, ""secret""));
    OutputStream out = new FileOutputStream(new File(DIR, ""secret.encrypted""));
    OutputStream encryptingOut = gen.open(out, CMSEnvelopedGenerator.AES128_CBC, ""BC"");

    IOUtils.copy(is, encryptingOut);

    is.close();
    encryptingOut.close();
    out.close();
  }

  public static void main(String[] args) throws Exception {
    Security.addProvider(new BouncyCastleProvider());

    encrypt();
  }
}

","3792","<java><openssl><public-key-encryption>","2","1","2","2011-02-14 02:26:23","4988350","0","1","225757","","2011-02-14 01:39:15","2011-02-06 15:29:43",""
"17182848","Best approch to decode the PKCS12 file and get the encrypted private key from it using JavaScript","Please suggest any idea to decode the PKCS12 file and get the encrypted private key from it using JavaScript. I know that it can be done very easily using Java Keytool command and Java Security package. But I want it to be done by Java Script. Bellow is my actual requirement.
I have a "".p12"" extention file which is one of the formats of pkcs12.
It should be decoded first and need to trace out the decoded file where exactly the encrypted Private key is placed.
Need to get that encrypted Private key and Decrypt it and send it to the receiver.
And all this Should be done only in JAVASCRIPT.
","I think this might be what you are looking for:
""A native implementation of TLS (and various other cryptographic tools) in JavaScript.""
https://github.com/digitalbazaar/forge#pkcs12
It sounds like this example is close:
// decode p12 from base64
var p12Der = forge.util.decode64(p12b64);
// get p12 as ASN.1 object
var p12Asn1 = forge.asn1.fromDer(p12Der);
// decrypt p12
var p12 = forge.pkcs12.pkcs12FromAsn1(p12Asn1, 'password');
// look at pkcs12.safeContents

// generate p12, base64 encode
var p12Asn1 = forge.pkcs12.toPkcs12Asn1(
  privateKey, certificateChain, 'password');
var p12Der = forge.asn1.ToDer(p12Asn1).getBytes();
var p12b64 = forge.util.encode64(p12Der);

Rgds....Hoonto/Matt
","3773","<javascript><decode><public-key-encryption><private-key>","4","4","3","2019-10-03 22:15:31","","0","","2099644","","2013-06-19 04:27:45","2013-06-19 04:24:55",""
"17182848","Best approch to decode the PKCS12 file and get the encrypted private key from it using JavaScript","Please suggest any idea to decode the PKCS12 file and get the encrypted private key from it using JavaScript. I know that it can be done very easily using Java Keytool command and Java Security package. But I want it to be done by Java Script. Bellow is my actual requirement.
I have a "".p12"" extention file which is one of the formats of pkcs12.
It should be decoded first and need to trace out the decoded file where exactly the encrypted Private key is placed.
Need to get that encrypted Private key and Decrypt it and send it to the receiver.
And all this Should be done only in JAVASCRIPT.
","This will work Perfectly 
   // get p12 as ASN.1 object

  var p12Asn1 = forge.asn1.fromDer(buffer);
  // decrypt p12 using the password 'password'
  var p12 = forge.pkcs12.pkcs12FromAsn1(p12Asn1, password);
  // get bags by type
  var certBags = p12.getBags({bagType: forge.pki.oids.certBag});
  var pkeyBags = p12.getBags({bagType: forge.pki.oids.pkcs8ShroudedKeyBag});
  // fetching certBag
  var certBag = certBags[forge.pki.oids.certBag][0];
  // fetching keyBag
  var keybag = pkeyBags[forge.pki.oids.pkcs8ShroudedKeyBag][0];
  // generate pem from private key
  var privateKeyPem = forge.pki.privateKeyToPem(keybag.key);
  // generate pem from cert
  var certificate = forge.pki.certificateToPem(certBag.cert);

","3773","<javascript><decode><public-key-encryption><private-key>","4","1","3","2019-10-03 22:15:31","","0","","2099644","","2013-06-19 04:27:45","2013-06-19 04:24:55",""
"17182848","Best approch to decode the PKCS12 file and get the encrypted private key from it using JavaScript","Please suggest any idea to decode the PKCS12 file and get the encrypted private key from it using JavaScript. I know that it can be done very easily using Java Keytool command and Java Security package. But I want it to be done by Java Script. Bellow is my actual requirement.
I have a "".p12"" extention file which is one of the formats of pkcs12.
It should be decoded first and need to trace out the decoded file where exactly the encrypted Private key is placed.
Need to get that encrypted Private key and Decrypt it and send it to the receiver.
And all this Should be done only in JAVASCRIPT.
","Thanks to the examples from @Ujjawal and @hoonto I was able to get the following working well. 
const decodePKCS12 = (
  file // Dom File object
) => {
  return new Promise((resolve, reject) => {
    const reader = new FileReader()
    reader.onload = evt => {
      try {
        const binary = evt && evt.target ? evt.target.result : null
        if (!binary) {
          reject(new Error('No file data'))
        }
        const p12Asn1 = asn1.fromDer(binary)
        const p12 = pkcs12.pkcs12FromAsn1(p12Asn1)

        const certBags = p12.getBags({bagType: pki.oids.certBag})
        const pkeyBags = p12.getBags({bagType: pki.oids.pkcs8ShroudedKeyBag})

        const certBag = certBags[pki.oids.certBag][0]
        const keybag = pkeyBags[pki.oids.pkcs8ShroudedKeyBag][0]

        const certificate = pki.certificateToPem(certBag.cert)
        const privateKey = pki.privateKeyToPem(keybag.key)
        resolve({certificate, privateKey})
      } catch (e) {
        reject(e)
      }
    }
    reader.onerror = reject
    reader.readAsBinaryString(file)
  })
}

","3773","<javascript><decode><public-key-encryption><private-key>","4","0","3","2019-10-03 22:15:31","","0","","2099644","","2013-06-19 04:27:45","2013-06-19 04:24:55",""
"48878177","The argument ""-i"" passed to GIT_SSH_COMMAND is being ignored","I want to use other IdentityFile for git. I want to use it dynamically, not via config. I'm doing this:
  $ GIT_SSH_COMMAND='ssh -i /home/my_user/.ssh/id_ed25519' git pull origin master
  repository access denied.
  fatal: Could not read from remote repository.

  Please make sure you have the correct access rights
  and the repository exists.

The pub key ""id_ed25519.pub"" is at my bitbucket.
And this fails too:
  $ git pull origin master
  repository access denied.
  fatal: Could not read from remote repository.

  Please make sure you have the correct access rights
  and the repository exists.

And:
$ git remote -v
origin  git@bitbucket.org:company123/repo456.git (fetch)
origin  git@bitbucket.org:company123/repo456.git (push)

Adding ""-v"" to 'ssh -i /home/my_user/.ssh/id_ed25519' reveals that my RSA key is being used, instead of ED. Why?
","Check you commands (is git called directly or through an alias) and configuration:
As I mention in ""Using GIT_SSH_COMMAND"", a git config -l might reveal other configuration that would override the environment variable.
Check the return of git config core.sshCommand.
Finally, GIT_SSH_COMMAND means Git 2.10+, so if your version of Git is too old, you will need to update it first.
","3671","<git><ssh><public-key-encryption>","4","3","2","2019-04-14 21:09:47","","0","1","","","","2018-02-20 05:02:55",""
"48878177","The argument ""-i"" passed to GIT_SSH_COMMAND is being ignored","I want to use other IdentityFile for git. I want to use it dynamically, not via config. I'm doing this:
  $ GIT_SSH_COMMAND='ssh -i /home/my_user/.ssh/id_ed25519' git pull origin master
  repository access denied.
  fatal: Could not read from remote repository.

  Please make sure you have the correct access rights
  and the repository exists.

The pub key ""id_ed25519.pub"" is at my bitbucket.
And this fails too:
  $ git pull origin master
  repository access denied.
  fatal: Could not read from remote repository.

  Please make sure you have the correct access rights
  and the repository exists.

And:
$ git remote -v
origin  git@bitbucket.org:company123/repo456.git (fetch)
origin  git@bitbucket.org:company123/repo456.git (push)

Adding ""-v"" to 'ssh -i /home/my_user/.ssh/id_ed25519' reveals that my RSA key is being used, instead of ED. Why?
","I had the same issue with the recent Ubuntu version:
Using -vvv revealed following:
debug2: key: /home/ubuntu/.ssh/id_rsa (0x5628e48246d0), agent
debug2: key: /home/ubuntu/code/id_rsa (0x5628e4820af0), explicit

Adding -o IdentitiesOnly=yes solved it.
Full git command:
GIT_SSH_COMMAND='ssh -o IdentitiesOnly=yes -i /home/ubuntu/code/id_rsa -F /dev/null' git pull

","3671","<git><ssh><public-key-encryption>","4","2","2","2019-04-14 21:09:47","","0","1","","","","2018-02-20 05:02:55",""
"36881029","Getting exception while trying to get the private key from certificate","I'm doing RSA encryption and decryption in my application.I have two files placed in assets folder, public_key.cer for encryption and private_key.cer for decryption.Getting the public key from file I'm doing like below.
CertificateFactory certFactory = CertificateFactory.getInstance(X.509, BC);
InputStream is = context.getAssets().open(""public_Key.cer"");
X509Certificate cert = (X509Certificate) certFactory.generateCertificate(is);
publicKey = cert.getPublicKey();

RSA encryption is working fine,while i'm facing problem while trying to get privae key from certificate.Below is the code using to get the private key
InputStream is = context.getAssets().open(""private_key.cer"");
PKCS8EncodedKeySpec privSpec = new PKCS8EncodedKeySpec(new BASE64Decoder().decodeBuffer(is));
KeyFactory keyFactory = KeyFactory.getInstance(""RSA"", ""BC"");
PrivateKey privateKey = keyFactory.generatePrivate(privSpec);

I'm getting exception.
    com.android.org.bouncycastle.jcajce.provider.asymmetric.util.ExtendedInvalidKeySpecException: unable to process key spec: java.lang.IllegalArgumentException: unknown object in getInstance: com.android.org.bouncycastle.asn1.DERApplicationSpecific
 at com.android.org.bouncycastle.jcajce.provider.asymmetric.rsa.KeyFactorySpi.engineGeneratePrivate(KeyFactorySpi.java:105)
 at java.security.KeyFactory.generatePrivate(KeyFactory.java:186)
 at com.teknospire.ndasenda_agent.utils.Conversion.decryptUsingPrivateKey(Conversion.java:111)
 at com.teknospire.ndasenda_agent.utils.Conversion.getDecryptedSkey(Conversion.java:243)
 at com.teknospire.ndasenda_agent.json.JsonCreationAndExtraction.readLoginParams(JsonCreationAndExtraction.java:40)
 at com.mockUp.ndasenda.LoginActivity$LoginRequest.doInBackground(LoginActivity.java:283)
 at com.mockUp.ndasenda.LoginActivity$LoginRequest.doInBackground(LoginActivity.java:1)
 at android.os.AsyncTask$2.call(AsyncTask.java:288)
 at java.util.concurrent.FutureTask.run(FutureTask.java:237)
 at android.os.AsyncTask$SerialExecutor$1.run(AsyncTask.java:231)
 at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1112)
 at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:587)
 at java.lang.Thread.run(Thread.java:848)
 Caused by: java.lang.IllegalArgumentException: unknown object in getInstance: com.android.org.bouncycastle.asn1.DERApplicationSpecific
 at com.android.org.bouncycastle.asn1.ASN1Sequence.getInstance(ASN1Sequence.java:50)
 at com.android.org.bouncycastle.asn1.ASN1Sequence.getInstance(ASN1Sequence.java:33)
 at com.android.org.bouncycastle.asn1.pkcs.PrivateKeyInfo.getInstance(PrivateKeyInfo.java:45)
 at com.android.org.bouncycastle.jcajce.provider.asymmetric.rsa.KeyFactorySpi.engineGeneratePrivate(KeyFactorySpi.java:91)
 ... 12 more
 java.lang.NullPointerException
 at org.bouncycastle.crypto.params.KeyParameter.<init>(KeyParameter.java:13)
 at com.teknospire.ndasenda_agent.utils.Conversion.decryptUsingSessionKey(Conversion.java:145)
 at com.teknospire.ndasenda_agent.utils.Conversion.getDecryptionData(Conversion.java:185)
 at com.teknospire.ndasenda_agent.json.JsonCreationAndExtraction.readLoginParams(JsonCreationAndExtraction.java:41)
 at com.mockUp.ndasenda.LoginActivity$LoginRequest.doInBackground(LoginActivity.java:283)
 at com.mockUp.ndasenda.LoginActivity$LoginRequest.doInBackground(LoginActivity.java:1)
 at android.os.AsyncTask$2.call(AsyncTask.java:288)
 at java.util.concurrent.FutureTask.run(FutureTask.java:237)
 at android.os.AsyncTask$SerialExecutor$1.run(AsyncTask.java:231)
 at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1112)
 at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:587)
 at java.lang.Thread.run(Thread.java:848)

Can anyone help me, how to read private key from .cer file.
Thanks in advance.
","Check this for the basic implementation
Excerpt from the site
Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());

    byte[] input = new byte[] { (byte) 0xbe, (byte) 0xef };
    Cipher cipher = Cipher.getInstance(""RSA/None/NoPadding"", ""BC"");

    KeyFactory keyFactory = KeyFactory.getInstance(""RSA"", ""BC"");
    RSAPublicKeySpec pubKeySpec = new RSAPublicKeySpec(new BigInteger(
        ""12345678"", 16), new BigInteger(""11"", 16));
    RSAPrivateKeySpec privKeySpec = new RSAPrivateKeySpec(new BigInteger(
        ""12345678"", 16), new BigInteger(""12345678"",
        16));

    RSAPublicKey pubKey = (RSAPublicKey) keyFactory.generatePublic(pubKeySpec);
    RSAPrivateKey privKey = (RSAPrivateKey) keyFactory.generatePrivate(privKeySpec);

    cipher.init(Cipher.ENCRYPT_MODE, pubKey);

    byte[] cipherText = cipher.doFinal(input);
    System.out.println(""cipher: "" + new String(cipherText));

    cipher.init(Cipher.DECRYPT_MODE, privKey);
    byte[] plainText = cipher.doFinal(cipherText);
    System.out.println(""plain : "" + new String(plainText));

","3648","<java><android><rsa><public-key-encryption><private-key>","0","0","2","2016-04-27 06:29:21","","1","3","4085470","","2016-04-27 05:37:53","2016-04-27 05:28:46",""
"36881029","Getting exception while trying to get the private key from certificate","I'm doing RSA encryption and decryption in my application.I have two files placed in assets folder, public_key.cer for encryption and private_key.cer for decryption.Getting the public key from file I'm doing like below.
CertificateFactory certFactory = CertificateFactory.getInstance(X.509, BC);
InputStream is = context.getAssets().open(""public_Key.cer"");
X509Certificate cert = (X509Certificate) certFactory.generateCertificate(is);
publicKey = cert.getPublicKey();

RSA encryption is working fine,while i'm facing problem while trying to get privae key from certificate.Below is the code using to get the private key
InputStream is = context.getAssets().open(""private_key.cer"");
PKCS8EncodedKeySpec privSpec = new PKCS8EncodedKeySpec(new BASE64Decoder().decodeBuffer(is));
KeyFactory keyFactory = KeyFactory.getInstance(""RSA"", ""BC"");
PrivateKey privateKey = keyFactory.generatePrivate(privSpec);

I'm getting exception.
    com.android.org.bouncycastle.jcajce.provider.asymmetric.util.ExtendedInvalidKeySpecException: unable to process key spec: java.lang.IllegalArgumentException: unknown object in getInstance: com.android.org.bouncycastle.asn1.DERApplicationSpecific
 at com.android.org.bouncycastle.jcajce.provider.asymmetric.rsa.KeyFactorySpi.engineGeneratePrivate(KeyFactorySpi.java:105)
 at java.security.KeyFactory.generatePrivate(KeyFactory.java:186)
 at com.teknospire.ndasenda_agent.utils.Conversion.decryptUsingPrivateKey(Conversion.java:111)
 at com.teknospire.ndasenda_agent.utils.Conversion.getDecryptedSkey(Conversion.java:243)
 at com.teknospire.ndasenda_agent.json.JsonCreationAndExtraction.readLoginParams(JsonCreationAndExtraction.java:40)
 at com.mockUp.ndasenda.LoginActivity$LoginRequest.doInBackground(LoginActivity.java:283)
 at com.mockUp.ndasenda.LoginActivity$LoginRequest.doInBackground(LoginActivity.java:1)
 at android.os.AsyncTask$2.call(AsyncTask.java:288)
 at java.util.concurrent.FutureTask.run(FutureTask.java:237)
 at android.os.AsyncTask$SerialExecutor$1.run(AsyncTask.java:231)
 at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1112)
 at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:587)
 at java.lang.Thread.run(Thread.java:848)
 Caused by: java.lang.IllegalArgumentException: unknown object in getInstance: com.android.org.bouncycastle.asn1.DERApplicationSpecific
 at com.android.org.bouncycastle.asn1.ASN1Sequence.getInstance(ASN1Sequence.java:50)
 at com.android.org.bouncycastle.asn1.ASN1Sequence.getInstance(ASN1Sequence.java:33)
 at com.android.org.bouncycastle.asn1.pkcs.PrivateKeyInfo.getInstance(PrivateKeyInfo.java:45)
 at com.android.org.bouncycastle.jcajce.provider.asymmetric.rsa.KeyFactorySpi.engineGeneratePrivate(KeyFactorySpi.java:91)
 ... 12 more
 java.lang.NullPointerException
 at org.bouncycastle.crypto.params.KeyParameter.<init>(KeyParameter.java:13)
 at com.teknospire.ndasenda_agent.utils.Conversion.decryptUsingSessionKey(Conversion.java:145)
 at com.teknospire.ndasenda_agent.utils.Conversion.getDecryptionData(Conversion.java:185)
 at com.teknospire.ndasenda_agent.json.JsonCreationAndExtraction.readLoginParams(JsonCreationAndExtraction.java:41)
 at com.mockUp.ndasenda.LoginActivity$LoginRequest.doInBackground(LoginActivity.java:283)
 at com.mockUp.ndasenda.LoginActivity$LoginRequest.doInBackground(LoginActivity.java:1)
 at android.os.AsyncTask$2.call(AsyncTask.java:288)
 at java.util.concurrent.FutureTask.run(FutureTask.java:237)
 at android.os.AsyncTask$SerialExecutor$1.run(AsyncTask.java:231)
 at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1112)
 at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:587)
 at java.lang.Thread.run(Thread.java:848)

Can anyone help me, how to read private key from .cer file.
Thanks in advance.
","Code for getting Private key from a file:
    private KeyStore.PrivateKeyEntry getKeyFromFile(String keyStoreFile,
    String Password, Context cntx) {
    KeyStore.PrivateKeyEntry entry = null;
    try {
        AssetManager am = cntx.getAssets();
        char[] keyStorePassword = Password.toCharArray();
        // Load the KeyStore and get the signing key and certificate.
        KeyStore ks = KeyStore.getInstance(""PKCS12"");

        ks.load(am.open(keyStoreFile), keyStorePassword);
        String alias = ks.aliases().nextElement();

        Entry entry1 = ks.getEntry(alias, new KeyStore.PasswordProtection(
                keyStorePassword));
        entry = (KeyStore.PrivateKeyEntry) entry1;
    } catch (Exception e) {
        e.printStackTrace();
    }
    return entry;
}

You can decrypt your data using following method:
  public byte[] decryptUsingPrivateKey(String encryptedData, Context cntx) {

    byte[] utf8 = null;
    try {
        KeyStore.PrivateKeyEntry privateKey = getKeyFromFile(
                ""PrivateKeyFile.pfx"", ""privatekeypassword"", cntx);

        Cipher rsa;
        rsa = Cipher.getInstance(""RSA/ECB/PKCS1Padding"");
        rsa.init(Cipher.DECRYPT_MODE, privateKey.getPrivateKey());
        utf8 = rsa.doFinal(Base64.decode(encryptedData));

    } catch (Exception e) {
        System.out.println(e);
    }

    return utf8;
}

Note: 

To use this you have to compile the library 'bcprov-jdk15on-152.jar' in your application
Using private key file in android is not a good practice. Hope you are using it in test server.

","3648","<java><android><rsa><public-key-encryption><private-key>","0","0","2","2016-04-27 06:29:21","","1","3","4085470","","2016-04-27 05:37:53","2016-04-27 05:28:46",""
"19608727","encrypt or sign string with public key in iOS with Objective C","i have a private key. Text File that begins like ""--- begin private key...""
i want to use that key to encrypt an NSString. since its the private key, better call it sign an NSString.
can this be done without any external frameworks?
the result should be equivalent to the php openssl_sign function.
","The iOS SDK framework you will need to use is called CommonCrypto. Here's a very good article that describes the right way to go about it.
Edit: I missed the part about compatibility with the PHP function openssl_sign. The solution below resolves that.
The way to do this so that it's compatible with the PHP function openssl_sign is to use the OpenSSL library. The openssl_sign function uses OpenSSL's EVP API internally to encrypt the input string using the private key and compute the SHA-1 hash digest of that encrypted string. It's common then to convert this hash digest into a Base64-encoded string.

Unfortunately, the iOS SDK does not include OpenSSL, but it's easy to build it. The following instructions for building OpenSSL for iOS are taken from this blog post and are reproduced here to provide a complete solution to the question. 
In Terminal, follow those steps to build the OpenSSL library for iOS:
# Make a directory in which to run the build
mkdir ~/openssl-ios
cd ~/openssl-ios

# Download the openssl source (verify the file before using it in production!)
curl -O http://www.openssl.org/source/openssl-1.0.1e.tar.gz

# Download the openssl iOS build script
curl -O https://raw.github.com/Raphaelios/raphaelios-scripts/master/openssl/build-openssl.sh

# Make the build script executable
chmod +x build-openssl.sh

# Run the script (takes about 3min on an Intel Core i5)
./build-openssl.sh

This will take a few minutes but once it's complete you can verify that the build library is a universal library that you can use on iOS devices and in the iOS Simulator using the following command:
lipo -info ~/openssl-ios/lib/*.a

Now that the OpenSSL library has been built, let's got on with writing the code to sign a string.

First, we need to setup the Xcode project to link against the OpenSSL library. Drag & drop both libcrypto.a and libssl.a to the Frameworks group in the Project Navigator of your iOS project. In your project's Build Settings, add the following to the Header Search Paths setting:
~/openssl-ios/include/include

Next, create a new Objective-C Category file called openssl_sign on the NSString class. In NSString+openssl_sign.h, define the following interface:
@interface NSString (openssl_sign)

- (NSString *)signStringWithPrivateKey:(NSData *)privateKey;

@end

In NSString+openssl_sign.m, add the following header imports:
#import <openssl/evp.h>
#import <openssl/pem.h>

And add the following implementation of signStringWithPrivateKey::
@implementation NSString (openssl_sign)

- (NSString *)signStringWithPrivateKey:(NSData *)privateKeyData
{
    BIO *publicBIO = NULL;
    EVP_PKEY *privateKey = NULL;

    if ((publicBIO = BIO_new_mem_buf((unsigned char *)[privateKeyData bytes], [privateKeyData length])) == NO) {
        NSLog(@""BIO_new_mem_buf() failed!"");
        return nil;
    }

    if (PEM_read_bio_PrivateKey(publicBIO, &privateKey, NULL, NULL) == NO) {
        NSLog(@""PEM_read_bio_PrivateKey() failed!"");
        return nil;
    }

    const char * cString = [self cStringUsingEncoding:NSUTF8StringEncoding];
    unsigned int stringLength = [self length];

    unsigned char * signatureBuffer[EVP_MAX_MD_SIZE];
    int signatureLength;

    EVP_MD_CTX msgDigestContext;
    const EVP_MD * msgDigest = EVP_sha1();

    EVP_MD_CTX_init(&msgDigestContext);
    EVP_SignInit(&msgDigestContext, msgDigest);
    EVP_SignUpdate(&msgDigestContext, cString, stringLength);

    if (EVP_SignFinal(&msgDigestContext, (unsigned char *)signatureBuffer, (unsigned int *)&signatureLength, privateKey) == NO) {
        NSLog(@""Failed to sign string."");
        return nil;
    }

    EVP_MD_CTX_cleanup(&msgDigestContext);
    EVP_PKEY_free(privateKey);

    NSData *signatureData = [NSData dataWithBytes:signatureBuffer length:signatureLength];
    NSString *signature = [signatureData base64EncodedStringWithOptions:0];

    return signature;
}

@end

In the class that will be signing the string, you can now import NSString+openssl_sign.h and sign the string like so:
NSData *privateKey = ...; // Read the .pem file into a NSData variable
NSString *helloSignature = [@""hello"" signStringWithPrivateKey:privateKey];

You can verify that the signatures are the same using the following command in Terminal:
echo -n ""hello"" | openssl dgst -sha1 -sign priv.pem | openssl enc -base64 | tr -d '\n'

","3636","<ios><objective-c><openssl><public-key-encryption>","1","4","2","2015-05-19 17:52:06","26184842","0","2","","","","2013-10-26 15:55:58",""
"19608727","encrypt or sign string with public key in iOS with Objective C","i have a private key. Text File that begins like ""--- begin private key...""
i want to use that key to encrypt an NSString. since its the private key, better call it sign an NSString.
can this be done without any external frameworks?
the result should be equivalent to the php openssl_sign function.
","You can solve this much easier with no external sources or components.
I found out how and wanted to share it so i may help others.

You need to load the key file a SecKeyRef and safe the maxPlainLen as well


    NSString *resourcePath = [[NSBundle mainBundle] pathForResource:privateKeyResourceName ofType:@""p12""];
    NSData *p12Data = [NSData dataWithContentsOfFile:resourcePath];

    NSMutableDictionary * options = [[NSMutableDictionary alloc] init];

    SecKeyRef privateKeyRef = NULL;

    //change to the actual password you used here
    [options setObject:@""_YOURPASSWORDHERE__"" forKey:(__bridge id)kSecImportExportPassphrase];

    CFArrayRef items = CFArrayCreate(NULL, 0, 0, NULL);

    OSStatus securityError = SecPKCS12Import((__bridge CFDataRef) p12Data,
                                             (__bridge CFDictionaryRef)options, &items);

    if (securityError == noErr && CFArrayGetCount(items) > 0) {
        CFDictionaryRef identityDict = CFArrayGetValueAtIndex(items, 0);
        SecIdentityRef identityApp =
        (SecIdentityRef)CFDictionaryGetValue(identityDict,
                                             kSecImportItemIdentity);

        securityError = SecIdentityCopyPrivateKey(identityApp, &privateKeyRef);
        if (securityError != noErr) {
            privateKeyRef = NULL;
        }
    }
    CFRelease(items);

    privateKey = privateKeyRef;
    maxPlainLen = SecKeyGetBlockSize(privateKey) - 12;


You can convert NSString with a category method to SHA1


    - (NSData*)toSha1AsData {
        // PHP uses ASCII encoding, not UTF
        const char *s = [self cStringUsingEncoding:NSASCIIStringEncoding];
        NSData *keyData = [NSData dataWithBytes:s length:strlen(s)];

        // This is the destination
        uint8_t digest[CC_SHA1_DIGEST_LENGTH] = {0};
        // This one function does an unkeyed SHA1 hash of your hash data
        CC_SHA1(keyData.bytes, keyData.length, digest);

        // Now convert to NSData structure to make it usable again
        NSData *out = [NSData dataWithBytes:digest length:CC_SHA1_DIGEST_LENGTH]

        return out;
    }


Now you can sign your SHA1 with this method


(NSData *)signSha1Data:(NSData *)data {
    size_t plainLen = [data length];
    if (plainLen > maxPlainLen) 
       {
        NSLog(@""content(%ld) is too long, must < %ld"", plainLen, maxPlainLen);
        return nil;
       }

    void *plain = malloc(plainLen);
    [data getBytes:plain
               length:plainLen];

    size_t cipherLen = 128; // currently RSA key length is set to 128 bytes
    void *cipher = malloc(cipherLen);

    OSStatus returnCode = SecKeyRawSign(privateKey, kSecPaddingPKCS1SHA1,
                                        plain, plainLen, cipher, &cipherLen);

    NSData *result = nil;
    if (returnCode != 0) {
        NSLog(@""SecKeyEncrypt fail. Error Code: %ld"", returnCode);
    }
    else {
        result = [NSData dataWithBytes:cipher
                                length:cipherLen];
    }

    free(plain);
    free(cipher);

    return result;
}

It works very well and without any external libs. There is no need to compile some wierd openssl stuff.
","3636","<ios><objective-c><openssl><public-key-encryption>","1","1","2","2015-05-19 17:52:06","26184842","0","2","","","","2013-10-26 15:55:58",""
"11516355","How to Create SeckeyRef from exponent and modulus of Public key and use in SecKeyEncrypt method","Anyone please help in Creating SecKeyRef from Exponent and Modulus being my Public exponent = 010001
and Public Modulus =008903fb6d15f352ed3b45add3216f632f7139954a5631337aba7d645ed38482e3a810b4db26aab4d1df58c147230f0c75631a3dd0554b50de44e79f4fcf205c89fd3f80e0ff8d16c2e9f56ed3ab177953d54c9c30357d04e677cedd9912906ef8a046d7b0185b7f2022a8e435b0c6ecaef93f089fc3aa3f3677550b5d842046c7 and i want to use this SecKeyEncrypt as public key
","solved the problem  NSData *publicTag=[self PublicKeyItems]; in Generating keypair and calling the method
try importing BasicEncodingRules.h and .m in your file
- (NSData *)PublicKeyItems
{
NSString *exp = @""010001"";
NSLog(@""Publickeyexp -%@"",exp);
NSData *publickeyexpdata= [self stringasdata:exp];
NSLog(@""publickeyexpdata = %@"",publickeyexpdata);
NSString *mod = @""008903fb6d15f352ed3b45add3216f632f7139954a5631337aba7d645ed38482e3a810b4db26aab4d1df58c147230f0c75631a3dd0554b50de44e79f4fcf205c89fd3f80e0ff8d16c2e9f56ed3ab177953d54c9c30357d04e677cedd9912906ef8a046d7b0185b7f2022a8e435b0c6ecaef93f089fc3aa3f3677550b5d842046c7"";
NSLog(@""Publickeymod -%@"",mod);
NSData *publickeymoddata= [self stringasdata:mod];
NSLog(@""publickeymod = %@"",publickeyexpdata);

NSMutableArray *publicarray = [[NSMutableArray alloc] init];
[publicarray addObject:publickeyexpdata];
[publicarray addObject:publickeymoddata];
NSData *testData = [publicarray berData];
NSLog(@""testdata = %@"",testData);
NSMutableArray *testArray2 = [testData berDecode];
NSLog(@""testarray = %@"",testArray2);
//STAssertEqualObjects(testArray, testArray2,
                    // @""Big items decode failed"");

NSData *testData2 = [testArray2 berData];
 NSLog(@""PublicKeyData using Publickeyitems = %@"",testData2);
return testData2;
}
-(NSData *)stringasdata:(NSString *)command {
command = [command stringByReplacingOccurrencesOfString:@"" "" withString:@""""];
command = [command stringByReplacingOccurrencesOfString:@""<"" withString:@""""];
command = [command stringByReplacingOccurrencesOfString:@"">"" withString:@""""];
NSLog(@""command= %@"",command);
NSMutableData *commandToSend= [[NSMutableData alloc] init]; unsigned char whole_byte;
int len = [command length];
int n = len/2;
char byte_chars[3] = {'\0','\0','\0'}; int i;
for (i=0; i < n; i++) {
    byte_chars[0] = [command characterAtIndex:i*2]; byte_chars[1] = [command         characterAtIndex:i*2+1]; whole_byte = strtol(byte_chars, NULL, 16); [commandToSend appendBytes:&whole_byte length:1];
}
// [commandToSend setLength:[commandToSend length]-1];
return commandToSend; 

}

","3569","<iphone><encryption><rsa><public-key-encryption>","3","0","1","2012-10-01 11:07:17","11519310","1","6","","","","2012-07-17 05:12:39",""
"19890075","Diffie-Hellman Method in C# not working","So, after all, i want to explain the method:
The ideia is to two persons exchange one value through a public channel of comunication without really sending it.
This is how this works:
https://en.wikipedia.org/wiki/Diffie-Hellman

This is my C# code:
    double primemodulus = 251;
    double generator = 11;

    public string TestarGamaValores()
    {
        Random R = new Random();
        double Alice = R.Next(1, 100); //alice exp
        double AliceCalculado = DefaultMod(Alice);

        double Bob = R.Next(1, 100); //bob exp
        double BobCalculado = DefaultMod(Bob);

        //Trocar os calculados entre eles

        double ChaveFinalAlice = CalcularAposTroca(Alice, BobCalculado);
        double ChaveFinalBob = CalcularAposTroca(Bob, AliceCalculado);

        return (""Chave Final Alice: "" + ChaveFinalAlice + "" Chave Final Bob: "" + ChaveFinalBob);
    }
                  //Calculate after exchange
    public double CalcularAposTroca(double MyExp, double HisResultFromHisModulus)
    {
        double genrt = Math.Pow(HisResultFromHisModulus, MyExp);
        double Chave = genrt % primemodulus;
        return Chave;
    }

    public double DefaultMod(double MyExp)
    {
        double genrt = Math.Pow(generator, MyExp);
        double Chave = genrt % primemodulus;
        return Chave;
    }

the only problem is, i cant get the values to be the same.
ive reaserched if the formula is ok, and i think i didnt get it wrong, but the C# code seems not to be agreeing.
the results are indeed between 0 and 251 but are always different.
so what am i doing wrong?
is the C# code ok?
","I think your problem is that you are using double instead of long (integer values), since doubles are stored only as approximations to the real number you might get rounding errors. See also this post Why is modulus operator not working for double in c#?
If you are dealing with larger values you will have to use a Structure with arbitrary size like BigInteger.
","3563","<c#><public-key-encryption><diffie-hellman>","0","2","3","2014-11-20 23:30:32","19890110","0","","","","","2013-11-10 13:09:42",""
"19890075","Diffie-Hellman Method in C# not working","So, after all, i want to explain the method:
The ideia is to two persons exchange one value through a public channel of comunication without really sending it.
This is how this works:
https://en.wikipedia.org/wiki/Diffie-Hellman

This is my C# code:
    double primemodulus = 251;
    double generator = 11;

    public string TestarGamaValores()
    {
        Random R = new Random();
        double Alice = R.Next(1, 100); //alice exp
        double AliceCalculado = DefaultMod(Alice);

        double Bob = R.Next(1, 100); //bob exp
        double BobCalculado = DefaultMod(Bob);

        //Trocar os calculados entre eles

        double ChaveFinalAlice = CalcularAposTroca(Alice, BobCalculado);
        double ChaveFinalBob = CalcularAposTroca(Bob, AliceCalculado);

        return (""Chave Final Alice: "" + ChaveFinalAlice + "" Chave Final Bob: "" + ChaveFinalBob);
    }
                  //Calculate after exchange
    public double CalcularAposTroca(double MyExp, double HisResultFromHisModulus)
    {
        double genrt = Math.Pow(HisResultFromHisModulus, MyExp);
        double Chave = genrt % primemodulus;
        return Chave;
    }

    public double DefaultMod(double MyExp)
    {
        double genrt = Math.Pow(generator, MyExp);
        double Chave = genrt % primemodulus;
        return Chave;
    }

the only problem is, i cant get the values to be the same.
ive reaserched if the formula is ok, and i think i didnt get it wrong, but the C# code seems not to be agreeing.
the results are indeed between 0 and 251 but are always different.
so what am i doing wrong?
is the C# code ok?
","you are using double which is a floating point number for something that is mathematicaly not defined for floating point numbers ... the modulo operator ...
i suggest using arbitrary precision integers like BigInteger
","3563","<c#><public-key-encryption><diffie-hellman>","0","2","3","2014-11-20 23:30:32","19890110","0","","","","","2013-11-10 13:09:42",""
"19890075","Diffie-Hellman Method in C# not working","So, after all, i want to explain the method:
The ideia is to two persons exchange one value through a public channel of comunication without really sending it.
This is how this works:
https://en.wikipedia.org/wiki/Diffie-Hellman

This is my C# code:
    double primemodulus = 251;
    double generator = 11;

    public string TestarGamaValores()
    {
        Random R = new Random();
        double Alice = R.Next(1, 100); //alice exp
        double AliceCalculado = DefaultMod(Alice);

        double Bob = R.Next(1, 100); //bob exp
        double BobCalculado = DefaultMod(Bob);

        //Trocar os calculados entre eles

        double ChaveFinalAlice = CalcularAposTroca(Alice, BobCalculado);
        double ChaveFinalBob = CalcularAposTroca(Bob, AliceCalculado);

        return (""Chave Final Alice: "" + ChaveFinalAlice + "" Chave Final Bob: "" + ChaveFinalBob);
    }
                  //Calculate after exchange
    public double CalcularAposTroca(double MyExp, double HisResultFromHisModulus)
    {
        double genrt = Math.Pow(HisResultFromHisModulus, MyExp);
        double Chave = genrt % primemodulus;
        return Chave;
    }

    public double DefaultMod(double MyExp)
    {
        double genrt = Math.Pow(generator, MyExp);
        double Chave = genrt % primemodulus;
        return Chave;
    }

the only problem is, i cant get the values to be the same.
ive reaserched if the formula is ok, and i think i didnt get it wrong, but the C# code seems not to be agreeing.
the results are indeed between 0 and 251 but are always different.
so what am i doing wrong?
is the C# code ok?
","I appreciate that You are going to implement the Diffie-Hellman algorithm idea, but for everyone who are looking for a solution I can tell that there is no need to discover the circle again.
The Diffie-Hellman secret key exchange protocol is already implemented here:
System.Security.Cryptography.ECDiffieHellmanCng 

and there is a link to great example of usage:
http://msdn.microsoft.com/en-us/library/system.security.cryptography.ecdiffiehellmancng(v=vs.110).aspx
Pay attention to measure the performance of the solution in Your environment before deploy. Process of generation PublicKey takes up to 40ms on my Intel Core I5. :-(
","3563","<c#><public-key-encryption><diffie-hellman>","0","1","3","2014-11-20 23:30:32","19890110","0","","","","","2013-11-10 13:09:42",""
"18164785","Encrypting text in Java using the RSA algorithm","I'm trying to use RSA encryption in Java. 
I'm generating a public key and using it to encrypt text. My problem is that when I pass in the same text and the same key two time, the encrypted results are different. This means I can't use my encryption to test if entered text is equal to a stored result of a previous encryption.
This is my encryption class:
   import java.security.InvalidKeyException;
   import java.security.KeyPair;
   import java.security.KeyPairGenerator;
   import java.security.NoSuchAlgorithmException;
   import java.security.PublicKey;
   import java.util.Arrays;

   import javax.crypto.BadPaddingException;
   import javax.crypto.Cipher;
   import javax.crypto.IllegalBlockSizeException;
   import javax.crypto.NoSuchPaddingException;
   /**
    * The class encrypts text using an RSA algorithm.
    *
    */
   public class RSAEncryption {
       //RSA algorithm
       private final String ALGORITHM = ""RSA"";

/**
 * The generateKey method generates a public key for use in RSA encryption.
 * @return key a PublicKey for use in RSA encryption.
 */
public PublicKey generateKey(){
    KeyPair key = null;
    KeyPairGenerator keyGen;
    try {
        keyGen = KeyPairGenerator.getInstance(ALGORITHM); //gets instance of the alogrithm
        keyGen.initialize(1024); //a 1021 bit key
        key = keyGen.generateKeyPair(); //makes a pair
    } catch (NoSuchAlgorithmException e) {

        e.printStackTrace();
    }
    return key.getPublic(); //returns the public key. Private key never stored.
}

    /**
    * The encrypt method takes in text and a key and encrypts the text using the RSA encryption algorithm.
    * @params text a String, the text to encrypt.
    * @params key a PublicKey to use in encryption.
    * @returns encryptedText a byte array representing the result of the encryption.

public byte[] encrypt(String text, PublicKey key){
    byte[] encryptedText = null;
    Cipher cipher;
    try {
        cipher = Cipher.getInstance(ALGORITHM); //gets instance of RSA
        cipher.init(Cipher.ENCRYPT_MODE, key); //in encryption mode with the key
        encryptedText = cipher.doFinal(text.getBytes()); //carry out the encryption
    } catch (NoSuchAlgorithmException e) {          
        e.printStackTrace();
    } catch (NoSuchPaddingException e) {            
        e.printStackTrace();
    } catch (IllegalBlockSizeException e) {         
        e.printStackTrace();
    } catch (BadPaddingException e) {           
        e.printStackTrace();
    } catch (InvalidKeyException e) {       
        e.printStackTrace();
    }
    return encryptedText; //return encrypted result
}

/**
 * The authenticate method checks if entered text, once encrypted, matches the stored byte[].
 * @param text a String, the text to encrypt.
 * @param stored a byte[], the result of a prior encryption.
 * @param key a PublicKey, a result of the generateKey method.
 * @return boolean, true if the text is valid, false otherwise.
 */

public boolean authenticate(String text, byte[] stored, PublicKey key){
    byte[] encryptText = encrypt(text,key); //encrypt the entered text
    return Arrays.equals(stored, encryptText); //check if the stored and entered byte[] are the same.
}
} 

I've written JUnit tests for this:
import static org.junit.Assert.*;

import java.security.PublicKey;
import java.util.Arrays;

import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;


public class RSAEncryptionTest {

RSAEncryption cipher;
String text;

@Before
public void setUp(){
    cipher = new RSAEncryption();
    text = ""text"";
}

@Test
public void testEncryptionGenerateKeyGeneratesANewKeyWhenCalled(){

    PublicKey key = cipher.generateKey();

    assertEquals(false,key.equals(cipher.generateKey()));
}

@Test
public void testEncryptionEncryptMethodRepeatablyEncrypts(){

    PublicKey key = cipher.generateKey();

    byte[] encrypted = cipher.encrypt(text,key);
    Assert.assertArrayEquals(encrypted, cipher.encrypt(text,key));
    //test fails
}


@Test
public void testEncryptionAuthenticateMethodReturnsTrueWhenValidTextPassedIn(){

    PublicKey key = cipher.generateKey();

    byte[] encrypted = cipher.encrypt(text,key);

    assertEquals(true,cipher.authenticate(text,encrypted,key));
            //test fails
}


@Test
public void testEncryptionAuthenticateMethodReturnsFalseWhenInvalidTextPassedIn(){

    PublicKey key = cipher.generateKey();

    byte[] encrypted = cipher.encrypt(text,key);

    assertEquals(false,cipher.authenticate(""text1"",encrypted,key)); 
} 

}

The second and third tests fail.
Any ideas how to repeatably encrypt text using RSA?
","The output of an RSA cipher is not the same each time for a given plaintext when using an appropriate padding scheme (generally PKCS#1 or OAEP padding). Encrypting a given plaintext will result in different ciphertext each time. If the cipher generated the same output for a given input every time it would be a security vulnerability.
That being said you can force Java to use a non padded RSA cipher by using the spec ""RSA/ECB/NOPADDING"" for Cipher.getInstance(String). Doing so will result in your tests passing, but as I said earlier this is not very secure.
","3510","<java><encryption><junit><public-key-encryption>","2","2","2","2013-08-10 18:58:56","18164903","0","0","","","","2013-08-10 17:57:05",""
"18164785","Encrypting text in Java using the RSA algorithm","I'm trying to use RSA encryption in Java. 
I'm generating a public key and using it to encrypt text. My problem is that when I pass in the same text and the same key two time, the encrypted results are different. This means I can't use my encryption to test if entered text is equal to a stored result of a previous encryption.
This is my encryption class:
   import java.security.InvalidKeyException;
   import java.security.KeyPair;
   import java.security.KeyPairGenerator;
   import java.security.NoSuchAlgorithmException;
   import java.security.PublicKey;
   import java.util.Arrays;

   import javax.crypto.BadPaddingException;
   import javax.crypto.Cipher;
   import javax.crypto.IllegalBlockSizeException;
   import javax.crypto.NoSuchPaddingException;
   /**
    * The class encrypts text using an RSA algorithm.
    *
    */
   public class RSAEncryption {
       //RSA algorithm
       private final String ALGORITHM = ""RSA"";

/**
 * The generateKey method generates a public key for use in RSA encryption.
 * @return key a PublicKey for use in RSA encryption.
 */
public PublicKey generateKey(){
    KeyPair key = null;
    KeyPairGenerator keyGen;
    try {
        keyGen = KeyPairGenerator.getInstance(ALGORITHM); //gets instance of the alogrithm
        keyGen.initialize(1024); //a 1021 bit key
        key = keyGen.generateKeyPair(); //makes a pair
    } catch (NoSuchAlgorithmException e) {

        e.printStackTrace();
    }
    return key.getPublic(); //returns the public key. Private key never stored.
}

    /**
    * The encrypt method takes in text and a key and encrypts the text using the RSA encryption algorithm.
    * @params text a String, the text to encrypt.
    * @params key a PublicKey to use in encryption.
    * @returns encryptedText a byte array representing the result of the encryption.

public byte[] encrypt(String text, PublicKey key){
    byte[] encryptedText = null;
    Cipher cipher;
    try {
        cipher = Cipher.getInstance(ALGORITHM); //gets instance of RSA
        cipher.init(Cipher.ENCRYPT_MODE, key); //in encryption mode with the key
        encryptedText = cipher.doFinal(text.getBytes()); //carry out the encryption
    } catch (NoSuchAlgorithmException e) {          
        e.printStackTrace();
    } catch (NoSuchPaddingException e) {            
        e.printStackTrace();
    } catch (IllegalBlockSizeException e) {         
        e.printStackTrace();
    } catch (BadPaddingException e) {           
        e.printStackTrace();
    } catch (InvalidKeyException e) {       
        e.printStackTrace();
    }
    return encryptedText; //return encrypted result
}

/**
 * The authenticate method checks if entered text, once encrypted, matches the stored byte[].
 * @param text a String, the text to encrypt.
 * @param stored a byte[], the result of a prior encryption.
 * @param key a PublicKey, a result of the generateKey method.
 * @return boolean, true if the text is valid, false otherwise.
 */

public boolean authenticate(String text, byte[] stored, PublicKey key){
    byte[] encryptText = encrypt(text,key); //encrypt the entered text
    return Arrays.equals(stored, encryptText); //check if the stored and entered byte[] are the same.
}
} 

I've written JUnit tests for this:
import static org.junit.Assert.*;

import java.security.PublicKey;
import java.util.Arrays;

import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;


public class RSAEncryptionTest {

RSAEncryption cipher;
String text;

@Before
public void setUp(){
    cipher = new RSAEncryption();
    text = ""text"";
}

@Test
public void testEncryptionGenerateKeyGeneratesANewKeyWhenCalled(){

    PublicKey key = cipher.generateKey();

    assertEquals(false,key.equals(cipher.generateKey()));
}

@Test
public void testEncryptionEncryptMethodRepeatablyEncrypts(){

    PublicKey key = cipher.generateKey();

    byte[] encrypted = cipher.encrypt(text,key);
    Assert.assertArrayEquals(encrypted, cipher.encrypt(text,key));
    //test fails
}


@Test
public void testEncryptionAuthenticateMethodReturnsTrueWhenValidTextPassedIn(){

    PublicKey key = cipher.generateKey();

    byte[] encrypted = cipher.encrypt(text,key);

    assertEquals(true,cipher.authenticate(text,encrypted,key));
            //test fails
}


@Test
public void testEncryptionAuthenticateMethodReturnsFalseWhenInvalidTextPassedIn(){

    PublicKey key = cipher.generateKey();

    byte[] encrypted = cipher.encrypt(text,key);

    assertEquals(false,cipher.authenticate(""text1"",encrypted,key)); 
} 

}

The second and third tests fail.
Any ideas how to repeatably encrypt text using RSA?
","RSA is a public-key encryption scheme.  It sounds like you actually want to use a hashing algorithm (e.g. SHA-256 or SHA-512).  I say this because you say:

This means I can't use my encryption to test if entered text is equal
  to a stored result of a previous encryption.

If this is your goal, you should use a hashing algorithm.  By design, RSA encryption should include a padding step to ensure that the ciphertext differs:

To avoid these problems, practical RSA implementations typically embed some form of structured, randomized padding into the value m before encrypting it. This padding ensures that m does not fall into the range of insecure plaintexts, and that a given message, once padded, will encrypt to one of a large number of different possible ciphertexts.

-- http://en.wikipedia.org/wiki/RSA_%28algorithm%29
","3510","<java><encryption><junit><public-key-encryption>","2","3","2","2013-08-10 18:58:56","18164903","0","0","","","","2013-08-10 17:57:05",""
"4308861","Heroku HIPAA Compliance","Is it possible to run apps on Heroku that are HIPAA compliant? More specifically, I need two apps, one that stores member information and another that stores private health information of the members. I intend to encrypt sensitive data using both asymmetric and symmetric key encryption–asymmetric for the keys that link members with their sensitive data on the other app, and symmetric for specific fields in the members app, such as name, email address and phone. My main concern is that anyone at Heroku can break the asymmetric encryption, since they have access to both apps (and private keys). Am I correct to be concerned about this, or does the infrastructure of Amazon EC2 prevent Heroku staff from accessing both apps? 
","Amazon has a whitepaper on HIPAA compliance with AWS (just google AWS Hipaa compliance) where they talk about their HIPAA bona fides. For example, AWS sysadmins don't have direct login access to customer OS images. 
To the best of my knowledge, Heroku has not shared details of how they secure their individual customer accounts.
","3500","<heroku><public-key-encryption><hipaa>","13","7","4","2018-01-18 20:39:26","4309017","0","2","","","","2010-11-29 22:45:21",""
"4308861","Heroku HIPAA Compliance","Is it possible to run apps on Heroku that are HIPAA compliant? More specifically, I need two apps, one that stores member information and another that stores private health information of the members. I intend to encrypt sensitive data using both asymmetric and symmetric key encryption–asymmetric for the keys that link members with their sensitive data on the other app, and symmetric for specific fields in the members app, such as name, email address and phone. My main concern is that anyone at Heroku can break the asymmetric encryption, since they have access to both apps (and private keys). Am I correct to be concerned about this, or does the infrastructure of Amazon EC2 prevent Heroku staff from accessing both apps? 
","Heroku has told me they will not sign Business Associate Agreements at the moment, so if you store any PHI on the server it is not possible to be HIPAA compliant.
","3500","<heroku><public-key-encryption><hipaa>","13","2","4","2018-01-18 20:39:26","4309017","0","2","","","","2010-11-29 22:45:21",""
"4308861","Heroku HIPAA Compliance","Is it possible to run apps on Heroku that are HIPAA compliant? More specifically, I need two apps, one that stores member information and another that stores private health information of the members. I intend to encrypt sensitive data using both asymmetric and symmetric key encryption–asymmetric for the keys that link members with their sensitive data on the other app, and symmetric for specific fields in the members app, such as name, email address and phone. My main concern is that anyone at Heroku can break the asymmetric encryption, since they have access to both apps (and private keys). Am I correct to be concerned about this, or does the infrastructure of Amazon EC2 prevent Heroku staff from accessing both apps? 
","HIPAA compliance involves a number of different areas, including more than just technology. Specifically regarding the technology requirements within HIPAA, there are a bunch of requirements, but the one that you most obviously can't meet with Heroku is this one:

164.314 Organizational requirements. (B) (B) In accordance with 164.308(b)(2), ensure that any subcontractors that create, receive, maintain, or transmit electronic protected health information on behalf of the business associate agree to comply with the applicable requirements of this subpart by entering into a contract or other arrangement that complies with this section;

You need a BAA from Heroku. HIPAA doesn't distinguish between encrypted and unencrypted data when it defines subcontractors and business associates. For a good sense of all that is required of HIPAA, here's a comprehensive list - https://catalyze.io/hipaa/. Hope that helps.
","3500","<heroku><public-key-encryption><hipaa>","13","3","4","2018-01-18 20:39:26","4309017","0","2","","","","2010-11-29 22:45:21",""
"4308861","Heroku HIPAA Compliance","Is it possible to run apps on Heroku that are HIPAA compliant? More specifically, I need two apps, one that stores member information and another that stores private health information of the members. I intend to encrypt sensitive data using both asymmetric and symmetric key encryption–asymmetric for the keys that link members with their sensitive data on the other app, and symmetric for specific fields in the members app, such as name, email address and phone. My main concern is that anyone at Heroku can break the asymmetric encryption, since they have access to both apps (and private keys). Am I correct to be concerned about this, or does the infrastructure of Amazon EC2 prevent Heroku staff from accessing both apps? 
","Heroku has announced their Shield accounts that will provide HIPAA compliance.
From the link
 The Shield Private Dyno includes an encrypted ephemeral file system
 and restricts SSL termination from using TLS 1.0 which is considered 
 vulnerable. Shield Private Postgres further guarantees that data is 
 always encrypted in transit and at rest. Heroku also captures a high 
 volume of security monitoring events for Shield dynos and databases 
 which helps meet regulatory requirements without imposing any extra 
 burden on developers.

That may or may not obviate the need for BAA's, MOU's, etc. 
","3500","<heroku><public-key-encryption><hipaa>","13","1","4","2018-01-18 20:39:26","4309017","0","2","","","","2010-11-29 22:45:21",""
"28834481","Difference between Sha1WithRSA and Sha1WithRSAEncryption?","I've noticed these two algorithms that have different names, but functionally sound very similar. When I looked further, I've found out Sha1WithRSA is available across many Security Providers, but Sha1WithRSAEncryption is only available if I use the BouncyCastle Provider. 
Example:
JcaContentSignerBuilder(""SHA1WithRSAEncryption"").setProvider(""BC"")
Is it replacable with 
JcaContentSignerBuilder(""SHA1WithRSA"").setProvider(""SunJSSE"") ?
Can someone throw some insight into this?
Thank you!
","When you take a look at BouncyCastle source code you will notice that both SHA1WITHRSAENCRYPTION and SHA1WITHRSA indicate the same algorithm - 
RSA PKCS#1 v1.5 signature with SHA-1 hash algorithm which is also identified by OID 1.2.840.113549.1.1.5.
","3433","<java><rsa><digital-signature><sha1><public-key-encryption>","2","2","1","2015-03-12 21:41:18","28841044","0","","1981328","","2015-03-12 21:41:18","2015-03-03 14:35:56",""
"27758446","How do I encode an unmanaged<SecKey> to base64 to send to another server?","I'm trying to use key pair encryption to validate identity between my app and my PHP server. To do this I need to send the public key over to the server after I generate it in my app.
if let pubKey = NSData(base64EncodedData: publicKey, options: NSDataBase64DecodingOptions.allZeros)! {
    println(pubKey)
}

publicKey is of type Unmanaged<SecKey>.
The error I'm getting in the above code is: Extra argument 'base64EncodedData' in call
How would I do this? Is there a better way?
Edit: This is how the keypair is generated:
var publicKeyPtr, privateKeyPtr: Unmanaged<SecKey>?
let parameters = [
    String(kSecAttrKeyType): kSecAttrKeyTypeRSA,
    String(kSecAttrKeySizeInBits): 2048
]
let result = SecKeyGeneratePair(parameters, &publicKeyPtr, &privateKeyPtr)
let publicKey = publicKeyPtr!.takeRetainedValue()
let privateKey = privateKeyPtr!.takeRetainedValue()
let blockSize = SecKeyGetBlockSize(publicKey)

Edit 2: So the issue is that SecKey is not NSData, so my question here should be: How do I convert a publicKey:SecKey to NSData?
","It seems that you can temporary store the key to keychain and then get it back and convert it to data: 
func convertSecKeyToBase64(inputKey: SecKey) ->String? {
    // First Temp add to keychain
    let tempTag = ""de.a-bundle-id.temp""
    let addParameters :[String:AnyObject] = [
        String(kSecClass): kSecClassKey,
        String(kSecAttrApplicationTag): tempTag,
        String(kSecAttrKeyType): kSecAttrKeyTypeRSA,
        String(kSecValueRef): inputKey,
        String(kSecReturnData):kCFBooleanTrue
    ]

    var keyPtr: Unmanaged<AnyObject>?
    let result = SecItemAdd(addParameters, &keyPtr)
    switch result {
    case noErr:
        let data = keyPtr!.takeRetainedValue() as! NSData

        // Remove from Keychain again:
        SecItemDelete(addParameters)
        let encodingParameter = NSDataBase64EncodingOptions(rawValue: 0)
        return data.base64EncodedStringWithOptions(encodingParameter)

    case errSecDuplicateItem:
        println(""Duplicate Item"")
        SecItemDelete(addParameters)
        return nil

    case errSecItemNotFound:
        println(""Not found!"")
        return nil

    default:
        println(""Error: \(result)"")
        return nil
    }
}

","3416","<swift><base64><public-key-encryption>","3","6","3","2019-10-14 07:22:49","","6","1","510734","","2015-01-03 19:40:59","2015-01-03 19:00:07",""
"27758446","How do I encode an unmanaged<SecKey> to base64 to send to another server?","I'm trying to use key pair encryption to validate identity between my app and my PHP server. To do this I need to send the public key over to the server after I generate it in my app.
if let pubKey = NSData(base64EncodedData: publicKey, options: NSDataBase64DecodingOptions.allZeros)! {
    println(pubKey)
}

publicKey is of type Unmanaged<SecKey>.
The error I'm getting in the above code is: Extra argument 'base64EncodedData' in call
How would I do this? Is there a better way?
Edit: This is how the keypair is generated:
var publicKeyPtr, privateKeyPtr: Unmanaged<SecKey>?
let parameters = [
    String(kSecAttrKeyType): kSecAttrKeyTypeRSA,
    String(kSecAttrKeySizeInBits): 2048
]
let result = SecKeyGeneratePair(parameters, &publicKeyPtr, &privateKeyPtr)
let publicKey = publicKeyPtr!.takeRetainedValue()
let privateKey = privateKeyPtr!.takeRetainedValue()
let blockSize = SecKeyGetBlockSize(publicKey)

Edit 2: So the issue is that SecKey is not NSData, so my question here should be: How do I convert a publicKey:SecKey to NSData?
","While the fact is barely documented, you can pull out everything you need (that is, modulus and exponent) from the SecKey using SecKeyCopyAttributes.
See here for the details.
","3416","<swift><base64><public-key-encryption>","3","0","3","2019-10-14 07:22:49","","6","1","510734","","2015-01-03 19:40:59","2015-01-03 19:00:07",""
"27758446","How do I encode an unmanaged<SecKey> to base64 to send to another server?","I'm trying to use key pair encryption to validate identity between my app and my PHP server. To do this I need to send the public key over to the server after I generate it in my app.
if let pubKey = NSData(base64EncodedData: publicKey, options: NSDataBase64DecodingOptions.allZeros)! {
    println(pubKey)
}

publicKey is of type Unmanaged<SecKey>.
The error I'm getting in the above code is: Extra argument 'base64EncodedData' in call
How would I do this? Is there a better way?
Edit: This is how the keypair is generated:
var publicKeyPtr, privateKeyPtr: Unmanaged<SecKey>?
let parameters = [
    String(kSecAttrKeyType): kSecAttrKeyTypeRSA,
    String(kSecAttrKeySizeInBits): 2048
]
let result = SecKeyGeneratePair(parameters, &publicKeyPtr, &privateKeyPtr)
let publicKey = publicKeyPtr!.takeRetainedValue()
let privateKey = privateKeyPtr!.takeRetainedValue()
let blockSize = SecKeyGetBlockSize(publicKey)

Edit 2: So the issue is that SecKey is not NSData, so my question here should be: How do I convert a publicKey:SecKey to NSData?
","Swift 4 method to get base64 string from SecKey, publicKey :)
guard let publicKeyData = SecKeyCopyExternalRepresentation(publicKey!, nil) else {
            NSLog(""\tError obtaining export of public key."")
            return """"
        }
        let publicKeyNSData = NSData(data: publicKeyData as Data)
        let publicKeyBase64Str = publicKeyNSData.base64EncodedString()

","3416","<swift><base64><public-key-encryption>","3","0","3","2019-10-14 07:22:49","","6","1","510734","","2015-01-03 19:40:59","2015-01-03 19:00:07",""
"34265943","Android Decryption Error","I am trying to encrypt and decrypt Strings in my Android application but I keep getting an InvalidKeyException error.
Here is my code:
//Generate Keys method
public void generateKeys() {
    Calendar cal = Calendar.getInstance();
    Date now = cal.getTime();
    cal.add(Calendar.YEAR, 25);
    Date end = cal.getTime();

    KeyPairGenerator kpg = null;
    try {
        kpg = KeyPairGenerator.getInstance(""RSA"", ""AndroidKeyStore"");
    } catch (NoSuchAlgorithmException e) {
        e.printStackTrace();
    } catch (NoSuchProviderException e) {
        e.printStackTrace();
    }
    try {
        kpg.initialize(new KeyPairGeneratorSpec.Builder(context)
                .setAlias(KEY_ALIAS)
                .setStartDate(now)
                .setEndDate(end)
                .setSerialNumber(BigInteger.valueOf(1))
                .setSubject(new X500Principal(""CN="" + KEY_ALIAS))
                .build());
    } catch (InvalidAlgorithmParameterException e) {
        e.printStackTrace();
    }

    KeyPair kp = kpg.generateKeyPair();

    KeyStore ks = null;
    try {
        ks = KeyStore.getInstance(""AndroidKeyStore"");
        ks.load(null);
        Enumeration<String> aliases = ks.aliases();
    } catch (KeyStoreException e) {
        e.printStackTrace();
    } catch (CertificateException e) {
        e.printStackTrace();
    } catch (NoSuchAlgorithmException e) {
        e.printStackTrace();
    } catch (IOException e) {
        e.printStackTrace();
    }

    KeyStore.Entry entry = null;
    try {
        entry = ks.getEntry(KEY_ALIAS, null);
    } catch (NoSuchAlgorithmException e) {
        e.printStackTrace();
    } catch (UnrecoverableEntryException e) {
        e.printStackTrace();
    } catch (KeyStoreException e) {
        e.printStackTrace();
    }
    if (!(entry instanceof KeyStore.PrivateKeyEntry)) {
        Log.e(LOG_TAG, ""Not an instance of PrivateKeyEntry."");
    }
    else{
        privKey = ((KeyStore.PrivateKeyEntry) entry).getPrivateKey();
        pubKey = ((KeyStore.PrivateKeyEntry) entry).getCertificate().getPublicKey();
    }

}

//Encrypt Method
private String encryptString(String value){
    byte[] encodedBytes = null;
    try {
        Cipher cipher = Cipher.getInstance(""RSA/ECB/PKCS1Padding"", ""AndroidOpenSSL"");
        cipher.init(Cipher.ENCRYPT_MODE,  pubKey);
        encodedBytes = cipher.doFinal(value.getBytes());
    } catch (Exception e) {
        e.printStackTrace();
    }

    return Base64.encodeToString(encodedBytes, Base64.DEFAULT);
}

//Decrypt Method
private String decryptString(String value){
    byte[] decodedBytes = null;
    try {
        Cipher c = Cipher.getInstance(""RSA/ECB/PKCS1Padding"", ""AndroidOpenSSL"");
        c.init(Cipher.DECRYPT_MODE,  privKey);
        decodedBytes = c.doFinal(Base64.decode(value, Base64.DEFAULT));
    } catch (Exception e) {
        e.printStackTrace();
        Log.e(""Error"", ""Error = "" + e);
        return ""SECURE_FAILURE"";
    }

    return new String(decodedBytes);
}

//Test Code
    generateKeys();
    String encrypted = encryptString(""Hello World"");
    Log.e(""Encrypt"", ""encrypted = "" + encrypted);
    String decrypted = decryptString(encrypted);
    Log.e(""Decrypt"", ""decrypted = "" + decrypted);

It looks like the encryption works OK as it prints out something like this:

encrypted =
  SbA2iWWKQbDL7NTA9xvtjD/viYDdpx9fLRYTSZ8UQzdBy3QLqzkswBY21ErH7FPza3vZys4E4PZw
                                                                uxaGkRz0aC0FLqsYlbpcJernGm5+D5lRcBOaZmgkNY9pMf0YP75cBbcJdcmb1rDaH40nCRDnEoXv
                                                                rGESJRqT6p0NMzlZqdd9KO3tqfExwgservAWxPNtRDBbMgE4I/09418jM5Ock5eayfOuv/STwEy6
                                                                Ecd56UjFH63h+gP6ed2aMDhBVeExMxvdloY+VnsAxS5Dkoc2GdaljtjRuPK48HQASoJK8EwAMNpz

But when I try to decrypt I get the following error:

java.security.InvalidKeyException: Need RSA private or public key

I can't figure why I am getting this exception? Can anyone help?
","Try using a different provider, like this:
Cipher.getInstance(""RSA/ECB/PKCS1Padding"", ""AndroidKeyStoreBCWorkaround"");

","3391","<java><android><encryption><public-key-encryption><private-key>","10","10","3","2017-10-07 17:45:28","36434376","3","5","","","","2015-12-14 11:30:17",""
"34265943","Android Decryption Error","I am trying to encrypt and decrypt Strings in my Android application but I keep getting an InvalidKeyException error.
Here is my code:
//Generate Keys method
public void generateKeys() {
    Calendar cal = Calendar.getInstance();
    Date now = cal.getTime();
    cal.add(Calendar.YEAR, 25);
    Date end = cal.getTime();

    KeyPairGenerator kpg = null;
    try {
        kpg = KeyPairGenerator.getInstance(""RSA"", ""AndroidKeyStore"");
    } catch (NoSuchAlgorithmException e) {
        e.printStackTrace();
    } catch (NoSuchProviderException e) {
        e.printStackTrace();
    }
    try {
        kpg.initialize(new KeyPairGeneratorSpec.Builder(context)
                .setAlias(KEY_ALIAS)
                .setStartDate(now)
                .setEndDate(end)
                .setSerialNumber(BigInteger.valueOf(1))
                .setSubject(new X500Principal(""CN="" + KEY_ALIAS))
                .build());
    } catch (InvalidAlgorithmParameterException e) {
        e.printStackTrace();
    }

    KeyPair kp = kpg.generateKeyPair();

    KeyStore ks = null;
    try {
        ks = KeyStore.getInstance(""AndroidKeyStore"");
        ks.load(null);
        Enumeration<String> aliases = ks.aliases();
    } catch (KeyStoreException e) {
        e.printStackTrace();
    } catch (CertificateException e) {
        e.printStackTrace();
    } catch (NoSuchAlgorithmException e) {
        e.printStackTrace();
    } catch (IOException e) {
        e.printStackTrace();
    }

    KeyStore.Entry entry = null;
    try {
        entry = ks.getEntry(KEY_ALIAS, null);
    } catch (NoSuchAlgorithmException e) {
        e.printStackTrace();
    } catch (UnrecoverableEntryException e) {
        e.printStackTrace();
    } catch (KeyStoreException e) {
        e.printStackTrace();
    }
    if (!(entry instanceof KeyStore.PrivateKeyEntry)) {
        Log.e(LOG_TAG, ""Not an instance of PrivateKeyEntry."");
    }
    else{
        privKey = ((KeyStore.PrivateKeyEntry) entry).getPrivateKey();
        pubKey = ((KeyStore.PrivateKeyEntry) entry).getCertificate().getPublicKey();
    }

}

//Encrypt Method
private String encryptString(String value){
    byte[] encodedBytes = null;
    try {
        Cipher cipher = Cipher.getInstance(""RSA/ECB/PKCS1Padding"", ""AndroidOpenSSL"");
        cipher.init(Cipher.ENCRYPT_MODE,  pubKey);
        encodedBytes = cipher.doFinal(value.getBytes());
    } catch (Exception e) {
        e.printStackTrace();
    }

    return Base64.encodeToString(encodedBytes, Base64.DEFAULT);
}

//Decrypt Method
private String decryptString(String value){
    byte[] decodedBytes = null;
    try {
        Cipher c = Cipher.getInstance(""RSA/ECB/PKCS1Padding"", ""AndroidOpenSSL"");
        c.init(Cipher.DECRYPT_MODE,  privKey);
        decodedBytes = c.doFinal(Base64.decode(value, Base64.DEFAULT));
    } catch (Exception e) {
        e.printStackTrace();
        Log.e(""Error"", ""Error = "" + e);
        return ""SECURE_FAILURE"";
    }

    return new String(decodedBytes);
}

//Test Code
    generateKeys();
    String encrypted = encryptString(""Hello World"");
    Log.e(""Encrypt"", ""encrypted = "" + encrypted);
    String decrypted = decryptString(encrypted);
    Log.e(""Decrypt"", ""decrypted = "" + decrypted);

It looks like the encryption works OK as it prints out something like this:

encrypted =
  SbA2iWWKQbDL7NTA9xvtjD/viYDdpx9fLRYTSZ8UQzdBy3QLqzkswBY21ErH7FPza3vZys4E4PZw
                                                                uxaGkRz0aC0FLqsYlbpcJernGm5+D5lRcBOaZmgkNY9pMf0YP75cBbcJdcmb1rDaH40nCRDnEoXv
                                                                rGESJRqT6p0NMzlZqdd9KO3tqfExwgservAWxPNtRDBbMgE4I/09418jM5Ock5eayfOuv/STwEy6
                                                                Ecd56UjFH63h+gP6ed2aMDhBVeExMxvdloY+VnsAxS5Dkoc2GdaljtjRuPK48HQASoJK8EwAMNpz

But when I try to decrypt I get the following error:

java.security.InvalidKeyException: Need RSA private or public key

I can't figure why I am getting this exception? Can anyone help?
","this worked for me:
private Cipher getCipher() {
    try {
        if (Build.VERSION.SDK_INT < Build.VERSION_CODES.M) { // below android m
            return Cipher.getInstance(""RSA/ECB/PKCS1Padding"", ""AndroidOpenSSL""); // error in android 6: InvalidKeyException: Need RSA private or public key
        }
        else { // android m and above
            return Cipher.getInstance(""RSA/ECB/PKCS1Padding"", ""AndroidKeyStoreBCWorkaround""); // error in android 5: NoSuchProviderException: Provider not available: AndroidKeyStoreBCWorkaround
        }
    } catch(Exception exception) {
        throw new RuntimeException(""getCipher: Failed to get an instance of Cipher"", exception);
    }
}

","3391","<java><android><encryption><public-key-encryption><private-key>","10","13","3","2017-10-07 17:45:28","36434376","3","5","","","","2015-12-14 11:30:17",""
"34265943","Android Decryption Error","I am trying to encrypt and decrypt Strings in my Android application but I keep getting an InvalidKeyException error.
Here is my code:
//Generate Keys method
public void generateKeys() {
    Calendar cal = Calendar.getInstance();
    Date now = cal.getTime();
    cal.add(Calendar.YEAR, 25);
    Date end = cal.getTime();

    KeyPairGenerator kpg = null;
    try {
        kpg = KeyPairGenerator.getInstance(""RSA"", ""AndroidKeyStore"");
    } catch (NoSuchAlgorithmException e) {
        e.printStackTrace();
    } catch (NoSuchProviderException e) {
        e.printStackTrace();
    }
    try {
        kpg.initialize(new KeyPairGeneratorSpec.Builder(context)
                .setAlias(KEY_ALIAS)
                .setStartDate(now)
                .setEndDate(end)
                .setSerialNumber(BigInteger.valueOf(1))
                .setSubject(new X500Principal(""CN="" + KEY_ALIAS))
                .build());
    } catch (InvalidAlgorithmParameterException e) {
        e.printStackTrace();
    }

    KeyPair kp = kpg.generateKeyPair();

    KeyStore ks = null;
    try {
        ks = KeyStore.getInstance(""AndroidKeyStore"");
        ks.load(null);
        Enumeration<String> aliases = ks.aliases();
    } catch (KeyStoreException e) {
        e.printStackTrace();
    } catch (CertificateException e) {
        e.printStackTrace();
    } catch (NoSuchAlgorithmException e) {
        e.printStackTrace();
    } catch (IOException e) {
        e.printStackTrace();
    }

    KeyStore.Entry entry = null;
    try {
        entry = ks.getEntry(KEY_ALIAS, null);
    } catch (NoSuchAlgorithmException e) {
        e.printStackTrace();
    } catch (UnrecoverableEntryException e) {
        e.printStackTrace();
    } catch (KeyStoreException e) {
        e.printStackTrace();
    }
    if (!(entry instanceof KeyStore.PrivateKeyEntry)) {
        Log.e(LOG_TAG, ""Not an instance of PrivateKeyEntry."");
    }
    else{
        privKey = ((KeyStore.PrivateKeyEntry) entry).getPrivateKey();
        pubKey = ((KeyStore.PrivateKeyEntry) entry).getCertificate().getPublicKey();
    }

}

//Encrypt Method
private String encryptString(String value){
    byte[] encodedBytes = null;
    try {
        Cipher cipher = Cipher.getInstance(""RSA/ECB/PKCS1Padding"", ""AndroidOpenSSL"");
        cipher.init(Cipher.ENCRYPT_MODE,  pubKey);
        encodedBytes = cipher.doFinal(value.getBytes());
    } catch (Exception e) {
        e.printStackTrace();
    }

    return Base64.encodeToString(encodedBytes, Base64.DEFAULT);
}

//Decrypt Method
private String decryptString(String value){
    byte[] decodedBytes = null;
    try {
        Cipher c = Cipher.getInstance(""RSA/ECB/PKCS1Padding"", ""AndroidOpenSSL"");
        c.init(Cipher.DECRYPT_MODE,  privKey);
        decodedBytes = c.doFinal(Base64.decode(value, Base64.DEFAULT));
    } catch (Exception e) {
        e.printStackTrace();
        Log.e(""Error"", ""Error = "" + e);
        return ""SECURE_FAILURE"";
    }

    return new String(decodedBytes);
}

//Test Code
    generateKeys();
    String encrypted = encryptString(""Hello World"");
    Log.e(""Encrypt"", ""encrypted = "" + encrypted);
    String decrypted = decryptString(encrypted);
    Log.e(""Decrypt"", ""decrypted = "" + decrypted);

It looks like the encryption works OK as it prints out something like this:

encrypted =
  SbA2iWWKQbDL7NTA9xvtjD/viYDdpx9fLRYTSZ8UQzdBy3QLqzkswBY21ErH7FPza3vZys4E4PZw
                                                                uxaGkRz0aC0FLqsYlbpcJernGm5+D5lRcBOaZmgkNY9pMf0YP75cBbcJdcmb1rDaH40nCRDnEoXv
                                                                rGESJRqT6p0NMzlZqdd9KO3tqfExwgservAWxPNtRDBbMgE4I/09418jM5Ock5eayfOuv/STwEy6
                                                                Ecd56UjFH63h+gP6ed2aMDhBVeExMxvdloY+VnsAxS5Dkoc2GdaljtjRuPK48HQASoJK8EwAMNpz

But when I try to decrypt I get the following error:

java.security.InvalidKeyException: Need RSA private or public key

I can't figure why I am getting this exception? Can anyone help?
","Removing the provider worked for me:
Cipher.getInstance(""RSA/ECB/PKCS1Padding"")

From Java docs: ""This method traverses the list of registered security Providers, starting with the most preferred Provider. A new Cipher object encapsulating the CipherSpi implementation from the first Provider that supports the specified algorithm is returned.""
","3391","<java><android><encryption><public-key-encryption><private-key>","10","5","3","2017-10-07 17:45:28","36434376","3","5","","","","2015-12-14 11:30:17",""
"39933543","Validate JWT signature with RS512 using System.IdentityModel.Tokens.Jwt","I wanted to verify JWT signature with RS512 algorithm using public key. I fond the exact solution given in the below link and it is working perfectly. 
Verifying JWT signed with the RS256 algorithm using public key in C#
But I want to use System.IdentityModel.Tokens.Jwt with my application. Can anyone change below working example by implementing System.IdentityModel.Tokens.Jwt ? 
 static void Main(string[] args)
        {

            var token = ""eyJhbGciOiJSUzUxMiIsImtpZCI6ImsxMDY5NDgxOTAifQ.eyJleHAiOjE0NzMzNDcxODUsInN1YiI6ImZmZmZmZmZmNTcxZGJkNjBlNGIwMWYyNzk4ZGI5N2Y4Iiwic2Vzc2lkIjoiNzZlNTg4ZDIzZmM3NDBiMGFkNzIxMDk2MGYwOWFhY2IiLCJ0eXBlIjoiYXQiLCJpYXQiOjE0NzMzMzYzODV9.WA-5NFaDx38dDEbZTH_hEYpbhuC3yTA9RHCmyF3Z8L1eYmZ8w4RFv5PrjWN-HprkMP7WzVfwKeSCqU4O1_FGbl88arCgZb_Ui7VUxwftRDMErib8XFu4hGfRKrdZOOHxBY_EGLINLobYG-n0akRTycIjmH0sgroQ_3Na7sxCJSM"";
            var secretKey = ""j6Dtct-hCbacNoaTWVskOLh7Fcj4snuQ2kY3ZIpOZfJP-fsBgj6dxUFiqZSKjHikk73xiVLAb6w2SqQ8Z2Ez5hpGmG0U3eZzWkm8gwrpN-DN3eSBjBzyE5UUSTxmfMXGIBZtlwGEmmameycvX8nCJLuF83nK7Q5OQd7MIWUw-_8"";
            bool isValied = false;

            string[] tokenParts = token.Split('.');

            RSACryptoServiceProvider rsa = new RSACryptoServiceProvider();
            rsa.ImportParameters(
              new RSAParameters()
              {
                  Modulus = FromBase64Url(secretKey),
                  Exponent = FromBase64Url(""AQAB"")
              });

            HashAlgorithm H = SHA512.Create();
            byte[] hash = H.ComputeHash(Encoding.UTF8.GetBytes(tokenParts[0] + '.' + tokenParts[1]));

            RSAPKCS1SignatureDeformatter rsaDeformatter = new RSAPKCS1SignatureDeformatter(rsa);
            rsaDeformatter.SetHashAlgorithm(H.GetType().ToString());
            if (rsaDeformatter.VerifySignature(hash, FromBase64Url(tokenParts[2])))
                isValied = true;




        }

        static byte[] FromBase64Url(string base64Url)
        {
            string padded = base64Url.Length % 4 == 0
                ? base64Url : base64Url + ""===="".Substring(base64Url.Length % 4);
            string base64 = padded.Replace(""_"", ""/"")
                                  .Replace(""-"", ""+"");
            return Convert.FromBase64String(base64);
        }

","Using the latest version of System.IdentityModel.Tokens.Jwt (5.0.0) and assuming you need to validate the following JWT token:

eyJhbGciOiJSUzUxMiIsImtpZCI6IjhDOURCQzA1OEIzN0Y5NzM2QzdCMzVGMDVFMDcxOENDMDUzOUU4RDciLCJ0eXAiOiJKV1QifQ.eyJuYmYiOjE0NzYxNzg2NzMsImV4cCI6MTQ3NjE4MjI3MywiaWF0IjoxNDc2MTc4NjczLCJpc3MiOiJNRSIsImF1ZCI6IllPVSJ9.Lh0iXDREkrgfuPBAJxOlNcoctRQkAV-VuhvH4oqavSV8M5ZYKhkSJ_11FyRN24yRTZfdScbOGZwO_-7Z8qSAbeLOc5HNa52LN09si-gruQFoB2Fikvd5FhwC5tqpqZeNw6usFR05Z9hl0SV05-joDv3OVfpnl31figrNiXcgqo2bB9kEPo6XeOw_JVTOrta6bHI-q6uulc4ZrLF4UWosb5R5ALLN5hwsY2lX9LrSCLfhuMlEDyjBbvrhC5fr29Ci9NYmk4U75qhhf13nS69vX8RJ5xRW8Nw6MP3Om0WaW-yX0RhtdrGZ8GuqdOxWU25i3j_qj5-ovO3OAhh0qsdMBA

which uses RS512 (view the full token contents by decoding it online in jwt.io) you could then do the following:
string thumbprint = ""8C9DBC058B37F9736C7B35F05E0718CC0539E8D7""; // Change to your certificate

X509Certificate2 certificate = GetSigningCertificate(thumbprint);

var handler = new JwtSecurityTokenHandler();

string jwt = ""[TOKEN_TO_BE_VALIDATED]"";

SecurityToken token;
ClaimsPrincipal principal = handler.ValidateToken(jwt, new TokenValidationParameters
{
    ValidIssuer = ""ME"",
    ValidAudience = ""YOU"",
    IssuerSigningKey = new X509SecurityKey(certificate),
}, out token);

","3352","<c#><encryption><token><jwt><public-key-encryption>","1","2","1","2016-10-18 04:05:54","","0","1","-1","","2017-05-23 12:09:24","2016-10-08 14:26:47",""
"9035346","How to protect software license from fake digital signature?","I am thinking to use DSS to distribute software license to end user.
Basically, the software license is a simple text file / xml file contain the software modules and company information.  This file will be signed by using a private key.
The software license and digital signature will deploy on end user's computer.  When application launch, it will verify if the software license is valid before with a known public key.  If it is valid, it will read the information in the software license and turn on features that is licensed to use.
However, that is a weakness with this protocol.  The software license is a readable text file.  Anyone can generate public/private key pair, sign the software license and patch the software with fake public key.  It will pass the verification process and may create their own software license.
Is there any nice way to protect from fake digital signature?
","It's impossible to fully protect your software from piracy. No matter what, you will have to distribute your public key in some way and then pirates can swap it with their own. However, you can try to make it more difficult for them. For example, by embedding the public key as a string in the executable. You can even do some basic encryption on it to make it more difficult to find.
But again, if your software is worth cracking, it will be cracked.
","3291","<licensing><digital-signature><public-key-encryption>","0","2","4","2019-05-15 16:33:25","","0","1","","","","2012-01-27 15:03:17",""
"9035346","How to protect software license from fake digital signature?","I am thinking to use DSS to distribute software license to end user.
Basically, the software license is a simple text file / xml file contain the software modules and company information.  This file will be signed by using a private key.
The software license and digital signature will deploy on end user's computer.  When application launch, it will verify if the software license is valid before with a known public key.  If it is valid, it will read the information in the software license and turn on features that is licensed to use.
However, that is a weakness with this protocol.  The software license is a readable text file.  Anyone can generate public/private key pair, sign the software license and patch the software with fake public key.  It will pass the verification process and may create their own software license.
Is there any nice way to protect from fake digital signature?
","I don't know what tools you are using to develop your code, but there is an excellent description of how to achieve this in the .NET framework world, see http://www.codeproject.com/Articles/4940/Using-XML-Digital-Signatures-for-Application-Licen. The public key is embedded into the code of the application itself. I used a scheme similiar to this to license a Ruby plugin.
If someone is really determined to crack your protection then they will do it. However, this scheme will deter 99.9% of those who are tempted to rip off your software.
","3291","<licensing><digital-signature><public-key-encryption>","0","3","4","2019-05-15 16:33:25","","0","1","","","","2012-01-27 15:03:17",""
"9035346","How to protect software license from fake digital signature?","I am thinking to use DSS to distribute software license to end user.
Basically, the software license is a simple text file / xml file contain the software modules and company information.  This file will be signed by using a private key.
The software license and digital signature will deploy on end user's computer.  When application launch, it will verify if the software license is valid before with a known public key.  If it is valid, it will read the information in the software license and turn on features that is licensed to use.
However, that is a weakness with this protocol.  The software license is a readable text file.  Anyone can generate public/private key pair, sign the software license and patch the software with fake public key.  It will pass the verification process and may create their own software license.
Is there any nice way to protect from fake digital signature?
","
Anyone can generate public/private key pair, sign the software license and patch the software with fake public key. It will pass the verification process and may create their own software license.
Is there any nice way to protect from fake digital signature?

The same way you protect against someone disabling the digital signature check entirely. Your question is like asking how you keep a thief from coming in your second story leftmost window. That's not the window he's going to go through, and in any event, you keep him out the same way you keep him from coming through your other windows.
","3291","<licensing><digital-signature><public-key-encryption>","0","1","4","2019-05-15 16:33:25","","0","1","","","","2012-01-27 15:03:17",""
"9035346","How to protect software license from fake digital signature?","I am thinking to use DSS to distribute software license to end user.
Basically, the software license is a simple text file / xml file contain the software modules and company information.  This file will be signed by using a private key.
The software license and digital signature will deploy on end user's computer.  When application launch, it will verify if the software license is valid before with a known public key.  If it is valid, it will read the information in the software license and turn on features that is licensed to use.
However, that is a weakness with this protocol.  The software license is a readable text file.  Anyone can generate public/private key pair, sign the software license and patch the software with fake public key.  It will pass the verification process and may create their own software license.
Is there any nice way to protect from fake digital signature?
","There are two ways to prevent signing with new Pair of keys. 

Embed the public key with the DLL. This way public key is hidden.
Use a public key Pinning techniques. This involves obtaining a certificate from a signing authority which difficult for individuals. This whole thing falls under PKI (Public Key Infrastructure).
Third way is to Apply an Asymmetric encryption technique(AES for example) to encrypt your signed license file and embed it in your license dll. This makes the information in license a little less obvious and will prevent the basic attacks.

As pointed by others, This is not foolproof and only addresses the problem you asked.
","3291","<licensing><digital-signature><public-key-encryption>","0","0","4","2019-05-15 16:33:25","","0","1","","","","2012-01-27 15:03:17",""
"10177916","openSSL: how to initialize keys for public key encryption?","For using openSSL API for public key encryption, how is the key (public & private) initialized in a C program, given private key in *.key file format, and public key in *.pem file format:
 EVP_PKEY *key;
 /* How is key initialized ?
  */
  ctx = EVP_PKEY_CTX_new(key);

Thanks.
","try this:
        EVP_PKEY *pkey;
        FILE *f = fopen(""<path for your PEM or DER encoded key>"", ""rb"");
        if (f == NULL){
                // error handling...
        }
    //if your key is PEM encoded use this
        pkey = PEM_read_PUBKEY(f, NULL, NULL, NULL); // pkey now contains the pubKey. 
    //We are passing NULL to the others parameters because we dont need password to read a public key

    //if your key is DER encoded use this
        pkey = d2i_PUBKEY_fp(f, NULL);

        if (pkey == NULL){
                // error handling...
        }

I didnt test but should work.
","3243","<c><linux><ssl><openssl><public-key-encryption>","0","0","1","2012-04-16 16:54:48","10178041","0","","","","","2012-04-16 16:23:37",""
"9876790","error in encrypting image with RSA","I need to encrypt an image of size 151*15 with RSA.
This is the java code to encrypt the image file
import javax.crypto.Cipher;
plaintext = time;
cipher = Cipher.getInstance('RSA');
keygen = java.security.KeyPairGenerator.getInstance('RSA');
keyPair = keygen.genKeyPair();
cipher.init(Cipher.ENCRYPT_MODE, keyPair.getPrivate())

plaintextUnicodeVals = uint16(plaintext)
plaintextBytes = typecast(plaintextUnicodeVals, 'int8')
ciphertext = cipher.doFinal(plaintextBytes);

this is the image file to be encrypted

I got the folllowing error
Java exception occurred:
javax.crypto.IllegalBlockSizeException: Data must not be longer than 117 bytes
    at com.sun.crypto.provider.RSACipher.a(DashoA13*..)
    at com.sun.crypto.provider.RSACipher.engineDoFinal(DashoA13*..)
    at javax.crypto.Cipher.doFinal(DashoA13*..)

please give me the hint Or procedure so that i can approach in right direction.
Thanks
","You need to use AES for encrypting large data. RSA cannot encrypt data larger than key's size. 
So you can encrypt an AES key with RSA, and the whole image with AES (256 bit) (i.e. generate different AES key for each image). 
Also RSA is very slow and thus is not good for encrypting large data, if you want to split up an image to a large number of blocks of size 117 bytes and encrypt them one by one.

For example:
  public static byte[] encrypt(byte[] data) {
    try {
        KeyPair keyPair = initalizeKeyPair();

        final javax.crypto.Cipher rsa = javax.crypto.Cipher.getInstance(""RSA"");
        rsa.init(javax.crypto.Cipher.ENCRYPT_MODE, keyPair.getPublic());

        SecureRandom random = new SecureRandom();

        final byte[] secretKey = new byte[16];
        random.nextBytes(secretKey);

        final javax.crypto.Cipher aes = javax.crypto.Cipher.getInstance(""AES"");
        SecretKeySpec k = new SecretKeySpec(secretKey, ""AES"");
        aes.init(javax.crypto.Cipher.ENCRYPT_MODE, k);

        final byte[] ciphedKey = rsa.doFinal(secretKey);
        final byte[] ciphedData = aes.doFinal(data);

        byte[] result = new byte[256 + ciphedData.length];

        System.arraycopy(ciphedKey, 0, result, 0, 256);
        System.arraycopy(ciphedData, 0, result, 256, ciphedData.length);

        return result;
    } catch (... e) {
        throw new SomeException(e);
    }
}

","3234","<java><image><encryption><rsa><public-key-encryption>","0","4","1","2013-08-16 07:37:35","9876837","3","3","330457","","2013-08-16 07:37:35","2012-03-26 17:27:16",""
"7741771","RSA encryption in JavaScript with available modulus","I have some Java code that sends the public exponent and modulus (very, very long integer)  via json to the javascript.
I need to apply RSA encryption on a text field (password) using these values in JavaScript. 
I have tried many available things on net but no success yet. And I don't have SSL in the application.
Can someone please help me on this? Some sample/exact code will be a blessing.
","Have you checked out http://code.google.com/p/jscryptolib/ ?
Alternatively there is another implementation here: http://www-cs-students.stanford.edu/~tjw/jsbn/
You can find a demo of the second implementation here: http://www-cs-students.stanford.edu/~tjw/jsbn/rsa.html - just view source to see how it's used
","3231","<javascript><encryption><rsa><public-key-encryption>","0","6","1","2011-10-12 14:43:18","7741794","3","1","943983","","2011-10-12 14:40:38","2011-10-12 14:33:47",""
"4056969","iphone OS! RSA Encryption with public key generated by Bouncy Castle (Java)","I'm developing an application on iphone. I had an application on Java using encryption (RSA) and I created a Private Key and Public Key. I want use the Public Key in Java application on iphone. For Ex: My Public Key is byte[] publicKey = {0x01,0x02};
How can I use my publicKey to encrypt data on iphone?
I saw CryptoExercise, but i cannot build it (function: SecKeyEncrypt err:EXC_BAD_ACCESS ). Can i use getPublicKeyBits() or getPublicKeyRef()?
Here is my code:
* (NSData *)getPublicKeyBits {

OSStatus sanityCheck = noErr;

//
const char myByteArray[] = {
0x00, -0x79, 0x7C, 0x34,
0x5C, -0x36, 0x36, 0x75,
0x0E, 0x7F, -0x21, -0x05,
0x41, 0x21, 0x4F, -0x30,
0x2D, 0x5F, 0x08, -0x25,
0x07, -0x08, 0x22, -0x09,
0x32, -0x6C, 0x10, 0x1E, 0x5A,
-0x59, -0x14, -0x55, -0x73, 0x21,
0x5E, -0x54, -0x5E, -0x72, 0x37,
-0x31, -0x25, -0x45, 0x3B, 0x7D, -0x3C,
-0x6F, -0x40, -0x7E, 0x74, -0x68, -0x23,
0x42, 0x12, -0x62, -0x66, 0x4D, 0x20, -0x69,
0x28, -0x28, -0x36, -0x71, 0x21, 0x02, -0x32,
-0x19, 0x66, 0x7D, 0x3E, 0x03, 0x49, -0x66, 0x1F,
-0x38, 0x3C, 0x0A, 0x5F, 0x60, 0x1B, -0x75, 0x41, 0x48,
-0x5F, 0x1F, -0x34, -0x31, -0x09, 0x17, 0x23, 0x11, 0x1E,
-0x68, 0x0B, -0x4D, 0x69, -0x3F, -0x27, 0x13, -0x71, -0x6D,
-0x7A, 0x3A, 0x64, 0x2A, 0x6A, -0x6E, 0x3C, 0x04, -0x70, -0x1C};

NSData *publicKeyBits = NSData dataWithBytes: myByteArray length: sizeof(myByteArray);
//
//NSData * publicKeyBits = {1};

NSMutableDictionary * queryPublicKey = [NSMutableDictionary alloc] init;

// Set the public key query dictionary.
queryPublicKey setObject:(id)kSecClassKey forKey:(id)kSecClass;
queryPublicKey setObject:publicTag forKey:(id)kSecAttrApplicationTag;
queryPublicKey setObject:(id)kSecAttrKeyTypeRSA forKey:(id)kSecAttrKeyType;
[queryPublicKey setObject:NSNumber numberWithBool:YES] forKey:(id)kSecReturnData;

// Get the key bits.
sanityCheck = SecItemCopyMatching((CFDictionaryRef)queryPublicKey, (CFTypeRef *)&publicKeyBits);

if (sanityCheck != noErr)
{
printf(""sanitycheck error@@@@@"");
publicKeyBits = nil;
}

NSLog(@""** public key bits: %s"", &publicKeyBits);

queryPublicKey release;


return publicKeyBits;
}

// encrypt message

    * (void)encryptWithPublicKey:(uint8_t *)plainBuffer cipherBuffer:(uint8_t *)cipherBuffer

{
NSLog(@""== encryptWithPublicKey()"");
NSData* publicKey= [AppController sharedWrapper] getPublicKeyBits;

OSStatus status = noErr;

NSLog(@""** original plain text 0: %s"", plainBuffer);

size_t cipherBufferSize = 1;
uint8_t *pPlainText = (uint8_t*)""This is a test"";
uint8_t *aCipherText;
size_t *iCipherLength = (size_t*)""1024"";

// Error handling
// Encrypt using the public.
printf(""begin ecrypt !!!!"");
// status = SecKeyEncrypt(publicKey,
// kSecPaddingNone,
// plainBuffer,
// plainBufferSize,
// &cipherBuffer[0],
// &cipherBufferSize
// );

status = SecKeyEncrypt(publicKey,
kSecPaddingNone,
pPlainText,
strlen( (char*)pPlainText) + 1,
aCipherText,
iCipherLength);
printf(""end encrypt !!!!"");
NSLog(@""encryption result code: %d (size: %d)"", status, cipherBufferSize);
NSLog(@""encrypted text: %s"", cipherBuffer);
}

Please Help me!
Thank you very much
","I'm not 100% following it, but I think your issue could be as follows:
Public/Private key pairs are not used to encrypt data. They are used only to encrypt fixed-size blocks of data, which are short - on the order of the size of the public/private key themselves.
So they way these are used is that the public/private key is used to encrypt [something like] an AES Key - which in-turn is used with a mode (like EBC, etc) to encrypt a stream, or irregularly-sized block of data.
I think you are trying to use the Public/Private keypair to encrypt your user-data, which is likely not the correct size for the public/private key operations - thus your leaking and getting an BAD_ACCESS_ERROR.
","3213","<ios><rsa><public-key-encryption>","2","3","1","2010-10-30 18:55:53","","0","","","","","2010-10-30 02:15:39",""
"16517955","Xml Signature for XmlElement fails to verify","I apologize in advance for the rather lengthy block of code, but it's the smallest compilable example I could produce. I already omitted all error checking from the original code. I'm using Visual Studio 2012 and .NET 4.5, although this is nothing new to 4.5, it should work with any version.
I am trying to sign an XML documents' elements to protect them from tampering. I don't want to protect the whole document, but only certain elements. Maybe even different elements with different keys. 
However, when I sign three example elements and try to verify them, the first one always verifies, the other two fail. To make it even worse, the first one even succeeds if I modify it after being signed. I have googled a lot, read a lot of tutorials and even asked a theoretical question here, but I don't have any clue what I'm doing wrong. Can anybody spot my mistake?
Note: I'd be more than happy to offer the same bounty that's on friday's question to anybody solving this.
The certificate was created by executing:

""C:\Program Files (x86)\Microsoft SDKs\Windows\v7.1A\Bin\makecert"" -r -pe -n ""CN=XMLDSIG_Test"" -b 01/01/2013 -e 01/01/2014 -sky signing -ss my

The Test xml file is:
<?xml version=""1.0"" encoding=""utf-8"" ?>
<PackageRoot>
  <Package>
    <Changes >
     <Change/>
    </Changes>
  </Package>
  <Package>
    <Changes>
     <Change/>
     <Change/>
    </Changes>
  </Package>
  <Package>
    <Changes>
     <Change/>
     <Change/>
     <Change/>
    </Changes>
  </Package>
</PackageRoot>

The code to sign and verify:
namespace SOExample
{
  using System;
  using System.Security.Cryptography.X509Certificates;
  using System.Security.Cryptography.Xml;
  using System.Xml;

  public static class Program
  {
    public static void Sign(this XmlElement element, X509Certificate2 certificate)
    {
        var identifier = Guid.NewGuid().ToString();

        element.SetAttribute(""Id"", identifier);

        var signedXml = new SignedXml(element) { SigningKey = certificate.PrivateKey };

        var reference = new Reference(""#"" + identifier);

        reference.AddTransform(new XmlDsigEnvelopedSignatureTransform());

        signedXml.AddReference(reference);

        signedXml.ComputeSignature();

        var xmlDigitalSignature = signedXml.GetXml();

        element.AppendChild(element.OwnerDocument.ImportNode(xmlDigitalSignature, true));
    }

    public static bool VerifySignature(this XmlElement element, X509Certificate2 certificate)
    {
      var signedXml = new SignedXml(element);

      XmlNodeList nodeList = element.GetElementsByTagName(""Signature"");

      if (nodeList.Count != 1) return false;

      signedXml.LoadXml((XmlElement)nodeList[0]);

      return signedXml.CheckSignature(certificate, true);
    }

    public static void Main()
    {
        var xmlDoc = new XmlDocument { PreserveWhitespace = true };

        xmlDoc.Load(""ExamplePackage.xml"");

        var certificate = GetCertificateBySubject(""CN=XMLDSIG_Test"");

        foreach (XmlElement root in xmlDoc.GetElementsByTagName(""PackageRoot""))
        {
          foreach (XmlElement package in root.GetElementsByTagName(""Package""))
          {
            package.Sign(certificate);
          }
        }

        xmlDoc.Save(""test_signed.xml"");

        Console.WriteLine(""XML file signed."");
        Console.WriteLine(""Press any key to verify"");
        Console.ReadLine();

        var signedDoc = new XmlDocument();

        signedDoc.Load(""test_signed.xml"");

        foreach (XmlElement root in xmlDoc.GetElementsByTagName(""PackageRoot""))
        {
          foreach (XmlElement package in root.GetElementsByTagName(""Package""))
          {
            Console.Write(""Verifying Package "" + package.GetAttribute(""Id""));
            var success = package.VerifySignature(certificate);
            Console.WriteLine(success ? "" successful!"" : "" failed!"");
          }
        }

        Console.WriteLine(""Done."");
        Console.ReadLine();
    }

    private static X509Certificate2 GetCertificateBySubject(string certificateSubject)
    {
      var store = new X509Store(""My"", StoreLocation.CurrentUser);

      store.Open(OpenFlags.ReadOnly | OpenFlags.OpenExistingOnly);

      foreach (X509Certificate2 c in store.Certificates)
      {
        if (c.Subject == certificateSubject)
        {
          store.Close();
          return c;
        }
      }

      store.Close();
      return null;
    }
  }
}

","You have a bug in your test code. The second foreach loops again over xmlDoc instead of signedDoc. Fixing this will change the outcome to fail for all nodes.
Why they fail I don't yet know.

I couldn't find out why they fail with your code but I found a way to make it work.
The difference: All signatures are direct childs of the root element:
public static void Main()
{

    // ...

    var signedDoc = new XmlDocument { PreserveWhitespace = true };

    signedDoc.Load(""test_signed.xml"");

    foreach (XmlElement root in signedDoc.GetElementsByTagName(""PackageRoot""))
    {
        foreach (XmlElement signature in root.GetElementsByTagName(""Signature""))
        {
            var success = signature.VerifySignature(certificate);
            Console.WriteLine(success ? "" successful!"" : "" failed!"");
        }
    }

    Console.WriteLine(""Done."");
    Console.ReadLine();
}

public static void Sign(this XmlElement element, X509Certificate2 certificate)
{
    var identifier = Guid.NewGuid().ToString(""N"");
    element.SetAttribute(""Id"", identifier);

    var signedXml = new SignedXml(element) { SigningKey = certificate.PrivateKey };
    signedXml.AddReference(new Reference(""#"" + identifier));
    signedXml.ComputeSignature();

    var xmlDigitalSignature = signedXml.GetXml();

    element.OwnerDocument.DocumentElement.AppendChild(
        element.OwnerDocument.ImportNode(xmlDigitalSignature, true));
}

public static bool VerifySignature(this XmlElement element, X509Certificate2 certificate)
{
    var signedXml = new SignedXml(element.OwnerDocument);
    signedXml.LoadXml(element);

    return signedXml.CheckSignature(certificate, true);
}

One important detail to notice: PreserveWhitespace needs to be set to true for signedDoc, too.
","3212","<c#><xml><public-key-encryption><xml-signature>","2","3","1","2013-05-13 10:28:50","16519603","1","1","-1","","2017-05-23 12:09:56","2013-05-13 08:43:27",""
"8219671","Getting ""no valid OpenPGP data found"" When trying to add public key to Win 2003 server","I have been 'emailed' a list of public PGP Keys:

development: ""ssh-rsa
  AAASDHFhdfsdSDHF2SHdf932hSDF29SDFHSDF2SDFHSDF23SHDFewhw92sdfhSDFS29843SdhsdfZSDH=
  some@bunk""
staging: ""ssh-rsa
  AAASDHFhdfsdSDHF2SHdf932hSDF29SDFHSDF2SDFHSDF23SHDFewhw92sdfhSDFS29843SdhsdfZSDH=
  more@bunk""
production: ""ssh-rsa
  AAASDHFhdfsdSDHF2SHdf932hSDF29SDFHSDF2SDFHSDF23SHDFewhw92sdfhSDFS29843SdhsdfZSDH=
  serious@bunk""

And asked to install them on a server that needs them for FTPing files to another server. 
We have a Windows 2003 server and are using GPG. The encryption is AES 256.
To install the above, I have tried copying each individual ""ssh-rsa"" string and giving them their own text file (dev.txt, stag.txt, & prod.txt). 
Then, I try importing the public keys into the local server's keyring (using dev.text, for example):
$gpg --import dev.txt
The result I get in all cases is always:

gpg: no valid OpenPGP data found.  gpg: Total number processed: 0

It won't work. 
Am I adding the public keys to my server correctly? Any ideas what I am doing wrong? 
Thanks.
","Those aren't GPG keys, they're SSH keys (and either very weak ones or incomplete).
","3192","<public-key-encryption><gnupg>","0","0","1","2013-09-22 03:36:01","","1","","","","","2011-11-21 22:52:02",""
"14527506","Small portable digital signing and verification library","I'm looking for a library that allows me to authenticate data sent to embedded modules. Due to the hardware constraints, it needs to be of small footprint (both code and memory wise) and yet have security comparable to RSA-1024.
The requirements are as follows

Verification on embedded modules (custom CPUs, with only a C89 compiler available)
Signing and verification in Windows (C/C++ code)
Signing in Java (some data needs to be generated via a webpage, so Java would be a big perk)

I would very much like to not have to implement a PKCS #1 v1.5/PSS-like system myself, but I haven't been able to find any good libraries that match the above requirements. Open source would be nice, but commercial solutions are of equal interest. Note that I need access to the C-code, since it has to be recompiled for the custom CPUs.
NaCl looks promising, but it seems to be in development still.
I've had a look at OpenSSL, but it does a lot more than digital signatures and stripping out just the signature verification code was non-trivial.
Am I looking at it the wrong way?
I tried implementing SHA+RSA first, but I wasn't sure if the padding step was correct (which means that it probably wasn't secure), so I decided to post here instead for help.
EDIT: Clarification, only the verification part have the tough constraints on it. Signature and key generation will run on normal PCs.
","How can implement such a kind of solution is related to CPU and memory architecture that we have available, therefore would have to tell me more about your system. The first way would be to develop this on the cloud. Another alternative would be SCL. Also, you can found some answers on Small RSA or DSA lib without dependencies 
","3186","<c><public-key-encryption>","4","1","2","2019-02-25 20:26:39","14527728","1","1","266392","","2013-01-25 22:43:11","2013-01-25 17:51:00",""
"14527506","Small portable digital signing and verification library","I'm looking for a library that allows me to authenticate data sent to embedded modules. Due to the hardware constraints, it needs to be of small footprint (both code and memory wise) and yet have security comparable to RSA-1024.
The requirements are as follows

Verification on embedded modules (custom CPUs, with only a C89 compiler available)
Signing and verification in Windows (C/C++ code)
Signing in Java (some data needs to be generated via a webpage, so Java would be a big perk)

I would very much like to not have to implement a PKCS #1 v1.5/PSS-like system myself, but I haven't been able to find any good libraries that match the above requirements. Open source would be nice, but commercial solutions are of equal interest. Note that I need access to the C-code, since it has to be recompiled for the custom CPUs.
NaCl looks promising, but it seems to be in development still.
I've had a look at OpenSSL, but it does a lot more than digital signatures and stripping out just the signature verification code was non-trivial.
Am I looking at it the wrong way?
I tried implementing SHA+RSA first, but I wasn't sure if the padding step was correct (which means that it probably wasn't secure), so I decided to post here instead for help.
EDIT: Clarification, only the verification part have the tough constraints on it. Signature and key generation will run on normal PCs.
","Take a look at mbed TLS (formerly known as PolarSSL):

mbed TLS (formerly known as PolarSSL) makes it trivially easy for developers to include cryptographic and SSL/TLS capabilities in their (embedded) products, facilitating this functionality with a minimal coding footprint.

","3186","<c><public-key-encryption>","4","3","2","2019-02-25 20:26:39","14527728","1","1","266392","","2013-01-25 22:43:11","2013-01-25 17:51:00",""
"19605954","Getting ECPoint/ECPublicKeyParameters from byte[] in Bouncy Castle","So far I've managed to generate a ECDHE pair in bouncy castle's lightweight API. However I have issues trying to recreate the public key from an byte[].
Since the ECPublicKeyParameters object only has one method getQ() I am assuming thats all that is required to reconstruct the key. The other parameters such as the curve used (P-521) are kept constant.
I am doing the following:
AsymmetricCipherKeyPair kp = kpgen.generateKeyPair(); //ECDHE Key Generator

ECPublicKeyParameters pubKey = (ECPublicKeyParameters)kp.getPublic();
byte[] aPubKeybytes = pubKey.getQ().getEncoded(false); //Should I set to true or false?

Unless there is another way to get the raw bytes of the public key pubKey, I don't see a way to get the bytes without invoking method getQ() which returns an ECPoint object.
My question is how to reconstruct the byte[] into a ECPoint object using bouncy castle's lightweight API. Or, better yet, how to reconstruct the whole ECPublicKeyParameter object using an byte array somehow derived from the original pubKey object.
","To whomever it may concern I resolved this issue by using the PublicKeyFactory and SubjectPublicKeyInfoFactory to encode and decode the key.
Using:
byte[] key = SubjectPublicKeyInfoFactory.createSubjectPublicKeyInfo(pubKey).getEncoded();

I was able to get the raw bytes of the key.
and using:
ECPublicKeyParameters bpubKey = (ECPublicKeyParameters)PublicKeyFactory.createKey(key);

I was able to recreate the public key.
","3157","<java><bouncycastle><public-key-encryption><elliptic-curve><diffie-hellman>","3","8","1","2013-12-05 21:31:29","19614887","0","","","","","2013-10-26 11:06:49",""
"12272870","Where from does ComponentSpace Saml 2.0 take key to encrypt assertions","When I run the following code (ComponentSpace Saml 2.0 lib is used), Fiddler shows me that SAMLRequest's value is encrypted like this <input type=""hidden"" name=""SAMLRequest"" value=""PHNhbWxwOkF1dGhu....""> which is pretty expected behavior. The code implements the first step of SSO SAML 2.0 POST profile. Note that no certificate key is specified in the code to do any kind of encryption, so I wonder how does ComponentSpace lib decide which one to pick up?
   var authnRequest = new AuthnRequest
        {
            Destination = @""https://idpserver/..."",
            Issuer = new Issuer(@""https://sp/...""),
            ForceAuthn = false,
            NameIDPolicy = new NameIDPolicy(null, null, true), 
            ProtocolBinding = SAMLIdentifiers.BindingURIs.HTTPPost,
            AssertionConsumerServiceURL = @""https://sp/...""
        };

        var relayState = RelayStateCache.Add(new RelayState(@""https://sp/..."", null));

        ServiceProvider.SendAuthnRequestByHTTPPost(
            new HttpResponseWrapper(_context.Response), 
            @""https://idpserver/..."", 
            authnRequest.ToXml(), 
            relayState);

All the Wikipedia says is ""the value of the SAMLRequest parameter is the base64 encoding"". No information about what the key is used to encode. 
","Signing the authn request is optional.
To sign the request, before calling ServiceProvider.SendAuthnRequestByHTTPPost, you need to do something like the following:
// Serialize to XML
XmlElement authnRequestElement = authnRequest.ToXml();

// Sign the authn request
SAMLMessageSignature.Generate(authnRequestElement, x509Certificate.PrivateKey, x509Certificate);

// Send the authn request to the IdP
ServiceProvider.SendAuthnRequestByHTTPPost(..., authnRequestElement, ...);

You always sign with your private key and the recipient will verify the signature using your public key/certificate.
","3136","<public-key-encryption><saml-2.0>","1","0","2","2017-04-05 08:40:44","12290033","0","1","201303","","2017-04-05 08:40:44","2012-09-05 00:01:35",""
"12272870","Where from does ComponentSpace Saml 2.0 take key to encrypt assertions","When I run the following code (ComponentSpace Saml 2.0 lib is used), Fiddler shows me that SAMLRequest's value is encrypted like this <input type=""hidden"" name=""SAMLRequest"" value=""PHNhbWxwOkF1dGhu....""> which is pretty expected behavior. The code implements the first step of SSO SAML 2.0 POST profile. Note that no certificate key is specified in the code to do any kind of encryption, so I wonder how does ComponentSpace lib decide which one to pick up?
   var authnRequest = new AuthnRequest
        {
            Destination = @""https://idpserver/..."",
            Issuer = new Issuer(@""https://sp/...""),
            ForceAuthn = false,
            NameIDPolicy = new NameIDPolicy(null, null, true), 
            ProtocolBinding = SAMLIdentifiers.BindingURIs.HTTPPost,
            AssertionConsumerServiceURL = @""https://sp/...""
        };

        var relayState = RelayStateCache.Add(new RelayState(@""https://sp/..."", null));

        ServiceProvider.SendAuthnRequestByHTTPPost(
            new HttpResponseWrapper(_context.Response), 
            @""https://idpserver/..."", 
            authnRequest.ToXml(), 
            relayState);

All the Wikipedia says is ""the value of the SAMLRequest parameter is the base64 encoding"". No information about what the key is used to encode. 
","Sorry for misunderstanding your question. Your example code constructed and sent an authn request. It sounds like you're asking about SAML assertions contained in a SAML response.
The identity provider encrypts the SAML assertion using the service provider's public key. The service provider will decrypt the assertion using its private key.
If you'd like to see an example of this, please take a look at the AssertionExample project which demonstrates encrypting/decrypting SAML assertions.
Step 2 at the link you supplied describes the SP sending an AuthnRequest via HTTP/POST to the IdP. There is no XML encryption involved in sending an AuthnRequest. The XML is encoded using deflate and base-64 but no encryption. This encoding is done for you when you call ServiceProvider.SendAuthnRequestByHTTPPost.
","3136","<public-key-encryption><saml-2.0>","1","1","2","2017-04-05 08:40:44","12290033","0","1","201303","","2017-04-05 08:40:44","2012-09-05 00:01:35",""
"18774871","Block size for rsa algorithm?","I read book about cryptography but I don't understand this statement:

In RSA the block size must be less than or equal to log2(n).

somebody help me
","The RSA algorithm involves performing a modulo by N (the modulus) operation to recover the plain-text value. As a result, the plain-text must be less than the N, since the modulo operation results in a value between 0 and N-1.
To describe this restriction in terms of a ""block size"", we need to know the number of bits in N, which is simply log2(N).
","3093","<rsa><public-key-encryption>","2","1","1","2013-10-06 22:07:52","","2","","445517","","2013-10-06 22:07:52","2013-09-12 21:48:47",""
"28836837","Is Base64 an encryption or encoding algorithm?","I have to use an encryption algorithm using Base64 but when I researched online I find forums state it is an encoding algorithm. This has me confused. :(
Is Base64 an encryption or encoding algorithm? How do we differentiate between the two except for the fact that one is publicly decipherable while the other needs a key for that?
","It's an encoding algorithm (hence ""Base64 encoding"") to allow people to move data in an ASCII friendly environment (i.e. no control characters or anything non-printable). It should give you good portability with XML and JSON etc.
The encoding is entirely well known, the algorithm is simple and as it has not ""mutability"" of the algorithm or concept of keys etc. it is not considered as ""encryption"".
In summary, anybody can Base64 decode your content, so it's not encryption. At least not useful as encryption. It may keep a four year old stumped, but that's it.
","3009","<encryption><encoding><base64><public-key-encryption>","0","6","4","2015-03-03 17:46:40","28836880","1","","","","","2015-03-03 16:27:02",""
"28836837","Is Base64 an encryption or encoding algorithm?","I have to use an encryption algorithm using Base64 but when I researched online I find forums state it is an encoding algorithm. This has me confused. :(
Is Base64 an encryption or encoding algorithm? How do we differentiate between the two except for the fact that one is publicly decipherable while the other needs a key for that?
","An encoding algorithm merely presents data in an alternative format. It does not in any way attempt to hide data, it merely expresses the same data in an alternative syntax. Base64 is such an encoding algorithm. It merely encodes arbitrary data using only ASCII characters, which is useful in many situations in which non-ASCII characters may not be handled correctly. You can encode and decode Base64 back and forth all day long; there's no secret, no protection, no encryption.
","3009","<encryption><encoding><base64><public-key-encryption>","0","1","4","2015-03-03 17:46:40","28836880","1","","","","","2015-03-03 16:27:02",""
"28836837","Is Base64 an encryption or encoding algorithm?","I have to use an encryption algorithm using Base64 but when I researched online I find forums state it is an encoding algorithm. This has me confused. :(
Is Base64 an encryption or encoding algorithm? How do we differentiate between the two except for the fact that one is publicly decipherable while the other needs a key for that?
","One can certainly see Base64 as a substitution cipher with a pre-set/fixed key which also blows up the ciphertext by roughly 4/3, but this is not a very useful thought process. The main property of it is that it transforms some data into another format without some additional information. So it is an encoding algorithm.
Note that there are different variants of Base64 with different alphabets such as the one that is URL-safe (table 2 of the RFC4648). If you can set the alphabet with positions, then it will be an encryption algorithm, but it shouldn't be called Base64 anymore.
","3009","<encryption><encoding><base64><public-key-encryption>","0","1","4","2015-03-03 17:46:40","28836880","1","","","","","2015-03-03 16:27:02",""
"28836837","Is Base64 an encryption or encoding algorithm?","I have to use an encryption algorithm using Base64 but when I researched online I find forums state it is an encoding algorithm. This has me confused. :(
Is Base64 an encryption or encoding algorithm? How do we differentiate between the two except for the fact that one is publicly decipherable while the other needs a key for that?
","The difference between encoding and encrypting is in whether you need to know a secret in order to get back the original form. base64 is an encoding because all you need to know is the algorithm to encode/decode. 
When something is encrypted, there's a secret key that's used, and you need to know the key in order to decrypt it. There's two general types of encryption:

symmetric encryption = the same key is used to encrypt and decrypt. The correspondents using this encryption both need to know this key.
asymmetric encryption = different keys are used to encrypt and decrypt. This is also called public key encryption because you can make one of the keys well known (public), while keeping the other one secret (private). This allows anyone to encrypt a message that using the public key, while only the person who knows the private key can decrypt it, or vice versa.

","3009","<encryption><encoding><base64><public-key-encryption>","0","0","4","2015-03-03 17:46:40","28836880","1","","","","","2015-03-03 16:27:02",""
"23986171","is fingerprint of public cert unique?","I would like to store public cert in a database, but I need an attribute of the public cert to index the public certs in the database. I would like to make this a unique field.
Is the finger print of a public cert unique?
","The fingerprint is unique (for all practical intents); two different certificates should never share the same hash.  For example, per the  Windows X509certificate2.thumbprint documentation:

the thumbprint is a unique value for the certificate, it is commonly used to find a particular certificate in a certificate store.

Per the OpenSSL documentation:

Because of the nature of message digests the fingerprint of a certificate is unique to that certificate and two certificates with the same fingerprint can be considered to be the same.

Note the fingerprint is not part of the certificate.  Rather, it is calculated by taking a cryptographic hash of the entire certificate (including the signature).  Different cryptographic implementations may use different hashing algorithms to compute the fingerprint, and thus provide different fingerprints for the same certificate. (For example, the Windows Crypto API computes the SHA-1 hash of the certificate to compute the thumbprint, whereas OpenSSL can generate the SHA-256 or SHA-1 hash.)   You will thus need to ensure that clients using the database fingerprint are using the same API, or a consistent hashing algorithm.
In theory, a duplicate fingerprint shared by multiple certificates would require a hash collision.  The probability of such an event occurring by chance is astronomical.  Intentionally generating such a certificate pair would require a successful preimage attack on the underlying hash function, an attack not known to be feasible on SHA-1 (see Preimage Attack).
","2999","<security><x509certificate><public-key-encryption>","7","17","1","2017-12-28 11:17:36","23986596","1","2","859891","","2014-06-02 02:37:31","2014-06-02 01:20:53",""
"3058156","Encryption Product Keys : Public and Private key encryption","I need to generate and validate product keys and have been thinking about using a public/private key system. 
I generate our product keys based on

a client name (which could be a variable length string) 
a 6 digit serial number. 

It would be good if the product key would be of a manageable length (16 characters or so)
I need to encrypt them at the base and then distrubute the decryption/validation system. As our system is written in managed code (.NET) we dont want to distribute the encryption system, only the decryption. I need a public private key seems a good way to do this, encrypt with the one key that i keep and distribute the other key needed for decrpytion/verification.
What is an appropriate mechanism to do this with the above requirements?
NOTE: It's not to stop piracy; it's to reduce the likelyhood of novice users installing components they dont need/unauthorised to use.
",".NET supports public key encryption in various ways, such as http://msdn.microsoft.com/en-us/library/ms867080.aspx.  Having said this, all you'd gain is some confidence that someone with full access to the released code would not have the ability to issue their own product keys.  None of this stops them from patching the client to accept anything as a valid key.  That's where obfuscation fits in.
","2990","<c#><encryption><rsa><license-key><public-key-encryption>","1","1","3","2010-06-17 14:00:59","","0","","100652","","2010-06-17 01:01:32","2010-06-17 00:35:26",""
"3058156","Encryption Product Keys : Public and Private key encryption","I need to generate and validate product keys and have been thinking about using a public/private key system. 
I generate our product keys based on

a client name (which could be a variable length string) 
a 6 digit serial number. 

It would be good if the product key would be of a manageable length (16 characters or so)
I need to encrypt them at the base and then distrubute the decryption/validation system. As our system is written in managed code (.NET) we dont want to distribute the encryption system, only the decryption. I need a public private key seems a good way to do this, encrypt with the one key that i keep and distribute the other key needed for decrpytion/verification.
What is an appropriate mechanism to do this with the above requirements?
NOTE: It's not to stop piracy; it's to reduce the likelyhood of novice users installing components they dont need/unauthorised to use.
","Don't even try to get fancy with anti-piracy. It's not worth it. I've cracked countless applications (hush) and .NET ones are by FAR the easiest. But in reality, they're all relatively easy with enough experience. If you don't believe me, check out isohunt some time.
tl;dr: It's a losing battle. Don't fight it. If you really want to win, sue infringments - but even that makes you lose.
","2990","<c#><encryption><rsa><license-key><public-key-encryption>","1","-2","3","2010-06-17 14:00:59","","0","","100652","","2010-06-17 01:01:32","2010-06-17 00:35:26",""
"3058156","Encryption Product Keys : Public and Private key encryption","I need to generate and validate product keys and have been thinking about using a public/private key system. 
I generate our product keys based on

a client name (which could be a variable length string) 
a 6 digit serial number. 

It would be good if the product key would be of a manageable length (16 characters or so)
I need to encrypt them at the base and then distrubute the decryption/validation system. As our system is written in managed code (.NET) we dont want to distribute the encryption system, only the decryption. I need a public private key seems a good way to do this, encrypt with the one key that i keep and distribute the other key needed for decrpytion/verification.
What is an appropriate mechanism to do this with the above requirements?
NOTE: It's not to stop piracy; it's to reduce the likelyhood of novice users installing components they dont need/unauthorised to use.
","I did something very similar.  But in my case it was a simple telephone authorisation code.  User would phone a number, give their company name and the operation they were performing, get a code, type it into the application and then be able to proceed.
What I did was serialise a piece of data into binary.  The data included the hashed company name, operation code/expiration date, and had space to spare for future requirements.  I then scattered the bits around the array to confuse it.  Then I mapped each 5 bits of the binary array onto a 32 character auth-code alphabet (0-9,a-z,excluding I/O/Q/S for readability over telephone).
This resulted in a nice auth-code which was 16 characters, displayed as 4x4 blocks (####-####-####-####).  It could be easily read out over the telephone, as the user only had to listen to four characters at a time, or even sent via SMS.
As with your problem, it wasn't intended to stop the code crackers at Bletchley Park, but was enough to stop the average office worker from doing something without following company procedure.  And, given that scope, has been very effective.
","2990","<c#><encryption><rsa><license-key><public-key-encryption>","1","-2","3","2010-06-17 14:00:59","","0","","100652","","2010-06-17 01:01:32","2010-06-17 00:35:26",""
"47684957","Bouncy Castle PGP sign and encrypt in one pass?","I'm looking for an implementation of Bouncy Castle PGP 'sign and encrypt'. Ideally in one operation, if that makes any difference. 
I've taken the encrypt example and the signing example and tried to turn it into a 'one pass' encrypt and sign operation. 
I see this relatively dated implementation Boncode. It seems to show that the two operations are just linked together. 
I'm not getting the consumer to decrypt the code. The signature seems to be able to be verified. This is true whether I use the merged operations or separate encrypt then sign.
Is there a better Bouncy Castle PGP implementation?
","Here is my current implementation of a one pass, Bouncy Castle PGP encrypt+sign. The signature seems to verify, but the payload is not decrypted.
public class SinglePassSignedEncryptedFileProcessor {
private static final Logger logger = LoggerFactory.getLogger(SinglePassSignedEncryptedFileProcessor.class);

/*
 * This is the primary function that will create encrypt a file and sign it
 * with a one pass signature. This leans on an C# example by John Opincar
 * @author Bilal Soylu
 * @param targetFileName
 *            -- file name on drive systems that will contain encrypted content
 * @param embeddedFileName
 *            -- the original file name before encryption
 * @param secretKeyRingInputStream
 *            -- Private Key Ring File
 * @param targetFileStream
 *            -- The stream for the encrypted target file
 * @param secretKeyPassphrase
 *            -- The private key password for the key retrieved from
 *            collection used for signing
 * @param signPublicKeyInputStream
 *            -- the public key of the target recipient to be used to
 *            encrypt the file
 * @throws Exception
 */
public void encryptOnePassSign(
        String fileName,
        InputStream keyIn,
        OutputStream out,
        char[] pass,
        PGPPublicKey encryptionKey,
        boolean armor,
        boolean withIntegrityCheck,
        String providerName)
        throws IOException, NoSuchAlgorithmException, NoSuchProviderException, PGPException, SignatureException {
    if (armor) {
        out = new ArmoredOutputStream(out);
    }

    // Compress
    byte[] bytes = PGPEncryptUtil.compressFile(fileName, CompressionAlgorithmTags.ZIP);

    // Encryption process.
    PGPEncryptedDataGenerator encGen = new PGPEncryptedDataGenerator(
            new JcePGPDataEncryptorBuilder(PGPEncryptedData.CAST5).setWithIntegrityPacket(withIntegrityCheck).setSecureRandom(new SecureRandom()).setProvider(""BC""));

    encGen.addMethod(new JcePublicKeyKeyEncryptionMethodGenerator(encryptionKey).setProvider(""BC""));

    ByteArrayOutputStream encryptedOutputStream = new ByteArrayOutputStream();
    OutputStream encryptedOut = encGen.open(encryptedOutputStream, bytes);
    encryptedOut.write(bytes);
    encryptedOut.close();
    byte[] bytesEncrypted = encryptedOutputStream.toByteArray();
    encryptedOutputStream.close();

    // Signing process.
    PGPSecretKey pgpSec = PGPEncryptUtil.readSecretKey(keyIn);
    PGPPrivateKey pgpPrivKey = pgpSec.extractPrivateKey(new JcePBESecretKeyDecryptorBuilder().setProvider(""BC"").build(pass));

    PGPSignatureGenerator sGen = new PGPSignatureGenerator(new JcaPGPContentSignerBuilder(pgpSec.getPublicKey().getAlgorithm(), PGPUtil.SHA1).setProvider(""BC""));

    sGen.init(PGPSignature.BINARY_DOCUMENT, pgpPrivKey);

    Iterator it = pgpSec.getPublicKey().getUserIDs();
    if (it.hasNext()) {
        PGPSignatureSubpacketGenerator spGen = new PGPSignatureSubpacketGenerator();

        spGen.setSignerUserID(false, (String) it.next());
        sGen.setHashedSubpackets(spGen.generate());
    }

    PGPCompressedDataGenerator cGen = new PGPCompressedDataGenerator(
            PGPCompressedData.UNCOMPRESSED);

    // Write to the output stream.
    BCPGOutputStream bOut = new BCPGOutputStream(cGen.open(out));
    sGen.generateOnePassVersion(false).encode(bOut);

    File file = new File(fileName);
    PGPLiteralDataGenerator lGen = new PGPLiteralDataGenerator();
    // file is encoding name.
    Date lastModified = new Date(file.lastModified());
    OutputStream lOut = lGen.open(bOut, PGPLiteralData.BINARY, fileName, lastModified, bytesEncrypted);


    //FileInputStream fIn = new FileInputStream(file);
    //int ch;

    //while ((ch = fIn.read()) >= 0) {
        lOut.write(bytesEncrypted);
        sGen.update(bytesEncrypted);
   // }

    // ?
    lGen.close();

    sGen.generate().encode(bOut);
    cGen.close();

    if (armor) {
        out.close();
    }
    // close everything down we are done
    /*
    literalOut.close();
    literalDataGenerator.close();
    signatureGenerator.generate().encode(compressedOut);
    compressedOut.close();
    compressedDataGenerator.close();
    encryptedOut.close();
    encryptedDataGenerator.close();
     */

    // if (armor) targetFileStream.close();

}
}

","2973","<java><bouncycastle><public-key-encryption><pgp>","5","2","2","2018-10-01 16:51:22","52595517","1","2","","","","2017-12-06 23:02:21",""
"47684957","Bouncy Castle PGP sign and encrypt in one pass?","I'm looking for an implementation of Bouncy Castle PGP 'sign and encrypt'. Ideally in one operation, if that makes any difference. 
I've taken the encrypt example and the signing example and tried to turn it into a 'one pass' encrypt and sign operation. 
I see this relatively dated implementation Boncode. It seems to show that the two operations are just linked together. 
I'm not getting the consumer to decrypt the code. The signature seems to be able to be verified. This is true whether I use the merged operations or separate encrypt then sign.
Is there a better Bouncy Castle PGP implementation?
","Latest answer is to use BouncyGPG
Works as per the test cases. Kotlin
  val encryptionStream = BouncyGPG
            .encryptToStream()
            .withConfig(keyringConfig)
            .withStrongAlgorithms()
            .toRecipient(""recipient@example.com"")
            .andSignWith(""sender@example.com"")
            .armorAsciiOutput()
            .andWriteTo(cipherText)

    encryptionStream.write(expectedPlaintext)
    encryptionStream.close()
    cipherText.close()

","2973","<java><bouncycastle><public-key-encryption><pgp>","5","1","2","2018-10-01 16:51:22","52595517","1","2","","","","2017-12-06 23:02:21",""
"20433899","TLS Handshaking and SSL Session Reuse","I have a website (from a client) that is hitting a WCF Service on my Win 2008 R2 Standard server. The WCF Service is hosted on IIS 7.5. The connection is HTTPS encrypted. I do not have access to the client's server.
In order to debug an issue, I need to examine the request the client is sending. I am using WireShark 1.10.3. for this. I am able to get the decrypted information provided I have WireShark running first and the 2 servers connect using a Full Handshake. WireShark cannot decrypt if the servers are using an Abbreivated Handshake.
Abbreviated Handshake is employing a technique called SSL Session Reuse, where the two servers store the encryption/decryption information in a cache. This eliminates steps needed in a Full Handshake and saves CPU on future requests. I read that the default TTL for this cache is 10 hours, however I have not found where to set that. TLS by specification does a Full handshake when there is no information in either servers cache. After the Full Handshake, it automatically caches the info so it can then do the Abbreviated Handshake.
Since I am debugging, I have to run many scenarios many times.
I have found that the only way for me to ensure that the two servers do a Full Handshake is to reboot my server. This clears the cache and session information and the servers are forced to do a Full Handshake.
Obviously, rebooting my server everytime I come back to testing this issue is not ideal. I did some research and found some articles that suggest I can disable the SSL Session Reuse by setting the registry key HKLM\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\ClientCacheTime\Value to 0.
http://blogs.msdn.com/b/huizhu/archive/2009/12/17/ssl-_2f00_tls-full-handshake-vs.-abbreviated-handshake.aspx
http://support.microsoft.com/kb/247658
The articles suggest that this will disable the caching of the encryption information. However this has not worked for me. Am I missing something?
Is there another way to disable SSL Session Reuse or a way to bust the cache without having to reboot?
","Here are some ideas: 
1) Have the client clear their session cache, if this is possible and easier than rebooting their server.  
2) Send the requests through an HTTPS proxy (e.g., burpsuite).  This would most likely require configuring the client to use your proxy.  Restarting or clearing the proxy cache would lead to a full TLS handshake.
3) Use a TLS reverse proxy to receive incoming requests on the server IP and port and forward them to the server.  No proxy configuration is required at the client.  Just restart the proxy to start the full handshake.  If the server requires HTTPS, use upstream SSL on the proxy.  If the server can use HTTP, you can send traffic in the clear between proxy and server and use Wireshark to directly view the traffic.  This might be helpful: https://serverfault.com/questions/583374/configure-nginx-as-reverse-proxy-with-upstream-ssl
4) Flip a bit or drop a packet on an existing TLS connection between client and server.  This will cause a fatal alert (integrity check fails, indicating a possible MITM attack), which will invalidate that session and require the next request to initiate a full handshake.  
","2967","<ssl><iis-7.5><public-key-encryption><http-caching>","5","1","1","2017-03-25 01:59:16","","1","1","","","","2013-12-06 21:28:42",""
"12036139","Unable to use key file Eclipse","I setup public key access to my server via ssh. I have a .ssh folder on my local windows computer. I configured ssh to add the private key using the ssh-add <directory> command. I am able to successfully connect to my server using windowspowershell. The chmod and Chown of the .ssh directory and authorized file are configured correctly on my server. sshd_config is configured correctly and points to the correct key.
The connection works perfectly with shell so there is no problem on my server. But with Eclipse, and its plugin in particular, Egit, I keep getting a Unable to use key file <directory of the key file I loaded into eclipse the same one used by ssh error every time I try to push my revision commits to my git repository on the server. I went to Pref > General > Network > SSH2 and added the right private key, the ssh2 home directory is set correctly too, in fact the public an private key were both generated using the key management tab and loaded into my server.
My windows permissions on that folder and those keys is set to allow all users to do everything just for good measure.
Now one clue is, the known hosts tab has a host fingerprint that does not match the fingerprint of my key. My key is something like f1:19: etc and the hosts fingerprint is different. I hope I can fix this soon. Any suggestions would be great.
ssh-add -l = two private keys that I am using. So its not this.

Another clue is, after going into my putty program and changes the private key that it ses suddenly is i try to connect to ssh with a key acces in eclipse the error it throws shows reflects the same key that I just changed in putty!! Somehow eclipse seems to be using putty for public key access. How do I stop this?!
","Okay here's the solution. For whatever reason Egit uses putty to connect to ssh using the configuration putty is set to use to access a server with a public key. The way you fix this is to make sure putty is able to connect to the server using a public key. If it can't then try this:

Download puttygen
Generate a rsa key using either ssh shell or the key management tab on eclipse. Do not generate a key using puttygen. For whatever reason it never worked for me.
Load the private key you generated (not generated with puttygen) into puttygen and then save as a putty private key (.ppk)
Go to eclipses key management tab and set it to recognize the new .ppk private key file
Finally go to putty, and create your servers profile by assigning the address and then go to auth and load the .ppk file. DISABLE pageant.
Save and attempt to connect to server using the key and if successful then congratulations Egit and Eclipse will now be able to make connections using keys.

","2964","<eclipse><git><ssh><public-key-encryption><egit>","2","2","1","2012-08-20 12:03:08","12037013","0","1","","user1464296","2012-08-20 12:03:08","2012-08-20 10:36:53",""
"6117617","RSA encryption from Flex client and Corresponding Decryption from Web service","I'm having a problem setting up RSA encryption/decryption mechanism between flex client and web service written in c#. The idea is this: I'll encrypt some text from flex and then decrypt it from web service.  I'm using as3crypto library from google. It is encrypting/decrypting text properly. I also have the code on the web service side to encrypt/decrypt properly. My problem is synchronizing them - basically sharing the public key to flex and keeping the private key to the web service. 
My flex ""encrypt"" function takes modulus and exponent of RSA to do text encryption, so how do i get these modulus and exponent attributes from the web service's RSACryptoServiceProvider, so they speak the same standard. 
I tried the 
RSAKeyInfo.Modulus
RSAKeyInfo.Exponent
from the web service and fed them to the flex client.
After doing encryption on flex I took the cipher text and fed it to decrypt method on web service, but it is giving me ""bad data"" error message.
System.Security.Cryptography.CryptographicException: Bad Data.

   at System.Security.Cryptography.CryptographicException.ThrowCryptogaphicException(Int32 hr)
   at System.Security.Cryptography.Utils._DecryptKey(SafeKeyHandle hPubKey, Byte[] key, Int32 dwFlags)
   at System.Security.Cryptography.RSACryptoServiceProvider.Decrypt(Byte[] rgb, Boolean fOAEP)
   at Microsoft.Samples.Security.PublicKey.App.RSADecrypt(Byte[] DataToDecrypt, RSAParameters RSAKeyInfo, Boolean DoOAEPPadding) in C:\Users
\Me\Desktop\After Release\5-24-2011-webServiceCrypto\publickeycryptography\CS\PublicKeyCryptography\PublicKey.cs:line 219
Encryption failed.

How do i make sure they are both using the same byte 64 or 128 byte encryption . ie the input from flex should fit to what is expected by the web service RSACryptoServiceProvider's decrypt method.
(I'm assuming the size might be a problem, may be it's not - i'm lost)
Here is the code, first flex client followed by web service c# code
private function encrypt():void {
                var rsa:RSAKey = RSAKey.parsePublicKey(getModulus(), getExponent());
                trace(""Modulus Lenght: "" + getModulus().length);
                trace(""Exponent Lenght : "" + getExponent().length);
                var data:ByteArray = getInput();  //returns byteArray of plainText
                var dst:ByteArray = new ByteArray;
                rsa.encrypt(data, dst, data.length);
                trace(""Enc Data: "" + dst.toString() );
                currentResult = Hex.fromArray(dst);
                encryptedText = currentResult;
                trace(""Encrypted:: "" + currentResult);
            }

            //For testing purposes
            private function decrypt():void {
                var rsa:RSAKey = RSAKey.parsePrivateKey(getModulus(), getExponent(), getPrivate(), getP(), getQ(), getDMP1(), getDMQ1(), getCoeff());
                var data:ByteArray = Hex.toArray(encryptedText);
                trace(""Byte array: "" + data.toString());
                var dst:ByteArray = new ByteArray;
                rsa.decrypt(data, dst, data.length);
                decryptedText = Hex.fromArray(dst);
                trace(""Decrypted text: "" + Hex.toString(decryptedText));
            }

And web service part is as follows:
       try
        {
            //Create a UnicodeEncoder to convert between byte array and string.
            UnicodeEncoding ByteConverter = new UnicodeEncoding();

            //Create byte arrays to hold original, encrypted, and decrypted data.
            byte[] dataToEncrypt = ByteConverter.GetBytes(""Data to Encrypt"");
            byte[] encryptedData;
            byte[] decryptedData;

            //Create a new instance of RSACryptoServiceProvider to generate
            //public and private key data.
            using (RSACryptoServiceProvider RSA = new RSACryptoServiceProvider())
            {
                //Pass the data to ENCRYPT, the public key information 
                //(using RSACryptoServiceProvider.ExportParameters(false),
                //and a boolean flag specifying no OAEP padding.
                encryptedData = RSAEncrypt(dataToEncrypt, RSA.ExportParameters(false), false);
                //Pass the data to DECRYPT, the private key information 
                //(using RSACryptoServiceProvider.ExportParameters(true),
                //and a boolean flag specifying no OAEP padding.
                decryptedData = RSADecrypt(encryptedData, RSA.ExportParameters(true), false);
                //Display the decrypted plaintext to the console. 
                Console.WriteLine(""\n\nDecrypted plaintext: {0}"", ByteConverter.GetString(decryptedData));
            }
        }

static public byte[] RSAEncrypt(byte[] DataToEncrypt, RSAParameters RSAKeyInfo, bool DoOAEPPadding)
    {
        try
        {
            byte[] encryptedData;
            //Create a new instance of RSACryptoServiceProvider.
            using (RSACryptoServiceProvider RSA = new RSACryptoServiceProvider())
            {

                //Import the RSA Key information. This only needs
                //toinclude the public key information.
                RSA.ImportParameters(RSAKeyInfo);

                //Encrypt the passed byte array and specify OAEP padding.  
                //OAEP padding is only available on Microsoft Windows XP or
                //later.  
                encryptedData = RSA.Encrypt(DataToEncrypt, DoOAEPPadding);
            }
            return encryptedData;
        }
        //Catch and display a CryptographicException  
        //to the console.
        catch (CryptographicException e)
        {
            Console.WriteLine(e.Message);

            return null;
        }

    }


 static public byte[] RSADecrypt(byte[] DataToDecrypt, RSAParameters RSAKeyInfo, bool DoOAEPPadding)
    {
        try
        {
            Console.WriteLine(""Modulus Lenghth :"" + RSAKeyInfo.Modulus.Length);
            Console.WriteLine(""Exponent Length :"" + RSAKeyInfo.Exponent.Length);
            byte[] decryptedData;
            //Create a new instance of RSACryptoServiceProvider.
            using (RSACryptoServiceProvider RSA = new RSACryptoServiceProvider())
            {
                //Import the RSA Key information. This needs
                //to include the private key information.
                RSA.ImportParameters(RSAKeyInfo);

                //Decrypt the passed byte array and specify OAEP padding.  
                //OAEP padding is only available on Microsoft Windows XP or
                //later.  
                decryptedData = RSA.Decrypt(DataToDecrypt, DoOAEPPadding);
            }
            return decryptedData;
        }
        //Catch and display a CryptographicException  
        //to the console.
        catch (CryptographicException e)
        {
            Console.WriteLine(e.ToString());

            return null;
        }

    }

I'm not quite sure if this RSA set up is the way to go... 
Any kinda comment / advice/ or recommended solution is welcome,
thanks guys
","I use as3crypto and JAVA web-services.  Here are some thoughts:
a. I generated my public and private RSA keys via openssl
b.  My client loads the public .cer file at application startup (if you just hardcoded them in from the generated key that works too).
var pemString : String = new String(data.target.data);
var x509Cert : X509Certificate = new X509Certificate(pemString);
var publicRSAKey : RSAKey = x509Cert.getPublicKey();

c. Encrypt my strings via
var inputByteArray : ByteArray = Hex.toArray(Hex.fromString(inputString));
var outputByteArray : ByteArray = new ByteArray();
appSettingsModel.publicRSAKey.encrypt(inputByteArray, outputByteArray, inputByteArray.length);

d. I didn't write the JAVA side of things but you aren't using JAVA anyways. I know that as3crypto uses PKCS1 padding by default:
RSAKEY.as
private function _encrypt(op:Function, src:ByteArray, dst:ByteArray, length:uint, pad:Function, padType:int):void {
            // adjust pad if needed
            if (pad==null) pad = pkcs1pad;

This can be changed but I haven't tried it yet.  Based on your code it looks like you might be trying to decrypt with OAEP scheme, but I can't tell how you are setting that bool.  You may want to take a look at what padding scheme is being used with the bool as false and try to change one side or the other to match padding strategies.
","2961","<c#><wcf><apache-flex><actionscript-3><public-key-encryption>","2","1","3","2011-05-26 18:54:53","6143618","5","","133840","","2011-05-24 22:26:28","2011-05-24 22:21:08",""
"6117617","RSA encryption from Flex client and Corresponding Decryption from Web service","I'm having a problem setting up RSA encryption/decryption mechanism between flex client and web service written in c#. The idea is this: I'll encrypt some text from flex and then decrypt it from web service.  I'm using as3crypto library from google. It is encrypting/decrypting text properly. I also have the code on the web service side to encrypt/decrypt properly. My problem is synchronizing them - basically sharing the public key to flex and keeping the private key to the web service. 
My flex ""encrypt"" function takes modulus and exponent of RSA to do text encryption, so how do i get these modulus and exponent attributes from the web service's RSACryptoServiceProvider, so they speak the same standard. 
I tried the 
RSAKeyInfo.Modulus
RSAKeyInfo.Exponent
from the web service and fed them to the flex client.
After doing encryption on flex I took the cipher text and fed it to decrypt method on web service, but it is giving me ""bad data"" error message.
System.Security.Cryptography.CryptographicException: Bad Data.

   at System.Security.Cryptography.CryptographicException.ThrowCryptogaphicException(Int32 hr)
   at System.Security.Cryptography.Utils._DecryptKey(SafeKeyHandle hPubKey, Byte[] key, Int32 dwFlags)
   at System.Security.Cryptography.RSACryptoServiceProvider.Decrypt(Byte[] rgb, Boolean fOAEP)
   at Microsoft.Samples.Security.PublicKey.App.RSADecrypt(Byte[] DataToDecrypt, RSAParameters RSAKeyInfo, Boolean DoOAEPPadding) in C:\Users
\Me\Desktop\After Release\5-24-2011-webServiceCrypto\publickeycryptography\CS\PublicKeyCryptography\PublicKey.cs:line 219
Encryption failed.

How do i make sure they are both using the same byte 64 or 128 byte encryption . ie the input from flex should fit to what is expected by the web service RSACryptoServiceProvider's decrypt method.
(I'm assuming the size might be a problem, may be it's not - i'm lost)
Here is the code, first flex client followed by web service c# code
private function encrypt():void {
                var rsa:RSAKey = RSAKey.parsePublicKey(getModulus(), getExponent());
                trace(""Modulus Lenght: "" + getModulus().length);
                trace(""Exponent Lenght : "" + getExponent().length);
                var data:ByteArray = getInput();  //returns byteArray of plainText
                var dst:ByteArray = new ByteArray;
                rsa.encrypt(data, dst, data.length);
                trace(""Enc Data: "" + dst.toString() );
                currentResult = Hex.fromArray(dst);
                encryptedText = currentResult;
                trace(""Encrypted:: "" + currentResult);
            }

            //For testing purposes
            private function decrypt():void {
                var rsa:RSAKey = RSAKey.parsePrivateKey(getModulus(), getExponent(), getPrivate(), getP(), getQ(), getDMP1(), getDMQ1(), getCoeff());
                var data:ByteArray = Hex.toArray(encryptedText);
                trace(""Byte array: "" + data.toString());
                var dst:ByteArray = new ByteArray;
                rsa.decrypt(data, dst, data.length);
                decryptedText = Hex.fromArray(dst);
                trace(""Decrypted text: "" + Hex.toString(decryptedText));
            }

And web service part is as follows:
       try
        {
            //Create a UnicodeEncoder to convert between byte array and string.
            UnicodeEncoding ByteConverter = new UnicodeEncoding();

            //Create byte arrays to hold original, encrypted, and decrypted data.
            byte[] dataToEncrypt = ByteConverter.GetBytes(""Data to Encrypt"");
            byte[] encryptedData;
            byte[] decryptedData;

            //Create a new instance of RSACryptoServiceProvider to generate
            //public and private key data.
            using (RSACryptoServiceProvider RSA = new RSACryptoServiceProvider())
            {
                //Pass the data to ENCRYPT, the public key information 
                //(using RSACryptoServiceProvider.ExportParameters(false),
                //and a boolean flag specifying no OAEP padding.
                encryptedData = RSAEncrypt(dataToEncrypt, RSA.ExportParameters(false), false);
                //Pass the data to DECRYPT, the private key information 
                //(using RSACryptoServiceProvider.ExportParameters(true),
                //and a boolean flag specifying no OAEP padding.
                decryptedData = RSADecrypt(encryptedData, RSA.ExportParameters(true), false);
                //Display the decrypted plaintext to the console. 
                Console.WriteLine(""\n\nDecrypted plaintext: {0}"", ByteConverter.GetString(decryptedData));
            }
        }

static public byte[] RSAEncrypt(byte[] DataToEncrypt, RSAParameters RSAKeyInfo, bool DoOAEPPadding)
    {
        try
        {
            byte[] encryptedData;
            //Create a new instance of RSACryptoServiceProvider.
            using (RSACryptoServiceProvider RSA = new RSACryptoServiceProvider())
            {

                //Import the RSA Key information. This only needs
                //toinclude the public key information.
                RSA.ImportParameters(RSAKeyInfo);

                //Encrypt the passed byte array and specify OAEP padding.  
                //OAEP padding is only available on Microsoft Windows XP or
                //later.  
                encryptedData = RSA.Encrypt(DataToEncrypt, DoOAEPPadding);
            }
            return encryptedData;
        }
        //Catch and display a CryptographicException  
        //to the console.
        catch (CryptographicException e)
        {
            Console.WriteLine(e.Message);

            return null;
        }

    }


 static public byte[] RSADecrypt(byte[] DataToDecrypt, RSAParameters RSAKeyInfo, bool DoOAEPPadding)
    {
        try
        {
            Console.WriteLine(""Modulus Lenghth :"" + RSAKeyInfo.Modulus.Length);
            Console.WriteLine(""Exponent Length :"" + RSAKeyInfo.Exponent.Length);
            byte[] decryptedData;
            //Create a new instance of RSACryptoServiceProvider.
            using (RSACryptoServiceProvider RSA = new RSACryptoServiceProvider())
            {
                //Import the RSA Key information. This needs
                //to include the private key information.
                RSA.ImportParameters(RSAKeyInfo);

                //Decrypt the passed byte array and specify OAEP padding.  
                //OAEP padding is only available on Microsoft Windows XP or
                //later.  
                decryptedData = RSA.Decrypt(DataToDecrypt, DoOAEPPadding);
            }
            return decryptedData;
        }
        //Catch and display a CryptographicException  
        //to the console.
        catch (CryptographicException e)
        {
            Console.WriteLine(e.ToString());

            return null;
        }

    }

I'm not quite sure if this RSA set up is the way to go... 
Any kinda comment / advice/ or recommended solution is welcome,
thanks guys
","Seems overly complicated.  I've worked on some high security systems before, but this is ludicrous.  Why would you need this kind of level of encryption at the text being sent unless you don't want the user to know the text he just inputted?
Just use a strong SSL key (256bit is max for IE6, you could use 512 but only compatible with newer browsers) for the actual transfer protocol (I imagine HTTP) with a binary data format (AMF) and everything should be fine.  I doubt your system is that important to leverage the use of encrypting text.
","2961","<c#><wcf><apache-flex><actionscript-3><public-key-encryption>","2","1","3","2011-05-26 18:54:53","6143618","5","","133840","","2011-05-24 22:26:28","2011-05-24 22:21:08",""
"6117617","RSA encryption from Flex client and Corresponding Decryption from Web service","I'm having a problem setting up RSA encryption/decryption mechanism between flex client and web service written in c#. The idea is this: I'll encrypt some text from flex and then decrypt it from web service.  I'm using as3crypto library from google. It is encrypting/decrypting text properly. I also have the code on the web service side to encrypt/decrypt properly. My problem is synchronizing them - basically sharing the public key to flex and keeping the private key to the web service. 
My flex ""encrypt"" function takes modulus and exponent of RSA to do text encryption, so how do i get these modulus and exponent attributes from the web service's RSACryptoServiceProvider, so they speak the same standard. 
I tried the 
RSAKeyInfo.Modulus
RSAKeyInfo.Exponent
from the web service and fed them to the flex client.
After doing encryption on flex I took the cipher text and fed it to decrypt method on web service, but it is giving me ""bad data"" error message.
System.Security.Cryptography.CryptographicException: Bad Data.

   at System.Security.Cryptography.CryptographicException.ThrowCryptogaphicException(Int32 hr)
   at System.Security.Cryptography.Utils._DecryptKey(SafeKeyHandle hPubKey, Byte[] key, Int32 dwFlags)
   at System.Security.Cryptography.RSACryptoServiceProvider.Decrypt(Byte[] rgb, Boolean fOAEP)
   at Microsoft.Samples.Security.PublicKey.App.RSADecrypt(Byte[] DataToDecrypt, RSAParameters RSAKeyInfo, Boolean DoOAEPPadding) in C:\Users
\Me\Desktop\After Release\5-24-2011-webServiceCrypto\publickeycryptography\CS\PublicKeyCryptography\PublicKey.cs:line 219
Encryption failed.

How do i make sure they are both using the same byte 64 or 128 byte encryption . ie the input from flex should fit to what is expected by the web service RSACryptoServiceProvider's decrypt method.
(I'm assuming the size might be a problem, may be it's not - i'm lost)
Here is the code, first flex client followed by web service c# code
private function encrypt():void {
                var rsa:RSAKey = RSAKey.parsePublicKey(getModulus(), getExponent());
                trace(""Modulus Lenght: "" + getModulus().length);
                trace(""Exponent Lenght : "" + getExponent().length);
                var data:ByteArray = getInput();  //returns byteArray of plainText
                var dst:ByteArray = new ByteArray;
                rsa.encrypt(data, dst, data.length);
                trace(""Enc Data: "" + dst.toString() );
                currentResult = Hex.fromArray(dst);
                encryptedText = currentResult;
                trace(""Encrypted:: "" + currentResult);
            }

            //For testing purposes
            private function decrypt():void {
                var rsa:RSAKey = RSAKey.parsePrivateKey(getModulus(), getExponent(), getPrivate(), getP(), getQ(), getDMP1(), getDMQ1(), getCoeff());
                var data:ByteArray = Hex.toArray(encryptedText);
                trace(""Byte array: "" + data.toString());
                var dst:ByteArray = new ByteArray;
                rsa.decrypt(data, dst, data.length);
                decryptedText = Hex.fromArray(dst);
                trace(""Decrypted text: "" + Hex.toString(decryptedText));
            }

And web service part is as follows:
       try
        {
            //Create a UnicodeEncoder to convert between byte array and string.
            UnicodeEncoding ByteConverter = new UnicodeEncoding();

            //Create byte arrays to hold original, encrypted, and decrypted data.
            byte[] dataToEncrypt = ByteConverter.GetBytes(""Data to Encrypt"");
            byte[] encryptedData;
            byte[] decryptedData;

            //Create a new instance of RSACryptoServiceProvider to generate
            //public and private key data.
            using (RSACryptoServiceProvider RSA = new RSACryptoServiceProvider())
            {
                //Pass the data to ENCRYPT, the public key information 
                //(using RSACryptoServiceProvider.ExportParameters(false),
                //and a boolean flag specifying no OAEP padding.
                encryptedData = RSAEncrypt(dataToEncrypt, RSA.ExportParameters(false), false);
                //Pass the data to DECRYPT, the private key information 
                //(using RSACryptoServiceProvider.ExportParameters(true),
                //and a boolean flag specifying no OAEP padding.
                decryptedData = RSADecrypt(encryptedData, RSA.ExportParameters(true), false);
                //Display the decrypted plaintext to the console. 
                Console.WriteLine(""\n\nDecrypted plaintext: {0}"", ByteConverter.GetString(decryptedData));
            }
        }

static public byte[] RSAEncrypt(byte[] DataToEncrypt, RSAParameters RSAKeyInfo, bool DoOAEPPadding)
    {
        try
        {
            byte[] encryptedData;
            //Create a new instance of RSACryptoServiceProvider.
            using (RSACryptoServiceProvider RSA = new RSACryptoServiceProvider())
            {

                //Import the RSA Key information. This only needs
                //toinclude the public key information.
                RSA.ImportParameters(RSAKeyInfo);

                //Encrypt the passed byte array and specify OAEP padding.  
                //OAEP padding is only available on Microsoft Windows XP or
                //later.  
                encryptedData = RSA.Encrypt(DataToEncrypt, DoOAEPPadding);
            }
            return encryptedData;
        }
        //Catch and display a CryptographicException  
        //to the console.
        catch (CryptographicException e)
        {
            Console.WriteLine(e.Message);

            return null;
        }

    }


 static public byte[] RSADecrypt(byte[] DataToDecrypt, RSAParameters RSAKeyInfo, bool DoOAEPPadding)
    {
        try
        {
            Console.WriteLine(""Modulus Lenghth :"" + RSAKeyInfo.Modulus.Length);
            Console.WriteLine(""Exponent Length :"" + RSAKeyInfo.Exponent.Length);
            byte[] decryptedData;
            //Create a new instance of RSACryptoServiceProvider.
            using (RSACryptoServiceProvider RSA = new RSACryptoServiceProvider())
            {
                //Import the RSA Key information. This needs
                //to include the private key information.
                RSA.ImportParameters(RSAKeyInfo);

                //Decrypt the passed byte array and specify OAEP padding.  
                //OAEP padding is only available on Microsoft Windows XP or
                //later.  
                decryptedData = RSA.Decrypt(DataToDecrypt, DoOAEPPadding);
            }
            return decryptedData;
        }
        //Catch and display a CryptographicException  
        //to the console.
        catch (CryptographicException e)
        {
            Console.WriteLine(e.ToString());

            return null;
        }

    }

I'm not quite sure if this RSA set up is the way to go... 
Any kinda comment / advice/ or recommended solution is welcome,
thanks guys
","Eureka! Eureka! I got it.
The problem was after decryption from web service, the encrypted byte array missed 0's in between, so that when changed to string it gets unreadable '????????' text. So I just put paddWithZeros() function to pad the decrypted byte array with 0's between bytes and it worked.
Thanks Kevin, your solution gave me an insight into what things I should consider. So during decrypting I specify parameter fOAEP as false, so it would use PKCS#1 for padding (making both libraries use the same standard).
RSA.Decrypt(DataToDecrypt, DoOAEPPadding); // DoOAEPPadding = false

another error that i was getting is Bad Data exception. This was fixed when i shared the RSA cryptoServiceProvider's parameters (modulus and exponent) to actionScript methods.
I also changed the byte[] array of c# RSA attributes (like Modulus n, Exponent e, Private d..etc) to hexa string so that I'd be able to share with as3crypto library.
I'd love to share what worked for me; save others some time.
<?xml version=""1.0"" encoding=""utf-8""?>
<s:Application xmlns:fx=""http://ns.adobe.com/mxml/2009"" 
               xmlns:s=""library://ns.adobe.com/flex/spark"" 
               xmlns:mx=""library://ns.adobe.com/flex/mx"" minWidth=""955"" minHeight=""600"">

    <fx:Script>
        <![CDATA[
            import com.hurlant.crypto.Crypto;
            import com.hurlant.crypto.rsa.RSAKey;
            import com.hurlant.crypto.symmetric.ICipher;
            import com.hurlant.crypto.symmetric.IPad;
            import com.hurlant.util.Hex;

            private var currentResult:String;
            private var encryptedText:String;
            private var decryptedText:String;

            private function encrypt(plainText:String):String {
                var rsa:RSAKey = RSAKey.parsePublicKey(getModulus(), getExponent());
                var data:ByteArray = Hex.toArray(Hex.fromString(plainText));  //returns byteArray of plainText
                var dst:ByteArray = new ByteArray;
                rsa.encrypt(data, dst, data.length);
                currentResult = Hex.fromArray(dst);
                encryptedText = currentResult;
                trace (""Cipher: "" + currentResult);
                return currentResult;
            }

            private function getInput():ByteArray {
                return null;
            }

            private function getModulus():String {
                return ""b6a7ca9002b4df39af1ed39251a5d""; //read this value from web service.
            }

            private function getExponent():String {
                return ""011""; //read this value from web service.
            }

            //For debugging and testing purposes
            // private function decrypt(cipherText:String):String {
                // var rsa:RSAKey = RSAKey.parsePrivateKey(getModulus(), getExponent(), getPrivate(), getP(), getQ(), getDMP1(), getDMQ1(), getCoeff());
                // var data:ByteArray = Hex.toArray(cipherText);
                // var dst:ByteArray = new ByteArray;
                // rsa.decrypt(data, dst, data.length);
                // decryptedText = Hex.fromArray(dst);
                     //trace('decrypted : ' + decryptedText);
                // return Hex.toString(decryptedText);
            // }

        ]]>
    </fx:Script>

    <fx:Declarations>
        <!-- Place non-visual elements (e.g., services, value objects) here -->
    </fx:Declarations>
    <mx:VBox >
        <s:Button label=""Encrypt Text"" click=""encrypt('my plain text')"" />
        <s:Button label=""Decrypt Text"" click=""decrypt({encryptedText})"" />
    </mx:VBox>
</s:Application>

And the web service part of decryption looks like this:
 static public string RSADecrypt(string cipherText)
    {
        UnicodeEncoding ByteConverter = new UnicodeEncoding();
        byte[] DataToDecrypt = StringToByteArray(cipherText);
        bool DoOAEPPadding = false;
        try
        {
            byte[] decryptedData;
            using (RSACryptoServiceProvider RSA = new RSACryptoServiceProvider())
            {
                KeyInfo keyInfo = new KeyInfo();
                RSAParameters RSAKeyInfo = keyInfo.getKey();
                RSA.ImportParameters(RSAKeyInfo); 
                decryptedData = RSA.Decrypt(DataToDecrypt, DoOAEPPadding);
            }
            byte[] paddedOutput = paddWithZeros(decryptedData); //to sync with as3crypto
            return (ByteConverter.GetString(paddedOutput));

        }catch (CryptographicException e)
        {
            //handle error
            return null;
        }
    }

I'll do some reading about padding schemes for RSA, see if there is any misconception.
Thanks
","2961","<c#><wcf><apache-flex><actionscript-3><public-key-encryption>","2","3","3","2011-05-26 18:54:53","6143618","5","","133840","","2011-05-24 22:26:28","2011-05-24 22:21:08",""
"10727133","OpenSSL RSA: Unable to encrypt/decrypt messages longer than 16 bytes","I'm working on a simple program that uses OpenSSL to do basic RSA encryption and decryption. It is working fine for small messages (<16 bytes), but fails for anything over that. I understand that a limitation of public key cryptography is that you cannot encrypt anything longer than the key size. In my case, I'm using a 1024bit key, so I should have 128bytes to work with (maybe slightly less due to padding), correct? If so, that's not what I'm experiencing.
Here's the output from my program with 15 bytes:
Generating RSA keypair...done.
Message to encrypt: 0123456789ABCDE
16 bytes encrypted
Decrypted message: 0123456789ABCDE

And with 16 bytes:
Generating RSA keypair...done.
Message to encrypt: 0123456789ABCDEF
16 bytes encrypted
140153837057696:error:06065064:digital envelope routines:EVP_DecryptFinal_ex:bad     decrypt:evp_enc.c:467:
Decrypted message: (null)

It seems that no matter what, only a total of 16 bytes are encrypted.
My encryption function (updated with fix):
unsigned char* rsa_seal(EVP_PKEY *pub_key, unsigned char *msg, size_t **enc_msg_len, unsigned char **sym_key, int *sym_key_len, unsigned char **iv) {
    size_t msg_len = strlen((char*)msg);
    unsigned char *encrypt = malloc(EVP_PKEY_size(pub_key));

    EVP_CIPHER_CTX *ctx = malloc(sizeof(EVP_CIPHER_CTX));
    EVP_CIPHER_CTX_init(ctx);

    *sym_key = malloc(EVP_PKEY_size(pub_key));
    *iv = malloc(EVP_MAX_IV_LENGTH);

    **enc_msg_len = 0;

    if(!EVP_SealInit(ctx, EVP_aes_128_cbc(), sym_key, sym_key_len, *iv, &pub_key, 1)) {
        ERR_print_errors_fp(stderr);
        encrypt = NULL;
        goto return_free;
    }

    if(!EVP_SealUpdate(ctx, encrypt, (int*)*enc_msg_len, msg, (int)msg_len)) {
        ERR_print_errors_fp(stderr);
        encrypt = NULL;
        goto return_free;
    }

    if(!EVP_SealFinal(ctx, encrypt, (int*)*enc_msg_len)) {
        ERR_print_errors_fp(stderr);
        encrypt = NULL;
        goto return_free;
    }

    return_free:
    EVP_CIPHER_CTX_cleanup(ctx);
    free(ctx);
    ctx = NULL;

    return encrypt;
}

The corresponding decryption function (updated with fix):
char* rsa_open(EVP_PKEY *pri_key, unsigned char *enc_msg, size_t *enc_msg_len, unsigned char *sym_key, int sym_key_len, unsigned char *iv) {
    size_t dec_len = 0;
    unsigned char *decrypt = malloc((*enc_msg_len) + EVP_MAX_IV_LENGTH);
    if(decrypt == NULL) return NULL;

    EVP_CIPHER_CTX *ctx = malloc(sizeof(EVP_CIPHER_CTX));
    EVP_CIPHER_CTX_init(ctx);

    if(!EVP_OpenInit(ctx, EVP_aes_128_cbc(), sym_key, sym_key_len, iv, pri_key)) {
        ERR_print_errors_fp(stderr);
        decrypt = NULL;
        goto return_free;
    }

    if(!EVP_OpenUpdate(ctx, decrypt, (int*)&dec_len, enc_msg, (int)*enc_msg_len)) {
        ERR_print_errors_fp(stderr);
        decrypt = NULL;
        goto return_free;
    }

    if(!EVP_OpenFinal(ctx, decrypt, (int*)&dec_len)) {
        ERR_print_errors_fp(stderr);
        decrypt = NULL;
        goto return_free;
    }

    decrypt[dec_len] = '\0';

    return_free:
    EVP_CIPHER_CTX_cleanup(ctx);
    free(ctx);
    ctx = NULL;

    return (char*)decrypt;
}

The key generation function:
int rsa_init(EVP_PKEY **rsa_keypair) {
    EVP_PKEY_CTX *ctx = EVP_PKEY_CTX_new_id(EVP_PKEY_RSA, NULL);

    if(!EVP_PKEY_keygen_init(ctx)) {
        ERR_print_errors_fp(stderr);
        return -1;
    }

    if(!EVP_PKEY_CTX_set_rsa_keygen_bits(ctx, KEY_LENGTH)) {
        ERR_print_errors_fp(stderr);
        return -1;
    }

    if(!EVP_PKEY_keygen(ctx, rsa_keypair)) {
        ERR_print_errors_fp(stderr);
        return -1;
    }

    EVP_PKEY_CTX_free(ctx);

    return 0;
}

And finally, my main:
int main() {
    EVP_PKEY      *rsa_keypair = NULL; // RSA keypair 
    char          msg[BUFFER];         // Message to encrypt
    unsigned char *encrypt = NULL;     // Encrypted message
    char          *decrypt = NULL;     // Decrypted message

    // Generate key pair
    printf(""Generating RSA keypair..."");
    if(rsa_init(&rsa_keypair) == -1) {
        fprintf(stderr, ""\nError generating RSA keypair.\n"");
        exit(1);
    }
    printf(""done.\n"");

    // Get the message to encrypt
    printf(""Message to encrypt: "");
    fgets(msg, BUFFER-1, stdin);
    msg[strlen(msg)-1] = '\0';

    // Load error strings in anticipation of error
    ERR_load_crypto_strings();

    // Encrypt the message
    size_t *encrypt_len = malloc(sizeof(size_t));
    unsigned char *sym_key = NULL;
    unsigned char *iv = NULL;
    int sym_key_len;
    encrypt = rsa_seal(rsa_keypair, (unsigned char*)msg, &encrypt_len, &sym_key, &sym_key_len, &iv);
    printf(""%d bytes encrypted\n"", (int)*encrypt_len);

    // Decrypt it
    decrypt = rsa_open(rsa_keypair, (unsigned char*)encrypt, (size_t*)encrypt_len, sym_key, sym_key_len, iv);
    printf(""Decrypted message: %s\n"", decrypt);

    free(encrypt);
    free(decrypt);
    free(encrypt_len);
    free(sym_key);
    free(iv);
    EVP_PKEY_free(rsa_keypair);

    return 0;
}

Any help is greatly appreciated! Thank you.
EDIT: As pointed out by math below, it seems that the answer to my mistake was hiding in the OpenSSL here: https://www.openssl.org/docs/crypto/EVP_EncryptInit.html#
","This is because you do not properly handle out and outl parameters in EVP_SealUpdate(), EVP_SealFinal(), EVP_OpenUpdate() and EVP_OpenFinal().
Each EVP_XxxxUpdate() and EVP_XxxxFinal() call will contribute to the output buffer. So, you are required to keep track of the seal/open process by summing each outl returned and providing the expected buffer each time (start of buffer + already handled bytes).
unsigned char* rsa_seal(...)
{
  ...
  **enc_msg_len = 0;

  EVP_SealUpdate(ctx, encrypt + **enc_msg_len, &outl, msg, (int)msg_len);
  **enc_msg_len += outl;

  EVP_SealFinal(ctx, encrypt + **enc_msg_len, &outl);
  **enc_msg_len += outl;
  ...
}

char* rsa_open(...)
{
  ...
  dec_len = 0;

  EVP_OpenUpdate(ctx, decrypt + dec_len, &outl, enc_msg, (int)*enc_msg_len);
  dec_len += outl;

  EVP_OpenFinal(ctx, decrypt + dec_len, &outl);
  dec_len += outl;
  ...
}

The program was working with 15-bytes buffer because in that case, the EVP_XxxxUpdate() call is returning 0 in outl (not enough data to seal/open a block), hiding the problem in your code logic.
Note: The data is not directly encrypted using the RSA key but using a generated symetric key (AES-128 in your case). This is why the block size is 16 bytes.
","2959","<c><openssl><rsa><public-key-encryption>","7","5","1","2012-05-25 07:24:55","10733759","0","1","515584","","2012-05-25 07:24:55","2012-05-23 20:12:18",""
"44616565","ASN.1 encoding routines:OPENSSL_internal:WRONG_TAG","What does this error mean:
java.security.spec.InvalidKeySpecException: java.lang.RuntimeException: error:0c0000b9:ASN.1 encoding routines:OPENSSL_internal:WRONG_TAG

my code is:
public static byte[] encryptByPublicKey(byte[] data, String key)
        throws Exception {

    key = key.replace(""-----BEGIN RSA PUBLIC KEY-----\r\n"", """").replace(""-----END RSA PUBLIC KEY-----"", """");

    byte[] bytes = decryptBASE64(key);
    X509EncodedKeySpec x509KeySpec = new X509EncodedKeySpec(bytes);

    KeyFactory keyFactory = KeyFactory.getInstance(KEY_ALGORITHM);
    PublicKey pkPublic = keyFactory.generatePublic(x509KeySpec);

    Cipher pkCipher = Cipher.getInstance(""RSA"");
    pkCipher.init(Cipher.ENCRYPT_MODE, pkPublic);

    return pkCipher.doFinal(data);
}

I'm sure, i have the correct data and key (that created in php), but i get this error in line:
        PublicKey pkPublic = keyFactory.generatePublic(x509KeySpec);

I don't have any problem whit this code in my other android (without php server)apps, and i have correct answer by the same encryption/decryption code.
Is it possible that a function using in two projects, with the same input an output values, in the same software, has different actions? Yes! it's possible, but how about Android Studio, and Phpstorm? Is it about Openssl cer.? or other libraries? or some other reasons? How can I overcome this error? 
I appreciate it if you help me. Thanks in advance for your answers.
","Please check the key string, maybe contains illegal Base64 char: ""\n"", ""\t"", or \s and so on, remove them and try again !
","2895","<php><android><public-key-encryption>","1","1","1","2018-11-06 09:25:48","","2","3","","","","2017-06-18 15:26:38",""
"25679025","ubuntu 14.04 public key authentication not working","I am running an ubuntu 14.04 vm in VirtualBox.
I am trying to set up public key authentication. 
I get the following debug info with the -vvv parameter:
hduser@peter-VirtualBox:/var/log$ ssh -vvv localhost
OpenSSH_6.6.1, OpenSSL 1.0.1f 6 Jan 2014
debug1: Reading configuration data /etc/ssh/ssh_config
debug1: /etc/ssh/ssh_config line 19: Applying options for *
debug2: ssh_connect: needpriv 0
debug1: Connecting to localhost [127.0.0.1] port 22.
debug1: connect to address 127.0.0.1 port 22: Connection refused
ssh: connect to host localhost port 22: Connection refused

I searched some forums and found one suggestion that i confirm that my home directory, ~/.ssh and ~/.ssh/authorized_keys files are ONLY writable by myself, which is true.
anybody have any suggestions? 
","Apparently the SSH Server sshd is not listening on port 22. Have you installed it yet? (A guide to do so, suggested by Peter: https://help.ubuntu.com/14.04/serverguide/openssh-server.html)
An other reason that sshd does not start might be a faulty configuration in /etc/ssh/sshd_config. Error messages for that should appear in the /var/log/auth.log log file. Alternatively you can try to run sudo service ssh start. Error messages should then also be printed in the current window.
Finally, sshd might be listening on a non-default port. Usually you would be aware of that, though, as it requires manual changes to the configuration. You can get an overview of all open ports by calling sudo netstat -tulpen. In the defaul case you'll have a line with sshd in the Program name column and 0.0.0.0:22 in the LocalAddress column. This means that sshd is listening on all ipv4 interfaces available (0.0.0.0) on port 22 (:22). If you find a different port there (e.g. 12345), you can tell ssh to connect to it instead using the -p flag (ssh localhost -p 12345).
","2873","<ubuntu><ssh><virtualbox><public-key-encryption>","0","0","1","2014-09-06 10:07:25","","2","","","","","2014-09-05 05:17:53",""
"16235661","Bouncy Castle Encryption","I have a requirment to send PGP Encrypted CSV Files to SFTP and i know nothing aboutr PGP. After a lot of research I could find following code on internet using 'Bouncy Castle' Library. The code seems gogod but does not work for me given my inexperience in PGP. Please help me in finding right values for:

publicKeyFileName
privateKeyFileName
pasPhrase

Below is my code:
namespace PgpEncryption
{
    class Program
    {
        public static void Main()
        {
            EncryptAndSign();
        }

        private static void EncryptAndSign()
        {
            string publicKeyFileName = """";
            string privateKeyFileName = """";
            string pasPhrase = """";    
            PgpEncryptionKeys encryptionKeys
                = new PgpEncryptionKeys(publicKeyFileName, privateKeyFileName, pasPhrase);
            PgpEncrypt encrypter = new PgpEncrypt(encryptionKeys);
            string encryptedFileName = """";
            using (Stream outputStream = File.Create(encryptedFileName))
            {
                string fileToEncrypt = """";    
                encrypter.EncryptAndSign(outputStream, new FileInfo(fileToEncrypt));
            }    
        }
    }
}

public class PgpEncryptionKeys
{
    public PgpEncryptionKeys(string publicKeyPath, string privateKeyPath, string passPhrase)
    {
        if (!File.Exists(publicKeyPath))
            throw new ArgumentException(""Public key file not found"", ""publicKeyPath"");
        if (!File.Exists(privateKeyPath))
            throw new ArgumentException(""Private key file not found"", ""privateKeyPath"");
        if (String.IsNullOrEmpty(passPhrase))
            throw new ArgumentException(""passPhrase is null or empty."", ""passPhrase"");
        PublicKey = ReadPublicKey(publicKeyPath);
        SecretKey = ReadSecretKey(privateKeyPath);
        PrivateKey = ReadPrivateKey(passPhrase);
    }

    #region Secret Key
    private PgpSecretKey ReadSecretKey(string privateKeyPath)
    {
        using (Stream keyIn = File.OpenRead(privateKeyPath))
        using (Stream inputStream = PgpUtilities.GetDecoderStream(keyIn))
        {
            PgpSecretKeyRingBundle secretKeyRingBundle = new PgpSecretKeyRingBundle(inputStream);
            PgpSecretKey foundKey = GetFirstSecretKey(secretKeyRingBundle);
            if (foundKey != null)
                return foundKey;              
        }
        throw new ArgumentException(""Can't find signing key in key ring."");
    }

    private PgpSecretKey GetFirstSecretKey(PgpSecretKeyRingBundle secretKeyRingBundle)
    {
       foreach (PgpSecretKeyRing kRing in secretKeyRingBundle.GetKeyRings())
        {
            PgpSecretKey key = (PgpSecretKey)kRing.GetSecretKeys();
            if (key != null)
                return key;
        }
        return null;
    }
    #endregion

    #region Public Key
    private PgpPublicKey ReadPublicKey(string publicKeyPath)
    {
        using (Stream keyIn = File.OpenRead(publicKeyPath))
        using (Stream inputStream = PgpUtilities.GetDecoderStream(keyIn))
        {
            PgpPublicKeyRingBundle publicKeyRingBundle = new PgpPublicKeyRingBundle(inputStream);
            PgpPublicKey foundKey = GetFirstPublicKey(publicKeyRingBundle);
            if (foundKey != null)
                return foundKey;
        }
        throw new ArgumentException(""No encryption key found in public key ring."");
    }

    private PgpPublicKey GetFirstPublicKey(PgpPublicKeyRingBundle publicKeyRingBundle)
    {
        foreach (PgpPublicKeyRing kRing in publicKeyRingBundle.GetKeyRings())
        {
            PgpPublicKey key = (PgpPublicKey)kRing.GetPublicKeys();
            //PgpPublicKey key = kRing.GetPublicKeys()
                                //.Cast<PgpPublicKey>()
                                // .Where(k => k.IsEncryptionKey)
                                //  .FirstOrDefault();
            if (key != null)
                return key;
        }
        return null;
    }
    #endregion

    #region Private Key
    private PgpPrivateKey ReadPrivateKey(string passPhrase)
    {
        PgpPrivateKey privateKey = SecretKey.ExtractPrivateKey(passPhrase.ToCharArray());
        if (privateKey != null)
            return privateKey;
        throw new ArgumentException(""No private key found in secret key."");
    }
    #endregion        
}


public class PgpEncrypt
{

    private PgpEncryptionKeys m_encryptionKeys;
    private const int BufferSize = 0x10000; // should always be power of 2  

    /// <summary>
    /// Instantiate a new PgpEncrypt class with initialized PgpEncryptionKeys.
    /// </summary>
    /// <param name=""encryptionKeys""></param>
    /// <exception cref=""ArgumentNullException"">encryptionKeys is null</exception>
    public PgpEncrypt(PgpEncryptionKeys encryptionKeys)
    {

        if (encryptionKeys == null)

            throw new ArgumentNullException(""encryptionKeys"", ""encryptionKeys is null."");
        m_encryptionKeys = encryptionKeys;
    }

    /// <summary>
    /// Encrypt and sign the file pointed to by unencryptedFileInfo and 
    /// write the encrypted content to outputStream.
    /// </summary>
    /// <param name=""outputStream"">The stream that will contain the 
    /// encrypted data when this method returns.</param>
    /// <param name=""fileName"">FileInfo of the file to encrypt</param>
    public void EncryptAndSign(Stream outputStream, FileInfo unencryptedFileInfo)
    {
        if (outputStream == null)
            throw new ArgumentNullException(""outputStream"", ""outputStream is null."");
        if (unencryptedFileInfo == null)
            throw new ArgumentNullException(""unencryptedFileInfo"", ""unencryptedFileInfo is null."");
        if (!File.Exists(unencryptedFileInfo.FullName))
            throw new ArgumentException(""File to encrypt not found."");
        using (Stream encryptedOut = ChainEncryptedOut(outputStream))
        using (Stream compressedOut = ChainCompressedOut(encryptedOut))
        {
            PgpSignatureGenerator signatureGenerator = InitSignatureGenerator compressedOut);
            using (Stream literalOut = ChainLiteralOut(compressedOut, unencryptedFileInfo))
            using (FileStream inputFile = unencryptedFileInfo.OpenRead())
            {
                WriteOutputAndSign(compressedOut, literalOut, inputFile, signatureGenerator);
            }
        }
    }

    private static void WriteOutputAndSign(Stream compressedOut,Stream literalOut,FileStream inputFile,PgpSignatureGenerator signatureGenerator)
    {
        int length = 0;
        byte[] buf = new byte[BufferSize];
        while ((length = inputFile.Read(buf, 0, buf.Length)) > 0)
        {
            literalOut.Write(buf, 0, length);
            signatureGenerator.Update(buf, 0, length);
        }
        signatureGenerator.Generate().Encode(compressedOut);
    }

    private Stream ChainEncryptedOut(Stream outputStream)
    {
        PgpEncryptedDataGenerator encryptedDataGenerator;
        encryptedDataGenerator =
            new PgpEncryptedDataGenerator(SymmetricKeyAlgorithmTag.TripleDes,
                                          new SecureRandom());
        encryptedDataGenerator.AddMethod(m_encryptionKeys.PublicKey);
        return encryptedDataGenerator.Open(outputStream, new byte[BufferSize]);
    }

    private static Stream ChainCompressedOut(Stream encryptedOut)
    {
        PgpCompressedDataGenerator compressedDataGenerator =
            new PgpCompressedDataGenerator(CompressionAlgorithmTag.Zip);
        return compressedDataGenerator.Open(encryptedOut);
    }

    private static Stream ChainLiteralOut(Stream compressedOut, FileInfo file)
    {
        PgpLiteralDataGenerator pgpLiteralDataGenerator = new PgpLiteralDataGenerator();
        return pgpLiteralDataGenerator.Open(compressedOut, PgpLiteralData.Binary, file);
    }

    private PgpSignatureGenerator InitSignatureGenerator(Stream compressedOut)
    {
        const bool IsCritical = false;
        const bool IsNested = false;
        PublicKeyAlgorithmTag tag = m_encryptionKeys.SecretKey.PublicKey.Algorithm;
        PgpSignatureGenerator pgpSignatureGenerator =
            new PgpSignatureGenerator(tag, HashAlgorithmTag.Sha1);
        pgpSignatureGenerator.InitSign(PgpSignature.BinaryDocument, m_encryptionKeys.PrivateKey);

        foreach (string userId in m_encryptionKeys.SecretKey.PublicKey.GetUserIds())
        {
            PgpSignatureSubpacketGenerator subPacketGenerator =
               new PgpSignatureSubpacketGenerator();
            subPacketGenerator.SetSignerUserId(IsCritical, userId);
            pgpSignatureGenerator.SetHashedSubpackets(subPacketGenerator.Generate());
            // Just the first one!
            break;
        }

        pgpSignatureGenerator.GenerateOnePassVersion(IsNested).Encode(compressedOut);
        return pgpSignatureGenerator;
    }
}

","You should obtain public key of the recipient of the message, and generate your own secret key (if you need to sign files). Also PGP allows password-based encryption, if this suits your needs.
Also I would recommend to take a look on commercial libraries (like SecureBlackbox) as well. They are costy, but includes much better support, demos, documentation, etc.
","2861","<c#><encryption><bouncycastle><public-key-encryption><pgp>","-1","0","2","2016-01-29 07:19:50","","2","","445517","","2013-07-04 18:42:45","2013-04-26 11:46:24",""
"16235661","Bouncy Castle Encryption","I have a requirment to send PGP Encrypted CSV Files to SFTP and i know nothing aboutr PGP. After a lot of research I could find following code on internet using 'Bouncy Castle' Library. The code seems gogod but does not work for me given my inexperience in PGP. Please help me in finding right values for:

publicKeyFileName
privateKeyFileName
pasPhrase

Below is my code:
namespace PgpEncryption
{
    class Program
    {
        public static void Main()
        {
            EncryptAndSign();
        }

        private static void EncryptAndSign()
        {
            string publicKeyFileName = """";
            string privateKeyFileName = """";
            string pasPhrase = """";    
            PgpEncryptionKeys encryptionKeys
                = new PgpEncryptionKeys(publicKeyFileName, privateKeyFileName, pasPhrase);
            PgpEncrypt encrypter = new PgpEncrypt(encryptionKeys);
            string encryptedFileName = """";
            using (Stream outputStream = File.Create(encryptedFileName))
            {
                string fileToEncrypt = """";    
                encrypter.EncryptAndSign(outputStream, new FileInfo(fileToEncrypt));
            }    
        }
    }
}

public class PgpEncryptionKeys
{
    public PgpEncryptionKeys(string publicKeyPath, string privateKeyPath, string passPhrase)
    {
        if (!File.Exists(publicKeyPath))
            throw new ArgumentException(""Public key file not found"", ""publicKeyPath"");
        if (!File.Exists(privateKeyPath))
            throw new ArgumentException(""Private key file not found"", ""privateKeyPath"");
        if (String.IsNullOrEmpty(passPhrase))
            throw new ArgumentException(""passPhrase is null or empty."", ""passPhrase"");
        PublicKey = ReadPublicKey(publicKeyPath);
        SecretKey = ReadSecretKey(privateKeyPath);
        PrivateKey = ReadPrivateKey(passPhrase);
    }

    #region Secret Key
    private PgpSecretKey ReadSecretKey(string privateKeyPath)
    {
        using (Stream keyIn = File.OpenRead(privateKeyPath))
        using (Stream inputStream = PgpUtilities.GetDecoderStream(keyIn))
        {
            PgpSecretKeyRingBundle secretKeyRingBundle = new PgpSecretKeyRingBundle(inputStream);
            PgpSecretKey foundKey = GetFirstSecretKey(secretKeyRingBundle);
            if (foundKey != null)
                return foundKey;              
        }
        throw new ArgumentException(""Can't find signing key in key ring."");
    }

    private PgpSecretKey GetFirstSecretKey(PgpSecretKeyRingBundle secretKeyRingBundle)
    {
       foreach (PgpSecretKeyRing kRing in secretKeyRingBundle.GetKeyRings())
        {
            PgpSecretKey key = (PgpSecretKey)kRing.GetSecretKeys();
            if (key != null)
                return key;
        }
        return null;
    }
    #endregion

    #region Public Key
    private PgpPublicKey ReadPublicKey(string publicKeyPath)
    {
        using (Stream keyIn = File.OpenRead(publicKeyPath))
        using (Stream inputStream = PgpUtilities.GetDecoderStream(keyIn))
        {
            PgpPublicKeyRingBundle publicKeyRingBundle = new PgpPublicKeyRingBundle(inputStream);
            PgpPublicKey foundKey = GetFirstPublicKey(publicKeyRingBundle);
            if (foundKey != null)
                return foundKey;
        }
        throw new ArgumentException(""No encryption key found in public key ring."");
    }

    private PgpPublicKey GetFirstPublicKey(PgpPublicKeyRingBundle publicKeyRingBundle)
    {
        foreach (PgpPublicKeyRing kRing in publicKeyRingBundle.GetKeyRings())
        {
            PgpPublicKey key = (PgpPublicKey)kRing.GetPublicKeys();
            //PgpPublicKey key = kRing.GetPublicKeys()
                                //.Cast<PgpPublicKey>()
                                // .Where(k => k.IsEncryptionKey)
                                //  .FirstOrDefault();
            if (key != null)
                return key;
        }
        return null;
    }
    #endregion

    #region Private Key
    private PgpPrivateKey ReadPrivateKey(string passPhrase)
    {
        PgpPrivateKey privateKey = SecretKey.ExtractPrivateKey(passPhrase.ToCharArray());
        if (privateKey != null)
            return privateKey;
        throw new ArgumentException(""No private key found in secret key."");
    }
    #endregion        
}


public class PgpEncrypt
{

    private PgpEncryptionKeys m_encryptionKeys;
    private const int BufferSize = 0x10000; // should always be power of 2  

    /// <summary>
    /// Instantiate a new PgpEncrypt class with initialized PgpEncryptionKeys.
    /// </summary>
    /// <param name=""encryptionKeys""></param>
    /// <exception cref=""ArgumentNullException"">encryptionKeys is null</exception>
    public PgpEncrypt(PgpEncryptionKeys encryptionKeys)
    {

        if (encryptionKeys == null)

            throw new ArgumentNullException(""encryptionKeys"", ""encryptionKeys is null."");
        m_encryptionKeys = encryptionKeys;
    }

    /// <summary>
    /// Encrypt and sign the file pointed to by unencryptedFileInfo and 
    /// write the encrypted content to outputStream.
    /// </summary>
    /// <param name=""outputStream"">The stream that will contain the 
    /// encrypted data when this method returns.</param>
    /// <param name=""fileName"">FileInfo of the file to encrypt</param>
    public void EncryptAndSign(Stream outputStream, FileInfo unencryptedFileInfo)
    {
        if (outputStream == null)
            throw new ArgumentNullException(""outputStream"", ""outputStream is null."");
        if (unencryptedFileInfo == null)
            throw new ArgumentNullException(""unencryptedFileInfo"", ""unencryptedFileInfo is null."");
        if (!File.Exists(unencryptedFileInfo.FullName))
            throw new ArgumentException(""File to encrypt not found."");
        using (Stream encryptedOut = ChainEncryptedOut(outputStream))
        using (Stream compressedOut = ChainCompressedOut(encryptedOut))
        {
            PgpSignatureGenerator signatureGenerator = InitSignatureGenerator compressedOut);
            using (Stream literalOut = ChainLiteralOut(compressedOut, unencryptedFileInfo))
            using (FileStream inputFile = unencryptedFileInfo.OpenRead())
            {
                WriteOutputAndSign(compressedOut, literalOut, inputFile, signatureGenerator);
            }
        }
    }

    private static void WriteOutputAndSign(Stream compressedOut,Stream literalOut,FileStream inputFile,PgpSignatureGenerator signatureGenerator)
    {
        int length = 0;
        byte[] buf = new byte[BufferSize];
        while ((length = inputFile.Read(buf, 0, buf.Length)) > 0)
        {
            literalOut.Write(buf, 0, length);
            signatureGenerator.Update(buf, 0, length);
        }
        signatureGenerator.Generate().Encode(compressedOut);
    }

    private Stream ChainEncryptedOut(Stream outputStream)
    {
        PgpEncryptedDataGenerator encryptedDataGenerator;
        encryptedDataGenerator =
            new PgpEncryptedDataGenerator(SymmetricKeyAlgorithmTag.TripleDes,
                                          new SecureRandom());
        encryptedDataGenerator.AddMethod(m_encryptionKeys.PublicKey);
        return encryptedDataGenerator.Open(outputStream, new byte[BufferSize]);
    }

    private static Stream ChainCompressedOut(Stream encryptedOut)
    {
        PgpCompressedDataGenerator compressedDataGenerator =
            new PgpCompressedDataGenerator(CompressionAlgorithmTag.Zip);
        return compressedDataGenerator.Open(encryptedOut);
    }

    private static Stream ChainLiteralOut(Stream compressedOut, FileInfo file)
    {
        PgpLiteralDataGenerator pgpLiteralDataGenerator = new PgpLiteralDataGenerator();
        return pgpLiteralDataGenerator.Open(compressedOut, PgpLiteralData.Binary, file);
    }

    private PgpSignatureGenerator InitSignatureGenerator(Stream compressedOut)
    {
        const bool IsCritical = false;
        const bool IsNested = false;
        PublicKeyAlgorithmTag tag = m_encryptionKeys.SecretKey.PublicKey.Algorithm;
        PgpSignatureGenerator pgpSignatureGenerator =
            new PgpSignatureGenerator(tag, HashAlgorithmTag.Sha1);
        pgpSignatureGenerator.InitSign(PgpSignature.BinaryDocument, m_encryptionKeys.PrivateKey);

        foreach (string userId in m_encryptionKeys.SecretKey.PublicKey.GetUserIds())
        {
            PgpSignatureSubpacketGenerator subPacketGenerator =
               new PgpSignatureSubpacketGenerator();
            subPacketGenerator.SetSignerUserId(IsCritical, userId);
            pgpSignatureGenerator.SetHashedSubpackets(subPacketGenerator.Generate());
            // Just the first one!
            break;
        }

        pgpSignatureGenerator.GenerateOnePassVersion(IsNested).Encode(compressedOut);
        return pgpSignatureGenerator;
    }
}

","i think you miss some of the code?
 public class PgpEncryptionKeys {
    public PgpPublicKey PublicKey { get; private set; }
    public PgpPrivateKey PrivateKey { get; private set; }
    public PgpSecretKey SecretKey { get; private set; }

","2861","<c#><encryption><bouncycastle><public-key-encryption><pgp>","-1","0","2","2016-01-29 07:19:50","","2","","445517","","2013-07-04 18:42:45","2013-04-26 11:46:24",""
"23318485","Whose key is used to encrypt a HTTPS response?","I have a web server built up relying on HTTPS. So, my server maintains its private key and publish a public key that any clients can use to encrypt their request. Since my server is the only one who has the private key to decrypt any message encryped using server's public key, any request sent this way can be considered secure.
However my question is at the response part. When the server sends the response back to the client, whose public key will the server use to encrypt the response message?
I assume the server will use client's public key to encrypt the response (by default? or upon configuration?). If so, does the server knows the client's public key from the request it sends to the server, or somehow else?
Update:
If I understand it incorrectly, then during future communications how each party knows how to decrypt the message the other one sends? Is some key shared or somehow?
Thanks!
","None.
Public and private key are used to negotiate a symmetric encryption key, that will be used during that session. Asymmetric encryption uses two keys (private and public), symmetric encryption uses only one.
Your server sends its public key to a client, the client validates that key signature (check the CA and all that) then use it to encrypt a randomly selected key that will be used as symmetric encryption key, and send it to the server. Because only the private key can decrypt that message, the message is secure, only the server can decrypt it. Then the server accepts that key selected by the client, and they start to transmit data using symmetric encryption.
Why all this? asymmetric encryption is quite computionally expensive, so it is just used to ensure that client and server can negotiate a secure symmetric key without sending it in plain text. Symmetric encryption is cheap.
Symmetric encryption is also safe, the problem is that both parts must know the key before start, and that is a big issue. By using asymmetric encryption for negotiating the key, this problem is solved.
UPDATE
Well, it seems that @EJP does not agree with my answer, so I tried to find some more documentation that explain the thing in an easy way.
http://www.techradar.com/news/software/how-ssl-and-tls-works-1047412

SSL explained
When you visit a bank's website, the bank's server will automatically
  redirect you to its secure site using the HTTPS protocol before you
  can log in. This results in your browser and the bank's site
  negotiating a secure channel using SSL.
This negotiation goes a little like this (note that I've simplified it
  greatly). The browser sends a message stating what the latest version
  of SSL it can support and a list of symmetric algorithms it can use.
  The web server sends back a message with the version of SSL and the
  algorithm that will be used.
It sends its certificate as well. The client verifies the certificate
  using the known certificates that came with the browser; in other
  words, it checks that it has been signed by a trusted CA and that it
  hasn't expired.
If the certificate is valid, the browser generates a one-time key for
  the session, encrypts it with the server's public key (it's part of
  the certificate), and sends it to the server. The server decrypts the
  key, then uses that key together with the agreed symmetric algorithm
  for the rest of the session.

I may be confused.
","2854","<ssl><https><public-key-encryption><public-key>","6","5","3","2014-04-28 06:22:29","23333889","0","3","2889276","","2014-04-27 22:45:46","2014-04-27 01:51:40",""
"23318485","Whose key is used to encrypt a HTTPS response?","I have a web server built up relying on HTTPS. So, my server maintains its private key and publish a public key that any clients can use to encrypt their request. Since my server is the only one who has the private key to decrypt any message encryped using server's public key, any request sent this way can be considered secure.
However my question is at the response part. When the server sends the response back to the client, whose public key will the server use to encrypt the response message?
I assume the server will use client's public key to encrypt the response (by default? or upon configuration?). If so, does the server knows the client's public key from the request it sends to the server, or somehow else?
Update:
If I understand it incorrectly, then during future communications how each party knows how to decrypt the message the other one sends? Is some key shared or somehow?
Thanks!
","
My server maintains its private key and publish a public key

Yes.

that any clients can use to encrypt their request.

No.

Since my server is the only one who has the private key to decrypt any message encryped using server's public key, any request sent this way can be considered secure.

That's not how it works.

However my question is at the response part. When the server sends the response back to the client, whose public key will the server use to encrypt the response message?

None.

I assume the server will use client's public key to encrypt the response (by default? or upon configuration?).

No. See below. In most SSL connections the server doesn't even know the client's public key,if indeed the client even has one. This only occurs in so-called 'mutual' SSL, Where both peers authenticate to each other.

If so, does the server knows the client's public key from the request it sends to the server, or somehow else?

It only knows the public key if the client sends its certificate, which only happens if the server is configured to request it, which it usually isn't.
HTTPS runs over SSL, which uses a symmetric session key negotiated independently by both peers. It is never transmitted. The server's key is only used to provide a digital signature over its certificate, which the client can verify, which proves that that server owns that certificate. From there on it is all symmetric negotiation and encryption.
Authority: RFC 2246 and successors.
","2854","<ssl><https><public-key-encryption><public-key>","6","2","3","2014-04-28 06:22:29","23333889","0","3","2889276","","2014-04-27 22:45:46","2014-04-27 01:51:40",""
"23318485","Whose key is used to encrypt a HTTPS response?","I have a web server built up relying on HTTPS. So, my server maintains its private key and publish a public key that any clients can use to encrypt their request. Since my server is the only one who has the private key to decrypt any message encryped using server's public key, any request sent this way can be considered secure.
However my question is at the response part. When the server sends the response back to the client, whose public key will the server use to encrypt the response message?
I assume the server will use client's public key to encrypt the response (by default? or upon configuration?). If so, does the server knows the client's public key from the request it sends to the server, or somehow else?
Update:
If I understand it incorrectly, then during future communications how each party knows how to decrypt the message the other one sends? Is some key shared or somehow?
Thanks!
","Public keys are not directly used to encrypt any of the the underlying HTTP traffic on an HTTPS connection; neither the HTTP request nor the HTTP response are encrypted this way.  Rather, during the initial SSL handshake, a session specific symmetric key is negotiated between the client and the server, and it's the symmetric key that is then used to encrypt all traffic on the HTTP connection in both directions.
The specific mechanism by which the symmetric key is negotiated depends on the specific cipher suite that is negotiated between client and server.  This negotiation always involves the server's public key and a value sent by the client; it may also involve items like a client public key or separate connection specific public keys from the server and client.
Additional detail can be found in RFC 5246 starting here:
http://tools.ietf.org/html/rfc5246#section-7.3
","2854","<ssl><https><public-key-encryption><public-key>","6","11","3","2014-04-28 06:22:29","23333889","0","3","2889276","","2014-04-27 22:45:46","2014-04-27 01:51:40",""
"10185195","openSSL: handshake failure - server cannot get client certificate","I am trying to write client and server code to do SSL handshake using openSSL API.
Client code contains:
 // Part of client code:
 SSL_CTX_set_verify(ctx,SSL_VERIFY_PEER,NULL);
 SSL_CTX_load_verify_locations(ctx,""ca.pem"",NULL);
 ...
 if (SSL_CTX_use_certificate_file(ctx, ""cli.crt"" , SSL_FILETYPE_PEM) <= 0) {
  exit(1);
  }

  if (SSL_CTX_use_PrivateKey_file(ctx, ""cli.key"", SSL_FILETYPE_PEM) <= 0) {
  exit(1);
  }
 ...
 sd = socket (AF_INET, SOCK_STREAM, 0);
 sa.sin_family      = AF_INET;
 sa.sin_addr.s_addr = inet_addr (""127.0.0.1""); 
 sa.sin_port        = htons (44444);
 ...
 ssl = SSL_new (ctx);              
 SSL_set_fd (ssl, sd);
 err = SSL_connect (ssl); 

Server code contains:
 // Part of server code:
 SSL_CTX_set_verify(ctx,SSL_VERIFY_PEER,NULL);
 SSL_CTX_load_verify_locations(ctx,""ca.pem"",NULL);
 ...
 if (SSL_CTX_use_certificate_file(ctx, ""serv.crt"", SSL_FILETYPE_PEM) <= 0) {
    exit(1);
 }
 if (SSL_CTX_use_PrivateKey_file(ctx, ""serv.key"", SSL_FILETYPE_PEM) <= 0) {
    exit(1);
  }
 ...
 listen_sd = socket (AF_INET, SOCK_STREAM, 0);  
 memset (&sa_serv, '\0', sizeof(sa_serv));
 sa_serv.sin_family      = AF_INET;
 sa_serv.sin_addr.s_addr = INADDR_ANY;
 sa_serv.sin_port        = htons (44444);

 err = bind(listen_sd, (struct sockaddr*) &sa_serv, sizeof (sa_serv));                           
 err = listen (listen_sd, 5);       
 client_len = sizeof(sa_cli);
 sd = accept (listen_sd, (struct sockaddr*) &sa_cli, &client_len);
 close (listen_sd);
 ....
 ssl = SSL_new (ctx);                           
 SSL_set_fd (ssl, sd);
 err = SSL_accept (ssl);   

I ran the code using destination address as loop back address (127.0.0.1), as can be seen from the code shown above. The client and server programs executed on same machine worked fine.
But, when I run the client and server programs on different machines (VMWare VMs - Ubuntu Linux), the code fails. 
 Client VM IP:192.168.181.188
 Server VM IP:192.168.181.180

Using the IP of server VM (e.g. 192.168.181.180) as address in client code, I get the following error at server:
 140890B2: SSL3_GET_CLIENT_CERTIFICATE:no certificate returned: s3_srvr.c:2602:

I have created my own CA on my Linux machine and shared the CA public key file with both client and server VMs. The client and server certificates are signed by this CA.
 CA : CA123
 Client CN: Client (signed by CA123)
 Server CN: Server (signed by CA123)

The client is able to verify server certificate (I can even get server certificate and check CN is indeed 'Server'), but server can't get client certificate,so handshake fails.
Can anyone suggest a solution to this problem?
Thanks a lot.
","Check subject of the client certificate. Some times the CN (common name) field should have IP or host name of the client host. 
In your case, the client certificate could have the following subject:
Subject: C=xxx, ST=xxx, L=xxx, O=xxx, OU=xxx, CN=192.168.181.180

I am not 100% sure about this fix. But before breaking the wall, try it. 
","2833","<c><linux><openssl><vmware><public-key-encryption>","2","0","2","2012-04-17 20:43:55","","0","1","682869","","2012-04-17 14:30:57","2012-04-17 04:47:03",""
"10185195","openSSL: handshake failure - server cannot get client certificate","I am trying to write client and server code to do SSL handshake using openSSL API.
Client code contains:
 // Part of client code:
 SSL_CTX_set_verify(ctx,SSL_VERIFY_PEER,NULL);
 SSL_CTX_load_verify_locations(ctx,""ca.pem"",NULL);
 ...
 if (SSL_CTX_use_certificate_file(ctx, ""cli.crt"" , SSL_FILETYPE_PEM) <= 0) {
  exit(1);
  }

  if (SSL_CTX_use_PrivateKey_file(ctx, ""cli.key"", SSL_FILETYPE_PEM) <= 0) {
  exit(1);
  }
 ...
 sd = socket (AF_INET, SOCK_STREAM, 0);
 sa.sin_family      = AF_INET;
 sa.sin_addr.s_addr = inet_addr (""127.0.0.1""); 
 sa.sin_port        = htons (44444);
 ...
 ssl = SSL_new (ctx);              
 SSL_set_fd (ssl, sd);
 err = SSL_connect (ssl); 

Server code contains:
 // Part of server code:
 SSL_CTX_set_verify(ctx,SSL_VERIFY_PEER,NULL);
 SSL_CTX_load_verify_locations(ctx,""ca.pem"",NULL);
 ...
 if (SSL_CTX_use_certificate_file(ctx, ""serv.crt"", SSL_FILETYPE_PEM) <= 0) {
    exit(1);
 }
 if (SSL_CTX_use_PrivateKey_file(ctx, ""serv.key"", SSL_FILETYPE_PEM) <= 0) {
    exit(1);
  }
 ...
 listen_sd = socket (AF_INET, SOCK_STREAM, 0);  
 memset (&sa_serv, '\0', sizeof(sa_serv));
 sa_serv.sin_family      = AF_INET;
 sa_serv.sin_addr.s_addr = INADDR_ANY;
 sa_serv.sin_port        = htons (44444);

 err = bind(listen_sd, (struct sockaddr*) &sa_serv, sizeof (sa_serv));                           
 err = listen (listen_sd, 5);       
 client_len = sizeof(sa_cli);
 sd = accept (listen_sd, (struct sockaddr*) &sa_cli, &client_len);
 close (listen_sd);
 ....
 ssl = SSL_new (ctx);                           
 SSL_set_fd (ssl, sd);
 err = SSL_accept (ssl);   

I ran the code using destination address as loop back address (127.0.0.1), as can be seen from the code shown above. The client and server programs executed on same machine worked fine.
But, when I run the client and server programs on different machines (VMWare VMs - Ubuntu Linux), the code fails. 
 Client VM IP:192.168.181.188
 Server VM IP:192.168.181.180

Using the IP of server VM (e.g. 192.168.181.180) as address in client code, I get the following error at server:
 140890B2: SSL3_GET_CLIENT_CERTIFICATE:no certificate returned: s3_srvr.c:2602:

I have created my own CA on my Linux machine and shared the CA public key file with both client and server VMs. The client and server certificates are signed by this CA.
 CA : CA123
 Client CN: Client (signed by CA123)
 Server CN: Server (signed by CA123)

The client is able to verify server certificate (I can even get server certificate and check CN is indeed 'Server'), but server can't get client certificate,so handshake fails.
Can anyone suggest a solution to this problem?
Thanks a lot.
","Okay ... I am not sure that the following is a complete solution, its just a fix that a found for my current project, I am still not satisfied with my answer.
So, by reading my question, you will observe that I mentioned that the CA was made on a linux machine and certificates for client and server were signed by that CA. That host is another VMWare VM, call it ""VM3"". So certificates I generated using ""CA123"" on ""VM3"" for client and server didn't work on client VM (call it ""VM1"") and server VM(call it ""VM2""). Out of curiosity, I tried to setup a CA on the VM2, and sign client and server certificates, and copied client certificate to client VM. To my surprise, it works, but I don't know why. I can't answer what kind of dependency did I create on VM3 ?
Feel free to post a more accurate and complete answer.
","2833","<c><linux><openssl><vmware><public-key-encryption>","2","0","2","2012-04-17 20:43:55","","0","1","682869","","2012-04-17 14:30:57","2012-04-17 04:47:03",""
"41014428","invalid private key when opening SSH tunnel with jsch","With jsch I'm calling addIdentity() to add a private key and getSession() to open an SSH tunnel.
When running this code locally on my Windows machine the opening of the tunnel is working.
However when running that same code with the same private key on our CI the following error occurs:
2016-12-07 01:01:32 ERROR SSHConnector:25 - invalid privatekey: [B@4bb4de6a
com.jcraft.jsch.JSchException: invalid privatekey: [B@4bb4de6a
    at com.jcraft.jsch.KeyPair.load(KeyPair.java:747)
    at com.jcraft.jsch.KeyPair.load(KeyPair.java:561)
    at com.jcraft.jsch.IdentityFile.newInstance(IdentityFile.java:40)
    at com.jcraft.jsch.JSch.addIdentity(JSch.java:408)
    at com.jcraft.jsch.JSch.addIdentity(JSch.java:389)

The private key looks something like this:
PuTTY-User-Key-File-2: ssh-rsa
Encryption: none
Comment: imported-openssh-key
Public-Lines: 6
XXXXXXXXXXXXXXXXXXX
Private-Lines: 14
XXXXXXXXXXXXXXXXXX
Private-MAC: XXXXXXXXXXXXXXXX

What could be the error here?
","My educated guess is that jSCh does not support PuTTY key format, but rather standard PEM or OpenSSH format. You can convert the PPK to PEM in the PuTTYgen and it should solve your problems.
","2827","<java><ssh><public-key-encryption><jsch><private-key>","1","1","2","2018-09-26 17:43:22","","2","","2196426","","2016-12-07 21:01:18","2016-12-07 10:00:06",""
"41014428","invalid private key when opening SSH tunnel with jsch","With jsch I'm calling addIdentity() to add a private key and getSession() to open an SSH tunnel.
When running this code locally on my Windows machine the opening of the tunnel is working.
However when running that same code with the same private key on our CI the following error occurs:
2016-12-07 01:01:32 ERROR SSHConnector:25 - invalid privatekey: [B@4bb4de6a
com.jcraft.jsch.JSchException: invalid privatekey: [B@4bb4de6a
    at com.jcraft.jsch.KeyPair.load(KeyPair.java:747)
    at com.jcraft.jsch.KeyPair.load(KeyPair.java:561)
    at com.jcraft.jsch.IdentityFile.newInstance(IdentityFile.java:40)
    at com.jcraft.jsch.JSch.addIdentity(JSch.java:408)
    at com.jcraft.jsch.JSch.addIdentity(JSch.java:389)

The private key looks something like this:
PuTTY-User-Key-File-2: ssh-rsa
Encryption: none
Comment: imported-openssh-key
Public-Lines: 6
XXXXXXXXXXXXXXXXXXX
Private-Lines: 14
XXXXXXXXXXXXXXXXXX
Private-MAC: XXXXXXXXXXXXXXXX

What could be the error here?
","My problem was solved by Using pem file instead of ppk.
pem file is in openssh format that com.jcraft.jsch.JSch jar requires
","2827","<java><ssh><public-key-encryption><jsch><private-key>","1","1","2","2018-09-26 17:43:22","","2","","2196426","","2016-12-07 21:01:18","2016-12-07 10:00:06",""
"8959711","Where to store the sensitive data in vb.net securely","I have a vb.net application that uses my gmail smtp server settings and my password to send me the users feedback through the email, (I don't want to show my email to the users) 
The problem is I want to store these data securely in the vb.net application so that It's hard for any hackers/crackers through (reverse engineering or programs like cheat engine) to get my gmail account data.
Any ideas are welcome.
","Basically, if I'm understanding your question, you don't want the password in clear text in your .exe.  Correct?
The solution is simply to ENCRYPT the string in your program, then decrypt it at runtime (pass your decrypted variable to your e-mail function).
Any two-way encryption will work.  For example:
http://www.vbdotnetforums.com/security/1240-encrypt-password.html
","2822","<vb.net><security><rsa><aes><public-key-encryption>","5","1","3","2012-01-22 08:56:55","8959977","5","","","","","2012-01-22 07:37:01",""
"8959711","Where to store the sensitive data in vb.net securely","I have a vb.net application that uses my gmail smtp server settings and my password to send me the users feedback through the email, (I don't want to show my email to the users) 
The problem is I want to store these data securely in the vb.net application so that It's hard for any hackers/crackers through (reverse engineering or programs like cheat engine) to get my gmail account data.
Any ideas are welcome.
","You cannot be 100% secure, you could store the email in a resource file and use an obsficator to make it much harder to get at the string but it is possible to break it (encrypted resource files and strings).  However Even if you used a different email address and setup a forwarding rule the password for that account could still be comprimised.  Anything you have access to in code a hacker could potentially break into as the key will be in clear text at some point.
You have a number of secure options:

Setup a webservice to receive your messages and email them onto you/log them to a database
Log your messages to a 3rd Party system (irc? news? some p2p network, IM system), and pick um the messages later.
Setup a Source Control/issue site for your system, google code/bitbucket/something else that has the ability to receive issues via an api.

","2822","<vb.net><security><rsa><aes><public-key-encryption>","5","4","3","2012-01-22 08:56:55","8959977","5","","","","","2012-01-22 07:37:01",""
"8959711","Where to store the sensitive data in vb.net securely","I have a vb.net application that uses my gmail smtp server settings and my password to send me the users feedback through the email, (I don't want to show my email to the users) 
The problem is I want to store these data securely in the vb.net application so that It's hard for any hackers/crackers through (reverse engineering or programs like cheat engine) to get my gmail account data.
Any ideas are welcome.
","I don't know if this makes any sense but what I'd do is let the program run an external PHP script that sends the mail.
","2822","<vb.net><security><rsa><aes><public-key-encryption>","5","2","3","2012-01-22 08:56:55","8959977","5","","","","","2012-01-22 07:37:01",""
"28046070","How to generate key pair in asymmetric encryption in java?","I am trying to generate a key pair in asymmetric encryption in Java, but I am getting an invalid key exception error and it says No installed provider supports this key: sun.security.rsa.RSAPrivateCrtKeyImpl.
private static byte[] encrypt(byte[] inpBytes, PrivateKey prvk,
      String xform) throws Exception {
    Cipher cipher = Cipher.getInstance(xform);
    cipher.init(Cipher.ENCRYPT_MODE, prvk);
    return cipher.doFinal(inpBytes);
}

@Override
public byte[] uploadFile(byte[] data, String name, String file, int size)
      throws RemoteException {
    // TODO Auto-generated method stub
    byte[] keyss=null;
    try {
        OutputStream out =
          new FileOutputStream(new File(""C:\\Users\\Amaresh\\Documents\\Cloud\\""
          + name + ""\\"" + file));
        String xform = ""DES/CTR/NoPadding"";
        KeyPairGenerator kpg = KeyPairGenerator.getInstance(""RSA""); // Original
        kpg.initialize(1024); // 512 is the keysize.//try 1024 biit
        KeyPair kp = kpg.genKeyPair();
        PublicKey pubk = kp.getPublic();
        PrivateKey prvk = kp.getPrivate();
        keyss = pubk.getEncoded();
        byte[] encBytes = encrypt(data, prvk, xform);
        System.out.println(""Keypair generated"");
        out.write(encBytes, 0, encBytes.length);
        out.close();
    } catch (IOException e) {
        // TODO Auto-generated catch block
        e.printStackTrace();
    } catch (NoSuchAlgorithmException e) {
        // TODO Auto-generated catch block
        e.printStackTrace();
    } catch (NoSuchProviderException e) {
        // TODO Auto-generated catch block
        e.printStackTrace();
    } catch (Exception e) {
        // TODO Auto-generated catch block
        e.printStackTrace();
    }
    return keyss;
}

I just want to do asymmetric encryption where I encrypt the data with private key and store the public key to decrypt it. I am a beginner and I am sorry for my blunt mistakes.
","DES Ciphers don't support RSA keys. DES is a symmetric cipher algorithm while RSA is asymmetric. Symmetric ciphers require the use of the same key for encryption and decryption while asymmetric ciphers use public/private keypairs.
You have two options to get your encryption working:

You could use your current symmetric cipher and create a symmetric key (maybe by using a KeyGenerator)  
You can change your cipher instance to an assymetric one like ""RSA"".
String xform = ""RSA"";


Note:
What you are trying to do is not encrypting but signing as encryption would be done with the public key.
Furthermore you should not encrypt complete files by an asymmetric mode but only a symmetric key which you use to encrypt and decrypt your data symmetrically. See http://en.wikipedia.org/wiki/Public-key_cryptography#Computational_cost.
","2809","<java><public-key-encryption><encryption-asymmetric>","0","1","2","2015-01-20 14:32:10","28047727","1","2","2382246","","2015-01-20 13:44:29","2015-01-20 13:03:58",""
"28046070","How to generate key pair in asymmetric encryption in java?","I am trying to generate a key pair in asymmetric encryption in Java, but I am getting an invalid key exception error and it says No installed provider supports this key: sun.security.rsa.RSAPrivateCrtKeyImpl.
private static byte[] encrypt(byte[] inpBytes, PrivateKey prvk,
      String xform) throws Exception {
    Cipher cipher = Cipher.getInstance(xform);
    cipher.init(Cipher.ENCRYPT_MODE, prvk);
    return cipher.doFinal(inpBytes);
}

@Override
public byte[] uploadFile(byte[] data, String name, String file, int size)
      throws RemoteException {
    // TODO Auto-generated method stub
    byte[] keyss=null;
    try {
        OutputStream out =
          new FileOutputStream(new File(""C:\\Users\\Amaresh\\Documents\\Cloud\\""
          + name + ""\\"" + file));
        String xform = ""DES/CTR/NoPadding"";
        KeyPairGenerator kpg = KeyPairGenerator.getInstance(""RSA""); // Original
        kpg.initialize(1024); // 512 is the keysize.//try 1024 biit
        KeyPair kp = kpg.genKeyPair();
        PublicKey pubk = kp.getPublic();
        PrivateKey prvk = kp.getPrivate();
        keyss = pubk.getEncoded();
        byte[] encBytes = encrypt(data, prvk, xform);
        System.out.println(""Keypair generated"");
        out.write(encBytes, 0, encBytes.length);
        out.close();
    } catch (IOException e) {
        // TODO Auto-generated catch block
        e.printStackTrace();
    } catch (NoSuchAlgorithmException e) {
        // TODO Auto-generated catch block
        e.printStackTrace();
    } catch (NoSuchProviderException e) {
        // TODO Auto-generated catch block
        e.printStackTrace();
    } catch (Exception e) {
        // TODO Auto-generated catch block
        e.printStackTrace();
    }
    return keyss;
}

I just want to do asymmetric encryption where I encrypt the data with private key and store the public key to decrypt it. I am a beginner and I am sorry for my blunt mistakes.
","You are generating the keys correctly.
KeyPairGenerator kpg = KeyPairGenerator.getInstance(""RSA"");
kpg.initialize(1024);
KeyPair keys = kpg.generateKeyPair();

The problem is in your: 
byte[] encBytes = encrypt(data, prvk, xform);

Most likely because you are passing in the String ""DES/CTR/NoPadding"". You cannot encrypt using DES with an RSA key pair.
","2809","<java><public-key-encryption><encryption-asymmetric>","0","3","2","2015-01-20 14:32:10","28047727","1","2","2382246","","2015-01-20 13:44:29","2015-01-20 13:03:58",""
"5116760","RSA encryption in .NET, decryption in python","I'm trying to encrypt a short message using RSA algorithm in C# and decrypt the message using a python skript.
I'd like to use the .NET classes on the C# side and pycrypto on python side. I've managed both sides to use the same key (which was not even trivial since .NET doesn't support the standard PEM/DER format directly). Encryption/decryption works on both sides independently.
I'm using PKCS#1 padding on the C# side (setting the fOAEP parameter of RSACryptoServiceProvider.Encrypt to false), so I'd expect that after decrypting the block in python I should see some kind of clear text (i.e. my ""message"" together with padding bytes)
But all I see is garbage :(.
Are there any caveats/pitfalls I'm not aware of on either side? I'm kind of out of ideas ...
Thx
Martin
Sample code
C# / Encryption
Console.Write(""Input string:"");
var s = Console.ReadLine();
var b = Encoding.Default.GetBytes(s);
var encrypted = rsa.Encrypt(b, false);
using (var file = new FileStream(filename, FileMode.Create)) {
  file.Write(encrypted, 0, encrypted.Length);
  file.Flush();
  file.Close();
}

Python / Decryption
f = open(filename, ""rb"")
msg = f.read()
f.close()
decrypted = rsa.decrypt(msg)
print ""Decrypted message:""
print_hex(decrypted)

For Key transfer I'm using the ToXmlString() method of RSACryptoServiceProvider. The resulting XML is parsed in python and the pycrypto-RSA object is initialized with
r = Crypto.PublicKey.RSA.construct((modulus, exponent, d, p, q))

where modulus, exponent, d, p and q are the respective fields of the .NET-RSAParameters structure. (as I've mentioned, I can encrypt/decrypt a message using this key in python, also p*q yields modulus, so I think the key import is working correctly ...)
","Ok, it was my fault, I just didn't look at the results: The leading zero (from PKCS#1 padding) is not part of the python result string, which looks (in hex) like:
02 a2 16 4e 51 45 aa 8d 
94 b0 de 64 4d 4c 4c bd 
0b 01 b8 d2 de dc ed 23 
0b 25 c2 11 6c 0a 0b 1f 
4f 19 d0 33 18 db e0 81 
25 33 f6 e3 70 8d 97 d2 
c7 ef 32 ef 27 3c c0 ac 
47 68 c0 5b 7b 6d 0d ba 
44 da cb bf e8 71 75 d3 
2f 9a b1 97 6b 70 4f ff 
98 6f 5a 9a 74 3c 65 94 
eb 57 52 8a 2f 73 1f 14 
7d 76 08 d3 e5 8b 82 b8 
5d ed 2b 75 52 29 b5 22 
af 76 55 bc 5d e9 41 99 
00 4d 61 72 74 69 6e 

So, 02 at the beginning points to random padding (somehow I was expecting 0xff padding...). The last 6 bytes (after the zero) are exactly the ""Message"" I was expecting, but a normal print didn't show them just because of the zero byte...
","2783","<.net><python><rsa><public-key-encryption><pycrypto>","3","2","1","2011-02-25 12:24:57","","5","1","81424","","2011-02-25 12:13:44","2011-02-25 11:36:26",""
"5965068","How to load RSA Public Key generated by openSSL into RSACryptoServiceProvider?","I am writing a .Net Class that reads a cookie from our central authentication server. It contains the UserId, some timestamps and a signature created by openssl_sign() using a 2048 Bit RSA key and a SHA1 Hash.
The current public key is provided in openssl PEM format on the server and changes on occasion. I cannot read the Key using .Net managed code alone (yet) and worked out the following procedure to get it working:

Extract Exponent and Modulus from the public key
Check key is still 2048 Bit
Store key length, exponent an modulus in Source, compile and deploy (Drop leading zeroes from the Modulus to make it work)

The Class then creates a new RSACryptoServiceProvider(2048) and feeds the public components using the RSAParameters structure into the CSP. Verification of the signature then succeeds.
I would like to get this working without me creating, compiling and deploying a new Assembly each time the key changes. To make things interesting I would like to stick to managed code only (rules out most examples I found). Something that sounds perfect is the internal ASN.1 Reader when creating an instance of AsnEncodedData(oid, data) but the only oid I found that could match, RSA aka 1.2.840.113549.1.1.1, did not work and produced raw bytes only.
Added: former public key

-----BEGIN PUBLIC KEY-----
  MFwwDQYJKoZIhvcNAQEBBQADSwAwSAJBAMW90O6C17fapbS35auKolsy7kI0FOE1
  C08y5HqgZ0rMXoocV4nHSHYBm2HVx2QSR5OLQtERgWDmxOu+vwU1GXUCAwEAAQ==
  -----END PUBLIC KEY-----

I found pempublic.cs wich seems to solve this using (as it seems) sourcecode from openSSL. I will leave the question open to see if there are any other solutions.
","You have the private key, so it's probably easier to generate a self-signed certificate from the key. You can use System.Security.Cryptography.X509Certificates.X509Certificate (I think you should have the certificate in DER / ASN.1 format rather thant PEM) to load the certificate and X509Certificate.GetPublicKey() to get the public key.
","2768","<.net><openssl><public-key-encryption>","3","-1","2","2014-11-15 16:35:50","","1","","664563","","2011-05-11 15:11:18","2011-05-11 13:29:43",""
"5965068","How to load RSA Public Key generated by openSSL into RSACryptoServiceProvider?","I am writing a .Net Class that reads a cookie from our central authentication server. It contains the UserId, some timestamps and a signature created by openssl_sign() using a 2048 Bit RSA key and a SHA1 Hash.
The current public key is provided in openssl PEM format on the server and changes on occasion. I cannot read the Key using .Net managed code alone (yet) and worked out the following procedure to get it working:

Extract Exponent and Modulus from the public key
Check key is still 2048 Bit
Store key length, exponent an modulus in Source, compile and deploy (Drop leading zeroes from the Modulus to make it work)

The Class then creates a new RSACryptoServiceProvider(2048) and feeds the public components using the RSAParameters structure into the CSP. Verification of the signature then succeeds.
I would like to get this working without me creating, compiling and deploying a new Assembly each time the key changes. To make things interesting I would like to stick to managed code only (rules out most examples I found). Something that sounds perfect is the internal ASN.1 Reader when creating an instance of AsnEncodedData(oid, data) but the only oid I found that could match, RSA aka 1.2.840.113549.1.1.1, did not work and produced raw bytes only.
Added: former public key

-----BEGIN PUBLIC KEY-----
  MFwwDQYJKoZIhvcNAQEBBQADSwAwSAJBAMW90O6C17fapbS35auKolsy7kI0FOE1
  C08y5HqgZ0rMXoocV4nHSHYBm2HVx2QSR5OLQtERgWDmxOu+vwU1GXUCAwEAAQ==
  -----END PUBLIC KEY-----

I found pempublic.cs wich seems to solve this using (as it seems) sourcecode from openSSL. I will leave the question open to see if there are any other solutions.
","To load private key let's use this code:
private RSACryptoServiceProvider GetPrivateKey(string privateKey)
    {
        byte[] privkey = Convert.FromBase64String(privateKey);
        byte[] MODULUS, E, D, P, Q, DP, DQ, IQ;

        // --------- Set up stream to decode the asn.1 encoded RSA private key ------
        MemoryStream mem = new MemoryStream(privkey);
        BinaryReader binr = new BinaryReader(mem);  //wrap Memory Stream with BinaryReader for easy reading
        byte bt = 0;
        ushort twobytes = 0;
        int elems = 0;
        try
        {
            twobytes = binr.ReadUInt16();
            if (twobytes == 0x8130) //data read as little endian order (actual data order for Sequence is 30 81)
                binr.ReadByte();    //advance 1 byte
            else if (twobytes == 0x8230)
                binr.ReadInt16();    //advance 2 bytes
            else
                return null;

            twobytes = binr.ReadUInt16();
            if (twobytes != 0x0102) //version number
                return null;
            bt = binr.ReadByte();
            if (bt != 0x00)
                return null;


            //------ all private key components are Integer sequences ----
            elems = GetIntegerSize(binr);
            MODULUS = binr.ReadBytes(elems);

            elems = GetIntegerSize(binr);
            E = binr.ReadBytes(elems);

            elems = GetIntegerSize(binr);
            D = binr.ReadBytes(elems);

            elems = GetIntegerSize(binr);
            P = binr.ReadBytes(elems);

            elems = GetIntegerSize(binr);
            Q = binr.ReadBytes(elems);

            elems = GetIntegerSize(binr);
            DP = binr.ReadBytes(elems);

            elems = GetIntegerSize(binr);
            DQ = binr.ReadBytes(elems);

            elems = GetIntegerSize(binr);
            IQ = binr.ReadBytes(elems);

            // ------- create RSACryptoServiceProvider instance and initialize with public key -----
            CspParameters CspParameters = new CspParameters();
            CspParameters.Flags = CspProviderFlags.UseMachineKeyStore;
            RSACryptoServiceProvider RSA = new RSACryptoServiceProvider(1024, CspParameters);
            RSAParameters RSAparams = new RSAParameters();
            RSAparams.Modulus = MODULUS;
            RSAparams.Exponent = E;
            RSAparams.D = D;
            RSAparams.P = P;
            RSAparams.Q = Q;
            RSAparams.DP = DP;
            RSAparams.DQ = DQ;
            RSAparams.InverseQ = IQ;
            RSA.ImportParameters(RSAparams);
            return RSA;
        }
        catch (Exception ex)
        {
            return null;
        }
        finally
        {
            binr.Close();
        }
    }

To load public key let's use this code:
private RSACryptoServiceProvider GetPublicKey(string publicKeyString)
    {
        // encoded OID sequence for  PKCS #1 rsaEncryption szOID_RSA_RSA = ""1.2.840.113549.1.1.1""
        byte[] SeqOID = {0x30, 0x0D, 0x06, 0x09, 0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01, 0x01, 0x01, 0x05, 0x00} ;
        byte[] x509key;
        byte[] seq = new byte[15];
        int x509size;

        x509key = Convert.FromBase64String(publicKeyString);
        x509size = x509key.Length;

        // ---------  Set up stream to read the asn.1 encoded SubjectPublicKeyInfo blob  ------
        MemoryStream mem = new MemoryStream(x509key);
        BinaryReader binr = new BinaryReader(mem);    //wrap Memory Stream with BinaryReader for easy reading
        byte bt = 0;
        ushort twobytes = 0;

        try
        {

            twobytes = binr.ReadUInt16();
            if (twobytes == 0x8130) //data read as little endian order (actual data order for Sequence is 30 81)
                binr.ReadByte();    //advance 1 byte
            else if (twobytes == 0x8230)
                binr.ReadInt16();   //advance 2 bytes
            else
                return null;

            seq = binr.ReadBytes(15);       //read the Sequence OID
            if (!CompareBytearrays(seq, SeqOID))    //make sure Sequence for OID is correct
                return null;

            twobytes = binr.ReadUInt16();
            if (twobytes == 0x8103) //data read as little endian order (actual data order for Bit String is 03 81)
                binr.ReadByte();    //advance 1 byte
            else if (twobytes == 0x8203)
                binr.ReadInt16();   //advance 2 bytes
            else
                return null;

            bt = binr.ReadByte();
            if (bt != 0x00)     //expect null byte next
                return null;

            twobytes = binr.ReadUInt16();
            if (twobytes == 0x8130) //data read as little endian order (actual data order for Sequence is 30 81)
                binr.ReadByte();    //advance 1 byte
            else if (twobytes == 0x8230)
                binr.ReadInt16();   //advance 2 bytes
            else
                return null;

            twobytes = binr.ReadUInt16();
            byte lowbyte = 0x00;
            byte highbyte = 0x00;

            if (twobytes == 0x8102) //data read as little endian order (actual data order for Integer is 02 81)
                lowbyte = binr.ReadByte();  // read next bytes which is bytes in modulus
            else if (twobytes == 0x8202)
            {
                highbyte = binr.ReadByte(); //advance 2 bytes
                lowbyte = binr.ReadByte();
            }
            else
                return null;
            byte[] modint = { lowbyte, highbyte, 0x00, 0x00 };   //reverse byte order since asn.1 key uses big endian order
            int modsize = BitConverter.ToInt32(modint, 0);

            int firstbyte = binr.PeekChar();
            if (firstbyte == 0x00)
            {   //if first byte (highest order) of modulus is zero, don't include it
                binr.ReadByte();    //skip this null byte
                modsize -= 1;   //reduce modulus buffer size by 1
            }

            byte[] modulus = binr.ReadBytes(modsize);   //read the modulus bytes

            if (binr.ReadByte() != 0x02)            //expect an Integer for the exponent data
                return null;
            int expbytes = (int)binr.ReadByte();        // should only need one byte for actual exponent data (for all useful values)
            byte[] exponent = binr.ReadBytes(expbytes);

            // ------- create RSACryptoServiceProvider instance and initialize with public key -----
            RSACryptoServiceProvider RSA = new RSACryptoServiceProvider();
            RSAParameters RSAKeyInfo = new RSAParameters();
            RSAKeyInfo.Modulus = modulus;
            RSAKeyInfo.Exponent = exponent;
            RSA.ImportParameters(RSAKeyInfo);

            return RSA;
        }

        finally
        {
            binr.Close();
        }
    }

You can read the original post here to get more detail
","2768","<.net><openssl><public-key-encryption>","3","2","2","2014-11-15 16:35:50","","1","","664563","","2011-05-11 15:11:18","2011-05-11 13:29:43",""
"9895168","Free implementation of Elgamal","I'm looking for free  implementations of the Elgamal encryption algorithm. As far as I can see, even though it's a widely known algorithm, there seems to be only two free implementations:

libgcrypt supports Elgamal encryption
pycrypt has Elgamal

OpenSSL, beecrypt, Nettle do not implement Elgamal.
Are there any other free and well-tested Elgamal implementation that's missing from the list?
","Crypto++ has ElGamal support.
I used Crypto++ symmetric cryptography some while ago, it seemed to be well-supported and well-tested (it has a unit-test named ValidateElGamal()).
","2754","<open-source><public-key-encryption><elgamal>","6","0","1","2014-01-04 18:24:15","","0","4","114979","","2012-03-27 19:16:12","2012-03-27 18:13:31","2015-06-23 06:31:33"
"12480408","How to find WiX RemotePayload's CertificatePublicKey hash","I'm trying to resolve WiX RemotePayload hashes, but I'm not sure how the CertificatePublicKey attribute is found.
Take, for example, the .NET 4.0 Package definition from WiX 3.6 sources:
  <Fragment>
    <util:RegistrySearchRef Id=""NETFRAMEWORK40""/>

    <WixVariable Id=""WixMbaPrereqPackageId"" Value=""NetFx40Redist"" />
    <WixVariable Id=""WixMbaPrereqLicenseUrl"" Value=""$(var.NetFx40EulaLink)"" />

    <PackageGroup Id=""NetFx40Redist"">
      <ExePackage
          InstallCommand=""/q /norestart /ChainingPackage &quot;[WixBundleName]&quot;""
          RepairCommand=""/q /norestart /repair /ChainingPackage &quot;[WixBundleName]&quot;""
          UninstallCommand=""/uninstall /q /norestart /ChainingPackage &quot;[WixBundleName]&quot;""
          PerMachine=""yes""
          DetectCondition=""NETFRAMEWORK40""
          Id=""NetFx40Redist""
          Vital=""yes""
          Permanent=""yes""
          Protocol=""netfx4""
          DownloadUrl=""$(var.NetFx40RedistLink)""
          Compressed=""no""
          Name=""redist\dotNetFx40_Full_x86_x64.exe"">
        <RemotePayload
            Size=""50449456""
            Version=""4.0.30319.1""
            ProductName=""Microsoft .NET Framework 4""
            Description=""Microsoft .NET Framework 4 Setup""
            CertificatePublicKey=""672605E36DD71EC6B8325B91C5FE6971390CB6B6""
            CertificateThumbprint=""9617094A1CFB59AE7C1F7DFDB6739E4E7C40508F""
            Hash=""58DA3D74DB353AAD03588CBB5CEA8234166D8B99""/>
      </ExePackage>
    </PackageGroup>
  </Fragment>

From wix36-sources\src\ext\NetFxExtension\wixlib\NetFx4.wxs
I can find the sha1 Hash with fciv -sha1 dotNetFx40_Full_x86_x64.exe...

58da3d74db353aad03588cbb5cea8234166d8b99 dotnetfx40_full_x86_x64.exe

I can find a matching CertificateThumbprint easily through the properties dialog for the file, or using signtool which displays the following output
C:\redist>signtool verify /v /ph dotNetFx40_Full_x86_x64.exe

Verifying: dotNetFx40_Full_x86_x64.exe
Signature Index: 0 (Primary Signature)
Hash of file (sha1): 8E8582D10521962F45F33935C38A2412C4F2D4C7

Signing Certificate Chain:
    Issued to: Microsoft Root Authority
    Issued by: Microsoft Root Authority
    Expires:   Thu Dec 31 03:00:00 2020
    SHA1 hash: A43489159A520F0D93D032CCAF37E7FE20A8B419

        Issued to: Microsoft Code Signing PCA
        Issued by: Microsoft Root Authority
        Expires:   Sat Aug 25 03:00:00 2012
        SHA1 hash: 3036E3B25B88A55B86FC90E6E9EAAD5081445166

            Issued to: Microsoft Corporation
            Issued by: Microsoft Code Signing PCA
            Expires:   Mon Mar 07 18:40:29 2011
            SHA1 hash: 9617094A1CFB59AE7C1F7DFDB6739E4E7C40508F

The signature is timestamped: Thu Mar 18 21:13:46 2010
Timestamp Verified by:
    Issued to: Microsoft Root Authority
    Issued by: Microsoft Root Authority
    Expires:   Thu Dec 31 03:00:00 2020
    SHA1 hash: A43489159A520F0D93D032CCAF37E7FE20A8B419

        Issued to: Microsoft Timestamping PCA
        Issued by: Microsoft Root Authority
        Expires:   Sun Sep 15 03:00:00 2019
        SHA1 hash: 3EA99A60058275E0ED83B892A909449F8C33B245

            Issued to: Microsoft Time-Stamp Service
            Issued by: Microsoft Timestamping PCA
            Expires:   Thu Jul 25 15:11:15 2013
            SHA1 hash: 4D6F357F0E6434DA97B1AFC540FB6FDD0E85A89F

SignTool Error: The signing certificate is not valid for the requested usage.
        This error sometimes means that you are using the wrong verification
        policy. Consider using the /pa option.

Number of files successfully Verified: 0
Number of warnings: 0
Number of errors: 1

What tool can provide the hash for CertificatePublicKey?
edit: Without using heat, I want to understand where the hashes come from.
edit: I'm aware of how this is done in WiX source code and that I can execute
heat payload file -out file.wxs, but I'm looking for some external tool which can provide the expected hash(es) without using heat.  This is really only to sate my curiosity.
","If you take a look at the sourcecode of the heat tool it uses the Microsoft.Tools.WindowsInstallerXml.Cab.Interop.NativeMethods.HashPublicKeyInfo function to generate the CertificatePublicKey. 
byte[] publicKeyIdentifierHash = new byte[128];
uint publicKeyIdentifierHashSize = (uint)publicKeyIdentifierHash.Length;

Microsoft.Tools.WindowsInstallerXml.Cab.Interop.NativeMethods.HashPublicKeyInfo(
    certificate.Handle, 
    publicKeyIdentifierHash, 
    ref publicKeyIdentifierHashSize);

StringBuilder sb = new StringBuilder(((int)publicKeyIdentifierHashSize + 1) * 2);
for (int i = 0; i < publicKeyIdentifierHashSize; ++i)
{
    sb.AppendFormat(""{0:X2}"", publicKeyIdentifierHash[i]);
}

this.PublicKey = sb.ToString();

You can obviously use this code to generate the thumbprint or according to the wiki page on Public Key fingerprints you can also use the commandline 
ssh-keygen -lf /path/to/key.pub

The problem is generating a ssh-keygen pub file that complies with RFC4716 from the certificate and this is where I was stumped.
Personally I just use the heat command-line: 
heat.exe payload PATH_TO_FILE -o Output.wxs

and not worry about what it is actually doing as it works!! :)
","2731","<wix><code-signing><public-key-encryption><authenticode>","7","10","2","2012-10-08 18:46:24","12492704","2","5","151445","","2012-10-02 13:09:45","2012-09-18 15:41:41",""
"12480408","How to find WiX RemotePayload's CertificatePublicKey hash","I'm trying to resolve WiX RemotePayload hashes, but I'm not sure how the CertificatePublicKey attribute is found.
Take, for example, the .NET 4.0 Package definition from WiX 3.6 sources:
  <Fragment>
    <util:RegistrySearchRef Id=""NETFRAMEWORK40""/>

    <WixVariable Id=""WixMbaPrereqPackageId"" Value=""NetFx40Redist"" />
    <WixVariable Id=""WixMbaPrereqLicenseUrl"" Value=""$(var.NetFx40EulaLink)"" />

    <PackageGroup Id=""NetFx40Redist"">
      <ExePackage
          InstallCommand=""/q /norestart /ChainingPackage &quot;[WixBundleName]&quot;""
          RepairCommand=""/q /norestart /repair /ChainingPackage &quot;[WixBundleName]&quot;""
          UninstallCommand=""/uninstall /q /norestart /ChainingPackage &quot;[WixBundleName]&quot;""
          PerMachine=""yes""
          DetectCondition=""NETFRAMEWORK40""
          Id=""NetFx40Redist""
          Vital=""yes""
          Permanent=""yes""
          Protocol=""netfx4""
          DownloadUrl=""$(var.NetFx40RedistLink)""
          Compressed=""no""
          Name=""redist\dotNetFx40_Full_x86_x64.exe"">
        <RemotePayload
            Size=""50449456""
            Version=""4.0.30319.1""
            ProductName=""Microsoft .NET Framework 4""
            Description=""Microsoft .NET Framework 4 Setup""
            CertificatePublicKey=""672605E36DD71EC6B8325B91C5FE6971390CB6B6""
            CertificateThumbprint=""9617094A1CFB59AE7C1F7DFDB6739E4E7C40508F""
            Hash=""58DA3D74DB353AAD03588CBB5CEA8234166D8B99""/>
      </ExePackage>
    </PackageGroup>
  </Fragment>

From wix36-sources\src\ext\NetFxExtension\wixlib\NetFx4.wxs
I can find the sha1 Hash with fciv -sha1 dotNetFx40_Full_x86_x64.exe...

58da3d74db353aad03588cbb5cea8234166d8b99 dotnetfx40_full_x86_x64.exe

I can find a matching CertificateThumbprint easily through the properties dialog for the file, or using signtool which displays the following output
C:\redist>signtool verify /v /ph dotNetFx40_Full_x86_x64.exe

Verifying: dotNetFx40_Full_x86_x64.exe
Signature Index: 0 (Primary Signature)
Hash of file (sha1): 8E8582D10521962F45F33935C38A2412C4F2D4C7

Signing Certificate Chain:
    Issued to: Microsoft Root Authority
    Issued by: Microsoft Root Authority
    Expires:   Thu Dec 31 03:00:00 2020
    SHA1 hash: A43489159A520F0D93D032CCAF37E7FE20A8B419

        Issued to: Microsoft Code Signing PCA
        Issued by: Microsoft Root Authority
        Expires:   Sat Aug 25 03:00:00 2012
        SHA1 hash: 3036E3B25B88A55B86FC90E6E9EAAD5081445166

            Issued to: Microsoft Corporation
            Issued by: Microsoft Code Signing PCA
            Expires:   Mon Mar 07 18:40:29 2011
            SHA1 hash: 9617094A1CFB59AE7C1F7DFDB6739E4E7C40508F

The signature is timestamped: Thu Mar 18 21:13:46 2010
Timestamp Verified by:
    Issued to: Microsoft Root Authority
    Issued by: Microsoft Root Authority
    Expires:   Thu Dec 31 03:00:00 2020
    SHA1 hash: A43489159A520F0D93D032CCAF37E7FE20A8B419

        Issued to: Microsoft Timestamping PCA
        Issued by: Microsoft Root Authority
        Expires:   Sun Sep 15 03:00:00 2019
        SHA1 hash: 3EA99A60058275E0ED83B892A909449F8C33B245

            Issued to: Microsoft Time-Stamp Service
            Issued by: Microsoft Timestamping PCA
            Expires:   Thu Jul 25 15:11:15 2013
            SHA1 hash: 4D6F357F0E6434DA97B1AFC540FB6FDD0E85A89F

SignTool Error: The signing certificate is not valid for the requested usage.
        This error sometimes means that you are using the wrong verification
        policy. Consider using the /pa option.

Number of files successfully Verified: 0
Number of warnings: 0
Number of errors: 1

What tool can provide the hash for CertificatePublicKey?
edit: Without using heat, I want to understand where the hashes come from.
edit: I'm aware of how this is done in WiX source code and that I can execute
heat payload file -out file.wxs, but I'm looking for some external tool which can provide the expected hash(es) without using heat.  This is really only to sate my curiosity.
","You can find all the information about a signature in the file properties dialog:

In the file properties dialog, click the signature tab.

Click details, then click 'View Certificate'.

Properties like 'Public Key' can be found on the 'Details' tab.

 If you need a hash of this Public Key, then you can use your standard hashing tools to get it by using the 'Copy to File' button and hashing that file.
I was incorrect, the 'Copy to File' does not export the selected property, but instead the whole certificate. You can copy and paste this value into a hash program or a hex editor to get the hash though.

","2731","<wix><code-signing><public-key-encryption><authenticode>","7","1","2","2012-10-08 18:46:24","12492704","2","5","151445","","2012-10-02 13:09:45","2012-09-18 15:41:41",""
"20490517","SSL Public and Private Keys","Please help me fill out the blanks here - 

The server keeps its private key and the public key is shared to the users. So the client trusts the content thats coming from the server using the public key. How does the client encrypt the contents he is sending back to the server ?. Using the public key of the server ? or does the client send a autogenerated private key and encrypts it using the public key which is then decypted by the server along with the message and used for furthter communication by both parties.
A Public and a Private key is required to do ssl communication. This Key pair is generated using a self signed certificate ?. How can a single self signed certificate contain both public and private keys.

One more thing On message level security --  im looking at a current configuration and am pulling my hair out -- Using IBM Ikeyman to look at the producer and Consumer JKS files-- for Message level security(Digital Signing) there is a Personal certificate at the Consumer and a Signer certificate at the Producer ... Isnt this the other way around? Is this current configuration incorrect --- Both the keys are same by the way.
","Public-key encryption 101:
The public and private keys form a pair: each key in the pair can decrypt messages encrypted with the other, but cannot decrypt messages encrypted with itself.  If the client can decrypt a message with the public key, it knows the message was encrypted by the owner of the public key.  Conversely, a message encrypted with the public key can only be decrypted by the owner of the private key.
The basic idea is that the client generates a key for a symmetric-key cypher, encrypts it with the public key, and sends that to the server.  Both sides then use that symmetric key and cypher for the majority of the communication.
","2725","<ssl><ssl-certificate><public-key-encryption><private-key><websphere-6.1>","-1","-1","3","2013-12-10 15:19:10","20494304","1","0","2772640","","2013-12-10 15:19:10","2013-12-10 09:25:19",""
"20490517","SSL Public and Private Keys","Please help me fill out the blanks here - 

The server keeps its private key and the public key is shared to the users. So the client trusts the content thats coming from the server using the public key. How does the client encrypt the contents he is sending back to the server ?. Using the public key of the server ? or does the client send a autogenerated private key and encrypts it using the public key which is then decypted by the server along with the message and used for furthter communication by both parties.
A Public and a Private key is required to do ssl communication. This Key pair is generated using a self signed certificate ?. How can a single self signed certificate contain both public and private keys.

One more thing On message level security --  im looking at a current configuration and am pulling my hair out -- Using IBM Ikeyman to look at the producer and Consumer JKS files-- for Message level security(Digital Signing) there is a Personal certificate at the Consumer and a Signer certificate at the Producer ... Isnt this the other way around? Is this current configuration incorrect --- Both the keys are same by the way.
","In SSL communication,when the client wants to interact with some server, the server sends its public key. Always remember a certificate is nothing but a public key with a bunch of supporting information. 
The problem here is any hacker can masquerade as a server and can block the communication between server and client. So the server certificate must be signed by some certificate authority. The client only believes the server certificate if it is signed by a certificate authority.In that case the hacker in between can not masquerade as a server because its certificate will not be authenticated by the certificate authority.
So client accepts the certificate and gets the public key of server. Now the client can send its public key encrypted by the public key of the server. Since this encrypted message can only be decrypted by the private key of the server so only server can decrypt it.
But the use of public key and private key over the ssl communication can slow down the connection very much because these keys lengths are 1024 or 2048 bits. 
So practically what happens is instead of sending its own public key, the client sends the symmetric key encrypted by the public key of the server. Server decrypts it with its private key and it gets to know the symmetric key. Now the further communication happens with this symmetric key encryption and decryption.Since no third party gets to know the symmetric key, the communication will be secure.
Remember symmetric key lengths are generally 64-128 unlike public keys hence less the time for encryption and decryption.  
","2725","<ssl><ssl-certificate><public-key-encryption><private-key><websphere-6.1>","-1","-1","3","2013-12-10 15:19:10","20494304","1","0","2772640","","2013-12-10 15:19:10","2013-12-10 09:25:19",""
"20490517","SSL Public and Private Keys","Please help me fill out the blanks here - 

The server keeps its private key and the public key is shared to the users. So the client trusts the content thats coming from the server using the public key. How does the client encrypt the contents he is sending back to the server ?. Using the public key of the server ? or does the client send a autogenerated private key and encrypts it using the public key which is then decypted by the server along with the message and used for furthter communication by both parties.
A Public and a Private key is required to do ssl communication. This Key pair is generated using a self signed certificate ?. How can a single self signed certificate contain both public and private keys.

One more thing On message level security --  im looking at a current configuration and am pulling my hair out -- Using IBM Ikeyman to look at the producer and Consumer JKS files-- for Message level security(Digital Signing) there is a Personal certificate at the Consumer and a Signer certificate at the Producer ... Isnt this the other way around? Is this current configuration incorrect --- Both the keys are same by the way.
","

The server keeps its private key and the public key is shared to the users.


Correct.

So the client trusts the content thats coming from the server using the public key.

No. There is no 'so' about it. The client trusts the server certificate because it is signed by someone he trusts, and he knows it belongs to the server because the server provides a digital signature that the client can verify, which only the private key owner can do. Therefore he knows that the server owns that public key.

How does the client encrypt the contents he is sending back to the server ?.

The client and server negotiate a shared session key independently using techniques described in RFC 2246. For the most part they don't involve PKI at all.

Using the public key of the server? or does the client send a autogenerated private key and encrypts it using the public key which is then decypted by the server along with the message and used for furthter communication by both parties.

Neither, see above. This is quite a large subject.


A Public and a Private key is required to do ssl communication.


No. One of the parties must have a private key and a corresponding certificate that the other party trusts, otherwise the communication is insecure.

This Key pair is generated using a self signed certificate

No. The statement doesn't even make sense. Key pairs are generated first, nothing to do with certificates yet. The certificate is a wrapper for the public key.

How can a single self signed certificate contain both public and private keys.

It can't, and it doesn't. Self-signing doesn't have anything to do with it either.
","2725","<ssl><ssl-certificate><public-key-encryption><private-key><websphere-6.1>","-1","4","3","2013-12-10 15:19:10","20494304","1","0","2772640","","2013-12-10 15:19:10","2013-12-10 09:25:19",""
"18856431","RSA keys transformation for Java - clarification needed?","I read a bit about the known issue of transforming keys from PEM to DER so Java can read them, and I ran up this article. When followed through, this works OK - generated RSA key pair with openssl, keys are loaded fine, and what is encrypted with public key is successfully decoded with the private key.
Now, here's the unclear part.
Not so long ago, I generated PKI using Easy-RSA utility, while setting up OpenVPN server. Here, a self-signed cert was created. Output files, among others are:  

server.csr ------ // certificate request
  server.key ------// private key
  server.crt -------// self-signed certificate/public-key/whatever this is..?

Just for the reference, easy-RSA is documented (on the bottom of the page are the scripts explained, and we can see openssl commands actually used in the process).   
So, I tried the above logic on these files, using server.key as my private key file, and  server.crt as my public key file, both previously transformed to Java-readable DER format:  

openssl pkcs8 -topk8 -inform PEM -outform DER -in server.key -out server_private_key.der -nocrypt
  openssl x509 -inform PEM -outform DER -text -in server.crt -out server.der

Private key, not so strangely, works OK, i.e. it is successfully loaded in Java.
Public key (again, probably not so strangely) won't load, but I don't know the reason, since I'm not really familiar with all these things. My guess is that this has something to do with certificate being signed, and I wonder how to deal with this in those cases. I get the following exception:  
java.security.spec.InvalidKeySpecException: java.security.InvalidKeyException:IOException: ObjectIdentifier() -- data isn't an object ID (tag = -96)
  at sun.security.rsa.RSAKeyFactory.engineGeneratePublic(RSAKeyFactory.java:188)
  at java.security.KeyFactory.generatePublic(KeyFactory.java:304)
  at aes.utils.KeyReaderUtil.getPublicKeyFromFile(KeyReaderUtil.java:57)
  at aes.utils.Main.main(Main.java:69)
Caused by: java.security.InvalidKeyException: IOException: ObjectIdentifier() -- data
isn't an object ID (tag = -96)
  at sun.security.x509.X509Key.decode(X509Key.java:380)
  at sun.security.x509.X509Key.decode(X509Key.java:386)
  at sun.security.rsa.RSAPublicKeyImpl.<init>(RSAPublicKeyImpl.java:66)
  at sun.security.rsa.RSAKeyFactory.generatePublic(RSAKeyFactory.java:281)
  at sun.security.rsa.RSAKeyFactory.engineGeneratePublic(RSAKeyFactory.java:184)
  ... 3 more

Furthermore, when I ""export"" the public key from the existing server.key private key file, like this (as in the above article):  

openssl rsa -in server.key -pubout -outform DER -out server_public_key.der

it all works fine again.  
So, my question is: what is the right way, and why server.crt won't load as public key ?
","The Java code in the article you linked is expecting a public key file, not an X509 Certificate, which is what you have in server.crt.
An X509 certificate contains the public key as well as identity information that is bound to that key via the signature.
From Java's X509Certificate documentation, you can find this code:
 InputStream inStream = null;
 try {
     inStream = new FileInputStream(""fileName-of-cert"");
     CertificateFactory cf = CertificateFactory.getInstance(""X.509"");
     X509Certificate cert = (X509Certificate)cf.generateCertificate(inStream);
 } finally {
     if (inStream != null) {
         inStream.close();
     }
 }

And once you have an X509 certificate object, you can easily get the PublicKey like this:
PublicKey myPubKey = cert.getPublicKey();

","2723","<java><encryption><openssl><rsa><public-key-encryption>","2","8","1","2013-09-18 18:38:36","18879846","0","","","","","2013-09-17 17:42:02",""
"44223479","How to use RSA or similar encryption in Python 3?","How do I go about using RSA or similar Public Key-Private Key encryption in Python 3, preferably with a built-in module? All the resources I've found so far are for Python 2.7 
","Python 3 doesn’t have very much in its standard library that deals with encryption. Instead, you get hashing libraries
If you need secure hashes or message digest algorithms, then Python’s standard library has you covered in the  hashlib  module
If you want to encrypt your data with RSA, then you’ll need to either have access to a public / private RSA key pair or you will need to generate your own. For this example, we will just generate our own. Since it’s fairly easy to do, we will do it in Python’s interpreter:
you must first install PyCrypto package for python 3 
>>> from Crypto.PublicKey import RSA

>>> code = 'nooneknows'

>>> key = RSA.generate(2048)

>>> encrypted_key = key.exportKey(passphrase=code, pkcs=8, 

 protection=""scryptAndAES128-CBC"")

>>> with open('/path_to_private_key/my_private_rsa_key.bin', 'wb') as f:

 f.write(encrypted_key)

>>> with open('/path_to_public_key/my_rsa_public.pem', 'wb') as f:

 f.write(key.publickey().exportKey())

First, we import RSA from Crypto.PublicKey. Then we create a silly passcode. Next we generate an RSA key of 2048 bits. Now we get to the good stuff. To generate a private key, we need to call our RSA key instance’s exportKey method and give it our passcode, which PKCS standard to use and which encryption scheme to use to protect our private key. Then we write the file out to disk.
Next, we create our public key via our RSA key instance’s publickey method. We used a shortcut in this piece of code by just chaining the call to exportKey with the publickey method call to write it to disk as well.
","2716","<python-3.x><encryption><rsa><public-key-encryption>","0","1","2","2019-06-01 14:46:59","","1","1","1816580","","2017-05-28 07:25:39","2017-05-28 03:17:22",""
"44223479","How to use RSA or similar encryption in Python 3?","How do I go about using RSA or similar Public Key-Private Key encryption in Python 3, preferably with a built-in module? All the resources I've found so far are for Python 2.7 
","Here is an implementation of RSA Encryption in Python 3 I have made, using the Crypto library (installed with the command pip install pycryptodome)
from Crypto.PublicKey import RSA
from Crypto.Cipher import PKCS1_v1_5
from Crypto.Random import new as Random
from base64 import b64encode
from base64 import b64decode

class RSA_Cipher:
  def generate_key(self,key_length):
    assert key_length in [1024,2048,4096]
    rng = Random().read
    self.key = RSA.generate(key_length,rng)

  def encrypt(self,data):
    plaintext = b64encode(data.encode())
    rsa_encryption_cipher = PKCS1_v1_5.new(self.key)
    ciphertext = rsa_encryption_cipher.encrypt(plaintext)
    return b64encode(ciphertext).decode()

  def decrypt(self,data):
    ciphertext = b64decode(data.encode())
    rsa_decryption_cipher = PKCS1_v1_5.new(self.key)
    plaintext = rsa_decryption_cipher.decrypt(ciphertext,16)
    return b64decode(plaintext).decode()

The usage of the following class is like so:
 - cipher = RSA_Cipher()
 - cipher.generate_key(1024) #key length can be 1024, 2048 or 4096
 - cipher.encrypt(""hello world"") #automatically uses generated key
 - cipher.decrypt(""nt3vNNqzyAo2SINPgsb/eOLU2PD0DF0EstvnIHUmYGX4CVAvS0pDEboqGcuitYAzSV10Ii+fliwihu/L0ISrL6w/tRDQILHFM5PrN2pqzK+Lu6QHKUShFdQtikduo1KHXGlJNd25sVlDOhWAq/FK/67Yeoyz6fSP6PNXRjX7Q+Q=)

","2716","<python-3.x><encryption><rsa><public-key-encryption>","0","1","2","2019-06-01 14:46:59","","1","1","1816580","","2017-05-28 07:25:39","2017-05-28 03:17:22",""
"7945771","Can someone tell me what's wrong with my openssl_sign example","Here's php demo code to sign data with private 2048 bit dsa key:
$priv_key = '-----BEGIN DSA PRIVATE KEY-----
MIIDVQIBAAKCAQEA/uhSKJA6k5sSnYo+uBgi+mzJ72hqZrWgc+dNLpiiKoHsqDZ6
7kGW0J3wnhU0FxpV2SVL57SfG6dC7GvwsJYBidSEJqe3bARP8WI4yL9wm1PVTqFD
4zNkj1+zUZDWQWpJxaA8I10sJR08/WbwgD63bD6jg4JiPaowFMOrufYAW92hjANQ
D7eZ+t0GXAoDB5L6q8btVRfJrGOvkdDN6eyzc7kpJEVC9g1J9Q6glnHQRIGdW4Ot
ys/bpv2mGMfEykyTWhcMSLaAZ0YLTyKRfjYm8g7dCFWo3i8Fu0Jr+N3IWZI9Jgw5
lGyUSX8x89gjMsqtcOzcrjOtC51oAh+pio8jaQIhAM2VbbgAoxSSVO3Nd5y2mPiO
k62rr9cCj4tNy0MtYG3rAoIBABnMeAAeJpNpe3UhmWrGSJN/nQe76FSIhV/0wsu4
Xu65tW610i+uf8t0ZDqHCrbF9LSvk6vPiBydKhOmmStCa/aJJZhCKYI9/8WgtXG8
kSvAzLTNnozSLeHkapZHJwqY1wT+qxElheXjHJBRzgXVqwB+0CeJokJYlWiaPfuN
n3H1GDekuYXSFAaK4bC4TEsctQH1/403ljSbv99aXVDTVSnW0hdbokyLSPsiJjvz
w6GkyEiK/j6V2dTrIRn2X2ftzbTsE+0vEenHosIzJwM8+zUrhLvVvPBARWnbmsQ/
YstGs7WERGQzkFSsuPsWCN53Os4NnBEPiYg8//Cy1EHat3ACggEAD3mqwlAaPixs
Up49/HYlGqrU4e862rWY7mb5XRJ7AY9t70C5hhZrVO/DTgpGkwO0Yi/cYo6W0g//
cP73Nb2KZwaiyTCet2VsXb0H/8gvi8OqlidEpormedYW1T0DoyVrw57gXF0hp0D8
scfZBg0hFM/hHlmqHPKYiZtDp5imk5TeSyIoLdyJjW8jII2ni8ryStjvZ61aAPyK
VH8in3DpVANpn3MSGv1Hv1RYxaago71fVUyOkm1/pFNqBNIwBAxBIUsIPdNpjoGB
bLKXDshCfdXkQJxnx80nVDslEkv10BapLqIr98uswU/bBYMduF6Xrg5pdugDG3Cw
X8n3glog8QIgayYvNGvBvrDp9piq8RDg9mQJsd4IFBlpF7MnqIc749M=
-----END DSA PRIVATE KEY-----
';

$pkeyid = openssl_get_privatekey($priv_key);
if(empty($pkeyid)){
    die(""Can't load key id"");
}
$data = $_GET['i'];
// compute signature
if(!openssl_sign($data, $signature, $pkeyid,OPENSSL_ALGO_SHA1)){
    echo ""Failed to sign data: $data"";
}
// free the key from memory
openssl_free_key($pkeyid);
echo $signature;

The script always fails at openssl_sign. 
I'm getting no errors or failures, just FALSE at the output of openssl_sign and the $signature is empty
I've generated the key with
openssl dsaparam -out dsaparam.pem 2048
openssl gendsa -out privkey.pem dsaparam.pem

What could be wrong?
","When using DSA to sign things, you need to use OPENSSL_ALGO_DSS1 not OPENSSL_ALGO_SHA1 as the hashing algorithm.  
The help file for the OpenSSL command-line version of this says:

If you wish to sign or verify data using the DSA algorithm then the dss1 digest must be used.

This is an idiosyncrasy of the OpenSSL library, DSS1 is actually the same algorithm as SHA1 but OpenSSL insists that you call is DSS1 if you're using it with DSA!
","2713","<php><linux><encryption><public-key-encryption><dsa>","2","4","1","2012-12-04 16:24:08","","4","1","847200","","2011-10-30 15:28:39","2011-10-30 15:22:15",""
"13588822","How to change the passphrase of a private key using PHP's OpenSSL module?","I'm using PHP's OpenSSL module for asymmetric encryption; openssl_pkey_new(), openssl_pkey_export(), and openssl_pkey_get_details() to create the keypair, and openssl_public_encrypt and openssl_private_decrypt() to encrypt and decrypt data.
How can I change the passphrase associated with the private key? Is this possible with the OpenSSL module, or do I have to create a new keypair? That would be extremely inconvenient and require the server to re-encrypt potentially thousands of files on a regular Basis.
Thanks!
","Using phpseclib, a pure PHP RSA implementation:
<?php
include('Crypt/RSA.php');

$rsa = new Crypt_RSA();
$rsa->setPassword('old_password');
$rsa->loadKey('...');

$rsa->setPassword('new_password');
$privatekey = $rsa->getPrivateKey();
$publickey = $rsa->getPublicKey();
?>

","2683","<php><encryption><openssl><public-key-encryption><encryption-asymmetric>","5","0","2","2014-09-05 21:43:19","","2","1","888308","","2012-12-04 14:51:22","2012-11-27 16:36:19",""
"13588822","How to change the passphrase of a private key using PHP's OpenSSL module?","I'm using PHP's OpenSSL module for asymmetric encryption; openssl_pkey_new(), openssl_pkey_export(), and openssl_pkey_get_details() to create the keypair, and openssl_public_encrypt and openssl_private_decrypt() to encrypt and decrypt data.
How can I change the passphrase associated with the private key? Is this possible with the OpenSSL module, or do I have to create a new keypair? That would be extremely inconvenient and require the server to re-encrypt potentially thousands of files on a regular Basis.
Thanks!
","I've needed to do this for a little project I've been building in the evenings.
We know the following creates a new key pair (public/private):
function newPair (&$private, &$public, $passphrase=null) {
    $res = openssl_pkey_new ();
    if ($res === false) {
        throw new Exception (""Key generation failed: "".openssl_error_string ());
        return false;
    }
    // Sets private by reference
    if (openssl_pkey_export ($res, $private, $passphrase) === false) {
        throw new Exception (""Private key export failed: "".openssl_error_string ());
        return false;
    }
    // Array returns, contains ""key"" element.
    $public = openssl_pkey_get_details($res);
    if ($public === false) {
        throw new Exception (openssl_error_string ());
        return false;
    }
    $public = $public[""key""];
    return true;
}

open_ssl_pkey_export() does the passphrase magic.  So we can change the passphrase as so:
function changePassphrase ($private, $old, $new=null) {
    $res = openssl_pkey_get_private ($private, $old);
    if ($res === false) {
        throw new Exception (""Loading private key failed: "".openssl_error_string ());
        return false;
    }
    if (openssl_pkey_export ($res, $result, $new) === false) {
        throw new Exception (""Passphrase change failed: "".openssl_error_string ());
        return false;
    }
    return $result;
}

I hope you can follow what we've done here ... !  (Obviously the exception throwing is purely optional ... I've just pulled the code verbatim from my codebase.)
changePassphrase() takes the private key as a string, along with the current and new passphrases.  We use openssl_pkey_get_private() to retrieve a handle to the private key, unlocking it with the old passphrase.
(It's worth noting that the passphrase is literally used to encrypt the private key, which may sound a little double-dutch!  [Encrypting the encryption key ... ?!]  openssl_pkey_get_private() returns FALSE if it fails to interpret the key - i.e. if the passphrase is wrong, and the private key decrypts to an invalid value.  Make sense?)
Having unlocked the private key with the old passphrase, we take the OpenSSL key handle and pass it to openssl_pkey_export() - just like we did after creating it in the first place (via openssl_pkey_new()) providing the new passphrase ... and hey-presto.
I hope my code example reads cleanly, I've tried to write it in a fashion that's easy to understand and follow, without unnecessary ""compression"" and short-cutting.
Good luck!
","2683","<php><encryption><openssl><public-key-encryption><encryption-asymmetric>","5","6","2","2014-09-05 21:43:19","","2","1","888308","","2012-12-04 14:51:22","2012-11-27 16:36:19",""
"12956674","Does mysql have asymmetric encryption capabilities?","My Question is simple - is there a build in functionality, like AES_ENCRYPT / AES_DECRYPT, for asymmetric (public / private key) encryption in MySQL?
Sadly, I only find answers that involve PHP (to encrypt it in php), and stuff like that. I would like to keep it in MySQL, since the whole application logic is handled by procedures - and I would like to avoid ruining that by bringing in external languages to solve this issue.
","There is no functionality for RSA encryption within MySQL.  it's sort of an odd use case, so the MySQL folks probably haven't seen fit to implement it
You'll have to do the RSA operations in the application layer, and pass the results into your procedures, unless you fancy implementing RSA within MySQL yourself (which I really cannot advise at all)
","2652","<mysql><encryption><public-key-encryption><private-key><encryption-asymmetric>","4","3","3","2016-02-02 06:27:53","14165792","2","0","","","","2012-10-18 14:10:47",""
"12956674","Does mysql have asymmetric encryption capabilities?","My Question is simple - is there a build in functionality, like AES_ENCRYPT / AES_DECRYPT, for asymmetric (public / private key) encryption in MySQL?
Sadly, I only find answers that involve PHP (to encrypt it in php), and stuff like that. I would like to keep it in MySQL, since the whole application logic is handled by procedures - and I would like to avoid ruining that by bringing in external languages to solve this issue.
","What you can do is something like this; Make a shared secret between multiple users using their pub/priv keys, then use that shared secret as the AES symetric key to unlock the data in mysql.
What this means is that you can utilize mysql's inbuilt AES encrypt function for convenience while still maintaining secure data given that you will never know the shared secret.
eg:

Also you can try reading this enter link description here
","2652","<mysql><encryption><public-key-encryption><private-key><encryption-asymmetric>","4","2","3","2016-02-02 06:27:53","14165792","2","0","","","","2012-10-18 14:10:47",""
"12956674","Does mysql have asymmetric encryption capabilities?","My Question is simple - is there a build in functionality, like AES_ENCRYPT / AES_DECRYPT, for asymmetric (public / private key) encryption in MySQL?
Sadly, I only find answers that involve PHP (to encrypt it in php), and stuff like that. I would like to keep it in MySQL, since the whole application logic is handled by procedures - and I would like to avoid ruining that by bringing in external languages to solve this issue.
","I am very much agree to @Peter Elliott. But as part of answer I would like to add that MySQL Enterprise Encryption provide that kind of facility such as :
MySQL Enterprise Encryption gives DBAs and Developers the tools they need for:

Asymmetric Public Key Encryption (RSA) Asymmetric Private Key
Decryption (RSA) Generate Public/Private Key (RSA, DSA, DH) Derive
Symmetric Keys from Public and Private Key pairs (DH) Digitally Sign
Data (RSA, DSA) Verify Data Signature (RSA, DSA) Validation Data
Authenticity (RSA, DSA)

For more information you can visit MySQL Enterprise Encryption, I hope this will be helpful to you.
","2652","<mysql><encryption><public-key-encryption><private-key><encryption-asymmetric>","4","0","3","2016-02-02 06:27:53","14165792","2","0","","","","2012-10-18 14:10:47",""
"12545124","Two private key asymmetric encryption - possible?","I am wondering if there exists some asymmetric encryption algorithm that would work with two different private keys, so that the encrypted message can be decrypted by either one of such private keys?
","There is no such algorithm as far as I know, but there is a common solution. The enciphered text is transferred together with a set of cryptograms of the symmetric key used to encipher the text itself. Each such cryptogram of the key is a result of enciphering the original key with the public key of one of recipients. Thus, all recipients knowing their private keys may decipher the key used to encipher the data and then decipher the message itself. 
","2626","<encryption><public-key-encryption><private-key><public-key><encryption-asymmetric>","8","2","4","2014-02-25 14:55:33","12546292","0","2","15168","","2012-09-22 21:19:23","2012-09-22 15:32:24",""
"12545124","Two private key asymmetric encryption - possible?","I am wondering if there exists some asymmetric encryption algorithm that would work with two different private keys, so that the encrypted message can be decrypted by either one of such private keys?
","Typically a hybrid encryptions scheme is used. I.e. the message is encrypted with a symmetric key cryptosytem, then the symmetric keys are encrypted with the public keys of each of the intended receivers. 
","2626","<encryption><public-key-encryption><private-key><public-key><encryption-asymmetric>","8","1","4","2014-02-25 14:55:33","12546292","0","2","15168","","2012-09-22 21:19:23","2012-09-22 15:32:24",""
"12545124","Two private key asymmetric encryption - possible?","I am wondering if there exists some asymmetric encryption algorithm that would work with two different private keys, so that the encrypted message can be decrypted by either one of such private keys?
","You could use a symmetric encryption and secret sharing scheme on top of that, ""splitting the key in half"".
More on secret sharing: http://en.wikipedia.org/wiki/Secret_sharing
Steps on how I see it:

Encrypt the data using (pseudo) randomly generated key.
Distribute the secret using Shamir's secret sharing which is the key to two shares, where as one share will suffice to get the key.

The end result is that one (or more) ""keys"" are required to get the data.
","2626","<encryption><public-key-encryption><private-key><public-key><encryption-asymmetric>","8","3","4","2014-02-25 14:55:33","12546292","0","2","15168","","2012-09-22 21:19:23","2012-09-22 15:32:24",""
"12545124","Two private key asymmetric encryption - possible?","I am wondering if there exists some asymmetric encryption algorithm that would work with two different private keys, so that the encrypted message can be decrypted by either one of such private keys?
","Asymmetric keys are never used for encrypting messages (too slow, has a size limit, etc.), only for encrypting small buffers, like symmetric keys for messages. 
When you encrypt a message with an asymm. key, you are in fact encrypting a symmetric key which encrypts the message. 
Simply encrypt the same symmetric key with two different asymm. keys and you'd get two different cipherblocks which both contain the same symmetric key for the message, so you can decrypt with either one.
","2626","<encryption><public-key-encryption><private-key><public-key><encryption-asymmetric>","8","11","4","2014-02-25 14:55:33","12546292","0","2","15168","","2012-09-22 21:19:23","2012-09-22 15:32:24",""
"5586199","Pageant seem to have interference, does not work at all","I have a server setup with my public key and adding my private key to putty allows me to connect to the server properly. When I use pageant however, it doesn't work. My research showed that the event log with pageant running should look something like:  

....
  Pageant is running. Requesting keys.
  Pageant has X SSH-2 keys
  Trying Pageant key #0
  ....  

however, my event log looks like  

...
  Pageant is running. Requesting keys.
  ...

It seems like pageant isn't responding to putty's key request. Any help in this would be appreciated.
Thanks
","Seems like if you have a default private key configured like this guy did

Then it can break the pageant keys, it simply doesn't try to use them!
plink -v root@xx.xx.xx.xx fails
Reading private key file ""D:\.ssh\id_rsa.ppk""
Pageant is running. Requesting keys.
Pageant has 1 SSH-2 keys
Configured key file not in Pageant
Using username ""root"".
Offered public key
Server refused our key
Server refused our key

plink -v -i x root@xx.xx.xx.xx which disables the default key
Unable to use key file ""x"" (unable to open file)
Pageant is running. Requesting keys.
Pageant has 1 SSH-2 keys
Using username ""root"".
Trying Pageant key #0
Authenticating with public key ""key.pem"" from agent

You need to see Trying Pageant key #0, #1 ,#2 etc
","2623","<putty><public-key-encryption><pageant>","5","1","1","2015-07-02 23:40:44","31196351","2","1","","","","2011-04-07 19:02:56",""
"25715304","Issues with openpgp golang gpg library","So I'm pretty new to golang and i'm struggling to get a working example going of encrypting some text with openpgp and decrypting it again.
Here is what I have so far: (https://gist.github.com/93750a142d3de4e8fdd2.git)
package main

import (
    ""log""
    ""bytes""
    ""code.google.com/p/go.crypto/openpgp""
    ""encoding/base64""
    ""io/ioutil""
    ""os""
)

// create gpg keys with
// $ gpg --gen-key
// ensure you correct paths and passphrase

const mysecretstring = ""this is so very secret!""
const secretKeyring = ""/Users/stuart-warren/.gnupg/secring.gpg""
const publicKeyring = ""/Users/stuart-warren/.gnupg/pubring.gpg""
const passphrase = ""1234""

func main() {
    log.Printf(""Secret: "", mysecretstring)
    log.Printf(""Secret Keyring: "", secretKeyring)
    log.Printf(""Public Keyring: "", publicKeyring)
    log.Printf(""Passphrase: "", passphrase)

    // Read in public key
    keyringFileBuffer, _ := os.Open(publicKeyring)
    defer keyringFileBuffer.Close()
    entitylist, _ := openpgp.ReadKeyRing(keyringFileBuffer)

    // encrypt string
    buf := new(bytes.Buffer)
    w, _ := openpgp.Encrypt(buf, entitylist, nil, nil, nil)
    w.Write([]byte(mysecretstring))

    // Encode to base64
    bytesp, _ := ioutil.ReadAll(buf)
    encstr := base64.StdEncoding.EncodeToString(bytesp)

    // Output encrypted/encoded string
    log.Printf(""Encrypted Secret: "", encstr)

    // Here is where I would transfer the encrypted string to someone else 
    // but we'll just decrypt it in the same code

    // init some vars
    var entity2 *openpgp.Entity
    var entitylist2 openpgp.EntityList

    // Open the private key file
    keyringFileBuffer2, _ := os.Open(secretKeyring)
    defer keyringFileBuffer2.Close()
    entitylist2, _ = openpgp.ReadKeyRing(keyringFileBuffer2)
    entity2 = entitylist2[0]

    // Get the passphrase and read the private key.
    // Have not touched the encrypted string yet
    passphrasebyte := []byte(passphrase)
    log.Printf(""Decrypting private key using passphrase"")
    entity2.PrivateKey.Decrypt(passphrasebyte)
    for _, subkey := range entity2.Subkeys {
            subkey.PrivateKey.Decrypt(passphrasebyte)
    }
    log.Printf(""Finished decrypting private key using passphrase"")

    // Decode the base64 string
    dec, _ := base64.StdEncoding.DecodeString(encstr)

    // Decrypt it with the contents of the private key
    md, _ := openpgp.ReadMessage(bytes.NewBuffer(dec), entitylist2, nil, nil)
    bytess, _ := ioutil.ReadAll(md.UnverifiedBody)
    decstr := string(bytess)

    // should be done
    log.Printf(""Decrypted Secret: "", decstr)

}

This is based off of https://github.com/jyap808/jaeger
When I run it, it seems to partially work, but only outputs some of the characters of the original string... Changing the original string causes some very weird issues.
2014/09/07 22:59:38 Secret: %!(EXTRA string=this is so very secret!)
2014/09/07 22:59:38 Secret Keyring: %!(EXTRA string=/Users/stuart-warren/.gnupg/secring.gpg)
2014/09/07 22:59:38 Public Keyring: %!(EXTRA string=/Users/stuart-warren/.gnupg/pubring.gpg)
2014/09/07 22:59:38 Passphrase: %!(EXTRA string=1234)
2014/09/07 22:59:38 Encrypted Secret: %!(EXTRA string=wcBMA5a76vUxixWPAQgAOkrt/LQ3u++VbJ/20egxCUzMqcMYtq+JXL7SqbB5S1KrgHhGd8RHUmxy2h45hOLcAt+kfvSz0EJ/EsCmwnbP6HRPEqiMLt6XaVS26Rr9HQHPpRBZkqnwAP0EmlYNnF5zjnU5xTcEOyyr7EYhEgDv0Ro1FQkaCL2xdBhDCXs4EdQsjVrcECWOt0KgbCWs+N/0cEdeyHwodkaDgJ7NMq/pPuviaRu4JHCIxMiyz8yhOCHOM+bI80KsJesjGrgbjnGDfJUZNYDBNc8PqzfC39lB2MBrn/w07thJxvjbep39R0u2C4eEcroTRLB+t9i4fJNiVpoSclYRSZXm5OsYYv/XwtLgAeRZ07lFEsGoHSbqGLUnHFFw4Svk4FPgCuGVpOCS4vYiisDg+ORYj8dpu/Z3gSlVJ6mhSr7H4J3i9vItRuBx4WUB4HHgmQ==)
2014/09/07 22:59:38 Decrypting private key using passphrase
2014/09/07 22:59:38 Finished decrypting private key using passphrase
2014/09/07 22:59:38 Decrypted Secret: %!(EXTRA string=this)

Clearly there is something I'm not understanding, so would appreciate any assistance given.
","I cannot test your code, but the only thing i can think off, is that the order of execution is wrong. You first make a string, then you make it Base64, then you encrypt it. Now you undo the Base64 and afterwards you decrypt the encoded string. These last two must be swapped.
","2612","<encryption><go><public-key-encryption><gnupg><openpgp>","2","0","2","2014-09-10 05:14:52","25756628","1","3","2827945","","2014-09-09 23:45:58","2014-09-07 22:21:18",""
"25715304","Issues with openpgp golang gpg library","So I'm pretty new to golang and i'm struggling to get a working example going of encrypting some text with openpgp and decrypting it again.
Here is what I have so far: (https://gist.github.com/93750a142d3de4e8fdd2.git)
package main

import (
    ""log""
    ""bytes""
    ""code.google.com/p/go.crypto/openpgp""
    ""encoding/base64""
    ""io/ioutil""
    ""os""
)

// create gpg keys with
// $ gpg --gen-key
// ensure you correct paths and passphrase

const mysecretstring = ""this is so very secret!""
const secretKeyring = ""/Users/stuart-warren/.gnupg/secring.gpg""
const publicKeyring = ""/Users/stuart-warren/.gnupg/pubring.gpg""
const passphrase = ""1234""

func main() {
    log.Printf(""Secret: "", mysecretstring)
    log.Printf(""Secret Keyring: "", secretKeyring)
    log.Printf(""Public Keyring: "", publicKeyring)
    log.Printf(""Passphrase: "", passphrase)

    // Read in public key
    keyringFileBuffer, _ := os.Open(publicKeyring)
    defer keyringFileBuffer.Close()
    entitylist, _ := openpgp.ReadKeyRing(keyringFileBuffer)

    // encrypt string
    buf := new(bytes.Buffer)
    w, _ := openpgp.Encrypt(buf, entitylist, nil, nil, nil)
    w.Write([]byte(mysecretstring))

    // Encode to base64
    bytesp, _ := ioutil.ReadAll(buf)
    encstr := base64.StdEncoding.EncodeToString(bytesp)

    // Output encrypted/encoded string
    log.Printf(""Encrypted Secret: "", encstr)

    // Here is where I would transfer the encrypted string to someone else 
    // but we'll just decrypt it in the same code

    // init some vars
    var entity2 *openpgp.Entity
    var entitylist2 openpgp.EntityList

    // Open the private key file
    keyringFileBuffer2, _ := os.Open(secretKeyring)
    defer keyringFileBuffer2.Close()
    entitylist2, _ = openpgp.ReadKeyRing(keyringFileBuffer2)
    entity2 = entitylist2[0]

    // Get the passphrase and read the private key.
    // Have not touched the encrypted string yet
    passphrasebyte := []byte(passphrase)
    log.Printf(""Decrypting private key using passphrase"")
    entity2.PrivateKey.Decrypt(passphrasebyte)
    for _, subkey := range entity2.Subkeys {
            subkey.PrivateKey.Decrypt(passphrasebyte)
    }
    log.Printf(""Finished decrypting private key using passphrase"")

    // Decode the base64 string
    dec, _ := base64.StdEncoding.DecodeString(encstr)

    // Decrypt it with the contents of the private key
    md, _ := openpgp.ReadMessage(bytes.NewBuffer(dec), entitylist2, nil, nil)
    bytess, _ := ioutil.ReadAll(md.UnverifiedBody)
    decstr := string(bytess)

    // should be done
    log.Printf(""Decrypted Secret: "", decstr)

}

This is based off of https://github.com/jyap808/jaeger
When I run it, it seems to partially work, but only outputs some of the characters of the original string... Changing the original string causes some very weird issues.
2014/09/07 22:59:38 Secret: %!(EXTRA string=this is so very secret!)
2014/09/07 22:59:38 Secret Keyring: %!(EXTRA string=/Users/stuart-warren/.gnupg/secring.gpg)
2014/09/07 22:59:38 Public Keyring: %!(EXTRA string=/Users/stuart-warren/.gnupg/pubring.gpg)
2014/09/07 22:59:38 Passphrase: %!(EXTRA string=1234)
2014/09/07 22:59:38 Encrypted Secret: %!(EXTRA string=wcBMA5a76vUxixWPAQgAOkrt/LQ3u++VbJ/20egxCUzMqcMYtq+JXL7SqbB5S1KrgHhGd8RHUmxy2h45hOLcAt+kfvSz0EJ/EsCmwnbP6HRPEqiMLt6XaVS26Rr9HQHPpRBZkqnwAP0EmlYNnF5zjnU5xTcEOyyr7EYhEgDv0Ro1FQkaCL2xdBhDCXs4EdQsjVrcECWOt0KgbCWs+N/0cEdeyHwodkaDgJ7NMq/pPuviaRu4JHCIxMiyz8yhOCHOM+bI80KsJesjGrgbjnGDfJUZNYDBNc8PqzfC39lB2MBrn/w07thJxvjbep39R0u2C4eEcroTRLB+t9i4fJNiVpoSclYRSZXm5OsYYv/XwtLgAeRZ07lFEsGoHSbqGLUnHFFw4Svk4FPgCuGVpOCS4vYiisDg+ORYj8dpu/Z3gSlVJ6mhSr7H4J3i9vItRuBx4WUB4HHgmQ==)
2014/09/07 22:59:38 Decrypting private key using passphrase
2014/09/07 22:59:38 Finished decrypting private key using passphrase
2014/09/07 22:59:38 Decrypted Secret: %!(EXTRA string=this)

Clearly there is something I'm not understanding, so would appreciate any assistance given.
","A reminder that security is unusually treacherous territory, and if there's a way to call on other well-tested code even more of your toplevel task than just what Go's OpenPGP package is handling for you, consider it. It's good that at least low-level details are outsourced to openpgp because they're nasty and so so easy to get wrong. But tiny mistakes at any level can make crypto features worse than useless; if there's a way to write less security-critical code, that's one of the best things anyone can do for security.
On the specific question: you have to Close() the writer to get everything flushed out (a trait OpenPGP's writer shares with, say, compress/gzip's). 
Unrelated changes: the way you're printing things is a better fit log.Println, which just lets you pass a bunch of values you want printed with spaces in between (like, say, Python print), rather than needing format specifiers like ""%s"" or ""%d"". (The ""EXTRA"" in your initial output is what Go's Printf emits when you pass more things than you had format specifiers for.) It's also best practice to check errors (I dropped if err != nils where I saw a need, but inelegantly and without much thought, and I may not have gotten all the calls) and to run go fmt on your code. 
Again, I can't testify to the seaworthiness of this code or anything like that. But now it round-trips all the text. I wound up with:
package main

import (
    ""bytes""
    ""code.google.com/p/go.crypto/openpgp""
    ""encoding/base64""
    ""io/ioutil""
    ""log""
    ""os""
)

// create gpg keys with
// $ gpg --gen-key
// ensure you correct paths and passphrase

const mysecretstring = ""this is so very secret!""
const prefix, passphrase = ""/Users/stuart-warren/"", ""1234""
const secretKeyring = prefix + "".gnupg/secring.gpg""
const publicKeyring = prefix + "".gnupg/pubring.gpg""

func encTest() error {
    log.Println(""Secret:"", mysecretstring)
    log.Println(""Secret Keyring:"", secretKeyring)
    log.Println(""Public Keyring:"", publicKeyring)
    log.Println(""Passphrase:"", passphrase)

    // Read in public key
    keyringFileBuffer, _ := os.Open(publicKeyring)
    defer keyringFileBuffer.Close()
    entitylist, err := openpgp.ReadKeyRing(keyringFileBuffer)
    if err != nil {
        return err
    }

    // encrypt string
    buf := new(bytes.Buffer)
    w, err := openpgp.Encrypt(buf, entitylist, nil, nil, nil)
    if err != nil {
        return err
    }
    _, err = w.Write([]byte(mysecretstring))
    if err != nil {
        return err
    }
    err = w.Close()
    if err != nil {
        return err
    }

    // Encode to base64
    bytesp, err := ioutil.ReadAll(buf)
    if err != nil {
        return err
    }
    encstr := base64.StdEncoding.EncodeToString(bytesp)

    // Output encrypted/encoded string
    log.Println(""Encrypted Secret:"", encstr)

    // Here is where I would transfer the encrypted string to someone else
    // but we'll just decrypt it in the same code

    // init some vars
    var entity2 *openpgp.Entity
    var entitylist2 openpgp.EntityList

    // Open the private key file
    keyringFileBuffer2, err := os.Open(secretKeyring)
    if err != nil {
        return err
    }
    defer keyringFileBuffer2.Close()
    entitylist2, err = openpgp.ReadKeyRing(keyringFileBuffer2)
    if err != nil {
        return err
    }
    entity2 = entitylist2[0]

    // Get the passphrase and read the private key.
    // Have not touched the encrypted string yet
    passphrasebyte := []byte(passphrase)
    log.Println(""Decrypting private key using passphrase"")
    entity2.PrivateKey.Decrypt(passphrasebyte)
    for _, subkey := range entity2.Subkeys {
        subkey.PrivateKey.Decrypt(passphrasebyte)
    }
    log.Println(""Finished decrypting private key using passphrase"")

    // Decode the base64 string
    dec, err := base64.StdEncoding.DecodeString(encstr)
    if err != nil {
        return err
    }

    // Decrypt it with the contents of the private key
    md, err := openpgp.ReadMessage(bytes.NewBuffer(dec), entitylist2, nil, nil)
    if err != nil {
        return err
    }
    bytess, err := ioutil.ReadAll(md.UnverifiedBody)
    if err != nil {
        return err
    }
    decstr := string(bytess)

    // should be done
    log.Println(""Decrypted Secret:"", decstr)

    return nil
}

func main() {
    err := encTest()
    if err != nil {
        log.Fatal(err)
    }
}

","2612","<encryption><go><public-key-encryption><gnupg><openpgp>","2","7","2","2014-09-10 05:14:52","25756628","1","3","2827945","","2014-09-09 23:45:58","2014-09-07 22:21:18",""
"14018651","RSA iOS encrypt & PHP decrypt","As referring to this link http://blog.iamzsx.me/show.html?id=155002, I generated a pair of key using

$ openssl req -x509 -out public_key.der -outform der -new -newkey rsa:1024 -keyout private_key.pem -days 3650

this command. Then I get private_key.pem & public_key.der.
I follow the implementation what I get the encrypted data is
<ceaedf05 f39b69ab 8618f859 599926e9 c18d9233 342c58e0 534b66af 8b33dda3 375d6a11 b95ad821 11549637 ce4c26dc 760169c6 04096aff 9ec48938 1c6b149f 8180f9bb 8e1337ce 2b492af2 e0464e4c 9ab7aabd 9da53caf 1b5e5277 3c708b43 cb6515ee c9a18b02 4941416c 7f1e36d3 dcd3705b 66f8a159 ab8a7a3f a9db8306>
but what I want is
dXXEEADvRDdk4QVM6TU9dyYtuHe8RVzP3KsWAoDDSQ2w+NELVPOv4mSVW1jIhEhb+pLsmOvLzGIW1/2qkp91M1UoPuhgplV2JEgP8EvcBn8EY43n7wVASGP9heRK0lYMfENP54f35+GFP68nU5zbrmX0IN6DGGGSNdSewzLb6s4=
Actually what I want is the functions below:
in iOS:

- (NSString *)encryptedString:(NSString *)plainText

in PHP:
function decrypted_string()  
{
    $encrypted_string = $_POST['encrypted_string']; 
    // implementation
    return $plain_text;
}

How can I implement these functions?
I already googled for it, unfortunately, there is no solution that I want. Hopefully can get help in here. Thanks in advance.
","You need to base64 encode the NSData before sending to php. See the answer for the following post:
Creating a base-64 string from NSData
On php end, you can use openssl_private_decrypt to decrypt. Reference below:
http://php.net/manual/en/function.openssl-private-decrypt.php
Sample:
<?php
$fp=fopen(""/path/to/private_key.pem"",""r"");
$priv_key=fread($fp,8192);
fclose($fp);
$res = openssl_get_privatekey($priv_key, ""myPassword"");

$data = $_POST['encrypted_string']; 
if (openssl_private_decrypt(base64_decode($data), $decrypted, $res))
         echo ""Decrypted:$decrypted"";
?>

","2610","<php><objective-c><ios><rsa><public-key-encryption>","0","2","3","2013-01-01 05:02:52","14107932","0","","","","","2012-12-24 07:52:06",""
"14018651","RSA iOS encrypt & PHP decrypt","As referring to this link http://blog.iamzsx.me/show.html?id=155002, I generated a pair of key using

$ openssl req -x509 -out public_key.der -outform der -new -newkey rsa:1024 -keyout private_key.pem -days 3650

this command. Then I get private_key.pem & public_key.der.
I follow the implementation what I get the encrypted data is
<ceaedf05 f39b69ab 8618f859 599926e9 c18d9233 342c58e0 534b66af 8b33dda3 375d6a11 b95ad821 11549637 ce4c26dc 760169c6 04096aff 9ec48938 1c6b149f 8180f9bb 8e1337ce 2b492af2 e0464e4c 9ab7aabd 9da53caf 1b5e5277 3c708b43 cb6515ee c9a18b02 4941416c 7f1e36d3 dcd3705b 66f8a159 ab8a7a3f a9db8306>
but what I want is
dXXEEADvRDdk4QVM6TU9dyYtuHe8RVzP3KsWAoDDSQ2w+NELVPOv4mSVW1jIhEhb+pLsmOvLzGIW1/2qkp91M1UoPuhgplV2JEgP8EvcBn8EY43n7wVASGP9heRK0lYMfENP54f35+GFP68nU5zbrmX0IN6DGGGSNdSewzLb6s4=
Actually what I want is the functions below:
in iOS:

- (NSString *)encryptedString:(NSString *)plainText

in PHP:
function decrypted_string()  
{
    $encrypted_string = $_POST['encrypted_string']; 
    // implementation
    return $plain_text;
}

How can I implement these functions?
I already googled for it, unfortunately, there is no solution that I want. Hopefully can get help in here. Thanks in advance.
","My recommndation: use phpseclib, a pure PHP RSA implementation. eg.
<?php
include('Crypt/RSA.php');

$rsa = new Crypt_RSA();
$rsa->setPassword('abc123');
$rsa->loadKey('-----BEGIN RSA PRIVATE KEY-----
Proc-Type: 4,ENCRYPTED
DEK-Info: DES-EDE3-CBC,927035AD39FA7CED

un9ayDNHNdXKtAzmGB0eCxJ+3z54qNTH2nejrvxVANqDHbOh5642hIWVxrNwD0LC
dbosArWk00bAi9HGgU0UnzN4So3XM2yVxejFh98k8VuB0zPiNWHLGYhaj81BEeob
eLI3QzPCyX7CR1KJwHJC/5xHJMKN+1TCnn/nBsP12JelBJBui6R90LShfqecdJAa
oDpGGcDtPchOaHxHkv8i4AFHKm7QBDbebZZe/Bu0tKr4DJYSeQxe+a+YoqSkdRs5
JoQiqTd+kT9RT+7Kf22xtlThJQ6mh/i7rF0N32eUQsNYgs2eHmjgu55cDI6/XC+x
zIiDAsk2prtVpMzVJDkTUVnY2+AcMfgk2Oxpsx+H/9pHYWp/qma8mmRR7ALdyzce
cVmzCh4NjSPXnlrv4LCY5mEc3ObanIx6ZirmtJWwBiqADVt+aByrLicO3AoN//UU
dUiEtvIC+cl2wZ+eRRUC4uUr47a0AakkXTjZERsJt/cTNpgFdra4mVOefNxnt1rk
lfS9dQyFrBaDiS6IwpK3I9gNuvSam9SIqhSx7WT038Lh50bKvWodDck8OHvl1FwI
FiLN/VehnTJTMDe5Ee7nC6jPqVdagH0nZkNJDlVyjKCbCEKlzYOBr9mYQUqV2lSL
fbpBJOjmHesQAhP4UJNHNOhcyHBQ5WV60y0lySKPUqu20x0N3E+ByleA8g28ijwv
F79RmcldG8x5X6Ur2W7mtKbGFfLC3CFRW9r6a0ycdpfkWo/gii/tQpbBPyYPrsWe
MNkbkzdVMLOIKZLVAd+i82UrDg3zor45JhSRsRhnLRhaZuMOukcqGQ==
-----END RSA PRIVATE KEY-----');

$rsa->setEncryptionMode(CRYPT_RSA_ENCRYPTION_PKCS1);

echo $rsa->decrypt(base64_decode('qieklzzWct0ab7UOows+uvlaI5VLEHwIED4+O9KjVKopGTPIVaB8ioSUNZKnh5LUepmc/gowrp4pM1X??J+e+rPlwqI98d56ijdWuDOOojGR5VCNilztPSxI6PIpQeL58y+B5EVUWv49dcTuGwuRiU/FL8APkNqdEE??k43SLKyhY7w='));

","2610","<php><objective-c><ios><rsa><public-key-encryption>","0","1","3","2013-01-01 05:02:52","14107932","0","","","","","2012-12-24 07:52:06",""
"14018651","RSA iOS encrypt & PHP decrypt","As referring to this link http://blog.iamzsx.me/show.html?id=155002, I generated a pair of key using

$ openssl req -x509 -out public_key.der -outform der -new -newkey rsa:1024 -keyout private_key.pem -days 3650

this command. Then I get private_key.pem & public_key.der.
I follow the implementation what I get the encrypted data is
<ceaedf05 f39b69ab 8618f859 599926e9 c18d9233 342c58e0 534b66af 8b33dda3 375d6a11 b95ad821 11549637 ce4c26dc 760169c6 04096aff 9ec48938 1c6b149f 8180f9bb 8e1337ce 2b492af2 e0464e4c 9ab7aabd 9da53caf 1b5e5277 3c708b43 cb6515ee c9a18b02 4941416c 7f1e36d3 dcd3705b 66f8a159 ab8a7a3f a9db8306>
but what I want is
dXXEEADvRDdk4QVM6TU9dyYtuHe8RVzP3KsWAoDDSQ2w+NELVPOv4mSVW1jIhEhb+pLsmOvLzGIW1/2qkp91M1UoPuhgplV2JEgP8EvcBn8EY43n7wVASGP9heRK0lYMfENP54f35+GFP68nU5zbrmX0IN6DGGGSNdSewzLb6s4=
Actually what I want is the functions below:
in iOS:

- (NSString *)encryptedString:(NSString *)plainText

in PHP:
function decrypted_string()  
{
    $encrypted_string = $_POST['encrypted_string']; 
    // implementation
    return $plain_text;
}

How can I implement these functions?
I already googled for it, unfortunately, there is no solution that I want. Hopefully can get help in here. Thanks in advance.
","Expanding on neubert's answer..
<?php
include('Crypt/RSA.php');

$rsa = new Crypt_RSA();
$rsa->setPassword('abc123');
$rsa->loadKey('-----BEGIN RSA PRIVATE KEY-----
Proc-Type: 4,ENCRYPTED
DEK-Info: DES-EDE3-CBC,927035AD39FA7CED

un9ayDNHNdXKtAzmGB0eCxJ+3z54qNTH2nejrvxVANqDHbOh5642hIWVxrNwD0LC
dbosArWk00bAi9HGgU0UnzN4So3XM2yVxejFh98k8VuB0zPiNWHLGYhaj81BEeob
eLI3QzPCyX7CR1KJwHJC/5xHJMKN+1TCnn/nBsP12JelBJBui6R90LShfqecdJAa
oDpGGcDtPchOaHxHkv8i4AFHKm7QBDbebZZe/Bu0tKr4DJYSeQxe+a+YoqSkdRs5
JoQiqTd+kT9RT+7Kf22xtlThJQ6mh/i7rF0N32eUQsNYgs2eHmjgu55cDI6/XC+x
zIiDAsk2prtVpMzVJDkTUVnY2+AcMfgk2Oxpsx+H/9pHYWp/qma8mmRR7ALdyzce
cVmzCh4NjSPXnlrv4LCY5mEc3ObanIx6ZirmtJWwBiqADVt+aByrLicO3AoN//UU
dUiEtvIC+cl2wZ+eRRUC4uUr47a0AakkXTjZERsJt/cTNpgFdra4mVOefNxnt1rk
lfS9dQyFrBaDiS6IwpK3I9gNuvSam9SIqhSx7WT038Lh50bKvWodDck8OHvl1FwI
FiLN/VehnTJTMDe5Ee7nC6jPqVdagH0nZkNJDlVyjKCbCEKlzYOBr9mYQUqV2lSL
fbpBJOjmHesQAhP4UJNHNOhcyHBQ5WV60y0lySKPUqu20x0N3E+ByleA8g28ijwv
F79RmcldG8x5X6Ur2W7mtKbGFfLC3CFRW9r6a0ycdpfkWo/gii/tQpbBPyYPrsWe
MNkbkzdVMLOIKZLVAd+i82UrDg3zor45JhSRsRhnLRhaZuMOukcqGQ==
-----END RSA PRIVATE KEY-----');

$rsa->setEncryptionMode(CRYPT_RSA_ENCRYPTION_PKCS1);

echo $rsa->decrypt(base64_decode('qieklzzWct0ab7UOows+uvlaI5VLEHwIED4+O9KjVKopGTPIVaB8ioSUNZKnh5LUepmc/gowrp4pM1X??J+e+rPlwqI98d56ijdWuDOOojGR5VCNilztPSxI6PIpQeL58y+B5EVUWv49dcTuGwuRiU/FL8APkNqdEE??k43SLKyhY7w='));

","2610","<php><objective-c><ios><rsa><public-key-encryption>","0","1","3","2013-01-01 05:02:52","14107932","0","","","","","2012-12-24 07:52:06",""
"23037955","how to store private keys in database or server (php)","I have  a web application that uses private and public keys to encrypte my fillable form. 
I'm using OPENSSL and PHP. My question is that how can i store private keys for each user in database or server? I dont know which one is more safely. Additionaly, my encyrption code ;
//create new private and public key

$new_key_pair = openssl_pkey_new(array(

    ""private_key_bits"" => 2048,

    ""private_key_type"" => OPENSSL_KEYTYPE_RSA,

));

openssl_pkey_export($new_key_pair, $private_key_pem);

$details = openssl_pkey_get_details($new_key_pair);

$public_key_pem = $details['key'];

//create signature

//openssl_sign($data, $signature, $private_key_pem, OPENSSL_ALGO_SHA256);

//save for later

file_put_contents('private_key.pem', $private_key_pem);

file_put_contents('public_key.pem', $public_key_pem);
//file_put_contents('signature.dat', $signature);

//verify signature
//$r = openssl_verify($data, $signature, $public_key_pem, ""sha256WithRSAEncryption"");
//var_dump($r);


echo $private_key_pem;

echo ""\r\n"";

echo $public_key_pem;

echo ""\r\n"";

echo $data;

echo ""\r\n"";

How can i prevent my private and public keys ? It shows on the screen
","The public key need no security, so you can save as clear text in the database.
with the private key you have different solution based on level of security and kinds of attacks you want to avoid.
1
save the pk as clear text in the db. Never write php code that echo the pk
2
save the pk in p12 format protect it with a password. You can prompt the password to the user every time you need
3
generete, store and use the pk using a HSM http://en.m.wikipedia.org/wiki/Hardware_security_module
i suggest solution 2.
","2601","<php><openssl><digital-signature><public-key-encryption><private-key>","1","1","1","2014-04-18 13:51:35","23120634","1","","608639","","2014-04-13 02:24:24","2014-04-13 01:00:31",""
"7545877","C# generate a public and private keys for the DSA encryption algorithm","How do I generate a public and a private key for the DSA algorithm in byte array format?
","In DSA algorithm (from wiki):

Public key is (p, q, g, y). 
Private key is x.
    var dsa = new DSACryptoServiceProvider();            
    var privateKey = dsa.ExportParameters(true); // private key
    var publicKey = dsa.ExportParameters(false); // public key


In publicKey it's P, Q, G, Y propertyes
In privateKey it's X
And don't forget to accept this answer!
","2581","<c#><encryption><public-key-encryption><dsa>","2","9","1","2013-04-09 13:15:38","7546216","0","1","184093","","2013-04-09 13:15:38","2011-09-25 13:45:13","2011-09-25 15:00:08"
"32185238","How do I verify a JSON Web Token using a Public RSA key?","New question to keep this question specific and to the point.
I have a JWT from Azure and now I need verify the signature in my application.
The public keys from Microsoft can be found here:
https://login.windows.net/common/discovery/keys
How do I use these keys to verify a signature? I can tell these these are the public keys I need as the X5T header in the JWT matches those on this public key list.
I am using the JWT PHP library but everything I enter as the public key seems to fail.
supplied key param cannot be coerced into a public key

So using the link above, that goes from there into the PHP
openssl_verify function as parameter three ($key in the example below)?
$success = openssl_verify($msg, $signature, $key, 'SHA256')

Everything I enter causes an error in one way or another.
Thanks,
","Problem solved.
Turns out that the X5C part of the JSON array is the certificate not public key so JSON decoding https://login.windows.net/common/discovery/keys and grabbing the X5C element and using openssl to derive the public key works:
$cert_object = openssl_x509_read($cert);

$pkey_object = openssl_pkey_get_public(cert_object);

$pkey_array = openssl_pkey_get_details($pkey_object);

$publicKey = $pkey_array ['key'];

In this example $cert is the X5C value. However this on its own is not enough as its not encoded to X509. So what I did is create a new file in windows called certificate.cer, open in notepad and put the X5C value in there. Then by double clicking on ther .cer in windows, navigating to the details tab and clicking ""copy to file"" this opens the certificate export wizard.
Export as X509 and upload to the server.
$cert = file_get_contents('Certificates/Public/public.cer');

Works! There is probably a simpler way but this works.
","2565","<php><openssl><rsa><public-key-encryption>","6","9","1","2017-05-31 10:01:43","32186696","1","2","1505120","","2015-10-26 03:06:17","2015-08-24 14:47:55",""
"9675425","Public Key encryption with .NET and decryption with Java","I have a requirement where a Java Web service exposes methods for clients to obtain a PublickKey (as a PEM String) and submit data to the web service encrypted by the PublicKey. The client of the service is .NET app. On the Java side a keystore is created with a keypair (RSA 1024 bits) as shown below
keytool.exe -genkey -alias abc -keystore sample.ks -storetype jceks -storepass xyz
The .NET client obtains the PublicKey via the webservice and then use that public Key to encrypt some sensitive data to call the web service with the encrypted data. The web service decrypts the data using the private key avavailable from keystore and stores the contents in the DB. I cannot use any WS-Security capabilities for client compatibility reasons.
The webservice reads the keystore and returns the Public Key as a PEM string.
The .NET Client gets the PublicKey as a PEM string and creates a RSACryptoServiceProvider using this and it works without any issues. It then ecrypts the data and submits it back to the Java webservice. 
The Java Service decrypts the data but the problem I have is that it prints out garbage (not ASCII data).I don't get any exceptions.
I have attached the snippets (simplified) of code here
.NET Client Side
  var registrationService = new RegistrationService();
  var pKey = registrationService.getPublickey();
  //pKey is a PEM String
  X509Certificate2 cert = new X509Certificate2(ASCIIEncoding.ASCII.GetBytes(pKey));

    RSACryptoServiceProvider rsa = (RSACryptoServiceProvider)cert.PublicKey.Key;

    var encryptedMsg = rsa.Encrypt(Encoding.UTF8.GetBytes(""Secret Data""), false);
    var encoded_msg = Convert.ToBase64String(encryptedMsg);

    registrationService.submitRegistration(encoded_msg);

Java Side:
   public void submitRegistration(String inputData)
   {
   //Decoding the encoded and encrypted message in the webservice      
   PrivateKey privateKey = getPrivateKeyFromKeyStore(""abc"");
   //I know I am using JDK proprietary classes, but I can easily replace this
   byte[] dataInBytes = new Base64Decoder().deodeBuffer(inputData)

   Cipher cipher = Cipher.getInstance(""RSA/ECB/NoPadding""); 
   cipher.init(Cipher.DECRYPT_MODE, privateKey);
   byte[] decryptedData = cipher.doFinal(dataInBytes);          
   String original = new String(decryptedData, ""UTF-8"");
   System.out.println(""Original Data : "" + original);
}
  public String getPublicKey()
  {
    Certificate cert = getKeyStore().getCertificate(""abc"");
    byte[] encodedCert = cert.getEncoded();
    StringWriter sw = new StringWriter();
    sw.write(""-----BEGIN PUBLIC KEY-----"");
    sw.write(new Base64Encoder().encode(encodedCert));
    sw.write(""-----END PUBLIC KEY-----"");
    return sw.toString();
  }

","One thing to notice is that you're using ""NOPADDING"" on the Java side but .NET is using PKCS1Padding.  
Since PKCS1 padding pads plaintext with 0x00 0x02 at the high order end this also provides a way for the decrypting side to check that it is using a correct private key. However, note that the chance of a wrong key decrypting to plaintext that starts with 0x00 0x02 is at least 1/65536, so this check cannot be relied on entirely to detect an incorrect private key. In your case, you used an incorrect key and the plaintext failed this check, so you received the exception. Now, when you specify NOPADDING you are saying that all plaintext are valid, and any further checking will be done by your application.
","2548","<c#><java><web-services><encryption><public-key-encryption>","0","2","1","2012-03-15 00:00:02","","10","3","","","","2012-03-12 21:59:55",""
"6554651","Shared encrypted file but using different key to decrypt","I just curious, if there any encryption algorithm that can support this scenario.
A plain text file (T) was shared among two parties, this file was encrypted (let say symmetric AES) to become encrypted file (E). The Encrypted file will be stored in the server, and after encryption takes place, additional party can be added at any time. 
When first party wants to get the T file, he/she passes P1K to decrypt E file
when second party wants to get the T file, he/she passed P2K to decrypt E file.
Any idea how to achieve this using pure encryption algorithm only (without using database to store intermediary key) ?
","If the sender already has the public key component for the intended recipients of the secret message than this can be done with GnuPG using paired key encrpytion.  
The sender needs to encrypt the data to the public key of the intended recipients (maybe the senders own key as well) and only those people will be able to use their private key to decrypt the secret message.  
Not sure if the requirement to preawareness of or access to the receivers public keys is an issue or disqualifies the answer as a type of database of info that the sender must have.  
All users get to keep their private bits to themselves though as opposed to if they all had to have shared the same password, in this case no user has access to the private key any of their contacts.
http://www.gnupg.org/
","2509","<security><encryption><public-key-encryption>","-1","1","3","2013-10-21 20:00:59","","4","","548690","","2011-07-02 02:16:30","2011-07-02 01:52:48",""
"6554651","Shared encrypted file but using different key to decrypt","I just curious, if there any encryption algorithm that can support this scenario.
A plain text file (T) was shared among two parties, this file was encrypted (let say symmetric AES) to become encrypted file (E). The Encrypted file will be stored in the server, and after encryption takes place, additional party can be added at any time. 
When first party wants to get the T file, he/she passes P1K to decrypt E file
when second party wants to get the T file, he/she passed P2K to decrypt E file.
Any idea how to achieve this using pure encryption algorithm only (without using database to store intermediary key) ?
","Who passes what key to whom? (Also, traditionally P for plaintext and C for ciphertext.)
And there's an easy answer (unless I'm misunderstanding you, which is an obvious possibility since your question isn't very clear): Give each recipient ""half"" of the key in the first place, and the other half when you want them to be able to decrypt the message.
How do you split a key in half? A decent way is to XOR it with a nonce: give person 1 K⊕N1 and person 2 K⊕N2. When you want them to decrypt the message, give them N1 or N2 respectively.
Another easy answer is to just give each person the key encrypted with the recipient's public key when you want them to decrypt the message.
","2509","<security><encryption><public-key-encryption>","-1","0","3","2013-10-21 20:00:59","","4","","548690","","2011-07-02 02:16:30","2011-07-02 01:52:48",""
"6554651","Shared encrypted file but using different key to decrypt","I just curious, if there any encryption algorithm that can support this scenario.
A plain text file (T) was shared among two parties, this file was encrypted (let say symmetric AES) to become encrypted file (E). The Encrypted file will be stored in the server, and after encryption takes place, additional party can be added at any time. 
When first party wants to get the T file, he/she passes P1K to decrypt E file
when second party wants to get the T file, he/she passed P2K to decrypt E file.
Any idea how to achieve this using pure encryption algorithm only (without using database to store intermediary key) ?
","The plain text (T) can be encrypted with a secret key (Ks) using a symmetric cipher like AES.
Ks is encrypted with as many public keys that is allowed to know the symmetric cipher and added as part of the encrypted message packet.
Decryption just means iterating through the list of encrypted Ks against the private key of a user.
","2509","<security><encryption><public-key-encryption>","-1","1","3","2013-10-21 20:00:59","","4","","548690","","2011-07-02 02:16:30","2011-07-02 01:52:48",""
"11324742","Check whether certificate alias is already present","I am implementing a shell script which will create a new self signed certificate using keytool command. Below is the command that I use to create the certificate 
    echo ""# Creating key and Self Signed Certificate""
    keytool -genkey -alias cert -keyalg RSA -storepass ""${KEYSTORE_PASS}"" -keypass         ""${KEY_PASS}"" -keystore cert/keystore.jks -validity 3650 -keysize 1024 -dname ""C=${CNTRY}, ST=${ST}, L=${LOC}, O=${ORG}, OU=Certificates, CN=${ORG} SEURAT Certificate Authority""

exit_on_error $?
For password and other subject information I am getting input from user. Now this command fails if alias name already exists. I can delete the alias using 
    keytool -delete -alias 1 -keystore cert/keystore.jks

But the above command fails if alias name doesnt present. So how can I check in shell script if alias name present then delete the certificate and create new in its name , or just create it ?
","Maybe you can list the existing aliases first:
[ -z keytool -list -alias cert ] && keytool -genkey -alias cert -keyalg RSA -storepass ""${KEYSTORE_PASS}"" -keypass

","2506","<shell><certificate><ssl-certificate><public-key-encryption><keytool>","1","3","1","2012-07-04 08:18:33","11324974","0","1","470341","","2012-07-04 08:18:33","2012-07-04 07:55:47",""
"18168830","Symmetric encryption with a key size less than 128bit","I'm implementing a cryptographic solution for Wireless and sensor network security. So in a one step of this implementation sensor nodes have a certificate of a CA. Sensors are supposed to generate a symmetric key and encrypt it with CA's public key and send it to the CA. 
I use openssl for certificate and key generations. I though of using AES with 128bit key for the symmetric key. The problem for the moment is that I can't encrypt 128bit data as follows since it gives ""Data is too large"" error.
openssl rsautl -encrypt -inkey id_rsa.pub.pem -pubin -in key1.bin -out key1.bin.enc 

So it looks like either I need to encrypt 128 bit key using another way or I can use a smaller key which in sensor network environment will not be a problem. 
My question is ""Is there any symmetric key encryption with smaller key or do I have a way to encrypt 128bit key using the certificate directly""
P.S
This is how I generate keys.
openssl genrsa -out mykey.pem 1024
openssl rsa -in mykey.pem -pubout > mykey.pub
openssl rand 128 > key1.bin

Thank you 
","From the openssl rsautl documentation page:

rsautl because it uses the RSA algorithm directly can only be used to
  sign or verify small pieces of data.

So don't expect to be able to encrypt large amounts of data with an RSA key.
HOWEVER, the RSA algorithm is frequently used to do exactly what you are proposing...encrypting an AES key, which is then used to encrypt larger files.
You should be able to encrypt (almost) up to your public key size.  So something seems wrong here.   For a public key size of 2048 bits (256 bytes), I can encrypt a 1960 bit (245 byte) file using the same openssl command in your question.  For a 1024 bit public key, I can encrypt 936 bits (117 bytes).
So let's check these items to see if the problem can be found:
First, how large is your RSA public key? (Be careful not to confuse bits and bytes.)  It should be 1024 bits or higher.
Next, how large is your AES key? (Again, make sure to check bits vs. bytes.)  It should be 128 bits according to your question.
If the sizes are correct for both keys, there should be no problem encrypting the AES key with the RSA key.
","2461","<openssl><aes><sensor><public-key-encryption>","1","1","1","2013-08-13 15:03:53","18199889","0","1","1640358","","2013-08-13 15:03:53","2013-08-11 04:44:38",""
"30102007","What is special for a private key to be PEM-formatted?","I am trying to use the Google API with a oAuth service account, with Python 3.4. One of the steps is to generate a JSON Web Token, for which I use PyJWT.
My code for the generation is the following:
# opening the certificate downloaded from the Google API console
# it is password protected by the standard password ('notasecret')
p12 = OpenSSL.crypto.load_pkcs12(open('certfromgoogle.p12', 'rb').read(), 'notasecret')

# extracting the private key from the certificate and dumping it to a PEM
# format (FILETYPE_PEM)
private_key = OpenSSL.crypto.dump_privatekey(OpenSSL.crypto.FILETYPE_PEM, p12.get_privatekey())

# at that stage, private_key contains the private key as
# b'-----BEGIN PRIVATE KEY-----\nMIICdg(...)FIyw==\n-----END PRIVATE KEY-----\n'

# trying to get the JWT
encoded = jwt.encode(claim, private_key, algorithm='RS256', headers={""alg"": ""RS256"", ""typ"": ""JWT""})

The call to jwt.encode crashes with TypeError: Expecting a PEM-formatted key. The full traceback:
Traceback (most recent call last):
  File ""C:/Users/w_000/PycharmProjects/syncmagazines/testcrypto.py"", line 20, in <module>
    encoded = jwt.encode(claim, private_key, algorithm='RS256', headers={""alg"": ""RS256"", ""typ"": ""JWT""})
  File ""C:\Python34\lib\site-packages\jwt\api.py"", line 118, in encode
    key = alg_obj.prepare_key(key)
  File ""C:\Python34\lib\site-packages\jwt\algorithms.py"", line 170, in prepare_key
    raise TypeError('Expecting a PEM-formatted key.')
TypeError: Expecting a PEM-formatted key.

The private key, however, seems to be extracted correctly.
Why isn't this format correct?
","
What is special for a private key to be PEM-formatted?

PEM is a presentation encoding. It has the familiar -----BEGIN XXX----- and -----END XXX-----.
I think BEGIN PRIVATE KEY is a PKCS #8 private key. Perhaps the library wants a PKCS #1 private key with BEGIN RSA PRIVATE KEY. BEGIN RSA PRIVATE KEY is also known as a Traditional key encoding (as opposed to PKCS #8).
You should check the relevant documentation and provide the key in the correct format.
To convert from a traditional key to a PKCS #8 key, see the OpenSSL man pages for pkcs(1). -topk8 is of interest. Also see How to convert PKCS#8-formatted PEM private key to the tranditional format?
To convert from a PKCS #8 key to a a traditional key, see the OpenSSL man pages for rsa(1). Also see Convert PEM traditional private key to PKCS8 private key?
","2459","<python><openssl><public-key-encryption><jwt>","2","0","2","2015-05-11 00:06:38","30146187","4","","903011","","2015-05-09 11:15:42","2015-05-07 13:07:58",""
"30102007","What is special for a private key to be PEM-formatted?","I am trying to use the Google API with a oAuth service account, with Python 3.4. One of the steps is to generate a JSON Web Token, for which I use PyJWT.
My code for the generation is the following:
# opening the certificate downloaded from the Google API console
# it is password protected by the standard password ('notasecret')
p12 = OpenSSL.crypto.load_pkcs12(open('certfromgoogle.p12', 'rb').read(), 'notasecret')

# extracting the private key from the certificate and dumping it to a PEM
# format (FILETYPE_PEM)
private_key = OpenSSL.crypto.dump_privatekey(OpenSSL.crypto.FILETYPE_PEM, p12.get_privatekey())

# at that stage, private_key contains the private key as
# b'-----BEGIN PRIVATE KEY-----\nMIICdg(...)FIyw==\n-----END PRIVATE KEY-----\n'

# trying to get the JWT
encoded = jwt.encode(claim, private_key, algorithm='RS256', headers={""alg"": ""RS256"", ""typ"": ""JWT""})

The call to jwt.encode crashes with TypeError: Expecting a PEM-formatted key. The full traceback:
Traceback (most recent call last):
  File ""C:/Users/w_000/PycharmProjects/syncmagazines/testcrypto.py"", line 20, in <module>
    encoded = jwt.encode(claim, private_key, algorithm='RS256', headers={""alg"": ""RS256"", ""typ"": ""JWT""})
  File ""C:\Python34\lib\site-packages\jwt\api.py"", line 118, in encode
    key = alg_obj.prepare_key(key)
  File ""C:\Python34\lib\site-packages\jwt\algorithms.py"", line 170, in prepare_key
    raise TypeError('Expecting a PEM-formatted key.')
TypeError: Expecting a PEM-formatted key.

The private key, however, seems to be extracted correctly.
Why isn't this format correct?
","Having examined the PyJWT source code, it is apparent that the library expects the PEM data to be a string type, but you are providing a bytestring (evident in your question by the b'...' literal).
The offending function is prepare_key, along with the definition of acceptable string types.
You must decode the private key data into the native str type:
private_key_bytes = OpenSSL.crypto.dump_privatekey(OpenSSL.crypto.FILETYPE_PEM, p12.get_privatekey())
private_key = private_key_bytes.decode('utf-8')

This only seems to be required for Python 3, but the above code should work for Python 2 as well.
","2459","<python><openssl><public-key-encryption><jwt>","2","1","2","2015-05-11 00:06:38","30146187","4","","903011","","2015-05-09 11:15:42","2015-05-07 13:07:58",""
"2975329","Confused about encryption with public and private keys (which to use for encryption)","I am making a licensing system when clients ask my server for a license and I send them a license if they are permitted to have one.
On my current system I encrypt the license using a single private key and have the public key embedded into the client application that they use to decrypt the license.  It works!
Others have told me that I should be encrypting with the public key on the server and distributing the private key to clients.  I have searched the web and can see that sometimes they use the private key to encrypt and other times they use the public key to encrypt.
In this case what am I supposed to do?
","
Others have told me that I should be
  encrypting with the public key on the
  server and distributing the private
  key to clients.

Those people are wrong.  The name private key implies that it is private meaning that only you should have access to it.

In this case what am I supposed to do?

Use digital signatures.  Sign the license file with your private key and use your public key in your application to verify that the signature on the license came from you.
","2451","<java><encryption><drm><private-key><public-key-encryption>","7","8","6","2010-07-08 09:24:04","2975366","0","3","47773","","2010-06-04 15:17:57","2010-06-04 15:02:26",""
"2975329","Confused about encryption with public and private keys (which to use for encryption)","I am making a licensing system when clients ask my server for a license and I send them a license if they are permitted to have one.
On my current system I encrypt the license using a single private key and have the public key embedded into the client application that they use to decrypt the license.  It works!
Others have told me that I should be encrypting with the public key on the server and distributing the private key to clients.  I have searched the web and can see that sometimes they use the private key to encrypt and other times they use the public key to encrypt.
In this case what am I supposed to do?
","If you are using public-private (asymmetric) encryption, you always encrypt with the recipient's public key, who decrypts with their private key.  For digital signatures, you sign with your private key and the recipient verifies the signature with their public key.
The question then arises, how do you make a secure DRM system?  If you use encryption, and give the recipients a private key, they can distribute either the key or the decrypted content.  If you use signatures, they can simply strip out the signature verification part of your program.
The answer is that it's impossible.  The concept of DRM is fundamentally flawed.
","2451","<java><encryption><drm><private-key><public-key-encryption>","7","0","6","2010-07-08 09:24:04","2975366","0","3","47773","","2010-06-04 15:17:57","2010-06-04 15:02:26",""
"2975329","Confused about encryption with public and private keys (which to use for encryption)","I am making a licensing system when clients ask my server for a license and I send them a license if they are permitted to have one.
On my current system I encrypt the license using a single private key and have the public key embedded into the client application that they use to decrypt the license.  It works!
Others have told me that I should be encrypting with the public key on the server and distributing the private key to clients.  I have searched the web and can see that sometimes they use the private key to encrypt and other times they use the public key to encrypt.
In this case what am I supposed to do?
","If you are encrypting something that is only to be read by a single recipient, then you encrypt with that recipients public key and they use their private key to read it.
If you are encrypting for multiple recipients, then you can encrypt with your private key and distribute your public key to those which you want to be able to read it.  This is usually called ""signing"" as anyone who has access to your public key can read it, so it's not really a form of private communication.
An overall more robust solution for you would be for your app to generate a key pair per installation, send the public key that it generated back to the server, which you would then use to encrypt so that only that single install could use the license that you created (by decrypting it with its private key).
","2451","<java><encryption><drm><private-key><public-key-encryption>","7","1","6","2010-07-08 09:24:04","2975366","0","3","47773","","2010-06-04 15:17:57","2010-06-04 15:02:26",""
"2975329","Confused about encryption with public and private keys (which to use for encryption)","I am making a licensing system when clients ask my server for a license and I send them a license if they are permitted to have one.
On my current system I encrypt the license using a single private key and have the public key embedded into the client application that they use to decrypt the license.  It works!
Others have told me that I should be encrypting with the public key on the server and distributing the private key to clients.  I have searched the web and can see that sometimes they use the private key to encrypt and other times they use the public key to encrypt.
In this case what am I supposed to do?
","At least in a typical public key encryption algorithm (e.g., RSA) there's not really a major difference between the public and the private key. When you generate keys, you get two keys. You keep one private and publish the other -- but it doesn't matter much which one you publish and which one you keep private. 
Anything you encrypt with one key can be decrypted with the other key. For normal purposes, you publish one key, which lets anybody encrypt something that only you can decrypt. From a technical viewpoint, the reverse works fine though: if you encrypt something with your private key, anybody with the public key can decrypt it. This is typically used for things like signature verification (i.e., anybody with the public key can verify that the signature had to have been created with the private key). You usually want to use separate key pairs for encryption and signing though.
For your case, it's open to some question what you're really going to accomplish. You can certainly encrypt some data necessary to use the program, so the user needs the key to decrypt it and use the program -- but if the user is willing to give a copy of the code to an unauthorized person, they probably won't hesitate at giving a copy of the key to them as well. As such, even though the encryption/decryption will do it's job, it's unlikely to provide any real protection.
A more typical licensing scheme is tied to something like a specific IP address, so you do something like encrypting the IP address, then use the result as a key to decrypt data necessary to use the program. If the IP address is wrong, the data isn't decrypted correctly, and the program doesn't work. As long as the user has a static IP address this can work well -- but will cause problems in conjunction with DHCP.
My immediate advice would to just not do this at all. If you insist on doing it anyway, don't do it yourself -- get something like FlexNet to handle it for you. You're better off without it, but at least this way you'll get something that sort of works, and you won't waste time and effort on it that could be put to better purposes like improving your software.
","2451","<java><encryption><drm><private-key><public-key-encryption>","7","1","6","2010-07-08 09:24:04","2975366","0","3","47773","","2010-06-04 15:17:57","2010-06-04 15:02:26",""
"2975329","Confused about encryption with public and private keys (which to use for encryption)","I am making a licensing system when clients ask my server for a license and I send them a license if they are permitted to have one.
On my current system I encrypt the license using a single private key and have the public key embedded into the client application that they use to decrypt the license.  It works!
Others have told me that I should be encrypting with the public key on the server and distributing the private key to clients.  I have searched the web and can see that sometimes they use the private key to encrypt and other times they use the public key to encrypt.
In this case what am I supposed to do?
","Congratulations, you just invented the RSA signature.  (Which is what you should be using, anyway.)  To communicate with a public key system, you need to use the private key once and the public key once, but RSA supports two different orders:
1) Encrypt with the public key, decrypt with the private: The recipient doesn't know anything about the source of the message, but the sender knows that only the recipient (the holder of the private key) can read it.  This is classical ""encryption"".
2) ""Encrypt"" with the private key, then ""decrypt"" with the public.  This is a digital signature, and provides authentication.  Anyone can read the message, but only the private key holder could have sent it.
Assuming your license is customized to the client (which could be as simple as including a copy of a client-generated random number), then it's useless to anyone else, but the client can be sure that the server sent it.
The symmetry isn't quite that neat in practice; the different modes of operation have different weaknesses and gotchas, so the implementation is typically significantly different, but that's the general idea.
One of the first and most important lessons in cryptology is understanding authentication and when to use it.  It's needed at least as often as encryption, and not knowing when to use it leaves you in a Midvale School for the Gifted situation.
","2451","<java><encryption><drm><private-key><public-key-encryption>","7","4","6","2010-07-08 09:24:04","2975366","0","3","47773","","2010-06-04 15:17:57","2010-06-04 15:02:26",""
"2975329","Confused about encryption with public and private keys (which to use for encryption)","I am making a licensing system when clients ask my server for a license and I send them a license if they are permitted to have one.
On my current system I encrypt the license using a single private key and have the public key embedded into the client application that they use to decrypt the license.  It works!
Others have told me that I should be encrypting with the public key on the server and distributing the private key to clients.  I have searched the web and can see that sometimes they use the private key to encrypt and other times they use the public key to encrypt.
In this case what am I supposed to do?
","Hope this link from wikipedia helps. PKI is based on mutual trust. However the private key has to be protected by the owner. Public as the name implies is open to all. The entire architecture is made inorder to help the scenario as defined above in your question.
","2451","<java><encryption><drm><private-key><public-key-encryption>","7","0","6","2010-07-08 09:24:04","2975366","0","3","47773","","2010-06-04 15:17:57","2010-06-04 15:02:26",""
"4224276","PGP Encryption file or text?","I have a csv file that required to be encrypted. I want to ask that is there any difference between encrypt the content and encrypt the file? Or they are the same? Because our client doesn't clearly specify what they want?
Thanks,
","Usually when they say PGP encryption, they are talking about commercial programs that encrypt a file or files into one gpg file with their public, which they can decrypt with their private key.
The other way is encrypt it yourself line-by-line in code (there are libraries that do that using file streams; very easy).
Your client one way or another has to tell you how that expect to decrypt the data later on, which will tell you how you encrypt in the first place.
","2407","<encryption><pgp><public-key-encryption><openpgp>","0","0","2","2010-11-19 12:27:01","4224346","0","","","","","2010-11-19 10:54:52",""
"4224276","PGP Encryption file or text?","I have a csv file that required to be encrypted. I want to ask that is there any difference between encrypt the content and encrypt the file? Or they are the same? Because our client doesn't clearly specify what they want?
Thanks,
","Encryption will always produce binary result, which can be ""armored"" (base64-encoded and wrapped) then in order to get the text. All implementations conformant to OpenPGP standard handle armored data by decoding it to binary automatically, so it doesn't really matter what mode you specify. One special case is when you plan to paste the result to some other text data (such as text document), then armoring is mandatory. 
","2407","<encryption><pgp><public-key-encryption><openpgp>","0","1","2","2010-11-19 12:27:01","4224346","0","","","","","2010-11-19 10:54:52",""
"52638604","java.security.InvalidKeyException: invalid key format while generating public, private key from PEM file","I have gone through many similar threads but no luck!!
I want to generate public and private keys using a PEM file. Following is the code I am using for the same:
        String pemFileNme = ""C:\\Users\\amitmm\\Desktop\\clean\\key.pem"";

        File pubKeyFile = new File(pemFileNme);
        File privKeyFile = new File(pemFileNme);

        // read public key DER file
        DataInputStream dis = new DataInputStream(new 
        FileInputStream(pubKeyFile));
        byte[] pubKeyBytes = new byte[(int)pubKeyFile.length()];
        dis.readFully(pubKeyBytes);
        dis.close();

        // read private key DER file
        dis = new DataInputStream(new FileInputStream(privKeyFile));
        byte[] privKeyBytes = new byte[(int)privKeyFile.length()];
        dis.read(privKeyBytes);
        dis.close();

        KeyFactory keyFactory = KeyFactory.getInstance(""RSA"");

        // decode public key
        X509EncodedKeySpec pubSpec = new X509EncodedKeySpec(pubKeyBytes);
        RSAPublicKey pubKey = (RSAPublicKey) 
        keyFactory.generatePublic(pubSpec);

        // decode private key
        PKCS8EncodedKeySpec privSpec = new 
        PKCS8EncodedKeySpec(privKeyBytes);
        RSAPrivateKey privKey = (RSAPrivateKey) 
        keyFactory.generatePrivate(privSpec);

Exception:
Exception in thread ""main"" java.security.spec.InvalidKeySpecException: 
java.security.InvalidKeyException: invalid key format
at
sun.security.rsa.RSAKeyFactory.engineGeneratePublic(RSAKeyFactory.java:205)
at java.security.KeyFactory.generatePublic(KeyFactory.java:334)
at main.java.me.txedo.security.Main2.f1(Main2.java:47)
at main.java.me.txedo.security.Main2.main(Main2.java:20)
Caused by: java.security.InvalidKeyException: invalid key format
at sun.security.x509.X509Key.decode(X509Key.java:387)

PEM File Content:

-----BEGIN RSA PRIVATE KEY-----
      MIIEowIBAAKCAQEAwnEEodFEf86+Ae+wYyI//u1kekIWnA3RfzbAwWD77uG7D9Ci
      9vVNbPO4XT2hKL03/q7d7KTgrA1sjBltfaOzVfA56x1S/0cYVk4xI440dpLo0F+m
      RIqRw5fh8IuUlUIr3I4A7ESkDQQsZbDpdgCiNbrlADqLotcZyB4rU4uURW8QUI/W
      eqsD6TOQs4bI+3o3xAKkky2kXujSaaa3tDxgUPTmSQ0Buk7Hx/IVzwyV7qjWiR4U
      C46rHpnWxfF0DWuJUOYgJmBQ8xFOQwt4Ec/u+0m8top8cqQF+gpBn9iLXpbtahA3
      pqyvLuNXRH9yn8mlEneBrjjl6U0H3W/AV7/dGwIBAwKCAQEAgaCtwTYtqonUAUp1
      l2wqqfOYUYFkaAk2VM8rK5X9SevSCosXT04znffQPikWGyjP/x8+ncNAcrOdsrue
      U8J3jqAmnL43VNoQOYl2F7Qi+bdF4D/ELbG2gmVBSwe4Y4FykwlV8thtXgLIQ8tG
      TqsWznyYqtGybI9mhWlyN7Ji2POMDZP5Lwx7M01pMezwpnsZSmPVL9TgVrtWv4xt
      C0vPyuy9THlFWtkOdHItNK+vOTcpuHn29rFUJI/D3R+SQjcdqj3aaqljOtdeBxgd
      yDl2/Z4rUyetgzcZMfNTt/NRT0hOJ6R6/2S7gFCTtxMHBh3vVCH+pLLnQyJvcPQu
      AsORSwKBgQDhOPr1x/8BioqaasoXvO9NsGktCgPDjbC4d3jR8n6lCa42X/eIahaD
      xi1VGWyQhdO7aMXiDmzOtox7xHcMRh+a5ySIs9gTsHkMB2hqwIUNg25INRkQ3Vr3
      eWnoTBGsfJqC1TEME3ocKwmyz57ZAe4yyR/ZRdDX5DUt9qCCFeA8uQKBgQDdAzbq
      7BlJkbTYfdlIRNJEJAO3wWqQTx8X0ttCMMwDluOT9l+RR/KuUxl85ph+kwJci6E/
      ixfeMTW1NcsMY/lB6mTP0oooalU1MP7gpPSu+24zhLXnUHZotbNbv9nk6w/1WWhz
      FBt5w2DG4kQPFK6LSySqcVuzIGQyvWD5PbpGcwKBgQCWJfyj2qoBBwcRnIa6ffTe
      dZtzXAKCXnXQT6XhTFRuBnQkP/pa8WRX2XOOEPMLA+J88IPsCZ3fJF2n2E9dhBUR
      722wd+VidaYIBPBHKwNeV57azhC16OdPpkaa3WEdqGcB43YIDPwSx1vMimnmAUl3
      ML/mLos6mCNz+cBWuUAoewKBgQCTV3nx8ruGYSM6/pDa2IwtbVfP1kcK32oP4eeB
      dd1Xue0NTupg2qHJjLuombr/DKw9smt/sg/pdiPOI9yy7VDWnEM1NwbFnDjOIKnr
      GKMfUkl3rc6aNaRFzneSf+aYnLVOO5r3Yrz715XZ7C1fYx8Hh23G9j0iFZgh05X7
      fnwu9wKBgHyC0X26KZQ0ukan5jDSiz4dapUp2d3F+vnRzZa2AOsmo995gsXLdfsJ
      n0o4Z3LsQJUDRI3tQ4dXe/5jS4oFrOdxALOAw6YmvEv/3oHwsCYPDhqLNfIJ9I6m
      Dt3yG61pUJiCArhPaYG17NQoCxF6Xi6GUajRsECbr8DdyGMAu5eE
      -----END RSA PRIVATE KEY-----

I have tried removing file header and footer manually. I tried code from bouncycastle, no luck, same error.
Python code which works with this file:
def t2e_enc(plaintext, pk_pem_file = './2017-12-04T062008Z.pem'):
''' 
Function for encryption of Track2 credit card data.
This function uses private key to derivate public part used for encryption

'''
with open(pk_pem_file, 'rb') as pk:
    private_key = serialization.load_pem_private_key(pk.read(), 
    password=None, backend=default_backend())

public_key = serialization.load_pem_public_key(
    private_key.public_key().public_bytes(
        serialization.Encoding.PEM, 
        serialization.PublicFormat.SubjectPublicKeyInfo),
        backend=default_backend()
    )

ciphertext = public_key.encrypt(
    plaintext,
    padding.OAEP(
        mgf=padding.MGF1(algorithm=hashes.SHA1()),
        algorithm=hashes.SHA1(),
        label=None
    )
)
b64ciphertext=base64.b64encode(ciphertext)
return b64ciphertext

I am doing this for the first time, so bear with me if there is any silly mistake.
","Partial dupe Load RSA public key from file 
So, you 'wrote' (I assume, copied) code that clearly says you need two files, in DER form, containing PKCS8 and 'X509' encodings. (What Java calls X.509 here is really the SubjectPublicKeyInfo component of X.509.) You give it one file, in PEM form not DER, containing a PKCS1 encoding not PKCS8 or X509 -- and you're surprised it doesn't work? Python works because it calls OpenSSL, and OpenSSL supports over a dozen encodings and formats for privatekeys, including this one; Java supports only one (outside of keystores) which isn't this one. (Bare) publickeys are a little better; internally libcrypto supports multiple forms, but in practice only two of them are used, and one of them matches Java -- although many publickeys are distributed, stored, and used in the form of X.509 certificates, which provides several more forms to worry about.
There are approximately 7 solutions to your situation:

the simplest is to use OpenSSL commandline to convert your one file to the two files Java wants:
# (corrected! pkey is inconsistent!) 
openssl pkcs8 -topk8 -nocrypt -in input.pem -outform der -out private.der

openssl pkey -in input.pem -pubout -outform der -out public.der
# or for very old versions (should not be needed now)
openssl rsa -in input.pem -pubout -outform der -out public.der

Those files can now be read by the code you posted (except with the filenames separated). Note this conversion doesn't have to be done on the same system; if necessary you can do it elsewhere and copy the files, if you use a method that works for binary files i.e. NOT cut&paste.
if you really want only one file, but it can be converted, create the private.der file as above and read it with only the privatekey-related parts of your code, then do:
RSAPrivateCrtKey priv2 = (RSAPrivateCrtKey)privKey;
PublicKey pubkey = keyFactory.generatePublic(new RSAPublicKeySpec(priv2.getModulus(), priv2.getPublicExponent()));

you could convert the files to PKCS8 and 'X509' PEM by omitting -outform der from the above conversions, then read those files and manually 'de-PEM' by removing the header and trailer lines and converting the base64 to binary (removing or skipping the linebreaks); this results in binary PKCS8 and X509 encodings you can run through your existing code. This is as much work on the openssl side and more work on the Java side so there is no apparent advantage, except that PEM files are valid text and can be cut&pasted if necessary. 
combining these, you could convert to PKCS8 PEM only, read that per bullet 3 (de-PEM then the privatekey parts of your code), then extract publickey from privatekey per bullet 2 
one way to use the format you have (unconverted) in plain Java is to de-PEM per bullet 3 giving you a PKCS1 encoding, then manually construct the PKCS8 encoding, then proceed as before to run the PKCS8 through the KeyFactory and extract publickey per bullet 2. See my answer at Java: Convert DKIM private key from RSA to DER for JavaMail for a really ugly way to do this (including one de-PEM method). There is a better way if you use BouncyCastle (which has a class for this ASN.1 type), but if you use BouncyCastle it's better not to use this method at all, see below.
another way to use the unconverted format in plain Java is to de-PEM per bullet 3, then parse the ASN.1 structure of PKCS1 and construct an RSAPrivateCrtKeySpec which you can run through your KeyFactory instead of a PKCS8 encoding then extract publickey per bullet 2. This is even more complicated, although I think I have seen it somewhere; will add if I find it. Again BouncyCastle can improve this method, but doesn't need to, see below.
finally, if you have BouncyCastle it's dead easy. You don't say what you tried with 'no luck', but the following BouncyCastle code is all you need and does work:
try( Reader r = new FileReader(filename) ){
  KeyPair pair = new JcaPEMKeyConverter().getKeyPair((PEMKeyPair)new PEMParser(r).readObject());
}

Note this gives you a KeyPair with both privatekey and publickey objects from the one file.

","2404","<java><rsa><sha1><public-key-encryption><pem>","1","3","1","2018-10-23 17:28:01","52645202","0","","472495","","2018-10-23 17:28:01","2018-10-04 03:35:40",""
"43357295","Looking for an example to load/use a public ssh key with pysftp","I am working on a script in python using pysftp to establish an sftp connection. This script will run in Windows (Server 2012R2). The version of pysftp I have installed requires a host key, so I contacted my vendor and have acquired the public key from them. What I can't figure out is how to use this public key in my pysftp connection. I understand in pysftp 0.2.9 there is a new property (remote_server_key) but I can't find any examples of how to use it, and I can't use cnopts.hostkeys = none
Does anyone have an example of how to use/integrate a specific public key for the sftp server/host?
Please note this is not about the private key/public pair for my connection (I have those keys and they work fine) - this is about the host's public key.
","Ok, so I'm going to ""answer"" this with a workaround. What I ended up doing was creating the equivalent of the known_hosts file in the ""expected"" location for paramiko/pysftp.
First you generate a known_hosts file. The simple parameters are the FQDN (or IPaddress) of the sftp host and the public key of the server you are connecting to.
Example:
sftp.myserver.com ssh-rsa AAB3nzawerdvDLGiyasdf...

Once you have that file created (and named known_hosts) use an elevated command prompt or powershell session to create a .ssh directory at the root of the home directory of the user who will be running the script.
cd c:\Users\serviceaccount

md .ssh

Then copy the known_hosts file into that directory.
Now set up your pysftp session:
import pysftp
cnopts = pysftp.CnOpts()
sftpConnect = pysftp.Connection(host=""sftp.myserver.com"", username=""myusername"", private_key=""c:\\path\to\my\openssh.key"", private_key_pass=""randompassword"", port=22, cnopts=cnopts)

That worked for me just now.
","2402","<python><public-key-encryption><pysftp>","2","0","1","2019-09-13 15:18:16","","3","3","","","","2017-04-11 22:34:19",""
"9737757","Is there a public key stream cipher encryption?","I have a program that regularly appends small pieces (say 8 bytes) of sensitive data to a number of logfiles. I would like this data to be encrypted. I want the program to start automatically at boot time, so I don't want to type a password at program start. I also don't want it to store a password somewhere, since that would almost defeat the purpose of encryption.
For these reasons, it seems to me that public key encryption would be a good choice. The program knows my public key, but my private key is password protected somewhere else.
So far, so good. But when I try to use PyCrypto to RSA (or ElGamal)-encrypt a small 5-byte string, the output explodes to 128 bytes. My logfiles are large enough as it is... On the other hand, when I try a symmetric crypto, like Blowfish, the output string is just as large as the input string.
So, my question is: Is there a reasonably secure public key encryption algorithm where I can encrypt data 8 bytes at a time and don't have it blow up? (I guess a factor of 2 would be OK). I think what I want is a public key stream cipher.
If there is not such a thing, I think I will just give up and use a symmetric crypto and give the password manually on startup.
","Typically this is solved in the way that the program creates some (real) random numbers which are used as a secret key to a symmetric encryption algorithm.
In you program you have to do something like:

Generate some real random data (maybe use /dev/random) as a secret key.
Encrypt the secret key with the public key algorithm.
Use the secret key for some other symmetric algorithm.

To decrypt this, 

Use the private key to decrypt the secret key.
Use the secret key and the symmetric algorithm to decrypt the data.

You might want to get some random data (e.g. >=256bit) for a 'good' key.
","2385","<python><encryption><public-key-encryption>","2","4","2","2012-03-17 01:54:31","9738026","1","0","","","","2012-03-16 13:02:18",""
"9737757","Is there a public key stream cipher encryption?","I have a program that regularly appends small pieces (say 8 bytes) of sensitive data to a number of logfiles. I would like this data to be encrypted. I want the program to start automatically at boot time, so I don't want to type a password at program start. I also don't want it to store a password somewhere, since that would almost defeat the purpose of encryption.
For these reasons, it seems to me that public key encryption would be a good choice. The program knows my public key, but my private key is password protected somewhere else.
So far, so good. But when I try to use PyCrypto to RSA (or ElGamal)-encrypt a small 5-byte string, the output explodes to 128 bytes. My logfiles are large enough as it is... On the other hand, when I try a symmetric crypto, like Blowfish, the output string is just as large as the input string.
So, my question is: Is there a reasonably secure public key encryption algorithm where I can encrypt data 8 bytes at a time and don't have it blow up? (I guess a factor of 2 would be OK). I think what I want is a public key stream cipher.
If there is not such a thing, I think I will just give up and use a symmetric crypto and give the password manually on startup.
","What you need is to do something like SSL does: exchange a key using public key encryption, then use symmetric encryption. Asymmetric encryption is very inefficient in terms of performance, and should not be used for such stuff.
","2385","<python><encryption><public-key-encryption>","2","0","2","2012-03-17 01:54:31","9738026","1","0","","","","2012-03-16 13:02:18",""
"39454027","Converting a .pub public key certificate to .ASC","I am completely new to the encryption/decryption area and I searched a lot before asking this question (although a very basic one).
We have a user who sent his public key certificate in .pub format. We need to convert it into .asc to be able to import via Kleopatra into our system so that we can encrypt files and send it to him. I have tried to use multiple commands that I found online but none of them seem to work. 
Is there a way to do this? 
P.S: We use Windows as our environment.
","","2363","<encryption><public-key-encryption><gnupg><public-key-exchange>","1","","0","2016-09-12 15:37:53","","3","","","","","2016-09-12 15:37:53",""
"34835582","RSA Java encryption and Node.js decryption is not working","I have a system that requires a RSA keypair to be generated in javascript, have the public key then stored in a database at the server side (as a string), then the server side which is in Java will encrypt a string with the stored public key and send it to the client side which will decrypt the string with the private key.
I'm using a browsified version of node-rsa on my client browser.
First at the client i generate a keypair and export the keys, storing them as strings
var NodeRSA = require('node-rsa');
var key = new NodeRSA({b: 1024});
key.exportKey(""pkcs8-private"");
key.exportKey(""pkcs8-public-pem"");

The exported private key is stored at the client and the public at the server
Next i used java to encrypt a string with the public key received, so i parse the pkcs8 public key into a Java PublicKey object.
String pubKey = ""<Retrieved pkcs8 public key>"";
pubKey = pubKey.replaceAll(""(-+BEGIN PUBLIC KEY-+\\r?\\n|-+END PUBLIC KEY-+\\r?\\n?)"", """");
byte[] keyBytes = Base64.decodeBase64(pubKey);
X509EncodedKeySpec spec = new X509EncodedKeySpec(keyBytes);
KeyFactory kf = KeyFactory.getInstance(""RSA"");
PublicKey pk = kf.generatePublic(spec);

And encrypt a text with it
byte[] cipherText;
Cipher cipher = Cipher.getInstance(""RSA"");
cipher.init(Cipher.ENCRYPT_MODE, pk);
cipherText = cipher.doFinal(""Hello World!"".getBytes());
return Base64.encodeBase64String(cipherText);

Which works nicely and returns me a Base64 encoded encrypted string like this
WTS1J2f4w5icsUOCtulyHDaBmB5lN7D8mnj0QWMDBkUGiPHkM8nHVx9pd0MtbQAQNasQS2X8kisLMYyEMPasFZtDH0zX1e8lNYaW0xMKsg++ge87f+95nl+TmxDy6S1m7Ce/n0wXno+0MbSv8YsJtsUcAleyyfQX2bxqX8u7Gjs=

Then i try to decrypt it the string at the client side
First i reimport the stored keys in node-rsa
var NodeRSA = require('node-rsa');
var key = new NodeRSA();
key.importKey(""<exported private key string>"",""pkcs8-private"");
key.importKey(""<exported public key string>"",""pkcs8-public-pem"");

Then i try to decrypt the Base64 encoded encrypted string
key.decrypt(""<Base64 Encoded Encrypted>"", 'utf-8');

This is where the problem happens, javascript throws this error

Uncaught Error: Error during decryption (probably incorrect key). Original error: Error: Error decoding message, the lHash calculated from the label provided and the lHash in the encrypted data do not match.(…)
  However i have tested that if i encrypt and decrypt the text just within javascript, it works just fine. This makes me think that it's some difference between the way i encrypted it at java and how it's done at javascript

Could anyone point out the mistake that I've made here please?
","Oh i found the solution. It was a difference in the encryption method.
I just had to initialize Cipher with
Cipher.getInstance(""RSA/ECB/OAEPWithSHA1AndMGF1Padding"");

instead of
Cipher.getInstance(""RSA"");

to match node-rsa
","2363","<java><node.js><encryption><rsa><public-key-encryption>","8","9","1","2016-01-17 13:06:40","","0","5","1816580","","2016-01-17 13:06:40","2016-01-17 05:54:58",""
"10936208","JRE7 RSA Cipher javax.crypto.BadPaddingException: Blocktype mismatch: 0","I am at my wits end with this problem. I am trying to implement an encrypted channel using RSA(4096) to deliver an AES 256 bit key using java (JRE7). The first message I send is the generated 256 AES key encrypted with the RSA public key. Upon decryption, I am getting the following error message: javax.crypto.BadPaddingException: Blocktype mismatch: 0
My decryption code:
private byte[] decryptMessage(Key key, byte[] data){
    Cipher cipher;
    System.out.println(""Decrypting message..."");
    System.out.println(""key: "" + key.toString());
    System.out.println(""data: "" + data);
    System.out.println(""data length: "" + data.length);
    if(key instanceof PublicKey){
        //RSA public key
        System.out.println(""Found PublicKey"");
        try {
            cipher = Cipher.getInstance(""RSA/ECB/PKCS1Padding"");
            cipher.init(Cipher.DECRYPT_MODE, key);
            return cipher.doFinal(data);
        } catch (NoSuchAlgorithmException | NoSuchPaddingException | InvalidKeyException | IllegalBlockSizeException | BadPaddingException e) {
            // TODO Auto-generated catch block
            System.out.println(""Failed to decrypt message"");
            e.printStackTrace();
        }

    }else if(key instanceof PrivateKey){
        //RSA private key
        System.out.println(""Found PrivateKey"");
        try {
            cipher = Cipher.getInstance(""RSA/ECB/PKCS1Padding"");
            cipher.init(Cipher.DECRYPT_MODE, key);
            byte[] results = cipher.doFinal(data);
            System.out.println(""Decrypted results: "" + results);
            return results;
        } catch (NoSuchAlgorithmException | NoSuchPaddingException | InvalidKeyException | IllegalBlockSizeException | BadPaddingException e) {
            // TODO Auto-generated catch block
            System.out.println(""Failed to decrypt message"");
            e.printStackTrace();
        }
    }else if(key instanceof SecretKey){
        //AES secret key
        try {
            cipher = Cipher.getInstance(""AES/CBC/PKCS5Padding"");
            cipher.init(Cipher.DECRYPT_MODE, key);
            return cipher.doFinal(data);

        } catch (NoSuchAlgorithmException | NoSuchPaddingException | InvalidKeyException | IllegalBlockSizeException | BadPaddingException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }


    }else{
        System.out.println(""Invalid key type"");
    }
    return null;
}

My encryption code:
private byte[] encryptMessage(Key key, byte[] data){
    Cipher cipher;
    if(key instanceof PrivateKey || key instanceof PublicKey){
        //RSA key
        try {
            cipher = Cipher.getInstance(""RSA/ECB/PKCS1Padding"");
            cipher.init(Cipher.ENCRYPT_MODE, key);
            return cipher.doFinal(data);
        } catch (NoSuchAlgorithmException | NoSuchPaddingException | InvalidKeyException | IllegalBlockSizeException | BadPaddingException e) {
            // TODO Auto-generated catch block
            System.out.println(""Failed to encrypt message"");
            e.printStackTrace();
        }


    }else if(key instanceof SecretKey){
        //AES secret key
        try {
            cipher = Cipher.getInstance(""AES/CBC/PKCS5Padding"");
            cipher.init(Cipher.ENCRYPT_MODE, key);
            return cipher.doFinal(data);

        } catch (NoSuchAlgorithmException | NoSuchPaddingException | InvalidKeyException | IllegalBlockSizeException | BadPaddingException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }else{
        System.out.println(""Invalid key type"");
    }
    return null;
}

I googled and came to some similar stories(most on this website), but they were all problems with default Padding between to different devices, computer to android for example). I am getting the error when sending messages from the same computer and I have padding and ECB both set up. I went through the source code of com.sun.crypto.provider.RSACipher and sun.security.rsa.RSAPadding and found the error is being thrown in the sun.security.rsa.RSAPadding.unpadV15 method due to the second bit not being set properly. I am also using the new NIO2 classes in Java7 specifically the AsychronousSocketChannel and CompletionHandler objects so I don't know if they are causing threading errors though I highly doubt it. I found the source code at http://grepcode.com/file/repository.grepcode.com/java/root/jdk/openjdk/6-b14/com/sun/crypto/provider/RSACipher.java and http://grepcode.com/file/repository.grepcode.com/java/root/jdk/openjdk/7-b147/sun/security/rsa/RSAPadding.java#RSAPadding.padV15%28byte[]%29 but again they didn't help me much. I have tried dropping the key size and changing the encoding/padding options of the cipher objects, but it always errors out even with padding disabled. Though it may not matter, but since I am using JRE7, there is no stable support for bouncycastle so I am using the default security provider. 
Thanks in advance
","","2342","<java><public-key-encryption>","3","","0","2012-06-07 16:46:40","","1","1","","","","2012-06-07 16:46:40",""
"15985401","Public Key Encryption","I was thinking about communication between two computers using public-key encryption.
Let us assume that on one computer side I generate a private key and a public key.  If I send the public key to the other computer, can it still be captured by a packet sniffer and use it to decrypt my message?  If yes, what can be done to prevent this and what is the use of public key encryption then?
Update
Is SSL equivalent to public-key encryption?  Should I use it instead?
","No. The public key is not used to decrypt, but to encrypt. You decrypt with your private key. That way, only you can decrypt the message.
Usually though, private-public key encryption is too expensive to encrypt data with. You'd use a private/public encryption scheme to exchange a shared key (large random number) to encrypt your data with.
Example: Alice creates a private/public keypair, sends the public key to Bob. Bob creates a large random number and encrypts it with Alice's public key. Alice can decrypt that and find the large random number. Alice and Bob then use the random number to encrypt their data stream.
As additional security, you could change keys periodically.
To update on your SSL question: it works exactly as I describe above. See also http://en.wikipedia.org/wiki/Transport_Layer_Security
","2323","<c#><encryption><public-key-encryption>","2","4","2","2013-04-13 08:38:57","15985432","2","","1124249","","2013-04-13 07:48:52","2013-04-13 07:29:24",""
"15985401","Public Key Encryption","I was thinking about communication between two computers using public-key encryption.
Let us assume that on one computer side I generate a private key and a public key.  If I send the public key to the other computer, can it still be captured by a packet sniffer and use it to decrypt my message?  If yes, what can be done to prevent this and what is the use of public key encryption then?
Update
Is SSL equivalent to public-key encryption?  Should I use it instead?
","The answer is yes, it can be captured by sniffer.
Why RSA alone does not fit with Matt's situation?

In Matt's situation, he want both of 2 computers to be ensured legal. My point is RSA can only ensure 1 of them legal, instead of both of them.
Another important thing is cracker CAN also use private key to encrypt and public key to decrypt. The key can make client know it was connecting to a ""legal"" server, but can't help server to ensure it's a ""legal"" client since key stored at client side or send from server can be leaked. A better solution is implement your own hash algorithm to prevent being hacked. 
Here is an article about RSA private key encryption:
http://www.codeproject.com/Articles/38739/RSA-Private-Key-Encryption
Let's think about bank website, the client should know he is on legal website, but bank server doesn't need to ensure the client is legal or not since mobile phone authentication and other methods can do the trick. The mobile phone authentication is just something like ""hash method"", so, hash method is a must. RSA alone can not ensure safety.
Without hash method, if a cracker gets key stored, or transmitted by Internet, he can easily make a fake client without any difficulties. 

Well, then what's your solution?

Since I'm implementing a Client-Server based software, I can share you my solution:

I saved private key into Client's source code.
When server send some response or client send some request, use private/public key to encrypt and decrypt by the other side.
You need some protection, like code obfuscation to protect the key stored in client.
You need to design an hash algorithm to ensure data sent by client is legal. The hacker might get your key finally, but hard to know what your algorithm is so it's still safe enough.
Hash algorithm means an algorithm combined with add some salt/SHA-1/UUID/timestamp...etc. I don't mean you should invent a new encrypt algorithm.

For example, if the plain text is I'm so awesome
The algorithm can be:
Result = SHA1(salt + plain text + timestamp + anything you like)
If find your algorithm leaked, just change some key values.

What if your hash algorithm leaked?

Remember there's no algorithm can not be hacked. We don't need to build a castle can not be destroyed, we just need to make out enemy pay hard.
Still, you also need a quick ""big red button"" if anything goes wrong. Hash algorithm can play this role quite easy, a small modification can make crackers pay lots of time to hack it out. That's already good enough. 

UPDATE:

Is SSL equivalent to public-key encryption? Should I use it instead?

Yes, but you still have to store key somewhere better than send it through network. HTTPS/TLS is another decent choice.
","2323","<c#><encryption><public-key-encryption>","2","1","2","2013-04-13 08:38:57","15985432","2","","1124249","","2013-04-13 07:48:52","2013-04-13 07:29:24",""
"1352144","How do I combine n and e to create the public key in RSA?","I have a 128-byte (1024-bit) modulus (in a byte array format) and my exponent (also in a byte array format). I need to create a 128-byte array representing the public key.
According to Wikipedia, ""The public key consists of the modulus n and the public (or encryption) exponent e."" But that doesn't tell me how to mix both.
What is the right operation to do?
- n^e (will that stay 128 bytes long?)
- just n?
- n followed by e?
- n added to e?
- something else?  
","There are many different formats to represent RSA public keys. One of the more wide-spread ones is PKCS#1. In RFC 3447, the definition of the public key format is given as
  RSAPublicKey ::= SEQUENCE {
      modulus           INTEGER,  -- n
      publicExponent    INTEGER   -- e
  }

To represent a key in that format, you need to apply the ASN.1 DER encoding to this data structure.
Another choice is the SubjectPublicKeyInfo, from RFC 3280:
  SubjectPublicKeyInfo  ::=  SEQUENCE  {
     algorithm            AlgorithmIdentifier,
     subjectPublicKey     BIT STRING  
  }

For RSA, the algorithm should be 1.2.840.113549.1.1.1.
There are several other formats, such as the ones used for SSL.
","2313","<rsa><public-key-encryption>","4","3","3","2012-07-26 16:33:58","1352182","1","","387076","","2012-07-26 16:33:58","2009-08-29 19:03:06",""
"1352144","How do I combine n and e to create the public key in RSA?","I have a 128-byte (1024-bit) modulus (in a byte array format) and my exponent (also in a byte array format). I need to create a 128-byte array representing the public key.
According to Wikipedia, ""The public key consists of the modulus n and the public (or encryption) exponent e."" But that doesn't tell me how to mix both.
What is the right operation to do?
- n^e (will that stay 128 bytes long?)
- just n?
- n followed by e?
- n added to e?
- something else?  
","You won't be able to create such an array.  The ""public key"" has two parts: the exponent and the modulus.  They are separate numbers that must be kept separate, since both are needed to perform encryption and decryption later on.  Although your n is 1024 bits, the public key altogether is necessarily longer.
","2313","<rsa><public-key-encryption>","4","2","3","2012-07-26 16:33:58","1352182","1","","387076","","2012-07-26 16:33:58","2009-08-29 19:03:06",""
"1352144","How do I combine n and e to create the public key in RSA?","I have a 128-byte (1024-bit) modulus (in a byte array format) and my exponent (also in a byte array format). I need to create a 128-byte array representing the public key.
According to Wikipedia, ""The public key consists of the modulus n and the public (or encryption) exponent e."" But that doesn't tell me how to mix both.
What is the right operation to do?
- n^e (will that stay 128 bytes long?)
- just n?
- n followed by e?
- n added to e?
- something else?  
","""N followed by e"" is probably closest to what you want.  But if you intend to interoperate with some other RSA-based system, you should consult that system's documentation to see how they expect public keys to be formatted.
","2313","<rsa><public-key-encryption>","4","2","3","2012-07-26 16:33:58","1352182","1","","387076","","2012-07-26 16:33:58","2009-08-29 19:03:06",""
"4977473","How does public key encryption work?","How does public key encryption work, using a private and public/public key to decrypt/encrypt? What does it mean for the key to be 256 bits? How is it decrypted? Is there a language for writing encryption programs or is any language fine?
","For the first question see http://en.wikipedia.org/wiki/Public-key_cryptography
you can google for more details. 
256 bit key means we are using key of length 256. you will understand that after more reading about answer of first question. 
Many language have inbuilt or third party api to implement these calls. 
","2304","<encryption><public-key-encryption><encryption-asymmetric>","1","1","2","2014-05-14 06:59:50","4977602","1","","43681","","2014-05-14 06:59:50","2011-02-12 10:08:32",""
"4977473","How does public key encryption work?","How does public key encryption work, using a private and public/public key to decrypt/encrypt? What does it mean for the key to be 256 bits? How is it decrypted? Is there a language for writing encryption programs or is any language fine?
","In brief: 
the data is encrypted using symmetric algorithm and a random symmetric key. Then the random key is encrypted using public asymmetric key. The encrypted random key is stored together with the encrypted data. To decrypt the data one uses private asymmetric key to decrypt the stored random key, then the decrypted random key is used to decrypt the data.
256-bit is the length of the key. However, it has dramatically different meaning for symmetric and asymmetric keys. For symmetric keys 256 bits are a very strong key (you can have even longer keys with AES 384 or AES 512 where the numbers specify the key length the algorithm operates with). For asymmetric algorithms 256 bits is nothing, and comparable strength is 2048 bits. 
Public key encryption can be implemented using any language, that supports math operations and arrays. However, doing this is reinventing the wheels. There exists a number of cross-platform libraries for PKI: open-source OpenSSL for C++, BouncyCastle for Java and some more. Our company offers a supported and maintained SecureBlackbox product for .NET, Windows and Linux (MacOS X version to come soon).
Also there's a couple of books about PKI that we recommend to all our users. RSA's guide is an easy reading (but very useful) and the second book goes into deeper details. 
","2304","<encryption><public-key-encryption><encryption-asymmetric>","1","2","2","2014-05-14 06:59:50","4977602","1","","43681","","2014-05-14 06:59:50","2011-02-12 10:08:32",""
"30391404","Dictionary based bruteforce on a RSA Private Key","I have an RSA Private key for my SSL certificate. Unfortunately I forgot the passphrase.
Here is the header info:
-----BEGIN RSA PRIVATE KEY-----
Proc-Type: 4,ENCRYPTED
DEK-Info: AES-256-CBC,9A3F1B0DB81DA3C64E5BCA3534544E04

I would like to perform a dictionary attack to try to crack it. Could anyone tell me how to do it? Maybe using a tool like John The Ripper.
","I wrote small python script to do what I wanted. I put the key under the name ""ssl.key"" and the word list in a file called ""wl.lst"".
Here's the complete code:
from subprocess import PIPE, Popen
import subprocess
import sys

def cmdline(command):
    proc = subprocess.Popen(str(command), stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)
    (out, err) = proc.communicate()
    return err

def combinations(words, length):
    if length == 0:
        return []
    result = [[word] for word in words]
    while length > 1:
        new_result = []
        for combo in result:
            new_result.extend(combo + [word] for word in words)
        result = new_result[:]
        length -= 1
    return result

def main():
    words = [line.strip() for line in open('wl.lst')]
    s = b'writing RSA key\r\n';
    print(""\n"")

    res = combinations(words, 1)
    c = len(res)-1
    for idx, result in enumerate(res):
        str1 = ""openssl rsa -in ssl.key -out ssld.key -passin pass:""+result[0]
        if cmdline(str1) == s:
            print(""\nKey Found! The key is: ""+result[0])
            sys.exit()
        print(str(idx)+""/""+str(c))
    print(""\n"")

    res = combinations(words, 2)
    c = len(res)-1
    for idx, result in enumerate(res):
        str1 = ""openssl rsa -in ssl.key -out ssld.key -passin pass:""+result[0]+result[1]
        if cmdline(str1) == s:
            print(""\nKey Found! The key is: ""+result[0]+result[1])
            sys.exit()
        print(str(idx)+""/""+str(c))
    print(""\n"")

    res = combinations(words, 3)
    c = len(res)-1
    for idx, result in enumerate(res):
        str1 = ""openssl rsa -in ssl.key -out ssld.key -passin pass:""+result[0]+result[1]+result[2]
        if cmdline(str1) == s:
            print(""\nKey Found! The key is: ""+result[0]+result[1]+result[2])
            sys.exit()
        print(str(idx)+""/""+str(c))
    print(""\n"")

    res = combinations(words, 4)
    c = len(res)-1
    for idx, result in enumerate(res):
        str1 = ""openssl rsa -in ssl.key -out ssld.key -passin pass:""+result[0]+result[1]+result[2]+result[3]
        if cmdline(str1) == s:
            print(""\nKey Found! The key is: ""+result[0]+result[1]+result[2]+result[3])
            sys.exit()
        if idx%25 == 0:
            print(str(idx)+""/""+str(c))
    print(""\n"")

    res = combinations(words, 5)
    c = len(res)-1
    for idx, result in enumerate(res):
        str1 = ""openssl rsa -in ssl.key -out ssld.key -passin pass:""+result[0]+result[1]+result[2]+result[3]+result[4]
        if cmdline(str1) == s:
            print(""\nKey Found! The key is: ""+result[0]+result[1]+result[2]+result[3]+result[4])
            sys.exit()
        if idx%100 == 0:
            print(str(idx)+""/""+str(c))
    print(""\n"")

if __name__ == '__main__':
    main()

This script is cross platform. To increase or decrease the number of words used in a combination, just add/remove appropriate code blocks.
Note: Removing the display of status can considerably improve speed.
","2283","<security><ssl-certificate><public-key-encryption><dictionary-attack><john-the-ripper>","1","1","1","2015-05-25 06:02:09","30432095","0","","2677981","","2015-05-22 08:17:25","2015-05-22 08:02:38",""
"11104973","IOS: Decrypting a message with public key received from webservice","I'm new to this topic so sorry if this is a stupid question :\
I'm trying to decrypt a message with a given public key. Both the message and public key is given from the webservice. 
See the following code for how i currently do the decrypting:
 for (NSValue *refVal in keyRefs) {
    SecKeyRef p_key = NULL;
    [refVal getValue:&p_key];
    if (p_key == NULL) continue;

    size_t dataLength = encryptedData.length;
    size_t outPutLength = MAX(dataLength, SecKeyGetBlockSize(p_key));

    void *outPutBuf = malloc(outPutLength);
    if (outPutBuf) {

        //  Error handling
        OSStatus status = SecKeyDecrypt(p_key,
                                        kSecPaddingNone,
                                        encryptedData.bytes,
                                        encryptedData.length,
                                        outPutBuf,
                                        &outPutLength
                                        );


        NSLog(@""decryption result code: %ld (size: %lu)"", status, outPutLength);
        NSLog(@""FINAL decrypted text: %s"", outPutBuf);

        if (status == errSecSuccess) {
            break;
        }
    } else {

        //Error handling
    }
}

I get no errors, but the decrypted string is displayed like this (the correct output should be a JSON array): 
decryption result code: 0 size:511)  
FINAL decrypted text: ÀáÀáÀáÀáÀáÀáÀáÀáÀáÀáÀáÀáÀáÀáÀáÀáÀáÀáÀáÀáÀáÀáÀáÀáÀáÀáÀáÀáÀáÀáÀáÀáÀáÀáÀáÀáÀáÀáÀáÀáÀáÀáÀáÀáÀáÀáÀáÀáÀáÀáÀáÀáÀáÀáÀáÀáÀáÀáÀáÀáÀáÀáÀáÀáÀáÀáÀáÀáÀáÀáÀáÀáÀáÀáÀáÀáÀáÀáÀáÀáÀáÀáÀáÀáÀáÀáÀáÀáÀáÀáÀáÀáÀáÀáÀáÀáÀáÀáÀáÀáÀáÀáÀáÀáÀáÀáÀáÀáÀáÀáÀáÀáÀáÀáÀáÀáÀáÀáÀáÀáÀáÀáÀá

Is it because I use the ""SecKeyDecrypt"" with a ""public key"" instead of a ""private key""? In that case, what should i instead use for decrypting?
Thanks for any help regarding this!
EDIT: I'm using code from: http://blog.flirble.org/2011/01/05/rsa-public-key-openssl-ios/ to use the public key i get from the server (this is where ""keyRefs"" from the code snippet comes from)
","Of course, the public key is something someone else uses to encrypt data so that only someone with the private key can decrypt it.
The very definition of a public key is that you can give it to anyone.  You wouldn't want anyone to be able to decrypt anyone else's encrypted message would you?
It is impossible to tell from your code fragment where your private key is stored, or what the contents (or even class) of keyRefs is.
EDIT:  In response to above OP's comment. And clarification.
*""The public key itself is the public part of a RSA-key-pair stored on the server. The encrypted message was created on the server by first JSON-encoding the object, then encrypted with the private-key with OPENSSL_PKCS1_PADDING, then base64-encoded, and then JSON-encoded again as a part of the final message. The message and public key is stored on the client. What i want is to decrypt the message on the client by using the public key. As i said, im not very good at this subject so i might have tried to do this the wrong way""*
Thats not how public key cryptography works.  The server and client exchange public keys.  Then each of them use the other's public key to encrypt data sent to the opposite party. The receiving party always uses their own private key to decrypt the message.
If you want the server to generate an encrypted response, have the client pass their public key in the request, use that public key to encrypt the response, and then decrypt the response on the client with the client's private key.
","2260","<iphone><encryption><public-key-encryption>","0","2","1","2012-06-19 17:33:13","11105264","8","","183246","","2012-06-19 16:46:48","2012-06-19 16:07:17",""
"49574016","How to store and retrieve an RSA public key in Android keystore which is generated from server side application?","The server side application generate an RSA key pair,and as a part of key exchange process i get this public key from server and now i want to store this key inside android KeyStore. I have seen examples with generating rsa key pair using KeyGenerator and storing them in android KeyStore but i have no clue on how to store an already generated RSA public key. Any help would be highly appreciated.
","I'm not sure what parts are confusing you, or what exactly you are trying to achieve. KeyStore can only hold three types of entries: symmetric keys, private keys, and certificates. Therefore, if you want to store a public key it must be formatted into a certificate. Whether your application uses any of the other features of X509 certificates is up to you. 
It's also not clear if you want to use any old keystore on Android, or the AndroidKeyStore. The latter offers enhanced features, but whether you need them or not is dependent on your threat model. In any event, here is an example that shows how to import a google public key into the Android Keystore, how to set some properties on it, and how to use it to encrypt an AES key.
import android.security.keystore.KeyProperties;
import android.security.keystore.KeyProtection;
import android.util.Base64;
import android.util.Log;

import java.io.ByteArrayInputStream;
import java.nio.charset.StandardCharsets;
import java.security.Key;
import java.security.KeyStore;
import java.security.cert.Certificate;
import java.security.cert.CertificateFactory;
import java.security.cert.X509Certificate;

import javax.crypto.Cipher;
import javax.crypto.KeyGenerator;

public class MainActivity extends AppCompatActivity {

    private static final String THE_CERT = ""-----BEGIN CERTIFICATE-----\n"" +
            ""MIIIPjCCByagAwIBAgIIWcyJ5Cnzp3UwDQYJKoZIhvcNAQELBQAwSTELMAkGA1UE\n"" +
            ""BhMCVVMxEzARBgNVBAoTCkdvb2dsZSBJbmMxJTAjBgNVBAMTHEdvb2dsZSBJbnRl\n"" +
            ""cm5ldCBBdXRob3JpdHkgRzIwHhcNMTgwMzEzMTgzMDQ1WhcNMTgwNjA1MTgxNjAw\n"" +
            ""WjBmMQswCQYDVQQGEwJVUzETMBEGA1UECAwKQ2FsaWZvcm5pYTEWMBQGA1UEBwwN\n"" +
            ""TW91bnRhaW4gVmlldzETMBEGA1UECgwKR29vZ2xlIEluYzEVMBMGA1UEAwwMKi5n\n"" +
            ""b29nbGUuY29tMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAtXqeeS6r\n"" +
            ""sLfE5dx5asD7dngw0Dev9rhgDYM9kAuV9VxbZJ2ehZM4Nk1zGGSlqidgRWsVSNrx\n"" +
            ""qb513IyrtxDSvTTGh8ihFGNTL/H61e+cYU565RCw4siOU0IevyhynPVh8D38pe5U\n"" +
            ""bkGDmkiP7tOVozQE+3Q7l6xaIvlq9hIAb0aTWdJ6AOm3r/iMRdiUv/kxIienQ4v/\n"" +
            ""RY/h3K/llz1E+S+TAyM2+As8o2nRMGrp9/hg8zIs3CLLv2km9VS/fgTQrM5pcfDf\n"" +
            ""iX6Tgzb+6RSGHnT7GgNA3R1LXo96gnwf3zlX3SqpvV8pQf2Y3TxhLRB7J28yZFef\n"" +
            ""P6d9t2EqlHZv+wIDAQABo4IFCzCCBQcwEwYDVR0lBAwwCgYIKwYBBQUHAwEwggPh\n"" +
            ""BgNVHREEggPYMIID1IIMKi5nb29nbGUuY29tgg0qLmFuZHJvaWQuY29tghYqLmFw\n"" +
            ""cGVuZ2luZS5nb29nbGUuY29tghIqLmNsb3VkLmdvb2dsZS5jb22CFCouZGI4MzM5\n"" +
            ""NTMuZ29vZ2xlLmNuggYqLmcuY2+CDiouZ2NwLmd2dDIuY29tghYqLmdvb2dsZS1h\n"" +
            ""bmFseXRpY3MuY29tggsqLmdvb2dsZS5jYYILKi5nb29nbGUuY2yCDiouZ29vZ2xl\n"" +
            ""LmNvLmlugg4qLmdvb2dsZS5jby5qcIIOKi5nb29nbGUuY28udWuCDyouZ29vZ2xl\n"" +
            ""LmNvbS5hcoIPKi5nb29nbGUuY29tLmF1gg8qLmdvb2dsZS5jb20uYnKCDyouZ29v\n"" +
            ""Z2xlLmNvbS5jb4IPKi5nb29nbGUuY29tLm14gg8qLmdvb2dsZS5jb20udHKCDyou\n"" +
            ""Z29vZ2xlLmNvbS52boILKi5nb29nbGUuZGWCCyouZ29vZ2xlLmVzggsqLmdvb2ds\n"" +
            ""ZS5mcoILKi5nb29nbGUuaHWCCyouZ29vZ2xlLml0ggsqLmdvb2dsZS5ubIILKi5n\n"" +
            ""b29nbGUucGyCCyouZ29vZ2xlLnB0ghIqLmdvb2dsZWFkYXBpcy5jb22CDyouZ29v\n"" +
            ""Z2xlYXBpcy5jboIUKi5nb29nbGVjb21tZXJjZS5jb22CESouZ29vZ2xldmlkZW8u\n"" +
            ""Y29tggwqLmdzdGF0aWMuY26CDSouZ3N0YXRpYy5jb22CCiouZ3Z0MS5jb22CCiou\n"" +
            ""Z3Z0Mi5jb22CFCoubWV0cmljLmdzdGF0aWMuY29tggwqLnVyY2hpbi5jb22CECou\n"" +
            ""dXJsLmdvb2dsZS5jb22CFioueW91dHViZS1ub2Nvb2tpZS5jb22CDSoueW91dHVi\n"" +
            ""ZS5jb22CFioueW91dHViZWVkdWNhdGlvbi5jb22CByoueXQuYmWCCyoueXRpbWcu\n"" +
            ""Y29tghphbmRyb2lkLmNsaWVudHMuZ29vZ2xlLmNvbYILYW5kcm9pZC5jb22CG2Rl\n"" +
            ""dmVsb3Blci5hbmRyb2lkLmdvb2dsZS5jboIcZGV2ZWxvcGVycy5hbmRyb2lkLmdv\n"" +
            ""b2dsZS5jboIEZy5jb4IGZ29vLmdsghRnb29nbGUtYW5hbHl0aWNzLmNvbYIKZ29v\n"" +
            ""Z2xlLmNvbYISZ29vZ2xlY29tbWVyY2UuY29tghhzb3VyY2UuYW5kcm9pZC5nb29n\n"" +
            ""bGUuY26CCnVyY2hpbi5jb22CCnd3dy5nb28uZ2yCCHlvdXR1LmJlggt5b3V0dWJl\n"" +
            ""LmNvbYIUeW91dHViZWVkdWNhdGlvbi5jb22CBXl0LmJlMGgGCCsGAQUFBwEBBFww\n"" +
            ""WjArBggrBgEFBQcwAoYfaHR0cDovL3BraS5nb29nbGUuY29tL0dJQUcyLmNydDAr\n"" +
            ""BggrBgEFBQcwAYYfaHR0cDovL2NsaWVudHMxLmdvb2dsZS5jb20vb2NzcDAdBgNV\n"" +
            ""HQ4EFgQU2Xh9D7F5dJYCBqsWcKChI16NReswDAYDVR0TAQH/BAIwADAfBgNVHSME\n"" +
            ""GDAWgBRK3QYWG7z2aLV29YG2u2IaulqBLzAhBgNVHSAEGjAYMAwGCisGAQQB1nkC\n"" +
            ""BQEwCAYGZ4EMAQICMDAGA1UdHwQpMCcwJaAjoCGGH2h0dHA6Ly9wa2kuZ29vZ2xl\n"" +
            ""LmNvbS9HSUFHMi5jcmwwDQYJKoZIhvcNAQELBQADggEBAFxBsH2U6j4KzZbNcyN1\n"" +
            ""UGiJnMn64DIXH8wsWrFEGAq3ONRhPgKd3AnbaBUdNdrRgOhfA3RtLvvnxsKn0rX6\n"" +
            ""Oz8+p5DZxJooUgWlet9NounLDe5um6m5NqLIGefdI49Ukn6IwBtCO5DD7rZTygTa\n"" +
            ""B499H9N0ixI9wGBdlZ37tOpCxayNb08eizU1uQEhb1/oxnXf0e6trPfC8krDL0Ks\n"" +
            ""Pyf3JgB5oBTiNAfix2zme1FrpXcKehOj2urnLQRr5EpminCJ+0uHI1sqiJbcSHrU\n"" +
            ""6TPQcOzZ7/haw1yY2bpy+sB4oXUMaNJxh6e2AiCeVf4MtX9EsYEnhsfc2XS50J32\n"" +
            ""nKo=\n"" +
            ""-----END CERTIFICATE-----"";

    private void doExample() {
        try {
            X509Certificate googleCert = (X509Certificate) CertificateFactory.getInstance(""X509"").generateCertificate(new ByteArrayInputStream(THE_CERT.getBytes(StandardCharsets.UTF_8)));
            KeyStore keyStore = KeyStore.getInstance(""AndroidKeyStore"");
            KeyProtection keyProtection = new KeyProtection.Builder(KeyProperties.PURPOSE_ENCRYPT | KeyProperties.PURPOSE_VERIFY)
                    .setDigests(KeyProperties.DIGEST_SHA1, KeyProperties.DIGEST_SHA256)
                    .setRandomizedEncryptionRequired(true)
                    .setEncryptionPaddings(KeyProperties.ENCRYPTION_PADDING_RSA_OAEP)
                    .setSignaturePaddings(KeyProperties.SIGNATURE_PADDING_RSA_PSS)
                    .setUserAuthenticationRequired(false)
                    .build();
            keyStore.load(null);
            keyStore.setEntry(""googlecert"", new KeyStore.TrustedCertificateEntry(googleCert), keyProtection);
            // Now use the entry
            KeyGenerator aesKeygen = KeyGenerator.getInstance(""AES"");
            aesKeygen.init(128);
            Key aesKey = aesKeygen.generateKey();
            // Wrap key for transport
            KeyStore keyStore2 = KeyStore.getInstance(""AndroidKeyStore"");
            keyStore2.load(null);
            Certificate googleCert2 = keyStore2.getCertificate(""googlecert"");
            Cipher rsaCipher = Cipher.getInstance(""RSA/ECB/OAEPwithSHA-256andMGF1Padding"");
            rsaCipher.init(Cipher.WRAP_MODE, googleCert2);
            byte[] rsaEncrypted = rsaCipher.wrap(aesKey);
            Log.d(""crypt"", Base64.encodeToString(rsaEncrypted, Base64.DEFAULT));
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }
}

","2246","<android><rsa><public-key-encryption><android-keystore>","5","2","1","2018-03-30 21:08:07","49581469","0","","1219456","","2018-03-30 12:11:22","2018-03-30 11:58:09",""
"2403124","Is there a 8 bit block sized Public-Private key encryption algorithm?","I checked out TripleDES. It's block size is of 64 bits. 
Is there any algorithm for 8 bits block size?
Thanks
EDIT : I intend not to use this for perfect protection, but for a just-in-case situation where one who sees the code should not find the plaintext. So 8 bit is kinda okay for me.
","RSA with 8-bit key :)
Seriously though, the block-based cyphers are stateless - the ciphertext of a block depends only on the cleartext of the block, not on the previous blocks (otherwise it would be a stream cypher). A block cypher that acts on 8-bit blocks can be brute-forced easily, so there's no point.
","2244","<encryption><encryption-asymmetric><public-key-encryption>","2","2","2","2010-03-09 04:39:00","2403321","1","","1286649","","2010-03-09 04:39:00","2010-03-08 17:11:38",""
"2403124","Is there a 8 bit block sized Public-Private key encryption algorithm?","I checked out TripleDES. It's block size is of 64 bits. 
Is there any algorithm for 8 bits block size?
Thanks
EDIT : I intend not to use this for perfect protection, but for a just-in-case situation where one who sees the code should not find the plaintext. So 8 bit is kinda okay for me.
","A block cipher with 8-bit blocks means that each input block can be encrypted into 256 possible values -- which means that an attacker has a 1/256 chance of guessing the input value. It turns out to be very difficult to use such an algorithm securely. Nevertheless it is possible to define a block cipher over 8-bit blocks, and to do it ""perfectly""; just do not expect it to be generally useful.
There also are ""block-less"" ciphers, known as ""stream ciphers"" which encrypt data ""byte by byte"" (or even ""bit by bit""); most are just pseudo-random generators which produce an arbitrary amount of bytes from a key. That generated stream is just to be combined with the data to encrypt with a XOR. The traditional stream cipher is RC4; but newer and better stream ciphers have been designed.
A block cipher, by itself, is a mathematical tool. In order to actually encrypt data, the block cipher must be used properly. The keywords are chaining and padding. Chaining is about defining what actually goes into the block cipher and what to do with the output. Padding is about adding some bytes to the data, in a reversible way, so that the padded message length is appropriate for the chosen chaining mode. The traditional chaining mode is  called CBC. A newer (and arguably better) chaining mode is CTR (same link), which has the added bonus of avoiding the need for padding (CTR just turns a block cipher into a stream cipher).
As for block ciphers, you should use AES instead of TripleDES. It is faster, more secure, and the current American standard.
","2244","<encryption><encryption-asymmetric><public-key-encryption>","2","6","2","2010-03-09 04:39:00","2403321","1","","1286649","","2010-03-09 04:39:00","2010-03-08 17:11:38",""
"16621800","Java - Public-private key encryption - how to calculate private key in RSA","I worked on a code for an RSA algorithm and it returns the incorrect number, which happens to be huge. I am sure I coded everything right except for one line I was not sure about. I did not know how to solve for the private key in the RSA, and just winged it (I saw someone code 

d = e.modInverse(m);

where d is the private key, e is the public key, and m is (p-1)*(q-1). I dont understand how the modInverse method works though. long story short, how do you actually solve for the 'd' without having 2 unknowns in the same equation (I saw some equations given that said:

d = 1/(e % m);

I refrained from posting results just because the number returned is about as big as the encrypted message.
package encryptionalgorithms;

import java.math.BigInteger;
import java.util.*;

/**
 *
 * @author YAZAN Sources:
 * http://introcs.cs.princeton.edu/java/78crypto/RSA.java.html
 * http://www.math.rutgers.edu/~greenfie/gs2004/euclid.html
 * http://www.youtube.com/watch?v=ejppVhOSUmA
 */
public class EncryptionAlgorithms {

    private static BigInteger p, q, n, m, e, r, a, b, d, encrypt, decrypt, message, userN, userE, userD;
    private static BigInteger one = new BigInteger(""1"");
    private static BigInteger badData = new BigInteger(""-1"");
    private static BigInteger zero = new BigInteger(""0"");

    public static void main(String[] args) {
        PKE();
    }

    public static void PKE() { //Private Key Encryption
        Scanner input = new Scanner(System.in);
        Random rand1 = new Random(System.nanoTime());
        Random rand2 = new Random(System.nanoTime() * 16); //to create a second obscure random number

        p = BigInteger.probablePrime(1024, rand1);
        q = BigInteger.probablePrime(1024, rand2);

        n = p.multiply(q); // n = p * q
        m = (p.subtract(one)).multiply(q.subtract(one)); // m = (p-1) * (q-1)


        e = new BigInteger(""65537""); //must be a prime. GCD(e,m)=1  //65537 = 2^16 + 1  // will have to make an algorith for this later
        d = e.modInverse(m); //weakest link <============

//        System.out.println(""Public Keys:"");
//        System.out.println(""e = "" + e + "" and n = "" + n);
//        System.out.println(""Private Keys:"");
//        System.out.println(""d = "" + d + "" and n = "" + n);

        System.out.println(""please enther the message to be encrypted"");
        BigInteger mes = new BigInteger(input.next());
        BigInteger ans = encrypt(mes, n, e);
        decrypt(ans, n, d);
    }

    public static BigInteger encrypt(BigInteger num, BigInteger n, BigInteger e) {
        encrypt = num.modPow(e, n);
        System.out.println(""encrypted: "" + encrypt);
        return encrypt;
    }

    public static BigInteger decrypt(BigInteger enc, BigInteger n, BigInteger d) {
        decrypt = enc.modPow(d, n);
        System.out.println(""decrypted: "" + decrypt);
        return decrypt;
    }
}

and as a variant to the line in question, I tried:

d = one.divide(e.mod(m));

and I still got incorrect results.
","haha, you are going to kick yourself. You did everything correct, except for this teeny-weeny bug:
    decrypt(ans, n, e);

should be
    decrypt(ans, n, d);

In general, you could probably do a better job with variable names and class concepts such as instance variables. Kudos to you for posting a complete working example.
","2236","<java><rsa><biginteger><public-key-encryption>","2","5","1","2018-04-30 14:40:41","","0","","1033581","","2018-04-30 14:40:41","2013-05-18 07:28:10",""
"30689365","Objective C: Exporting Private and Public Key from Keychain","I am able to create a public-private keypair using SecKeyGeneratePair [Apple CryptoExercise]function. 
Q1. The keys in the keychain appear as  without displaying any name. How can we add a friendly name to the keys. 
Q2. However how can i export public and private key that has been generated in the usable format: 
-----BEGIN RSA PUBLIC KEY-----
MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAqCWtYiGnhAv... 
-----END RSA PUBLIC KEY-----

and:
-----BEGIN PRIVATE KEY-----
-----END PRIVATE KEY-----

Note that they can be manually exported from the keychain but how can this be achieved using objective C Apis.
Any help would be appreciable.
There is a similar question here but without any answer: iPhone: How do you export a SecKeyRef or an NSData containing public key bits to the PEM format? 
There is no need of using OpenSSL just for this purpose.
","Maybe you could refer to these documents from Apple:
Obtaining a SecKeyRef Object for Public Key Cryptography and 
Certificate, Key, and Trust Services Programmer’s Guide

Obtaining a SecKeyRef Object for Public Key Cryptography
Extracting Keys from the Keychain If you are using existing public and
  private keys from your keychain, read Certificate, Key, and Trust
  Services Programming Guide to learn how to retrieve a
  SecKeychainItemRef object for that key.
Once you have obtained a SecKeychainItemRef, you can cast it to a
  SecKeyRef for use with this API.
Importing Existing Public and Private Keys Importing and exporting
  public and private key pairs is somewhat more complicated than
  generating new keys because of the number of different key formats in
  common use.
This example describes how to import and export a key pair in PEM
  (Privacy Enhanced Mail) format.

To export keys to a CFDataRef object

Create and populate the key usage array.
Create and populate the key attributes array.
Set the key usage and attributes fields in the parameters object.
Set the external format and flag values appropriately.
Export the key with API as follows.


OSStatus oserr = SecItemExport(publickey,
    externalFormat, // See SecExternalFormat for details
    flags, // See SecItemImportExportFlags for details
    &params,
    (CFDataRef *)&pkdata); if (oserr) {
    fprintf(stderr, ""SecItemExport failed (oserr=%d)\n"", oserr);
    exit(-1); }


","2192","<objective-c><keychain><public-key-encryption><private-key>","7","3","2","2017-06-28 16:01:53","","0","0","-1","","2017-05-23 12:16:55","2015-06-07 02:03:27",""
"30689365","Objective C: Exporting Private and Public Key from Keychain","I am able to create a public-private keypair using SecKeyGeneratePair [Apple CryptoExercise]function. 
Q1. The keys in the keychain appear as  without displaying any name. How can we add a friendly name to the keys. 
Q2. However how can i export public and private key that has been generated in the usable format: 
-----BEGIN RSA PUBLIC KEY-----
MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAqCWtYiGnhAv... 
-----END RSA PUBLIC KEY-----

and:
-----BEGIN PRIVATE KEY-----
-----END PRIVATE KEY-----

Note that they can be manually exported from the keychain but how can this be achieved using objective C Apis.
Any help would be appreciable.
There is a similar question here but without any answer: iPhone: How do you export a SecKeyRef or an NSData containing public key bits to the PEM format? 
There is no need of using OpenSSL just for this purpose.
","Q1. How can we add a friendly name to the keys?
Use kSecAttrLabel key to pass label in parameters dictionary of SecKeyGeneratePair().
Q2. How to export keys to PEM format?
PEM format is the same data as the DER-encoded file but it is encoded in base64 with additional header and footer lines. Data in DER format can received using kSecFormatX509Cert parameter and kSecItemPemArmour flag when calling SecItemExport().
CFTypeRef key = NULL; // your key
CFDataRef data;
SecItemExport(key, kSecFormatX509Cert, kSecItemPemArmour, NULL, &data);
NSString* base64EncodedString = [(__bridge NSData*)data base64EncodedStringWithOptions:NSDataBase64Encoding64CharacterLineLength];
NSString* pemString = [NSString stringWithFormat:@""-----BEGIN FOO BAR KEY-----\n%@\n-----END FOO BAR KEY-----"", base64EncodedString];
NSData* pemData = [pemString dataUsingEncoding:NSUTF8StringEncoding];

","2192","<objective-c><keychain><public-key-encryption><private-key>","7","0","2","2017-06-28 16:01:53","","0","0","-1","","2017-05-23 12:16:55","2015-06-07 02:03:27",""
"11318060","Difference between genkey and selfcert","Can somebody please explain me the difference between keytool command genkey and selfcert, where I googled and I got both will generate self signed certificate, whats the difference then ?
How can I sign a CSR with a certificate using keytool command ?
Thanks in advance.
","genkey creates both a key and a cert.  selfcert replaces the cert for an existing key with a new self-cert.  Do this when your old cert has expired.  If you want to sign it with a different cert (maybe from a CA) use import.
","2182","<ssl-certificate><public-key-encryption><keytool>","4","5","2","2012-07-04 10:40:20","11318896","0","1","","","","2012-07-03 19:43:56",""
"11318060","Difference between genkey and selfcert","Can somebody please explain me the difference between keytool command genkey and selfcert, where I googled and I got both will generate self signed certificate, whats the difference then ?
How can I sign a CSR with a certificate using keytool command ?
Thanks in advance.
","I will first assume that you have generated the CSR and sent it across to a CA. The CA returns back the certificate that you can importcert back into the keystore for the same alias for which you generated the CSR. 
So in short:
keytool -v -importcert -keystore mykeystore.jks -alias mycertalias -file CASignedCert.cer -trustcacerts
","2182","<ssl-certificate><public-key-encryption><keytool>","4","0","2","2012-07-04 10:40:20","11318896","0","1","","","","2012-07-03 19:43:56",""
"19617684","Tell git to ignore my RSA public key","I have added a new public key to log into my server.
git is attempting to use the same key for bitbucket, this fails and git cannot be used as its trying to use that public key.
Is there a config option for git to tell it to ignore the public key i have in place?
I have attempted to set up multiple ssh identities, by using this https://confluence.atlassian.com/pages/viewpage.action?pageId=271943168 but its failed and git still does not work.
Rather than set up a whole new key, I just want git to ignore the key altogether.
Edit
My current ssh config looks like this
ServerAliveInterval 15
ServerAliveCountMax 3

Host bitbucket
 HostName bitbucket.org
 IdentityFile ~/.ssh/bitbucket

","I imagine the problem is the url to your repo.  It needs to be adjusted to use the alias created in your ~/.ssh/config:
git remote set-url origin git@bitbucket:path/to/repo.git

Additionally, you could make your ~/.ssh/config look like this:
ServerAliveInterval 15
ServerAliveCountMax 3

Host bitbucket
 HostName bitbucket.org
 User git
 IdentityFile ~/.ssh/bitbucket

Note the presence of the User key.  That will tell ssh that whenever you use the alias bitbucket to also use the user name git.  The above command can then become:
git remote set-url origin bitbucket:path/to/repo.git

Additionally, whenever you clone, you can do:
git clone bitbucket:path/to/repo.git

To also save you a little typing.
","2177","<git><bitbucket><public-key-encryption>","4","3","1","2013-10-27 21:29:43","19623830","2","","119737","","2013-10-27 19:27:05","2013-10-27 11:44:32",""
"40243857","How to encrypt large file with RSA?","Code https://play.golang.org/p/CUEqjsJq5c 
Error:
panic: crypto/rsa: message too long for RSA public key size

goroutine 1 [running]:
panic(0x4a6d80, 0xc420010420)
    /usr/local/go/src/runtime/panic.go:500 +0x1a1
main.main()
    /tmp/sample.go:28 +0xfa

File size 811 byte (for test encrypt self source file). I want encrypt some bigger files, 1..500 mb. Can I do it with RSA or need use some other methods?
","RSA can only encrypt data smaller than the key length.
The answer is to encrypt the data with a symmetric algorithm such as AES which is designed to encrypt small and large data.
If an RSA public/private key pair are required encrypt the symmetric (AES) key with RSA. This is referred to as hybrid encryption and in essence is hoe HTTPS encrypts data.
But it is may not necessary to RSA encrypt the symmetric key unless a public/private key pair are required. In the general case one just uses symmetric (AES) and that key. What is the use case for a public/private key pair?
","2174","<encryption><go><rsa><public-key-encryption><encryption-asymmetric>","2","4","1","2016-10-25 15:51:43","40244430","3","1","","","","2016-10-25 15:24:42",""
"18852309","Java Card ECKey with NIST P256 Curve. How to encode a negative coefficient?","I try to use an ECKey (http://www.win.tue.nl/pinpasjc/docs/apis/jc222/javacard/security/ECKey.html) with the P-256 curve defined by NIST on a Java Card:
Curve P-256

p = 115792089210356248762697446949407573530086143415290314195533631308867097853951
r = 115792089210356248762697446949407573529996955224135760342422259061068512044369
s = c49d3608 86e70493 6a6678e1 139d26b7 819f7e90
c = 7efba166 2985be94 03cb055c 75d4f7e0 ce8d84a9 c5114abc af317768 0104fa0d
b = 5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b
Gx = 6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296
Gy = 4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5

with y²= x³ -3x + b (mod p)
As far as I understand it I use

p for setFieldFP(), prime p corresponding to the field GF(p)
r for setR(), order of the fixed point G of the curve,
b for setB(), second coefficient of the curve,
Gx and Gy for setG(), fixed point of the curve (after encoding them as ANSI X9.62),
cofactor of the order of the fixed point G is 1, so setK(1)

The coefficient A is -3 (according to the definition of the curve). But how do I have to encode -3 (as a byte[]), so that I can set it with setA()?
","I guess it is easiest to look at existing libraries. P-256 is identical to secp256r1, and can be found in the Bouncy Castle source code. Alternatively, NIST has also published a document called Mathematical routines for the NIST prime elliptic curves which contain the parameters in hexadecimals. Thanks go to this excelent answer on the OTN discussion forums.
Code paste from Bouncy Castle, please respect the Bouncy Castle license.
/*
 * secp256r1
 */
static X9ECParametersHolder secp256r1 = new X9ECParametersHolder()
{
    protected X9ECParameters createParameters()
    {
        // p = 2^224 (2^32 - 1) + 2^192 + 2^96 - 1
        BigInteger p = fromHex(""FFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF"");
        BigInteger a = fromHex(""FFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFC"");
        BigInteger b = fromHex(""5AC635D8AA3A93E7B3EBBD55769886BC651D06B0CC53B0F63BCE3C3E27D2604B"");
        byte[] S = Hex.decode(""C49D360886E704936A6678E1139D26B7819F7E90"");
        BigInteger n = fromHex(""FFFFFFFF00000000FFFFFFFFFFFFFFFFBCE6FAADA7179E84F3B9CAC2FC632551"");
        BigInteger h = BigInteger.valueOf(1);

        ECCurve curve = new ECCurve.Fp(p, a, b);
        //ECPoint G = curve.decodePoint(Hex.decode(""03""
        //+ ""6B17D1F2E12C4247F8BCE6E563A440F277037D812DEB33A0F4A13945D898C296""));
        ECPoint G = curve.decodePoint(Hex.decode(""04""
            + ""6B17D1F2E12C4247F8BCE6E563A440F277037D812DEB33A0F4A13945D898C296""
            + ""4FE342E2FE1A7F9B8EE7EB4A7C0F9E162BCE33576B315ECECBB6406837BF51F5""));

        return new X9ECParameters(curve, G, n, h, S);
    }
};

Note that n in this code is the order and h (of course) the co-factor. The seed S should not be required.
","2174","<public-key-encryption><smartcard><javacard>","0","2","2","2013-11-02 15:10:36","18860828","1","","","","","2013-09-17 14:14:16",""
"18852309","Java Card ECKey with NIST P256 Curve. How to encode a negative coefficient?","I try to use an ECKey (http://www.win.tue.nl/pinpasjc/docs/apis/jc222/javacard/security/ECKey.html) with the P-256 curve defined by NIST on a Java Card:
Curve P-256

p = 115792089210356248762697446949407573530086143415290314195533631308867097853951
r = 115792089210356248762697446949407573529996955224135760342422259061068512044369
s = c49d3608 86e70493 6a6678e1 139d26b7 819f7e90
c = 7efba166 2985be94 03cb055c 75d4f7e0 ce8d84a9 c5114abc af317768 0104fa0d
b = 5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b
Gx = 6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296
Gy = 4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5

with y²= x³ -3x + b (mod p)
As far as I understand it I use

p for setFieldFP(), prime p corresponding to the field GF(p)
r for setR(), order of the fixed point G of the curve,
b for setB(), second coefficient of the curve,
Gx and Gy for setG(), fixed point of the curve (after encoding them as ANSI X9.62),
cofactor of the order of the fixed point G is 1, so setK(1)

The coefficient A is -3 (according to the definition of the curve). But how do I have to encode -3 (as a byte[]), so that I can set it with setA()?
","Since calculation is done modulo p, you are free to add p whereever you please. 
a = -3 -> a= -3 + p -> a = p - 3
","2174","<public-key-encryption><smartcard><javacard>","0","3","2","2013-11-02 15:10:36","18860828","1","","","","","2013-09-17 14:14:16",""
"8660158","RSA encryption in .Net using the public key from SQL Server?","I would like to perform some encryption on client using the asymmetric key stored and generated in SQL Server.
I can get the public key from the DMV using the following query:
SELECT public_key FROM sys.asymmetric_keys WHERE name = 'KeyName'

This returns the following value:

0x06020000002400005253413100020000010001008B656455D4C56392C45EEC3563203635F5F42DDA57069E7A880BF0AF055174A2A165DED75BA4E73E2A09BCBFAA50042B4E27354C1FEB3361F81C381AFF59A6A7

How can I use this binary value as public key for RSA_512 encryption in .Net? I have searched through similar questions here but failed to find any appropriate solution: I either need the key in XML form or at least to know .Modulus and .Exponent of the public key. Can I get it from these binary sequence?

EDIT:
Here is my code
   SqlCommand cmd = new SqlCommand(string.Format(""SELECT dbo.GetKey(@KeyName)"", conn);
   cmd.Parameters.AddWithValue(""@KeyName"", ConfigurationManager.AppSettings.Get(""PublicKeyName""));
   PublicKey = (byte[]) cmd.ExecuteScalar();

   var rsa=new System.Security.Cryptography.RSACryptoServiceProvider(Convert.ToInt32(ConfigurationManager.AppSettings.Get(""KeyLength"")));
   rsa.ImportCspBlob(PublicKey);
   EncryptedData = rsa.Encrypt(Data,false);

I get the exception ""Key not valid"" in the last line.
","Security.Cryptography.RSACryptoServiceProvider rsa=new Security.Cryptography.RSACryptoServiceProvider(512);
rsa.ImportCspBlob(keyblob)

with keyblob being a byte[] representation of the above key.
This comes directly from my shell:
eugen@lucidhome:~$ csharp
Mono C# Shell, type ""help;"" for help

Enter statements below.
csharp> using System.Security.Cryptography;                                                                                                                                                          
csharp> String keystring=""06020000002400005253413100020000010001008B656455D4C56392C45EEC3563203635F5F42DDA57069E7A880BF0AF055174A2A165DED75BA4E73E2A09BCBFAA50042B4E27354C1FEB3361F81C381AFF59A6A7""; 
csharp> byte[] keybytes=new byte[keystring.Length/2];
csharp> for (int i=0;i<keystring.Length/2;i++) keybytes[i]=Convert.ToByte(keystring.Substring(2*i,2),16);
csharp> RSACryptoServiceProvider rsa=new RSACryptoServiceProvider(512);
csharp> rsa.ImportCspBlob(keybytes);
csharp> byte[] cleartext=new byte[]{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};
csharp> byte[] ciphertext=rsa.Encrypt(cleartext,false);
csharp> ciphertext;
{ 62, 80, 66, 63, 4, 132, 69, 249, 97, 164, 131, 34, 89, 117, 173, 177, 222, 77, 23, 177, 127, 236, 116, 121, 25, 63, 59, 159, 182, 235, 190, 44, 24, 101, 127, 61, 185, 72, 93, 69, 66, 248, 64, 249, 5, 183, 214, 189, 252, 75, 22, 123, 159, 50, 13, 90, 137, 187, 180, 181, 252, 174, 98, 247 }
csharp> keybytes;
{ 6, 2, 0, 0, 0, 36, 0, 0, 82, 83, 65, 49, 0, 2, 0, 0, 1, 0, 1, 0, 139, 101, 100, 85, 212, 197, 99, 146, 196, 94, 236, 53, 99, 32, 54, 53, 245, 244, 45, 218, 87, 6, 158, 122, 136, 11, 240, 175, 5, 81, 116, 162, 161, 101, 222, 215, 91, 164, 231, 62, 42, 9, 188, 191, 170, 80, 4, 43, 78, 39, 53, 76, 31, 235, 51, 97, 248, 28, 56, 26, 255, 89, 166, 167 }
csharp>  

","2156","<sql-server><rsa><public-key-encryption>","0","1","1","2011-12-29 20:12:12","8660266","0","","-1","","2017-05-23 12:27:39","2011-12-28 19:08:40",""
"11728697","Enable Passwordless Authentication with ssh","How can I enable password less authentication with SSH. 
This is what I have when I was looking for /.ssh folder.
bash-3.00$ cd ~/.ssh
bash-3.00$ pwd
/home/uname/.ssh
bash-3.00$ ls -lt
total 2
-rw-r--r--   1 uname   gid-uname     489 Jul 26 18:55 known_hosts

And I don't know what next I have to do here? I need to change the permission of known_hosts folder? Or something else?
","Add your public key to a file called authorized_keys.  
Make sure that no group and other permissions are not set.
","2139","<linux><authentication><ssh><public-key-encryption>","0","1","4","2013-08-28 05:11:43","11729247","0","","819916","","2012-07-30 20:31:25","2012-07-30 19:59:07","2015-08-28 19:38:56"
"11728697","Enable Passwordless Authentication with ssh","How can I enable password less authentication with SSH. 
This is what I have when I was looking for /.ssh folder.
bash-3.00$ cd ~/.ssh
bash-3.00$ pwd
/home/uname/.ssh
bash-3.00$ ls -lt
total 2
-rw-r--r--   1 uname   gid-uname     489 Jul 26 18:55 known_hosts

And I don't know what next I have to do here? I need to change the permission of known_hosts folder? Or something else?
","http://stromberg.dnsalias.org/~strombrg/ssh-keys.html
HTH
","2139","<linux><authentication><ssh><public-key-encryption>","0","0","4","2013-08-28 05:11:43","11729247","0","","819916","","2012-07-30 20:31:25","2012-07-30 19:59:07","2015-08-28 19:38:56"
"11728697","Enable Passwordless Authentication with ssh","How can I enable password less authentication with SSH. 
This is what I have when I was looking for /.ssh folder.
bash-3.00$ cd ~/.ssh
bash-3.00$ pwd
/home/uname/.ssh
bash-3.00$ ls -lt
total 2
-rw-r--r--   1 uname   gid-uname     489 Jul 26 18:55 known_hosts

And I don't know what next I have to do here? I need to change the permission of known_hosts folder? Or something else?
","
Generate your keys using ssh-keygen
Copy over your SSH identity to the host (to which you need passwordless login) using ssh-copy-id.

man ssh-keygen and man ssh-copy-id on your system for help.
","2139","<linux><authentication><ssh><public-key-encryption>","0","0","4","2013-08-28 05:11:43","11729247","0","","819916","","2012-07-30 20:31:25","2012-07-30 19:59:07","2015-08-28 19:38:56"
"11728697","Enable Passwordless Authentication with ssh","How can I enable password less authentication with SSH. 
This is what I have when I was looking for /.ssh folder.
bash-3.00$ cd ~/.ssh
bash-3.00$ pwd
/home/uname/.ssh
bash-3.00$ ls -lt
total 2
-rw-r--r--   1 uname   gid-uname     489 Jul 26 18:55 known_hosts

And I don't know what next I have to do here? I need to change the permission of known_hosts folder? Or something else?
","To enable passwordless ssh between remote and local machine, you have to perform these steps on your local machine :-
1st Step> root@localmachine:~> ssh-keygen -t rsa
Note - Considering that .ssh dir is already present in remote machine if not, then do this (ssh root@remotemachine mkdir -p .ssh)
2nd Step> cat .ssh/id_rsa.pub | ssh root@remotemachine 'cat >> .ssh/authorized_keys'
3rd Step> root@localmachine:~> ssh root@remotemachine
","2139","<linux><authentication><ssh><public-key-encryption>","0","2","4","2013-08-28 05:11:43","11729247","0","","819916","","2012-07-30 20:31:25","2012-07-30 19:59:07","2015-08-28 19:38:56"
"28484495","OpenSSL public key decrypts file?","My understanding is that the public key can be used for encryption and the private for decryption and that the public key cannot decrypt the file encrypted by the same public key.  Did I misunderstand or am I doing something incorrectly?
1) generate a key
openssl genrsa -out ./private.pem 2048
2) generate a public key
openssl rsa -in ./private.pem -pubout > ./public.pem
3) encrypt a small text file
openssl enc -in ./in.txt  -out ./out.enc  -e -aes256 -k ./public.pem
4) decrypt file using PUBLIC key
openssl enc -in ./out.enc  -out ./out.txt  -d -aes256 -k ./public.pem
The last step can decrypt the ""out.enc"" file.  Not what I wanted or expected.
","No. That's wrong. The two keys (public and private) can be used for BOTH encrypting and decrypting. The kicker is that you cannot reverse the operation with the same key.
e.g.
encrypt(doc, publickey) -> decrypt(crypteddoc, publickey)  // fails
encrypt(doc, privatekey) -> decrypt(crypteddoc, privatekey) // fails

encrypt(doc, publickey) -> decrypt(crypteddoc,privatekey) // works
encrypt(doc, privatekey) -> decrypt(crypteddoc, publickey) // works

Technically, it doesn't matter which key you share and make public, as long as once you have made one of the keys public, you cannot ever share the other, private, key.
","2135","<openssl><public-key-encryption><encryption-asymmetric>","0","0","2","2015-02-19 19:09:31","","2","","3661593","","2015-02-13 02:53:09","2015-02-12 17:57:58",""
"28484495","OpenSSL public key decrypts file?","My understanding is that the public key can be used for encryption and the private for decryption and that the public key cannot decrypt the file encrypted by the same public key.  Did I misunderstand or am I doing something incorrectly?
1) generate a key
openssl genrsa -out ./private.pem 2048
2) generate a public key
openssl rsa -in ./private.pem -pubout > ./public.pem
3) encrypt a small text file
openssl enc -in ./in.txt  -out ./out.enc  -e -aes256 -k ./public.pem
4) decrypt file using PUBLIC key
openssl enc -in ./out.enc  -out ./out.txt  -d -aes256 -k ./public.pem
The last step can decrypt the ""out.enc"" file.  Not what I wanted or expected.
","Although, the question is really old, yet I must state that TS got it right: the public key cannot decrypt the file encrypted by the same public key. Only the corresponding private key can.
The real problem is that AES is not the public-key algorithm. It uses the same key for both encryption and decryption, and the key can be an arbitrary byte sequence.
","2135","<openssl><public-key-encryption><encryption-asymmetric>","0","1","2","2015-02-19 19:09:31","","2","","3661593","","2015-02-13 02:53:09","2015-02-12 17:57:58",""
"16628102","PHP OpenSSL - openssl_private_encrypt crashes webpage","This has been reported at bugs.php.net. If I replace libeay32.dll and ssleay32.dll in xampp/apache/bin with the same files in xampp/php/ then it works but I CANNOT use SSL 
I need to use SSL, has anyone been able to resolve this?

I am using OpenSSL library in PHP(5.4.7) on XAMPP(1.8.1) for encryption, decryption, etc. I am also using SSL on localhost.
I am able to create the private-public key pair using openssl_pkey_new() method and generate the certificate as well.
But when I try to access my root certificate (create using the above function) the webpage crashes:
$root_private_key = openssl_get_privatekey(file_get_contents($path), $pass);
echo ""KEY: "" . $root_private_key; // KEY: Resource id #11
openssl_private_encrypt($plaintext, $encrypted_data, $root_private_key);

I even tried using phpseclib library but that also does the same thing.
I have also tried to set ini_set('max_execution_time', 0);

I checked PHP log and it is empty and found the following in Apache logs: 
[mpm_winnt:notice] [pid 3312:tid 484] AH00428: Parent: child process exited with status 3221225477 -- Restarting.
[ssl:warn] [pid 3312:tid 484] AH01873: Init: Session Cache is not configured [hint: SSLSessionCache]
[mpm_winnt:notice] [pid 3312:tid 484] AH00455: Apache/2.4.3 (Win32) OpenSSL/1.0.1c PHP/5.4.7 configured -- resuming normal operations
[mpm_winnt:notice] [pid 3312:tid 484] AH00456: Server built: Aug 18 2012 12:41:37
[core:notice] [pid 3312:tid 484] AH00094: Command line: 'apache\\bin\\httpd.exe -d C:/xampp/apache'
[mpm_winnt:notice] [pid 3312:tid 484] AH00418: Parent: Created child process 1520
AH00548: NameVirtualHost has no effect and will be removed in the next release C:/xampp/apache/conf/extra/httpd-vhosts.conf:19
[ssl:warn] [pid 1520:tid 496] AH01873: Init: Session Cache is not configured [hint: SSLSessionCache]
[mpm_winnt:notice] [pid 1520:tid 496] AH00354: Child: Starting 150 worker threads.


I have tried following but none of that helps:
PHP openssl_public_encrypt causing Page Timeout/Connection Reset?
php/timeout/connection to server reset?
Apache server (xampp) crashes when using openssl function
PHP dies unexpectedly without error
I would appreciate any help/suggestion.
","This has been reported at bugs.php.net. If I replace the following files in xampp/apache/bin with the same files in xampp/php/ then it works:

libeay32.dll 
ssleay32.dll

BUT, SSL cannot be used otherwise Apache gives error when starting up.
","2110","<php><openssl><xampp><public-key-encryption><phpseclib>","1","1","3","2013-05-30 14:40:44","16631010","6","1","-1","","2017-05-23 12:29:57","2013-05-18 19:21:04",""
"16628102","PHP OpenSSL - openssl_private_encrypt crashes webpage","This has been reported at bugs.php.net. If I replace libeay32.dll and ssleay32.dll in xampp/apache/bin with the same files in xampp/php/ then it works but I CANNOT use SSL 
I need to use SSL, has anyone been able to resolve this?

I am using OpenSSL library in PHP(5.4.7) on XAMPP(1.8.1) for encryption, decryption, etc. I am also using SSL on localhost.
I am able to create the private-public key pair using openssl_pkey_new() method and generate the certificate as well.
But when I try to access my root certificate (create using the above function) the webpage crashes:
$root_private_key = openssl_get_privatekey(file_get_contents($path), $pass);
echo ""KEY: "" . $root_private_key; // KEY: Resource id #11
openssl_private_encrypt($plaintext, $encrypted_data, $root_private_key);

I even tried using phpseclib library but that also does the same thing.
I have also tried to set ini_set('max_execution_time', 0);

I checked PHP log and it is empty and found the following in Apache logs: 
[mpm_winnt:notice] [pid 3312:tid 484] AH00428: Parent: child process exited with status 3221225477 -- Restarting.
[ssl:warn] [pid 3312:tid 484] AH01873: Init: Session Cache is not configured [hint: SSLSessionCache]
[mpm_winnt:notice] [pid 3312:tid 484] AH00455: Apache/2.4.3 (Win32) OpenSSL/1.0.1c PHP/5.4.7 configured -- resuming normal operations
[mpm_winnt:notice] [pid 3312:tid 484] AH00456: Server built: Aug 18 2012 12:41:37
[core:notice] [pid 3312:tid 484] AH00094: Command line: 'apache\\bin\\httpd.exe -d C:/xampp/apache'
[mpm_winnt:notice] [pid 3312:tid 484] AH00418: Parent: Created child process 1520
AH00548: NameVirtualHost has no effect and will be removed in the next release C:/xampp/apache/conf/extra/httpd-vhosts.conf:19
[ssl:warn] [pid 1520:tid 496] AH01873: Init: Session Cache is not configured [hint: SSLSessionCache]
[mpm_winnt:notice] [pid 1520:tid 496] AH00354: Child: Starting 150 worker threads.


I have tried following but none of that helps:
PHP openssl_public_encrypt causing Page Timeout/Connection Reset?
php/timeout/connection to server reset?
Apache server (xampp) crashes when using openssl function
PHP dies unexpectedly without error
I would appreciate any help/suggestion.
","phpseclib uses OpenSSL, if available, for RSA private key generation. To disable this behavior do this after Crypt/RSA.php has been included:
define('CRYPT_RSA_MODE', CRYPT_RSA_MODE_INTERNAL);

How big, btw, is the key you're trying to generate?
","2110","<php><openssl><xampp><public-key-encryption><phpseclib>","1","0","3","2013-05-30 14:40:44","16631010","6","1","-1","","2017-05-23 12:29:57","2013-05-18 19:21:04",""
"16628102","PHP OpenSSL - openssl_private_encrypt crashes webpage","This has been reported at bugs.php.net. If I replace libeay32.dll and ssleay32.dll in xampp/apache/bin with the same files in xampp/php/ then it works but I CANNOT use SSL 
I need to use SSL, has anyone been able to resolve this?

I am using OpenSSL library in PHP(5.4.7) on XAMPP(1.8.1) for encryption, decryption, etc. I am also using SSL on localhost.
I am able to create the private-public key pair using openssl_pkey_new() method and generate the certificate as well.
But when I try to access my root certificate (create using the above function) the webpage crashes:
$root_private_key = openssl_get_privatekey(file_get_contents($path), $pass);
echo ""KEY: "" . $root_private_key; // KEY: Resource id #11
openssl_private_encrypt($plaintext, $encrypted_data, $root_private_key);

I even tried using phpseclib library but that also does the same thing.
I have also tried to set ini_set('max_execution_time', 0);

I checked PHP log and it is empty and found the following in Apache logs: 
[mpm_winnt:notice] [pid 3312:tid 484] AH00428: Parent: child process exited with status 3221225477 -- Restarting.
[ssl:warn] [pid 3312:tid 484] AH01873: Init: Session Cache is not configured [hint: SSLSessionCache]
[mpm_winnt:notice] [pid 3312:tid 484] AH00455: Apache/2.4.3 (Win32) OpenSSL/1.0.1c PHP/5.4.7 configured -- resuming normal operations
[mpm_winnt:notice] [pid 3312:tid 484] AH00456: Server built: Aug 18 2012 12:41:37
[core:notice] [pid 3312:tid 484] AH00094: Command line: 'apache\\bin\\httpd.exe -d C:/xampp/apache'
[mpm_winnt:notice] [pid 3312:tid 484] AH00418: Parent: Created child process 1520
AH00548: NameVirtualHost has no effect and will be removed in the next release C:/xampp/apache/conf/extra/httpd-vhosts.conf:19
[ssl:warn] [pid 1520:tid 496] AH01873: Init: Session Cache is not configured [hint: SSLSessionCache]
[mpm_winnt:notice] [pid 1520:tid 496] AH00354: Child: Starting 150 worker threads.


I have tried following but none of that helps:
PHP openssl_public_encrypt causing Page Timeout/Connection Reset?
php/timeout/connection to server reset?
Apache server (xampp) crashes when using openssl function
PHP dies unexpectedly without error
I would appreciate any help/suggestion.
","For those of you still having trouble:
Until a fully packaged official build of xampp is released with the next version of apache which should fix this bug, I have successfully fixed this issue by changing my version of Apache to one found here: http://www.apachelounge.com/download/ This fixes the bug but still allows me to use OpenSSL
The second Apache 2.2.4 download on this page was built specifically to fix this bug. For me it was easy as:

Stopping Apache
Renaming xampp\apache to xampp\apacheold just in case it broke. 
Copied in the Apache24 to xampp\Apache24 from the downloaded zip
Renamed it to apache
Copied the .bat files from the xampp\apacheold folder into the new xampp\apache folder.
Replaced the xampp\apache\conf folder with the one from xampp\apacheold
Start Apache again

I Hope this helps somebody.
","2110","<php><openssl><xampp><public-key-encryption><phpseclib>","1","2","3","2013-05-30 14:40:44","16631010","6","1","-1","","2017-05-23 12:29:57","2013-05-18 19:21:04",""
"45384379","how to import public key into RSA for encrypt in .net core","I have publicKey.key, I want to import that to rsa encrypt
this is my code :
using (RSA rsa = RSA.Create())
{
    var key = Encoding.UTF8.GetBytes(""012345678901234567890"");

    byte[] publicKey = File.ReadAllBytes(""text/publicKey.key"");

    var result = rsa.Encrypt(key, RSAEncryptionPadding.Pkcs1);
}

",".NET Core (or Framework) does not have a built-in way to load bare key files.  
You have a couple of options:

Wrap the public key up into a certificate and use cert.GetRSAPublicKey()
Use openssl rsa -in text/publicKey.key -text -noout to copy all of the hex values for each of the fields, and import them directly into an RSAParameters structure (then call rsa.ImportParameters(rsaParams))
Study ITU-T X.680 (ASN.1), ITU-T X.690 (DER), PKCS#1 (RSA), and RFC 7486 (if you want to read PEM-encoded keys) to read the key file, then parse it into an RSAParameters structure, and use rsa.ImportParameters(rsaParams).

It's worth noting that this has been identified as a gap in .NET and is currently marked for .NET Core 2.1 (though it's always possible it doesn't make it): https://github.com/dotnet/corefx/issues/20414.
","2106","<.net-core><rsa><public-key-encryption><asp.net-core-webapi><asp.net-core-1.1>","2","4","1","2017-08-03 15:31:54","","0","","589259","","2017-07-31 22:28:14","2017-07-29 01:28:38",""
"7100553","Generating key pair directly on Smartcard?","This video claims to be able to generate a key pair directly on the Smartcard so the private key never leaves the card. Is this operation common to all smartcards, or do only select smartcards support this?
","A smartcard is just a chip on a card, so you probably want to ask about cryptographic smart cards.
I have never worked with cryptographic smart cards but that sounds like a completely reasonable functionality of such smartcards since they are intended usually for authentication and encryption which usally use private keys for that.
The advantage of cryptographic smart cards usually lies in that, that the private key is stored in it. That is intended to prevent the compromise of the keys because even if the computer, that reads the smartcard, is compromised the smartcard is safe and the private key is safe too.
","2089","<public-key-encryption><smartcard>","0","1","3","2014-06-29 16:39:24","7100671","0","","815724","","2011-08-18 06:08:16","2011-08-17 23:00:47",""
"7100553","Generating key pair directly on Smartcard?","This video claims to be able to generate a key pair directly on the Smartcard so the private key never leaves the card. Is this operation common to all smartcards, or do only select smartcards support this?
","Most cryptographic smart cards are able to generate keys in the card in addition to storing externally generated plaintext keys, that's the main purpose of cryptographic smart cards. 
Some cards don't allow importing plaintext keys, some allow exporting keys generated on the card, some card can do import/export of wrapped (encrypted with another key) private keys, so that the actual private key would never be in clear in an untrusted environment.
Have a look at http://www.opensc-project.org for a further pointers on cards and software.
","2089","<public-key-encryption><smartcard>","0","2","3","2014-06-29 16:39:24","7100671","0","","815724","","2011-08-18 06:08:16","2011-08-17 23:00:47",""
"7100553","Generating key pair directly on Smartcard?","This video claims to be able to generate a key pair directly on the Smartcard so the private key never leaves the card. Is this operation common to all smartcards, or do only select smartcards support this?
","this is called on-board key generation, indeed the card generates itself the keys and the private key will never leave the smartcard, besides of the key marked as not exportable, the card itself is unable to export it, it has no function, no knowledge how to do this. 
many smartcards ( of course with a cryptoprocessor ) support this but not all and anyway this is  an expensive feature. Most smartcard vendors sell such cards.
","2089","<public-key-encryption><smartcard>","0","0","3","2014-06-29 16:39:24","7100671","0","","815724","","2011-08-18 06:08:16","2011-08-17 23:00:47",""
"37201479","HSM Error | Private key must be instance of RSAPrivate(Crt)Key or have PKCS#8","Error received while decrypting data when private key is retrieved from HSM.
I have added sunpkcs11 provider in java.security.
Hence, NOT adding provider via code.
Text gets encrypted successfully.
However, while decrypting the encrypted text, I am getting below error at below line:
cipher.init(Cipher.DECRYPT_MODE, privateKey);

What is that i am missing here?
Error:
    Caused by: java.security.InvalidKeyException: Private key must be instance of RSAPrivate(Crt)Key or have PKCS#8 encoding
        at sun.security.pkcs11.P11RSAKeyFactory.implTranslatePrivateKey(P11RSAKeyFactory.java:101) [sunpkcs11.jar:1.7.0_85]
        at sun.security.pkcs11.P11KeyFactory.engineTranslateKey(P11KeyFactory.java:132) [sunpkcs11.jar:1.7.0_85]
        at sun.security.pkcs11.P11KeyFactory.convertKey(P11KeyFactory.java:65) [sunpkcs11.jar:1.7.0_85]
        at sun.security.pkcs11.P11RSACipher.implInit(P11RSACipher.java:199) [sunpkcs11.jar:1.7.0_85]
        at sun.security.pkcs11.P11RSACipher.engineInit(P11RSACipher.java:168) [sunpkcs11.jar:1.7.0_85]
        at javax.crypto.Cipher.init(Cipher.java:1068) [jce.jar:1.7.0_85]
        at javax.crypto.Cipher.init(Cipher.java:1012) [jce.jar:1.7.0_85]enter code here

Below is the code:
import java.io.ByteArrayOutputStream;
import java.security.KeyStore;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.cert.Certificate;

import javax.crypto.Cipher;
import javax.xml.bind.DatatypeConverter;

import sun.security.pkcs11.SunPKCS11;

public class App {

    public static void main(String[] args) throws Exception {

        try {
            String passphrase = ""mysecretkey"";
            SunPKCS11 provider = new SunPKCS11(""/home/user/pkcs11.cfg"");
            KeyStore keystore = KeyStore.getInstance(""PKCS11"", provider);
            keystore.load(null, passphrase.toCharArray());
            String textToEncrypt = ""this is my text"";
            Certificate cert = keystore.getCertificate(""my-SHA1WITHRSA-2048-bits-key"");
            PublicKey publicKey = cert.getPublicKey();
            Cipher cipher = Cipher.getInstance(""RSA/ECB/PKCS1Padding"", provider);
            cipher.init(Cipher.ENCRYPT_MODE, publicKey);
            String encryptedData = DatatypeConverter.printBase64Binary(cipher.doFinal(textToEncrypt.getBytes()));

            PrivateKey privateKey = (PrivateKey) keystore.getKey(""my-SHA1WITHRSA-2048-bits-key"",
                    passphrase.toCharArray());
            cipher.init(Cipher.DECRYPT_MODE, privateKey);
            byte[] decodedEncryptedData = DatatypeConverter.parseBase64Binary(encryptedData);
            ByteArrayOutputStream stream = new ByteArrayOutputStream();
            int blocks = decodedEncryptedData.length / 256;
            int offset = 0;
            for (int blockIndex = 0; blockIndex < blocks; blockIndex++) {
                byte[] nextBlock = getNextBlock(decodedEncryptedData, offset);
                stream.write(cipher.doFinal(nextBlock));
                offset += 256;
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    private static byte[] getNextBlock(byte[] cipherText, int offset) {
        byte[] block = new byte[256];
        System.arraycopy(cipherText, offset, block, 0, 256);
        return block;
    }

}

","How I resolved:
Root cause of this issue was that sunpkcs11 provider was getting loaded both statically and dynamically.
i.e.
in java.security, provider entry along with cfg path was already added.
Also, in code, provider was initialized again with the cfg file.
This was causing the issue.
After changing:
SunPKCS11 provider = new SunPKCS11(""/home/user/pkcs11.cfg"");

TO:
SunPKCS11 sunPKCS11Provider = (SunPKCS11) Security.getProvider(""SunPKCS11"");

issue got resolved.
","2065","<java><encryption><rsa><public-key-encryption><hsm>","2","5","2","2018-07-03 11:18:58","","0","6","1816580","","2016-05-13 17:10:38","2016-05-13 04:49:30",""
"37201479","HSM Error | Private key must be instance of RSAPrivate(Crt)Key or have PKCS#8","Error received while decrypting data when private key is retrieved from HSM.
I have added sunpkcs11 provider in java.security.
Hence, NOT adding provider via code.
Text gets encrypted successfully.
However, while decrypting the encrypted text, I am getting below error at below line:
cipher.init(Cipher.DECRYPT_MODE, privateKey);

What is that i am missing here?
Error:
    Caused by: java.security.InvalidKeyException: Private key must be instance of RSAPrivate(Crt)Key or have PKCS#8 encoding
        at sun.security.pkcs11.P11RSAKeyFactory.implTranslatePrivateKey(P11RSAKeyFactory.java:101) [sunpkcs11.jar:1.7.0_85]
        at sun.security.pkcs11.P11KeyFactory.engineTranslateKey(P11KeyFactory.java:132) [sunpkcs11.jar:1.7.0_85]
        at sun.security.pkcs11.P11KeyFactory.convertKey(P11KeyFactory.java:65) [sunpkcs11.jar:1.7.0_85]
        at sun.security.pkcs11.P11RSACipher.implInit(P11RSACipher.java:199) [sunpkcs11.jar:1.7.0_85]
        at sun.security.pkcs11.P11RSACipher.engineInit(P11RSACipher.java:168) [sunpkcs11.jar:1.7.0_85]
        at javax.crypto.Cipher.init(Cipher.java:1068) [jce.jar:1.7.0_85]
        at javax.crypto.Cipher.init(Cipher.java:1012) [jce.jar:1.7.0_85]enter code here

Below is the code:
import java.io.ByteArrayOutputStream;
import java.security.KeyStore;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.cert.Certificate;

import javax.crypto.Cipher;
import javax.xml.bind.DatatypeConverter;

import sun.security.pkcs11.SunPKCS11;

public class App {

    public static void main(String[] args) throws Exception {

        try {
            String passphrase = ""mysecretkey"";
            SunPKCS11 provider = new SunPKCS11(""/home/user/pkcs11.cfg"");
            KeyStore keystore = KeyStore.getInstance(""PKCS11"", provider);
            keystore.load(null, passphrase.toCharArray());
            String textToEncrypt = ""this is my text"";
            Certificate cert = keystore.getCertificate(""my-SHA1WITHRSA-2048-bits-key"");
            PublicKey publicKey = cert.getPublicKey();
            Cipher cipher = Cipher.getInstance(""RSA/ECB/PKCS1Padding"", provider);
            cipher.init(Cipher.ENCRYPT_MODE, publicKey);
            String encryptedData = DatatypeConverter.printBase64Binary(cipher.doFinal(textToEncrypt.getBytes()));

            PrivateKey privateKey = (PrivateKey) keystore.getKey(""my-SHA1WITHRSA-2048-bits-key"",
                    passphrase.toCharArray());
            cipher.init(Cipher.DECRYPT_MODE, privateKey);
            byte[] decodedEncryptedData = DatatypeConverter.parseBase64Binary(encryptedData);
            ByteArrayOutputStream stream = new ByteArrayOutputStream();
            int blocks = decodedEncryptedData.length / 256;
            int offset = 0;
            for (int blockIndex = 0; blockIndex < blocks; blockIndex++) {
                byte[] nextBlock = getNextBlock(decodedEncryptedData, offset);
                stream.write(cipher.doFinal(nextBlock));
                offset += 256;
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    private static byte[] getNextBlock(byte[] cipherText, int offset) {
        byte[] block = new byte[256];
        System.arraycopy(cipherText, offset, block, 0, 256);
        return block;
    }

}

","
I have used following code and issue has been resolved

    SunPKCS11 provider = new SunPKCS11(""/home/user/pkcs11.cfg"");
    Security.addProvider(provider);
    KeyStore keystore = KeyStore.getInstance(""PKCS11"");
    keystore.load(null, passphrase.toCharArray());

","2065","<java><encryption><rsa><public-key-encryption><hsm>","2","1","2","2018-07-03 11:18:58","","0","6","1816580","","2016-05-13 17:10:38","2016-05-13 04:49:30",""
"32037007","How to I securely store social security numbers in a database?","I'm working on a web application which the users will need to submit their social security numbers.
I would like to use asymmetric keys for encryption so if the web server is compromised the private key will still be safe. The application won't be processed on the webserver.
However the app needs the ability to know if the SSN is a duplicate to A not allow duplicates and B to allow users to come back to their application.
Can this be done?
Does it make sense to use a one way hash similar to the way passwords are stored or will that compromise the data?
Since there are only aprox. 10 Billion SSNs. Does that make any hashing alg. susceptible to brute force attacks. Will a salt help here? If the salt is known isn't it still susceptible to brute force? Is it possible to properly hide a salt since if someone has access to the database they also have access to the salt?
","Don't encrypt your SSNs, hash them
It sounds like you should be hashing the SSNs rather than encrypting them. The difference between the two is that hashing is one-way while encryption is not. But as you don't need to verify the value of the data, just the integrity, I would definitely use hashing because

Hashing is more secure than encryption as hashed SSNs can not be unhashed
Hashing still allows you to verify the integrity of the data and check for duplicate SSNs in your database.

How to hash
If you're using PHP 5 >= 5.5.0, I would strongly recommend using PHP's built in password hashing functions. It's battle tested and created for this very situation. It even auto generates its own secure salt (but still has the option of you providing your own).
Make sure you carefully read the documentation on password hashing functions, but a short example (taken from the docs' example) is below:
<?php
// To create the password hash:
$ssn = password_hash($ssn, PASSWORD_DEFAULT);
// To verify the integrity of what the user is entering
// In this example, $hash is the hashed password generated from password_hash
if (password_verify('rasmuslerdorf', $hash)) {
    echo 'SSN is valid!';
} else {
    echo 'Invalid SSN.';
}
?>

Remember to check the docs on the password hashing functions so you correctly use them:

password_get_info
password_hash
password_needs_rehash
password_verify

","2051","<mysql><public-key-encryption><encryption-asymmetric>","0","1","2","2019-03-14 09:20:45","","2","1","1898563","","2019-03-14 09:20:45","2015-08-16 15:47:19",""
"32037007","How to I securely store social security numbers in a database?","I'm working on a web application which the users will need to submit their social security numbers.
I would like to use asymmetric keys for encryption so if the web server is compromised the private key will still be safe. The application won't be processed on the webserver.
However the app needs the ability to know if the SSN is a duplicate to A not allow duplicates and B to allow users to come back to their application.
Can this be done?
Does it make sense to use a one way hash similar to the way passwords are stored or will that compromise the data?
Since there are only aprox. 10 Billion SSNs. Does that make any hashing alg. susceptible to brute force attacks. Will a salt help here? If the salt is known isn't it still susceptible to brute force? Is it possible to properly hide a salt since if someone has access to the database they also have access to the salt?
","A little late to the game, but I took a two-pronged approach.
We split the SSN into two parts:

XXX-XX
3847

The first part of the SSN is encrypted using some encryption algorithm (blowfish?) or whatever flavor you choose. 
The database:
--------------------------------------------------------
| ID    |   SSN-A    |   SSN-B    | ......   |         |
--------------------------------------------------------
|   1   | N1maA+HCRj |    3847    |    ...   |         |
|   2   | HCRjHQiEx/ |    7254    |    ...   |         |
--------------------------------------------------------

When records are exported or dumped into a CSV for consumption by another entity, you can decrypt the first part of the SSN one by one and then reassemble the complete SSN.
As long as the key is stored securely, then there is a reasonable sense of security here. The added benefit of this is - while you cannot do a whole SSN search, you can at least limit them by using the last 4 digits. There is a whole set of regulations around storing SSN's, so whatever way you choose - be careful.
Edit
It would also probably be wise to name the columns something non deterministic of an SSN field.
","2051","<mysql><public-key-encryption><encryption-asymmetric>","0","2","2","2019-03-14 09:20:45","","2","1","1898563","","2019-03-14 09:20:45","2015-08-16 15:47:19",""
"28684465","""TypeError: Incorrect padding"" in pycrypto-2.6.1(python 2.7.6) ubuntu14.04 LTS","I'm trying to make a simple public-private key encryption algorithm using pycrypto:
from Crypto.PublicKey import RSA
from Crypto.Signature import PKCS1_v1_5
from Crypto.Hash import SHA256
from base64 import b64encode, b64decode

#Open a txt file in the host
f = open('to-drop-box.txt', 'rb')

#Save the contents of the file into a variable
message1 = f.read()
f.close()

data = message1

key = open(""privateKey.der"", ""r"").read()
rsakey = RSA.importKey(key)
signer = PKCS1_v1_5.new(rsakey)
digest = SHA256.new()
# It's being assumed the data is base64 encoded, so it's decoded before updating the digest

digest.update(b64decode(data))

sign = signer.sign(digest)
#return b64encode(sign) 
signature = b64encode(sign) 

But I get the following error at the line digest.update(b64decode(data)):
Traceback (most recent call last):
  File ""asymmetric-public-private-key-signature.py"", line 33, in <module>
    digest.update(b64decode(data))
  File ""/usr/lib/python2.7/base64.py"", line 76, in b64decode
    raise TypeError(msg)
TypeError: Incorrect padding

Does someone know how to fix the error?
","to-drop-box.txt is not base64 encoded. b64decode is complaining about the padding (those trailing =) but the error usually signifies that illegal characters appear in the string.
","2044","<python><ubuntu-14.04><public-key-encryption><pycrypto>","0","2","2","2015-02-26 03:50:49","","2","","","","","2015-02-23 22:10:00",""
"28684465","""TypeError: Incorrect padding"" in pycrypto-2.6.1(python 2.7.6) ubuntu14.04 LTS","I'm trying to make a simple public-private key encryption algorithm using pycrypto:
from Crypto.PublicKey import RSA
from Crypto.Signature import PKCS1_v1_5
from Crypto.Hash import SHA256
from base64 import b64encode, b64decode

#Open a txt file in the host
f = open('to-drop-box.txt', 'rb')

#Save the contents of the file into a variable
message1 = f.read()
f.close()

data = message1

key = open(""privateKey.der"", ""r"").read()
rsakey = RSA.importKey(key)
signer = PKCS1_v1_5.new(rsakey)
digest = SHA256.new()
# It's being assumed the data is base64 encoded, so it's decoded before updating the digest

digest.update(b64decode(data))

sign = signer.sign(digest)
#return b64encode(sign) 
signature = b64encode(sign) 

But I get the following error at the line digest.update(b64decode(data)):
Traceback (most recent call last):
  File ""asymmetric-public-private-key-signature.py"", line 33, in <module>
    digest.update(b64decode(data))
  File ""/usr/lib/python2.7/base64.py"", line 76, in b64decode
    raise TypeError(msg)
TypeError: Incorrect padding

Does someone know how to fix the error?
","Ok, I changed the line digest.update(b64decode(data))  to digest.update(data) and now it works. 
","2044","<python><ubuntu-14.04><public-key-encryption><pycrypto>","0","1","2","2015-02-26 03:50:49","","2","","","","","2015-02-23 22:10:00",""
"29615420","RSA-OAEP SHA-512 Encrypt / Decrypt from Javascriptwebcrypt api to PHP openssl?","I've been rather busy trying to get a secure exchange established between a browserclient, using the webcrypto api and PHP server using openssl. I've broken down things as much as I can. I wrote some javascript to generate a keypair, print out the values private and public, encrypt a simple string and print it out as well.
I've copied the values straight to a simple php script. Trying to decode it with the values from the javascipt.
Encoding and decoding works properly in the javascript (as posted below), decoding in php does not (also posted beneath the javascript). I also can't seem to find where to set the SHA-512 declaration in PHP. Does anyone have experience with this kind of exchange and perhaps point me in the right direction. RSA-OAEP was chosen because it's supported by chrome, mozilla, IE11 and Safari as well as PHP.
Kind regards,
Gideon


// JavaScript Document
var keyPair;
var pemPublicKey;
var pemPrivateKey;

var _spki;
var _pkcs8;

	window.crypto.subtle.generateKey({
		name: ""RSA-OAEP"",
		modulusLength: 2048,
		publicExponent: new Uint8Array([1, 0, 1]),  // 24 bit representation of 65537
		hash: {name: ""SHA-512""}
	}, true, [""encrypt"", ""decrypt""])
	.then(function(newKeyPair) {
		keyPair = newKeyPair;
		return keyPair;
	})
	.then(function(keyPair) {
		window.crypto.subtle.exportKey('spki', keyPair.publicKey)
		.then(function(spki) {
			_spki = spki;
			var pemPublicKey = convertBinaryToPem(spki, ""PUBLIC KEY"");
			document.writeln(pemPublicKey);
			sendToPhp();
		});
	
		window.crypto.subtle.exportKey('pkcs8', keyPair.privateKey)
		.then(function(pkcs8) {
			_pkcs8 = pkcs8;
			var pemPrivateKey = convertBinaryToPem(pkcs8, ""PRIVATE KEY"");
			document.writeln(pemPrivateKey);
		})
	});
	
	function sendToPhp() {
		window.crypto.subtle.importKey('spki', _spki, {name:""RSA-OAEP"", hash: {name: ""SHA-512""}}, false, [""encrypt""])
		.then(function(cryptokey) {
			window.crypto.subtle.encrypt({ name: ""RSA-OAEP""}, cryptokey, str2ab('mijn geheimpje') )
			.then(function(encrypted){
				//returns an ArrayBuffer containing the encrypted data
				document.writeln(arrayBufferToBase64String(encrypted));
				receivedFromPhp(arrayBufferToBase64String(encrypted));
			});
		});
	}
	
	function receivedFromPhp(encrypted) {
		window.crypto.subtle.importKey('pkcs8', _pkcs8, {name:""RSA-OAEP"", hash: {name: ""SHA-512""}}, false, [""decrypt""])
		.then(function(cryptokey) {
			window.crypto.subtle.decrypt({ name: ""RSA-OAEP""}, cryptokey, base64StringToArrayBuffer(encrypted) )
			.then(function(decrypted){
				//returns an ArrayBuffer containing the encrypted data
				var decryp = ab2str(decrypted);
				debugger;
			});
		});
	}
	
	function ab2str(buf) {
		return String.fromCharCode.apply(null, new Uint16Array(buf));
	}

	function str2ab(str) {
		var buf = new ArrayBuffer(str.length*2); // 2 bytes for each char
		var bufView = new Uint16Array(buf);
		for (var i=0, strLen=str.length; i<strLen; i++) {
			bufView[i] = str.charCodeAt(i);
		}
		return buf;
	}
	function base64StringToArrayBuffer(base64) {
		var binary_string =  atob(base64);
		var len = binary_string.length;
		var bytes = new Uint8Array( len );
		for (var i = 0; i < len; i++)        {
			bytes[i] = binary_string.charCodeAt(i);
		}
		return bytes.buffer;
	}
	function arrayBufferToBase64String(arrayBuffer) {
		var byteArray = new Uint8Array(arrayBuffer)
		var byteString = '';
		for (var i=0; i<byteArray.byteLength; i++) {
			byteString += String.fromCharCode(byteArray[i]);
		}
		return btoa(byteString);
	}

	function convertBinaryToPem(binaryData, label) {
		var base64Cert = arrayBufferToBase64String(binaryData);

		var pemCert = ""-----BEGIN "" + label + ""-----\r\n"";

		var nextIndex = 0;
		var lineLength;
		while (nextIndex < base64Cert.length) {
			if (nextIndex + 64 <= base64Cert.length) {
				pemCert += base64Cert.substr(nextIndex, 64) + ""\r\n"";
			} else {
				pemCert += base64Cert.substr(nextIndex) + ""\r\n"";
			}
			nextIndex += 64;
		}

		pemCert += ""-----END "" + label + ""-----\r\n"";
		return pemCert;
	}





<?php

	error_reporting(E_ALL);
	ini_set(""display_errors"", 1);
	$pemPublicKey = 	'-----BEGIN PUBLIC KEY-----
MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAvzJ07T/SiZsUPfC4ymwj
G/TqVdO04QZRUMcsmHeUG0BawSxlwoz+0YD48UZFYyTetw3egoasQfkvOPIUKuqq
mPEXwGsVlLbkqvPsgNA2K6Zye8El9DEp83eoPqylopU0L9zSnQp9VaNpSgsOlltr
0RRyq3q8gBJb7PkzuDzmXrr5KEuGmkLmOE3TH0Ck9u+c4xE87g3s5HtQ6uGa6jB6
JooTN1edPum+kBJdJajOW5FvOfDnEHQBsKZPd4HiYcOlM7crt2Y9XnBSBIIZ1uR6
a4Qs+EP6CwczPA6/J5a+GOV9ch1xZLsW5JuO55lCDpwrvKr7VVqwQG3qNewk8vVA
iwIDAQAB
-----END PUBLIC KEY-----';

	$pemPrivateKey =	'-----BEGIN PRIVATE KEY-----
MIIEvwIBADANBgkqhkiG9w0BAQEFAASCBKkwggSlAgEAAoIBAQC/MnTtP9KJmxQ9
8LjKbCMb9OpV07ThBlFQxyyYd5QbQFrBLGXCjP7RgPjxRkVjJN63Dd6ChqxB+S84
8hQq6qqY8RfAaxWUtuSq8+yA0DYrpnJ7wSX0MSnzd6g+rKWilTQv3NKdCn1Vo2lK
Cw6WW2vRFHKreryAElvs+TO4POZeuvkoS4aaQuY4TdMfQKT275zjETzuDezke1Dq
4ZrqMHomihM3V50+6b6QEl0lqM5bkW858OcQdAGwpk93geJhw6Uztyu3Zj1ecFIE
ghnW5HprhCz4Q/oLBzM8Dr8nlr4Y5X1yHXFkuxbkm47nmUIOnCu8qvtVWrBAbeo1
7CTy9UCLAgMBAAECggEBAK1i7HZacmsnn2usaWfoOM6ZhAjhPB70w7klZmO9zSoJ
akPUJ1QO2ObUtuzWdQY74VzPzwE/b+dEOnbB0Vg6Bws7V/a/JYr/cM829Tq7luRu
xVNFDU4tZ4XK9WAg4PRXqkPdVYHkiVSoJEtpS4k+zr+Ec5jebSMXgxWbyDNDxwYP
p6TenCVIhLGK3cR2uWADsXLAQQ5p5QMnpXDhr2m8cbe7496B4lTwe/gyjomzNutD
ZnIQCfAY9r1r7U7ryT2eoNXmb9uDG+fqSaAvaB/kujOT6y1takSxf7Ij26dUL9iA
7h59c2Ztu4PMrISV+04DGYfFs1MzYeBfoz7pxqHEHMECgYEA4IVY54trkJ5/8CId
ad1s+bV3exNTJNgTAiqZE/a4eNnBzQD85SGbUAnk9PGzGvW9o3spQkcnJIqqDWJQ
cOJlh8HQJqm/0pkWJKonoHUy05SleB67sZz97gAFj/NsPOSSQ6yMnf/pEeKwbrIa
/fkOhdjAXk//WnECvo11o6MC7cUCgYEA2gEHoyRS5dbv+FtL1WFn0lNTlMl8tHz3
fAdXuPi5dp3gPhqfxcP5n3QpT9Jc3rhQQaRswbKCjo2YAOhSdHR6nqYTyte+F+H2
ImsqTGFlunIMpXmYK4ssOl00gnG+9cLHDNbHtjCb+oZy9sh8pZZniafSg0aYImo0
VG4RGesbKg8CgYEAq1179vaV+gLP+ZPASX4k4A7ejAS68CMvlva2ceNc93iVEAiR
/b0B0zxKEZ6tKoWn4bBuVFUEjkJ7+s0wQoi6H70RR4FGlNIdcYyhxDnPumf5R86F
SdJeihpgJHgSBAQdkyOPDEU4OluAeGzeZzyCFizS3ulGKFybUJ+dy3DvGlUCgYBp
KjwD8F7pL2G9/lS7z+xkovvb98Ln0q0UsPoZaisV1J07eF6A6cQ+rqvLLODOND3L
HMW2PyYKHLYqIei88v/ADr/Xh3HVVZUGD4ptJEMNyTzeiqTkxJOGaDYPg02qgtbB
E89tzU9BcKB++kJfIwo5drLvzxtO5srtu9cWGLuW8wKBgQCK0k/hYZyvB+9vELyH
fNaVxj+jn5BWOmFtk6/TC/J5dQzldt7uyxkwoWOsJinpc0JByG9TKftaTEZI35xb
tcNv214uLovTSNoxk2Yd++Ltg1O2vvjD39NXPIZH8et/unz9PEQXSJjO09Pi9AiH
8a+VdAUhcHLNwqea8T6y5N9N9w==
-----END PRIVATE KEY-----';

	$encrMessage =	'd14QunL/M8XwYvsogvjkExe24LP1aYY51OM3ACyl3xJam5DnhwBB4o+cf6/tRaBp+AzoZYQuemd7IP3NjYYEHj23DPaxDzoPNfHoWxNfKC9xqcgoLDywEjJvwtvNaJDAO+mGfNHfsi4TFtsSFRvJ8rkxNOYhoprD2XMIEeklSpFHC3V9hnadHunP+Vgwc5TNRCRPZ1AEcEiSlNmBkvd8pB+iMyAwA7P2tmamrpNQYbEjoQu0mCNPUVrft1QI1IS4XWAL4+HP2vBWV41AttL8XjFxicrR3mXXZVukwiu7PJFPjwW9cLGEgTMkcpBkPZoTGPefiCQYVh4LEq6fYb4kdw==';

    //just for testing if it works with the public/private keys supplied by javascript, which it does
	//$publicKey = openssl_pkey_get_public($pemPublicKey);
	//openssl_public_encrypt('mijn geheimpje',$encr,$publicKey,OPENSSL_PKCS1_OAEP_PADDING); 
	//$encr64 = base64_encode($encr);	
	
	$privateKey = openssl_get_privatekey($pemPrivateKey);
	if (!$privateKey) {
		echo ""Cannot get private key"";
	}
	
	$encr = base64_decode($encrMessage);
	
	$b = openssl_private_decrypt($encr,$decr,$privateKey,OPENSSL_PKCS1_OAEP_PADDING);
	if (!$b) {
		echo ""Cannot decode message"";
	}
	echo ""String decrypt :"". $decr;
?>



","Guess I solved my own problem. I played around with phpseclib and got a hint about the hash being wrong. After replacing SHA-512 with SHA-1 it finally worked. In the PHP documentation its says that the crypt libe defaults to SHA-1. Things should have worked properly with phpseclib, being completely independent of the open_ssl php lib. But it didn't. Still at a loss why this happend. But at least I have a working solution to work from... Hope this helps other people working on the same thing.
Gideon
","2042","<javascript><php><encryption><public-key-encryption><webcrypto-api>","3","1","2","2016-12-09 07:33:46","","0","2","","","","2015-04-13 21:28:11",""
"29615420","RSA-OAEP SHA-512 Encrypt / Decrypt from Javascriptwebcrypt api to PHP openssl?","I've been rather busy trying to get a secure exchange established between a browserclient, using the webcrypto api and PHP server using openssl. I've broken down things as much as I can. I wrote some javascript to generate a keypair, print out the values private and public, encrypt a simple string and print it out as well.
I've copied the values straight to a simple php script. Trying to decode it with the values from the javascipt.
Encoding and decoding works properly in the javascript (as posted below), decoding in php does not (also posted beneath the javascript). I also can't seem to find where to set the SHA-512 declaration in PHP. Does anyone have experience with this kind of exchange and perhaps point me in the right direction. RSA-OAEP was chosen because it's supported by chrome, mozilla, IE11 and Safari as well as PHP.
Kind regards,
Gideon


// JavaScript Document
var keyPair;
var pemPublicKey;
var pemPrivateKey;

var _spki;
var _pkcs8;

	window.crypto.subtle.generateKey({
		name: ""RSA-OAEP"",
		modulusLength: 2048,
		publicExponent: new Uint8Array([1, 0, 1]),  // 24 bit representation of 65537
		hash: {name: ""SHA-512""}
	}, true, [""encrypt"", ""decrypt""])
	.then(function(newKeyPair) {
		keyPair = newKeyPair;
		return keyPair;
	})
	.then(function(keyPair) {
		window.crypto.subtle.exportKey('spki', keyPair.publicKey)
		.then(function(spki) {
			_spki = spki;
			var pemPublicKey = convertBinaryToPem(spki, ""PUBLIC KEY"");
			document.writeln(pemPublicKey);
			sendToPhp();
		});
	
		window.crypto.subtle.exportKey('pkcs8', keyPair.privateKey)
		.then(function(pkcs8) {
			_pkcs8 = pkcs8;
			var pemPrivateKey = convertBinaryToPem(pkcs8, ""PRIVATE KEY"");
			document.writeln(pemPrivateKey);
		})
	});
	
	function sendToPhp() {
		window.crypto.subtle.importKey('spki', _spki, {name:""RSA-OAEP"", hash: {name: ""SHA-512""}}, false, [""encrypt""])
		.then(function(cryptokey) {
			window.crypto.subtle.encrypt({ name: ""RSA-OAEP""}, cryptokey, str2ab('mijn geheimpje') )
			.then(function(encrypted){
				//returns an ArrayBuffer containing the encrypted data
				document.writeln(arrayBufferToBase64String(encrypted));
				receivedFromPhp(arrayBufferToBase64String(encrypted));
			});
		});
	}
	
	function receivedFromPhp(encrypted) {
		window.crypto.subtle.importKey('pkcs8', _pkcs8, {name:""RSA-OAEP"", hash: {name: ""SHA-512""}}, false, [""decrypt""])
		.then(function(cryptokey) {
			window.crypto.subtle.decrypt({ name: ""RSA-OAEP""}, cryptokey, base64StringToArrayBuffer(encrypted) )
			.then(function(decrypted){
				//returns an ArrayBuffer containing the encrypted data
				var decryp = ab2str(decrypted);
				debugger;
			});
		});
	}
	
	function ab2str(buf) {
		return String.fromCharCode.apply(null, new Uint16Array(buf));
	}

	function str2ab(str) {
		var buf = new ArrayBuffer(str.length*2); // 2 bytes for each char
		var bufView = new Uint16Array(buf);
		for (var i=0, strLen=str.length; i<strLen; i++) {
			bufView[i] = str.charCodeAt(i);
		}
		return buf;
	}
	function base64StringToArrayBuffer(base64) {
		var binary_string =  atob(base64);
		var len = binary_string.length;
		var bytes = new Uint8Array( len );
		for (var i = 0; i < len; i++)        {
			bytes[i] = binary_string.charCodeAt(i);
		}
		return bytes.buffer;
	}
	function arrayBufferToBase64String(arrayBuffer) {
		var byteArray = new Uint8Array(arrayBuffer)
		var byteString = '';
		for (var i=0; i<byteArray.byteLength; i++) {
			byteString += String.fromCharCode(byteArray[i]);
		}
		return btoa(byteString);
	}

	function convertBinaryToPem(binaryData, label) {
		var base64Cert = arrayBufferToBase64String(binaryData);

		var pemCert = ""-----BEGIN "" + label + ""-----\r\n"";

		var nextIndex = 0;
		var lineLength;
		while (nextIndex < base64Cert.length) {
			if (nextIndex + 64 <= base64Cert.length) {
				pemCert += base64Cert.substr(nextIndex, 64) + ""\r\n"";
			} else {
				pemCert += base64Cert.substr(nextIndex) + ""\r\n"";
			}
			nextIndex += 64;
		}

		pemCert += ""-----END "" + label + ""-----\r\n"";
		return pemCert;
	}





<?php

	error_reporting(E_ALL);
	ini_set(""display_errors"", 1);
	$pemPublicKey = 	'-----BEGIN PUBLIC KEY-----
MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAvzJ07T/SiZsUPfC4ymwj
G/TqVdO04QZRUMcsmHeUG0BawSxlwoz+0YD48UZFYyTetw3egoasQfkvOPIUKuqq
mPEXwGsVlLbkqvPsgNA2K6Zye8El9DEp83eoPqylopU0L9zSnQp9VaNpSgsOlltr
0RRyq3q8gBJb7PkzuDzmXrr5KEuGmkLmOE3TH0Ck9u+c4xE87g3s5HtQ6uGa6jB6
JooTN1edPum+kBJdJajOW5FvOfDnEHQBsKZPd4HiYcOlM7crt2Y9XnBSBIIZ1uR6
a4Qs+EP6CwczPA6/J5a+GOV9ch1xZLsW5JuO55lCDpwrvKr7VVqwQG3qNewk8vVA
iwIDAQAB
-----END PUBLIC KEY-----';

	$pemPrivateKey =	'-----BEGIN PRIVATE KEY-----
MIIEvwIBADANBgkqhkiG9w0BAQEFAASCBKkwggSlAgEAAoIBAQC/MnTtP9KJmxQ9
8LjKbCMb9OpV07ThBlFQxyyYd5QbQFrBLGXCjP7RgPjxRkVjJN63Dd6ChqxB+S84
8hQq6qqY8RfAaxWUtuSq8+yA0DYrpnJ7wSX0MSnzd6g+rKWilTQv3NKdCn1Vo2lK
Cw6WW2vRFHKreryAElvs+TO4POZeuvkoS4aaQuY4TdMfQKT275zjETzuDezke1Dq
4ZrqMHomihM3V50+6b6QEl0lqM5bkW858OcQdAGwpk93geJhw6Uztyu3Zj1ecFIE
ghnW5HprhCz4Q/oLBzM8Dr8nlr4Y5X1yHXFkuxbkm47nmUIOnCu8qvtVWrBAbeo1
7CTy9UCLAgMBAAECggEBAK1i7HZacmsnn2usaWfoOM6ZhAjhPB70w7klZmO9zSoJ
akPUJ1QO2ObUtuzWdQY74VzPzwE/b+dEOnbB0Vg6Bws7V/a/JYr/cM829Tq7luRu
xVNFDU4tZ4XK9WAg4PRXqkPdVYHkiVSoJEtpS4k+zr+Ec5jebSMXgxWbyDNDxwYP
p6TenCVIhLGK3cR2uWADsXLAQQ5p5QMnpXDhr2m8cbe7496B4lTwe/gyjomzNutD
ZnIQCfAY9r1r7U7ryT2eoNXmb9uDG+fqSaAvaB/kujOT6y1takSxf7Ij26dUL9iA
7h59c2Ztu4PMrISV+04DGYfFs1MzYeBfoz7pxqHEHMECgYEA4IVY54trkJ5/8CId
ad1s+bV3exNTJNgTAiqZE/a4eNnBzQD85SGbUAnk9PGzGvW9o3spQkcnJIqqDWJQ
cOJlh8HQJqm/0pkWJKonoHUy05SleB67sZz97gAFj/NsPOSSQ6yMnf/pEeKwbrIa
/fkOhdjAXk//WnECvo11o6MC7cUCgYEA2gEHoyRS5dbv+FtL1WFn0lNTlMl8tHz3
fAdXuPi5dp3gPhqfxcP5n3QpT9Jc3rhQQaRswbKCjo2YAOhSdHR6nqYTyte+F+H2
ImsqTGFlunIMpXmYK4ssOl00gnG+9cLHDNbHtjCb+oZy9sh8pZZniafSg0aYImo0
VG4RGesbKg8CgYEAq1179vaV+gLP+ZPASX4k4A7ejAS68CMvlva2ceNc93iVEAiR
/b0B0zxKEZ6tKoWn4bBuVFUEjkJ7+s0wQoi6H70RR4FGlNIdcYyhxDnPumf5R86F
SdJeihpgJHgSBAQdkyOPDEU4OluAeGzeZzyCFizS3ulGKFybUJ+dy3DvGlUCgYBp
KjwD8F7pL2G9/lS7z+xkovvb98Ln0q0UsPoZaisV1J07eF6A6cQ+rqvLLODOND3L
HMW2PyYKHLYqIei88v/ADr/Xh3HVVZUGD4ptJEMNyTzeiqTkxJOGaDYPg02qgtbB
E89tzU9BcKB++kJfIwo5drLvzxtO5srtu9cWGLuW8wKBgQCK0k/hYZyvB+9vELyH
fNaVxj+jn5BWOmFtk6/TC/J5dQzldt7uyxkwoWOsJinpc0JByG9TKftaTEZI35xb
tcNv214uLovTSNoxk2Yd++Ltg1O2vvjD39NXPIZH8et/unz9PEQXSJjO09Pi9AiH
8a+VdAUhcHLNwqea8T6y5N9N9w==
-----END PRIVATE KEY-----';

	$encrMessage =	'd14QunL/M8XwYvsogvjkExe24LP1aYY51OM3ACyl3xJam5DnhwBB4o+cf6/tRaBp+AzoZYQuemd7IP3NjYYEHj23DPaxDzoPNfHoWxNfKC9xqcgoLDywEjJvwtvNaJDAO+mGfNHfsi4TFtsSFRvJ8rkxNOYhoprD2XMIEeklSpFHC3V9hnadHunP+Vgwc5TNRCRPZ1AEcEiSlNmBkvd8pB+iMyAwA7P2tmamrpNQYbEjoQu0mCNPUVrft1QI1IS4XWAL4+HP2vBWV41AttL8XjFxicrR3mXXZVukwiu7PJFPjwW9cLGEgTMkcpBkPZoTGPefiCQYVh4LEq6fYb4kdw==';

    //just for testing if it works with the public/private keys supplied by javascript, which it does
	//$publicKey = openssl_pkey_get_public($pemPublicKey);
	//openssl_public_encrypt('mijn geheimpje',$encr,$publicKey,OPENSSL_PKCS1_OAEP_PADDING); 
	//$encr64 = base64_encode($encr);	
	
	$privateKey = openssl_get_privatekey($pemPrivateKey);
	if (!$privateKey) {
		echo ""Cannot get private key"";
	}
	
	$encr = base64_decode($encrMessage);
	
	$b = openssl_private_decrypt($encr,$decr,$privateKey,OPENSSL_PKCS1_OAEP_PADDING);
	if (!$b) {
		echo ""Cannot decode message"";
	}
	echo ""String decrypt :"". $decr;
?>



","Gideon,
Glad you found your answer. Your issue was not with PHP but with Safari, it does not support OAEP with anything other than SHA1, at least at this time.
If you are going to work with WebCrypto you may want to look at: https://peculiarventures.github.io/pv-webcrypto-tests/ which enumerates the combinations supported by each browser.
We did this as a test suite to help us build https://github.com/PeculiarVentures/webcrypto-liner which makes it easier to build interoperable WebCrypto applications.
","2042","<javascript><php><encryption><public-key-encryption><webcrypto-api>","3","0","2","2016-12-09 07:33:46","","0","2","","","","2015-04-13 21:28:11",""
"10376524","Exporting X509Certificate2 (with public key only) to .CER file","I have access to an object of type X509Certicate2 in memory (it has both the private key and public key).  I need to generate a physical .CER file that can be double-clicked and imported into certificate store by an end user.
So far, my attempts in doing so have failed.  I've tried various ways to dump the Public key of the certificate into a file but non are importable by the certificate tool.
Any advice?
","You may check out Mono source code and learn its makecert,
https://github.com/mono/mono/blob/master/mcs/tools/security/makecert.cs
","2039","<.net><x509certificate><public-key-encryption>","0","0","2","2012-05-10 00:39:57","10526092","2","","38206","","2012-05-02 02:27:44","2012-04-29 22:21:05",""
"10376524","Exporting X509Certificate2 (with public key only) to .CER file","I have access to an object of type X509Certicate2 in memory (it has both the private key and public key).  I need to generate a physical .CER file that can be double-clicked and imported into certificate store by an end user.
So far, my attempts in doing so have failed.  I've tried various ways to dump the Public key of the certificate into a file but non are importable by the certificate tool.
Any advice?
","Turns out that as Bruno mentioned, all I needed to do was to call Export method on the object itself and the byte array containing only the public key was ready to be saved as *.cer file
","2039","<.net><x509certificate><public-key-encryption>","0","0","2","2012-05-10 00:39:57","10526092","2","","38206","","2012-05-02 02:27:44","2012-04-29 22:21:05",""
"40175481","Get public/private key from certificate","I try to get public or private key from certificate saved on device.
I'm using this method:
    - (SecKeyRef)publicKeyFromFile:(NSString *)path
{
    NSData * certificateData = [[NSData alloc] initWithData:[[NSFileManager defaultManager] contentsAtPath:path]];

    if (certificateData != nil && certificateData.bytes != 0) {

        CFDataRef cfDataPath = CFDataCreate(NULL, [certificateData bytes], [certificateData length]);
        SecCertificateRef certificateFromFile = SecCertificateCreateWithData(NULL, cfDataPath);

        if (certificateFromFile) {
            SecPolicyRef secPolicy = SecPolicyCreateBasicX509();
            SecTrustRef trust;
            SecTrustCreateWithCertificates( certificateFromFile, secPolicy, &trust);
            SecTrustResultType resultType;
            SecTrustEvaluate(trust, &resultType);
            SecKeyRef publicKeyObj = SecTrustCopyPublicKey(trust);

            return publicKeyObj;
        }
    }

    return nil;
}

There is data in cfDataPath, but certificateFromFile is always nil...
Does anyone know where's the problem?
","Apple doc refers: 

Obtaining a SecKeyRef Object for Public Key Cryptography
  Extracting Keys from the Keychain If you are using existing public and private keys from your keychain, read Certificate, Key, and Trust Services Programming Guide to learn how to retrieve a SecKeychainItemRef object for that key.
  Once you have obtained a SecKeychainItemRef, you can cast it to a SecKeyRef for use with this API.
  Importing Existing Public and Private Keys Importing and exporting public and private key pairs is somewhat more complicated than generating new keys because of the number of different key formats in common use.
  This example describes how to import and export a key pair in PEM (Privacy Enhanced Mail) format.

Read more : https://developer.apple.com/library/mac/documentation/Security/Conceptual/SecTransformPG/SigningandVerifying/SigningandVerifying.html and https://developer.apple.com/library/mac/documentation/Security/Conceptual/CertKeyTrustProgGuide/01introduction/introduction.html#//apple_ref/doc/uid/TP40001358 
Try with this: 
  -(BOOL)trustCertFromChallenge:(NSURLAuthenticationChallenge *)challenge
 {
SecTrustResultType trustResult;
SecTrustRef trust = challenge.protectionSpace.serverTrust;
OSStatus status = SecTrustEvaluate(trust, &trustResult);

//DLog(@""Failed: %@"",error.localizedDescription);
//DLog(@""Status: %li | Trust: %@ - %li"",(long)status,trust,(long)trustResult);

if (status == 0 && (trustResult == kSecTrustResultUnspecified || trustResult == kSecTrustResultProceed)) {

    SecKeyRef serverKey = SecTrustCopyPublicKey(trust);

    NSString *certPath = [[NSBundle mainBundle] pathForResource:@""MYCert"" ofType:@""der""];
    NSData *certData = [NSData dataWithContentsOfFile:certPath];
    SecCertificateRef localCertificate = SecCertificateCreateWithData(NULL, (__bridge CFDataRef)certData);

    SecKeyRef localKey = NULL;
    SecTrustRef localTrust = NULL;
    SecCertificateRef certRefs[1] = {localCertificate};
    CFArrayRef certArray = CFArrayCreate(kCFAllocatorDefault, (void *)certRefs, 1, NULL);
    SecPolicyRef policy = SecPolicyCreateBasicX509();
    OSStatus status = SecTrustCreateWithCertificates(certArray, policy, &localTrust);

    if (status == errSecSuccess)
        localKey = SecTrustCopyPublicKey(localTrust);

    CFRelease(localTrust);
    CFRelease(policy);
    CFRelease(certArray);

     if (serverKey != NULL && localKey != NULL && [(__bridge id)serverKey isEqual:(__bridge id)localKey])
        return YES;
    else
        return NO;
}

//DLog(@""Failed: %@"",error.localizedDescription);

return NO;
  }

Follow the accepted answer for more details: Objective-C / C pulling private key (modulus) from SecKeyRef 
","2023","<ios><objective-c><ssl-certificate><x509certificate><public-key-encryption>","0","1","1","2016-10-21 16:40:16","40181447","1","1","983912","","2016-10-21 16:40:16","2016-10-21 11:25:43",""
"11106726","Bouncy castle error: Unable to cast object of type RsaPrivateCrtKeyParameters to type ElGamalKeyParameters","I am having difficulties with decryption of a GPG file using Bouncy Castle. I have the encrypted file and I have a private key and the password for the private key. I can successfully decrypt the file using the desktop software GPG4win Kleopatra so I have the correct private key and the gpg file is valid.
However when our application reaches the line of code which attempts to decrypt the data with Bouncy Castle, I receive this error:
Unable to cast object of type 'Org.BouncyCastle.Crypto.Parameters.RsaPrivateCrtKeyParameters' to type 'Org.BouncyCastle.Crypto.Parameters.ElGamalKeyParameters'.

I am decrypting the same file using the same private key with Kleopatra so this has got to be something I can resolve by perhaps changing the private key file to the expected format or setting some options in Bouncy Castle.
The private key file is a plain text file beginning with the lines:
-----BEGIN PGP PRIVATE KEY BLOCK-----
Version: GnuPG v2.0.17 (MingW32)

Here is a flattened out version of the decryption code. Apologies if I have missed anything out:
PgpEncryptionKeys encryptionKeys = new PgpEncryptionKeys(publicKey, privateKey, passPhrase);

Stream encryptedStream = new StreamReader(encryptedFileName).BaseStream;
Stream encodedFile = PgpUtilities.GetDecoderStream(inputStream);

PgpObjectFactory factory = new PgpObjectFactory(encodedFile);
PgpObject pgpObject = factory.NextPgpObject();

PgpEncryptedDataList encryptedDataList;
if (pgpObject is PgpEncryptedDataList)
{
    encryptedDataList = (PgpEncryptedDataList)pgpObject;
}
else
{
    encryptedDataList = (PgpEncryptedDataList)factory.NextPgpObject();
}

PgpPublicKeyEncryptedData myEncryptedData = null;
PgpPublicKeyEncryptedData publicKeyED = null;
foreach (PgpPublicKeyEncryptedData encryptedData in encryptedDataList.GetEncryptedDataObjects())
{
    if (encryptedData != null)
    {
        myEncryptedData = encryptedData;
        break;
    }
}

Stream clearStream = myEncryptedData.GetDataStream(privateKey);
PgpObjectFactory clearFactory = new PgpObjectFactory(clearStream);

PgpObject message = clearFactory.NextPgpObject();
if (message is PgpCompressedData)
{
    message = ProcessCompressedMessage(message);
    PgpLiteralData literalData = (PgpLiteralData)message;
    using (Stream outputFile = File.Create(outputFilePath))
    {
        using (Stream literalDataStream = literalData.GetInputStream())
        {
            Streams.PipeAll(literalDataStream, outputFile);
        }
    }
}

The exception occurs on this line:
Stream clearStream = myEncryptedData.GetDataStream(privateKey);

I hope you can suggest something for me to try. I can provide any further details I might have missed.
Thanks!
","","2020","<c#><bouncycastle><public-key-encryption><elgamal>","3","","0","2012-06-20 11:30:28","","6","2","1018571","","2012-06-20 11:30:28","2012-06-19 18:05:18",""
"39295633","How to import .cer public key into java trust store?","Here is the command that I am using to import the public key into my trust store. 
$ keytool -import -trustcacerts -file dev.cer -alias my_alias -keystore truststore.jks -storepass mypass -v

The output that I get is:
keytool error: java.lang.Exception: Input not an X.509 certificate
java.lang.Exception: Input not an X.509 certificate
        at sun.security.tools.keytool.Main.addTrustedCert(Main.java:2652)
        at sun.security.tools.keytool.Main.doCommands(Main.java:1006)
        at sun.security.tools.keytool.Main.run(Main.java:340)
        at sun.security.tools.keytool.Main.main(Main.java:333)

The content of the dev.cer file looks like:
-----BEGIN PUBLIC KEY-----
... encoded text ...
-----END PUBLIC KEY-----

One more thing worth mentioning that this certificate was generated on Windows running machine and I want to import it in the Linux environemnt. Maybe it has something to do with the special characters.
Any help will be greatly appreciated.
","The reason of the keytool error: java.lang.Exception: Input not an X.509 certificate is caused by the fact that instead of importing a certificate, there was an attempt to import a public key (even though the file extension is .cer , the header -----BEGIN PUBLIC KEY----- and the footer -----END PUBLIC KEY----- indicate that the file doesn't contain a valid certificate, but the public key only). Terms public certificate and public key at times by mistake are used interchangeably.
","2016","<java><encryption><public-key-encryption><keytool><java-security>","1","2","1","2016-09-03 16:58:22","39309304","11","","1048185","","2016-09-02 17:14:59","2016-09-02 15:09:47",""
"20160595","How to get the public key?","I'm trying to get the public key from the following but I'm unable to retrieve.
-----BEGIN CERTIFICATE-----
MIIDfDCCAmSgAwIBAgIECmnOfzANBgkqhkiG9w0BAQUFADB2MQswCQYDVQQGEwJJ
TjESMBAGA1UECBMJS0FSTkFUQUtBMRIwEAYDVQQHEwlCYW5nYWxvcmUxDjAMBgNV
BAoTBVVJREFJMRQwEgYDVQQLEwtUZWNoIENlbnRlcjEZMBcGA1UEAxMQQXV0aCBU
ZXN0IFNlcnZlcjAeFw0xMTA5MjIwMDAwMDBaFw0xNTA5MjIwMDAwMDBaMHYxCzAJ
BgNVBAYTAklOMRIwEAYDVQQIEwlLQVJOQVRBS0ExEjAQBgNVBAcTCUJhbmdhbG9y
ZTEOMAwGA1UEChMFVUlEQUkxFDASBgNVBAsTC1RlY2ggQ2VudGVyMRkwFwYDVQQD
ExBBdXRoIFRlc3QgU2VydmVyMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKC
AQEAxgVhHZZwTbiBMbu6zPzpNRfVp7ldubZvqPuKWT77UhR8pUUiBW7f19P+Ox6E
r6K6F/hoMWzz2k8geVEqFoRbVUVTfxxoxBkisQ82WCpbG0KkPNGyZ9i/56Aslq/b
wfSbyH6rfpAqLjFu9BXw4W+SY1zTKIjkxCjTh4FbqgzpFkGVlV3Al98ODrlS7uuy
X+qeqjvDZ3HQ+MzejrbNn6TQRBLaaqCVlkSzrzejXyEqaqliwVOVqNI3YPde7Mjl
4p6yGJ9T5Z4SGXSQXXP542kbxblcWn+inQvEmLCs3na841KflFRnFcMw27NDH1KQ
L8IZZByu56KE6BOIidcqoFF2aQIDAQABoxIwEDAOBgNVHQ8BAf8EBAMCBaAwDQYJ
KoZIhvcNAQEFBQADggEBAIFZ3r5wdZoKb8EOoP/hDnGotyxXJYgmUSmx4PNUPj0W
78eV4PTC8f9DPL2/DJUM7fvfsrO1M3R6fiTB+umrphEX9a6yX6K66KSWd8yaGouO
tX+ExkUNkEzmlS1ktKnhdSVwi0fkt8LBMjposZcz/0cPpjNFUyAyeyvSYbD2HusE
sbuMzHnSTFia5P5d32LtqD9tK7L3fS5d7NXa4Aod36JECqbKYyWInnWs3R3jFtKW
PGIA/V82oDQTvg9ey4fAvBrAUKfO3/UxF844k9cfCo1xrNxWv37wFuzuYbjA9w6Y
xiYWElRfRaEwChu+/2A2jYJ76lAOvbAyfILYNTtditM=
-----END CERTIFICATE-----

I'm using the following code.
CertificateFactory certFactory = CertificateFactory.getInstance(CERTIFICATE_TYPE, JCE_PROVIDER);

            fileInputStream = new FileInputStream(new File(publicKeyFileName));
            X509Certificate cert = (X509Certificate) certFactory.generateCertificate(fileInputStream);
            publicKey = cert.getPublicKey();
            certExpiryDate = cert.getNotAfter();

But this only work, if I provide the certificate as somename.cer file.
","I just downloaded your certificate and tested in my local
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.security.PublicKey;
import java.security.cert.CertificateException;
import java.security.cert.CertificateFactory;
import java.security.cert.X509Certificate;

public static void main(String[] args) throws FileNotFoundException, CertificateException {
         FileInputStream fin = new FileInputStream(""C://Users/admin/Desktop/uidai_auth_stage.cer"");
         CertificateFactory f = CertificateFactory.getInstance(""X.509"");
         X509Certificate certificate = (X509Certificate)f.generateCertificate(fin);
         PublicKey pk = certificate.getPublicKey();
         System.out.println(pk);
    }

Output
Sun RSA public key, 2048 bits
  modulus: 24997837043438188953607876466237786267538116823171823066632273818789601748586746440305433922940695151571735365523051675886995065116460565496861407875514773210269965513442232418015450789090428409276489545406694488823092308675874342532769927581914928367201662168201179961444037956523723476457691797490148453388604630304483861894406799761861931859139814624419421952118624143676117705606807289725313505871679662196624284199277807296317727434572557780473195825103383647653402128556252829571054599064686396724089686056490117328555759648852424450610766660552196304214260431235894942706902606159465251944070268033712979539561
  public exponent: 65537

","2013","<java><public-key-encryption>","-5","4","1","2013-11-28 05:25:28","20160648","2","","2721012","","2013-11-28 05:25:28","2013-11-23 09:15:47","2013-11-23 12:33:45"
"9938427","Encrypting email in C# using PGP public key","I want to encrypt and send an email in C# using PGP key. I have only the public key and I don't want to use the private key (since I don't need to sign the message). Can you provide any example or link on how to do this?
I've seen C# How to simply encrypt a text file with a PGP Public Key? but it is about encrypting texts, not email messages. How to use it to send an email?
","Encrypting Email is the same thing. 
You encrypt the message you want to send and then put that as the email body.
You can't encrypt the entire email body, otherwise the email servers wouldn't be able to deliver it.
","2000","<c#><public-key-encryption><pgp>","0","0","2","2013-02-07 16:09:24","","1","1","-1","","2017-05-23 11:43:44","2012-03-30 07:06:45",""
"9938427","Encrypting email in C# using PGP public key","I want to encrypt and send an email in C# using PGP key. I have only the public key and I don't want to use the private key (since I don't need to sign the message). Can you provide any example or link on how to do this?
I've seen C# How to simply encrypt a text file with a PGP Public Key? but it is about encrypting texts, not email messages. How to use it to send an email?
","This project on CodeProject will allow you to programmatically encrypt email you send using keys. It's well-documented and easy to use.
","2000","<c#><public-key-encryption><pgp>","0","1","2","2013-02-07 16:09:24","","1","1","-1","","2017-05-23 11:43:44","2012-03-30 07:06:45",""
"14025110","Exporting public key in pkcs#1 format on iOS?","How does one export an RSA public key that has been generated with SecKeyGeneratePair in pkcs#8 format?
I'm currently writing an iOS app that needs to be able to generate RSA private/public key pairs, sign a piece of content and export the public key in pkcs#8 format to be sent to the server. So far I'm generating my pair with SecKeyGeneratePair, retrieving my public and private keys with SecItemCopyMatching and signing things with SecKeyRawSign, which all seems to be working fine and the signature is verifying just fine for testing with SecKeyRawVerify. But I am unfortunately coming up completely blank on how to export the public key properly in pkcs#8.
Thank you in advance for any help.
","From experience, if you need to do something that doesn't look like it's supported by the iOS security framework then build and link your own copy of OpenSSL into your project.  Although iOS apparently uses OpenSSL internally, very little of it is exposed to application developers.
Grab one of the many OpenSSL-for-iOS projects out there, for example this one, and get going.  
Using OpenSSL directly has a number of advantages, a few of them being lots of sample code and on-line documentation at http://openssl.org, and you can pretty much do anything you need to that's crypto-related.
Update: there are now multiple versions of OpenSSL available via Cocopods: OpenSSL and OpenSSL-Universal which should make importing OpenSSL into your iOS or OSX project a lot easier.
","1990","<iphone><objective-c><ios><encryption><public-key-encryption>","3","2","2","2014-03-17 01:02:24","","0","1","1330525","","2012-12-26 04:18:06","2012-12-24 19:38:11",""
"14025110","Exporting public key in pkcs#1 format on iOS?","How does one export an RSA public key that has been generated with SecKeyGeneratePair in pkcs#8 format?
I'm currently writing an iOS app that needs to be able to generate RSA private/public key pairs, sign a piece of content and export the public key in pkcs#8 format to be sent to the server. So far I'm generating my pair with SecKeyGeneratePair, retrieving my public and private keys with SecItemCopyMatching and signing things with SecKeyRawSign, which all seems to be working fine and the signature is verifying just fine for testing with SecKeyRawVerify. But I am unfortunately coming up completely blank on how to export the public key properly in pkcs#8.
Thank you in advance for any help.
","The process described on http://blog.wingsofhermes.org/?p=42 allows exporting properly formatted rsa public keys easily without the need for adding external libraries. In short, iOS was doing things properly except that it exports keys without proper encoding.
It wasn't the easiest post to find so hopefully this link to it saves someone some time in the future.
","1990","<iphone><objective-c><ios><encryption><public-key-encryption>","3","2","2","2014-03-17 01:02:24","","0","1","1330525","","2012-12-26 04:18:06","2012-12-24 19:38:11",""
"9594822","Why can't I get the public key out of a X509 certificate in PHP?","The following PHP code prints out this warning:

Warning: openssl_csr_get_public_key(): supplied resource is not a valid OpenSSL X.509 CSR resource in /home/swissbtc/www/bitcoins.ch/index.php on line 49

Code:
$Configs = array(       
        'digest_alg' => 'sha1',
        'x509_extensions' => 'v3_ca',
        'req_extensions' => 'v3_req',
        'private_key_bits' => 2048,
        'private_key_type' => OPENSSL_KEYTYPE_RSA,
        'encrypt_key' => true,
        'encrypt_key_cipher' => OPENSSL_CIPHER_3DES
);

//generate cert
$dn        = array('commonName' => 'test');
$privkey   = openssl_pkey_new($Configs);
$csr       = openssl_csr_new($dn, $privkey, $Configs);
$cert      = openssl_csr_sign($csr, null, $privkey, 365, $Configs);

//try to get public key
$publicKey = openssl_csr_get_public_key($cert);  //line 49

//try again to get the public key
openssl_x509_export($cert, $certout);
$publicKey = openssl_csr_get_public_key($certout);

Note: The first $publicKey (line 49) is empty and the second $publicKey (line 53) gets the boolean value ""false""
What's wrong with my code?
","This works for me:
$Configs = array(       
    'digest_alg' => 'sha1',
    'x509_extensions' => 'v3_ca',
    'req_extensions' => 'v3_req',
    'private_key_bits' => 2048,
    'private_key_type' => OPENSSL_KEYTYPE_RSA,
    'encrypt_key' => true,
    'encrypt_key_cipher' => OPENSSL_CIPHER_3DES
);

//generate cert
$dn        = array('commonName' => 'test');
$privkey   = openssl_pkey_new($Configs);
$csr       = openssl_csr_new($dn, $privkey, $Configs);
$cert      = openssl_csr_sign($csr, null, $privkey, 365, $Configs);
$publicKey = openssl_pkey_get_public($cert);

var_dump($publicKey);

","1983","<php><openssl><x509certificate><public-key-encryption>","1","2","1","2012-07-03 16:47:32","9618821","2","1","367456","","2012-07-03 16:47:32","2012-03-07 02:04:56",""
"19516617","How should an RSA Public Key be exposed over HTTP?","We have a requirement to expose an RSA Public Key as an HTTP resource - so
http://myhost.com/publickeys/akeyid
returns a public key.
I would like to return it with a correct Internet Media Type. What should that be? I confess I find the crypto RFCs fairly impenetrable.
And as a bonus, how do I translate easily from and to that format using the java.security standard libraries?
(It's easy enough to go from and to a SubjectPublicKeyInfo byte array as defined in http://tools.ietf.org/html/rfc3280#section-4.1 using java.security.RSAPublicKey.getEncoded() to serialize to bytes and a java.security.spec.X509EncodedKeySpec to deserialize those same bytes; but I can't find a registered media type for that format which suggests to me that I should be using some other format (an x.509 Certificate?). But then I struggle to work out how to do the translation.)
Thanks.
","One alternative would be to encode the PKCS#1 format RSA public key as a PEM file, and then use the MIME type:
   ""application/x-pem-file""

References: 

http://www.cryptosys.net/pki/rsakeyformats.html
http://pki-tutorial.readthedocs.org/en/latest/mime.html

Note: ""application/x-pem-file"" is not registered ... obviously! ... but is referenced in a number of catalogues of ""file types"".

You probably ought to deliver the key over HTTPS ...
","1967","<java><http><rsa><public-key-encryption>","6","5","1","2013-10-22 12:16:51","19517513","0","3","","","","2013-10-22 11:29:02",""
"53997902","How to get RSACryptoServiceProvider public and private key only in c#","I am running below code to get public and private key only, but it seems it outputs the whole XML format. I only need to output the keys as shown in Public and Private Key demo
        static RSACryptoServiceProvider rsa;
        private RSAParameters _privateKey;
        private RSAParameters _publicKey;
        public RSACrypto()
        {
            rsa = new RSACryptoServiceProvider(2048);
            _privateKey = rsa.ExportParameters(true);
            _publicKey = rsa.ExportParameters(false);

        }
        public string GetPublicKeyString()
        {
            var sw = new StringWriter();
            var xs = new XmlSerializer(typeof(RSAParameters));
            xs.Serialize(sw, _publicKey);
            return sw.ToString();
        }
        public string GetPrivateKeyString()
        {
            var sw = new StringWriter();
            var xs = new XmlSerializer(typeof(RSAParameters));
            xs.Serialize(sw, _privateKey);
            return sw.ToString();
        }

","Starting in .NET Core 3.0, this is (largely) built-in.
Writing SubjectPublicKeyInfo and RSAPrivateKey
.NET Core 3.0 built-in API
The output of the builtin API is the binary representation, to make them PEM you need to output the header, footer, and base64:
private static string MakePem(byte[] ber, string header)
{
    StringBuilder builder = new StringBuilder(""-----BEGIN "");
    builder.Append(header);
    builder.AppendLine(""-----"");

    string base64 = Convert.ToBase64String(ber);
    int offset = 0;
    const int LineLength = 64;

    while (offset < base64.Length)
    {
        int lineEnd = Math.Min(offset + LineLength, base64.Length);
        builder.AppendLine(base64.Substring(offset, lineEnd - offset));
        offset = lineEnd;
    }

    builder.Append(""-----END "");
    builder.Append(header);
    builder.AppendLine(""-----"");
    return builder.ToString();
}

So to produce the strings:
string publicKey = MakePem(rsa.ExportSubjectPublicKeyInfo(), ""PUBLIC KEY"");
string privateKey = MakePem(rsa.ExportRSAPrivateKey(), ""RSA PRIVATE KEY"");

Semi-manually
If you can't use .NET Core 3.0, but you can use pre-release NuGet packages, you can make use of the prototype ASN.1 writer package (which is the same code that's used internally in .NET Core 3.0; it's just that the API surface isn't finalized).
To make the public key:
private static string ToSubjectPublicKeyInfo(RSA rsa)
{
    RSAParameters rsaParameters = rsa.ExportParameters(false);

    AsnWriter writer = new AsnWriter(AsnEncodingRules.DER);
    writer.PushSequence();

    writer.PushSequence();
    writer.WriteObjectIdentifier(""1.2.840.113549.1.1.1"");
    writer.WriteNull();
    writer.PopSequence();

    AsnWriter innerWriter = new AsnWriter(AsnEncodingRules.DER);

    innerWriter.PushSequence();
    WriteRSAParameter(innerWriter, rsaParameters.Modulus);
    WriteRSAParameter(innerWriter, rsaParameters.Exponent);
    innerWriter.PopSequence();

    writer.WriteBitString(innerWriter.Encode());

    writer.PopSequence();
    return MakePem(writer.Encode(), ""PUBLIC KEY"");
}

And to make the private key:
private static string ToRSAPrivateKey(RSA rsa)
{
    RSAParameters rsaParameters = rsa.ExportParameters(true);

    AsnWriter writer = new AsnWriter(AsnEncodingRules.DER);
    writer.PushSequence();

    writer.WriteInteger(0);
    WriteRSAParameter(writer, rsaParameters.Modulus);
    WriteRSAParameter(writer, rsaParameters.Exponent);
    WriteRSAParameter(writer, rsaParameters.D);
    WriteRSAParameter(writer, rsaParameters.P);
    WriteRSAParameter(writer, rsaParameters.Q);
    WriteRSAParameter(writer, rsaParameters.DP);
    WriteRSAParameter(writer, rsaParameters.DQ);
    WriteRSAParameter(writer, rsaParameters.InverseQ);

    writer.PopSequence();
    return MakePem(writer.Encode(), ""RSA PRIVATE KEY"");
}

Reading them back
.NET Core 3.0 built-in API
Except that .NET Core 3.0 doesn't understand PEM encoding, so you have to do PEM->binary yourself:
private const string RsaPrivateKey = ""RSA PRIVATE KEY"";
private const string SubjectPublicKeyInfo = ""PUBLIC KEY"";

private static byte[] PemToBer(string pem, string header)
{
    // Technically these should include a newline at the end,
    // and either newline-or-beginning-of-data at the beginning.
    string begin = $""-----BEGIN {header}-----"";
    string end = $""-----END {header}-----"";

    int beginIdx = pem.IndexOf(begin);
    int base64Start = beginIdx + begin.Length;
    int endIdx = pem.IndexOf(end, base64Start);

    return Convert.FromBase64String(pem.Substring(base64Start, endIdx - base64Start));
}

Once that's done you can now load the keys:
using (RSA rsa = RSA.Create())
{
    rsa.ImportRSAPrivateKey(PemToBer(pemPrivateKey, RsaPrivateKey), out _);

    ...
}

using (RSA rsa = RSA.Create())
{
    rsa.ImportSubjectPublicKeyInfo(PemToBer(pemPublicKey, SubjectPublicKeyInfo), out _);

    ...
}

Semi-manually
If you can't use .NET Core 3.0, but you can use pre-release NuGet packages, you can make use of the prototype ASN.1 reader package (which is the same code that's used internally in .NET Core 3.0; it's just that the API surface isn't finalized).
For the public key:
private static RSA FromSubjectPublicKeyInfo(string pem)
{
    AsnReader reader = new AsnReader(PemToBer(pem, SubjectPublicKeyInfo), AsnEncodingRules.DER);
    AsnReader spki = reader.ReadSequence();
    reader.ThrowIfNotEmpty();

    AsnReader algorithmId = spki.ReadSequence();

    if (algorithmId.ReadObjectIdentifierAsString() != ""1.2.840.113549.1.1.1"")
    {
        throw new InvalidOperationException();
    }

    algorithmId.ReadNull();
    algorithmId.ThrowIfNotEmpty();

    AsnReader rsaPublicKey = spki.ReadSequence();

    RSAParameters rsaParameters = new RSAParameters
    {
        Modulus = ReadNormalizedInteger(rsaPublicKey),
        Exponent = ReadNormalizedInteger(rsaPublicKey),
    };

    rsaPublicKey.ThrowIfNotEmpty();

    RSA rsa = RSA.Create();
    rsa.ImportParameters(rsaParameters);
    return rsa;
}

private static byte[] ReadNormalizedInteger(AsnReader reader)
{
    ReadOnlyMemory<byte> memory = reader.ReadIntegerBytes();
    ReadOnlySpan<byte> span = memory.Span;

    if (span[0] == 0)
    {
        span = span.Slice(1);
    }

    return span.ToArray();
}

And because the private key values have to have the correct size arrays, the private key one is just a little trickier:
private static RSA FromRSAPrivateKey(string pem)
{
    AsnReader reader = new AsnReader(PemToBer(pem, RsaPrivateKey), AsnEncodingRules.DER);
    AsnReader rsaPrivateKey = reader.ReadSequence();
    reader.ThrowIfNotEmpty();

    if (!rsaPrivateKey.TryReadInt32(out int version) || version != 0)
    {
        throw new InvalidOperationException();
    }

    byte[] modulus = ReadNormalizedInteger(rsaPrivateKey);
    int halfModulusLen = (modulus.Length + 1) / 2;

    RSAParameters rsaParameters = new RSAParameters
    {
        Modulus = modulus,
        Exponent = ReadNormalizedInteger(rsaPrivateKey),
        D = ReadNormalizedInteger(rsaPrivateKey, modulus.Length),
        P = ReadNormalizedInteger(rsaPrivateKey, halfModulusLen),
        Q = ReadNormalizedInteger(rsaPrivateKey, halfModulusLen),
        DP = ReadNormalizedInteger(rsaPrivateKey, halfModulusLen),
        DQ = ReadNormalizedInteger(rsaPrivateKey, halfModulusLen),
        InverseQ = ReadNormalizedInteger(rsaPrivateKey, halfModulusLen),
    };

    rsaPrivateKey.ThrowIfNotEmpty();

    RSA rsa = RSA.Create();
    rsa.ImportParameters(rsaParameters);
    return rsa;
}

private static byte[] ReadNormalizedInteger(AsnReader reader, int length)
{
    ReadOnlyMemory<byte> memory = reader.ReadIntegerBytes();
    ReadOnlySpan<byte> span = memory.Span;

    if (span[0] == 0)
    {
        span = span.Slice(1);
    }

    byte[] buf = new byte[length];
    int skipSize = length - span.Length;
    span.CopyTo(buf.AsSpan(skipSize));
    return buf;
}

","1967","<c#><asp.net><rsa><public-key-encryption>","3","7","2","2019-01-02 19:27:57","54012096","5","","","","","2019-01-01 18:28:49",""
"53997902","How to get RSACryptoServiceProvider public and private key only in c#","I am running below code to get public and private key only, but it seems it outputs the whole XML format. I only need to output the keys as shown in Public and Private Key demo
        static RSACryptoServiceProvider rsa;
        private RSAParameters _privateKey;
        private RSAParameters _publicKey;
        public RSACrypto()
        {
            rsa = new RSACryptoServiceProvider(2048);
            _privateKey = rsa.ExportParameters(true);
            _publicKey = rsa.ExportParameters(false);

        }
        public string GetPublicKeyString()
        {
            var sw = new StringWriter();
            var xs = new XmlSerializer(typeof(RSAParameters));
            xs.Serialize(sw, _publicKey);
            return sw.ToString();
        }
        public string GetPrivateKeyString()
        {
            var sw = new StringWriter();
            var xs = new XmlSerializer(typeof(RSAParameters));
            xs.Serialize(sw, _privateKey);
            return sw.ToString();
        }

","The Bouncycastle C# library has some helper classes that can make this relatively easy. It is not well documented unfortunately. Here is an example:
using System;
using System.IO;
using System.Security.Cryptography;
using Org.BouncyCastle.OpenSsl;
using Org.BouncyCastle.Security;

namespace ExportToStandardFormats
{
    class MainClass
    {

        public static void Main(string[] args)
        {
            var rsa = new RSACryptoServiceProvider(2048);
            var rsaKeyPair = DotNetUtilities.GetRsaKeyPair(rsa);
            var writer = new StringWriter();
            var pemWriter = new PemWriter(writer);
            pemWriter.WriteObject(rsaKeyPair.Public);
            pemWriter.WriteObject(rsaKeyPair.Private);
            Console.WriteLine(writer);
        }
    }
}

","1967","<c#><asp.net><rsa><public-key-encryption>","3","2","2","2019-01-02 19:27:57","54012096","5","","","","","2019-01-01 18:28:49",""
"14248634","Why would SecKeyEncrypt return paramErr (-50) for input strings longer than 246 bytes?","I am using SecKeyEncrypt with a JSON formatted string as input. If pass SecKeyEncrypt a plainTextLength of less than 246, it works. If I pass it a length of 246 or more, it fails with return value: paramErr (-50).
It could be a matter of the string itself. An example of what I might send SecKeyEncrypt is:

{""handle"":""music-list"",""sym_key"":""MFwwDQYJKoZIhvcNAQEBBQADSwAwSAJBALeaEO7ZrjgOFGLBzBHZtQuzH2GNDYMLWP+fIFNu5Y+59C6HECY+jt0yOXXom2mzp/WYYI/9G+Ig8OD6YiKv2nMCAwEAAQ=="",""app_id"":""xgfdt.LibraryTestApp"",""api_key"":""7e080f74de3625b90dd293fc8be560a5cdfafc08""}

The 245th character is '0'.
The ONLY input that is changing between this working and is the plainTextLength. SecKeyGetBlockSize() is returning 256 to me, so any input up to 256 characters long should work.
Here is my encrypt method:

+ (NSData*)encrypt:(NSString*)data usingPublicKeyWithTag:(NSString*)tag
{

    OSStatus status = noErr;

    size_t cipherBufferSize;
    uint8_t *cipherBuffer;

    // [cipherBufferSize]
    size_t dataSize = 246;//[data lengthOfBytesUsingEncoding:NSUTF8StringEncoding];
    const uint8_t* textData = [[data dataUsingEncoding:NSUTF8StringEncoding] bytes];

    SecKeyRef publicKey = [Encryption copyPublicKeyForTag:tag];

    NSAssert(publicKey, @""The public key being referenced by tag must have been stored in the keychain before attempting to encrypt data using it!"");

    //  Allocate a buffer

    cipherBufferSize = SecKeyGetBlockSize(publicKey);
    // this value will not get modified, whereas cipherBufferSize may.
    const size_t fullCipherBufferSize = cipherBufferSize;
    cipherBuffer = malloc(cipherBufferSize);

    NSMutableData* accumulatedEncryptedData = [NSMutableData dataWithCapacity:0];

    //  Error handling

    for (int ii = 0; ii*fullCipherBufferSize < dataSize; ii++) {
        const uint8_t* dataToEncrypt = (textData+(ii*fullCipherBufferSize));
        const size_t subsize = (((ii+1)*fullCipherBufferSize) > dataSize) ? fullCipherBufferSize-(((ii+1)*fullCipherBufferSize) - dataSize) : fullCipherBufferSize;

        // Encrypt using the public key.
        status = SecKeyEncrypt(    publicKey,
                               kSecPaddingPKCS1,
                               dataToEncrypt,
                               subsize,
                               cipherBuffer,
                               &cipherBufferSize
                               );

        [accumulatedEncryptedData appendBytes:cipherBuffer length:cipherBufferSize];
    }

    if (publicKey) CFRelease(publicKey);

    free(cipherBuffer);

    return accumulatedEncryptedData;
}

","From the documentation:

plainTextLen
  Length in bytes of the data in the plainText buffer. This must be less than or equal to the value returned by the SecKeyGetBlockSize function. When PKCS1 padding is performed, the maximum length of data that can be encrypted is 11 bytes less than the value returned by the SecKeyGetBlockSize function (secKeyGetBlockSize() - 11).

(emphasis mine)
You're using PKCS1 padding. So if the block size is 256, you can only encrypt up to 245 bytes at a time.
","1942","<ios><public-key-encryption>","6","9","1","2013-01-23 00:48:48","14248727","0","1","650350","","2013-01-23 00:48:48","2013-01-09 23:58:08",""
"27383623","C# Get Public Key from Modulus and Exponent","Thanks for your time, everyone. My goal is to end up with, either as a byte array or string, my public key.
RSACryptoServiceProvider rsa = new RSACryptoServiceProvider();
string publicxml = rsa.ToXmlString(false);

string publicxml now contains a modulus and exponent. My question is, using these values, how can I generate a single public key to distribute to those who need it? 
In a more general sense, how do we generally combine exponents and moduli to make public keys?
Thanks!
","publicxml is already a single value comprised of many bits. You can distribute it to those who need it. There are many possible encodings. You should decide for yourself which one you want to use. This may depend on many factors such as support for different public key encodings on those platforms that you want to use.
","1939","<c#><rsa><public-key-encryption>","0","0","1","2014-12-09 16:35:24","27384043","2","","2069707","","2014-12-09 16:17:38","2014-12-09 16:13:18",""
"32433832","configuring SSLContext using existing SSL key/certificate pair in java (JSSE API)","I am working on a java-project where I should implement the SSL-protokol on the server-side. Well, this is the first time I will use SSL in my application, so I read a lot about ssl/tls and now I want to implement something in java. I will implement this process using JSSE API:
1) client will connect to me
2) I will make authentification with my pubic key certificate. I means that I will send the client a public key and its corresponding certificate
3) the client encrypt the secret-key using my public key and RSA-algorithm and send it to me
I have already the private key and certificate saved on a keystore on my computer. So I am hesited how to access them from my java-application. I do not know, which are the steps to do to acess them, since it is the first time i am dealing with this kind of stuff
I will use an SSLEngine. So I should firstly initialize an SSLContext using this code:
// First initialize the key and trust material.
    KeyStore ksKeys = KeyStore.getInstance(""JKS"");
    ksKeys.load(new FileInputStream(""/.../myKey""), passphrase);
    KeyStore ksTrust = KeyStore.getInstance(""JKS"");
    ksTrust.load(new FileInputStream(""/../myCertificate""), passphrase);

    sslContext = SSLContext.getInstance(""TLS"");
    sslContext.init( kmf.getKeyManagers(), tmf.getTrustManagers(), null);
    // We're ready for the engine.
    SSLEngine engine = sslContext.createSSLengine(hostname, port);

    // Use as client
    engine.setUseClientMode(true);

I am really new in the crypthography and  this is the first time I programming this stuff. Any Idea?
","At the server, both the public key and its certificate go into the KeyStore, along with the original private key, all under the same alias.
If the certificate is self-signed, you'll need to export it from there into the client's truststore.
You don't need to write code for this. Just set the system properties:
javax.net.ssl.keyStore
javax.net.ssl.keyStorePassword
javax.net.ssl.trustStore

as appropriate.
","1919","<ssl><public-key-encryption><public-key><jsse>","0","1","2","2015-09-10 12:02:48","32454527","7","2","4825307","","2015-09-10 12:02:48","2015-09-07 08:04:46",""
"32433832","configuring SSLContext using existing SSL key/certificate pair in java (JSSE API)","I am working on a java-project where I should implement the SSL-protokol on the server-side. Well, this is the first time I will use SSL in my application, so I read a lot about ssl/tls and now I want to implement something in java. I will implement this process using JSSE API:
1) client will connect to me
2) I will make authentification with my pubic key certificate. I means that I will send the client a public key and its corresponding certificate
3) the client encrypt the secret-key using my public key and RSA-algorithm and send it to me
I have already the private key and certificate saved on a keystore on my computer. So I am hesited how to access them from my java-application. I do not know, which are the steps to do to acess them, since it is the first time i am dealing with this kind of stuff
I will use an SSLEngine. So I should firstly initialize an SSLContext using this code:
// First initialize the key and trust material.
    KeyStore ksKeys = KeyStore.getInstance(""JKS"");
    ksKeys.load(new FileInputStream(""/.../myKey""), passphrase);
    KeyStore ksTrust = KeyStore.getInstance(""JKS"");
    ksTrust.load(new FileInputStream(""/../myCertificate""), passphrase);

    sslContext = SSLContext.getInstance(""TLS"");
    sslContext.init( kmf.getKeyManagers(), tmf.getTrustManagers(), null);
    // We're ready for the engine.
    SSLEngine engine = sslContext.createSSLengine(hostname, port);

    // Use as client
    engine.setUseClientMode(true);

I am really new in the crypthography and  this is the first time I programming this stuff. Any Idea?
","After being confused, I did a lot of research and I could find the solution. First of all, I will describe the situation then I will give the steps to solve the problem. Like I said in my Post, I had the private key (.key-file)  and the certificate (.cer file) and I need to use them in my java-application (server using ssl-protocol). So the first step to do is to create a keystore named.jks-file containing the certificate/key so that I can be able to use them for your java-based-server. To do this step I used the steps described in this link http://blog.jgc.org/2011/06/importing-existing-ssl-keycertificate.html
Now, how can I use my.jks-file in the above posted code?
Well this is a piece of code how to initialize your SSLEngine:
char [] keyphrase=""xxx"".toCharArray();
char [] passphrase= ""yyy"".toCharArray();

// First initialize the key and trust material.
KeyStore ksKeys = KeyStore.getInstance(""JKS"");
InputStream readStream = new FileInputStream(new File(""/.../file.jks""));
ks.load(readStream, passphrase );
// create an factory for key-managers
KeyManagerFactory   =KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());
kmf.init(ks, keyphrase);
SSLContext sslContext = SSLContext.getInstance(""TLS"");
//initialize the ssl-context
sslContext.init(kmf.getKeyManagers(),null,null);
// We're ready for the engine.
SSLEngine engine = sslContext.createSSLEngine(host, port);
// Use as client
engine.setUseClientMode(true);

","1919","<ssl><public-key-encryption><public-key><jsse>","0","0","2","2015-09-10 12:02:48","32454527","7","2","4825307","","2015-09-10 12:02:48","2015-09-07 08:04:46",""
"14838123","Error importing public key using cryptoapi CryptImportKey","I want to import public key blob to a CSP. but error occurred.
BYTE pbData[] ={0xEB,0x2A,0x38,0x56,0x86,0x61,0x88,0x7F,0xA1,0x80,0xBD,0xDB,0x5C,0xAB,0xD5,0xF2,0x1C,0x7B,0xFD,0x59,0xC0,0x90,0xCB,0x2D,0x24,0x5A,0x87,0xAC,0x25,0x30,0x62,0x88,0x27,0x29,0x29,0x3E,0x55,0x06,0x35,0x05,0x08,0xE7,0xF9,0xAA,0x3B,0xB7,0x7F,0x43,0x33,0x23,0x14,0x90,0xF9,0x15,0xF6,0xD6,0x3C,0x55,0xFE,0x2F,0x08,0xA4,0x9B,0x35,0x3F,0x44,0x4A,0xD3,0x99,0x3C,0xAC,0xC0,0x2D,0xB7,0x84,0xAB,0xBB,0x8E,0x42,0xA9,0xB1,0xBB,0xFF,0xFB,0x38,0xBE,0x18,0xD7,0x8E,0x87,0xA0,0xE4,0x1B,0x9B,0x8F,0x73,0xA9,0x28,0xEE,0x0C,0xCE,0xE1,0xF6,0x73,0x98,0x84,0xB9,0x77,0x7E,0x4F,0xE9,0xE8,0x8A,0x1B,0xBE,0x49,0x59,0x27,0xAC,0x4A,0x79,0x9B,0x31,0x81,0xD6,0x44,0x24,0x43};
USHORT modulusLengthInBytes = sizeof(pbData);
HCRYPTKEY hPublicKey;
DWORD keyBlobLength = sizeof(BLOBHEADER)+sizeof(RSAPUBKEY)+modulusLengthInBytes;
BYTE* keyBlob = (BYTE*)malloc(keyBlobLength);
BLOBHEADER* blobheader = (BLOBHEADER*) keyBlob;
blobheader->bType    = PUBLICKEYBLOB;
blobheader->bVersion = CUR_BLOB_VERSION;
blobheader->reserved = 0;
blobheader->aiKeyAlg = CALG_RSA_KEYX;
RSAPUBKEY* rsapubkey = (RSAPUBKEY*)keyBlob + sizeof(BLOBHEADER);
rsapubkey->magic     = 0x31415352;
rsapubkey->bitlen    = modulusLengthInBytes*8;
rsapubkey->pubexp    = 65537;         // Or whatever your public exponent is.
BYTE* modulus = keyBlob + sizeof(BLOBHEADER) + sizeof(RSAPUBKEY);
memcpy(modulus, pbData, modulusLengthInBytes);
bRet = CryptImportKey(hProv, keyBlob, keyBlobLength, 0, 0, &hPublicKey);
if (!bRet)
{
    dwRet = GetLastError();
}

CryptImportKey return 0 and dwRet is 0x80090004(NTE_BAD_LEN). I am very sure the length is correct. but still same error occurred.
","RSAPUBKEY* rsapubkey = (RSAPUBKEY*)keyBlob + sizeof(BLOBHEADER);

should instead read 
RSAPUBKEY* rsapubkey = (RSAPUBKEY*) (keyBlob + sizeof(BLOBHEADER));

","1906","<c><winapi><rsa><public-key-encryption><cryptoapi>","3","2","1","2013-05-23 10:41:17","","0","1","","","","2013-02-12 17:19:51",""
"49302369","GDPR: Encrypted logging in C#","The suggestion to encrypt log files as a means of protecting the personal data that might be contained in them is widespread.
What I've not seen is a good reference implementation, which is surprising given how many companies will need this.
In our particular case, we want to use public key encryption so that the files can not be read on the (weakly protected) system that generates them, and must be sent back to head office where we can look at them.
The best suggestion I've seen so far is ""use log4net but write your own appender using the RFC 3852 streaming implementation from BouncyCastle"". Does anyone have an advance on that?
","Technically, encrypting your log messages should be pretty easy. Using something like Serilog you could simply create a custom sink.
Just blind encrypting the whole log is probably going to limit the usefulness of the logs though. If you're centralizing your logging using something like ELK then you won't be able to search based on any field/part of your logs that you encrypt (for example, if you encrypt the machine name then you don't even know where the logs come from!). 
If the kind of information that you're dealing with genuinely is personally identifiable information covered by GDPR then maybe you just have to suck that up - but I'd make an effort to encrypt only sensitive information from your logs rather than just blanket encrypting everything... that would require a more sophisticated sink but it will make your log data way less crippled.
","1901","<c#><logging><encryption><public-key-encryption>","16","4","2","2018-03-22 06:08:03","","16","1","","","","2018-03-15 14:41:10",""
"49302369","GDPR: Encrypted logging in C#","The suggestion to encrypt log files as a means of protecting the personal data that might be contained in them is widespread.
What I've not seen is a good reference implementation, which is surprising given how many companies will need this.
In our particular case, we want to use public key encryption so that the files can not be read on the (weakly protected) system that generates them, and must be sent back to head office where we can look at them.
The best suggestion I've seen so far is ""use log4net but write your own appender using the RFC 3852 streaming implementation from BouncyCastle"". Does anyone have an advance on that?
","I agree with some of the commentators; personal data should not be a part of the log files. GDPR is not about the encryption - if you just encrypt personal data that does not mean that you're GDPR compliant. What will happen with the personal data in your log files when you receive ""forget me"" (Right to erasure) request from the individual? Or ""change my data"" (Right to rectification)?
However, if you need to log personal data, maybe the option can be to hash the information and store hashed version in the logs. In that case, you'll be able to find the specific data in the logs, by calculating the hash from the search string.
Related to a public key encryption part of your question, take a look: https://aws.amazon.com/kms or https://azure.microsoft.com/en-us/services/key-vault/
","1901","<c#><logging><encryption><public-key-encryption>","16","3","2","2018-03-22 06:08:03","","16","1","","","","2018-03-15 14:41:10",""
"46914542","How to base64 encode openssl generated key pem files?","I generate the private key 
openssl genrsa -out private_key.pem 2048

Then I generate the public key from the private key 
openssl rsa -in private_key.pem -out public_key.pem -outform PEM -pubout 

I would like to hard-code these keys into my java program. And I want to use it with the PrivateKey and PublicKey classes in java.
My initial thought is I have to base64 encode the .pem files. Then there must be some java methods to convert the base64 encoded keys to their respective PrivateKey and PublicKey classes.
Thoughts?
Openssl CLI does have the base64 encode command but ....
There's the usual:
-----BEGIN PUBLIC KEY-----
keyinfo
-----END PUBLIC KEY-----

Do I need to parse these away before doing the base64 encode?
","","1892","<java><encryption><public-key-encryption><encryption-asymmetric>","1","","0","2017-10-25 09:51:38","","2","","608639","","2017-10-25 09:51:38","2017-10-24 15:32:58","2017-10-25 13:32:11"
"46119708",".NET Core 2.0 Crypto sample not working - Error Cng v4.3 uses Algorithms v4.3 higher than referenced Algorithms v4.2","So I'm trying to get a sample compiling from .NET Core Api Docs ECDsaCng Class.  I got compile errors about are you missing an assembly.  I downloaded .NET Core 2.0 and then added reference to newly installed C:\Program Files\dotnet\shared\Microsoft.NETCore.App\2.0.0\System.Security.Cryptography.Cng.dll and some terms turned from black to light blue showing token recgonition but I got compile errors, I'm guessing this is a versioning issue. 
I started again from scratch after I installed .NET Core 2.0 in case people are wondering.  So this is a project created newly by the New Project Wizard with a fresh install.  So I'm stuck now (I'm the kind of guy who'll close all the windows and open them up again).
The code is given below.  and a typical error message is given as a block quote underneath.
// https://docs.microsoft.com/en-gb/dotnet/api/system.security.cryptography.ecdsacng?view=netcore-2.0
using System;
using System.IO;
using System.Security.Cryptography;
using System.Text;

//Added Dependencies/Reference to C:\Program Files\dotnet\shared\Microsoft.NETCore.App\2.0.0\System.Security.Cryptography.Cng.dll;

Namespace DotNetCoreEllipticCurveDigitalSignerConsl
{
    class Alice
    {
        public static void Main(string[] args)
        {
            Bob bob = new Bob();
            using (ECDsaCng dsa = new ECDsaCng())
            {
                dsa.HashAlgorithm = CngAlgorithm.Sha256;
                bob.key = dsa.Key.Export(CngKeyBlobFormat.EccPublicBlob);

                byte[] data = new byte[] { 21, 5, 8, 12, 207 };

                byte[] signature = dsa.SignData(data);

                bob.Receive(data, signature);
            }
        }


    }
    public class Bob
    {
        public byte[] key;

        public void Receive(byte[] data, byte[] signature)
        {
            using (ECDsaCng ecsdKey = new ECDsaCng(CngKey.Import(key, CngKeyBlobFormat.EccPublicBlob)))
            {
                if (ecsdKey.VerifyData(data, signature))
                    Console.WriteLine(""Data is good"");
                Else
                    Console.WriteLine(""Data is bad"");
            }
        }
    }
}


Severity  Code    Description Project File    Line    Suppression State
  Error CS1705  Assembly 'System.Security.Cryptography.Cng' with identity
  'System.Security.Cryptography.Cng, Version=4.3.0.0, Culture=neutral,
  PublicKeyToken=b03f5f7f11d50a3a' uses
  'System.Security.Cryptography.Algorithms, Version=4.3.0.0,
  Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' which has a higher
  version than referenced assembly
  'System.Security.Cryptography.Algorithms' with identity
  'System.Security.Cryptography.Algorithms, Version=4.2.0.0,
  Culture=neutral,
  PublicKeyToken=b03f5f7f11d50a3a'  DotNetCoreEllipticCurveDigitalSignerConsl   c:\users\simon\documents\visual
  studio
  2017\Projects\DotNetCoreEllipticCurveDigitalSignerConsl\DotNetCoreEllipticCurveDigitalSignerConsl\CSC 1   Active

EDIT: Adding csproj file as per request in comments
<Project Sdk=""Microsoft.NET.Sdk"">

  <PropertyGroup>
    <OutputType>Exe</OutputType>
    <TargetFramework>netcoreapp1.1</TargetFramework>
  </PropertyGroup>

  <ItemGroup>
    <Reference Include=""System.Security.Cryptography.Cng"">
      <HintPath>..\..\..\..\..\..\..\Program Files\dotnet\shared\Microsoft.NETCore.App\2.0.0\System.Security.Cryptography.Cng.dll</HintPath>
    </Reference>
  </ItemGroup>

</Project>

EDIT: I have manually edited csproj file to TargetFramework netcoreapp2.0 as per this blog Rick Strahl (MVP) Upgrading to .NET Core 2.0 Preview  Upon reoping the project there was a delay an in the Output window output from Package Manager said Restoring NuGet packages... and the status bar said Installing Microswoft.NET.Core.App 2.0.0.  Then the compilation error red squigglies disappeared.
And now it compiles, good news.  Bad news is there is now a runtime error 

","You should not be adding direct references to files in the SDK. What you need to do is add a reference to the package System.Security.Cryptography.Cng, then it will detect that you are using a package you have locally and use it instead of downloading a new copy.
","1892","<c#><.net-core><public-key-encryption>","4","5","2","2017-09-12 08:35:37","46171626","7","","3607273","","2017-09-10 18:54:04","2017-09-08 15:18:32",""
"46119708",".NET Core 2.0 Crypto sample not working - Error Cng v4.3 uses Algorithms v4.3 higher than referenced Algorithms v4.2","So I'm trying to get a sample compiling from .NET Core Api Docs ECDsaCng Class.  I got compile errors about are you missing an assembly.  I downloaded .NET Core 2.0 and then added reference to newly installed C:\Program Files\dotnet\shared\Microsoft.NETCore.App\2.0.0\System.Security.Cryptography.Cng.dll and some terms turned from black to light blue showing token recgonition but I got compile errors, I'm guessing this is a versioning issue. 
I started again from scratch after I installed .NET Core 2.0 in case people are wondering.  So this is a project created newly by the New Project Wizard with a fresh install.  So I'm stuck now (I'm the kind of guy who'll close all the windows and open them up again).
The code is given below.  and a typical error message is given as a block quote underneath.
// https://docs.microsoft.com/en-gb/dotnet/api/system.security.cryptography.ecdsacng?view=netcore-2.0
using System;
using System.IO;
using System.Security.Cryptography;
using System.Text;

//Added Dependencies/Reference to C:\Program Files\dotnet\shared\Microsoft.NETCore.App\2.0.0\System.Security.Cryptography.Cng.dll;

Namespace DotNetCoreEllipticCurveDigitalSignerConsl
{
    class Alice
    {
        public static void Main(string[] args)
        {
            Bob bob = new Bob();
            using (ECDsaCng dsa = new ECDsaCng())
            {
                dsa.HashAlgorithm = CngAlgorithm.Sha256;
                bob.key = dsa.Key.Export(CngKeyBlobFormat.EccPublicBlob);

                byte[] data = new byte[] { 21, 5, 8, 12, 207 };

                byte[] signature = dsa.SignData(data);

                bob.Receive(data, signature);
            }
        }


    }
    public class Bob
    {
        public byte[] key;

        public void Receive(byte[] data, byte[] signature)
        {
            using (ECDsaCng ecsdKey = new ECDsaCng(CngKey.Import(key, CngKeyBlobFormat.EccPublicBlob)))
            {
                if (ecsdKey.VerifyData(data, signature))
                    Console.WriteLine(""Data is good"");
                Else
                    Console.WriteLine(""Data is bad"");
            }
        }
    }
}


Severity  Code    Description Project File    Line    Suppression State
  Error CS1705  Assembly 'System.Security.Cryptography.Cng' with identity
  'System.Security.Cryptography.Cng, Version=4.3.0.0, Culture=neutral,
  PublicKeyToken=b03f5f7f11d50a3a' uses
  'System.Security.Cryptography.Algorithms, Version=4.3.0.0,
  Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' which has a higher
  version than referenced assembly
  'System.Security.Cryptography.Algorithms' with identity
  'System.Security.Cryptography.Algorithms, Version=4.2.0.0,
  Culture=neutral,
  PublicKeyToken=b03f5f7f11d50a3a'  DotNetCoreEllipticCurveDigitalSignerConsl   c:\users\simon\documents\visual
  studio
  2017\Projects\DotNetCoreEllipticCurveDigitalSignerConsl\DotNetCoreEllipticCurveDigitalSignerConsl\CSC 1   Active

EDIT: Adding csproj file as per request in comments
<Project Sdk=""Microsoft.NET.Sdk"">

  <PropertyGroup>
    <OutputType>Exe</OutputType>
    <TargetFramework>netcoreapp1.1</TargetFramework>
  </PropertyGroup>

  <ItemGroup>
    <Reference Include=""System.Security.Cryptography.Cng"">
      <HintPath>..\..\..\..\..\..\..\Program Files\dotnet\shared\Microsoft.NETCore.App\2.0.0\System.Security.Cryptography.Cng.dll</HintPath>
    </Reference>
  </ItemGroup>

</Project>

EDIT: I have manually edited csproj file to TargetFramework netcoreapp2.0 as per this blog Rick Strahl (MVP) Upgrading to .NET Core 2.0 Preview  Upon reoping the project there was a delay an in the Output window output from Package Manager said Restoring NuGet packages... and the status bar said Installing Microswoft.NET.Core.App 2.0.0.  Then the compilation error red squigglies disappeared.
And now it compiles, good news.  Bad news is there is now a runtime error 

","I created a new .NET Core 2 Console App on a Windows 10 machine, referenced System.Security.Cryptography.Cng as a NuGet package and copied your code.
I got a NullReferenceException. The problem is, the ECDSA algorithm doesn't seem to know the hash algorithm, as it doesn't get it from the public key... Setting it manually works for me:
class Alice
{
    public static void Main(string[] args)
    {
        Bob bob = new Bob();
        using (ECDsaCng dsa = new ECDsaCng())
        {
            dsa.HashAlgorithm = CngAlgorithm.Sha256;
            bob.key = dsa.Key.Export(CngKeyBlobFormat.EccPublicBlob);

            byte[] data = new byte[] { 21, 5, 8, 12, 207 };

            byte[] signature = dsa.SignData(data);

            bob.Receive(data, signature);
        }
    }


}
public class Bob
{
    public byte[] key;

    public void Receive(byte[] data, byte[] signature)
    {
        using (ECDsaCng ecsdKey = new ECDsaCng(CngKey.Import(key, CngKeyBlobFormat.EccPublicBlob)))
        {
            // set hash algorithm manually here
            ecsdKey.HashAlgorithm = CngAlgorithm.Sha256;
            if (ecsdKey.VerifyData(data, signature))
                Console.WriteLine(""Data is good"");
            else
                Console.WriteLine(""Data is bad"");
        }
    }
}

","1892","<c#><.net-core><public-key-encryption>","4","4","2","2017-09-12 08:35:37","46171626","7","","3607273","","2017-09-10 18:54:04","2017-09-08 15:18:32",""
"28045052","How to authenticate a public key with certificate authority using Python?","import OpenSSL

key = ...
signature = ...
data = ...

x509 = OpenSSL.crypto.load_certificate(OpenSSL.crypto.FILETYPE_ASN1, key)
OpenSSL.crypto.verify(x509, signature, data, 'sha1')

So far, I am able to do all of this without any problems.  However, it doesn't feel like this is enough security, since the key itself is given to me via an URL (that I am supposed to trust*), and the method to build the signature is publicly available.
So, say the key is said to be verified by ""VeriSign Class 3 Code Signing 2010 CA"", can anyone tell me how I can go about checking that this is a valid claim?   
I'm guessing I need to have the VeriSign certificate locally on my machine.   Assuming that I do, where do I go from there?
Thanks!
*the URL is given to me as a parameter in a JSON request.  Sure, the URL will be HTTPS and I can check the domain name and all that.  But it seems like I should be doing checks on the certificate itself
","Maybe I only partly address your question. It seems that your largest worry is the security of the channel via which you obtain the key. You do not show any code of how you obtain that key, but you said that you retrieve it via HTTPS and now you want to verify the authenticity of this connection by certificate verification.
You can comfortably do so using the well-established third-party web client framework requests.
Quote from the docs:

Requests can verify SSL certificates for HTTPS requests, just like a
  web browser. To check a host’s SSL certificate, you can use the verify
  argument:

requests.get(url, verify=True)

Also:

You can pass verify the path to a CA_BUNDLE file with certificates of
  trusted CAs.

The latter could look like
requests.get(url, verify='/path/to/cert.pem')

In case you really want to take control (and reduce complexity), then load the right file from http://www.symantec.com/page.jsp?id=roots and take the verify='/path/to/cert.pem' approach. I guess you need http://www.symantec.com/content/en/us/enterprise/verisign/roots/Class-3-Public-Primary-Certification-Authority-G2.pem
","1873","<python><ssl><openssl><public-key-encryption><x509>","6","2","2","2015-01-28 15:12:30","28183709","0","1","152018","","2015-01-20 13:50:24","2015-01-20 12:09:15",""
"28045052","How to authenticate a public key with certificate authority using Python?","import OpenSSL

key = ...
signature = ...
data = ...

x509 = OpenSSL.crypto.load_certificate(OpenSSL.crypto.FILETYPE_ASN1, key)
OpenSSL.crypto.verify(x509, signature, data, 'sha1')

So far, I am able to do all of this without any problems.  However, it doesn't feel like this is enough security, since the key itself is given to me via an URL (that I am supposed to trust*), and the method to build the signature is publicly available.
So, say the key is said to be verified by ""VeriSign Class 3 Code Signing 2010 CA"", can anyone tell me how I can go about checking that this is a valid claim?   
I'm guessing I need to have the VeriSign certificate locally on my machine.   Assuming that I do, where do I go from there?
Thanks!
*the URL is given to me as a parameter in a JSON request.  Sure, the URL will be HTTPS and I can check the domain name and all that.  But it seems like I should be doing checks on the certificate itself
","You are right that you should check the certificate itself.  And yes, you need the VeriSign root certificate(s) (and any other intermediate certificates to have the complete chain of trust) which signed the certificate to be checked.
Current Symantec (VeriSign) root certificates can be found here in zipfile.
Download and unzip the zip file and find all certificates you wish to trust and put them together (in pem format) into one certificate bundle file.
Now you need to do the actual verification.  Unfortunately, the OpenSSL call you need is X509_verify_certificate.  I looked at the source for both pyopenssl and M2Crypto and neither expose that call, so there's no direct Python code you can call to verify the certificate with either of those packages.
However, since you are using pyopenssl you obviously have the openssl library available.  Thus you probably already have or can easily install the openssl command-line tool set.  If so, you can call the openssl verify command through a pipe by doing something like this:
cert = OpenSSL.crypto.load_certificate(OpenSSL.crypto.FILETYPE_ASN1, key)
# the command like likes pem format
cert_pem = OpenSSL.crypto.dump_certificate(OpenSSL.crypto.FILETYPE_PEM, cert)

# the bundle that you created from the zip extraction
certificate_bundle = 'verisign-root-bundle.pem'

# Pipe the cert to the openssl verify command and check the return code
# a return code of 0 is successful verify
import subprocess
p = subprocess.Popen(['openssl', 'verify', '-CAfile', certificate_bundle],
                     stdin=subprocess.PIPE)
p.communicate(input=cert_pem)
p.wait()
if (p.returncode == 0):
    print('Certificate Verified.')
else:
    print('Problem with certificate')

The above pipe runs the command
openssl verify -CAfile ca.bundle certificate.pem

Finally, if you're not familiar with openssl, the command to show certificates is
openssl x509 -inform PEM -text -in certificate.pem

Hope this helps!
","1873","<python><ssl><openssl><public-key-encryption><x509>","6","2","2","2015-01-28 15:12:30","28183709","0","1","152018","","2015-01-20 13:50:24","2015-01-20 12:09:15",""
"15364144","Where RSA is used?","Someone please state two or three applications of RSA algorithm. I heard that RSA is used for SSL. Is that true?
","RSA is used in cryptography in Key-based authentication.SSH uses this method of key generation as it is considered very secure.
see here for more
","1866","<rsa><public-key-encryption><encryption-asymmetric>","-1","0","2","2013-03-12 14:40:02","15364270","1","","","","","2013-03-12 14:35:04","2013-03-12 14:42:09"
"15364144","Where RSA is used?","Someone please state two or three applications of RSA algorithm. I heard that RSA is used for SSL. Is that true?
","Yes, that is true.  RSA is an encryption algorithm.
Example uses:

SSL
SSH
Digital signatures
PGP

","1866","<rsa><public-key-encryption><encryption-asymmetric>","-1","4","2","2013-03-12 14:40:02","15364270","1","","","","","2013-03-12 14:35:04","2013-03-12 14:42:09"
"23208813","How do you generate, sign and read digital signatures in java?","I am becoming intermediate java programmer. I have tried hard to find out how to sign and read digital signatures in java for a net program i have been working on. I have been able to generate private and public keys with the tutorial at http://docs.oracle.com/javase/tutorial/security/apisign/index.html but have not been able to do anything with them. Although I know how to generate keys i didn't put it in because i wasn't sure if i had done them correctly.
Here is a simplified version of my code:
Main class:
    import java.io.File;
    import java.io.FileInputStream;
    import java.io.IOException;
    import java.security.KeyFactory;
    import java.security.KeyPair;
    import java.security.NoSuchAlgorithmException;
    import java.security.PrivateKey;
    import java.security.PublicKey;
    import java.security.spec.InvalidKeySpecException;
    import java.security.spec.PKCS8EncodedKeySpec;
    import java.security.spec.X509EncodedKeySpec;
    import java.util.Scanner;

public class Main {
public static void main(String[] args) throws IOException {
    Main main = new Main();
    Scanner s = new Scanner(System.in);
    while (true) {
        //This is where i added a command detector so that the program can be in one class
        System.out.println(""Choose a command from the following:\nGenerate keys\nSign message\nRead message"");
        String command = s.nextLine();
        if (command.equalsIgnoreCase(""Generate key"")
                || command.equalsIgnoreCase(""Generate"")) {

            /* The code for generating the keys is here */
            File f = new File(""C:\\Users\\spencer\\Documents\\Stack ex\\src\\app"",""public.key"");
            File fi = new File(""C:\\Users\\spencer\\Documents\\Stack ex\\src\\app"",""private.key"");
            if(!f.isFile()||!fi.isFile()) {
                Make make =new Make();
                Make.main(args);
            }
            else{
                try {
                    String path = ""C:\\Users\\spencer\\Documents\\ds test 3\\src\\app"";

                    KeyPair loadedKeyPair = main.LoadKeyPair(path, ""DSA"");
                    System.out.println(""Key pair already exists!"");
                    System.out.println(""Loaded Key Pair:"");
                    main.dumpKeyPair(loadedKeyPair);
                } catch (Exception e) {
                    e.printStackTrace();
                    return;
                }
            }

        }
        if (command.equalsIgnoreCase(""Sign message"")
                || command.equalsIgnoreCase(""Sign"")) {
            long signature = 0;
            System.out.println(""What is your private key"");
            String pkey = s.nextLine();
            long prkey = Long.parseLong(pkey);
            System.out.println(""What is you message"");
            String message = s.nextLine();
            /* The code for signing the message goes here */
            System.out.println(""Signature:""+signature);
        } else if (command.equalsIgnoreCase(""Read message"")
                || command.equalsIgnoreCase(""Read"")) {
            String message = null;
            System.out.println(""What is the signature"");
            String sign = s.nextLine();
            long signature = Long.parseLong(sign);
            /* The code for reading the message goes here */
            System.out.println(message);
        }
    }
}
private void dumpKeyPair(KeyPair keyPair) {
    PublicKey pub = keyPair.getPublic();
    System.out.println(""Public Key: "" + getHexString(pub.getEncoded()));

    PrivateKey priv = keyPair.getPrivate();
    System.out.println(""Private Key: "" + getHexString(priv.getEncoded()));
}
private String getHexString(byte[] b) {
    String result = """";
    for (int i = 0; i < b.length; i++) {
        result += Integer.toString((b[i] & 0xff) + 0x100, 16).substring(1);
    }
    return result;
}
public KeyPair LoadKeyPair(String path, String algorithm)
        throws IOException, NoSuchAlgorithmException,
        InvalidKeySpecException {
    // Read Public Key.
    File filePublicKey = new File(path + ""/public.key"");
    FileInputStream fis = new FileInputStream(path + ""/public.key"");
    byte[] encodedPublicKey = new byte[(int) filePublicKey.length()];
    fis.read(encodedPublicKey);
    fis.close();

    // Read Private Key.
    File filePrivateKey = new File(path + ""/private.key"");
    fis = new FileInputStream(path + ""/private.key"");
    byte[] encodedPrivateKey = new byte[(int) filePrivateKey.length()];
    fis.read(encodedPrivateKey);
    fis.close();

    // Generate KeyPair.
    KeyFactory keyFactory = KeyFactory.getInstance(algorithm);
    X509EncodedKeySpec publicKeySpec = new X509EncodedKeySpec(
            encodedPublicKey);
    PublicKey publicKey = keyFactory.generatePublic(publicKeySpec);

    PKCS8EncodedKeySpec privateKeySpec = new PKCS8EncodedKeySpec(
            encodedPrivateKey);
    PrivateKey privateKey = keyFactory.generatePrivate(privateKeySpec);

    return new KeyPair(publicKey, privateKey);
}
    }

Make class:
    import java.io.*;
    import java.security.*;
    import java.security.spec.*;

  public class Make {

public static void main(String args[]) {
    Make adam = new Make();
    try {
        String path = ""C:\\Users\\spencer\\Documents\\Stack ex\\src\\app"";

        KeyPairGenerator keyGen = KeyPairGenerator.getInstance(""DSA"");

        keyGen.initialize(512);
        KeyPair generatedKeyPair = keyGen.genKeyPair();

        System.out.println(""Generated Key Pair"");
        adam.dumpKeyPair(generatedKeyPair);
        adam.SaveKeyPair(path, generatedKeyPair);


    } catch (Exception e) {
        e.printStackTrace();
        return;
    }
}

private void dumpKeyPair(KeyPair keyPair) {
    PublicKey pub = keyPair.getPublic();
    System.out.println(""Public Key: "" + getHexString(pub.getEncoded()));

    PrivateKey priv = keyPair.getPrivate();
    System.out.println(""Private Key: "" + getHexString(priv.getEncoded()));
}

private String getHexString(byte[] b) {
    String result = """";
    for (int i = 0; i < b.length; i++) {
        result += Integer.toString((b[i] & 0xff) + 0x100, 16).substring(1);
    }
    return result;
}

public void SaveKeyPair(String path, KeyPair keyPair) throws IOException {
    PrivateKey privateKey = keyPair.getPrivate();
    PublicKey publicKey = keyPair.getPublic();

    // Store Public Key.
    X509EncodedKeySpec x509EncodedKeySpec = new X509EncodedKeySpec(
            publicKey.getEncoded());
    FileOutputStream fos = new FileOutputStream(path + ""/public.key"");
    fos.write(x509EncodedKeySpec.getEncoded());
    fos.close();

    // Store Private Key.
    PKCS8EncodedKeySpec pkcs8EncodedKeySpec = new PKCS8EncodedKeySpec(
            privateKey.getEncoded());
    fos = new FileOutputStream(path + ""/private.key"");
    fos.write(pkcs8EncodedKeySpec.getEncoded());
    fos.close();
}
    }

I need a little help with signing and reading the signature.
","","1864","<java><digital-signature><public-key-encryption><private-key><digital-certificate>","1","","0","2014-10-11 23:39:24","","5","1","3558475","","2014-10-11 23:39:24","2014-04-22 01:27:03",""
"17931487","Load certificate keys into CngKey class for use with DiffieHellman (ECDiffieHellmanCng class)","This is related to .NET / C#. Lets assume there is a certificate + private key (P521 ECC one) inside a PFX or a PKCS#12 file. We have loaded this certificate and it's private key into the Windows certificate store by installing it (either double clicking the PFX or running certutil -f -p myPfxPassword -importPFX MY SomeEcCert.pfx). I have noted that if the certificate is compatible (eg. p521 curve), it is automatically installed as a CNG certificate/key.
Now, how can I load the private key into a CngKey so I can then use it inside the ECDiffieHellmanCng class? I would also like to load the X509 (CNG) certificate to read it's serial #, issuer, common name etc for some bookkeeping. 
var myCngKey = SomehowLoadTheCngKey(""my ecc certificate""); // <== ??
var myDH = new ECDiffieHellmanCng(myCngKey);

","Well, .NET's doesn't have a good API into CNG. If you even scratch the surface of their API you immediately see it's kinda ridiculous, especially considering both are from Microsoft and CNG is the most serious of all Crypto APIs on the entire windows platform.
So you need to use CLRSecurity which provides C# interfaces (via P/Invoke) into the C++ CNG API. Even with that it's not the nicest of API designs; but it helps.
// Load the cert, many ways, one implementation
var store = new X509Store(StoreName.My, StoreLocation.LocalMachine);
store.Open(OpenFlags.OpenExistingOnly | OpenFlags.ReadOnly);
var certs = store.Certificates.Find(X509FindType.FindBySubjectName, ""My cert subject name"", true);
store.Close();

if (certs.Count > 0)
    cert = certs[0];
else
    return;

// Magic happens here! We load the private CngKey (if it exists)
// You need CLR Security for this, it manages the P/Invoke
// into the C++ api behind the scenes. 
var pvtCngKey = cert.GetCngPrivateKey(); 

// Create the DiffieHellman helper
var ecDh = new ECDiffieHellmanCng(ourPvtEcCngKey)
{
   KeyDerivationFunction = ECDiffieHellmanKeyDerivationFunction.Hash,
   HashAlgorithm = CngAlgorithm.Sha256
};

ECDiffieHellmanCngPublicKey theirPubCngKey = LoadOtherPartiesCngPublicKey(theirCert);
byte[] symKey = ecDh.DeriveKeyMaterial(theirPubCngKey);

","1857","<c#><encryption><public-key-encryption><diffie-hellman><cng>","3","1","1","2014-04-02 18:23:25","","0","","862563","","2013-08-09 01:28:36","2013-07-29 18:27:31",""
"14037204","import .net public xml key to javascript in RSA","I have public key in XML that created in C#
the format is:
<Modulus>rYDd94biRAJ1P6j68xjARl......and so on</Modulus>
<Exponent>A**B</Exponent>

I want to create this key in Javascript, and encrypt string with it,
how can I do it?
Thanks,
","After so many hours researching, testing, giving up, researching again, etc., for a solution on RSA interoperability for .NET and Javascript, I have found this library:
http://www.jocys.com/Common/JsClasses/Documents/
Their classes have the same working code as the RSACryptoServiceProvider on the server.
What you have to do:

Download the source code from their SVN (user guest, empty password):
https://jocys.com:8443/svn/Default/Projects/Jocys.com/WebSites/WebApp/Common/JsClasses/
Rename the files from *.debug.js to *.js. See the list of files below, on (3).
Add the required files to your html page
<script type=""text/javascript"" src=""js/System.js""></script>
<script type=""text/javascript"" src=""js/System.IO.js""></script>
<script type=""text/javascript"" src=""js/System.Text.js""></script>
<script type=""text/javascript"" src=""js/System.Convert.js""></script>
<script type=""text/javascript"" src=""js/System.BigInt.js""></script>
<script type=""text/javascript"" src=""js/System.BitConverter.js""></script>
<script type=""text/javascript"" src=""js/System.Security.Cryptography.js""></script>
<script type=""text/javascript"" src=""js/System.Security.Cryptography.SHA1.js""></script>
<script type=""text/javascript"" src=""js/System.Security.Cryptography.HMACSHA1.js""></script>
<script type=""text/javascript"" src=""js/System.Security.Cryptography.RSA.js""></script>

Add this javascript code to encrypt your text:
function RsaEncrypt()
{
    //a public key generated from their sample.
    //your should generate yours and stamp it here.
    var xmlParams =
    ""<RSAKeyValue>"" +
        ""<Modulus>pxtmFnrGI6Sb8ziyY+NRUDuQ4b/ETw5WabQ4daFQqzsCEr/6J/LLBU/2D5mO5/Wu5U/Rya1E55aYFZeaZMNqAw==</Modulus>"" +
        ""<Exponent>AQAB</Exponent>"" +
        ""<P>2TsVXWPEvDIJv/gd2rX9k0UOyXuaYgoAchIH6vUicis=</P>"" +
        ""<Q>xO4+OYREQfqYRQK7y73+RaUG0IxobT0OQ0c+Ok2hc4k=</Q>"" +
        ""<DP>K7/xgpiIU9rECeyfnp/OjS14V+3T3vDivBaTj6eFI3c=</DP>"" +
        ""<DQ>K4N9ClZ4gp+tn6oP9t//XEIvtEsiE+kmyqTmUhmvMAk=</DQ>"" +
        ""<InverseQ>p7o4BOlKZQZ693R1ViZ66y5gTjUkNNTd2za7/1YGBCs=</InverseQ>"" +
        ""<D>XZqFVrYy4qhECruJgVZFp/GVuD5Y0gev88nVjl5r911QT+I8vgJSklTso7jTlpMtf2oe7UZ0WRWEtgPS3tZn4Q==</D>"" +
    ""</RSAKeyValue>"";
    var rsa = new System.Security.Cryptography.RSACryptoServiceProvider();
    rsa.FromXmlString(xmlParams);

    // Encrypt
    var decryptedBytes = System.Text.Encoding.UTF8.GetBytes(text);
    var doOaepPadding = true;
    var encryptedBytes = rsa.Encrypt(decryptedBytes, doOaepPadding);
    var encryptedString = System.Convert.ToBase64String(encryptedBytes);
    return encryptedString;
}


Look for documentation (link above) on how to generate the private and public keys. The code is quite the same as you would manually write .NET on server.
You can also check their test page
","1853","<javascript><rsa><public-key-encryption>","2","1","2","2019-05-05 13:49:47","18026423","1","","","","","2012-12-26 07:10:38",""
"14037204","import .net public xml key to javascript in RSA","I have public key in XML that created in C#
the format is:
<Modulus>rYDd94biRAJ1P6j68xjARl......and so on</Modulus>
<Exponent>A**B</Exponent>

I want to create this key in Javascript, and encrypt string with it,
how can I do it?
Thanks,
","Also you can save public key in PEM format in C#:
private static string ExportPublicKey(RSACryptoServiceProvider csp)
    {
        var parameters = csp.ExportParameters(false);
        using (var stream = new MemoryStream())
        {
            var writer = new BinaryWriter(stream);
            writer.Write((byte)0x30); // SEQUENCE
            using (var innerStream = new MemoryStream())
            {
                var innerWriter = new BinaryWriter(innerStream);
                EncodeIntegerBigEndian(innerWriter, new byte[] { 0x00 }); // Version
                EncodeIntegerBigEndian(innerWriter, parameters.Modulus);
                EncodeIntegerBigEndian(innerWriter, parameters.Exponent);
                EncodeIntegerBigEndian(innerWriter, parameters.Exponent); // instead of parameters.D
                EncodeIntegerBigEndian(innerWriter, parameters.Exponent); // instead of parameters.P
                EncodeIntegerBigEndian(innerWriter, parameters.Exponent); // instead of parameters.Q
                EncodeIntegerBigEndian(innerWriter, parameters.Exponent); // instead of parameters.DP
                EncodeIntegerBigEndian(innerWriter, parameters.Exponent); // instead of parameters.DQ
                EncodeIntegerBigEndian(innerWriter, parameters.Exponent); // instead of parameters.InverseQ
                var length = (int)innerStream.Length;
                EncodeLength(writer, length);
                writer.Write(innerStream.GetBuffer(), 0, length);
            }

            char[] base64 = Convert.ToBase64String(stream.GetBuffer(), 0, (int)stream.Length).ToCharArray();
            StringBuilder res = new StringBuilder();
            res.AppendLine(""-----BEGIN RSA PUBLIC KEY-----"");
            for (int i = 0; i < base64.Length; i += 64)
            {
                int l = Math.Min(64, base64.Length - i);
                for (int j = 0; j < l; j++) res.Append(base64[i + j]);
                res.AppendLine();
            }
            res.AppendLine(""-----END RSA PUBLIC KEY-----"");
            return res.ToString();
        }
    }

    private static void EncodeIntegerBigEndian(BinaryWriter stream, byte[] value, bool forceUnsigned = true)
    {
        stream.Write((byte)0x02); // INTEGER
        var prefixZeros = 0;
        for (var i = 0; i < value.Length; i++)
        {
            if (value[i] != 0) break;
            prefixZeros++;
        }
        if (value.Length - prefixZeros == 0)
        {
            EncodeLength(stream, 1);
            stream.Write((byte)0);
        }
        else
        {
            if (forceUnsigned && value[prefixZeros] > 0x7f)
            {
                // Add a prefix zero to force unsigned if the MSB is 1
                EncodeLength(stream, value.Length - prefixZeros + 1);
                stream.Write((byte)0);
            }
            else
            {
                EncodeLength(stream, value.Length - prefixZeros);
            }
            for (var i = prefixZeros; i < value.Length; i++)
            {
                stream.Write(value[i]);
            }
        }
    }

    private static void EncodeLength(BinaryWriter stream, int length)
    {
        if (length < 0) throw new ArgumentOutOfRangeException(""length"", ""Length must be non-negative"");
        if (length < 0x80)
        {
            // Short form
            stream.Write((byte)length);
        }
        else
        {
            // Long form
            var temp = length;
            var bytesRequired = 0;
            while (temp > 0)
            {
                temp >>= 8;
                bytesRequired++;
            }
            stream.Write((byte)(bytesRequired | 0x80));
            for (var i = bytesRequired - 1; i >= 0; i--)
            {
                stream.Write((byte)(length >> (8 * i) & 0xff));
            }
        }
    }

","1853","<javascript><rsa><public-key-encryption>","2","0","2","2019-05-05 13:49:47","18026423","1","","","","","2012-12-26 07:10:38",""
"32571366","addIdentity in JSch is private key of calling program's Server","""Server 1"" is reading from and writing to ""Server 2"" using SSH.

""Server 1"" is having ""Server 1's"" private key and public key of ""Server 2"".
""Server 2"" is having ""Server 2's"" private key and public key of ""Server 1"".

In JSch, when I use a Java program to communicate from ""Server 1"" to ""Server 2"", the program is using addIdentity method. This method is using ""Server 1's"" private key and JSch will not send this to anybody (""Server 2""), am I right?
Am confused with mentioning private key in this in addIdentity method. If possible please give me some JSch related doc which enlighten me more.
","Your understanding is correct.
The .addIdentity is used to specify what private key should be used to locally encrypt the data before sending them to the remote server (and to decrypt the incoming data). The private key itself is not sent anywhere. Only a public key is.
Note that the .addIdentity loads a key pair (both the public and the private key). Even if you use an overload that takes prvkey path only, the JSch assumes that the public key file has the same name, just .pub extension; or that the ""private key"" file actually contains both public and private key.

For details, read about Public-key/asymmetric cryptography.

Though note that the key is a private key of the account you are connecting with to the remote server. It's not (should not be) a private key of the local machine (even if the machine happens to be a [SSH] server).
","1852","<java><ssh><public-key-encryption><jsch><private-key>","1","4","1","2015-09-29 06:56:25","32579140","0","1","850848","","2015-09-15 06:33:05","2015-09-14 18:18:56",""
"9007912","How does SSL support in PHP PDO (MySQL) work?","I'm familiar with the public/private key negotiation implemented in HTTPS, which is why I am confused by the following driver options that are apparently available (though not officially documented) for PDO's MySQL driver:
PDO::MYSQL_ATTR_SSL_KEY
PDO::MYSQL_ATTR_SSL_CERT
PDO::MYSQL_ATTR_SSL_CA

The link suggests they point to files stored locally - yet why would a copy of anything besides the CA certificate be stored on the client? Has anyone successfully made an encrypted connection using this method?
","This pertains to client certificates that the client must have in order to be able to connect to the server, i.e. that the client must verify its identity (yes, SSL can work the other way around as well). Start by reading the general section Using SSL for Secure Connections, then see the REQUIRE clauses in the GRANT syntax:


REQUIRE X509 means that the client must have a valid certificate but that the exact certificate, issuer, and subject do not matter. The only requirement is that it should be possible to verify its signature with one of the CA certificates.
REQUIRE ISSUER 'issuer' places the restriction on connection attempts that the client must present a valid X509 certificate issued by CA 'issuer'. If the client presents a certificate that is valid but has a different issuer, the server rejects the connection. Use of X509 certificates always implies encryption, so the SSL option is unnecessary in this case.
...


","1839","<php><mysql><ssl><pdo><public-key-encryption>","4","2","1","2012-01-26 01:38:06","9012965","0","","160213","","2012-01-26 00:47:52","2012-01-25 18:14:31",""
"20721529","ssh passwordless login fails, permissions ok","I set the password-less authentication up for a server A1 and my laptop L. This works.
I want to set the same up for another server A2.
So i copied the public key printed in the file ~/.ssh/authorized_keys of A1, and i printed the same public key in the file ~/.ssh/authorized_keys of A2.
The permissions are all right, but the authentication between my laptop L and the server A2 doesn't work. 
The following is the output of ssh 
OpenSSH_5.9p1 Debian-5ubuntu1.1, OpenSSL 1.0.1 14 Mar 2012
debug1: Reading configuration data /etc/ssh/ssh_config
debug1: /etc/ssh/ssh_config line 19: Applying options for *
debug2: ssh_connect: needpriv 0
debug1: Connecting to xxx.xxx.xxx.xxx [xxx.xxx.xxx.xxx] port 22.
debug1: Connection established.
debug3: Incorrect RSA1 identifier
debug3: Could not load ""/home/user/.ssh/id_rsa"" as a RSA1 public key
debug1: identity file /home/user/.ssh/id_rsa type 1
debug1: Checking blacklist file /usr/share/ssh/blacklist.RSA-2048
debug1: Checking blacklist file /etc/ssh/blacklist.RSA-2048
debug1: identity file /home/user/.ssh/id_rsa-cert type -1
debug1: identity file /home/user/.ssh/id_dsa type -1
debug1: identity file /home/user/.ssh/id_dsa-cert type -1
debug1: identity file /home/user/.ssh/id_ecdsa type -1
debug1: identity file /home/user/.ssh/id_ecdsa-cert type -1
debug1: Remote protocol version 2.0, remote software version OpenSSH_5.9p1 Debian-5ubuntu1.1
debug1: match: OpenSSH_5.9p1 Debian-5ubuntu1.1 pat OpenSSH*
debug1: Enabling compatibility mode for protocol 2.0
debug1: Local version string SSH-2.0-OpenSSH_5.9p1 Debian-5ubuntu1.1
debug2: fd 3 setting O_NONBLOCK
debug3: load_hostkeys: loading entries for host ""xxx.xxx.xxx.xxx"" from file ""/home/user/.ssh/known_hosts""
debug3: load_hostkeys: found key type ECDSA in file /home/user/.ssh/known_hosts:7
debug3: load_hostkeys: loaded 1 keys
debug3: order_hostkeyalgs: prefer hostkeyalgs: ecdsa-sha2-nistp256-cert-v01@openssh.com,ecdsa-sha2-nistp384-cert-v01@openssh.com,ecdsa-sha2-nistp521-cert-v01@openssh.com,ecdsa-sha2-nistp256,ecdsa-sha2-nistp384,ecdsa-sha2-nistp521
debug1: SSH2_MSG_KEXINIT sent
debug1: SSH2_MSG_KEXINIT received
debug2: kex_parse_kexinit: ecdh-sha2-nistp256,ecdh-sha2-nistp384,ecdh-sha2-nistp521,diffie-hellman-group-exchange-sha256,diffie-hellman-group-exchange-sha1,diffie-hellman-group14-sha1,diffie-hellman-group1-sha1
debug2: kex_parse_kexinit: ecdsa-sha2-nistp256-cert-v01@openssh.com,ecdsa-sha2-nistp384-cert-v01@openssh.com,ecdsa-sha2-nistp521-cert-v01@openssh.com,ecdsa-sha2-nistp256,ecdsa-sha2-nistp384,ecdsa-sha2-nistp521,ssh-rsa-cert-v01@openssh.com,ssh-dss-cert-v01@openssh.com,ssh-rsa-cert-v00@openssh.com,ssh-dss-cert-v00@openssh.com,ssh-rsa,ssh-dss
debug2: kex_parse_kexinit: aes128-ctr,aes192-ctr,aes256-ctr,arcfour256,arcfour128,aes128-cbc,3des-cbc,blowfish-cbc,cast128-cbc,aes192-cbc,aes256-cbc,arcfour,rijndael-cbc@lysator.liu.se
debug2: kex_parse_kexinit: aes128-ctr,aes192-ctr,aes256-ctr,arcfour256,arcfour128,aes128-cbc,3des-cbc,blowfish-cbc,cast128-cbc,aes192-cbc,aes256-cbc,arcfour,rijndael-cbc@lysator.liu.se
debug2: kex_parse_kexinit: hmac-md5,hmac-sha1,umac-64@openssh.com,hmac-sha2-256,hmac-sha2-256-96,hmac-sha2-512,hmac-sha2-512-96,hmac-ripemd160,hmac-ripemd160@openssh.com,hmac-sha1-96,hmac-md5-96
debug2: kex_parse_kexinit: hmac-md5,hmac-sha1,umac-64@openssh.com,hmac-sha2-256,hmac-sha2-256-96,hmac-sha2-512,hmac-sha2-512-96,hmac-ripemd160,hmac-ripemd160@openssh.com,hmac-sha1-96,hmac-md5-96
debug2: kex_parse_kexinit: none,zlib@openssh.com,zlib
debug2: kex_parse_kexinit: none,zlib@openssh.com,zlib
debug2: kex_parse_kexinit: 
debug2: kex_parse_kexinit: 
debug2: kex_parse_kexinit: first_kex_follows 0 
debug2: kex_parse_kexinit: reserved 0 
debug2: kex_parse_kexinit: ecdh-sha2-nistp256,ecdh-sha2-nistp384,ecdh-sha2-nistp521,diffie-hellman-group-exchange-sha256,diffie-hellman-group-exchange-sha1,diffie-hellman-group14-sha1,diffie-hellman-group1-sha1
debug2: kex_parse_kexinit: ssh-rsa,ssh-dss,ecdsa-sha2-nistp256
debug2: kex_parse_kexinit: aes128-ctr,aes192-ctr,aes256-ctr,arcfour256,arcfour128,aes128-cbc,3des-cbc,blowfish-cbc,cast128-cbc,aes192-cbc,aes256-cbc,arcfour,rijndael-cbc@lysator.liu.se
debug2: kex_parse_kexinit: aes128-ctr,aes192-ctr,aes256-ctr,arcfour256,arcfour128,aes128-cbc,3des-cbc,blowfish-cbc,cast128-cbc,aes192-cbc,aes256-cbc,arcfour,rijndael-cbc@lysator.liu.se
debug2: kex_parse_kexinit: hmac-md5,hmac-sha1,umac-64@openssh.com,hmac-sha2-256,hmac-sha2-256-96,hmac-sha2-512,hmac-sha2-512-96,hmac-ripemd160,hmac-ripemd160@openssh.com,hmac-sha1-96,hmac-md5-96
debug2: kex_parse_kexinit: hmac-md5,hmac-sha1,umac-64@openssh.com,hmac-sha2-256,hmac-sha2-256-96,hmac-sha2-512,hmac-sha2-512-96,hmac-ripemd160,hmac-ripemd160@openssh.com,hmac-sha1-96,hmac-md5-96
debug2: kex_parse_kexinit: none,zlib@openssh.com
debug2: kex_parse_kexinit: none,zlib@openssh.com
debug2: kex_parse_kexinit: 
debug2: kex_parse_kexinit: 
debug2: kex_parse_kexinit: first_kex_follows 0 
debug2: kex_parse_kexinit: reserved 0 
debug2: mac_setup: found hmac-md5
debug1: kex: server->client aes128-ctr hmac-md5 none
debug2: mac_setup: found hmac-md5
debug1: kex: client->server aes128-ctr hmac-md5 none
debug1: sending SSH2_MSG_KEX_ECDH_INIT
debug1: expecting SSH2_MSG_KEX_ECDH_REPLY
debug1: Server host key: ECDSA 0c:ec:a0:46:02:2d:57:39:88:3d:5a:dc:68:15:b0:91
debug3: load_hostkeys: loading entries for host ""xxx.xxx.xxx.xxx"" from file ""/home/user/.ssh/known_hosts""
debug3: load_hostkeys: found key type ECDSA in file /home/user/.ssh/known_hosts:7
debug3: load_hostkeys: loaded 1 keys
debug1: Host 'xxx.xxx.xxx.xxx' is known and matches the ECDSA host key.
debug1: Found key in /home/user/.ssh/known_hosts:7
debug1: ssh_ecdsa_verify: signature correct
debug2: kex_derive_keys
debug2: set_newkeys: mode 1
debug1: SSH2_MSG_NEWKEYS sent
debug1: expecting SSH2_MSG_NEWKEYS
debug2: set_newkeys: mode 0
debug1: SSH2_MSG_NEWKEYS received
debug1: Roaming not allowed by server
debug1: SSH2_MSG_SERVICE_REQUEST sent
debug2: service_accept: ssh-userauth
debug1: SSH2_MSG_SERVICE_ACCEPT received
debug2: key: /home/user/.ssh/id_rsa (0x7f4fedcdc9d0)
debug2: key: /home/user/.ssh/id_dsa ((nil))
debug2: key: /home/user/.ssh/id_ecdsa ((nil))
debug1: Authentications that can continue: publickey,password
debug3: start over, passed a different list publickey,password
debug3: preferred gssapi-keyex,gssapi-with-mic,publickey,keyboard-interactive,password
debug3: authmethod_lookup publickey
debug3: remaining preferred: keyboard-interactive,password
debug3: authmethod_is_enabled publickey
debug1: Next authentication method: publickey
debug1: Offering RSA public key: /home/user/.ssh/id_rsa
debug3: send_pubkey_test
debug2: we sent a publickey packet, wait for reply
debug1: Authentications that can continue: publickey,password
debug1: Trying private key: /home/user/.ssh/id_dsa
debug3: no such identity: /home/user/.ssh/id_dsa
debug1: Trying private key: /home/user/.ssh/id_ecdsa
debug3: no such identity: /home/user/.ssh/id_ecdsa
debug2: we did not send a packet, disable method
debug3: authmethod_lookup password
debug3: remaining preferred: ,password
debug3: authmethod_is_enabled password
debug1: Next authentication method: password

","Problem:
Ubuntu sshd does not support keys generated with ecdsa-sha2-nistp256 KexAlgorithms
if you have access to the host running sshd check your authentication logfile, i guess you'd have something like this:
userauth_pubkey: unsupported public key algorithm: ecdsa-sha2-nistp256
Solution:
use a recent OpenSSH version
","1801","<authentication><login><ssh><passwords><public-key-encryption>","0","0","1","2014-10-13 13:40:58","","2","","2756409","","2014-10-13 13:40:58","2013-12-21 17:16:18",""
"42266533","Decrypt Non-Armored PGP Files With OpenPGP.js","I am working on a Node application into which I have built a decrypter function, and have used the Openpgp.js npm module to make this work. I take in various submitted PGP client files made with our public key, decrypt them using our private key as they come in, and place the decrypted versions in a folder for me to access, and all seems to be well....as long as the files are armored. Here are some sample lines of the code showing the order of events:
const encryptedData = fs.readFileSync(encryptedFilePath, 'utf8')
openpgp.decrypt({
        message: openpgp.message.readArmored(encryptedData),
        publicKeys,
        privateKey
}).then( (decrypted) => { fs.writeFile(decryptedFilePath, decrypted.data } )

When an armored file comes through, all is well and I get the decrypted file in the specified folder. These files when opened in a text editor are formatted like this:
-----BEGIN PGP MESSAGE-----
WBh2X7KwfEBDx0LEE1FzlnvxZs44o62FclpTazJpcl9J7DjwVfg9cHCID0TAN6Y6
B3b5bCQQFe1wTgpIkVtd0mFGQx7KGHj4FGte53qseVxC2bfq9PGKRIAUg6olr+82

However, we have clients that encrypt files with the armored option off, so they come in a hexidecimal-type format when opened in a text editor....
7403 436d e6c0 f941 daac 945b 9a81 f066
6cd2 0032 5df0 9ca2 23a0 6eec a7bb f24c
a941 99a8 1053 ae23 f88b 245c f709 c2b2

.....or as encoded text files, which look like this:
DµÉ‰í+�3K€Ð�˜PªeZ_|Ò®ó0��ãZqRµ3!ŒpuÉW�NZrìÚk´
Aˆ›œiêø8�Ú�ól:äÎŸ”�6‡)
w�¬ÌŒWÝÚ¢�Q��œ�œ?�H¨¿�œ//�ÃBA�´>(%°�e�

(These last two resemble what I see when I console log ""encryptedData"" above in my code example.)
Whenever any non-armored files come in, the process fails and I initially got a couple different errors depending on the type shown above. I took away the 'utf8' encoding on the fs.readFileSync and put ""fromBinary"" in place of ""readArmored"" to work with the data as binary thinking that might work, but then I get errors about ""Invalid session key for decryption"". So then I tried using the ""decryptSessionKey"" function before the main decrypt as it shows in the docs, and this gets me an undefined key and an error about ""No symmetrically encrypted session key packet found"". Besides, I'm probably barking up the wrong tree, as using binary with Openpgp.js seems to require a password, which I'm thinking is different than the passphrase that unlocks my private key, which is the only password I have. 
I have searched all through the Openpgp.js documentation and Googled like crazy, but can't seem to find a solid procedure on how to amend my code which works for ASCII armored files to decrypt files that are not armored. (Every single file that comes in, however, decrypts quickly and without error when using a desktop decrypting program like PGP Desktop, so I can't figure out where my discrepancy is and why the solution isn't obvious.)  Anyone have any experience with this or a possible solution? 
","The non-armored version of openpgp.message.readArmored() is openpgp.message.read()
So something like this should work:
const encryptedData = fs.readFileSync(encryptedFilePath, 'utf8')

if encryptedData.startsWith('-----BEGIN PGP MESSAGE-----')
    encryptedMessage = openpgp.message.readArmored(encryptedData)
else
    var TextEncoder = require('text-encoding').TextEncoder;
    var encryptedUint8 = new TextEncoder().encode(encryptedData);
    encryptedMessage = openpgp.message.read(encryptedUint8)

openpgp.decrypt({
    message: encryptedMessage,
    publicKeys,
    privateKey
}).then( (decrypted) => { fs.writeFile(decryptedFilePath, decrypted.data } )

(The var TextEncoder line is not required here if you load TextEncoder earlier in your code)
","1795","<node.js><encryption><public-key-encryption><openpgp><openpgp.js>","8","2","1","2017-03-02 22:49:53","","2","","","","","2017-02-16 06:30:44",""
"19431827","How can I convert a private key file from Java into .net x509Certificate2","I am writing a .NET client app that consumes a Java web service and need to sign sent requests (related to this other question).
I have been supplied with a private.key file (and a .X509 certificate) and a Java source example. The certificate looks like the public key of service, and the private.key is what I use to sign requests.
In the Java source, I can see they convert the file to a byte array and pass it into the constructor of the PKCS8EncodedKeySpec class.
A bit of googling suggests this file is a private key hash (though I may be wrong).
Is there any way to use this in .Net or convert it to something .Net can use?
This link mentions converting a public/private key, but I don't have both, or if it would work. Does anyone have more information to work on? such as what this file is exactly?
If I read this in as a byte array and convert it to a string, I get a load of HEX (e.g. AA-BB-06 etc) but I can't convert this to anything useful no matter the encoding I use.
This documentation suggests it is in PKCS #8 standard.
I tried (suggested by @gtrig) the command:
openssl rsa -in pkcs8privatekey.der -inform der -out privatekey.pem

but this gives me the following:
unable to load Private Key
32096:error:0D0680A8:asn1 encoding routines:ASN1_CHECK_TLEN:wrong tag:tasn_dec.c:1306:
32096:error:0D06C03A:asn1 encoding routines:ASN1_D2I_EX_PRIMITIVE:nested asn1 error:tasn_dec.c:830:
32096:error:0D08303A:asn1 encoding routines:ASN1_TEMPLATE_NOEXP_D2I:nested asn1 error:tasn_dec.c:749:Field=n, Type=RSA
32096:error:0D09A00D:asn1 encoding routines:d2i_PrivateKey:ASN1 lib:d2i_pr.c:99:

I also get similar errors with NET and PEM -inform args.
and:
openssl asn1parse -in private.key

gives me the error: 
""Error: offset too large""

I've just found that if I convert it to a base 64 string
  Dim ba As Byte() = IO.File.ReadAllBytes(""C:\private.key"")
  Dim toString1 As String = System.Convert.ToBase64String(ba)

which gives me a string which starts MIICdgIBADANB and is 924 characters long.
trying the following command gives me
openssl rsa -in private.key -text -noout

unable to load Private Key
17978:error:0906D06C:PEM routines:PEM_read_bio:no start line:pem_lib.c:647:Expec                            ting: ANY PRIVATE KEY

Any further suggestions?
","It's probably not a ""hash"" of the private key. It's most likely the private key in PKCS#8 format.
You can use the openssl command line tool to create a PKCS#12 keystore that should then be able to be used to construct an X509Certificate2 object.
First you will likely have to convert your private key from DER to PEM format, which can also be done in openssl:
openssl rsa -in pkcs8privatekey.der -inform der -out privatekey.pem

Then create the PKCS#12 keystore with:
openssl pkcs12 -export -name myalias -in mycert.crt -inkey privatekey.pem -out keystore.p12

Finally, you should be able to import this into X509Certificate2 object:
X509Certificate2 cert = X509Certificate2(""C:\Path\keystore.p12"", ""password"");

","1784","<java><.net><wcf><wcf-security><public-key-encryption>","1","2","3","2013-12-09 10:10:38","20467914","0","1","-1","","2017-05-23 10:27:20","2013-10-17 16:08:28",""
"19431827","How can I convert a private key file from Java into .net x509Certificate2","I am writing a .NET client app that consumes a Java web service and need to sign sent requests (related to this other question).
I have been supplied with a private.key file (and a .X509 certificate) and a Java source example. The certificate looks like the public key of service, and the private.key is what I use to sign requests.
In the Java source, I can see they convert the file to a byte array and pass it into the constructor of the PKCS8EncodedKeySpec class.
A bit of googling suggests this file is a private key hash (though I may be wrong).
Is there any way to use this in .Net or convert it to something .Net can use?
This link mentions converting a public/private key, but I don't have both, or if it would work. Does anyone have more information to work on? such as what this file is exactly?
If I read this in as a byte array and convert it to a string, I get a load of HEX (e.g. AA-BB-06 etc) but I can't convert this to anything useful no matter the encoding I use.
This documentation suggests it is in PKCS #8 standard.
I tried (suggested by @gtrig) the command:
openssl rsa -in pkcs8privatekey.der -inform der -out privatekey.pem

but this gives me the following:
unable to load Private Key
32096:error:0D0680A8:asn1 encoding routines:ASN1_CHECK_TLEN:wrong tag:tasn_dec.c:1306:
32096:error:0D06C03A:asn1 encoding routines:ASN1_D2I_EX_PRIMITIVE:nested asn1 error:tasn_dec.c:830:
32096:error:0D08303A:asn1 encoding routines:ASN1_TEMPLATE_NOEXP_D2I:nested asn1 error:tasn_dec.c:749:Field=n, Type=RSA
32096:error:0D09A00D:asn1 encoding routines:d2i_PrivateKey:ASN1 lib:d2i_pr.c:99:

I also get similar errors with NET and PEM -inform args.
and:
openssl asn1parse -in private.key

gives me the error: 
""Error: offset too large""

I've just found that if I convert it to a base 64 string
  Dim ba As Byte() = IO.File.ReadAllBytes(""C:\private.key"")
  Dim toString1 As String = System.Convert.ToBase64String(ba)

which gives me a string which starts MIICdgIBADANB and is 924 characters long.
trying the following command gives me
openssl rsa -in private.key -text -noout

unable to load Private Key
17978:error:0906D06C:PEM routines:PEM_read_bio:no start line:pem_lib.c:647:Expec                            ting: ANY PRIVATE KEY

Any further suggestions?
","you can use the key tool UI. You need to know the type of the certificate they gave you , typically either a JKS key of PEM.
","1784","<java><.net><wcf><wcf-security><public-key-encryption>","1","0","3","2013-12-09 10:10:38","20467914","0","1","-1","","2017-05-23 10:27:20","2013-10-17 16:08:28",""
"19431827","How can I convert a private key file from Java into .net x509Certificate2","I am writing a .NET client app that consumes a Java web service and need to sign sent requests (related to this other question).
I have been supplied with a private.key file (and a .X509 certificate) and a Java source example. The certificate looks like the public key of service, and the private.key is what I use to sign requests.
In the Java source, I can see they convert the file to a byte array and pass it into the constructor of the PKCS8EncodedKeySpec class.
A bit of googling suggests this file is a private key hash (though I may be wrong).
Is there any way to use this in .Net or convert it to something .Net can use?
This link mentions converting a public/private key, but I don't have both, or if it would work. Does anyone have more information to work on? such as what this file is exactly?
If I read this in as a byte array and convert it to a string, I get a load of HEX (e.g. AA-BB-06 etc) but I can't convert this to anything useful no matter the encoding I use.
This documentation suggests it is in PKCS #8 standard.
I tried (suggested by @gtrig) the command:
openssl rsa -in pkcs8privatekey.der -inform der -out privatekey.pem

but this gives me the following:
unable to load Private Key
32096:error:0D0680A8:asn1 encoding routines:ASN1_CHECK_TLEN:wrong tag:tasn_dec.c:1306:
32096:error:0D06C03A:asn1 encoding routines:ASN1_D2I_EX_PRIMITIVE:nested asn1 error:tasn_dec.c:830:
32096:error:0D08303A:asn1 encoding routines:ASN1_TEMPLATE_NOEXP_D2I:nested asn1 error:tasn_dec.c:749:Field=n, Type=RSA
32096:error:0D09A00D:asn1 encoding routines:d2i_PrivateKey:ASN1 lib:d2i_pr.c:99:

I also get similar errors with NET and PEM -inform args.
and:
openssl asn1parse -in private.key

gives me the error: 
""Error: offset too large""

I've just found that if I convert it to a base 64 string
  Dim ba As Byte() = IO.File.ReadAllBytes(""C:\private.key"")
  Dim toString1 As String = System.Convert.ToBase64String(ba)

which gives me a string which starts MIICdgIBADANB and is 924 characters long.
trying the following command gives me
openssl rsa -in private.key -text -noout

unable to load Private Key
17978:error:0906D06C:PEM routines:PEM_read_bio:no start line:pem_lib.c:647:Expec                            ting: ANY PRIVATE KEY

Any further suggestions?
","The following commands turn this into a format usable in windows:
Convert the private key from pkcs8/DER to a PEM file format
openssl pkcs8 -nocrypt -in dealerPrivate.key -inform der -outform pem -out private.pem

Convert the certificate from x509/DER to a PEM file format
openssl x509 -inform der -in dealerCertificate.x509 -out public.pem

Merge the two files into a pkcs12 file – you will be prompted for password to protect the p12 with
openssl pkcs12 -export -inkey private.pem -in public.pem -out mycert.p12

pkcs12 can be used directly in windows.
","1784","<java><.net><wcf><wcf-security><public-key-encryption>","1","0","3","2013-12-09 10:10:38","20467914","0","1","-1","","2017-05-23 10:27:20","2013-10-17 16:08:28",""
"20961473","Curve25519 implementation for javascript?","Is there a curve25519 implementation for javascript available? 
It needs to be able to both sign and verify. Only thing I've found just signs.
","Curve25519 implements Diffie-Hellman key exchange; it doesn't sign or verify anything, it only generates a shared key via scalar multiplication. If you're looking for signatures, use Ed25519, which is an implementation of Schnorr signature algorithm on the same elliptic curve.
Here are links to some JavaScript implementations of both Curve25519 and Ed25519:

http://www.flownet.com/ron/code/ (GPL license)
https://github.com/tonyg/js-nacl (compiled with Emscripten)

","1781","<javascript><encryption><public-key-encryption>","1","0","2","2016-01-28 12:20:05","21485782","1","","311196","","2014-01-31 16:27:19","2014-01-06 23:49:41","2018-02-07 10:59:19"
"20961473","Curve25519 implementation for javascript?","Is there a curve25519 implementation for javascript available? 
It needs to be able to both sign and verify. Only thing I've found just signs.
","You can use this (https://github.com/rev22/curve255js) implementation
","1781","<javascript><encryption><public-key-encryption>","1","-1","2","2016-01-28 12:20:05","21485782","1","","311196","","2014-01-31 16:27:19","2014-01-06 23:49:41","2018-02-07 10:59:19"
"9461781","Encrypt with JavaScript and decrypt with Java based on shared key","Please suggest the best way in which we encrypt in JavaScript and decrypt in java based on shared key.
","There are a few shared-key encryption libraries out there. Just make sure to use one that you can run in Java. One I've found useful is Daniel Rench's Blowfish library. 
I would be generally be very reluctant to do anything serious with any in-browser implementation, mainly because I seriously doubt the peer review of JS encryption is thorough enough to adequately trust. I completely dismiss the criticisms of JS-based encryption as being inherently weaker than other client-based tool, though. Just because you can debug a JS script in the browser and is the code exists in plaintext doesn't mean it's any different inherently than any other client-based encryption system. ""Easier"" does not mean ""less secure"". Any encryption software that runs outside of a secure system is equally at risk of tampering and manipulation no matter what. And, if implemented correctly, a JS cypher tool shares the same weaknesses of all similar tools and no more. 
","1772","<java><javascript><encryption><public-key-encryption>","0","1","1","2012-02-27 08:42:30","9462150","5","","157247","","2012-02-27 08:13:50","2012-02-27 08:09:19","2013-05-06 07:29:38"
"7046997","Aren't private keys vulnerable in memory?","I'm trying to understand what happens when I use a password-protected private key to generate a message digest.
I read here that password-protected private keys are just encrypted using a password-based symmetric key.
Once I enter the correct password, how is a digest generated without exposing the unprotected private key?
","At some point the key has to be available in memory for use by the crypto algorithm.
There have been interesting attacks to try and grab valuable information from memory.  One I read about involved plugging a device into a Firewire controller and using direct memory access to poke around for interesting things.
http://www.hermann-uwe.de/blog/physical-memory-attacks-via-firewire-dma-part-1-overview-and-mitigation
It's entirely possible that either a program with necessary privilege to read the memory location holding the key, or hardware utilizing DMA, can grab a private key from RAM.
","1766","<security><public-key-encryption>","3","1","4","2011-08-13 13:40:15","7050751","4","1","-1","","2017-05-23 12:34:07","2011-08-12 22:29:45",""
"7046997","Aren't private keys vulnerable in memory?","I'm trying to understand what happens when I use a password-protected private key to generate a message digest.
I read here that password-protected private keys are just encrypted using a password-based symmetric key.
Once I enter the correct password, how is a digest generated without exposing the unprotected private key?
","Generally yes, once decrypted the key will be stored in system memory as cleartext until the application or operating system marks it's address as re-writable.  With PGP Desktop, it's possible to manually clear the cached private key, a nice feature I wish more applications offered.
","1766","<security><public-key-encryption>","3","2","4","2011-08-13 13:40:15","7050751","4","1","-1","","2017-05-23 12:34:07","2011-08-12 22:29:45",""
"7046997","Aren't private keys vulnerable in memory?","I'm trying to understand what happens when I use a password-protected private key to generate a message digest.
I read here that password-protected private keys are just encrypted using a password-based symmetric key.
Once I enter the correct password, how is a digest generated without exposing the unprotected private key?
","Yes, it is exposed in RAM, and unless the operating system supports protection of memory against paging, and the application uses that feature, the private key can be paged to disk ""in the clear."" Development tools and active attacks can look for it in memory.
This is one reason specialized hardware cryptographic modules exist. These perform operations with the private key in their tamper-proof memory space; the application can never access the private key itself, it delegates cryptographic operations to the device.
","1766","<security><public-key-encryption>","3","2","4","2011-08-13 13:40:15","7050751","4","1","-1","","2017-05-23 12:34:07","2011-08-12 22:29:45",""
"7046997","Aren't private keys vulnerable in memory?","I'm trying to understand what happens when I use a password-protected private key to generate a message digest.
I read here that password-protected private keys are just encrypted using a password-based symmetric key.
Once I enter the correct password, how is a digest generated without exposing the unprotected private key?
","At some point the cryptographic primitives in your code will need to access and use the actual value of the key. There's simply no way around that. In a simple analogy, you cannot compute a + b if you don't know a.
The big question concerning secure software design thus boils down to how long sensitive information will persist in an unprotected state. Any sort of password caching is your enemy here, but even if neither the password nor the decrypted key are explicitly cached, they're still in memory at some point. Freezing a computer with liquid nitrogen can keep the memory content intact for a considerable amount of time, and forcing a swap-to-disk is another problem.
Good cryptographic programs should take care to overwrite the memory content as promptly as feasible and minimize the amount of time that sensitive information is retained in readable form. This requires careful analysis of which information is critical (e.g. the user's password input), and platform-specific knowledge of memory management (e.g. can you request non-pageable memory?).
It all depends on your threat model - which sort of attack do you need to protect against? If a rootkit monitors all your memory, you might be in trouble, though that rootkit would probably just read the user's password entry from the keyboard anyway.
This is a complicated issue, and there's extensive research into secure hardware design. In general, the more access an attacker has to your machine, the more likely it is that she'll be able to read sensitive data. Good design can only strive to minimize the surface of attack.
","1766","<security><public-key-encryption>","3","1","4","2011-08-13 13:40:15","7050751","4","1","-1","","2017-05-23 12:34:07","2011-08-12 22:29:45",""
"9136639","NTRUEncrypt C implementation","I can't find an NTRUEncrypt implementation in C, is it available as open source?
I want to implement this encryption in my kernel driver, is it possible?
","There are a couple listed in NTRUEncrypt source code?
The accepted answer was

Try this: http://sourceforge.net/projects/ntru/

","1765","<c><public-key-encryption><ntruencrypt>","2","0","3","2013-10-10 16:48:34","19301640","1","1","411022","","2013-01-11 15:46:17","2012-02-03 22:57:42","2013-10-11 04:48:35"
"9136639","NTRUEncrypt C implementation","I can't find an NTRUEncrypt implementation in C, is it available as open source?
I want to implement this encryption in my kernel driver, is it possible?
","I work for Security Innovation, which owns NTRU. Contact me directly at wwhyte@securityinnovation.com and we'll see what we can do.
We're currently allowing non-commercial implementations of NTRU free of any licensing fee, but if you're planning to charge for your product we need to negotiate a license.
","1765","<c><public-key-encryption><ntruencrypt>","2","1","3","2013-10-10 16:48:34","19301640","1","1","411022","","2013-01-11 15:46:17","2012-02-03 22:57:42","2013-10-11 04:48:35"
"9136639","NTRUEncrypt C implementation","I can't find an NTRUEncrypt implementation in C, is it available as open source?
I want to implement this encryption in my kernel driver, is it possible?
","I work with William at Security Innovation, and just wanted to add that NTRU was recently open sourced, including our reference implementation in C. Java is soon to come. You can find the official repository on github, below:
https://github.com/NTRUOpenSourceProject/ntru-crypto/tree/master/reference-code/C
","1765","<c><public-key-encryption><ntruencrypt>","2","2","3","2013-10-10 16:48:34","19301640","1","1","411022","","2013-01-11 15:46:17","2012-02-03 22:57:42","2013-10-11 04:48:35"
"6150135","RSA decryption of valid data padded data fails (BadPaddingException)","I am facing a very peculiar problem when using RSA encryption/decryption in Java.
Example code:
KeyPairGenerator kpg = KeyPairGenerator.getInstance(""RSA"");
kpg.initialize(2048);
KeyPair kp = kpg.genKeyPair();

Cipher enc = Cipher.getInstance(""RSA"");
enc.init(Cipher.ENCRYPT_MODE, kp.getPublic());
String CipherText = new String(enc.doFinal(PlainText.getBytes()));
System.out.println(""CipherText: "") + CipherText);

Cipher dec = Cipher.getInstance(""RSA"");
dec.init(Cipher.DECRYPT_MODE, kp.getPrivate());
PlainText = new String(dec.doFinal(CipherText.getBytes()));
System.out.println(""PlainText: "" + PlainText);

As everyone can plainly see: I encrypt the plaintext using the public key, after which I decrypt the ciphertext using the private key.
This code crashes with the following message:
Exception in thread ""main"" javax.crypto.BadPaddingException: Data must start with zero

I also tried to explicitly use ""RSA/ECB/NoPadding"", and this fails on decoding period. (Eg the decoded ciphertext doesn't match the original plaintext).
Last but not least, I have tried to perform this when using my own PKCS1.5 padding function ala the PKCS1.5 specs:
EMB = 00 || 02 || RD || 00 || MD
EMB is encoded messageblock of length k
Where RD are 8 random nonzero bytes
MD is max length k = 11, and optionally padded with zero bytes to make EMB length k.
After two days of testing I can only conclude that the RSA algo in Java is flawed or simply not performing what I expect it to perform.
Any suggestions or fixes to the above code are very welcome, as I am completely stumped on why the above code will not simply work as expected.
","Don't do this:
String CipherText = new String(enc.doFinal(PlainText.getBytes()));

Two reasons:

It's almost never a good idea to call String.getBytes() without specifying an encoding. Do you really want the result to depend on the system default encoding?
It's definitely never a good idea to treat the result of a binary encryption operation (i.e. opaque binary data) as an encoded string. Encode it in Base64 or hex instead.

You can use Apache Commons Codec to perform the base64 encode/decode operations, or this standalone public domain encoder/decoder.
","1737","<java><rsa><encryption-asymmetric><public-key-encryption>","2","2","1","2011-05-27 09:16:41","6150186","0","3","","","","2011-05-27 09:11:47",""
"16185720","Decrypt TLS (Diffie–Hellman) messages using Wireshark?","Is it possible to decrypt and see messages encrypted over TLS using Diffie–Hellman algorithm using Wireshark?
","No. Messages secured by TLS are not vulnerable to snooping attacks.
The initial exchange of key material is secured using the public keys of the participants. The subsequent exchange of data is protected by a session key known only to those participants.
","1737","<encryption><public-key-encryption>","2","1","2","2014-10-10 21:31:04","16191268","5","","474189","","2013-04-24 11:53:42","2013-04-24 07:16:30",""
"16185720","Decrypt TLS (Diffie–Hellman) messages using Wireshark?","Is it possible to decrypt and see messages encrypted over TLS using Diffie–Hellman algorithm using Wireshark?
","You can decrypt DHE_RSA ciphersuites. I just did it here myself (https connection over a socks5-ssh tunnel).  Both tunnel and https connection under complete control of myself, mind you, i.e. you have to start the tunnel with the Wireshark trace running.
In my case I needed a more recent version than my OS's default Wireshark installation (1.10 something), so compiled 1.12.1 from source and was pleasantly surprised.
","1737","<encryption><public-key-encryption>","2","1","2","2014-10-10 21:31:04","16191268","5","","474189","","2013-04-24 11:53:42","2013-04-24 07:16:30",""
"16146970","RSA : Encrypt in Javascript and Decrypt in Php","I've found many websites with something related to the subject line (few are in stackoverflow.com itself). However, unfortunately I couldnt get what I want.
What I want is - I've a public-private key pair ready with me. (something like this - http://andytson.com/blog/2009/07/php-public-key-cryptography-using-openssl/)
Now, I want a javascript page which will use this public key. And encrypt some data. This data is then passed on to the php page. And the php page decrypts the data.
So far, I've found few JS pages which does this stuff right from the scratch (i.e. from generating the key pair). Same story for php. But thats not of help to me.
Any help is highly appreciated.
Cheers
","Does http://area51.phpbb.com/phpBB/viewtopic.php?f=84&t=33024&start=0 do what you're wanting? Here's the stand-alone demo:
http://www.frostjedi.com/terra/dev/rsa/index.php
The source:
http://www.frostjedi.com/terra/dev/rsa/index.txt
","1724","<php><encryption><rsa><public-key-encryption>","0","-1","1","2013-04-22 15:46:43","","5","","","","","2013-04-22 12:20:19",""
"23657238","CryptEncrypt fails with NTE_BAD_LEN","I need to encrypt message with X.509 RSA public key. I successfully imported 1024-bit public key in DER format, but my program fails with message longer than about 110 bytes. I'm calling CryptEncrypt function with pbData set to NULL, because I need to calculate size of output buffer first.
This is the source code:

Plain text version of the same:

bool CCrypt::RSAEncrypt() {
    HCRYPTPROV hProv = NULL;
    HCRYPTKEY  hKey = NULL;

    if (CryptAcquireContext(&hProv, NULL, MS_ENHANCED_PROV, PROV_RSA_FULL, CRYPT_VERIFYCONTEXT)) {
        CParam *pubKey = coreData.local.overlay->getItem(3);

        // Decode the binary key blob in DER format into a CERT_PUBLIC_KEY_INFO
        CERT_PUBLIC_KEY_INFO* publicKeyInfo = NULL;
        DWORD publicKeyInfoSize;
        if (CryptDecodeObjectEx(
            X509_ASN_ENCODING,
            X509_PUBLIC_KEY_INFO,
            (LPBYTE) pubKey->getVal(),
            pubKey->getLength(),
            CRYPT_DECODE_ALLOC_FLAG/* | CRYPT_DECODE_NOCOPY_FLAG*/,
            NULL,   // TODO: Pass a CRYPT_DECODE_PARA to use own heap management to allocate memory
            &publicKeyInfo,
            &publicKeyInfoSize
        )) {
            // Import the public using the context
            if (CryptImportPublicKeyInfo(
                hProv,
                X509_ASN_ENCODING,
                publicKeyInfo,
                &hKey
            )) {
                // Get the size of a key
                DWORD dwBlockLen = NULL;
                DWORD dwValLen = sizeof(DWORD);
                if (CryptGetKeyParam(hKey, KP_BLOCKLEN, (LPBYTE) &dwBlockLen, &dwValLen, 0)) {
                    dwBlockLen = (dwBlockLen + 7) / 8;  // Transform to bytes legth
                    BYTE msg[] = ""Lorem ipsum dolor sit .... [3000+ characters here]"";
                    DWORD dwMsgLen = I(str)->lengthA((LPSTR) msg);
                    //dwMsgLen = 110;
                    DBG(C_INFO, ""CryptGetKeyParam succeed. dwMsgLen: %d, dwBlockLen: %d"", dwMsgLen, dwBlockLen);
                    // pbData [in, out] set to NULL to calculate actual size of a buffer required
                    if (CryptEncrypt(hKey, 0, TRUE, CRYPT_OAEP, NULL, &dwMsgLen, 0)) {
                        DBG(C_INFO, ""CryptEncrypt succeed. dwMsgLen: %d"", dwMsgLen);
                        // TODO: Fails here

                    } else {
                        DBG(C_ERROR, ""CryptEncrypt error."");
                    }
                } else {
                    DBG(C_ERROR, ""CryptGetKeyParam error."");
                }
                CryptDestroyKey(hKey);
            }
            LocalFree(publicKeyInfo);
        }
        CWA(advapi32, CryptReleaseContext)(hProv, 0);
    }

    return false;
}


Output from my debugger:

[16:08:14] TC=1093889010, PID=25484(0x638C), TID=26340(0x66E4), LE=0(0x0), F=CCrypt::RSAEncrypt, FL=d:\c\source\client\../common/Crypt.cpp (62)
INFO: CryptGetKeyParam succeed. dwMsgLen: 2175, dwBlockLen: 128

[16:08:14] TC=1093889010, PID=25484(0x638C), TID=26340(0x66E4), LE=2148073476(0x80090004), F=CCrypt::RSAEncrypt, FL=d:\c\source\client\../common/Crypt.cpp (69)
ERROR: CryptEncrypt error.


As you can see, this function fails at CryptEncrypt with error NTE_BAD_LEN (0x80090004). However when I manually set dwMsgLen to 110 [see line 61], it works correctly. When I set this variable to 120, it fails.
Can someone tell me where the problem can be?
","","1724","<winapi><rsa><public-key-encryption><cryptoapi><x509>","1","","0","2014-05-14 14:16:22","","4","","","","","2014-05-14 14:16:22",""
"17063085","ProtectedConfigurationProvider using Rsa and x509 certificate","I'm new to this so please bear with me. I'm trying to encrypt/decrypt a .config section using RsaProtectedConfigurationProvider
Please correct me if I'm wrong but from what i've been reading I need to do the following:

Get a certificate and a public key from that certificate
X509Certificate2 cert = new X509Certificate2(pathToCert, ""password"");
RSACryptoServiceProvider rsa = cert.PrivateKey as RSACryptoServiceProvider;

Load this info to Container:
Not sure how to do it as the sample below does not account for certificates

http://msdn.microsoft.com/en-us/library/tswxhw92(en-us,VS.80).aspx
    // Create the CspParameters object and set the key container 
    // name used to store the RSA key pair.
    CspParameters cp = new CspParameters();
    cp.KeyContainerName = ""MySuperAwesomeKeyContainer"";

    // Create a new instance of RSACryptoServiceProvider that accesses
    // the key container MyKeyContainerName.
    RSACryptoServiceProvider rsa = new RSACryptoServiceProvider(cp);


Then have the same Container name specified in my App.Config:


<configProtectedData>
<providers>
 <clear/>
  <add name=""MyProvider""
  type=""System.Configuration.RsaProtectedConfigurationProvider""
  keyContainerName=""MySuperAwesomeKeyContainer""
  useMachineContainer=""true"" />
</providers>
</configProtectedData>



Then just run this code that will use that KeyContainer and encrypt/decrypt it:


....
string provider = ""MyProvider"";
// Protect the section.
connStrings.SectionInformation.ProtectSection(provider);


Is this correct?. If so, how would I do it?? Not sure how to get those keys from certificate and load them in a KeyContainer.
thanks
","You'll find the steps here: Walkthrough: Creating and Exporting an RSA Key Container. You don't need a certificate, you can generate the key container directly.
If you're encrypting a custom configuration section, there's a trick to make it work: You'll have to remove the declaration of the configSection. I've blogged the details here: How to encrypt a custom configuration section in ASP.NET.
","1721","<c#><asp.net><encryption><public-key-encryption><rsaprotectedconfiguration>","0","0","2","2013-09-13 23:29:07","17148895","0","","455042","","2013-06-17 13:37:19","2013-06-12 10:22:16",""
"17063085","ProtectedConfigurationProvider using Rsa and x509 certificate","I'm new to this so please bear with me. I'm trying to encrypt/decrypt a .config section using RsaProtectedConfigurationProvider
Please correct me if I'm wrong but from what i've been reading I need to do the following:

Get a certificate and a public key from that certificate
X509Certificate2 cert = new X509Certificate2(pathToCert, ""password"");
RSACryptoServiceProvider rsa = cert.PrivateKey as RSACryptoServiceProvider;

Load this info to Container:
Not sure how to do it as the sample below does not account for certificates

http://msdn.microsoft.com/en-us/library/tswxhw92(en-us,VS.80).aspx
    // Create the CspParameters object and set the key container 
    // name used to store the RSA key pair.
    CspParameters cp = new CspParameters();
    cp.KeyContainerName = ""MySuperAwesomeKeyContainer"";

    // Create a new instance of RSACryptoServiceProvider that accesses
    // the key container MyKeyContainerName.
    RSACryptoServiceProvider rsa = new RSACryptoServiceProvider(cp);


Then have the same Container name specified in my App.Config:


<configProtectedData>
<providers>
 <clear/>
  <add name=""MyProvider""
  type=""System.Configuration.RsaProtectedConfigurationProvider""
  keyContainerName=""MySuperAwesomeKeyContainer""
  useMachineContainer=""true"" />
</providers>
</configProtectedData>



Then just run this code that will use that KeyContainer and encrypt/decrypt it:


....
string provider = ""MyProvider"";
// Protect the section.
connStrings.SectionInformation.ProtectSection(provider);


Is this correct?. If so, how would I do it?? Not sure how to get those keys from certificate and load them in a KeyContainer.
thanks
","I did it like this:
Provider Implementation:
public class X509ProtectedConfigProvider : ProtectedConfigurationProvider
{
    #region Fields

    private X509Certificate2 cert;

    #endregion

    // Performs provider initialization. 
    #region Public Methods and Operators

    public override XmlNode Decrypt(XmlNode encryptedNode)
    {
        // Load config section to encrypt into xmlDocument instance
        XmlDocument doc = encryptedNode.OwnerDocument;
        EncryptedXml eXml = new EncryptedXml(doc);

        eXml.DecryptDocument();
        return doc.DocumentElement;
    }

    public override XmlNode Encrypt(XmlNode node)
    {
        // Load config section to encrypt into xmlDocument instance
        XmlDocument doc = new XmlDocument { PreserveWhitespace = true };
        doc.LoadXml(node.OuterXml);

        // Encrypt it
        EncryptedXml eXml = new EncryptedXml();
        EncryptedData eData = eXml.Encrypt(doc.DocumentElement, this.cert);
        return eData.GetXml();
    }

    public override void Initialize(string name, NameValueCollection config)
    {
        base.Initialize(name, config);

        string certSubjectDistName = config[""CertSubjectDistinguishedName""];
        string certStoreName = config[""CertStoreName""];

        X509Store certStore = !string.IsNullOrEmpty(certStoreName) ? new X509Store(certStoreName, StoreLocation.LocalMachine) : new X509Store(StoreLocation.LocalMachine);

        try
        {
            certStore.Open(OpenFlags.ReadOnly);
            X509Certificate2Collection certs = certStore.Certificates.Find(
                X509FindType.FindBySubjectName, certSubjectDistName, true);

            this.cert = certs.Count > 0 ? certs[0] : null;
        }
        finally
        {
            certStore.Close();
        }
    }

    #endregion
}

Helper class:
public static class Crypto
    {
        // Protect the connectionStrings section. 
        #region Public Methods and Operators

        public static bool ProtectConfiguration(string path)
        {
            string provider = ""X509ProtectedConfigProvider"";

            // Get the application configuration file.
            Configuration config = ConfigurationManager.OpenExeConfiguration(path);

            // Get the section to protect.
            ConfigurationSection connStrings = config.ConnectionStrings;

            if (connStrings != null)
            {
                if (!connStrings.SectionInformation.IsProtected)
                {
                    if (!connStrings.ElementInformation.IsLocked)
                    {
                        // Protect the section.
                        connStrings.SectionInformation.ProtectSection(provider);

                        connStrings.SectionInformation.ForceSave = true;
                        config.Save(ConfigurationSaveMode.Full);

                        return true;
                    }

                    return false;
                }

                return true;
            }

            return false;
        }

        // Unprotect the connectionStrings section. 
        public static void UnProtectConfiguration(string path)
        {
            // Get the application configuration file.
            Configuration config = ConfigurationManager.OpenExeConfiguration(path);

            // Get the section to unprotect.
            ConfigurationSection connStrings = config.ConnectionStrings;

            if (connStrings != null)
            {
                if (connStrings.SectionInformation.IsProtected)
                {
                    if (!connStrings.ElementInformation.IsLocked)
                    {
                        // Unprotect the section.
                        connStrings.SectionInformation.UnprotectSection();

                        connStrings.SectionInformation.ForceSave = true;
                        config.Save(ConfigurationSaveMode.Full);
                    }
                }
            }
        }

        #endregion
    }
}

App.Config (note configProtectedData):
<?xml version=""1.0""?>
<configuration>
  <configSections>
    <section name=""nlog"" type=""NLog.Config.ConfigSectionHandler, NLog""/>
  </configSections>
  <connectionStrings>
    <add name=""MyDbConnStr"" providerName=""System.Data.SqlClient"" connectionString=""Data Source=localhost;Initial Catalog=MyDb;Integrated Security=True;""/>
  </connectionStrings>
  <appSettings>
    <add key=""SiteName"" value=""MyAwesomeSite""/>
  </appSettings> 
<startup><supportedRuntime version=""v4.0"" sku="".NETFramework,Version=v4.0""/></startup>
    <configProtectedData>
        <providers>
            <add CertSubjectDistinguishedName=""localhost"" CertStoreName=""MyCertKeyStore"" name=""X509ProtectedConfigProvider"" type=""ProtectedConfigProvider.X509ProtectedConfigProvider, X509ProtectedConfigProvider, Version=1.0.0.0, Culture=neutral, PublicKeyToken=098027505e2ed139"" />
        </providers>
    </configProtectedData>
</configuration>

Program (Usage):
...
ProtectConfiguration(""mysuperawesomeapp.exe);

DatabaseFactory.SetDatabaseProviderFactory(new DatabaseProviderFactory());
Database db = DatabaseFactory.CreateDatabase(""MyDbConnStr"");

Reading from db works fine with encrypted app config ""connectionStrings"" section. :)
","1721","<c#><asp.net><encryption><public-key-encryption><rsaprotectedconfiguration>","0","1","2","2013-09-13 23:29:07","17148895","0","","455042","","2013-06-17 13:37:19","2013-06-12 10:22:16",""
"36802212","Python : Pycrypto RSA public key encryption error","So I've just started experimenting with Pycrypto and wanted to encrypt and decrypt a message, but this code I put together produced some errors.
Here they are:
enc_data = public_key.encrypt 


TypeError: unsupported operand type(s) for pow(): 'str', 'int','int'

ciphertext = cipher.encrypt('Bob')


Traceback (most recent call last):    
line 22, in
    ciphertext = cipher.encrypt('Bob') 
File
  ""C:\Anaconda3\lib\site-packages\Crypto\Cipher\PKCS1_OAEP.py"", line 50,
  in encrypt
  db = lHash + ps + bchr(0x01) + message 
TypeError: can't concat bytes to str

The code:
import Crypto
from Crypto.Hash import SHA256
from Crypto.PublicKey import RSA
from Crypto.Cipher import PKCS1_OAEP
from Crypto import Random

random_generator = Random.new().read
key = RSA.generate(1024, random_generator)

public_key = key.publickey()

enc_data = public_key.encrypt('Bob', 32)

cipher = PKCS1_OAEP.new(key)
ciphertext = cipher.encrypt('Bob')

The two commands which are meant to encrypt 'Bob' produce these errors, and yes I now that the first way isn't very secure.
","In Python 3 there is a difference between strings and bytes. PyCrypto works on bytes, so you need to give it bytes, but ""Bob"" is a string. You can convert a string a to bytes with a.encode(), which uses a default encoding. If you have another encoding in mind, then you need to specify it. 
You can also mark a literal string as bytes by prefixing it with a b. Example: b""Bob"".
","1713","<python-3.x><rsa><public-key-encryption><pycrypto>","0","1","1","2016-04-22 20:20:13","36802674","1","","1816580","","2016-04-22 20:16:24","2016-04-22 19:49:17",""
"30868936","Retrieve ECC Public Key from Base64 encoded string","I've been trying to create an instance of java.security.PublicKey using a Base64 encoded ECC public key.
MainActivity.java
@Override
protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.activity_main);

    try {
        byte[] data = decodePublicKey(""AsIAEFjzIcX+Kvhe8AmLoGUc8aYAEAwf5ecREGZ2u4RLxQuav/A="");
        PublicKey publicKey = loadPublicKey(""secp128r1"", data);

        Log.d(TAG, publicKey.toString());
    } catch (SQLException | IOException | GeneralSecurityException e) {
        Log.e(TAG, e.getMessage(), e);
    }
}

private byte[] decodePublicKey(String s) throws UnsupportedEncodingException {
    return Base64.decode(s, Base64.DEFAULT);
}

public PublicKey loadPublicKey(String curve, byte[] data)
        throws SQLException, IOException, GeneralSecurityException {
    Log.d(TAG, Arrays.toString(data));
    // [2, -62, 0, 16, 88, -13, 33, -59, -2, 42, -8, 94, -16, 9, -117, -96, 101, 28, -15, -90, 0, 16, 12, 31, -27, -25, 17, 16, 102, 118, -69, -124, 75, -59, 11, -102, -65, -16]
    Log.d(TAG, ""Length :"" + String.valueOf(data.length));

    KeyFactory factory = KeyFactory.getInstance(""EC"", ""SC"");
    ECNamedCurveParameterSpec spec = ECNamedCurveTable.getParameterSpec(curve);
    ECCurve eccCurve = spec.getCurve();
    Log.d(TAG, ""Curve: "" + curve);

    EllipticCurve ellipticCurve = EC5Util.convertCurve(eccCurve, spec.getSeed());

    // decoding point fails, 
    // line no 66.
    ECPoint point = ECPointUtil.decodePoint(ellipticCurve, data);
    ECParameterSpec params = EC5Util.convertSpec(ellipticCurve, spec);

    ECPublicKeySpec keySpec = new ECPublicKeySpec(point, params);
    return factory.generatePublic(keySpec);
}

Logcat:
Process: com.example.eccdemo, PID: 21151
java.lang.RuntimeException: Unable to start activity ComponentInfo{com.example.eccdemo/com.example.eccdemo.MainActivity}: java.lang.IllegalArgumentException: Incorrect length for compressed encoding
        at android.app.ActivityThread.performLaunchActivity(ActivityThread.java:2329)
        at android.app.ActivityThread.handleLaunchActivity(ActivityThread.java:2389)
        at android.app.ActivityThread.access$900(ActivityThread.java:147)
        at android.app.ActivityThread$H.handleMessage(ActivityThread.java:1296)
        at android.os.Handler.dispatchMessage(Handler.java:102)
        at android.os.Looper.loop(Looper.java:135)
        at android.app.ActivityThread.main(ActivityThread.java:5254)
        at java.lang.reflect.Method.invoke(Native Method)
        at java.lang.reflect.Method.invoke(Method.java:372)
        at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:898)
        at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:693)
 Caused by: java.lang.IllegalArgumentException: Incorrect length for compressed encoding
        at org.spongycastle.math.ec.ECCurve.decodePoint(ECCurve.java:349)
        at org.spongycastle.jce.ECPointUtil.decodePoint(ECPointUtil.java:52)
        at com.example.eccdemo.MainActivity.loadPublicKey(MainActivity.java:66)
        at com.example.eccdemo.MainActivity.onCreate(MainActivity.java:45)
        at android.app.Activity.performCreate(Activity.java:5933)
        at android.app.Instrumentation.callActivityOnCreate(Instrumentation.java:1105)
        at android.app.ActivityThread.performLaunchActivity(ActivityThread.java:2282)
        at android.app.ActivityThread.handleLaunchActivity(ActivityThread.java:2389)
        at android.app.ActivityThread.access$900(ActivityThread.java:147)
        at android.app.ActivityThread$H.handleMessage(ActivityThread.java:1296)
        at android.os.Handler.dispatchMessage(Handler.java:102)
        at android.os.Looper.loop(Looper.java:135)
        at android.app.ActivityThread.main(ActivityThread.java:5254)
        at java.lang.reflect.Method.invoke(Native Method)
        at java.lang.reflect.Method.invoke(Method.java:372)
        at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:898)
        at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:693)

Further Inspection:
In Logcat, upon printing the decoded bytes, they actually differ from the one on the server:
    Log.d(TAG, Arrays.toString(data));
    [2, -62, 0, 16, 88, -13, 33, -59, -2, 42, -8, 94, -16, 9, -117, -96, 101, 28, -15, -90, 0, 16, 12, 31, -27, -25, 17, 16, 102, 118, -69, -124, 75, -59, 11, -102, -65, -16]

In python console:
In [131]: [_ for _ in ap.public_key.tobytes()]
Out[131]: [2, 194, 0, 16, 88, 243, 33, 197, 254, 42, 248, 94, 240, 9, 139, 160, 101, 28, 241, 166, 0, 16, 12, 31, 229, 231, 17, 16, 102, 118, 187, 132, 75, 197, 11, 154, 191, 240]

It would be great if someone can explain the reason to this anomaly, and also help me out on the small snippet to get PublicKey instance from the String.
References:

http://www.programcreek.com/java-api-examples/index.php?api=org.bouncycastle.asn1.ASN1InputStream
http://www.bouncycastle.org/wiki/display/JA1/Elliptic+Curve+Key+Pair+Generation+and+Key+Factories

Thanks in advance!!
Update:
When trying to load ASN1Primitive using the line below, it throws the following exception:
ASN1Primitive.fromByteArray(data);

Exception:
java.io.IOException: DER length more than 4 bytes: 66
        at org.spongycastle.asn1.ASN1InputStream.readLength(ASN1InputStream.java:347)
        at org.spongycastle.asn1.ASN1InputStream.readLength(ASN1InputStream.java:112)
        at org.spongycastle.asn1.ASN1InputStream.readObject(ASN1InputStream.java:237)
        at org.spongycastle.asn1.ASN1Primitive.fromByteArray(ASN1Primitive.java:30)
        at com.example.eccdemo.MainActivity.onCreate(MainActivity.java:48)
        at android.app.Activity.performCreate(Activity.java:5933)
        at android.app.Instrumentation.callActivityOnCreate(Instrumentation.java:1105)
        at android.app.ActivityThread.performLaunchActivity(ActivityThread.java:2282)
        at android.app.ActivityThread.handleLaunchActivity(ActivityThread.java:2389)
        at android.app.ActivityThread.access$900(ActivityThread.java:147)
        at android.app.ActivityThread$H.handleMessage(ActivityThread.java:1296)
        at android.os.Handler.dispatchMessage(Handler.java:102)
        at android.os.Looper.loop(Looper.java:135)
        at android.app.ActivityThread.main(ActivityThread.java:5254)
        at java.lang.reflect.Method.invoke(Native Method)
        at java.lang.reflect.Method.invoke(Method.java:372)
        at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:898)
        at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:693)

","Your base64 encoded data is 38 bytes long and does not seem to be in ASN1. Maybe that is a problem. On another hand as long as you can extract X and Y from your data you can generate public key this way:
      String hexPubKeyXY = ""01f82bfb2f0a3e988adc3d053d8e6ff878154306e402d871b7d6000823a1397f"";
      String hexX = hexPubKeyXY.substring(0, 32);
      String hexY = hexPubKeyXY.substring(32);
      ECPoint point = new ECPoint(new BigInteger(hexX, 16), new BigInteger(hexY, 16));

      AlgorithmParameters parameters = AlgorithmParameters.getInstance(""EC"", ""SunEC"");
      parameters.init(new ECGenParameterSpec(""secp128r1""));
      ECParameterSpec ecParameters = parameters.getParameterSpec(ECParameterSpec.class);

      ECPublicKeySpec pubKeySpec = new ECPublicKeySpec(point, ecParameters);

      PublicKey key = KeyFactory.getInstance(""EC"", ""SunEC"").generatePublic(pubKeySpec);

","1693","<java><android><base64><public-key-encryption><spongycastle>","3","1","1","2015-10-03 02:22:29","","10","1","1796173","","2015-06-17 10:50:05","2015-06-16 13:25:39",""
"29709720","How to Encrypt AJAX GET & POST with javaScript and Node.js","I would like to encrypt ajax post and get request with javascript. 
The flow should be - 

Server generated private and public key on request
Server sends the public key to client
Client encrypts the data with public key
Sever decrypts the data with the private key

I know SSL is an option, but my application is a small plugin which can be installed on any website that allows a user to purchase products on that website. Is there a way i can encrypt all the data at front end and decrypt at back end.
Thanks in advance! 
","Generally speaking, in browser cryptography can be considered a bad idea. Sending the data over ssl-tls would likely be much more secure than a home-brewed crypto solution, like you seem to be suggesting. This can be considered especially bad when transmitting data like credit card info, as it appears you will be.
http allows for extremely easy man in the middle attacks to eavesdrop on any data being sent either way, so there would almost certainly be no secure way to transmit the keys in the first place, let alone the secure information. 
If you really really want to go this route, then have a look at crypto-js.
This is not a good idea, and you should use SSL. Probably hence the downvotes.
Considering your use case, the best way to do this would probably be to host your own central service with SSL enabled, and route all ajax requests to your service, not theirs. Their servers could then poll your server using your SSL certificate, to view any relevant information. So you would be acting as some sort of centralised API, with both the clients and businesses connecting. You still need to consider however, that any information sent in the clear, ie over http, not https, can be tampered with before it reaches the user.
As far as I am aware, no, you cannot generate SSL certificates on the fly. 
","1691","<javascript><node.js><public-key-encryption><private-key>","-1","1","1","2015-04-17 22:43:18","","0","","","","","2015-04-17 21:33:02",""
"41062056","Gpg4win Kleopatra v Gpg4win GNU Privacy Assistant","What is the difference between Kleopatra and GNU Privacy Assistant (both part of Gpg4win (https://www.gpg4win.org/))?
At first I thought GNU Privacy Assistant was simply a key manager (making it easier to manager your keys), however I have found tutorials on YouTube that explain how to encrypt using: GNU Privacy Assistant
I have spent time Googling this; this morning, however I have not found an answer.  I am relatively new to the field of Encryption.
","From https://gpg4win.org/doc/en/gpg4win-compendium_6.html 


Kleopatra The central certificate administration of Gpg4win, which    ensures uniform user navigation for all cryptographic
  operations. 
GNU Privacy Assistant (GPA) is an alternative program for managing    certificates, in addition to Kleopatra.


","1686","<encryption><public-key-encryption>","2","2","1","2017-12-02 19:40:47","47611799","1","","","","","2016-12-09 13:55:59",""
"17496619","Crypto RSA in Python","I am checking a code written in Python which is used to generate an RSA public private key pair.
It generates the keypair however, at the end of the code it runs ssh-keygen again. I am not sure why that is done. Since, RSA.generate() will itself generate the keypair that we export into two separate files. Why is there a need to run ssh-keygen again?
Here are few lines from the code:
keypair = RSA.generate(1024, randfunc)

with open(""pub"", ""w"") as pubfile, open(""id_rsa"", ""w"") as privfile:
    privfile.write(keypair.exportKey())
    pubfile.write(keypair.publickey().exportKey())

system(""ssh-keygen -m PKCS8 -i -f pub > id_rsa.pub && rm pub"")

the file pub will store the public key and id_rsa will store the private key from the keypair generated by RSA.generate() function.
Now, why is it running the ssh-keygen command at the end?
Also, it does not take any input file for the -i parameter and -f parameter takes the name pub which was the public key already generated.
After executing the code I get two files, id_rsa and id_rsa.pub
id_rsa is the private key generated using RSA.generate() but id_rsa.pub stores the result of ssh-keygen command.
I need some help to understand the reason for invoking ssh-keygen at the end of the script and also the parameters passed to ssh-keygen. -i should be passed some value and also -f should have output filename and not input.
Note: I read that this is done to convert the public key from OpenSSL format to OpenSSH format using ssh-keygen so that it starts with ssh-rsa instead of BEGIN PUBLIC KEY.
Does that mean the format of corresponding private key should also be changed?
Since it starts with,
BEGIN PRIVATE KEY
","You are correct in the fact that ssh-keygen is run to convert the generated PEM Format Public Key into a OpenSSH Format Public Key.
There's no really good way to do this in Python as far as I know. 
The OpenSSH format only exists for a Public Key.
So, no, you do not need to convert the Private Key if it begins with
-------- BEGIN PRIVATE KEY --------- or -------- BEGIN RSA PRIVATE KEY ---------
","1669","<python><public-key-encryption>","1","0","1","2013-08-31 01:50:34","","0","","","","","2013-07-05 20:45:36",""
"19492055","Authorize a client with his digital certificate from USB crypto tokens","Basically we need to make sure the user is the right person ,even after username/password ,we need another round of verification by using digital Certificate credentials.
All clients will be having a crypto usb with their private key.
We need a scenario where the client user on concerned Aspx page should 

insert his Usb crypto token.
select his certificate ,enter the usb pin (if any) .
The server will authorize his action if he is the right person.

If it is possible,how ??.
Should I be making Applet for it,do I have to look for cryto usb hardware specific SDK.
Any reference ,would be helpful.
","Seems possible. The applet can make the connection/verification with your crypto hardware and also communicate with your server (via direct communiction or jscript). If you go the applet route ensure the following:

(After implementing the actual logic (device communication etc))
Your applet must be digitally signed with an official certificate (otherwise your users will get lots of warnings etc.)
the right permissions / security settings are set
Your device must be supported by java or offer an java API. It should support JCA / JCE or if it is a smartcard have a look here, here and here.

","1659","<asp.net><applet><public-key-encryption><digital-certificate>","1","0","2","2013-10-24 11:30:06","","3","","","","","2013-10-21 10:29:29",""
"19492055","Authorize a client with his digital certificate from USB crypto tokens","Basically we need to make sure the user is the right person ,even after username/password ,we need another round of verification by using digital Certificate credentials.
All clients will be having a crypto usb with their private key.
We need a scenario where the client user on concerned Aspx page should 

insert his Usb crypto token.
select his certificate ,enter the usb pin (if any) .
The server will authorize his action if he is the right person.

If it is possible,how ??.
Should I be making Applet for it,do I have to look for cryto usb hardware specific SDK.
Any reference ,would be helpful.
","This is possible, and you don't need to use an applet.  You can set your web service container (IIS, Tomcat, etc.) to enforce 2-way (mutual) SSL.
The client's certificate will be signed by a CA.  That CA's certificate must be in some type of a trust list that the server is pointing to.  The server will reject any client cert not signed by a CA in the trust list.
After the client cert's CA is found in the trust list, the cert will be forwarded to the web app, where further authorization can take place.
You shouldn't need ""cryto usb hardware specific SDK"" on the server side.  The server just receives it as a certificate.  The server doesn't know if it came from a file or a usb  token on the client side.  So the server just needs to know how to process X509 certificates.  The browser and/or the software drivers on the client side actually do all the interaction with the USB token, so that when the browser talks to the server, it is only sending a certificate.
","1659","<asp.net><applet><public-key-encryption><digital-certificate>","1","2","2","2013-10-24 11:30:06","","3","","","","","2013-10-21 10:29:29",""
"11413446","Using RSA to protect license files","I want to use RSA to protect license files in an application. The idea is as follows:

Create a license file (plaintext).
Create an RSA-keypair.
Use the public key to encrypt the license file.
Put the private key in the binary of the application.
The application can then decode the license file and start running.

The thing is that I have to ship the private key with my application. Is that a problem if I keep the public key secret?
If not, what other good (enough) schemes exist to create a license-file system?
","It is possible to recover a public key from a private key, so having the private key embedded in the application would be as good as publishing both the private and public keys in cleartext (modulo the effort of hacking the private key out of the binary).
Many people resort to obfuscation in these situations.  Other solutions would be a hardware token, network authentication, or an off-the-shelf license management system.
This might provide some ideas about how other people are using public-key cryptography to create license file systems: http://www.codeproject.com/Articles/203840/RSA-License-Protection
","1650","<encryption><rsa><public-key-encryption>","2","4","1","2012-07-10 12:39:30","11413524","0","1","","","","2012-07-10 12:35:16",""
"7914533","How to store RSA encrypted data to postgresql by using pycrypto?","I want to use Public/Private key to secure my UserInfo data. I'm new with PyCrypto and PostgreSQL.
I have some items to clarify:

Are Public Key and Private Key constant values?
If it is constant, how can I store it properly?
Lastly but the most important, how can I store my encrypted data to PostgreSQL? and retrieve it for verification?

Would you guide me on how to dealt with Crypto.PublicKey.RSA as method to secure my data.
Environment: Python 2.5, PyCrypto 2.3, PostgreSQL 8.3 UTF-8 encoding
UserInfo model:
class UserInfo(models.Model):

    userid = models.TextField(primary_key = True)
    password = models.TextField(null = True)
    keyword = models.TextField(null = True)
    key = models.TextField(null = True, blank = True)
    date = models.DateTimeField(null = True, blank = True)

UPDATES1
tests.py:
# -*- encoding:utf-8 -*-
import os
from os.path import abspath, dirname
import sys
from py23.service.models import UserInfo
from Crypto import Random

# Set up django
project_dir = abspath(dirname(dirname(__file__)))
sys.path.insert(0, project_dir)
os.environ['DJANGO_SETTINGS_MODULE'] = 'py23.settings'
from django.test.testcases import TestCase

class AuthenticationTestCase(TestCase):

    def test_001_registerUserInfo(self):
        import Crypto.PublicKey.RSA
        import Crypto.Util.randpool

        #pool = Crypto.Util.randpool.RandomPool()
        rng = Random.new().read

        # craete RSA object by random key
        # 1024bit
        #rsa = Crypto.PublicKey.RSA.generate(1024, pool.get_bytes)
        rsa = Crypto.PublicKey.RSA.generate(1024, rng)

        # retrieve public key
        pub_rsa = rsa.publickey()

        # create RSA object by tuple
        # rsa.n is public key?, rsa.d is private key?
        priv_rsa = Crypto.PublicKey.RSA.construct((rsa.n, rsa.e, rsa.d))

        # encryption
        enc = pub_rsa.encrypt(""hello"", """")

        # decryption
        dec = priv_rsa.decrypt(enc)

        print ""private: n=%d, e=%d, d=%d, p=%d, q=%d, u=%d"" % (rsa.n, rsa.e, rsa.d, rsa.p, rsa.q, rsa.u)
        print ""public: n=%d, e=%d"" % (pub_rsa.n, pub_rsa.e)
        print ""encrypt:"", enc
        print ""decrypt:"", dec

        # text to be signed
        text = ""hello""
        signature = priv_rsa.sign(text, """")
        # check if the text has not changed
        print pub_rsa.verify(text, signature)
        print pub_rsa.verify(text+""a"", signature)

#        userid = models.TextField(primary_key = True)
#        password = models.TextField(null = True)
#        keyword = models.TextField(null = True)
#        key = models.TextField(null = True, blank = True)    is it correct to store the public key here?
#        date = models.DateTimeField(null = True, blank = True)
        userInfo = UserInfo(userid='test1', password=enc[0], key=pub_rsa.n)
        userInfo.save()
        print ""ok""

result here (failed):
======================================================================
ERROR: test_001_registerUserInfo (py23.service.auth.tests.AuthenticationTestCase)
----------------------------------------------------------------------
Traceback (most recent call last):
  File ""C:\PIDevelopment\workspace37_pydev\pyh23\py23\service\auth\tests.py"", line 64, in test_001_registerUserInfo
    userInfo.save()
  File ""C:\Python25\lib\site-packages\django\db\models\base.py"", line 458, in save
    self.save_base(using=using, force_insert=force_insert, force_update=force_update)
  File ""C:\Python25\lib\site-packages\django\db\models\base.py"", line 551, in save_base
    result = manager._insert(values, return_id=update_pk, using=using)
  File ""C:\Python25\Lib\site-packages\django\db\models\manager.py"", line 195, in _insert
    return insert_query(self.model, values, **kwargs)
  File ""C:\Python25\lib\site-packages\django\db\models\query.py"", line 1524, in insert_query
    return query.get_compiler(using=using).execute_sql(return_id)
  File ""C:\Python25\lib\site-packages\django\db\models\sql\compiler.py"", line 788, in execute_sql
    cursor = super(SQLInsertCompiler, self).execute_sql(None)
  File ""C:\Python25\lib\site-packages\django\db\models\sql\compiler.py"", line 732, in execute_sql
    cursor.execute(sql, params)
  File ""C:\Python25\lib\site-packages\django\db\backends\util.py"", line 15, in execute
    return self.cursor.execute(sql, params)
  File ""C:\Python25\lib\site-packages\django\db\backends\postgresql_psycopg2\base.py"", line 44, in execute
    return self.cursor.execute(query, args)
DatabaseError: invalid byte sequence for encoding ""UTF8"": 0x97
HINT:  This error can also happen if the byte sequence does not match the encoding expected by the server, which is controlled by ""client_encoding"".


----------------------------------------------------------------------
Ran 1 test in 90.047s

FAILED (errors=1)

","Your problem is that you are trying to store binary data in a text file.  Try armoring the data or use bytea (with proper encoding/decoding).
","1645","<python><postgresql><rsa><public-key-encryption><pycrypto>","4","0","1","2013-03-22 10:46:24","","2","","701678","","2011-10-31 04:26:32","2011-10-27 10:16:37",""
"24267332","How to encrypt a string using public key cryptography","I am trying to implement my own RSA encryption engine. Given these RSA algorithm values:
p = 61. // A prime number.
q = 53. // Also a prime number.
n = 3233. // p * q.
totient = 3120. // (p - 1) * (q - 1)
e = 991. // Co-prime to the totient (co-prime to 3120).
d = 1231. // d * e = 1219921, which is equal to the relation where 1 + k * totient = 1219921 when k = 391.

I am trying to write a method to encrypt each byte in a string and return back an encrypted string:
public string Encrypt(string m, Encoding encoding)
{
    byte[] bytes = encoding.GetBytes(m);
    for (int i = 0; i < bytes.Length; i++)
    {
        bytes[i] = (byte)BigInteger.ModPow(bytes[i], e, n);
    }
    string encryptedString = encoding.GetString(bytes);
    Console.WriteLine(""Encrypted {0} as {1}."", m, encryptedString);
    return encryptedString;
}

The obvious issue here is that BigInteger.ModPow(bytes[i], e, n) may be too large to fit into a byte-space; it could result in values over 8 bits in size. How do you get around this issue while still being able to decrypt an encrypted string of bytes back into a regular string?
Update: Even encrypting from byte[] to byte[], you reach a case where encrypting that byte using the RSA algorithm goes beyond the size limit of a byte:
public byte[] Encrypt(string m, Encoding encoding)
{
    byte[] bytes = encoding.GetBytes(m);
    for (int i = 0; i < bytes.Length; i++)
    {
        bytes[i] = (byte)BigInteger.ModPow(bytes[i], e, n);
    }
    return bytes;
}

Update: My issue is that encryption would cause a greater number of bytes than the initial input string had:
public byte[] Encrypt(string m, Encoding encoding)
{
    byte[] bytes = encoding.GetBytes(m);
    byte[] returnBytes = new byte[0];
    for (int i = 0; i < bytes.Length; i++)
    {
        byte[] result = BigInteger.ModPow(bytes[i], (BigInteger)e, n).ToByteArray();
        int preSize = returnBytes.Length;
        Array.Resize(ref returnBytes, returnBytes.Length + result.Length);
        result.CopyTo(returnBytes, preSize);
    }
    return returnBytes;
}

public string Decrypt(byte[] c, Encoding encoding)
{
    byte[] returnBytes = new byte[0];
    for (int i = 0; i < c.Length; i++)
    {
        byte[] result = BigInteger.ModPow(c[i], d, n).ToByteArray();
        int preSize = returnBytes.Length;
        Array.Resize(ref returnBytes, returnBytes.Length + result.Length);
        result.CopyTo(returnBytes, preSize);
    }
    string decryptedString = encoding.GetString(returnBytes);
    return decryptedString;
}

If you ran this code like this:
byte[] encryptedBytes = engine.Encrypt(""Hello, world."", Encoding.UTF8);
Console.WriteLine(engine.Decrypt(encryptedBytes, Encoding.UTF8));

The output would be this:
?♥D
?♥→☻►♦→☻►♦oD♦8? ?♠oj?♠→☻►♦;♂?♠♂♠?♠

Obviously, the output is not the original string because I can't just try decrypting each byte at a time, since sometimes two or more bytes of the cypher-text represent the value of one integer that I need to decrypt back to one byte of the original string...so I want to know what the standard mechanism for handling this is.
","If you are looking to use RSA encryption in C# then you should not be attempting to build your own. For starters the prime numbers you have chosen are probably to small. P and Q are supposed to be large prime numbers.
You should check out some other question/answers:
how to use RSA to encrypt files (huge data) in C# 
RSA Encryption of large data in C#
And other references:
http://msdn.microsoft.com/en-us/library/system.security.cryptography.rsacryptoserviceprovider.encrypt(v=vs.110).aspx
http://msdn.microsoft.com/en-us/library/system.security.cryptography.rsacryptoserviceprovider.aspx
","1644","<c#><.net><encryption><rsa><public-key-encryption>","2","0","3","2014-06-18 14:12:59","24271759","20","1","982639","","2014-06-17 16:40:50","2014-06-17 15:08:33",""
"24267332","How to encrypt a string using public key cryptography","I am trying to implement my own RSA encryption engine. Given these RSA algorithm values:
p = 61. // A prime number.
q = 53. // Also a prime number.
n = 3233. // p * q.
totient = 3120. // (p - 1) * (q - 1)
e = 991. // Co-prime to the totient (co-prime to 3120).
d = 1231. // d * e = 1219921, which is equal to the relation where 1 + k * totient = 1219921 when k = 391.

I am trying to write a method to encrypt each byte in a string and return back an encrypted string:
public string Encrypt(string m, Encoding encoding)
{
    byte[] bytes = encoding.GetBytes(m);
    for (int i = 0; i < bytes.Length; i++)
    {
        bytes[i] = (byte)BigInteger.ModPow(bytes[i], e, n);
    }
    string encryptedString = encoding.GetString(bytes);
    Console.WriteLine(""Encrypted {0} as {1}."", m, encryptedString);
    return encryptedString;
}

The obvious issue here is that BigInteger.ModPow(bytes[i], e, n) may be too large to fit into a byte-space; it could result in values over 8 bits in size. How do you get around this issue while still being able to decrypt an encrypted string of bytes back into a regular string?
Update: Even encrypting from byte[] to byte[], you reach a case where encrypting that byte using the RSA algorithm goes beyond the size limit of a byte:
public byte[] Encrypt(string m, Encoding encoding)
{
    byte[] bytes = encoding.GetBytes(m);
    for (int i = 0; i < bytes.Length; i++)
    {
        bytes[i] = (byte)BigInteger.ModPow(bytes[i], e, n);
    }
    return bytes;
}

Update: My issue is that encryption would cause a greater number of bytes than the initial input string had:
public byte[] Encrypt(string m, Encoding encoding)
{
    byte[] bytes = encoding.GetBytes(m);
    byte[] returnBytes = new byte[0];
    for (int i = 0; i < bytes.Length; i++)
    {
        byte[] result = BigInteger.ModPow(bytes[i], (BigInteger)e, n).ToByteArray();
        int preSize = returnBytes.Length;
        Array.Resize(ref returnBytes, returnBytes.Length + result.Length);
        result.CopyTo(returnBytes, preSize);
    }
    return returnBytes;
}

public string Decrypt(byte[] c, Encoding encoding)
{
    byte[] returnBytes = new byte[0];
    for (int i = 0; i < c.Length; i++)
    {
        byte[] result = BigInteger.ModPow(c[i], d, n).ToByteArray();
        int preSize = returnBytes.Length;
        Array.Resize(ref returnBytes, returnBytes.Length + result.Length);
        result.CopyTo(returnBytes, preSize);
    }
    string decryptedString = encoding.GetString(returnBytes);
    return decryptedString;
}

If you ran this code like this:
byte[] encryptedBytes = engine.Encrypt(""Hello, world."", Encoding.UTF8);
Console.WriteLine(engine.Decrypt(encryptedBytes, Encoding.UTF8));

The output would be this:
?♥D
?♥→☻►♦→☻►♦oD♦8? ?♠oj?♠→☻►♦;♂?♠♂♠?♠

Obviously, the output is not the original string because I can't just try decrypting each byte at a time, since sometimes two or more bytes of the cypher-text represent the value of one integer that I need to decrypt back to one byte of the original string...so I want to know what the standard mechanism for handling this is.
","Your basic code for encrypting and decrypting each byte - the call to ModPow - is working, but you're going about the ""splitting the message up and encrypting each piece"" inappropriately.
To show that the ModPow part - i.e. the maths - is fine, here's code based on yours, which encrypts a string to a BigInteger[] and back:
using System;
using System.Linq;
using System.Numerics;
using System.Text;

class Test
{
    const int p = 61;
    const int q = 53;
    const int n = 3233;
    const int totient = 3120;
    const int e = 991;
    const int d = 1231;

    static void Main()
    {
        var encrypted = Encrypt(""Hello, world."", Encoding.UTF8);
        var decrypted = Decrypt(encrypted, Encoding.UTF8);
        Console.WriteLine(decrypted);
    }

    static BigInteger[] Encrypt(string text, Encoding encoding)
    {
        byte[] bytes = encoding.GetBytes(text);
        return bytes.Select(b => BigInteger.ModPow(b, (BigInteger)e, n))
                    .ToArray();
    }

    static string Decrypt(BigInteger[] encrypted, Encoding encoding)
    {
        byte[] bytes = encrypted.Select(bi => (byte) BigInteger.ModPow(bi, d, n))
                                .ToArray();
        return encoding.GetString(bytes);
    }
}

Next you need to read more about how a byte[] is encrypted into another byte[] using RSA, including all the different padding schemes etc. There's a lot more to it than just calling ModPow on each byte.
But to reiterate, you should not be doing this to end up with a production RSA implementation. The chances of you doing that without any security flaws are very slim indeed. It's fine to do this for academic interest, to learn more about the principles of cryptography, but leave the real implementations to experts. (I'm far from an expert in this field - there's no way I'd start implementing my own encryption...)
","1644","<c#><.net><encryption><rsa><public-key-encryption>","2","2","3","2014-06-18 14:12:59","24271759","20","1","982639","","2014-06-17 16:40:50","2014-06-17 15:08:33",""
"24267332","How to encrypt a string using public key cryptography","I am trying to implement my own RSA encryption engine. Given these RSA algorithm values:
p = 61. // A prime number.
q = 53. // Also a prime number.
n = 3233. // p * q.
totient = 3120. // (p - 1) * (q - 1)
e = 991. // Co-prime to the totient (co-prime to 3120).
d = 1231. // d * e = 1219921, which is equal to the relation where 1 + k * totient = 1219921 when k = 391.

I am trying to write a method to encrypt each byte in a string and return back an encrypted string:
public string Encrypt(string m, Encoding encoding)
{
    byte[] bytes = encoding.GetBytes(m);
    for (int i = 0; i < bytes.Length; i++)
    {
        bytes[i] = (byte)BigInteger.ModPow(bytes[i], e, n);
    }
    string encryptedString = encoding.GetString(bytes);
    Console.WriteLine(""Encrypted {0} as {1}."", m, encryptedString);
    return encryptedString;
}

The obvious issue here is that BigInteger.ModPow(bytes[i], e, n) may be too large to fit into a byte-space; it could result in values over 8 bits in size. How do you get around this issue while still being able to decrypt an encrypted string of bytes back into a regular string?
Update: Even encrypting from byte[] to byte[], you reach a case where encrypting that byte using the RSA algorithm goes beyond the size limit of a byte:
public byte[] Encrypt(string m, Encoding encoding)
{
    byte[] bytes = encoding.GetBytes(m);
    for (int i = 0; i < bytes.Length; i++)
    {
        bytes[i] = (byte)BigInteger.ModPow(bytes[i], e, n);
    }
    return bytes;
}

Update: My issue is that encryption would cause a greater number of bytes than the initial input string had:
public byte[] Encrypt(string m, Encoding encoding)
{
    byte[] bytes = encoding.GetBytes(m);
    byte[] returnBytes = new byte[0];
    for (int i = 0; i < bytes.Length; i++)
    {
        byte[] result = BigInteger.ModPow(bytes[i], (BigInteger)e, n).ToByteArray();
        int preSize = returnBytes.Length;
        Array.Resize(ref returnBytes, returnBytes.Length + result.Length);
        result.CopyTo(returnBytes, preSize);
    }
    return returnBytes;
}

public string Decrypt(byte[] c, Encoding encoding)
{
    byte[] returnBytes = new byte[0];
    for (int i = 0; i < c.Length; i++)
    {
        byte[] result = BigInteger.ModPow(c[i], d, n).ToByteArray();
        int preSize = returnBytes.Length;
        Array.Resize(ref returnBytes, returnBytes.Length + result.Length);
        result.CopyTo(returnBytes, preSize);
    }
    string decryptedString = encoding.GetString(returnBytes);
    return decryptedString;
}

If you ran this code like this:
byte[] encryptedBytes = engine.Encrypt(""Hello, world."", Encoding.UTF8);
Console.WriteLine(engine.Decrypt(encryptedBytes, Encoding.UTF8));

The output would be this:
?♥D
?♥→☻►♦→☻►♦oD♦8? ?♠oj?♠→☻►♦;♂?♠♂♠?♠

Obviously, the output is not the original string because I can't just try decrypting each byte at a time, since sometimes two or more bytes of the cypher-text represent the value of one integer that I need to decrypt back to one byte of the original string...so I want to know what the standard mechanism for handling this is.
","Note: I updated this answer. Please scroll down to the update for how it should actually be implemented because this first way of doing it is not the correct way of doing RSA encryption.
One way I can think to do it is like this (but may not be compliant to standards), and also, note this does not pad:
public byte[] Encrypt(string m, Encoding encoding)
{
    byte[] bytes = encoding.GetBytes(m);
    byte[] returnBytes = new byte[0];
    for (int i = 0; i < bytes.Length; i++)
    {
        byte[] result = BigInteger.ModPow(bytes[i], (BigInteger)e, n).ToByteArray();
        int preSize = returnBytes.Length;
        Array.Resize(ref returnBytes, returnBytes.Length + result.Length + 1);
        (new byte[] { (byte)(result.Length) }).CopyTo(returnBytes, preSize);
        result.CopyTo(returnBytes, preSize + 1);
    }
    return returnBytes;
}

public string Decrypt(byte[] c, Encoding encoding)
{
    byte[] returnBytes = new byte[0];
    for (int i = 0; i < c.Length; i++)
    {
        int dataLength = (int)c[i];
        byte[] result = new byte[dataLength];
        for (int j = 0; j < dataLength; j++)
        {
            i++;
            result[j] = c[i];
        }
        BigInteger integer = new BigInteger(result);
        byte[] integerResult = BigInteger.ModPow(integer, d, n).ToByteArray();
        int preSize = returnBytes.Length;
        Array.Resize(ref returnBytes, returnBytes.Length + integerResult.Length);
        integerResult.CopyTo(returnBytes, preSize);
    }
    string decryptedString = encoding.GetString(returnBytes);
    return decryptedString;
}

This has the potential of being cross-platform because you have the option of using a different datatype to represent e or n and pass it to a C# back-end service like that. Here is a test:
string stringToEncrypt = ""Mary had a little lamb."";
Console.WriteLine(""Encrypting the string: {0}"", stringToEncrypt);
byte[] encryptedBytes = engine.Encrypt(stringToEncrypt, Encoding.UTF8);
Console.WriteLine(""Encrypted text: {0}"", Encoding.UTF8.GetString(encryptedBytes));
Console.WriteLine(""Decrypted text: {0}"", engine.Decrypt(encryptedBytes, Encoding.UTF8));

Output:
Encrypting the string: Mary had a little lamb.
Encrypted text: ☻6☻1♦☻j☻☻&♀☻g♦☻t☻☻1♦☻?  ☻g♦☻1♦☻g♦☻?♥☻?☻☻7☺☻7☺☻?♥☻?♂☻g♦☻?♥☻1♦☻$☺☻
c       ☻?☻
Decrypted text: Mary had a little lamb.

Update: Everything I said earlier is completely wrong in the implementation of RSA. Wrong, wrong, wrong! This is the correct way to do RSA encryption:

Convert your string to a BigInteger datatype.
Make sure your integer is smaller than the value of n that you've calculated for your algorithm, otherwise you won't be able to decypher it.
Encrypt the integer. RSA works on integer encryption only. This is clear.
Decrypt it from the encrypted integer.
I can't help but wonder that the BigInteger class was mostly created for cryptography.

As an example:
using System;
using System.Collections.Generic;
using System.Linq;
using System.Numerics;
using System.Security.Cryptography;
using System.Text;
using System.Threading.Tasks;

namespace BytePadder
{
    class Program
    {
        const int p = 61;
        const int q = 53;
        const int n = 3233;
        const int totient = 3120;
        const int e = 991;
        const int d = 1231;

        static void Main(string[] args)
        {
            // ---------------------- RSA Example I ----------------------
            // Shows how an integer gets encrypted and decrypted.
            BigInteger integer = 1000;
            BigInteger encryptedInteger = Encrypt(integer);
            Console.WriteLine(""Encrypted Integer: {0}"", encryptedInteger);
            BigInteger decryptedInteger = Decrypt(encryptedInteger);
            Console.WriteLine(""Decrypted Integer: {0}"", decryptedInteger);
            // --------------------- RSA Example II ----------------------
            // Shows how a string gets encrypted and decrypted.
            string unencryptedString = ""A"";
            BigInteger integer2 = new BigInteger(Encoding.UTF8.GetBytes(unencryptedString));
            Console.WriteLine(""String as Integer: {0}"", integer2);
            BigInteger encryptedInteger2 = Encrypt(integer2);
            Console.WriteLine(""String as Encrypted Integer: {0}"", encryptedInteger2);
            BigInteger decryptedInteger2 = Decrypt(encryptedInteger2);
            Console.WriteLine(""String as Decrypted Integer: {0}"", decryptedInteger2);
            string decryptedIntegerAsString = Encoding.UTF8.GetString(decryptedInteger2.ToByteArray());
            Console.WriteLine(""Decrypted Integer as String: {0}"", decryptedIntegerAsString);
            Console.ReadLine();
        }

        static BigInteger Encrypt(BigInteger integer)
        {
            if (integer < n)
            {
                return BigInteger.ModPow(integer, e, n);
            }
            throw new Exception(""The integer must be less than the value of n in order to be decypherable!"");
        }

        static BigInteger Decrypt(BigInteger integer)
        {
            return BigInteger.ModPow(integer, d, n);
        }
    }
}

Example output:
Encrypted Integer: 1989
Decrypted Integer: 1000
String as Integer: 65
String as Encrypted Integer: 1834
String as Decrypted Integer: 65
Decrypted Integer as String: A

","1644","<c#><.net><encryption><rsa><public-key-encryption>","2","1","3","2014-06-18 14:12:59","24271759","20","1","982639","","2014-06-17 16:40:50","2014-06-17 15:08:33",""
"11904607","Git, vagrant (lucid 32), mountain lion, Permission denied","I'm having a similar problem to this:
Permission denied (publickey). fatal: The remote end hung up unexpectedly while pushing back to git repository
But I suspect it might be more complicated because I am running vagrant on a mac (mountain lion) and I am having this ""Permission Denied"" issue that I wasn't having in Snow Leopard.
I set up git on my mac (mountain lion) with ssh key, it works.
I set up vagrant (lucid32 box) and set up a new ssh key (once I ssh'ed into vagrant):
cd ~/.ssh
ssh-keygen -t rsa -C ""myemail@mail.com""
Generating public/private rsa key pair.
Enter file in which to save the key (/home/vagrant/.ssh/id_rsa): 
Enter passphrase (empty for no passphrase): [just hit enter]
Enter same passphrase again: [just hit enter]

Then I added the ssh key to my github repo (note: was having problems with pbcopy/xclip so I just used vi and copy-pasted)
vagrant@lucid32:~$ cd /vagrant/
vagrant@lucid32:/vagrant$ git push -u origin master
Permission denied (publickey).
fatal: The remote end hung up unexpectedly

So, now I have two ssh keys in my github repo:
- My Mac key (works, can commit to my non-vagrant repo from my mac)
- My vagrant key (does not work, cannot ssh into vagrant and commit my repo from my vagrant box)

","Are you trying to push to a github repo? 
If so, you're going to need to add the SSH key of the vagrant VM to your account on Github under account settings.
Keep in mind, a Vagrant VM is essentially a ""different"" machine than your local machine, so it will have a different SSH key.
See this github article on working with SSH keys
","1642","<ssh><github><public-key-encryption><osx-mountain-lion><vagrant>","0","1","2","2012-08-10 16:32:07","","0","","-1","","2017-05-23 12:27:33","2012-08-10 15:16:55",""
"11904607","Git, vagrant (lucid 32), mountain lion, Permission denied","I'm having a similar problem to this:
Permission denied (publickey). fatal: The remote end hung up unexpectedly while pushing back to git repository
But I suspect it might be more complicated because I am running vagrant on a mac (mountain lion) and I am having this ""Permission Denied"" issue that I wasn't having in Snow Leopard.
I set up git on my mac (mountain lion) with ssh key, it works.
I set up vagrant (lucid32 box) and set up a new ssh key (once I ssh'ed into vagrant):
cd ~/.ssh
ssh-keygen -t rsa -C ""myemail@mail.com""
Generating public/private rsa key pair.
Enter file in which to save the key (/home/vagrant/.ssh/id_rsa): 
Enter passphrase (empty for no passphrase): [just hit enter]
Enter same passphrase again: [just hit enter]

Then I added the ssh key to my github repo (note: was having problems with pbcopy/xclip so I just used vi and copy-pasted)
vagrant@lucid32:~$ cd /vagrant/
vagrant@lucid32:/vagrant$ git push -u origin master
Permission denied (publickey).
fatal: The remote end hung up unexpectedly

So, now I have two ssh keys in my github repo:
- My Mac key (works, can commit to my non-vagrant repo from my mac)
- My vagrant key (does not work, cannot ssh into vagrant and commit my repo from my vagrant box)

","Mine started working, I followed this advice:
Unable to Git-push master to Github
And added a config file to my ~/.ssh folder. Not it works but I'm not sure if why that helps?
","1642","<ssh><github><public-key-encryption><osx-mountain-lion><vagrant>","0","0","2","2012-08-10 16:32:07","","0","","-1","","2017-05-23 12:27:33","2012-08-10 15:16:55",""
"13743438","How to implement private/public apikey with werkzeug/bottle?","I am developing a RESTful web service with Bottle, probably soon to migrate to Werkzeug. I'd like to implement an auth scheme that works based on a private/public key pair where the server only has to store the public part while the user keeps the private one.  Upon access, the server would require the accessor to perform an action using the private key that the server can verify and relate to the public key part.  Upon success, for example a token is generated which can be used for some time.  What is the path to implement something like this for Werkzeug or Bottle?  Any projects/examples i could work from?  
","I believe, the best option here is to shift the responsibility to work with cryptography onto something else. Web servers and CA (certification authorities) are good with it. 
Basically, altogether they can 

ensure the connection is secure
ensure the client uses certificate, signed by valid (say, yours) CA
ensure the the certificate hasn't been revoked
provide to your application the only information you need: the identifier of the remote party

We use such mechanism to authenticate a third-party payment service (sorry, private code), and there is also a plugin to Redmine providing the same mechanism of client authorization, and we use it too (certainly, it's Ruby, but it's also a valid proof that such services can be found in wild.)
To make things work, all you need is to

configure your CA.
configure your web-server to ensure it accepts certificates by your authority, and only these certificates, and passes the client id further to your app.
ensure your application can extract client identifier from request.

Below is an tiny example with easyrsa, nginx, uWsgi and werkzeug
Configure CA
The easyrsa toolkit is a part of OpenVPN installation. It's possible to use OpenSSL ""raw"" command or PyOpenSSL, but easyrsa is convenient and suitable at least at the concept stage.
cp -a /usr/share/doc/openvpn/examples/easy-rsa/2.0 /etc/nginx/easyrsa
cd /etc/nginx/easyrsa && source vars && ./clean-all

Create CA
./build-ca

Create server certificate
./build-key --server server

Create client certificate.
./build-key-pkcs12  client1

In the sample above you create both client secret key and its corresponding public part (certificate), but good practice assumes that you sign client certificate requests instead, and has no access to secret part.
Some services generate a pair of secret key + certificate for you and then write a message on download page like ""this is the only chance for you to download the secret key. We don't store it, so it cannot be download later.""
Additionally, this command creates a PKCS12 file with encrypted key and certificate, which is handy for import to browsers.
Configure nginx
First, we should create a pair ""server certificate + ca certificate"", as our CA self-signed:
cat keys/server.crt keys/ca.crt > keys/server_and_ca.crt

Then the following config can be applied:
server {
    listen 443;

    location / {
        # Here we define the name and the contents of the WSGI variable to pass to service
        uwsgi_param SSL_CLIENT_ID $ssl_client_s_dn;
        include uwsgi_params;
        uwsgi_pass 127.0.0.1:5000;
    }


    # SSL support
    ssl                 on;
    ssl_protocols       SSLv3 TLSv1;
    ssl_certificate     easyrsa/keys/ca_and_server.crt;
    ssl_certificate_key easyrsa/keys/server.key;

    # We don't accept anyone without correct client certificate
    ssl_verify_client on;
    # The CA we use to verify client certificates
    ssl_client_certificate easyrsa/keys/ca.crt;
}

More information on configuration options is available here and here.
Ensure you have correct privileges to the /etc/nginx/easyrsa directory and only root and nginx can get access to secret keys.
Write a Werkzeug application
The python part is trivial. Just read the variable SSL_CLIENT_ID from WSGI environment.
The contents of the sample application in file sample.py
from werkzeug.wrappers import Response

def application(environ, start_response):
    text = 'Hello, your certificate id is %s\n' % environ.get('SSL_CLIENT_ID', '(unknown)')
    response = Response(text, mimetype='text/plain')
    return response(environ, start_response)

Launch the service with a uwsgi server: uwsgi -w sample:application --socket 127.0.0.1:5000
Test your installation
It's easy to test with curl
$ curl --cert keys/client1.crt --key keys/client1.key --cacert keys/ca.crt https://localhost/
Hello, your certificate id is /C=US/ST=CA/L=SanFrancisco/O=Fort-Funston/OU=changeme/CN=client1/name=changeme/emailAddress=mail@host.domain

","1632","<python><rest><public-key-encryption><bottle><werkzeug>","0","3","1","2012-12-06 16:47:22","13748451","2","1","","","","2012-12-06 12:14:46",""
"18483480","Passwordless ssh using key authentication in rackspace cloud fails: asks for password","I am trying passwordless ssh connection using public and private key mechanism to a cloudserver(running redhat) in rackspace.
My commands are(in the server):

adduser  -g root
mkdir /home//.ssh
copy my public key to /home//.ssh/authorized_keys
chmod 700 /home//.ssh
chmod 600 /home//.ssh/authorized_keys

In the config file of server in the rackspace cloud:

RSAAuthentication yes
PubkeyAuthentication yes
#AuthorizedKeysFile     .ssh/authorized_keys

When I try to do ""ssh -i my_priv_key @server_ip"", it fails and asks me for the password of @server_ip.
When I added the following line to sshd_config on my server, it says Permission denied (publickey,gssapi-keyex,gssapi-with-mic).
Match User 
   PasswordAuthentication no
I have been trying for the last couple of hours but am not able to figure it out. So any idea how to solve this problem. 
","Have you checked the permissions & time settings on the server.
Also, have u intentionally removed the username from the post.
Try doing ssh with -v option. This will give more output for debugging.
","1632","<linux><authentication><ssh><public-key-encryption><rackspace-cloud>","1","0","3","2013-08-30 22:13:04","","0","","","","","2013-08-28 08:59:12",""
"18483480","Passwordless ssh using key authentication in rackspace cloud fails: asks for password","I am trying passwordless ssh connection using public and private key mechanism to a cloudserver(running redhat) in rackspace.
My commands are(in the server):

adduser  -g root
mkdir /home//.ssh
copy my public key to /home//.ssh/authorized_keys
chmod 700 /home//.ssh
chmod 600 /home//.ssh/authorized_keys

In the config file of server in the rackspace cloud:

RSAAuthentication yes
PubkeyAuthentication yes
#AuthorizedKeysFile     .ssh/authorized_keys

When I try to do ""ssh -i my_priv_key @server_ip"", it fails and asks me for the password of @server_ip.
When I added the following line to sshd_config on my server, it says Permission denied (publickey,gssapi-keyex,gssapi-with-mic).
Match User 
   PasswordAuthentication no
I have been trying for the last couple of hours but am not able to figure it out. So any idea how to solve this problem. 
","The easiest way I have found to setup SSH keys on a remote server is to use the ssh-copy-id command. 
http://linux.die.net/man/1/ssh-copy-id
","1632","<linux><authentication><ssh><public-key-encryption><rackspace-cloud>","1","0","3","2013-08-30 22:13:04","","0","","","","","2013-08-28 08:59:12",""
"18483480","Passwordless ssh using key authentication in rackspace cloud fails: asks for password","I am trying passwordless ssh connection using public and private key mechanism to a cloudserver(running redhat) in rackspace.
My commands are(in the server):

adduser  -g root
mkdir /home//.ssh
copy my public key to /home//.ssh/authorized_keys
chmod 700 /home//.ssh
chmod 600 /home//.ssh/authorized_keys

In the config file of server in the rackspace cloud:

RSAAuthentication yes
PubkeyAuthentication yes
#AuthorizedKeysFile     .ssh/authorized_keys

When I try to do ""ssh -i my_priv_key @server_ip"", it fails and asks me for the password of @server_ip.
When I added the following line to sshd_config on my server, it says Permission denied (publickey,gssapi-keyex,gssapi-with-mic).
Match User 
   PasswordAuthentication no
I have been trying for the last couple of hours but am not able to figure it out. So any idea how to solve this problem. 
","This doesn't answer your question completely, but I'd like to show you another way to put your SSH keys on your servers, in automation using the Rackspace API. If, for instance, you're using pyrax:
import pyrax
import os

pyrax.set_setting(""identity_type"", ""rackspace"")
pyrax.set_setting(""username"", USER_NAME) # User name
pyrax.set_setting(""api_key"", API_KEY) # Located in the control panel in settings

# Could also use a credential file
# pyrax.set_credential_file(os.path.expanduser(""~/.rackspace_cloud_credentials""))

# Put your SSH key on the Rackspace cloud
pubkey = open(""my_priv_key"").read()
cs.keypairs.create(""testkey"", pubkey)

# For demo purposes, grab a sample image, server type (flavor in OpenStack parlance)
flavor_512 = [flavor for flavor in cs.flavors.list() if flavor.ram == 512][0]
ubu_image = [img for img in cs.images.list() if ""Ubuntu 12.04"" in img.name][0]

# Now we can create the server and assign an ssh key
server = cs.servers.create(""ubbie"", ubu_image.id, flavor_512.id,
        key_name=""testkey"")

Your API Key is located in Settings and Contacts within the Cloud Control panel, underneath the security question:

Once the server is built, you should be able to grab the ip address
server = cs.servers.get(server.id)
ip = server.accessIPv4

Then simply ssh as root using the key you specified.
ssh -i my_priv_key root@<ip>

If Python isn't your preferred language, there are other options. You can also make direct requests/use curl if that's your thing, as this is part of the Rackspace API and OpenStack/nova proper.
","1632","<linux><authentication><ssh><public-key-encryption><rackspace-cloud>","1","1","3","2013-08-30 22:13:04","","0","","","","","2013-08-28 08:59:12",""
"29825492","How to generate public and private keys usable for both C and Java?","I am trying to generate PKCS12 public and private keys with OpenSSL on Windows 7 64-bit that can be used by both the Microsoft CryptoAPI in C as well as Java programs.
Here are the steps I have followed:
Downloaded installed Microsoft Visual C++ 2008 Redistributable Package (x64) de:
http://www.microsoft.com/en-us/download/details.aspx?id=15336
Downloaded installed ""Win64 OpenSSL v1.0.2a Light"" de:
http://slproweb.com/products/Win32OpenSSL.html
To encrypt/decrypt files of arbitrary size using asymmetric (public) key cryptography you need to use S/MIME encoding:
1) generate the key pair. This makes a 2048 bit public encryption key/certificate rsakpubcert.key and a matching private decryption key rsakpriv.key. The -days 10000 means keep it valid for a long time (27 years or so). You will be asked (twice) for a PEM passphrase to encrypt the private key. If you do not wish to encrypt it, pass the -nodes option. The public key can be distributed to anyone who wants to send you data. 
md C:\OpenSSL-Win64\bin    
cd C:\OpenSSL-Win64\bin    
set OPENSSL_CONF=C:\OpenSSL-Win64\bin\openssl.cfg    
openssl req -x509 -days 10000 -newkey rsa:2048 -keyout c:\opensslkeys\rsakpriv.key -out c:\opensslkeys\rsakpubcert.key

// pass phrase used: mypassword

2) Create request for self-signed certificate 
openssl req -new -key c:\opensslkeys\rsakpriv.key -out c:\opensslkeys\server.csr

3) Remove password from the private key 
openssl rsa -in c:\opensslkeys\rsakpriv.key -out c:\opensslkeys\rsakprivnopassword.key

4) Self-sign the certificate request (-days is expiration in days)
Important: start the command prompt with ""Run As Administrator"". Otherwise you get the same: unable to write 'random state' error.
cd C:\OpenSSL-Win64\bin    
set OPENSSL_CONF=C:\OpenSSL-Win64\bin\openssl.cfg    
openssl x509 -req -days 365 -in c:\opensslkeys\server.csr -signkey c:\opensslkeys\rsakprivnopassword.key -out c:\opensslkeys\server.crt

5) Convert output to PKCS#12 format which we can use in code (-keysig parameter allows us to use key-pair for signing) 
openssl pkcs12 -export -in c:\opensslkeys\server.crt -inkey c:\opensslkeys\rsakprivnopassword.key -out c:\opensslkeys\mypublicencryptionkey.p12    
// export password used: mypassword

At this point I can encrypt and decrypt files with openssl with these commands:
To encrypt:
openssl smime -encrypt -binary -aes-256-cbc -in c:\opensslkeys\todo.txt -out c:\opensslkeys\done.txt -outform DER c:\opensslkeys\server.crt

To decrypt:
openssl smime -decrypt -binary -in c:\opensslkeys\done.txt -inform DER -out c:\opensslkeys\redone.txt -inkey c:\opensslkeys\rsakprivnopassword.key

However when I try to use the keys in Java the program chokes, saying the key format is wrong. 
Any help greatly appreciated! I promise to post the com,plete working answer for others.

Complete Java code:
/*
PrivatePublicKey.java   
*/
import java.io.FileInputStream;
import java.security.KeyStore;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.cert.Certificate;
import javax.crypto.Cipher;
/* for IBM JDK need to replace: */
//import java.util.Base64;
/* with: */
import org.apache.commons.codec.binary.Base64;

public class PrivatePublicKey 
{
    public static void main(String[] args) throws Exception 
    {
        try 
        {
            PublicKeyReader myPublic = new PublicKeyReader();
            PublicKey publicKey = myPublic.get(""./rsakpubcert.key"");

            PrivateKeyReader myPrivate = new PrivateKeyReader();
            PrivateKey privateKey = myPrivate.get(""./rsakprivnopassword.key"");

            // Let's encrypt with private and decrypt with public
            // Encrypt with private key
            String firstString = ""Ishana"";

            Cipher privateEncryptCipher = Cipher.getInstance(""RSA/ECB/PKCS1Padding"");
            privateEncryptCipher.init(Cipher.ENCRYPT_MODE, privateKey);

            byte[] encryptedFirstString = privateEncryptCipher.doFinal(firstString.getBytes());
            String encodedEncryptedFirstString = Base64.encodeBase64String(encryptedFirstString);

            System.out.println(""Encoded encrypted String for Ishana: "" + encodedEncryptedFirstString);

            // Decrypt with public key
            // First decode the string
            byte[] decodedEncryptedFirstString = Base64.decodeBase64(encodedEncryptedFirstString);

            Cipher publicDecryptCipher = Cipher
                .getInstance(""RSA/ECB/PKCS1Padding"");
            publicDecryptCipher.init(Cipher.DECRYPT_MODE, publicKey);
            byte[] decryptedFirstStringByte =     publicDecryptCipher.doFinal(decodedEncryptedFirstString);
            System.out.println(""Decrypted String for Ishana: "" + new String(decryptedFirstStringByte));
        }
        catch (Exception e) 
        {
            e.printStackTrace();
        }
    }
}

Edit, added helper code:
import java.io.*;
import java.security.*;
import java.security.spec.*;


public class PublicKeyReader {

  public static PublicKey get(String filename)
throws Exception {

    File f = new File(filename);
    FileInputStream fis = new FileInputStream(f);
    DataInputStream dis = new DataInputStream(fis);
    byte[] keyBytes = new byte[(int)f.length()];
    dis.readFully(keyBytes);
    dis.close();

    X509EncodedKeySpec spec =
      new X509EncodedKeySpec(keyBytes);
    KeyFactory kf = KeyFactory.getInstance(""RSA"");
    return kf.generatePublic(spec);
  }
}

and
import java.io.*;
import java.security.*;
import java.security.spec.*;

public class PrivateKeyReader {

  public static PrivateKey get(String filename)
  throws Exception {

    File f = new File(filename);
    FileInputStream fis = new FileInputStream(f);
    DataInputStream dis = new DataInputStream(fis);
    byte[] keyBytes = new byte[(int)f.length()];
    dis.readFully(keyBytes);
    dis.close();

    PKCS8EncodedKeySpec spec =
      new PKCS8EncodedKeySpec(keyBytes);
    KeyFactory kf = KeyFactory.getInstance(""RSA"");
    return kf.generatePrivate(spec);
  }
}

","
How to generate public and private keys usable for both C and Java?

Generating the key pairs and representing them in memory is different than consuming them in Java or another framework/library, like OpenSSL.
Representing keys in memory is framework/library specific.
Encoding the keys so different frameworks/libraries can consume them is the trick.


However when I try to use the keys in Java the program chokes, saying the key format is wrong. 

In Java, its usually enough to call getBytes() on the key. The key will be provided in a natural representation. For example calling it on a RSA public key will result in an ASN.1 encoding from PKCS 1.
Other formats you can consider for interoperability are PKCS8 for private keys and PKCS12.
There's also PEM, but its an older format. PEM is OK for public keys, but you should use PKCS8 or PKCS12 for private keys.

The private you generated with OpenSSL is probably in encrypted PEM format (you should state the encoding you are using for them). See java read pem encoded key and How to read a password encrypted key with java?. If its DER encoded, then see java read der encoded key
","1627","<java><openssl><public-key><public-key-encryption>","1","1","2","2016-09-12 20:29:29","39458338","3","3","3597426","","2015-04-24 10:27:49","2015-04-23 12:37:46",""
"29825492","How to generate public and private keys usable for both C and Java?","I am trying to generate PKCS12 public and private keys with OpenSSL on Windows 7 64-bit that can be used by both the Microsoft CryptoAPI in C as well as Java programs.
Here are the steps I have followed:
Downloaded installed Microsoft Visual C++ 2008 Redistributable Package (x64) de:
http://www.microsoft.com/en-us/download/details.aspx?id=15336
Downloaded installed ""Win64 OpenSSL v1.0.2a Light"" de:
http://slproweb.com/products/Win32OpenSSL.html
To encrypt/decrypt files of arbitrary size using asymmetric (public) key cryptography you need to use S/MIME encoding:
1) generate the key pair. This makes a 2048 bit public encryption key/certificate rsakpubcert.key and a matching private decryption key rsakpriv.key. The -days 10000 means keep it valid for a long time (27 years or so). You will be asked (twice) for a PEM passphrase to encrypt the private key. If you do not wish to encrypt it, pass the -nodes option. The public key can be distributed to anyone who wants to send you data. 
md C:\OpenSSL-Win64\bin    
cd C:\OpenSSL-Win64\bin    
set OPENSSL_CONF=C:\OpenSSL-Win64\bin\openssl.cfg    
openssl req -x509 -days 10000 -newkey rsa:2048 -keyout c:\opensslkeys\rsakpriv.key -out c:\opensslkeys\rsakpubcert.key

// pass phrase used: mypassword

2) Create request for self-signed certificate 
openssl req -new -key c:\opensslkeys\rsakpriv.key -out c:\opensslkeys\server.csr

3) Remove password from the private key 
openssl rsa -in c:\opensslkeys\rsakpriv.key -out c:\opensslkeys\rsakprivnopassword.key

4) Self-sign the certificate request (-days is expiration in days)
Important: start the command prompt with ""Run As Administrator"". Otherwise you get the same: unable to write 'random state' error.
cd C:\OpenSSL-Win64\bin    
set OPENSSL_CONF=C:\OpenSSL-Win64\bin\openssl.cfg    
openssl x509 -req -days 365 -in c:\opensslkeys\server.csr -signkey c:\opensslkeys\rsakprivnopassword.key -out c:\opensslkeys\server.crt

5) Convert output to PKCS#12 format which we can use in code (-keysig parameter allows us to use key-pair for signing) 
openssl pkcs12 -export -in c:\opensslkeys\server.crt -inkey c:\opensslkeys\rsakprivnopassword.key -out c:\opensslkeys\mypublicencryptionkey.p12    
// export password used: mypassword

At this point I can encrypt and decrypt files with openssl with these commands:
To encrypt:
openssl smime -encrypt -binary -aes-256-cbc -in c:\opensslkeys\todo.txt -out c:\opensslkeys\done.txt -outform DER c:\opensslkeys\server.crt

To decrypt:
openssl smime -decrypt -binary -in c:\opensslkeys\done.txt -inform DER -out c:\opensslkeys\redone.txt -inkey c:\opensslkeys\rsakprivnopassword.key

However when I try to use the keys in Java the program chokes, saying the key format is wrong. 
Any help greatly appreciated! I promise to post the com,plete working answer for others.

Complete Java code:
/*
PrivatePublicKey.java   
*/
import java.io.FileInputStream;
import java.security.KeyStore;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.cert.Certificate;
import javax.crypto.Cipher;
/* for IBM JDK need to replace: */
//import java.util.Base64;
/* with: */
import org.apache.commons.codec.binary.Base64;

public class PrivatePublicKey 
{
    public static void main(String[] args) throws Exception 
    {
        try 
        {
            PublicKeyReader myPublic = new PublicKeyReader();
            PublicKey publicKey = myPublic.get(""./rsakpubcert.key"");

            PrivateKeyReader myPrivate = new PrivateKeyReader();
            PrivateKey privateKey = myPrivate.get(""./rsakprivnopassword.key"");

            // Let's encrypt with private and decrypt with public
            // Encrypt with private key
            String firstString = ""Ishana"";

            Cipher privateEncryptCipher = Cipher.getInstance(""RSA/ECB/PKCS1Padding"");
            privateEncryptCipher.init(Cipher.ENCRYPT_MODE, privateKey);

            byte[] encryptedFirstString = privateEncryptCipher.doFinal(firstString.getBytes());
            String encodedEncryptedFirstString = Base64.encodeBase64String(encryptedFirstString);

            System.out.println(""Encoded encrypted String for Ishana: "" + encodedEncryptedFirstString);

            // Decrypt with public key
            // First decode the string
            byte[] decodedEncryptedFirstString = Base64.decodeBase64(encodedEncryptedFirstString);

            Cipher publicDecryptCipher = Cipher
                .getInstance(""RSA/ECB/PKCS1Padding"");
            publicDecryptCipher.init(Cipher.DECRYPT_MODE, publicKey);
            byte[] decryptedFirstStringByte =     publicDecryptCipher.doFinal(decodedEncryptedFirstString);
            System.out.println(""Decrypted String for Ishana: "" + new String(decryptedFirstStringByte));
        }
        catch (Exception e) 
        {
            e.printStackTrace();
        }
    }
}

Edit, added helper code:
import java.io.*;
import java.security.*;
import java.security.spec.*;


public class PublicKeyReader {

  public static PublicKey get(String filename)
throws Exception {

    File f = new File(filename);
    FileInputStream fis = new FileInputStream(f);
    DataInputStream dis = new DataInputStream(fis);
    byte[] keyBytes = new byte[(int)f.length()];
    dis.readFully(keyBytes);
    dis.close();

    X509EncodedKeySpec spec =
      new X509EncodedKeySpec(keyBytes);
    KeyFactory kf = KeyFactory.getInstance(""RSA"");
    return kf.generatePublic(spec);
  }
}

and
import java.io.*;
import java.security.*;
import java.security.spec.*;

public class PrivateKeyReader {

  public static PrivateKey get(String filename)
  throws Exception {

    File f = new File(filename);
    FileInputStream fis = new FileInputStream(f);
    DataInputStream dis = new DataInputStream(fis);
    byte[] keyBytes = new byte[(int)f.length()];
    dis.readFully(keyBytes);
    dis.close();

    PKCS8EncodedKeySpec spec =
      new PKCS8EncodedKeySpec(keyBytes);
    KeyFactory kf = KeyFactory.getInstance(""RSA"");
    return kf.generatePrivate(spec);
  }
}

","I was finally able to make this work.
The starting point was: http://blogs.msdn.com/b/alejacma/archive/2008/01/28/how-to-generate-key-pairs-encrypt-and-decrypt-data-with-cryptoapi.aspx
Issues encountered
1)  Microsoft public and private keys used by CryptoAPI use a proprietary binary format (generally referred to as PUBLICKEYBLOB and PRIVATEKEYBLOB) that cannot be used by Java. Conversion of keys is required;
2)  The Crypto API encrypts in little-endian binary format while Java reads bytes in big-endian format. Ref: http://www.jensign.com/JavaScience/dotnet/RSAEncrypt/  and http://en.wikipedia.org/wiki/Endianness
Binary conversion is required;
3)  The Microsoft CryptoAPI pads the message when it encrypts it. This means to decrypt in Java, the exact implementation of the RSA algorithm is required which takes into consideration the padding scheme used.
On the Java decrypt side, I used Cipher.getInstance(""RSA/NONE/PKCS1Padding"");
Hope this is helpful to someone.
","1627","<java><openssl><public-key><public-key-encryption>","1","0","2","2016-09-12 20:29:29","39458338","3","3","3597426","","2015-04-24 10:27:49","2015-04-23 12:37:46",""
"29484222","how to solve javax.crypto. IllegalBlockSizeException without increase the size if key","An Exception caught at the line
encryptedData = cipher.doFinal(data);

javax.crypto.IllegalBlockSizeException: Data must not be longer than 501 bytes
at com.sun.crypto.provider.RSACipher.doFinal(RSACipher.java:344)

The key size is given by: keyPairGenerator.initialize(4096);
How to solve this problem without increasing the size of key?
","With asymmetric encryption there is no way to encrypt data longer than key minus padding. Since it's 11 bytes for you I can conclude you use PKCS#1 padding. What you can do is try to compress data, but depending on data length and nature it easily can fail. Another option is to combine symmetric block ciphers (which has no limitation for the size of data) and asymmetric encryption:

Generate random AES key
byte[] keyData = new byte[32];
SecureRandom random = new SecureRandom();
random.nextBytes(keyData);

Encrypt data with AES.
// zero filled input vector
byte[] ivData = new byte[32];
IvParameterSpec iv = new IvParameterSpec(ivData);
SecretKeySpec keySpec = new SecretKeySpec(keyData, ""AES"");
Cipher aes = Cipher.getInstance(""AES/CBC/PKCS5Padding"");
aes.init(Cipher.ENCRYPT_MODE, keySpec, iv);
byte[] cipherText = aes.doFinal(data);

Encrypt AES key (for AES-256 it's 32 bytes) with RSA private key.
Cipher cipher = Cipher.getInstance(""RSA"");
cipher.init(Cipher.WRAP_MODE, rsaKeyPair.getPublic());
byte[] wrappedKey = cipher.doFinal(keyData);

Combine wrappedKey with cipherText. Can be done with just appending one to another, but also some binary format can be used.

","1608","<java><encryption><rsa><public-key-encryption>","1","2","1","2015-04-07 11:00:25","29489617","0","3","207421","","2015-04-07 05:26:37","2015-04-07 05:13:46",""
"31784368","How to give highest trust level to an OpenPGP certificate in Kleopatra?","I'd like to give the highest trust level to a certificate. I need to do so, as this certificate is mine but I don't have exported it before formatting my PC.
I have downloaded it from a public key server and I have my private key saved in KeePass, but I don't know what to do next.
","I'm sorry I cannot tell you how to do it in Kleopatra, but it is rather easy on the command line.

If you haven't imported the private key yet, save it to a file (let's say, key.pgp, name and extension don't matter). Now run gpg --import <key.pgp. Your key should be listed using gpg -K now.
For setting trust (the highest trust level in OpenPGP is ""ultimate"", which is usually only applied to your own certificates, as you want to do in this case), run gpg --edit-key [key-id] (printed in gpg -K above). In the edit key menu, run trust; and enter 5 (followed by Return for ""I trust ultimately"". Confirm with y (again followed by Return), and finally run save to store the modified key and quit GnuPG.

","1598","<public-key-encryption><gnupg><openpgp>","1","1","1","2015-08-03 10:11:52","31784724","2","","695343","","2015-08-03 10:06:12","2015-08-03 09:53:26",""
"17205031","Android In-app security recommendation - what does this mean?","The Android developer says the following about storing your app public key in your project:

Security Recommendation: It is highly recommended that you do not
  hard-code the exact public license key string value as provided by
  Google Play. Instead, you can construct the whole public license key
  string at runtime from substrings, or retrieve it from an encrypted
  store, before passing it to the constructor. This approach makes it
  more difficult for malicious third-parties to modify the public
  license key string in your APK file.

Should this be self-explanatory? I don't understand what they want me to do.
They say the same thing in the comments of the example, but what the heck p they don't actually demonstrate what they mean by their instructions. Here's what it says:

Instead of just storing the entire literal string here embedded in
  the
           * program,  construct the key at runtime from pieces or
           * use bit manipulation (for example, XOR with some other string) to hide
           * the actual key.  The key itself is not secret information, but we don't
           * want to make it easy for an attacker to replace the public key with one
           * of their own and then fake messages from the server.

So how exactly might a person do this?
","android developer wants to say the ""public key"" you need to synchronize with google play for any of payment you want to do using your application, It should not be used directly inside your app source code because it can be easily hacked by any one.
So one way is store your public key in the server side and once you get response from google play to verify the key send that response to server and perform your operation there at server.
       /**
       * String transformation by XOR-ing all characters by value.
       */
       static String stringTransform(String s, int i) {
       char[] chars = s.toCharArray();
       for(int j = 0; j<chars.length; j++)
        chars[j] = (char)(chars[j] ^ i);
         return String.valueOf(chars);
       }

","1584","<android><security><public-key-encryption>","8","2","3","2014-10-01 08:34:52","17205111","0","4","","","","2013-06-20 04:01:04",""
"17205031","Android In-app security recommendation - what does this mean?","The Android developer says the following about storing your app public key in your project:

Security Recommendation: It is highly recommended that you do not
  hard-code the exact public license key string value as provided by
  Google Play. Instead, you can construct the whole public license key
  string at runtime from substrings, or retrieve it from an encrypted
  store, before passing it to the constructor. This approach makes it
  more difficult for malicious third-parties to modify the public
  license key string in your APK file.

Should this be self-explanatory? I don't understand what they want me to do.
They say the same thing in the comments of the example, but what the heck p they don't actually demonstrate what they mean by their instructions. Here's what it says:

Instead of just storing the entire literal string here embedded in
  the
           * program,  construct the key at runtime from pieces or
           * use bit manipulation (for example, XOR with some other string) to hide
           * the actual key.  The key itself is not secret information, but we don't
           * want to make it easy for an attacker to replace the public key with one
           * of their own and then fake messages from the server.

So how exactly might a person do this?
","It's a very basic information that they are trying to say. Let's see this example:
Some developer might store there license as a string itself:
private static final String LICENSE_1=""xxx-yyy-zzz""
private static final String LICENSE_2=""xxz-yyz-zzz""
private static final String LICENSE_N=""xxz-yyz-zzz""

private ArrayList<String> licenseList=new ArrayList<String>();

licenseList.add(LICENSE_N);

And they they might want user to enter their license number, so they will do something like this:
if(licenseList.contains(ExitText.getText().toString())
    //allow
else
   //disallow

Now I can decompile this app and get all the license :D
If you hadn't had anything like above in your code, the only way i could bypass your licensing is: if it's done locally could be by hacking into memory like GameCIH does. Memory hacking is only one example, there are various things attackers might do. You cannot stop them but, you can make their life harder.
","1584","<android><security><public-key-encryption>","8","1","3","2014-10-01 08:34:52","17205111","0","4","","","","2013-06-20 04:01:04",""
"17205031","Android In-app security recommendation - what does this mean?","The Android developer says the following about storing your app public key in your project:

Security Recommendation: It is highly recommended that you do not
  hard-code the exact public license key string value as provided by
  Google Play. Instead, you can construct the whole public license key
  string at runtime from substrings, or retrieve it from an encrypted
  store, before passing it to the constructor. This approach makes it
  more difficult for malicious third-parties to modify the public
  license key string in your APK file.

Should this be self-explanatory? I don't understand what they want me to do.
They say the same thing in the comments of the example, but what the heck p they don't actually demonstrate what they mean by their instructions. Here's what it says:

Instead of just storing the entire literal string here embedded in
  the
           * program,  construct the key at runtime from pieces or
           * use bit manipulation (for example, XOR with some other string) to hide
           * the actual key.  The key itself is not secret information, but we don't
           * want to make it easy for an attacker to replace the public key with one
           * of their own and then fake messages from the server.

So how exactly might a person do this?
","As already noted, security through obscurity does not work, so you can ignore the documentation.
","1584","<android><security><public-key-encryption>","8","1","3","2014-10-01 08:34:52","17205111","0","4","","","","2013-06-20 04:01:04",""
"46437951","Deprecated: Function mcrypt_decrypt() in php","I update my server from 5.45 to 7.1 after that I am getting an error.
I am getting the issue in decryptIt function.
function encryptIt( $q ) {
    $cryptKey  = 'qJB0rGtIn5UB1xG03efyCp';
    $qEncoded      = base64_encode( mcrypt_encrypt( MCRYPT_RIJNDAEL_256, md5( $cryptKey ), $q, MCRYPT_MODE_CBC, md5( md5( $cryptKey ) ) ) );
    return( $qEncoded );
}

function decryptIt( $q ) {
    $cryptKey  = 'qJB0rGtIn5UB1xG03efyCp';
    $qDecoded      = rtrim( mcrypt_decrypt( MCRYPT_RIJNDAEL_256, md5( $cryptKey ), base64_decode( $q ), MCRYPT_MODE_CBC, md5( md5( $cryptKey ) ) ), ""\0"");
    return( $qDecoded );
}

I am encrypting the id using below code so that I can display the URL something like this uYxnJrS3aLv0JbJFLnnmW4TRRpF6%2FYB0JD6LUhPYu0U%3D# 
$p_id=10;
$encrypted_user_id1 = encryptIt($p_id);
$p_user_id1=urlencode($encrypted_user_id1);

And decrepting it so that I will get the $p_id=10 on my page 
$decrypted_p_id = decryptIt($p_id);

But I am getting error now
Deprecated: Function mcrypt_decrypt() is deprecated

Would you help me out in this?
","","1578","<php><encryption><public-key-encryption><mcrypt>","2","","0","2017-09-27 01:06:09","","13","","","","","2017-09-27 01:06:09","2018-04-19 13:51:37"
"42369271","RSA-OAEP with SHA -256 key size 2048 bits using OpenSSL","I am trying to address a use case exactly same as How to encrypt data using RSA, with SHA-256 as hash function and MGF1 as mask generating function?, but I need a few more clarity on this.
The above query was raised in the year 2013. At that time the OpenSSL only supported SHA1 hash (hard coded) for OAEP padding. In the latest OpenSSL (1.0.2k), I can see that this is addressed by using the following API:
int RSA_padding_add_PKCS1_OAEP_mgf1(unsigned char *to, int tlen,
                                    const unsigned char *from, int flen,
                                    const unsigned char *param, int plen,
                                    const EVP_MD *md, const EVP_MD mgf1md)

RSA_public_encrypt() does not take EVP_MD structure as argument I'm not sure how to specify it.
How can I invoke the SHA-256 mode in RSA_public_encrypt() with a mask generation function?
","","1558","<c><openssl><rsa><public-key-encryption>","7","","0","2017-02-22 07:40:25","","1","","-1","","2017-05-23 11:46:10","2017-02-21 13:55:34",""
"18219561","Asymmetric encryption: changing my private key","Obviously I don't understand asymm encryption well enough. 
So in any asymm encryption system, I can ask for a key, which generates for me a private key which I should keep private and a public key which I should widely publicize. 
But of course I can never be absolutely sure that my private key has not been compromised, no matter how I store it. So, like a password, I want to change my private key often.
My question is, in any asymm encryption system: whenever I make a new private key, I get a new public key too, right? So my old public key will not work with my new private key? ...which would mean anyone who wants to communicate with me using my encryption will have to first get my new public key, right?
Or is there any way of changing my private key often without requiring my friends to constantly get an update of my public key?
","You perfectly understood how it works. There is no way to change your private key without changing your public key. Now, the problem is that if you distribute your public key through insecure means, you can fall pray to a man in the middle attack.
See http://en.m.wikipedia.org/wiki/Man-in-the-middle_attack for an example.
The way to avoid this attack is to get a digital certificate from a trusted entity.
","1550","<encryption><public-key-encryption>","2","-1","4","2019-05-18 20:20:07","","0","1","","","","2013-08-13 21:29:28",""
"18219561","Asymmetric encryption: changing my private key","Obviously I don't understand asymm encryption well enough. 
So in any asymm encryption system, I can ask for a key, which generates for me a private key which I should keep private and a public key which I should widely publicize. 
But of course I can never be absolutely sure that my private key has not been compromised, no matter how I store it. So, like a password, I want to change my private key often.
My question is, in any asymm encryption system: whenever I make a new private key, I get a new public key too, right? So my old public key will not work with my new private key? ...which would mean anyone who wants to communicate with me using my encryption will have to first get my new public key, right?
Or is there any way of changing my private key often without requiring my friends to constantly get an update of my public key?
","With asymmetrical encryption algorithms, the public and private keys are mathematically related to each other. You cannot change one key without changing the other as well.
As long as you take reasonable measures to protect your private key though, you should rarely need to change it.

Use a large enough key to help prevent it being cracked in the foreseeable future. (size depends on the algorithm, 4096-bit RSA for example.)
Don't store your private key anywhere online.
Store your private key in an encrypted container that is password protected. Make the password long, complex, and memorize it.
Never use your private key on a system you suspect could be compromised.
Consider storing the key completely offline, like on a memory stick or CD (in the encrypted container of course).

These are the minimum that I would personally do.
And if you just happen to be concerned about people having an authentic copy of your public key, generate it's hash and provide a way for people to confirm the hash with you.
When it comes down to it though, the question of whether your keys and communication are secure enough is based on what you're defending against. If you think your system is compromised and the private key is being stolen off your system, then changing your keys frequently is pointless because the new keys will be stolen as well. If you believe your public key has been used to crack your private key, larger keys and better entropy will result in them taking longer to crack.
The current (2012) NIST recommendations for asymmetric keys is to change them every 1-2 years, and to use a minimum key size of 2048 bits.
","1550","<encryption><public-key-encryption>","2","3","4","2019-05-18 20:20:07","","0","1","","","","2013-08-13 21:29:28",""
"18219561","Asymmetric encryption: changing my private key","Obviously I don't understand asymm encryption well enough. 
So in any asymm encryption system, I can ask for a key, which generates for me a private key which I should keep private and a public key which I should widely publicize. 
But of course I can never be absolutely sure that my private key has not been compromised, no matter how I store it. So, like a password, I want to change my private key often.
My question is, in any asymm encryption system: whenever I make a new private key, I get a new public key too, right? So my old public key will not work with my new private key? ...which would mean anyone who wants to communicate with me using my encryption will have to first get my new public key, right?
Or is there any way of changing my private key often without requiring my friends to constantly get an update of my public key?
","Syon made some excellent points.  Another thing to consider is having multiple keys.  It is strongly recommended to have a separate key for signing and a separate key for encrypting.
If you private encrypting key is ever compromised, your signatures are still valid.
And to elaborate on one of Syon's points, you can create and store a private key on a hardware device such as a SafeNet eToken.  The private key cannot be extracted, so as long as you have physical possession of the token, you can be very confident that your private key is safe.
","1550","<encryption><public-key-encryption>","2","1","4","2019-05-18 20:20:07","","0","1","","","","2013-08-13 21:29:28",""
"18219561","Asymmetric encryption: changing my private key","Obviously I don't understand asymm encryption well enough. 
So in any asymm encryption system, I can ask for a key, which generates for me a private key which I should keep private and a public key which I should widely publicize. 
But of course I can never be absolutely sure that my private key has not been compromised, no matter how I store it. So, like a password, I want to change my private key often.
My question is, in any asymm encryption system: whenever I make a new private key, I get a new public key too, right? So my old public key will not work with my new private key? ...which would mean anyone who wants to communicate with me using my encryption will have to first get my new public key, right?
Or is there any way of changing my private key often without requiring my friends to constantly get an update of my public key?
","As far as I been taught, Yes, it is possible to change the private key without changing the public key. 
If {e, n} is the public key (n is the product of two large prime number) and {d,n} is the private key. Then we need to find a new value of e such that m=c^(ed) mod n. This is achieved by solving ed=kx phi(n) +1, where phi(n) is the Eulers Totient function. 
The reason to change the private key is if we believe that the keys have been compromised so we need a new key, but we need to keep the old public key for legacy reasons.
","1550","<encryption><public-key-encryption>","2","1","4","2019-05-18 20:20:07","","0","1","","","","2013-08-13 21:29:28",""
"18739825","What is the strongest public-key encryption method?","I'm wondering what is the strongest algorithm for public/private key encryption.
It seems to me that PK encryption didn't keep up with symmetric algorithms when it comes to security. RSA is prevalent, but it looks dated, rather weak compared to AES and it might actually be compromised (thanks to the NSA)
What superior methods/algorithms/software are out there? Which is the strongest?
","ECC has a bit of a problem at the moment Backdoor into ECC?
","1532","<security><authentication><encryption><rsa><public-key-encryption>","1","1","1","2013-09-27 09:53:28","","9","","","","","2013-09-11 11:24:12",""
"18269798","php rsa encryption function returning nothing","I am using phpseclib for RSA encryption http://phpseclib.sourceforge.net/.
This is my php code:
include('Math/BigInteger.php');
include('Crypt/RSA.php');


$message=""123456"";
$private_modulus = ""272435F22706FA96DE26E980D22DFF67"";
$private_exponent = ""158753FF2AF4D1E5BBAB574D5AE6B54D"";

$rsa = new Crypt_RSA();

$message = new Math_BigInteger(base64_decode($message), 256);
$private_modulus = new Math_BigInteger(base64_decode($private_modulus), 256);
$private_exponent = new Math_BigInteger(base64_decode($private_exponent), 256);


$rsa->loadKey(array('n' => $private_modulus, 'e' => $private_exponent));
$encryptedText=$rsa->encrypt($message);
echo  $encryptedText;

However, encryptedText is blank. Any help?
","You have some issues with public/private keys. By the look of the function $rsa->loadKey() comment, first parameter is string, but you have assigned some strange array...
/**
 * Loads a public or private key
 *
 * Returns true on success and false on failure (ie. an incorrect password was provided or the key was malformed)
 *
 * @access public
 * @param String $key
 * @param Integer $type optional
 */
function loadKey($key, $type = false)

Example of working encrypt/decrypt with random public/private keys :
include('_seclib/Math/BigInteger.php');
include('_seclib/Crypt/RSA.php');

$rsa = new Crypt_RSA();
extract($rsa->createKey());

# encrypt
$message = '123456';
$rsa->loadKey($publickey);
$ciphertext = $rsa->encrypt($message);
var_dump($ciphertext);

# decrypt
$rsa->loadKey($privatekey);
var_dump($rsa->decrypt($ciphertext));

See documentation for more info.
","1530","<php><encryption><rsa><public-key-encryption><phpseclib>","0","0","2","2013-08-16 16:16:16","","1","","569976","","2013-08-16 15:22:25","2013-08-16 09:12:14",""
"18269798","php rsa encryption function returning nothing","I am using phpseclib for RSA encryption http://phpseclib.sourceforge.net/.
This is my php code:
include('Math/BigInteger.php');
include('Crypt/RSA.php');


$message=""123456"";
$private_modulus = ""272435F22706FA96DE26E980D22DFF67"";
$private_exponent = ""158753FF2AF4D1E5BBAB574D5AE6B54D"";

$rsa = new Crypt_RSA();

$message = new Math_BigInteger(base64_decode($message), 256);
$private_modulus = new Math_BigInteger(base64_decode($private_modulus), 256);
$private_exponent = new Math_BigInteger(base64_decode($private_exponent), 256);


$rsa->loadKey(array('n' => $private_modulus, 'e' => $private_exponent));
$encryptedText=$rsa->encrypt($message);
echo  $encryptedText;

However, encryptedText is blank. Any help?
","When an encryption mode isn't explicitely defined it defaults to OAEP. OAEP requires the key be at least 2 * the hash size + 2. The default hash phpseclib uses is sha1, which has a length of 20 bytes. So the key needs to be at least 22 bytes long or 176 bits.
Yours is 16 bytes long or 128 bits.
So you either need to use a larger key or change the encryption mode to use PKCS1 padding. PKCS1 padding requires the modulo be at least 11 bytes.
It'd probably be useful if phpseclib displayed an error when the length of the chosen modulo was insufficient. I'll try to suggeste that to him.
Also, FWIW, textbook RSA doesn't impose any minimum length requirements, but phpseclib doesn't currently implement textbook RSA. I guess you can kinda get it by calling _exponentiate directly but that's the only way.
Textbook RSA is bad because it's vulnerable to certain types of attacks that randomized padding like PKCS1 / OAEP protect against.
","1530","<php><encryption><rsa><public-key-encryption><phpseclib>","0","0","2","2013-08-16 16:16:16","","1","","569976","","2013-08-16 15:22:25","2013-08-16 09:12:14",""
"19388261","ASN1 Bad tag value met when using CertCreateCertificateContext with WinCrypt","What am I doing wrong here? I keep getting error 0x8009310b (ASN1 bad tag value met) when creating a certificate context. I know the certificate I'm testing with is good. I exported it from the intermediate store using DER, Base-64 and P7B formats. All three scenarios fail. 
int _tmain(int argc, _TCHAR* argv[])
{
    const int       MAX_CERT_FILE_SIZE=81920;
    HANDLE          certFileHandle;
    DWORD           certEncodedRead = 0L;
    BYTE            certData[MAX_CERT_FILE_SIZE] = {0};
    PCCERT_CONTEXT  pCertContext = NULL;
    HCERTSTORE      hSystemStore = NULL;
    int             exitCode = 0;

    fprintf(stdout, ""Importing X509 certificate file to root store: %s \n\n"", argv[0]);

    try {

        // Create a handle to the certificate given in the command line argument
        BeginTask(""Creating certificate handle..."");
        certFileHandle = CreateFile(argv[0],
            GENERIC_READ,
            0,
            NULL,
            OPEN_EXISTING,
            FILE_ATTRIBUTE_NORMAL,
            NULL);

        if (INVALID_HANDLE_VALUE == certFileHandle){
            throw ""Could not create a handle to the specified certificate file."";
        } 

        // Read the certificate file
        NextTask(""Reading certificate file into buffer..."");
        memset(certData, 0, MAX_CERT_FILE_SIZE);
        BOOL result = ReadFile(certFileHandle,
                certData,
                MAX_CERT_FILE_SIZE,
                &certEncodedRead,
                NULL);
        fprintf(stdout, ""Read %d bytes from certificate file..."", certEncodedRead);

        if (!result) {
            throw ""Could not read the certificate file."";
        } 

        // Create a certificate context from the buffer
        NextTask(""Creating certificate context..."");
        pCertContext = CertCreateCertificateContext(X509_ASN_ENCODING | PKCS_7_ASN_ENCODING, certData, certEncodedRead);

        if (!pCertContext){
            throw ""Could not create a certificate context."";    
        }

        // Open the system certificate store
        NextTask(""Opening local machine certificate store..."");
        hSystemStore = CertOpenSystemStore(NULL, L""CA""); 
        if (!hSystemStore){
            throw ""Could not open the local machine certificate store."";        
        }

        // Add certificate context to store
        NextTask(""Adding certificate context to store..."");     
        //CertAddCertificateContextToStore(hSystemStore, 
        //  pCertContext, 
        //  CERT_STORE_ADD_REPLACE_EXISTING, 
        //  NULL);

    } catch (ERRMSG msg) {
        Result(false);
        HandleError(msg);
        exitCode = 1;
    } 

    // Clean-up all resources
    if (hSystemStore) {
        NextTask(""Closing certificate store..."");
        Result(CertCloseStore(hSystemStore, 0));
    }
    if (pCertContext) {
        NextTask(""Freeing certificate store..."");
        Result(CertFreeCertificateContext(pCertContext));
    }
    if (certFileHandle) {
        NextTask(""Closing certificate file..."");
        Result(CloseHandle(certFileHandle));
    }

    fprintf(stdout, ""\n\nProgram complete-exiting with code %x"", exitCode);
    return exitCode;
}

[Edited to add console output]
Importing X509 certificate file to root store: DOD-CA-12.cer

Creating certificate handle...Success.
Reading certificate file into buffer...Read 41472 bytes from certificate file...Success.
Creating certificate context...Failed.
An error occurred while importing the X509 certificate.
Narrative: Could not create a certificate context.
GetLastError reported: 8009310b.
Success.
Closing certificate file...Success.


Program complete-exiting with code 1

","Thanks to WhozCraig who noticed the file size.
The problem here is basic C++ 101, where the file as a command line argument is args[1] and not args[0]. The exe was basically loading itself.
","1526","<winapi><certificate><public-key-encryption>","2","2","1","2014-02-23 14:33:51","19392762","6","","321731","","2014-02-23 14:33:51","2013-10-15 18:16:58",""
"6460845","Standard way to hash an RSA key?","What's the algorithm for creating hash (sha-1 or MD5) of an RSA public key?  Is there a standard way to do this?  Hash just the modulus, string addition of both and then take a hash?  Is SHA-1 or MD5 usually used?
I want to use it to ensure that I got the right key (have the sender send a hash, and I calculate it myself), and log said hash so I always know which exact key I used when I encrypt the payload.
","Based on the OpenSSH source code, the way that a fingerprint is generated for RSA keys is to convert n and e from the public key to big-endian binary data, concatenate the data and then hash that data with the given hash function.
Portions of the OpenSSH source code follows.  The comments were added to clarify what is happening.
// from key_fingerprint_raw() in key.c
switch (k->type) {
case KEY_RSA1:
    // figure out how long n and e will be in binary form
    nlen = BN_num_bytes(k->rsa->n);
    elen = BN_num_bytes(k->rsa->e);
    len = nlen + elen;
    // allocate space for n and e and copy the binary data into blob
    blob = xmalloc(len);
    BN_bn2bin(k->rsa->n, blob);
    BN_bn2bin(k->rsa->e, blob + nlen);

...

// pick a digest to use
switch (dgst_type) {
case SSH_FP_MD5:
    md = EVP_md5();
    break;
case SSH_FP_SHA1:
    md = EVP_sha1();
    break;

...

// hash the data in blob (n and e)
EVP_DigestInit(&ctx, md);
EVP_DigestUpdate(&ctx, blob, len);
EVP_DigestFinal(&ctx, retval, dgst_raw_length);

From the BN_bn2bin manual page:
BN_bn2bin(a, to) converts the absolute value of a into big-endian form and stores it at to. to must point to BN_num_bytes(a) bytes of memory. 
","1518","<encryption><hash><rsa><public-key-encryption><public-key>","2","3","1","2011-06-24 07:33:13","6464750","0","","","","","2011-06-23 21:30:32",""
"19790351","Perl - Which module is the best to do SSH, SFTP with public key authentication on windows","Come back here with another perl + SSH problem.
Here is my situation:
I need to connect from a server A to a server B with SSH. Within this SSH connection, I need to make some SFTP connections beside other commands.
Concerning the authentication, I need to use the public key authentication.
All of that in a Perl script and both server A and B are windows.
Do you know any perl module matching these constraints?
I tried: 

Net::SSH::Any, but the API does not mention the public key authentication
Net::OpenSSH, the API says it's not working on windows
Net::SSH::Perl, the API mentions the usage of the private key. When I tried passing it, it fails (code below). If I tried with Putty, it works.

Extra question: I read that storing the private key (on server A in my case) is not safe at all (and I understand why), is there a way to avoid that?
Code:
my $ssh = Net::SSH::Perl->new(""server-ip"", identity_files => [ 'path-to-private-key' ], option => [""BatchMode yes""]);
$ssh->login('login');

","I am the author of Net::OpenSSH and Net::SSH::Any.
Net::SSH::Any does support public key authentication but there are a couple of hidden requirements:

The key must be in OpenSSH format (you can use PuTTY companion utilities to convert keys between formats, google for it)
A file with the public key is also required and it must be placed at ""${path_to_private_key}.pub"".

Besides that, over the last couple of months I have been working on improving Net::SSH::Any and on the way fixing lots of important bugs on the underlying Net::SSH2 module and the libssh2 library. If you feel courageous, you may like to try the development version (you will need the git versions of the three packages, Net::SSH::Any, Net::SSH2 and libssh2).
I would really appreciate getting any feedback about it, specially when running under Windows.
","1504","<perl><ssh><public-key-encryption>","3","5","1","2013-11-05 13:54:55","","0","1","","","","2013-11-05 13:39:50",""
"24056091","Simple asymmetric encryption algorithm","I want to implement simple asymmetric encryption algorithm using javascript (or reuse open library). I don't want to use RSA (or other algorithms), because they are complicated. All I want to do is illustrated in following pseudo code:
var encryptor = new AsymEncript();
var encrypted = encryptor.encrypt(""hello world"", ""public key string"");
var decrypted = encryptor.decrypt(encrypted, ""private secret key"");

I don't want to deal with complicated libraries such as pidCrypt, jsencrypt. I need a really simple algorithm, which allow me to create public\private key pair. Then I can use this pair for encryption.
Can you point me out to some articles or some ideas how this can be implemented?
","From your equations:
f(x)=x*pubKey
g(m)=m*pKey
g(f(x))=x
You arrive at this:
x=f(x)*pKey => x=x*pubKey*pKey => pubKey = 1/pKey 
This seems like a very weak algorithm (unless I misunderstood you somehow).
If you really care about your security, you should go with some wrapper library that does RSA (or some other algorithm) for you in a simple manner.
","1502","<javascript><algorithm><encryption><public-key-encryption>","1","2","1","2014-06-05 11:13:10","24058710","5","","","","","2014-06-05 09:11:24",""
"19187573","Keytool Public/Private key pair for Android","I'm trying to create a public/private key pair using the keytool function so I can submit an Android app to Google Play. When I try to sign the app using the key I made, I get this error from jarsigner 
jarsigner: Certificate chain not found for: SHA1withDSA.  
SHA1withDSA must reference a valid KeyStore 
key entry containing a private key and corresponding public key certificate chain.

Same thing when I try using RSA. When I look at the keys for the keystore, all I see if the
     Entry type: PrivateKeyEntry
Not the public and private keys. 
The command I used to create they key was
keytool -genkey -keystore nameofkeystore.keystore 
-alias coffitivity -keypass *passwordommitted* -storepass *thepasswordommitted*

","I'm not actually 100% sure what I did to fix it, but this is what I did and now it works
keytool -genkeypair -v -keystore my-release-key.keystore 
-alias coffdroid -keyalg RSA -keysize 2048 -validity 10000

Note: difference is I used ""-genkeypair"" instead of ""genkey"" even though they're supposed to be the same
Second: made a new unsigned .apk. This is likely what fixed it - so if you're hitting the wall, do that over. 
Then Jarsigner 
jarsigner -verbose -sigalg SHA1withRSA -digestalg SHA1 
-keystore my-release-key.keystore /Users/tommynicholas/Desktop/*apkname*.apk coffdroid

","1502","<android><google-play><rsa><public-key-encryption><dsa>","1","3","1","2013-10-04 18:21:32","","0","","","","","2013-10-04 17:46:12",""
"19165774","How to read/write the public key in an RSA structure","Using C, I can generate and write an RSA public key to a PEM file using PEM_write_RSAPublicKey(),   
But I want to write multiple public keys to a single file (like known_hosts or authorized_hosts), rather than have a separate PEM file for each.   
I know how to encode/decode base64,   
But how do I get the public key from the RSA structure (which I can base64 encode) and later read the same key from file and put it back into the RSA structure for encrypting/decrypting?
","PEM_write_RSAPublicKey() will append to the file if opened with ""a+"" but there is no indication of which keys are for which client. I don't want PEM formatting, only to write each public key to a single line in the file.
I found that the public key is in DER format, which I can get from the RSA struct using:
len = i2d_RSAPublicKey(rsap, 0);
buf1 = buf2 = (unsigned char *)malloc(len + 1);
rc = i2d_RSAPublicKey(rsap, (unsigned char **)&buf2);

Then I base64-encode buf1 and write it to my file. 
After reading it from file, putting it back into the RSA struct is just the reverse:
rsap = d2i_RSAPublicKey(NULL, (const unsigned char **)&buf1, (long)len);

","1492","<c><openssl><rsa><public-key-encryption><pem>","0","0","1","2013-10-04 17:29:49","","5","","1885193","","2013-10-03 17:49:43","2013-10-03 17:46:29",""
"19955799","NSData dataWithContentsOfFile ""No such File or Directory"" when trying to read in a public key","The error is very clear but I don't think its accurate.
These are the steps.

I have a public.key file on my hard drive and I copy this into the Supporting Files directory
add following code:
NSMutableString *path;
path = [[NSMutableString *] initWithString:[[NSBundle mainBundle] resourcePath]];
[path appendString@""/public.key""]
NSData *publicKey = [NSData dataWithContentsOfFile:path options:nil error:&error];

Running this code generates:
a file not found exception. 
ok.
So I repeat the same process this time with a image file
NSMutableString *path;
path = [[NSMutableString *] initWithString:[[NSBundle mainBundle] resourcePath]];
[path appendString@""/image.jpg""]
NSData *publicKey = [NSData dataWithContentsOfFile:path options:nil error:&error];

And now this works.
So I am sure the path is correct.
If I try rename the public.key to something else then this still does not work.
Is it because maybe the .key file is like a binary file ?
So what possible reasons are preventing me from reading in public.key to NSData ??
","Have you tried to use this NSBundle method -URLForResource: withExtension:? Have you checked your app bundle? Does it really contains public.key file? Maybe the error is correct and this file isn't presented in app bundle.
","1486","<ios><ios7><nsdata><public-key-encryption>","1","0","1","2013-11-13 14:29:12","","0","","1936718","","2013-11-13 14:18:32","2013-11-13 14:04:10",""
"17028444","Unable to do RSA Encryption/Decryption using Crypto++ (isValidCoding is false)","I am using Crypto++ to encrypt an array of bytes using RSA. I have followed Crypto++ wiki's samples with no luck getting them to work. Encryption and Decryption in all the samples are done within a single process but I am trying to decrypt the content which is already encrypted in another process.
Here is my code:
class FixedRNG : public CryptoPP::RandomNumberGenerator
{
public:
    FixedRNG(CryptoPP::BufferedTransformation &source) : m_source(source) {}

    void GenerateBlock(byte *output, size_t size)
    {
        m_source.Get(output, size);
    }

private:
    CryptoPP::BufferedTransformation &m_source;
};


uint16_t Encrypt()
{
    byte *oaepSeed = new byte[2048];
    for (int i =  0; i < 2048; i++)
    {
        oaepSeed[i] = (byte)i;
    }
    CryptoPP::ByteQueue bq;
    bq.Put(oaepSeed, 2048);
    FixedRNG prng(bq);
    Integer n(""Value of N""),
    e(""11H""),
    d(""Value of D"");
    RSA::PrivateKey privKey;
    privKey.Initialize(n, e, d);
    RSA::PublicKey pubKey(privKey);
    CryptoPP::RSAES_OAEP_SHA_Encryptor encryptor( pubKey );
    assert( 0 != encryptor.FixedMaxPlaintextLength() );
    byte blockSize = encryptor.FixedMaxPlaintextLength();
    int divisionCount = fileSize / blockSize;
    int proccessedBytes = 0;
    // Create cipher text space
    uint16_t cipherSize = encryptor.CiphertextLength( blockSize );
    assert( 0 != cipherSize );

    encryptor.Encrypt(prng, (byte*)plaintext, blockSize, (byte*)output);
    return cipherSize;
}

void Decrypt(uint16_t cipherSize)
{
        byte *oaepSeed = new byte[2048];
        for (int i =  0; i < 2048; i++)
        {
            oaepSeed[i] = (byte)i;
        }
        CryptoPP::ByteQueue bq;
        bq.Put(oaepSeed, 2048);
        FixedRNG prng(bq);
        Integer n(""Value of N""),
        e(""11H""),
        d(""Value of D"");
        RSA::PrivateKey privKey;
        privKey.Initialize(n, e, d);
        //RSA::PublicKey pubKey(privKey);

        CryptoPP::RSAES_OAEP_SHA_Decryptor decryptor( privKey );

        byte blockSize = decryptor.FixedMaxPlaintextLength();
        assert(blockSize != 0);

        size_t maxPlainTextSize = decryptor.MaxPlaintextLength( cipherSize );
        assert( 0 != maxPlainTextSize );
        void* subBuffer = malloc(maxPlainTextSize);
        CryptoPP::DecodingResult result = decryptor.Decrypt(prng, (byte*)cipherText, cipherSize, (byte*)subBuffer);
        assert( result.isValidCoding );
        assert( result.messageLength <= maxPlainTextSize );
}

Unfortunately, value of isValidCoding is false. I think I am misunderstanding something about RSA encryption/decryption!!

Note that, privKey and pubKey have been validated using KEY.Validate(prng, 3).
I have also tried to use RAW RSA instead of OAEP and SHA with no luck. I have tried to debug through crypto++ code, what I am suspicious about is prng variable. I think there is something wrong with it. I have also used AutoSeededRandomPool instead of FixedRNG but it didn't help. Worth to know that, if I copy the decryption code right after encryption code and execute it in Encrypt() method, everything is fine and isValidCoding is true!!
","This is probably not be correct:
byte blockSize = encryptor.FixedMaxPlaintextLength();
...

encryptor.Encrypt(prng, (byte*)plaintext, blockSize, (byte*)output);
return cipherSize;

Try:
size_t maxLength = encryptor.FixedMaxPlaintextLength();
size_t cipherLength = encryptor.CiphertextLength( blockSize );
...

SecureByteBlock secBlock(cipherLength);

cipherLength = encryptor.Encrypt(prng, (byte*)plaintext, blockSize, secBlock);
secBlock.resize(cipherLength);

FixedMaxPlaintextLength returns a size_t, not a byte.
You should probably be calling CiphertextLength on plaintext.
I'm not really sure how you are just returning an uint_t from encrypt().
You might do better by starting fresh, and using an example from the Crypto++ as a starting point. I'm not sure this design is worth pursuing.
If you start over, then Shoup's Elliptic Curve Integrated Encryption Scheme (ECIES) would be a good choice since it combines public key with symmetric ciphers and authentication tags.
","1485","<c++><rsa><public-key-encryption><crypto++>","2","0","1","2018-06-27 02:43:47","","4","","1033581","","2018-06-27 02:43:47","2013-06-10 16:18:58",""
"12714948","How to encrypt data using a certificate?","How do i encrypt data using a ""certificate"" in the Microsoft Crypto API?

i know how to encrypt data with the Microsoft Crypto API using AES encryption:
keyBlob.hdr.bType := PLAINTEXTKEYBLOB;
keyBlob.hdr.bVersion := CUR_BLOB_VERSION;
keyBlob.hdr.reserved := 0;
keyBlob.hdr.aiKeyAlg := CALG_AES_128;
keyBlob.cbKeySize := 16;
Move(data[0], keyBlob.key[0], 16);


/*
   Set ProviderName to either
   providerName = ""Microsoft Enhanced RSA and AES Cryptographic Provider""
   providerName = ""Microsoft Enhanced RSA and AES Cryptographic Provider (Prototype)""  //Windows XP and earlier
*/
MS_ENH_RSA_AES_PROV_W: WideString = 'Microsoft Enhanced RSA and AES Cryptographic Provider';
providerName := MS_ENH_RSA_AES_PROV_W;

CryptAcquireContextW(provider, nil, PWideChar(providerName), PROV_RSA_AES, CRYPT_VERIFYCONTEXT);
CryptImportKey(provider, PByte(@keyBlob), sizeof(keyBlob), 0, 0, importedKey);

mode := CRYPT_MODE_CBC;
CryptSetKeyParam(importedKey, KP_MODE, @mode, 0);

//CryptEncrypt encrypts in-place. Copy stuff to be encrypted into new byte buffer
utf8PlainText := TCrypt.WideStringToUTF8(szPlainText);
dataLen := Length(utf8PlainText);
bufferLen := dataLen+16; //allocate a buffer larger than we need to hold the data we want to encrypt
SetLength(data, bufferLen);
Move(utf8PlainText[1], data[0], dataLen);

if not CryptEncrypt(importedKey, 0, True, 0, @data[0], {var}dataLen, bufferLen) then
begin
   le := GetLastError;
   if le = ERROR_MORE_DATA  then
   begin
      /*
         If the buffer allocated for pbData is not large enough to hold the encrypted data,
         GetLastError returns ERROR_MORE_DATA and stores the required buffer size,
         in bytes, in the DWORD value pointed to by pdwDataLen.
      */
      bufferLen := dataLen;
      SetLength(data, bufferLen);
      CryptEncrypt(importedKey, 0, True, 0, @data[0], {var}dataLen, bufferLen);
   end;
   CryptDestroyKey(importedKey);
   CryptReleaseContext(provider, 0);
end;

Now i need to do the same thing, except rather than symmetric encryption i need to use a public-key to encrypt, and a private key to decrypt.

Note: It took 3 days to come up with those 15 lines of code for symmetric encryption. i'm hoping someone can same me from a week of banging my head against a wall, and i end up going down the wrong path thinking that i have to install OpenSSL. Even worse, if i try to call COM Objects from native code
Note: i only included the code example as a way to fill-up the question with irrelavent junk. Some people vote to close a question if it only contains one line.
","Microsoft Crypto API contain high-level functions for asymmetric encryption and decryption with certificates. Look at CryptEncryptessage and CryptDecryptMessage.
In decryption case your CERT_CONTEXT must have a CERT_KEY_PROV_INFO_PROP_ID property.
I can give you an examples of usage:
const wchar_t message[] = L""This is a simple test message."";
PCCERT_CONTEXT hCert = NULL;
HCERTSTORE hStore = NULL;

static bool openCertStoreMY(CDialog *parent)
{
    if(!hStore)
    {
        hStore = CertOpenSystemStore(NULL, L""MY"");

        if(!hStore)
        {
            parent->MessageBox(L""Cannot open \""MY\"""", L""Error"", MB_ICONERROR);
            return false;
        }
    }

    return true;
}

void CTestDlg::OnEncryptClicked()
{
    if(!hCert)
    {
        if(!openCertStoreMY(this))
            return;

        hCert = CryptUIDlgSelectCertificateFromStore(hStore, GetSafeHwnd(), NULL, NULL, 0, 0, 0);

        if(!hCert)
            return;
    }

    CRYPT_ENCRYPT_MESSAGE_PARA params;
    memset(&params, 0, sizeof(CRYPT_ENCRYPT_MESSAGE_PARA));
    params.cbSize = sizeof(CRYPT_ENCRYPT_MESSAGE_PARA);
    params.dwMsgEncodingType = X509_ASN_ENCODING | PKCS_7_ASN_ENCODING;
    params.ContentEncryptionAlgorithm.pszObjId = ""2.16.840.1.101.3.4.1.2""; //AES128

    DWORD msz;
    DWORD cbMsg = sizeof(message);
    const BYTE *pbMsg = (PBYTE)message;
    if(!CryptEncryptMessage(&params, 1, &hCert, pbMsg, cbMsg, NULL, &msz))
        return;

    PBYTE outBuf = new BYTE[msz];
    if(CryptEncryptMessage(&params, 1, &hCert, pbMsg, cbMsg, outBuf, &msz))
    {
        FILE *fil = _wfopen(filename, L""wb"");
        if(fil)
        {
            fwrite(outBuf, 1, msz, fil);
            fclose(fil);
            MessageBox(L""Complete"");
        }
        else
            MessageBox(L""Cannot open file"", L""Error"", MB_ICONERROR);
    }

    delete [] outBuf;
}

void CTestDlg::OnDecryptClicked()
{
    if(!openCertStoreMY(this))
        return;

    CRYPT_DECRYPT_MESSAGE_PARA params;
    params.cbSize = sizeof(CRYPT_DECRYPT_MESSAGE_PARA);
    params.dwMsgAndCertEncodingType = X509_ASN_ENCODING | PKCS_7_ASN_ENCODING;
    params.cCertStore = 1;
    params.rghCertStore = &hStore;
    params.dwFlags = 0;

    DWORD cbMsg;
    PBYTE pbMsg;

    FILE *fil = _wfopen(filename, L""rb"");
    if(fil)
    {
        fseek(fil, 0 ,2);
        cbMsg = ftell(fil);
        fseek(fil, 0, 0);
        pbMsg = new BYTE[cbMsg];

        fread(pbMsg, 1, cbMsg, fil);
        fclose(fil);
    } else {
        MessageBox(L""Cannot open file"", L""Error"", MB_ICONERROR);
        return;
    }

    DWORD msz;
    if(!CryptDecryptMessage(&params, pbMsg, cbMsg, NULL, &msz, NULL))
    {
        delete [] pbMsg;
        return;
    }

    PBYTE outBuf = new BYTE[msz];
    if(CryptDecryptMessage(&params, pbMsg, cbMsg, outBuf, &msz, NULL))
        MessageBox((LPCWSTR)outBuf);

    delete [] pbMsg;
    delete [] outBuf;
}

","1484","<public-key-encryption><certificate><cryptoapi>","1","4","1","2012-10-05 15:28:26","","0","1","-1","","2017-05-23 11:44:56","2012-10-03 18:53:16",""
"18279818","How to Encrypt And decrypt UTF-8 in JAVA or Android?","I use This Algorithm for Encrypt and Decrypt data in android. But when use utf-8 charater ..this error is displayed  : [encrypt] data not block size aligned.
I use this Algorithm for Encrypt and Decrypt : https://snipt.net/raw/ee573b6957b7416f28aa560ead71c3a2/?nice
my code:
HttpClient client = new DefaultHttpClient();

        HttpPost post = new HttpPost(ServerIP.frooshgah_URL);
        List<NameValuePair> nameValuePairs = new ArrayList<NameValuePair>();
        JSONObject json = new JSONObject();



        try {
            json.put(""UserId"", ""0s"");
            json.put(""N_frooshgah"", N_frooshgah);
            json.put(""N_masol"", N_masol);
            json.put(""N_makan"", N_makan);
            json.put(""address"", address);
            json.put(""tel"", tel);
            json.put(""time_baz"", time_baz);
            json.put(""time_baste"", time_baste);
            json.put(""tavzihat"", tavzihat);
            json.put(""tag"", tag);
            json.put(""categori"", ""پوشاک"");
            json.put(""city"", city);
            json.put(""lat"", lat);
            json.put(""long"", Long);

        } catch (JSONException e3) {
            // TODO Auto-generated catch block
            e3.printStackTrace();
        }

        MCrypt mcrypt = new MCrypt();
        String encrypted = """";
        try {

            encrypted = MCrypt.bytesToHex(mcrypt.encrypt(json.toString()));
            //encrypted = encryption.hexToString(json.toString(), 2);
              //key = UUID.randomUUID().toString().replaceAll(""-"", """");
            //encrypted=Crypto.encrypt(json.toString(),key);


        } catch (Exception e1) {
            // TODO Auto-generated catch block
            e1.printStackTrace();
        }

How to Resolve this Problem?
thanks
","First of all, I see the MCrypt class your using provides source code. Download the source code and add it to your project and modify the padString(string) method to this:
private static String padString(String source){
  char paddingChar = ' ';
  int size = 16;
  int x = source.getBytes(Charset.forName(""UTF-8"")).length % size;
  int padLength = size - x;

  for (int i = 0; i < padLength; i++)
  {
          source += paddingChar;
  }

  return source;
}

This will allow the code to execute while using UTF-8 as a charset. If you want to ""improve"" the library to support mutliple charsets, consider adding a charset parameter into the encrypt/decrypt methods of the class.
","1468","<java><android><json><encryption><public-key-encryption>","1","1","1","2017-02-16 00:44:00","","8","1","","","","2013-08-16 18:23:33",""
"36572261","Encryption using public/private keys between mobile client and server PHP","Case 1:Encrypted Data from client to Server
Need to create a public/private key in server.Public key provided to client.The client encrypts it with public key.The server decrypts it using the private key that was generated.
Case2: But what about the case when the data from server is sent to the 
client side.??
That  data should also be encrypted.Does the same public/private that was created for case 1 work or new key should be generated?can anybody please explain case2 for my requirements.
Thanks in advance.
","You can use public / private key encryption in any direction.
So your client can encrypt with public key, then the server can decrypt with private key.
If your server encrypts with private key, the client can decrypt with public key.
","1463","<php><android><encryption><public-key-encryption><private-key>","1","0","2","2016-04-12 14:47:12","36572390","3","","","","","2016-04-12 11:41:03",""
"36572261","Encryption using public/private keys between mobile client and server PHP","Case 1:Encrypted Data from client to Server
Need to create a public/private key in server.Public key provided to client.The client encrypts it with public key.The server decrypts it using the private key that was generated.
Case2: But what about the case when the data from server is sent to the 
client side.??
That  data should also be encrypted.Does the same public/private that was created for case 1 work or new key should be generated?can anybody please explain case2 for my requirements.
Thanks in advance.
","As outlined in this white paper on secure data encryption and its supporting material:

Use HTTPS.
For a second layer of authenticated encryption, use libsodium (a modern, cross-platfrom cryptography library) with pinned public keys.

PHP Example
Key Generation
$bob_box_kp = \Sodium\crypto_box_keypair();
$bob_box_secretkey = \Sodium\crypto_box_secretkey($bob_box_kp);
$bob_box_publickey = \Sodium\crypto_box_publickey($bob_box_kp);

Encryption
$anonymous_message_to_bob = \Sodium\crypto_box_seal(
    $message,
    $bob_box_publickey
);

Decryption
$decrypted_message = \Sodium\crypto_box_seal_open(
    $anonymous_message_to_bob,
    $bob_box_kp
);
if ($decrypted_message === false) {
    // You have the wrong keypair or the message was tampered with.
}

Android Example (using Libstodium)
Key Generation
byte[] secret_key = new byte[Box.SECRETKEYBYTES];
byte[] public_key = new byte[Box.PUBLICKEYBYTES];
Box.keypair(public_key, secret_key);

Encryption
Box.seal(
    ciphertextByteArray, // Output goes here
    plaintextByteArray,  // Your message
    public_key
);

Decryption
Box.sealOpen(
    plaintextOutputByteArray, // Decrypted data goes here
    ciphertextByteArray,      // Encrypted message received over the wire
    public_key,
    secret_key
);

","1463","<php><android><encryption><public-key-encryption><private-key>","1","2","2","2016-04-12 14:47:12","36572390","3","","","","","2016-04-12 11:41:03",""
"4239128","Method to send an encryption key over an insecure connection?","I am using Botan utility to perform encryption. When I initialize my connection to a remote machine using SSH, I am able to trade keys over the secure SSH connection. However, sometimes I use inetd to establish the connection, and in this case, there is no security on the inetd connection, but I need to use it to trade keys with the remote machine.
I imagine there is some standard for this whereby I send a public key over an insecure channel and the remote end uses this to encrypt a key to send back to me over the insecure channel, which I can then decrypt to get the key.
What would be an example of this kind of protocol that Botan supports?
","Without previous trust, or communication through a side channel, there's no way to do that. Diffie-Hellman kex allows you to establish a channel secure against others who don't participate in the connection, but you cannot verify that you're communicating with the intended recipient.
Classic MITM example: you connect to some remote endpoint, it receives your public key and sends you something signed with that key. However, you have no way to verify whether you've sent your key to the real destination, or whether the response comes from an attacker - therefore, you have a secure tunnel, but you have no information with whom you're securely communicating (the attacker may even connect to your intended destination and proxy the traffic, which passes over him unencrypted).
To be sure that you are indeed communicating with the intended endpoint, you need to exchange some sort of identification of the host beforehand or through a secure channel. SSH does this using the ""fingerprints"" - it asks you on first connection if you trust that host, and you're supposed to verify the fingerprint through an independent channel.
","1457","<ssh><public-key-encryption><inetd><botan>","1","3","2","2010-11-21 17:51:05","4239207","3","","","","","2010-11-21 17:16:35",""
"4239128","Method to send an encryption key over an insecure connection?","I am using Botan utility to perform encryption. When I initialize my connection to a remote machine using SSH, I am able to trade keys over the secure SSH connection. However, sometimes I use inetd to establish the connection, and in this case, there is no security on the inetd connection, but I need to use it to trade keys with the remote machine.
I imagine there is some standard for this whereby I send a public key over an insecure channel and the remote end uses this to encrypt a key to send back to me over the insecure channel, which I can then decrypt to get the key.
What would be an example of this kind of protocol that Botan supports?
","What I did in a similar situation was to first arrange to get a private/public key pair exchanged, so, I had the public key of each client, so when they connected to me, a message was passed, that had a timestamp on it, that I could then decrypt.
If that passed, and the timestamp was valid (I used 5 seconds as the life of the timestamp) then I would exchange the key, since we had a way to securely communicate.
But, this required doing something upfront.
If you expect an anonymous user to connect and have some security that is impossible.
One article I found very helpful on issues like this was *Programming Satan's Computer"", http://www.cl.cam.ac.uk/~rja14/Papers/satan.pdf, where you are trying to have a secure communication with an untrustworthy sysadmin.
","1457","<ssh><public-key-encryption><inetd><botan>","1","2","2","2010-11-21 17:51:05","4239207","3","","","","","2010-11-21 17:16:35",""
"36204141","Verify Signature of SAML Response","I'm trying to follow the following spec to verify the signature of the SAML response: https://www.w3.org/TR/xmldsig-core/#sec-PKCS1
Here is my workflow: I get the SAML Response. I get rid of the signature envelope, I canonicalize it, I check the digest and then I check the signature. I was able to successfully calculate SHA1 digest of the transformed SAML response and verify it. However, RSA-SHA1 signature checking still eludes me.
SAML Response included signature method algorithm: http://www.w3.org/2000/09/xmldsig#rsa-sha1
I have this method to check the signature:
public static boolean verifySignature(String signatureType, PublicKey publicKey, byte[] contentBytes, byte[] sigBytes) {
    try {
        Signature sig = Signature.getInstance(signatureType);
        sig.initVerify(publicKey);
        sig.update(contentBytes);
        return sig.verify(sigBytes);
    } catch (Exception e) {
        Logger.log(e);
        return false;
    }
}

I do something like this to call it:
String publicKeyStr =  ""MIIDNDCCAhwCCQCEk14scLMSGjANBgkqhkiG9w0BAQsFADBcMR8wHQYDVQQDDBZhdXRoLnJldHJvZmljaWVuY3kuY29tMQ4wDAYDVQQKDAVSZXRybzELMAkGA1UEBhMCVVMxCzAJBgNVBAgMAk1BMQ8wDQYDVQQHDAZCb3N0b24wHhcNMTYwMzAyMTU1NTQ4WhcNMTcwMzAyMTU1NTQ4WjBcMR8wHQYDVQQDDBZhdXRoLnJldHJvZmljaWVuY3kuY29tMQ4wDAYDVQQKDAVSZXRybzELMAkGA1UEBhMCVVMxCzAJBgNVBAgMAk1BMQ8wDQYDVQQHDAZCb3N0b24wggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDwUlZ+qOA61kYh0MGHKTe4JtSL1qJVT/8/i6sWFqbAiGdV33pxSm8iBpqLNPG+fr8aZKugik8mN3y0kZEDwD+EATXGUpqT1v1R6Wr4rRUwsC0wl6d6EiWfdSsu66T11hdrugXF/psjyy4mmvIMMU4RlSaZmT2+gpe57IWPO522Y1HqbuvSvKJgjdyrlhIKLmw7HvZ1ZrQ1j01Hd3/rdK41+zWpSCLuSellHowiDmOzNnyFpTw+SZA0GKE+cm3BOTj/cM36GR2XJd0kIRqj1qqu29cGMlBjQ3cMleG6HoHR9oPNFwYtW1fDTHG6MnxRXYCfZiPeBdX3eBDSuz7GQAv5AgMBAAEwDQYJKoZIhvcNAQELBQADggEBAEuQEPhpWdAGg46PSbE20bNt4YH+PjiIzPaXzN5UmpJjyl2kbR18HYXZHEtAXc+ItrYnK+oe+6FhwJ9aiwlrf1/p+U61iyvA9/HWzyW4vflaLWRQ8FxNhAJiVu57IQObjZ13EQfu1O8RK4wzNUVJhOz+pp9toqTHn8wmUPApzqMIl0KpDCPy1TNrwItaiy/gzWQngBMgIcrDeycR8wK2EH6txT8BzI+aqdIc3gBXsn/kS90lelbvYreXqF7VHoMs8fVEPN5fTRjqT9oZb60b1DxcniiTEknZtqprYuMpgEzpOHrzmlbCoNU2yBHuNTQWBz3lG+XtSMtgh16v5Vm48ag="";
PublicKey publicKey = Security.getPublicKey(publicKeyStr); // uses Certificate class
String sig = ""QfAcRJM2P65JucyBpqn6j48/zd1oSLPBJ0lYI1grH5/xenwBEh0D4Eh0S1J3535OUmldpW7D+G7DW6eAT5N8TdoqUvMXuIAUpFHHDR45KZykPXJPUtli+z2rwlCCHypZWnniT/wrcQYdpp1zzNJBBtKdkaqQg0NMktPSQ/0ti+ruMI3qwfTaL9kDQ3Zyi/a2J3RCAPA0RfviLnDLlid0PthiV1NEbs0AvnguDi57fWXAILk0L1Cx20sliQckxlFQ9u4OaHeMscXdjh3SfESkM9m0Y9PppisZWTrCYzGmvDwsZTCBPD3f/ZFIit+Smgh2fi1u8/gZq0yizPyacR3Y/A=="";
String newXMLToOperateOn = ""<saml2:Assertion xmlns:saml2=""urn:oasis:names:tc:SAML:2.0:assertion"" xmlns:xs=""http://www.w3.org/2001/XMLSchema"" ID=""_420cc1a25a3890bd5df1f4c04bd7e986"" ..."";

boolean sign = Security.verifySignature(""SHA1withRSA"", pk, newXMLToOperateOn.getBytes(), Util.base64DecodeAsBytes(sig));
// SIGN IS FALSE!!!!

newXMLToOperateOn is the correct canonicalized string XML of the SAMLResponse. This is what I use to generate the correct SHA1 digest. Security.verify() works correctly since I use to for OpenID SSO checking and that works.
I also tried to substitute the data to check instead of the entire XML to the bytes of the SHA1 digest, but didn't work either. E.G. verify(algo, pk, sha1Digest.getBytes(), sig.getBytes().
Can someone tell me if there is something that I'm doing horribly wrong when checking the signature? The spec linked above tells me the signing method does this:
   CRYPT (PAD (ASN.1 (OID, DIGEST (data))))

Which doesn't help me a ton when I'm verifying the signature. I cannot recreate the signature since I can't find what private key they use in their examples.
Thanks for any help.
","You only need to verify the 'SignedInfo' portion of the XML
","1452","<java><digital-signature><saml><public-key-encryption><shibboleth>","4","2","1","2016-03-24 19:49:32","36208869","0","","234307","","2016-03-24 15:42:09","2016-03-24 15:36:44",""
"40607576","Generating public key from modulus and exponent","I've Modulus 

MjAxNzY5NTQ0ODc1ODUxMzcyOTQ3ODM5MjI1NzQ2MzQ1MTUzNjQxMjMxODE4NTE1NzQwODUwODI0NjYxMTA4NTA0MTc2ODU4MDUzMzE2ODIwMzI2NDcyMDI2NTkyMjc0MjgwMjE1NDg3MDEwNzU2NzA3OTU4NzQ2MTYxNzI5NDc5OTUzMzAwOTM0OTA4MTc4NDI2MTM5NDc3MDMxNzkxMzg0MDAyOTE5NjMyMTAyMDA5MjEwNDQ4MzU1MzYwOTY0ODkxODAxNjY5MTM4MTQ4NjU0Njg3OTA0NjUxNTUxOTIzMDU4MjQ0Njg2MTQ5NzkzMTQwNzYzODM2MjY1MjA2NjcyMjY4MjQzMDE2MjA4MTQ3NjAwMzIwNzI2MTIzNzQ4MjA5MzIwODIwODc2ODMxNzgzNzA4NTYyMzg5MzI2OTc2NTM2NjgyNzY0MDgwMTM3ODY1MjIyNjc5OTQ3NDMwMzIwMDE0NTAzMDE2ODQyMTQyNjgxNjMwNTA4OTQ1MDU3OTgzMDEzNDMwNDYxMDY5OTA3NjI0MzU3Mjc5MjU0MTQ5NDUzMzMyODUxNjkyOTc3OTIxMTUzNjIzOTg1Nzk0NzkyMzY2NDY2NDQwNTczMTQxMjc2ODAwOTU1MTU4NTQxOTk4ODM1MDIyMjk2NTE1ODU3ODI5Mjk2NzMzNjM1MjE3Mjk4ODYxNDYwODg3NjY4NDU4MjAzMzc3NjM5ODc2MTMyMTQ1MjczODAzOTAzMzU0ODA5MTYzNjEwNDE3ODgwNTAyNzA1NTM2NzMwNzQ1OTc1MzgwMjM2NjI5MjY3NjkzOTU2NTcyMDE=

and Exponent 

65537

Please help me on generating public key using modulus and exponent using objective-C.
","As written by zaph in this answer, the following code should do what you want : 
NSData* bytesFromHexString(NSString * aString) {
    NSString *theString = [[aString componentsSeparatedByCharactersInSet:[NSCharacterSet whitespaceAndNewlineCharacterSet]] componentsJoinedByString:nil];

    NSMutableData* data = [NSMutableData data];
    int idx;
    for (idx = 0; idx+2 <= theString.length; idx+=2) {
        NSRange range = NSMakeRange(idx, 2);
        NSString* hexStr = [theString substringWithRange:range];
        NSScanner* scanner = [NSScanner scannerWithString:hexStr];
        unsigned int intValue;
        if ([scanner scanHexInt:&intValue])
            [data appendBytes:&intValue length:1];
    }
    return data;
}

NSString *modulusString =  @""..."";
NSString *exponentString = @""65537"";

NSData *pubKeyModData = bytesFromHexString(modulusString);
NSData *pubKeyExpData = bytesFromHexString(exponentString);
NSArray *keyArray = @[pubKeyModData, pubKeyExpData];

//Given that you are using SCZ-BasicEncodingRules-iOS:
NSData *berData = [keyArray berData];
NSLog(@""berData:\n%@"", berData);

NSString *berBase64 = [berData base64EncodedStringWithOptions:0];
NSString *preamble = @""-----BEGIN CERTIFICATE REQUEST-----"";
NSString *postamble = @""-----END CERTIFICATE REQUEST-----"";
NSString *pem = [NSString stringWithFormat:@""%@\n%@\n%@"", preamble, berBase64, postamble];
NSLog(@""pem:\n%@"", pem);

","1428","<ios><objective-c><iphone><public-key-encryption>","-5","1","2","2016-11-22 00:52:49","40653408","6","","2143128","","2016-11-18 18:21:19","2016-11-15 10:33:11","2016-11-23 02:38:22"
"40607576","Generating public key from modulus and exponent","I've Modulus 

MjAxNzY5NTQ0ODc1ODUxMzcyOTQ3ODM5MjI1NzQ2MzQ1MTUzNjQxMjMxODE4NTE1NzQwODUwODI0NjYxMTA4NTA0MTc2ODU4MDUzMzE2ODIwMzI2NDcyMDI2NTkyMjc0MjgwMjE1NDg3MDEwNzU2NzA3OTU4NzQ2MTYxNzI5NDc5OTUzMzAwOTM0OTA4MTc4NDI2MTM5NDc3MDMxNzkxMzg0MDAyOTE5NjMyMTAyMDA5MjEwNDQ4MzU1MzYwOTY0ODkxODAxNjY5MTM4MTQ4NjU0Njg3OTA0NjUxNTUxOTIzMDU4MjQ0Njg2MTQ5NzkzMTQwNzYzODM2MjY1MjA2NjcyMjY4MjQzMDE2MjA4MTQ3NjAwMzIwNzI2MTIzNzQ4MjA5MzIwODIwODc2ODMxNzgzNzA4NTYyMzg5MzI2OTc2NTM2NjgyNzY0MDgwMTM3ODY1MjIyNjc5OTQ3NDMwMzIwMDE0NTAzMDE2ODQyMTQyNjgxNjMwNTA4OTQ1MDU3OTgzMDEzNDMwNDYxMDY5OTA3NjI0MzU3Mjc5MjU0MTQ5NDUzMzMyODUxNjkyOTc3OTIxMTUzNjIzOTg1Nzk0NzkyMzY2NDY2NDQwNTczMTQxMjc2ODAwOTU1MTU4NTQxOTk4ODM1MDIyMjk2NTE1ODU3ODI5Mjk2NzMzNjM1MjE3Mjk4ODYxNDYwODg3NjY4NDU4MjAzMzc3NjM5ODc2MTMyMTQ1MjczODAzOTAzMzU0ODA5MTYzNjEwNDE3ODgwNTAyNzA1NTM2NzMwNzQ1OTc1MzgwMjM2NjI5MjY3NjkzOTU2NTcyMDE=

and Exponent 

65537

Please help me on generating public key using modulus and exponent using objective-C.
","To do this make sure you have the OpenSSL library linked (instructions here http://code.google.com/p/ios-static-libraries/)
Once linked you'll have access to several BIGNUM converters. I turned the modulus into hex using the BN_hex2bn method saving the hex string into 'exponent'
Then create the BIGNUM struct and encrypt using RSA_public_encrypt
RSA *rsa = NULL;
rsa->n = BN_new();
BN_copy(rsa->n,modulus);   
rsa->e = BN_new();
BN_copy(rsa->e,exponent);     
rsa->iqmp=NULL;
rsa->d=NULL;
rsa->p=NULL;
rsa->q=NULL;

","1428","<ios><objective-c><iphone><public-key-encryption>","-5","0","2","2016-11-22 00:52:49","40653408","6","","2143128","","2016-11-18 18:21:19","2016-11-15 10:33:11","2016-11-23 02:38:22"
"7946777","Public key not recognized","I am trying to export a public key from openssl using python.  I have the actual key information transferred to the client from the server but the PEM encoding is not transferred so the key on the client is useless.  I basically send the public key using send all in python but unfortunately this does not send the PEM encoding.  Does anyone know how to transfer the encoding? 
I didn't know that the encoding would not transfer along with the key.
THe code where the string is read in
 import socket

 import M2Crypto as m2c
 import os

 max_transfer_block = 1024
 server_addr = ""10.1.1.2""
 dest_port = 3333
 listen_port = 8888
 client_addr =  ""10.1.1.3""
 mysocket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
 mysocket.connect((server_addr, dest_port))

 #receive the public key from the server
 keysocket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
 keysocket.bind((client_addr, listen_port))
 keysocket.listen(1)
 conn, client_addr = keysocket.accept()
 print 'connected by', client_addr
 data = conn.recv(max_transfer_block)
 #FILE = m2c.RSA.save_pub_key(data, ""serverPubKey.pem"")

 FILE = open(""sPub.pem"", ""w"")
 FILE.write(data)
 keysocket.close()     

 #transfer encrypted file
 key = m2c.RSA.load_pub_key('serverPubKey.pem')
 FILE = open(""test.txt"", ""r"")

 data = FILE.read()

 encrypted = key.public_encrypt(data, m2c.RSA.pkcs1_padding)

 mysocket.sendall(encrypted)
 mysocket.close()

When I use the line key = m2c.RSA.load_pub_key('serverPubKey.pem') I get an error telling me that there is no starting point.
 raise RSAError, m2.err_reason_error_string(m2.err_get_error()) M2Crypto.RSA.RSAError: no start line

I have figured out that this is because there is not in PEM format.  Unfortunately, I don't know how to put it in that format.
","The mistake was that the public/private key pair needs to be created from the same wrapper.  What I mean by this is that not all key pairs are the same.  My specific problem was that Openssl and the M2Crypto instances of key pairs were not in the same underlying format.  Thus creating keys with Openssl and then trying to use M2Crypto to use the keys was wrong.  The lesson from all of this is to not import keys from other wrappers.  If you do, make sure that they are in the same underlying format like ASCII or Unicode before trying to use them.
","1428","<python><file-transfer><public-key-encryption><pem>","1","2","1","2014-05-09 15:12:42","8039597","0","","321731","","2014-05-09 15:09:33","2011-10-30 18:12:23",""
"32887706","Encryption using X.509 2048 bit public key in iOS","In my iOS library, I have a Base64 encoded string containing the X.509 RSA 2048 bit public key. I want to encrypt a string using this public key. Can anyone please provide some Objective C code reference, mentioning the libraries I need to include?
The equivalent java code looks as below:
byte[] keyBytes = Base64.decodeBase64(publicKeyData);
// Get Public Key
X509EncodedKeySpec rsaPublicKeySpec = new X509EncodedKeySpec(keyBytes);
KeyFactory fact = KeyFactory.getInstance(""RSA"");
PublicKey publicKey = fact.generatePublic(rsaPublicKeySpec);
Cipher cipher = Cipher.getInstance(""RSA/ECB/PKCS1Padding"");
cipher.init(Cipher.ENCRYPT_MODE, pubKey);
encryptedData = cipher.doFinal(dataToEncrypt);﻿   

","try this code:
// publicKeyBase64 is your public key string
NSData *publicKeyFileContent = [[NSData alloc] initWithBase64EncodedString:publicKeyBase64 options:0];

// get your public key
SecCertificateRef cert = SecCertificateCreateWithData(kCFAllocatorDefault, (__bridge CFDataRef)publicKeyFileContent);
SecPolicyRef policy = SecPolicyCreateBasicX509();
SecTrustRef trust;
OSStatus status = SecTrustCreateWithCertificates(cert, policy, &trust);
SecTrustResultType trustResult;
if (status == noErr) {
    status = SecTrustEvaluate(trust, &trustResult);
}
SecKeyRef keyRef = SecTrustCopyPublicKey(trust);

// encrypt your data
// with this code you can encrypt only one block
// if you need to encrypt more data you need to use some chunking logic
const uint8_t *srcbuf = (const uint8_t *)[data bytes];
size_t srclen = (size_t)data.length;
size_t outlen = SecKeyGetBlockSize(keyRef) * sizeof(uint8_t);
if(srclen > outlen - 11){
    CFRelease(keyRef);
    return nil;
}
void *outbuf = malloc(outlen);

OSStatus status = noErr;
status = SecKeyEncrypt(keyRef,
                       kSecPaddingPKCS1,
                       srcbuf,
                       srclen,
                       outbuf,
                       &outlen
                       );
NSData *ret = nil;
if (status != 0) {
    NSLog(@""SecKeyEncrypt fail. Error Code: %ld"", status);
}else{
    ret = [NSData dataWithBytes:outbuf length:outlen];
}
free(outbuf);
CFRelease(cert);
CFRelease(policy);
CFRelease(trust);
CFRelease(keyRef);
// your encrypted data is in ret

","1426","<ios><rsa><public-key-encryption><x509>","2","0","1","2015-10-23 21:59:37","","0","","1329390","","2015-10-23 21:59:37","2015-10-01 12:32:41",""
"10215828","Extract public key from private key in C#","I used sn.exe to generate a key pair (private and public key). I extract a public key from private key as follows: 
sn -p keyPair.snk publicKey.snk
I read it by using C# and store it in database as binary to use for encrypting my data.
Is there any way to extract a public key from a private key in C# without using sn.exe?
NOTE : I want a public key as a byte to compare it with the one I store in my database.
","
Is there any way to extract a public key from a private key in C# without using sn.exe?

It is surprisingly difficult to do that but it is possible; I have done so.  
What you need to do is p/invoke to StrongNameGetPublicKey in mscorwks.dll. 

I read it by using C# and store it in database as binary to use for encrypting my data

This is an extremely bad idea. The purpose of a strong name public key is not to encrypt your data!  The purpose of a strong name public key is for your customers to verify that the assembly you gave them was written by you. If you are using the public key for anything other than that task you are doing something very, very wrong and you should stop doing so immediately.
Strong names use encryption, but they are not an encryption technology; they are an evidence producing technology for the purpose of code access security policy evaluation.
","1407","<c#><public-key-encryption>","-8","10","1","2012-04-18 20:38:47","","2","","92414","","2012-04-18 20:32:12","2012-04-18 18:41:22",""
"45530629","YoBit tapi problems with authetincation","I am trying to write simple application for myself and when i try to call 
getInfo method i always get a error into the response. Key, sign, method or nonce is incorrect. I found a number of examples but i still can't find mistake in my code. Could anyone help me with it?
The code works fine for hitbtc. I know yobit is a bit different but I think I have accomodate that.
My code:
Protected Shared Function readStrings(signatureheader As String, host As String, pathandQuery As String, post As String, secret As String, hasher As System.Security.Cryptography.HMAC, otherHeaders As Tuple(Of String, String)()) As String
    'apikey=98998BEEB8796455044F02E4864984F4
    'secret=44b7659167ffc38bb34fa35b5c816cf5
    hasher.Key = exchanges.getBytes(secret)
    Dim url = host + pathandQuery ' url = ""https://yobit.net/tapi/""
    Dim wc = New CookieAwareWebClient()
    Dim sigHash2 = """"

    If post = """" Then
        sigHash2 = CalculateSignature2(pathandQuery, hasher)
    Else
        'post = ""method=getInfo&nonce=636431012620""
        sigHash2 = CalculateSignature2(post, hasher) 'sighash2= ""ece0a3c4af0c68dedb1f840d0aef0fd5fb9fc5e808105c4e6590aa39f4643679af5da52b97d595cd2277642eb27b8a357793082007abe1a3bab8de8df24f80d2""
    End If

    wc.Headers.Add(signatureheader, sigHash2) ' SignatureHeader =""Sign""

    Dim response = """"

    For Each oh In otherHeaders ' otherHeaders =(0) {(Key, 98998BEEB8796455044F02E4864984F4)}   System.Tuple(Of String, String)
        wc.Headers.Add(oh.Item1, oh.Item2)
    Next

    '-      wc.Headers  {Sign: ece0a3c4af0c68dedb1f840d0aef0fd5fb9fc5e808105c4e6590aa39f4643679af5da52b97d595cd2277642eb27b8a357793082007abe1a3bab8de8df24f80d2  Key: 98998BEEB8796455044F02E4864984F4    } System.Net.WebHeaderCollection
    'url =  ""https://yobit.net/tapi/""
    'post = ""method=getInfo&nonce=636431012620""

    If post = """" Then
        response = wc.DownloadString(url)
    Else
        response = wc.UploadString(url, post) 'response =       response    ""{""success"":0,""error"":""invalid key, sign, method or nonce""}""    String

    End If


    Return response
End Function

The code has been tested succesfully for hitbtc.
So the crypto part is correct. I put it here anyway for completeness
Protected Shared Function CalculateSignature2(text As String, hasher As System.Security.Cryptography.HMAC) As String
    Dim siginhash = hasher.ComputeHash(exchanges.getBytes(text))
    Dim sighash = exchanges.getString(siginhash)
    Return sighash
End Function

So,
for sanity check
This code works
Public Overrides Sub readbalances()
    Dim response = readStrings(""X-Signature"", ""https://api.hitbtc.com"", ""/api/1/trading/balance?nonce="" + exchanges.getNonce().ToString + ""&apikey="" + _apiKey, """", _secret, New System.Security.Cryptography.HMACSHA512(), {})


End Sub

With yobit things are different. I got to use post instead of get. I got to add more headers. However, I think I have fixed that.
It doesn't work.
The python function for yobit API is this I just need to translate that to vb.net which I think I have done faithfully
API Call Authentication in Python ( Working PHP example )
I think the mistake is around here
request_url = ""https://yobit.net/tapi"";
request_body = ""method=TradeHistory&pair=ltc_btc&nonce=123"";
signature = hmac_sha512(request_body,yobit_secret);
http_headers = {
    ""Content-Type"":""application/x-www-form-urlencoded"",
    ""Key"":yobit_public_key,
    ""Sign"":signature
}

response = http_post_request(request_url,request_body,http_headers);
result = json_decode(response.text);

There the stuff that I copied is method=getInfo&nonce=636431012620 which is what I put in post.
So that seems right.
","Looks like it works.
I just need to change the nonce so that it's between 0 to 2^31
So this is the error
 post = ""method=getInfo&nonce=636431012620

The nonce shouldn't be that big. At most it should be
2147483646
Also though not documented, I must add
content type as one of the header. This is the final solution
   Dim nonce = exchanges.getNonce().ToString
    Dim content = hashObject("""", nonce, ""method=getInfo&nonce="")
    Dim sighash = computeSig(content)
    Dim result = CookieAwareWebClient.downloadString1(""https://yobit.net/tapi/"", content, {New Tuple(Of String, String)(""Key"", _apiKey), New Tuple(Of String, String)(""Sign"", sighash), New Tuple(Of String, String)(""Content-Type"", ""application/x-www-form-urlencoded"")})

So I added New Tuple(Of String, String)(""Content-Type"", ""application/x-www-form-urlencoded"") as one of the headers
Protected Overridable Function computeSig(content As String) As String
    Dim hasher = New System.Security.Cryptography.HMACSHA512(System.Text.Encoding.UTF8.GetBytes(_secret))
    Return CalculateSignature2(content, hasher)
End Function

Public Shared Function CalculateSignature2(content As String, hasher As System.Security.Cryptography.HMAC) As String
    Dim siginhash = hasher.ComputeHash(System.Text.Encoding.UTF8.GetBytes(content))
    Dim sighash = exchanges.getString(siginhash) 'convert bytes to string
    Return sighash
End Function

Public Shared Function downloadString1(url As String, post As String, otherHeaders As Tuple(Of String, String)()) As String
    Dim wc = New CookieAwareWebClient()
    For Each oh In otherHeaders
        wc.Headers.Add(oh.Item1, oh.Item2)
    Next

    Dim response = String.Empty

    Try
        If post = """" Then
            response = wc.DownloadString(url)
        Else
            response = wc.UploadString(url, post)
        End If
    Catch ex As Exception
        Dim a = 1
    End Try

    Return response
End Function

","1405","<vb.net><api><public-key-encryption>","6","1","1","2017-10-11 16:55:41","","2","0","1739000","","2017-10-10 01:17:39","2017-08-06 09:35:36",""
"3782671","How do I import a public key for encryption in C on Windows","I have a public key and I want to use it to encrypt a piece of data.  I'm trying to import the public key in order to use it, but CryptImportKey gives me an 'invalic parameter' error.
What's the problem?
Here's my code:
if( !CryptAcquireContext(&hProv, NULL, NULL, PROV_RSA_AES, CRYPT_VERIFYCONTEXT) )
{
    /*
     * Print error and return
     */
}
pblob->header->bType = PUBLICKEYBLOB;
pblob->header->aiKeyAlg = CALG_AES_128;
pblob->header->bVersion = CUR_BLOB_VERSION;
pblob->header->reserved = 0;
pblob->key_len = key_len;

memcpy(pblob->key, key , key_len);

if( !CryptImportKey( &hProv,
    (LPCBYTE)pblob,
    sizeof(*pblob),
    0,
    CRYPT_EXPORTABLE,
    &hKey ) )
{
    // Print error and return
}

","Windows CryptoAPI doesn't work directly with plain text keys; you have to jump through a bit of a hoop to do this.  Here is the knowledge base article describing how to do this.
","1404","<windows><public-key-encryption>","0","0","2","2010-09-27 11:32:49","","0","","179634","","2010-09-24 02:20:55","2010-09-23 21:27:44",""
"3782671","How do I import a public key for encryption in C on Windows","I have a public key and I want to use it to encrypt a piece of data.  I'm trying to import the public key in order to use it, but CryptImportKey gives me an 'invalic parameter' error.
What's the problem?
Here's my code:
if( !CryptAcquireContext(&hProv, NULL, NULL, PROV_RSA_AES, CRYPT_VERIFYCONTEXT) )
{
    /*
     * Print error and return
     */
}
pblob->header->bType = PUBLICKEYBLOB;
pblob->header->aiKeyAlg = CALG_AES_128;
pblob->header->bVersion = CUR_BLOB_VERSION;
pblob->header->reserved = 0;
pblob->key_len = key_len;

memcpy(pblob->key, key , key_len);

if( !CryptImportKey( &hProv,
    (LPCBYTE)pblob,
    sizeof(*pblob),
    0,
    CRYPT_EXPORTABLE,
    &hKey ) )
{
    // Print error and return
}

","Thanks to all that was said here, and a lot of searching, I found the answer in:
http://www.ms-news.net/f2748/problem-importing-public-key-4052577.html
And used it to create my own program which I posted on the other thread at:
Load an X509 PEM file into Windows CryptoApi
","1404","<windows><public-key-encryption>","0","0","2","2010-09-27 11:32:49","","0","","179634","","2010-09-24 02:20:55","2010-09-23 21:27:44",""
"5910490","How to import PKCS#12 into Seahorse","I have a PKCS#12 file which I have successfully imported into Firefox. Now, I would like to import the same file into Linux in order to use public-Key cryptography with these keys. I have tried to import it using Seahorse, but it failed. Maybe PKCS#12 files are designed to be used only with browsers? I would like to know...
Thanks!
","PKCS#12 is a standard made by RSA for PKI (public key infrastructure). This consists of a tree of certificates and their accompanying keys. Your PKCS#12 contains one leaf certificate and its key, possibly together with some higher up certificates (it's an upside down tree).
PGP, which is used by Seahorse is a different way of handling public/private keys, based on a web of trust (google it). It is not directly compatible with PKI(X) which you have now. You could extract the key and generate a PGP key out of it, but you would have to reestablish trust anyway, so you might as well use a different key pair...
","1401","<linux><encryption><ubuntu><public-key-encryption><pkcs#12>","5","1","1","2011-05-07 01:22:30","","0","","","","","2011-05-06 11:06:11",""
"27872096","Java: Luna HSM Verify Sign using Public Key","Using Java API, I am trying to access Public key stored in Luna HSM. Even though I am able to print the corresponding public key label name, but when I am trying to get the public key, I am not able to get the reference to that public key. Here is the code snippet:
        KeyStore ks = KeyStore.getInstance(""Luna"");
        ks.load(null, null); 
        lunaProvider = ks.getProvider();

        publicKey = (PublicKey) ks.getKey(alipayImpl.getHsmKeyStorePublicEntryName(), null);

        // ****************************************************************************
        // ** If the private keystore is not found, return original barcode string.  **
        // ****************************************************************************
        if (publicKey == null) {
            throw new Exception(""Unable to acquire the Public Key "" + alipayImpl.getHsmKeyStorePublicEntryName() + "", Hash will not be verified."");
        }
        // ***********************************************************
        // ** Create a Signature Object and sign the encrypted text **
        // ***********************************************************
        Signature signatureObject = Signature.getInstance(alipayImpl.getAlipaySignAlgorithm(), lunaProvider);

        signatureObject.initVerify(publicKey);
        signatureObject.update(signedMessage
                .getBytes(AlipayConstants.INPUT_CHARSET_VALUE));
        isValidSign = signatureObject.verify(Base64.decode(hash));

I am logging to HSM properly. While Accessing Private Key, I didnt have any issues. Is there any restriction on Luna HSM that access to public key is given only through Certificates? 
Thanks in advance. 
","Did you try something like this :
final KeyStore keyStore = KeyStore.getInstance(""Luna"");
keyStore.load(null, null);

final Certificate certificate = keyStore.getCertificate(alias);
if (certificate == null) {
   throw new IllegalArgumentException(String.format(""Certificate '%s' does not exists"", alias));
}

final PublicKey publicKey = certificate.getPublicKey();
// TODO Working with the public key...

","1399","<public-key-encryption><hsm>","2","0","2","2018-01-30 18:47:03","","0","","","","","2015-01-10 02:00:05",""
"27872096","Java: Luna HSM Verify Sign using Public Key","Using Java API, I am trying to access Public key stored in Luna HSM. Even though I am able to print the corresponding public key label name, but when I am trying to get the public key, I am not able to get the reference to that public key. Here is the code snippet:
        KeyStore ks = KeyStore.getInstance(""Luna"");
        ks.load(null, null); 
        lunaProvider = ks.getProvider();

        publicKey = (PublicKey) ks.getKey(alipayImpl.getHsmKeyStorePublicEntryName(), null);

        // ****************************************************************************
        // ** If the private keystore is not found, return original barcode string.  **
        // ****************************************************************************
        if (publicKey == null) {
            throw new Exception(""Unable to acquire the Public Key "" + alipayImpl.getHsmKeyStorePublicEntryName() + "", Hash will not be verified."");
        }
        // ***********************************************************
        // ** Create a Signature Object and sign the encrypted text **
        // ***********************************************************
        Signature signatureObject = Signature.getInstance(alipayImpl.getAlipaySignAlgorithm(), lunaProvider);

        signatureObject.initVerify(publicKey);
        signatureObject.update(signedMessage
                .getBytes(AlipayConstants.INPUT_CHARSET_VALUE));
        isValidSign = signatureObject.verify(Base64.decode(hash));

I am logging to HSM properly. While Accessing Private Key, I didnt have any issues. Is there any restriction on Luna HSM that access to public key is given only through Certificates? 
Thanks in advance. 
","The correct answer is >
LunaKey lk= LunaKey.LocateKeyByAlias(""publicKeyName"");
But it is advisable to make the key persistent before querying HSM.
","1399","<public-key-encryption><hsm>","2","0","2","2018-01-30 18:47:03","","0","","","","","2015-01-10 02:00:05",""
"4575101","Serial number generation algorithm for C# application","I am  developing a shareware c# application which accepts a serial key generated in my website.
I am following  the following approach suggested by Joseph Spiros

You bundle your public key with the application.
  When the user buys the application, they supply their name and e-mail address.
  The web site hashes the user's name and e-mail address, signs the hash with your private >key, and provides the result in Base64 to ease typing.
  When the user enters the ""code"" into your application along with their name and e-mail >address, your application can verify that it was signed by your private key (which only >you/the web store has access to), and that it matches the name and e-mail provided by the >user.

My website runs on linux server so that the program generating the licence will be written in php. The software is developed using  c#. Please tell me whether the licence/hash generated and signed using a private key in php will be compatible with the public key in C#.
A pointer to an example would be helpful.
","Have a look at the Shareware Starter Kit for an example of licensing shareware on a Microsoft stack.
","1398","<c#><php><hash><public-key-encryption><serial-number>","0","2","1","2011-01-01 18:24:13","4575112","1","","76337","","2011-01-01 18:24:13","2011-01-01 18:18:03",""
"44746907","Converting java crypto code to python equivalent","I have been trying to convert the below java code to its python equivalent:
Encrypt.java
import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.InputStreamReader;
import java.io.UnsupportedEncodingException;
import java.security.Key;
import java.security.KeyFactory;
import java.security.NoSuchAlgorithmException;
import java.security.PublicKey;
import java.security.cert.CertificateException;
import java.security.cert.CertificateFactory;
import java.security.cert.X509Certificate;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.KeySpec;
import java.security.spec.X509EncodedKeySpec;
import java.util.Arrays;
import org.apache.commons.codec.binary.Base64;
//import org.jose4j.base64url.Base64;

public class Encrypt {

    public static void main(String[] args)
            throws InvalidKeySpecException, NoSuchAlgorithmException, UnsupportedEncodingException, CertificateException, FileNotFoundException {
        PublicKey pubKey; 
        Object localObject1 = new
         String(""MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA76y3+1w4Ld9Q4WvHQkCkg6qjwq2wWOYMV9nAthX6ugatNlShRb2gBmy""
         +
         ""qvh7tOYHhjAhkG9Z33jCVinPuhgb0ioa5/sFAgP5LDdo5SBk4b4n/wRUbdMhfFFcTT0As2OsmdBc2iONUaG4g3WjgRODxy6LLahms6YgTnG+AqeDo8LpXxsiFXe""
         +
         ""iqGUyKQU1l16BPc2xyG+tDitFbKHx9pDL12e/w5b4G4Zg4yJgbNlZrGc3Udz5EbDREnAwirjAA3F6x2DF3j746vETb1g2y6+P5sS4lvG3XmaB1JBlhNh5qpqADRqmE""
         + ""MWeiYhrRcK9KjS1URSUizGPo96d8R82DmXvYKQIDAQAB"");

         //localObject1 = new X509EncodedKeySpec(Base64.decode(((String)localObject1).getBytes(""utf-8"")));
         localObject1 = new X509EncodedKeySpec(Base64.decodeBase64(((String)localObject1).getBytes(""utf-8"")));
         localObject1 = KeyFactory.getInstance(""RSA"").generatePublic((KeySpec)localObject1);
         System.out.println((PublicKey)localObject1);
         System.out.println(""___________________________________________________________________________________________________________________________________________________"");

//       String secret_pub_key= //""-----BEGIN RSA PUBLIC KEY-----"" +
//               ""MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAwkvq7mHuTMGeJF/qiAot""+
//               ""OcLTd6hjDEcMHIk2IY35JInuypD6WieogOxSS6kHYho/U+BW/Cgz0XjziPIQSJZx""+
//               ""AGOrtdZrTa6n6S6I65YB2wPB93lLi/qnBmUSetEgAgM+MOfiYT8Dift9Mut+BvbE""+
//               ""iFMH163ovoiTyLDpbTYDB6InzFzu1l7G01pi/ZAc69kWrJ+yNMEUcnAerRPt30et""+
//               ""XAbKD2lC696VJa/2xtWZ5T7vwMpFLIaGFAg228ZifgwDIRFsBmwPsAsngQSGVVBo""+
//               ""Ijm3fb0PUDV4MTw+cNT0ldHbYCAWy6zgA0K7eL5LcUN8+ai7u6VMWYUT4FAvYNiP""+
//               ""IwIDAQAB"";
//               //""-----END RSA PUBLIC KEY-----"";
//          X509EncodedKeySpec pubKeySpec = new X509EncodedKeySpec(Base64.decode(secret_pub_key));
//          KeyFactory keyFactory = KeyFactory.getInstance(""RSA"");
//          PublicKey pubKey = keyFactory.generatePublic(pubKeySpec);

         Object secret_pub_key= new String(//""-----BEGIN RSA PUBLIC KEY-----"" +
                 ""MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEApzQvzc+chU92SSh2eukY""+
                 ""ycdTJArCjL4+AqW8a2lKZ2jb5g04q6FGSRJgNkuggXt7U5ys5pb+J0699vY9rzgz""+
                 ""+WmH6W/ZRZ2hAf3rtWaC1YYetD1SfmD2OGItGfkFYuppjjjKXEnTDzCBQT5IL7hd""+
                 ""lnlCfpDkcPmJWvKJU+5gJek9RanVQYXLWgtOIVrQ7LJhQEFDMuYSw+rz7+paBxNq""+
                 ""XeHTvDk/ylGtHjb3xOvbVg3DfL2z76YYX69Ae3Cd1rlqaY0IT01k3oeqNZg3638T""+
                 ""i8l+6ytwChRhtOHZh5XCaW6Cfbz2nezgYgY1qTAKK05o8Of+W/dErUt4166qnjBl""+
                 ""+wIDAQAB"");
                 //""-----END RSA PUBLIC KEY-----"";


         secret_pub_key = new X509EncodedKeySpec(Base64.decodeBase64(((String)secret_pub_key).getBytes(""utf-8"")));
         secret_pub_key =  KeyFactory.getInstance(""RSA"").generatePublic((KeySpec)secret_pub_key);
         pubKey = (PublicKey)secret_pub_key;

        Object localObject;
        Lc lc = new Lc();
        System.out.println(""\n\nlc.pub is"" + lc.pub);
        System.out.println(""\n\n\nokokokokok"" + pubKey.getEncoded());
        //byte[] arrayOfByte = new String(Base64.encodeBase64(lc.pub.getEncoded())).getBytes();
        byte[] arrayOfByte = new String(Base64.encodeBase64(pubKey.getEncoded())).getBytes();
        StringBuilder localStringBuilder1 = new StringBuilder();
        int i = 0;
        while (i < arrayOfByte.length) {
            if (arrayOfByte.length > i + 200) {
                localObject = Arrays.copyOfRange(arrayOfByte, i, i + 200);
            } else {
                localObject = Arrays.copyOfRange(arrayOfByte, i, arrayOfByte.length + 1);
            }
            StringBuilder localStringBuilder2 = new StringBuilder();
            lc.pub = (PublicKey)localObject1;
            localObject = new String((byte[])localObject);
            localStringBuilder1.append(lc.upperDot((String)localObject) + "":::"");
            i += 200;
        }
        System.out.println(""The ducking key is "" + localStringBuilder1.toString());
    }
}

Lc.java
import java.security.InvalidKeyException;
import java.security.Key;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.NoSuchAlgorithmException;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.Signature;
import java.security.SignatureException;
import javax.crypto.Cipher;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.SecretKeySpec;
import org.apache.commons.codec.binary.Base64;

public class Lc {
    public static PublicKey pub;
      public static PrivateKey pri;
      public byte[] by;
      public String dot;
      public Lc() {
          Object localObject = ""RSA"";
          try
          {
            localObject = KeyPairGenerator.getInstance((String)localObject);
            KeyPair localKeyPair = ((KeyPairGenerator)localObject).generateKeyPair();
            localObject = localKeyPair.getPublic();
            pub = (PublicKey)localObject;
            localObject = localKeyPair.getPrivate();
            pri = (PrivateKey)localObject;
          }
          catch (NoSuchAlgorithmException localNoSuchAlgorithmException)
          {
            localNoSuchAlgorithmException.printStackTrace();
          }
    }
      public static String upperDot(String paramString)
      {
        Object localObject = ""RSA/ECB/PKCS1Padding"";
        try
        {
          Cipher localCipher = Cipher.getInstance((String)localObject);
          localObject = pub;
          int i = 1;
          localCipher.init(i, (Key)localObject);
          localObject = paramString.getBytes();
          byte[] arrayOfByte1 = localCipher.doFinal((byte[])localObject);
          byte[] arrayOfByte2 = Base64.encodeBase64(arrayOfByte1);
          localObject = new String(arrayOfByte2);
          return (String)localObject;
        }
        catch (Exception localException)
        {
          System.out.print(localException);
        }
        return null;
      }
}

please ignore the bad design of the above 2 java files and the debug print statements
The output that the above produces, which is of interest to me is the content of the last output statement :

The ducking key is t4z2jf9GKtKvXiXCPYU3u7Y0LwQOOeQBVi+YRATc3GqyTNb085bRLUVqiNT5v/ZcZl2FZPegeN8OTG9vPbwuY1HrQ04xv0vUf3ohJORiUXwEQtoBVMDnKHib50FPZCbAZIp/1u0KgEPBV9rEe7BmHi2UGCNnp0e50G68cBPLknUinBIIYIIrw/o3U4SAT+uBdo6wyi/x0tWR3El8gJpL34JJVWzdzi4y61cPZI31gxyY19t1EzzmtqB0wnjV5RvTsavR5s3RgtBu3EV+b43poam2K0CsRyfB2lFawkZBnvRL6GzvozBpUYe4awdPbU4Pjvuju5B3zWXloQ5kMVZAkg==:::MpcHcJWhGdYrS1VLza+ereOU1ZRZ9LyVTN0KBBdQLIjYXChX1eKtRdftrF306L5BE8Ni9ibTylbcsc6tocphVpYnCvYN2eKVcEoHLyk9Iz/Cf2ikYJCUFtHh/cPnSILhwI7txdVds0Il58uDMevMnvvRntqVR7nw6UUmUVwmtFvNWVdceP61BHc9YsDMdQs8jPOeGAHWmqA2g4ODYB2W07yQhmwNIQZEmkmrfRHUd1dqM57sIWS9HdgEbrnqhyt1pIWrCxzgYbzZCuaDS/llcFsqgLBbaPpTg2qNUFi2x3r1jJ1UeJeX+y/mOhrEvBXSLmadsCYmEROIutNgoVWigg==:::

Now I want to achieve the exact same behavior through python (2.7 if that matters). I have so far relied on pycrypto and M2Crypto but neither has been helpful. 
Here's my attempt at making a python equivalent of the above :
from Crypto.PublicKey import RSA
from base64 import b64decode
from base64 import b64encode

def ecnryptorFun(key, secret):
  encrypted = key.encrypt(secret, 1)
  final_text = b64encode(encrypted[0])
  return final_text

def sayHello(body):
    url = 'https://consumer-app-development.appspot.com/api/sayHello'
    res = requests.post(url=url, data=body)
    return res.text

key64 = b'MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA76y3+1w4Ld9Q4WvHQkCkg6qjwq2wWOYMV9nAthX6ugatNlShRb2gBmyqvh7tOYHhjAhkG9Z33jCVinPuhgb0ioa5/sFAgP5LDdo5SBk4b4n/wRUbdMhfFFcTT0As2OsmdBc2iONUaG4g3WjgRODxy6LLahms6YgTnG+AqeDo8LpXxsiFXeiqGUyKQU1l16BPc2xyG+tDitFbKHx9pDL12e/w5b4G4Zg4yJgbNlZrGc3Udz5EbDREnAwirjAA3F6x2DF3j746vETb1g2y6+P5sS4lvG3XmaB1JBlhNh5qpqADRqmEMWeiYhrRcK9KjS1URSUizGPo96d8R82DmXvYKQIDAQAB'

keyDER = b64decode(key64)
keyPub = RSA.importKey(keyDER)

secret = b""MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEApzQvzc+chU92SSh2eukYycdTJArCjL4+AqW8a2lKZ2jb5g04q6FGSRJgNkuggXt7U5ys5pb+J0699vY9rzgz+WmH6W/ZRZ2hAf3rtWaC1YYetD1SfmD2OGItGfkFYuppjjjKXEnTDzCBQT5IL7hdlnlCfpDkcPmJWvKJU+5gJek9RanVQYXLWgtOIVrQ7LJhQEFDMuYSw+rz7+paBxNqXeHTvDk/ylGtHjb3xOvbVg3DfL2z76YYX69Ae3Cd1rlqaY0IT01k3oeqNZg3638Ti8l+6ytwChRhtOHZh5XCaW6Cfbz2nezgYgY1qTAKK05o8Of+W/dErUt4166qnjBl+wIDAQAB""

#secret1 = b64encode(secret)
arrayOfByte = bytearray(secret)

i = 0 
localStringBuilder1 = """"
while i < len(arrayOfByte):  
  if len(arrayOfByte) > (i+200):
    localObject = arrayOfByte[i:i+200]
  else:
    localObject = arrayOfByte[i:len(arrayOfByte)+1]
  localObj_byte_array = bytearray(localObject)
  localStringBuilder1 = localStringBuilder1 + ecnryptorFun(keyPub, str(localObject)) + ':::'
  #localStringBuilder1 = localStringBuilder1 + ecnryptorFun(encryption_key, localObj_byte_array) + ':::'
  i += 200;

print localStringBuilder1

Output of the above python code

vkqbraD/5HMvs9LG59VXCGCLUoJ0msU6fVvLMDCc8fQ41S3R3IC0EfxLCk9FoHUIGK5h90Rd0at2ROvcOVCtESAYZlYYCB1U99NqWCFLvyDBxS4uEAVHD5yv4U82Dmn/p/asi+D/GxnvP/xvyiI+tp39lWx77DuV4hlnRbltHu9f4o4cvqZ+Nn7wCzY1TBzIClT8f4lx2g9E/5+mhfkQIHejGIAMyJXl3xy+qhQSoy8DvudGQU95eGfDRdci4yqOwDeG2+QlUip627tMbttAroWQjM8jC419kFPetTlmV/RczE/vcwnyM3iEnrhB9KnjRLYEecJ8mEYU7L/TxBe+Tg==:::V1oZBPETF9ryap59T4zOwfW0/pASSCULWL8ZlvUrSlRLeaZmIxplNmewqyUnrhwIbnpDvwhmz7+2/Dd2EN4hJndRnGl7aoEX8/GJP0Kz9vL2qEDbIGQC/Dv6O75KPFZ/E06DYLcycLhNZYxudwVP9rJAhFEEMgefpY40v1+B6sqqogrGnZhfwITaqpU0FKTbHSlHUymlD6Cn4lb0yLMISG6MZRQrP5B67UkGexlpxPQTHsXcLy0vTEzMZkvdxbv4YtawNvmgeQEgD1jqIB45pOngrwp3jcs9D9Ib2hCwpOoqkwOV/YaA+XO+dkPo8BxOw5DH/jWRcksb3N65YEmlvQ==:::

Now although the above produces a very similar output but it is not the right one. Why? Because when the output of the java code above is sent to the backend, I receive a HTTP 200 OK and the expected response. 
However, when the output of the python code above is sent similarly to the backend, I receive a 500 internal server error, meaning (as per my assumption, given that all the other params, headers etc. remain exactly the same between the java and the python HTTP requests) the input to the backend was not correct and hence it broke (again please ignore the 500, I agree it should be something more meaningful and definitely not a 500)
I do not have access to the backend. It is more of a red team - blue team exercise we are doing
Also, I could possibly invoke the java code above from python and still manage to achieve the end result and get the work done, but that'd be more of a hack, which would although be sufficient, but I am more interested in knowing how exactly can I achieve the same with Python alone.
As per some suggestions in the comments below I tried this as well:
So I tried this as well:
from Crypto.Cipher import PKCS1_v1_5

def encryptMsg(secret):
    message = secret
    key = RSA.importKey(open('myPubkey.pem').read())
    cipher = PKCS1_v1_5.new(key)
    ciphertext = b64encode(cipher.encrypt(message))
    return ciphertext

and then in the while loop, this:
localStringBuilder1 = localStringBuilder1 + encryptMsg(str(localObject)) + ':::'

Still doesn't seem to work. Same results as before.
","Thanks to https://stackoverflow.com/users/1816580/artjom-b for pointing me in the right direction in the comments above. 
Ok. What works is this :
from Crypto.PublicKey import RSA
from base64 import b64decode
from base64 import b64encode
from Crypto.Cipher import PKCS1_v1_5

def encryptMsg(key, secret):
    message = secret
    cipher = PKCS1_v1_5.new(key)
    ciphertext = b64encode(cipher.encrypt(message))
    return ciphertext

from Crypto.PublicKey import RSA
from base64 import b64decode
from base64 import b64encode
from Crypto.Cipher import PKCS1_v1_5
import requests


# def ecnryptorFun(key, secret):
#   encrypted = key.encrypt(secret, 1)
#   final_text = b64encode(encrypted[0])
#   return final_text

def encryptMsg(key, secret):
    message = secret
    cipher = PKCS1_v1_5.new(key)
    ciphertext = b64encode(cipher.encrypt(message))
    return ciphertext

def sayHello(body):
    url = 'https://consumer-app-development.appspot.com/api/sayHello'
    res = requests.post(url=url, data=body)
    return res.text

# this is basically the keyString value itself
key64 = b'MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA76y3+1w4Ld9Q4WvHQkCkg6qjwq2wWOYMV9nAthX6ugatNlShRb2gBmyqvh7tOYHhjAhkG9Z33jCVinPuhgb0ioa5/sFAgP5LDdo5SBk4b4n/wRUbdMhfFFcTT0As2OsmdBc2iONUaG4g3WjgRODxy6LLahms6YgTnG+AqeDo8LpXxsiFXeiqGUyKQU1l16BPc2xyG+tDitFbKHx9pDL12e/w5b4G4Zg4yJgbNlZrGc3Udz5EbDREnAwirjAA3F6x2DF3j746vETb1g2y6+P5sS4lvG3XmaB1JBlhNh5qpqADRqmEMWeiYhrRcK9KjS1URSUizGPo96d8R82DmXvYKQIDAQAB'

keyDER = b64decode(key64)
keyPub = RSA.importKey(keyDER)

secret = b""MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEApzQvzc+chU92SSh2eukYycdTJArCjL4+AqW8a2lKZ2jb5g04q6FGSRJgNkuggXt7U5ys5pb+J0699vY9rzgz+WmH6W/ZRZ2hAf3rtWaC1YYetD1SfmD2OGItGfkFYuppjjjKXEnTDzCBQT5IL7hdlnlCfpDkcPmJWvKJU+5gJek9RanVQYXLWgtOIVrQ7LJhQEFDMuYSw+rz7+paBxNqXeHTvDk/ylGtHjb3xOvbVg3DfL2z76YYX69Ae3Cd1rlqaY0IT01k3oeqNZg3638Ti8l+6ytwChRhtOHZh5XCaW6Cfbz2nezgYgY1qTAKK05o8Of+W/dErUt4166qnjBl+wIDAQAB""    
arrayOfByte = bytearray(secret)

i = 0 
localStringBuilder1 = """"
while i < len(arrayOfByte):  
  if len(arrayOfByte) > (i+200):
    localObject = arrayOfByte[i:i+200]
  else:
    localObject = arrayOfByte[i:len(arrayOfByte)+1]
  localObj_byte_array = bytearray(localObject)
  localStringBuilder1 = localStringBuilder1 + encryptMsg(keyPub, str(localObject)) + ':::'
  i += 200;

print localStringBuilder1

And now the for the string I get the backend responds with 200 OK 
","1393","<java><python-2.7><rsa><public-key-encryption><pycrypto>","0","0","1","2017-06-25 16:11:11","44748193","5","3","980153","","2017-06-25 16:03:40","2017-06-25 13:36:51",""
"13644525","cryptico.js encrypted message, must decrypt in C#","I need to be able to decrypt a string on the server using C#, but the string was encrypted using public key encryption with cryptico.js on the client.  For details, see context at the end.
Cryptico gives me a private RSA key like this (note - 'like' this - I created a new one for this question):
Array ( [n] => 8029845567507477803775928519657066509146751167600087041355508603090505634905205233922950527978886894355290423984597739819216469551137046641801207199138209 [e] => 3 [d] => 5353230378338318535850619013104711006097834111733391360903672402060337089936682996269976597251251223844095913209399106464214877696419418951728015128013411 [p] => 102067954277225510613941189336789903269738979633396754230261162567549753196947 [q] => 78671563708406591396117399809764267229341143260756252277657051641634753921147 [dmp1] => 68045302851483673742627459557859935513159319755597836153507441711699835464631 [dmq1] => 52447709138937727597411599873176178152894095507170834851771367761089835947431 [coeff] => 26458340158787140383846156526777567128582042036682248240414722856369310516021 

...plus a bunch of methods.
I am trying to decrypt it thusly:
                RSAParameters parameters = new RSAParameters();

            System.Text.ASCIIEncoding encoding = new System.Text.ASCIIEncoding();

            parameters.Exponent = encoding.GetBytes(""3"");

            //dmp1
            parameters.DP =
                encoding.GetBytes(""68045302851483673742627459557859935513159319755597836153507441711699835464631"");

            //dmq1
            parameters.DQ =
                encoding.GetBytes(""52447709138937727597411599873176178152894095507170834851771367761089835947431"");

            //d
            parameters.D =
                encoding.GetBytes(
                    ""5353230378338318535850619013104711006097834111733391360903672402060337089936682996269976597251251223844095913209399106464214877696419418951728015128013411"");

            //p
            parameters.P =
                encoding.GetBytes(""102067954277225510613941189336789903269738979633396754230261162567549753196947"");

            //q
            parameters.Q =
                encoding.GetBytes(""78671563708406591396117399809764267229341143260756252277657051641634753921147"");

            //n
            parameters.InverseQ =
                encoding.GetBytes(
                    ""8029845567507477803775928519657066509146751167600087041355508603090505634905205233922950527978886894355290423984597739819216469551137046641801207199138209"");

            //coeff
            parameters.Modulus =
                encoding.GetBytes(""26458340158787140383846156526777567128582042036682248240414722856369310516021"");

            RSA rsa = new RSACryptoServiceProvider();
            rsa.ImportParameters(parameters);

            var decryptThis = encoding.GetBytes(ciphertext);

            var result = rsa.DecryptValue(decryptThis);

            resultString = encoding.GetString(result);

But this chucks the Exception 'Bad data'.
Has anyone more experienced with C# got any ideas where I'm going wrong?
Thanks,
G

Details of context: I am attempting to implement a password strength checking function on both the client and server side of an app, but using only code on the server side. To achieve this on the client side, I want to send the putative password to the server, judge its strength, and then return a score which is displayed on the client. This means I only have to maintain password strength checking code on the server. As an extra security measure, I am encrypting the putative password using the cryptico.js library before sending it to the server to be judged.
","BigInteger and RSAParameter classes store numbers in different format.
BigInteger stores numbers as little-endian - this means that if you create a BigInteger
to hold hex number 0xABCD (43981) - ToByteArray will return bytes {0xCD, 0xAB, 0x00} (more on extra zero later).
RSAParameter was designed to store numbers in big-endian format.
It means that bytes {0xCD, 0xAB, 0x00} written into, for example, Exponent property, will be interpreted
by RSA implementation as number 0xCDAB00 (13478656).
To make matters more complicated - RSAParameters are always positive numbers, while BigInteger supports sign.
and same number, 0xFF - will be interpreted differently. For RSA, it is decimal 255. for BigInteger it means -1,
since it is interpreting most significant bit as a sign. 
This is why zero is added - at construction time, BigInteger is aware that we are passing positive value, 43981.
But storing this value as two bytes would produce negative number (-21555), since highest bit is set for byte 0xCD (11001101 in binary).
So BigInteger adds zero to indicate positive number. Try it yourself:
Console.WriteLine(new BigInteger(new byte[]{0xCD,0xAB}));
Console.WriteLine(BitConverter.ToString(new BigInteger(0xABCD).ToByteArray()));

So, we have large integer passed to us as a decimal string ""1234567..."", and we want to convert it to representation used by RSA.
In order to do this, we would need:

Parse string to BigInteger.
Extract BigInteger bytes.
Make sure BigInteger did not add any leading zeros to compensate sign.
Reverse array back to big endian form, and feed to RSA.

Code (using your parameters):
using System;
using System.Numerics;
using System.Security.Cryptography;
using System.Text;

class App
{
    static void Main()
    {
      var parameters = new RSAParameters();
      parameters.Exponent=B(""3""); 
      parameters.Modulus=B(""8029845567507477803775928519657066509146751167600087041355508603090505634905205233922950527978886894355290423984597739819216469551137046641801207199138209""); 
      parameters.D=B(""5353230378338318535850619013104711006097834111733391360903672402060337089936682996269976597251251223844095913209399106464214877696419418951728015128013411"");
      parameters.P=B(""102067954277225510613941189336789903269738979633396754230261162567549753196947"");
      parameters.Q=B(""78671563708406591396117399809764267229341143260756252277657051641634753921147"");
      parameters.DP=B(""68045302851483673742627459557859935513159319755597836153507441711699835464631"");
      parameters.DQ=B(""52447709138937727597411599873176178152894095507170834851771367761089835947431"");
      parameters.InverseQ=B(""26458340158787140383846156526777567128582042036682248240414722856369310516021"");

      var rsa = new RSACryptoServiceProvider();
      rsa.ImportParameters(parameters);
      var ciphertext = rsa.Encrypt(Encoding.ASCII.GetBytes(""Hello""), false);
      Console.WriteLine(Encoding.ASCII.GetString(rsa.Decrypt(ciphertext, false)));
    }

    static byte[] B(string s)
    {
      var b = BigInteger.Parse(s);
      var ret = b.ToByteArray();
      if (ret[ret.Length - 1] == 0) 
      {
        Array.Resize(ref ret, ret.Length - 1);
      }
      Array.Reverse(ret);
      return ret;
    }
}

","1388","<c#><javascript><public-key-encryption><cryptico>","3","1","1","2015-06-19 08:04:25","15809396","5","2","569976","","2013-12-25 04:47:36","2012-11-30 11:37:29",""
"14133367","OpenSSL hanging when trying to encrypt","I am hoping there is someone here who knows something about OpenSSL. I am completely new to OpenSSL and I'm trying to implement it to encrypt dynamically generated PayPal buttons for a web store. I have a PHP script that does this, however it was not working, so I decided to try to run the command in command prompt and realized that it is hanging when I try to encrypt. 
I have generated a public certificate and a private key and also I have downloaded PayPal's public certificate.
This is the command I tried:
(openssl smime -sign -signer C:\Users\MyName\Desktop\OpenSSLTest\my-pubcert.pem -inkey 
C:\Users\MyName\Desktop\OpenSSLTest\my-prvkey.pem -outform der -nodetach -binary 
C:\Users\MyName\Desktop\OpenSSLTest\DataToEncrypt.txt) | openssl smime -encrypt -des3 
-binary -outform pem C:\Users\MyName\Desktop\OpenSSLTest\paypal_cert.pem

When I run this command I get the following message:
Loading 'screen' into random state -Loading 'screen' into random state -done done

At this point it hangs. Does anyone with any OpenSSL experience know why this is happening to me? Please keep in mind I have never used OpenSSL before so I might be overlooking something simple, which is why I hope someone can point me in the right direction.
I appreciate any suggestions! Thanks!
","You're missing an -in in the first half of the command, which is subsequently trying to read data from standard input (and thus hanging).
The correct command line should be 
openssl smime -sign -signer C:\Users\MyName\Desktop\OpenSSLTest\my-pubcert.pem -inkey 
C:\Users\MyName\Desktop\OpenSSLTest\my-prvkey.pem -outform der -nodetach -binary 
-in C:\Users\MyName\Desktop\OpenSSLTest\DataToEncrypt.txt | openssl smime -encrypt -des3 
-binary -outform pem C:\Users\MyName\Desktop\OpenSSLTest\paypal_cert.pem

Notice the addition of -in to line 3.
Then DataToEncrypt.txt will be correctly read as an input file.
","1387","<openssl><rsa><public-key-encryption><private-key>","1","1","1","2013-01-04 04:09:21","14134136","0","","1676624","","2013-01-04 04:09:21","2013-01-03 05:08:45",""
"32873851","Load a Certificate Using X509Certificate2 with ECC Public Key","This is a newbie question. I'm trying to load a .der certificate using:
X509Certificate2 cert = new X509Certificate2(@""c:\temp\mycert.der"");
RSACryptoServiceProvider csp = (RSACryptoServiceProvider)cert.PublicKey.Key

But I get a ""The certificate key algorithm is not supported"" error on the 2nd line. When I import this certificate to MMC I can see the public key like . 
Is it valid? How do I get it in code?
","Prior to .NET 4.6.1 ECDSA keys were not supported.  For legacy/compatibility reasons (such as your sample here where you're converting to an RSACryptoServiceProvider) the PublicKey.Key property and X509Certificate2.PrivateKey property still cannot ECDSA. There's instead a new, more type-safe, path:
using (ECDsa ecdsa = cert.GetECDsaPublicKey())
{
    if (ecdsa != null)
    {
        // I had to do something with it in this example...
        bool verified = ecdsa.VerifyData(data, signature, HashAlgorithmName.SHA256);
    }
}

","1381","<.net><c#-4.0><.net-4.5><public-key-encryption><x509certificate2>","2","3","1","2016-07-07 00:41:33","","2","","576300","","2015-09-30 19:44:26","2015-09-30 19:08:50",""
"30360353","Signing and verifying with java android","I'm trying to sign an encrypted message with a private key and verify it in Java. This is my first time working with encryption and signatures so I'm not sure how it is supposed to work and I'm kind of stuck here. The verification always returns false.
I am posting the code here with the most important parts included:
import android.util.Base64;
import android.util.Log;

import java.io.UnsupportedEncodingException;
import java.security.InvalidKeyException;
import java.security.KeyFactory;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.NoSuchAlgorithmException;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.SecureRandom;
import java.security.Signature;
import java.security.SignatureException;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.RSAPrivateKeySpec;
import java.security.spec.RSAPublicKeySpec;

public class SignatureTest {

// testing signature
PublicKey javaPublicKey;
PrivateKey javaPrivateKey;

String message = ""Hello world"";


public void test() {

    try {
        GenerateKeys();
        byte[] messageBytes = message.getBytes(""UTF-8"");
        byte[] signature = rsaSign(messageBytes);
        boolean success = rsaVerify(messageBytes, signature);

        if(success){
            Log.e(""yay"", ""yay"");
        }
        else {
            Log.e(""nay"", ""nay"");
        }


    } catch (UnsupportedEncodingException e) {
        e.printStackTrace();
    }

}

public void GenerateKeys() {

    SecureRandom random = null;
    try {
        KeyPairGenerator keyGen = KeyPairGenerator.getInstance(""RSA"");
        random = SecureRandom.getInstance(""SHA1PRNG"");
        keyGen.initialize(1024, random);

        KeyPair pair = keyGen.generateKeyPair();

        javaPrivateKey = pair.getPrivate();
        javaPublicKey = pair.getPublic();

    } catch (NoSuchAlgorithmException e) {
        e.printStackTrace();
    }
}

public byte[] rsaSign (byte[] data) {

    byte[] cipherData = null;

    try {

        Signature s = Signature.getInstance(""SHA1withRSA"");
        s.initSign(javaPrivateKey);

        s.update(data);

        Log.e(""s.sign()"", Base64.encodeToString(s.sign(), Base64.DEFAULT));


        return s.sign();


    } catch (NoSuchAlgorithmException e) {
        e.printStackTrace();
    } catch (InvalidKeyException e) {
        e.printStackTrace();
    } catch (SignatureException e) {
        e.printStackTrace();
    }

    return cipherData;
}

public boolean rsaVerify (byte[] data, byte[] signature) {

    boolean success = false;

    try {

        Signature s = Signature.getInstance(""SHA1withRSA"");
        s.initVerify(javaPublicKey);

        s.update(data);

        success = s.verify(Base64.decode(signature, Base64.DEFAULT));

        if(success == true) {
            Log.i(""yeay"", ""yay"");
        }
        else {
            Log.i(""nay"", ""nay"");
        }

        return success;


    } catch (NoSuchAlgorithmException e) {
        e.printStackTrace();
    } catch (InvalidKeyException e) {
        e.printStackTrace();
    } catch (SignatureException e) {
        e.printStackTrace();
    }

    return false;
}
}

Can anyone tell me what I'm doing wrong here?
","In rsaSign method, do the following after line s.update(data);,
byte[] signature = s.sign();
Log.e(""s.sign()"", Base64.encodeToString(signature , Base64.DEFAULT));    
return signature;

Remember, A call to sign() method resets the signature object to the state it was in when previously initialized for signing via a call to initSign(PrivateKey). That is, the object is reset and available to generate another signature from the same signer, if desired, via new calls to update and sign.
Now, in the rsaVerify method, replace the line 
success = s.verify(Base64.decode(signature, Base64.DEFAULT));
 with,
success = s.verify(signature);
","1380","<java><android><rsa><digital-signature><public-key-encryption>","1","2","1","2015-05-21 06:50:53","30366488","5","1","","","","2015-05-20 21:05:57",""
"21173185","extracting key for authorized_keys key from ssh2 public key in python","I am trying to extract the needed key for the authorized_keys file. It is different than what i get when i open the key file (.pub).  This is my code so far. Whenever I try to run it on a pubfile i get an invalid syntax pointing to SSH2 in the first line of the file. ""---- BEGIN SSH2 PUBLIC KEY ----"" I don't know why this isn't working. Thanks in advance for any help
#!/bin/env python

import fileinput
import subprocess
import sys



def parse_pubkey( pubfile ):
    """"""This routine returns the key-type and key from a public-key file.
    """"""
    try:
        # try to parse the Windows-format file into an OpenSSH-compatible representation
        # by calling the Unix ""ssh-keygen"" utility. This call will fail if the keyfile
        # is already in OpenSSH format
        keystr = subprocess.check_output( 'ssh-keygen -i -f %s 2>/dev/null' % pubfile,    shell=True )

    except subprocess.CalledProcessError:
        # we caught an exception, so the file must already be in OpenSSH format.  Just
        # read in the contents
        keystr = open( pubfile, 'r' ).read()

    # now split the resulting string on whitespace and return the first two fields
    return keystr.split()[0:2]


parse_pubkey(pubfilename.pub)

","Here's my rewrite of your code, sans comments:
#!/usr/bin/env python

import subprocess
import sys

def parse_pubkey(pubfile):
    """"""Return the key-type and key from a public-key file.
    """"""
    try:
        keystr = subprocess.check_output(
            'ssh-keygen -i -f %s 2>/dev/null' % pubfile,
            shell=True)
    except subprocess.CalledProcessError:
        with open(pubfile) as f:
            keystr = f.read()
    return keystr.split()[0:2]

if __name__ == '__main__':
    pubfilename = sys.argv[1]
    print parse_pubkey(pubfilename)

Assuming the module was named parsepub.py, it would be executed thus:

$ python parsepub.py id_rsa.pub

","1376","<python><public-key-encryption><public-key><authorized-keys>","0","1","1","2014-01-17 02:33:19","","3","","","user3204233","2014-01-16 22:34:58","2014-01-16 21:24:25",""
"14577120","Using Java to Encrypt a private key","I have a generated a private key using CertAndKeyGen class. Now I want to encrypt the private key with a password and use it as key while starting PostgreSQL server. Can some one please help me with java code to encrypt the private key, where googling dint help me out. Below is my code I use to generate Private Key.
    CertAndKeyGen keypair = new CertAndKeyGen(""RSA"", ""SHA1WithRSA"", null);
    PrivateKey privKey = keypair.getPrivateKey();

Any help or suggestion will be really appreciated.
","public class KeyEncryptExample {

    public static void main(String[] args) {
        try {
            String key = ""mariahussain""; // needs to be at least 8 characters for DES

            FileInputStream fis = new FileInputStream(""C:/Users/hussain.a/Desktop/original.txt"");
            FileOutputStream fos = new FileOutputStream(""C:/Users/hussain.a/Desktop/encrypted.txt"");
            encrypt(key, fis, fos);

            FileInputStream fis2 = new FileInputStream(""C:/Users/hussain.a/Desktop/encrypted.txt"");
            FileOutputStream fos2 = new FileOutputStream(""C:/Users/hussain.a/Desktop/decrypted.txt"");
            decrypt(key, fis2, fos2);
        } catch (Throwable e) {
            e.printStackTrace();
        }
    }

    public static void encrypt(String key, InputStream is, OutputStream os) throws Throwable {
        encryptOrDecrypt(key, Cipher.ENCRYPT_MODE, is, os);
    }

    public static void decrypt(String key, InputStream is, OutputStream os) throws Throwable {
        encryptOrDecrypt(key, Cipher.DECRYPT_MODE, is, os);
    }

    public static void encryptOrDecrypt(String key, int mode, InputStream is, OutputStream os) throws Throwable {

        DESKeySpec dks = new DESKeySpec(key.getBytes());
        SecretKeyFactory skf = SecretKeyFactory.getInstance(""DES"");
        SecretKey desKey = skf.generateSecret(dks);
        Cipher cipher = Cipher.getInstance(""DES""); // DES/ECB/PKCS5Padding for SunJCE

        if (mode == Cipher.ENCRYPT_MODE) {
            cipher.init(Cipher.ENCRYPT_MODE, desKey);
            CipherInputStream cis = new CipherInputStream(is, cipher);
            doCopy(cis, os);
        } else if (mode == Cipher.DECRYPT_MODE) {
            cipher.init(Cipher.DECRYPT_MODE, desKey);
            CipherOutputStream cos = new CipherOutputStream(os, cipher);
            doCopy(is, cos);
        }
    }

    public static void doCopy(InputStream is, OutputStream os) throws IOException {
        byte[] bytes = new byte[64];
        int numBytes;
        while ((numBytes = is.read(bytes)) != -1) {
            os.write(bytes, 0, numBytes);
        }
        os.flush();
        os.close();
        is.close();
    }

}

","1367","<java><ssl><x509certificate><public-key-encryption><private-key>","0","0","1","2013-01-29 06:51:00","14577215","2","2","","","","2013-01-29 06:44:09","2013-05-16 08:22:40"
"52224818",".net core PGP Encryption Decryption","Running into error on the void Encryption().
public void Encryption()
{
    #region PGP Encryption 

    PgpEncryptionKeys encryptionKeys = new PgpEncryptionKeys(@""C:\Keys\PGPPublicKey.asc"", @""C:\Keys\PGPPrivateKey.asc"", ""password"");
    PgpEncrypt encrypter = new PgpEncrypt(encryptionKeys);
    using (Stream outputStream = File.Create(""C:\\Keys\\EncryptData.txt""))
    {
        encrypter.EncryptAndSign(outputStream, new FileInfo(@""D:\Keys\PlainText.txt""));
    }
    Console.WriteLine(""Encryption Done !"");

    #endregion
}

I used https://code.msdn.microsoft.com/vstudio/Pretty-Good-Privacy-using-4f473c67
as a reference. 
I am confused about the parameters in the PgpEncryptionKeys.
Does anyone have a working example or help? this is my first time encrypting so i a little lost. 
","I'm using by this way:
I think can help you!
Helper:
public static void EncryptPgpFile(string inputFile, string outputFile, string publicKeyFile, bool armor, bool withIntegrityCheck)
{
    using (Stream publicKeyStream = File.OpenRead(publicKeyFile))
    {
        PgpPublicKey pubKey = ReadPublicKey(publicKeyStream);

        using (MemoryStream outputBytes = new MemoryStream())
        {
            PgpCompressedDataGenerator dataCompressor = new PgpCompressedDataGenerator(CompressionAlgorithmTag.Zip);
            PgpUtilities.WriteFileToLiteralData(dataCompressor.Open(outputBytes), PgpLiteralData.Binary, new FileInfo(inputFile));

            dataCompressor.Close();
            PgpEncryptedDataGenerator dataGenerator = new PgpEncryptedDataGenerator(SymmetricKeyAlgorithmTag.Cast5, withIntegrityCheck, new SecureRandom());

            dataGenerator.AddMethod(pubKey);
            byte[] dataBytes = outputBytes.ToArray();

            using (Stream outputStream = File.Create(outputFile))
            {
                if (armor)
                {
                    using (ArmoredOutputStream armoredStream = new ArmoredOutputStream(outputStream))                   
                    using (Stream outputStream = dataGenerator.Open(armoredStream, dataBytes.Length))
                        outputStream.Write(dataBytes, 0, dataBytes.Length);
                }
                else
                {
                    using (Stream outputStream = dataGenerator.Open(armoredStream, dataBytes.Length))
                        outputStream.Write(dataBytes, 0, dataBytes.Length);
                }
            }
        }
    }
}

private static PgpPublicKey ReadPublicKey(Stream inputStream)
{
    inputStream = PgpUtilities.GetDecoderStream(inputStream);
    PgpPublicKeyRingBundle pgpPub = new PgpPublicKeyRingBundle(inputStream);

    foreach (PgpPublicKeyRing keyRing in pgpPub.GetKeyRings())
    {
        foreach (PgpPublicKey key in keyRing.GetPublicKeys())
        {
            if (key.IsEncryptionKey)
                return key;
        }
    }

    throw new ArgumentException(""Can't find encryption key in key ring."");
}

Usage:
EncryptPgpFile(inputFile, outputFile, publicKeyPath, true, true);

","1364","<c#><encryption><bouncycastle><public-key-encryption><pgp>","1","0","1","2018-09-07 17:02:16","52225778","0","","3279247","","2018-09-07 17:02:16","2018-09-07 14:38:37",""
"13318328","How to check if a public key matches with a private key?","I am using Java, and KeyStore.
I have a public key and private key pair in the KeyStore.
When I read a certificate, and get the public key from the certificate.
How do I know if the public key in the certificate matches with the private key in the key store?
","
I have a public key and private key pair in the KeyStore.
How do I know if the public key in the certificate matches with the private key in the key store?

Since the Keystore contains pairs, you look for the pair that has the same public key as the certificate.
Of course that is just the first step.  Next you (or more likely, the PKI library) needs to use the private key to check the certificate's signature.
","1358","<java><keystore><public-key-encryption>","2","1","1","2012-11-10 02:23:27","","1","","","","","2012-11-10 01:25:37",""
"16891370","Certificate authority public key vs man in the middle attack","As I understand, the root of SSL security is based on the public key of certificate authority. And I don't know why this key can be faked by a man in the middle:
The man in the middle received this CA public key but then sends me a public key and fake certificate of his own and pretends that it is valid. I use this key to compute the certificate signature to verify it but if this key is fake, how can I know certificate is not from a trusted source?
","In order for any PKI to work, each party should have a list of public keys for CA they trust. These keys have been obtained out of band, securely, from a software vendor.
The SSL certificate (containing the SSL server's public key) received from the server is signed by the private key of one of AC. There is no way to forge a valid certificate without access to one of the CA's private key, so the man in the middle can not send a forged one that  will look valid.
The is two things that we need trust in order to use PKI :
1/ that we can securely retrieve the CA's public keys
2/ that the CA won't mess up by signing forged certificates or by getting their keys stolen.
","1349","<ssl-certificate><public-key-encryption>","0","1","1","2015-02-16 11:45:23","16895144","0","","","","","2013-06-03 06:49:35",""
"15398628","Android: Public Key initialization","I want to initialize a PublicKey with a String such as 23441AB…2583DA==
PublicKey publicKey=null;
Cipher publicKeyCipher = Cipher.getInstance(""RSA/ECB/PKCS1PADDING"");
publicKeyCipher.init(Cipher.ENCRYPT_MODE, publicKey);

When I pass an empty key I get the following exception:

java.security.InvalidKeyException: unknown key type passed to RSA

Even if I pass a Key publicKey, says that the key type is unknown.
I have seen that the proper way to initialize a PublicKey is: 
kpg = KeyPairGenerator.getInstance(""RSA"");
kpg.initialize(1024);
kp = kpg.genKeyPair();
publicKey = kp.getPublic();

But I don't want a random key, I want the key from a specific String.
EDIT: I have found the way to convert an array of bytes to a PublicKey, but I am still getting an exception.
I want to initialize a PublicKey with a publicKey String that stores its encoded format: [B@41588dd0. It is already decoded from Base64. The PublicKey was created with RSA and initialized with 128 bits.
byte [] pkArray=publicKey.getBytes();
X509EncodedKeySpec pubKeySpec = new X509EncodedKeySpec(pkArray);
KeyFactory keyFactory = KeyFactory.getInstance(""RSA"");
PublicKey pKey =keyFactory.generatePublic(pubKeySpec); //get the exception here
Cipher publicKeyCipher = Cipher.getInstance(""RSA/ECB/PKCS1PADDING"");
publicKeyCipher.init(Cipher.ENCRYPT_MODE, publicKey);

When I pass the EncodedKeySpec I get the following exception:

java.security.InvalidKeySpecException: java.io.EOFException: DEF length 66 object truncated by 57

","","1347","<android><public-key-encryption><x509><encryption>","1","","0","2013-09-23 13:32:36","","2","4","2080762","","2013-03-26 21:41:32","2013-03-13 23:41:56",""
"21151962","I understand the mathematics of RSA encryption: How are the files in ~/.ssh related to the theory?","I went through the math in the ""worked example"" in the RSA wiki page: https://en.wikipedia.org/wiki/RSA_(algorithm) and understood it entirely. For the remainder of this question, I will use math variables consistent with the wiki page.
I'm on a Unix machine and I'm looking in the ~/.ssh directory and I see all these files
id_rsa
id_rsa.pub

and I want to connect the theory with the practice.
What exactly is in id_rsa? If I cat it
cat id_rsa

I get a big jumble of characters.  Is this some representation the number n = pq?  What representation is it exactly? base 64? If so, then is id_rsa.pub suppose to be some representation of the numbers e and n?
In general, I'm trying to connect the theory of RSA with the actual practice as implemented through the ssh program on Unix machines.  Any answers or pointers to the right direction would be greatly appreciated.
","id_rsa is a base64-encoded DER-encoded string. The ASN.1 syntax for that DER-encoded string is described in RFC3447 (aka PKCS1):
  Version ::= INTEGER { two-prime(0), multi(1) }
      (CONSTRAINED BY
      {-- version must be multi if otherPrimeInfos present --})

  RSAPrivateKey ::= SEQUENCE {
      version           Version,
      modulus           INTEGER,  -- n
      publicExponent    INTEGER,  -- e
      privateExponent   INTEGER,  -- d
      prime1            INTEGER,  -- p
      prime2            INTEGER,  -- q
      exponent1         INTEGER,  -- d mod (p-1)
      exponent2         INTEGER,  -- d mod (q-1)
      coefficient       INTEGER,  -- (inverse of q) mod p
      otherPrimeInfos   OtherPrimeInfos OPTIONAL
  }

DER encoding uses a tag-length-value notation. So here's a sample private key:
-----BEGIN RSA PRIVATE KEY-----
MIICXAIBAAKBgQCqGKukO1De7zhZj6+H0qtjTkVxwTCpvKe4eCZ0FPqri0cb2JZfXJ/DgYSF6vUp
wmJG8wVQZKjeGcjDOL5UlsuusFncCzWBQ7RKNUSesmQRMSGkVb1/3j+skZ6UtW+5u09lHNsj6tQ5
1s1SPrCBkedbNf0Tp0GbMJDyR4e9T04ZZwIDAQABAoGAFijko56+qGyN8M0RVyaRAXz++xTqHBLh
3tx4VgMtrQ+WEgCjhoTwo23KMBAuJGSYnRmoBZM3lMfTKevIkAidPExvYCdm5dYq3XToLkkLv5L2
pIIVOFMDG+KESnAFV7l2c+cnzRMW0+b6f8mR1CJzZuxVLL6Q02fvLi55/mbSYxECQQDeAw6fiIQX
GukBI4eMZZt4nscy2o12KyYner3VpoeE+Np2q+Z3pvAMd/aNzQ/W9WaI+NRfcxUJrmfPwIGm63il
AkEAxCL5HQb2bQr4ByorcMWm/hEP2MZzROV73yF41hPsRC9m66KrheO9HPTJuo3/9s5p+sqGxOlF
L0NDt4SkosjgGwJAFklyR1uZ/wPJjj611cdBcztlPdqoxssQGnh85BzCj/u3WqBpE2vjvyyvyI5k
X6zk7S0ljKtt2jny2+00VsBerQJBAJGC1Mg5Oydo5NwD6BiROrPxGo2bpTbu/fhrT8ebHkTz2epl
U9VQQSQzY1oZMVX8i1m5WUTLPz2yLJIBQVdXqhMCQBGoiuSoSjafUhV7i1cEGpb88h5NBYZzWXGZ
37sJ5QsW+sJyoNde3xH8vdXhzU7eT82D6X/scw9RZz+/6rCJ4p0=
-----END RSA PRIVATE KEY-----

Here's the hex encoding:
3082025c02010002818100aa18aba43b50deef38598faf87d2ab634e4571c130a9bca7b878267414
faab8b471bd8965f5c9fc3818485eaf529c26246f3055064a8de19c8c338be5496cbaeb059dc0b35
8143b44a35449eb264113121a455bd7fde3fac919e94b56fb9bb4f651cdb23ead439d6cd523eb081
91e75b35fd13a7419b3090f24787bd4f4e196702030100010281801628e4a39ebea86c8df0cd1157
2691017cfefb14ea1c12e1dedc7856032dad0f961200a38684f0a36dca30102e2464989d19a80593
3794c7d329ebc890089d3c4c6f602766e5d62add74e82e490bbf92f6a482153853031be2844a7005
57b97673e727cd1316d3e6fa7fc991d4227366ec552cbe90d367ef2e2e79fe66d26311024100de03
0e9f8884171ae90123878c659b789ec732da8d762b26277abdd5a68784f8da76abe677a6f00c77f6
8dcd0fd6f56688f8d45f731509ae67cfc081a6eb78a5024100c422f91d06f66d0af8072a2b70c5a6
fe110fd8c67344e57bdf2178d613ec442f66eba2ab85e3bd1cf4c9ba8dfff6ce69faca86c4e9452f
4343b784a4a2c8e01b0240164972475b99ff03c98e3eb5d5c741733b653ddaa8c6cb101a787ce41c
c28ffbb75aa069136be3bf2cafc88e645face4ed2d258cab6dda39f2dbed3456c05ead0241009182
d4c8393b2768e4dc03e818913ab3f11a8d9ba536eefdf86b4fc79b1e44f3d9ea6553d55041243363
5a193155fc8b59b95944cb3f3db22c9201415757aa13024011a88ae4a84a369f52157b8b57041a96
fcf21e4d058673597199dfbb09e50b16fac272a0d75edf11fcbdd5e1cd4ede4fcd83e97fec730f51
673fbfeab089e29d

The 30 is because it's a SEQUENCE tag. The 82025c represents the length. The first byte means the length is of the ""long form"" (82 & 80) and that the next two bytes represent the length (82 & 7F). So the actual length of the SEQUENCE is 025c. So after that is the value.
Then you get to the version. 02 is of type int, 01 is the tag length and 00 is the value. ie. it's a two-prime key as opposed to a multi-prime key.
More info on the Distinguished Encoding Rules.
Trying to understand ASN.1 is a lot more complicated and a lot of it, for the purpose of understanding the formatting of RSA private keys, is unnecessary. For X.509 it becomes more necessary but RSA keys aren't nearly as complicated, formatting-wise, as X.509 certs.
Hope that helps!
","1347","<ssh><rsa><public-key-encryption>","4","5","1","2017-06-09 23:32:15","21289989","1","1","1952109","","2014-01-16 01:57:11","2014-01-16 01:46:55",""
"7563732","What is the best way to encode string by public-key in python","Is there any way to encode string by public-key?
I found two packages, pycrypto and m2crypto.
But I can not find how to use them.
","To encode a string using public key:
#!/usr/bin/env python 
from M2Crypto import RSA, X509

x509 = X509.load_cert(""recipient_cert.pem"")
rsa = x509.get_pubkey().get_rsa()
print rsa.public_encrypt(""your string to encrypt"", RSA.pkcs1_oaep_padding)

","1344","<python><public-key-encryption><private-key><pycrypto>","0","1","1","2016-11-12 21:22:17","","4","0","520771","","2011-09-27 05:46:09","2011-09-27 02:59:16",""
"22881211","CertFindCertificateInStore fails to load self-signed certificates generated on different machine","I'm trying to load a self-signed certificate generated on a different host and imported to my machine. Cert has been imported and shows up in mmc correctly. But CertFindCertificateInStore fails to load, when searched through SHA1 thumbprint.
Here's code:
const LPWSTR    certThumbprint   = L""2af92932d0164f52b20b1ccfdf0e1e4d525fbc08"";

CryptStringToBinary(certThumbprint, SHA1_HASH_STRING_LENGTH,  CRYPT_STRING_HEXRAW,    NULL, &dwHashDataLength, NULL,NULL);

pHashData = new BYTE[dwHashDataLength];

CryptStringToBinary(certThumbprint,SHA1_HASH_STRING_LENGTH,CRYPT_STRING_HEXRAW,pHashData,&dwHashDataLength,NULL, NULL);

hashBlob.cbData = dwHashDataLength;
hashBlob.pbData = pHashData;

if ( !(pCertContext = CertFindCertificateInStore(
    hSystemCertStore,
    X509_ASN_ENCODING | PKCS_7_ASN_ENCODING,
    0,
    CERT_FIND_SHA1_HASH,
    &hashBlob,
    NULL)))
{
    printf(""\n finding cert in system store failed: %d \n"", GetLastError());
    exit(-1);
}

","","1342","<c++><c><certificate><public-key-encryption><crypt>","4","","0","2014-04-05 13:03:12","","1","2","3501161","","2014-04-05 13:03:12","2014-04-05 12:57:58",""
"52576412","How to encypt username and password in flutter","am trying to implement phone_number and password encryption in flutter. after have tried to encrypt the jsonbody ""(
    var rBody = jsonEncode({ 'Request': encryptor.encrypt(requestBody.toString())});"" and then run the app am still unable to transmit the request to my remote server(which requires all requests to be encrypted with AES). Can someone with experience on this show me the best way to do this. such that the password and phone are encrypted effectively.
import 'dart:async';
import 'dart:convert';
import 'package:encrypt/encrypt.dart';
import 'package:http/http.dart' as http;



  Future<http.Response> post() async {
var url = 'http:xxxxxxxpostRequest';
String password = ""xxxxxxx"";//url password
String username = ""xxxxx"";//access username

var bytes = utf8.encode(""$username:$password"");


var credentials = base64.encode(bytes);
var headers = {
  ""Content-Type"": ""application/json"",
  ""Authorization"": ""Basic $credentials""
};

var requestBody = jsonEncode({ 'phone': _phone, 'pin': _pass});

final key = """";// encryption key
final iv= """";

final encryptor=new Encrypter(new Salsa20(key, iv));


var rBody = jsonEncode({ 'Request': encryptor.encrypt(requestBody.toString())});


http.Response response = await http.post(
    url, body: rBody, headers: headers);
var responseJson = json.decode(response.body);
print(Utf8Codec().decode(response.bodyBytes));

print(""Body: "" + responseJson);

}
//This is my console response
E/flutter (24909): [ERROR:topaz/lib/tonic/logging/dart_error.cc(16)] Unhandled exception:
E/flutter (24909): type 'ParametersWithIV' is not a subtype of type 'ParametersWithIV'
E/
","The encrypt package isn't well maintained, so use the pointy castle package. (Use pointycastle: ^1.0.0-rc3.)
Your question isn't clear about how you are going to:

derive the key material from the strings provided
convert the plaintext to bytes
convert the cipher text back to something you can include in json

They could be encoded in hex or base64 perhaps. Your server team should be able to specify what they want.
Here's example code to encrypt in AES/CBC/PKCS7.
import 'dart:convert';
import 'dart:typed_data';

import 'package:pointycastle/api.dart';
import 'package:pointycastle/padded_block_cipher/padded_block_cipher_impl.dart';
import 'package:pointycastle/paddings/pkcs7.dart';
import 'package:pointycastle/block/aes_fast.dart';
import 'package:pointycastle/block/modes/cbc.dart';

main() {
  //final key = 'dxxxxxxxxxxeX';
  //final iv = '_Vxxxxxxxxxx1';

  // TODO - convert the key and IV to bytes
  // dummy key and IV values
  Uint8List key = Uint8List.fromList(
    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],
  );
  Uint8List iv = Uint8List.fromList(
    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16],
  );

  // TODO - convert the plaintext to bytes
  // example - just utf8 encode it
  Uint8List plainText = Uint8List.fromList(utf8.encode('some plain text'));

  PaddedBlockCipher cipher = PaddedBlockCipherImpl(
    PKCS7Padding(),
    CBCBlockCipher(AESFastEngine()),
  );

  cipher.init(
    true,
    PaddedBlockCipherParameters<CipherParameters, CipherParameters>(
      ParametersWithIV<KeyParameter>(KeyParameter(key), iv),
      null,
    ),
  );
  Uint8List cipherText = cipher.process(plainText);
  // TODO - convert the cipher text to a String to include as the 'Request' param
}

PS Don't forget that it's insecure to reuse the same IV more than once.
","1338","<encryption><flutter><public-key-encryption><password-encryption><flutter-dependencies>","2","0","1","2018-09-30 20:03:04","","6","","10311469","","2018-09-30 19:00:41","2018-09-30 09:06:01",""
"27555557","Opening encrypted emails with c#","I'm working in Visual Studio 2012 to build a relatively simple add-in for Outlook 2010.  Machines are Win 7 Enterprise 32 and 64.  The purpose of the add-in is to decrypt email messages directly in the user's inbox so that they can be easily searched in .pst archives or saved to network folders as .msg files unencrypted.  The emails are encrypted using the x.509 PKI with the private keys stored on a smart card which prompts the user for a PIN each time an encrypted email is opened.  This is what I have so far:
private void buttonDecrypt_Click(object sender, RibbonControlEventArgs e)    {
  currentExplorer = Globals.ThisAddIn.Application.ActiveExplorer();
  if (currentExplorer.Selection.Count > 0)      {
    for (int i = 0; i < currentExplorer.Selection.Count; i++)        {
      Object selObject = currentExplorer.Selection[i+1];
      if (selObject is Microsoft.Office.Interop.Outlook.MailItem)          {
        Microsoft.Office.Interop.Outlook.MailItem mailItem = 
          (selObject as Microsoft.Office.Interop.Outlook.MailItem);      
        mailItem.PropertyAccessor.SetProperty(""http://schemas.microsoft.com/mapi/proptag/0x6E010003"", 0);
        mailItem.Save();
      }                    
    }                
  }
}

If I manually open an encrypted email in Outlook, I get prompted for my PIN which allows the email to open fine.  Then if I close the email and hit my new button on the ribbon it does exactly what I want by re-saving the email unencrypted directly in my inbox.  However, if I select more than one email at once, or don't open the message manually first, my code errors on mailItem.PropertyAccessor.Setproperty() with message COMException was unhandled by user code: Your Digital ID name cannot be found by the underlying security system.  This tells me I need a way to prompt the user for their PIN prior to attempting to open the email.
","I don't think there is much you can do using the Outlook Object Model alone. OOM tries very hard to represent signed or encrypted messages as regular IPM.Note items. It goes as far as exposing a fake IMessage MAPI object from the MailItem.MAPIOBJECT property.
When you set the PR_SECURITY_FLAGS property, Outlook knows to decrypt the message. There is no way to specify how the decryption will be done or provide any parameters. That property is nothing but a hack to encrypt / decrypted Outlook messages; it only works when the property is set using MailItem.PropertyAccessor.
Ultimately what you need is the data from the P7M attachment stored by the encrypted/signed message. You can see this in OutlookSpy: if you click the IMessage button on the OutlookSpy toolbar (it uses MailItem.MAPIOBJECT), you will see the regular decrypted message. But if you click the IMAPISecureMesage in the IMessage window or open the message from the IMAPIFolder | GetContentsTable tab, you will see the raw encrypted message and its P7M attachment.
To extract that attachment, you will need either Extended MAPI (C++ or Delphi) or a wrapper like Redemption (use RDOSession.GetMessageFromID). Redemption also exposes the RDOEncryptedMesage object that can be used for decryption .
","1331","<c#><email><outlook-addin><public-key-encryption>","4","1","1","2015-12-04 02:26:16","27557104","4","","325727","","2015-12-04 02:26:16","2014-12-18 20:57:46",""
"14220340","How to read RSA public and private keys into single RSA struct?","What I'm trying to do is generate random RSA keys and then store them before my program terminates.  This part is working just fine using RSA_generate_key, PEM_write_bio_RSAPrivateKey and PEM_write_bio_RSA_PUBKEY.  I can also encrypt/decrypt just find using the RSA structure returned by RSA_generate_key.  
However, my problem comes when my program restarts and I want to read back in the keys that I stored previously.  I can use PEM_read_bio_RSAPrivateKey and PEM_read_bio_RSA_PUBKEY to pull the keys in, but I need to get them into the same RSA structure, similar to how they are stored by RSA_generate_key.
My code is shown below.  I have the keys stored in memory along with a small header that tell me how large the keys are.  The private key start right after the header and the public key is stored right after the private key.
privateKey = (uint8_t *) ( buffer + rsaStruct->hdrSize );
publicKey = (uint8_t *) ( privateKey + rsaStruct->privateKeyLength );

bioPrivate = BIO_new_mem_buf( (void *) privateKey, rsaStruct->privateKeyLength );
bioPublic = BIO_new_mem_buf( (void *) publicKey, rsaStruct->publicKeyLength );

bioPrivate = BIO_new_mem_buf( (void *) privateKey, rsaStruct->privateKeyLength + rsaStruct->publicKeyLength );
if( bioPrivate == NULL || bioPublic == NULL ) {
    fprintf( stderr, ""%s: BIO_new_mem_buf failed!\n"", __FUNCTION__ );
    return ECE_RSA_ERROR_BIO_CREATION_FAILED;
}

PEM_read_bio_RSAPrivateKey( bioPrivate, &keyPair, NULL, NULL );
PEM_read_bio_RSA_PUBKEY( bioPublic, &keyPair, NULL, NULL );

BIO_free( bioPrivate );
BIO_free( bioPublic );

If I try to just send in the same RSA structure, it doesn't seem to work.  I'm able to encrypt just fine, but my decryption fails.  This could likely be due to the fact that the public key is the last key retrieve and the one used for encryption.  If the second call over-writes the address of my RSA struct, I would end up with an RSA structure that has nothing but the public key.
Anyway, if anyone could tell me how to get both the public and private key into the same RSA structure, that would be great!
","Comparing to RSA private key, public key additionaly contains only the public exponent. So just copy it from public key to private key structure, and everything should work.
","1331","<c++><c><openssl><rsa><public-key-encryption>","3","0","1","2013-01-08 19:23:21","14222513","0","","","","","2013-01-08 17:07:03",""
"28467199","Delete public key from Private for Private key storage with GPG","I'm trying to make a paper based backup of a 4092 bit secret/private PGP key using a QR code generator, but the key is just too big. I'm going to go low tech here and split it into two pieces, but perhaps I don't need to. I know that when exporting the secret key, it also exports the public key embedded within it. 
Is there any way to remove the public portion of the key from that file, or prior to exporting, so that the resulting file is only the private key?
I'm not certain the resulting file will be small enough still, but it is worth a shot.
D:\Users\tharding>gpg --edit-key ""04EAC14C""
gpg (GnuPG) 2.0.26; Copyright (C) 2013 Free Software Foundation, Inc.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Secret key is available.

pub  4096R/04EAC14C  created: 2015-02-11  expires: never       usage: SCE
                     trust: unknown       validity: unknown
[ unknown] (1). Timothy Harding <hardingt@gmail.com>

gpg> key 1
No subkey with index 1

gpg> delkey
You must select at least one key.

gpg> delkey 0
You must select at least one key.

Update:
From what I can tell, (looking at the ASCII Armored output for both the public key and the private key) it looks like they are structured this way:

Update 2:
Looked at the files again, and this is what I've got, I haven't pulled out a hex editor yet to verify the non armored files, but I've found surprisingly little help online about how these key files are internally structured:
-----BEGIN PGP PUBLIC KEY BLOCK-----
Version: 

4    header chars ??
1517 pub key chars
4    footer chars ??
-----END PGP PUBLIC KEY BLOCK-----

and
-----BEGIN PGP PRIVATE KEY BLOCK-----
Version:

4    different header chars from pub key ??
700  pub key chars
1772 private key chars (possibly some header/footer to do with the symmetric cipher)
817  pub key chars (same total 1517, exact same ASCII sequence if put together)
4    different footer chars from pub key ??
-----END PGP PRIVATE KEY BLOCK-----

Update 3:
Took a look at the binary pub/private keys and found that:

public key is 1138 bytes


4 unique bytes
1134 bytes found in private key as well

private key is 2467 bytes


4 unique bytes
524 of which are found verbatim in the public key
1329 of which are unique to the private key
38 bytes which are found verbatim in the public key (key name & Email address)
572 bytes which are found verbatim in the public key


","There is a program called Paperkey[1], written by David Shaw[2], that extracts only the private key information from an exported OpenPGP private key.
Excerpt from the package description:

extract just the secret information out of OpenPGP secret keys

The Paperkey page has a version already built for Windows 32bit, and provides the source to compile on Linux, Unix, *BSD and OSX.
Paperkey is also available via the package manager on some Linux/BSD distributions.
Example package manager installs -
apt (debian) -
apt-get install paperkey

yum (redhat)
yum install paperkey

pkg (bsd)
pkg install paperkey

ports (bsd)
cd /usr/ports/security/paperkey
make install clean

","1324","<qr-code><public-key-encryption><gnupg><pgp><openpgp>","3","2","1","2015-04-26 17:21:51","","3","4","2012837","","2015-02-12 05:14:25","2015-02-12 00:27:36",""
"5648902","n-Party Public Key Cryptography","While 2-party public key cryptography is very well laid out in .net framework going n-party concerns me a lot. For instance securing a two-party video-conf. communication is quite easy:
1) Each party generate session specific RSA key pairs and get their public-keys signed by a trusted authority (i.e. a trusted server).
2) Eachy party exchange keys using ECDiffieHellmanCng thus the connection is now both authentic and secure (thinking that they use Vista/W7).
Now adding a 3rd participant to this communication will not work because key exchange algorithms are designed to derive a shared secret from 2 public keys only (especially using .NET and BouncyCastle). So the question is, how would you go about implementing a n-party public key cryptography schema which is still authentic (i.e. resistant to man in the middle attack) and secure (i.e. secure from eavesdropping).
Edit: Currently the ideas are as below, I'll go ahead and implement the most popular one as a part of the NBusy.Communicator library:

Use a two-party communication scheme where one party acts as a federation server.
Initiate a two-party communication and let one party to authenticate third-parties and share the secret/symmetric key.
Use Multi-Party Key Agreement Scheme.

Edit2: I'm going with the ""n-Party Diffie Hellman"" algorithm, similar to the one described here but with some modifications: http://www.codeproject.com/KB/cs/diffy_helman.aspx
","I believe the reason it has not been implemented yet, is because there is no need for it. Most security schemes work on a point to point basis where there are two parties. If there are more than 2 parties it is usually implemented as 2 two-party communication where one party works as a Federation.
","1321","<c#><security><encryption><rsa><public-key-encryption>","5","3","3","2011-04-25 22:46:54","5654147","1","0","628273","","2011-04-25 22:45:46","2011-04-13 12:06:14",""
"5648902","n-Party Public Key Cryptography","While 2-party public key cryptography is very well laid out in .net framework going n-party concerns me a lot. For instance securing a two-party video-conf. communication is quite easy:
1) Each party generate session specific RSA key pairs and get their public-keys signed by a trusted authority (i.e. a trusted server).
2) Eachy party exchange keys using ECDiffieHellmanCng thus the connection is now both authentic and secure (thinking that they use Vista/W7).
Now adding a 3rd participant to this communication will not work because key exchange algorithms are designed to derive a shared secret from 2 public keys only (especially using .NET and BouncyCastle). So the question is, how would you go about implementing a n-party public key cryptography schema which is still authentic (i.e. resistant to man in the middle attack) and secure (i.e. secure from eavesdropping).
Edit: Currently the ideas are as below, I'll go ahead and implement the most popular one as a part of the NBusy.Communicator library:

Use a two-party communication scheme where one party acts as a federation server.
Initiate a two-party communication and let one party to authenticate third-parties and share the secret/symmetric key.
Use Multi-Party Key Agreement Scheme.

Edit2: I'm going with the ""n-Party Diffie Hellman"" algorithm, similar to the one described here but with some modifications: http://www.codeproject.com/KB/cs/diffy_helman.aspx
","(Just thinking out loud)
You don't need a (complete) mesh of secure relations. 
The point of the PK+Certificate is to distribute a symmetric key. 
Any new participant only needs to establish identities with 1 existing node and can then get a copy of that symm key.
","1321","<c#><security><encryption><rsa><public-key-encryption>","5","4","3","2011-04-25 22:46:54","5654147","1","0","628273","","2011-04-25 22:45:46","2011-04-13 12:06:14",""
"5648902","n-Party Public Key Cryptography","While 2-party public key cryptography is very well laid out in .net framework going n-party concerns me a lot. For instance securing a two-party video-conf. communication is quite easy:
1) Each party generate session specific RSA key pairs and get their public-keys signed by a trusted authority (i.e. a trusted server).
2) Eachy party exchange keys using ECDiffieHellmanCng thus the connection is now both authentic and secure (thinking that they use Vista/W7).
Now adding a 3rd participant to this communication will not work because key exchange algorithms are designed to derive a shared secret from 2 public keys only (especially using .NET and BouncyCastle). So the question is, how would you go about implementing a n-party public key cryptography schema which is still authentic (i.e. resistant to man in the middle attack) and secure (i.e. secure from eavesdropping).
Edit: Currently the ideas are as below, I'll go ahead and implement the most popular one as a part of the NBusy.Communicator library:

Use a two-party communication scheme where one party acts as a federation server.
Initiate a two-party communication and let one party to authenticate third-parties and share the secret/symmetric key.
Use Multi-Party Key Agreement Scheme.

Edit2: I'm going with the ""n-Party Diffie Hellman"" algorithm, similar to the one described here but with some modifications: http://www.codeproject.com/KB/cs/diffy_helman.aspx
","It seems to me that a ""Multi-Party Key Agreement Scheme"" is also possible but currently there doesn't seem to much practical implementations using .net/c#. Very neat academic (but very hard to implement) idea here from Giuseppe Atenies (IEEE): Authenticated Multi-Party Key Agreement.
I've also came across a very neat article at CodeProject about 3-tier Diffie Hellman which can possibly be extended to n-party, as in my case: http://www.codeproject.com/KB/cs/diffy_helman.aspx
","1321","<c#><security><encryption><rsa><public-key-encryption>","5","1","3","2011-04-25 22:46:54","5654147","1","0","628273","","2011-04-25 22:45:46","2011-04-13 12:06:14",""
"34042899","C: OpenSSL RSA_private_decrypt() fails with ""error:0407A079:rsa routines:RSA_padding_check_PKCS1_OAEP:oaep decoding error”","I'm new with cryptography, so I decided to create simple program that would open a file encrypt data, put it in etest.txt, then open this file decrypt it and put it indetest.txt.I know it sounds really weired but its for educational purposes. so here is my code. I've read many topics about this problem but none of them worked for me. 
#include <openssl/rsa.h>
#include <openssl/pem.h>
#include <openssl/err.h>
#include <stdio.h>
#include <string.h>

int main(void) {
    size_t pri_len;            // Length of private key
    size_t pub_len;            // Length of public key
    char   *pri_key;           // Private key
    char   *pub_key;           // Public key
    char   *msg = malloc(256);  // Message to encrypt
    char   *encrypt = NULL;    // Encrypted message
    char   *decrypt = NULL;    // Decrypted message
    char   *err;               // Buffer for any error messages
    size_t red;

    RSA *keypair = RSA_generate_key(2048, 3, NULL, NULL);
     FILE *in   = fopen(""test.txt"", ""r"");
     FILE *out  = fopen(""etest.txt"", ""w"");

     if(in == NULL)
     {  
        printf(""in Error is %d (%s).\n"", errno, strerror(errno));
     }
     if(out == NULL)
     {  
        printf(""out Error is %d (%s).\n"", errno, strerror(errno));
     }

    encrypt = malloc(RSA_size(keypair));

    for(;;)
    {
        red = fread(msg, 1, RSA_size(keypair)-42, in);
        if((RSA_public_encrypt(RSA_size(keypair)-42, (unsigned char*)msg, (unsigned char*)encrypt,
                                             keypair, RSA_PKCS1_OAEP_PADDING)) == -1) {
            ERR_load_crypto_strings();
            ERR_error_string(ERR_get_error(), err);
            fprintf(stderr, ""Error encrypting message: %s\n"", err);
        }

        if(fwrite(encrypt, 1, strlen(encrypt), out) == 1)
        {
           printf(""fwrite Error is %d (%s).\n"", errno, strerror(errno));
        }

        if(feof(in))
        {
            break;
        }       
    }

    fclose(in);
    fclose(out);

    in   = fopen(""etest.txt"", ""r"");
    out  = fopen(""dtest.txt"", ""w"");

     if(in == NULL)
     {        
        printf(""in Error is %d (%s).\n"", errno, strerror(errno));
     }

     if(out == NULL)
     {        
        printf(""out Error is %d (%s).\n"", errno, strerror(errno));
     }

    decrypt = malloc(RSA_size(keypair));

    for(;;)
    {
         red = fread(msg, 1, 256, in);
         if(RSA_private_decrypt(red, (unsigned char*)msg, (unsigned char*)decrypt,
                               keypair, RSA_PKCS1_OAEP_PADDING) == -1) {

            ERR_load_crypto_strings();
            ERR_error_string(ERR_get_error(), err);
            fprintf(stderr, ""Error decrypting message: %s\n"", err);
        }        

        fwrite(decrypt, 1, strlen(decrypt), out);

        if(feof(in))
        {
          break;
        }
    }
    fclose(in);
    fclose(out);     
    RSA_free(keypair);
    return 0;
}

When I run code it gives me back error saying:Error decrypting message: error:0407A079:rsa routines:RSA_padding_check_PKCS1_OAEP:oaep decoding error Sorry if my question sound silly. Hope you can help. Thanks. 
","There are a few errors here.  First when you're reading and encrypting:
red = fread(msg, 1, RSA_size(keypair)-42, in);
if((RSA_public_encrypt(RSA_size(keypair)-42, (unsigned char*)msg, (unsigned char*)encrypt,
                                     keypair, RSA_PKCS1_OAEP_PADDING)) == -1) {

A call to fread won't necessarily read the number of bytes asked for, and could return 0.  So when you reach the end of the file, you man be encrypting more bytes than you need.  So pass in red for the number of bytes to encrypt.  Also, first check if red is 0 and if so break out of the loop:
red = fread(msg, 1, RSA_size(keypair)-42, in);
if (red == 0) break;
if(((red=RSA_public_encrypt(RSA_size(keypair)-42, (unsigned char*)msg, (unsigned char*)encrypt,
                                     keypair, RSA_PKCS1_OAEP_PADDING))) == -1) {

Note that we're saving the return value of RSA_public_encrypt.  That comes into play here where you're writing the encrypted data to disk:
if(fwrite(encrypt, 1, strlen(encrypt), out) == 1)

encrypt is an array of characters, not a string.  This means it's not NULL terminated, and it might contain NULL bytes.  So you can't use strlen.  Instead, capture the return value of RSA_public_encrypt and pass that as the size to write:
if(fwrite(encrypt, 1, red, out) == 1)

Because we're checking the return value of fread to break out of the loop, this isn't needed:
if(feof(in))
{
    break;
}

See this post regarding the perils of using feof.
Then there's this when you're reading back the encrypted data:
 red = fread(msg, 1, 256, in);
 if(RSA_private_decrypt(red, (unsigned char*)msg, (unsigned char*)decrypt,
                       keypair, RSA_PKCS1_OAEP_PADDING) == -1) {

RSA_private_decrypt expects a single encrypted block whose length is RSA_size(keypair).  So read in that many bytes from disk and pass in that many bytes to the function.  Also, check the return value of fread and break out if you don't get the expected amount, and capture the return value of RSA_private_decrypt:
 red = fread(msg, 1, RSA_size(keypair), in);
 if (red < RSA_size(keypair)) break;
 if((red=RSA_private_decrypt(red, (unsigned char*)msg, (unsigned char*)decrypt,
                       keypair, RSA_PKCS1_OAEP_PADDING)) == -1) {

Later when you write the decrypted data to disk:
fwrite(decrypt, 1, strlen(decrypt), out);

While what was decrypted is probably a string (if your input file was plain text), the returned data is not NULL terminated, so explicitly write than many bytes instead of using strlen:
fwrite(decrypt, 1, red, out);

Finally, as with the encryption loop, this is not needed in the decryption loop:
if(feof(in))
{
    break;
}

With these fixes applied, you should get the expected results.
","1313","<c><linux><encryption><openssl><public-key-encryption>","2","1","1","2015-12-02 14:12:48","34044895","2","1","1687119","","2015-12-02 13:35:24","2015-12-02 12:34:24",""
"11108562","getting Public key of a secure website","Other than using browser,How can I get the public key of a websites which use https protocol ?
Are there other ways ? Like from the terminal.
Update - i want all the ways so that i can choose what fits best for me
","openssl s_client -connect example.com:443

Certificate is between -----BEGIN CERTIFICATE----- and -----END CERTIFICATE-----
","1313","<https><public-key-encryption>","1","4","2","2012-06-19 20:56:06","11108696","1","","2962766","","2012-06-19 20:33:57","2012-06-19 20:06:50",""
"11108562","getting Public key of a secure website","Other than using browser,How can I get the public key of a websites which use https protocol ?
Are there other ways ? Like from the terminal.
Update - i want all the ways so that i can choose what fits best for me
","Is this OpenSSL command what you are looking for? 
openssl s_client -connect ${REMHOST}:${REMPORT}
","1313","<https><public-key-encryption>","1","1","2","2012-06-19 20:56:06","11108696","1","","2962766","","2012-06-19 20:33:57","2012-06-19 20:06:50",""
"24298941","Asymmetric Android RSA Encrypt - Decrypt .NET","I am encrypting on JAVA using RSA and attempting to decrypt using .NET. I am including my Android code and .NET code in hopes that someone has some experience with this sort of thing.
Android Code:
   byte[] modulusBytes = Base64.decode(""xTSiS4+I/x9awUXcF66Ffw7tracsQfGCn6g6k/hGkLquHYMFTCYk4mOB5NwLwqczwvl8HkQfDShGcvrm47XHKUzA8iadWdA5n4toBECzRxiCWCHm1KEg59LUD3fxTG5ogGiNxDj9wSguCIzFdUxBYq5ot2J4iLgGu0qShml5vwk="");
   byte[] exponentBytes = Base64.decode(""AQAB"");
   BigInteger modulus = new BigInteger(1, modulusBytes );               
   BigInteger exponent = new BigInteger(1, exponentBytes);

   RSAPublicKeySpec rsaPubKey = new RSAPublicKeySpec(modulus, exponent);
   KeyFactory fact = KeyFactory.getInstance(""RSA"");
   PublicKey pubKey = fact.generatePublic(rsaPubKey);

   Cipher cipher = Cipher.getInstance(""RSA"");
   cipher.init(Cipher.ENCRYPT_MODE, pubKey);

   byte[] plainBytes = new String(""big kitty dancing"").getBytes(""UTF-8"");
   byte[] cipherData = cipher.doFinal( plainBytes );
   String encryptedString = Base64.encodeBytes(cipherData);

From this JAVA Code I take the results of the encryptedString which happen to be:
FoP4+AAIH6hcabXnrvNG5YUk/nBv9n9HU0CAgZjkIWQIDjbOpSwoPVBFERrZ6641x2QaoJw5yv18XAay+0WrCaSw4sveRX+hmPm5qeVUPcjoR4slsVZ/hBFJtAHj9tva4hOugWDZa9s3RVJlxkNfE+u+Kt/YKLOi2EYbH05HjeM=

And attempt to decrypt using the following .NET code
 const int PROVIDER_RSA_FULL = 1;
   const string CONTAINER_NAME = ""Tracker"";

   CspParameters cspParams;
   cspParams = new CspParameters(PROVIDER_RSA_FULL);
   cspParams.KeyContainerName = CONTAINER_NAME;
   RSACryptoServiceProvider rsa1 = new RSACryptoServiceProvider(cspParams);
   rsa1.FromXmlString(""<RSAKeyValue><Modulus>xTSiS4+I/x9awUXcF66Ffw7tracsQfGCn6g6k/hGkLquHYMFTCYk4mOB5NwLwqczwvl8HkQfDShGcvrm47XHKUzA8iadWdA5n4toBECzRxiCWCHm1KEg59LUD3fxTG5ogGiNxDj9wSguCIzFdUxBYq5ot2J4iLgGu0qShml5vwk=</Modulus><Exponent>AQAB</Exponent><P>+lXMCEwIN/7+eMpBrq87kQppxu3jJBTwztGTfXNaPUTx+A6uqRwug5oHBbSpYXKNDNCBzVm/0VxB3bo4FJx+ZQ==</P><Q>yasOGaJaE9xlF9T2xRuKeG9ZxCiyjhYaYB/mbtL+SIbtkRLi/AxaU4g2Il/UxhxhSXArKxIzV28zktispPJx1Q==</Q><DP>ueRgQIEFUV+fY979a1RgrVHIPpqEI1URhOMH3Q59oiXCcOumM5njyIHmWQxRAzXnG+7xlKXi1PrnRll0L4oOKQ==</DP><DQ>dfEMNgG1HJhwpxdtmqkYuoakwQvsIRzcIAuIAJh1DoWaupWJGk8/JEstHb1d+t7uJrzrAi2KyT/HscH2diE0YQ==</DQ><InverseQ>YoYF9PF6FiC0YngVeaC/eqt/ea8wMYNN3YO1LuzWpcy2exPRj2U0ZbWMvHXMUb4ea2qmhZGx1QlK4ULAuWKpXQ==</InverseQ><D>g1WAWI4pEK9TA7CA2Yyy/2FzzNiu0uQCuE2TZYRNiomo96KQXpxwqAzZLw+VDXfJMypwDMAVZe/SqzSJnFEtZxjdxaEo3VLcZ1mnbIL0vS7D6iFeYutF9kF231165qGd3k2tgymNMMpY7oYKjS11Y6JqWDU0WE5hjS2X35iG6mE=</D></RSAKeyValue>"");

   string data2Decrypt =    ""FoP4+AAIH6hcabXnrvNG5YUk/nBv9n9HU0CAgZjkIWQIDjbOpSwoPVBFERrZ6641x2QaoJw5yv18XAay+0WrCaSw4sveRX+hmPm5qeVUPcjoR4slsVZ/hBFJtAHj9tva4hOugWDZa9s3RVJlxkNfE+u+Kt/YKLOi2EYbH05HjeM="";

   byte[] encyrptedBytes = Convert.FromBase64String(data2Decrypt);  

   byte[] plain = rsa1.Decrypt(encyrptedBytes, false);
   string decryptedString = System.Text.Encoding.UTF8.GetString(plain);

","The lesson here is don't rely on defaults. You should replace the line
   Cipher cipher = Cipher.getInstance(""RSA"");

with the line
   Cipher cipher = Cipher.getInstance(""RSA/ECB/PKCS1PADDING"");

in your Java code.
","1310","<c#><android><encryption><rsa><public-key-encryption>","0","4","1","2015-02-12 12:47:26","24314873","1","5","3754952","","2014-06-24 10:10:53","2014-06-19 04:43:42",""
"2898148","How to produce a key pair for 64 bit public key encryption","I need to generate a 64 bit public-private key pair but can't find out any standard algorithm.
","When you say public-private key pair, you imply that you are talking about asymmetric cryptography. Key sizes here are normally much much bigger than this - 512 bit or 1024 bit are common. If you are actually talking symmetric cryptography, then just randomly generate a 64 bit number (and, if you are using an algorithm like DES/3DES, check it against known weak keys for the algorithm).
","1309","<java><java-me><encryption-asymmetric><public-key-encryption>","0","1","2","2016-03-25 14:01:29","","3","","472495","","2016-03-25 14:01:29","2010-05-24 15:37:01","2016-03-26 01:59:22"
"2898148","How to produce a key pair for 64 bit public key encryption","I need to generate a 64 bit public-private key pair but can't find out any standard algorithm.
","Offhand, I can't think of a public-key cryptography algorithm that would be even somewhat secure with only a 64-bit key. RSA is by far the most common, but for it a 512 bit key is on the small side. Elliptical curve cryptography doesn't require as large of keys as most other public-key algorithms, but even so you typically need somewhere in the range of 150-200 bits.
","1309","<java><java-me><encryption-asymmetric><public-key-encryption>","0","0","2","2016-03-25 14:01:29","","3","","472495","","2016-03-25 14:01:29","2010-05-24 15:37:01","2016-03-26 01:59:22"
"5370724","Java security with Bouncy Castle API","I want to know whether Bouncy Castle API is good fit for asymmetric encryption in Java. Currently I am doing this with Java's JCE API. Will there be any advantages if I use Bouncy Castle API for asymmetric encryption?
","An advantage of using JCE mechanisms is that it is something of a standard, so you may use any of several providers to work with depending on your needs. You will find many JCE providers, commercial and free, that cover much of the crypto spectrum. There might even be some hardware (HSM) support through a proprietary JCE provider, though I don't know that for a fact.
Some advantages of completely avoiding the JCE and using the Bouncycastle lightweight API (BC LWAPI) exclusively are:

No additional policy files are needed to make any of the cryptography work. E.g. you can use AES-256 without requiring users to download the unlimited jurisdiction policy files.
The BC LWAPI is supported on the JME (formerly J2ME) environment. The JCE is not.
Many more cryptographic primitives are supported in the BC LWAPI. 

","1305","<java><security><bouncycastle><encryption-asymmetric><public-key-encryption>","0","1","1","2011-03-22 14:23:19","5392749","0","","","","","2011-03-20 19:05:26",""
"28708991","Unix encrypt file using public .asc key","I have a file I need to encrypt with a public key I got public.asc. This key was shared with me over encrypted email. I have a zip file that I need to encrypt using this public key and share over SFTP.
I tried using openssl:
openssl rsautl -encrypt -inkey public.asc -pubin -in file.zip -out file.zip.enc

but openssl displays the flag options and no error message. Also, I'm suspecting that .asc files should be encrypted with some other software.
Thanks
","","1298","<unix><encryption><public-key-encryption>","1","","0","2015-02-25 00:24:40","","4","","","","","2015-02-25 00:24:40",""
"7739785","RSA encrypt in Javascript and decrypt in Java - NO SSL","I have written a java utility for key pair generation for RSA encryption. But to encrypt the password, I have to do it in client side javascript
Does anyone has a sample code to do that in javascript? Where I can just pass the public key and the password (string) and get the encrypted password back ? Badly need this.
I tried jCryption and http://www.ohdave.com/rsa/ but couldn't make much out of it. :(
The application doesn't have SSL. Any other secure encryption method/procedure/library will be most welcome.
","I have used bits of this beginning implementation of C# in javascript for other pieces and seen correct results.  It does have RSA already.
http://www.codeproject.com/KB/tips/JocysComJavaScriptClasses.aspx
You can instantiate it the same as C# calls (for the most part).  Since you have JAVA experience, it shouldn't be a large learning curve.
I don't know if it's required for the RSA, but on some functions I've used; you have to convert to a binary array before using a portion to get the right example. (Such as the MD5 or SHA1)
Hope that helps.
","1296","<javascript><rsa><password-protection><public-key-encryption>","0","1","1","2011-10-12 12:10:18","7739861","0","","","","","2011-10-12 12:04:14",""
"14010703","Encryption and decryption involving 3 parties","I wonder if the following is possible using RSA or public key encryption algorithms in general. Say that we have 3 parties, Alice, Bob and Caesar.
They all have a private-public key pair. Now, Alice has two pieces of information, encrypted by Alice's public key. Alice gives these pieces of information to Bob, and let's Bob chose one of them. The choice is up to Bob. This information should be given to Caesar, and Caesar should be able to know which piece of information that Bob chose, and be able to decrypt it back to its cleartext. However, Alice should not know which piece of information Bob chose to give to Caesar, and Bob should not know the cleartext.
I'm thinking it could by done like so. Alice encrypts both pieces of information with its private key and gives to Bob. Bob encrypts one of them with Caesar's public key and sends back to Alice. Alice decrypts it with Alice's private key. Alice will still not know the actual information, since it is now encrypted with Caesar's public key. Alice sends the information to Caesar, and Caesar can decrypt it with Caesar's private key.
Is this chain possible? Encrypt with Alice's public key, encrypt again with Caesar's public key, decrypt with Alice's private key and then decrypt with Caesar's private key. Will the order of these encryptions and decryptions let the cleartext come out at the end or will it just be garbage?
I'm asking both if it is possible in ""theory"" to do this with public key encryption, and also is it possible in practice with existing libraries, or would it be a too rare ""special case"" so one would have to implement it from scratch?
Thanks!
EDIT:
I came up with a Diffie-Hellman inspired scheme, like this...
Say you have parties A, B and C. A has two pieces of information, I1 and I2, in this case they are single integers. All parties have a secret, that they chose themselves, As, Bs and Cs, also integers in this case.
So first A ""encrypts"" the information by adding it's secret and sends this to B.
A  -- I1+As --> B
A  -- I2+As --> B

Now B selects which of the pieces of information to give to C, say in this case that it is I1. B adds its secret to it, so that it is hidden from A. Now B sends this back to A and A relays the information to C.
A <-- I1+As+Bs -- B
A  -- I1+As+Bs --> C

Now C adds its secret also, and sends it to A who relays it to B.
A <-- I1+As+Bs+Cs -- C
A  -- I1+As+Bs+Cs --> B

B removes its secret by subtraction, and sends it to A. A also removes its secret and sends it to C.
A <-- I1+As+Cs -- B
A  -- I1+Cs --> C

So C can subtract its secret, and is left with the information I1. A knows the values of I1 and I2, but doesn't know which one C has. B knows that C has information I1, but doesn't know the value of it. Can you see some flaw here? And would it be possible to adopt to proper public key encryption somehow?
","The problem with the chaining you have described is that every time you encrypt a chunk of data with a public key, you are ""wrapping"" it in encryption that ONLY that person (or whoever has access to the private key) can decrypt. Therefore, when Alice receives a copy of the data from Bob that was encrypted with Caesar's key, Alice couldn't touch it.
Can you provide more information about what exactly you are trying to achieve? It feels like you're putting too much thought into this process. Are you looking for some way to verify receipt, or verify data integrity between multiple parties?
","1294","<rsa><public-key-encryption>","2","1","3","2013-11-28 08:30:31","14012699","3","2","982981","","2012-12-23 16:14:18","2012-12-23 11:47:37",""
"14010703","Encryption and decryption involving 3 parties","I wonder if the following is possible using RSA or public key encryption algorithms in general. Say that we have 3 parties, Alice, Bob and Caesar.
They all have a private-public key pair. Now, Alice has two pieces of information, encrypted by Alice's public key. Alice gives these pieces of information to Bob, and let's Bob chose one of them. The choice is up to Bob. This information should be given to Caesar, and Caesar should be able to know which piece of information that Bob chose, and be able to decrypt it back to its cleartext. However, Alice should not know which piece of information Bob chose to give to Caesar, and Bob should not know the cleartext.
I'm thinking it could by done like so. Alice encrypts both pieces of information with its private key and gives to Bob. Bob encrypts one of them with Caesar's public key and sends back to Alice. Alice decrypts it with Alice's private key. Alice will still not know the actual information, since it is now encrypted with Caesar's public key. Alice sends the information to Caesar, and Caesar can decrypt it with Caesar's private key.
Is this chain possible? Encrypt with Alice's public key, encrypt again with Caesar's public key, decrypt with Alice's private key and then decrypt with Caesar's private key. Will the order of these encryptions and decryptions let the cleartext come out at the end or will it just be garbage?
I'm asking both if it is possible in ""theory"" to do this with public key encryption, and also is it possible in practice with existing libraries, or would it be a too rare ""special case"" so one would have to implement it from scratch?
Thanks!
EDIT:
I came up with a Diffie-Hellman inspired scheme, like this...
Say you have parties A, B and C. A has two pieces of information, I1 and I2, in this case they are single integers. All parties have a secret, that they chose themselves, As, Bs and Cs, also integers in this case.
So first A ""encrypts"" the information by adding it's secret and sends this to B.
A  -- I1+As --> B
A  -- I2+As --> B

Now B selects which of the pieces of information to give to C, say in this case that it is I1. B adds its secret to it, so that it is hidden from A. Now B sends this back to A and A relays the information to C.
A <-- I1+As+Bs -- B
A  -- I1+As+Bs --> C

Now C adds its secret also, and sends it to A who relays it to B.
A <-- I1+As+Bs+Cs -- C
A  -- I1+As+Bs+Cs --> B

B removes its secret by subtraction, and sends it to A. A also removes its secret and sends it to C.
A <-- I1+As+Cs -- B
A  -- I1+Cs --> C

So C can subtract its secret, and is left with the information I1. A knows the values of I1 and I2, but doesn't know which one C has. B knows that C has information I1, but doesn't know the value of it. Can you see some flaw here? And would it be possible to adopt to proper public key encryption somehow?
","What you are searching for is called multi-party encryption. It's an extended version of the classic RSA algorithm but it involves more than 2 prime factors (three, four, whatever...)
http://daim.idi.ntnu.no/masteroppgave?id=4699
Or you can use the standard 2-prime RSA with any number of users but as you discovered by yourself the order in which users encrypt/decrypt data must be preserved. 
","1294","<rsa><public-key-encryption>","2","2","3","2013-11-28 08:30:31","14012699","3","2","982981","","2012-12-23 16:14:18","2012-12-23 11:47:37",""
"14010703","Encryption and decryption involving 3 parties","I wonder if the following is possible using RSA or public key encryption algorithms in general. Say that we have 3 parties, Alice, Bob and Caesar.
They all have a private-public key pair. Now, Alice has two pieces of information, encrypted by Alice's public key. Alice gives these pieces of information to Bob, and let's Bob chose one of them. The choice is up to Bob. This information should be given to Caesar, and Caesar should be able to know which piece of information that Bob chose, and be able to decrypt it back to its cleartext. However, Alice should not know which piece of information Bob chose to give to Caesar, and Bob should not know the cleartext.
I'm thinking it could by done like so. Alice encrypts both pieces of information with its private key and gives to Bob. Bob encrypts one of them with Caesar's public key and sends back to Alice. Alice decrypts it with Alice's private key. Alice will still not know the actual information, since it is now encrypted with Caesar's public key. Alice sends the information to Caesar, and Caesar can decrypt it with Caesar's private key.
Is this chain possible? Encrypt with Alice's public key, encrypt again with Caesar's public key, decrypt with Alice's private key and then decrypt with Caesar's private key. Will the order of these encryptions and decryptions let the cleartext come out at the end or will it just be garbage?
I'm asking both if it is possible in ""theory"" to do this with public key encryption, and also is it possible in practice with existing libraries, or would it be a too rare ""special case"" so one would have to implement it from scratch?
Thanks!
EDIT:
I came up with a Diffie-Hellman inspired scheme, like this...
Say you have parties A, B and C. A has two pieces of information, I1 and I2, in this case they are single integers. All parties have a secret, that they chose themselves, As, Bs and Cs, also integers in this case.
So first A ""encrypts"" the information by adding it's secret and sends this to B.
A  -- I1+As --> B
A  -- I2+As --> B

Now B selects which of the pieces of information to give to C, say in this case that it is I1. B adds its secret to it, so that it is hidden from A. Now B sends this back to A and A relays the information to C.
A <-- I1+As+Bs -- B
A  -- I1+As+Bs --> C

Now C adds its secret also, and sends it to A who relays it to B.
A <-- I1+As+Bs+Cs -- C
A  -- I1+As+Bs+Cs --> B

B removes its secret by subtraction, and sends it to A. A also removes its secret and sends it to C.
A <-- I1+As+Cs -- B
A  -- I1+Cs --> C

So C can subtract its secret, and is left with the information I1. A knows the values of I1 and I2, but doesn't know which one C has. B knows that C has information I1, but doesn't know the value of it. Can you see some flaw here? And would it be possible to adopt to proper public key encryption somehow?
","Everything important has already been said about the encryption / decryption stuff. However, there is also a major flaw in the logic which I want to point out: 

A encrypts two pieces of information and sends them to B
B chooses one of them, but A must not know the choice of B
B encrypts one message of A using C's public key and sends it back to A

Here is the flaw: A could just use C's public key to encrypt its own original messages and thereby figure out which of the two information pieces was chosen by B.
","1294","<rsa><public-key-encryption>","2","0","3","2013-11-28 08:30:31","14012699","3","2","982981","","2012-12-23 16:14:18","2012-12-23 11:47:37",""
"30103679","InvalidKeyException using ECPublicKey","I'm getting the following exception when I try to encrypt a byte array with a EC public key: 

java.security.InvalidKeyException: No installed provider supports this
  key:
                                         sun.security.ec.ECPublicKeyImpl

This exception is generated when I call Cipher.init(). The lines below show what I did in my program:
ECPublicKey publicKey ;
ECPrivateKey privateKey;

//Generating key paire (public and private keys) 
    KeyPairGenerator keyGen = KeyPairGenerator.getInstance(""EC"", ""SunEC"");
    SecureRandom random = SecureRandom.getInstance(""SHA1PRNG"", ""SUN"");

    keyGen.initialize(571, random);
    KeyPair pair = keyGen.generateKeyPair();
    privateKey = (ECPrivateKey) pair.getPrivate();
    publicKey = (ECPublicKey) pair.getPublic();

// get an AES cipher object with CTR encription mode 
   Cipher cipher = Cipher.getInstance(""AES/CTR/NoPadding"");

// encrypt the sharedSecret using the public key
   cipher.init(Cipher.ENCRYPT_MODE, publicKey);**
   byte[] result = cipher.doFinal(data);

Must I add a provider to support this public key?
","Finally, I found the source of this exception. The problem was initialization of cipher :
//This is the wrong initialization
Cipher cipher = Cipher.getInstance(""AES/CTR/NoPadding"");

//This is the right initialization
Cipher cipher = Cipher.getInstance(""AES/CTR/NoPadding"",""SunJCE"");

But now, i have another exception which is (it is less important than the previous one) :
java.security.InvalidKeyException: Invalid AES key length: 170 bytes

So what must I use as encrypting algorithm with ECDSA public key now ?
","1287","<java><encryption><public-key-encryption><pki><key-generator>","0","0","3","2018-01-26 20:46:04","","0","3","3751577","","2015-05-07 14:20:57","2015-05-07 14:12:57",""
"30103679","InvalidKeyException using ECPublicKey","I'm getting the following exception when I try to encrypt a byte array with a EC public key: 

java.security.InvalidKeyException: No installed provider supports this
  key:
                                         sun.security.ec.ECPublicKeyImpl

This exception is generated when I call Cipher.init(). The lines below show what I did in my program:
ECPublicKey publicKey ;
ECPrivateKey privateKey;

//Generating key paire (public and private keys) 
    KeyPairGenerator keyGen = KeyPairGenerator.getInstance(""EC"", ""SunEC"");
    SecureRandom random = SecureRandom.getInstance(""SHA1PRNG"", ""SUN"");

    keyGen.initialize(571, random);
    KeyPair pair = keyGen.generateKeyPair();
    privateKey = (ECPrivateKey) pair.getPrivate();
    publicKey = (ECPublicKey) pair.getPublic();

// get an AES cipher object with CTR encription mode 
   Cipher cipher = Cipher.getInstance(""AES/CTR/NoPadding"");

// encrypt the sharedSecret using the public key
   cipher.init(Cipher.ENCRYPT_MODE, publicKey);**
   byte[] result = cipher.doFinal(data);

Must I add a provider to support this public key?
","ECDSA is not used for encryption 
rather you use RSA / Symetric cipher 
","1287","<java><encryption><public-key-encryption><pki><key-generator>","0","0","3","2018-01-26 20:46:04","","0","3","3751577","","2015-05-07 14:20:57","2015-05-07 14:12:57",""
"30103679","InvalidKeyException using ECPublicKey","I'm getting the following exception when I try to encrypt a byte array with a EC public key: 

java.security.InvalidKeyException: No installed provider supports this
  key:
                                         sun.security.ec.ECPublicKeyImpl

This exception is generated when I call Cipher.init(). The lines below show what I did in my program:
ECPublicKey publicKey ;
ECPrivateKey privateKey;

//Generating key paire (public and private keys) 
    KeyPairGenerator keyGen = KeyPairGenerator.getInstance(""EC"", ""SunEC"");
    SecureRandom random = SecureRandom.getInstance(""SHA1PRNG"", ""SUN"");

    keyGen.initialize(571, random);
    KeyPair pair = keyGen.generateKeyPair();
    privateKey = (ECPrivateKey) pair.getPrivate();
    publicKey = (ECPublicKey) pair.getPublic();

// get an AES cipher object with CTR encription mode 
   Cipher cipher = Cipher.getInstance(""AES/CTR/NoPadding"");

// encrypt the sharedSecret using the public key
   cipher.init(Cipher.ENCRYPT_MODE, publicKey);**
   byte[] result = cipher.doFinal(data);

Must I add a provider to support this public key?
","  KeyGenerator keygen = KeyGenerator.getInstance(""AES"");
  keygen.init(128);
  key = keygen.generateKey();
String plain_input = ""Hush-a-bye, baby, on the tree top,When the wind blows"" ; 
  //encryption
  cipher = Cipher.getInstance(""""AES/EBC/PKCS5Padding"");
  cipher.init(Cipher.ENCRYPT_MODE, key);
  byte[] encrypted = cipher.doFinal(plain_input.getBytes(""UTF8""));

  //decryption
  cipher = Cipher.getInstance(""""AES/EBC/PKCS5Padding"");
  cipher.init(Cipher.DECRYPT_MODE, key);
  byte[] decrypted = cipher.doFinal(encrypted);
  String plain_output = new String(decrypted, ""UTF8"");

","1287","<java><encryption><public-key-encryption><pki><key-generator>","0","0","3","2018-01-26 20:46:04","","0","3","3751577","","2015-05-07 14:20:57","2015-05-07 14:12:57",""
"28537832","Do I need to seed any random number generator before using EVP_PKEY_keygen of OpenSSL?","On the OpenSSL Wiki page called EVP Key and Parameter Generation it states the following:

Since these functions use random numbers you should ensure that the random number generator is appropriately seeded

But nowhere on EVP_PKEY_keygen does it make mention of seeding a random number generator. It only discusses the low-level doc pages for non-EVP functions for generating keys.
I have also searched and everywhere no mention is made of seeding when the EVP functions are used.
So my question is; May I assume that the seeding is done internally for me in the higher-level EVP functions?
If I do need to do it then which functions must I have a look at?
","
but nowhere on https://www.openssl.org/docs/crypto/EVP_PKEY_keygen.html it makes any mention of seeding a random number generator....

See the OpenSSL wiki page Random Numbers. It takes you through it in grueling detail.


... no mention is made of seeding when the EVP functions are used

The EVP functions use whatever generator is in use for the library. It could be md_rand or a FIPS AES/CTR generator. There's nothing special to get random numbers for the EVP functions (as opposed to other functions).


May I assume that the seeding is done internally for me in the higher-level EVP functions?

Yes, if you did not seed the generator yourself. If you seeded the generator and there's sufficient entropy, then it will not auto-seed itself.
You should avoid allowing the generator to auto-seed itself. See the OpenSSL wiki page Random Numbers for the details.
There's nothing special about seeding/auto-seeding a generator when using EVP interfaces. Whatever you do applies to everything.


If I do need to do it then which functions must I have a look at?

The OpenSSL wiki page Random Numbers provides more details, but you should do something like:
int rc = RAND_load_file(""/dev/urandom"", 32);
if(rc != 32) {
    /* RAND_load_file failed */
}

/* OK to proceed */

You want to avoid a direct call to RAND_poll, and you want to avoid auto-seeding (which calls RAND_poll internally).
","1284","<encryption><openssl><public-key-encryption><public-key><encryption-asymmetric>","2","1","1","2015-02-16 21:13:27","28550395","1","","608639","","2015-02-16 21:13:27","2015-02-16 09:05:28",""
"33994899","using public key encryption in swift","I am trying to use a public key provided to me by web service developer to securely transfer data. I have tried hard but I am not able to find any working example with latest swift version. I have coded it like following(with help from here:
func connection(connection: NSURLConnection, willSendRequestForAuthenticationChallenge challenge: NSURLAuthenticationChallenge){
    if(challenge.protectionSpace.authenticationMethod == NSURLAuthenticationMethodServerTrust) {
        var localTrust: UnsafeMutablePointer<SecTrust?>
        let serverTrust = challenge.protectionSpace.serverTrust!
        let serverPublicKey = SecTrustCopyPublicKey(serverTrust)
        let certificateData = NSData(contentsOfFile: NSBundle.mainBundle().pathForResource(""pinning-certificate"", ofType: ""der"")!)
        let localCertificate = SecCertificateCreateWithData(kCFAllocatorDefault, certificateData!)
        let policy = SecPolicyCreateBasicX509()

        if SecTrustCreateWithCertificates(localCertificate!, policy, localTrust) == errSecSuccess {
            let localTrustRef = localTrust
            let localPublicKey = SecTrustCopyPublicKey(localTrustRef)!
            if (localPublicKey as AnyObject).isEqual(serverPublicKey as! AnyObject) {
                print(""trusted"")
                return challenge.sender!.performDefaultHandlingForAuthenticationChallenge!(challenge)
            }
        }
    }
    print(""not trusted"")
    return challenge.sender!.cancelAuthenticationChallenge(challenge)
   }

But I am getting following error during compilation in SecTrustCreateWithCertificates() and SecTrustCopyPublicKey():
Cannot convert value of type 'UnsafeMutablePointer?' to expected argument type 'UnsafeMutablePointer' (aka 'UnsafeMutablePointer>').
Edit 1: I have changed my code to following and now my code is executed but server is not receiving any request:
func extractIdentity(certData:NSData) -> IdentityAndTrust {
    var identityAndTrust:IdentityAndTrust!
    var securityError:OSStatus = errSecSuccess

    let path: String = NSBundle.mainBundle().pathForResource(""MobileAppClient"", ofType: ""pfx"")!
    let PKCS12Data = NSData(contentsOfFile:path)!
    let key : NSString = kSecImportExportPassphrase as NSString
    let options : NSDictionary = [key : ""client""]

    //create variable for holding security information
    //var privateKeyRef: SecKeyRef? = nil

    var items : CFArray?
    securityError = SecPKCS12Import(PKCS12Data, options, &items)

        if securityError == errSecSuccess {
        let certItems:CFArray = items as CFArray!;
        let certItemsArray:Array = certItems as Array
        let dict:AnyObject? = certItemsArray.first;
        if let certEntry:Dictionary = dict as? Dictionary<String, AnyObject> {

            // grab the identity
            let identityPointer:AnyObject? = certEntry[""identity""];
            let secIdentityRef:SecIdentityRef = identityPointer as! SecIdentityRef!;
            print(""\(identityPointer)  :::: \(secIdentityRef)"")
            // grab the trust
            let trustPointer:AnyObject? = certEntry[""trust""];
            let trustRef:SecTrustRef = trustPointer as! SecTrustRef;
            print(""\(trustPointer)  :::: \(trustRef)"")
            // grab the cert
            let chainPointer:AnyObject? = certEntry[""chain""];
            identityAndTrust = IdentityAndTrust(identityRef: secIdentityRef, trust: trustRef, certArray:  chainPointer! as! NSArray);
        }
    }
    return identityAndTrust;
}
func connection(connection: NSURLConnection, willSendRequestForAuthenticationChallenge challenge: NSURLAuthenticationChallenge){

    if challenge.protectionSpace.authenticationMethod == (NSURLAuthenticationMethodServerTrust) {

        let serverTrust:SecTrustRef = challenge.protectionSpace.serverTrust!
        let certificate: SecCertificateRef = SecTrustGetCertificateAtIndex(serverTrust, 0)!
        let remoteCertificateData = CFBridgingRetain(SecCertificateCopyData(certificate))!
        let cerPath: String = NSBundle.mainBundle().pathForResource(""Certificates"", ofType: ""cer"")!
        let localCertificateData = NSData(contentsOfFile:cerPath)!

        challenge.sender?.useCredential(credential, forAuthenticationChallenge: challenge)

                    if (remoteCertificateData.isEqualToData(localCertificateData) == true) {
            let credential:NSURLCredential = NSURLCredential(forTrust: serverTrust)

            challenge.sender?.useCredential(credential, forAuthenticationChallenge: challenge)

        } else {
            SVProgressHUD.dismiss()
            return challenge.sender!.performDefaultHandlingForAuthenticationChallenge!(challenge)
        }

    }
    else if challenge.protectionSpace.authenticationMethod == NSURLAuthenticationMethodClientCertificate
    {

        let path: String = NSBundle.mainBundle().pathForResource(""Certificates"", ofType: ""p12"")!
        let PKCS12Data = NSData(contentsOfFile:path)!


        let identityAndTrust:IdentityAndTrust = self.extractIdentity(PKCS12Data);



        let urlCredential:NSURLCredential = NSURLCredential(
            identity: identityAndTrust.identityRef,
            certificates: identityAndTrust.certArray as? [AnyObject],
            persistence: NSURLCredentialPersistence.ForSession);
        challenge.sender?.useCredential(urlCredential, forAuthenticationChallenge: challenge)


    }

}
","I think that there are 2 problems:
1) To cast UnsafeMutablePointer you should call localTrust.memory but it will give you next error
2) Next error will give you that pointer in uninitialized, I think you can use code like this:
func connection(connection: NSURLConnection, willSendRequestForAuthenticationChallenge challenge: NSURLAuthenticationChallenge){
    if(challenge.protectionSpace.authenticationMethod == NSURLAuthenticationMethodServerTrust) {
        var localTrust: UnsafeMutablePointer<SecTrust?> = nil
        let serverTrust = challenge.protectionSpace.serverTrust!
        let serverPublicKey = SecTrustCopyPublicKey(serverTrust)
        let certificateData = NSData(contentsOfFile: NSBundle.mainBundle().pathForResource(""pinning-certificate"", ofType: ""der"")!)
        let localCertificate = SecCertificateCreateWithData(kCFAllocatorDefault, certificateData!)
        let policy = SecPolicyCreateBasicX509()

        if SecTrustCreateWithCertificates(localCertificate!, policy, localTrust) == errSecSuccess {
            let localTrustRef = localTrust
            let localPublicKey = SecTrustCopyPublicKey(localTrustRef.memory!)!
            if (localPublicKey as AnyObject).isEqual(serverPublicKey as! AnyObject) {
                print(""trusted"")
                return challenge.sender!.performDefaultHandlingForAuthenticationChallenge!(challenge)
            }
        }
    }
    print(""not trusted"")
    return challenge.sender!.cancelAuthenticationChallenge(challenge)
}

P.s. it's NOT safe to forcecast optional. Plese consider using if let statement
","1284","<ios><swift><ssl-certificate><public-key-encryption>","2","0","2","2015-12-11 04:38:11","34014998","0","","260056","","2015-12-11 04:38:11","2015-11-30 09:09:27",""
"33994899","using public key encryption in swift","I am trying to use a public key provided to me by web service developer to securely transfer data. I have tried hard but I am not able to find any working example with latest swift version. I have coded it like following(with help from here:
func connection(connection: NSURLConnection, willSendRequestForAuthenticationChallenge challenge: NSURLAuthenticationChallenge){
    if(challenge.protectionSpace.authenticationMethod == NSURLAuthenticationMethodServerTrust) {
        var localTrust: UnsafeMutablePointer<SecTrust?>
        let serverTrust = challenge.protectionSpace.serverTrust!
        let serverPublicKey = SecTrustCopyPublicKey(serverTrust)
        let certificateData = NSData(contentsOfFile: NSBundle.mainBundle().pathForResource(""pinning-certificate"", ofType: ""der"")!)
        let localCertificate = SecCertificateCreateWithData(kCFAllocatorDefault, certificateData!)
        let policy = SecPolicyCreateBasicX509()

        if SecTrustCreateWithCertificates(localCertificate!, policy, localTrust) == errSecSuccess {
            let localTrustRef = localTrust
            let localPublicKey = SecTrustCopyPublicKey(localTrustRef)!
            if (localPublicKey as AnyObject).isEqual(serverPublicKey as! AnyObject) {
                print(""trusted"")
                return challenge.sender!.performDefaultHandlingForAuthenticationChallenge!(challenge)
            }
        }
    }
    print(""not trusted"")
    return challenge.sender!.cancelAuthenticationChallenge(challenge)
   }

But I am getting following error during compilation in SecTrustCreateWithCertificates() and SecTrustCopyPublicKey():
Cannot convert value of type 'UnsafeMutablePointer?' to expected argument type 'UnsafeMutablePointer' (aka 'UnsafeMutablePointer>').
Edit 1: I have changed my code to following and now my code is executed but server is not receiving any request:
func extractIdentity(certData:NSData) -> IdentityAndTrust {
    var identityAndTrust:IdentityAndTrust!
    var securityError:OSStatus = errSecSuccess

    let path: String = NSBundle.mainBundle().pathForResource(""MobileAppClient"", ofType: ""pfx"")!
    let PKCS12Data = NSData(contentsOfFile:path)!
    let key : NSString = kSecImportExportPassphrase as NSString
    let options : NSDictionary = [key : ""client""]

    //create variable for holding security information
    //var privateKeyRef: SecKeyRef? = nil

    var items : CFArray?
    securityError = SecPKCS12Import(PKCS12Data, options, &items)

        if securityError == errSecSuccess {
        let certItems:CFArray = items as CFArray!;
        let certItemsArray:Array = certItems as Array
        let dict:AnyObject? = certItemsArray.first;
        if let certEntry:Dictionary = dict as? Dictionary<String, AnyObject> {

            // grab the identity
            let identityPointer:AnyObject? = certEntry[""identity""];
            let secIdentityRef:SecIdentityRef = identityPointer as! SecIdentityRef!;
            print(""\(identityPointer)  :::: \(secIdentityRef)"")
            // grab the trust
            let trustPointer:AnyObject? = certEntry[""trust""];
            let trustRef:SecTrustRef = trustPointer as! SecTrustRef;
            print(""\(trustPointer)  :::: \(trustRef)"")
            // grab the cert
            let chainPointer:AnyObject? = certEntry[""chain""];
            identityAndTrust = IdentityAndTrust(identityRef: secIdentityRef, trust: trustRef, certArray:  chainPointer! as! NSArray);
        }
    }
    return identityAndTrust;
}
func connection(connection: NSURLConnection, willSendRequestForAuthenticationChallenge challenge: NSURLAuthenticationChallenge){

    if challenge.protectionSpace.authenticationMethod == (NSURLAuthenticationMethodServerTrust) {

        let serverTrust:SecTrustRef = challenge.protectionSpace.serverTrust!
        let certificate: SecCertificateRef = SecTrustGetCertificateAtIndex(serverTrust, 0)!
        let remoteCertificateData = CFBridgingRetain(SecCertificateCopyData(certificate))!
        let cerPath: String = NSBundle.mainBundle().pathForResource(""Certificates"", ofType: ""cer"")!
        let localCertificateData = NSData(contentsOfFile:cerPath)!

        challenge.sender?.useCredential(credential, forAuthenticationChallenge: challenge)

                    if (remoteCertificateData.isEqualToData(localCertificateData) == true) {
            let credential:NSURLCredential = NSURLCredential(forTrust: serverTrust)

            challenge.sender?.useCredential(credential, forAuthenticationChallenge: challenge)

        } else {
            SVProgressHUD.dismiss()
            return challenge.sender!.performDefaultHandlingForAuthenticationChallenge!(challenge)
        }

    }
    else if challenge.protectionSpace.authenticationMethod == NSURLAuthenticationMethodClientCertificate
    {

        let path: String = NSBundle.mainBundle().pathForResource(""Certificates"", ofType: ""p12"")!
        let PKCS12Data = NSData(contentsOfFile:path)!


        let identityAndTrust:IdentityAndTrust = self.extractIdentity(PKCS12Data);



        let urlCredential:NSURLCredential = NSURLCredential(
            identity: identityAndTrust.identityRef,
            certificates: identityAndTrust.certArray as? [AnyObject],
            persistence: NSURLCredentialPersistence.ForSession);
        challenge.sender?.useCredential(urlCredential, forAuthenticationChallenge: challenge)


    }

}
","Please find the answer given below:
 func URLSession(session: NSURLSession, didReceiveChallenge challenge: NSURLAuthenticationChallenge, completionHandler: (NSURLSessionAuthChallengeDisposition, NSURLCredential?) -> Void) {

   if challenge.protectionSpace.authenticationMethod == (NSURLAuthenticationMethodServerTrust) {


    let serverTrust:SecTrustRef = challenge.protectionSpace.serverTrust!
    let certificate: SecCertificateRef = SecTrustGetCertificateAtIndex(serverTrust, 0)!
    let remoteCertificateData = CFBridgingRetain(SecCertificateCopyData(certificate))!
    let cerPath: String = NSBundle.mainBundle().pathForResource(""xyz.com"", ofType: ""cer"")!
    let localCertificateData = NSData(contentsOfFile:cerPath)!


        if (remoteCertificateData.isEqualToData(localCertificateData) == true) {
            let credential:NSURLCredential = NSURLCredential(forTrust: serverTrust)

            challenge.sender?.useCredential(credential, forAuthenticationChallenge: challenge)


            completionHandler(NSURLSessionAuthChallengeDisposition.UseCredential, NSURLCredential(forTrust: challenge.protectionSpace.serverTrust!))

        } else {

            completionHandler(NSURLSessionAuthChallengeDisposition.CancelAuthenticationChallenge, nil)
        }
    }
    else if challenge.protectionSpace.authenticationMethod == NSURLAuthenticationMethodClientCertificate
    {

        let path: String = NSBundle.mainBundle().pathForResource(""client"", ofType: ""p12"")!
        let PKCS12Data = NSData(contentsOfFile:path)!


        let identityAndTrust:IdentityAndTrust = self.extractIdentity(PKCS12Data);



            let urlCredential:NSURLCredential = NSURLCredential(
                identity: identityAndTrust.identityRef,
                certificates: identityAndTrust.certArray as? [AnyObject],
                persistence: NSURLCredentialPersistence.ForSession);

            completionHandler(NSURLSessionAuthChallengeDisposition.UseCredential, urlCredential);




    }
    else
    {
        completionHandler(NSURLSessionAuthChallengeDisposition.CancelAuthenticationChallenge, nil);
    }
  }

Add the following Code     
 struct IdentityAndTrust {

    var identityRef:SecIdentityRef
    var trust:SecTrustRef
    var certArray:AnyObject
}

func extractIdentity(certData:NSData) -> IdentityAndTrust {
    var identityAndTrust:IdentityAndTrust!
    var securityError:OSStatus = errSecSuccess

    let path: String = NSBundle.mainBundle().pathForResource(""client"", ofType: ""p12"")!
    let PKCS12Data = NSData(contentsOfFile:path)!
    let key : NSString = kSecImportExportPassphrase as NSString
    let options : NSDictionary = [key : ""xyz""]
    //create variable for holding security information
    //var privateKeyRef: SecKeyRef? = nil

    var items : CFArray?

     securityError = SecPKCS12Import(PKCS12Data, options, &items)

    if securityError == errSecSuccess {
        let certItems:CFArray = items as CFArray!;
        let certItemsArray:Array = certItems as Array
        let dict:AnyObject? = certItemsArray.first;
        if let certEntry:Dictionary = dict as? Dictionary<String, AnyObject> {

            // grab the identity
            let identityPointer:AnyObject? = certEntry[""identity""];
            let secIdentityRef:SecIdentityRef = identityPointer as! SecIdentityRef!;
            print(""\(identityPointer)  :::: \(secIdentityRef)"")
            // grab the trust
            let trustPointer:AnyObject? = certEntry[""trust""];
            let trustRef:SecTrustRef = trustPointer as! SecTrustRef;
            print(""\(trustPointer)  :::: \(trustRef)"")
            // grab the cert
            let chainPointer:AnyObject? = certEntry[""chain""];
            identityAndTrust = IdentityAndTrust(identityRef: secIdentityRef, trust: trustRef, certArray:  chainPointer!);
        }
    }
    return identityAndTrust;
}

","1284","<ios><swift><ssl-certificate><public-key-encryption>","2","0","2","2015-12-11 04:38:11","34014998","0","","260056","","2015-12-11 04:38:11","2015-11-30 09:09:27",""
"10889491","Best practices for personal private keys","I'm just starting to use RSA keys in my daily work, and I have a few questions regarding the best ways to use them.
The biggest question revolves around the idea of multiple clients and multiple servers. Here's a scenario:
I have two client computers:

Desktop
Laptop

And there are two servers which I will be authenticating:

My own local server
Remote service (e.g. Github)

So, generally, how many key-pairs would you recommend in this situation?

One key-pair: This key is ""Me"" and I use it everywhere.
One per client: This key is ""This client"" and I put it on each server I mean to connect to from that client.
One key-pair per server: This is the key ""for this service"", and I bring the private key to each client I want to connect to it from.
One for every combination: Every unique client-server pairing has its own key-pair.

If none of these is significantly superior or worse to any other, can you outline the pros and cons of each so that a person could choose for themselves?
","The usual way to do this is your ""One per client"" option. That way, in case of a compromised client key, you can revoke just that key from the servers where it is allowed. If you want extra work, you can do ""One for every combination"".
The above options avoid copying private key data between hosts.
","1276","<rsa><public-key-encryption>","5","2","2","2012-06-04 23:00:01","10889555","0","2","","","","2012-06-04 22:52:06",""
"10889491","Best practices for personal private keys","I'm just starting to use RSA keys in my daily work, and I have a few questions regarding the best ways to use them.
The biggest question revolves around the idea of multiple clients and multiple servers. Here's a scenario:
I have two client computers:

Desktop
Laptop

And there are two servers which I will be authenticating:

My own local server
Remote service (e.g. Github)

So, generally, how many key-pairs would you recommend in this situation?

One key-pair: This key is ""Me"" and I use it everywhere.
One per client: This key is ""This client"" and I put it on each server I mean to connect to from that client.
One key-pair per server: This is the key ""for this service"", and I bring the private key to each client I want to connect to it from.
One for every combination: Every unique client-server pairing has its own key-pair.

If none of these is significantly superior or worse to any other, can you outline the pros and cons of each so that a person could choose for themselves?
","Of your four options, the two I like are:

One per client: This key is ""This client"" and I put it on each server I mean to connect to from that client.
This gives you the easy ability to revoke all keys for a specific client in the event it is compromised -- delete the one key on every service. It also only scales linearly in the number of clients, which will probably make key management easier. It even fits neatly with the OpenSSH key model, which is to give every client one key that is used on multiple servers. (You can do other models with OpenSSH, which is nice. But this is the easiest thing to do as it happens without any effort on your part.)
One for every combination: Every unique client-server pairing has its own key-pair.
This has the downside of forcing you to revoke multiple keys when a single client is compromised, but it'll be one key per service anyway, so it isn't significantly worse. The better upside is that it'll be significantly harder for one service to serve as a middleman between you and another service. This is not a real concern most of the time, but if your (Laptop,Server,SMTP) key were suddenly being used for (Laptop,Server,SSH), you'd have some opportunity to notice the oddity. I'm not sure this ability is worth the quadratic increase in keys to manage.

","1276","<rsa><public-key-encryption>","5","2","2","2012-06-04 23:00:01","10889555","0","2","","","","2012-06-04 22:52:06",""
"15003113","PKCS11 Mechanisms difference + JAVA","I'm implementing functions with PKCS11 mechanisms - CKM_RSA_PKCS and CKM_RSA_X_509. I know that both are implemented in Botan C++ library, but I have to find equivalents in Java. Second problem is what's the difference between both of them?
","CKM_RSA_PKCS refers to the PKCS#1 v1.5 standard (see RFC3447) for RSA encryption and digital signatures. In Java JCE, it is typically the default choice for RSA.

For digital signatures, pass ""MD5WithRSA"", ""SHA1WithRSA"", etc to Signature.getInstance()
For encryption, pass ""RSA/None/PKCS1Padding"" to Cipher.getInstance().

CKM_RSA_X_509 refers to the textbook (or raw) RSA algorithm, that is, the one where no padding is defined. In this case, you can simply pass ""RSA/None/NoPadding"" to Cipher.getInstance(). Signature can be done with decryption, wheres verification can be done with encryption (followed by comparison).
I would avoid implementing and using raw RSA though, unless you have specific use cases in mind. PKCS#1v 1.5 signatures are more secure. For enciphering though, I wouldn't actually recommend to use either of them, because they are both unsecure. It's better to rely only on PKCS#1 OAEP (CKM_RSA_PKCS_OAEP); for that, you pass ""RSA/None/OAEPWithSHA1AndMGF1Padding"" to Cipher.getInstance().
","1273","<java><digital-signature><public-key-encryption><pkcs#11>","2","4","1","2013-02-22 18:15:16","","0","","482262","","2013-02-22 18:15:16","2013-02-21 13:11:20",""
"41102504","RSACryptoServiceProvider Public/Private Keys Import","I want to Sign and Verify Data via RSACryptoServiceProvider
For this, I need Public and Private keys.
In my project, I store MyPublic and Private keys in XML files.
One time, I generate MyPublic and Private Keys
public bool SignutureCheckForVerify(string myData, byte[] SignedData)
    {
        ...

        RSACryptoServiceProvider RSAalg = new RSACryptoServiceProvider();
             RSAalg.FromXmlString(MyPublicKey());
        return RSAalg.VerifyData(Encoding.ASCII.GetBytes(myData), new   MineCryptoService(), SignedData);

       ...

    }

    private static string MyPublicKey()
    {
        return ""<RSAKeyValue><Modulus>-----Pubic Key Here ----</RSAKeyValue>"";
    }

At the Above, I showed that ""Verify Data Via Public Keys""
My SignData method is similar.
At there,
  RSAalg.FromXmlString(GetPrivateKey());
   ...
  RSAalg.SignData(...)

My question si that; At some example, I recognized that; Public and Private keys import via crt/pem/cert etc. certificate files. On there I stored on XML files.
İs My solution wrong?  
The second question that, 
If I use this method to import keys
https://msdn.microsoft.com/en-us/library/tswxhw92(v=vs.110).aspx
GetKeyFromContainer(""MyKeyContainer"");
IS MyKeyContainer private and public keys  static?
At each run, Can I have same private key/public key 
or each running I have different key set?emphasized text
","
Is My solution wrong?

That depends on your requirements and threat model. The signature generation of RSACryptoServiceProvider should be explicitly set to a hash other than MD5 or SHA-1. It's not clear from your question if this has taken place.

If I use this method to import keys
https://msdn.microsoft.com/en-us/library/tswxhw92(v=vs.110).aspx
GetKeyFromContainer(""MyKeyContainer"");
Is MyKeyContainer private and public keys static?

Yes, that's the general idea of using a key store anyway.

At each run, Can I have same private key/public key? Or should I have different key set each time I generate a signature?

Yes you can, given that you use an ample key size, say 2048 bit or higher.

Actually, for your solution to be secure the receiver needs to trust the public key. When no trust is established, anybody could send you their public key instead.
","1269","<c#><.net><rsa><public-key-encryption><private-key>","0","0","1","2016-12-14 10:31:20","41107036","0","","","","","2016-12-12 13:57:01",""
"38363233","GPG Encrypt file with multiple public keys in a powershell script","I am trying to encrypt a file with multiple public keys and used the same syntax that is there as part of the documentation and it is throwing the below error.
Error Message
gpg : usage: gpg [options] --encrypt [filename]
    At line:10 char:1
    + gpg --encrypt \ --recipient ""Sree"" \ --recipient ""Matam"" \ ""C:Reports\ ...
    +   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : NotSpecified: (usage: gpg [opt...rypt      [filename]:String) [], RemoteException
    + FullyQualifiedErrorId : NativeCommandError
P.S: This encryption is done as part of a powershell script
When I encrypt with a single key, it works fine. Can someone point what is it that I am doing wrong?
gpg --encrypt \ --recipient ""Sree"" \ --recipient ""Matam"" \ ""C:\Reports\test_encryption.xlsx""

I used this thread to guide me but looks like I am missing something
Encryption with multiple different keys?
","You encrypt with one key at a time.
Once you have encrypted with one key, you may re-encrypt the ciphertext with a second key.
However, this serves no semantically legitimate purpose.  Public keys are used to provide secrecy and confidentiality in the prescribed manner.  I sign something with my private key and encrypt it for you with your public key.  You recover it with your private key and verify it with my public key.  Any superjacent use of this public key or that private key is questionable at best.
","1269","<powershell><encryption><public-key-encryption><gnupg><encryption-asymmetric>","1","2","2","2016-07-14 18:24:41","38381549","5","","-1","","2017-05-23 12:08:09","2016-07-13 23:18:11",""
"38363233","GPG Encrypt file with multiple public keys in a powershell script","I am trying to encrypt a file with multiple public keys and used the same syntax that is there as part of the documentation and it is throwing the below error.
Error Message
gpg : usage: gpg [options] --encrypt [filename]
    At line:10 char:1
    + gpg --encrypt \ --recipient ""Sree"" \ --recipient ""Matam"" \ ""C:Reports\ ...
    +   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : NotSpecified: (usage: gpg [opt...rypt      [filename]:String) [], RemoteException
    + FullyQualifiedErrorId : NativeCommandError
P.S: This encryption is done as part of a powershell script
When I encrypt with a single key, it works fine. Can someone point what is it that I am doing wrong?
gpg --encrypt \ --recipient ""Sree"" \ --recipient ""Matam"" \ ""C:\Reports\test_encryption.xlsx""

I used this thread to guide me but looks like I am missing something
Encryption with multiple different keys?
","Got this bit to work finally. Thanks to @user2864740
$BeforeEncryptfilePathGPG = ""C:\Reports\Test_Encryption.xlsx""
$SignedOrEncryptedLoc = ""C:\Reports\Test_Encryption.xlsx.gpg""
gpg --output $SignedOrEncryptedLoc --always-trust --encrypt --recipient ""Sreekar"" --recipient ""Matam"" $BeforeEncryptfilePathGPG

","1269","<powershell><encryption><public-key-encryption><gnupg><encryption-asymmetric>","1","0","2","2016-07-14 18:24:41","38381549","5","","-1","","2017-05-23 12:08:09","2016-07-13 23:18:11",""
"24489097","Encryption and Decryption in and out of codeigniter","I am creating an application based on codeigniter and will work as a API Centric application, i want to implement security , so that the user accessing the API from their own portal should get a public and private key from my portal and then every request they send to my server to get data should be encrypted by the public key and the server should decrypt the data using the private key getting the private key stored in the database
Now the problem is that how can i implement that, so that the user shouldn't go to hard proceedures to encrypt the data using the public key, and i should also be able to decrypt the information using private key within the codeigniter. and also if the encryption is made by javascript still it should be decrypted via codeigniter. I need some secure method to do that, so that i can avoid man in middle attacks and other threats
Thanks
","Create Signature for the both end client and server.
$key='any key';

$timestamp='current time stamp'

$url='url to access the file'

$signature = $sha1($key,$timestamp,$url);

use this function at both end and match the signature value and then let it access the data.
","1268","<javascript><codeigniter><encryption><public-key-encryption><private-key>","0","0","2","2014-06-30 14:57:51","","5","1","","","","2014-06-30 11:27:48",""
"24489097","Encryption and Decryption in and out of codeigniter","I am creating an application based on codeigniter and will work as a API Centric application, i want to implement security , so that the user accessing the API from their own portal should get a public and private key from my portal and then every request they send to my server to get data should be encrypted by the public key and the server should decrypt the data using the private key getting the private key stored in the database
Now the problem is that how can i implement that, so that the user shouldn't go to hard proceedures to encrypt the data using the public key, and i should also be able to decrypt the information using private key within the codeigniter. and also if the encryption is made by javascript still it should be decrypted via codeigniter. I need some secure method to do that, so that i can avoid man in middle attacks and other threats
Thanks
","The easy answer is, use TLS.
If you've implemented your server interface as a web API, then this is as simple as configuring your web server front-end to accept connections over HTTPS.  Your web server (and the browser / HTTPS client library on the client side) will then take care of most of the complicated handshaking, authentication and encryption details for you.
TLS is far from a perfect security protocol, but if used properly, it generally does the job, and it does it with much less hassle or opportunities for mistakes than designing your own protocol would.

If you really want to ""roll your own"" secure communications scheme, you're first going to have to familiarize yourself with the theory of cryptography and the various available algorithms.  In particular, to implement an effective hybrid cryptosystem, you're going to need:

an authenticated public-key based key agreement protocol (preferably something based on the Diffie–Hellman key exchange, and thus providing forward secrecy) to provide the client and server with a temporary shared key;
an authenticated symmetric encryption algorithm, to provide a secure channel between the client and the server using the shared key; and
if the data is transmitted as discrete messages within the secure channel, a communications protocol capable of detecting message replay attacks (e.g. through the use of sequential message numbers).

While all of these can be implemented using only a few discrete crypto primitives — a block cipher (e.g. AES), a public-key encryption/signature algorithm (e.g. RSA), and possibly a hash function (e.g. SHA-256) and some way to do modular exponentiation for Diffie–Hellman — it's generally easier to use protocols and schemes that you crypto library already implements a high-level interface for.
Unfortunately, the most widely implemented schemes also tend to be the older ones, which may be slower and have weaker security guarantees than more modern schemes.  That said, if I had the choice (and keep in mind that I'm by no means a true crypto expert), here's what I'd pick:

If the client needs to authenticate itself using a password, I'd pick SRP for the key agreement protocol.  If both sides have public signature keys known to the other, the problem is somewhat simpler, and could be handled simply by using raw Diffie–Hellman and then having both parties sign the D–H shared secret, or by using something like STS.  (Note that, even with SRP, you may still want the server to authenticate itself to the client using something stronger than just knowledge of the client's password verifier.)
For the signature algorithm, any of RSA (with proper padding), DSA or ECDSA should do, as long as the key length is sufficient.  (What counts as sufficient depends on the algorithm.)  Where hash algorithms are required, I would, for now, use SHA-2; once the SHA-3 standard is finalized, it should also be a valid choice.
For the symmetric encryption part, I'd go with SIV (RFC 5297) for maximum fool-proofness, or with GCM if speed is critical or ""on-line"" encryption of large messages is required (and you don't have to implement it yourself).  OCB could also be an option, if the patent exemptions are enough for your purposes, and EAX is perfectly good too, if not the absolute fastest.  See also How to choose an Authenticated Encryption mode.
Generic composition of a block cipher (e.g. in CTR mode) and a MAC would also work, as long you make sure to apply the MAC to the message after encryption (end verify it before decryption).  Any decent MAC should do, but HMAC is generally a safe and robust choice, if you have a good hash function available and don't need extreme speed.  (If you do, a fast Carter–Wegman MAC like poly1305-AES may be worth considering.) Try to avoid the old CBC-MAC if you can; CMAC is much better.
In any case, I see no good reason to choose anything other than AES for the underlying block cipher at the moment, although it's always good to design your protocol so that new cipher options may be easily introduced (and old insecure ones deprecated) in the future.
To derive the symmetric encryption key(s) from the D–H / SRP shared secret, you'll generally need a key derivation function; HKDF (RFC 5869) is a good choice for this job, especially if you already use a hash function anyway.  (It shouldn't be used — alone, at least — for hashing passwords, though; for that, you need a key-stretching KDF like PBKDF2 or scrypt.)
Also, as noted, I would design my communications protocol so that all messages carry a sequential message number and explicit sender/receiver designations, and so that messages with duplicate message numbers or invalid designations are discarded as forgeries.  Conveniently, these message numbers + designators can also be used as nonces for the symmetric encryption protocol (possibly after hashing, if they would otherwise be too long).
These message numbers and designators don't necessarily have to be encrypted (although they do need to be authenticated as ""associated data""); not encrypting them has the advantage that you can immediately reject any messages with bogus numbers or designators, even before attempting decryption.
Finally, always keep in mind that there may be exploitable gaps in what I've suggested above, or in the way you choose to apply my suggestions.  Make sure to get as many competent security experts as possible to review your protocol and implementation before you use it for anything actually important.

As for specific crypto libraries or APIs in the various languages you mention, I'm not particularly familiar with those, and thus cannot offer detailed advice.  Just look at the documentation of standard crypto libraries and see what they offer.
","1268","<javascript><codeigniter><encryption><public-key-encryption><private-key>","0","3","2","2014-06-30 14:57:51","","5","1","","","","2014-06-30 11:27:48",""
"24677932","Diffie-Hellman Key Exchange with Javascript sometimes wrong","After watching this video
http://youtu.be/3QnD2c4Xovk
I've been trying to follow it step by step, and haven't been able to produce the same results.
Notably, when I try to do Math.pow(3, 54)%17, I get 7.  While the speaker gets 15.
I wrote a method that is supposed to simulate Diffie Hellman's key exchange using exactly what I found on http://en.wikipedia.org/wiki/Diffie%E2%80%93Hellman_key_exchange
This is my code:
function diffieHellman(generator, prime, alice_secret, bob_secret){
  var alice_public = Math.pow(generator, alice_secret)%prime
    , bob_public = Math.pow(generator, bob_secret)%prime
    , alice_private = Math.pow(bob_public, alice_secret)%prime
    , bob_private = Math.pow(alice_public, bob_secret)%prime;
  console.log(""alice""
  , ""\n\t"", ""secret -- "", alice_secret
  , ""\n\t"", ""public -- "", alice_public
  , ""\n\t"", ""private -- "", alice_private
  )
  console.log(""bob""
  , ""\n\t"", ""secret -- "", bob_secret
  , ""\n\t"", ""public -- "", bob_public
  , ""\n\t"", ""private -- "", bob_private
  )
  return {
    alice:{
      secret: alice_secret
    , public: alice_public
    , private: alice_private
    },
    bob:{
      secret: bob_secret
    , public: bob_public
    , private: bob_private
    }
  }
};

These examples work:
diffieHellman(3, 17, 4, 12) // 1, 1
diffieHellman(3, 23, 6, 19) // 12, 12
diffieHellman(3, 13, 8, 4) // 9, 9

However, some numbers don't work
diffieHellman(3, 17, 40, 120) // 13, 0
diffieHellman(3, 23, 16, 129) // 21, 2
diffieHellman(3, 13, 44, 11) // 9, 1

What am I doing wrong?
Edit -- I'm not trying to implement Diffie-Hellman's Key Exchange in Javascript for a project.  It's just the language I'm most comfortable with, but I am afraid if this could be a javascript limitation.
","The problem is the limited precision of Javascript numbers that causes rounding errors in your code where you first exponentiate and then calculate the modulus. For your example numbers, you could fix this by periodically calculating the modulus inside the exponentiation, e.g. by never calculating more than a square before taking the modulus. But for actual cryptography your calculations will involve numbers too big to be handled as Javascript numbers (and most programming languages pose the same problem). The usual approach is to use a large integer (or even arbitrary precision) library. If you do end up implementing your own cryptography, please watch out for side channels, e.g. by calling library functions that are not constant time or allow cache-based attacks by using data dependent array indices.
","1266","<javascript><public-key-encryption><diffie-hellman>","3","4","2","2017-07-08 08:57:46","24787581","2","2","2628234","","2014-07-10 13:39:36","2014-07-10 13:33:16",""
"24677932","Diffie-Hellman Key Exchange with Javascript sometimes wrong","After watching this video
http://youtu.be/3QnD2c4Xovk
I've been trying to follow it step by step, and haven't been able to produce the same results.
Notably, when I try to do Math.pow(3, 54)%17, I get 7.  While the speaker gets 15.
I wrote a method that is supposed to simulate Diffie Hellman's key exchange using exactly what I found on http://en.wikipedia.org/wiki/Diffie%E2%80%93Hellman_key_exchange
This is my code:
function diffieHellman(generator, prime, alice_secret, bob_secret){
  var alice_public = Math.pow(generator, alice_secret)%prime
    , bob_public = Math.pow(generator, bob_secret)%prime
    , alice_private = Math.pow(bob_public, alice_secret)%prime
    , bob_private = Math.pow(alice_public, bob_secret)%prime;
  console.log(""alice""
  , ""\n\t"", ""secret -- "", alice_secret
  , ""\n\t"", ""public -- "", alice_public
  , ""\n\t"", ""private -- "", alice_private
  )
  console.log(""bob""
  , ""\n\t"", ""secret -- "", bob_secret
  , ""\n\t"", ""public -- "", bob_public
  , ""\n\t"", ""private -- "", bob_private
  )
  return {
    alice:{
      secret: alice_secret
    , public: alice_public
    , private: alice_private
    },
    bob:{
      secret: bob_secret
    , public: bob_public
    , private: bob_private
    }
  }
};

These examples work:
diffieHellman(3, 17, 4, 12) // 1, 1
diffieHellman(3, 23, 6, 19) // 12, 12
diffieHellman(3, 13, 8, 4) // 9, 9

However, some numbers don't work
diffieHellman(3, 17, 40, 120) // 13, 0
diffieHellman(3, 23, 16, 129) // 21, 2
diffieHellman(3, 13, 44, 11) // 9, 1

What am I doing wrong?
Edit -- I'm not trying to implement Diffie-Hellman's Key Exchange in Javascript for a project.  It's just the language I'm most comfortable with, but I am afraid if this could be a javascript limitation.
","3^54 is 58149737003040059690390169. It causes an overflow, therefore you should implement modular exponentation, since i don't know javascript too well i have written a c code which should be easy to implement in javascript :
int power(int a, int b, int prime){
      int result;
      if(b == 0){
           result = 1;
      }else if(b == 1){
           result = a % prime;
      }else if(b % 2 == 0){
           result = power((a*a) % prime, b/2, prime);
           result = result % prime;
      }else{
           result = power((a*a) % prime, b/2, prime);
           result = (result * a) % prime;
      }
  return result;
  }

Now you can call this function :
int value = power(3, 54, 17);

and it should work.
Edit: added javascript version
function power(a, b, prime) {
    if (b <= 0) {
        return 1;
    } else if (b === 1) {
        return a % prime;
    } else if (b % 2 === 0) {
        return power((a * a) % prime, b / 2 | 0, prime) % prime;
    } else {
        return (power((a * a) % prime, b / 2 | 0, prime) * a) % prime;
    }
}

","1266","<javascript><public-key-encryption><diffie-hellman>","3","3","2","2017-07-08 08:57:46","24787581","2","2","2628234","","2014-07-10 13:39:36","2014-07-10 13:33:16",""
"12372404","How can I make users digitally sign XML documents?","I'm building a web application that builds a XML document based on the user input. After the doc is created, it needs to follow an approval path, e.g. a workflow, where several users ""sign"" the document. The signature from the user point of view is just checking a field and clickin ""accept"", but what I need is for the document to be digitally signed in each step, to
finally store it signed in a database.
What kind of devices/tools do I need to use? X.509 certificates on the client browser? Public/Private keys generated by the app? Any link to documentation will be appreciated.
","Certificates are not normally generated by the application (since PKI is about trust, which is hierarchical in case of certificates). Users acquire certificates with private keys (let's say so for simplicity) and store them in the safe place or on hardware devices (smartcards, USB tokens). 
Then those certificates are used to sign information. In case of web application you can either transfer the data itself to the client or send a hash of the data there, but in any case signing takes place on the client side (except rare cases where certificates are stored on central server and access to them is authorized by the client each time the certificate is used). 
We offer components for distributed signing of data. This answer contains detailed description of how such signing works. You can use our solution or create your own, that will do the same. 
","1258","<digital-signature><public-key-encryption>","0","1","1","2012-09-11 15:04:18","","1","","","","","2012-09-11 14:47:02",""
"48015358","Use public key string to decrypt in PHP","I have the public key string:
-----BEGIN PUBLIC KEY----- MIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAvL+UegLeWJ1KLh6WEfbW kGcA+vj4G/k6iIz9OWCb9t3maokH+Oz/bNB8PGlwmH2aCBmqXPv9p3hexcujUsNC jFahCAz84tT7M4rR2GGwVWyY9PJ98rZbbvD9PLG380cqZs+vlwYT16bv5t+braiJ WhrAgwKF0eZyID6DzRnDCG7HbKr6sL1h7QD1WHBljplV+TinIeWoyBIWPJdqEAUs js1wXWkFPIb5x0W7kAzWc0+oH3gDD3kGv+t/p2DsbUuOYYSZgZB8Lx1AKiWVRERt 90tWH9uytulSxvwoONBriasH7VlSXyi5ve6AA4+FG/HExiPNN5Lh34kNP6l5CTc+ yaCDHewYQeqDdgP+GurgdV9ZCM4P7c6Ky7GZBs8sAAAXevch8ggf9XGjEsLl++c7 G5E4FO6kNmloL3nogRLJ8P8w/s53Y0g4ih2hdJFfqJ3l/fIolvldR17nA3oZBHTo OuOSR/JK1KWvkl/C9I1lHO70zrgvr7wtpW2YbdBHvvTu5aTK8oIMNoZ8lhWdKFYG aiQWvfsM/IPXbFKQbDQachn5ZHYLc4wXi1uBHYnPCjZM3Fq6wc1oSnRZ77CI8crf To7TJFfXO20VtSdwUq0SCrQ1wxttK8uH22c/YUXPld+K6fW13tspWz653gnw5FPd 8bFQQByVkrcihbyuXWjUSMkCAwEAAQ== -----END PUBLIC KEY-----
and want to use it to encrypt a message, however when I run the code below it gives me the following error:
Warning: openssl_public_encrypt(): key parameter is not a valid public key i ...
<?php 

$unformatted_pub= ""-----BEGIN PUBLIC KEY----- MIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAvL+UegLeWJ1KLh6WEfbW kGcA+vj4G/k6iIz9OWCb9t3maokH+Oz/bNB8PGlwmH2aCBmqXPv9p3hexcujUsNC jFahCAz84tT7M4rR2GGwVWyY9PJ98rZbbvD9PLG380cqZs+vlwYT16bv5t+braiJ WhrAgwKF0eZyID6DzRnDCG7HbKr6sL1h7QD1WHBljplV+TinIeWoyBIWPJdqEAUs js1wXWkFPIb5x0W7kAzWc0+oH3gDD3kGv+t/p2DsbUuOYYSZgZB8Lx1AKiWVRERt 90tWH9uytulSxvwoONBriasH7VlSXyi5ve6AA4+FG/HExiPNN5Lh34kNP6l5CTc+ yaCDHewYQeqDdgP+GurgdV9ZCM4P7c6Ky7GZBs8sAAAXevch8ggf9XGjEsLl++c7 G5E4FO6kNmloL3nogRLJ8P8w/s53Y0g4ih2hdJFfqJ3l/fIolvldR17nA3oZBHTo OuOSR/JK1KWvkl/C9I1lHO70zrgvr7wtpW2YbdBHvvTu5aTK8oIMNoZ8lhWdKFYG aiQWvfsM/IPXbFKQbDQachn5ZHYLc4wXi1uBHYnPCjZM3Fq6wc1oSnRZ77CI8crf To7TJFfXO20VtSdwUq0SCrQ1wxttK8uH22c/YUXPld+K6fW13tspWz653gnw5FPd 8bFQQByVkrcihbyuXWjUSMkCAwEAAQ== -----END PUBLIC KEY-----"";

$unformatted_priv = ""-----BEGIN PRIVATE KEY----- MIIJQwIBADANBgkqhkiG9w0BAQEFAASCCS0wggkpAgEAAoICAQDFrm2aDzAp2SEx b89HeyPrkq0mBfA7o4BNhUAC9pO0JcGZdDHJyE1cN8ZwK4H0sYKYUllZDvVlx6rQ MpoD9UJsbvlhc+xJtNFFqqxdVCqy/1hh9QXZ6xXAbGDKNuEoueD7/9IlDbJGE+y6 4RVxuhe38Ed5S6ZHCdgmuJ5OPs4GE45huskXNxh2mhBQ4BgNV5wKSsULz+ApdE+j 3s+1L3gOuZB/Rby3Qn3mbhYovpF+fFGUqL6jtNaytv5zAi8595FSaayP/l9perBm ODniNok/ZqzVPuF/K04GZtIhPZjW7SDjypJDXJYH7kjeMCrmyemi/FeP+kKSNDqm Hmwm7tFbgSVhjqMq6m5nIGMFUByNhsejt++ygVAc9hOEN0q2AShsDd5pXRieU40P TyFDfv4Cd7uXX1lDtyTgMk5XryyLddjBcxjaJznILTmtsp7ynEXC6KkPA1n85elp RlZUmt7tFQ7KjLWI/b+M69FfBx6Hh+WsEUE+VsjOcp0iJJBkzCuIO60cF2H379US O5dVYd4ZcVW+8Y/GjFswl9TexuPXEWiDsRR7QTI2ZQW8ueCKxHGU8MjN+q+9stTE azTAQwAFnntGP/jflIiTXnnmW+bLuvB0FGuacRHu0pdZ8Q4K6pW349L9WT49UkmA 2AQ6qSCZog0uBsepd/K5tVxrDlyJFwIDAQABAoICADimVPhqU9YaSD3fmdoVOuT+ gqo7121v3IvanM58lTVyAHoWZ1I5GZpMzYxFm5dg61j1eG9iLwb84kGJzsNFnMRw RP0deGBi9fnuADk6roXfURe5XPTnPrOHG3G3qmy+X/A3jqRZuXYFrbicWkXeG3/1 1rW27S68bnoiPBOWQfpRzmLJYWlKu7L5UaWropjoO2pjpPZOmyGmGFCQwJtewBwQ J42hkYQ/BM9tSuJgQleqDsL4XLGTWFecw2x3+sq03KtuZypYrkUPCNAyWrwt/sTx iqQNwhdsdI63Fo66FTu6dstwuNufA8vACJfL2++Je2/eusUi5cL6PrhuTXYWyF3c T8yA5+A1oS+sXQRQzMWP5Jsu7PDKWTSnB294zVVLw3v1x4T/qkJ1Kd5VNZVQqlFf hi7FqxC+CMvyULfK4g+6p5CY87QwgkuxrYN27+jQNFNTpkcb2LrrPRz/ogw7KHm1 rpvnHnhHWmrYOecxDBXqFO34zsLbVHuLH+lFvIsupgtIKT/FtZ2XYOQPvnTqiK6a AKNAnV8wFKK6pdD1O3JmNMpBbCvfm4fKhJ+Wumu0tyY/qE8ay95gJkf8mDal3CVa xMMqXVEbxXZGDrhYXHpjZqPr0eKkh9f1QoiPxaRXfEIAhvggpdd5SYzUPvI5zZIS eqGx125kP/eDQR+n1TtJAoIBAQD0q2rbNBmdLBH9D1eva0NsJlswrVOm+YRIAshN +89wvAN/2YKS78tPXl9snjnviAOAHNVL4yNpemWmxipVg5C6SOYMETN8Xo/UGzE0 yfLReO2ndukyX63CaUaiZMDz++ARuyW7GpWPj6xrmt1j2chpvFFilbORreXNlzSe AwVL7jLwSGp84CF2Pgb+Mm9yap+DRr8k6C99LN/6xYJbajzqIu6e6PtFSxx01fce 6JD0AdSfc9q3KZ65B8uw3WGQXRGXcoUPnsc/HA9leZJlhBTGzDShSIogqbC89vKK YE8ux3PK+T12m6DFkvITsaqIHE2o70843DEFNZcJLE4k9r/lAoIBAQDO1fXfmylh aeYNmoWYt6LwxH2ZdGZAHpZjA1QAJHd1TRoskOgOCY22KztQLDqyLv4cVX0QuU6J pdE1R+SRNSL2BTp4YLZ2bPixUjaWL2br1tupVy+WgPwPNC5oQPbhnMWxy+15gR14 X5UBNF/SCDL2s9enLUHfBrkpB/6KqFl5N3WRxolaNJaE85dNHfRbW6JZesm/+DER SE+5QTNZfY9jyjseUqFCgTgktswPwdeO41PHPofkfYgANjoMYeA+b9I5aXrMNqmD nGLiNe6yuYhaBI1GfDBvq2wLzkKl9rKLcvlSSokUwY1BD9Z7NcE0CNZoJMBjOtbm fJVN+hFr6f1LAoIBAQCC8hc/eDPZNZPvDz4LqWmtQR3/AFTMAbC1ZZ/UdNeB624o B75la6cxND34APra4r2U3FmfwtHaCuLKjjZsC/zyZj+Q58fZYTay+1arfQXS7Fit DuwhxKlXakaedTP7oKs8ch/wcnrnGara8Ehav10OkfYwwBQZ/KsIDEvh4ZX9HF/w z6EGcmIWSX4un8mbv8rdVIjKdOWtpc2+BeUNjd9KJCX3sJOCc3+oXDdlOG0T2sL0 D+pXqxPCzZRLdUBZJiZbGrRyNrVGZnsrARTD9hu0hegJBay/bHIlwDjwrDjUvXSQ hjJJ/2LdOxcKSUUOka9SobmRoe8ubY8HHso36EOtAoIBAQCr+KXX5xB+2CfZA7M0 iOrHOPgdEPS7NzNe27OJ8sgIFbU/fLQUh8j1v/gu7rdW00+gi0vTDd/I/r91h3L5 cK7C0xIMaI0M5gnYlTyhnoP6bshwgfclMdVhZsd3Exyx9UFCVQX70miIXyBqwfsx jHOjP2B8tVphbxugi+8Npm/OI1hzfhlRkQvdOxN/oPo8w3G26Cq6nEdf0TnIE/f3 3jfMhqakzZsayom9rOb56veo7EYKEWm3hs//LRcSmIZ0I1EtPxBEnuZOcUaeQq1W mIBQKBy2kCdNkb/iCPrNNtK4sz2tOB/FzC//+oUgKE+dTgPGz1fOqWtodAlHrjWx /fkFAoIBADk3d8FxNXgpv8imDzUTg3ONN9sbzqHjb9/6HKAYpN4Ez535Kr9rIJ1U D+z4VC7X5Gd5GrikoqsikotNEMJmYR/5Z0ojbZPdcaLWsIWXiAQksQOCodloQ+6+ QkJ2U8Be9y41F2psiq4s0E326rufobj3NSyk+5LYizrjdB/S7CeuehQnq7nA99A6 7uvmD4Kmh+EfDggS7sKQoIS9nLzraGpdjokFk56vtKH0TbUlrgoMTdUuNUBRSD8R O0KT1VLB4wrlMAuVQ+wKs/dOFRwHIMNl2EaBoXCkYE4sjl9776r1kIUJ/ZDt7+FZ H6CKoxjdh97Zzxo1Up2PTOOpcXfE6GA= -----END PRIVATE KEY-----"";

$data = 'plaintext data goes here';

// Encrypt the data to $encrypted using the public key
openssl_public_encrypt($data, $encrypted, $unformatted_pub);

// Decrypt the data using the private key and store the results in $decrypted
openssl_private_decrypt($encrypted, $decrypted, $unformatted_priv);

echo $decrypted;

//echo $pubKey;


?>

I am unsure how to properly encode the public key, any and all help is much appreciated.
","The following code generates the keys and everything works as expected, but your hard coding a public key which won't work for the private key which gets been generated:
<?php     
$config = array(
    ""digest_alg"" => ""sha512"",
    ""private_key_bits"" => 4096,
    ""private_key_type"" => OPENSSL_KEYTYPE_RSA,
);

// Create the private and public key
$res = openssl_pkey_new($config);

// Extract the private key from $res to $privKey
openssl_pkey_export($res, $privKey);

// Extract the public key from $res to $pubKey
$pubKey = openssl_pkey_get_details($res);
$pubKey = $pubKey[""key""];

$data = 'plaintext data goes here';

// Encrypt the data to $encrypted using the public key
openssl_public_encrypt($data, $encrypted, $pubKey);

// Decrypt the data using the private key and store the results in $decrypted
openssl_private_decrypt($encrypted, $decrypted, $privKey);

echo $decrypted;
?>

Instead you should be doing the following to test, generate your keys then hardcode both:
<?php  
$pubKey = '
-----BEGIN PUBLIC KEY-----
MIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAvucXbUOp6VBweTvmJQeS
S//VlWbqDmoxLB9Ru5OWWqU+hDbYNcusc92W08rqrlJkaQRyhUn30vF7nqrQKBPf
hj9sX5s5AqPkGH7Ygvl7zjNTRY4PTGnaxgJs5PJgiGqusdmT6OMv6IwBUuk463ao
YzYIyLOmzmi/nKi0DkAw5B1NHIXtb9XMrb8vBskit+gbjKuXet2kXslKkNZncUUS
/AbchHZDaw192n0s6yhOJCe4nzvrPoO/1BnqLjaQbkMwoKXhwoAxByyiUVNpVtN9
cykZl9TM2mjYPFDXnNBkiV5HURJP64EVoXu69qPCORtOxvTQ3Jhz7Z2brtEQFtxg
vfQnm4FuiYnVXSwLte3IC+cEDbn3++x3CuHPIe4ioQwR/VxnzY7uvZASh4qPG4Re
hWbQgU+i5MIqwnTW/IA8XreD/kzgmYk+qXWHUxAZpTHfHxUGUGZZDhYGPpdhYi6L
Cw45FZXDjvLRB3bYOUw9M8s4V7uMEFSg5cZdr7smCzhsF3WNysumlCEK/FEHmszW
yDnYqZMwbgkEb4m6hxsxzEpo41LrxSnAVO3OWLsS9Llf3J63xN8IaW7e3vpif1+n
I4TU2efSyy+v9AHuHGIOyIOI7fQjWNYORtsQGNp5OZaekvStHyu5qDPrISiY90Ty
qihrmpm2PtYASEc1/MDlFY8CAwEAAQ==
-----END PUBLIC KEY-----';

$privKey = '-----BEGIN PRIVATE KEY-----
MIIJQgIBADANBgkqhkiG9w0BAQEFAASCCSwwggkoAgEAAoICAQC+5xdtQ6npUHB5
O+YlB5JL/9WVZuoOajEsH1G7k5ZapT6ENtg1y6xz3ZbTyuquUmRpBHKFSffS8Xue
qtAoE9+GP2xfmzkCo+QYftiC+XvOM1NFjg9MadrGAmzk8mCIaq6x2ZPo4y/ojAFS
6TjrdqhjNgjIs6bOaL+cqLQOQDDkHU0che1v1cytvy8GySK36BuMq5d63aReyUqQ
1mdxRRL8BtyEdkNrDX3afSzrKE4kJ7ifO+s+g7/UGeouNpBuQzCgpeHCgDEHLKJR
U2lW031zKRmX1MzaaNg8UNec0GSJXkdREk/rgRWhe7r2o8I5G07G9NDcmHPtnZuu
0RAW3GC99CebgW6JidVdLAu17cgL5wQNuff77HcK4c8h7iKhDBH9XGfNju69kBKH
io8bhF6FZtCBT6LkwirCdNb8gDxet4P+TOCZiT6pdYdTEBmlMd8fFQZQZlkOFgY+
l2FiLosLDjkVlcOO8tEHdtg5TD0zyzhXu4wQVKDlxl2vuyYLOGwXdY3Ky6aUIQr8
UQeazNbIOdipkzBuCQRvibqHGzHMSmjjUuvFKcBU7c5YuxL0uV/cnrfE3whpbt7e
+mJ/X6cjhNTZ59LLL6/0Ae4cYg7Ig4jt9CNY1g5G2xAY2nk5lp6S9K0fK7moM+sh
KJj3RPKqKGuambY+1gBIRzX8wOUVjwIDAQABAoICADNLEl9YY+n9pArfDkp6y1NC
TVgUS+VNoSKy05or4KVAaxjJR7TEofSL4H/NsNrf5nzVJhQsOLtkCQwr5zwtgsym
c+8IXPwZnyr5wiEG+b4AymoQ7olgk9jKRAoMGeXtjDzbMkPL705zd9OYOKQDwODP
XvLWWoZxXLKyHZcKplhUiyiTz6VR8+nnSbJwDrUNV4GnhU8NCKIzQabDBQ5JOf2f
tladFCZKfLtdENmqfbx3M8MNLXshmURbJjH+lTYbNZCkoZFKMmI0GvTxDYe30ahE
rcy+77/rldY2/ofy8mB6hX0CB5lGmNJH1Yd5nrELZlJM62WqTNPWmkMRh1otIozQ
o9di4TtT9rIqEqv4t2O3FmX/t/1liG1hwwvlgyLR5Df27vVGQRvaawutLqeWjauj
YWoiT/V4dimwHB/ZO4AsrJ8Q6hI7QPbJEhd6nzShe8bRPxfO6kYX7FaK6DjpcC9T
vCbnrCXz/h3yktiYI3a/uUJL28RcoIsbaIzQY4h/g7ga7IrGIINmYiAvv2mZd1LF
TvqgN6I5bkmBVxnnxBRhFftLP7lZ6XZ+mE5DQmv4lgPIJ/78hWIEq1yjAVVVx33E
YYo7pXGx48yVVEjyNHFORTdu1ZA8JNdNoknubCErjwc5Q13+WzGCnZWmBgsG08uK
IzTe7astCMQJOBrEmOMpAoIBAQDfuApodaYEltO/Vrh/Jwp+8MqqRo2KHrT5Sq/N
z0rN/Gymm3IpsNtoMZk5bQApq9EvLG4szCIia3c4pJuBIsS1v2/wehV3E4pKSUSY
IRWttPVR70O/Tf6tj6jv3MAnA/VgPtd6OxSLamjAQcL+SiTwxea4W4ApMl4vmamA
5/PoMidOauNMK32nQBs0gQHvSsavvMbvFnB8KqicRmjc9GmULToDEU6ywf1Obe8d
OpDaS7yhaULmRpcv/MytkbgKrVN5FPlUzyMGGIxfwBuepyeEB6noR2pGfxUc4+v0
T1/vFi8VQsdx21HiP4VXqAj7RIboXTKypVIFS2Gr6Gcg+pDVAoIBAQDactocjdtY
5ylU6R9m3/pZQmSZS62LVI6TIRzLZNmx5L+qbj/XxEV1E7X6kazKJIxln7hsPXII
nYUXrhVhCZ5Ov+SmnXP1R092tgfjF3b7CUJcLTvQUMFdd1ksMguJaLBorq3g3xYp
hqmiwsk+fqOh93qExCKp3svNUT5Q6rPfZMISkfbxMWp+EtWR8M6OXAM3enw0Ceer
ZvTqrrtbgUpjKFW3B4lTb6y96Mu5uCB80PuoDxc9ltqEWtHgcxc3ew/xPgPEoyJO
WdRVGd0jVeZOE0o9IOY0punyfH1fCB0HNGDJUtS6XC4jgsDDUtCHxlLZQvmoqT0G
nU344duhK97TAoIBAClQrKNj7rf0PsCcPFBHHnoY7+SISQVT7GoJb/QbLx5hWpNe
K7QlVC+m0Tw4tAn+EBCdLO+a90bR/993DrzHdfp2ky6e7S3jbuuPIlrR6VX+EDwE
asd+mOTmnfVGGDpcUclncZXCKWYhzZyLyH37pVzNv3EWfNGe2qQBxbrnmzSrZnTl
6nobogXsIdoNZRUTAyRbQYXP6BAWNLM/kYgUnxbdT1RXsufySVxdkwYb1bpquDg6
3z71lGApWIdJXOqj3cGDrRQLeNVcXTglmzQufG62l5ss7SR9vaFrOh0RN49I0oMj
pP+S2ElnH7Hzd00n954b8Avr2fzeUfhUYA9IFs0CggEBALLhTd4IA9BfKqdPZtl1
G6owBfTJ1ci8ayvr94pOgT19Fb5YHYtwO3hNtb0DwTyehSFKk1h/UHvhkXT8pqEZ
oTrXRENzt9rolBefpAG/2zxiLqcQm2RQXKdO7gSUzoGs6pguQlBcHefPT+XqH6U/
Snt9DiTd/4ye1sDAgIj+SGDsP0e5oz+KuauXfK/PQzWr/y5U7JQocD8ZRgFPKDkc
PG/KPbZtQ3TBg/DXSsxADMpoz0qlYOCcQUAUprxnQmG6MinYIHnLJHKIeKlfToh6
9OaGQUqhQCFpdTWN35QMLskRiRgS7gPVLCsEDRllHUGxk3I5t/r26vQZqBnfyVvH
cuUCggEAZABhmVc4r52E2AcRpCm7uCPLuk2QYtAv/XF3MWF6tfksMF1E0Fp+rV4E
GI/THL4Epw61rX5Y2vxQSNaaxxqJGjjfXsmqB1kzMZ64Kh45lGnfDNj3Yc1/V1cc
hYat3JDUl1kHcsJ5BapQ9G88r/lYD5exkygD8gk67b2li+40ADN7Lge3SzM9p3G6
BZLwjMTT6yarqFIVikN4q1KcZmYY0AHukP3nGR0cYMktAuUJuw/SBvt8gvQF1qPZ
1Fiw0uEGjVUhGqoibtzsCTjznCCIgvojjO58XONx0+zqOVFmGMmKuO4/Py8iPYCx
CHeWpc4RMhl4p+nE9KOEzcDS5RD1SA==
-----END PRIVATE KEY-----';

$encrypted = 'jZMLeJDYdtJI/PZJlDkTc7G4+BzhMhVDf+/S2FJg+AcyRGWz9D3C2l7hrK+IV2DZEYXfSnUibHddMZ+PoGbvWXUoa3geyKPi7ATmaI+ugiZpBJ5wBFi2wdN3N2WbInZ96xr5kjimA1wzLYNh9ig3yM4Mj+imD8o3eF4qAWrpcojgN7Lio/E5BeLSiilSpAY3z2ZTWJfB6g5JOo/h5kIbS1qKRCf1VYCtCqSQf7M7+421M3VKYdt9vBa2/53vzgkCrKEw4kPiBUFzuAPNcwa+cc6j3IsyRzZ6ownabBbYkrPHxzAlNDKABPxbU8v+8yJXtE1kEwAbr62AmJVLXuvdaX9St8gTYfCMxnP9VAWZ8Y4K5dwuG/6wTz/fDFTK2MgRd6WErAuj5mdLjMa8Yc5/Wt0Yut0grtdarNq3m5Z0Quhir99L0xHAmuKtNztPJC1wnEbHFfZ4kRjxG53SE19baeBpLNC0erfoWF3aQt1aJHqw2xbLdV8CnKMaVAw1qjdRu4WFml/EVokgTHDqm4SGlgwdhXtWY/T+p1zhu7gOl2PuArPyPGpYNh57Ib7TlwjvaHOO73O5xQqm+YUElh7MjwvH45jTekbWZHjc2fyN7pXtdnus+WOjKhopL09LPy4M17DARUSedypSiZL3gTiIz6qqJ31XQIsEaKWOMosYOjY=';

// Decrypt the data using the private key and store the results in $decrypted
openssl_private_decrypt(base64_decode($encrypted), $decrypted, $privKey);

echo $decrypted;
?>

Which will output plaintext data goes here.
","1256","<php><encryption><public-key-encryption>","1","3","1","2017-12-28 23:32:56","48015589","16","2","6845464","","2017-12-28 23:22:04","2017-12-28 22:50:31",""
"5948916","Can I use OpenSSL just to encrypt URL parameters?","I just need a public-key encryption scheme that I can use to encrypt parameters being sent by an iPhone app to PHP on a server.  I can't use GnuPG because of its license.
The requirements are that the app on the phone be able to communicate with the server without the user entering any credentials.  My goal here is to prevent examination of the parameters in the URL and abuse of our system through spoofing.  Thus all copies of our app in the wild can look like the same user for purposes of encryption.
I haven't been planning to use HTTPS, because (if I'm not mistaken) it needs sessions or certificates and it seems excessive (but let me know if not); I just need to encrypt and decrypt the parameter portion of the URL.
Since the data to encrypt with an RSA public key must be shorter than the key, the standard procedure is to generate a symmetric private key, encrypt that with the public key, encrypt the data with the generated private key, and then send the generated private key and the encrypted data to the server.  It looks like I have most of what I need to encrypt the generated key (except RSA_size() crashes in the process).  But I don't know how to specify and set up the encoding of the bulk data with Blowfish or some other algorithm supported by PHP.
Thanks for any insight.
","I think, and I'm not very sure - if you need to encrypt data to send and you are not being connected via HTTPS, then you can try to implement some JS encryption module. (I have found http://www.hanewin.net/encrypt/) You can generate the keys based up on username or client pc's name.
","1256","<iphone><encryption><openssl><public-key-encryption><url-parameters>","1","1","3","2011-05-16 09:42:28","5949549","2","1","407700","","2011-05-16 09:42:28","2011-05-10 10:53:06",""
"5948916","Can I use OpenSSL just to encrypt URL parameters?","I just need a public-key encryption scheme that I can use to encrypt parameters being sent by an iPhone app to PHP on a server.  I can't use GnuPG because of its license.
The requirements are that the app on the phone be able to communicate with the server without the user entering any credentials.  My goal here is to prevent examination of the parameters in the URL and abuse of our system through spoofing.  Thus all copies of our app in the wild can look like the same user for purposes of encryption.
I haven't been planning to use HTTPS, because (if I'm not mistaken) it needs sessions or certificates and it seems excessive (but let me know if not); I just need to encrypt and decrypt the parameter portion of the URL.
Since the data to encrypt with an RSA public key must be shorter than the key, the standard procedure is to generate a symmetric private key, encrypt that with the public key, encrypt the data with the generated private key, and then send the generated private key and the encrypted data to the server.  It looks like I have most of what I need to encrypt the generated key (except RSA_size() crashes in the process).  But I don't know how to specify and set up the encoding of the bulk data with Blowfish or some other algorithm supported by PHP.
Thanks for any insight.
","Another possibility is not to use a public/private key encryption, but to do symmetric-key encryption.  What you would probably want to do is each session have the client app generate a key, use a single HTTPS connection to send that key which the server can use to decrypt parameters.  Now all of your regular connections can just have the encrypted parameter using that key that only the client and server know.  It should be unique per device and probably session.  You might want to associate a time stamp with it, so that you know that after it has been inactive for however long it can be discarded, or seen as coming from an invalid session.
","1256","<iphone><encryption><openssl><public-key-encryption><url-parameters>","1","0","3","2011-05-16 09:42:28","5949549","2","1","407700","","2011-05-16 09:42:28","2011-05-10 10:53:06",""
"5948916","Can I use OpenSSL just to encrypt URL parameters?","I just need a public-key encryption scheme that I can use to encrypt parameters being sent by an iPhone app to PHP on a server.  I can't use GnuPG because of its license.
The requirements are that the app on the phone be able to communicate with the server without the user entering any credentials.  My goal here is to prevent examination of the parameters in the URL and abuse of our system through spoofing.  Thus all copies of our app in the wild can look like the same user for purposes of encryption.
I haven't been planning to use HTTPS, because (if I'm not mistaken) it needs sessions or certificates and it seems excessive (but let me know if not); I just need to encrypt and decrypt the parameter portion of the URL.
Since the data to encrypt with an RSA public key must be shorter than the key, the standard procedure is to generate a symmetric private key, encrypt that with the public key, encrypt the data with the generated private key, and then send the generated private key and the encrypted data to the server.  It looks like I have most of what I need to encrypt the generated key (except RSA_size() crashes in the process).  But I don't know how to specify and set up the encoding of the bulk data with Blowfish or some other algorithm supported by PHP.
Thanks for any insight.
","This is possible.
You can just use the RSA pubic key cryptographic algorithms, without any of the overheads and infrastructure that PGP or X.509v3 wraps around them.

Generate a public-private key pair.
Store the private key securely on the server.  Protect it well.
Distribute the public key to the iPhone app.
The iPhone app encrypts the data using the public key.
The iPhone app sends the encrypted data to the server.
The server decrypts the encrypted data using the private key.

You can play around with this idea using the openssl command line tools:
On the server run:
$ openssl genrsa -out myprivatekey.pem 2048
$ openssl rsa -in myprivatekey.pem -pubout -out mypublickey.pem

Copy the mypublickey.pem to the client, and on the client create some data in data.dat and run:
$ openssl rsautl -encrypt -pubin -inkey mypublickey.pem -in data.dat -out enc.dat

Send the enc.dat to the server, and then on the server run:
$ openssl rsautl -decrypt -inkey myprivatekey.pem -in enc.data -out data2.dat

The public key does not have to be protected, so you can distribute it to the iPhone app in any way you want.  For example, embed it into the app, put it on a public Web server, send it to the client by insecure email. There's no problem if the bad guys get their hands on it.
Note: in the example I've created a 2048 bit RSA key.  Keep in mind that you need longer bit length keys for asymmetric algorithms (i.e. public-key algorithms) to achieve the same level of security as keys used for symmetric algorithms.  Don't go thinking that 128 bit AES encryption is very strong, so I'll just create a 128 bit RSA key -- that is way too short for an RSA key and will not give you the security strength you expect.
Now you just need to implement that by calling the openSSL libraries in code.
","1256","<iphone><encryption><openssl><public-key-encryption><url-parameters>","1","2","3","2011-05-16 09:42:28","5949549","2","1","407700","","2011-05-16 09:42:28","2011-05-10 10:53:06",""
"29204681","error:0D0680A8:asn1 encoding routines:ASN1_CHECK_TLEN:wrong tag when encrypt RSA public key - passing from the other device","I've receivced RSA public key from another device.
and I create public key with these byte arrays for encrypt any strings.
but my public key is invalid.
retrevie many questions but i don't know why it happens.
please help me.
step is below.

passing from public key - byte arrays - another device.
generate PublicKey object with X509EncodedKeySpec.


 StringBuilder builder = new StringBuilder();
 for ( byte key : mKey ) builder.append(key);
 byte[] keyBytes = Base64.decode(builder.toString().getBytes(""utf-8""), Base64.DEFAULT);

 PublicKey publicKey = KeyFactory.getInstance(""RSA"").generatePublic(new
 X509EncodedKeySpec(keyBytes));


mKey are byte arrays of public key.
but now, exception occured.
exception :
03-23 15:23:53.468    5641-5641/updator.firmware.mpaio.samilcts.com.mpaiofirmwareupdator W/System.err﹕ java.security.spec.InvalidKeySpecException: java.lang.RuntimeException: error:0D0680A8:asn1 encoding routines:ASN1_CHECK_TLEN:wrong tag
03-23 15:23:53.468    5641-5641/updator.firmware.mpaio.samilcts.com.mpaiofirmwareupdator W/System.err﹕ at com.android.org.conscrypt.OpenSSLKey.getPublicKey(OpenSSLKey.java:101)
03-23 15:23:53.468    5641-5641/updator.firmware.mpaio.samilcts.com.mpaiofirmwareupdator W/System.err﹕ at com.android.org.conscrypt.OpenSSLRSAKeyFactory.engineGeneratePublic(OpenSSLRSAKeyFactory.java:47)
03-23 15:23:53.468    5641-5641/updator.firmware.mpaio.samilcts.com.mpaiofirmwareupdator W/System.err﹕ at java.security.KeyFactory.generatePublic(KeyFactory.java:171)
03-23 15:23:53.468    5641-5641/updator.firmware.mpaio.samilcts.com.mpaiofirmwareupdator W/System.err﹕ at updator.firmware.mpaio.samilcts.com.mpaiofirmwareupdator.MainActivity.processGenerateKeyForUpdate(MainActivity.java:253)
03-23 15:23:53.468    5641-5641/updator.firmware.mpaio.samilcts.com.mpaiofirmwareupdator W/System.err﹕ at updator.firmware.mpaio.samilcts.com.mpaiofirmwareupdator.MainActivity.access$1600(MainActivity.java:53)
03-23 15:23:53.468    5641-5641/updator.firmware.mpaio.samilcts.com.mpaiofirmwareupdator W/System.err﹕ at updator.firmware.mpaio.samilcts.com.mpaiofirmwareupdator.MainActivity$5.handleMessage(MainActivity.java:411)
03-23 15:23:53.468    5641-5641/updator.firmware.mpaio.samilcts.com.mpaiofirmwareupdator W/System.err﹕ at android.os.Handler.dispatchMessage(Handler.java:102)

cf.
received PublicKey byte arrays :

'0x47, 0x95, 0x1a, 0xe6, 0xf1, 0xba, 0x31, 0x3b, 0x73, 0xc7, 0x79,
  0x75, 0x72, 0xc6, 0x6d, 0xcc, 0xf0, 0x6b, 0x0f, 0xfa, 0x16, 0x0e,
  0xed, 0x2d, 0x85, 0xeb, 0x17, 0x89, 0x91, 0x83, 0x59, 0x64, 0xda,
  0x04, 0x69, 0x31, 0x45, 0x16, 0x73, 0x1b, 0x46, 0xab, 0xe0, 0x2d,
  0x6e, 0xda, 0x7d, 0x51, 0xc9, 0x2b, 0xc6, 0xe9, 0x73, 0x19, 0x2e,
  0x3d, 0x39, 0x12, 0xd6, 0x44, 0xf8, 0x71, 0xe0, 0x49, 0xc4, 0x54,
  0xd5, 0xd1, 0xe9, 0x1f, 0x03, 0x6f, 0xd6, 0x2b, 0xf9, 0x77, 0xd8,
  0x83, 0x7e, 0x9d, 0x1d, 0xf7, 0x46, 0x5d, 0xf4, 0xac, 0x9f, 0x6b,
  0xe7, 0x2a, 0x68, 0xb9, 0x55, 0x01, 0xd3, 0xde, 0xbb, 0x1b, 0x93,
  0x3b, 0x0a, 0x78, 0xe2, 0x06, 0x1c, 0x5d, 0x18, 0x61, 0x2d, 0x8f,
  0x23, 0x4e, 0x3c, 0xbb, 0x35, 0xa5, 0x99, 0xb4, 0x2f, 0x9b, 0x9d,
  0x2b, 0x67, 0xfb, 0x89, 0xba, 0x1c, 0x8f, 0x48, 0x9c, 0xa7, 0x99,
  0x5d, 0xa0, 0x11, 0xe6, 0x1d, 0x5a, 0xd2, 0x18, 0x03, 0xc5, 0x98,
  0xf5, 0x26, 0xb2, 0x14, 0xaa, 0xfd, 0x77, 0x8e, 0x78, 0x36, 0xc4,
  0x46, 0xb2, 0xea, 0xd0, 0xa2, 0x5d, 0xb9, 0xc5, 0xae, 0x47, 0x17,
  0xc1, 0x93, 0x42, 0x12, 0x9c, 0x3a, 0xa0, 0x71, 0xb5, 0x32, 0x51,
  0x74, 0xa0, 0x6d, 0x2b, 0xbe, 0xc8, 0x4f, 0xc4, 0xf3, 0x5f, 0xd3,
  0x4f, 0x6b, 0xf9, 0x7a, 0x5d, 0xfa, 0x93, 0x8f, 0xf2, 0x00, 0x1a,
  0x92, 0x18, 0x41, 0xd5, 0x83, 0x06, 0x98, 0xeb, 0x38, 0x86, 0xbe,
  0x3c, 0x20, 0xe5, 0x19, 0xdf, 0x8c, 0xac, 0x38, 0x83, 0x5e, 0xde,
  0x33, 0x62, 0x33, 0x14, 0xee, 0xe3, 0x6c, 0x6b, 0x02, 0xee, 0x0a,
  0xfe, 0x79, 0x5e, 0x32, 0x8c, 0x2e, 0x20, 0x05, 0x59, 0xed, 0x98,
  0x89, 0xf1, 0x9b, 0xbf, 0x5a, 0x21, 0x25, 0x1d, 0x51, 0x65, 0x0e,
  0xbd, 0x03, 0xde, '

thank you.
","","1254","<java><android><rsa><public-key-encryption>","1","","0","2015-03-23 06:53:55","","6","1","","","","2015-03-23 06:53:55",""
"46275848","How to replicate hash_hmac('sha256', $key, $secret_key) function in Swift 4?","I've tried generating the hash_hmac('sha256', $key, $secret_key) php function equivalent in Swift 4 without success, after using libraries like CommonCrypto, CryptoSwift. I need these function for API authentication, using Alamofire library, which is a great library. Since i use Swift 4 the compatibility with other Swift libraries is not so good. Even with CryptoSwift which has the latest version(0.7.1) for Swift 4 i still get a lot of compatibility errors likes
enter image description here
","First of all it might be better to go straight for SHA512, SHA is notoriously easy to crack with GPU's, thus upping the memory scale a bit is not a bad idea.
Second, using CommonCrypto it is actually extremely easy to generate HMAC's, this is the implementation that I use:
static func hmac(_ secretKey: inout [UInt8], cipherText: inout [UInt8], algorithm: CommonCrypto.HMACAlgorithm = .sha512) -> [UInt8] {
        var mac = [UInt8](repeating: 0, count: 64)
        CCHmac(algorithm.value, &secretKey, secretKey.count, &cipherText, cipherText.count, &mac)
        return mac
    }

Where the algorithm is defined as such:
enum HMACAlgorithm {
        case sha512

        var value: UInt32 {
            switch(self) {
            case .sha512:
                return UInt32(kCCHmacAlgSHA512)
            }
        }
    }

My cipher text is cipherText+IV in this instance. When you are not using AES-GCM it seems suggested / recommended to HMAC IV+Cipher, but I cannot give you the technical details as to why.
Converting Data or NSData to a byte array:
var byteArray = data.withUnsafeBytes { [UInt8](UnsafeBufferPointer(start: $0, count: data.count) }

The reason for using an array is a substantial performance increase over Data, I don't know what the core team is doing but Data performs worse than NSMutableData even.
","1250","<swift><hash><public-key-encryption><crypt><swift4>","3","0","2","2017-09-18 14:37:20","46282026","2","1","","","","2017-09-18 09:25:17",""
"46275848","How to replicate hash_hmac('sha256', $key, $secret_key) function in Swift 4?","I've tried generating the hash_hmac('sha256', $key, $secret_key) php function equivalent in Swift 4 without success, after using libraries like CommonCrypto, CryptoSwift. I need these function for API authentication, using Alamofire library, which is a great library. Since i use Swift 4 the compatibility with other Swift libraries is not so good. Even with CryptoSwift which has the latest version(0.7.1) for Swift 4 i still get a lot of compatibility errors likes
enter image description here
","Swift 3/4:
HMAC with MD5, SHA1, SHA224, SHA256, SHA384, SHA512 (Swift 3)

These functions will hash either String or Data input with one of eight cryptographic hash algorithms.

The name parameter specifies the hash function name as a String
Supported functions are MD5, SHA1, SHA224, SHA256, SHA384 and SHA512
This example requires Common Crypto
It is necessary to have a bridging header to the project:
#import <CommonCrypto/CommonCrypto.h>
Add the Security.framework to the project.  
These functions takes a hash name, message to be hashed, a key and return a digest:


hashName: name of a hash function as String  
message:  message as Data  
key:      key as Data  
returns:  digest as Data  

func hmac(hashName:String, message:Data, key:Data) -> Data? {
    let algos = [""SHA1"":   (kCCHmacAlgSHA1,   CC_SHA1_DIGEST_LENGTH),
                 ""MD5"":    (kCCHmacAlgMD5,    CC_MD5_DIGEST_LENGTH),
                 ""SHA224"": (kCCHmacAlgSHA224, CC_SHA224_DIGEST_LENGTH),
                 ""SHA256"": (kCCHmacAlgSHA256, CC_SHA256_DIGEST_LENGTH),
                 ""SHA384"": (kCCHmacAlgSHA384, CC_SHA384_DIGEST_LENGTH),
                 ""SHA512"": (kCCHmacAlgSHA512, CC_SHA512_DIGEST_LENGTH)]
    guard let (hashAlgorithm, length) = algos[hashName]  else { return nil }
    var macData = Data(count: Int(length))

    macData.withUnsafeMutableBytes {macBytes in
        message.withUnsafeBytes {messageBytes in
            key.withUnsafeBytes {keyBytes in
                CCHmac(CCHmacAlgorithm(hashAlgorithm),
                       keyBytes,     key.count,
                       messageBytes, message.count,
                       macBytes)
            }
        }
    }
    return macData

    }

hashName: name of a hash function as String
message:  message as String
key:      key as String
returns:  digest as Data

func hmac(hashName:String, message:String, key:String) -> Data? {
    let messageData = message.data(using:.utf8)!
    let keyData = key.data(using:.utf8)!
    return hmac(hashName:hashName, message:messageData, key:keyData)
}



hashName: name of a hash function as String  
message:  message as String  
key:      key as Data  
returns:  digest as Data  

func hmac(hashName:String, message:String, key:Data) -> Data? {
    let messageData = message.data(using:.utf8)!
    return hmac(hashName:hashName, message:messageData, key:key)
}


// Examples
let clearString = ""clearData0123456""
let keyString   = ""keyData8901234562""
let clearData   = clearString.data(using:.utf8)!
let keyData     = keyString.data(using:.utf8)!
print(""clearString: \(clearString)"")
print(""keyString:   \(keyString)"")
print(""clearData: \(clearData as NSData)"")
print(""keyData:   \(keyData as NSData)"")

let hmacData1 = hmac(hashName:""SHA1"", message:clearData, key:keyData)
print(""hmacData1: \(hmacData1! as NSData)"")

let hmacData2 = hmac(hashName:""SHA1"", message:clearString, key:keyString)
print(""hmacData2: \(hmacData2! as NSData)"")

let hmacData3 = hmac(hashName:""SHA1"", message:clearString, key:keyData)
print(""hmacData3: \(hmacData3! as NSData)"")

Output:
clearString: clearData0123456
keyString:   keyData8901234562
clearData: <636c6561 72446174 61303132 33343536>
keyData:   <6b657944 61746138 39303132 33343536 32>

hmacData1: <bb358f41 79b68c08 8e93191a da7dabbc 138f2ae6>
hmacData2: <bb358f41 79b68c08 8e93191a da7dabbc 138f2ae6>
hmacData3: <bb358f41 79b68c08 8e93191a da7dabbc 138f2ae6>

","1250","<swift><hash><public-key-encryption><crypt><swift4>","3","2","2","2017-09-18 14:37:20","46282026","2","1","","","","2017-09-18 09:25:17",""
"27659493","getting Exception java.security.InvalidKeyException: Wrong format: RAW bytes needed","Im trying to write a program for encrypting, signing and decrypting files using private public keys .  While running the program below i receive the following error - 

Exception in thread ""main""  java.security.InvalidKeyException: Wrong format: RAW bytes needed at com.sun.crypto.provider.CipherCore.getKeyBytes(CipherCore.java:623) at com.sun.crypto.provider.CipherCore.init(CipherCore.java:494) at com.sun.crypto.provider.CipherCore.init(CipherCore.java:458) at com.sun.crypto.provider.AESCipher.engineInit(AESCipher.java:307) at javax.crypto.Cipher.init(Cipher.java:1226) at
  javax.crypto.Cipher.init(Cipher.java:1166) at
  Main.main(Main.java:87) 

MY CODE
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.net.URL;
import java.nio.ByteBuffer;

import java.security.*;
import java.security.cert.CertificateException;

import javax.crypto.*;
import javax.crypto.spec.SecretKeySpec;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;

import org.w3c.dom.Document;
import org.w3c.dom.Element;

public class Main
{   
    public static void main(String[] args) throws IOException, UnrecoverableKeyException, KeyStoreException, NoSuchAlgorithmException, NoSuchPaddingException, CertificateException, InvalidKeyException, IllegalBlockSizeException, BadPaddingException, SignatureException{
        //open the file containing keys
        File file = new File(""keys/ks_file.jks"");
        //cipher object that will hold the information
        Cipher aes = Cipher.getInstance(""AES/ECB/PKCS5Padding"");
        //create keystore object from stored keys inside the file
        KeyStore keystore = loadKeyStore(file, ""sergey"", ""JKS"");
        //messageDigest instance
        MessageDigest md = MessageDigest.getInstance(""SHA1"");
        //singanture instance
        Signature dsa = Signature.getInstance(""SHA1withDSA""); 

        //params for getting keys
        String allias = ""enc_key"", password = ""sergey"";
        SecureRandom s_random = SecureRandom.getInstance(""SHA1PRNG"");
        //create random bytes for semtric key
        byte key_bytes[] = new byte[16];
        s_random.setSeed(711);
        s_random.nextBytes(key_bytes);

        Key key = new SecretKeySpec(key_bytes, ""AES"");

        Key key_enc = keystore.getKey(allias, password.toCharArray());
        KeyPair enc_key = null;

        if (key_enc instanceof PrivateKey) {
            // Get certificate of public key
            java.security.cert.Certificate cert = keystore.getCertificate(allias);
            // Get public key
            PublicKey publicKey = cert.getPublicKey();
            enc_key = new KeyPair(publicKey, (PrivateKey) key_enc);
        }
        //cipher the file
        aes.init(Cipher.ENCRYPT_MODE, key);
        FileInputStream fis; 
        FileOutputStream fos; 
        CipherInputStream cis; 
        fis = new FileInputStream(""tmp/a.txt""); 
        cis = new CipherInputStream(fis, aes);
        fos = new FileOutputStream(""tmp/b.txt""); 
        byte[] b = new byte[8]; 
        int i = cis.read(b); 
        byte[] bytes = ByteBuffer.allocate(4).putInt(i).array();
        //update message digest for signature
        md.update(bytes);
        while (i != -1) { 
            fos.write(b, 0, i); 
            i = cis.read(b);
            bytes = ByteBuffer.allocate(4).putInt(i).array();
            md.update(bytes);
        } 
        fis.close();
        cis.close();
        fos.close();

        //encode the secret key
        /****************   ERROR HAPPENS IN NEXT LINE - LINE 87    *******************/
        aes.init(Cipher.ENCRYPT_MODE, (Key)enc_key.getPublic());
        byte[] cipherKey = aes.doFinal(key.toString().getBytes());

        //we save the final digest
        byte[] hash = md.digest();
        //init singature with private key
        dsa.initSign(enc_key.getPrivate());
        //update the signature with the hash aster digest
        dsa.update(hash); 
        //final signature
        byte[] sig = dsa.sign();

        //creating config xml
        try {

            DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();
            DocumentBuilder docBuilder = docFactory.newDocumentBuilder();

            // root elements
            Document doc = docBuilder.newDocument();
            Element rootElement = doc.createElement(""config"");
            doc.appendChild(rootElement);

            // signature elements
            Element sig_xml = doc.createElement(""sig"");
            rootElement.appendChild(sig_xml);
            sig_xml.setAttribute(""value"", sig.toString());

            // key element
            Element key_xml = doc.createElement(""key"");
            rootElement.appendChild(key_xml);
            key_xml.setAttribute(""value"", cipherKey.toString());

            // write the content into xml file
            TransformerFactory transformerFactory = TransformerFactory.newInstance();
            Transformer transformer = transformerFactory.newTransformer();
            DOMSource source = new DOMSource(doc);
            StreamResult result = new StreamResult(new File(""./config.xml""));

            transformer.transform(source, result);

            System.out.println(""File saved!"");

          } catch (ParserConfigurationException pce) {
            pce.printStackTrace();
          } catch (TransformerException tfe) {
            tfe.printStackTrace();
          }
        }

    /**
     * Reads a Java keystore from a file.
     * 
     * @param keystoreFile
     *          keystore file to read
     * @param password
     *          password for the keystore file
     * @param keyStoreType
     *          type of keystore, e.g., JKS or PKCS12
     * @return the keystore object
     * @throws KeyStoreException
     *           if the type of KeyStore could not be created
     * @throws IOException
     *           if the keystore could not be loaded
     * @throws NoSuchAlgorithmException
     *           if the algorithm used to check the integrity of the keystore
     *           cannot be found
     * @throws CertificateException
     *           if any of the certificates in the keystore could not be loaded
     */
    public static KeyStore loadKeyStore(final File keystoreFile,
        final String password, final String keyStoreType)
        throws KeyStoreException, IOException, NoSuchAlgorithmException,
        CertificateException {
      if (null == keystoreFile) {
        throw new IllegalArgumentException(""Keystore url may not be null"");
      }
      final URI keystoreUri = keystoreFile.toURI();
      final URL keystoreUrl = keystoreUri.toURL();
      final KeyStore keystore = KeyStore.getInstance(keyStoreType);
      InputStream is = null;
      try {
        is = keystoreUrl.openStream();
        keystore.load(is, null == password ? null : password.toCharArray());
      } finally {
        if (null != is) {
          is.close();
        }
      }
      return keystore;
    }

}

The specific line, in which the exception occurs is:
aes.init(Cipher.ENCRYPT_MODE, (Key)enc_key.getPublic()); 

","AES is a symmetric cipher algorithm, for this it needs a symmetric key, not a public key.
In order to create symmetric key, use helper class SecretKeySpec. 
Your encryption scheme should create a random sequence of bits as a key material for AES cipher, and then encrypt/decrypt this key material with Public/Private keys.
The message itself should be encrypted/decrypted with AES key.
","1248","<java><encryption><aes><rsa><public-key-encryption>","0","0","1","2014-12-26 16:58:28","27659728","5","2","1407656","","2014-12-26 16:45:56","2014-12-26 16:29:33",""
"7774625","sftp login with private key & public key no username and domain given","My client send me today a public and a private rsa key to login to the sftp server. Is it possible to derive the domain and username from these files, or did he simply forget to mention them? He send me an email with the keys in the attachement and said i could find all information in the attached files. 
","Take a look at the public key.  At the end of the key, there should be a string that looks like this:
= user@host

Assuming he created the key on the server, that's the host name.
","1246","<ssh><rsa><sftp><public-key-encryption><private-key>","0","1","1","2011-10-14 23:34:55","","0","","","","","2011-10-14 23:31:01","2011-11-12 18:30:40"
"14906574","unsigned long ints multiplication","I am creating a public key generator and I do c= p*q; Where p and q are large prime numbers, but I keep getting this for C  11875820813;
long unsigned int c= p*q;
printf(""C is: %d\n"", c);

I know I has something to do with my numbers, but I don't know how to fix this.
I am trying to multiply:
872017*533297
","You might be overflowing the value. Remember that on a 32-bit platform an unsigned long can be at most a little over 4 billion.
","1244","<c><public-key-encryption>","0","1","3","2013-02-16 10:44:47","14906584","0","","","","","2013-02-16 03:23:36",""
"14906574","unsigned long ints multiplication","I am creating a public key generator and I do c= p*q; Where p and q are large prime numbers, but I keep getting this for C  11875820813;
long unsigned int c= p*q;
printf(""C is: %d\n"", c);

I know I has something to do with my numbers, but I don't know how to fix this.
I am trying to multiply:
872017*533297
","32-bit unsigned long max value is 4294967295.
Your multiplication is 465044050049 which overflows the unsigned long.
4294967295 (ULONG_MAX)
  <
465044050049 (your result)
  <
18446744073709551615 (ULONG_LONG_MAX)

You'll need to use an unsigned long long (64-bit unsigned integer type) (supposing your system supports them, which all modern systems do)
","1244","<c><public-key-encryption>","0","1","3","2013-02-16 10:44:47","14906584","0","","","","","2013-02-16 03:23:36",""
"14906574","unsigned long ints multiplication","I am creating a public key generator and I do c= p*q; Where p and q are large prime numbers, but I keep getting this for C  11875820813;
long unsigned int c= p*q;
printf(""C is: %d\n"", c);

I know I has something to do with my numbers, but I don't know how to fix this.
I am trying to multiply:
872017*533297
","You can't do public key cryptography using only the built in integer types of C, regardless of platform. Contemporary cryptography deals with numbers that are at least 1024 bits wide, which, if implemented in software, requires libraries that support such large values.
","1244","<c><public-key-encryption>","0","1","3","2013-02-16 10:44:47","14906584","0","","","","","2013-02-16 03:23:36",""
"31233884","JSEncrypt producing different output for identical message and public key each time","I've got this simple bit of JavaScript:
<html>
  <script type=""text/javascript"" src=""http://cdn.rawgit.com/travist/jsencrypt/v2.1.0/bin/jsencrypt.js""></script>
  <script type=""text/javascript"">

    var message = ""This is my message""

    // we create a new JSEncrypt object for rsa encryption
    var rsaEncrypt = new JSEncrypt();

    var publicKey = ""-----BEGIN PUBLIC KEY-----"" +
      ""\nMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQK"" +
      ""BgQCQDxDFOYJpkCaqeX4CBVNCtBjX\nMZgGMo"" +
      ""lSs2wYrVu1ixr36KpeJcRcYhz+AnyhnUpYkgk"" +
      ""+hEqJtDSNirU5Dk5oVYYi\ngf2uLogV5Tp/ka"" +
      ""K49r9vtxldcHraZIgNQjcdeQUd/viKd/3DvM8"" +
      ""naWR/mTG0nCBE\nrEQkATW/xXynJh/COQIDAQ"" +
      ""AB\n-----END PUBLIC KEY-----""

    rsaEncrypt.setPublicKey(publicKey);

    var encryptedMessage = rsaEncrypt.encrypt(message);

    console.log(encryptedMessage)
  </script>
</html>

That I feel should be producing the same output in the console each time it runs, but it doesn't.
Example outputs:
abqE+YkCMKFWgsazbZpfGvoXLci9FL/wZLYUMR6ZFkolsvJC5MdJgq5yn+AXXy8xlKHDOry6czAaOQOTl2HXdKSfsypc8nqDU8Sx5PuEgMYjvJ/dEyfU6jVuxfH1Qmuk6aOGVHePNfDlC4kSjgp1RXToSP5NqAEi24EuMx3uulI=

OzZM03Pki3o631KOuZ5nyQKu1xXRbLHhrR0WnjE5Ns5SssoiCEwlrS+svtP0cbZaYWZJc+FlZQNFUam4iC233BKnY5Nrr5Ppj14eaBvJ4x3FR8FiLwtyEW7nTzisAS7Ys2RKPjUzmkiOCZHwIpXnUO10KVo8763+JIuDB0cDPS4=

Can anyone explain this behaviour?
","That is expected.
The RSA cryptosystem works in group modulo some prime number. To ensure that all possible plaintexts are encrypted with the same security, the plaintexts are padded to produce a padded plaintext that is slightly smaller than the modulus. Since the padding is applied before encryption, the ciphertext looks completely different.
JSEncrypt is based on JSBN which in turn implements only PKCS#1 v1.5 padding type 2 (RFC 2313). The second type of this padding introduces random bytes that are removed after decryption because of marker bytes. At least 11 bytes are needed for the padding.
If you want to check the interoperability with other implementations, you need to do a full encryption-decryption cycle and make sure that you get the same plaintext back.
Note that nowadays, PKCS#1 v1.5 padding shouldn't be used anymore and PKCS#1 v.2 OAEP is preferred which is also randomized.
","1238","<javascript><encryption><public-key-encryption><public-key>","0","1","1","2015-07-05 22:19:08","31235018","1","","","","","2015-07-05 18:56:56",""
"23416422","encrypt file with BouncyCastle , output look corrupted","so i using this code to encrypt my file
as you can see iam using public PGP
-----BEGIN PGP PUBLIC KEY BLOCK-----
Version: GnuPG v1.2.6 (GNU/Linux)

masdSFVkRBADYxPZYC+nu9nhSVkxcVkVJ5axZKzCRuygqUxka
kZIBy2CAQVKz5dBkRaUkaaksbcyautks7asaov26Fc9cT25Rvnh7
wYIJhcRoIl4cxashdgutasd0qfcOnVB5JVCQDhXclBW7kwCgkoUW
....
...
...
-----END PGP PUBLIC KEY BLOCK-----

the code works fine but i think the data of the encrepted file is corrupted
because it doesnt comes out in this format (like the key)
-----BEGIN PGP PUBLIC KEY BLOCK-----
Version: GnuPG v1.2.6 (GNU/Linux)

masdSFVkRBADYxPZYC+nu9nhSVkxcVkVJ5axZKzCRuygqUxka
kZIBy2CAQVKz5dBkRaUkaaksbcyautks7asaov26Fc9cT25Rvnh7
wYIJhcRoIl4cxashdgutasd0qfcOnVB5JVCQDhXclBW7kwCgkoUW
....
...
...
-----END PGP PUBLIC KEY BLOCK-----

am i wrong?
dont the output should be in the same format ?
using System;
using System.Xml;
using System.IO;
using System.Security.Cryptography;
using System.Security.Cryptography.Xml;
using System.Text;

using Org.BouncyCastle.Bcpg.OpenPgp;
using Org.BouncyCastle.Security;
using Org.BouncyCastle.Utilities.IO;
using Org.BouncyCastle.Utilities.Encoders;
using Org.BouncyCastle.Bcpg;

class CPGPencrypt
{
    private static PgpPublicKey ReadPublicKey(Stream inputStream)
    {

        inputStream = PgpUtilities.GetDecoderStream(inputStream);

        PgpPublicKeyRingBundle pgpPub = new PgpPublicKeyRingBundle(inputStream);

        //
        // we just loop through the collection till we find a key suitable for encryption, in the real
        // world you would probably want to be a bit smarter about this.
        //

        //
        // iterate through the key rings.
        //

        foreach (PgpPublicKeyRing kRing in pgpPub.GetKeyRings())
        {
            foreach (PgpPublicKey k in kRing.GetPublicKeys())
            {
                if (k.IsEncryptionKey)
                {
                    return k;
                }
            }
        }

        throw new ArgumentException(""Can't find encryption key in key ring."");
    }

    private static byte[] EncryptFile(byte[] clearData, string fileName, PgpPublicKey encKey, bool withIntegrityCheck)
    {

        MemoryStream bOut = new MemoryStream();

        PgpCompressedDataGenerator comData = new PgpCompressedDataGenerator(
            CompressionAlgorithmTag.Zip);

        Stream cos = comData.Open(bOut); // open it with the final destination
        PgpLiteralDataGenerator lData = new PgpLiteralDataGenerator();

        // we want to Generate compressed data. This might be a user option later,
        // in which case we would pass in bOut.
        Stream pOut = lData.Open(
            cos,                    // the compressed output stream
            PgpLiteralData.Binary,
            fileName,               // ""filename"" to store
            clearData.Length,       // length of clear data
            DateTime.UtcNow         // current time
        );

        pOut.Write(clearData, 0, clearData.Length);

        lData.Close();
        comData.Close();

        PgpEncryptedDataGenerator cPk = new PgpEncryptedDataGenerator(SymmetricKeyAlgorithmTag.Cast5, new SecureRandom());

        cPk.AddMethod(encKey);

        byte[] bytes = bOut.ToArray();

        MemoryStream encOut = new MemoryStream();
        Stream os = encOut;

        Stream cOut = cPk.Open(os, bytes.Length);
        cOut.Write(bytes, 0, bytes.Length);  // obtain the actual bytes from the compressed stream
        cOut.Close();

        encOut.Close();

        return encOut.ToArray();
    }

    public static string Encrypt(string file_name,string file_to_read)
    {


        try
        {

            byte[] dataBytes = File.ReadAllBytes(file_to_read);
            Stream keyIn = File.OpenRead(""pgpdata-public.asc"");
            Stream outStream = File.Create(@""myfolder\""+file_name);
            byte[] encrypted = EncryptFile(dataBytes, @""myfolder\""+file_name, ReadPublicKey(keyIn), false);
            outStream.Write(encrypted, 0, encrypted.Length);
            keyIn.Close();
            outStream.Close();
        }
        catch (Exception e)
        {
            return e.Message;
        }
        return file_name;

    }


}

","There are different encoding schemes in OpenPGP, namely

binary data and
ASCII armored data.

Especially for key exchange, normally the ASCII armored format is preferred as it is more robust and easy to recognize. For mail exchange, it is mandatory (for 7 bit compatibility). The binary version also has advantages, especially regarding performance and storage (bandwith) requirements.
For example, GnuPG will use the binary encoding by default, unless you request the ASCII armored version using the option --ascii or abbreviated -a.
It look like your code is outputting the binary encoding, but works all fine.
You can easily test by trying to decrypt (eg. using GnuPG: gpg --decrypt file.pgp). Alternatively, you can dump the OpenPGP packets the file contains by using gpg --list-packets file.pgp or using the more verbose utility pgpdump, which is available in most (unix) package repositories: pgpdump file.pgp. Unlike gpg --list-packets, it also resolves packet and algorithm identifiers to human readable strings (where gpg --list-packets just dumps their numeric IDs).
","1237","<c#><bouncycastle><public-key-encryption><pgp>","0","1","1","2014-05-01 21:27:12","","4","","","","","2014-05-01 20:53:51",""
"14536903","RSA private key format","I was trying to find a way to replicate the session-id decoding of mega.co.nz in Ruby using OpenSSL. But, unfortunately, I'm not a cryptography expert.
The problem is I don't understand/recognise the private key format
This is what their code to decompose the private key looks like (https://eu.static.mega.co.nz/crypto.js): 
// decompose private key
for (var i = 0; i < 4; i++)
{
    var l = ((privk.charCodeAt(0)*256+privk.charCodeAt(1)+7)>>3)+2;

    rsa_privk[i] = mpi2b(privk.substr(0,l));
    if (typeof rsa_privk[i] == 'number') break;
    privk = privk.substr(l);
}

privk itself is 656 bytes long (include eight dashes padding at the end).
After the 'decomposition' they use the decomposed parts to decrypt the session-id (https://eu.static.mega.co.nz/rsa.js):
// Compute m**d mod p*q for RSA private key operations.

function RSAdecrypt(m (encrypted session-id), d (rsa_privk[2]), p (rsa_privk[0]), q (rsa_privk[1]), u (rsa_privk[3]))

How to convert this key so OpenSSL knows how to use it?
","OpenSSL supports different key formats, including PEM/X.509 and PKCS8.
The ruby standard library includes an OpenSSL binding.
Using the method provided in this post you can create the key from the exponent and then use for example
key.to_pem()

to convert it to an X.509-formatted string.
","1234","<encryption><rsa><public-key-encryption>","3","1","1","2014-01-05 00:02:00","","1","1","474189","","2013-01-28 16:22:40","2013-01-26 12:21:47",""
"46968514","How to fix bad length error for DecodeRSAPrivateKey?","I'm getting this error: 


Bad length
Object reference not set to an instance of an object.


I'm using this code: 
    public string RSASign(string data, string PhysicalApplicationPath)
    {
        RSACryptoServiceProvider rsaCsp = LoadCertificateFile(PhysicalApplicationPath);
        byte[] dataBytes = System.Text.Encoding.Default.GetBytes(data);
        byte[] signatureBytes = rsaCsp.SignData(dataBytes, ""SHA256"");    <--------error here:Object reference not set to an instance of an object.
        return BitConverter.ToString(signatureBytes).Replace(""-"", null);
    }

    byte[] GetPem(string type, byte[] data)
    {
        string pem = Encoding.UTF8.GetString(data);
        string header = String.Format(""-----BEGIN {0}-----\\n"", type);
        string footer = String.Format(""-----END {0}-----"", type);
        int start = pem.IndexOf(header) + header.Length;
        int end = pem.IndexOf(footer, start);
        string base64 = pem.Substring(start, (end - start));
        return Convert.FromBase64String(base64);
    }

    public byte[] HexToBytes(string hex)
    {
        hex = hex.Trim();

        byte[] bytes = new byte[hex.Length / 2];

        for (int index = 0; index < bytes.Length; index++)
        {
            bytes[index] = byte.Parse(hex.Substring(index * 2, 2), NumberStyles.HexNumber);
            //  Console.WriteLine(""bytes: "" + bytes);
        }

        return bytes;
    }

    RSACryptoServiceProvider LoadCertificateFile(string filename)
    {
        using (System.IO.FileStream fs = System.IO.File.OpenRead(filename))
        {
            byte[] data = new byte[fs.Length];
            byte[] res = null;
            fs.Read(data, 0, data.Length);
            if (data[0] != 0x30)
            {
                res = GetPem(""PRIVATE KEY"", data);
            }
            try
            {
                RSACryptoServiceProvider rsa = DecodeRSAPrivateKey(res);

                return rsa;


            }
            catch (Exception ex)
            {
                Console.WriteLine(""ex :"" + ex);

            }

            return null;
        }
    }

    bool verbose = false;

    public RSACryptoServiceProvider DecodeRSAPrivateKey(byte[] privkey)
    {
        byte[] MODULUS, E, D, P, Q, DP, DQ, IQ;

        // --------- Set up stream to decode the asn.1 encoded RSA private key ------
        MemoryStream mem = new MemoryStream(privkey);
        BinaryReader binr = new BinaryReader(mem);  //wrap Memory Stream with BinaryReader for easy reading
        byte bt = 0;
        ushort twobytes = 0;
        int elems = 0;
        try
        {
            twobytes = binr.ReadUInt16();
            if (twobytes == 0x8130) //data read as little endian order (actual data order for Sequence is 30 81)
                binr.ReadByte();    //advance 1 byte
            else if (twobytes == 0x8230)
                binr.ReadInt16();    //advance 2 bytes
            else
                return null;

            twobytes = binr.ReadUInt16();
            if (twobytes != 0x0102) //version number
                return null;
            bt = binr.ReadByte();
            if (bt != 0x00)
                return null;


            //------ all private key components are Integer sequences ----
            elems = GetIntegerSize(binr);
            MODULUS = binr.ReadBytes(elems);

            elems = GetIntegerSize(binr);
            E = binr.ReadBytes(elems);

            elems = GetIntegerSize(binr);
            D = binr.ReadBytes(elems);

            elems = GetIntegerSize(binr);
            P = binr.ReadBytes(elems);

            elems = GetIntegerSize(binr);
            Q = binr.ReadBytes(elems);

            elems = GetIntegerSize(binr);
            DP = binr.ReadBytes(elems);

            elems = GetIntegerSize(binr);
            DQ = binr.ReadBytes(elems);

            elems = GetIntegerSize(binr);
            IQ = binr.ReadBytes(elems);

            Console.WriteLine(""showing components .."");
            if (verbose)
            {
                showBytes(""\nModulus"", MODULUS);
                showBytes(""\nExponent"", E);
                showBytes(""\nD"", D);
                showBytes(""\nP"", P);
                showBytes(""\nQ"", Q);
                showBytes(""\nDP"", DP);
                showBytes(""\nDQ"", DQ);
                showBytes(""\nIQ"", IQ);
            }

            // ------- create RSACryptoServiceProvider instance and initialize with public key -----
            CspParameters CspParameters = new CspParameters();
            CspParameters.Flags = CspProviderFlags.UseMachineKeyStore;
            RSACryptoServiceProvider RSA = new RSACryptoServiceProvider(1024, CspParameters);
            RSAParameters RSAparams = new RSAParameters();

            RSAparams.Modulus = MODULUS;
            RSAparams.Exponent = E;
            RSAparams.D = D;
            RSAparams.P = P;
            RSAparams.Q = Q;
            RSAparams.DP = DP;
            RSAparams.DQ = DQ;
            RSAparams.InverseQ = IQ;
            RSA.ImportParameters(RSAparams);
            return RSA;
        }
        catch (Exception ex)
        {
            Console.WriteLine(""ex1 :"" + ex);     <-----error here : bad length
            return null;
        }
        finally
        {
            binr.Close();
        }
    }

I would appreciate any guidance, advice, or assistance in helping me get this resolved.
","What you asked for:
The NullReferenceException is caused by your exception handler in DecodeRSAPrivateKey returning null, but the caller not checking for it.
Your decode needs to be adjusted a bit for DER encoding vs CAPI encoding concerns (.NET has inherited the CAPI encoding restrictions):
1) The leading byte of Modulus must not be 0x00.  (DER requires it to be inserted if the next byte is >= 0x80).  So if it's there, you need to trim it out.
2) The leading byte of Exponent must not be 0x00.  Probably not an issue since your exponent is probably [ 0x01, 0x00, 0x01 ], but it doesn't hurt to code defensively.
3) D must be exactly the same length as Modulus.  If D is too short you need to pad it (on ""the left"") with 0x00-values.  If it's one byte too long and starts with 0x00, remove the 0x00.
4) P.Length = (Modulus.Length + 1) / 2.  (RSA-1024 has Modulus.Length 128 and P.Length 64.  RSA-1032 has Modulus.Length 129 and P.Length 65).  Left pad with 0x00 as necessary.  If P is one byte too long and it starts with 0x00, remove the 0x00. (If it's too long still, then CAPI (and therefore .NET) cannot read this key from parameters; P and Q aren't of similar lengths)
5) Q.Length, DP.Length, DQ.Length, and InverseQ.Length must all equal P.Length.  Left pad with 0x00 as necessary, remove a leading 0x00 as necessary.
You also seem to be reading BEGIN PRIVATE KEY files (PKCS#8), but you're interpreting it like BEGIN RSA PRIVATE KEY (PKCS#1 RSAPrivateKey).  So you need to account for the header portions in the PrivateKeyInfo structure (https://tools.ietf.org/html/rfc5208#section-5).
What you might want instead:
If you're really reading a PKCS#8, and you're on .NET Framework 4.6 or higher, just let CngKey and RSACng do the work for you:
RSA LoadKeyFile(string filename)
{
    using (System.IO.FileStream fs = System.IO.File.OpenRead(filename))
    {
        byte[] data = new byte[fs.Length];
        byte[] res = null;
        fs.Read(data, 0, data.Length);
        if (data[0] != 0x30)
        {
            res = GetPem(""PRIVATE KEY"", data);
        }

        try
        {
            using (CngKey key = CngKey.Import(res, CngKeyBlobFormat.Pkcs8PrivateBlob))
            {
                return new RSACng(key);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(""ex :"" + ex);
        }

        return null;
    }
}

Then you just need to change your calling code to stop caring that it got an RSACryptoServiceProvider, just that it's RSA:
public string RSASign(string data, string PhysicalApplicationPath)
{
    RSA rsa = LoadCertificateFile(PhysicalApplicationPath);
    byte[] dataBytes = System.Text.Encoding.Default.GetBytes(data);
    byte[] signatureBytes = rsa.SignData(dataBytes, HashAlgorithmName.SHA256, RSASignaturePadding.Pkcs1);
    return BitConverter.ToString(signatureBytes).Replace(""-"", null);
}

I left it as PKCS1 signature padding since that's what RSACryptoServiceProvider's method would have done.
","1232","<c#><encryption><rsa><public-key-encryption><private-key>","1","0","1","2017-10-30 16:39:10","","2","1","6535399","","2017-10-30 16:34:32","2017-10-27 02:24:05",""
"5994470","Creating OpenPGP messages in Java using FIPS 140-2 library","I am currently upgrading an application that generates OpenPGP messages to be FIPS 140-2 compliant.  Currently I generate PGP messages that use RSA/AES-256 encryption which are both approved algorithms using BouncyCastle and its OpenPGP provider.  I am no longer able to use BouncyCastly since it is not FIPS 140-2 validates, so I am looking at the BSAFE library from RSA.
This library doesn't have the high-level abstraction to let you generate an OpenPGP message directly.  Does anyone know of a library that can use an existing JCE provider (like my BSAFE library) capable of generating OpenPGP messages? I'd really like to avoid having to implement the OpenPGP spec myself, as that seems like it would be quite time consuming.  Alternatively any suggestions for other ways to format my encrypted files?
Thanks in advance for any input!
","After much research it seems that there is no way to do this without implementing the OpenPGP format yourself.  However the Cryptographic Message Syntax seems to be a suitable replacement.
","1226","<java><encryption><public-key-encryption><openpgp>","3","0","3","2011-09-14 19:30:45","7311458","0","","","","","2011-05-13 15:50:14",""
"5994470","Creating OpenPGP messages in Java using FIPS 140-2 library","I am currently upgrading an application that generates OpenPGP messages to be FIPS 140-2 compliant.  Currently I generate PGP messages that use RSA/AES-256 encryption which are both approved algorithms using BouncyCastle and its OpenPGP provider.  I am no longer able to use BouncyCastly since it is not FIPS 140-2 validates, so I am looking at the BSAFE library from RSA.
This library doesn't have the high-level abstraction to let you generate an OpenPGP message directly.  Does anyone know of a library that can use an existing JCE provider (like my BSAFE library) capable of generating OpenPGP messages? I'd really like to avoid having to implement the OpenPGP spec myself, as that seems like it would be quite time consuming.  Alternatively any suggestions for other ways to format my encrypted files?
Thanks in advance for any input!
","There are major differences between S/MIME (Cryptographic Message Syntax) and OpenPGP.
http://mozilla-enigmail.org/forum/viewtopic.php?t=67
Mainly, S/MIME exchanges keys in terms of certificates (which must utilize a certificate authority, limited to 1024 bit, and expires after 1 year), while OpenPGP uses PGP keys (can be exchanged peer-to-peer, or utilize a free keyserver, or host your own keyserver).  
","1226","<java><encryption><public-key-encryption><openpgp>","3","0","3","2011-09-14 19:30:45","7311458","0","","","","","2011-05-13 15:50:14",""
"5994470","Creating OpenPGP messages in Java using FIPS 140-2 library","I am currently upgrading an application that generates OpenPGP messages to be FIPS 140-2 compliant.  Currently I generate PGP messages that use RSA/AES-256 encryption which are both approved algorithms using BouncyCastle and its OpenPGP provider.  I am no longer able to use BouncyCastly since it is not FIPS 140-2 validates, so I am looking at the BSAFE library from RSA.
This library doesn't have the high-level abstraction to let you generate an OpenPGP message directly.  Does anyone know of a library that can use an existing JCE provider (like my BSAFE library) capable of generating OpenPGP messages? I'd really like to avoid having to implement the OpenPGP spec myself, as that seems like it would be quite time consuming.  Alternatively any suggestions for other ways to format my encrypted files?
Thanks in advance for any input!
","FIPS 140-2 doesn't apply to protocols like SSL, PGP, S/MIME, or SSH. Those are security protocols that use cryptographic algorithms like RSA and AES. (Commercial crypto vendors aren't likely to point out this distinction, however).
FIPS 140-2 lists approved algorithms. It also specifies testing criteria for ""cryptographic modules"" that implement these algorithms. But, it doesn't say anything about the application of these algorithms.
So, you can use BouncyCastle's PGP provider. Instead of installing Bouncy Castle as a crypto-provider, install your FIPS 140-2–certified implementation. Bouncy Castle's PGP will use the preferred crypto provider for its underlying cryptographic algorithms. You can use their S/MIME support in the same way.
","1226","<java><encryption><public-key-encryption><openpgp>","3","0","3","2011-09-14 19:30:45","7311458","0","","","","","2011-05-13 15:50:14",""
"46620438","rsacryptoserviceprovider.VerifyData always returns false","Below is my C# Program that verifies a response from a php script which is using phpseclib
static void Main(string[] args)
        {

            var payment =
                ""VUQxMzE1MTg0OTk0MDM2MzIyMDJ8VDAwMDAxN0kxMFVEMTMxNTE4NDk5NDAzNjMyMjAyfDIwMTctMTAtMDd8MHxwYXltZW50IHN1Y2Nlc3NmdWx8MjAyNTQ="";
            var signature =
                ""V0T9ZedZW8oB9uy4PazRIxWHvJ7rR+FVtnGjUy30mSKqgmEceZWE1aBvkQWeG4ERjAXHjsRge0D0MlHd9zvXjrLog+G5nWBHIu52O0srCd9d71JVztMQy8fV5oSnRPtlUpgdmn8QDnJ27XrbaHzNxnFyybTQhmbfxkT0oJ0MEOk="";

            var sigByte = Convert.FromBase64String(signature);
            var payBite = Convert.FromBase64String(payment);

            Verify(payBite, sigByte);
        }

        public static bool Verify(byte[] payment, byte[] signature)
        {
            var key = Resources.PublicKey;
            var cipher = Crypto.DecodeX509PublicKey(key);

            var res = cipher.VerifyData(payment, ""SHA256"", signature);
            return res;
        }

the public key used is below:
-----BEGIN PUBLIC KEY-----
MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDSiXzUuH9ePZgSLYrzZ0qhta25
HCb+WG48wIKUl+cQNC/Fl/KZG2cSwRXdo8KZLVWWO5qwzplfTWEylg4IqRA48rYY
f/b+Y7QhORKeAws4pttLZJBbh1mIbZ9HXfQ+zBjP+zfJZ1YjSFs2uZdwSt1itUcJ
/GQFct8GoUevNELG7wIDAQAB
-----END PUBLIC KEY-----

but the verify method seems to be returning false all the time. any idea why this happens.
the same content works in the php code which the vendor gave to me 
<?php
//load RSA library
include 'Crypt/RSA.php';
//initialize RSA
$rsa = new Crypt_RSA();
//decode & get POST parameters
$payment = base64_decode(""VUQxMzE1MTg0OTk0MDM2MzIyMDJ8VDAwMDAxN0kxMFVEMTMxNTE4NDk5NDAzNjMyMjAyfDIwMTctMTAtMDd8MHxwYXltZW50IHN1Y2Nlc3NmdWx8MjAyNTQ="");
$signature = base64_decode(""V0T9ZedZW8oB9uy4PazRIxWHvJ7rR+FVtnGjUy30mSKqgmEceZWE1aBvkQWeG4ERjAXHjsRge0D0MlHd9zvXjrLog+G5nWBHIu52O0srCd9d71JVztMQy8fV5oSnRPtlUpgdmn8QDnJ27XrbaHzNxnFyybTQhmbfxkT0oJ0MEOk="");

//load public key for signature matching
$publickey = ""-----BEGIN PUBLIC KEY-----
MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDSiXzUuH9ePZgSLYrzZ0qhta25
HCb+WG48wIKUl+cQNC/Fl/KZG2cSwRXdo8KZLVWWO5qwzplfTWEylg4IqRA48rYY
f/b+Y7QhORKeAws4pttLZJBbh1mIbZ9HXfQ+zBjP+zfJZ1YjSFs2uZdwSt1itUcJ
/GQFct8GoUevNELG7wIDAQAB
-----END PUBLIC KEY-----"";
$rsa->loadKey($publickey);
//verify signature
$signature_status = $rsa->verify($payment, $signature);
//get payment response in segments
//payment format: order_id|order_refference_number|date_time_transaction|payment_gateway_used|status_code|comment;
$responseVariables = explode('|', $payment);       


    //display values
    echo $signature_status;

    echo '<br/>';
    var_dump($responseVariables);


?>  

Any idea what i'm doing wrong here. i tried passing ""SHA512"", ""MD5"" all in the C# code and still returns false. 
","Well, seems like the vendor is NOT using PKCS1, he's using PSS. Verify it this way (requires Bouncy Castle!):
    public static bool Verify(byte[] payment, byte[] signature)
    {
        var pub = @""MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDSiXzUuH9ePZgSLYrzZ0qhta25HCb+WG48wIKUl+cQNC/Fl/KZG2cSwRXdo8KZLVWWO5qwzplfTWEylg4IqRA48rYYf/b+Y7QhORKeAws4pttLZJBbh1mIbZ9HXfQ+zBjP+zfJZ1YjSFs2uZdwSt1itUcJ/GQFct8GoUevNELG7wIDAQAB"";

        byte[] raw = Convert.FromBase64String(pub);
        AsymmetricKeyParameter aKey = PublicKeyFactory.CreateKey(raw);
        RsaKeyParameters rKey = (RsaKeyParameters)aKey;

        PssSigner pss = new PssSigner(new RsaEngine(), new Sha1Digest(), 20);
        pss.Init(false, rKey);
        pss.BlockUpdate(payment, 0, payment.Length);
        var res = pss.VerifySignature(signature);

        return res;
    }

","1226","<c#><php><rsa><public-key-encryption><phpseclib>","1","2","2","2017-10-08 18:48:42","46621151","5","","","","","2017-10-07 13:02:29",""
"46620438","rsacryptoserviceprovider.VerifyData always returns false","Below is my C# Program that verifies a response from a php script which is using phpseclib
static void Main(string[] args)
        {

            var payment =
                ""VUQxMzE1MTg0OTk0MDM2MzIyMDJ8VDAwMDAxN0kxMFVEMTMxNTE4NDk5NDAzNjMyMjAyfDIwMTctMTAtMDd8MHxwYXltZW50IHN1Y2Nlc3NmdWx8MjAyNTQ="";
            var signature =
                ""V0T9ZedZW8oB9uy4PazRIxWHvJ7rR+FVtnGjUy30mSKqgmEceZWE1aBvkQWeG4ERjAXHjsRge0D0MlHd9zvXjrLog+G5nWBHIu52O0srCd9d71JVztMQy8fV5oSnRPtlUpgdmn8QDnJ27XrbaHzNxnFyybTQhmbfxkT0oJ0MEOk="";

            var sigByte = Convert.FromBase64String(signature);
            var payBite = Convert.FromBase64String(payment);

            Verify(payBite, sigByte);
        }

        public static bool Verify(byte[] payment, byte[] signature)
        {
            var key = Resources.PublicKey;
            var cipher = Crypto.DecodeX509PublicKey(key);

            var res = cipher.VerifyData(payment, ""SHA256"", signature);
            return res;
        }

the public key used is below:
-----BEGIN PUBLIC KEY-----
MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDSiXzUuH9ePZgSLYrzZ0qhta25
HCb+WG48wIKUl+cQNC/Fl/KZG2cSwRXdo8KZLVWWO5qwzplfTWEylg4IqRA48rYY
f/b+Y7QhORKeAws4pttLZJBbh1mIbZ9HXfQ+zBjP+zfJZ1YjSFs2uZdwSt1itUcJ
/GQFct8GoUevNELG7wIDAQAB
-----END PUBLIC KEY-----

but the verify method seems to be returning false all the time. any idea why this happens.
the same content works in the php code which the vendor gave to me 
<?php
//load RSA library
include 'Crypt/RSA.php';
//initialize RSA
$rsa = new Crypt_RSA();
//decode & get POST parameters
$payment = base64_decode(""VUQxMzE1MTg0OTk0MDM2MzIyMDJ8VDAwMDAxN0kxMFVEMTMxNTE4NDk5NDAzNjMyMjAyfDIwMTctMTAtMDd8MHxwYXltZW50IHN1Y2Nlc3NmdWx8MjAyNTQ="");
$signature = base64_decode(""V0T9ZedZW8oB9uy4PazRIxWHvJ7rR+FVtnGjUy30mSKqgmEceZWE1aBvkQWeG4ERjAXHjsRge0D0MlHd9zvXjrLog+G5nWBHIu52O0srCd9d71JVztMQy8fV5oSnRPtlUpgdmn8QDnJ27XrbaHzNxnFyybTQhmbfxkT0oJ0MEOk="");

//load public key for signature matching
$publickey = ""-----BEGIN PUBLIC KEY-----
MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDSiXzUuH9ePZgSLYrzZ0qhta25
HCb+WG48wIKUl+cQNC/Fl/KZG2cSwRXdo8KZLVWWO5qwzplfTWEylg4IqRA48rYY
f/b+Y7QhORKeAws4pttLZJBbh1mIbZ9HXfQ+zBjP+zfJZ1YjSFs2uZdwSt1itUcJ
/GQFct8GoUevNELG7wIDAQAB
-----END PUBLIC KEY-----"";
$rsa->loadKey($publickey);
//verify signature
$signature_status = $rsa->verify($payment, $signature);
//get payment response in segments
//payment format: order_id|order_refference_number|date_time_transaction|payment_gateway_used|status_code|comment;
$responseVariables = explode('|', $payment);       


    //display values
    echo $signature_status;

    echo '<br/>';
    var_dump($responseVariables);


?>  

Any idea what i'm doing wrong here. i tried passing ""SHA512"", ""MD5"" all in the C# code and still returns false. 
","PSS is supported in-the-box with .NET 4.6+, but requires using the RSACng class (CAPI, which RSACryptoServiceProvider is based on, doesn't offer it).
public static bool Verify(byte[] payment, byte[] signature)
{
    var key = Resources.PublicKey;
    // Change the function this calls to return RSACng instead of RSACryptoServiceProvider.
    RSA cipher = Crypto.DecodeX509PublicKey(key);

    // or, failing being able to change it:
    RSA tmp = new RSACng();
    tmp.ImportParameters(cipher.ExportParameters(false));
    cipher = tmp;

    return cipher.VerifyData(
        payment,
        signature,
        HashAlgorithmName.SHA256,
        RSASignaturePadding.Pss);
 }

","1226","<c#><php><rsa><public-key-encryption><phpseclib>","1","3","2","2017-10-08 18:48:42","46621151","5","","","","","2017-10-07 13:02:29",""
"9086784","Bad base64 Decode - M2Crypto - Python - Android - RSA","Trying to implement the signature verification of inapp billing on my server (Django/Python).
I found this great topic but I'm having issues with this line:
rsa = RSA.load_pub_key_bio(bio)

If I do it exactly as it is coded there I get a ""RSAError: no start line"" [and this makes sense since python didnt really like how pem was defined]
I decided to put my key into a .pem file and load it with
rsa = RSA.load_pub_key(""public.pem"")

However, I get a ""RSAError: bad base64 decode"" .  Any ideas?
","Okay, found and fixed my problem (but an explanation would be neat).
I had to have a \n every 75 chars ... formatting it like this made it work.
","1219","<python><django><rsa><public-key-encryption><m2crypto>","2","2","1","2012-01-31 22:03:40","9087656","2","","-1","","2017-05-23 11:45:17","2012-01-31 20:54:16",""
"13228106","X.509 Digital Signatures/Encryption workflow/library recommendations?","My particular use case is that I have to access digital certificates stored on the client, and use them to perform tasks of signing, verifying, encryption and decryption on the client side and the server side.  For the latter part, there are many many solutions.  The sticking point is the ability to access certificates stored on the client.
Note that I am saying ""certificates stored on the client"" which is deliberately vague.  I dont want to restrict thoughts to system store, user store, browser store, cryptographic token, java key store, where ever.
Over the years, I used the following ways.  Along side each of them I give the pros and cons.

CAPICOM/ActiveX.  While this was the easiest to work with, it restricts the user to IE on Windows.  What is worse, it is now deprecated and works only on 32bit.
Java applet.  This is cross platform and cross browser, but java in the browser is not as common as one would like it to be and is quickly fading away (apparently Apple recently removed it).  So there is the added hassle of getting the user to download and install the JRE. Additionally users have to perform the relatively technical task of setting the unlimited strength cryptography extensions for the signer to work.

Things I have heard of/thought of but I have not progressed far

Most javascript solutions.  They implement the RSA algorithm but they dont have a way to access digital certificates on the client certificate store.  Most of them generate a new key pair.
Flash/Flex.  Flash/flex seem to be the most ubiquitous client side technology.  They can already access client hardware like cameras and microphones.  It would be lovely if they could access certificate stores.
Alternatives to CAPICOM as given on the microsoft website.  It prescribes alternatives to CAPICOM which are mostly do things using the .NET framework.  This is great for desktop clients.  But for ""scripts"" they say very clearly in an ""important note"" that you have to write your own activex controls.  Which takes us back to square one.

What I am looking for is a way to get over/around the primary problem of getting access to certificates stores on the client.  I am not looking for a discussion of the RSA algorithm or why PKI is stupid or some alternative to asymmetric encryption or use of architectures other than web applications, or on Apple.
","My best bet would still be an applet since that's possibly the most cross-platform thing.
Alternately, I can develop my own activeX and limiting my reach.
Remember that client side certificate access is big security thing.
","1218","<cross-browser><cross-platform><public-key-encryption><digital-certificate>","2","2","3","2013-06-14 07:38:22","","2","0","","","","2012-11-05 08:00:57",""
"13228106","X.509 Digital Signatures/Encryption workflow/library recommendations?","My particular use case is that I have to access digital certificates stored on the client, and use them to perform tasks of signing, verifying, encryption and decryption on the client side and the server side.  For the latter part, there are many many solutions.  The sticking point is the ability to access certificates stored on the client.
Note that I am saying ""certificates stored on the client"" which is deliberately vague.  I dont want to restrict thoughts to system store, user store, browser store, cryptographic token, java key store, where ever.
Over the years, I used the following ways.  Along side each of them I give the pros and cons.

CAPICOM/ActiveX.  While this was the easiest to work with, it restricts the user to IE on Windows.  What is worse, it is now deprecated and works only on 32bit.
Java applet.  This is cross platform and cross browser, but java in the browser is not as common as one would like it to be and is quickly fading away (apparently Apple recently removed it).  So there is the added hassle of getting the user to download and install the JRE. Additionally users have to perform the relatively technical task of setting the unlimited strength cryptography extensions for the signer to work.

Things I have heard of/thought of but I have not progressed far

Most javascript solutions.  They implement the RSA algorithm but they dont have a way to access digital certificates on the client certificate store.  Most of them generate a new key pair.
Flash/Flex.  Flash/flex seem to be the most ubiquitous client side technology.  They can already access client hardware like cameras and microphones.  It would be lovely if they could access certificate stores.
Alternatives to CAPICOM as given on the microsoft website.  It prescribes alternatives to CAPICOM which are mostly do things using the .NET framework.  This is great for desktop clients.  But for ""scripts"" they say very clearly in an ""important note"" that you have to write your own activex controls.  Which takes us back to square one.

What I am looking for is a way to get over/around the primary problem of getting access to certificates stores on the client.  I am not looking for a discussion of the RSA algorithm or why PKI is stupid or some alternative to asymmetric encryption or use of architectures other than web applications, or on Apple.
","Our SecureBlackbox library has a distributed cryptography add-on which does what you need. Currently client-side modules do signing but can be extended by the user (we provide complete source code). You will find detailed description of the add-on on our site or in this SO answer.
","1218","<cross-browser><cross-platform><public-key-encryption><digital-certificate>","2","0","3","2013-06-14 07:38:22","","2","0","","","","2012-11-05 08:00:57",""
"13228106","X.509 Digital Signatures/Encryption workflow/library recommendations?","My particular use case is that I have to access digital certificates stored on the client, and use them to perform tasks of signing, verifying, encryption and decryption on the client side and the server side.  For the latter part, there are many many solutions.  The sticking point is the ability to access certificates stored on the client.
Note that I am saying ""certificates stored on the client"" which is deliberately vague.  I dont want to restrict thoughts to system store, user store, browser store, cryptographic token, java key store, where ever.
Over the years, I used the following ways.  Along side each of them I give the pros and cons.

CAPICOM/ActiveX.  While this was the easiest to work with, it restricts the user to IE on Windows.  What is worse, it is now deprecated and works only on 32bit.
Java applet.  This is cross platform and cross browser, but java in the browser is not as common as one would like it to be and is quickly fading away (apparently Apple recently removed it).  So there is the added hassle of getting the user to download and install the JRE. Additionally users have to perform the relatively technical task of setting the unlimited strength cryptography extensions for the signer to work.

Things I have heard of/thought of but I have not progressed far

Most javascript solutions.  They implement the RSA algorithm but they dont have a way to access digital certificates on the client certificate store.  Most of them generate a new key pair.
Flash/Flex.  Flash/flex seem to be the most ubiquitous client side technology.  They can already access client hardware like cameras and microphones.  It would be lovely if they could access certificate stores.
Alternatives to CAPICOM as given on the microsoft website.  It prescribes alternatives to CAPICOM which are mostly do things using the .NET framework.  This is great for desktop clients.  But for ""scripts"" they say very clearly in an ""important note"" that you have to write your own activex controls.  Which takes us back to square one.

What I am looking for is a way to get over/around the primary problem of getting access to certificates stores on the client.  I am not looking for a discussion of the RSA algorithm or why PKI is stupid or some alternative to asymmetric encryption or use of architectures other than web applications, or on Apple.
","[Disclosure: I work for CoSign]
A secure alternative to storing the certs on the clients is to store them on a secure, centralized SSCD (Secure Signature Creation Device). A problem with local certs (smart cards, etc) is to use them securely in client/server or web-based applications. 
A centralized SSCD takes care of the issue very neatly. The user still needs to authenticate himself to the SSCD, but the SSCD itself holds the certs and does the signing. The authentication step can include 2-factor authentication including One Time Passords (OTP), biometrics, etc. We have customers doing all that. 
The idea is to have secure client authentication but keep the secure signing centralized as a service on the network. 
See this description. Also available as a cloud-based solution.
ps, This answer covers the slightly more general question of how to securely sign in a web-based application. I agree that it does not cover the specific question of signing by using a user's smart card or client alternative (the OP was deliberately vague). 
","1218","<cross-browser><cross-platform><public-key-encryption><digital-certificate>","2","-1","3","2013-06-14 07:38:22","","2","0","","","","2012-11-05 08:00:57",""
"18732113","BadPaddingException : Data must start with zero","I implemented data encryption/decryption with RSA. It works if I just encrypt/decrypt locally, however if I send my encrypted data I get BadPaddingException: Data must start with zero. 
In order to send my data over network I need to change it from byte array to String (I'm sending it in a header) on the client side and then retrieve it and change it back to byte array on the server side.
Here's my code for local encryption/decryption (I'm using private key to encrypt and public key do decrypt):
// Encryption:
String message = ""HELLO"";
Cipher rsa = Cipher.getInstance(""RSA"");
rsa.init(Cipher.ENCRYPT_MODE, privateKey);  // privateKey has type java.security.PrivateKey
byte [] encryptedBytes = rsa.doFinal(message.getBytes());

// Decryption:
rsa.init(Cipher.DECRYPT_MODE, publicKey); // type of publicKey: java.security.PublicKey
byte [] ciphertext = rsa.doFinal(encryptedBytes);

String decryptedString = new String(ciphertext, ""UTF-8"");

DecryptedString and message are the same and everything works fine.
Then I use the same code on the client side just for encryption plus I change ciphertext to a String using:
String encryptedString = new String(ciphertext, ""UTF-8"");

And on the server side I do:
String message = request.getHeader(""Message""); 
byte [] msgBytes = message.getBytes(""UTF-8"");

Cipher rsa = Cipher.getInstance(""RSA"");
rsa.init(Cipher.DECRYPT_MODE, publicKey);
byte [] decryptedMsg = rsa.doFinal(msgBytes);

String decryptedString = new String(decryptedMsg, ""UTF-8"");

This doesn't work and I get BadPaddingException. 
I have tried using different instance of cipher, e.g. ""RSA/ECB/PKCS1Padding"" or ""RSA/ECB/NoPadding"" but this didn't help. I also tried converting Strings using BASE64 but then I get a different exception: IllegalBlockSizeException.
I know I probably do sth wrong with converting Strings into byte arrays and vice versa, but I just can't figure out the correct way of doing that. Please help!
","You can't just convert arbitrary binary data (the encrypted text) into a String.  If you want to send the data as text, you need to use some sort of binary -> text encoding like Base64.
","1211","<java><string><encryption><bytearray><public-key-encryption>","0","2","1","2013-09-11 03:40:07","","3","3","","","","2013-09-11 03:20:30",""
"28899392","Getting RSAPublicKey From File With Extension pem","I am trying to implement Paybox Payment Gateway integration to my application. After payment Paybox returns me a signature and I have to verify it.
I have test keys provided by Paybox, 'TestK004.prv.pem' and 'TestK004.pub.pem'.
Here is my Test Class:
package com.alpha.shop.component.payment.methods.crc.impl.ww.paybox;

import java.security.interfaces.RSAPublicKey;
import java.security.Signature;
import java.security.KeyFactory;
import java.security.spec.X509EncodedKeySpec;
import java.io.FileInputStream;
import java.io.DataInputStream;

import org.apache.commons.codec.binary.Base64;
import org.apache.commons.codec.net.URLCodec;

public class SignVer {

// verification signature RSA des donnees avec cle publique

private static boolean verify( byte[] dataBytes, byte[] sigBytes, String sigAlg, RSAPublicKey pubKey) throws Exception
{
    Signature sig = Signature.getInstance(sigAlg);
    sig.initVerify(pubKey);
    sig.update(dataBytes);
    return sig.verify(sigBytes);
}

// chargement de la cle AU FORMAT der :
// openssl rsa -inform PEM -in pbx_pubkey.pem -outform DER -pubin -out /tmp/pubkey.der

private static RSAPublicKey getPubKey(String pubKeyFile) throws Exception
{
    FileInputStream input = new FileInputStream(pubKeyFile);
    byte[] fileData = new byte[input.available()];
    input.read(fileData);
    input.close();
    String text = new String(fileData, ""UTF-8"");
    byte[] decoded = Base64.decodeBase64(text);
    KeyFactory keyFactory = KeyFactory.getInstance(""RSA"");
    // extraction cle
    X509EncodedKeySpec pubSpec = new X509EncodedKeySpec(decoded);
    RSAPublicKey pubKey = (RSAPublicKey) keyFactory.generatePublic(pubSpec);
    return pubKey;
 }

 // exemple de verification de la signature

 public static void main(String[] unused) throws Exception {

    String sData = ""Auto=459782&Idtr=201348570&Ref=Ma_commande"";        // donnees signees
    String sSig  = ""df123dsfd3...1f1ffsre+t321rt1t3e="";                 // signature Base64 et URL encodee

    // decodage
    byte[] sigBytes = Base64.decodeBase64( URLCodec.decodeUrl(sSig.getBytes()));

    // lecture de la cle publique
    RSAPublicKey pubK = getPubKey(""C:/Users/Garip/Desktop/Yeni klasör/TestK004.pub.pem"");

    // verification signature
    boolean result = verify(sData.getBytes(), sigBytes, ""SHA1withRSA"", pubK);

    // affichage resultat
    System.out.println(""Resultat de la verification de signature : "" + result);
}

}
Content of my Public Key is:
-----BEGIN PUBLIC KEY-----

MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDLzJXB+BM10Ksdtk0rYHboIKPc
o8RXGikLiQQawNXuW4g38uaTbci7xuoH3Cvhngr9OgvKKILKJZiy1FI+NnKT+8gP
28JHzplbqpc2mmVZ5OT4Xe9D5ndnPVdZ1xUxyBlJshcTYqkSPru9eVNza7jwEqPv
DFZBxJoBFScQOJZcpwIDAQAB
-----END PUBLIC KEY-----
When I run it, gives error:
Exception in thread ""main"" java.security.spec.InvalidKeySpecException: java.security.InvalidKeyException: invalid key format
at sun.security.rsa.RSAKeyFactory.engineGeneratePublic(RSAKeyFactory.java:205)
at java.security.KeyFactory.generatePublic(KeyFactory.java:334)
at com.alpha.shop.component.payment.methods.crc.impl.ww.paybox.SignVer.getPubKey(SignVer.java:39)
at com.alpha.shop.component.payment.methods.crc.impl.ww.paybox.SignVer.main(SignVer.java:54)Caused by: java.security.InvalidKeyException: invalid key format
at sun.security.x509.X509Key.decode(X509Key.java:387)
at sun.security.x509.X509Key.decode(X509Key.java:403)
at sun.security.rsa.RSAPublicKeyImpl.<init>(RSAPublicKeyImpl.java:84)
at sun.security.rsa.RSAKeyFactory.generatePublic(RSAKeyFactory.java:298)
at sun.security.rsa.RSAKeyFactory.engineGeneratePublic(RSAKeyFactory.java:201)
... 3 more

It can't generate RSAPublicKey from key file.
How can I correct this code ?
","Java expects your key to be DER-encoded, but you are supplying PEM-encoded data.
Read your file as a string, cut off the headers and base64-decode the contents. Then supply those bytes to the key factory.
","1206","<java-ee><rsa><public-key-encryption><public-key><pem>","0","2","1","2015-03-06 14:27:35","28899764","1","0","2617972","","2015-03-06 14:27:35","2015-03-06 13:04:53",""
"43766849","Encrypt and decrypt a google Firebase realtime database entry","I am making an app on android studio with a Firebase backed. 
It currently stores information about the user that they upload their selves in their own sections of the Firebase database. It is stored in the structure that uses their uuid of their Firebase account and puts all their uploads under that i.e. their pictures, reminders, notes and passwords. 
I would like to encrypt the passwords section in the database so even I can not read it. When i say passwords section i mean the part in the app that allows users to store their own new generated passwords for other things ; not the password they use to login to the app, i know this is already encrypted and want to know how to achieve this myself. 
How would i go about it? Would i need to use the users auth/uuid that you can get from Firebase after they login as a private key to encrypt the password or any other data as they are uploading it? And store the public key somewhere in their section of the Firebase database? I am not very experienced when it comes to encryption.
If someone could please give me some sort of direction on how i should go about encrypting this data so even i cant read it from the back end that would be great thank you.
","You don't need to store the users password for an authentication. If you intend to use Firebase authentication for your users, Firebase stores the passwords for you with their encryption algorithms.
Please visit ofiical documentation for using Firebase authentication.
Hope it helps.
","1205","<android><firebase><encryption><firebase-realtime-database><public-key-encryption>","0","0","1","2017-05-04 02:00:39","","0","","4625829","","2017-05-04 02:00:39","2017-05-03 17:48:49",""
"39715973","Can I remove the symbol new line from base 64 encoded key file?","I have a base 64 encoded key file. If I open it by Text Editor, I see 4 lines like this:

Then I copy the text and paste to Android Studio, I see the symbol ""\n"" is generated as below:

This pubic key doesn't work. So I tried :

Remove all ""\n"" symbol. Still doesn't work.
Replace the ""\n"" symbol with the space "" "". Again doesn't work.

Could you please show me where I am wrong?
","Rather than pasting the contents of the file into a string, why not just copy the file itself into your assets folder. For example:
public String readPublicKeyFromFile() {

    String publicKeyString; = """";

    try { 
        InputStream is = getAssets().open(""public_key.txt"");

        byte[] buffer = new byte[size];
        is.read(buffer);
        is.close();

        // Convert the buffer into a string. 
        return new String(buffer);

    } catch (IOException e) {
        throw new RuntimeException(e);
    } 

    return null;
}

","1202","<android><android-studio><public-key-encryption>","0","1","3","2016-09-27 05:28:25","","4","","","","","2016-09-27 04:27:57",""
"39715973","Can I remove the symbol new line from base 64 encoded key file?","I have a base 64 encoded key file. If I open it by Text Editor, I see 4 lines like this:

Then I copy the text and paste to Android Studio, I see the symbol ""\n"" is generated as below:

This pubic key doesn't work. So I tried :

Remove all ""\n"" symbol. Still doesn't work.
Replace the ""\n"" symbol with the space "" "". Again doesn't work.

Could you please show me where I am wrong?
","Its android studio console character limitation that it shows long string in multiple lines. 

Best way is to copy that string in any text editor(notepad) and make it single line string and then paste it to studio.
Another way is just delete that '\n' character from your string it will be single line string.

e.g.
private static final String = ""abcdefgh"" +
    ""ijklmnop"" +
    ""qrstuvwxyz"";

just remove '\n' character from your string.
","1202","<android><android-studio><public-key-encryption>","0","1","3","2016-09-27 05:28:25","","4","","","","","2016-09-27 04:27:57",""
"39715973","Can I remove the symbol new line from base 64 encoded key file?","I have a base 64 encoded key file. If I open it by Text Editor, I see 4 lines like this:

Then I copy the text and paste to Android Studio, I see the symbol ""\n"" is generated as below:

This pubic key doesn't work. So I tried :

Remove all ""\n"" symbol. Still doesn't work.
Replace the ""\n"" symbol with the space "" "". Again doesn't work.

Could you please show me where I am wrong?
","
If you creating the ""publickey.txt"" (base64) file, just use ""Base64.NO_WRAP"" flag for creating the file. This flag not allow the ""\n"" character.
By default it takes the ""Base64.DEFAULT"" flag, so every 64 characters after ""\n"" will be added automatically.
 // for encoding the String with out \n

  String base64Str=Base64.encode(your_string,Base64.NO_WRAP);

 // for decoding
 byte[] resByte=Base64.decode(base64Str,Base64.NO_WRAP);

 // convert into String
  String resStr=new String(resByte,""UTF-8"");


","1202","<android><android-studio><public-key-encryption>","0","0","3","2016-09-27 05:28:25","","4","","","","","2016-09-27 04:27:57",""
"37205236",".net client for AS2 EDI comunication","I have to prepare client application (c#) to send EDI messages over AS2. To be honest our client have no control over comunication and can see only correctly sended EDI messages.
I tried different solution and libraries to test it like http://www.edidev.com/example_edi_transmission.html, https://mattfrear.com/2010/07/13/send-as2-with-dotnet/ and other, but none of them does not works with customer AS2 provider. I thought that support of AS 2 provider will help me but for now it doesn't work. 
I found a test AS2 server which cover my needs to do the tests (setting are the same as  AS2 provider) but sended requests didn't shown on request list. My production requirements::

Encrypt - 3DES with XXXX.cer 
Sign - SHA1 with YYYY.cer 
Mdm mode - synchronous 
Signed MDN - YES

So far my message which doesn't throw error (but don't work too) looks like:
MIME-Version: 1.0
Date: Thu, 12 May 2016 09:40:14 -0060
Content-Type: application/pkcs7-mime; smime-type=enveloped-data; name=smime.p7m
Content-Disposition: attachment; filename=smime.p7m
Content-Transfer-Encoding: binary
Message-ID: person@company.com
AS2-Version: 1.0
AS2-To: xxxx
AS2-From: yyyyy
Disposition-Notification-To: <person@company.com>

xxxxxxxxxxxxxxxxxxxx signed and encrypted data xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx

Has anyone done this kind of comunication. Any advice, library (open source), mime params need to specify, documetation ? I lost about a week on this without any progress. I will be grateful for any help :)
","","1198","<c#><.net><public-key-encryption><sign><edi>","0","","0","2016-05-13 08:40:15","","2","","","","","2016-05-13 08:40:15",""
"37782215","How to initialize RSA::PrivateKey?","I'm trying to use Crypto++'s RSA encryption. The problem is how to initialize RSA::PrivateKey from number string?
The code to generate key pairs(from here)
cout << hex ;

AutoSeededRandomPool rng;
InvertibleRSAFunction params;
params.GenerateRandomWithKeySize(rng, 2048);

params.SetPublicExponent(65537);

const Integer& n = params.GetModulus();
const Integer& p = params.GetPrime1();
const Integer& q = params.GetPrime2();
const Integer& d = params.GetPrivateExponent();
const Integer& e = params.GetPublicExponent();

///////////////////////////////////////
// Dump
cout << ""RSA Parameters:"" << endl;
cout << "" n: "" << n << endl;
cout << "" p: "" << p << endl;
cout << "" q: "" << q << endl;
cout << "" d: "" << d << endl;
cout << "" e: "" << e << endl;
cout << endl;

So I get n,d,e string, should be able to initialize the private key, then I found some sample code here:
Integer n(""0xbeaadb3d839f3b5f""), e(""0x11""), d(""0x21a5ae37b9959db9"");

RSA::PrivateKey privKey;
privKey.Initialize(n, e, d);

RSA::PublicKey pubKey;
pubKey.Initialize(n, e);

The code works, it doesn't throw any exception. So I try to change the n,e,d to the string generated previously.
// n: b0f2bee69386528216049775704d402cb3ff443ca2ea25a74b11c1c9c321b7ea46327b4e413f532616812fece07d061cf96e373789b3b9b05d2d31174c700a066868d26c52b5d48e6dbaf664fac66ee31747133a6569e16d12f521b56a12aadd74e7cf2534353a5e338173b8f884a568a25173f3a33782f9047af59da9b21180534923e5210c3989851f0d69d68d92c272769fbf2a833e2f522f60f76bec12d3b194c2f3b945c913649e2be54295a2f58e7c040bf61421f01077fdf234ddfe73663deec8979256c721fd65c046a7d21530adec1af2922ed6a27004bf31a04cd57981ca22208572743b6b64d4d30b0efe446fc7608b4178ff8a0ba7db3e45ecf3h
// e: 10001h
// d: 246e365ca5e6f2de8c100110a62e05aed9c39d1b8af3f8b1806589c7a82c96ce59bf1962ef50cd5aaa47c61a2e37db9c8db4cf2205c31eb35e7a3ed017443e4c9d0685ace3da243b70f1c951067425e375bbcf40ba86bd7856b9ff691d5e323ca720aaa5c6fbe65eb0404c87f6ee220e034d0148bfb89af70873ab09df2c30c74104b0973aa4e93ca95db749da4f6b2d9594ab487db1f6f194ab0b77bd91d834daf269c63d3abecad54a1a71599524e679a425c55b16a9ff7f0c37b2d259eb44ea5782f314f61cc0ac874b2e6ae870d798e90e5bc96ab57c8fd904fa9d199c46c971de3a5d7cabfdca0663373843bd41ec246e158754dabc9ec2172f7a5982edh

RSA::PrivateKey privKey;
privKey.Initialize(n, e, d);

It crashes. I googled a while and found some other tip:
InvertibleRSAFunction params;
params.Initialize(n, e, d);

RSA::PrivateKey(params);

But it still crashes. What's the correct way of initializing a 2048-bit rsa private key?
","
    // n: b0f2bee69386528216049775704d402cb3ff443ca2ea25a74b11c1c9c321b7ea46327b4e413f532616812fece07d061cf96e373789b3b9b05d2d31174c700a066868d26c52b5d48e6dbaf664fac66ee31747133a6569e16d12f521b56a12aadd74e7cf2534353a5e338173b8f884a568a25173f3a33782f9047af59da9b21180534923e5210c3989851f0d69d68d92c272769fbf2a833e2f522f60f76bec12d3b194c2f3b945c913649e2be54295a2f58e7c040bf61421f01077fdf234ddfe73663deec8979256c721fd65c046a7d21530adec1af2922ed6a27004bf31a04cd57981ca22208572743b6b64d4d30b0efe446fc7608b4178ff8a0ba7db3e45ecf3h
    // e: 10001h
    // d: 246e365ca5e6f2de8c100110a62e05aed9c39d1b8af3f8b1806589c7a82c96ce59bf1962ef50cd5aaa47c61a2e37db9c8db4cf2205c31eb35e7a3ed017443e4c9d0685ace3da243b70f1c951067425e375bbcf40ba86bd7856b9ff691d5e323ca720aaa5c6fbe65eb0404c87f6ee220e034d0148bfb89af70873ab09df2c30c74104b0973aa4e93ca95db749da4f6b2d9594ab487db1f6f194ab0b77bd91d834daf269c63d3abecad54a1a71599524e679a425c55b16a9ff7f0c37b2d259eb44ea5782f314f61cc0ac874b2e6ae870d798e90e5bc96ab57c8fd904fa9d199c46c971de3a5d7cabfdca0663373843bd41ec246e158754dabc9ec2172f7a5982edh
    RSA::PrivateKey privKey;
    privKey.Initialize(n, e, d);

It crashes. 

We need to see the actual code. I'm guessing two things. First (1), you are not using a try/catch, so the program terminates due to the uncaught exception. To fix this:
try
{
    // Some operation
}
catch (const Exception& ex)
{
    cerr << ex.what() << endl;
}

Second (2), you are using strings rather than Integers in the call to Iniaitialize. To fix this:
string n = ""b0f2bee693865282...8a0ba7db3e45ecf3h"";
string e = ""10001h"";
string d = ""246e365ca5e6f2de...9ec2172f7a5982edh"";

Integer _n(n.c_str()), _e(e.c_str()), _d(d.c_str());
RSA::PrivateKey privKey;
privKey.Initialize(_n, _e, _d);

The second issue should have been caught by the compiler. You should consider using -Wall to get a basic set of compiler diagnostics.

There's a potential third issue. That's the ""key fails to validate"" case. If you add a try/catch as described in (1), then you may see an ""Invalid key material"" or similar from CryptoMaterial class. In this case, your parameters do not validate according to the checks performed by Validate.
Validate is called by Initialize using a low-level of thoroughness (the level parameter below). The Validate function can be found in the manual at InvertibleRSAFunction::Validate. Following the link Definition at line 247 of file rsa.cpp:
  247 bool InvertibleRSAFunction::Validate(RandomNumberGenerator &rng, unsigned int level) const
  248 {
  249     bool pass = RSAFunction::Validate(rng, level);
  250     pass = pass && m_p > Integer::One() && m_p.IsOdd() && m_p < m_n;
  251     pass = pass && m_q > Integer::One() && m_q.IsOdd() && m_q < m_n;
  252     pass = pass && m_d > Integer::One() && m_d.IsOdd() && m_d < m_n;
  253     pass = pass && m_dp > Integer::One() && m_dp.IsOdd() && m_dp < m_p;
  254     pass = pass && m_dq > Integer::One() && m_dq.IsOdd() && m_dq < m_q;
  255     pass = pass && m_u.IsPositive() && m_u < m_p;
  256     if (level >= 1)
  257     {
  258         pass = pass && m_p * m_q == m_n;
  259         pass = pass && m_e*m_d % LCM(m_p-1, m_q-1) == 1;
  260         pass = pass && m_dp == m_d%(m_p-1) && m_dq == m_d%(m_q-1);
  261         pass = pass && m_u * m_q % m_p == 1;
  262     }
  263     if (level >= 2)
  264         pass = pass && VerifyPrime(rng, m_p, level-2) && VerifyPrime(rng, m_q, level-2);
  265     return pass;
  266 }

The remaining open question might be, where did m_p, m_q, etc come from? The answer is Initialize factors n based on e and d, and populates the CRT values like p, q, dp, dq, etc. It speeds up computation later.

This may be related.... e=10001h tells me Crypto++ probably did not generate the key pair. If Crypto++ generated the key pair, then it would use e=17 by default. How did you generate the key pair?
","1195","<c++><rsa><public-key-encryption><crypto++>","1","1","1","2016-06-14 01:36:58","37799178","7","","608639","","2016-06-13 21:13:05","2016-06-13 05:12:24",""
"15953631","RSA Modulus prefaced by 0x00","    0:d=0  hl=4 l= 266 cons: SEQUENCE          
    4:d=1  hl=4 l= 257 prim:  INTEGER           :BDF2C14F11E80EEC62EE63135839DBD8C9140617CD497AB2E0E39E6A0CE75889B46D7EA2BE11ED8D5E05941F9BCF066E1DA9D176D32B22AD34F8F9055680F01F156AD4CAF288FBDF0BB03C1E58ADDFB8DFBC4870C18B38BAB0B3B35757BC10D662E3AD113387348E48E1B46E2DB0041BECA6DFD323EC6D204D7F9B875B9E6C51A1B37E3019D03DB71584F83ED300CC471B42D5C5F1CBD54D884A04A4CD4ABAB87B48C0BDAC4E32DE4B1EB238A3C979CFF07808511D7A4EC5898A2ED93C3BA36661FA14E252BCBDC0876C41D02FBB0B97CD1963A6CB09B274A9D395E93177A6DD00BE3B7C3AC89E53E84829E5B1E0F4048485EE09AE6711791B0B6107F6106423
  265:d=1  hl=2 l=   3 prim:  INTEGER           :010001

$ echo -n 'BDF2C14F11E80EEC62EE63135839DBD8C9140617CD497AB2E0E39E6A0CE75889B46D7EA2BE11ED8D5E05941F9BCF066E1DA9D176D32B22AD34F8F9055680F01F156AD4CAF288FBDF0BB03C1E58ADDFB8DFBC4870C18B38BAB0B3B35757BC10D662E3AD113387348E48E1B46E2DB0041BECA6DFD323EC6D204D7F9B875B9E6C51A1B37E3019D03DB71584F83ED300CC471B42D5C5F1CBD54D884A04A4CD4ABAB87B48C0BDAC4E32DE4B1EB238A3C979CFF07808511D7A4EC5898A2ED93C3BA36661FA14E252BCBDC0876C41D02FBB0B97CD1963A6CB09B274A9D395E93177A6DD00BE3B7C3AC89E53E84829E5B1E0F4048485EE09AE6711791B0B6107F6106423' | wc
      0       1     512

Above is an 2048-bit RSA key generated by OpenSSL. Notice it has a ""257"" length for the modulus field. If you count the hex chars printed for the modulus you see it is appropriately 512=256*2. In the ASN1, there is a 0x00 infront of the modulus. Since the modulus is an integer, this doesn't affect the RSA math. But why is it there? A 0x00 can also be seen in X509 certificates prefixing the public key value. What is the purpose of these extra 0x00?
","That's because of ASN.1 coding. As far as I remember, INTEGERs there are signed so when they starts from byte higher than 0x80 they should be treated as negative numbers, that's why they are prefixed with 0x00.
","1195","<rsa><public-key-encryption><x509>","2","3","1","2016-03-15 22:56:38","","0","2","1816580","","2016-03-15 22:56:38","2013-04-11 16:05:28",""
"50619086","Linux Debian apt-get update ERROR / Atom missing GPG key","I'm running linux debian 9.4.0 64-bit on my machine. Since I installed atom text editor, I receive an ERROR while running ap-get update. The error reads the following:

W: GPG-Fehler: https://packagecloud.io/AtomEditor/atom/any any InRelease: Die folgenden Signaturen konnten nicht überprüft werden, weil ihr öffentlicher Schlüssel nicht verfügbar ist: NO_PUBKEY 4C6E74D6C0A35108
  W: The repository 'https://packagecloud.io/AtomEditor/atom/any any InRelease' is not signed.
  N: Data from such a repository can't be authenticated and is therefore potentially dangerous to use.
  N: See apt-secure(8) manpage for repository creation and user configuration details.

The first line says that the signature of my PGP key could not be verified, since a PUBKEY is unavailable.
The same error message continously shows, even though I purged atom from my system.
Can someone lend me a hand with making my system being updating properly again and how to install atom without causing future problems? 
Thanks in advance!
","EDIT: I initially misunderstood the question and thought you wanted to completely remove Atom and the repository. In that case, the solution would be to remove the relevant entry from your /etc/apt/sources.list file (or the relevant file in etc/apt/sources.list.d, whichever exists).
Now I understand you are trying to install und update Atom without apt giving you the error message described in your question.
In that case, it seems the repository key may not be installed on your system. You can try to follow the instructions at https://packagecloud.io/app/AtomEditor/atom/gpg#gpg-apt to manually install the required GPG key. I recommend reading all the instructions on that page, but the relevant command would be curl -L https://packagecloud.io/AtomEditor/atom/gpgkey | sudo apt-key add -
","1189","<linux><debian><atom-editor><public-key-encryption><gpg-signature>","1","1","1","2018-05-31 09:28:34","50619263","0","","","","","2018-05-31 07:37:34",""
"34314965","How to convert PEM public key to DER public key?","I receive a public key from my REST API which is encoded in PEM. Now, I need to change the encoding to DER in order to store it as a PublicKey object. However, unfortunately, I get the following error:

java.lang.IllegalArgumentException: unknown object in getInstance:
  org.spongycastle.asn1.ASN1Integer

And the error is pointing to this line:
RSAKeyParameters rsa = (RSAKeyParameters) PublicKeyFactory.createKey(pemReader.readPemObject().getContent());

The public key looks like this:
-----BEGIN RSA PUBLIC KEY-----
MIIBCgKCAQEA04XyJ5K4sQCtqapk98yEAR/ECaVC85JYPsqC09GiZboNdSSxQXj3
UNb53Po8iNX24T4elyjjzqQpVcyi+eaFp9Fggg2ZDyK9Re1wTucs0APDQdsGe1Q5
KImT/SBycI7v1RwSgjQ4I6npMg/0lZY8bnw4Q1AaTIII0KFBHmIYBD1oeCSdVPED
JWQWTSXtStQj83Vyj1uSLEEzXLpVYW4fq8e24tH2D/1j6eIBnBw6YpkWE6T9pZlE
wIs8YoeQWt5+lPWI28PST8VKqXsxH6JVzu5Mj6jLw8WTZxyKvNaGgO4B3J/ze/58
zW0LtlhsKMEq48QdLgPJZ+tfac2EhKANrQIDAQAB
-----END RSA PUBLIC KEY-----

Here is my code:
public void setPublicKey(String publicKey) {
    try {
        PemReader pemReader = new PemReader(new StringReader(publicKey));
        RSAKeyParameters rsa = (RSAKeyParameters) PublicKeyFactory.createKey(pemReader.readPemObject().getContent());
        pemReader.close();
        RSAPublicKeySpec rsaSpec = new RSAPublicKeySpec(rsa.getModulus(), rsa.getExponent());
        KeyFactory kf = KeyFactory.getInstance(""RSA/ECB/PKCS1Padding"");
        this.publicKey = kf.generatePublic(rsaSpec);
    } catch (IOException | NoSuchAlgorithmException | InvalidKeySpecException ex) {
        ex.printStackTrace();
        throw new IllegalStateException(""Cannot set public key."");
    }
}

","Java really wants to see an encoded SubjectPublicKeyInfo object, but you have a simpler PKCS#1 RSAPublicKey object.
The easiest way I know of is to use the PEMParser class from bouncycastle PKIX library -- there should be an equivalent library from Spongycastle. Use this class in lieu of the PemReader class you are currently using, as in:
        PEMParser pemParser = new PEMParser(new StringReader(publicKey));
        SubjectPublicKeyInfo spki = (SubjectPublicKeyInfo) pemParser.readObject();
        pemParser.close();
        byte [] spkiEncoded = spki.getEncoded();
        X509EncodedKeySpec keySpec = new X509EncodedKeySpec(spkiEncoded);

        KeyFactory kf = KeyFactory.getInstance(""RSA"");
        this.publicKey = kf.generatePublic(keySpec);

","1187","<java><android><rsa><public-key-encryption><spongycastle>","1","3","1","2015-12-16 22:39:30","","2","1","3475602","","2015-12-16 15:38:57","2015-12-16 14:45:04",""
"23252834","Generating Keypair using bouncy castle in j2me","I have Java code for generating keypair as follows:
KeyPairGenerator keyGen = KeyPairGenerator.getInstance(""RSA"");
keyGen.initialize(1024);
KeyPair key = keyGen.generateKeyPair();
PrivateKey priv = key.getPrivate();
PublicKey pub = key.getPublic();

Now I want to do same in j2me using BC. I have downloaded latest bouncy castle library from Bouncy castle latest release.
Here i want to do same in j2me. Below is my code for generating public and private key for j2me:
 RSAKeyPairGenerator generator = new RSAKeyPairGenerator();
     generator.init(new RSAKeyGenerationParameters(new BigInteger(""10001"", 16),//publicExponent
            SecureRandom.getInstance(""SHA1PRNG""),
            1024,
            80
            ));
    AsymmetricCipherKeyPair keyPair = generator.generateKeyPair();

    AsymmetricKeyParameter myprivatekey = (AsymmetricKeyParameter) keyPair.getPrivate();
    AsymmetricKeyParameter mypublickey = (AsymmetricKeyParameter) keyPair.getPublic();

Now i want to get byte array of public key and private key but there is no such method to get encoded bytes directly from AsymmetricKeyParameter class. By googling I have found below solution to get bytes from the AsymmetricKeyParameter .
   PrivateKeyInfo   pkInfo = PrivateKeyInfoFactory.createPrivateKeyInfo(myprivatekey);
   byte[] privateKey = pkInfo.getEncoded();

This code should be work but unfortunately my netbeans showing java.lang.Error: ClassFormatError: when i run this code.
Please help me how to resolve this error or let me know any other alternative by which i can get bytes from AsymmetricCipherKeyPair as i want to send this key to my server using socket connection. FOr your information i m using Netbeans 6.9.1 and j2ME SDK 3.0.5 to build my j2me application.
Any help would be appriciated. Thanks
Here is my full midlet code.
import java.io.IOException;
import java.math.BigInteger;
import java.security.SecureRandom;

import javax.microedition.lcdui.Command;
import javax.microedition.lcdui.CommandListener;
import javax.microedition.lcdui.Display;
import javax.microedition.lcdui.Displayable;
import javax.microedition.lcdui.Form;
import javax.microedition.midlet.*;
import org.bouncycastle.asn1.pkcs.PrivateKeyInfo;
import org.bouncycastle.crypto.AsymmetricCipherKeyPair;
import org.bouncycastle.crypto.generators.RSAKeyPairGenerator;
import org.bouncycastle.crypto.params.AsymmetricKeyParameter;
import org.bouncycastle.crypto.params.RSAKeyGenerationParameters;
import org.bouncycastle.crypto.util.PrivateKeyInfoFactory;

/**
 * @author nirav.bhandari
 */
public class RSAClientMidlet extends MIDlet implements CommandListener {

    public void startApp() {

        Form f = new Form(""Test"");
        Command cmd = new Command(""Exit"", Command.EXIT, 1);
        f.addCommand(cmd);

        f.setCommandListener(this);
        Display d = Display.getDisplay(this);
        d.setCurrent(f);

        RSAKeyPairGenerator generator = new RSAKeyPairGenerator();
        generator.init(new RSAKeyGenerationParameters(new BigInteger(""10001"", 16),//publicExponent
                SecureRandom.getInstance(""SHA1PRNG""),
                1024,
                80));
        AsymmetricCipherKeyPair keyPair = generator.generateKeyPair();

        AsymmetricKeyParameter myprivatekey = (AsymmetricKeyParameter) keyPair.getPrivate();
        AsymmetricKeyParameter mypublickey = (AsymmetricKeyParameter) keyPair.getPublic();
        System.out.println(""Done"");
        PrivateKeyInfo pkInfo;

        try {

           pkInfo = PrivateKeyInfoFactory.createPrivateKeyInfo(myprivatekey);
           // i get classformat error here. un
           byte[] privateKey = pkInfo.getEncoded();
  SubjectPublicKeyInfo publicKeyInfo = SubjectPublicKeyInfoFactory.createSubjectPublicKeyInfo(mypublickey);

        } catch (IOException ex) {
            ex.printStackTrace();
        }

    }

    public void pauseApp() {
    }

    public void destroyApp(boolean unconditional) {
        notifyDestroyed();
    }

    public void commandAction(Command c, Displayable d) {
        destroyApp(true);
    }

    private void show(String string) {
        System.out.println(string);
    }
}

here is my stack trace of errror
    TRACE: <at java.lang.Error: ClassFormatError:  78>, startApp threw an Exception
java.lang.Error: ClassFormatError:  78
        at RSAClientMidlet.startApp(), bci=123
        at javax.microedition.midlet.MIDletTunnelImpl.callStartApp(), bci=1
        at com.sun.midp.midlet.MIDletPeer.startApp(), bci=7
        at com.sun.midp.midlet.MIDletStateHandler.startSuite(), bci=273
        at com.sun.midp.main.AbstractMIDletSuiteLoader.startSuite(), bci=52
        at com.sun.midp.main.CldcMIDletSuiteLoader.startSuite(), bci=8
        at com.sun.midp.main.AbstractMIDletSuiteLoader.runMIDletSuite(), bci=161
        at com.sun.midp.main.AppIsolateMIDletSuiteLoader.main(), bci=26
java.lang.Error: ClassFormatError:  78
        at RSAClientMidlet.startApp(), bci=123
        at javax.microedition.midlet.MIDletTunnelImpl.callStartApp(), bci=1
        at com.sun.midp.midlet.MIDletPeer.startApp(), bci=7
        at com.sun.midp.midlet.MIDletStateHandler.startSuite(), bci=273
        at com.sun.midp.main.AbstractMIDletSuiteLoader.startSuite(), bci=52
        at com.sun.midp.main.CldcMIDletSuiteLoader.startSuite(), bci=8
        at com.sun.midp.main.AbstractMIDletSuiteLoader.runMIDletSuite(), bci=161
        at com.sun.midp.main.AppIsolateMIDletSuiteLoader.main(), bci=26
javacall_lifecycle_state_changed() lifecycle: event is JAVACALL_LIFECYCLE_MIDLET_SHUTDOWN status is JAVACALL_OK

","","1181","<java><java-me><rsa><bouncycastle><public-key-encryption>","1","","0","2014-04-25 12:10:28","","4","1","474189","","2014-04-25 12:10:28","2014-04-23 18:50:24",""
"26714704","RSA_Private_Decrypt fails randomly","I am not a crypto expert, but I wrote encrypt/decrypt methods. I don't know what I am doing wrong here. The encryptKey method returns the variable text length every time for the same string, which is may be due to RSA_PKCS1_PADDING which I am using, but for same string of text, the decryptKey function fails if the encrypted text length is below some threshold.
//----------------------Encryption -----------------------
int Asymmetric::encryptKey(unsigned char *data, int data_len, unsigned char *encrypted)
{
    RSA * rsa = createRSA(1); // Loads the public key
    int result = RSA_public_encrypt(data_len,data,encrypted,rsa,padding);
    return result;
}
//-----------------------Decryption -----------------------
int Asymmetric::decryptKey(unsigned char * enc_data,int data_len, unsigned char *decrypted)
{
    RSA * rsa = createRSA(0); // Loads the private key
    int  result = RSA_private_decrypt(data_len,enc_data,decrypted,rsa,padding);
    return result;
}

How i can overcome this situation?
Edit: 
This code does not work 
char *myData = ""Sample Text"";
unsigned char *encrypt = (unsigned char*)malloc(RSA_size(rsaPub));
int result = RSA_public_encrypt(RSA_size(rsaPub)-11 ,(unsigned char*)myData,encrypt,rsaPub,padding);
fprintf(stderr, ""\nEnc Size: %d \n"", strlen((const char*)encrypt));

","If you perform padding, cipher text should have fixed size equal to RSA public key modulus. If you get different size every time, then there is something with your program.
When you perform encryption data must be less than RSA_size(rsa) - 11 and encrypted must point to RSA_size(rsa) bytes of memory.
strlen(const char * str) computes length of null-terminated string. encrypt is not the string and is not null terminated, so using strlen is not valid here. Luckily for you PKCS#1 padding contains zero bytes, so you don't get segmentation fault.
On the other hand myData is a null terminated string. However, you use RSA_size(rsaPub) - 11 as its length, which will result in occasional segmentation faults.
","1180","<c++><openssl><public-key-encryption><private-key><public-key>","1","1","1","2014-11-07 12:46:55","26717866","0","","642653","","2014-11-07 12:46:55","2014-11-03 12:46:50",""
"43546712","How to generate a Curve25519 key pair in Terminal?","How can we generate a Curve25519 key pair from the command line?
We have a MacBook Air with Homebrew installed.

Should we use OpenSSL or another command line tool?
How do we use that tool to generate a Curve25519 key pair?

","You can use the following command for generating the key pair:
openssl genpkey -algorithm x25519 -out x25519-priv.pem
And for extracting pubic key:
openssl pkey -in x25519-priv.pem -pubout -out x25519-pub.pem
","1172","<public-key-encryption><command-line-tool><curve-25519>","3","1","1","2018-08-29 04:50:27","","0","2","","","","2017-04-21 15:34:23",""
"20877645","Convert string to java.Securtiy.Publickey in java","In LDAP server, i stored my public key in string format. I have to compare the value retrieved from LDAP server and user certificate's public key.
From LDAP, I am retrieving ""public key"" in string format. By the following method I am getting the output in Publickey format.
   PublicKey pub = certificate.getPublicKey();

For example:
 public key which store and retrieved from ldap : 3082010a0282010100da7ce03ec4628dce29042f93787c6a70c0ee2c2911696519c2e2ca10526ae7c97c8b6f095c    755f8c5e9c6ab97937bc6b70cdda8791ecd4c23b53cc5a981ea4be54d849926812d54e1f0c1d8d209f1966a29d27    b3b38831fbbf4aa80cb942f419e82dbb7bdc43790edfe39093697b89f8c306825307a674e7ead0a9a204a7c4331b    bd91bb95450ad2b978e635754d93a463220951c0f686e745ab56f1546a97ae2d87f530bde91cd50c2227d8dc15dcfa83b5f8bfd9e0b220bd8c1aa79763eb9ba7fd7825068febc0eb5bcfaafb87f3cfd17e2cbbe2f34ca38afe41f4bbc2042fa60dcf523601c8e5814c9aa6b59a122f27bd8b41645d9e4d6354e6e73290a44b0203010001

By the getPublicKey(), the values which i got from the certificate:
***
Sun RSA public key, 2048 bits
  modulus: 27581529112434455235399395495614661533524412849635912113821287924504314523203618221111108554792991994769511573234800381771189010092150662628156212797633901233021643754113925752858789999673304383861033906601469425706410753965248401239420679412397865844085987446528705248999902851200983500329050023325120622391550261964890287105642353902616488504197743500423303718260297874452584758316112606373795219655154047474828562736482689611898639008146126941813294363625955891232168718045290340674469984492628450581693408065679439269743483807803383534881136917173883224245178115070348015851631285800664873321494327268193971774539
  public exponent: 65537

  System.out.println(""the encoded thing is....""+pub.getEncoded()) is: [B@2c683bfc

  BASE64Encoder encoder = new BASE64Encoder();
  String s = encoder.encode(pub.getEncoded());
   o/p is
      MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA2nzgPsRijc4pBC+TeHxqcMDuLCkRaWUZ    wuLKEFJq58l8i28JXHVfjF6carl5N7xrcM3ah5Hs1MI7U8xamB6kvlTYSZJoEtVOHwwdjSCfGWai      nSezs4gx+79KqAy5QvQZ6C27e9xDeQ7f45CTaXuJ+MMGglMHpnTn6tCpogSnxDMbvZG7lUUK0rl4     5jV1TZOkYyIJUcD2hudFq1bxVGqXri2H9TC96RzVDCIn2NwV3PqDtfi/2eCyIL2MGqeXY+ubp/14JQaP68DrW8+q+4fzz9F+LLvi80yjiv5B9LvCBC+mDc9SNgHI5YFMmqa1mhIvJ72LQWRdnk1jVObnMpCkSwIDAQAB

Is there any way to compare both the values? String and Publickey
","If the string that you got from LDAP server is of Base64encoded,
Encode you Public key object to String

1. Convert it to Byte array.

    byte array = pub.getEncoded();

2. Convert Byte array to String.

    BASE64Encoder encoder = new BASE64Encoder();
    string = encoder.encode(byte array);

Now you can compare the strings.
","1170","<java><security><ldap><public-key-encryption><openldap>","1","0","3","2014-09-11 05:11:30","21021735","6","","2143946","","2014-09-11 05:11:30","2014-01-02 06:38:42",""
"20877645","Convert string to java.Securtiy.Publickey in java","In LDAP server, i stored my public key in string format. I have to compare the value retrieved from LDAP server and user certificate's public key.
From LDAP, I am retrieving ""public key"" in string format. By the following method I am getting the output in Publickey format.
   PublicKey pub = certificate.getPublicKey();

For example:
 public key which store and retrieved from ldap : 3082010a0282010100da7ce03ec4628dce29042f93787c6a70c0ee2c2911696519c2e2ca10526ae7c97c8b6f095c    755f8c5e9c6ab97937bc6b70cdda8791ecd4c23b53cc5a981ea4be54d849926812d54e1f0c1d8d209f1966a29d27    b3b38831fbbf4aa80cb942f419e82dbb7bdc43790edfe39093697b89f8c306825307a674e7ead0a9a204a7c4331b    bd91bb95450ad2b978e635754d93a463220951c0f686e745ab56f1546a97ae2d87f530bde91cd50c2227d8dc15dcfa83b5f8bfd9e0b220bd8c1aa79763eb9ba7fd7825068febc0eb5bcfaafb87f3cfd17e2cbbe2f34ca38afe41f4bbc2042fa60dcf523601c8e5814c9aa6b59a122f27bd8b41645d9e4d6354e6e73290a44b0203010001

By the getPublicKey(), the values which i got from the certificate:
***
Sun RSA public key, 2048 bits
  modulus: 27581529112434455235399395495614661533524412849635912113821287924504314523203618221111108554792991994769511573234800381771189010092150662628156212797633901233021643754113925752858789999673304383861033906601469425706410753965248401239420679412397865844085987446528705248999902851200983500329050023325120622391550261964890287105642353902616488504197743500423303718260297874452584758316112606373795219655154047474828562736482689611898639008146126941813294363625955891232168718045290340674469984492628450581693408065679439269743483807803383534881136917173883224245178115070348015851631285800664873321494327268193971774539
  public exponent: 65537

  System.out.println(""the encoded thing is....""+pub.getEncoded()) is: [B@2c683bfc

  BASE64Encoder encoder = new BASE64Encoder();
  String s = encoder.encode(pub.getEncoded());
   o/p is
      MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA2nzgPsRijc4pBC+TeHxqcMDuLCkRaWUZ    wuLKEFJq58l8i28JXHVfjF6carl5N7xrcM3ah5Hs1MI7U8xamB6kvlTYSZJoEtVOHwwdjSCfGWai      nSezs4gx+79KqAy5QvQZ6C27e9xDeQ7f45CTaXuJ+MMGglMHpnTn6tCpogSnxDMbvZG7lUUK0rl4     5jV1TZOkYyIJUcD2hudFq1bxVGqXri2H9TC96RzVDCIn2NwV3PqDtfi/2eCyIL2MGqeXY+ubp/14JQaP68DrW8+q+4fzz9F+LLvi80yjiv5B9LvCBC+mDc9SNgHI5YFMmqa1mhIvJ72LQWRdnk1jVObnMpCkSwIDAQAB

Is there any way to compare both the values? String and Publickey
","
i am storing the public key in the ""string"" format in LDAP server.

That's your first mistake. Don't do that. Store it as a byte array. String is not a container for binary data.
After that it's just a matter of comparing byte arrays, which you can do via Arrays.equals().
","1170","<java><security><ldap><public-key-encryption><openldap>","1","1","3","2014-09-11 05:11:30","21021735","6","","2143946","","2014-09-11 05:11:30","2014-01-02 06:38:42",""
"20877645","Convert string to java.Securtiy.Publickey in java","In LDAP server, i stored my public key in string format. I have to compare the value retrieved from LDAP server and user certificate's public key.
From LDAP, I am retrieving ""public key"" in string format. By the following method I am getting the output in Publickey format.
   PublicKey pub = certificate.getPublicKey();

For example:
 public key which store and retrieved from ldap : 3082010a0282010100da7ce03ec4628dce29042f93787c6a70c0ee2c2911696519c2e2ca10526ae7c97c8b6f095c    755f8c5e9c6ab97937bc6b70cdda8791ecd4c23b53cc5a981ea4be54d849926812d54e1f0c1d8d209f1966a29d27    b3b38831fbbf4aa80cb942f419e82dbb7bdc43790edfe39093697b89f8c306825307a674e7ead0a9a204a7c4331b    bd91bb95450ad2b978e635754d93a463220951c0f686e745ab56f1546a97ae2d87f530bde91cd50c2227d8dc15dcfa83b5f8bfd9e0b220bd8c1aa79763eb9ba7fd7825068febc0eb5bcfaafb87f3cfd17e2cbbe2f34ca38afe41f4bbc2042fa60dcf523601c8e5814c9aa6b59a122f27bd8b41645d9e4d6354e6e73290a44b0203010001

By the getPublicKey(), the values which i got from the certificate:
***
Sun RSA public key, 2048 bits
  modulus: 27581529112434455235399395495614661533524412849635912113821287924504314523203618221111108554792991994769511573234800381771189010092150662628156212797633901233021643754113925752858789999673304383861033906601469425706410753965248401239420679412397865844085987446528705248999902851200983500329050023325120622391550261964890287105642353902616488504197743500423303718260297874452584758316112606373795219655154047474828562736482689611898639008146126941813294363625955891232168718045290340674469984492628450581693408065679439269743483807803383534881136917173883224245178115070348015851631285800664873321494327268193971774539
  public exponent: 65537

  System.out.println(""the encoded thing is....""+pub.getEncoded()) is: [B@2c683bfc

  BASE64Encoder encoder = new BASE64Encoder();
  String s = encoder.encode(pub.getEncoded());
   o/p is
      MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA2nzgPsRijc4pBC+TeHxqcMDuLCkRaWUZ    wuLKEFJq58l8i28JXHVfjF6carl5N7xrcM3ah5Hs1MI7U8xamB6kvlTYSZJoEtVOHwwdjSCfGWai      nSezs4gx+79KqAy5QvQZ6C27e9xDeQ7f45CTaXuJ+MMGglMHpnTn6tCpogSnxDMbvZG7lUUK0rl4     5jV1TZOkYyIJUcD2hudFq1bxVGqXri2H9TC96RzVDCIn2NwV3PqDtfi/2eCyIL2MGqeXY+ubp/14JQaP68DrW8+q+4fzz9F+LLvi80yjiv5B9LvCBC+mDc9SNgHI5YFMmqa1mhIvJ72LQWRdnk1jVObnMpCkSwIDAQAB

Is there any way to compare both the values? String and Publickey
","In ldap we can directly save our certificate instead of storing as integer values.
  In ldif file:
    dc: xxxx
    objectClass: yyyyy
    userCertificate;binary:< file:///path/to/certificate.der

like this we have to upload..:)
package to handle certificates:
 java.security.cert.X509Certificate 

","1170","<java><security><ldap><public-key-encryption><openldap>","1","0","3","2014-09-11 05:11:30","21021735","6","","2143946","","2014-09-11 05:11:30","2014-01-02 06:38:42",""
"19819709","Can I use elliptic curve cryptography as a password with Bouncy Castle in C#?","I'd like to encrypt some data on a server so if someone got access to the database and codebase the secret data would not be compromised.
It seems to me a good way to do this is through elliptic curve cryptography.
I'm wondering how to do this in Bouncy Castle? I've Googled around and read some blog posts, but they generate keys unrelated to strings and I'm not sure how to implement it with a password, plus I don't want to make a mistake.
essentially I'd like something like this:
var privateKey = GetPrivateKey(""secretpassword"");
var publicKey = GetPublicKey(privateKey);


string data = ""secret data"";
var encryptedData = encryptData(publicKey, data);
string data2 = unencryptData(privateKey, data);

Assert.AreEqual(data, data2);

This is my current work in progress:
    string password = ""n55xSMb7J7n7K8zBRn""; // this will not be hardcoded in the application. It will come from a password prompt
    byte[] salt = ASCIIEncoding.UTF8.GetBytes(password + password);
    int iterations = 5;
    int keySizeInBits = 32;
    Pkcs5S2ParametersGenerator generator = new Pkcs5S2ParametersGenerator(new Sha256Digest());
    generator.Init(PbeParametersGenerator.Pkcs5PasswordToUtf8Bytes(password.ToCharArray()), salt, iterations);
    KeyParameter key = (KeyParameter)generator.GenerateDerivedMacParameters(keySizeInBits);
    byte[] k = key.GetKey();


    X9ECParameters ecP = Org.BouncyCastle.Asn1.Sec.SecNamedCurves.GetByName(""secp256k1"");
    ECDomainParameters ecSpec = new ECDomainParameters(ecP.Curve, ecP.G, ecP.N, ecP.H, ecP.GetSeed());
    IAsymmetricCipherKeyPairGenerator g = GeneratorUtilities.GetKeyPairGenerator(""ECDSA"");
    g.Init(new ECKeyGenerationParameters(ecSpec, new SecureRandom(k)));
    AsymmetricCipherKeyPair aKeyPair = g.GenerateKeyPair();
    AsymmetricKeyParameter privateK = aKeyPair.Private;
    AsymmetricKeyParameter publicK = aKeyPair.Public;

","","1140","<c#><bouncycastle><public-key-encryption>","0","","0","2013-11-19 13:04:33","","11","","46076","","2013-11-19 13:04:33","2013-11-06 18:19:37",""
"11385706","Sending a byte array over REST which contains encrypted data","I use the following code to encrypt some data and I want to move the decryption code to a server so need to send the cipherData (which is a byte [] array ) to my server over REST
        BigInteger modulus = new BigInteger(""blah"");
        BigInteger exponent = new BigInteger(""blah"");

        RSAPublicKeySpec keySpec = new RSAPublicKeySpec(modulus, exponent);

        KeyFactory encryptfact = KeyFactory.getInstance(""RSA"");
        PublicKey pubKey = encryptfact.generatePublic(keySpec);

        String dataToEncrypt = ""Hello World"";

        /**
         * Encrypt data
         */
        Cipher encrypt = Cipher.getInstance(""RSA"");
        encrypt.init(Cipher.ENCRYPT_MODE, pubKey);
        byte[] cipherData = encrypt.doFinal(dataToEncrypt.getBytes());

        System.out.println(""cipherData: "" + new String(cipherData));

        /**
         * Decrypt data
         */
        BigInteger privatemodulus = new BigInteger(""blah"");
        BigInteger privateexponent = new BigInteger(""blah"");

        RSAPrivateKeySpec privateKeySpec = new RSAPrivateKeySpec(privatemodulus, privateexponent);

        PrivateKey privateKey = encryptfact.generatePrivate(privateKeySpec);

        Cipher decrypt = Cipher.getInstance(""RSA"");
        decrypt.init(Cipher.DECRYPT_MODE, privateKey);
        byte[] decData = decrypt.doFinal(cipherData);

        System.out.println(new String(decData));

This works fine. 
I was hoping I could just create a new String with the cipherData as a parm 
When I try this with the above example I get the following error 
byte[] decData = decrypt.doFinal(new String(cipherData).getBytes());

javax.crypto.BadPaddingException: Data must start with zero
at sun.security.rsa.RSAPadding.unpadV15(RSAPadding.java:308)
at sun.security.rsa.RSAPadding.unpad(RSAPadding.java:255)
at com.sun.crypto.provider.RSACipher.a(DashoA13*..)
at com.sun.crypto.provider.RSACipher.engineDoFinal(DashoA13*..)
at javax.crypto.Cipher.doFinal(DashoA13*..)
at com.test.EncryptTest.main(EncryptTest.java:52)

Any ideas?
","
I was hoping I could just create a new String with the cipherData as a parm

No. cipherData is arbitrary binary data. It's not encoded text, which is what the various String constructors expect. (As an aside, you should almost never call the String.getBytes() or new String(byte[]) which don't specify an encoding. Always specify an appropriate encoding, which will depend on the situation.)
Either transmit the data as binary data instead of going through text at all, or use Base64 to safely encode the binary data as text first, then decode it from Base64 to binary again later before decrypting. There's a public domain Base64 encoder which is easy to use.
","1138","<java><aes><public-key-encryption>","0","3","1","2013-07-08 10:05:28","11385743","0","3","","","","2012-07-08 18:47:07",""
"26618796","Export an RSA Public Key from C# for Java's X509EncodedKeySpec","How can I encode RSA public key in C# so that I can use is later in a Java application ()? Please, note that I need to do it on the .NET side. I'm trying to use BouncyCastle API to achieve this, but I cannot find a single piece of documentation that would describe such functionality.
","Here's how you do it:
using (var rsa = new RSACryptoServiceProvider(cp))
{
    var keyPair = DotNetUtilities.GetKeyPair(rsa);
    var publicKeyInfo = SubjectPublicKeyInfoFactory.CreateSubjectPublicKeyInfo(keyPair.Public);
    var serializedPublicBytes = publicKeyInfo.GetEncoded();
    return BitConverter.ToString(serializedPublicBytes).Replace(""-"", """");
}

You can find more details here: http://www.rahulsingla.com/blog/2011/04/serializing-deserializing-rsa-public-private-keys-generated-using-bouncy-castle-library
","1136","<java><c#><rsa><public-key-encryption>","1","2","1","2014-10-29 11:42:06","26629440","4","1","896276","","2014-10-29 09:42:03","2014-10-28 21:26:41",""
"10315420","Output of openssl_public_encrypt() and openssl_private_encrypt()","I would like to know few things

What is output of openssl_public_encrypt() and openssl_private_encrypt() functions?
Output of above functions (Encrypted data), will that be web-safe? 
How can I transfer generated encrypted data between websites?

","openssl_public_encrypt() encrypts a message with a public key so that only the corresponding private key can decrypt it.  This is used for protecting information against being seen by people who shouldn't.
openssl_private_encrypt() encrypts a message with a private key so that it can be decrypted by anyone who has the corresponding public key.  This is not used for protecting information against unwanted eyes, it's used for making digital signatures to help verify that the data hasn't been modified.  You generally shouldn't use this function; use openssl_sign() and openssl_verify() instead.
Encryption and signing are typically used together:  you take your data, sign it (using openssl_sign()) with your own private key, and then encrypt it (using openssl_public_encrypt()) with the recipient's public key.  Send both the signature and the encrypted message to the recipient, and the recipient can decrypt the message (using openssl_private_decrypt()) with his private key, and verify the signature (using openssl_verify()) with your public key.  This ensures that no one can read or tamper with the message while it's in transit, which is probably what you mean by ""web-safe"".
As for transferring data between websites, you can do that in any way you want.  HTTP, FTP, email, API calls, whatever.  The whole point of encryption and signing is that you don't have to use any special means to transfer the message securely.
","1130","<php><encryption><openssl><public-key-encryption>","0","1","1","2012-04-25 13:07:53","","3","","","","","2012-04-25 12:17:02",""
"16206788","encrypt/decrypt public/private android","How to encrypt/decrypt public/private .    
I am assuming that means the key is dynamic and never the same for a string.     
I would like to know if there is any library for doing so or step by step tutorial to allow a beginner to understand and implement in a an app.
I would like to secure password in http example:
http://www.example.com/username=""ENCRYPTED1""+Password=""ENCRYPTED2""

Encrypted 1 and 2 is dynamic and never same.
by the method above and the key should always changes hence even if you type the encryption key in the browser it should not allow as the key would have changed .
I am hoping this is the right path .
I looked in to Spongy castle and I did not understand how to implement the same.
Please help me out and guide me.
Thanks in Advance.
Code :
public class CustomizedListView extends Activity {
    // All static variables
    static final String URL = ""http://example.com/getmsgs/userno=123"";
    // XML node keys
    static final String KEY_SONG = ""song""; // parent node
    static final String KEY_ID = ""id"";
    static final String KEY_TITLE = ""title"";
    static final String KEY_ARTIST = ""artist"";
    static final String KEY_DURATION = ""duration"";
    static final String KEY_THUMB_URL = ""thumb_url"";

    ListView list;
    LazyAdapter adapter;

    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.main);


        ArrayList<HashMap<String, String>> songsList = new ArrayList<HashMap<String, String>>();

        JSONObject json = JSONfunctions.getJSONfromURL(URL);


        try {
            JSONObject arr2 = json.getJSONObject(""feed"");
            JSONArray arr = arr2.getJSONArray(""entry"");

            for (int i = 0; i < arr.length(); i++) {
                JSONObject e1 = arr.getJSONObject(i);

                JSONArray arr3 = e1.getJSONArray(""im:image"");

                JSONObject arr8 = e1.getJSONObject(""im:name"");

                JSONObject arr10 = e1.getJSONObject(""im:artist"");

                    JSONObject e12 = arr3.getJSONObject(0);

            // creating new HashMap
            HashMap<String, String> map = new HashMap<String, String>();

            map.put(KEY_THUMB_URL,  e12.getString(""label""));

            map.put(KEY_ARTIST, arr8.getString(""label""));
            map.put(KEY_TITLE, arr10.getString(""label""));
            // adding HashList to ArrayList
            songsList.add(map);
            }

        } catch (JSONException e) {
            // Log.e(""log_tag"", ""Error parsing data ""+e.toString());
            Toast.makeText(getBaseContext(),
                    ""Network communication error!"", 5).show();
        }


        list=(ListView)findViewById(R.id.list);

        // Getting adapter by passing xml data ArrayList
        adapter=new LazyAdapter(this, songsList);        
        list.setAdapter(adapter);

        // Click event for single list row
        list.setOnItemClickListener(new OnItemClickListener() {

            @SuppressWarnings(""unchecked"")
            @Override
            public void onItemClick(AdapterView<?> parent, View view,
                    int position, long id) {


                HashMap<String, String> o = (HashMap<String, String>) list.getItemAtPosition(position);
                Toast.makeText(CustomizedListView.this, ""ID '"" + o.get(""KEY_TITLE"") + ""' was clicked."", Toast.LENGTH_SHORT).show(); 

            }
        });     
    }   
}

PHP Code:
<?php

$strno=$_GET['strno'];

if (isset($strno))
{
        $connect=mysql_connect(""localhost"",""test"",""test"") or die ('Connection error!!!');
        mysql_select_db(""test"") or die ('Database error!!!');

    $query=mysql_query(""select sno FROM users  where strno='$strno';"");
    while($row = mysql_fetch_assoc($query))

    {
        $jsonoutput='{""json"":{
            ""msg_sub"":""'.$row['msg_sub'].'"",
            }}';
    }

}

echo trim($jsonoutput);
mysql_close($connect) or die ('Unable to close connection-error!!!');
}

?>

JSONfunctions.java
public class JSONfunctions {

    public static JSONObject getJSONfromURL(String url){
        InputStream is = null;
        String result = """";
        JSONObject jArray = null;

        //http post
        try{
                HttpClient httpclient = new DefaultHttpClient();
                HttpPost httppost = new HttpPost(url);
                HttpResponse response = httpclient.execute(httppost);
                HttpEntity entity = response.getEntity();
                is = entity.getContent();

        }catch(Exception e){
                Log.e(""log_tag"", ""Error in http connection ""+e.toString());
        }

      //convert response to string
        try{
            BufferedReader reader = new BufferedReader(new InputStreamReader(is,""iso-8859-1""),8);
            StringBuilder sb = new StringBuilder();
            String line = null;
            while ((line = reader.readLine()) != null) {
                    sb.append(line + ""\n"");
            }
            is.close();
            result=sb.toString();
    }catch(Exception e){
            Log.w(""log_tag"", ""Error converting result ""+e.toString());
    }

    try{

        jArray = new JSONObject(result);            
    }catch(JSONException e){
            Log.w(""log_tag"", ""Error parsing data ""+e.toString());
    }

    return jArray;
}

}
","
I am hoping this is the right path .

You're way off track.
Instead of creating your own protocol, use SSL/HTTPS, the client can then send their username and password as usual through POST request (except it's done over HTTPS).
Alternatively, you can do ""mutual authentication"". This means that both the client and the server are authenticated using their public key (with HTTPS, only the server is authenticated with their certificate/public key).
","1120","<android><encryption><public-key-encryption>","0","3","2","2013-04-29 08:25:52","16206958","0","","2317218","","2013-04-25 06:36:01","2013-04-25 05:09:54",""
"16206788","encrypt/decrypt public/private android","How to encrypt/decrypt public/private .    
I am assuming that means the key is dynamic and never the same for a string.     
I would like to know if there is any library for doing so or step by step tutorial to allow a beginner to understand and implement in a an app.
I would like to secure password in http example:
http://www.example.com/username=""ENCRYPTED1""+Password=""ENCRYPTED2""

Encrypted 1 and 2 is dynamic and never same.
by the method above and the key should always changes hence even if you type the encryption key in the browser it should not allow as the key would have changed .
I am hoping this is the right path .
I looked in to Spongy castle and I did not understand how to implement the same.
Please help me out and guide me.
Thanks in Advance.
Code :
public class CustomizedListView extends Activity {
    // All static variables
    static final String URL = ""http://example.com/getmsgs/userno=123"";
    // XML node keys
    static final String KEY_SONG = ""song""; // parent node
    static final String KEY_ID = ""id"";
    static final String KEY_TITLE = ""title"";
    static final String KEY_ARTIST = ""artist"";
    static final String KEY_DURATION = ""duration"";
    static final String KEY_THUMB_URL = ""thumb_url"";

    ListView list;
    LazyAdapter adapter;

    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.main);


        ArrayList<HashMap<String, String>> songsList = new ArrayList<HashMap<String, String>>();

        JSONObject json = JSONfunctions.getJSONfromURL(URL);


        try {
            JSONObject arr2 = json.getJSONObject(""feed"");
            JSONArray arr = arr2.getJSONArray(""entry"");

            for (int i = 0; i < arr.length(); i++) {
                JSONObject e1 = arr.getJSONObject(i);

                JSONArray arr3 = e1.getJSONArray(""im:image"");

                JSONObject arr8 = e1.getJSONObject(""im:name"");

                JSONObject arr10 = e1.getJSONObject(""im:artist"");

                    JSONObject e12 = arr3.getJSONObject(0);

            // creating new HashMap
            HashMap<String, String> map = new HashMap<String, String>();

            map.put(KEY_THUMB_URL,  e12.getString(""label""));

            map.put(KEY_ARTIST, arr8.getString(""label""));
            map.put(KEY_TITLE, arr10.getString(""label""));
            // adding HashList to ArrayList
            songsList.add(map);
            }

        } catch (JSONException e) {
            // Log.e(""log_tag"", ""Error parsing data ""+e.toString());
            Toast.makeText(getBaseContext(),
                    ""Network communication error!"", 5).show();
        }


        list=(ListView)findViewById(R.id.list);

        // Getting adapter by passing xml data ArrayList
        adapter=new LazyAdapter(this, songsList);        
        list.setAdapter(adapter);

        // Click event for single list row
        list.setOnItemClickListener(new OnItemClickListener() {

            @SuppressWarnings(""unchecked"")
            @Override
            public void onItemClick(AdapterView<?> parent, View view,
                    int position, long id) {


                HashMap<String, String> o = (HashMap<String, String>) list.getItemAtPosition(position);
                Toast.makeText(CustomizedListView.this, ""ID '"" + o.get(""KEY_TITLE"") + ""' was clicked."", Toast.LENGTH_SHORT).show(); 

            }
        });     
    }   
}

PHP Code:
<?php

$strno=$_GET['strno'];

if (isset($strno))
{
        $connect=mysql_connect(""localhost"",""test"",""test"") or die ('Connection error!!!');
        mysql_select_db(""test"") or die ('Database error!!!');

    $query=mysql_query(""select sno FROM users  where strno='$strno';"");
    while($row = mysql_fetch_assoc($query))

    {
        $jsonoutput='{""json"":{
            ""msg_sub"":""'.$row['msg_sub'].'"",
            }}';
    }

}

echo trim($jsonoutput);
mysql_close($connect) or die ('Unable to close connection-error!!!');
}

?>

JSONfunctions.java
public class JSONfunctions {

    public static JSONObject getJSONfromURL(String url){
        InputStream is = null;
        String result = """";
        JSONObject jArray = null;

        //http post
        try{
                HttpClient httpclient = new DefaultHttpClient();
                HttpPost httppost = new HttpPost(url);
                HttpResponse response = httpclient.execute(httppost);
                HttpEntity entity = response.getEntity();
                is = entity.getContent();

        }catch(Exception e){
                Log.e(""log_tag"", ""Error in http connection ""+e.toString());
        }

      //convert response to string
        try{
            BufferedReader reader = new BufferedReader(new InputStreamReader(is,""iso-8859-1""),8);
            StringBuilder sb = new StringBuilder();
            String line = null;
            while ((line = reader.readLine()) != null) {
                    sb.append(line + ""\n"");
            }
            is.close();
            result=sb.toString();
    }catch(Exception e){
            Log.w(""log_tag"", ""Error converting result ""+e.toString());
    }

    try{

        jArray = new JSONObject(result);            
    }catch(JSONException e){
            Log.w(""log_tag"", ""Error parsing data ""+e.toString());
    }

    return jArray;
}

}
","Don't invent new security protocols. Use HTTPS and then you don't need to encrypt the password yourself. With HTTP, any way you will encrypt and exchange keys will probably be not very effective, unless you do something basically the same as HTTPS does. It will only be Security through obscurity (google for that).
Edit:
And don't send passwords as GET parameters, but always as POST data, even with HTTPS. Even though GET parameters cannot be captured on the wire if https is used, they may be cached by browsers or go to server log unencrypted, for more info see here: http://www.w3schools.com/tags/ref_httpmethods.asp
","1120","<android><encryption><public-key-encryption>","0","0","2","2013-04-29 08:25:52","16206958","0","","2317218","","2013-04-25 06:36:01","2013-04-25 05:09:54",""
"49071730","X509Certificate2 - Access Denied Exception if use ECC certificate","I try to encrypt and decrypt data with System.Security.Cryptography.Pkcs, but it works only with RSA certificates, if I used an ECC (curve ECDH_brainpoolP512r1) certificate the constructor of X509Certificate2 crashes with an Access Denied Exception.
Create SelfSignedCertificate in Powershell
New-SelfSignedCertificate `
 -Subject ""CN=Test Code Signing RSA"" `
 -Type DocumentEncryptionCert `
 -KeyUsage ""DigitalSignature"" `
 -FriendlyName ""Test Code Signing"" `
 -NotAfter (get-date).AddYears(5) `
 -KeyExportPolicy Exportable `
 -SmimeCapabilities ` 
 -KeyAlgorithm ECDH_brainpoolP512r1

Read SelfSignedCertificate in code
var base64cert = ""MIIF/wIBAzCCBbsGCSqGSIb3DQEHAaCCBawEggWoMIIFpDCCAkcGCSqGSIb3DQEHAaCCAjgEggI0MIICMDCCAiwGCyqGSIb3DQEMCgECoIIBNjCCATIwHAYKKoZIhvcNAQwBAzAOBAi2P5j9EliEaQICB9AEggEQyJLkopAMyHJh0jQXtnlwK4yjpE0WqYXf9sNPPLOFXgaxNU7gLKc3F6kPJUxLCxnvjOe7bRJS3v4A0GQBBqeFEJjBT9hd88RaQ2NsNxDrQEh/ZAyTUg+l6CyApUtcJb5uehPVnj7xnWtu4vvxDh5hRqSVxSR50wOjk/MKlyX1hhF1JybzRiqESKIMLx84HWJqZ6Fp87asJ0/0isL+kVxarqLrTkv0CGt2QaLxZzu9YDGj6nuGy2EBQwGHwMCEVTFupX55njV4aU3YTG2U+BHFl667NekTtOXH5GXDbp6D+9PntXBxW2d3E68v7lBVMjPKfTsTeCs4aLOwQzsXIFgvouw6GgGsZCrYaQwMNuGayC4xgeIwDQYJKwYBBAGCNxECMQAwEwYJKoZIhvcNAQkVMQYEBAEAAAAwXQYJKoZIhvcNAQkUMVAeTgB0AGUALQA0ADYANwBmADEAOAAxAGMALQBiAGQAZQA0AC0ANAA5AGUANgAtAGEANABjADMALQA4ADQAOAAwADYAMgBmADIANgA4ADEAMTBdBgkrBgEEAYI3EQExUB5OAE0AaQBjAHIAbwBzAG8AZgB0ACAAUwBvAGYAdAB3AGEAcgBlACAASwBlAHkAIABTAHQAbwByAGEAZwBlACAAUAByAG8AdgBpAGQAZQByMIIDVQYJKoZIhvcNAQcBoIIDRgSCA0IwggM+MIIDOgYLKoZIhvcNAQwKAQOgggLdMIIC2QYKKoZIhvcNAQkWAaCCAskEggLFMIICwTCCAiagAwIBAgIQXQFCNRCYc4hHLhQAD247rTAJBgcqhkjOPQQBMDAxLjAsBgNVBAMMJVRlc3QgQ29kZSBTaWduaW5nIEVDQyBicmFpbnBvb2xQNTEycjEwHhcNMTgwMzAyMTQyMTQ1WhcNMjMwMzAyMTQzMTQ2WjAwMS4wLAYDVQQDDCVUZXN0IENvZGUgU2lnbmluZyBFQ0MgYnJhaW5wb29sUDUxMnIxMIGbMBQGByqGSM49AgEGCSskAwMCCAEBDQOBggAETcwT2kPzMxF5upq+xb2NpTmRk2Gkp1mThVESNI9A1tgWk3wIylN72b1t5yHxveiWdopn3LkeT0hTaXSJ4fZsHmYRo0KZS5fKZbSSiFlLbxAwndgG99HLakz/I59WtXzSenSaM6HkP+Nz0Kmxvvy0umOXLg0bU8qpX5tLUtEFAxOjgd8wgdwwDgYDVR0PAQH/BAQDAgeAMBQGA1UdJQQNMAsGCSsGAQQBgjdQATCBlAYJKoZIhvcNAQkPBIGGMIGDMAsGCWCGSAFlAwQBKjALBglghkgBZQMEAS0wCwYJYIZIAWUDBAEWMAsGCWCGSAFlAwQBGTALBglghkgBZQMEAQIwCwYJYIZIAWUDBAEFMAoGCCqGSIb3DQMHMAcGBSsOAwIHMA4GCCqGSIb3DQMCAgIAgDAOBggqhkiG9w0DBAICAgAwHQYDVR0OBBYEFMmLfUI9zvfjMlvbolK8pP0zeZNhMAkGByqGSM49BAEDgYkAMIGFAkEAlCq9PiR4Yl0A+kIZO1yyfmKpcmJI6++jZJJ1P2LxZIi9ZgIJQLIWjmBTMP1nswAzNbnqetOBuJy55+SkO2OsngJAGXIYtW8RBFcTmRYnhCLeIsB/De3khytnaeHNBZVB/x0n/gFqVNMaPZp6l4MPGhEBS8pcvLN4zvO7phxR0Xt3HDFKMBMGCSqGSIb3DQEJFTEGBAQBAAAAMDMGCSqGSIb3DQEJFDEmHiQAVABlAHMAdAAgAEMAbwBkAGUAIABTAGkAZwBuAGkAbgBnAAAwOzAfMAcGBSsOAwIaBBSas13IRWnhNtoPLKp29FJpLmCptgQUkF0JRqyYiDG0Ql7zAPED2uVWzykCAgfQ"";
new System.Security.Cryptography.X509Certificates.X509Certificate2(Convert.FromBase64String(base64cert), ""qwert"");

Exception
Internal.Cryptography.CryptoThrowHelper+WindowsCryptographicException: Access Denied
   at Internal.Cryptography.Pal.CertificatePal.FilterPFXStore(Byte[] rawData, SafePasswordHandle password, PfxCertStoreFlags pfxCertStoreFlags)
   at Internal.Cryptography.Pal.CertificatePal.FromBlobOrFile(Byte[] rawData, String fileName, SafePasswordHandle password, X509KeyStorageFlags keyStorageFlags)
   at System.Security.Cryptography.X509Certificates.X509Certificate..ctor(Byte[] rawData, String password, X509KeyStorageFlags keyStorageFlags)
   at System.Security.Cryptography.X509Certificates.X509Certificate2..ctor(Byte[] rawData, String password)
   at PkcsEncryption.Program.Certificate(Boolean rsa) in c:\git\PkcsEncryption\PkcsEncryption\Program.cs:line 88
   at PkcsEncryption.Program.Encrypt(Byte[] dataPlain, Boolean useRsa) in c:\git\PkcsEncryption\PkcsEncryption\Program.cs:line 56
   at PkcsEncryption.Program.Main(String[] args) in c:\git\PkcsEncryption\PkcsEncryption\Program.cs:line 22

","The PFX which you have encoded as base64 there has internally set the marker indicating it was exported from a machine keystore.  Your Access Denied indicates that you are not running as an administrator (and thus do not have the permission to add keys to the machine's keystore).
To ensure that keys from a PFX get added to the current user's key store set the X509KeyStorageFlags.UserKeySet flag.  Or, if you've installed the early access build (or, in the future, the released build) of .NET Framework v4.7.2 you can use EphemeralKeySet to keep the private key in memory and avoid the keystore altogether.
new System.Security.Cryptography.X509Certificates.X509Certificate2(
    Convert.FromBase64String(base64cert),
    ""qwert"",
    X509KeyStorageFlags.UserKeySet);

","1113","<c#><public-key-encryption><x509certificate2><elliptic-curve><pkcs#7>","1","7","1","2018-03-09 16:19:08","49197965","0","1","1776231","","2018-03-09 08:57:23","2018-03-02 15:00:13",""
"28655352","CryptoAPI - how to extract RSA public key from private","Using windows CryptoAPI, is it possible to get public RSA key from a private key which was imported (not generated)?
If I use CryptGenKey, I can call CryptExportPublicKeyInfo and CryptImportPublicKeyInfo to obtain the public key handle. However, when I try to do the same thing with private key decoded from PEM and imported using:
CryptImportKey(hCSP, pKeyBuf, cbKeyBuf, 0, CRYPT_EXPORTABLE, &hPrivKey)

import of the private key succeeds and I have a valid handle but the subsequent call to CryptExportPublicKeyInfo fails with ""Key does not exist"" error. It looks like there's another call missing between CryptImportKey and CryptExportPublicKeyInfo, but I can not find that API call.
","The problem with exporting/importing the public key was because private key was generated using AT_SIGNATURE, instead of AT_EXCHANGE. See the explanation and the example code
","1110","<rsa><public-key-encryption><cryptoapi><encryption-asymmetric>","0","1","1","2015-03-13 03:52:00","29024480","4","1","205386","","2015-03-13 03:52:00","2015-02-22 06:54:29",""
"34557651","Check if an entered public key is a valid OpenPGP key","I'm using the GnuPG class from PHP. I'm not having any problem importing valid public key but if I try to import something random like ""test"" which obviously isn't a public key, I'm getting error 502 bad gateway. I saw into PHP documentation that gnupg_keyinfo shows information introducing a name stored in the keyring. I searched around the internet and I didn't find a way to check if an entered public key is in the right format or not.
I'm using the following piece of code:
<?php
putenv('GNUPGHOME=/home/kevin/.gnupg');
$gpg = '/usr/bin/gpg';
$gpg = new gnupg();
$gpg->seterrormode(gnupg::ERROR_EXCEPTION); 

if(isset($_POST['2fa'])){
    try {
      $key = $_POST['new_pgp'];
      $retVal = $gpg->import($key);
      echo $retVal['imported'] . ' key(s) imported.';
    } catch (Exception $e) {
      die('ERROR: ' . $e->getMessage());
    }

}
?>
<html>
<body>
<form action=""pgp.php"" method=""post"">
<textarea name=""new_pgp""></textarea><br>
<input type=""submit"" name=""2fa"" value=""Send"">
</form>
</body>
</html>

","An error 502 ""Bad Gateway"" indicates that the connection between the web server and something behind it got interrupted -- this happens for example when using nginx together with php-fpm, which is accessed throughout another network connection/socket. In the comments requesting further debug information you confirmed that guess, and also realized php is crashing because of a segmentation fault, which means some invalid memory location should have been accessed.
This can either happen because of a bug (which I wouldn't expect in this case, as an invalid key is not some completely surprising input nobody would test for) or because the compiled versions do not really fit together. You explained you build some parts on your own.
Debugging this is a hassle and often takes hours and hours, you'd need to attach a debugger and realize what's going wrong. If you have any chance, try to install everything from the package manager of your choice, do not use different sources like PECL and your packager manager to prevent problems. In Debian (and very likely also Ubuntu and other distributions, I didn't verify) some package like php5-gnupg should be available:
$ apt-cache show php5-gnupg
Package: php5-gnupg
Source: php-gnupg
Version: 1.3.6-1
Installed-Size: 84
Maintainer: Debian PHP PECL Maintainers <pkg-php-pecl@lists.alioth.debian.org>
Architecture: amd64
Depends: phpapi-20131226, php5-common (>= 4.4), libc6 (>= 2.4), libgpgme11 (>= 1.2.0)
Description-en: wrapper around the gpgme library
 This extension provides methods to interact with gnupg.
[snip]

","1087","<php><public-key-encryption><gnupg><privacy><pgp>","3","1","1","2016-01-01 21:15:23","34558865","10","","5736232","","2016-01-01 21:15:23","2016-01-01 16:01:24",""
"20205728","Hex encode ECDSA keys in node.js","I'm building a nodejs app that talks to an API server. The API server requires that each request I make to it includes a X-Signature header using the prime256v1 ECDSA curve and sha256 hash on a particular set of data. 
I looked through the crypto and tls documentation but didn't find anything suitable. I have successfully generated a private key with openssl ecparam -name prime256v1 -genkey but it is in PEM format. I have also generated a DER format key. Both of these include some extra metadata like the curve used and in the case of PEM, comments. 
I can use these keys for signing operations on my side, but the server requires that I upload a public key using hex encoding (so the server can verify the signatures I make on my requests.)
Specifically the server wants something like the output of the following Python code:
from ecdsa import SigningKey
from binascii import hexlify
hexlify(SigningKey.from_pem(content).to_string())

Sample output for a pubkey (no newlines): c5bd76cd0cd948de17a31261567d219576e992d9066fe1a6bca97496dec634e2c8e06f8949773b300b9f73fabbbc7710d5d6691e96bcf3c9145e15daf6fe07b9
I would prefer not adding python as a dependency to my node app... anyone know of a way I can extract the binary data representing my private key from the PEM or DER files, so I can put it in a buffer and call buffer.toString('hex')? Or a way I can use the native crypto library to generate the ECDSA keypair? Or a library that would do the same?
","openssl itself can print out the guts of things, in hex.
Doe the key change? sounds like you can just decode into hex one time, and use that?  No need for dependencies - just paste the hex into your node source?
","1085","<node.js><openssl><public-key-encryption><ecdsa>","0","0","1","2014-01-14 10:33:12","","0","","","","","2013-11-25 23:36:59",""
"40009917","End to end encrypt a socket.io chat application","I am building a socket.io based chat application. 
What options do I have to implement end to end encryption over the text & data/files?
Note: I need to support one-to-one and group chats.
Any open source ready to use implementation specifically for socket.io? Googled it but no luck.
If not, then any hints to to implement something of my own?
","The end-to-end encryption used in WhatsApp and Facebook Messenger is powered by the Signal protocol (which have its own chat app), if you are using Socket.io with Javascript, you can easily use the javascript version of the Signal protocol. Just follow the readme to encrypt your data and use Socket.io to send it to the other hand, then decrypt the received data.
The end-to-end encryption used by Telegram is MTProto, developed by the Telegram team. Like Signal, it's open source so you can find the source code on Github.
Hope this will help!
","1081","<socket.io><public-key-encryption>","0","0","1","2019-02-26 14:23:04","","6","","","","","2016-10-12 23:25:16",""
"53467770","How to encrypt string using openpgp.js?","I am trying to use the Encrypt and decrypt String data with PGP keys example from openpgp.js but I struggle to make it work inside Firefox. openpgp.js doc
I create a keypair.
const openpgp = window.openpgp; // use as CommonJS, AMD, ES6 module or via window.openpgp

 openpgp.config.compression = openpgp.enums.compression.zlib

var options = {
 userIds: [{ name: 'Alicee', email:     'alice@example.com' }],
  numBits: 2048,
  passphrase: 'secretttoo'
};

var publicKeyAlice;
var privateKeyAlice;

 openpgp.generateKey(options).then(key     => {
privateKeyAlice = key.privateKeyArmored;
publicKeyAlice = key.publicKeyArmored;
console.log('Key generated');
console.log(privateKeyAlice);
 console.log(publicKeyAlice);

});

The keys I get consoled out are used for the example of string encryption by openpgp.js
const pubkey = '-----BEGIN PGP PUBLIC KEY BLOCK----- Version: OpenPGP.js v4.1.1'
const privkey = '-----BEGIN PGP PRIVATE KEY BLOCK----- Version: OpenPGP.js v4.1.1'
const passphrase = `secretttoo` //what the privKey is encrypted with


const encryptDecryptFunction = async() => {
const privKeyObj = (await openpgp.key.readArmored(privkey)).keys[0]
await privKeyObj.decrypt(passphrase)

const options = {
    message: openpgp.message.fromText('Hello, World!'),       // input as Message object
    publicKeys: (await openpgp.key.readArmored(pubkey)).keys, // for encryption
    privateKeys: [privKeyObj]                                 // for signing (optional)
}

openpgp.encrypt(options).then(ciphertext => {
    encrypted = ciphertext.data // '-----BEGIN PGP MESSAGE ... END PGP MESSAGE-----'
    return encrypted
})
.then(encrypted => {
    const options = {
        message: await openpgp.message.readArmored(encrypted),    // parse armored message
        publicKeys: (await openpgp.key.readArmored(pubkey)).keys, // for verification (optional)
        privateKeys: [privKeyObj]                                 // for decryption
    }

    openpgp.decrypt(options).then(plaintext => {
        console.log(plaintext.data)
        return plaintext.data // 'Hello, World!'
    })

 })
}

encryptDecryptFunction();

I get the following error in browser console: 
SyntaxError: missing } after property list[Learn More] openpgp testing.html:153:27 note: { opened at line 152, column 24
How does a simple pgp encryption of string work using openpgp.js?
","The library you're trying to use doesn't look that promissing for asymetric cryptography. 
If you're open for suggestion try using this one.
Here is example code : 
<div class=""container"">
<script src=""https://cdnjs.cloudflare.com/ajax/libs/jsencrypt/2.3.1/jsencrypt.js""></script>
<script src=""https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.js""></script>
    <script type=""text/javascript"">
        // Call this code when the page is done loading.
        jQuery(function () {
            // Run a quick encryption/decryption when they click.
            jQuery('#testme').click(function () {
                // Encrypt with the public key...
                var encrypt = new JSEncrypt();
                encrypt.setPublicKey($('#pubkey').val());
                var encrypted = encrypt.encrypt($('#input').val());
                console.log(encrypted);
                // Decrypt with the private key...
                var decrypt = new JSEncrypt();
                decrypt.setPrivateKey($('#privkey').val());
                var uncrypted = decrypt.decrypt(encrypted);
                // Now a simple check to see if the round-trip worked.
                if (uncrypted == $('#input').val()) {
                    alert('It works!!!');
                }
                else {
                    alert('Something went wrong....');
                }
            });
        });
    </script>
    <label for=""privkey"">Private Key</label><br/>
<textarea id=""privkey"" rows=""15"" cols=""65"">-----BEGIN RSA PRIVATE KEY-----
MIICXQIBAAKBgQDlOJu6TyygqxfWT7eLtGDwajtNFOb9I5XRb6khyfD1Yt3YiCgQ
WMNW649887VGJiGr/L5i2osbl8C9+WJTeucF+S76xFxdU6jE0NQ+Z+zEdhUTooNR
aY5nZiu5PgDB0ED/ZKBUSLKL7eibMxZtMlUDHjm4gwQco1KRMDSmXSMkDwIDAQAB
AoGAfY9LpnuWK5Bs50UVep5c93SJdUi82u7yMx4iHFMc/Z2hfenfYEzu+57fI4fv
xTQ//5DbzRR/XKb8ulNv6+CHyPF31xk7YOBfkGI8qjLoq06V+FyBfDSwL8KbLyeH
m7KUZnLNQbk8yGLzB3iYKkRHlmUanQGaNMIJziWOkN+N9dECQQD0ONYRNZeuM8zd
8XJTSdcIX4a3gy3GGCJxOzv16XHxD03GW6UNLmfPwenKu+cdrQeaqEixrCejXdAF
z/7+BSMpAkEA8EaSOeP5Xr3ZrbiKzi6TGMwHMvC7HdJxaBJbVRfApFrE0/mPwmP5
rN7QwjrMY+0+AbXcm8mRQyQ1+IGEembsdwJBAN6az8Rv7QnD/YBvi52POIlRSSIM
V7SwWvSK4WSMnGb1ZBbhgdg57DXaspcwHsFV7hByQ5BvMtIduHcT14ECfcECQATe
aTgjFnqE/lQ22Rk0eGaYO80cc643BXVGafNfd9fcvwBMnk0iGX0XRsOozVt5Azil
psLBYuApa66NcVHJpCECQQDTjI2AQhFc1yRnCU/YgDnSpJVm1nASoRUnU8Jfm3Oz
uku7JUXcVpt08DFSceCEX9unCuMcT72rAQlLpdZir876
-----END RSA PRIVATE KEY-----</textarea><br/>
    <label for=""pubkey"">Public Key</label><br/>
<textarea id=""pubkey"" rows=""15"" cols=""65"">-----BEGIN PUBLIC KEY-----
MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDlOJu6TyygqxfWT7eLtGDwajtN
FOb9I5XRb6khyfD1Yt3YiCgQWMNW649887VGJiGr/L5i2osbl8C9+WJTeucF+S76
xFxdU6jE0NQ+Z+zEdhUTooNRaY5nZiu5PgDB0ED/ZKBUSLKL7eibMxZtMlUDHjm4
gwQco1KRMDSmXSMkDwIDAQAB
-----END PUBLIC KEY-----</textarea><br/>
    <label for=""input"">Text to encrypt:</label><br/>
    <textarea id=""input"" name=""input"" type=""text"" rows=4 cols=70>This is a test!</textarea><br/>
    <input id=""testme"" type=""button"" value=""Test Me!!!""/><br/>
</div>

","1080","<javascript><encryption><public-key-encryption><openpgp.js>","0","1","2","2019-01-06 00:28:33","54057515","0","","","","","2018-11-25 13:08:33",""
"53467770","How to encrypt string using openpgp.js?","I am trying to use the Encrypt and decrypt String data with PGP keys example from openpgp.js but I struggle to make it work inside Firefox. openpgp.js doc
I create a keypair.
const openpgp = window.openpgp; // use as CommonJS, AMD, ES6 module or via window.openpgp

 openpgp.config.compression = openpgp.enums.compression.zlib

var options = {
 userIds: [{ name: 'Alicee', email:     'alice@example.com' }],
  numBits: 2048,
  passphrase: 'secretttoo'
};

var publicKeyAlice;
var privateKeyAlice;

 openpgp.generateKey(options).then(key     => {
privateKeyAlice = key.privateKeyArmored;
publicKeyAlice = key.publicKeyArmored;
console.log('Key generated');
console.log(privateKeyAlice);
 console.log(publicKeyAlice);

});

The keys I get consoled out are used for the example of string encryption by openpgp.js
const pubkey = '-----BEGIN PGP PUBLIC KEY BLOCK----- Version: OpenPGP.js v4.1.1'
const privkey = '-----BEGIN PGP PRIVATE KEY BLOCK----- Version: OpenPGP.js v4.1.1'
const passphrase = `secretttoo` //what the privKey is encrypted with


const encryptDecryptFunction = async() => {
const privKeyObj = (await openpgp.key.readArmored(privkey)).keys[0]
await privKeyObj.decrypt(passphrase)

const options = {
    message: openpgp.message.fromText('Hello, World!'),       // input as Message object
    publicKeys: (await openpgp.key.readArmored(pubkey)).keys, // for encryption
    privateKeys: [privKeyObj]                                 // for signing (optional)
}

openpgp.encrypt(options).then(ciphertext => {
    encrypted = ciphertext.data // '-----BEGIN PGP MESSAGE ... END PGP MESSAGE-----'
    return encrypted
})
.then(encrypted => {
    const options = {
        message: await openpgp.message.readArmored(encrypted),    // parse armored message
        publicKeys: (await openpgp.key.readArmored(pubkey)).keys, // for verification (optional)
        privateKeys: [privKeyObj]                                 // for decryption
    }

    openpgp.decrypt(options).then(plaintext => {
        console.log(plaintext.data)
        return plaintext.data // 'Hello, World!'
    })

 })
}

encryptDecryptFunction();

I get the following error in browser console: 
SyntaxError: missing } after property list[Learn More] openpgp testing.html:153:27 note: { opened at line 152, column 24
How does a simple pgp encryption of string work using openpgp.js?
","To actually answer your question over suggesting another library, the fix is in changeing the syntax from
message: await openpgp.message.readArmored(encrypted),

to
message: openpgp.message.readArmored(encrypted),

Then it should works since that method is not async (anymore?)
Here your example modified for symetric encryption (that's why I couldn't use jsencrypt as Nikola suggested:
 <script lang=""JavaScript"" src=""openpgp.js""></script>
 <script lang=""JavaScript"">
    const options = {
        message : window.openpgp.message.fromText('Hello, World!'),     
        passwords : ['pw'],
        armor : false
    }

    window.openpgp.encrypt(options).then(ciphertext => {
        encrypted = ciphertext.message 
        return encrypted
    }).then(encrypted => {
        const options = {
            message : encrypted,   
            passwords : ['pw']                               
        }
        window.openpgp.decrypt(options).then(plaintext => {
            console.log(plaintext.data)
            alert(plaintext.data)
            return plaintext.data 
        })
    })       
</script>

","1080","<javascript><encryption><public-key-encryption><openpgp.js>","0","1","2","2019-01-06 00:28:33","54057515","0","","","","","2018-11-25 13:08:33",""
"47384049","Request POST for python, using encrypted signature provided by an API","I am trying to get an API (of a cryptocurrency exchange) to let me update my phone number:
bitso_key = 'API_KEY'
bitso_secret ='API_SECRET'
consulta=""phone_number""
phone_number=5534970199
nonce =  str(int(round(time.time() * 1000)))
http_method = ""POST""
request_path = ""/v3/""+consulta+""?""
json_payload={""phone_number"":phone_number}

# Create signature
message = nonce+http_method+request_path+urlencode(json_payload)
#print(message)
signature = hmac.new(bitso_secret.encode('utf-8'),
                                        message.encode('utf-8'),
                                        hashlib.sha256).hexdigest()
# Build the auth header
auth_header = 'Bitso %s:%s:%s' % (bitso_key, nonce, signature)
url=""https://api.bitso.com""+request_path


response = requests.post(url, data=json_payload, headers={""Authorization"": 
auth_header}).json()

I dont understand why but the response is always an authentication error. When I do the same very code, for a GET request, it works:
consulta=""user_trades""
book=""eth_mxn""
limit=""2""
nonce =  str(int(round(time.time() * 1000)))
http_method = ""GET""
request_path = ""/v3/""+consulta+""?""
json_payload={""book"":book,""limit"":limit}


# Create signature
message = nonce+http_method+request_path+urlencode(json_payload)
signature = hmac.new(bitso_secret.encode('utf-8'),
                                        message.encode('utf-8'),
                                        hashlib.sha256).hexdigest()
print(signature)
# Build the auth header
auth_header = 'Bitso %s:%s:%s' % (bitso_key, nonce, signature)
url=""https://api.bitso.com""+request_path
print(url,message)
# Send request
response = requests.get(url, params=json_payload, headers={""Authorization"": 
auth_header}).json()

I believe it's a problem with the variable ""message"", which is use to create the signature for the request, I don't know how to create it using the json_payload correctly.
edit: Written in python 3. The unsuccess response of the Request POST is:
{'error': {'code': '0201', 'message': 'Invalid Nonce or Invalid 
Credentials'}, 'success': False} 

","Use the following code:
import time
import hmac
import hashlib
import requests
import json
import random
import sys

def main(argv):
    # Bitso API url
    bitso_url = ""https://api.bitso.com""
    # Obtained api and secret keys for handling private requests
    bitso_key = ""<KEY>""
    bitso_secret = ""<SECRET>""

    # A valid number to avoid replay attacks
    nonce = str(int(round(time.time())) * 100000 * 2)

    # Desired HTTP method
    http_method = ""POST""
    request_path = ""/api/v3/<POST_ENDPOINT>"" 

    # The required info that endpoint requires to process info
    payload = {}
    #Add required keys of the parameters to the json
    #As follows
    #payload[""<needed key>""] = <key value>

    #json encoding
    json_payload = json.dumps(payload)

    # Create secure signature with BITSO API documentation specification
    message = nonce + http_method + request_path + json_payload
    signature = hmac.new(bitso_secret.encode('utf-8'),
                        message.encode('utf-8'),
                        hashlib.sha256).hexdigest()

    # Build the auth header
    auth_header = 'Bitso %s:%s:%s' % (bitso_key, nonce, signature)

    # Send request
    response = requests.post(bitso_url+request_path,
        headers = {""Authorization"" : auth_header},
        json = payload)

    print(response.content)

if __name__ == ""__main__"":
   main(sys.argv[1:])

","1073","<python><api><post><public-key-encryption><signature>","1","0","1","2018-06-20 03:12:10","","6","","8968569","","2017-11-21 02:44:27","2017-11-20 01:54:29",""
"15461649","Windows 8 Metro RSA Encryption: AsymmetricKeyAlgorithmProvider ImportPublicKey Fails","I am attempting to pass some encrypted data between a Win 8 Metro app and a RESTful WCF service. Initially the Metro app requests a public key and the WCF service returns it as a raw Stream as to avoid any pesky formatting issues. The Base 64 encoded public key is decoded in the metro app into a byte array. Here is where the problem occurs. When I attempted to call AsymmetricKeyAlgorithmProvider.ImportPublicKey I get the error ""ASN1 bad tag value met"".
I am using RSA PKCS1 for the encryption. Here is the relevant code:
WCF Service
     string keyName = ""This is passed in via a parameter"";
     var key = !CngKey.Exists(keyName) ? CngKey.Create(CngAlgorithm2.Rsa, keyName) : CngKey.Open(keyName);

     // Create the RSA container to get keys and then dispose
     using (var rsaCng = new RSACng(key) { EncryptionPaddingMode = AsymmetricPaddingMode.Pkcs1, KeySize = 2048 })
     {
        byte[] publicBlob = rsaCng.Key.Export(CngKeyBlobFormat.GenericPublicBlob);
        publicKey = Convert.ToBase64String(publicBlob);
     }

Metro App
  public static string Encrypt(IBuffer dataBuffer, string publicKeyString)
  {
     var asymmAlg = AsymmetricKeyAlgorithmProvider.OpenAlgorithm(AsymmetricAlgorithmNames.RsaPkcs1);
     // The next line fails with ASN1 bad tag value met
     var publicKey = asymmAlg.ImportPublicKey(CryptographicBuffer.DecodeFromBase64String(publicKeyString), CryptographicPublicKeyBlobType.Pkcs1RsaPublicKey);

     var encryptedData = CryptographicEngine.Encrypt(publicKey, dataBuffer, null);
     return CryptographicBuffer.EncodeToBase64String(encryptedData);
  }

EDIT 1: More information below
Exporting the public key from a 2048bit key pair from the WCF service yields a 283 bit length key blob, while exporting the same type of public key from the Metro app is only 270 bits. When I import the Metro generated public key it succeeds. Any idea why the WCF service has 13 extra bits on its public key? I think those extra 13 bits are causing the failure.
Here is the Metro code that yields the shorter public key blob:
var provider = AsymmetricKeyAlgorithmProvider.OpenAlgorithm(AsymmetricAlgorithmNames.RsaPkcs1);
CryptographicKey standardKeyPair = provider.CreateKeyPair(2048);
byte[] standardKey = standardKeyPair.ExportPublicKey(CryptographicPublicKeyBlobType.Pkcs1RsaPublicKey).ToArray();

","Quite late, but maybe it will help you or saves someone's time...
Change the type of blob type during import. It's really wierd, but I had success with it, after experimenting.
Your code in WCF may stay as it is.
Change just the Metro code:
public static string Encrypt(IBuffer dataBuffer, string publicKeyString)
{
    var asymmAlg = AsymmetricKeyAlgorithmProvider.OpenAlgorithm(AsymmetricAlgorithmNames.RsaPkcs1);
    // The next line fails with ASN1 bad tag value met
    var publicKey = asymmAlg.ImportPublicKey(CryptographicBuffer.DecodeFromBase64String(publicKeyString), CryptographicPublicKeyBlobType.BCryptPublicKey);

    var encryptedData = CryptographicEngine.Encrypt(publicKey, dataBuffer, null);
    return CryptographicBuffer.EncodeToBase64String(encryptedData);
}

So the only change here is the BCryptPublicKey during the importing. Then it works. But do not ask me why :-).
","1069","<wcf><microsoft-metro><rsa><public-key-encryption>","4","1","1","2013-05-20 14:23:34","","1","","210039","","2013-03-19 17:57:25","2013-03-17 14:08:42",""
"42048281","fatal error: opening dependency file","I am trying to use ECC library on contiki os.
But I got a error for dependency. I think the problem is with my Makefile but I am not sure where is wrong. 
I downloaded from the source https://github.com/nist-emntg/ecc-light-certificate, but I had problem using git submodule update after I git clone from the source, so I manually download and paste the contiki file into the contiki folder.
Could this be the problem? 
Error message
> make TARGET=cooja clean 
rm -f *~ *core core *.srec \
    *.lst *.map \
    *.cprg *.bin *.data contiki*.a *.firmware core-labels.S *.ihex *.ini \
    *.ce *.co
rm -rf 
rm -rf obj_cooja

> make sender-node.cooja TARGET=cooja 
  CC        sender-node.c
sender-node.c: In function 'process_thread_sender_node_process':
sender-node.c:104:11: warning: unused variable 'pubKey' [-Wunused-variable]
mkdir obj_cooja
  CC        ../../../platform/cooja/./contiki-cooja-main.c
../../../platform/cooja/./contiki-cooja-main.c: In function 'contiki_init':
../../../platform/cooja/./contiki-cooja-main.c:230:14: warning: variable 'shortaddr' set but not used [-Wunused-but-set-variable]
../../../platform/cooja/./contiki-cooja-main.c:288:5: warning: passing argument 1 of 'rimeaddr_copy' from incompatible pointer type [enabled by default]
../../../core/./net/rime/rimeaddr.h:79:6: note: expected 'union rimeaddr_t *' but argument is of type 'uint8_t *'
mv contiki-cooja-main.o obj_cooja/mtype371.o
  CC        ../../../../ecc/ecc.c
../../../../ecc/ecc.c:700:1: fatal error: opening dependency file obj_cooja/../../../../ecc/ecc.d: No such file or directory
compilation terminated.
make: *** [obj_cooja/../../../../ecc/ecc.o] Error 1
Process returned error code 2

This is my makefile
all: sender-node receiver-node root-node
extra: example tools tests
CONTIKI=../../..

WITH_UIP6=1
UIP_CONF_IPV6=1

include $(CONTIKI)/../Makefile.curve
CURVE_DIR=$(CONTIKI)/../ecc/curve-params
CFLAGS+= -DUIP_CONF_IPV6_RPL\
         -DSHA2_USE_INTTYPES_H \
         -DWITH_SHA256 \
         -D$(DOMAIN_PARAMS) \
         -DTHIRTYTWO_BIT_PROCESSOR \
         -DDOMAIN_PARAMS=$(DOMAIN_PARAMS)

CFLAGS+=-DPROJECT_CONF_H=\""project-conf.h\""

PROJECT_SOURCEFILES += $(CONTIKI)/../ecc/ecc.c $(CONTIKI)/../ecc/ecdsa.c $(CONTIKI)/../ecc/nn.c $(CONTIKI)/../sha2/sha2.c $(CONTIKI)/../certificate/certificate.c
PROJECTDIRS += sha2 ecc $(CURVE_DIR) certificate

include $(CONTIKI)/../ecc/curve-params/Makefile.curve_params

# mc1322x is little endian only
ifeq ($(TARGET),econotag)
CFLAGS+= -DWORDS_LITTLEENDIAN
endif

ifdef WITH_COMPOWER
APPS+=powertrace
CFLAGS+= -DCONTIKIMAC_CONF_COMPOWER=1 -DWITH_COMPOWER=1 -DQUEUEBUF_CONF_NUM=4
endif

ifdef SERVER_REPLY
CFLAGS+=-DSERVER_REPLY=$(SERVER_REPLY)
endif
ifdef PERIOD
CFLAGS+=-DPERIOD=$(PERIOD)
endif

include $(CONTIKI)/Makefile.include
example:
    make -C example

tools:
    make -C tools

tests:
    make -C tests

","
but I had problem using git submodule update after I git clone from the source, so I manually download and paste the contiki file into the contiki folder.

You cannot then just download any contiki file, since the idea of a submodule is to reference an exact SHA1 of another repo.
Try again to clone the main repo, this time with --recursive (and make sure to use the latest Git 2.11.1)
cd /path/to/ly/local/clone/of/ecc-light-certificate 
cd ..
move ecc-light-certificate ecc-light-certificate.old
git clone --recursive https://github.com/nist-emntg/ecc-light-certificate

The error is:
no such remote ref 7a493c44edb6952bf82fc808b9dd91c30d49c871 
Fetched in submodule path 'contiki', but it did not contain 7a493c44edb6952bf82fc808b9dd91c30d49c871.  
Direct fetching of that commit failed

First: https://github.com/tcheneau/contiki@7a493c44edb6952bf82fc808b9dd91c30d49c871 does exist.
However, looking at its commit page 7a493c4, you can see it does not belong to any branch or tag: it is a commit still kept in the GitHub remote repo, but not fetch by default (because, again, no branch or tag includes it)
You need to open an issue on nist-emntg/ecc-light-certificate/issues project to alert them on that non-existing commit reference for the submodule contiki. 
If you look for that commit message, you will find commit 1396dfd from the native fix-native-build branch:
C:\Users\vonc\prog\git\ecc-light-certificate\contiki>git log --all --grep=""prevent the native target""
commit 1396dfd817424eb7d3218cc6c51186f80b032e9f
Author: Tony Cheneau <tony.cheneau@nist.gov>
Date:   Fri Oct 25 17:53:27 2013 -0400

    Fix a typo (?) that would prevent the native target from building the examples.

This is typical of a cherry-picked commit.
To solve your current situation, directly checkout the right commit:
C:\Users\vonc\prog\git\ecc-light-certificate\contiki>git checkout 1396dfd817424eb7d3218cc6c51186f80b032e9f
Checking out files: 100% (3223/3223), done.
Note: checking out '1396dfd817424eb7d3218cc6c51186f80b032e9f'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by performing another checkout.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -b with the checkout command again. Example:

  git checkout -b <new-branch-name>

HEAD is now at 1396dfd81... Fix a typo (?) that would prevent the native target from building the examples.

C:\Users\vonc\prog\git\ecc-light-certificate\contiki>git st
HEAD detached at 1396dfd81
nothing to commit, working tree clean

","1064","<c><git><makefile><public-key-encryption><contiki>","1","1","1","2017-02-05 07:36:00","","0","1","6309","","2017-02-05 05:47:24","2017-02-05 03:38:02",""
"8095061","Problems with passing a public key to a client and then decrypting crypted information(RSA) (javax.crypto.BadPaddingException)","This is my first question here, so I hope that I am providing enough information to be able to get some kind of resolution to this (smallish?) problem I'm having with a (IMO) very basic public key crypting/decrypting problem.
I've tried to follow examples, and I've read through APIs to try and figure out what is wrong, but so far I haven't been able to come up with an answer to why the decryption fails with such a basic test...
I have printed out the hexes of all the stuff I transfer between the client and the server, and they seem to be identical. I've tried to use different paddings, and ciphers, but none seem to work.
The codes from the two programs (I've edited out the non-essential printouts):
Server code:
RSAKeyPairGenerator kpg = new RSAKeyPairGenerator();
kpg.initialize(1024);
KeyPair kp = kpg.generateKeyPair();
PublicKey pk = kp.getPublic();
PrivateKey pri = kp.getPrivate();
InputStream in = csocket.getInputStream();
OutputStream out = csocket.getOutputStream();
DataInputStream dis = new DataInputStream(in);
DataOutputStream dos = new DataOutputStream(out);

// write getEncoded().length
dos.writeInt(pk.getEncoded().length);

// write key
byte[] public_key = pk.getEncoded();
for (int x=0;x<public_key.length;x++) {
    dos.writeByte(public_key[x]);
}
dos.flush();

// read enc length
int len=dis.readInt();
byte[] data = new byte[len];

// read enc stuff
System.out.println(""Read data:"");
for (int x=0;x<len;x++) {
    data[x]=dis.readByte();
}
// decrypt
byte [] decrypted = null;
try { cipher = Cipher.getInstance(""RSA/ECB/PKCS1Padding"");
    cipher.init(Cipher.DECRYPT_MODE, pri);
    decrypted = cipher.doFinal(new String(data).getBytes());
} catch (Exception e) { e.printStackTrace(); }

Client:
InputStream in = socket.getInputStream();
OutputStream out = socket.getOutputStream();
DataInputStream dis = new DataInputStream(in);
DataOutputStream dos = new DataOutputStream(out);

// Read key length
int len = dis.readInt();

// Read key
byte[] public_key = new byte[len];
byte[] tmp = new byte[1];
for (int x = 0; x<len; x++) {
    public_key[x] = dis.readByte();
}

try { 
    keySpec = new X509EncodedKeySpec(public_key);
    keyFactory = keyFactory.getInstance(""RSA"");
    publicKey = keyFactory.generatePublic(keySpec);
} catch (Exception e) { e.printStackTrace(); }

try {
    cipher = Cipher.getInstance(""RSA/ECB/PKCS1Padding"", ""IBMJCE"");
    cipher.init(Cipher.ENCRYPT_MODE, publicKey);
    // crypt string
    data = cipher.doFinal(new String(""Encrypt this"").getBytes());
} catch (Exception e) { e.printStackTrace(); }

// write data.length
dos.writeInt(data.length);

// write encrypted data
for (int x=0; x<data.length;x++) {
      dos.writeByte(data[x]);
}
dos.flush();

","The answer to this problem was: Learn to read your own code, and keep track of what you've done... Sorry for wasting your time :/
","1057","<java><rsa><public-key-encryption>","2","0","1","2011-11-14 09:51:52","8119792","3","3","","","","2011-11-11 14:04:26",""
"6382656","Encrypting a file with RSA in Python without storing any password","I have asked a similar question in post Encrypting a file with RSA in Python , but this question has a different connotation.
I am encrypting a file with AES, using RSA to encrypt the AES password.
The only difference is that i really DON'T want to store the AES password. The user must give both the path to his RSA key, and the password.
So what do you think about this scheme?

path_to_RSA_key = ... # Given by the user
pwd = ... # This will be used to encrypt the file. Also given by user.

rsa_enc = RSA.importKey(path_to_RSA_key)
# Encrypt the Password with RSA, keep the last 32 characters
rsa_pwd = rsa_enc.encrypt(pwd)[-32:]
# Aes, with the encrypted password
aes_enc = AES.new(rsa_pwd, AES.MODE_CBC)

# Encrypt the file with AES...
# Store only the encrypted file
# Don't store the password in any way, don't store the path to RSA key

The alternative would be the classic scheme, when you generate a random password, encrypt the file with AES using the random pass, encrypt the random pwd with RSA and store only the encrypted results.
If you really need to know why i need this, it's a project of mine, http://code.google.com/p/scrambled-egg
What do you think about the scheme ? Thank you in advance !
","There seems to be some confusion.  You mention that you don't want to store the 'password', but you're working with RSA and not a symmetric algorithm.  The term 'password' strongly implies a shared secret as used in symmetric encryption, and it appears that you're trying really hard to fit RSA into the mould you've created.
The issue I see is that this functionality may not fit into your planned use very well.  Your plan seems focused on symmetric ciphers.  Further, using asymmetric keys this way may be a problem.  I think asymmetric encryption is used to encrypt nonces for a reason; it may not be robust to attacks that can be waged against a scheme like the one you propose.
Asymmetric keys are often used as follows:

Generate a purely random 32-'character' key and call it ""nonce"".
Encrypt the message with the ""nonce"" and call it ciphertext.
Encrypt the ""nonce"" with your asymmetric key (presumably the public key, but you should specify).
The result consists of the ciphertext and the asymmetrically encrypted ""nonce"".

Decrypting requires only the paired opposite of the asymmetric key used to encrypt.
If you're hardcore, you could encrypt (using AES + a password or similar) the public or private key that can be used to decrypt the nonce and send it along for a ride too.  Sadly that isn't really increasing security over AES+password, and you are increasing the bloat in your message by a lot.
","1052","<encryption><public-key-encryption>","1","1","1","2011-09-28 04:34:37","","3","1","-1","","2017-05-23 12:27:00","2011-06-17 07:28:19",""
"28746209","RSA Encryption in JavaCard","I hope anyone can help me with my problem. 
I'm developing a javacard applet and my task is to encrypt a secret (stored in the applet) with the public key of a server. The returning cipher will be send to a server afterwrds - php script on the server - where the cipher should be decrypted with the servers private key again.
And The problem is that the decryption in the php script (openssl_private_decrypt(...)) doesn't return anything, so it fails anywhere.
PS: I also saw some javacard RSA encryption examples and nearly all of them are using a private key for encryption which means in my opinion that the data is only be signed, not encrypted, am I right?
Here is some example code from the javacard applet:
byte[] secret ={ (byte)0x01,(byte)0x02,(byte)0x03,(byte)0x04}
public Crypto() {
    RSAPublicKey rsaPublicKey = (RSAPublicKey) KeyBuilder.buildKey(
    KeyBuilder.TYPE_RSA_PUBLIC, KeyBuilder.LENGTH_RSA_2048, false);
    Cipher rsaCipher = Cipher.getInstance(Cipher.ALG_RSA_PKCS1, false);
    encryptSecretWithPubKey();
}
.....
// here are some methods for setting the public key
.....

public byte[] encryptSecretWithPubKey() {
    if (!isRSAKeyInitialized) {
        ISOException.throwIt(ISO7816.SW_CONDITIONS_NOT_SATISFIED);
    }
    // make sure the blocks size which should be encrypted is not longer
    // than 53 bytes; see ALG_RSA_PKCS1 definition for encryption.
    if (secret.length >= rsaKeyModulus.length - 11) {
       // normally not the case, so ignore it for this test
    }
    rsaCipher.init(rsaPublicKey, Cipher.MODE_ENCRYPT);
    final byte[] encryptedMsg = JCSystem.makeTransientByteArray(
            (short) 256, JCSystem.CLEAR_ON_DESELECT);

    if (rsaPublicKey.isInitialized())
        rsaCipher.doFinal(secret, (short) 0,
                (short) secret.length, encryptedMsg, (short) 0);
    return encryptedMsg; 
}

And here are the function I use for decryption in the php script:
public function decrypt($data)
{ // data is in binary format
    if (openssl_private_decrypt($data, $decrypted, $this->privkey))
        $data = $decrypted;
    else
        // openssl function fails here, so no plain data is returned
        $data = '';
    return $data;
}

I hope you can help what I'm ding wrong here, or might it be a bug in the Cipher class what I'm not expecting :)
EDIT: 
The openssl decryption on the server throws following error message:
error:0407106B:rsa routines:RSA_padding_check_PKCS1_type_2:block type is not 02
The error means, that the block type is wrong. Im using the public key in the applet so the block Type should be 02 but it isnt... 
EDIT:
The problem is solved now. It was a programming error of my own. The modulus was not set correctly (the last byte was always set to zero) so the decryption doesn't work afterwards. 
","","1051","<php><openssl><rsa><public-key-encryption><javacard>","1","","0","2015-03-02 09:08:32","","6","","4456676","","2015-03-02 09:08:32","2015-02-26 15:20:59",""
"9299077","Trouble decrypting using PostgreSQL's gnupg extension","I'm getting an error when I try to decrypt using PostgreSQL's gnupg extension and the gpg_pub_decrypt function.
Here's the query I'm executing, which should do a round-trip encryption/decryption of the string Hello world!:
select pgp_pub_decrypt(
           pgp_pub_encrypt('Hello world!', dearmor(:public_key)),
           dearmor(:private_key),
           ''
           );

Instead, I get the error:
'SQLSTATE[39000]: External routine invocation exception: 7 ERROR:  Corrupt data'

I execute the query and provide the public and private key values through this php script.
<?php

function roundTrip() {

  $pubkey = file_get_contents(""public_key"");
  $privkey = file_get_contents(""secret_key"");

  $conn = new PDO(""pgsql:dbname=*********"", ""*********"", ""*********"");
  $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
  $sql = ""select pgp_pub_decrypt( pgp_pub_encrypt('Hello world!', dearmor(:public_key)), dearmor(:private_key), '')"";
  $stmt = $conn->prepare($sql);
  $stmt->bindParam(':public_key', $pubkey);
  $stmt->bindParam(':private_key', $privkey);
  $stmt->execute();             // <------------------ Error encountered here
  $row = $stmt->fetch();
  file_put_contents('test.out', $row[0]);
}

roundTrip();

?>

I generated the key pair with gnupg and it is not password protected, so the last argument to pgp_pub_decrypt is the empty string.
I've exported both private and public keys to ASCII files for the script to read.  They are included below for anyone who wants to verify their validity.
I can make a successful round trip using gpg on the command line using the unexported keys, so I know they work.  I'd use the exported ones if gpg provided a way to do so, but I don't think it does.
Can anybody tell me what's going wrong?
[mike@M5 ~]$ cat public_key
-----BEGIN PGP PUBLIC KEY BLOCK-----
Version: GnuPG v1.4.11 (GNU/Linux)

mQENBE86dZEBCADK0LCqLYUPWRCfiBt3qx7OKJZp1QTkwG+sFM5COw2XV96poCwS
7LtwdjiG6+uQ2Ikh6XmRkAoPqR3NHuoI1BXTAaHVJ1xuHXtEsaVdx1hk8yjtDO9Z
eAlWKc84Mq95ZMY7fvphY4CIOnWyMaUxSBNMSFJ6jyTUR712C+kz2oER1ZBeA0y8
bJ9mSii+yOO3ST+uws5M0G/wR+6t033iScbSNftvrMQ+O7wo3mEkAILMtr3ghF65
pRHzQkXPaUNDeBzgs43gBiwlt+vB7QRYM4hNxOvLe7YHHPINdYoQoMpvIIGDltaA
pe4rVkzeqczQYIQJ1UByePovTKwpZmJ4FZiHABEBAAG0Jk1pa2UgRXdpbmcgPG1l
d2luZ0BpbnRvdWNoaW5zaWdodC5jb20+iQE4BBMBAgAiBQJPOnWRAhsDBgsJCAcD
AgYVCAIJCgsEFgIDAQIeAQIXgAAKCRCamOUYvDsLQe1TB/98A5LAyBs1gVZXV9rs
friHNTS5QyJrgfjUjox3Pj45/JG7rfJzHH3As2pB5sMNEe/lP2VGTb+YhPab3x/w
8R+vIzGMOhc/dXypuFlsI6erw3/mJeWLiDQCbQ9qKl5bmFhGRpDko5KF7E1s1I+Z
z7QnmAnXgYz0+PQl3h6rf19TRcSzeWjujRVTgkTeUlELCaJ5p5meGv+Cs7GIplLE
Hp03qNy9MmuW3ZaRt2LSs6yDPJvMJot2g0ogAL6LON4svvpjsAMuFER8YuEMaK9I
DdJoi6LmAZeDyHm/vCJJBatL1iW4+F0S+amId4cu2KkcYcPPmQ0x8Kf+SEbQdhEM
Kc2puQENBE86dZEBCADH2quuZ41r884zgLCZ9UhSMUJ1L6ObQkJw0kZh4wnXRanV
oE+fpUoxChSNjCRw+2CoOwDRSXqY5dnMOVA/x02IFrml70/nhNWNjNbalarG/tn6
heWNHEKqL1nSSOns51dKXJ0k3cMjwnkrjrXmryqjpSwfn6VnljI5T4//uSR59CBI
J0BVkkx3p47Y+KfdeaF9KBDtOzNcFhJF7yB1l23mpgcl/dtHwXjExtZAvYmvpyBQ
+6P1DSHgWnJLo8Xp0TKkeATZ2eornlIwqsHfzfPDkvjWU0wqRb/j5XezsFvkwLrF
1jEyM7PzokoJ4GhktZR/HhdUH/cIjxYqdbZAyQxrABEBAAGJAR8EGAECAAkFAk86
dZECGwwACgkQmpjlGLw7C0ERnwf+NMNvZe3zv9Jd/ttXMcvYNg1ZnS070qDTUAP2
ex9IrYTcZ1MxtMka8yvioLgGTy4YUSyS/1BwNvBRfyQUl1oXJWr8ZeQyjYDHt3Aq
0VLcnxknCGtZbl1/3Kkbg7zrbQIwX1iilWhRbExeUfBquXbEYZx1l2F+GDa6Ni8k
tCad7SvvKg0g+M0chzmPnvviQm///3BjPB8NeIbksG3NvtesUmDiDawX2ymuh0cI
PfB+BlTYw4K4K+T0d971gNeMF1cetdHAN/vlsDmH0px05JBhRgDabELtMLB+SdMm
juxUmZmsRhZ4UK6lYMPtqYejWT2h5IeiwHJyMZc1XqcdipOPzw==
=aUlA
-----END PGP PUBLIC KEY BLOCK-----
[mike@M5 ~]$ cat secret_key
-----BEGIN PGP PRIVATE KEY BLOCK-----
Version: GnuPG v1.4.11 (GNU/Linux)

lQO+BE86dZEBCADK0LCqLYUPWRCfiBt3qx7OKJZp1QTkwG+sFM5COw2XV96poCwS
7LtwdjiG6+uQ2Ikh6XmRkAoPqR3NHuoI1BXTAaHVJ1xuHXtEsaVdx1hk8yjtDO9Z
eAlWKc84Mq95ZMY7fvphY4CIOnWyMaUxSBNMSFJ6jyTUR712C+kz2oER1ZBeA0y8
bJ9mSii+yOO3ST+uws5M0G/wR+6t033iScbSNftvrMQ+O7wo3mEkAILMtr3ghF65
pRHzQkXPaUNDeBzgs43gBiwlt+vB7QRYM4hNxOvLe7YHHPINdYoQoMpvIIGDltaA
pe4rVkzeqczQYIQJ1UByePovTKwpZmJ4FZiHABEBAAH+AwMCJxKTwYMjXPlgxdJV
EoTZ0dImTV/K6vh4cvyxyRwCF+zHDt0Oc79Ip0qsEkrFSvCqOfTyyltg4ZJvsh3F
/Z3vUpcX3LAGb0iUzWlLlDOjsrdtT/VBgkjIWw1f47ekmhJ9r89wiVpbG/eO1n31
TTA6MDILayNmtOuD6aNuuYCPuu0OZas/S9LDTbh+IfMlAsa9w6rLQe6kS06cHnlc
re0shxmLe5VmwNxSgJHstGcbCJHC8bak/7wXcAcz/h3w0KKdNkRL222bjJhr6DhO
Vq5ahBFyaznZTnPwm87Q+ms2021aRSy3sNw9KN68UtUZielGEQFFNepCHQgrD9SS
4M+YrSfAu16HhKB0R+XgqI/qZUba+aBgW70WbCWNMhQWljCIdxd5o37Y0Lw1i78W
xzKj7K8OjUhEpTQTnqEalEuX9PANUg8/pwRWVjG6RH8OxwH4OfvvROxVqM95snQk
hWIri57GnpYb1aX/G4RKR0c+oV6yC9gqTfKa8SzOe7LXzy7vjIz5xTTr2jc7ThUz
vTmbYZBhKn3/02WkpTSG253+7QVokbL/7u4IKU6BIA/5GTmG8DmTASc1OLO61T2R
5PEfxlSBgfq106w6YqNXU8vvKWayOAH/wqBeAtsFj7Ao/4FQj6uxmSZH+RnR11ce
ayjdKFsLtZ4nEXgHWc3h9cmMXVqgipZhHv47kkA6seAa8HaBKM8sEHrlKHAN3kn2
j9N/v/CETQMkjZUjp6Gv2WdioMSl04Fx6Rw5RYUNPEQTewy44jbhFUbMuyJOw4L7
meU9lNxUjCjaaKegRg+KDsWtXHWZ09enveZW65Zt12QJN6VxCelEO9dI8v5Xvb1S
Ks/D5ed8aCssYUPNhYGZeO8FTMMPmfmLZvhA1NDp0j8u8GWIZ4C+83+fIM7MDm3u
FLQmTWlrZSBFd2luZyA8bWV3aW5nQGludG91Y2hpbnNpZ2h0LmNvbT6JATgEEwEC
ACIFAk86dZECGwMGCwkIBwMCBhUIAgkKCwQWAgMBAh4BAheAAAoJEJqY5Ri8OwtB
7VMH/3wDksDIGzWBVldX2ux+uIc1NLlDImuB+NSOjHc+Pjn8kbut8nMcfcCzakHm
ww0R7+U/ZUZNv5iE9pvfH/DxH68jMYw6Fz91fKm4WWwjp6vDf+Yl5YuINAJtD2oq
XluYWEZGkOSjkoXsTWzUj5nPtCeYCdeBjPT49CXeHqt/X1NFxLN5aO6NFVOCRN5S
UQsJonmnmZ4a/4KzsYimUsQenTeo3L0ya5bdlpG3YtKzrIM8m8wmi3aDSiAAvos4
3iy++mOwAy4URHxi4Qxor0gN0miLouYBl4PIeb+8IkkFq0vWJbj4XRL5qYh3hy7Y
qRxhw8+ZDTHwp/5IRtB2EQwpzamdA74ETzp1kQEIAMfaq65njWvzzjOAsJn1SFIx
QnUvo5tCQnDSRmHjCddFqdWgT5+lSjEKFI2MJHD7YKg7ANFJepjl2cw5UD/HTYgW
uaXvT+eE1Y2M1tqVqsb+2fqF5Y0cQqovWdJI6eznV0pcnSTdwyPCeSuOteavKqOl
LB+fpWeWMjlPj/+5JHn0IEgnQFWSTHenjtj4p915oX0oEO07M1wWEkXvIHWXbeam
ByX920fBeMTG1kC9ia+nIFD7o/UNIeBackujxenRMqR4BNnZ6iueUjCqwd/N88OS
+NZTTCpFv+Pld7OwW+TAusXWMTIzs/OiSgngaGS1lH8eF1Qf9wiPFip1tkDJDGsA
EQEAAf4DAwInEpPBgyNc+WDCPS922nha3LxmP+uyUguADmNxzb3cPYc4RGKAuiAT
88PtE+iO/bJ+L5paBwcg27KoFfEwlKIK+hmRkQG7Myz9ET8NO3CgjGBcmEzX1ARB
xZc9VKE+aK4Ow4G6k6XM/f/jCbwWmwrZoi4HvkDV45d7pUYeixZv+h/DG90vCYM+
13JvwAuB/5n8m7eiYEq7TboWNqy8dFsF+OKlsaPgWg1rSY8k3T5XaX4mcUp6jyM8
1IQQTxigrPmCjgn08r+cacri+cXdeJxd2NI//3gngRFCKZvR6SLT29xVmQwWhfyF
9bm3g61/tQdMzrmL9fDm1CPYaJOdqhIwAozGb2XVyjkoa178dVkeGadYL2mPGqfc
OwDOgeUGDMlMX4mqmfTgD04QrVBj8am+pDhYEwwB3RHxxoRKYq+iLB2oitCnueWs
XDVMr4VAqpm/liRXepvSO15wT8XYyDDHXLwxcoQiEajzh7HaUomFycBEQDuMpDwg
bR+IK5vioV386kgcFZZbmkYk6UY4/HVUTBeZokFwsI+GPHeBdDvvfTeFew2VNS9L
b2V9LY2ODIuU4/8SL4Fp6zBAl/YWx1L/tpLe45G16Wvxeak6NcCTqxHeCUJvhNuk
WyeJCl5DIge8/wqie9u+FogeM4wTcfPwtLxIwdduO4b8nd2LFgxEOIgmvZsDlzC0
yanTNBDdzqNAEkVg5/9ZmmMB/nP1Ii2ALQxrmwNka+U9e9S5c0jxdTl6eh//Yz5R
rMXMj6+pIqitpyZlYP1LigROllhAYnc9RGp9R87fgsZBq3Own/NWymdoElGe/IZK
CnBtdEeo7FcXUgEdi0XsklNh5OGpMPbLRjosIf/6dn3LeIQvREshB0GegGMo7CP7
SEZuNGUz6H4rqYSpt0Yr8BVvU++UiQEfBBgBAgAJBQJPOnWRAhsMAAoJEJqY5Ri8
OwtBEZ8H/jTDb2Xt87/SXf7bVzHL2DYNWZ0tO9Kg01AD9nsfSK2E3GdTMbTJGvMr
4qC4Bk8uGFEskv9QcDbwUX8kFJdaFyVq/GXkMo2Ax7dwKtFS3J8ZJwhrWW5df9yp
G4O8620CMF9YopVoUWxMXlHwarl2xGGcdZdhfhg2ujYvJLQmne0r7yoNIPjNHIc5
j5774kJv//9wYzwfDXiG5LBtzb7XrFJg4g2sF9sprodHCD3wfgZU2MOCuCvk9Hfe
9YDXjBdXHrXRwDf75bA5h9KcdOSQYUYA2mxC7TCwfknTJo7sVJmZrEYWeFCupWDD
7amHo1k9oeSHosBycjGXNV6nHYqTj88=
=igkq
-----END PGP PRIVATE KEY BLOCK-----
[mike@M5 ~]$ 

","According to here, there is a bug in that when you provide a password it fails. Try doing:
pgp_pub_decrypt( pgp_pub_encrypt( 'Hello world', dearmor(:public_key) ), 
             dearmor(:private_key) ) `

and do not provide the third field in the pgp_pub_decrypt function.
","1048","<php><postgresql><encryption><public-key-encryption><gnupg>","1","0","1","2012-02-15 18:55:48","9299453","2","","","","","2012-02-15 18:26:03",""
"22676620","String to PublicKey using Diffie-Hellman algorithm","I have a Public key string (128 bytes byte to hex processed) given by my client. I need to generate shared key using the private key and Public key given by client. I'm getting below exception while converting the String to Public key. I tried decoding/encoding the bytes, no improvement. I have the following code.
// This is a sample key.
private static final String PUB_KEY = ""0DC1B7102DE3F6785A284ABFCA1822A6B59C947B5F2FAAE"" + ""672D8EE29C3D801BC153777CD3AF5478FD25C234C50BBABF8CD5215A8F1CB19B0B4A24FD5E9"" + ""412264646E2A06FCB5929FFBE196A1BD58B9927424C3B3D0388FDDA15FD1FF1C3E7600A629E"" + 
""B3F0B38B85CCCE03D44CF8D53B2E4E5EFD54E991CE92E55B10FCCD79F04"";

public static void main(String[] argv) throws Exception {   
    PublicKey key = getKey(h2b(PUB_KEY));
}

private static PublicKey getKey(final byte[] pubKey) throws Exception {
    final KeyFactory keyFactory = KeyFactory.getInstance(""DH"");  
    final X509EncodedKeySpec keySpec = new X509EncodedKeySpec(pubKey);
    return keyFactory.generatePublic(keySpec); // THROWS EXCEPTION
}

private static byte[] h2b(String hex) {
    if ((hex.length() & 0x01) == 0x01)
        throw new IllegalArgumentException();
    byte[] bytes = new byte[hex.length() / 2];
    for (int idx = 0; idx < bytes.length; ++idx) {
        int hi = Character.digit((int) hex.charAt(idx * 2), 16);
        int lo = Character.digit((int) hex.charAt(idx * 2 + 1), 16);
        if ((hi < 0) || (lo < 0))
            throw new IllegalArgumentException();
        bytes[idx] = (byte) ((hi << 4) | lo);
    }
    return bytes;
}

Throws follwoing excetpion. Any help to solve this?
Exception in thread ""main"" java.security.spec.InvalidKeySpecException: Inappropriate key specification
    at com.sun.crypto.provider.DHKeyFactory.engineGeneratePublic(DHKeyFactory.java:87)
","The X509EncodedKeySpec is expected to contain an array of bytes with the ASN.1 SubjectPublicKeyInfo structure.
The PUB_KEY in your example is probably the raw key value (y in the terms of javax.crypto.spec.DHPublicKeySpec) which is not enough to create the keyspec.
You should ask your client eother for the proper public key in the ASN.1 form to be used as input for X509EncodedKeySpec (this is preferable) or for p and g parameters required for DHPublicKeySpec.
","1047","<java><encryption><public-key-encryption><diffie-hellman>","0","0","1","2014-03-27 05:46:48","","1","","3085625","","2014-03-27 01:59:11","2014-03-27 01:35:01",""
"21266217","Encrypt large data using public key .ASC in php","I have a public key with extension .asc that I need to use to encrypt data and to send it in a plain text file. I am trying to accomplish this in a windows machine using php. Any ideas?
Thanks,
","Make sure you installed the gnupg extension for PHP.
$gpg = new gnupg();
$publicData = file_get_contents('public.asc');
$publicKey = $gpg->import($publicData);
$gpg->addencryptkey($publicKey['fingerprint']);
echo $gpg->encrypt('Data to encrypt');

Instead of encrypting a constant, replace by the file contents, and store the encrypted message wherever you want.
","1047","<php><public-key-encryption><pgp>","0","1","1","2014-01-21 19:26:59","21267296","2","","","","","2014-01-21 18:25:57",""
"27187461","how to build a rsa key with a modulus of 64 bytes in java","I have a java card applet which will generate a RSA private public key pair (512 bits each). And it will send the public key modulus and exponent (modulus is 64 bytes)
In the host application (java) i need to re build the rsa public key using the same exponent and modulus, but when i try to reconstruct using the following code i am getting an error.
Java card code:
// this one to create the key pair
  rsa_KeyPair = new KeyPair(KeyPair.ALG_RSA_CRT, KeyBuilder.LENGTH_RSA_512);
  rsa_KeyPair.genKeyPair();
  rsa_PublicKey = (RSAPublicKey) rsa_KeyPair.getPublic();
  rsa_PrivateCrtKey 0= (RSAPrivateCrtKey) rsa_KeyPair.getPrivate();
  cipherRSA = Cipher.getInstance(Cipher.ALG_RSA_PKCS1, false);

//this is to send the modulus
  byte[] buffer = apdu.getBuffer();
  rsa_PublicKey.getModulus(buffer, ISO7816.OFFSET_CDATA);
  apdu.setOutgoing();
  apdu.setOutgoingLength((short) 64);
  apdu.sendBytesLong(buffer, ISO7816.OFFSET_CDATA, (short) 64);

This part of the code is working fine. i am able to send the modulus perfectly to the host side.
Java code for host application below:
//command for retrieving modulus
resp = channel.transmit(new CommandAPDU(cmdMod));
BigInteger modulus = new BigInteger(resp.getData());

I am getting the 64 byte modulus as expected but when i make a big integer out of it its showing a large negative value.
//command for retrieving exponent
resp = channel.transmit(new CommandAPDU(cmdExp)); 
BigInteger modulus = new BigInteger(resp.getData());
byte[] input = { (byte) 0x92, (byte) 0x84, (byte) 0x3B,
        (byte) 0xD3, (byte) 0x5D, (byte) 0x8A, (byte) 0x6B,
        (byte) 0x56, (byte) 0xDA, (byte) 0xEA, (byte) 0xE0,
        (byte) 0x2F, (byte) 0x6D, (byte) 0xAA, (byte) 0x62,
        (byte) 0x4B, (byte) 0x38, (byte) 0xCE, (byte) 0xD4,
        (byte) 0x70, (byte) 0xA2, (byte) 0x16, (byte) 0x35,
        (byte) 0xCC, (byte) 0xEE, (byte) 0xB8, (byte) 0x31,
        (byte) 0x13, (byte) 0x37, (byte) 0x40, (byte) 0xBE,
        (byte) 0xA1, (byte) 0xCD, (byte) 0x84, (byte) 0xD9,
        (byte) 0xF3, (byte) 0xE6, (byte) 0xCE, (byte) 0x26,
        (byte) 0x0A, (byte) 0xC1, (byte) 0x40, (byte) 0xED,
        (byte) 0x20, (byte) 0x8F, (byte) 0x3D, (byte) 0x9F,
        (byte) 0x0D, (byte) 0xE7, (byte) 0x19, (byte) 0xC8,
        (byte) 0x87, (byte) 0x96, (byte) 0x29, (byte) 0xF2,
        (byte) 0x63, (byte) 0x34, (byte) 0x6D, (byte) 0x10,
        (byte) 0xB9, (byte) 0xFB, (byte) 0xB4, (byte) 0x75,
        (byte) 0xE9 };

RSAPublicKey pubKey = (RSAPublicKey) KeyFactory.getInstance(""RSA"")
        .generatePublic(new RSAPublicKeySpec(modulus, exponent));

Cipher cipher = null;

cipher = Cipher.getInstance(""RSA/ECB/PKCS1Padding"");
cipher.init(Cipher.DECRYPT_MODE, pubKey);

byte[] cipherText = cipher.doFinal(input);

Error:
javax.crypto.BadPaddingException: Message is larger than modulus
    at sun.security.rsa.RSACore.parseMsg(Unknown Source)
    at sun.security.rsa.RSACore.crypt(Unknown Source)
    at sun.security.rsa.RSACore.rsa(Unknown Source)
    at com.sun.crypto.provider.RSACipher.doFinal(RSACipher.java:355)
    at com.sun.crypto.provider.RSACipher.engineDoFinal(RSACipher.java:389)
    at javax.crypto.Cipher.doFinal(Cipher.java:2121)
    at testAuth.main(testAuth.java:150)

I checked the reponse from the card. i am getting all the 64 bytes of the modulus correctly. but when i make the Big Integer i am getting a large negative value. what should i do?
","The issue is that BigInteger by default encodes to a signed big endian representation. If you decode the bytes using the constructor it does the opposite, i.e. it expects a signed value. Now most cryptography is performed on (large) unsigned integers. This is because the calculations are performed within a mathematical group (modulus calculations). These calculations are always performed on positive numbers, and RSA is no exception to this rule.
Now the size of the modulus is equal to the key size (not the key strength) of the RSA key. This means that an RSA key of 512 bit has a modulus of exactly 512 bits when encoded as a unsiged, big endian number. For numbers this means that the most significant bit is always set to '1'. However, that bit is used to indicate the sign bit for unsigned numbers encoded as a two-complement value. In other words, any modulus that has a key size dividable by 8 will be negative when interpreted as signed value.
The solution is of course to use the constructor where you can indicate the sign bit yourself:
BigInteger(int signum, byte[] magnitude)

where magnitude is the unsigned representation, in your case:
new BigInteger(1, resp.getData());

Java Card uses unsigned representations in the API, as it is more cryptographically oriented. No need for complicated methods in there.

Note that the reverse - creating a statically sized byte array out of an encoded signed BigInteger is even trickier, see this answer for information about how to perform that particular conversion.
","1045","<java><rsa><public-key-encryption><javacard>","3","3","1","2014-11-29 12:09:12","27202049","1","3","1816580","","2014-11-28 12:04:25","2014-11-28 11:12:10",""
"28046695","Doesn't this cipher suite mention key size - ""TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA""?","I had assumed that the RSA key size would be 256. But it can't. 
On trying to generate RSA keystore using keytool it gives error ""rsa keys must be at least 512 bits long"". 
The command used is - ""keytool -genkey -alias mydomain -keyalg RSA -keystore RSAkeystore.jks -keysize 256"".
","This cipher suite defines the key size for the AES algorithm but not for the RSA algorithm. The details about the cipher suite string you provided can be understood by reading RFC 4492
","1042","<rsa><java-8><public-key-encryption>","0","1","1","2015-01-20 13:37:45","","0","","","","","2015-01-20 13:35:32",""
"31456541","How to verify GPG signature with OpenSSL","I wrote a simple cross-platform utility to verify GPG signatures using the gpgme. However gpgme doesn't work very well on windows and on other platforms (e.g. osx) it requires GnuPG command line utilities installed which is a pretty heavy dependency. I looked into other openpgp libraries as well such as netgpg but these are even less portable (it really has to build with mingw-w64).
Would it be possible to implement a standalone tool to verify GPG signature using only standard libraries like openssl and zlib? From what I understand openpgp consists of standard ciphers and hash functions. What is the part that makes this so difficult that there are no good C libraries out there to do this?
","OpenSSL does not implement the OpenPGP format and is not compatible. Use an OpenPGP implementation like GnuPG, Bouncycastle (framework available for Java/C#) or others (OpenPGP.js for JavaScript, and there's a Go library).
While OpenPGP uses standard cryptographic digest and encryption algorithms, it has a different message format and especially uses its own CFB mode variant. You'd have to implement both a parser for the OpenPGP message format and get compatible with the OpenPGP CFB mode (if you want to support encryption), and finally pass the results to OpenSSL for the actual cryptography.
Finally, supporting the whole web of trust concept including the full OpenPGP specification is a broad task and has a variety of issues to consider ([1], [2], ...). In the unix world, people seem to be happy enough with GnuPG and GPGME, which are deeply tested and analyzed for even very advanced security issues (for example, this side channel attack). New implementations are most likely vulnerable to similar problems already solved for GnuPG.
","1027","<ssl><public-key-encryption><gnupg><openpgp><gpgme>","1","3","1","2018-06-12 01:17:09","31457431","0","1","","","","2015-07-16 14:05:18",""
"11994658","Source of PEM files for web service access","I should have paid more attention to my classes that covered security. I'm quite confused about something. To start, here's the background of what I'm trying to accomplish. 
I have a web service that I need to access. The web service is set up as HTTPS. The traffic between client and server is encrypted (this doesn't have to do with authentication).
I'm interacting with the web service via cURL and PHP. I've gotten an example to work locally over HTTP and I'm fairly confident I'm on the right track with regards to cURL/PHP side of things. 
When using the HTTP version of the code to access a web service over HTTPS, I am getting an error code 60 ""SSL certificate problem, verify that the CA cert is OK"" (error:14090086:SSL routines:SSL3_GET_SERVER_CERTIFICATE:certificate verify failed)
From my reading, it seems that I need a PEM file and I need to set additional cURL options such as the following: 

CURLOPT_CAINFO
CURLOPT_SSLCERT
CURLOPT_SSLKEYPASSWD

My question is how do I know where to get the PEM file or whether I can simply make it? This is probably going to be an obvious answer as I'm sure I'm missing something but I figure I just need to ask and get the background I'm missing.
Amendment: The web service is using a certificate signed by VeriSign. So it's not a self signed certificate. Also, the web service is owned and operated by an external organization. 
Thanks. 
","Despite googling around prior to asking this, it seems I've stumbled upon the answer after a bit of back-n-fourth with 'thatidiotguy' (his user name, not my name for him. ;-) ). 
cURL, out of the box, does not trust any CA (VeriSign or otherwise). This needs to be setup on your server. To ""solve"" the problem, you have two options. You can bypass the verification with the following command:
curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);

Note that this is not optimal with regards to security. Any certificate, signed by a CA or not, will be accepted as trusted. 
The proper fix involves getting the original certificate (in my case this means the web service) and ""exporting"" the certificate as a X.509 Certificate (PEM). The certificate then needs to appropriately moved to the server and the following configurations set: 
curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, true);
curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 2); //Check that the common name exists and that it matches the host name of the server
curl_setopt($ch, CURLOPT_CAINFO, getcwd() . ""/path/to/cert/my-exported.crt""); //PEM file

Source: http://unitstep.net/blog/2009/05/05/using-curl-in-php-to-access-https-ssltls-protected-sites/
","1026","<php><curl><public-key-encryption><pem>","0","1","2","2012-08-17 00:03:22","11995307","6","","18196","","2012-08-16 20:29:00","2012-08-16 20:05:01",""
"11994658","Source of PEM files for web service access","I should have paid more attention to my classes that covered security. I'm quite confused about something. To start, here's the background of what I'm trying to accomplish. 
I have a web service that I need to access. The web service is set up as HTTPS. The traffic between client and server is encrypted (this doesn't have to do with authentication).
I'm interacting with the web service via cURL and PHP. I've gotten an example to work locally over HTTP and I'm fairly confident I'm on the right track with regards to cURL/PHP side of things. 
When using the HTTP version of the code to access a web service over HTTPS, I am getting an error code 60 ""SSL certificate problem, verify that the CA cert is OK"" (error:14090086:SSL routines:SSL3_GET_SERVER_CERTIFICATE:certificate verify failed)
From my reading, it seems that I need a PEM file and I need to set additional cURL options such as the following: 

CURLOPT_CAINFO
CURLOPT_SSLCERT
CURLOPT_SSLKEYPASSWD

My question is how do I know where to get the PEM file or whether I can simply make it? This is probably going to be an obvious answer as I'm sure I'm missing something but I figure I just need to ask and get the background I'm missing.
Amendment: The web service is using a certificate signed by VeriSign. So it's not a self signed certificate. Also, the web service is owned and operated by an external organization. 
Thanks. 
","The answer is very simple. You need to download a certificate bundle, one that also ships with regular browsers. 
Luckily that work is already done for you here:
http://curl.haxx.se/docs/caextract.html
Once downloaded you specify the path to this file with CURLOPT_CAINFO. 
","1026","<php><curl><public-key-encryption><pem>","0","1","2","2012-08-17 00:03:22","11995307","6","","18196","","2012-08-16 20:29:00","2012-08-16 20:05:01",""
"15772937","SSH Communication Using Public and Private Keys","I am trying to understand how SSH authorization method work because I am trying to setup an git server using gitolite.
As far as I know gitolite will use the ssh to authorize users and give access to them to a specific repository with personal write and read permissions. But I am confused about how the authorization will work.
I've watched some videos in YouTube and they use some analogy with colors to explain. If I understand right, for two persons that are going to communicate between each other in a secret way, they need a secret and public key.
The two persons know each other public keys, and to communicate between each other they agree to use one public key. To establish a connection they encrypt they private key using the same public key and send the result to each other. When they receive the result they add the private key to that message and like magic they got the same message.
But I don't think I understand this right because I can't see how the server will verify the the client. I know the server had to hold the public keys from the clients that will connect to him, but he also got a private key?
When the client tries to connect to a server, he sends his private key encrypted with his public key, and the server encrypt his private key using the client public key and send to the client?
How the server check if the user is really him? I also read that to decrypt the information encrypted with a public key, only the person that holds the private key can decrypt the message. So how the server can decrypt the message send by the client if he don't have the client private key?
If someone could explain me how the authentication, authorization, and exchange of information work using this public and private keys I would be very happy.
","Explanation of this subject is a little bit excessive for Stackoverflow format.
Few days ago Coursera started a free course on Cryptography (part I) that explains exactly the matters you are interested in.
I welcome you to cryptography course to find the answers for your questions
","1021","<security><unix><ssh><public-key-encryption><openssh>","1","0","2","2013-10-22 21:42:48","15773430","0","0","","","","2013-04-02 19:41:45",""
"15772937","SSH Communication Using Public and Private Keys","I am trying to understand how SSH authorization method work because I am trying to setup an git server using gitolite.
As far as I know gitolite will use the ssh to authorize users and give access to them to a specific repository with personal write and read permissions. But I am confused about how the authorization will work.
I've watched some videos in YouTube and they use some analogy with colors to explain. If I understand right, for two persons that are going to communicate between each other in a secret way, they need a secret and public key.
The two persons know each other public keys, and to communicate between each other they agree to use one public key. To establish a connection they encrypt they private key using the same public key and send the result to each other. When they receive the result they add the private key to that message and like magic they got the same message.
But I don't think I understand this right because I can't see how the server will verify the the client. I know the server had to hold the public keys from the clients that will connect to him, but he also got a private key?
When the client tries to connect to a server, he sends his private key encrypted with his public key, and the server encrypt his private key using the client public key and send to the client?
How the server check if the user is really him? I also read that to decrypt the information encrypted with a public key, only the person that holds the private key can decrypt the message. So how the server can decrypt the message send by the client if he don't have the client private key?
If someone could explain me how the authentication, authorization, and exchange of information work using this public and private keys I would be very happy.
","SSH works roughly like the following.  Note that this is merely a high level explanation:
Each party has two keys:  a public key and a private key.  The public/private keys are related  mathematically, such that they are functionally inverse.  Thus an operation performed by one can only be undone exactly by the other.  It is complex, but think of it like calculating x^nnn versus the nnnth root of x.  The former is easy but the latter is difficult, making it computationally unfeasible to guess with enough accuracy to undo the operation.  This gives us some desirable attributes that allow  SSH to do the following with them:
The client connects to the server.  The server proves its identity by presenting a certificate signed with its private key.  The client uses the server's public key to decrypt the certificate and knows that only the client could have encrypted it since it requires the private key.  The server then does the same with a certificate presented by the client.  Identification can only be performed with 100% assurance using a trusted third party to manage the public keys.  Without the third party only identity changes can be detected.
Now that identities are verified, the server generates a symmetric secret key, encrypts it with the client's public key, and send it to the client (who is the only one that can decrypt the message since it requires the private key).  From this point on, both the client and server have the symmetric secret key, and all communication is encrypted with this key.  This is done for performance reasons because symmetric encryption operations are roughly 100 times faster than asymmetric operations.
This is how SSL verifies identities, and encrypts the information.  Note that more granular access control are provided by higher level applications (such as *nix file permissions), not SSL.
","1021","<security><unix><ssh><public-key-encryption><openssh>","1","5","2","2013-10-22 21:42:48","15773430","0","0","","","","2013-04-02 19:41:45",""
"28218636","InvalidKeySpecException using public key","I'm desperately trying to encrypt a message using asymmetric public / private key cryptography on an Android.
I'm on Windows and I've generated a public and private key using puttygen. I'm not sure what difference it makes but I've selected SSH-2 RSA. Here is the public key:
AAAAB3NzaC1yc2EAAAABJQAAAQEAh63orUzl0UTd7jj0KNYJg1+kNnty0QHyJu0r
Cajf5Kl7qWJaGXPfwsG8Qt3teafs5sv0JBSinab0s/5wfQmd1QPpXTMP93Wc4ucp
1VC/9B2o8XVi4fKoGTehB48yrSfI6KF2AIeASM1jUswydKxsuS4AS2mLGV/HuoKD
huMfCsRc8qK5zGQfVCoZTbQ66Z1yKdAzxMUuGmiTp7pVsle/P/UGbm6yFiee5r1/
dOR2CDyR6CP09Jaj7KSGfGuwPryCXPjEce1oCbN/FlLHVb7T1B5f6xhq+oY+Ij13
1IZPfShV8cs2kYKjsle2s23V5urSdWFv2tEcSJcpkUm2FlPdQw==

I've copied this to a text file in my main/assets folder. I read this in like so:
InputStream input = context.getAssets().open(filename);

This is then read in to a byte array through a fairly standard ByteArrayOutputStream method.
I then try and convert that to a public key as such:
public static PublicKey getPublicKey(byte[] keyBytes){
    PublicKey publicKey = null;

    if(keyBytes != null) {

        X509EncodedKeySpec spec = new X509EncodedKeySpec(keyBytes);
        KeyFactory kf = null;
        try {
            kf = KeyFactory.getInstance(""RSA"");
            publicKey = kf.generatePublic(spec);
        } catch (NoSuchAlgorithmException e) {
            Log.e(TAG, ""NoSuchAlgorithmException"");
            e.printStackTrace();
        } catch (InvalidKeySpecException e) {
            Log.e(TAG, ""InvalidKeySpecException "" + e.getMessage());
            e.printStackTrace();
        }
    }

    return publicKey;
}

Problem is I keep getting this error:
InvalidKeySpecException java.lang.RuntimeException: error:0D0680A8:asn1 encoding routines:ASN1_CHECK_TLEN:wrong tag

I've been attacking this for hours, and can't seem to get around it. Please please any suggestions welcome.
I've tried Base64 as such:
byte[] tempNewKey = Base64.decode(keyBytes, Base64.DEFAULT);

Which makes no difference and I've also tried using
RSAPublicKeySpec pubKeySpec = new RSAPublicKeySpec(new BigInteger(module), new BigInteger(exponent));

However putty doesn't tell me anything about an exponent? If I go ahead with this method I don't get the same error, but if I try and decrypt with my private key I just get gibberish.
Really hope you can help. Many Thanks
","SSH keys are not X509 compatible keys. They are stored in a SSH proprietary format. You'll need a SSH capable libary to retrieve the key value.
If SSH functionality is not required then it is possible to generate keys in Java (using the keytool command line or KeyPairGenerator.
Alternatively it is also possible to use external applications or libraries such as the openssl command line. In the case of OpenSSL specify DER as output. Java expects a DER encoded SubjectPublicKeyInfo structure for X509EncodedKeySpec.
","1019","<java><android><security><encryption><public-key-encryption>","2","0","1","2015-01-29 17:57:42","28221419","4","1","","","","2015-01-29 15:39:46",""
"33884538","Double encrypting 2048 RSA?","I have a problem. I'm trying to write a secure chat server using RSA encryption. I'm trying to double encrypt so a each client knows that messages can only come from the other client(s) and they are the only ones that can read the messages. The thing is, when I'm trying to double encrypt even a 1-character long message, the resulting first encrypted byte array is 256 bytes long, and of course, you can't encrypt that a second time with another key because its too long. My question is, how can I double encrypt with the code below? In theory, I generate two separate key pairs, and then encrypt a string with the public key of one, and then the private key of another, and do vice-versa for decrypting the string. Trust me, I've tried.
package client.crypto;

import java.security.Key;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.NoSuchAlgorithmException;

import javax.crypto.Cipher;

public class CryptoUtils {

private static final String ALGORITHM = ""RSA"";

public static KeyPair getKeyPair() {
    KeyPairGenerator keyGen = null;
    try {
        keyGen = KeyPairGenerator.getInstance(ALGORITHM);
    } catch (NoSuchAlgorithmException e) {
        e.printStackTrace();
    }
      keyGen.initialize(2048);
      final KeyPair key = keyGen.generateKeyPair();
    return key;
}

 public static byte[] encrypt(String text, Key key) {
        byte[] cipherText = null;
        try {
          final Cipher cipher = Cipher.getInstance(ALGORITHM);
          cipher.init(Cipher.ENCRYPT_MODE, key);
          cipherText = cipher.doFinal(text.getBytes());
        } catch (Exception e) {
          e.printStackTrace();
        }
        return cipherText;
      }

 public static String decrypt(String text, Key key) {
        byte[] dectyptedText = null;
        try {
          final Cipher cipher = Cipher.getInstance(ALGORITHM);

          cipher.init(Cipher.DECRYPT_MODE, key);
          dectyptedText = cipher.doFinal(text.getBytes());

        } catch (Exception ex) {
          ex.printStackTrace();
        }

        return new String(dectyptedText);
      }
 public static byte[] decryptToBytes(String text, Key key) {
        byte[] dectyptedText = null;
        try {
          final Cipher cipher = Cipher.getInstance(ALGORITHM);

          cipher.init(Cipher.DECRYPT_MODE, key);
          dectyptedText = cipher.doFinal(text.getBytes());

        } catch (Exception ex) {
          ex.printStackTrace();
        }

        return dectyptedText;
      }

 public static byte[] encrypt(byte[] bytes, Key key) {
        byte[] cipherText = null;
        try {
          final Cipher cipher = Cipher.getInstance(ALGORITHM);
          cipher.init(Cipher.ENCRYPT_MODE, key);
          cipherText = cipher.doFinal(bytes);
        } catch (Exception e) {
          e.printStackTrace();
        }
        return cipherText;
      }

 public static String decrypt(byte[] bytes, Key key) {
        byte[] dectyptedText = null;
        try {
          final Cipher cipher = Cipher.getInstance(ALGORITHM);

          cipher.init(Cipher.DECRYPT_MODE, key);
          dectyptedText = cipher.doFinal(bytes);

        } catch (Exception ex) {
          ex.printStackTrace();
        }

        return new String(dectyptedText);
      }

 public static byte[] decryptToBytes(byte[] bytes, Key key) {
        byte[] dectyptedText = null;
        try {
          final Cipher cipher = Cipher.getInstance(ALGORITHM);

          cipher.init(Cipher.DECRYPT_MODE, key);
          dectyptedText = cipher.doFinal(bytes);

        } catch (Exception ex) {
          ex.printStackTrace();
        }

        return dectyptedText;
      }



}

","Your requirements are reasonable, but your proposed solution is fundamentally flawed and should be abandoned.
You should go back to your requirements and seek to achieve those requirements using the standard techniques and APIs.
You should not try to invent your own cryptography methodology. It is difficult to get right and you are much more likely to create a truly secure system if you follow the standard practices. Some thoughts on how you should approach your requirements:

You need to establish some way to managed/distribute certificates in such a way that you can establish trust between the entities that are communicating. Usually, certificates (which are basically signed public keys that have been signed by someone that you trust) are used and distributed freely.
To allow verification of the identity of the sender (and also that the message has not been modified), you will use a digital signature (not encryption). What happens here is that a ""digest"" or ""hash"" is computed over the contents of the message, resulting in a relatively small number of bytes regardless of the length of the message. The digest is signed with the sender's private key. The sender's public key can be used to validate the signature.
To allow the message to be read only by the intended recipients, you will use encryption. What happens here is that a random, single-use passphrase is generated and used to encrypt the message. The passphrase is encrypted using the intended recipient's public key. The recipient's private key is required in order to recover the passphrase, which then allows the message to be decrypted. You can encrypt the same copy of the message for multiple recipients simply by encrypting the passphrase multiple times.
You need to pick a message format, which allows for parsing the signed, encrypted message to pick out the various parts. An example would be CMS (cryptographic message format).

As you have found out, RSA is good for encrypting relatively small amounts of data. I will also note that encrypting with RSA is much much slower than encrypting with a symmetric algorithm such as AES. The encryption community has worked for decades to come up with secure and performant solutions, such as a way to leverage the performance of symmetric encryption (e.g., AES) while having the trust pattern (no shared secret) of asymmetric encryption (e.g., RSA).
","1017","<java><encryption><rsa><public-key-encryption>","1","1","1","2015-11-24 04:05:06","33885257","6","3","","","","2015-11-24 02:42:43",""
"31457203","How to send and receive a DSA public/private signed message in Java","I cannot find any good (complete) documentation on how to exchange a public/private key signed message in Java.
I have yet to find a concise document on the minimum steps needed to generate a public key and private key using DSA, sign a byte[], and verify it.
The documentation from Oracle is too broken up and requires running across multiple JVMs. 
","I have successfully signed a byte array with a private key and verified it with a public key.
Example.
    byte[] data = ""hello."".getBytes();

    /* Test generating and verifying a DSA signature */
    try {
        /* generate a key pair */
        KeyPairGenerator keyGen = KeyPairGenerator.getInstance(""DSA"");
        keyGen.initialize(1024, new SecureRandom());
        KeyPair pair = keyGen.generateKeyPair();

        /* create a Signature object to use
         * for signing and verifying */
        Signature dsa = Signature.getInstance(""SHA/DSA""); 

        /* initialize the Signature object for signing */
        PrivateKey priv = pair.getPrivate();
        dsa.initSign(priv);

        /* Update and sign the data */
        dsa.update(data);

        /* Now that all the data to be signed
         * has been read in, sign it */
        byte[] sig = dsa.sign();

        /* Verify the signature */

        /* Initialize the Signature object for verification */
        PublicKey pub = pair.getPublic();
        dsa.initVerify(pub);

        /* Update and verify the data */
        dsa.update(data);

        boolean verifies = dsa.verify(sig);
        Assert.assertTrue(verifies);
    } catch (Exception e) {
        System.err.println(""Caught exception "" + e.toString());
    }

In this version, I serialize the public key into a byte array and then create a PublicKey from that byte array.
    byte[] data = ""hello."".getBytes();

    /* Test generating and verifying a DSA signature */
    try {
        /* generate a key pair */
        KeyPairGenerator keyGen = KeyPairGenerator.getInstance(""DSA"");
        keyGen.initialize(1024, new SecureRandom());
        KeyPair pair = keyGen.generateKeyPair();

        /* create a Signature object to use
         * for signing and verifying */
        Signature dsa = Signature.getInstance(""SHA/DSA""); 

        /* initialize the Signature object for signing */
        PrivateKey priv = pair.getPrivate();
        dsa.initSign(priv);

        /* Update and sign the data */
        dsa.update(data);

        /* Now that all the data to be signed
         * has been read in, sign it */
        byte[] sig = dsa.sign();

        /* Verify the signature */

        /* Initialize the Signature object for verification */
        PublicKey pub = pair.getPublic();
        /* Encode the public key into a byte array */
        byte[] encoded = pub.getEncoded();
        /* Get the public key from the encoded byte array */
        PublicKey fromEncoded = KeyFactory.getInstance(""DSA"", ""SUN"").generatePublic(new X509EncodedKeySpec(encoded));
        dsa.initVerify(fromEncoded);

        /* Update and verify the data */
        dsa.update(data);

        boolean verifies = dsa.verify(sig);
        Assert.assertTrue(verifies);
    } catch (Exception e) {
        System.err.println(""Caught exception "" + e.toString());
    }

","1016","<java><public-key-encryption><encryption-asymmetric><dsa>","1","2","1","2015-07-16 14:32:58","31457204","0","","","","","2015-07-16 14:32:58",""
"18961230","paillier encryption maximum ciphertext size","I am familiar with most of the public key encryption on the theoretical side (whatever are explained in the Katz/Lindell book) but I do  not have any practical programming side with any of them.
My question is directly specific to Paillier's and its implementation.
I need to represent various radio configurations which have the formal below:
radio 1=[ch_1=1, ch_2=0, ch_3=0...,ch_32=1] which constitutes the configuration of a single radio consisting of 32 channels.  Each channel can be ON or OFF (1 or 0)
Each such configuration would thus require 32 bits of data.  If I were to want to represent 32 such radios in a ""block"" it would consist of 1024 bits of data.
The problem is that I have the need to represent almost 10 more times the amount of radio configurations in one block of data.  In other words, I need to represent close to 302 radio configurations, each consisting of 32 bits of data in a single ""block"" for a total of around 9664 bits of data per block.
I am told from colleagues that have more practical experience with Paillier that we cannot pack more than 1024 bits into a Paillier ciphertext.  I want to know if this statement is true (that it is impossible to pack more than 1024 bits into a Paillier ciphertext) and if so what is the reason behind it?  Perhaps packing more into the ciphertext would make it impractical to use from a computation standpoint?
We intend to use Paillier for a Private Information Retrieval scheme.
The implementation would most likely be done in C++
Thank you.
","Like some other crypto systems, Paillier key generation starts out by picking two large primes p,q and setting n=p*q. Since messages have to be in Z/nZ (this denotes integeres modulo n), it is indeed correct that if you choose a 1024-bit implementation (i.e., n has 1024 bits), you can't encode messages larger than 1024 bits in a single step.
However, nothing prevents you from splitting your larger message into many smaller blocks and encrypting every block individually. In your case, the state of the first 32 radios would forn the first block, which you then encrypt and send. Repeat for the state of radios 33-64, etc etc etc. 
","1011","<c++><public-key-encryption>","0","0","2","2017-06-28 01:19:24","","0","","","","","2013-09-23 14:00:15",""
"18961230","paillier encryption maximum ciphertext size","I am familiar with most of the public key encryption on the theoretical side (whatever are explained in the Katz/Lindell book) but I do  not have any practical programming side with any of them.
My question is directly specific to Paillier's and its implementation.
I need to represent various radio configurations which have the formal below:
radio 1=[ch_1=1, ch_2=0, ch_3=0...,ch_32=1] which constitutes the configuration of a single radio consisting of 32 channels.  Each channel can be ON or OFF (1 or 0)
Each such configuration would thus require 32 bits of data.  If I were to want to represent 32 such radios in a ""block"" it would consist of 1024 bits of data.
The problem is that I have the need to represent almost 10 more times the amount of radio configurations in one block of data.  In other words, I need to represent close to 302 radio configurations, each consisting of 32 bits of data in a single ""block"" for a total of around 9664 bits of data per block.
I am told from colleagues that have more practical experience with Paillier that we cannot pack more than 1024 bits into a Paillier ciphertext.  I want to know if this statement is true (that it is impossible to pack more than 1024 bits into a Paillier ciphertext) and if so what is the reason behind it?  Perhaps packing more into the ciphertext would make it impractical to use from a computation standpoint?
We intend to use Paillier for a Private Information Retrieval scheme.
The implementation would most likely be done in C++
Thank you.
","I know the question is old, but I think my observations are valid.
First of all: never use an asymmetric cipher as a block cipher. This has security and performance implications. If you need to encrypt large chunks of data, use a symmetric cipher (AES for example), it will perform much better and it is secure (if used properly) to be used as a block cipher. If you need, use the asymmetric cipher to exchange the symmetric key.
Now about Paillier. The amount of data you can encrypt with Paillier is limited to ""n"", non-inclusive. ""n"" is generated by picking two large primes ""p"" and ""q"", such that n = p*q. Then you must have the message m < n. That is, the message ""m"" should be smaller than ""n"". Suppose you have a text like: radio. You can represent it in binary as: 01110010 01100001 01100100 01101001 01101111 00001010. If read 01110010 01100001 01100100 01101001 01101111 00001010 as a number, you get: m = 125762622025482. If you have m < n, then you can encrypt ""m"".
Now about this claim: 

I am told from colleagues that have more practical experience with
  Paillier that we cannot pack more than 1024 bits into a Paillier
  ciphertext.

It is WRONG. Paillier, like other asymmectric ciphers, will, in almost all cases, expand the size of the plaintext. That is, the size, in bits, of the ciphertext will be bigger than the size in bits of the plain text. What determines the maximum size of the plaintext and the cipher text is n, which is limited by the primes p and q. So, as long as you pick large enough primes, you can pack more than 1024 bits in a ciphertext. But bear in mind: as you increase the primes size, you will degrade performance. So you should find a good balance between performance and security when choosing the primes size. n with 3072 a good choice for Paillier.
To sum up: Don't use Paillier or any other asymmetric cipher as block a cipher. Use them to exchange symmetric keys, then use a symmetric cipher, with a good mode of operation (like CTR. Don't use ECB).
","1011","<c++><public-key-encryption>","0","0","2","2017-06-28 01:19:24","","0","","","","","2013-09-23 14:00:15",""
"35544547","Encrypting using node-forge and decrypting using python with RSA-OAEP","I have following code to encrypt in Javascript:
var rsa = forge.pki.rsa;

var keypair = rsa.generateKeyPair({bits: 2048, e: 0x10001});

var ciphertext = keypair.publicKey.encrypt(""zz xx yy"", 'RSA-OAEP', {
  md: forge.md.sha256.create(),
  mgf1: {
    md: forge.md.sha1.create()
  }
});

keypair.privateKey.decrypt(ciphertext, 'RSA-OAEP', {
  md: forge.md.sha256.create(),
  mgf1: {
    md: forge.md.sha1.create()
  }
});
""zz xx yy""

I exported public and private keys using 
forge.pki.privateKeyToPem(keypair.privateKey) // stored in pv.key
forge.pki.publicKeyToPem(keypair.publicKey) // stored in pb.key

I exported the encrypted text using 
ciphertext_base64 = forge.util.encode64(ciphertext)

I am trying to decrypt it in python using Crypto library as follows but getting an error:
>>> key = RSA.importKey(open('pv.key').read())
>>> cipher = PKCS1_OAEP.new(key)
>>> import base64
>>> ciphertext = base64.b64decode(ciphertext_base64)
>>> cipher.decrypt(ciphertext)
Traceback (most recent call last):
  File ""<stdin>"", line 1, in <module>
  File ""/usr/lib/python2.7/dist-packages/Crypto/Cipher/PKCS1_OAEP.py"", line 227, in decrypt
    raise ValueError(""Incorrect decryption."")
ValueError: Incorrect decryption.
>>> 

If I encrypt and decrypt some text string using the keys present in pv.key and pb.key in python, it works fine. 
How to get encryption in forge and decryption in python working?
","pyCrypto uses SHA1 for both hashing and MGF1 by default. If you pass in SHA-256 for hashing, it will also use that for MGF1 (code reference). So you need to specifically set hashing to SHA-256 and MGF1 to SHA-1:
cipher = PKCS1_OAEP.new(key, Crypto.Hash.SHA256, \
        lambda x,y: Crypto.Signature.PKCS1_PSS.MGF1(x,y, Crypto.Hash.SHA1))

","1010","<javascript><python><node.js><rsa><public-key-encryption>","0","1","1","2016-02-22 10:04:22","35550695","0","","1816580","","2016-02-22 10:04:22","2016-02-22 01:46:15",""
"26987058","Reduce the length of cipher text generated from RSA algorithm","I am generating a cipher text using RSA algorithm and it's working fine. But the thing is, I the cipher text generated is very high. 
For example:
Plain text : 249488213
gets generated to,
Cipher text : 94489103D862769B7AE21EA42C2D400A584D0F919BBCAE2450AD1BE57EAC64E4A2F75FAB9F8FA25BCBC12AAAE58F43CCB071DC002332FF4C736F4DA96A36C3ED
which is too large for my use-case as it increase the file size of my plain text file to approx 2.5 times greater.
So my concern is, can we reduce the length of cipher text to some minimum length (despite of key size we use), or is there any other asymmetric algorithm that can help me achieve this.
Any help is appreciated. Thanks.
","RSA encryption is described as
c = m^e mod N,

where c is a cipher text, m is an original message, e is public exponent (typically 65537) and N is public modulus.
Thus, c is always smaller than N, but in most of the cases of the same order as it. Sure you can select N and m to get a small c, but this will obviously lead to make encryption weaker, and you need a special key for every message.
Probably, the same problem will be with other assymetric cryptosystems. Shorter cipher text is easier to recover. But you can use AES, which can produce in counter mode a cipher text of the same size as an original message. Which reveals size of the message to the attacker.
","1009","<rsa><public-key-encryption><encryption-asymmetric>","3","2","1","2014-11-18 20:24:55","27003365","0","1","","","","2014-11-18 05:14:40",""
"12068303","Public/Private Key Based Licensing","I want to add licensing to my Delphi application.
This is the flow i have in mind :-

User sees the licensing screen when the program is run and is not licensed/activated.
He clicks export, which would export a file containing hardware information of user's machine. This file would be encrypted using a public key (A). (Private key for this would be available with the web application)
User will upload this file to my web app which in turn will allow the user to download his license file. License file will be based on User's hardware info (MAC ID, CPU Serial, etc). This file will be encrypted using another public key (B). (Private key of it would be available with the Delphi application)
User will import this license file to his Delphi application to activate it.

The Import/Export step has been added just in case user does not have an internet connection on which he wants to use this application
I am exploring TurboPower LockBox 3 for this purpose.
I need some help in deciding if my approach is right.
Should i be using symmetrical encryption instead for this scenario ?
I don't want the complete thing to be too complex. I am ok with a mediocre level of security.
Please guide.
Thanks !
","You should use asymmetric keys. Don forget the keys need to be in your program in order to be used. Anyone with a hex editor could potentially open your exe file and see your key. 
Also, the key file should be encrypted with a private key and not a public key. This way, only you can generate a key.
I have something similar done for my apps. It took me about 2 days to implement.
","1007","<php><aes><rsa><delphi-xe2><public-key-encryption>","0","1","1","2012-08-22 11:01:57","12071644","0","1","","","","2012-08-22 07:34:05",""
"9849207","RSA Encryption forceclosing before generating public/private keys","I am trying to generate my first public/private key pair for an RSA encryption.  This is my first time doing so but through looking at various tutorials and website i've decided to do so with the following code.  Although my code does not give me errors, it force closes.  Everything is posted including my imports, can sombody please help me understand why my code is not generating keys and giving me errors? And yes i did declare it in the AndroidManifest.xml file
import java.io.BufferedOutputStream;
import java.io.FileOutputStream;
import java.io.ObjectOutputStream;
import java.math.BigInteger;
import java.security.KeyFactory;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.spec.RSAPrivateKeySpec;
import java.security.spec.RSAPublicKeySpec;

    public class RSA {
        public static void GenerateKeyPair() {
            try {
                KeyPairGenerator kpg = KeyPairGenerator.getInstance(""RSA"");
                kpg.initialize(4096);
                KeyPair kp = kpg.genKeyPair();

                KeyFactory fact = KeyFactory.getInstance(""RSA"");
                RSAPublicKeySpec pub = fact.getKeySpec(kp.getPublic(),
                        RSAPublicKeySpec.class);
                RSAPrivateKeySpec priv = fact.getKeySpec(kp.getPrivate(),
                        RSAPrivateKeySpec.class);

                saveToFile(""public.key"", pub.getModulus(), pub.getPublicExponent());
                saveToFile(""private.key"", priv.getModulus(),
                        priv.getPrivateExponent());
            } catch (Exception e) {
                System.out.println(e.getMessage());
            }
        }

        public static void saveToFile(String fileName, BigInteger mod,
                BigInteger exp) throws Exception {
            ObjectOutputStream oout = new ObjectOutputStream(
                    new BufferedOutputStream(new FileOutputStream(fileName)));
            try {
                oout.writeObject(mod);
                oout.writeObject(exp);
            } catch (Exception e) {
                throw new Exception(""error"", e);
            } finally {
                oout.close();
            }
        }
    }


<?xml version=""1.0"" encoding=""utf-8""?>
<manifest xmlns:android=""http://schemas.android.com/apk/res/android""
    package=""com.BLAH""
    android:versionCode=""1""
    android:versionName=""1.0"" >

    <uses-sdk android:minSdkVersion=""7"" />

    <application
        android:icon=""@drawable/ic_launcher""
        android:label=""@string/app_name"" >
        <activity
            android:name="".UUIDActivity""
            android:label=""@string/app_name"" >
            <intent-filter>
                <action android:name=""android.intent.action.MAIN"" />

                <category android:name=""android.intent.category.LAUNCHER"" />
            </intent-filter>
        </activity>
        <activity
            android:name="".Installation""
            android:label=""@string/app_name"" >
        </activity>
        <activity
            android:name="".RSA""
            android:label=""@string/app_name"" >
        </activity>
    </application>

</manifest>

","I don't know what's causing your problem (we'd have to see where you use this class to debug that), but I do have an alternative for you, if you can include a 3rd party library. See JSch, which can generate RSA keypairs (e.g. for use in SSH public-key authentication). Documentation: http://epaul.github.com/jsch-documentation/simple.javadoc/
The method you're looking for is KeyPair.genKeyPair. 
","1002","<java><android><encryption><rsa><public-key-encryption>","3","0","2","2012-03-26 04:42:10","9849333","2","1","1103263","","2012-03-26 02:38:27","2012-03-24 04:42:11",""
"9849207","RSA Encryption forceclosing before generating public/private keys","I am trying to generate my first public/private key pair for an RSA encryption.  This is my first time doing so but through looking at various tutorials and website i've decided to do so with the following code.  Although my code does not give me errors, it force closes.  Everything is posted including my imports, can sombody please help me understand why my code is not generating keys and giving me errors? And yes i did declare it in the AndroidManifest.xml file
import java.io.BufferedOutputStream;
import java.io.FileOutputStream;
import java.io.ObjectOutputStream;
import java.math.BigInteger;
import java.security.KeyFactory;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.spec.RSAPrivateKeySpec;
import java.security.spec.RSAPublicKeySpec;

    public class RSA {
        public static void GenerateKeyPair() {
            try {
                KeyPairGenerator kpg = KeyPairGenerator.getInstance(""RSA"");
                kpg.initialize(4096);
                KeyPair kp = kpg.genKeyPair();

                KeyFactory fact = KeyFactory.getInstance(""RSA"");
                RSAPublicKeySpec pub = fact.getKeySpec(kp.getPublic(),
                        RSAPublicKeySpec.class);
                RSAPrivateKeySpec priv = fact.getKeySpec(kp.getPrivate(),
                        RSAPrivateKeySpec.class);

                saveToFile(""public.key"", pub.getModulus(), pub.getPublicExponent());
                saveToFile(""private.key"", priv.getModulus(),
                        priv.getPrivateExponent());
            } catch (Exception e) {
                System.out.println(e.getMessage());
            }
        }

        public static void saveToFile(String fileName, BigInteger mod,
                BigInteger exp) throws Exception {
            ObjectOutputStream oout = new ObjectOutputStream(
                    new BufferedOutputStream(new FileOutputStream(fileName)));
            try {
                oout.writeObject(mod);
                oout.writeObject(exp);
            } catch (Exception e) {
                throw new Exception(""error"", e);
            } finally {
                oout.close();
            }
        }
    }


<?xml version=""1.0"" encoding=""utf-8""?>
<manifest xmlns:android=""http://schemas.android.com/apk/res/android""
    package=""com.BLAH""
    android:versionCode=""1""
    android:versionName=""1.0"" >

    <uses-sdk android:minSdkVersion=""7"" />

    <application
        android:icon=""@drawable/ic_launcher""
        android:label=""@string/app_name"" >
        <activity
            android:name="".UUIDActivity""
            android:label=""@string/app_name"" >
            <intent-filter>
                <action android:name=""android.intent.action.MAIN"" />

                <category android:name=""android.intent.category.LAUNCHER"" />
            </intent-filter>
        </activity>
        <activity
            android:name="".Installation""
            android:label=""@string/app_name"" >
        </activity>
        <activity
            android:name="".RSA""
            android:label=""@string/app_name"" >
        </activity>
    </application>

</manifest>

","@The Obliviator When i see you AndroidManifest ,i found that you should have to remove below code from your manifest.
  <activity
        android:name="".RSA""
        android:label=""@string/app_name"" >
    </activity>

Because this class is not extends As Activity ,you required this class for GenerateKeyPair so no need to declare this class in Manifest file.And what about this class Installation ,is this class is also not extends as Activity then remove it also.After that you will get run successfully.
","1002","<java><android><encryption><rsa><public-key-encryption>","3","0","2","2012-03-26 04:42:10","9849333","2","1","1103263","","2012-03-26 02:38:27","2012-03-24 04:42:11",""
"54238568","Reading a PKCS#1 or SPKI public key in Java without libraries","I need to use a public key to verify some data in Java, but I can't seem to format the key in such a way that Java can use without third-party plugins.
I'm generating the key with Node.js's crypto library, which gives me the option of PKCS#1 or SPKI, and either .pem or .der file format.
I've heard that Java doesn't support PKCS#1 out-of-the box, and pretty much every other answer on StackOverflow recommends using BouncyCastle or similar, but in my case, I am writing an SDK, and simply cannot afford to use a library just to read this public key.
So I'm currently reading the key in .der format as it saves having to strip the PEM headers and decode the key from base-64. When I run this, I get the error:
java.security.spec.InvalidKeySpecException: java.lang.RuntimeException: error:0c0000be:ASN.1 encoding routines:OPENSSL_internal:WRONG_TAG

Here's what I have (sorry, it's in Kotlin, not Java like the title suggests)
// Here's a key for convenience
val key = Base64.getDecoder().decode(""MFUCTgF/uLsPBS13Gy7C3dPpiDF6SYCLUyyl6CFqPtZT1h5bwKR9EDFLQjG/kMiwkRMcmEeaLKe5qdj9W/FfFitwRAm/8F53pQw2UETKQI2b2wIDAQAB"");

val keySpec = X509EncodedKeySpec(key)
val keyFactory = KeyFactory.getInstance(""RSA"")
val publicKey = keyFactory.generatePublic(keySpec) // error thrown here

val cipher = Cipher.getInstance(""RSA/NONE/PKCS1Padding"")
cipher.init(Cipher.DECRYPT_MODE, publicKey)

My best idea at the minute is to install a library on the Node.js side, which is less problematic, to support exporting the key as PKCS#8, but I thought I'd check first to see if I'm missing anything.
","The following code turns a PKCS#1 encoded public key into a SubjectPublicKeyInfo encoded public key, which is the public key encoding accepted by the RSA KeyFactory using X509EncodedKeySpec - as SubjectPublicKeyInfo is defined in the X.509 specifications.
Basically it is a low level DER encoding scheme which

wraps the PKCS#1 encoded key into a bit string (tag 0x03, and a encoding for the number of unused bits, a byte valued 0x00);
adds the RSA algorithm identifier sequence (the RSA OID + a null parameter) in front - pre-encoded as byte array constant;
and finally puts both of those into a sequence (tag 0x30).

No libraries are used. Actually, for createSubjectPublicKeyInfoEncoding, no import statements are even required.

import java.security.KeyFactory;
import java.security.NoSuchAlgorithmException;
import java.security.interfaces.RSAPublicKey;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.X509EncodedKeySpec;
import java.util.Base64;

public class PKCS1ToSubjectPublicKeyInfo {

    private static final int SEQUENCE_TAG = 0x30;
    private static final int BIT_STRING_TAG = 0x03;
    private static final byte[] NO_UNUSED_BITS = new byte[] { 0x00 };
    private static final byte[] RSA_ALGORITHM_IDENTIFIER_SEQUENCE =
            {(byte) 0x30, (byte) 0x0d,
                    (byte) 0x06, (byte) 0x09, (byte) 0x2a, (byte) 0x86, (byte) 0x48, (byte) 0x86, (byte) 0xf7, (byte) 0x0d, (byte) 0x01, (byte) 0x01, (byte) 0x01,
                    (byte) 0x05, (byte) 0x00};


    public static RSAPublicKey decodePKCS1PublicKey(byte[] pkcs1PublicKeyEncoding)
            throws NoSuchAlgorithmException, InvalidKeySpecException
    {
        byte[] subjectPublicKeyInfo2 = createSubjectPublicKeyInfoEncoding(pkcs1PublicKeyEncoding);
        KeyFactory rsaKeyFactory = KeyFactory.getInstance(""RSA"");
        RSAPublicKey generatePublic = (RSAPublicKey) rsaKeyFactory.generatePublic(new X509EncodedKeySpec(subjectPublicKeyInfo2));
        return generatePublic;
    }

    public static byte[] createSubjectPublicKeyInfoEncoding(byte[] pkcs1PublicKeyEncoding)
    {
        byte[] subjectPublicKeyBitString = createDEREncoding(BIT_STRING_TAG, concat(NO_UNUSED_BITS, pkcs1PublicKeyEncoding));
        byte[] subjectPublicKeyInfoValue = concat(RSA_ALGORITHM_IDENTIFIER_SEQUENCE, subjectPublicKeyBitString);
        byte[] subjectPublicKeyInfoSequence = createDEREncoding(SEQUENCE_TAG, subjectPublicKeyInfoValue);

        return subjectPublicKeyInfoSequence;
    }

    private static byte[] concat(byte[] ... bas)
    {
        int len = 0;
        for (int i = 0; i < bas.length; i++)
        {
            len += bas[i].length;
        }

        byte[] buf = new byte[len];
        int off = 0;
        for (int i = 0; i < bas.length; i++)
        {
            System.arraycopy(bas[i], 0, buf, off, bas[i].length);
            off += bas[i].length;
        }

        return buf;
    }

    private static byte[] createDEREncoding(int tag, byte[] value)
    {
        if (tag < 0 || tag >= 0xFF)
        {
            throw new IllegalArgumentException(""Currently only single byte tags supported"");
        }

        byte[] lengthEncoding = createDERLengthEncoding(value.length);

        int size = 1 + lengthEncoding.length + value.length;
        byte[] derEncodingBuf = new byte[size];

        int off = 0;
        derEncodingBuf[off++] = (byte) tag;
        System.arraycopy(lengthEncoding, 0, derEncodingBuf, off, lengthEncoding.length);
        off += lengthEncoding.length;
        System.arraycopy(value, 0, derEncodingBuf, off, value.length);

        return derEncodingBuf;
    }   

    private static byte[] createDERLengthEncoding(int size)
    {
        if (size <= 0x7F)
        {
            // single byte length encoding
            return new byte[] { (byte) size };
        }
        else if (size <= 0xFF)
        {
            // double byte length encoding
            return new byte[] { (byte) 0x81, (byte) size };
        }
        else if (size <= 0xFFFF)
        {
            // triple byte length encoding
            return new byte[] { (byte) 0x82, (byte) (size >> Byte.SIZE), (byte) size };
        }

        throw new IllegalArgumentException(""size too large, only up to 64KiB length encoding supported: "" + size);
    }

    public static void main(String[] args) throws Exception
    {
        // some weird 617 bit key, which is way too small and not a multiple of 8
        byte[] pkcs1PublicKeyEncoding = Base64.getDecoder().decode(""MFUCTgF/uLsPBS13Gy7C3dPpiDF6SYCLUyyl6CFqPtZT1h5bwKR9EDFLQjG/kMiwkRMcmEeaLKe5qdj9W/FfFitwRAm/8F53pQw2UETKQI2b2wIDAQAB"");
        RSAPublicKey generatePublic = decodePKCS1PublicKey(pkcs1PublicKeyEncoding);
        System.out.println(generatePublic);
    }
}


Notes:

NoSuchAlgorithmException should probably be caught and put into a RuntimeException;
the private method createDERLengthEncoding should probably not accept negative sizes.
Larger keys have not been tested, please validate createDERLengthEncoding for those - I presume it works, but better be safe than sorry.

","999","<java><encryption><public-key-encryption><java-security>","2","4","1","2019-01-18 14:31:56","54246646","2","1","","","","2019-01-17 14:56:41",""
"33047314","Public key encryption in Internet Explorer 11","I am trying to implement public key encryption using JavaScript for IE11 with the following code:
<script>
    var data = new Uint8Array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]);

    var crypto = window.crypto || window.msCrypto;
    var cryptoSubtle = crypto.subtle;

    var genOp = cryptoSubtle.generateKey(
        {
            name: ""RSA-OAEP"",
            modulusLength: 2048,
            publicExponent: new Uint8Array([0x01, 0x00, 0x01]),
            hash: { name: ""SHA-256"" },
        },
        true,
        [""encrypt"", ""decrypt""]
    );

    genOp.onerror = function (e) {
        console.error(e);
    };

    genOp.oncomplete = function (e) {
        var key = e.target.result;
        console.log(key);
        console.log(key.publicKey);

        var encOp = cryptoSubtle.encrypt(
            {
                name: ""RSA-OAEP""
            },
            key.publicKey,
            data
        );

        encOp.onerror = function (e) {
            console.error(e);
        };

        encOp.oncomplete = function (e) {
            var encrypted = e.target.result;
            console.log(new Uint8Array(encrypted));
        };
    };
</script>

It generates the key pair but fails to do the encryption with an error event. Similar code with a symmetric AES key works. Is public key encryption supported by IE11? Is there anything wrong with my code?
","I've found out the cause of this. I need to add the hash field when invoking the encrypt call:
        var encOp = cryptoSubtle.encrypt(
            {
                name: ""RSA-OAEP"",
                hash: { name: ""SHA-256"" }
            },
            key.publicKey,
            data
        );

This does not match the Web Cryptography API specification but it works.
","999","<internet-explorer><encryption><internet-explorer-11><public-key-encryption><webcrypto-api>","2","5","1","2015-10-16 17:15:57","","3","1","","","","2015-10-09 21:19:16",""
"41798936","Generating secret key for AES 256 Encryption from Keychain","I am working on a project where I need to encrypt/decrypt some data locally. I am using RNCryptor for the encryption and decryption process. To do that I need to use key, i don't want to define that key from app side like:
NSString *password = @""Secret password"";

Is there any way to define the key using any property from keychain so that I can use the same key without defining it in code base.
","If you do not want to declare a static key or derive a key from the static password, you can certainly derive a random key and store that value in the Keychain. SecRandomCopyBytes will return an array of arbitrary length that was generated in a  cryptographically secure manner. You can request 32 bytes (256 bits) from this service and store that as your key in the keychain. Obviously be aware that if you call this multiple times it will not return the same result, so you must not lose the key once you have stored it. 
","997","<ios><objective-c><encryption><public-key-encryption><aescryptoserviceprovider>","1","2","2","2017-01-23 05:57:05","41799059","0","1","","","","2017-01-23 03:36:23",""
"41798936","Generating secret key for AES 256 Encryption from Keychain","I am working on a project where I need to encrypt/decrypt some data locally. I am using RNCryptor for the encryption and decryption process. To do that I need to use key, i don't want to define that key from app side like:
NSString *password = @""Secret password"";

Is there any way to define the key using any property from keychain so that I can use the same key without defining it in code base.
","You can try SAMKeychain in github
https://github.com/soffes/SAMKeychain
","997","<ios><objective-c><encryption><public-key-encryption><aescryptoserviceprovider>","1","0","2","2017-01-23 05:57:05","41799059","0","1","","","","2017-01-23 03:36:23",""
"46532454","Android public key encryption","My Android app implements RSA encryption, however the backend can not decrypt the token generated by the app. Here is the code, the beginning and end lines of the public key have been removed before making the calls, what could be the problem?
String encryptedToken = Base64.encodeToString(encrypt(publicKey, ""4111111111111111""), Base64.NO_WRAP);

public static byte[] encrypt(String publicKey, String data) {
        if (TextUtils.isEmpty(publicKey) || TextUtils.isEmpty(data)) {
            return null;
        }
        try {
            // Decode the modified public key into a byte[]
            byte[] publicKeyByteArray = Base64.decode(publicKey.getBytes(""UTF-8""),Base64.NO_WRAP);

            Cipher mCipher = Cipher.getInstance(""RSA/ECB/OAEPWithSHA-256AndMGF1Padding"");
            KeyFactory keyFactory = KeyFactory.getInstance(""RSA"");
            X509EncodedKeySpec x509KeySpec = new X509EncodedKeySpec(publicKeyByteArray);
            Key key = keyFactory.generatePublic(x509KeySpec);
            mCipher.init(Cipher.ENCRYPT_MODE, key);
            return mCipher.doFinal(data.getBytes(""UTF-8""));
        }
        catch (UnsupportedEncodingException e) {
            Log.e(""RSAKEY"", e.getMessage());
        }
        catch (NoSuchPaddingException e) {
            Log.e(""RSAKEY"", e.getMessage());
        } catch (NoSuchAlgorithmException e) {
            Log.e(""RSAKEY"", e.getMessage());
        } catch (InvalidKeyException e) {
            Log.e(""RSAKEY"", e.getMessage());
        } catch (InvalidKeySpecException e) {
            Log.e(""RSAKEY"", e.getMessage());
        } catch (IllegalBlockSizeException e) {
            Log.e(""RSAKEY"", e.getMessage());
        } catch (BadPaddingException e) {
            Log.e(""RSAKEY"", e.getMessage());
        }
        return null;
    }

The backend team provided the below sample code that works, but it is for desktop java. Android library does not have the Base64.getEncoder method. it is very similar to what I wrote but mine just does not work.
 // Decode the modified public key into a byte[]
            byte[] publicKeyByteArray = Base64.getDecoder().decode(publicKey.getBytes(StandardCharsets.UTF_8));

            // Create a PublicKey from the byte array
            X509EncodedKeySpec keySpec = new X509EncodedKeySpec(publicKeyByteArray);
            KeyFactory keyFactory = KeyFactory.getInstance(""RSA"");
            PublicKey pubKey = keyFactory.generatePublic(keySpec);

            // Get an instance of the Cipher and perform the encryption
            Cipher cipher = Cipher.getInstance(""RSA/ECB/OAEPWithSHA-256AndMGF1Padding"");
            cipher.init(Cipher.ENCRYPT_MODE, pubKey);
            byte[] cipherText = cipher.doFinal(ccNum.getBytes(StandardCharsets.UTF_8));

            // Get the encrypted value as a Base64-encoded String
            String encodeToStr = Base64.getEncoder().encodeToString(cipherText);

            // Print out the encoded, encrypted string
            System.out.println(""Encrypted and Encoded String: "" + encodeToStr);

I compared the byte array values at every step. The desktop cipher and android cipher got exactly the same inputs. However the results from the Android code cipher.doFinal can not be decrypted by the backend. If I put the desktop results to the REST call body they work fine, so it is not something caused by REST call.
I also tried to create a public/private key pair on Android, and use the generated public key to encrypt instead of using the public key from our backend, and decrypt using the private key and it works. So the cipher is also working, just somehow the backend is expecting something different
","Finally someone in the team cracked this. 
The reason is because the Android OS uses Bouncy castle, the backend uses Sun as the provider, this caused the backend throwing a BadPaddingException.
To make it work, the cipher needs to be initialized this way on Android:
 mCipher.init(Cipher.ENCRYPT_MODE, key, new
                    OAEPParameterSpec(""SHA-256"", ""MGF1"", MGF1ParameterSpec.SHA1,
                    PSource.PSpecified.DEFAULT));

Check for more details in this post:
http://bouncy-castle.1462172.n4.nabble.com/Problems-with-OAEP-SHA-256-hash-crypto-td1466852.html
","993","<java><android><encryption><rsa><public-key-encryption>","9","8","1","2017-11-09 20:59:27","46717895","9","6","485918","","2017-11-09 20:59:27","2017-10-02 19:31:05",""
"51218492","How to Convert Certificate to Decimal Modulus and Exponent","Some libraries require that a public key is represented by an integer modulus and exponent. It's surprisingly hard to quickly convert a certificate or public key into that format. How can I convert that using bash?
","Convert Certificate to Modulus, Exponent
The process for taking a certificate or a public key and turning it into integers is a surprisingly tough task as first glance. There's a long chain of decoding and encoding to various format that this page will describe.
1. Certificate to Public Key
$ CERTIFICATE_PATH=/path/to/file.cer
$ OUTPUT_PUBLIC_KEY_PATH=public_key.pem
$ openssl x509 -pubkey -noout -in $CERTIFICATE_PATH > $OUTPUT_PUBLIC_KEY_PATH

Creates the a public key (example output below, don't worry this is a sample cert, not real).
-----BEGIN PUBLIC KEY-----
MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEArDMy/rsEEUfMQrrCSQmc
Lo9CSTvoL2jijXN1yi8jlx86yorxxm8Njdo0R2N6U0QRBLjglabeJJJZLJxQqPpU
RRFB7euTmmdLsctHxYVn2UDglIXV1Q5CGkSi9nFRupkL7ZMUflP0hqvPFRagUHaG
exJSlsO+32Gy6TxVIQKxAacjoYFJcMDGlDV4oTPelgMJ7enA7s4Bnz2tr6KJyoD3
N9fhcmFR0lGR7W7wqR79ePaxmPcCEl6UGAIbPny8WSQluRGzjsdB56dwsvdIZtlS
ChYr4tzoQYOB7cWc9gnJlQFOhocc/7tFPVXelT2Ff95Kp4eWGUK5JmzoU720B8Yk
EQIDAQAB
-----END PUBLIC KEY-----

2. Get Hexidecimal Modulus from Public Ke
$ HEX_MODULUS=$(openssl rsa -pubin -in $OUTPUT_PUBLIC_KEY_PATH  -modulus | grep 'Modulus=' |  cut -d'=' -f 2)

Creates the a hexidecimal representation of the modulus (example output below).


3. Convert Hexadecimal Modulus to Decimal
$ ruby<<EOF
p ""$HEX_MODULUS"".to_i(16).to_s(10)
EOF

Converts the hexadecimal representation of the modulus to decimal (example output below).


4. Get Exponent from Public Key
$ openssl rsa -pubin -in $FILE -text | grep 'Exponent'

Gets the decimal exponent from the public key (example output below). Most people use 65537 as the exponent.
Exponent: 65537 (0x10001)

","990","<ssl-certificate><public-key-encryption><modulus><exponent>","1","3","1","2018-07-06 22:49:43","","0","","","","","2018-07-06 22:49:43",""
"29005056","Public encryption in crypto on node 0.12","I need to encrypt (and decrypt) a string with a public key previously generated in nodejs (i'm using version 0.12) with crypto module, but i'm unable to do it.
For first i generated the keys in this way:
var diffHell = crypto.createDiffieHellman(60);
diffHell.generateKeys('base64');
var publicKey = diffHell.getPublicKey('base64'); //or whatever 'hex','binary'
var privateKey = diffHell.getPrivateKey('base64'); //or whatever 'hex','binary'

Then i tried to encrypt a string using the generated public key:
crypto.publicEncrypt({key: publicKey}, new Buffer(textToEncrypt));

Running this snippet, node throw this error:
Error: error:0906D06C:PEM routines:PEM_read_bio:no start line
    at Error (native)
    at Object.exports.publicEncrypt (crypto.js:362:18)
    [...]

Reading it, I understand that the key must be in PEM format, but i can't find in the documentation how to tranform a public key in PEM.
So, How i can do that? Someone has done this yet?
","Diffie-Hellman (Key Exchange) is an algorithm and protocol to derive a shared secret based on modular arithmetic. It is not a public-key cipher in the same way as RSA is. You cannot use Diffie-Hellman for crypto.publicEncrypt(). 
Node.js' Crypto module doesn't provide a way to generate a public-private RSA key pair, so you either need to use OpenSSL through child_process or use one of the many modules which provide this sort of thing (e.g. ursa). 
","990","<node.js><encryption><public-key-encryption>","0","1","2","2015-05-20 13:07:44","29006743","0","1","","","","2015-03-12 08:34:46",""
"29005056","Public encryption in crypto on node 0.12","I need to encrypt (and decrypt) a string with a public key previously generated in nodejs (i'm using version 0.12) with crypto module, but i'm unable to do it.
For first i generated the keys in this way:
var diffHell = crypto.createDiffieHellman(60);
diffHell.generateKeys('base64');
var publicKey = diffHell.getPublicKey('base64'); //or whatever 'hex','binary'
var privateKey = diffHell.getPrivateKey('base64'); //or whatever 'hex','binary'

Then i tried to encrypt a string using the generated public key:
crypto.publicEncrypt({key: publicKey}, new Buffer(textToEncrypt));

Running this snippet, node throw this error:
Error: error:0906D06C:PEM routines:PEM_read_bio:no start line
    at Error (native)
    at Object.exports.publicEncrypt (crypto.js:362:18)
    [...]

Reading it, I understand that the key must be in PEM format, but i can't find in the documentation how to tranform a public key in PEM.
So, How i can do that? Someone has done this yet?
","You do not need to uses ursa for key generation. Instead you can generate keys with openssl then store the generated PEM keys on your server and try to load them in your script
","990","<node.js><encryption><public-key-encryption>","0","0","2","2015-05-20 13:07:44","29006743","0","1","","","","2015-03-12 08:34:46",""
"11416510",".NET DSACryptoServiceProvider Key Sizes","I want to use a 2048 bit DSA key, and I am using a .NET DSACryptoServiceProvider.  I was having trouble loading the key parameters into a .NET DSAParameters object, so I wrote the following code to output the valid key sizes for a DSACryptoServiceProvider: 
DSACryptoServiceProvider sampleDSA = new DSACryptoServiceProvider();
Console.Write(""----- DSA LEGAL KEY SIZES -----\n"");
foreach (KeySizes ks in sampleDSA.LegalKeySizes)
{
  Console.WriteLine(""Min: "" + ks.MinSize.ToString());
  Console.WriteLine(""Max: "" + ks.MaxSize.ToString());
}

There is only one KeySizes object in the array, and the ouput is as follows:
----- DSA LEGAL KEY SIZES -----
Min: 512
Max: 1024

Is there any way to have a 2048 bit key using a DSACryptoServiceProvider?  Using a 1024 bit key is not an option.
----EDIT-----
I have enumerated the LegalKeySizes for all .NET CryptoServiceProvider classes that deal with Digital Signatures.  The results are as follows.
System.Security.Cryptography.DSACryptoServiceProvider
Min: 512
Max: 1024

System.Security.Cryptography.RSACryptoServiceProvider
Min: 384
Max: 16384

System.Security.Cryptography.ECDsaCng
Min: 256
Max: 384
Min: 521
Max: 521

What I meant to ask was: Is there a way to tweak this to use a 2048 bit key using a DSACryptoServiceProvider, or am I locked into the 512-1024 bit range?
","Based on the legal key sizes output you posted, the .NET implementation will not work with more than 1024 bits.
Perhaps some other crypto provider would work?  I've used the Bouncycastle (www.bouncycastle.org) .NET provider before for things that .NET's provider cannot do.
","989","<c#><.net><security><public-key-encryption><public-key>","2","2","2","2016-07-01 01:08:26","11418176","0","1","863553","","2012-07-10 17:01:39","2012-07-10 15:16:46",""
"11416510",".NET DSACryptoServiceProvider Key Sizes","I want to use a 2048 bit DSA key, and I am using a .NET DSACryptoServiceProvider.  I was having trouble loading the key parameters into a .NET DSAParameters object, so I wrote the following code to output the valid key sizes for a DSACryptoServiceProvider: 
DSACryptoServiceProvider sampleDSA = new DSACryptoServiceProvider();
Console.Write(""----- DSA LEGAL KEY SIZES -----\n"");
foreach (KeySizes ks in sampleDSA.LegalKeySizes)
{
  Console.WriteLine(""Min: "" + ks.MinSize.ToString());
  Console.WriteLine(""Max: "" + ks.MaxSize.ToString());
}

There is only one KeySizes object in the array, and the ouput is as follows:
----- DSA LEGAL KEY SIZES -----
Min: 512
Max: 1024

Is there any way to have a 2048 bit key using a DSACryptoServiceProvider?  Using a 1024 bit key is not an option.
----EDIT-----
I have enumerated the LegalKeySizes for all .NET CryptoServiceProvider classes that deal with Digital Signatures.  The results are as follows.
System.Security.Cryptography.DSACryptoServiceProvider
Min: 512
Max: 1024

System.Security.Cryptography.RSACryptoServiceProvider
Min: 384
Max: 16384

System.Security.Cryptography.ECDsaCng
Min: 256
Max: 384
Min: 521
Max: 521

What I meant to ask was: Is there a way to tweak this to use a 2048 bit key using a DSACryptoServiceProvider, or am I locked into the 512-1024 bit range?
",".NET 4.6.2 added DSACng, which is a FIPS-186-3 compatible implementation of DSA.  DSACryptoServiceProvider is limited to FIPS-186-1 (which had a 1024-bit key limit).
Other than constructing the object, you should avoid depending on the concrete type, instead just using members on the DSA base class.
using (DSA dsaPublicPrivate = new DSACng(2048))
using (DSA dsaPublic = new DSACng())
{
    dsaPublic.ImportParameters(dsaPublicPrivate.ExportParameters(false));

    byte[] signature = dsaPublicPrivate.SignData(data, HashAlgorithmName.SHA256);
    bool isValid = dsaPublic.VerifyData(data, signature, HashAlgorithmName.SHA256);

    ...
}

","989","<c#><.net><security><public-key-encryption><public-key>","2","4","2","2016-07-01 01:08:26","11418176","0","1","863553","","2012-07-10 17:01:39","2012-07-10 15:16:46",""
"44147559","How to manage Asymmetric (Public/Private) Keys in AWS","I need to develop a solution to store both symmetric and asymmetric keys securely in AWS. These keys will be used by applications that are running on EC2s and Lambdas. The applications will need to be set up with policies that will allow the application or lambda to pull the keys out of the key store.  The key store should also manage the key expiry, notifying various people when keys are going to expire. The initial key exchange is between my company and its partners meaning that we may have either a public or private key for a key pair depending upon the data transfer direction.
We have looked at KMS but from what I have seen KMS does not support asymmetric keys.  I have also seen online that some people are using either S3 (protected by KMS) or parameter store to store the keys but this does not address the issue of key management.
Do you guys have any thoughts on this? or even SaaS/PaaS suggestions?
","My recommendation would be to use AWS Secrets Manager for this. Secrets Manager allows you to store any type of credential/key, you can set up fine-grained cross account permissions to secrets, encryption at rest is used (via KMS), and secrets can be automatically rotated (by providing an expiration time and an AWS Lambda function owned by you to perform the rotation).
More details on the official docs:

Basic tutorial on how to use AWS Secrets Manager
Encryption at rest on Secrets Manager
Secrets rotation
Managing secrets policies

","985","<amazon-web-services><amazon-ec2><aws-lambda><public-key-encryption><aws-kms>","8","2","1","2019-08-08 09:30:08","53121563","3","","10307643","","2019-08-08 09:30:08","2017-05-24 01:35:32",""
"16830458","Command-line public-key-encryption utility","I'm looking for a ""simple"" linux command-line encryption mechanism to log my SDTOUT/STDERR prints to a file.
Currently I just append the output of my program to a file - but I'm looking for something like this:
./myProgram | encryptionProgram publicKey >> logFile  

that I can then decrypt with a privateKey
Note: I'm not looking for an encrypted filesystem solution, I want to pipe it straight to an open VFAT filesystem.
Thanks
","There is an interesting thread on stackexchange.
That should do what you're looking for
","980","<linux><command-line><embedded-linux><public-key-encryption>","0","0","1","2013-05-30 13:27:15","16837512","0","","","","","2013-05-30 07:35:28",""
"25613168","How do I encrypt and store private messages?","I am developing a private messaging system for my website using Laravel 4, and I want to ensure that the messages remain private.  So far, I have the following code written:
class PkeyEncryption {

    public static function encrypt($input, $cipher = MCRYPT_RIJNDAEL_128) {

        $key = sha1(microtime(true) . mt_rand(10000, 90000));

        $iv_size = mcrypt_get_size($cipher, MCRYPT_MODE_CFB);
        $iv = mcrypt_create_iv($iv_size, MCRYPT_RAND);

        return mcrypt_encrypt($cipher, $key, $input, MCRYPT_MODE_CFB, $iv);
    }

    public static function decrypt($data, $key, $cipher = MCRYPT_RIJNDAEL_128) {

        $iv = $data['iv'];
        $data = $data['data'];

        return mcrypt_decrypt($cipher, $key, $data, MCRYPT_MODE_CFB, $iv);
    }
}

So, I know how to encrypt the messages, and I also know that I can store the IV alongside the message.  But, I don't know where I am supposed to store the public key.  I have already read a few other questions on the site, and I still haven't found an answer.  Can somebody please point me in the right direction? 
","You have to store all users public keys on the server and only the users themselves should have their own private keys.
When user A wants to send message to user B, he will take user B public key and encrypt the message with it. This message can then be decrypted only with the user B private key.
","972","<php><encryption><laravel-4><public-key-encryption>","1","1","1","2014-09-01 23:14:53","25613874","7","1","","","","2014-09-01 21:38:31",""
"32132322","Encrypt password by using Public Key (.pem) file","Now I have a Public Key(.pem) file and password to encrypt. 
-----BEGIN PUBLIC KEY-----
.....
...
...
-----END PUBLIC KEY-----
I would like to get byte[] values for encrypted password. 
It doesn't get any error but return byte[] values is seem to wrong. 
Below are coding current my using one, pls help me or advise me if I'm going wrong.
Really appreciate for your help!! 
private static UnicodeEncoding _encoder = new UnicodeEncoding();

public byte[] getPem(string pemFile, string password)
        {
            byte[] encryptData;

            RSACryptoServiceProvider rsa = new RSACryptoServiceProvider();
            byte[] Exponent = { 1, 0, 1 };

            RSAParameters rsaParam = rsa.ExportParameters(false);
            rsaParam.Modulus = Convert.FromBase64String(File.ReadAllText(pemFile).Replace(""-----BEGIN PUBLIC KEY-----"", """").Replace(""-----END PUBLIC KEY-----"", """"));

            rsaParam.Exponent = Exponent;

            rsa.ImportParameters(rsaParam);
            var dataToEncrypt = _encoder.GetBytes(password);
            encryptData = rsa.Encrypt(dataToEncrypt, false);

            return encryptData;
        }

","","971","<c#><public-key-encryption>","2","","0","2015-08-21 04:22:21","","4","","","","","2015-08-21 04:22:21",""
"38205468","How to do RSA encryption for IOS using Ionic","I'm developing a native android app and hybrid IOS app. I'm encrypting the password before sending the request to BL. Below is my native code.
public String Encrypt (String plain) throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException, IllegalBlockSizeException, BadPaddingException
{
    try {
        AssetManager assets = context.getAssets();
        byte[] key = readFully(
                assets.open(""encryption.der"", AssetManager.ACCESS_BUFFER));
        KeySpec publicKeySpec = new X509EncodedKeySpec(key);

        KeyFactory kf = KeyFactory.getInstance(""RSA"");
        Key pk = kf.generatePublic(publicKeySpec);

        Cipher cipher = Cipher.getInstance(""RSA"");
        cipher.init(Cipher.ENCRYPT_MODE, pk);
        ByteArrayOutputStream out = new ByteArrayOutputStream();
        CipherOutputStream cout = new CipherOutputStream(out, cipher);
        try {
            cout.write(plain.getBytes(UTF_8));
            cout.flush();
        }catch (Exception e){
            e.printStackTrace();
        }finally {
            try {
                cout.close();
            } catch (IOException e) {
              e.printStackTrace();
            }
        }
        encrypted  = new String(encode(out.toByteArray(), DEFAULT), ""UTF-8"");

        return encrypted;
    } catch (IOException e) {
        e.printStackTrace();
    } catch (InvalidKeySpecException e) {
        e.printStackTrace();
    }

    return null;

}

static byte[] readFully(InputStream inputStream) throws IOException {
        InputStream in = new BufferedInputStream(inputStream);
        byte[] tmp = new byte[1024];
        int readLen, size = 0;
        ByteArrayOutputStream out = new ByteArrayOutputStream();
        while ((readLen = in.read(tmp)) != -1) {
            if (((long) size + readLen) > Integer.MAX_VALUE) {
                // woah! did we just ship an app of 2GB?
                throw new IllegalStateException(""Invalid file. File size exceeds expected ""
                        + ""maximum of 2GB"");
            }
            size += readLen;
            out.write(tmp, 0, readLen);
        }
        return out.toByteArray();
    }

I have my key in encryption.der file. Everything works fine in android. Now coming to IOS which I'm using Ionic to develop. I'm not able to achieve the encryption part. I have used the ""cryptico"" : link : https://github.com/wwwtyro/cryptico/blob/master/README.md . 
And finally converting to Base64 like these.
var EncryptionPassword = cryptico.encrypt($scope.userInfo.Password, publicKey);
$scope.encPass = base64.encode(EncryptionPassword.cipher);

But I'm getting ArrayIndexOutOfBound Exception from BL. Can you suggest exact same solution has android for angularjs too. So RSA encrytion works on both IOS and Android.
","
Create a Service and place your public Key inside that. 
.service('Settings', function(){
this.publicKey = 'MIIBIjANBgdcssvsvsfvsfvsfvrefvfvfviuwoihijwfoiw278499080989i09M+KC8MYYOu/NRLmFg85LRrfRszyI/vZ/k8982789uiwbgchdbhU+3joQZoJ3Sxq/GbIIFf/3y4f9DuKI53y1qR2qD4xIskfa9rPVqvBtAu2KSNRd8V4J8RKI2gT2YEA+A3Z0mQq4GBRS8iYmGLqRQyPfNUSankylBrTpOIVFBZORdZehjJMmwl98UynyfnyMIHUIFuhefuibiufbeufbsoijn93fD7nxt+siZryfazn3EAgBaTKTV/U5xIepzDN6ZYJ4qnC93u6erdb1X4m1zU6RGapwzCOPOORTyzw/uWJ8twcODNt0cqVp+sYQIDAQAB';
})

Now in your JS encrypt using public key and JSEncrypt.

var encrypt = new JSEncrypt();                                                  encrypt.setPublicKey(Settings.publicKey);
EncryptionPin = encrypt.encrypt($scope.customerInfo.Pin);

EncryptionPin is the final key.
","969","<android><ios><angularjs><ionic-framework><public-key-encryption>","1","0","1","2017-01-20 07:26:57","","0","4","","","","2016-07-05 14:01:51",""
"22492417","Java - Diffie-Hellman Encryption - Wrong Output","I'm attempting to implement Diffie-Hellman key exchange. I am a little confused with how to use the secret key once generated.
As seen in the output, the 2 secret keys are generated using the same prime & base as normal in the key exchange, and trade public keys when generating the secret keys, however they are not outputting the same value as I expected.
I'm getting very confused with how to implement this encryption method and would be very grateful for some direction.  My overall aim for this is to implement an encrypted SMS Android application.

    (The screenshot was unable to capture the entire length of a & b's base & prime)
AlgorithmParameterGenerator paramGen = AlgorithmParameterGenerator.getInstance(""DH"");
paramGen.init(512); // number of bits
AlgorithmParameters params = paramGen.generateParameters();
DHParameterSpec dhSpec = (DHParameterSpec)params.getParameterSpec(DHParameterSpec.class); 

BigInteger p512 = dhSpec.getP();
BigInteger g512 = dhSpec.getG();

//A  
KeyPairGenerator akpg = KeyPairGenerator.getInstance(""DiffieHellman"");

DHParameterSpec param = new DHParameterSpec(p512, g512);
System.out.println(""Prime: "" + p512);
System.out.println(""Base: "" + g512);
akpg.initialize(param);
KeyPair kp = akpg.generateKeyPair();

//B
KeyPairGenerator bkpg = KeyPairGenerator.getInstance(""DiffieHellman"");

DHParameterSpec param2 = new DHParameterSpec(p512, g512);
System.out.println(""Prime: "" + p512);
System.out.println(""Base: "" + g512);
bkpg.initialize(param2);
KeyPair kp2 = bkpg.generateKeyPair();


KeyAgreement aKeyAgree = KeyAgreement.getInstance(""DiffieHellman"");
KeyAgreement bKeyAgree = KeyAgreement.getInstance(""DiffieHellman"");

aKeyAgree.init(kp.getPrivate());
bKeyAgree.init(kp2.getPrivate());

aKeyAgree.doPhase(kp2.getPublic(), true);
bKeyAgree.doPhase(kp.getPublic(), true);

//System.out.println(""Alice Secret Key: "" + aKeyAgree.generateSecret());
//System.out.println(""Bob's Secret Key: "" + bKeyAgree.generateSecret());

MessageDigest hash = MessageDigest.getInstance(""SHA-256"");

byte[] ASharedSecret = hash.digest(aKeyAgree.generateSecret());
byte[] BSharedSecret = hash.digest(bKeyAgree.generateSecret());

System.out.println(""Alice's Shared Secret: "" + ASharedSecret.toString());
System.out.println(""Bob's Shared Secret: "" + BSharedSecret.toString());

","byte[].toString() doesn't print the contents. Try Arrays.toString().
","964","<java><android><public-key-encryption><diffie-hellman>","0","2","1","2015-04-24 19:15:26","","2","4","701303","","2015-04-24 19:15:26","2014-03-18 22:30:11",""
"37044161","Encryption using multiple RSA public keys","I'm writing module for server which will send e-mails. In client application user can add many receipients and each of them has its own public key. I want to encrypt attachments using multiple keys. For example if I add 3 receipients then attachments should be encrypted with 3 different public keys. I'm using bouncy castle to do that but it works only for the first public key in encryption process. I mean thath only the first person can decrypt using its own private key, for the rest it doesn't work.
My code for adding methods for each key looks like:
PGPEncryptedDataGenerator encryptedDataGenerator = new PGPEncryptedDataGenerator(dataEncryptor);

for (PGPPublicKey publicKey : publicKeys) {
        encryptedDataGenerator.addMethod(new BcPublicKeyKeyEncryptionMethodGenerator(publicKey));
}

Whole method looks like: 
public File encryptFile(String fileName,
        boolean armor,
        boolean withIntegrityCheck) throws IOException,
        NoSuchProviderException,
        PGPException {
    Security.addProvider(new BouncyCastleProvider());

    ByteArrayOutputStream bOut = new ByteArrayOutputStream();

    PGPCompressedDataGenerator comData
            = new PGPCompressedDataGenerator(PGPCompressedData.UNCOMPRESSED);

    PGPUtil.writeFileToLiteralData(comData.open(bOut),
            PGPLiteralData.BINARY,
            new File(fileName));

    comData.close();

    BcPGPDataEncryptorBuilder dataEncryptor
            = new BcPGPDataEncryptorBuilder(PGPEncryptedData.AES_256);

    dataEncryptor.setWithIntegrityPacket(withIntegrityCheck);

    dataEncryptor.setSecureRandom(new SecureRandom());

    PGPEncryptedDataGenerator encryptedDataGenerator
            = new PGPEncryptedDataGenerator(dataEncryptor);

    for (PGPPublicKey publicKey : publicKeys) {
        encryptedDataGenerator.addMethod(new BcPublicKeyKeyEncryptionMethodGenerator(publicKey));
    }

    byte[] bytes = bOut.toByteArray();

    FileOutputStream localByteArrayOutputStream = new FileOutputStream(fileName);

    Object localObject = localByteArrayOutputStream;

    if (armor) {

        localObject = new ArmoredOutputStream((OutputStream) localObject);

    }

    OutputStream localOutputStream = encryptedDataGenerator.open((OutputStream) localObject,
            bytes.length);

    localOutputStream.write(bytes);

    localOutputStream.close();

    return new File(fileName);
}

Can someone help me and tell me what I'm doing wrong?
Thank you for every help.
[EDIT]
This code works, I had problem in method loading multiple keys.
","Well, I had the same problem a year later. I wish that you've solved yours. I'm writing my solution here just in case that someone else has similar issues.
Your encryption code doesn't have problem. The problem might be in the decryption. For an encrypted data object, the correct key should be found by using the key id stored with the object. My decryption process reads like the following:
private byte[] decryptWithKey(byte[] bytes, PGPSecretKey secKey, String pass)
        throws PGPException, IOException {
    PBESecretKeyDecryptor keyDec = new JcePBESecretKeyDecryptorBuilder(
            new JcaPGPDigestCalculatorProviderBuilder().setProvider(""BC"").build())
            .setProvider(""BC"").build(pass.toCharArray());
    ByteArrayOutputStream bout = new ByteArrayOutputStream();

    PGPPrivateKey privateKey = secKey.extractPrivateKey(keyDec);
    PublicKeyDataDecryptorFactory dec1 =
            new JcePublicKeyDataDecryptorFactoryBuilder().setProvider(""BC"").build(privateKey);
    JcaPGPObjectFactory objFact = new JcaPGPObjectFactory(bytes);
    PGPEncryptedDataList encList = (PGPEncryptedDataList) objFact.nextObject();

    PGPPublicKeyEncryptedData encD = null;
    for(Iterator<PGPPublicKeyEncryptedData> it = encList.iterator(); it.hasNext(); ) {
        PGPPublicKeyEncryptedData end = it.next();
        if (secKey.getKeyID() == end.getKeyID()) {
            encD = end;
            break;
        }
    }
    assert encD != null: ""Cannot find encrypted data with key: ""
            + Long.toHexString(secKey.getKeyID());
    InputStream in = encD.getDataStream(dec1);
    byte[] buf = new byte[BufferSize];
    for (int len; (len = in.read(buf)) >= 0; ) {
        bout.write(buf, 0, len);
    }
    bout.close();
    return bout.toByteArray();
}

The key is the for loop that finds the matching key for the encrypted object.
","956","<java><encryption><rsa><bouncycastle><public-key-encryption>","3","2","1","2017-08-26 01:22:38","","2","","5706166","","2016-05-10 14:01:44","2016-05-05 06:45:48",""
"37471472","Python signxml - Sign an XML document with just public/private keys","I'm working on a django port of a asp.net app that generates and signs an xml document using just a public key/private key pair.
I've managed to duplicate every aspect of the xml generation except for the signature aspect.  I've found the signxml library that seems like it would allow me to do this, but I can't figure out how to get it to work. Here's the code I've got (modeled after the example here):  
# store keys as strings
cert = open(signprivatepath).read()
key = open(signpublicpath).read()

data = ET.fromstring(docstring)
xmldsig_stuff = xmldsig(data, 'sha1')
signed_root = xmldsig_stuff.sign(
    key=key,
    cert=cert,
    algorithm='rsa-sha1',
    c14n_algorithm='http://www.w3.org/TR/2001/REC-xml-c14n-20010315'
    )
verified_data = xmldsig(signed_root).verify()
return verified_data

signprivatepath and signpublicpath are both paths to PEM formatted keys.
When I run the code, it returns the following error: 
Environment:


Request Method: GET
Request URL: http://127.0.0.1:8000/site/245/download-site-license

Django Version: 1.9.5
Python Version: 3.5.1
Installed Applications:
['licenses.apps.LicensesConfig',
 'simple_history',
 'django.contrib.admindocs',
 'django.contrib.admin',
 'django.contrib.auth',
 'django.contrib.contenttypes',
 'django.contrib.sessions',
 'django.contrib.messages',
 'django.contrib.staticfiles']
Installed Middleware:
['simple_history.middleware.HistoryRequestMiddleware',
 'django.middleware.security.SecurityMiddleware',
 'django.contrib.sessions.middleware.SessionMiddleware',
 'django.middleware.common.CommonMiddleware',
 'django.middleware.csrf.CsrfViewMiddleware',
 'django.contrib.auth.middleware.AuthenticationMiddleware',
 'django.contrib.auth.middleware.SessionAuthenticationMiddleware',
 'django.contrib.messages.middleware.MessageMiddleware',
 'django.middleware.clickjacking.XFrameOptionsMiddleware']



Traceback:

File ""C:\Users\servant\AppData\Local\Programs\Python\Python35-32\lib\site-packages\django\core\handlers\base.py"" in get_response
  149.                     response = self.process_exception_by_middleware(e, request)

File ""C:\Users\servant\AppData\Local\Programs\Python\Python35-32\lib\site-packages\django\core\handlers\base.py"" in get_response
  147.                     response = wrapped_callback(request, *callback_args, **callback_kwargs)

File ""C:\projects\django\swlicensing\licenses\views\site.py"" in downloadSiteLicense
  206.         signedXMLTree = signXML(treestring)

File ""C:\projects\django\swlicensing\licenses\views\site.py"" in signXML
  144.         c14n_algorithm='http://www.w3.org/TR/2001/REC-xml-c14n-20010315'

File ""C:\Users\servant\AppData\Local\Programs\Python\Python35-32\lib\site-packages\signxml-1.0.0-py3.5.egg\signxml\__init__.py"" in sign
  414.                 key = load_pem_private_key(self.key, password=passphrase, backend=default_backend())

File ""C:\Users\servant\AppData\Local\Programs\Python\Python35-32\lib\site-packages\cryptography\hazmat\primitives\serialization.py"" in load_pem_private_key
  20.     return backend.load_pem_private_key(data, password)

File ""C:\Users\servant\AppData\Local\Programs\Python\Python35-32\lib\site-packages\cryptography\hazmat\backends\multibackend.py"" in load_pem_private_key
  282.             return b.load_pem_private_key(data, password)

File ""C:\Users\servant\AppData\Local\Programs\Python\Python35-32\lib\site-packages\cryptography\hazmat\backends\openssl\backend.py"" in load_pem_private_key
  1606.             password,

File ""C:\Users\servant\AppData\Local\Programs\Python\Python35-32\lib\site-packages\cryptography\hazmat\backends\openssl\backend.py"" in _load_key
  1784.         mem_bio = self._bytes_to_bio(data)

File ""C:\Users\servant\AppData\Local\Programs\Python\Python35-32\lib\site-packages\cryptography\hazmat\backends\openssl\backend.py"" in _bytes_to_bio
  1058.         data_char_p = self._ffi.new(""char[]"", data)

Exception Type: TypeError at /site/245/download-site-license
Exception Value: initializer for ctype 'char[]' must be a bytes or list or tuple, not str

Is there a way to do this? The code I'm copying from doesn't seem to use a certificate, just using the private key itself.  Or am I missing something?
","The cert and key variables require to be byte array so read it as byte array by the following
cert = open(signprivatepath, ""rb"").read()
key = open(signpublicpath, ""rb"").read()

then you pass it into the sign function as you already did
signed_root = xmldsig_stuff.sign(
    key=key,
    cert=cert,
    algorithm='rsa-sha1',
    c14n_algorithm='http://www.w3.org/TR/2001/REC-xml-c14n-20010315'
    )

","956","<python><xml><django><public-key-encryption>","1","1","1","2017-01-18 04:03:48","","0","","","","","2016-05-26 21:40:58",""
"30860777","Use previously generated private key in ECIES","I wan to encrypt /decrypt data using ECIES , I am using cryptopp for this.
AutoSeededRandomPool prng;

//get private key generated
ECIES<ECP>::Decryptor d0(prng, ASN1::secp256r1());
PrintPrivateKey(d0.GetKey());

//get public key 
ECIES<ECP>::Encryptor e0(d0);
PrintPublicKey(e0.GetKey());

//encrypt the message
string em0; // encrypted message
StringSource ss1 (message, true, new PK_EncryptorFilter(prng, e0, new StringSink(em0) ) );

//decrypt the message   
string dm0; // decrypted message
StringSource ss2 (em0, true, new PK_DecryptorFilter(prng, d1, new StringSink(dm0) ) );

Everything else is fine but I want to do the above same thing using already generated 'private key' and not randomly generated 'private key' unlike the case above. How can I do this?
I have tried the following code but it just simply crashes
AutoSeededRandomPool prng;

std::string  privatekeyString=""02C200102C180F9E6A4E7A2F58B5BE86BC179478"";

CryptoPP::HexDecoder decoder;
decoder.Put((byte*)privatekeyString.data(), privatekeyString.size());
decoder.MessageEnd();

ECIES<ECP> ::Decryptor d0;
d0.AccessKey().AccessGroupParameters().Initialize(ASN1::secp128r1());

crash point
//load private key  
d0.AccessKey().Load(decoder);
PrintPrivateKey(d0.GetKey());

//get public key    
ECIES<ECP>::Encryptor e0(d0);
PrintPublicKey(e0.GetKey());

string em0; // encrypted message
StringSource ss1(message, true, new PK_EncryptorFilter(prng, e0, new StringSink(em0) ) );
cout<<""encrypted msg: ""<<em0<<""  and its length: ""<<em0.length()<<endl;

string dm0; // decrypted message
StringSource ss2 (em0, true, new PK_DecryptorFilter(prng, d0, new StringSink(dm0) ) );
cout <<""decrypted msg: ""<< dm0<<""  and its length: ""<<dm0.length() <<   endl;

Edit 2
In response to @jww answer I managed to decode the message with the private key as:
  try
  {
    AutoSeededRandomPool prng;

    std::string exponent=""AsIAECwYD55qTnovWLW+hrwXlHg="";
    StringSource ss(exponent, true /*pumpAll*/, new CryptoPP::HexDecoder);


    Integer x;
    x.Decode(ss, ss.MaxRetrievable(), Integer::UNSIGNED);
    // cout << ""Exponent: "" << std::hex << x << endl;

    ECIES<ECP>::Decryptor decryptor;
    decryptor.AccessKey().Initialize(ASN1::secp128r1(), x);

    bool valid = decryptor.AccessKey().Validate(prng, 3);
    if(!valid)
    {
        cout<<""Exponent is not valid for P-128""<<endl;
        return;
    }
      //  throw  Exception(CryptoPP::Exception::OTHER_ERROR, ""Exponent is not valid for P-256"");

    // Or: decryptor.AccessKey().ThrowIfInvalid(prng, 3);

    cout << ""Exponent is valid for P-128"" << endl;

    PrintPrivateKey(decryptor.GetKey());


    //get public key
    ECIES<ECP>::Encryptor encryptor(decryptor);
    PrintPublicKey(encryptor.GetKey());



    string em0; // encrypted message
    StringSource ss1(message, true, new PK_EncryptorFilter(prng, encryptor, new StringSink(em0) ) );
    cout<<""encrypted msg: ""<<em0<<""  and its length: ""<<em0.length()<<endl;

    string dm0; // decrypted message
    StringSource ss2 (em0, true, new PK_DecryptorFilter(prng, decryptor, new StringSink(dm0) ) );
    cout <<""decrypted msg: ""<< dm0<<""  and its length: ""<<dm0.length() << endl;

}
catch(const CryptoPP::Exception& ex)
{
    std::cerr << ex.what() << endl;
}

But when I try to encrypt the message using public key I got error 
CryptoPP::CryptoMaterial::InvalidMaterial: CryptoMaterial: this object contains invalid values
Here is my code:
std::string     public_point=""AsIAEFjzIcX+Kvhe8AmLoGUc8aYAEAwf5ecREGZ2u4RLxQuav/A="";
StringSource ss(public_point, true, new CryptoPP::HexDecoder);

ECIES<ECP>::Encryptor encryptor;
    encryptor.AccessKey().AccessGroupParameters().Initialize(ASN1::secp128r1());

ECP::Point point;
encryptor.GetKey().GetGroupParameters().GetCurve().DecodePoint(point, ss, ss.MaxRetrievable());
cout << ""X: "" << std::hex << point.x << endl;
cout << ""Y: "" << std::hex << point.y << endl;

encryptor.AccessKey().SetPublicElement(point);


encryptor.AccessKey().ThrowIfInvalid(prng, 3);

PrintPublicKey(encryptor.GetKey());



string em0; // encrypted message
StringSource ss1(message, true, new PK_EncryptorFilter(prng, encryptor, new StringSink(em0) ) );
cout<<""encrypted msg: ""<<em0<<""  and its length: ""<<em0.length()<<endl;

","The problem I am having is you don't appear to know what you have, and the some of the parameters you are using are wrong when taken with the other parameters. So its pretty much a stab in the dark.

First, you should wrap the disk operations in a try/catch. I/O can always cause problems, so be sure to catch exceptions related to the iostream stuff. You should also catch the Crypto++ Exception related to key loading. That will handle the ""crash"" with no information.
So your code might look something like:
try
{
    // Read key from disk, load it into Crypto++ object
}
catch(const Exception& ex)
{
    cerr << ""Caught Crypto++ exception "" << ex.what() << endl;
}
catch(const std::runtime_error& ex)
{
    cerr << ""Caught C++ runtime error "" << ex.what() << endl;
}


Second, this looks like a private exponent, and not a private key:
std::string  privatekeyString=""02C200102C180F9E6A4E7A2F58B5BE86BC179478"";

And its too big to be in P-128. Maybe you should do something like:
try
{
    AutoSeededRandomPool prng;

    std::string exponent=""02C200102C180F9E6A4E7A2F58B5BE86BC179478"";
    StringSource ss(exponent, true /*pumpAll*/, new HexDecoder);

    Integer x;
    x.Decode(ss, ss.MaxRetrievable(), Integer::UNSIGNED);        
    // cout << ""Exponent: "" << std::hex << x << endl;

    ECIES<ECP>::Decryptor decryptor;
    decryptor.AccessKey().Initialize(ASN1::secp256r1(), x);

    bool valid = decryptor.AccessKey().Validate(prng, 3);
    if(!valid)
        throw  Exception(Exception::OTHER_ERROR, ""Exponent is not valid for P-256"");

    // Or: decryptor.AccessKey().ThrowIfInvalid(prng, 3);

    cout << ""Exponent is valid for P-256"" << endl;        
}
catch(const Exception& ex)
{
    cerr << ex.what() << endl;
}


Or, you can:
ECIES<ECP>::Decryptor decryptor;
decryptor.AccessKey().AccessGroupParameters().Initialize(ASN1::secp256r1());
decryptor.AccessKey().SetPrivateExponent(x);


If you add the following to the program above:
// Encode key, use OID versus domain paramters
string encoded;
HexEncoder encoder(new StringSink(encoded));

decryptor.AccessKey().AccessGroupParameters().SetEncodeAsOID(true);
decryptor.GetKey().Save(encoder);

cout << ""Private key: "" << encoded << endl;

You will get the following for the private key:
$ ./ecies-test.exe
Exponent: 2c200102c180f9e6a4e7a2f58b5be86bc179478h
Private key: 3041020100301306072A8648CE3D020106082A8648CE3D030107042730250201010
42000000000000000000000000002C200102C180F9E6A4E7A2F58B5BE86BC179478

As you can see, the key is not ""02C200102C180F9E6A4E7A2F58B5BE86BC179478"".
The 12 leading 0's look suspicious to me. Though the exponent validates, you should verify the exponent and the field. The closest fit I could find is the curve secp160r2 (of course, curves like secp192k1 and secp224k1 work too).
The private key above is the hex encoding of ecies.priv.der shown below.

Third, this could be a public point in compressed form due to the leading 02.
std::string  privatekeyString=""02C200102C180F9E6A4E7A2F58B5BE86BC179478"";

If that is the case, then you are supposed to be able to do this, but I can't get it to decode the point (see Minimizing Key Size for Persistence on the wiki). x and y are 0 after the operation; maybe the problem is with the field:
std::string public_point=""02C200102C180F9E6A4E7A2F58B5BE86BC179478"";
StringSource ss(public_point, true, new HexDecoder);

ECIES<ECP>::Encryptor encryptor;
encryptor.AccessKey().AccessGroupParameters().Initialize(ASN1::secp128r1());

ECP::Point point;
encryptor.GetKey().GetGroupParameters().GetCurve().DecodePoint(point, ss, ss.MaxRetrievable());
cout << ""X: "" << std::hex << point.x << endl;
cout << ""Y: "" << std::hex << point.y << endl;

encryptor.AccessKey().SetPublicElement(point);
encryptor.AccessKey().ThrowIfInvalid(prng, 3);


Fourth, you should probably save the entire key, and not just the exponent. Here's a program for you that shows you how to save and load the keys. It also shows you how to perform encryption and decryption in one-liners.
/////////////////////////////////////////////////
// Part one - generate keys

ECIES<ECP>::Decryptor decryptor(prng, ASN1::secp256r1());
ECIES<ECP>::Encryptor encryptor(decryptor);

/////////////////////////////////////////////////
// Part two - save keys

FileSink fs1(""ecies.priv.der"", true /*binary*/);
decryptor.AccessKey().AccessGroupParameters().SetEncodeAsOID(true);
decryptor.GetKey().Save(fs1);

FileSink fs2(""ecies.pub.der"", true /*binary*/);
encryptor.AccessKey().AccessGroupParameters().SetEncodeAsOID(true);
encryptor.GetKey().Save(fs2);

/////////////////////////////////////////////////
// Part three - encrypt/decrypt

string message, encrypted, recovered;

if(argc >= 2 && argv[1] != NULL)
    message = argv[1];
else
    message = ""Attack at dawn!"";

StringSource ss1 (message,   true /*pumpAll*/, new PK_EncryptorFilter(prng, encryptor, new StringSink(encrypted)));
StringSource ss2 (encrypted, true /*pumpAll*/, new FileSink(""ecies.encrypted.bin"", true /*binary*/));
StringSource ss3 (encrypted, true /*pumpAll*/, new PK_DecryptorFilter(prng, decryptor, new StringSink(recovered)));

cout << recovered << endl;


Here is what a private key looks like from the test program above. Notice it has the field encoded into the structure so you don't have to guess at it (P-256 versus P-128 versus P-521).
$ dumpasn1 ecies.priv.der 
  0  65: SEQUENCE {
  2   1:   INTEGER 0
  5  19:   SEQUENCE {
  7   7:     OBJECT IDENTIFIER ecPublicKey (1 2 840 10045 2 1)
 16   8:     OBJECT IDENTIFIER prime256v1 (1 2 840 10045 3 1 7)
       :     }
 26  39:   OCTET STRING, encapsulates {
 28  37:     SEQUENCE {
 30   1:       INTEGER 1
 33  32:       OCTET STRING
       :         00 00 00 00 00 00 00 00 00 00 00 00 02 C2 00 10
       :         2C 18 0F 9E 6A 4E 7A 2F 58 B5 BE 86 BC 17 94 78
       :       }
       :     }
       :   }

And the public key:
$ dumpasn1 ecies.pub.der 
  0  89: SEQUENCE {
  2  19:   SEQUENCE {
  4   7:     OBJECT IDENTIFIER ecPublicKey (1 2 840 10045 2 1)
 13   8:     OBJECT IDENTIFIER prime256v1 (1 2 840 10045 3 1 7)
       :     }
 23  66:   BIT STRING
       :     04 08 9B D2 1C 3A DC 08 8B 1F F1 D0 F4 97 A0 87
       :     FE 4F 78 EA E2 B8 30 B8 E7 06 37 68 27 4C 71 CD
       :     63 C3 E2 90 66 64 2B 1C F6 79 00 36 AF 72 4C 61
       :     69 FA E9 06 00 9A 15 32 0B 85 B5 88 B2 C5 88 46
       :     5E
       :   }


Crypto++ has a wiki page on ECIES. See Elliptic Curve Integrated Encryption Scheme. They also have Bouncy Castle interop workarounds.

You can also PEM encode the keys, but you need a patch to do it because its not part of the library. For the patch, see PEM Pack on the Crypto++ wiki.
","955","<c++><public-key-encryption><crypto++><elliptic-curve>","4","2","3","2015-06-18 09:52:44","30912098","11","1","3632958","","2015-06-17 07:26:08","2015-06-16 06:58:26",""
"30860777","Use previously generated private key in ECIES","I wan to encrypt /decrypt data using ECIES , I am using cryptopp for this.
AutoSeededRandomPool prng;

//get private key generated
ECIES<ECP>::Decryptor d0(prng, ASN1::secp256r1());
PrintPrivateKey(d0.GetKey());

//get public key 
ECIES<ECP>::Encryptor e0(d0);
PrintPublicKey(e0.GetKey());

//encrypt the message
string em0; // encrypted message
StringSource ss1 (message, true, new PK_EncryptorFilter(prng, e0, new StringSink(em0) ) );

//decrypt the message   
string dm0; // decrypted message
StringSource ss2 (em0, true, new PK_DecryptorFilter(prng, d1, new StringSink(dm0) ) );

Everything else is fine but I want to do the above same thing using already generated 'private key' and not randomly generated 'private key' unlike the case above. How can I do this?
I have tried the following code but it just simply crashes
AutoSeededRandomPool prng;

std::string  privatekeyString=""02C200102C180F9E6A4E7A2F58B5BE86BC179478"";

CryptoPP::HexDecoder decoder;
decoder.Put((byte*)privatekeyString.data(), privatekeyString.size());
decoder.MessageEnd();

ECIES<ECP> ::Decryptor d0;
d0.AccessKey().AccessGroupParameters().Initialize(ASN1::secp128r1());

crash point
//load private key  
d0.AccessKey().Load(decoder);
PrintPrivateKey(d0.GetKey());

//get public key    
ECIES<ECP>::Encryptor e0(d0);
PrintPublicKey(e0.GetKey());

string em0; // encrypted message
StringSource ss1(message, true, new PK_EncryptorFilter(prng, e0, new StringSink(em0) ) );
cout<<""encrypted msg: ""<<em0<<""  and its length: ""<<em0.length()<<endl;

string dm0; // decrypted message
StringSource ss2 (em0, true, new PK_DecryptorFilter(prng, d0, new StringSink(dm0) ) );
cout <<""decrypted msg: ""<< dm0<<""  and its length: ""<<dm0.length() <<   endl;

Edit 2
In response to @jww answer I managed to decode the message with the private key as:
  try
  {
    AutoSeededRandomPool prng;

    std::string exponent=""AsIAECwYD55qTnovWLW+hrwXlHg="";
    StringSource ss(exponent, true /*pumpAll*/, new CryptoPP::HexDecoder);


    Integer x;
    x.Decode(ss, ss.MaxRetrievable(), Integer::UNSIGNED);
    // cout << ""Exponent: "" << std::hex << x << endl;

    ECIES<ECP>::Decryptor decryptor;
    decryptor.AccessKey().Initialize(ASN1::secp128r1(), x);

    bool valid = decryptor.AccessKey().Validate(prng, 3);
    if(!valid)
    {
        cout<<""Exponent is not valid for P-128""<<endl;
        return;
    }
      //  throw  Exception(CryptoPP::Exception::OTHER_ERROR, ""Exponent is not valid for P-256"");

    // Or: decryptor.AccessKey().ThrowIfInvalid(prng, 3);

    cout << ""Exponent is valid for P-128"" << endl;

    PrintPrivateKey(decryptor.GetKey());


    //get public key
    ECIES<ECP>::Encryptor encryptor(decryptor);
    PrintPublicKey(encryptor.GetKey());



    string em0; // encrypted message
    StringSource ss1(message, true, new PK_EncryptorFilter(prng, encryptor, new StringSink(em0) ) );
    cout<<""encrypted msg: ""<<em0<<""  and its length: ""<<em0.length()<<endl;

    string dm0; // decrypted message
    StringSource ss2 (em0, true, new PK_DecryptorFilter(prng, decryptor, new StringSink(dm0) ) );
    cout <<""decrypted msg: ""<< dm0<<""  and its length: ""<<dm0.length() << endl;

}
catch(const CryptoPP::Exception& ex)
{
    std::cerr << ex.what() << endl;
}

But when I try to encrypt the message using public key I got error 
CryptoPP::CryptoMaterial::InvalidMaterial: CryptoMaterial: this object contains invalid values
Here is my code:
std::string     public_point=""AsIAEFjzIcX+Kvhe8AmLoGUc8aYAEAwf5ecREGZ2u4RLxQuav/A="";
StringSource ss(public_point, true, new CryptoPP::HexDecoder);

ECIES<ECP>::Encryptor encryptor;
    encryptor.AccessKey().AccessGroupParameters().Initialize(ASN1::secp128r1());

ECP::Point point;
encryptor.GetKey().GetGroupParameters().GetCurve().DecodePoint(point, ss, ss.MaxRetrievable());
cout << ""X: "" << std::hex << point.x << endl;
cout << ""Y: "" << std::hex << point.y << endl;

encryptor.AccessKey().SetPublicElement(point);


encryptor.AccessKey().ThrowIfInvalid(prng, 3);

PrintPublicKey(encryptor.GetKey());



string em0; // encrypted message
StringSource ss1(message, true, new PK_EncryptorFilter(prng, encryptor, new StringSink(em0) ) );
cout<<""encrypted msg: ""<<em0<<""  and its length: ""<<em0.length()<<endl;

","I'm going to add another answer to show you how to serialize private exponents and public points in case you had trouble with the public points. It also shows you how to Save the PrivateKeyInfo and SubjectPublicKeyInfo.
Its produces output similar to below. You will need a patch for the Base64URLEncoder. its not part of the library.
$ ./ecies-test.exe
Private exponent
  Hex: 57E91FA3EF48706D07E56D8CB566204A4416B833EFB9687D75A37D572EC42277
  Base64: V+kfo+9IcG0H5W2MtWYgSkQWuDPvuWh9daN9Vy7EInc=
  Base64 (URL safe): V-kfo-9IcG0H5W2MtWYgSkQWuDPvuWh9daN9Vy7EInc=
Pubic point
  Hex: 037142DE6143B6AD44C74135FE71222AC1406F541E53CB635112DE4928EC94763C
  Base64: A3FC3mFDtq1Ex0E1/nEiKsFAb1QeU8tjURLeSSjslHY8
  Base64 (URL safe): A3FC3mFDtq1Ex0E1_nEiKsFAb1QeU8tjURLeSSjslHY8
Private key (PrivateKeyInfo)
  3059301306072A8648CE3D020106082A8648CE3D030107034200047142DE6143B6AD44C74135FE71
  222AC1406F541E53CB635112DE4928EC94763CFA903D9282691AE47A2D718297465EF44E905A89ED
  2D4553ED1DF906A6E2383B
Public key (SubjectPublicKeyInfo)
  3041020100301306072A8648CE3D020106082A8648CE3D03010704273025020101042057E91FA3EF
  48706D07E56D8CB566204A4416B833EFB9687D75A37D572EC42277


With the private exponent and public point above, the following works just fine:
string pub_point(""A7EDDUXAA4/6kOZ8H+firJ95YtKZvDrPFmyVoisyBfuW"");
StringSource ss(pub_point, true, new Base64Decoder);

ECIES<ECP>::Encryptor encryptor;
encryptor.AccessKey().AccessGroupParameters().Initialize(ASN1::secp256r1());

ECP::Point point;
encryptor.GetKey().GetGroupParameters().GetCurve().DecodePoint(point, ss, ss.MaxRetrievable());

encryptor.AccessKey().SetPublicElement(point);
encryptor.AccessKey().ThrowIfInvalid(prng, 3);


ECIES<ECP>::Decryptor decryptor;
decryptor.AccessKey().Initialize(prng, ASN1::secp256r1());

const Integer& priv_exp = decryptor.GetKey().GetPrivateExponent();
SecByteBlock x(priv_exp.MinEncodedSize());
priv_exp.Encode(x, x.size());

string s1, s2, s3;    
HexEncoder f1(new StringSink(s1));
Base64Encoder f2(new StringSink(s2));
Base64URLEncoder f3(new StringSink(s3));

ChannelSwitch cs1;
cs1.AddDefaultRoute(f1);
cs1.AddDefaultRoute(f2);
cs1.AddDefaultRoute(f3);

ArraySource as1(x, x.size(), true /*pumpAll*/, new Redirector(cs1));

cout << ""Private exponent"" << endl;
cout << ""  Hex: "" << s1 << endl;
cout << ""  Base64: "" << s2 << endl;
cout << ""  Base64 (URL safe): "" << s3 << endl;

//////////////////////////////////////////

ECIES<ECP>::Encryptor encryptor(decryptor);
ECP::Point pub_point = encryptor.GetKey().GetGroupParameters().ExponentiateBase(priv_exp);
SecByteBlock y(encryptor.GetKey().GetGroupParameters().GetCurve().EncodedPointSize(true /*compressed*/));
encryptor.GetKey().GetGroupParameters().GetCurve().EncodePoint(y, pub_point, true /*compressed*/);

string s4, s5, s6;    
HexEncoder f4(new StringSink(s4));
Base64Encoder f5(new StringSink(s5));
Base64URLEncoder f6(new StringSink(s6));

ChannelSwitch cs2;
cs2.AddDefaultRoute(f4);
cs2.AddDefaultRoute(f5);
cs2.AddDefaultRoute(f6);

ArraySource as2(y, y.size(), true /*pumpAll*/, new Redirector(cs2));

cout << ""Pubic point"" << endl;
cout << ""  Hex: "" << s4 << endl;
cout << ""  Base64: "" << s5 << endl;
cout << ""  Base64 (URL safe): "" << s6 << endl;

//////////////////////////////////////////

string s10, s11;
HexEncoder hex1(new StringSink(s10));
HexEncoder hex2(new StringSink(s11));

encryptor.AccessKey().AccessGroupParameters().SetEncodeAsOID(true);
encryptor.GetKey().Save(hex1);
decryptor.AccessKey().AccessGroupParameters().SetEncodeAsOID(true);
decryptor.GetKey().Save(hex2);

cout << ""Private key"" << endl;
cout << s10 << endl;

cout << ""Public key"" << endl;
cout << s11 << endl;

","955","<c++><public-key-encryption><crypto++><elliptic-curve>","4","1","3","2015-06-18 09:52:44","30912098","11","1","3632958","","2015-06-17 07:26:08","2015-06-16 06:58:26",""
"30860777","Use previously generated private key in ECIES","I wan to encrypt /decrypt data using ECIES , I am using cryptopp for this.
AutoSeededRandomPool prng;

//get private key generated
ECIES<ECP>::Decryptor d0(prng, ASN1::secp256r1());
PrintPrivateKey(d0.GetKey());

//get public key 
ECIES<ECP>::Encryptor e0(d0);
PrintPublicKey(e0.GetKey());

//encrypt the message
string em0; // encrypted message
StringSource ss1 (message, true, new PK_EncryptorFilter(prng, e0, new StringSink(em0) ) );

//decrypt the message   
string dm0; // decrypted message
StringSource ss2 (em0, true, new PK_DecryptorFilter(prng, d1, new StringSink(dm0) ) );

Everything else is fine but I want to do the above same thing using already generated 'private key' and not randomly generated 'private key' unlike the case above. How can I do this?
I have tried the following code but it just simply crashes
AutoSeededRandomPool prng;

std::string  privatekeyString=""02C200102C180F9E6A4E7A2F58B5BE86BC179478"";

CryptoPP::HexDecoder decoder;
decoder.Put((byte*)privatekeyString.data(), privatekeyString.size());
decoder.MessageEnd();

ECIES<ECP> ::Decryptor d0;
d0.AccessKey().AccessGroupParameters().Initialize(ASN1::secp128r1());

crash point
//load private key  
d0.AccessKey().Load(decoder);
PrintPrivateKey(d0.GetKey());

//get public key    
ECIES<ECP>::Encryptor e0(d0);
PrintPublicKey(e0.GetKey());

string em0; // encrypted message
StringSource ss1(message, true, new PK_EncryptorFilter(prng, e0, new StringSink(em0) ) );
cout<<""encrypted msg: ""<<em0<<""  and its length: ""<<em0.length()<<endl;

string dm0; // decrypted message
StringSource ss2 (em0, true, new PK_DecryptorFilter(prng, d0, new StringSink(dm0) ) );
cout <<""decrypted msg: ""<< dm0<<""  and its length: ""<<dm0.length() <<   endl;

Edit 2
In response to @jww answer I managed to decode the message with the private key as:
  try
  {
    AutoSeededRandomPool prng;

    std::string exponent=""AsIAECwYD55qTnovWLW+hrwXlHg="";
    StringSource ss(exponent, true /*pumpAll*/, new CryptoPP::HexDecoder);


    Integer x;
    x.Decode(ss, ss.MaxRetrievable(), Integer::UNSIGNED);
    // cout << ""Exponent: "" << std::hex << x << endl;

    ECIES<ECP>::Decryptor decryptor;
    decryptor.AccessKey().Initialize(ASN1::secp128r1(), x);

    bool valid = decryptor.AccessKey().Validate(prng, 3);
    if(!valid)
    {
        cout<<""Exponent is not valid for P-128""<<endl;
        return;
    }
      //  throw  Exception(CryptoPP::Exception::OTHER_ERROR, ""Exponent is not valid for P-256"");

    // Or: decryptor.AccessKey().ThrowIfInvalid(prng, 3);

    cout << ""Exponent is valid for P-128"" << endl;

    PrintPrivateKey(decryptor.GetKey());


    //get public key
    ECIES<ECP>::Encryptor encryptor(decryptor);
    PrintPublicKey(encryptor.GetKey());



    string em0; // encrypted message
    StringSource ss1(message, true, new PK_EncryptorFilter(prng, encryptor, new StringSink(em0) ) );
    cout<<""encrypted msg: ""<<em0<<""  and its length: ""<<em0.length()<<endl;

    string dm0; // decrypted message
    StringSource ss2 (em0, true, new PK_DecryptorFilter(prng, decryptor, new StringSink(dm0) ) );
    cout <<""decrypted msg: ""<< dm0<<""  and its length: ""<<dm0.length() << endl;

}
catch(const CryptoPP::Exception& ex)
{
    std::cerr << ex.what() << endl;
}

But when I try to encrypt the message using public key I got error 
CryptoPP::CryptoMaterial::InvalidMaterial: CryptoMaterial: this object contains invalid values
Here is my code:
std::string     public_point=""AsIAEFjzIcX+Kvhe8AmLoGUc8aYAEAwf5ecREGZ2u4RLxQuav/A="";
StringSource ss(public_point, true, new CryptoPP::HexDecoder);

ECIES<ECP>::Encryptor encryptor;
    encryptor.AccessKey().AccessGroupParameters().Initialize(ASN1::secp128r1());

ECP::Point point;
encryptor.GetKey().GetGroupParameters().GetCurve().DecodePoint(point, ss, ss.MaxRetrievable());
cout << ""X: "" << std::hex << point.x << endl;
cout << ""Y: "" << std::hex << point.y << endl;

encryptor.AccessKey().SetPublicElement(point);


encryptor.AccessKey().ThrowIfInvalid(prng, 3);

PrintPublicKey(encryptor.GetKey());



string em0; // encrypted message
StringSource ss1(message, true, new PK_EncryptorFilter(prng, encryptor, new StringSink(em0) ) );
cout<<""encrypted msg: ""<<em0<<""  and its length: ""<<em0.length()<<endl;

","As jww suggested I have successfully completed encryption and decryption.
Below are the code snippets if anyone wants.
Decryption
string decrypt(std::string encryptedMessage ,  std::string   privateKeyExponent)
{
    string decryptedMessage;
    try
    {
        AutoSeededRandomPool prng;

        //since the 'privateKeyExponent' is in base-64 format use Base64Decoder
        StringSource ss(privateKeyExponent, true /*pumpAll*/, new CryptoPP::Base64Decoder);

        Integer x;
        x.Decode(ss, ss.MaxRetrievable(), Integer::UNSIGNED);

        ECIES<ECP>::Decryptor decryptor;

        //curve used is secp256k1
        //make decryptor's access key using decoded private exponent's value
        decryptor.AccessKey().Initialize(ASN1::secp256k1(), x);

        //check whether decryptor's access key is valid or not
        bool valid = decryptor.AccessKey().Validate(prng, 3);
        if(!valid)
           decryptor.AccessKey().ThrowIfInvalid(prng, 3);

        cout << ""Exponent is valid for P-256k1"" << endl;

        //decrypt the message using private key
        StringSource ss2 (encryptedMessage, true, new PK_DecryptorFilter(prng, decryptor, new StringSink(decryptedMessage) ) );
        cout <<""decrypted msg: ""<< decryptedMessage<<""  and its length: ""<<decryptedMessage.length() << endl;

    }
    catch(const CryptoPP::Exception& ex)
    {
        std::cerr << ex.what() << endl;
    }
    return decryptedMessage;
}

Encryption
string encrypt(std::string message ,  std::string  compressedPublicKeyPoint)
{
    string encryptedMessage;
    try
    {
        AutoSeededRandomPool prng;

        //public key is a point consisting of ""public key point x"" and ""public key point y""
        //compressed public key also known as ""public-point"" formed using point-compression of public key


        //since the key is in base-64 format use Base64Decoder
        StringSource ss(compressedPublicKeyPoint, true, new CryptoPP::Base64Decoder);
     ECIES<ECP>::Encryptor encryptor;

        //curve used is secp256k1
        encryptor.AccessKey().AccessGroupParameters()
       .Initialize(ASN1::secp256k1());

        //get point on the used curve
        ECP::Point point;
        encryptor.GetKey().GetGroupParameters().GetCurve().DecodePoint(point, ss, ss.MaxRetrievable());
        cout << ""X: "" << std::hex << point.x << endl;
        cout << ""Y: "" << std::hex << point.y << endl;

        //set encryptor's public element
        encryptor.AccessKey().SetPublicElement(point);

        //check whether the encryptor's access key thus formed is valid or not
        encryptor.AccessKey().ThrowIfInvalid(prng, 3);

        // encrypted message
        StringSource ss1(message, true, new PK_EncryptorFilter(prng, encryptor, new StringSink(encryptedMessage) ) );
        cout<<""encrypted msg: ""<<encryptedMessage<<""  and its length: ""<<encryptedMessage.length()<<endl;
    }
    catch(const CryptoPP::Exception& ex)
    {
        std::cerr << ex.what() << endl;
    }

    return encryptedMessage;
}

","955","<c++><public-key-encryption><crypto++><elliptic-curve>","4","0","3","2015-06-18 09:52:44","30912098","11","1","3632958","","2015-06-17 07:26:08","2015-06-16 06:58:26",""
"11225439","Where should I put the public key in a standalone application","I wrote an C# WPF application that signs a license xml file using the standard .Net SignedXml class.  I am able to extract the public and private key as xml strings.  I can safely tuck away my private key locally for the signing application, but what about the public key needed in the remote sign check application (library)? Options considered:

KeyContainer: no good, because signing and checking happens in 2 separate environments
Hardcoded: hardcode the public key as xml string in my checking library.  I know the public key is not secret, but how can I prevent hackers from replacing the key with their own? I can sign the library, but then they could tamper with the application using the library....

","I put the public key in a directory outside of the inetpub directory, and if you move the private key off of the computer, then the worst someone could do is to replace the public key and it no longer can decrypt, but you could be informed when it can't decrypt to know something happened.
But, if someone was able to change your file you will have bigger problems that just having this one file changed.
UPDATE:
Oops, I missed that this is a WPF program.  Unfortunately the best you can do is to have the private key separate from the public key, so, you can decrypt, but if the hacker changes the public key the application won't function properly.
That is one of the advantages of using the public/private key, to verify that only you can do the encryption.
The other option is to fetch the public key from a webserver, but then you have the same problem in that it is possible for someone to trick the application to go to the wrong server, so it isn't full-proof, and it will require that the user had an Internet connection, and for you to uniquely identify them.
","953","<c#><.net><rsa><public-key-encryption>","2","1","2","2012-06-28 09:30:48","","2","","","","","2012-06-27 11:45:22",""
"11225439","Where should I put the public key in a standalone application","I wrote an C# WPF application that signs a license xml file using the standard .Net SignedXml class.  I am able to extract the public and private key as xml strings.  I can safely tuck away my private key locally for the signing application, but what about the public key needed in the remote sign check application (library)? Options considered:

KeyContainer: no good, because signing and checking happens in 2 separate environments
Hardcoded: hardcode the public key as xml string in my checking library.  I know the public key is not secret, but how can I prevent hackers from replacing the key with their own? I can sign the library, but then they could tamper with the application using the library....

","Put the public key in a standard digital certificate that you distribute with your app. The integrity of the certificate will then be guaranteed by Windows, and you can tell if it's been changed.
Of course both the hardware and Windows itself is under the control of any potential attacker, so you can't really prevent a compromise of a specific machine. 
Here's an example from a program that I used to distribute. When the program was activated from a licence perspective, it sent a hardware hash to a web service. This returned a self-signed certificate containing the hardware hash, which my program then checked whenever it was started. If the certificate had been changed in any way, the program would stop.
","953","<c#><.net><rsa><public-key-encryption>","2","3","2","2012-06-28 09:30:48","","2","","","","","2012-06-27 11:45:22",""
"12378876","Private/Public key variant for encrypting data online and decrypting with multiple different keys","Assume the following example:
I have an online service where user can register and enter personal data. Now I want to encrypt these data. I have a private key Pr1 and public key Pu1.

User logs in with password at my online service


Convert login password to fit a private key format = Pr2
Get public key Pu2 from Pr2

User enters data to store them online in the database
Encrypt user entered data with Pu1 and add --recipient Pu2 like Encryption with multiple different keys?
Now I can copy the encrypted data from the online database to my local machine and decrypt the data with my local Pr1
Users can decrypt their already entered data online using their normal password which is converted to their Pr2 every time when they log in (step 2a) but is valid the entire session

With that approach no data can be decrypted even if an attacker has access to my server with all files and the database, right? Sure, a brute force attack is possible but it should take some time as for every try a private key needs to be computed.
But no private key is stored online or needs to be exchanged. So this should be pretty save.
Here the question: If this approach is secure and practicable, then there must be already something similar or better out there which has these functionalities and uses some nice security standards. What is it?
","A bunch of seemingly random thoughts re: why this doesn't tend to be how people do this...
First, for multiple user access. Typically systems I have seen that want to let two users access something with their own creds, but only protect the thing one time, is to create a key to protect the content, then protect that key with multiple credentials and store the key in this form many times. That is to say, you store the key next tot he item itself, but the key is stored N times,once for each accessor. If I grant you access, my cred is used to decrypt the key, then it is stored again with your materials.
Along the same multi-user lines, the ""grant access"" flow is problematic. The scheme you suggest above requires that in order for me to grant you access, the system needs to have my credential (to validate I am who I say I am & have the key in hand) plus your key (to give you access) at the same moment in time. This is pretty problematic in the real world.
This scheme does not afford the user a ""forgot my password"" experience. Lost password -> lost key.
This scheme assumes users pick good passwords.
This scheme means that two users with the same password have the same key.
You assert that theft of DB isn't an issue a they would have to compute all of the passwords (which means downstream keys) but in practice this isn't too hard to do, nor too expensive. And I just need to compute Password123 once and then can scan the entire db for it.
Hope this helps.
","947","<database><security><encryption><public-key-encryption>","2","0","1","2012-09-12 15:12:10","12391332","0","","-1","","2017-05-23 12:27:15","2012-09-11 22:31:22",""
"48038106","exporting a public key in pem format from x509certificate2 object","I'm new to this subject, and I got confused of the differences between a public key in PEM format vs CER format.
I'm trying to export a public key from a x509certificate2 object in PEM format in c# code.
As far as I understand, the difference between a certificate in cer format vs pem format, is only the header and footer
(if I understand correctly, a certificate in .cer format in base 64 should be someBase64String and in pem format it's the same string including the begin and end header and footer).
but my question is for the public key.
let pubKey be a public key exported in .cer format from an x509certificate2 object,
is the pem format of this key, will be:
------BEGIN PUBLIC KEY-----
pubKey...
------END PUBLIC KEY------

encoded in base 64?
Thanks :)
","
for the public key. let pubKey be a public key exported in .cer format from an x509certificate2 object

Talking about a "".cer format"" only applies when you have the whole certificate; and that's all that an X509Certificate2 will export as. (Well, or a collection of certificates, or a collection of certificates with associated private keys).
Nothing built in to .NET will give you the DER-encoded SubjectPublicKeyInfo block of the certificate, which is what becomes ""PUBLIC KEY"" under a PEM encoding.
You can build the data yourself, if you want.  For RSA it's not too bad, though not entirely pleasant.  The data format is defined in https://tools.ietf.org/html/rfc3280#section-4.1:
SubjectPublicKeyInfo  ::=  SEQUENCE  {
    algorithm            AlgorithmIdentifier,
    subjectPublicKey     BIT STRING  }

AlgorithmIdentifier  ::=  SEQUENCE  {
    algorithm               OBJECT IDENTIFIER,
    parameters              ANY DEFINED BY algorithm OPTIONAL  }

https://tools.ietf.org/html/rfc3279#section-2.3.1 describes how RSA keys, in particular are to be encoded:

The rsaEncryption OID is intended to be used in the algorithm field
     of a value of type AlgorithmIdentifier.  The parameters field MUST
     have ASN.1 type NULL for this algorithm identifier.
The RSA public key MUST be encoded using the ASN.1 type RSAPublicKey:
RSAPublicKey ::= SEQUENCE {
    modulus            INTEGER,    -- n
    publicExponent     INTEGER  }  -- e


The language behind these structures is ASN.1, defined by ITU X.680, and the way they get encoded to bytes is covered by the Distinguished Encoding Rules (DER) ruleset of ITU X.690.
.NET actually gives you back a lot of these pieces, but you have to assemble them:
private static string BuildPublicKeyPem(X509Certificate2 cert)
{
    byte[] algOid;

    switch (cert.GetKeyAlgorithm())
    {
        case ""1.2.840.113549.1.1.1"":
            algOid = new byte[] { 0x06, 0x09, 0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01, 0x01, 0x01 };
            break;
        default:
            throw new ArgumentOutOfRangeException(nameof(cert), $""Need an OID lookup for {cert.GetKeyAlgorithm()}"");
    }

    byte[] algParams = cert.GetKeyAlgorithmParameters();
    byte[] publicKey = WrapAsBitString(cert.GetPublicKey());

    byte[] algId = BuildSimpleDerSequence(algOid, algParams);
    byte[] spki = BuildSimpleDerSequence(algId, publicKey);

    return PemEncode(spki, ""PUBLIC KEY"");
}

private static string PemEncode(byte[] berData, string pemLabel)
{
    StringBuilder builder = new StringBuilder();
    builder.Append(""-----BEGIN "");
    builder.Append(pemLabel);
    builder.AppendLine(""-----"");
    builder.AppendLine(Convert.ToBase64String(berData, Base64FormattingOptions.InsertLineBreaks));
    builder.Append(""-----END "");
    builder.Append(pemLabel);
    builder.AppendLine(""-----"");

    return builder.ToString();
}

private static byte[] BuildSimpleDerSequence(params byte[][] values)
{
    int totalLength = values.Sum(v => v.Length);
    byte[] len = EncodeDerLength(totalLength);
    int offset = 1;

    byte[] seq = new byte[totalLength + len.Length + 1];
    seq[0] = 0x30;

    Buffer.BlockCopy(len, 0, seq, offset, len.Length);
    offset += len.Length;

    foreach (byte[] value in values)
    {
        Buffer.BlockCopy(value, 0, seq, offset, value.Length);
        offset += value.Length;
    }

    return seq;
}

private static byte[] WrapAsBitString(byte[] value)
{
    byte[] len = EncodeDerLength(value.Length + 1);
    byte[] bitString = new byte[value.Length + len.Length + 2];
    bitString[0] = 0x03;
    Buffer.BlockCopy(len, 0, bitString, 1, len.Length);
    bitString[len.Length + 1] = 0x00;
    Buffer.BlockCopy(value, 0, bitString, len.Length + 2, value.Length);
    return bitString;
}

private static byte[] EncodeDerLength(int length)
{
    if (length <= 0x7F)
    {
        return new byte[] { (byte)length };
    }

    if (length <= 0xFF)
    {
        return new byte[] { 0x81, (byte)length };
    }

    if (length <= 0xFFFF)
    {
        return new byte[]
        {
            0x82,
            (byte)(length >> 8),
            (byte)length,
        };
    }

    if (length <= 0xFFFFFF)
    {
        return new byte[]
        {
            0x83,
            (byte)(length >> 16),
            (byte)(length >> 8),
            (byte)length,
        };
    }

    return new byte[]
    {
        0x84,
        (byte)(length >> 24),
        (byte)(length >> 16),
        (byte)(length >> 8),
        (byte)length,
    };
}

DSA and ECDSA keys have more complex values for AlgorithmIdentifier.parameters, but X509Certificate's GetKeyAlgorithmParameters() happens to give them back correctly formatted, so you would just need to write down their OID (string) lookup key and their OID (byte[]) encoded value in the switch statement.
My SEQUENCE and BIT STRING builders can definitely be more efficient (oh, look at all those poor arrays), but this would suffice for something that isn't perf-critical.
To check your results, you can paste the output to openssl rsa -pubin -text -noout, and if it prints anything other than an error you've made a legally encoded ""PUBLIC KEY"" encoding for an RSA key.
","943","<public-key-encryption><public-key><pem><x509certificate2><cer>","1","2","1","2019-06-21 12:08:03","48039170","0","","548020","","2019-06-21 12:08:03","2017-12-30 21:38:02",""
"11656275","The private key is not present in the X.509 certificate","I am a newbe with soap and have been given an assignment to create a soap client with message encryption and password authentication to interface with a service written in java.
The catch is the encryption is one way (client to server).  The responses are not encrypted and are basically pass/fail. The certificate will not have the private key.
In the code listed below if I include the  definition I get the failure 'The private key is not present in the X.509 certificate.'
If I remove it I get the failure 'The service certificate is not provided for target 'http://localhost:65182/services/ConnectTest'. Specify a service certificate in ClientCredentials.'
How to it tell it that I will not have service credentials and it will not need to decrypt the response?
    private void SendEncrypted_Click(object sender, EventArgs e)
    {
        try
        {
            ConnectTest.ConnectWebServiceClient client = new ConnectTest.ConnectWebServiceClient();


            PasswordDigestBehavior behavior = new PasswordDigestBehavior(""joe"", ""password"");
            client.Endpoint.Behaviors.Add(behavior);

            XmlDocument data = GetXmlData();
            XmlNode payload = data.SelectSingleNode(""xml"");
            string result;

            result = client.postTransactionXML(payload.InnerXml);
            textBox1.Text = result;
        }
        catch (Exception ex)
        {
            textBox1.Text = ex.Message;
            if (ex.InnerException != null)
                textBox1.Text += ""\n"" + ex.InnerException;
        }
    }



    <configuration>
    <system.serviceModel>
    <client>
      <endpoint address=""http://localhost:65182/services/ConnectTest""
          behaviorConfiguration=""ClientCertificateBehavior"" binding=""basicHttpBinding""
          bindingConfiguration=""SOAPServiceSoapBinding"" contract=""ConnectTest.ConnectWebService""
          name=""ConnectWebPort"">
        <identity>
          <dns value=""Unknown"" />
        </identity>
      </endpoint>
    </client>
    <bindings>
        <basicHttpBinding>
            <binding name=""SOAPServiceSoapBinding"" closeTimeout=""00:00:10""
                openTimeout=""00:00:20"" receiveTimeout=""00:00:30"" sendTimeout=""00:00:40""
                bypassProxyOnLocal=""false"" hostNameComparisonMode=""StrongWildcard""
                maxReceivedMessageSize=""1000"" messageEncoding=""Text"" textEncoding=""utf-8""
                useDefaultWebProxy=""false"">
                <security mode=""Message"">
                    <transport clientCredentialType=""Digest"" proxyCredentialType=""None""
                        realm="""" />
                    <message clientCredentialType=""Certificate"" />
                </security>
            </binding>
        </basicHttpBinding>
    </bindings>
    <behaviors>
    <endpointBehaviors>
      <behavior name=""ClientCertificateBehavior"">
        <clientCredentials>
          <clientCertificate findValue=""foo.com"" storeLocation=""CurrentUser"" storeName=""My"" x509FindType=""FindBySubjectName"" />
          <serviceCertificate>
            <defaultCertificate findValue=""foo.com"" storeLocation=""CurrentUser"" storeName=""My"" x509FindType=""FindBySubjectName""/>
            <authentication certificateValidationMode=""None"" />
          </serviceCertificate>
        </clientCredentials>
      </behavior>
    </endpointBehaviors>
    </behaviors>

    </system.serviceModel>
    </configuration>

","","941","<c#><soap><public-key-encryption>","1","","0","2012-07-25 18:30:52","","0","1","","","","2012-07-25 18:30:52",""
"18418727","ssh2 how base 'G' and modulus 'P' are negociated, unknown field","(first at all i'm sorry for my English because it is not my native language)
I try to understand ssh2 with wireshark(you can find the wireshark record here : https://dl.dropboxusercontent.com/s/e9ut8z6v8oldg7g/ssh_wireshark.pcap?token_hash=AAGtkPMwKLt4IIr1Rlrht5_21HpMwQZBfeEFjGoRA85cjQ&dl=1) and rfc 4253 but i have some difficulties:
After SSH_MSG_KEXINIT messages there is SSH_MSG_KEXDH_INIT (30) and SSH_MSG_KEXDH_REPLY (31).
my problem is the understanding of SSH_MSG_KEXDH_INIT and SSH_MSG_KEXDH_REPLY.
According to the rfc4253:
First, the client sends the following:

  byte      SSH_MSG_KEXDH_INIT
  mpint     e

The server then responds with the following:

  byte      SSH_MSG_KEXDH_REPLY
  string    server public host key and certificates (K_S)
  mpint     f
  string    signature of H

but with wireshark i see:
from Client:

-SSH Version 2 (encryption:aes128-ctr mac:hmac-md5 compression:none)
    Packet Length: 76
    Padding Length: 5
    -Key Exchange
            Msg Code: Diffie-Hellman Key Exchange Init (30)
            Payload: 0000004104e2d6ad26e76531efa9ea(...)
            Padding String: 0000000000




from Server:
-SSH Version 2 (encryption:aes128-ctr mac:hmac-md5 compression:none)
    Packet Length: 292
    Padding Length: 8
    -Key Exchange
            Msg Code: Diffie-Hellman Key Exchange Reply (31)
            Multi Precision Integer Length: 104
            DH modulus (P): 0000001365636473612d73686(...)
            Multi Precision Integer Length: 65
            DH base (G): 04ead7f3936361df10c39d7d(...)
            Payload: 000000650000001365636473612d(...)
            Padding String: 0000000000000000

what are 'payload' fields? how base 'G' and modulus 'P' are negociated? an ecdsa public key is prime or composite number?
this is my analyze:
a)wireshark is wrong.
If rfc is right, payloads field are 'e' and 'f'!
But there is a problem : if rfc is right, modulus p and base g have to be known BEFORE SSH_MSG_KEXDH_INIT because we need them to compute 'e'; so the wireshark decoding is wrong because wireshark tell me that P and G are transmit AFTER SSH_MSG_KEXDH_INIT.
and there is something else telling me wireshark is wrong : if i decode the base64 that i can find in the /etc/....pub file, i can see the value of wireshark DH_modulus field.
So DH_modulus field is not really DH_modulus but server public host key : rfc is right, wireshark is wrong!
In this case base and modulus are not transmit by ""Diffie-Hellman Key Exchange Reply"" so how 'g' and 'p' are transmitted??are they ""prefixed"" in all ssh client/server and never transmitted?
b)wireshark is right
if we suppose server public host key is a prime number it can be DH_modulus and rfc AND wireshark are right.
but in this, there is again a problem : payload from client can't be 'e' because payload is transmit before DH_modulus and DH_base...
so what are the payload field? 
when 'e' and 'f' are sent? because just after ""Diffie-Hellman Key Exchange Reply"" i have ""Newkeys messages"" which indicate the end of key exchange
but on other hand i have 4 packets to/from port 22 which are not decoded as ssh but it is maybe ""e"" and ""f""??
first two packet are 48 bytes length and the 2 others are 64bytes length.
are 'e' and 'f' transmitted in these 4 tcp packets ? maybe e and f are 64+48=112 bytes length?
as you can see i'm in confusion. can you help me (maybe not for all question but some indications can help)
thank you.
","In this case it's Wireshark incorrectly interpreting the public key algorithm.  Packet number 13 which came from the server is properly formatted according to RFC5656 (http://tools.ietf.org/html/rfc5656).  It's using the ecdsa-sha2-nistp256 algorithm which is an elliptic curve algorithm with 2 variables: q and r.
Wireshark is improperly parsing this packet using a different RFC (although not strictly 4253).  RFC5656 section 3.1 will give you the information you need to get on the right track.  For your information I'll post variables r and s in this response.
In reality, the information contained is:
Server's public host key (string K_S):
    string  ""ecdsa-sha2-nistp256"" (where ""nistp256"" is the [identifier])
    byte[n]  ecc_key_blob
               string  ""nistp256"" (repeated again as [identifier] portion of blob)
               string   Q (where Q is as follows)
Q (0073-00b3):
         04 bb e6 6e 8e   b6 b4 f8 29 8f e2 b1 ba
a0 2f 24 a2 d6 33 74 d4   17 ce b2 17 73 da 95 1a
ac c4 4b d7 a8 fc 92 6d   c6 c1 38 95 a6 5b 1f da
ec d2 29 df 2c 68 5c dc   de 36 bc 8b 34 16 24 28
0c 57 e1 7e
Server's ephemeral public key octet string (string Q_S):
Q_S (00b8-00f8):
                          04 ea d7 f3 93 63 61 df
10 c3 9d 7d bb ff 4d 38   0d 78 53 ea 00 97 30 b9
f5 cb a0 ea 1f 59 68 5b   c6 c6 de fb a8 16 f6 a9
e2 88 96 d8 e9 48 c4 c3   4a 24 bc 58 7f cd 6e b3
2f 4a 18 ac d7 68 d7 df   0b
Signature on the exchange hash (string):
    string  ""ecdsa-sha2-nistp256"" (again where nistp256 is the [identifier])
    string   ecdsa_signature_blob
               mpint r (011c-013c):
                                      00 84 0a a1
08 cf e8 2b a9 77 80 f2   82 99 59 e4 bb e4 f0 e8
bf 56 f2 ca 70 7a 4d 53   b0 6e b1 fc 0a
           mpint s (0141-0161):

00 bb 2a 08 c1 3e 41   ec 27 db 24 e8 1f 57 06
db 55 9f 5d e9 fa 48 87   b2 2e 97 3c 46 59 7a 14
c9 40
Hopefully this helps clear up the confusion.  You'll still have a bit of research to do with RFC5656 and possibly referring back to RFC4253 to fill in the blanks but that is the breakdown of the packet.
Good luck!
Scott in New York, USA
","937","<ssh><wireshark><public-key-encryption><diffie-hellman>","0","2","1","2013-09-16 20:42:45","","1","","","","","2013-08-24 12:46:02",""
"37655581","How can I generate a key pair and use it to sign and verify text in Node.js?","How can I generate a private and public key, use the private key to sign a hash of arbitrary text, then elsewhere use the public key to verify the signature?
","Using URSA (Node.js wrappers for OpenSSL crypto):
var ursa = require('ursa');

// Generate RSA private key (public key included)
var keyPair = ursa.generatePrivateKey();

// Convert public key to string
var pub = keyPair.toPublicPem('base64');

// Create buffer from text
var data = new Buffer('Hello, world!');

// Create MD5 hash and sign with private key
var sig = keyPair.hashAndSign('md5', data);

// Elsewhere...

// Create public key object from PEM string
pub = ursa.createPublicKey(pub, 'base64');

// Verify signature - should return true
pub.hashAndVerify('md5', data, sig);

","934","<node.js><encryption><rsa><public-key-encryption>","1","1","1","2016-06-06 10:54:52","","0","","","","","2016-06-06 10:54:52",""
"7261742","ActionScript 3 - PHP sending data via AMF (or whatever) encrypted","I need help with two things:

Advice on an encryption algorithm that I can use to encode data on the server, send it to AS3 client and decode it there. From what I read, Public - Private Key sound good.
An AS3 library that can encode and decode that is compatible with PHP's bcrypt (again, I read bcrypt is best for this kind of data transmission).

I'm not a security expert, I hope the question is clear and not clumsy.
EDIT: As suggested SSL is a great option, but at the moment I am looking for non-SSL ones.
Thank you.
","What's your threat model? If you're only worried about people sniffing the data while it's on the wire, then use SSL. It'll be transparent to your app, and generally you only have to install a cert and change your URLs from http:// to https://
If your major threat is someone running a debugger on the app to catch the data, then you've got a massively bigger problem and will be highly unlikely to ever stop someone from ""stealing"" the data.
","930","<php><actionscript-3><public-key-encryption>","0","3","3","2011-10-13 03:15:44","","0","","383148","","2011-09-10 12:52:45","2011-08-31 18:35:25",""
"7261742","ActionScript 3 - PHP sending data via AMF (or whatever) encrypted","I need help with two things:

Advice on an encryption algorithm that I can use to encode data on the server, send it to AS3 client and decode it there. From what I read, Public - Private Key sound good.
An AS3 library that can encode and decode that is compatible with PHP's bcrypt (again, I read bcrypt is best for this kind of data transmission).

I'm not a security expert, I hope the question is clear and not clumsy.
EDIT: As suggested SSL is a great option, but at the moment I am looking for non-SSL ones.
Thank you.
","A bump to @Marc B for pointing out that SSL is perfectly secure, but if you absolutely need custom encryption...
If the server supports mcrypt (most PHP implementations do), then you can use any of the encryption methods provided by mcrypt (including modern AES implementations, IDEA, TEA, etc, etc, etc [it's a long list actually]). However, the php script (of course) must be written to expect encrypted data.
Check out http://php.net/manual/en/book.mcrypt.php for information about PHP's implementation of mcrypt.
EDIT: A quick dump of print_r(mycrypt_list_algorithms()) on a nearly stock fedora box with php-mcrypt installed shows...
Array
(
    [0] => cast-128
    [1] => gost
    [2] => rijndael-128
    [3] => twofish
    [4] => arcfour
    [5] => cast-256
    [6] => loki97
    [7] => rijndael-192
    [8] => saferplus
    [9] => wake
    [10] => blowfish-compat
    [11] => des
    [12] => rijndael-256
    [13] => serpent
    [14] => xtea
    [15] => blowfish
    [16] => enigma
    [17] => rc2
    [18] => tripledes
)

rijndael is AES. Some are better than others for different reasons, while some are just junk (like DES).
","930","<php><actionscript-3><public-key-encryption>","0","1","3","2011-10-13 03:15:44","","0","","383148","","2011-09-10 12:52:45","2011-08-31 18:35:25",""
"7261742","ActionScript 3 - PHP sending data via AMF (or whatever) encrypted","I need help with two things:

Advice on an encryption algorithm that I can use to encode data on the server, send it to AS3 client and decode it there. From what I read, Public - Private Key sound good.
An AS3 library that can encode and decode that is compatible with PHP's bcrypt (again, I read bcrypt is best for this kind of data transmission).

I'm not a security expert, I hope the question is clear and not clumsy.
EDIT: As suggested SSL is a great option, but at the moment I am looking for non-SSL ones.
Thank you.
","If you don't mind about someone using a client-side debugger, just use an ActionScript library such as as3crypto, it should have everything you need to decode whatever data PHP sends.
There's no point bothering with public-private key encryption, because you'll have to embed your private key in the SWF, thus making it public.
","930","<php><actionscript-3><public-key-encryption>","0","0","3","2011-10-13 03:15:44","","0","","383148","","2011-09-10 12:52:45","2011-08-31 18:35:25",""
"48016033","How do I encrypt an email using a Yubikey?","I am fairly new to PGP encryption. I generated a new key pair last week on a Yubikey, while previously I had only used a private key that I generated on my machine. I use thunderbird enigmail for key management. This is probably a stupid question but I don't actually understand how to encrypt an email using the private key stored on my Yubikey. I can decrypt just fine but can't figure out how to compose an encrypted email from the new key. Using my old key pair, it's automatic - how do I actually encrypt using the right private key? At what point do I enter the Yubikey and pin? (I'm not all that technical and I use encryption for one specific project, so I appreciate dumbing down something that is probably very obvious.) 
","Using keys generated on a Yubikey is a practically identical process to using your old keys, with one extra step of set up.
To use keys stored on a Yubikey, you need ""key stubs"" registered on your PGP system. Basically, these are references that tell your PGP software ""This private key is located on smartcard number #123456."" Once you have the stubs to the keys you need, Enigmail should treat the Yubikey-stored keys like any other PGP key.
I'm only familiar with GnuPG, so specifics may vary, but using GPG you need to 

Have a copy of the public key imported to your system from a key server or the like.
Import key stubs from your smart card (in this case, your Yubikey) using:
gpg --card-status


After that, checking your private keyring should reflect that you have stubs pointing to private keys stored on a smart card (denoted by the > after sub). I.E.
gpg --list-secret-keys
----------------------------------------------------
sec#  rsa2048 2018-01-02 [C] [expires: 2020-01-02]
      ABCDEF123456789ABCDEF123456789ABCDEF1234
uid           [ ultimate] My Name (My PGP key) <anAddress@somesite.com>
ssb>  rsa2048 2018-01-02 [S] [expires: 2018-12-31]
ssb>  rsa2048 2018-01-02 [E] [expires: 2018-12-31]
ssb>  rsa2048 2018-01-02 [A] [expires: 2018-12-31]

At this point you can use sub keys of CDEF1234 as if there were on your system. Your PGP software ought to handle checking the card is inserted and dealing with PIN entry.
","930","<encryption><public-key-encryption><pgp><thunderbird><yubico>","3","1","1","2018-01-10 16:50:51","","0","2","","","","2017-12-29 00:28:02",""
"18374413","java card ECC encryption cipher support","I am new to java card development.i want to build java card applet which encrypt data using ECC cryptography.So i am using jcop41 card and it support ECC .so i want to know what are the cipher class support ECC.I want same encryption like in here(https://stackoverflow.com/questions/17669625/java-card-rsa-encryption) using ECC. But in here they used  Cipher.ALG_RSA_PKCS1 .But ECC we can't use this cipher.can you give me any sugession??
","To my knowledge encryption based on ECC is not available in the Java Card API, only Signature (i.e. ECDSA)and KeyAgreement (i.e. ECDH). Just look for constants with names that start with ""ALG_EC_"" in those classes. There might be NXP specific extensions to the API though.
Here's a paper describing how to implement ECIE in Java Card (wich I found by Googling: ""java card"" elliptic curve encryption...).
","927","<public-key-encryption><javacard>","1","3","1","2013-11-26 14:53:44","18376601","0","","-1","","2017-05-23 12:05:35","2013-08-22 07:40:52",""
"13902082","Generate Chrome .crx from PHP","I want to generate a Chrome extension (Chrome theme) from PHP. My PHP script generates a zip file (download.zip). To convert it to a .crx package, it needs to add headers, including a public key and a signature. 
I saw this answer, but you need a .pem file that generates a .pub file. I'm on a shared hosting so exec() won't work (to convert a .pem to a .pub). There is no need to have a .pem file, it only has to use it once downloading (no updating needed).
Then I saw this comment that explains you can generate the private and public keys. Combining the two scripts won't work (see code).
How can I generate a keypair and use it to sign a chrome .crx package with PHP?
This code fails (CRX_SIGNATURE_VERIFICATION_INITALIZATION_FAILED):
// Create the keypair
$res=openssl_pkey_new();

// Get private key
openssl_pkey_export($res, $pk);

// Get public key
$key=openssl_pkey_get_details($res);
$key=$key[""key""];

# make a SHA1 signature using our private key
openssl_sign(file_get_contents('download.zip'), $signature, $pk, 'sha1');

# decode the public key
$key = base64_decode($key);

# .crx package format:
#
#   magic number               char(4)
#   crx format ver             byte(4)
#   pub key lenth              byte(4)
#   signature length           byte(4)
#   public key                 string
#   signature                  string
#   package contents, zipped   string
#
# see http://code.google.com/chrome/extensions/crx.html
#
$fh = fopen('extension.crx', 'wb');
fwrite($fh, 'Cr24');                             // extension file magic number
fwrite($fh, pack('V', 2));                       // crx format version
fwrite($fh, pack('V', strlen($key)));            // public key length
fwrite($fh, pack('V', strlen($signature)));      // signature length
fwrite($fh, $key);                               // public key
fwrite($fh, $signature);                         // signature
fwrite($fh, file_get_contents('download.zip')); // package contents, zipped
fclose($fh);

","You were using openssl_pkey_export wrong and you haven't removed 
-----BEGIN PUBLIC KEY-----
...
-----END PUBLIC KEY-----

from public key string before decoding it. I figured this out by looking at length of public key and signature. First one should be 161 and second one should be 128 bytes long (source):
A2 00 00 00   # 162 -- length of public key in bytes
80 00 00 00   # 128 -- length of signature in bytes

Here is the fixed code (PHP 5.4):
$pk=file_get_contents('pk.pem');

$priv = openssl_pkey_get_private($pk);
$pub = openssl_pkey_get_details($priv)['key'];

# make a SHA1 signature using our private key
openssl_sign(file_get_contents('download.zip'), $signature, $priv, OPENSSL_ALGO_SHA1);

# geting rid of -----BEGIN/END PUBLIC KEY-----
# you can probably do it better using preg_match_all / explode(PHP_EOL, $pub) etc.
$pub = trim(explode('-----',$pub)[2]);

# decode the public key
$pub = base64_decode($pub);

# .crx package format:
#
#   magic number               char(4)
#   crx format ver             byte(4)
#   pub key lenth              byte(4)
#   signature length           byte(4)
#   public key                 string
#   signature                  string
#   package contents, zipped   string
#
# see http://code.google.com/chrome/extensions/crx.html
#
$fh = fopen('extension.crx', 'wb');
fwrite($fh, 'Cr24');                             // extension file magic number
fwrite($fh, pack('V', 2));                       // crx format version
fwrite($fh, pack('V', strlen($pub)));            // public key length
fwrite($fh, pack('V', strlen($signature)));      // signature length
fwrite($fh, $pub);                               // public key
fwrite($fh, $signature);                         // signature
fwrite($fh, file_get_contents('download.zip')); // package contents, zipped
fclose($fh);

","927","<php><google-chrome-extension><openssl><public-key-encryption>","6","2","1","2012-12-17 20:08:38","13914233","0","1","-1","","2017-05-23 11:51:35","2012-12-16 14:08:56",""
"30290921","RSA Decryption Error BadPaddingException","I am encrypting file with symmetric key(AES), and then encrypting key with rsa key.
    Encrption is working fine but in decryption it gives error:
        Here is the stacktrace:
        http://pastebin.com/37AB7EPH
I have tried everything please help me thanks.
@RequestMapping(value= ""/{userId}/uploadresource/{userEmail:.*}"", method = RequestMethod.POST )
@ResponseBody
public void GetResourcesByUser(@PathVariable(""userId"") int UserId, @PathVariable(""userEmail"") String userEmail,  HttpServletRequest request, @RequestParam MultipartFile file ) throws InvalidKeySpecException, NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException, IllegalBlockSizeException, BadPaddingException, IOException{
    Users recieverUser =userService.GetUserByEmail(userEmail);
    Users senderUser= userService.getUserById(UserId);
    int receiverUserId = recieverUser.getUser_id();
    Profile receiverProfile = userService.getUserProfile(receiverUserId);
    byte[] receiverPublicKey=receiverProfile.getPublicKey();
    PublicKey testPubKey=X509CertificateGenerator.encodedByteToPublicKey(receiverPublicKey);            

    KeyGenerator keyGen = KeyGenerator.getInstance(""AES"");
    keyGen.init(192); // for example
    SecretKey secretKey = keyGen.generateKey();

    byte[] secretKeyEncoded= secretKey.getEncoded();

    Cipher cipher = Cipher.getInstance(""AES"");
    cipher.init(Cipher.ENCRYPT_MODE, secretKey);
    byte[] cipherData = cipher.doFinal(file.getBytes());

    Cipher cipher1 = Cipher.getInstance(""RSA/ECB/PKCS1Padding"");
    cipher1.init(Cipher.ENCRYPT_MODE, testPubKey);
    byte[] aesKeyEncryptedBytes = cipher.doFinal(secretKeyEncoded); 


    String senderUserName= senderUser.getUser_email();          
    AsymetricSharing sharing= new AsymetricSharing();

    sharing.setReceiverId(receiverUserId);
    sharing.setResourceFile(cipherData);
    sharing.setResourceName(file.getOriginalFilename());
    sharing.setSenderId(senderUser.getUser_id());
    sharing.setSenderName(senderUserName);
    sharing.setSymetricKey(aesKeyEncryptedBytes);

    resourseService.uploadAsymmetricResource(sharing);      
    //resources=this.resourseService.GetResourcesInGroup(group_id);     
}

Decrypt Asmmetric File...
@RequestMapping(value=""/{userId}/downloadfile/{sharingId}"", method = RequestMethod.GET, produces=""application/json"")
    public ResponseEntity<?> downloadAsymmetricFile(@PathVariable(""sharingId"") int sharingId, @PathVariable(""userId"") int userId, HttpServletResponse response) throws IOException, SQLException, InvalidKeyException, InvalidAlgorithmParameterException, NoSuchAlgorithmException, NoSuchProviderException, NoSuchPaddingException, IllegalBlockSizeException, BadPaddingException, InvalidKeySpecException {     

    AsymetricSharing file= resourseService.getFile(sharingId);

    if(file!=null){ 
        Profile receiverProfile=  userService.getUserProfile(userId);

        byte [] receiverPrivateKey=receiverProfile.getPrivateKey();         

        PrivateKey testPvtKey=Converter.encodedByteToKey(receiverPrivateKey);

        Cipher cipher = Cipher.getInstance(""RSA"");
        cipher.init(Cipher.DECRYPT_MODE, testPvtKey);

        byte[] symetricKeyBytes = cipher.doFinal(file.getSymetricKey());    

        SecretKey symetricKey = new SecretKeySpec(symetricKeyBytes, ""AES"");

        Cipher cipher1 = Cipher.getInstance(""AES"");
        cipher1.init(Cipher.DECRYPT_MODE, symetricKey);
        byte[] plainText = cipher.doFinal(file.getResourceFile());

        response.setContentLength(plainText.length);
        response.setHeader(""Content-Disposition"",""attachment; filename=\"""" + file.getResourceName() +""\"""");
        FileCopyUtils.copy(plainText, response.getOutputStream());
        return new ResponseEntity<>(file, HttpStatus.OK);
    }
    else
    {
        //if no entity present against id, return not found and bad request Http status.
        return new ResponseEntity<>(""Not found"", HttpStatus.BAD_REQUEST);
    }
}

","Cipher cipher = Cipher.getInstance(""RSA"");

It is no padded RSA in decryption (like RSA/ECB/NoPadding). Try to change it to the same value as in encryption (""RSA/ECB/PKCS1Padding""). RSA encrypted values can be also unpadded, sorry for my english if I am unclear :/
","924","<java><spring><encryption><rsa><public-key-encryption>","0","2","1","2015-05-31 04:27:14","","1","3","642653","","2015-05-18 11:18:30","2015-05-17 19:02:49",""
"31264123","What is benefits of encrypted Http Post Body?","I've just seen an bank application which encrypts Http Body Request even if it uses HTTPS. After that I've developed an application which encrypts Http Body Request via RSA. But I don't know what the benefits of it ?
","HTTPS only encrypts the data when in transit on the network. But both end points (the client and the server) would see/operate on the data in clear.
Encrypting the request data prior to sending using HTTPS, would protect the data until actively decrypted, and not just until received on the HTTP server. 
","924","<http><encryption><request><http-post><public-key-encryption>","2","2","1","2015-07-07 20:10:35","31278367","0","1","","","","2015-07-07 09:00:08",""
"36880660","Encryption of a coulmn in a table in teradata","I have a requirement where each row in a column has to be encrypted with a public key.
 The table is a teradata table.
Is there any way to do this?
Thanks in Advance,
Nikhila
","","924","<teradata><public-key-encryption>","0","","0","2016-04-27 04:57:22","","2","","","","","2016-04-27 04:57:22",""
"33902316","Exchange symmetric keys between client and server using public key","I wish to exchange symmetric keys between a client and server program running over Java RMI.
My server makes a public key:
KeyPairGenerator keyGen = null;
try {
    keyGen = KeyPairGenerator.getInstance(""DSA"", ""SUN"");
} catch (NoSuchAlgorithmException e) {
    e.printStackTrace();
} catch (NoSuchProviderException e) {
    e.printStackTrace();
}
KeyPair pair = keyGen.generateKeyPair();
this.priv = pair.getPrivate();
this.pub = pair.getPublic();

I send the public key to the client. The client will make a Cipher using the server's public key. I want to use this Cipher to encrypt a SealedObject encapsulating the symmetric key created by the client and send it to the server. 
//create cipher using server's public key
Cipher cipher = null;
try {
    cipher = Cipher.getInstance(serverKey.getAlgorithm(), ""SUN"");
} catch (NoSuchAlgorithmException e) {
    e.printStackTrace();
} catch (NoSuchPaddingException e) {
    e.printStackTrace();
} catch (NoSuchProviderException e) {
    e.printStackTrace();
}
try {
    cipher.init(Cipher.ENCRYPT_MODE, serverKey);
} catch (InvalidKeyException e) {
    e.printStackTrace();
}

But when I run the program I have an exception when initializing the cipher:
java.security.NoSuchAlgorithmException: No such algorithm: DSA
at javax.crypto.Cipher.getInstance(Cipher.java:646)
at javax.crypto.Cipher.getInstance(Cipher.java:568)
at Client.main(Client.java:91)

I don't understand why I get this NoSuchAlgorithm exception. I don't get this if I make a public key with RSA rather than DSA but RSA gives me:
javax.crypto.IllegalBlockSizeException: 
Data must not be longer than 117 bytes

So what am I supposed to use to securely send the sealed object containing my symmetric key?
","As @zapl comments, DSA is not an encryption algorithm, and RSA can only encrypt data with size less than the key size minus a small mostly-fixed overhead (11 bytes for PKCS1, which is the default and thus you used; somewhat more for OAEP).
Although not in your posted code, I'll bet the problem is you are trying to seal the SecretKey object. Encryption works only on byte (or bit) sequences, represented in Java by byte arrays or sometimes portions of arrays, so SealedObject actually serializes the object you give it to bytes and encrypts those bytes, and conversely decrypts those bytes and deserializes them to re-form the object. Java serialization has some overhead, and the various Key types in particular are organized in a hierarchy that exacerbates this. For example serializing a SecretKey from KeyGenerator.getInstance(""TDES"") is 282 bytes, much too large for RSA-1024 which as your exception says can only be 117 bytes.
Instead seal only the bytes of the key value obtained by SecretKey.getEncoded(). On the receiver (server) put the bytes back in a SecretKeySpec (with the correct algorithm; send that also if not fixed in advance) and you can actually use it as Key for symmetric even without running it through a factory (unlike asymmetric keys which have more structure). Even a simple byte[] has some serialization overhead, but not enough to cause a problem here.
","915","<java><rmi><public-key-encryption><encryption-symmetric>","0","0","1","2015-11-25 05:47:52","33909289","4","3","","","","2015-11-24 19:37:26",""
"40417074","Bouncycastle: encrypt with a public key","I need some help with this lib. Fetching the following examples code BouncyCastle and I do not understand how this works.
 My code: http://pastebin.com/RieDfUd9
  Dictionary: chain[0], is sender cert. 
       conv, is the receiver cert.
My problem is this, I need to encrypt an email using smime with the public key personnel which I am sending the email. At the moment in my test environment I have access to both certificates. But in a production environment I will have only access to my certificate (who is sending) chain [0], and the public key of those who receive. I need encryptar email so that I can open with the public key of who is reading (and which was used to encrypt the message). 
I already tried several ways, but I always have problems when decrypting.
","You cannot do that. You will have to store the cert instead of just the public keys.
When a mail client receive a email, it has to know which private key to use to decrypt it - or it will just fail to decrypt. 
How does the mail client knows which private key to use? Because recipient information is also in the encrypted mail.
You can't just encrypt your data encryption key with any random public key and hope the receiver knows which key can be used to decrypt it.
That's why the BouncyCastle API takes a certificate instead of a key.
You can more read about the details of SMIME encryption here:
https://security.stackexchange.com/questions/45222/smime-email-decryption-key-with-openssl
This link has more about how the decryption process is done for multiple recipients:
SMIME decryption for multiple recipients
","912","<java><encryption><javamail><bouncycastle><public-key-encryption>","0","0","1","2016-11-04 07:57:28","40417571","0","","","","","2016-11-04 07:03:45",""
"21189577","strings comparing for the secret key in encryption and decryption android","I'm encrypting and decrypting text using this code
public class Encryption {
private static String charsetName = ""UTF8"";
private static String algorithm = ""DES"";
private static int base64Mode = Base64.DEFAULT;

public String getCharsetName() {
    return charsetName;
}

public void setCharsetName(String charsetName) {
    this.charsetName = charsetName;
}

public String getAlgorithm() {
    return algorithm;
}

public void setAlgorithm(String algorithm) {
    this.algorithm = algorithm;
}

public int getBase64Mode() {
    return base64Mode;
}

public void setBase64Mode(int base64Mode) {
    this.base64Mode = base64Mode;
}

public static String encrypt(String key, String data) {
    if (key == null || data == null)
        return null;
    try {
        DESKeySpec desKeySpec = new DESKeySpec(key.getBytes(charsetName));
        SecretKeyFactory secretKeyFactory = SecretKeyFactory.getInstance(algorithm);
        SecretKey secretKey = secretKeyFactory.generateSecret(desKeySpec);
        byte[] dataBytes = data.getBytes(charsetName);
        Cipher cipher = Cipher.getInstance(algorithm);
        cipher.init(Cipher.ENCRYPT_MODE, secretKey);
        return Base64.encodeToString(cipher.doFinal(dataBytes), base64Mode);
    } catch (Exception e) {
        return null;
    }
}

public static String decrypt(String key, String data) {
    if (key == null || data == null)
        return null;
    try {
        byte[] dataBytes = Base64.decode(data, base64Mode);
        DESKeySpec desKeySpec = new DESKeySpec(key.getBytes(charsetName));
        SecretKeyFactory secretKeyFactory = SecretKeyFactory.getInstance(algorithm);
        SecretKey secretKey = secretKeyFactory.generateSecret(desKeySpec);
        Cipher cipher = Cipher.getInstance(algorithm);
        cipher.init(Cipher.DECRYPT_MODE, secretKey);
        byte[] dataBytesDecrypted = (cipher.doFinal(dataBytes));
        return new String(dataBytesDecrypted);
    } catch (Exception e) {
        return null;
    }
}

}   

I'm trying to match the key what i placed for the encryption & before decrypting if both keys match decrypt the text otherwise prompt me the wrongkey here is what i'm trying to do
string a=""sfdsfsjbgdfkbgdfkjbgk"";//encrypted text just for assuming 

decrypted=Encryption.decrypt(key, a.trim());

encrypted=Encryption.encrypt(key, decrypted.trim());

if(a.contentEquals(encrypted.trim())){
//show the decrypted text
}

else 
{
//Show the wrong key
}

This is how i'm trying to do but when i put the correct key else statement executes 
and application stops on the if statement
can any one point me out what i'm doing wrong here.
","I can't reproduce your problem. Here is a little SSCCE that fails to demonstrate the problem:
(Note: this would have been easier if the code sample you had supplied was also an  SSCCE)
import java.io.UnsupportedEncodingException;
import java.security.GeneralSecurityException;

import android.util.Base64

import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.DESKeySpec;

public class EncryptDecryptTest {

  public static void main(String[] args) throws Exception {
    String key = ""12345678"";
    String ciphertext = encrypt(key, ""foo"");

    String decrypted = decrypt(key, ciphertext.trim());
    String encrypted = encrypt(key, decrypted.trim());

    if (ciphertext.contentEquals(encrypted.trim())) {
      System.out.println(""decrypted!"");
    } else {
      System.out.println(""wrong key!"");
    }
  }

  public static String encrypt(String key, String data)
      throws GeneralSecurityException, UnsupportedEncodingException {
    DESKeySpec desKeySpec = new DESKeySpec(key.getBytes(""UTF8""));
    SecretKeyFactory secretKeyFactory = SecretKeyFactory.getInstance(""DES"");
    SecretKey secretKey = secretKeyFactory.generateSecret(desKeySpec);
    byte[] dataBytes = data.getBytes(""UTF8"");
    Cipher cipher = Cipher.getInstance(""DES"");
    cipher.init(Cipher.ENCRYPT_MODE, secretKey);
    return Base64.encodeToString(cipher.doFinal(dataBytes), Base64.DEFAULT);
  }

  public static String decrypt(String key, String data)
      throws GeneralSecurityException, UnsupportedEncodingException {
    byte[] dataBytes = Base64.decode(data, Base64.DEFAULT);
    DESKeySpec desKeySpec = new DESKeySpec(key.getBytes(""UTF8""));
    SecretKeyFactory secretKeyFactory = SecretKeyFactory.getInstance(""DES"");
    SecretKey secretKey = secretKeyFactory.generateSecret(desKeySpec);
    Cipher cipher = Cipher.getInstance(""DES"");
    cipher.init(Cipher.DECRYPT_MODE, secretKey);
    byte[] dataBytesDecrypted = (cipher.doFinal(dataBytes));
    return new String(dataBytesDecrypted);
  }    
}

For me, this prints out decrypted! as expected. Note that I performed my testing using standard Java (not Android), but I've tried to repair the code to execute on Android.
Some side comments:

Your constant usage of trim() seems strange. It doesn't seem to achieve anything.
You use contentEquals() when you can just use equals().
You specify DES as the algorithm, which leaves the cipher mode and padding as defaults. You really ought to specify both of those explicitly.
DES is too weak to offer any security, so you might want to consider moving to a stronger algorithm.

","910","<android><encryption><public-key-encryption><string-matching>","1","1","1","2014-01-17 16:04:38","","4","4","","","","2014-01-17 15:27:52",""
"24869722","What's the simplest way to distribute an RSA public key with software?","I'm working on some software that exchanges XML documents with a server. The server signs the XML using XMLDSIG and the client should verify the signature before trusting the XML. I'm using RSACryptoServiceProvider to do this. The XML is signed, but not encrypted.
I'm following the basic procedure explained in:
How to Sign XML Documents with Digital Signatures
How to Verify the Digital Signatures of XML Documents 
This requires that the client software has the public key available. I want the distribution of the client software to be as simple as possible and I don't want the client to have to deal with certificates. The pair of documents referenced above conveniently skirt around the subject of distributing the public key, simply stating that the user ""needs to have the same key"". I don't particularly want the end user to even be aware that they have a public key, so asking them to mess around with certificates is out of the question. Since the public key is public, what I would like to do is somehow embed it within the client software. As I see it, my options are:

Install the public key during the setup process
Somehow embed the public key into the software itself, possibly within the App.config file

Is this feasible in practice? What is the simplest way of achieving this that doesn't require any user interaction or awareness?
","Am not sure what problem you're facing without seeing your code but, could this answer from Ji Zhou help?
public static void Main()
 {
     try
     {        //initialze the byte arrays to the public key information.
         byte[] PublicKey = {214,46,220,83,160,73,40,39,201,155,19,202,3,11,191,178,56,
                            74,90,36,248,103,18,144,170,163,145,87,54,61,34,220,222,
                            207,137,149,173,14,92,120,206,222,158,28,40,24,30,16,175,
                            108,128,35,230,118,40,121,113,125,216,130,11,24,90,48,194,
                            240,105,44,76,34,57,249,228,125,80,38,9,136,29,117,207,139,
                            168,181,85,137,126,10,126,242,120,247,121,8,100,12,201,171,
                            38,226,193,180,190,117,177,87,143,242,213,11,44,180,113,93,
                            106,99,179,68,175,211,164,116,64,148,226,254,172,147};

        //Values to store encrypted symmetric keys.
         byte[] EncryptedSymmetricKey;
         byte[] EncryptedSymmetricIV;

        //Create a new instance of RSACryptoServiceProvider.
         RSACryptoServiceProvider RSA = new RSACryptoServiceProvider();

        //Get an instance of RSAParameters from ExportParameters function.
         RSAParameters RSAKeyInfo = RSA.ExportParameters(false);

        //Set RSAKeyInfo to the public key values. 
         RSAKeyInfo.Modulus = PublicKey;
         //Import key parameters into RSA.
         RSA.ImportParameters(RSAKeyInfo);

        //Create a new instance of the RijndaelManaged class.
         RijndaelManaged RM = new RijndaelManaged();

        //Encrypt the symmetric key and IV.
         EncryptedSymmetricKey = RSA.Encrypt(RM.Key, false);
         EncryptedSymmetricIV = RSA.Encrypt(RM.IV, false);

        Console.WriteLine(""RijndaelManaged Key and IV have been encrypted with RSACryptoServiceProvider."");
     }
     catch (CryptographicException e)
     {
         Console.WriteLine(e.Message);
     }
 }

","908","<c#><rsa><digital-signature><public-key-encryption><public-key>","4","3","2","2014-07-21 16:22:36","24869922","2","1","","","","2014-07-21 16:12:27",""
"24869722","What's the simplest way to distribute an RSA public key with software?","I'm working on some software that exchanges XML documents with a server. The server signs the XML using XMLDSIG and the client should verify the signature before trusting the XML. I'm using RSACryptoServiceProvider to do this. The XML is signed, but not encrypted.
I'm following the basic procedure explained in:
How to Sign XML Documents with Digital Signatures
How to Verify the Digital Signatures of XML Documents 
This requires that the client software has the public key available. I want the distribution of the client software to be as simple as possible and I don't want the client to have to deal with certificates. The pair of documents referenced above conveniently skirt around the subject of distributing the public key, simply stating that the user ""needs to have the same key"". I don't particularly want the end user to even be aware that they have a public key, so asking them to mess around with certificates is out of the question. Since the public key is public, what I would like to do is somehow embed it within the client software. As I see it, my options are:

Install the public key during the setup process
Somehow embed the public key into the software itself, possibly within the App.config file

Is this feasible in practice? What is the simplest way of achieving this that doesn't require any user interaction or awareness?
","You don't have to distribute the certificate. One of common approaches is to include the certificate in the signed document, in the KeyInfo/X509Data node.
The validation can use the embedded certificate easily and the only required infrastructure element at the client side is the certificate thumbprint and subject name. In other words, client validates the document using included certificate and then easily checks the certificate agaist the subject name and thumbprint. In case of a match, there is the assumption that a correct certificate has been provided.
Read more about technical details in one of my blog entries (this is a 3 part tutorial so you can also take a look at all other entries). Anyway, no importing certificates and no including certificates with your software, rather you have two string configuration parameters.
The embedded certificate inside the XmlDsigned document has a const size and usually the overhead is neglectable.
http://www.wiktorzychla.com/2012/12/interoperable-xml-digital-signatures-c.html
http://www.wiktorzychla.com/2012/12/interoperable-xml-digital-signatures-c_20.html
","908","<c#><rsa><digital-signature><public-key-encryption><public-key>","4","4","2","2014-07-21 16:22:36","24869922","2","1","","","","2014-07-21 16:12:27",""
"13977724","Android app licensing new and old - doubts","Just few weeks ago Google changed Android LVL API (License Verification Library). 
In old LVL license checking was based on license verification using public/private keys generated on per account base. New one suppose to use public/private keys per application base.
I have application which uses old LVL and looks like that it works (looks like, but in fact I don't know). Application embeds public key generated on per account base.
Now what should I supposed to do when I will decide to upgrade my app? Embed public key for application or still use public key for account?
I didn't manage to find any clues on Google's Android developer site...
","It helps to think of the old license key system as deprecated - it still works on old apps, and may continue to work for updates. As with anything that is deprecated and can be disable or removed at any time in the future without further notice, you might not want to wait too long to use the new system - but your old keys should work for now. So if you have to push out an update you might be ok with the old system/keys.
As BadCash suggested, the new license key generation does not yet appear to be an instant process. Once generated it can take anywhere from minutes to a few hours to propagate across their licensing system so it can be recognized as a valid licensing signature.
Please note that Google appears to be moving away from this system entirely, however, as per their site: Google Play Licensing Service
So I would suggest resigning with the new system to avoid future annoyance - if it isn't too much hassle, depending on your number of apps - and sit comfortably knowing that in the future you won't have to do it again at all.
","908","<android><public-key-encryption><android-lvl>","19","1","1","2013-05-07 16:40:26","","4","5","102937","","2013-05-07 16:40:26","2012-12-20 17:49:52",""
"51099703","RSA Encryption with Public Key","I am trying to RSA Encrypt a string with a given key. (I can not change the key, since I request it from another system)
I get the key as a string and it looks like this:

-----BEGIN CERTIFICATE-----MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDSehIDcXho52VvAQAFfVD2CzOFAYKSfnRsuKE/nqE1O4l/X6opYgjxj/mSNk1bvNobwiRBL4uWfFnsHoQSiv1Gqzl+JQ2QQ2rUVGuNZ7d7agjYcb1LCpKPE1Q0kqLvbGyDWQx8ULC7/FJ49mMwbzIE4C9ovfdOBa0er6IDNSW0IQIDAQAB-----END
  CERTIFICATE-----

Now I tried to encrypt the string on many ways, but none of them worked.
The last solution I tried was the following:
public static string RSA(string payload, string publicKey)
{
    byte[] toEncryptData = Encoding.ASCII.GetBytes(payload);

    RSACryptoServiceProvider rsaPublic = new RSACryptoServiceProvider();
    rsaPublic.FromXmlString(publicKey);

    byte[] encryptedRSA = rsaPublic.Encrypt(toEncryptData, false);
    string EncryptedResult = Encoding.Default.GetString(encryptedRSA);

    return EncryptedResult;
}

It always throws an Exception when it comes to:
rsaPublic.FromXmlString(publicKey);

So what can I do to encrypt the string with RSA?
I need it because I want to implement an API: https://www.loxone.com/dede/wp-content/uploads/sites/2/2016/08/0903_Communicating-with-the-Miniserver.pdf
On Page 5 under 6. you can see the requirement!!
","public static string ConvertToXmlPublicJavaKey(string publicJavaKey)
{
    RsaKeyParameters publicKeyParam = (RsaKeyParameters)PublicKeyFactory.CreateKey(Convert.FromBase64String(publicJavaKey));
    string xmlpublicKey = string.Format(""<RSAKeyValue><Modulus>{0}</Modulus><Exponent>{1}</Exponent></RSAKeyValue>"",
        Convert.ToBase64String(publicKeyParam.Modulus.ToByteArrayUnsigned()),
        Convert.ToBase64String(publicKeyParam.Exponent.ToByteArrayUnsigned()));
    return xmlpublicKey;
}

The PublicKeyFactory class is from BouncyCastle.Crypto, you can Google it for more information.
Then your rsaPublic.FromXmlString(publicKey) will work fine.
","899","<c#><encryption><rsa><public-key-encryption>","0","0","1","2018-11-26 13:14:36","","9","1","4850561","","2018-06-29 11:42:12","2018-06-29 10:29:24",""
"15725897","Trouble verifying RSA PSS signature in Perl with Crypt::RSA and Crypt::RSA::SS::PSS","I'm unable to verify a PSS-signed signature in Perl using Crypt::RSA and Crypt::RSA::SS::PSS.
Here's the situation:
I have a device that has a 1024-bit RSA key, and signs data using PSS, SHA1 and AES-128.
I extract the device's public key successfully, save it in a file with PEM_write_RSA_PUBKEY()
I am able to verify this in C/C++ using RSA_verify_PKCS1_PSS(), and also using openssl on the command line, like this:
echo -n hello | 
openssl dgst -verify pubkey.pem -signature hello.sig -sha1 \
             -sigopt rsa_padding_mode:pss -sigopt rsa_pss_saltlen:20

Where:

The string ""hello"" is the buffer that's been signed by the device.
""pubkey.pem"" is the device's RSA Public Key, exported from the device
with PEM_write_RSA_PUBKEY(). 
""hello.sig"" contains the binary (raw) signature generated by the device.  (It's 128 bytes, because of the padding.)

I'm trying to do the above in Perl, using Crypt::RSA and Crypt::RSA::SS::PSS, and can't get it to work.
I've tested those two modules and I am able to generate and verify a PSS signature in Perl when generating my own key, like this:
use Crypt::RSA;
use Crypt::RSA::SS::PSS;

my ($message, $rsa, $pss, $signature, $verify);
my ($public, $private);


 # The message to be encrypted
 #
$message = ""hello"";


 # Generate RSA key
 #
$rsa = new Crypt::RSA;
($public, $private) = $rsa->keygen( Size => 1024, Filename => ""key"" );


 # Generate PSS signature
 #
$pss = new Crypt::RSA::SS::PSS;

$signature = $pss->sign ( Message => $message, Key => $private ) || die $pss->errstr;

$verify = $pss->verify ( Message => $message, Key => $public, Signature => $signature ) || die $pss->errstr;

 # $verify returns true, it worked.

So, instead of creating my own RSA key I read in a public key using something like this:
  $publicKey = new Crypt::RSA::Key::Public ( Filename => ""key.public""  );
  ...
 # I pack the 256 character (128 byte) hex string of the signature
 # that's generated by the device.
  $signature = pack (""H*"", '03808458…..73E92'); 

Where ""key.public"" contains the device's public key, converted to a decimal string, inserted into the ""n"" field of the variable that is read/written by Crypt::RSA::Key::Public.
But I can't get it to verify :-(
Methinks I should be able to indicate that it should be using SHA1 and AES-128 (as opposed to, say, Blowfish).
Am I barking up the wrong tree?
Thanks….
","Not sure how to help you with that without being able to make tests with your files and code in order to debug. But, although not the best solution, a good work arround can be to use system calls in Perl. If you are able to verify it on the command prompt, you have some options to check it that way. The first one is system:
my $return_code = system(""some command"");
# or...
my $return_code = system(""command"", ""some"", ""args"");

When you do that, you receive the returned exit code in $return_code. If whatever you're doing to verify it on the command prompt exits with an error code on verification failure, then you know that you'll receive a 0 when everything went well, and another number when it went wrong.
Other way to analyze the answer of a system call, if you want to read the actual answer, id using backticks:
my $answer = `some system call`;
# or...
my $answer = qx[some system call];

By doing that, you'll capture whatever is sent to STDOUT by the system call. If you want to also capture STDERR, then you can redirect it in the same call with 2>&1 or something like that. In this case you don't get the returned exit code.
Depending on the method you used, you can then work with the answer like this:
if ($return_code == 0) {
    print ""Verified!"";
}
# or...
if ($answer =~ /OpenSSL.*?Verification sucess.*?Signature code:(\d+)/) {
    # I'm just making up stuff here, I don't know the answer of your command!
    print ""Verification succesful. Signature code was $1"";
}

I hope this helps. I wish I could test you actual script and files and I could give you a pure-Perl answer, but this at least should help you move forward for the moment.
Francisco
","888","<perl><rsa><digital-signature><public-key-encryption>","1","0","1","2013-03-31 12:43:11","","0","","","","","2013-03-31 03:02:18",""
"39068609","Securely store public/private keys in a database","I want to store public and private keys in a database securely.
My question is therefore how do I store the private key in a database securely. (public key doesn't need to be that secure anyways).
I have two methods currently.

Add a passphrase (i.e. the user's master password) to the private key and store that as a string in the database
Encrypt the private key using a symmetric algorithm and store that as a string in the database

Are these methods sufficient? 
Which is better or are they the same thing? 
Are there any better ways?
Update
Some of you might be confused on why I want to even do this. My use case is a team based password management system. Public keys are used to encrypt a password (one for each user in a team) and private key with passphase is used to decrypt the password.
","The first option is likely better, because it's easier to mess up your own symmetric encryption implementation, than to use an existing one correctly. Passphrases on private keys usually mean just some form of symmetric encryption.
PS. I'm not sure why you're using private / public keys here. If it's for proof who uploaded the key - great. If it's for the encryption itself - why not just use symmetric encryption of the stored password instead? If all people privileged to read it know the password to the private key, then there's no big difference. The only thing you seem to gain is being able to cycle the keys without changing the passphrase everybody knows.
","883","<php><security><rsa><public-key-encryption><private-key>","0","1","1","2016-08-22 01:26:11","","8","","5037551","","2016-08-22 01:26:11","2016-08-21 20:34:16","2016-08-22 04:06:26"
"28837173","rsa public key exponent bytes length","I'm trying to create a script that checks the RSA public key exponent bytes length of CSRs. I need to check if the exponent has 3 or 4 bytes. If I use OpenSSL, I'm not able to see the the true value of the exponent:

As you can see, the exponent is 65537 (0x10001). I cannot see if the real value is 00 01 00 01 (4 bytes) or 01 00 01 (3 bytes). If I check with ASN.1 Editor, I can see that the value is 00 01 00 01.

But I'm not able (at least that I know of) to automate this check in a script.
","","882","<rsa><public-key-encryption><csr><exponent>","0","","0","2015-07-24 14:54:03","","3","","1558022","","2015-07-24 14:54:03","2015-03-03 16:41:25",""
"24340704","Java to Objective-C RSA Implementation","I'm in trouble in implementing RSA encryption and decryption in Objective-C, I made it in Java very simply and now I tried to translate this java code in objc.
Here is my java code:
public static byte[] encryptRSA(byte[] text, PublicKey key) throws Exception {

byte[] cipherText = null;
// get an RSA cipher object and print the provider
Cipher cipher = Cipher.getInstance(""RSA"");

// encrypt the plaintext using the public key
cipher.init(Cipher.ENCRYPT_MODE, key);
cipherText = cipher.doFinal(text);
return cipherText;

}

public static byte[] decryptRSA(byte[] text, PrivateKey key) throws Exception {

byte[] dectyptedText = null;
// decrypt the text using the private key
Cipher cipher = Cipher.getInstance(""RSA"");
cipher.init(Cipher.DECRYPT_MODE, key);
dectyptedText = cipher.doFinal(text);
return dectyptedText;

}

and this is how i generate the key pair
    String seed = ""SOMERANDOMSEED""+Long.toString(System.currentTimeMillis());
    KeyPairGenerator keyGen = KeyPairGenerator.getInstance(""RSA"");
    SecureRandom rand = new SecureRandom(seed.getBytes());

    keyGen.initialize(4096,rand);


    KeyPair keyPair = keyGen.generateKeyPair();
    PrivateKey privateKey = keyPair.getPrivate();
    PublicKey publicKey = keyPair.getPublic();

now in objC I have writed some code that sems to work, but I don't know hot to generate the rsa they from a seed, like i do in java, and how to import the key that i save in java with this method
   //for import
   public static byte[] hexStringToByteArray(String s) {
        byte[] b = new byte[s.length() / 2];
        for (int i = 0; i < b.length; i++) {
            int index = i * 2;
            int v = Integer.parseInt(s.substring(index, index + 2), 16);
            b[i] = (byte) v;
        }
        return b;
    }



//for export 
    public static String byteArrayToHexString(byte[] b) {
    StringBuilder sb = new StringBuilder(b.length * 2);
    for (int i = 0; i < b.length; i++) {
        int v = b[i] & 0xff;
        if (v < 16) {
            sb.append('0');
        }
        sb.append(Integer.toHexString(v));
    }
    return sb.toString().toUpperCase();
}

here is my objc code 
//this works properly
+(NSString *)decryptRSA:(NSString *)cipherString key:(SecKeyRef) privateKey {
    size_t plainBufferSize = SecKeyGetBlockSize(privateKey);
    uint8_t *plainBuffer = malloc(plainBufferSize);
    NSData *incomingData = [cipherString decodeFromHexidecimal];
    uint8_t *cipherBuffer = (uint8_t*)[incomingData bytes];
    size_t cipherBufferSize = SecKeyGetBlockSize(privateKey);
    SecKeyDecrypt(privateKey,
                  kSecPaddingOAEPKey,
                  cipherBuffer,
                  cipherBufferSize,
                  plainBuffer,
                  &plainBufferSize);
    NSData *decryptedData = [NSData dataWithBytes:plainBuffer length:plainBufferSize];
    NSString *decryptedString = [[NSString alloc] initWithData:decryptedData encoding:NSUTF8StringEncoding];
    return decryptedString;
}
//this works properly
+(NSString *)encryptRSA:(NSString *)plainTextString key:(SecKeyRef)publicKey {
    size_t cipherBufferSize = SecKeyGetBlockSize(publicKey);
    uint8_t *cipherBuffer = malloc(cipherBufferSize);
    uint8_t *nonce = (uint8_t *)[plainTextString UTF8String];
    SecKeyEncrypt(publicKey,
                  kSecPaddingOAEPKey,
                  nonce,
                  strlen( (char*)nonce ),
                  &cipherBuffer[0],
                  &cipherBufferSize);
    NSData *encryptedData = [NSData dataWithBytes:cipherBuffer length:cipherBufferSize];

    return [encryptedData hexadecimalString];
}
//here i generate the key pair
#define kPublicKeyTag           ""com.apple.sample.publickey""
#define kPrivateKeyTag          ""com.apple.sample.privatekey""
//i should use these as seed!?!!?
- (void)generateKeyPair:(NSUInteger)keySize {
    OSStatus sanityCheck = noErr;
    publicKeyRef = NULL;
    privateKeyRef = NULL;


    // Container dictionaries.
    NSMutableDictionary * privateKeyAttr = [[NSMutableDictionary alloc] init];
    NSMutableDictionary * publicKeyAttr = [[NSMutableDictionary alloc] init];
    NSMutableDictionary * keyPairAttr = [[NSMutableDictionary alloc] init];

    // Set top level dictionary for the keypair.
    [keyPairAttr setObject:(id)kSecAttrKeyTypeRSA forKey:(id)kSecAttrKeyType];
    [keyPairAttr setObject:[NSNumber numberWithUnsignedInteger:keySize] forKey:(id)kSecAttrKeySizeInBits];

    // Set the private key dictionary.
    [privateKeyAttr setObject:[NSNumber numberWithBool:YES] forKey:(id)kSecAttrIsPermanent];
    [privateKeyAttr setObject:privateTag forKey:(id)kSecAttrApplicationTag];
    // See SecKey.h to set other flag values.

    // Set the public key dictionary.
    [publicKeyAttr setObject:[NSNumber numberWithBool:YES] forKey:(id)kSecAttrIsPermanent];
    [publicKeyAttr setObject:publicTag forKey:(id)kSecAttrApplicationTag];
    // See SecKey.h to set other flag values.

    // Set attributes to top level dictionary.
    [keyPairAttr setObject:privateKeyAttr forKey:(id)@kSecPrivateKeyAttrs];
    [keyPairAttr setObject:publicKeyAttr forKey:(id)@kSecPublicKeyAttrs];

    // SecKeyGeneratePair returns the SecKeyRefs just for educational purposes.
    sanityCheck = SecKeyGeneratePair((__bridge CFDictionaryRef)keyPairAttr, &publicKeyRef, &privateKeyRef);


}

this is the method i use to export keys in objc, it seems work just like the java method
+ (NSString *)fromPrivateKeyToString: (SecKeyRef) privateKey {
    size_t pkeySize = SecKeyGetBlockSize(privateKey);
    NSData* pkeyData = [NSData dataWithBytes:privateKey length:pkeySize];
    NSString* pkeyString = [pkeyData hexadecimalString];

    return pkeyString;

}

","Although it is not impossible to create the same key pair from a seed, you need to make sure that both the RNG and the key pair generation are exactly identical. Furthermore, the seed to be put in the generator needs to be used in the same way. Neither the RNG or the key pair generation is usually created with compatibility in mind. Actually, the default ""SHA1PRNG"" has even changed between versions of Java, and the algorithm is not described.
If you want to use the same private key then it is better to generate it and to transport it to the other runtime. There are multiple ways, but one method is to use a (password) encrypted PKCS#8 or PKCS#12 format. Of course the key or password needs to be kept secret, but that's also the case with your seed value.
For more information, see this Q/A. Don't forget to vote up the question and answer over there, I can use some more points on crypto :).
","882","<java><objective-c><encryption><rsa><public-key-encryption>","1","1","2","2014-06-22 15:22:01","24351400","3","3","3762592","","2014-06-21 10:35:45","2014-06-21 10:29:35",""
"24340704","Java to Objective-C RSA Implementation","I'm in trouble in implementing RSA encryption and decryption in Objective-C, I made it in Java very simply and now I tried to translate this java code in objc.
Here is my java code:
public static byte[] encryptRSA(byte[] text, PublicKey key) throws Exception {

byte[] cipherText = null;
// get an RSA cipher object and print the provider
Cipher cipher = Cipher.getInstance(""RSA"");

// encrypt the plaintext using the public key
cipher.init(Cipher.ENCRYPT_MODE, key);
cipherText = cipher.doFinal(text);
return cipherText;

}

public static byte[] decryptRSA(byte[] text, PrivateKey key) throws Exception {

byte[] dectyptedText = null;
// decrypt the text using the private key
Cipher cipher = Cipher.getInstance(""RSA"");
cipher.init(Cipher.DECRYPT_MODE, key);
dectyptedText = cipher.doFinal(text);
return dectyptedText;

}

and this is how i generate the key pair
    String seed = ""SOMERANDOMSEED""+Long.toString(System.currentTimeMillis());
    KeyPairGenerator keyGen = KeyPairGenerator.getInstance(""RSA"");
    SecureRandom rand = new SecureRandom(seed.getBytes());

    keyGen.initialize(4096,rand);


    KeyPair keyPair = keyGen.generateKeyPair();
    PrivateKey privateKey = keyPair.getPrivate();
    PublicKey publicKey = keyPair.getPublic();

now in objC I have writed some code that sems to work, but I don't know hot to generate the rsa they from a seed, like i do in java, and how to import the key that i save in java with this method
   //for import
   public static byte[] hexStringToByteArray(String s) {
        byte[] b = new byte[s.length() / 2];
        for (int i = 0; i < b.length; i++) {
            int index = i * 2;
            int v = Integer.parseInt(s.substring(index, index + 2), 16);
            b[i] = (byte) v;
        }
        return b;
    }



//for export 
    public static String byteArrayToHexString(byte[] b) {
    StringBuilder sb = new StringBuilder(b.length * 2);
    for (int i = 0; i < b.length; i++) {
        int v = b[i] & 0xff;
        if (v < 16) {
            sb.append('0');
        }
        sb.append(Integer.toHexString(v));
    }
    return sb.toString().toUpperCase();
}

here is my objc code 
//this works properly
+(NSString *)decryptRSA:(NSString *)cipherString key:(SecKeyRef) privateKey {
    size_t plainBufferSize = SecKeyGetBlockSize(privateKey);
    uint8_t *plainBuffer = malloc(plainBufferSize);
    NSData *incomingData = [cipherString decodeFromHexidecimal];
    uint8_t *cipherBuffer = (uint8_t*)[incomingData bytes];
    size_t cipherBufferSize = SecKeyGetBlockSize(privateKey);
    SecKeyDecrypt(privateKey,
                  kSecPaddingOAEPKey,
                  cipherBuffer,
                  cipherBufferSize,
                  plainBuffer,
                  &plainBufferSize);
    NSData *decryptedData = [NSData dataWithBytes:plainBuffer length:plainBufferSize];
    NSString *decryptedString = [[NSString alloc] initWithData:decryptedData encoding:NSUTF8StringEncoding];
    return decryptedString;
}
//this works properly
+(NSString *)encryptRSA:(NSString *)plainTextString key:(SecKeyRef)publicKey {
    size_t cipherBufferSize = SecKeyGetBlockSize(publicKey);
    uint8_t *cipherBuffer = malloc(cipherBufferSize);
    uint8_t *nonce = (uint8_t *)[plainTextString UTF8String];
    SecKeyEncrypt(publicKey,
                  kSecPaddingOAEPKey,
                  nonce,
                  strlen( (char*)nonce ),
                  &cipherBuffer[0],
                  &cipherBufferSize);
    NSData *encryptedData = [NSData dataWithBytes:cipherBuffer length:cipherBufferSize];

    return [encryptedData hexadecimalString];
}
//here i generate the key pair
#define kPublicKeyTag           ""com.apple.sample.publickey""
#define kPrivateKeyTag          ""com.apple.sample.privatekey""
//i should use these as seed!?!!?
- (void)generateKeyPair:(NSUInteger)keySize {
    OSStatus sanityCheck = noErr;
    publicKeyRef = NULL;
    privateKeyRef = NULL;


    // Container dictionaries.
    NSMutableDictionary * privateKeyAttr = [[NSMutableDictionary alloc] init];
    NSMutableDictionary * publicKeyAttr = [[NSMutableDictionary alloc] init];
    NSMutableDictionary * keyPairAttr = [[NSMutableDictionary alloc] init];

    // Set top level dictionary for the keypair.
    [keyPairAttr setObject:(id)kSecAttrKeyTypeRSA forKey:(id)kSecAttrKeyType];
    [keyPairAttr setObject:[NSNumber numberWithUnsignedInteger:keySize] forKey:(id)kSecAttrKeySizeInBits];

    // Set the private key dictionary.
    [privateKeyAttr setObject:[NSNumber numberWithBool:YES] forKey:(id)kSecAttrIsPermanent];
    [privateKeyAttr setObject:privateTag forKey:(id)kSecAttrApplicationTag];
    // See SecKey.h to set other flag values.

    // Set the public key dictionary.
    [publicKeyAttr setObject:[NSNumber numberWithBool:YES] forKey:(id)kSecAttrIsPermanent];
    [publicKeyAttr setObject:publicTag forKey:(id)kSecAttrApplicationTag];
    // See SecKey.h to set other flag values.

    // Set attributes to top level dictionary.
    [keyPairAttr setObject:privateKeyAttr forKey:(id)@kSecPrivateKeyAttrs];
    [keyPairAttr setObject:publicKeyAttr forKey:(id)@kSecPublicKeyAttrs];

    // SecKeyGeneratePair returns the SecKeyRefs just for educational purposes.
    sanityCheck = SecKeyGeneratePair((__bridge CFDictionaryRef)keyPairAttr, &publicKeyRef, &privateKeyRef);


}

this is the method i use to export keys in objc, it seems work just like the java method
+ (NSString *)fromPrivateKeyToString: (SecKeyRef) privateKey {
    size_t pkeySize = SecKeyGetBlockSize(privateKey);
    NSData* pkeyData = [NSData dataWithBytes:privateKey length:pkeySize];
    NSString* pkeyString = [pkeyData hexadecimalString];

    return pkeyString;

}

","As I explained in my other answer, it is very tricky to generate the same key pair using the same value of the PRNG. But that does not seem to be what you are after. It seems that you want to use your own seeded PRNG to generate the key pair.

In general, the default SecureRandom in Java is seeded by the operating system. The idea that you can supply your own random number generator is that you may get ""better"" results using for instance your own entropy pool (e.g. from a a hardware random number generator). Normally the default Java PRNG seeded by the operating system would however provide enough random.
As you are using the SecureRandom class, you supplant the operating system provided seed with your own relatively weakly seeded PRNG. currentTimeMilis certainly does not give you much entropy, and the password seems to be static. This is generally not thought to be enough for generating RSA key pairs.
If you really want to you can add some entropy to the pool instead:
// create runtime default PRNG
SecureRandom rng = new SecureRandom();
// make sure that the rng is seeded by the operating system
rng.nextInt();
// add secret to the pool
rng.setSeed(""SOME_SECRET"".getBytes(StandardCharsets.UTF_8));
// add time information to the pool
rng.setSeed(System.currentTimeMillis());
// use for e.g. RSA key pair generation


There seems to be no method of injecting your own random number generator in Apple's OS X libraries. As indicated, usually the OS provided random number generator is good enough. If you really want to you can write your additional seeds to /dev/random though. 
","882","<java><objective-c><encryption><rsa><public-key-encryption>","1","0","2","2014-06-22 15:22:01","24351400","3","3","3762592","","2014-06-21 10:35:45","2014-06-21 10:29:35",""
"21761966","SSH - Require passphrase entry during public key authentication","I've read up a bit on public key authentication, but I think I'm missing a key aspect.
I have an Ubuntu server I've configured to work as an Subversion server that accepts SVN connections over SSH using a non-standard port. So, to check out, it would something like:
svn co svn+ssh://user@example.com:12345/repos/public

Now, my server currently supports both password based authentication, and public key authentication. Assuming my server at my office is bolted and anchored down, and the firewall and all are working, I don't have to worry about someone copying files off the server.
For my two client laptops, I've generated public-private key pairs, and have added the public keys for the clients to the AuthorizedKeys list on the server via the ssh-copy-id command. I can now SSH into the server from these client laptops without a password.
This concerns me though. If someone breaks into my hotel room and steals my laptop, then they can just pull the hard drive, copy the contents of ~/.ssh to a separate machine, and attempt to log in to my servers effortlessly. If I just used password-based authentication, and just memorize the passwords or store them in an encrypted TrueCrypt archive, it is much safer.
I know that during the creation of my key pairs on the clients, a passphrase had to be entered. Is it possible to require the server to not only validate the public key, but to also require the passphrase to be entered? This seems like a very weak system if all that is required is stealing the laptop of a single employee and copying a file off of it to get total system access.
Thank you.
","You can protect the keystore on the client with an additional passphrase so one needs to unlock the key to use it but this is configured on the client and cannot be enforced by the server. Using an SSH-agent you need to unlock a key only once and use it as long as the client is in use.
","881","<authentication><ubuntu><ssh><public-key-encryption>","1","1","2","2014-02-18 17:57:41","21861732","0","","","","","2014-02-13 17:59:37",""
"21761966","SSH - Require passphrase entry during public key authentication","I've read up a bit on public key authentication, but I think I'm missing a key aspect.
I have an Ubuntu server I've configured to work as an Subversion server that accepts SVN connections over SSH using a non-standard port. So, to check out, it would something like:
svn co svn+ssh://user@example.com:12345/repos/public

Now, my server currently supports both password based authentication, and public key authentication. Assuming my server at my office is bolted and anchored down, and the firewall and all are working, I don't have to worry about someone copying files off the server.
For my two client laptops, I've generated public-private key pairs, and have added the public keys for the clients to the AuthorizedKeys list on the server via the ssh-copy-id command. I can now SSH into the server from these client laptops without a password.
This concerns me though. If someone breaks into my hotel room and steals my laptop, then they can just pull the hard drive, copy the contents of ~/.ssh to a separate machine, and attempt to log in to my servers effortlessly. If I just used password-based authentication, and just memorize the passwords or store them in an encrypted TrueCrypt archive, it is much safer.
I know that during the creation of my key pairs on the clients, a passphrase had to be entered. Is it possible to require the server to not only validate the public key, but to also require the passphrase to be entered? This seems like a very weak system if all that is required is stealing the laptop of a single employee and copying a file off of it to get total system access.
Thank you.
","This is covered on another SO site.
https://serverfault.com/questions/93807/how-do-i-setup-ssh-with-both-private-key-and-password
Here is the example SSHD server script.
#######################################################
###  Calomel.org  SERVER  /etc/ssh/sshd_config
#######################################################
#
Port 22
Protocol 2
AddressFamily inet
#ListenAddress 127.0.0.1

#See the questions section for setting up the gatekeeper
#ForceCommand /tools/ssh_gatekeeper.sh 

AllowUsers calomel@10.10.10.3 calomel@192.168.*
AllowGroups calomel

AllowTcpForwarding yes
#AuthorizedKeysFile .ssh/authorized_keys (need to be be commented for OpenSSH 5.4)
Banner /etc/banner
ChallengeResponseAuthentication no
Ciphers aes256-ctr,aes192-ctr,aes128-ctr
ClientAliveInterval 15
ClientAliveCountMax 3
Compression yes
GatewayPorts no
LogLevel VERBOSE
LoginGraceTime 50s
MACs hmac-sha2-512-96,hmac-sha2-512,hmac-sha2-256-96,hmac-sha2-256,hmac-sha1-96,hmac-sha1
MaxAuthTries 6
MaxStartups 10
PasswordAuthentication yes
PermitEmptyPasswords no
#PermitOpen localhost:80
PermitRootLogin no
PermitUserEnvironment no
PidFile /var/run/sshd.pid
PrintLastLog yes
PrintMotd no
PubkeyAuthentication yes
StrictModes yes
Subsystem sftp /usr/libexec/sftp-server
SyslogFacility AUTH
TCPKeepAlive no
UseDNS no
UseLogin no
UsePrivilegeSeparation yes
X11DisplayOffset 10
X11Forwarding no
X11UseLocalhost yes

#Match User anoncvs
#       X11Forwarding no
#       AllowTcpForwarding no
#       ForceCommand cvs server
#
#######################################################
###  Calomel.org  SERVER  /etc/ssh/sshd_config
#######################################################

","881","<authentication><ubuntu><ssh><public-key-encryption>","1","0","2","2014-02-18 17:57:41","21861732","0","","","","","2014-02-13 17:59:37",""
"4143939","RSA encryption using public key on BlackBerry","I have seen an example of encrypting a string with a Java Midlet, using a public key which is a byte array.
I am not able to do that on a BlackBerry, because there is no X509EncodedKeySpec and Cipher classes to hold the public key.
How is this done on BlackBerry?
","RIM's BlackBerry knowledge center has some useful articles about this:
How to - Use Basic Encryption
How to - Use Advanced Encryption
","879","<blackberry><public-key-encryption>","1","1","1","2010-11-10 16:46:21","","0","","75204","","2010-11-10 16:45:43","2010-11-10 11:24:17",""
"25198915","pre-generated public/private RSA keys, unable to decrypt in C (works in python)","I generated a public/private keypair with openssl:
openssl genrsa -out private.pem 1024
openssl pkcs8 -topk8 -in private.pem -outform DER -out private.der -nocrypt
openssl rsa -in private.pem -pubout -outform DER -out public.der

Now after that I created test code with Python, that was encrypting and deciphering strings. I took the example straight from PyCrypto documentation, encrypting:
string_to_encrypt = str(raw_input(""Enter a string to encrypt: ""))
print ""Encrypting: %s"" % string_to_encrypt

key = RSA.importKey(open('./public.der').read())
cipher = PKCS1_OAEP.new(key)
ciphertext = cipher.encrypt(string_to_encrypt)

and decrypting:
dec_key = RSA.importKey(open('./private.der').read())
d_cipher = PKCS1_OAEP.new(dec_key)
dec_message = d_cipher.decrypt(ciphertext)

Now this works as expected, and next I wanted to try deciphering same using C. I transfer the data via socket to the C application.. but now I'm unable to get the message back to clear text, even though the deciphering is not throwing errors. 
Before I try to decipher the text, I print out the data to the screen, and the bytes match on both ends. The receiving function looks like this:
char* decrypt_packet(char* encrypted_buffer, int size) {
  FILE *keyfile = fopen(""./private.pem"", ""r"");
  RSA *rsa_pri = PEM_read_RSAPrivateKey (keyfile, NULL, NULL, NULL);

  int rsa_private_len = RSA_size(rsa_pri);

  for(i; i < size;i++)
    printf(""%02x:"",(unsigned char)encrypted_buffer[i]);
  printf(""\n"");

  char * decrypt = (char*)malloc(rsa_private_len+1);
  memset(decrypt,0,rsa_private_len+1); //Zero the buffer for printing

  int res = RSA_private_decrypt(rsa_private_len, (unsigned char*)encrypted_buffer, (unsigned char*)decrypt, rsa_pri , RSA_NO_PADDING);
  if(res == -1) {

    ERR_load_crypto_strings();
    printf(""ERROR: %s\n"",ERR_error_string(ERR_get_error(),NULL));
  }
  printf(""size decrypt: %i\n"", res);
  printf(""decrypted: %s\n"", decrypt);
  ....

The deciphering doesn't fail, but the output is garbage (here sending just a test string ""hello world""):
received buffer:
82:9d:a7:f7:3c:d6:71:12:01:31:ba:c6:a2:90:94:90:fd:69:d3:fe:14:11:2f:af:a9:8a:25:99:55:d2:84:1f:dc:e3:5e:a9:be:7b:8a:ac:cd:38:76:a2:91:ec:24:da:06:c7:8d:67:c8:15:19:73:c8:57:ce:a5:87:f0:da:db:c2:6d:5b:55:a3:ba:7e:7d:ca:6b:02:23:fd:fe:cb:b4:04:53:e2:74:c3:91:77:ee:5f:7a:61:7a:87:a6:42:37:28:c6:9c:cb:6a:46:f4:c0:bd:fe:8a:92:da:86:53:3b:5c:e2:e3:79:81:2c:32:28:9c:4c:be:0a:fa:75:7b:b2:
size decrypt:    128
decrypted: dÕf`5åiõuy<òáµÛ~G=/
                          Ä

I have chosen to use RSA_NO_PADDING? I have no idea really if this is correct. 
But if I use something else, the decrypt function complains: RSA_padding_check_PKCS1_type_2:block type is not 02 or RSA_padding_check_PKCS1_OAEP:oaep decoding error
Am I correctly calling the RSA_private_decrypt function ? Could the problem be that I'm reading the private.pem file in C (in Python I was reading the .der file)? 
One more thing came to mind. I used default openssl from Ubuntu to generate the keys, but my C application I'm linking against a downloaded and compiled source. The Makefile contains:
SOURCE_FILES = main.c client_handler.c
CC=gcc
$(CC) $(SOURCE_FILES) -o client_control_srv -lpthread -lssl -lcrypto -I/home/jlumme/openssl-1.0.1f_x86/include

Thanks for any tips!
","Looks like my key generation was messed up. 
I regenerated the keys:
openssl genrsa -out mykey_priv.pem 1024
openssl rsa -in mykey_priv.pem -out mykey_publ.der -outform DER -pubout

and now it works with the same code. As CBHacking pointed out, I also needed to have padding set to RSA_PKCS1_OAEP_PADDING.
","877","<c><encryption><aes><rsa><public-key-encryption>","1","0","1","2014-08-09 06:18:55","25215823","3","","150978","","2014-08-08 09:45:26","2014-08-08 08:17:36",""
"18436934","Generate ECPublicKey in java","I am new to java ecc encryption. So I got ECC public key data array from java card.the size is 49 byte length. So I need to generate Eccpublic key. So I have created public key. but it gives error:

java.security.spec.InvalidKeySpecException: encoded key spec not recognised

This is my code. How to generate Eccpublickey using data array?
byte[] pub = new byte[] {
    /*(Public data) 49 length byte ARRAY
    */


     };

    System.out.println(""Length :"" + pub.length);
    X509EncodedKeySpec ks = new X509EncodedKeySpec(pub);

    KeyFactory kf;
    try {
        kf = KeyFactory.getInstance(""ECDH"");

    } catch (NoSuchAlgorithmException e) {
        e.printStackTrace();
        return;
    }

    ECPublicKey remotePublicKey;

    try {
        remotePublicKey = (ECPublicKey) kf.generatePublic(ks);
    } catch (InvalidKeySpecException e) {
        e.printStackTrace();
        return;
    } catch (ClassCastException e) {
        e.printStackTrace();
        return;
    }
    System.out.println(remotePublicKey);

} catch (Exception e) {
    e.printStackTrace();
}

","The reason is the code not working the keyspec can't use in ECC.so i found how to use ECPublicKeySpec in ECC.In here it has good explanation.https://bitcointalk.org/index.php?topic=2899.0;wap2 Thanks.
","874","<java><keystore><public-key-encryption>","0","0","1","2018-11-23 03:39:47","18460119","1","","1033581","","2018-11-23 03:39:47","2013-08-26 05:01:42",""
"43765718","Elliptic Curve Cryptography on PHP and Android","I need help in understanding Elliptic Curve Cryptography on php and android .. I have read about Spongy castle and Bouncy Castle... what I understood so far is that Each side needs to generate a pair of keys (public and private) and a shared secret key which they will use for the encryption and decryption.. am I right? or is there another key as well... i am a bit confused.. also I am unable to find anything for php ...any help is appreciated...
I also know that ECDSA is only used to generate signatures and that ECDH is used for encryption/decryption of messages which is what I need..
","
what I understood so far is that Each side needs to generate a pair of
  keys (public and private) and a shared secret key which they will use
  for the encryption and decryption.. am I right?

Yes. Each side generates key pairs and sends their public keys to each other. Private keys must be kept securely and not disclosed. 
Secret key is generated from recipient private key and sender public key and vice versa. 
Elliptic Curve Digital Signature Algorithm (ECDSA) is used to sign data with private key and verify it with corresponding public key.
Elliptic curve Diffie–Hellman (ECDH): 

is an anonymous key agreement protocol that allows two parties, each
  having an elliptic curve public–private key pair, to establish a
  shared secret over an insecure channel.

So you need ECDH if you want to encrypt and decrypt data.
","873","<java><php><android><public-key-encryption><elliptic-curve>","1","1","1","2017-05-14 11:32:07","","4","","1781150","","2017-05-03 18:33:17","2017-05-03 16:43:01",""
"14051128","encrypt/decrypt sensitive(mostly passwords) data in our java spring based application","We are developing an application using java spring framework to manage multiple devices automatically. In the initial configuration of our application user selects the devices that needed to be managed and enters their credentials. At this time, we are saving these credentials in plain text into database. Now I needed to write an utility class to encrypt this sensitive data while saving it into DB and decrypt while retrieving them back. Basically, we don't want everyone to see these credentials by simply looking into db tables.
What is the best way to this? Sample code snippet is very helpful...
","I believe that PasswordEncoder can help you.
","873","<java><spring><encryption><public-key-encryption><encryption-symmetric>","-3","0","1","2012-12-27 07:38:34","","2","","","","","2012-12-27 07:36:01",""
"18476537","ECC key encoding in pyecc and seccure","I am working with pyecc which uses the seccure C library.
When a public key is generated I get something back like this:
#Gp}7RRWK5Dyg&-m5yHve1p{?<o0xi.M8-?W^]xb))oA]|qO%[5v?#IxteV?

Are these the 'raw bytes' or is this encoded in some form? When I use os.urandom(16) I get all kinds of messed up characters, but not from this generate public key function. Does that mean that there is some encoding? I've looked at the seccure source code, but I still don't understand why I get all these 'normal' characters.
How do I turn this into a byte array (Python bytearray) of the exact key?
Code:
from pyecc import ECC
ecc = ECC.generate()
print ecc._public

","It looks like it might be a proprietary format from quickly looking at their code.  They serialize and compress the key information into a printable string.  You can download the source code and see an example of how to use it here: http://point-at-infinity.org/seccure/.
","870","<python><encryption><public-key-encryption><elliptic-curve>","1","2","1","2013-08-28 21:44:35","","2","","1020753","","2013-08-28 06:31:19","2013-08-27 22:30:41",""
"22450098","Public key encryption with IOS and decryption with C#","Im trying to encrypt a string in IOS and then decrypt it in C#.
I have been able to encrypt and decrypt the string using only C# but the IOS side seems to be incorrect.
In C# i'm using this to decrypt the string:
private static RSACryptoServiceProvider _rsa;
private const int PROVIDER_RSA_FULL = 1;
private const string CONTAINER_NAME = ""KeyContainer"";
private const string PROVIDER_NAME = ""Microsoft Strong Cryptographic Provider"";

private static void _AssignParameter()
{
    CspParameters cspParams;
    cspParams = new CspParameters(PROVIDER_RSA_FULL, PROVIDER_NAME, CONTAINER_NAME);
    cspParams.Flags = CspProviderFlags.UseMachineKeyStore;
    CryptoKeyAccessRule rule = new CryptoKeyAccessRule(""everyone"", CryptoKeyRights.FullControl, AccessControlType.Allow);
    cspParams.CryptoKeySecurity = new CryptoKeySecurity();
    cspParams.CryptoKeySecurity.SetAccessRule(rule);

    _rsa = new RSACryptoServiceProvider(cspParams);
    _rsa.PersistKeyInCsp = false;
}

private static void decrypt(byte[] data, byte[] PrivateKey)
{
    _AssignParameter();
    _rsa.ImportCspBlob(PrivateKey);
    _rsa.Decrypt(data, false);
}

The above C# code is just a snippet and not full code.
It seems simple enough, This is what i use for IOS,
        //get nsdata from mod and exp
        NSString *mod = publicKeyObjects[0];
        NSData *pubKeyModData= [mod dataUsingEncoding:NSUTF8StringEncoding]; //172 bytes
        NSString *exp = publicKeyObjects[1];
        NSData *pubKeyExpData= [exp dataUsingEncoding:NSUTF8StringEncoding];

        //create nsdata key with mod and exp
        NSMutableArray *publicKeyArray = [[NSMutableArray alloc] init];
        [publicKeyArray addObject:pubKeyModData];
        [publicKeyArray addObject:pubKeyExpData];
        NSData *publicKeyData = [publicKeyArray berData];

        //add the key to the keychain and create a ref
        NSData* peerTag = [@""KeyContainer"" dataUsingEncoding:NSUTF8StringEncoding];
        NSMutableDictionary *publicKey = [[NSMutableDictionary alloc] init];
        [publicKey setObject:(__bridge id) kSecClassKey forKey:(__bridge id)kSecClass];
        [publicKey setObject:(__bridge id) kSecAttrKeyTypeRSA forKey:(__bridge id)kSecAttrKeyType];
        [publicKey setObject:peerTag forKey:(__bridge id)kSecAttrApplicationTag];
        SecItemDelete((__bridge CFDictionaryRef)publicKey);

        CFTypeRef persistKey = nil;

        // Add persistent version of the key to system keychain
        [publicKey setObject:publicKeyData forKey:(__bridge id)kSecValueData];
        [publicKey setObject:(__bridge id) kSecAttrKeyClassPublic forKey:(__bridge id)kSecAttrKeyClass];
        [publicKey setObject:[NSNumber numberWithBool:YES] forKey:(__bridge id)kSecReturnPersistentRef];
        OSStatus secStatus = SecItemAdd((__bridge CFDictionaryRef)publicKey, &persistKey);
        if (persistKey != nil)
            CFRelease(persistKey);

        // Now fetch the SecKeyRef version of the key
        SecKeyRef keyRef = nil;

        [publicKey removeObjectForKey:(__bridge id)kSecValueData];
        [publicKey removeObjectForKey:(__bridge id)kSecReturnPersistentRef];
        [publicKey setObject:[NSNumber numberWithBool:YES] forKey:(__bridge id)kSecReturnRef];
        [publicKey setObject:(__bridge id) kSecAttrKeyTypeRSA forKey:(__bridge id)kSecAttrKeyType];
        secStatus = SecItemCopyMatching((__bridge CFDictionaryRef)publicKey,(CFTypeRef *)&keyRef);


        NSData* stringData = [@""string to encrypt"" dataUsingEncoding:NSUTF8StringEncoding];
        NSData* encryptedString = [self encrypt:passwordData usingKey:keyRef];


-(NSData *)encrypt:(NSData *)Bytes usingKey:(SecKeyRef)key
{
    size_t cipherBufferSize = SecKeyGetBlockSize(key); //returns 172
    uint8_t *cipherBuffer = NULL;
    cipherBuffer = malloc(cipherBufferSize * sizeof(uint8_t));
    memset((void *)cipherBuffer, 0x0, cipherBufferSize);
    OSStatus status = SecKeyEncrypt(key, kSecPaddingNone,
                                    (const uint8_t *)[Bytes bytes],
                                    [Bytes length], cipherBuffer,
                                    &cipherBufferSize);
    if (status == noErr)
    {
        NSData *encryptedBytes = [[NSData alloc]
                                   initWithBytes:(const void *)cipherBuffer
                                   length:cipherBufferSize];
        if (cipherBuffer)
        {
            free(cipherBuffer);
        }
        NSLog(@""Encrypted text (%d bytes): %@"", [encryptedBytes length], [encryptedBytes description]);
        return encryptedBytes;
    }
    else
    {
        NSLog(@""encrypt:usingKey: Error: %d"", (int)status);
        return nil;
    }
}

So once i try to decrypt the data on the C# code i get:
The data to be decrypted exceeds the maximum for this modulus of 128 bytes.
I have googled that error and see its got something to do with keysize, but the keysize after the i import the modulus with IOS is 172 bytes.
But im just exporting the public key with _rsa.ToXmlString(false);
EDIT
I think i fixed my own error,
    //get nsdata from mod and exp
    NSString *mod = publicKeyObjects[0];
    NSData *pubKeyModData= [mod dataUsingEncoding:NSUTF8StringEncoding];
    NSString *exp = publicKeyObjects[1];
    NSData *pubKeyExpData= [exp dataUsingEncoding:NSUTF8StringEncoding];

This is converting a base64 string directly with utf8 and it should be using:
NSData *pubKeyModData = [[NSData alloc] initWithBase64EncodedString:mod options:0];
NSData *pubKeyExpData = [[NSData alloc] initWithBase64EncodedString:exp options:0];

Now i get another error Bad Data
Could someone point me in the right direction here? I also apologise for all the code. I just dont know where the problem is.
","Answered my own question,
//get nsdata from mod and exp
NSString *mod = publicKeyObjects[0];
NSData *pubKeyModData= [mod dataUsingEncoding:NSUTF8StringEncoding];
NSString *exp = publicKeyObjects[1];
NSData *pubKeyExpData= [exp dataUsingEncoding:NSUTF8StringEncoding];

became this:
//get nsdata from mod and exp
NSString *mod = publicKeyObjects[0];
NSData *pubKeyModData = [[NSData alloc] initWithBase64EncodedString:mod options:0];
NSString *exp = publicKeyObjects[1];
NSData *pubKeyExpData = [[NSData alloc] initWithBase64EncodedString:exp options:0];

Then this
OSStatus status = SecKeyEncrypt(key, kSecPaddingNone,
                                (const uint8_t *)[Bytes bytes],
                                [Bytes length], cipherBuffer,
                                &cipherBufferSize);

became:
OSStatus status = SecKeyEncrypt(key, kSecPaddingPKCS1,
                                (const uint8_t *)[Bytes bytes],
                                [Bytes length], cipherBuffer,
                                &cipherBufferSize);

Simple configurations fix.
","865","<c#><ios><public-key-encryption>","2","1","1","2014-03-17 13:03:48","22455033","0","2","2027232","","2014-03-17 10:15:16","2014-03-17 08:55:48",""
"5447650","Creating a secure, web-based password management system with the ability to share data between users","I apologize in advance for the incoming Wall-O-Text. This is (at least, to me) a fairly complex issue that I've put quite a bit of thought into. You can read my question and also see a test implementation in Ruby (very hastily built, not database-backed, and probably very ugly) at this GitHub Gist if you are so inclined.

Introduction
Imagine one was required to create a web-based password management system
(over SSL! :) with the following requirements:

Individual users sign in to the system using their own unique pass
 phrase.
This pass phrase should be enough to allow the user to use the system
 effectively (e.g. from a smartphone, etc.)--the point being that they
 should not have to keep a key file with them.
Users can store arbitrary-length bits of data in the system (""entries"").
Entries are encrypted in the database in such a way that there is not
 enough information in the database or application alone to read the
 encrypted entries.
Users should be able to ""share"" entries with other users of the system
 so that the other user(s) can read the contents of the entry.

I'm no expert in cryptography. After thinking about it for a while, I came up
with the following.  My question is: is this implementation secure? Am I
missing something? If so, is the above spec even implementable? Or is this
overkill?
Database
The database is set up as such:
+------------------------------------------------------------------------------+
|  users                                                                       |
+---------+--------------+--------------+---------------+----------------------+
| salt    | pub_key      | enc_priv_key | priv_key_hmac |                      |
+---------+--------------+--------------+---------------+----------------------+
|  entries                                                                     |
+---------+--------------+--------------+---------------+----------+-----------+
| user_id | parent_entry | enc_sym_key  | sym_key_sig   | enc_data | data_hmac |
+---------+--------------+--------------+---------------+----------+-----------+

Basic Use Cases
Let's imagine two users of the system, Alice and Bob.
Bob signs up for the site:

Bob enters a password. This password is sent to the server (but not
stored).
The server generates a random salt and stores it in the salt field.
The server generates the SHA-256 hash of Bob's password and salt.
The server generates an RSA key pair. The public key is stored as plain
text in the pub_key field. The private key is encrypted via AES-256
using the hash generated from Bob's password and salt as the key and
stored in the enc_priv_key field.
The server generates a hash-based message authentication code for Bob's
private key using Bob's password and salt as the key and stores this in
the priv_key_hmac field.

Bob stores an entry in the system:

Bob enters some data to be stored as an entry along with his password.
This data is sent to the server.
The server generates a key to be used as a key for AES-256 encryption.
The server uses this key to encrypt the data and stores the result in
the enc_data field.
The server generates a hash-based message authentication code for the
data using the generated key and stores this in the data_hmac field.
The symmetric key used to encrypt the data is encrypted with Bob's public
key and stored in the enc_sym_key field.
The server uses Bob's private key to generate a signature for the
symmetric key.

Bob retrieves his stored entry:

Bob enters his password and the ID of the entry to retrieve.
The server generates the SHA-256 hash of Bob's password and salt.
Bob's encrypted private key is decrypted via AES-256 encryption using the
hash.
The server verifies that Bob's encrypted private key has not been
tampered with by checking the HMAC in priv_key_hmac.
The server decrypts the symmetric key stored in the enc_sym_key field
using Bob's private key.
The server verifies that the encrypted symmetric key has not been tampered
with by verifying the signature in sym_key_sign using Bob's public key.
The server decrypts the data using the symmetric key.
The server verifies that the encrypted data has not been tampered with
by verifying the HMAC stored in the data_hmac field.
The server returns the decrypted data to Bob.

Bob shares an entry with Alice:

Bob wants Alice to have access to an entry he owns. He enters his
password and the ID of the entry to share.
The data for the entry is decrypted using the method in ""Bob retrieves
his stored entry.""
A new entry is created for Alice in the same fashion as in ""Bob stores
an entry in the system,"" with the following exceptions:

The entry's parent_entry is set to Bob's entry.
The signature for the symmetric key is calculated using Bob's private
 key (since Alice's private key is not available to Bob).
When Alice accesses this new entry, the existence of a non-null
 parent_entry causes the system to use Bob's public key to verify
 the signature (since his private key was used to create it).


Bob changes the data in his shared entry:

Bob decides to change the data in the entry he shared with Alice. Bob
indicates the entry ID to modify and the new data it should contain.
The system overwrites the data created in ""Bob stores an entry in the
system.""
The system finds every entry with a parent_entry equal to the entry
that was just modified, and for each one overwrites the data created in
""Bob shares an entry with Alice.""

Analysis
Advantages:

It is impossible to decrypt any data from the database without the
password of the user that owns the data, as the private key necessary to
decrypt the data is encrypted with the user's password, and that password
(and it's hash) is not stored in the database.
If a user wants to change their password, only their encrypted private
key needs to be regenerated (decrypt the private key with the old
password/hash, then re-encrypt it with the new password/hash).
Shared entries are stored as actual separate records in the database,
so there is no need to share a key between multiple users/groups of users.

Disadvantages/Problems (that I can think of):

If a shared entry is modified, the system must re-encrypt every child
entry; with a large number of users sharing data, this could potentially
be computationally expensive.
Shared entries depend on the parent user's public key for signature
verification. If the user is deleted, or their key changes, the signatures
are invalid.

Repeated from the introduction: my question is: is this implementation
secure? Am I missing something? If so, is the above spec even implementable?
Or is this overkill?
Thanks for sticking it out this long. I'm interested in your opinions! Am I on the right track, or a complete moron? YOU DECIDE! :)
","No IV storage? I guess you could use AES-256-ECB, but that only lets users store 32 byte passwords, and you need to make sure that the generated private key is only ever used for one encryption. (Your current design seems safe in this respect, but if you want to allow passwords longer than 32 bytes, or ever think of making this key do double-duty, you'll need to store an IV for every encryption with it.)
I don't see the security value of priv_key_hmac and data_hmac; if either the private key or the encrypted data has been tampered with, then garbage output will result from decrypting with the private key or the symmetric key. Bob will surely be suspicious when he can't figure out how to type the BEL character. :) (Will humans ever see the output? A human will likely realize the returned password is incorrect without needing to be told. A computer couldn't tell the difference, so if automated systems will ever use the resulting passwords, then sure, keep the fields.)
There is no mechanism for ""I forgot my password"". Make sure your users know that there is no recovering their data if they forget their password. Users are coddled these days, and might expect to be coddled with your service too.
I see no mechanism for users to specify which entry Bob wants decrypted. You should store a name, or, as ssh(1) does in known_hosts, a hashed version of a name, for each entry. Storing a name directly would remove an SHA-256 operation, but a database compromise that reports the cleartext names of services that a user has accounts with might be every bit as damaging. (Perhaps an online escort service, or off-shore bank, or fight club.)
","863","<ruby><security><encryption><openssl><public-key-encryption>","6","1","3","2012-04-06 14:11:39","5448066","3","2","62082","","2011-03-28 15:52:25","2011-03-27 06:36:09",""
"5447650","Creating a secure, web-based password management system with the ability to share data between users","I apologize in advance for the incoming Wall-O-Text. This is (at least, to me) a fairly complex issue that I've put quite a bit of thought into. You can read my question and also see a test implementation in Ruby (very hastily built, not database-backed, and probably very ugly) at this GitHub Gist if you are so inclined.

Introduction
Imagine one was required to create a web-based password management system
(over SSL! :) with the following requirements:

Individual users sign in to the system using their own unique pass
 phrase.
This pass phrase should be enough to allow the user to use the system
 effectively (e.g. from a smartphone, etc.)--the point being that they
 should not have to keep a key file with them.
Users can store arbitrary-length bits of data in the system (""entries"").
Entries are encrypted in the database in such a way that there is not
 enough information in the database or application alone to read the
 encrypted entries.
Users should be able to ""share"" entries with other users of the system
 so that the other user(s) can read the contents of the entry.

I'm no expert in cryptography. After thinking about it for a while, I came up
with the following.  My question is: is this implementation secure? Am I
missing something? If so, is the above spec even implementable? Or is this
overkill?
Database
The database is set up as such:
+------------------------------------------------------------------------------+
|  users                                                                       |
+---------+--------------+--------------+---------------+----------------------+
| salt    | pub_key      | enc_priv_key | priv_key_hmac |                      |
+---------+--------------+--------------+---------------+----------------------+
|  entries                                                                     |
+---------+--------------+--------------+---------------+----------+-----------+
| user_id | parent_entry | enc_sym_key  | sym_key_sig   | enc_data | data_hmac |
+---------+--------------+--------------+---------------+----------+-----------+

Basic Use Cases
Let's imagine two users of the system, Alice and Bob.
Bob signs up for the site:

Bob enters a password. This password is sent to the server (but not
stored).
The server generates a random salt and stores it in the salt field.
The server generates the SHA-256 hash of Bob's password and salt.
The server generates an RSA key pair. The public key is stored as plain
text in the pub_key field. The private key is encrypted via AES-256
using the hash generated from Bob's password and salt as the key and
stored in the enc_priv_key field.
The server generates a hash-based message authentication code for Bob's
private key using Bob's password and salt as the key and stores this in
the priv_key_hmac field.

Bob stores an entry in the system:

Bob enters some data to be stored as an entry along with his password.
This data is sent to the server.
The server generates a key to be used as a key for AES-256 encryption.
The server uses this key to encrypt the data and stores the result in
the enc_data field.
The server generates a hash-based message authentication code for the
data using the generated key and stores this in the data_hmac field.
The symmetric key used to encrypt the data is encrypted with Bob's public
key and stored in the enc_sym_key field.
The server uses Bob's private key to generate a signature for the
symmetric key.

Bob retrieves his stored entry:

Bob enters his password and the ID of the entry to retrieve.
The server generates the SHA-256 hash of Bob's password and salt.
Bob's encrypted private key is decrypted via AES-256 encryption using the
hash.
The server verifies that Bob's encrypted private key has not been
tampered with by checking the HMAC in priv_key_hmac.
The server decrypts the symmetric key stored in the enc_sym_key field
using Bob's private key.
The server verifies that the encrypted symmetric key has not been tampered
with by verifying the signature in sym_key_sign using Bob's public key.
The server decrypts the data using the symmetric key.
The server verifies that the encrypted data has not been tampered with
by verifying the HMAC stored in the data_hmac field.
The server returns the decrypted data to Bob.

Bob shares an entry with Alice:

Bob wants Alice to have access to an entry he owns. He enters his
password and the ID of the entry to share.
The data for the entry is decrypted using the method in ""Bob retrieves
his stored entry.""
A new entry is created for Alice in the same fashion as in ""Bob stores
an entry in the system,"" with the following exceptions:

The entry's parent_entry is set to Bob's entry.
The signature for the symmetric key is calculated using Bob's private
 key (since Alice's private key is not available to Bob).
When Alice accesses this new entry, the existence of a non-null
 parent_entry causes the system to use Bob's public key to verify
 the signature (since his private key was used to create it).


Bob changes the data in his shared entry:

Bob decides to change the data in the entry he shared with Alice. Bob
indicates the entry ID to modify and the new data it should contain.
The system overwrites the data created in ""Bob stores an entry in the
system.""
The system finds every entry with a parent_entry equal to the entry
that was just modified, and for each one overwrites the data created in
""Bob shares an entry with Alice.""

Analysis
Advantages:

It is impossible to decrypt any data from the database without the
password of the user that owns the data, as the private key necessary to
decrypt the data is encrypted with the user's password, and that password
(and it's hash) is not stored in the database.
If a user wants to change their password, only their encrypted private
key needs to be regenerated (decrypt the private key with the old
password/hash, then re-encrypt it with the new password/hash).
Shared entries are stored as actual separate records in the database,
so there is no need to share a key between multiple users/groups of users.

Disadvantages/Problems (that I can think of):

If a shared entry is modified, the system must re-encrypt every child
entry; with a large number of users sharing data, this could potentially
be computationally expensive.
Shared entries depend on the parent user's public key for signature
verification. If the user is deleted, or their key changes, the signatures
are invalid.

Repeated from the introduction: my question is: is this implementation
secure? Am I missing something? If so, is the above spec even implementable?
Or is this overkill?
Thanks for sticking it out this long. I'm interested in your opinions! Am I on the right track, or a complete moron? YOU DECIDE! :)
","You don't actually need to duplicate anything other than enc_sym_key when you share an entry with Alice - since the symmetric key is never re-used for more than one entry, you only need one copy of the encrypted data.
","863","<ruby><security><encryption><openssl><public-key-encryption>","6","1","3","2012-04-06 14:11:39","5448066","3","2","62082","","2011-03-28 15:52:25","2011-03-27 06:36:09",""
"5447650","Creating a secure, web-based password management system with the ability to share data between users","I apologize in advance for the incoming Wall-O-Text. This is (at least, to me) a fairly complex issue that I've put quite a bit of thought into. You can read my question and also see a test implementation in Ruby (very hastily built, not database-backed, and probably very ugly) at this GitHub Gist if you are so inclined.

Introduction
Imagine one was required to create a web-based password management system
(over SSL! :) with the following requirements:

Individual users sign in to the system using their own unique pass
 phrase.
This pass phrase should be enough to allow the user to use the system
 effectively (e.g. from a smartphone, etc.)--the point being that they
 should not have to keep a key file with them.
Users can store arbitrary-length bits of data in the system (""entries"").
Entries are encrypted in the database in such a way that there is not
 enough information in the database or application alone to read the
 encrypted entries.
Users should be able to ""share"" entries with other users of the system
 so that the other user(s) can read the contents of the entry.

I'm no expert in cryptography. After thinking about it for a while, I came up
with the following.  My question is: is this implementation secure? Am I
missing something? If so, is the above spec even implementable? Or is this
overkill?
Database
The database is set up as such:
+------------------------------------------------------------------------------+
|  users                                                                       |
+---------+--------------+--------------+---------------+----------------------+
| salt    | pub_key      | enc_priv_key | priv_key_hmac |                      |
+---------+--------------+--------------+---------------+----------------------+
|  entries                                                                     |
+---------+--------------+--------------+---------------+----------+-----------+
| user_id | parent_entry | enc_sym_key  | sym_key_sig   | enc_data | data_hmac |
+---------+--------------+--------------+---------------+----------+-----------+

Basic Use Cases
Let's imagine two users of the system, Alice and Bob.
Bob signs up for the site:

Bob enters a password. This password is sent to the server (but not
stored).
The server generates a random salt and stores it in the salt field.
The server generates the SHA-256 hash of Bob's password and salt.
The server generates an RSA key pair. The public key is stored as plain
text in the pub_key field. The private key is encrypted via AES-256
using the hash generated from Bob's password and salt as the key and
stored in the enc_priv_key field.
The server generates a hash-based message authentication code for Bob's
private key using Bob's password and salt as the key and stores this in
the priv_key_hmac field.

Bob stores an entry in the system:

Bob enters some data to be stored as an entry along with his password.
This data is sent to the server.
The server generates a key to be used as a key for AES-256 encryption.
The server uses this key to encrypt the data and stores the result in
the enc_data field.
The server generates a hash-based message authentication code for the
data using the generated key and stores this in the data_hmac field.
The symmetric key used to encrypt the data is encrypted with Bob's public
key and stored in the enc_sym_key field.
The server uses Bob's private key to generate a signature for the
symmetric key.

Bob retrieves his stored entry:

Bob enters his password and the ID of the entry to retrieve.
The server generates the SHA-256 hash of Bob's password and salt.
Bob's encrypted private key is decrypted via AES-256 encryption using the
hash.
The server verifies that Bob's encrypted private key has not been
tampered with by checking the HMAC in priv_key_hmac.
The server decrypts the symmetric key stored in the enc_sym_key field
using Bob's private key.
The server verifies that the encrypted symmetric key has not been tampered
with by verifying the signature in sym_key_sign using Bob's public key.
The server decrypts the data using the symmetric key.
The server verifies that the encrypted data has not been tampered with
by verifying the HMAC stored in the data_hmac field.
The server returns the decrypted data to Bob.

Bob shares an entry with Alice:

Bob wants Alice to have access to an entry he owns. He enters his
password and the ID of the entry to share.
The data for the entry is decrypted using the method in ""Bob retrieves
his stored entry.""
A new entry is created for Alice in the same fashion as in ""Bob stores
an entry in the system,"" with the following exceptions:

The entry's parent_entry is set to Bob's entry.
The signature for the symmetric key is calculated using Bob's private
 key (since Alice's private key is not available to Bob).
When Alice accesses this new entry, the existence of a non-null
 parent_entry causes the system to use Bob's public key to verify
 the signature (since his private key was used to create it).


Bob changes the data in his shared entry:

Bob decides to change the data in the entry he shared with Alice. Bob
indicates the entry ID to modify and the new data it should contain.
The system overwrites the data created in ""Bob stores an entry in the
system.""
The system finds every entry with a parent_entry equal to the entry
that was just modified, and for each one overwrites the data created in
""Bob shares an entry with Alice.""

Analysis
Advantages:

It is impossible to decrypt any data from the database without the
password of the user that owns the data, as the private key necessary to
decrypt the data is encrypted with the user's password, and that password
(and it's hash) is not stored in the database.
If a user wants to change their password, only their encrypted private
key needs to be regenerated (decrypt the private key with the old
password/hash, then re-encrypt it with the new password/hash).
Shared entries are stored as actual separate records in the database,
so there is no need to share a key between multiple users/groups of users.

Disadvantages/Problems (that I can think of):

If a shared entry is modified, the system must re-encrypt every child
entry; with a large number of users sharing data, this could potentially
be computationally expensive.
Shared entries depend on the parent user's public key for signature
verification. If the user is deleted, or their key changes, the signatures
are invalid.

Repeated from the introduction: my question is: is this implementation
secure? Am I missing something? If so, is the above spec even implementable?
Or is this overkill?
Thanks for sticking it out this long. I'm interested in your opinions! Am I on the right track, or a complete moron? YOU DECIDE! :)
","Why not use certificates for sharing data between users? The use PKCS#12 certificates for holding the PEM and Private keys of users and the PEM per user or per site can sign and encrypt for data verification and security.
A scenario to illustrate.
Bob wants to share with Alice without Eve reading.
Alice gives Bob her public key. Bob adds Alice's public key to his keychain of trusted users. Bob then uses Alice's public key to encrypt a message while using his own PEM to sign the data. Of course this scenario requires that Alice already have a copy of Bob's public key to perform verification of the signature but you get the idea.
Also, why store a salt or iv? Both of these being stored along with at rest data will be accessible in the event of a db compromise.
Best practices...

Use a keyring for each user account for storage of others public keys/PEM certificates
Only use public key encryption for sharing information between accounts
Encrypt data with the users private key that is not to be shared between accounts
Do NOT use AES, RSA or any other reversible encryption for password storage
User specific salts should be used to further enhance hashing algorithm for password and should NOT be stored
Use of AES using a site wide password COULD be used for storage of at rest data to further improve security (but you would run into the problem you have outlined in the CONS section)

","863","<ruby><security><encryption><openssl><public-key-encryption>","6","0","3","2012-04-06 14:11:39","5448066","3","2","62082","","2011-03-28 15:52:25","2011-03-27 06:36:09",""
"27824173","Make RSA encrypted chat application android","I am working on a chat application, made in Java for android. I have a server created in python, using twisted, and of course, in my android app I have the client implemented.
It's working very well, but I want to make it secure. I was looking at RSA encryption and found this link: http://javadigest.wordpress.com/2012/08/26/rsa-encryption-example/
The problem is that, I can make a pair of keys, a private key that will be on the server to decrypt the messages and the public key will hard-coded (or somewhere online), in the android application. The problem would be, when the server sends the message back to the client, how will he be able to get it ? That one needs to be send encrypted as well, otherwise, there's no point in doing it. I was thinking about creating a pair of keys for each client, but ... I think it's not the best approach.
All suggestions are welcome
","The solution to this is usually to create a form of Public Key Infrastructure (PKI), where the public keys of the clients can be verified when needed. You can do this by putting them into a certificate and sign it by some kind of certificate authority (CA) that you control. That way you don't need to store all the certificates, and you can also revoke certificates of clients that have their key compromised. This is what is normally used by (browser) TLS, especially if client authentication is deployed.
Key management however is a large topic that cannot be handled within one answer.
","854","<java><android><encryption><rsa><public-key-encryption>","-1","1","1","2015-01-07 20:48:11","","2","","","","","2015-01-07 16:38:59",""
"31816896","postgresql table encryption using PGP public key (pgp_pub_encrypt)","I have been trying to encrypt a psql table using pgp_pub_encrypt function & I'm able to encrypt when I manually enter the data one-by-one, But I need to encrypt a particular column in my table while inserting it from another table(since the column has n number of values). I tried using a command like this
INSERT INTO table2(column2)
SELECT pgp_pub_encrypt(robotccs.column2, keys.pubkey)  
columnn1_from_table1  FROM table1 AS robotccs(cc)
CROSS JOIN (SELECT dearmor('-----BEGIN PGP PUBLIC KEY BLOCK-----
cat & copy the entire key here  
-----END PGP PUBLIC KEY BLOCK-----') As pubkey) As keys;

where column1(bytea) represents the table1's column & column2 represents table2 where the data has to be copied from col-1. I get all sorts of error & the encryption fails. When I type & insert the values manually into table2, the job gets done. Can anyone tell me a way to do this or provide some clear documentation on how pgp encryption is done in a detailed manner. postgresql website doesn not have one.
","","853","<postgresql><encryption><public-key-encryption><psql><pgp>","0","","0","2015-08-05 10:44:28","","3","","5164700","","2015-08-05 10:44:28","2015-08-04 18:44:12",""
"12209864","Can PHP's OpenSSL functions use the AES cipher with public/private keys?","I have seen many examples of how to use AES through OpenSSL with symmetric encryption. But I am using asymmetric encryption. My webapp is storing some sensitive data encrypted with a public key, which is later only decrypted with the private key if the admin can provide the private key passphrase.
My implementation is working well, however, I am noticing very small inputs produce rather large encrypted results. For example, a 16 character input becomes 288 bytes encrypted (it decrypts to the original 16 characters). Since these encrypted results are stored in a database table, I would like to achieve encrypted values that are much closer to the input size. Predictable storage lengths is desired, too.
I am using RSA public/private keys, but what cipher does PHP's OpenSSL implementation use by default? I haven't found a single example of how to specify a cipher when using public/private keys, and the openssl_public_encrypt function doesn't allow one of the cipher constants to be specified. Am I supposed to be specifying the cipher somehow when the pub/pri keys are generated (using openssl_pkey_new)?
","AES is a symmetric encryption algorithm, it doesn't support public/private key pairs. Whoever can encrypt can also decrypt the ciphertext.
One can combine AES with an asymmetric algorithm like RSA to obtain a hybrid scheme: One uses RSA to encrypt a (random) AES key, and then uses AES to encrypt the actual data. You will still have the RSA overhead of a minimum ciphertext size of about the size of the RSA modulus (since this is RSA's output), though.
I suppose this is actually what your OpenSSL function does, maybe depending on the key type.
There are other public-key schemes, specially those based on elliptic curves, which allow a smaller size overhead for similar security as RSA. (I don't know if these are supported by OpenSSL or its PHP bindings, though.)
","853","<php><openssl><aes><public-key-encryption>","1","0","2","2015-07-31 00:15:19","","0","","","","","2012-08-31 06:19:28",""
"12209864","Can PHP's OpenSSL functions use the AES cipher with public/private keys?","I have seen many examples of how to use AES through OpenSSL with symmetric encryption. But I am using asymmetric encryption. My webapp is storing some sensitive data encrypted with a public key, which is later only decrypted with the private key if the admin can provide the private key passphrase.
My implementation is working well, however, I am noticing very small inputs produce rather large encrypted results. For example, a 16 character input becomes 288 bytes encrypted (it decrypts to the original 16 characters). Since these encrypted results are stored in a database table, I would like to achieve encrypted values that are much closer to the input size. Predictable storage lengths is desired, too.
I am using RSA public/private keys, but what cipher does PHP's OpenSSL implementation use by default? I haven't found a single example of how to specify a cipher when using public/private keys, and the openssl_public_encrypt function doesn't allow one of the cipher constants to be specified. Am I supposed to be specifying the cipher somehow when the pub/pri keys are generated (using openssl_pkey_new)?
","I would recommend creating RSA private and public keys.  See This great article
","853","<php><openssl><aes><public-key-encryption>","1","0","2","2015-07-31 00:15:19","","0","","","","","2012-08-31 06:19:28",""
"24122166","Verify signature with public key node","I have a signed data being passed to my server along with the public key in hex format, with which this data was signed. Hash algorithm is the same for all requests sha-256, but public keys are different for every request because rsa public+private pair is generated on the client.
So my question is - how can I verify the signature with public key in hex format? In node's crypto docs I see that I need to have a pem-format file, but I don't have one. And actually there will be many requests of this kind, so it wouldn't be good to create these files.
","Don't. Seriously. Don't.  Rolling your own cryto will be bad.
Instead, use https or, if you really must do it yourself, try to implement Diffie-Hellman. At least with DH, you aren't creating your own algorithm. As to why this is bad, consider an attacker who wants to read your data. If you merely sign it, it's really not that different than signing a letter in real life. It's your signature and (mostly) no one else can do it. But if I steal that letter of yours, write my own and sign it with my signature (using your name), the recipient will know it wasn't from you. But wait! What if you never contacted this recipient before? They won't know who's writing and signing using your name. Is it really you? Or is it me?  You need to do a key-exchange to prevent this.
","853","<node.js><rsa><public-key-encryption>","0","1","1","2014-06-09 15:16:33","24123334","7","","","","","2014-06-09 14:14:22",""
"4481062","integer factorization and cryptography","i know that public key cryptography uses prime numbers, 
also know that two large(e.g. 100 digit) prime numbers (P, Q)  are used as the private key,
the product is a public key N = P * Q,
and using prime numbers is because the factorization of N to obtain P , Q is sooo difficult and takes much time,
i'm ok with that, but i'm puzzled
why not just use any ordinary large non-prime numbers for P , Q 
and so the factorization of N will be still difficult
because there would because now , there are not only 2 factors possible, but even more.
thanks....
","I'm not really expert in cryptology (so if I'm wrong just tell me in a comment, and I'll promptly delete this answer), but I think it's because if you just use random large numbers you may get easily factorisable ones (i.e. you don't have to get up to really large prime numbers to get their prime factors). So just really big, guaranteed-prime numbers are used.
","852","<public-key-encryption>","4","0","3","2012-02-08 14:59:04","","1","","","","","2010-12-19 00:49:11",""
"4481062","integer factorization and cryptography","i know that public key cryptography uses prime numbers, 
also know that two large(e.g. 100 digit) prime numbers (P, Q)  are used as the private key,
the product is a public key N = P * Q,
and using prime numbers is because the factorization of N to obtain P , Q is sooo difficult and takes much time,
i'm ok with that, but i'm puzzled
why not just use any ordinary large non-prime numbers for P , Q 
and so the factorization of N will be still difficult
because there would because now , there are not only 2 factors possible, but even more.
thanks....
","I am not a crypto expert.

why not just use any ordinary large
  non-prime numbers for P , Q

Because there would be more factors. Integer factorization is an attack against public private key encryption. This attack exploits this very relation.
One could more easily find the relation and possible values with more common factors. It boils down to algebra.
N = P * Q
if P and Q are both Prime then N has 4 factors {N P Q 1}
However!
if P and Q both share a factor of 2
N / 4 = P / 2 * Q / 2
If N could have been 0..2^4096 it is now  0..2^4094 and since 2 was a factor another large number was also a factor.
This means that I could find a scalar multiple, P', Q' of P,Q S.T. P',Q' < P,Q 
I don't fully understand the concept myself but I believe this shows where i'm going with this.
You have to search a smaller space until you brute force the key.
","852","<public-key-encryption>","4","2","3","2012-02-08 14:59:04","","1","","","","","2010-12-19 00:49:11",""
"4481062","integer factorization and cryptography","i know that public key cryptography uses prime numbers, 
also know that two large(e.g. 100 digit) prime numbers (P, Q)  are used as the private key,
the product is a public key N = P * Q,
and using prime numbers is because the factorization of N to obtain P , Q is sooo difficult and takes much time,
i'm ok with that, but i'm puzzled
why not just use any ordinary large non-prime numbers for P , Q 
and so the factorization of N will be still difficult
because there would because now , there are not only 2 factors possible, but even more.
thanks....
","It is perfectly possible to use RSA with a modulus N that is composed of more than two prime factors P and Q, but two things have to be noted:

You must know the exact value of all of these factors, or else you will be unable to derive the private key from the public key upon key generation. The equation for two-prime RSA is 1 = D*E (mod LCM(P-1,Q-1)). If you do know these prime factors, you can perform the calculation. If you don't know the prime factors you can't perform this calculation, which BTW is why it is safe to make the public key E,N public - you can't derive the private key D if you only have the information that is easily derived from the public key, unless you are able to factor N.
The security of RSA is effectively bounded by the magnitude of the second largest prime factor of the RSA modulus N. Finding small prime factors that are less than 2^32 can be done in a fraction of a second on a modern computer, simply by trying to divide the modulus N by each such prime and check if the residue is zero (meaning N is divisible by that number) or not (meaning that number is not a factor of N). If N is composed of only such small prime factors times a single large prime factor Q, it would be trivial to find that Q as well, simply by dividing N by all small factors to get N' and test N' for primality. If N' is a prime, it is the last prime factor Q.

","852","<public-key-encryption>","4","2","3","2012-02-08 14:59:04","","1","","","","","2010-12-19 00:49:11",""
"49678052","RSA OAEP, Golang Encrypt, Java Decrypt -BadPaddingException: Decryption error","I'm trying to decrypt a string which is encrypted in Golang using RSA-OAEP. but getting BadPaddingException: Decryption error. Having hard time to figure out what am I missing.. 
Here is the Golang encrypt method
func encryptString() {
rootPEM := io_related.ReadFile(""../../resources/pubkey.pem"")
    //fmt.Printf(""Cert String %q \n"", rootPEM)

    block, _ := pem.Decode([]byte(rootPEM))
    var cert *x509.Certificate
    cert, _ = x509.ParseCertificate(block.Bytes)
    rsaPublicKey := cert.PublicKey.(*rsa.PublicKey)

    secretMessage := []byte(""password"")
    label := []byte("""")

    // crypto/rand.Reader is a good source of entropy for randomizing the
    // encryption function.
    rng := rand.Reader

    ciphertext, err := rsa.EncryptOAEP(sha256.New(), rng, rsaPublicKey, secretMessage, label)
    if err != nil {
        fmt.Fprintf(os.Stderr, ""Error from encryption: %s\n"", err)
        return
    }

    // Since encryption is a randomized function, ciphertext will be
    // different each time.

    base64EncodedString := base64.StdEncoding.EncodeToString(ciphertext)
    fmt.Println(base64EncodedString)
}

and my java decrypt method as
public void decryptString(String base64String) throws NoSuchAlgorithmException, CertificateException, IOException, KeyStoreException, UnrecoverableKeyException, NoSuchPaddingException, InvalidKeyException, IllegalBlockSizeException, BadPaddingException{
        FileInputStream is = new FileInputStream(""priv.p12"");
        KeyStore keystore = KeyStore.getInstance(""PKCS12"");
        keystore.load(is, """".toCharArray());
        System.out.println(""Successfully loaded"");


        String keyAlias = ""1"";


        PrivateKey key = (PrivateKey)keystore.getKey(keyAlias, """".toCharArray());

        System.out.println(""key ""+Base64.encodeBase64String(key.getEncoded()));
        Cipher rsaDecryptCipher;
        rsaDecryptCipher = Cipher.getInstance(""RSA/ECB/OAEPWITHSHA-256ANDMGF1PADDING"");
        rsaDecryptCipher.init(Cipher.DECRYPT_MODE, key);
        final byte[] plainText = rsaDecryptCipher.doFinal(Base64.decodeBase64(base64String));

        System.out.println(""Plain   : "" + new String(plainText));

    }


I made sure I'm using the same key pair and not a different private key
Made sure hash algorithm used same in both encrypt and decrypt ""SHA256""

I might be missing something, Please let me know if anyone need more details. Appreciate the help!!. Thanks
","OAEP uses two hash algorithms: one on the label (fka parameters) and one within the Mask Generation Function (MGF1); these can be different. See 7.1.1 and B.2.1 in rfc8017.
I don't know whether that Go code sets one (and which) or both, but what Java does with that getInstance varies depending on which provider you are using, which in turn depends at least partly on what implementation of Java you are using. The SunJCE provider configured by default in Sun/Oracle and OpenJDK implementations changes only the label hash, keeping MGF1 at SHA1; the BouncyCastle provider changes both. I don't know what IBM and Android do here. 
Once you determine (or guess) what Go is doing you can match it by adding to your .init call an appropriate OAEPParameterSpec and related MGF1ParameterSpec.
Mostly dupe OAEPwithMD5andMGF1Padding in node-rsa
and breaking down RSA/ECB/OAEPWITHSHA-256ANDMGF1PADDING
(copied at https://security.stackexchange.com/questions/97548/breaking-down-rsa-ecb-oaepwithsha-256andmgf1padding )  
","851","<java><go><rsa><public-key-encryption><badpaddingexception>","2","0","1","2018-04-05 23:46:55","49683163","0","","","","","2018-04-05 17:19:35",""
"25668264","Can't decrypt signed S/Mime Message","I'm at the moment realizing an S/Mime decryption using PHP. What i got so far:
    $keys = array(""public""=>$atm.""/public-keys/"".$usr."".smime"",
        ""private""=>$atm.""/private-keys/"".$usr."".smime"");
    if(!file_exists($keys[""public""])) die(""Public Key not found"");
    if(!file_exists($keys[""private""])) die(""Private Key not found"");
    $public = file_get_contents($keys[""public""]);
    $private = file_get_contents($keys[""private""]);

    switch($_GET[""debug""])
    {
        case ""encrypt"":
        {
            $outfile = realpath(""demo-msg/out.txt"");
            $outfile_signed = realpath(""demo-msg/out.signed.txt"");
            $infile = realpath(""demo-msg/in.txt"");

            file_put_contents($infile,$msg);
            $adddata = array(""To"" => ""XXX"", ""From: Demo Name <XXX>"", ""Subject"" => ""Demo Subject"");
            if (openssl_pkcs7_encrypt($infile, $outfile, $public, $adddata))
            {
                //$info = file_get_contents($outfile);
                echo ""winenc & transfer<br>\n"";
                file_put_contents($infile, file_get_contents($outfile));
                //if(openssl_pkcs7_sign($outfile,$outfile_signed,$public,$private,$adddata, PKCS7_BINARY)) echo ""winsign"";
                //else echo ""failsign"";
            } 
            else echo ""Failed Encryption"";
            exit;
        }
        default:
        {
            $outfile2 = realpath(""demo-msg/out2.txt"");
            $outfile = realpath(""demo-msg/out.txt"");
            $infile = realpath(""demo-msg/smime.p7m"");
            //$infile = realpath(""demo-msg/in.txt"");

            if(openssl_pkcs7_verify($infile)) echo ""verified<br>\n""; //tried: openssl_pkcs7_verify($infile,$PKCS7_DETACHED, tmpfile(), array(), array(), $outfile)
            else die(""invalid sig"");

            if(openssl_pkcs7_decrypt($infile, $outfile2, $public, $private)) //tried: openssl_pkcs7_decrypt($outfile, $outfile2, $public, $private)
            {
                echo ""dec win:"".file_get_contents($outfile2);
            }
            else echo ""Oh oh! Decryption failed!"";
            exit;
        }
    }

What this snippet already can do:

Encrypt a Message
Decrypt an encrypted message (created by itself)
Decrypt an encrypted message (Office 2010) as long as it's not signed

Now, i want to decrypt messages that are signed too (as it's usually one step). The Problem: 

If i first try a decrypt, it'll return the encrypted message with different headers. Multiple decryptions lead to the same result.
My thought was using the $content - parameter of the verification - command (openssl_pkcs7_verify). You can see my attempt in the code-comments. 

Nevertheless, i don't have any clues what can be wrong with the second attempt. ANy help would be appreciated!
","Speaking to myself.
Errors i made in the script:

Verification returns -1 (error), but i process it as true (success). The verification never worked.
The Verification is plain wrong. The DETACHED is a constant, not a variable. The ""extracert"" parameter expects a valid file as string containing a valid signature. Though, the idea i had was right (de-signing using the ""content""-parameter).
Order of signing and decryption

What i misunderstood was the way, signatures are processed (and verifications are made).
I assumed the message gets encrypted, then signed. It can be that way, but a lot of tools, including Office2010 first sign the message, then encrypt it. That way you can't check the signature before decrypting and have to de-sign after the decryption.
You can see my debugging-code that works down below. This will help you with your decryption problems when stumbling upon this thread.
            $test = openssl_pkcs7_verify($infile, PKCS7_DETACHED ); //just to see that it doesn't work
            echo ""signature is "".$test.""\n<br>"".openssl_error_string(); 

            $dec = openssl_pkcs7_decrypt($infile, $outfile, $public, $private);
            echo ""<br><br>\n\ndec is "".$dec.""\n<br>"".openssl_error_string().""\n<br>"".file_get_contents($outfile); 

            $test = openssl_pkcs7_verify($outfile, PKCS7_DETACHED, $tmp, array(), $tmp, $outfile2 );
            echo ""<br><br>\n\nsignature2 is "".$test.""\n<br>"".openssl_error_string().""\n<br>"".file_get_contents($outfile2); 

","845","<php><public-key-encryption><smime>","0","1","1","2014-09-04 19:58:15","25673406","0","","","","","2014-09-04 14:36:39",""
"7068733","Convert Java to python DSA signing","Does anyone know how I would go about converting this java code to python?
/**
* signs the data for the account account
*/
private byte[] sign(String pkStr,byte[] data, String keyType) throws Exception {
    BASE64Decoder decoder = new BASE64Decoder();
    KeyFactory keyFac = null;
    //instantiate the key factory based on the key alg type
    if(keyType.equals(""DSA"")){
        keyFac = KeyFactory.getInstance(""DSA"");
    }else if(keyType.equals(""RSA"")){
        keyFac = KeyFactory.getInstance(""RSA"");
    }

    //generate the public key
    PKCS8EncodedKeySpec dprks = new PKCS8EncodedKeySpec(decoder.decodeBuffer(pkStr));
    PrivateKey pk = keyFac.generatePrivate(dprks);

    return(signBytes(data,pk,keyType));
}

    /**
* sign the data with the key
*/
private byte[] signBytes(byte [] data,
    PrivateKey signingPrivateKey, String keyType)throws Exception {

    Signature dsa = null;
    //instantiate the signature alg based on the key type
    if(keyType.equals(""DSA"")){
        dsa = Signature.getInstance(""SHA1withDSA"");
    }else if(keyType.equals(""RSA"")){
        dsa = Signature.getInstance(""SHA1withRSA"");
    }
    /* Initializing the object with a private key */
    dsa.initSign(signingPrivateKey);

    /* Update and sign the data */
    dsa.update(data);
    byte[] sig = dsa.sign();
    return sig;
}

The ""keyType"" seems to always get passed as ""DSA"", so I've looked at M2Crypto.DSA and that looks promising.  The DSA.sign function however returns a tuple of 2 byte strings that I'm not at all sure what to do with.
","According to http://download.oracle.com/javase/1.5.0/docs/guide/security/CryptoSpec.html#AppB (for some weird reason that has two Appendix Bs, and you need to scroll down to the second) Java uses the ASN.1 encoding SEQUENCE ::= { r INTEGER, s INTEGER }
You should be able to generate (and parse) this in Python using pyasn1 - http://pyasn1.sourceforge.net/
ASN.1 is a standard for encoding binary data.  So the information above specifies how the Java code is combining the two values that the Python code returns.  You can therefore do the same, and so maintain the same byte format for the signature.
","845","<java><python><public-key-encryption><dsa>","2","1","2","2011-08-29 01:58:52","","2","","","","","2011-08-15 18:07:19",""
"7068733","Convert Java to python DSA signing","Does anyone know how I would go about converting this java code to python?
/**
* signs the data for the account account
*/
private byte[] sign(String pkStr,byte[] data, String keyType) throws Exception {
    BASE64Decoder decoder = new BASE64Decoder();
    KeyFactory keyFac = null;
    //instantiate the key factory based on the key alg type
    if(keyType.equals(""DSA"")){
        keyFac = KeyFactory.getInstance(""DSA"");
    }else if(keyType.equals(""RSA"")){
        keyFac = KeyFactory.getInstance(""RSA"");
    }

    //generate the public key
    PKCS8EncodedKeySpec dprks = new PKCS8EncodedKeySpec(decoder.decodeBuffer(pkStr));
    PrivateKey pk = keyFac.generatePrivate(dprks);

    return(signBytes(data,pk,keyType));
}

    /**
* sign the data with the key
*/
private byte[] signBytes(byte [] data,
    PrivateKey signingPrivateKey, String keyType)throws Exception {

    Signature dsa = null;
    //instantiate the signature alg based on the key type
    if(keyType.equals(""DSA"")){
        dsa = Signature.getInstance(""SHA1withDSA"");
    }else if(keyType.equals(""RSA"")){
        dsa = Signature.getInstance(""SHA1withRSA"");
    }
    /* Initializing the object with a private key */
    dsa.initSign(signingPrivateKey);

    /* Update and sign the data */
    dsa.update(data);
    byte[] sig = dsa.sign();
    return sig;
}

The ""keyType"" seems to always get passed as ""DSA"", so I've looked at M2Crypto.DSA and that looks promising.  The DSA.sign function however returns a tuple of 2 byte strings that I'm not at all sure what to do with.
","A DSA signature is defined as a pair of integers (called r and s, respectively). The DSA standard does not mandate a specific encoding of such a signature into a sequence of bytes. So every protocol which uses DSA signatures has to define its own encoding.
There are two commonly used DSA signature encodings; one is the direct concatenation of the big-endian unsigned encodings of the r and s values, both being normalized to the length (in bytes) of the q parameter in the public key (the ""subgroup size"", usually a 160-bit prime integer, thus yielding a 40-byte signature). The documentation of M2Crypto.DSA is quite terse, but my guess is that it returns r and s separately but already in that format.
Java uses the other encoding, which is ASN.1 based. This is the encoding used throughout X.509 and anything based on it (including signatures in SSL/TLS). ASN.1 is a generic standard for representation and serialization of structured data. In this case, the signature should be the serialization of an ASN.1 SEQUENCE containing two INTEGER values (r and s, in that order). As per the ASN.1 and DER encoding rules, the signature shall then have this format:
0x30 A 0x02 B R 0x02 C S
where:

R is the big-endian signed encoding of r, of minimal length: this means that the first byte shall have a value between 0 and 127, and it shall have value 0 only if the second byte has a value between 128 and 255. In other words, encode r as a sequence of bytes with big-endian convention (most significant byte comes first), making sure that you have as few leading zero bits as possible, provided that you keep at least one (this is what the ""signed"" encoding means: since r is positive, its most significant bit must be 0). Since r is an integer between 0 and q-1, the length of R will be at most one more byte than the length of q, but it can be smaller.
S is the big-endian signed encoding of s (same treatment than for r; note: R and S may have distinct lengths).
B is a single byte containing the length of R (in bytes).
C is a single byte containing the length of S (in bytes).
A is a single byte containing B+C+2 (i.e. the length, in bytes, of what follows the byte A).

Writing specialized encoding and decoding functions for ASN.1-based DSA signatures is a bit tedious but not hard; just take care of producing R and S sequences of the right size. Alternatively, you could use an existing ASN.1 encoding/decoding library, which is overkill but might be easier, depending on your situation.
","845","<java><python><public-key-encryption><dsa>","2","3","2","2011-08-29 01:58:52","","2","","","","","2011-08-15 18:07:19",""
"39690398","Computing EC PublicKey from Private Key with BC","In my program, I can successfully restore an EC private key from a PEM file using Spongy Castle (Bouncy Castle equivalent for Android). As the file does not contain the public key, I am trying to recompute the public key from the private key.
I am able to compute a valid public key. However, my public key contains much more data (311 bytes) than my original reference (92 bytes). This is even more than the private key (152 bytes).
How can I get the compressed (?) version of the public key
PrivateKey privateKey; // private key from pem file
PublicKey referencePublicKey; // public key in my testing environment, generated with an EC KeyPairGenerator


KeyFactory factory = KeyFactory.getInstance(""EC""); // using SpongyCastle provider                     
ECPrivateKeySpec privSpec = factory.getKeySpec(privateKey, ECPrivateKeySpec.class);
ECParameterSpec params = privSpec.getParams();

ECPoint q = params.getG().multiply(privSpec.getD());

ECPublicKeySpec pubSpec = new ECPublicKeySpec(q, params);
PublicKey publicKey = factory.generatePublic(pubSpec);


System.out.println( referencePublicKey.equals(publicKey) );   // true
System.out.println( referencePublicKey.getEncoded().length ); // 92
System.out.println( publicKey.getEncoded().length );          // 311

","","838","<java><android><public-key-encryption><elliptic-curve><spongycastle>","3","","0","2016-09-25 18:34:51","","6","1","","","","2016-09-25 18:34:51",""
"20980193","What to do with the results of extended Euclidean algorithm","I am currently working on an essay about public key encryption, RSA specifically. 
I understand most of the algorithms involved in generation of public and private keys. But I am struggling to understand what do I do with Bézout's identity to get private key? And also I dont quite understand why Bézout's identity is used at all?
Assume that:
n=55
phi(n)=40    
e = 7

So that e*d mod phi(n) = 1
7*d mod 40 = 1
gcd(40,7) = 1

And so that Bézout's identity looks like this:
3(40)-17(7)=1

Where 40 and 7 are phi(n) and e respectively. 
I know from example that d should be 23.
So am I right that d = e - 17?
If not how do I get d? 
","In your example, d = -17 (since Bézout's identity says that there exist x and y such that x*a + y*b = gcd(a,b)).
You are looking for a d such that e*d = 1 mod phi(n), so you can convert this negative d into a positive value that still satisfies the equation by simply adding a multiple of phi(n). In this case we just need to add phi(n) once, which gives your expected value for d:
-17 + phi(n) = -17 + 40 = 23

","837","<rsa><public-key-encryption>","2","3","1","2014-01-08 22:30:46","21007972","0","","","","","2014-01-07 19:34:28",""
"33579782","Java RSA why different cipher text every time?","I'm developing a login module with JSP/Servlets/MySQL with the RSA algorithm. Once I register a new user, I save the PublicKey into MySQL and encrypt a password with it.
When the user tries to log-in, I retrieve that PublicKey and encrypt the just-typed-in-password with the corresponding PublicKey and compare it with the previously saved-encrypted-password but it always returns a different cipher text.
I can't figure out why I get different encrypted passwords every time. Is there anything I'm doing wrong? Does it generate a new PublicKey everytime it runs the ""keyFactory.generatePublic""?
Thanks for your help
My method to generate a public key is:
    public byte[] generateBytePublicKey() throws Exception {
        byte[] pk = null;

        try {
            final KeyPairGenerator keyGen = KeyPairGenerator.getInstance(ALGORITHM);
            keyGen.initialize(1024);
            pk = keyGen.generateKeyPair().getPublic().getEncoded();
        } (...... etc etc)
        return pk;

My method to encrypt a password:
    public byte[] encryptBytes(String pwd, byte[] key) throws Exception {

        byte[] cipherText = null;
        PublicKey pk;

        try {
            byte[] dataBytes = pwd.getBytes();
            KeyFactory keyFactory = KeyFactory.getInstance(""RSA"");
            pk = keyFactory.generatePublic(new X509EncodedKeySpec(key));
            final Cipher cipher = Cipher.getInstance(""RSA"");
            cipher.init(Cipher.ENCRYPT_MODE, pk);
            cipherText = cipher.doFinal(dataBytes);
        } (..... etc etc)
            return cipherText;

My method to store encrypted password and Public Key into a MySQL table:
    (.....................)
    try {
        Statement stmt = null; 
        ResultSet rs = null;
        byte[] bytePublicKey;
        byte[] cipherPwd;

        bytePublicKey = generateBytePublicKey();
        cipherPwd = encryptBytes(password, bytePublicKey);

        String query = ""INSERT INTO Users (email, pwd, publickey) VALUES ('"" + email + ""', ?, ?)"";
        PreparedStatement ps;
        ps = conn.getConexion().prepareStatement(query);
        ps.setBytes(1, cipherPwd);
        ps.setBytes(2, bytePublicKey);
        resultSet = ps.executeUpdate();
   } (............. etc etc)

My method for checking if a user is valid:
   public boolean isUserValid (String email, String typedPassword) throws Exception {

    byte[] storedBytesPassword;
    byte[] storedBytesPublicKey;
    byte[] typedPwdtoBytes;

    try {
        storedBytesPublicKey = getByteArrays(email, ""publicKey"");
        storedBytesPassword = getByteArrays(email, ""pwd"");

        typedPwdtoBytes = encryptBytes(typedPassword, storedBytesPublicKey);

        return Arrays.equals(typedPwdtoBytes, storedBytesPassword);
   } (............. etc etc)

My method to get the Byte Arrays from the MySQL table:
  public byte[] getByteArrays (String email, String byteArray) throws SQLException {

    (..............)

    try {
        Statement stmt=null; 
        ResultSet rs=null;

        query = ""SELECT "" + byteArray + "" FROM Users WHERE email = '"" + email + ""'"";

        try {
            stmt = (conn.getConexion()).createStatement(); 
            rs = stmt.executeQuery(query);
            while (rs.next() ) {
                bytesArr = rs.getBytes(1);
        } (.................. etc etc)

","When you don't specify the full transformation, you get the provider defaults, which for RSA is likely RSA/ECB/PKCS1Padding.
PKCS1Padding (see Padding schemes) means that random data is added to ensure that encrypting the same plaintext twice will generate different ciphertext.
Ciphers are for encrypting and decrypting. Since you don't intend to ever decrypt a password, a cipher is not the right choice for you.
For one-way ""encryption"", use a message digest, also called a Cryptographic hash function. They work like the Java hashCode() method by generating a hash/digest of the plaintext, but unlike hashCode(), a digest is much more complex in order to ensure that the plaintext cannot be inferred from the digest value.
Since it's a one-way algorithm, you can store the key and the digest value together. The purpose of a digest ensure that you're guaranteed to always get the same digest value from the same plaintext/key combination.
You can even use the same key for all passwords. Remember that it's irreversible, as long as the digest algorithm is strong enough, e.g. SHA-256.
","833","<java><mysql><encryption><rsa><public-key-encryption>","1","1","1","2015-11-07 06:54:18","33580062","1","3","","","","2015-11-07 06:16:02",""
"30054817","How can I load a RSA public key in C# and use it to encrypt something?","I made a simple script which load the RSA public key to encrypt a string in Python :
(P.S. I'm using this RSA library)
import rsa
rsa_key = ""81474a6ab9a4b69aad47d8674e1de67130dd004eb532dcce7c1fc874e0b078ad2eeb88ae72066d018ad614e18f8e2d411e6ac0f483fb7b6877fe814583dfea02056f04db34185bc7ecfe31ef2297e5f282575300c3f7497823ace8e6240e6f611cf3b4c8bfabf9e4092dd00dc66d5fa35cdb14f3f0bcff2c6c0c9b4ecc3aea2822583fef359200580e8495a152e7cb7aca4de7da719f""
e = ""10001""
pub_key = rsa.PublicKey(int(rsa_key,16), int(e,16))
crypto = rsa.encrypt(""message"", pub_key).encode(""hex"")

So how can I do the same thing in C# ?
","You can use the RSACryptoServiceProvider from System.Security.Cryptography.
var rsa = new RSACryptoServiceProvider();
var enc = new ASCIIEncoding();

byte[] data = enc.GetBytes(""message"");
byte[] encrypted = rsa.Encrypt(data, true);
byte[] decrypted = rsa.Decrypt(encrypted, true);

Console.WriteLine(enc.GetString(decrypted));

For more info and an example setting the public key:
https://social.msdn.microsoft.com/Forums/en-US/67b50472-b23f-4191-b8f4-e4a696fca5e4/how-to-use-a-public-key-with-rsacryptoserviceprovider-class?forum=csharplanguage
","832","<c#><python-2.7><rsa><public-key-encryption><public-key>","0","0","1","2015-05-05 14:27:38","","0","","","","","2015-05-05 13:46:46",""
"22218508","RSA Encryption using existing public key","I am trying to encrypt NSData with the following method:
- (NSData *) encryptWithData:(NSData *)content {

size_t plainLen = [content length];

void *plain = malloc(plainLen);
[content getBytes:plain
           length:plainLen];

size_t cipherLen = 256;
void *cipher = malloc(cipherLen);

OSStatus returnCode = SecKeyEncrypt(""PUBLIC KEY HERE"", kSecPaddingPKCS1, plain,
                                    plainLen, cipher, &cipherLen);

NSData *result = nil;
if (returnCode != 0) {
    NSLog(@""SecKeyEncrypt fail. Error Code: %ld"", returnCode);
}
else {
    result = [NSData dataWithBytes:cipher
                            length:cipherLen];
}

free(plain);
free(cipher);

return result;

}
Where it is written ""PUBLIC KEY HERE"" I want to load an existing public key I already copied to my bundle. How can I do that?
","For example use a certificate file which contains a public key:
NSData *certificateData = [NSData dataWithContentsOfURL:certificateURL options:0 error:&error];
if (certificateData) {
    SecCertificateRef certificate = SecCertificateCreateWithData(NULL, (__bridge CFDataRef)(certificateData));
    // ...
    SecKeyRef publicKey;
    SecCertificateCopyPublicKey(certificate, &publicKey);
    // ...
}

To load data from the bundle:
NSArray *certificateURLs = [[NSBundle mainBundle] URLsForResourcesWithExtension:@""cer"" subdirectory:@""myCertificates""];
for (NSURL *certificateURL in certificateURLs) {
    NSData *certificateData = [NSData dataWithContentsOfURL:certificateURL options:0 error:&error];
    // ...
}

","831","<ios><iphone><encryption><ios7><public-key-encryption>","1","2","1","2014-03-06 08:09:08","22218589","4","","117625","","2014-03-06 08:07:08","2014-03-06 08:03:56",""
"30451123","Use ecc for encryption in ios","I am trying to implement ecc technique for encryption.
I went through the following posts:

Shared Secret based on Elliptic curve Diffie–Hellman with CommonCrypto 
Elliptic Curve Crypto in iOS

which doesn't have any satisfactory solutions.
Now, I am thinking of using a python library
https://github.com/yann2192/pyelliptic
But I am not aware if this would be the better solution for using  ecc for encryption as I would still need to figure out a way to use the python library in objc.
Can somebody point me in right direction? 
","Expanding on @puzzlepalace's comment, you might wanna try Libsodium. They even have a Swift library.
","828","<python><ios><public-key-encryption><elliptic-curve><commoncrypto>","6","0","2","2016-01-04 06:22:54","34585717","3","","-1","","2017-05-23 10:28:21","2015-05-26 06:34:52",""
"30451123","Use ecc for encryption in ios","I am trying to implement ecc technique for encryption.
I went through the following posts:

Shared Secret based on Elliptic curve Diffie–Hellman with CommonCrypto 
Elliptic Curve Crypto in iOS

which doesn't have any satisfactory solutions.
Now, I am thinking of using a python library
https://github.com/yann2192/pyelliptic
But I am not aware if this would be the better solution for using  ecc for encryption as I would still need to figure out a way to use the python library in objc.
Can somebody point me in right direction? 
","Finally, I made my own library for ECC/ECDSA which is now available on github 
","828","<python><ios><public-key-encryption><elliptic-curve><commoncrypto>","6","0","2","2016-01-04 06:22:54","34585717","3","","-1","","2017-05-23 10:28:21","2015-05-26 06:34:52",""
"39084741","Equivalent to OpenSSL commands in java","I'm not very familiar with encryption of files in java or openssl for that matter. I know the basics from school but have never actually implemented it.
Now I've been given the following 3 commands:
//generate random base64 private key
openssl rand -base64 32 -out (keypath)
//Encrypt random key with public key
openssl rsautl -encrypt -inkey (encryptionkey) -pubin -in (input) -out (output)
//encrypt file
openssl enc -aes-256-cbc -salt -in (input) -out (output) -pass file:(keypath)

I need to replicate this exactly in java. Is there an easy way of doing this?
Are there a library i can use which makes this easier?
For the first line I'm using the SecureRandom function from java 7 to generate a byte array which i then encore to base64 using apache commons codec library. like so:
byte[] bytes = new byte[32];
new SecureRandom().nextBytes(bytes);
String test = new String(Base64.encodeBase64(bytes));
test = test.substring(0, Math.min(test.length(), 10));

If i'm not mistaken this should do the same thing.
For the second I need to encrypt the file containing the output from the above script using a provided public RSA key. Is there a difference between encrypting a file or the data inside the file? meaning does the actual file add bits?
The third however is where it gets hard since it needs a salt and the aes-256-cbc encryption standard. I'm hoping there is a library which encompasses all the functionality required. If so can anyone point me in the right direction? I was reading about bouncy castle's crypto library but haven't had much luck finding the things i need.
kind regards 
","The random byte array code is fine but why Base64 encode the random bytes, that is really only neccessary for display of perhaps use where only ASCII charactrers are required.
For AES encryption see the Java docs for javax.crypto.
Use SecureRandom to create the iv and prepend it to the encrypted data, it does not need to be secret. On decryption just pick the iv from the data to use for the iv.
","827","<java><encryption><openssl><bouncycastle><public-key-encryption>","2","1","1","2016-08-22 17:23:21","39085234","5","","","","","2016-08-22 16:45:38",""
"48259666","How to Generate RSA Public key using exponent and modulus in SWIFT?","I am trying to encrypt the AES key with RSAEncryption, I have created a Function for both, AES Encryption will first encrypt the DATA and then call the RSAEncryption to encrypt the AES Encryption Key itself and then send it to the server for response.
Below is what i tried, right now i am just checking if the public key that i am creating on runtime to encrypt matches with the public key that it should be, when i run the program, i print the pem representation of public key corresponding to the modulus and exponent, the prefix of the RSA public key is missing 32 characters from it.
CODE:
import Foundation

import Alamofire

import SwiftyRSA

class Encryption {

private let rsaModulus: String = """"

private let rsaExponent: String = """"


public func rsaEncryption(password: String, data: Data, modulus: String, exponent: String) -> String? {

            if let modData = Data(base64Encoded: modulus),
            let expData = Data(base64Encoded: exponent),
            let keyData = Rsa.generatePublicKey(withModulus: modData, exponent: expData) {

            let keyDict:[NSObject:NSObject] = [
                kSecAttrKeyType: kSecAttrKeyTypeRSA,
                kSecAttrKeyClass: kSecAttrKeyClassPublic,
                kSecAttrKeySizeInBits: NSNumber(value: 2048),
                kSecReturnPersistentRef: true as NSObject
            ]

            let publicKey = SecKeyCreateWithData(keyData as CFData, keyDict as CFDictionary, nil)
            let pub = try! PublicKey(reference: publicKey!)
            let pem = try! pub.pemString() 

            let clear = try! ClearMessage(string: ""Clear Text"", using: .utf8)
            let encrypted = try! clear.encrypted(with: pub, padding: .PKCS1)

            print(""Encrypted AES Key: \(encrypted.base64String)"")
            print(separator: ""\n"")
            print(pem) //Print pem to check public key generated

        }
        return ""NO""
    }
}

Result Output : 
Encrypted AES Key: /.../

-----BEGIN RSA PUBLIC KEY-----
MIIBCgKCAQEAvvJwQMvjUI7DDnC2PYwGNGJrkq6acdkjIW1+WznI68FyfVWb15Gz
hiJ7IVVbPo1Rphkbr0Gs8vrkunwBxVIb1wCjiiwqdoR7EUvUHrk5WkNcSoNEu2l0
VnRVuFe+XTKrnQsgfRy2TzyW3eG2kOkQBHWwJCQT6pFOwLXhY4JwSBzdhPIUk7HM
20ntqmamMnKMEmEC2N+qOfBx2hKVv2s7bwGBI8NZoIdt6dbhFXgv5NWN+U9Mx3kd
mXpjz7CaGgxfbBhTy6SfJQzN0Exfv4VGxOHRDkO0Mmu/d2VIeT4Q8lM53YZWuyCm
/pZ4XCgi9Z/2ZmQmCszSOc2/495JQcV9ZQIDAQAB

-----END RSA PUBLIC KEY-----

Actual Output of public key should be : 
-----BEGIN PUBLIC KEY-----
**MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8A**MIIBCgKCAQEAvvJwQMvjUI7DDnC2PYwG
NGJrkq6acdkjIW1+WznI68FyfVWb15GzhiJ7IVVbPo1Rphkbr0Gs8vrkunwBxVIb
1wCjiiwqdoR7EUvUHrk5WkNcSoNEu2l0VnRVuFe+XTKrnQsgfRy2TzyW3eG2kOkQ
BHWwJCQT6pFOwLXhY4JwSBzdhPIUk7HM20ntqmamMnKMEmEC2N+qOfBx2hKVv2s7
bwGBI8NZoIdt6dbhFXgv5NWN+U9Mx3kdmXpjz7CaGgxfbBhTy6SfJQzN0Exfv4VG
xOHRDkO0Mmu/d2VIeT4Q8lM53YZWuyCm/pZ4XCgi9Z/2ZmQmCszSOc2/495JQcV9
ZQIDAQAB
-----END PUBLIC KEY-----

Characters between stars are missing from the result output.
","","821","<swift><encryption><aes><rsa><public-key-encryption>","2","","0","2018-05-29 16:51:15","","1","1","","","","2018-01-15 08:58:15",""
"43758503","Is KeyFactory thread-safe?","There is a service class that needs to generate PublicKey instances from X.509-encoded public key representations. One instance of this class will service multiple threads. Is it correct to do something like this?
public class MyService {
    private final KeyFactory rsaKeyFactory;

    public MyService() throws NoSuchAlgorithmException {
        rsaKeyFactory = KeyFactory.getInstance(""RSA"");
    }

    public PublicKey generatePublicKey(byte[] publicKeyBytes) throws GeneralSecurityException {
        return rsaKeyFactory.generatePublic(new X509EncodedKeySpec(publicKeyBytes));
    }
}

I.e. is the KeyFactory instance used here is thread-safe? generatePublicKey() method may be called by different threads concurrently.
Javadocs don't seem to mention thread-safety.
","No, you have to use syncronized blocks if you want thread safe.
","819","<java><multithreading><public-key-encryption>","5","0","2","2017-05-04 03:56:22","43773626","9","","207421","","2017-05-04 02:57:57","2017-05-03 11:16:03",""
"43758503","Is KeyFactory thread-safe?","There is a service class that needs to generate PublicKey instances from X.509-encoded public key representations. One instance of this class will service multiple threads. Is it correct to do something like this?
public class MyService {
    private final KeyFactory rsaKeyFactory;

    public MyService() throws NoSuchAlgorithmException {
        rsaKeyFactory = KeyFactory.getInstance(""RSA"");
    }

    public PublicKey generatePublicKey(byte[] publicKeyBytes) throws GeneralSecurityException {
        return rsaKeyFactory.generatePublic(new X509EncodedKeySpec(publicKeyBytes));
    }
}

I.e. is the KeyFactory instance used here is thread-safe? generatePublicKey() method may be called by different threads concurrently.
Javadocs don't seem to mention thread-safety.
","No, if the Javadoc makes no mention of thread-saftey then thread safety is not guaranteed (""synchronization is an implementation detail"").[1] Add a synchronized modifier to your generatePublicKey method (or some other form of locking) to make it thread-safe and be sure to add a Javadoc comment noting that it is supposed to be thread-safe.
See also:

Is there a standard annotation which should be added to the method's Javadoc to denote that a method should be called on a particular thread?
Characterizing thread safety (emphasis mine)

How many times have you looked at the Javadoc for a class, and wondered, ""Is this class thread-safe?"" In the absence of clear documentation, readers may make bad assumptions about a class's thread safety. Perhaps they'll just assume it is thread-safe when it's not (that's really bad!), or maybe they'll assume that it can be made thread-safe by synchronizing on the object before calling one of its methods (which may be correct, or may simply be inefficient, or in the worst case, could provide only the illusion of thread safety). In any case, it's better to be clear in the documentation about how a class behaves when an instance is shared across threads.
[...]
A class's thread-safety behavior is an intrinsic part of its specification, and should be part of its documentation. Because there is no declarative way of describing a class's thread-safety behavior (yet), it must be described textually. While Bloch's five-tier system for describing a class's degree of thread safety does not cover all possible cases, it's a very good start. Certainly we'd all be better off if every class included this degree of threading behavior in its Javadoc.



But maybe....
It looks like your use might be (that is, as hunter pointed out in the comments, once you have a KeyFactory instance, it might be safe to call KeyFactory#generatePublic from multiple threads).
A bit of source diving, KeyFactory.getInstance(String) looks something like so:[2] [3]
public static KeyFactory getInstance(String algorithm)
        throws NoSuchAlgorithmException {
    return new KeyFactory(algorithm);
}

Which in turns calls:
private KeyFactory(String algorithm) throws NoSuchAlgorithmException {
    this.algorithm = algorithm;
    List<Service> list = GetInstance.getServices(""KeyFactory"", algorithm);
    serviceIterator = list.iterator();
    // fetch and instantiate initial spi
    if (nextSpi(null) == null) {
        throw new NoSuchAlgorithmException
            (algorithm + "" KeyFactory not available"");
    }
}

And nextSpi looks like:
private KeyFactorySpi nextSpi(KeyFactorySpi oldSpi) {
    synchronized (lock) {
        // Truncated for brevity
    }
}

And KeyFactory#generatePublic looks something like so:
public final PublicKey generatePublic(KeySpec keySpec)
        throws InvalidKeySpecException {
    if (serviceIterator == null) {
        return spi.engineGeneratePublic(keySpec);
    }
    // Truncated for brevity
}

It does look like the class does some locking in parts and not others, which (I imagine was for a purpose and) means that they took thread-saftey into consideration. It could mean that they had intended for it to be safe to construct and use a factory for the same algorithm on multiple threads but it might also not mean that. You would need to exhaustively check the code paths for race conditions.
That said, please don't build anything assuming a contract other than what's in the Javadoc.
","819","<java><multithreading><public-key-encryption>","5","4","2","2017-05-04 03:56:22","43773626","9","","207421","","2017-05-04 02:57:57","2017-05-03 11:16:03",""
"36209725","How to put the key for image encryption using AES Algorithm","I'm newbie in java. I already have a code for AES algorithm for image encryption. My problem is I just want to add the key for my encrypt image and only the person I give the key can only decrypt the image example such as symmetric encryption, md5,pgp or anything else you all should suggest me for use as the key. Here is my code
package crypto;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import javax.crypto.Cipher;
import javax.crypto.CipherOutputStream;
import javax.crypto.spec.SecretKeySpec;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author fIZI/Z47
 */
public class ImageCrypto extends javax.swing.JFrame {

    /**
     * Creates new form ImageCrypto
     */
    public ImageCrypto() {
        initComponents();
    }

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        // TODO add your handling code here:
        JFileChooser chooser = new JFileChooser();
        chooser.showOpenDialog(null);
        File f = chooser.getSelectedFile();
        file_path.setText(f.getAbsolutePath());
    }                                        

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        // TODO add your handling code here:
        try{
            FileInputStream file = new FileInputStream(file_path.getText());
            FileOutputStream outStream = new FileOutputStream(""C:\\Users\\Z47\\Desktop\\Encrypt Image.jpg"");
            byte k[]=""FiZi1701NuLl5252"".getBytes();
            SecretKeySpec key = new SecretKeySpec(k, ""AES"");
            Cipher enc = Cipher.getInstance(""AES"");
            enc.init(Cipher.ENCRYPT_MODE, key);
            CipherOutputStream cos = new CipherOutputStream(outStream, enc);
            byte[] buf = new byte[1024];
            int read;
            while((read=file.read(buf))!=-1){
                cos.write(buf,0,read);
            }
            file.close();
            outStream.flush();
            cos.close();
            JOptionPane.showMessageDialog(null, ""The image was encrypted successfully !"");
        }catch(Exception e){
            JOptionPane.showMessageDialog(null, e);
        }
    }                                        

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        // TODO add your handling code here:
        try{
            FileInputStream file = new FileInputStream(file_path.getText());
            FileOutputStream outStream = new FileOutputStream(""C:\\Users\\Z47\\Desktop\\Decrypt Image.jpg"");
            byte k[]=""FiZi1701NuLl5252"".getBytes();
            SecretKeySpec key = new SecretKeySpec(k, ""AES"");
            Cipher enc = Cipher.getInstance(""AES"");
            enc.init(Cipher.DECRYPT_MODE, key);
            CipherOutputStream cos = new CipherOutputStream(outStream, enc);
            byte[] buf = new byte[1024];
            int read;
            while((read=file.read(buf))!=-1){
                cos.write(buf,0,read);
            }
            file.close();
            outStream.flush();
            cos.close();
            JOptionPane.showMessageDialog(null, ""Success! your image was decrypted. Click OK to preview the image."");
            Runtime.getRuntime().exec(""rundll32 url.dll, FileProtocolHandler ""+""C:\\Users\\Z47\\Desktop\\Decrypt Image.jpg"");
        }catch(Exception e){
            JOptionPane.showMessageDialog(null, e);
        }
    }                                        

    private void file_pathActionPerformed(java.awt.event.ActionEvent evt) {                                          
        // TODO add your handling code here:
    }                                         

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate=""collapsed"" desc="" Look and feel setting code (optional) "">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if (""Nimbus"".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ImageCrypto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ImageCrypto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ImageCrypto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ImageCrypto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ImageCrypto().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify                     
    private javax.swing.JTextField file_path;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JPanel jPanel2;
    // End of variables declaration                   
}

Btw, I'm using netbeans in JFrame and running GUI. Can anyone show full code for the key? by combine with my coding.
","
I just want to add the key for my encrypt image and only the person I
  give the key can only decrypt the image

In your code your secret key is byte[] k.
If you want to securely send that to the recipient along with the encrypted image you might want to consider using an asymmetric key encryption algorithm to encrypt your secret key.
In practice, you would use the recipient's public key to encrypt the key used in the AES algorithm. Only they can decrypt that key in order to decrypt the message.
","819","<java><encryption><public-key-encryption><encryption-symmetric><pgp>","-1","0","1","2018-06-08 17:03:01","36210729","2","2","1816580","","2016-03-24 21:15:47","2016-03-24 20:47:36",""
"5248590","Error while using RSA encryption on BlackBerry","I'm trying to use RSA encryption on Blackberry with their native API's. I made a public/private key pair in Java and saved the Modulus and Exponents of the keys as strings so i can generate the keys from this for encryption and decryption. The following code is from the client side and i'm getting a InvalidKeyException and the backtrace is null so I don't know what's happening: 
public byte[] Encrypt(byte[] data)
  {
      try {
            RSACryptoSystem cryptoSystem = new RSACryptoSystem(1024);
            RSAPublicKey publicKey = new RSAPublicKey(cryptoSystem, _publicKeyExponent.getBytes(), _publicKeyModulus.getBytes());
            RSAEncryptorEngine encryptorEngine = new RSAEncryptorEngine(publicKey);

            PKCS5FormatterEngine formatterEngine = new PKCS5FormatterEngine( encryptorEngine );

            ByteArrayOutputStream output = new ByteArrayOutputStream();
            BlockEncryptor encryptor = new BlockEncryptor( formatterEngine, output );

            encryptor.write(data);
            encryptor.close();
            output.close();

            return output.toByteArray();
        } catch (InvalidKeyException e) {
            // TODO Auto-generated catch block
            System.out.println();
            e.printStackTrace();
        } catch (CryptoTokenException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        } catch (CryptoUnsupportedOperationException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        } catch (UnsupportedCryptoSystemException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
      return null;
  } 

And this is what i did server side to generate my keys:
try {
            keyPairGenerator = KeyPairGenerator.getInstance(""RSA"");
            keyPairGenerator.initialize(1024);
            keyFactory = KeyFactory.getInstance(""RSA"");
        } catch (NoSuchAlgorithmException ex) {
            Logger.getLogger(EncryptorDecryptor.class.getName()).log(Level.SEVERE, null, ex);
        }

        keyPair = keyPairGenerator.generateKeyPair();
        publicKey = keyPair.getPublic();
        privateKey = keyPair.getPrivate();

        try {
            publicKeySpec = keyFactory.getKeySpec(publicKey, RSAPublicKeySpec.class);
            privateKeySpec = keyFactory.getKeySpec(privateKey, RSAPrivateKeySpec.class);
        } catch (InvalidKeySpecException ex) {
            Logger.getLogger(EncryptorDecryptor.class.getName()).log(Level.SEVERE, null, ex);
        }

        privateKeyModulus = privateKeySpec.getModulus().toString();
        privateKeyExponent = privateKeySpec.getPrivateExponent().toString();

        publicKeyModulus = publicKeySpec.getModulus().toString();
        publicKeyExponent = publicKeySpec.getPublicExponent().toString();

Any ideas?
EDIT: i tried doing a simple test on the server by encrypting and decrypting there and when when I try to decrypt I get a IllegalBlockSizeException these are my encrytion and decryption methods (server side):
public byte[] Decrypt(byte[] data)
    {
        try {
            Cipher cipher = Cipher.getInstance(""RSA"");
            cipher.init(Cipher.DECRYPT_MODE, privateKey);
            byte[] cipherData = cipher.doFinal(data);
            return cipherData;
        } catch (NoSuchAlgorithmException ex) {
            Logger.getLogger(EncryptorDecryptor.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NoSuchPaddingException ex) {
            Logger.getLogger(EncryptorDecryptor.class.getName()).log(Level.SEVERE, null, ex);
        } catch(IllegalBlockSizeException ex) {
            Logger.getLogger(EncryptorDecryptor.class.getName()).log(Level.SEVERE, null, ex);
        } catch(InvalidKeyException ex) {
            Logger.getLogger(EncryptorDecryptor.class.getName()).log(Level.SEVERE, null, ex);
        } catch(BadPaddingException ex) {
            Logger.getLogger(EncryptorDecryptor.class.getName()).log(Level.SEVERE, null, ex);
        }

        return null;
    }

    public byte[] Encrypt(byte[] data)
    {
        try {
            Cipher cipher = Cipher.getInstance(""RSA"");
            cipher.init(Cipher.ENCRYPT_MODE, publicKey);
            byte[] cipherData = cipher.doFinal(data);
            return cipherData;
        } catch (NoSuchAlgorithmException ex) {
            Logger.getLogger(EncryptorDecryptor.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NoSuchPaddingException ex) {
            Logger.getLogger(EncryptorDecryptor.class.getName()).log(Level.SEVERE, null, ex);
        } catch(IllegalBlockSizeException ex) {
            Logger.getLogger(EncryptorDecryptor.class.getName()).log(Level.SEVERE, null, ex);
        } catch(InvalidKeyException ex) {
            Logger.getLogger(EncryptorDecryptor.class.getName()).log(Level.SEVERE, null, ex);
        } catch(BadPaddingException ex) {
            Logger.getLogger(EncryptorDecryptor.class.getName()).log(Level.SEVERE, null, ex);
        }

        return null;
    }

And this is the simple test i'm trying:
userName = Base64.encode(encryptorDecryptor.Encrypt(userName.getBytes()));
password = Base64.encode(encryptorDecryptor.Encrypt(password.getBytes()));

userName = new String(encryptorDecryptor.Decrypt(Base64.decode(userName)));
password = new String(encryptorDecryptor.Decrypt(Base64.decode(password)));

","
It is a bug to use String as a container for arbitrary random bytes, e.g. userName = new String(encryptorDecryptor.Encrypt(userName.getBytes()));
 is wrong.
I'm not familiar with Blackberry's Java API but in usually you cannot encrypt more than one block with RSA
the toString() methods on arrays (e.g. publicKeySpec.getModulus().toString()) don't return anything useful. You should be able to figure this out just by looking at the data. This is really a beginner java mistake more than a cryptography issue.
Don't using the default character set for the String constructor and String.getBytes() methods. Always specify a character set, usually ""UTF-8"" is perfect.

That's all I had the patience for.
","819","<blackberry><java-me><rsa><encryption-asymmetric><public-key-encryption>","0","1","1","2011-03-10 13:35:04","5254436","0","3","478108","","2011-03-10 13:35:04","2011-03-09 16:10:48",""
"21433454","PHP&JS Encrypt/sign and validate QR Code","I have a php script that generates a QR Code. This code will be read from a PhoneGap app in JavaScript. This works fine so far but I would like to secure the QR Code so none else can generate other valid codes.
My first thought was to add a hash of the data in the QR Code. but common hash functions are not very secure. For good hash functions I did not find a implementation for JavaScript. Second thought was to use public/private key encryption but here again is JavaScript a problem.
Another huge problem is that the QR Code should be simple. A long encryption will make the small QR Code unreadable.
What would be a good approach to secure a QR Code?
","Add a hash using a shared secret to your ID like this:
$qrcontent = $id . md5($id . $secret);

So to create a new $qrcontent one needs to know the $secret. There are some simple hashes like crc32 so you don't need a fully implemented javascript md5 function for example. You can define how long / secure your hash should be.
","819","<javascript><php><security><hash><public-key-encryption>","3","1","1","2014-02-18 10:22:20","21850729","8","","2137778","","2014-02-11 21:29:24","2014-01-29 14:06:48",""
"41051342","Getting algid parse error when converting from String to Public Key/Private Key","I currently have a public/private key pair in as two separate strings that I am trying to convert back into public/private key format. 
I am currently reading in the string from a .auth file, not a public key file and private key file so I can't use openssl pkcs8 -topk8... to get rid of the algid parse error. I am reading in the keys like so:
BufferedReader br = new BufferedReader(new FileReader(authFileName));
String publicK = br.readLine();
String privateK = br.readLine();
br.close();

From there, I am converting the files back into byte arrays like so using the Base64 Decoder like so:
byte[] privateBytes = Base64.getDecoder().decode(privateK);
byte[] publicBytes = Base64.getDecoder().decode(publicK);

Lastly I am converting those byte arrays into Public and Private keys using a key factory. Here is the code:
KeyFactory keyFactory = KeyFactory.getInstance(""RSA"");
PrivateKey privateKey = keyFactory.generatePrivate(new PKCS8EncodedKeySpec(privateBytes));
PublicKey publicKey = keyFactory.generatePublic(new X509EncodedKeySpec(publicBytes));

When my code tries to generate the private and public keys using the key factory, that is when it throws the InvalidKeyException algid parse error
I have looked online and noticed many people saying adding the following line to my code should fix the problem:
Security.addProvider(new BouncyCastleProvider());

But it didn't. Is there any other solution, besides bouncy castle and openssl, that I should try that worked for anyone else?
","","816","<java><security><public-key-encryption><private-key>","0","","0","2016-12-09 00:43:59","","3","","-1","","2017-05-23 12:30:50","2016-12-09 00:43:59",""
"49145592","How to protect my encryption key in Android?","I have implemented SQLCipher in my Android application to make it's database secure. SQLCipher needs a key to encrypt database file. The problem I am facing is key protection, if my application is used on a rooted device or is reverse engineered then my key will be exposed and database can be decrypted. 
Please note that my application doesn't ask for password every time user opens it and thus user entered password can't be used as the key. I want to implement behavior like facebook, whatsapp applications, which encrypts data using private-key/key without asking any password and keeps the users logged in all the time. Where and how these applications store their key?
Please suggest a solution/algorithm that will protect the key.Also, does Android OS provides any such functionality for data protection/management?   
","You can use Andriod Keystore to encrypt your SQLCipher password.
I had the same issue while ago, where SQLCipher was used to secure data, but password itself was not. This allowed a security flaw where a simple decompilation would reveal the password as it was in the form of string constant.
My solution was:

Generate a random number when app starts at first. (You can change this behaviour for whatever suits you)
Encrypt this number using Android Keystore.
The original form of the number is gone once its encrypted.
Save this in Prefs.
Now, whenever SQLCipher needs password, it will decrypt it and use it.
Since Android Keystore is providing keys at runtime, and keys are strictly app specific, it will be hard to break this database.
Although everything can be broken but this approach will make it a lot harder for the attacker to retrieve data from DB, or DB password.

Here is a sample project I made which also has a SQLCipher use case same as yours.
Encryption Helper for Encrypting Passwords
Use case for SQLCipher
Note that the term you are using as encryption key is used as password/number for DB in above discussion.
","811","<android><public-key-encryption><sqlcipher-android>","7","6","2","2018-11-01 07:08:58","49145709","0","2","2664350","","2018-03-07 07:52:06","2018-03-07 06:33:45",""
"49145592","How to protect my encryption key in Android?","I have implemented SQLCipher in my Android application to make it's database secure. SQLCipher needs a key to encrypt database file. The problem I am facing is key protection, if my application is used on a rooted device or is reverse engineered then my key will be exposed and database can be decrypted. 
Please note that my application doesn't ask for password every time user opens it and thus user entered password can't be used as the key. I want to implement behavior like facebook, whatsapp applications, which encrypts data using private-key/key without asking any password and keeps the users logged in all the time. Where and how these applications store their key?
Please suggest a solution/algorithm that will protect the key.Also, does Android OS provides any such functionality for data protection/management?   
","Personally, I use substring to select sequences or unique characters from String values, then I concatenate it to get my key, it's pretty barbaric but I do not have found other effective solution.
","811","<android><public-key-encryption><sqlcipher-android>","7","-1","2","2018-11-01 07:08:58","49145709","0","2","2664350","","2018-03-07 07:52:06","2018-03-07 06:33:45",""
"12610360","Windows Script for connecting to remote SFTP server with public key authentication","I am trying to connect to a SFTP server for a client of ours and send files in an automated process using MS windows. The details I have received from the client do not include the password. I instead have the public-private key pair using PuTTY.
The typical connection string used is as follows:
open sftp://username:password.SFTPURL:port -hostkey=""ssh-dss 1024 XXXXXXX""
I do not however understand how to specify the private key in this connection instead of the password. how do I tell the script where the private key lies and is there a particular key word to use when connecting using public key?
I am new at this so please bear with me.
Thanks!
","","811","<windows><sftp><putty><public-key-encryption>","2","","0","2012-09-27 11:12:42","","0","","1025222","","2012-09-27 11:12:42","2012-09-26 21:03:27",""
"17567539","Encryption with the Public key of receiver","I am trying to encrypt my string file with the receiver public's key but I could not able to do that. I am using the bouncy castle method to generate the keys. I exported the public key and made it global. now i want to encrypt the message with this public key but I am unable to do that. please help me out. please have a look in my code.
    string PubKey;                  // global variable
    string inputMessage = 12345;    // message to be encrypted

     private void KeyGeneration() //   function for generating the keys. 
    {
        RsaKeyPairGenerator generator = new RsaKeyPairGenerator();
        generator.Init(new KeyGenerationParameters(new SecureRandom(), 1024));
        AsymmetricCipherKeyPair keyPair = generator.GenerateKeyPair();
        RsaKeyParameters publicKey = (RsaKeyParameters)keyPair.Public;

        // Save to export format

        SubjectPublicKeyInfo info = SubjectPublicKeyInfoFactory.CreateSubjectPublicKeyInfo(keyPair.Public);
        byte[] ret = info.GetEncoded();
        PubKey = Convert.ToBase64String(ret);


        PrivateKeyInfo pKinfo = PrivateKeyInfoFactory.CreatePrivateKeyInfo(keyPair.Private);
        byte[] privRet = pKinfo.GetEncoded();
        PrivKey = Convert.ToBase64String(privRet);
    }


     private void Create_PC_Req_Click(object sender, EventArgs e) // this is my button event I want to encrypt my message here 
    {


        UTF8Encoding utf8enc = new UTF8Encoding();
        byte[] inputBytes = utf8enc.GetBytes(inputMessage);

        RsaKeyPairGenerator rsaKeyPairGnr = new RsaKeyPairGenerator();
        rsaKeyPairGnr.Init(new KeyGenerationParameters(new SecureRandom(), 512));
        AsymmetricCipherKeyPair keyPair = rsaKeyPairGnr.GenerateKeyPair();
        RsaKeyParameters publicKey = (RsaKeyParameters)keyPair.Public;

        IAsymmetricBlockCipher cipher = new RsaEngine();

        // this is the way of encryption when you are generating a keys here and extracting a public key here but I want to encrypt my message with the public key which I made global.

        cipher.Init(true, publicKey);

        //Encrypting the input bytes
        byte[] cipheredBytes = cipher.ProcessBlock(inputBytes, 0, inputMessage.Length);
        string p = utf8enc.GetString(cipheredBytes);
        textBox4.Text = p;
    }

","","809","<c#><.net><bouncycastle><public-key-encryption>","0","","0","2013-07-10 10:12:30","","6","","787511","","2013-07-10 10:12:30","2013-07-10 09:51:39",""
"25878671","Raw RSA encryption and decryption using Crypto++","I'm using Raw RSA encryption and decryption. tutorial and Raw RSA from the Crypto++ wiki to develop a simple code that encrypt/decrypt string using RSA using Crypto++.
I'm using Visual studio 2010. The code run without error. But, I don't understand what is the significant of n, e, d ? Why can't I change it?
I respected the algorithm of RSA and I chose this value:
    // La clé publique est la paire (e, n) et la clé secrète est d, donc aussi p et q.
    // p = 3, q = 11, n = 3 x 11, f = (11–1).(3–1) = 20. On choisit d=7 (7 et 20 sont bien premiers entre eux).
    // e = 3 car e.d= 20 * 1 + 1

But always I have debug error:


Can someone help me ?
"," // p = 3, q = 11, n = 3 x 11, f = (11–1).(3–1) = 20. On choisit d=7
 //    (7 et 20 sont bien premiers entre eux).
 // e = 3 car e.d= 20 * 1 + 1

These parameters are artificially small. Probably too small.
One of the properties of RSA is the message size must be smaller than the modulus size. 3x11 = 33, and that's 25 (give or take). So your message must be smaller than 5 bits.
Crypto++ specifies messages sizes in bytes, not bits. So you will likely never be able to encrypt anything under the modulus of 33.
Unfortunately, the cited wiki page does not discuss that size_in_bits(message) < size_in_bits(modulus). And I can't change it at the moment because Crypto++ is broken for writes (reads are OK).
Also, here's from rsa.cpp:
if (modulusSize < 16)
  throw InvalidArgument(""InvertibleRSAFunction: specified modulus size is too small"");

So you should probably specify a modulus at least 216 in size. 216 is 65536.
Finally, until we see the relevant parts of your program and error message, this is just speculation.
","809","<c++><encryption><rsa><public-key-encryption><crypto++>","2","0","1","2014-09-16 23:59:30","25879731","7","","3531447","","2014-09-16 21:58:46","2014-09-16 21:23:59",""
"36130687","Getting modulus and publicExponent from java PublicKey","Hi all I get the public key as follows

OpenSSLRSAPublicKey{modulus=e6f4b594e1757261a98abe478f47b941cf8339933accc57d73d18bb8da906cf628da1949fb71c51f1635d93067ca2993599965f42d26237f63c1bc333de779051c36805f00ab5698a78e5616a7a7b0df487ba0fb3a89592780984562b96387443774331358a5920815bba2e24ad6c6c4ba6c7f52384847b4feea20190acdef000f6ee078352c0e0764e51dab25037d3d9c819a9be9ea240260ca2217ea4b446caf05d14318941a844ee82f567382c9fad8b959481c27785cdf6cb22ecf80f51bddc9f1c918d56b9bdd80ba4e766209069d0cf2012c0f15dbe4a8b5c2588a0ce295c2e90d44a52190289ab2fdceb22feffdadf623cab33e6a2e98be662cd5fecb,publicExponent=10001}

by using the bellow code
KeyPairGenerator kpg;
KeyPair kp;
PublicKey publicKey;
kpg = KeyPairGenerator.getInstance(""RSA"");
kpg.initialize(2048);
kp = kpg.genKeyPair();
publicKey = kp.getPublic();

now i want to get the modulus and publicExponent  from this.
Can any one suggest please...?
","You have to cast the PublicKey to an RSAPublicKey, e.g.
RSAPublicKey rsaPub  = (RSAPublicKey)(kp.getPublic());
BigInteger modulus = rsaPub.getModulus();
BigInteger publicExponent = rsaPub getPublicExponent()

","806","<java><android><rsa><public-key-encryption>","-1","1","1","2016-03-23 14:32:07","","1","","238704","","2016-03-23 14:28:54","2016-03-21 12:11:56",""
"11562057","RSA of large file using C#","
Possible Duplicate:
RSA Encryption, getting bad length 

I am trying to encrypt a large string using RSA. .NET's default implementation lets me encrypt easily small strings, but when I pass large one it throws a CryptographyException: Bad length.
I would like to overcome this, but the problem is that I need to pass the encypted string to another application which I cannot modify (because it's not mine ;-)
So is there an RSA implementation which I can use to load X509 Public Key and then encrypt large strings?
Thank you
","You will need to contrive something in order to accomplish this, perhaps by splitting it into blocks and encrypting each block.
It's not working because the plaintext length in RSA encryption is limited by the length of the key, i.e. it is impossible to encrypt a piece of data larger than the key used to encrypt it.  Generally, a one-off exchange of a symmetric key is performed with RSA, and an agreed-upon symmetric algorithm is used from there.
Also, RSA is (compared to symmetric algorithms) very computationally expensive and breaking large data into many dozens (perhaps hundreds?) of small blocks would suffer terrible performance problems, you'd probably only be able to encrypt a few megabytes per second.  
Strongly consider an alternate approach.
Edit:  Also, consult the documentation of the program that must accept these encrypted strings, because it doesn't help you to use some nonstandard way of encrypting them if the program will be unable to decrypt them.
","806","<c#><.net><rsa><x509certificate><public-key-encryption>","0","3","2","2012-07-19 14:05:19","11562221","3","1","-1","","2017-05-23 10:09:35","2012-07-19 13:34:22","2012-07-20 14:10:26"
"11562057","RSA of large file using C#","
Possible Duplicate:
RSA Encryption, getting bad length 

I am trying to encrypt a large string using RSA. .NET's default implementation lets me encrypt easily small strings, but when I pass large one it throws a CryptographyException: Bad length.
I would like to overcome this, but the problem is that I need to pass the encypted string to another application which I cannot modify (because it's not mine ;-)
So is there an RSA implementation which I can use to load X509 Public Key and then encrypt large strings?
Thank you
","Look at Bouncy Castle cryptography library:
http://www.bouncycastle.org/csharp/index.html
I think this library is more flexible then standard from .Net. I used in scenarios when it can do things that standard can't.
Also as a workaround you can split large strings into smaller with length corresponding to encryption key and then use standard .Net classes.
And as final. Are you sure that it's not a problem with padding? When its padding you should fill some part of string to get right length.
","806","<c#><.net><rsa><x509certificate><public-key-encryption>","0","1","2","2012-07-19 14:05:19","11562221","3","1","-1","","2017-05-23 10:09:35","2012-07-19 13:34:22","2012-07-20 14:10:26"
"33317847","Setting environment variable through SSH git push","I'm reading Scott Chacon's Git book, and just wanted to confirm something. This part:

You also have access to the user doing the pushing if the push is being run over SSH. If you’ve allowed everyone to connect with a single user (like “git”) via public-key authentication, you may have to give that user a shell wrapper that determines which user is connecting based on the public key, and set an environment variable accordingly. Here we’ll assume the connecting user is in the $USER environment variable, so your update script begins by gathering all the information you need:
#!/usr/bin/env ruby

$refname = ARGV[0]
$oldrev  = ARGV[1]
$newrev  = ARGV[2]
$user    = ENV['USER']

puts ""Enforcing Policies...""
puts ""(#{$refname}) (#{$oldrev[0,6]}) (#{$newrev[0,6]})""


I presume that it's required for the pusher to install a script wrapping around the ssh command. For example, the script would perhaps set the GIT_SSH or GIT_SSH_COMMAND environment variable to point to a shell script that may have something like
#!/bin/bash

HOST=$1
shift
ssh -i ~/.ssh/id_rsa $HOST USER=foo $@

Now anytime a git push is done and the remote contains an ssh url, it will invoke that script and update the refs while passing the USER environment variable.
The other way would be to use ""SendEnv USER"" in ~/.ssh/config on the local machine and ""AcceptEnv USER"" in /etc/ssh/sshd_config on the remote git server.
Any other ways that come to mind that expand on the part in bold? I'm particularly looking for a way that doesn't require the pusher to do much work in regards to configuring his environment. Assume everyone's running some form of Windows and needs to setup ssh through some Unix emulator like Cygwin.
","This example is not about the shell or the ssh command.  
It is taken from the ""Server-Side Hook"" section, and describe how to tailored the update hook based on the user (authenticated through ssh)

Here we’ll assume the connecting user is in the $USER environment variable

There is no indication on how this is done, but gitolite (a perl-based authorization layer, which very much needs the user authenticated id) is using ssh forced command: each public key in the ~git/.ssh/authorized_keys include the call to a wrapper script which takes in parameters the user id.
That script will:

execute the git command
fails if this the command is anything else but a git command

In the ~git/.ssh/authorized_keys, you don't have just the public key, but the call to the wrapper with the user id as a parameter:
command=""/wrapper/script userid"",no-port-forwarding,no-X11-for        warding,no-agent-forwarding,no-pty ssh-rsa AAAAB3N...
         ^^^^^^^^^^^^^^^
         (forced command)

You can see the environment variable being set by the (gitolite here) wrapper script in src/gitolite-shell#L102-L108.
","804","<git><ssh><environment-variables><public-key-encryption><githooks>","1","1","1","2015-10-24 12:37:00","33318205","0","1","","","","2015-10-24 11:50:12",""
"31944965","The product of two large prime numbers in encryption","Ok, so I understand the importance of using the product of two large primes, but why not use the product of three large primes instead? 
Would this make the encryption weaker in some way?
If the answer is not a simple one, then I would appreciate a technical answer if possible.
","The larger the primes, the better the encryption.
Given a specific amount of available processing power, the best prime encryption relies on two large primes.
","802","<primes><public-key-encryption><prime-factoring>","1","0","4","2015-08-11 15:59:17","","0","","","","","2015-08-11 14:44:51",""
"31944965","The product of two large prime numbers in encryption","Ok, so I understand the importance of using the product of two large primes, but why not use the product of three large primes instead? 
Would this make the encryption weaker in some way?
If the answer is not a simple one, then I would appreciate a technical answer if possible.
","The answer is simple, really. For numbers of a given size (e.g. 1024 bits) the toughest factoring problem is when the number factors into two primes (assuming that they are not too close to the square root of the overall number). Intuitively, it is easier to fish in oceans that contain more fish. It is easier to find one of three primes than one of two.
","802","<primes><public-key-encryption><prime-factoring>","1","0","4","2015-08-11 15:59:17","","0","","","","","2015-08-11 14:44:51",""
"31944965","The product of two large prime numbers in encryption","Ok, so I understand the importance of using the product of two large primes, but why not use the product of three large primes instead? 
Would this make the encryption weaker in some way?
If the answer is not a simple one, then I would appreciate a technical answer if possible.
","
The public and the private key-generation algorithm is the most
  complex part of RSA cryptography. Two large prime numbers, p and q,
  are generated using the Rabin-Miller primality test algorithm. A
  modulus n is calculated by multiplying p and q. This number is used by
  both the public and private keys and provides the link between them.


Between sender and receiver you need 2 keys public and private. But for that you can use any number of primes but generally 2 is used. 

But till now the performance of the algorithm doesn't improve due to any further increase in the strength of the algorithm. 
Also it doesn't make any hard for the attackers. 
The processing time for encryption and decryption will be much more higher. You can check some books on cryptanalysis.

","802","<primes><public-key-encryption><prime-factoring>","1","0","4","2015-08-11 15:59:17","","0","","","","","2015-08-11 14:44:51",""
"31944965","The product of two large prime numbers in encryption","Ok, so I understand the importance of using the product of two large primes, but why not use the product of three large primes instead? 
Would this make the encryption weaker in some way?
If the answer is not a simple one, then I would appreciate a technical answer if possible.
","Say you have a 1024-bit key. With two primes, each is about 512 bits; with three primes, each is about 341 bits. Current factorization methods require exponential time, so each additional bit requires about double the time to find the factor. Thus, two primes are substantially stronger than three primes.
To be specific, a 768-bit key has been factored, and reported in the mathematical literature, which means that a 341-bit factor can be found (the 768-bit factorization took about 2000 PC-years, so it's not easy, but possible). No one has yet reported factorization of a 1024-bit key (although there are doubtless people working on it).
","802","<primes><public-key-encryption><prime-factoring>","1","1","4","2015-08-11 15:59:17","","0","","","","","2015-08-11 14:44:51",""
"18036469","SSL Client Certificate authentication","Is it possible to make a program which uses client certificate authentication with only public and private key( I have not generated any certificate i have only public and private key).
Simply,
I want to make authentication on server with client certificate authentication. 
But it is hard to make client certificate programmatically. 
i want to make client certificate authentication with only public and private key (i have only public and private key, no certificate).
It is possible to send server public key instead of client certificate for client certificate authentication ?
","
It is possible to send server public key instead of client certificate for client certificate authentication ?

No. The SSL protocol is already defined. And if it was possible it wouldn't accomplish the objective. The server's public key doesn't authenticate the server's identity in any way shape or form.
","798","<ssl><public-key-encryption><client-certificates>","0","1","2","2013-08-04 16:29:04","18038793","0","0","1338215","","2013-08-03 19:51:55","2013-08-03 19:29:31",""
"18036469","SSL Client Certificate authentication","Is it possible to make a program which uses client certificate authentication with only public and private key( I have not generated any certificate i have only public and private key).
Simply,
I want to make authentication on server with client certificate authentication. 
But it is hard to make client certificate programmatically. 
i want to make client certificate authentication with only public and private key (i have only public and private key, no certificate).
It is possible to send server public key instead of client certificate for client certificate authentication ?
","The TLS protocol only allows for certificates to be exchanged, not raw public keys. Even ""PGP keys"" (if you wanted to replace X.509 with OpenPGP for authentication in TLS, which is much less supported) are in fact certificates (they're the signed combination of a public key and a set of identifiers and attributes).
This being said, you can perform client authentication using self-signed client certificates and rely on their public keys (but you will need to verify this public key against something your server already knows, such as a known list). You need to understand the security implications for implementing this first. This is not quite the same problem as self-signed server certificates. (I'd suggest keeping a more traditional approach to verifying the server certificate.)
You can make the client send a self-signed certificate (possibly using certain tricks regarding the CA list advertised by the server) and either perform the verification in the TLS stack or later in the application.
Note that many application containers (e.g. Tomcat/Jetty in Java) expect the SSL/TLS layer to verify the client certificate. Hence, if you skip the authentication there (and prefer to do it later on within the container or as part of the application), many application frameworks will be confused. You need to be quite careful to make sure that authentication is actually performed somewhere before performing any action that requires authentication in your application.
For example, it can be OK to have a trust manager that lets any client certificate through in Tomcat/Jetty, but you can't rely on the javax.servlet.request.X509Certificate request attribute to have been verified in any way (which most frameworks would otherwise expect). You'd need to implement some verification logic within your application: for example, having a filter before any authenticated feature that compares the public key in this client certificate with your known list of public keys (or however you want to match the public key to an identifier). Alternatively, you can also perform this verification within your custom trust manager (in Java), this will require less work within the applications.
You could do something similar in an Apache Httpd + PHP setup (for example), using SSLVerifyClient optional_no_ca. Again, your PHP application could not rely on the certificate having been verified, so you would have to implement so verification there too.
Don't do any of this unless you understand at which stage the certificate information you get has been verified.
","798","<ssl><public-key-encryption><client-certificates>","0","3","2","2013-08-04 16:29:04","18038793","0","0","1338215","","2013-08-03 19:51:55","2013-08-03 19:29:31",""
"40406754","How do I properly generate the .pem file(s ?) needed for the grpc java auth example?","For some background, I am following this guide as I am building up some grpc microservices with auth.
I am attempting to get the very basic java example going, and the keys that I am generating are not allowing the ssl connection to happen.
Here is my server code.
server = NettyServer.forPort(8050)
    .useTransportSecurity(
        new File(serverCert)
        new File(serverKey)
    )
    .addService(
        new TestService(); // my implementation of the grpc service
    )
    .build();

server.start();

Here is my client code
channel = NettyChannelBuilder.forAddress(""localhost"", 8050)
    .sslContext(
        GrpcSslContexts
            .forClient()
            .trustManager(
                new File(serverCert)
            ).build()
    ).build();

Now, when I go to generate the key
openssl req -newkey rsa:2048 -new -nodes -x509 -days 3650 -keyout key.pem -out cert.pem

After inputting some information about myself, I end up with 2 files
>> ls 
key.pem cert.pem

in my code above, serverKey refers to ""key.pem"" and serverCert refers to ""cert.pem""
I am able  to start the server without issue. When I attempt to connect with the client, I get the following error
INFO: [ManagedChannelImpl@6ddf90b0] Created with target localhost:8050
Nov 03, 2016 11:25:16 AM getapi.example.TestClient greet
INFO: Will try to greet world ... 
Nov 03, 2016 11:25:17 AM getapi.example.TestClient greet
WARNING: RPC failed: Status{code=UNAVAILABLE, description=null, cause=javax.net.ssl.SSLHandshakeException: General OpenSslEngine problem}
Nov 03, 2016 11:25:17 AM io.grpc.internal.ManagedChannelImpl maybeTerminateChannel
INFO: [ManagedChannelImpl@6ddf90b0] Terminated

And the most relevant line seems to be this
javax.net.ssl.SSLHandshakeException: General OpenSslEngine problem

I will admit that I basically have no idea about keys/certs/pem files beyond a very basic understanding of public key cryptography.
Could someone shed some light on how to properly generate the key files that grpc is expecting?
","I was creating my keys incorrectly. Here is the openssl command
openssl req -x509 -days 365 -nodes -newkey rsa:1024 -keyout key.pem -out cert.pem

When it asked for the common name, I originally put my IP address. This was not correct.
I can't speak for all use cases, but the appropriate thing to do here was to instead use ""localhost""
","797","<java><ssl><public-key-encryption><pem><grpc>","2","2","1","2016-11-07 19:19:11","40472914","2","2","","","","2016-11-03 16:31:31",""
"8647092","How to verify a public key in string/byte[] format against certificates in bks store","I want to verify if a certificate with a certain public key exits in android keystore or not.I have key which is holded in a string.How do I verify if the corresponding certificate is present in keystore.
When checked the apis i found certificate.verify(mykey); is the only option.but mykey sholud be of type PublicKey and I have it in string.
String is 0r1wxn7wIXJuS/hDnDvectD2VTmel9akk8awIWAXIRo= .....this is a hash of public key..i have to return back the certficate corresponding to this key.
Can anyone help me ?
Can anyone help me ?
Regards
kozlov
","KeyStore store = ... ;
byte[] target = ... ; // Base-64 decode your string.
MessageDigest digest = MessageDigest.getInstance(algorithm);
Enumeration<String> aliases = store.aliases();
while(aliases.hasMoreElements()) {
  String alias = aliases.nextElement();
  Certificate c = store.getCertificate(alias);
  if (c == null)
    continue;
  PublicKey pub = c.getPublicKey();
  byte[] hash = digest.digest(pub.getEncoded());
  if (MessageDigest.isEqual(hash, target)) {
    // Certificate ""c"" is a match.
  }
}

","796","<android><encryption><certificate><public-key-encryption><public-key>","0","0","1","2011-12-28 08:23:32","8653458","2","3","642583","","2011-12-28 03:57:01","2011-12-27 16:52:41",""
"4661260",".Net Skipping Code","I am having a strange problem. I am working on a .net windows project using c# code behind. I am trying to encrypt/decrypt files using public/private keys. This has happened to me a few times since I start working on encryption. The actual issue of how to get encryption to work will be another posting later. 
The problem is that while stepping through my code the pointer exits the routine. It does not crash or get caught in the try/catch block. 
In the case below the line to get the public key works, but the line to get the private key does not. it just skips out and returns to the calling module. 
string publicKey; // gets the public key
string privateKey; // gets the private key
try
{
    CspParameters cspParam = new CspParameters();
    cspParam.Flags = CspProviderFlags.UseMachineKeyStore;
    System.Security.Cryptography.RSACryptoServiceProvider RSA =
        new System.Security.Cryptography.RSACryptoServiceProvider(cspParam);
    //        The key information
    //from the cspParam object above can be saved via
    //select the;
    publicKey = RSA.ToXmlString(false); // gets the public key
    privateKey = RSA.ToXmlString(true); // gets the private key
    string x = publicKey;
}
catch (Exception ex)
{
    clsGetMessage.DisplayError(ex);
}

","Since PrivateKey is not used anywhere, maybe function call is cut away by compiler?
","795","<c#><windows><visual-studio><public-key-encryption>","3","0","2","2011-01-11 19:13:39","4661610","4","0","76337","","2011-01-11 18:40:41","2011-01-11 18:32:41",""
"4661260",".Net Skipping Code","I am having a strange problem. I am working on a .net windows project using c# code behind. I am trying to encrypt/decrypt files using public/private keys. This has happened to me a few times since I start working on encryption. The actual issue of how to get encryption to work will be another posting later. 
The problem is that while stepping through my code the pointer exits the routine. It does not crash or get caught in the try/catch block. 
In the case below the line to get the public key works, but the line to get the private key does not. it just skips out and returns to the calling module. 
string publicKey; // gets the public key
string privateKey; // gets the private key
try
{
    CspParameters cspParam = new CspParameters();
    cspParam.Flags = CspProviderFlags.UseMachineKeyStore;
    System.Security.Cryptography.RSACryptoServiceProvider RSA =
        new System.Security.Cryptography.RSACryptoServiceProvider(cspParam);
    //        The key information
    //from the cspParam object above can be saved via
    //select the;
    publicKey = RSA.ToXmlString(false); // gets the public key
    privateKey = RSA.ToXmlString(true); // gets the private key
    string x = publicKey;
}
catch (Exception ex)
{
    clsGetMessage.DisplayError(ex);
}

","Did you say this based on the debugging using VS? 
did you verify the stack trace or logs to see if the method is called?
VS debuggers may guide you wrong in multi threaded cases.
","795","<c#><windows><visual-studio><public-key-encryption>","3","2","2","2011-01-11 19:13:39","4661610","4","0","76337","","2011-01-11 18:40:41","2011-01-11 18:32:41",""
"25736253","Extracting modulus from kSecAttrApplicationTag in iOS","I'm trying to extract a modulus from kSecAttrApplicationTag (where I get the public key information from a URL). I'd like to compare the public key which comes from server and the manual input. If both are the same, then we will allow the user to proceed. Otherwise, it will cancel the user's request. 
This is the piece of code:
SecTrustRef trust = [protectionSpace serverTrust];
SecKeyRef publicKey = SecTrustCopyPublicKey(trust); // here i'm getting complete SecKeyRef info
NSMutableDictionary * queryPublicKey = [[NSMutableDictionary alloc] init];
[queryPublicKey setObject:(__bridge id)publicKey forKey:(__bridge id)kSecAttrApplicationTag];

I tried getting the modulus using kSecAttrApplicationTag and publickey also but no luck.
Output for kSecAttrApplicationTag key is:
{
atag = ""<SecKeyRef algorithm id: 1, key type: RSAPublicKey, version: 2, block size: 2048 bits, exponent: {hex: 10001, decimal: 65537}, modulus: 98A8819BAEA1361029F78D1FA35B4A39A9C6D017501BD56C8D656CAC0800DE90BCF93D465CC7CAFB697841B3DCF47CE4F35E00CC3CC163, addr: 0xa065400>"";}

Output  for publicKey is the same as kSecAttrApplicationTag  but without {atag =} (it has the rest of the content).
Can some one help me with the solution how to extract the modulus?
","It looks like the atag is XML so there are a few of ways.

Use an XML parser: NSXMLParser.
Use a regular expression: NSString method rangeOfString:options: with the option NSRegularExpressionSearch.
Use NSScanner.

Using a regular expression:
NSString *atag = @""<SecKeyRef algorithm id: 1, key type: RSAPublicKey, version: 2, block size: 2048 bits, exponent: {hex: 10001, decimal: 65537}, modulus: 98A8819BAEA1361029F78D1FA35B4A39A9C6D017501BD56C8D656CAC0800DE90BCF93D465CC7CAFB697841B3DCF47CE4F35E00CC3CC163, addr: 0xa065400>"";

    NSRange range;

    NSString *blockSizeRegex = @""(?<=block size:\\s?)[0-9]+"";
    range = [atag rangeOfString:blockSizeRegex options:NSRegularExpressionSearch];
    if (range.location != NSNotFound) {
        NSString *blockSize = [atag substringWithRange:range];
        NSLog(@""blockSize: %@"", blockSize);
    }

    NSString *modulusRegex = @""(?<=modulus:\\s?)[0-9A-Z]+"";
    range = [atag rangeOfString:modulusRegex options:NSRegularExpressionSearch];
    if (range.location != NSNotFound) {
        NSString *modulus = [atag substringWithRange:range];
        NSLog(@""modulus: %@"", modulus);
    }

    NSString *exponentRegex = @""(?<=decimal:\\s?)[0-9]+"";
    range = [atag rangeOfString:exponentRegex options:NSRegularExpressionSearch];
    if (range.location != NSNotFound) {
        NSString *exponent = [atag substringWithRange:range];
        NSLog(@""exponent: %@"", exponent);
    }

Output:

blockSize: 2048
  modulus: 98A8819BAEA1361029F78D1FA35B4A39A9C6D017501BD56C8D656CAC0800DE90BCF93D465CC7CAFB697841B3DCF47CE4F35E00CC3CC163
  exponent: 65537  

ICU User Guide Regular Expressions
","794","<ios><cocoa-touch><security><openssl><public-key-encryption>","2","2","2","2015-06-12 00:31:59","25742861","0","2","3082978","","2014-09-09 04:29:07","2014-09-09 03:26:50",""
"25736253","Extracting modulus from kSecAttrApplicationTag in iOS","I'm trying to extract a modulus from kSecAttrApplicationTag (where I get the public key information from a URL). I'd like to compare the public key which comes from server and the manual input. If both are the same, then we will allow the user to proceed. Otherwise, it will cancel the user's request. 
This is the piece of code:
SecTrustRef trust = [protectionSpace serverTrust];
SecKeyRef publicKey = SecTrustCopyPublicKey(trust); // here i'm getting complete SecKeyRef info
NSMutableDictionary * queryPublicKey = [[NSMutableDictionary alloc] init];
[queryPublicKey setObject:(__bridge id)publicKey forKey:(__bridge id)kSecAttrApplicationTag];

I tried getting the modulus using kSecAttrApplicationTag and publickey also but no luck.
Output for kSecAttrApplicationTag key is:
{
atag = ""<SecKeyRef algorithm id: 1, key type: RSAPublicKey, version: 2, block size: 2048 bits, exponent: {hex: 10001, decimal: 65537}, modulus: 98A8819BAEA1361029F78D1FA35B4A39A9C6D017501BD56C8D656CAC0800DE90BCF93D465CC7CAFB697841B3DCF47CE4F35E00CC3CC163, addr: 0xa065400>"";}

Output  for publicKey is the same as kSecAttrApplicationTag  but without {atag =} (it has the rest of the content).
Can some one help me with the solution how to extract the modulus?
","Your code stores the value of atag key as a SecKeyRef, which does not respond to NSString methods (it is a CFTypeRef).
Consider using: 
NSString* publicKeyDescription = (NSString*)CFCopyDescription(publicKey);

CFStringRef and NSString are tollfree bridged (you will have to cast the correct bridge cast).
Then with that NSString in hand, you should be able to use the provided answer code to find the modulus inside the string.
","794","<ios><cocoa-touch><security><openssl><public-key-encryption>","2","1","2","2015-06-12 00:31:59","25742861","0","2","3082978","","2014-09-09 04:29:07","2014-09-09 03:26:50",""
"39208194","How can I extract private and public keys from a .CER file?","I have a .CER file on my machine. I would like to print private and public keys from it and store it in DB. How can I do that?
So far, after googling around, this is what I have tried and I am hitting following error.
openssl x509 -inform der -in apple_pay.cer -pubkey -noout > apple_pay.pem

openssl x509 -in apple_pay.pem -text
unable to load certificate
69889:error:0906D06C:PEM routines:PEM_read_bio:no start line:/BuildRoot/Library/Caches/com.apple.xbs/Sources/OpenSSL098/OpenSSL098-59.60.1/src/crypto/pem/pem_lib.c:648:Expecting: TRUSTED CERTIFICATE
KOPC02KW5T9F6T6:ApplePaySwag-Starter chandeln$ 

I also tried following commands from https://www.openssl.org/docs/manmaster/apps/pkey.html
KOPC02KW5T9F6T6:ApplePaySwag-Starter chandeln$ openssl pkey -in apple_pay.pem -text -noout
openssl:Error: 'pkey' is an invalid command.

","After executing openssl x509 -inform der -in apple_pay.cer -pubkey -noout > apple_pay.pem you have public key in apple_pay.pem
openssl x509 works with x509 certificates, so it unable to load public key from apple_pay.pem.
There are no way to extract private key from certificate or public key.
It is main idea of asymmetric cypher.
","790","<openssl><public-key-encryption><private-key><public-key>","1","1","1","2016-08-29 15:44:54","39210199","1","","2325154","","2016-08-29 14:46:15","2016-08-29 14:01:27",""
"18445090","Encrypt data with RSA public key not giving expected results","I'm trying to encrypt data with an RSA public key using openssl.
I have the Java implementation of what I need to do in Objective-C. 
Here's what I have so far:
- (RSA *)rsaFromExponent:(NSString *)exponent modulus:(NSString *)modulus
{
    RSA *rsa_pub = RSA_new();

    const char *N = [modulus UTF8String];
    const char *E = [exponent UTF8String];

    if (!BN_hex2bn(&rsa_pub->n, N))
    {
        // TODO
    }
    printf(""N: %s\n"", N);
    printf(""n: %s\n"", BN_bn2dec(rsa_pub->n));

    if (!BN_hex2bn(&rsa_pub->e, E))
    {
        // TODO
    }
    printf(""E: %s\n"", E);
    printf(""e: %s\n"", BN_bn2dec(rsa_pub->e));

    return rsa_pub;
}

- (NSString *)cleanString:(NSString *)input
{
    NSString *output = input;
    output = [output stringByReplacingOccurrencesOfString:@""<"" withString:@""""];
    output = [output stringByReplacingOccurrencesOfString:@"">"" withString:@""""];
    output = [output stringByReplacingOccurrencesOfString:@"" "" withString:@""""];
    return output;
}

// main code
NSString *exponentB64 = @""AQAB"";
NSString *modulusB64 = @""AKDbnFpblq7LHfWDfGTR48B34MKaHQosMwVu8cCc6fH2pZ8Ypx/OgzG6VJlKHXeELtlo5tddBSJpwnkEQdvkkmwuOpCkacTTLon6EHqX4WwFW+waqHxmj419SxiDDlo9tsbg7vfFIMpKyGzq1zvTAN3TroW+MxogZfZD3/N6dNTzvBoXe/Ca1e/zVwYXKbiegLMjNwsruz/WvuMiNKTK4U3GEmb0gIODd1shAH10ube8Nrz/e1u9kr25VQ+7kZAFjnkPTp2AvNGYHQt35m1TRMQhTylVwTZqFkHC/jMt7WxuS8q7ftjM828wa1fEWTgWYrdkzmqZSK5CHBYSys/N1Ws="";

// 1. decode base64 (http://projectswithlove.com/projects/NSData_Base64.zip)
NSData *exponent = [NSData dataFromBase64String:exponentB64];
NSData *modulus = [NSData dataFromBase64String:modulusB64];

NSString *exponentHex = [self cleanString:[exponent description]];
NSString *modulusHex = [self cleanString:[modulus description]];

// 2. create RSA public key
RSA *rsa_pub = [self rsaFromExponent:exponentHex modulus:modulusHex];

NSString *user = @""TEST"";

// 3. encode base 64
NSData *userData = [user dataUsingEncoding:NSASCIIStringEncoding];
NSString *userB64String = [userData base64EncodedString];

// 4. encrypt
const unsigned char *from = (const unsigned char *)[userB64String cStringUsingEncoding:NSASCIIStringEncoding];
int flen = strlen((const char *)from);
unsigned char *to = (unsigned char *) malloc(RSA_size(rsa_pub));
int padding = RSA_PKCS1_PADDING;
int result = RSA_public_encrypt(flen, from, to, rsa_pub, padding);
if (-1 == result)
{
    NSLog(@""WAT?"");
}
else
{
    NSLog(@""from: %s"", from); // echo VEVTVA==
    NSLog(@""to: %s"", to); // echo something strange with characters like: ~™Ÿû—...
}

// 5. encode base 64
NSString *cipherString = [NSString stringWithCString:(const char *)to
                                            encoding:NSASCIIStringEncoding];
NSData *cipherData = [cipherString dataUsingEncoding:NSASCIIStringEncoding];
NSString *cipherDataB64 = [cipherData base64EncodedString];
NSLog(@""user encrypted b64: %@"", cipherDataB64); // echo null :-(

In Java, I have no problem to base64 encode the encrypted data.
I'm sure I'm doing something wrong but I don't know where because it's not something I do everyday.
Or if you know another way to do this with iOS frameworks like Security.framework.
Thanks in advance.
","Someone else helped me figure it out. I don't know why but I was assuming that the output buffer from RSA_public_encrypt function would be an ascii string. Though it's just bytes as the documentation says too. The char * type often leads me to think it's gonna store a string (it's so wrong I think it's the last time I make this kind of error).
So from step 5:  
// 5. encode base 64
NSData *cipherData = [NSData dataWithBytes:(const void *)to length:result];
NSString *cipherDataB64 = [cipherData base64EncodedString];
NSLog(@""user encrypted b64: %@"", cipherDataB64); // now echo the expected value

","787","<ios><openssl><public-key-encryption>","0","0","1","2014-07-29 19:57:19","18462232","3","2","","","","2013-08-26 13:16:39",""
"30443556","How do JWTs Implement Public-key Cryptography?","This actually breaks down into a lot of separate questions to understand the overall process. 

From what I understand a JWT is just three JSON objects encoded into base64 separately from one another. Then the Base64 strings are separated by periods. This is done purely for ""shorter message"" purposes? 
These include a header, ""payload,"" and signature. The header and payload are 100% available to read by anyone who intercepts them. They are just base64 strings that can be decoded into JSON and read. 
Then the MAGIC: The server receives the SIGNATURE, which cannot be decoded. The signature is actually a hash of the header, payload, AND a secret key. So the server takes the header, the payload, and ITS OWN secret key, and makes a hash. If this hash MATCHES the signature that came with the message, the message is trusted. If the signatures DO NOT match, the message is invalid.

My problem with all this? Where are the two separate keys here? It seems that the key used to encrypt the message and the key used to decrypt the message are the same. This is the root of my question - if you answer nothing else, please help with this. 
Other than that, I wonder if I understand the process correctly? Also, where is the standard ""agreeing on a public key"" and then trading ""mixtures"" of public/private keys occurring here? All I see is the same key being used to encode/decode. But when did the agreement happen? Viewing this in context of .NET and Auth0 btw, but overall q. 

Random stuff I watched/read/used if anyone is interested on seeing this q later:
Summary of JWTs: https://scotch.io/tutorials/the-anatomy-of-a-json-web-token
Public-key/Assymetric Cryptography: https://youtu.be/3QnD2c4Xovk
Hashing: http://www.webopedia.com/TERM/H/hashing.html
Base64: http://en.wikipedia.org/wiki/Base64
","Firstly, JSON Object Signing and Encryption standards (JOSE) use base64url encoding and not straight base64 encoding, which differs slightly.

JWT header and payload are JSON objects but the signature is not, that's a base64url encoded binary blob
the whole JWT is available to anyone who intercepts it, all 3 parts of it
you're describing a symmetric key algorithm, where sender and receiver use the same shared key; that is just one option for JWTS, another option is to use public/private key pairs for signing/validation/encryption/decryption

As with all crypto, agreement on keys needs to happen out of band.
","787","<public-key-encryption><jwt><auth0>","3","3","2","2015-05-26 02:05:48","","0","1","","","","2015-05-25 17:48:56",""
"30443556","How do JWTs Implement Public-key Cryptography?","This actually breaks down into a lot of separate questions to understand the overall process. 

From what I understand a JWT is just three JSON objects encoded into base64 separately from one another. Then the Base64 strings are separated by periods. This is done purely for ""shorter message"" purposes? 
These include a header, ""payload,"" and signature. The header and payload are 100% available to read by anyone who intercepts them. They are just base64 strings that can be decoded into JSON and read. 
Then the MAGIC: The server receives the SIGNATURE, which cannot be decoded. The signature is actually a hash of the header, payload, AND a secret key. So the server takes the header, the payload, and ITS OWN secret key, and makes a hash. If this hash MATCHES the signature that came with the message, the message is trusted. If the signatures DO NOT match, the message is invalid.

My problem with all this? Where are the two separate keys here? It seems that the key used to encrypt the message and the key used to decrypt the message are the same. This is the root of my question - if you answer nothing else, please help with this. 
Other than that, I wonder if I understand the process correctly? Also, where is the standard ""agreeing on a public key"" and then trading ""mixtures"" of public/private keys occurring here? All I see is the same key being used to encode/decode. But when did the agreement happen? Viewing this in context of .NET and Auth0 btw, but overall q. 

Random stuff I watched/read/used if anyone is interested on seeing this q later:
Summary of JWTs: https://scotch.io/tutorials/the-anatomy-of-a-json-web-token
Public-key/Assymetric Cryptography: https://youtu.be/3QnD2c4Xovk
Hashing: http://www.webopedia.com/TERM/H/hashing.html
Base64: http://en.wikipedia.org/wiki/Base64
","

Then the MAGIC: The server receives the SIGNATURE, which cannot be decoded. The signature is actually a hash of the header, payload, AND
  a secret key. So the server takes the header, the payload, and ITS OWN
  secret key, and makes a hash. If this hash MATCHES the signature that
  came with the message, the message is trusted. If the signatures DO
  NOT match, the message is invalid.


There is no magic here.  JWT supports four well-known signature and MAC (message authentication code) constructions: HMAC (a symmetric algorithm), and ECDSA, RSASSA-PKCS-v1.5 and RSASSA-PSS (public-key algorithms).  Each of these may be used with the SHA-256, SHA-384 or SHA-512 cryptographic digest.  See also the table of Cryptographic Algorithms for Digitial Signatures and MACs from RFC 7518 - JSON Web Algorithms (JWA).

My problem with all this? Where are the two separate keys here? It
  seems that the key used to encrypt the message and the key used to
  decrypt the message are the same. This is the root of my question - if
  you answer nothing else, please help with this.

There are not necessarily two separate keys - if a public key algorithms is used, the signature will be created using the server's private key, and verified using the corresponding public key.  But if an HMAC algorithm is used, a shared secret key must be used for both signing and verification.
","787","<public-key-encryption><jwt><auth0>","3","3","2","2015-05-26 02:05:48","","0","1","","","","2015-05-25 17:48:56",""
"48761010","Could not parse base64 DER-encoded ASN.1 public key from iOS in Golang","i have a projects in Golang with RSA enryption, so now, i have a Base64 public key format which used for encrypt a message,
i used this code:
publicKeyBase64 = ""MIGJAoGBAJJYXgBem1scLKPEjwKrW8+ci3B/YNN3aY2DJ3lc5e2wNc0SmFikDpow1TdYcKl2wdrXX7sMRsyjTk15IECMezyHzaJGQ9TinnkQixJ+YnlNdLC04TNWOg13plyahIXBforYAjYl2wVIA8Yma2bEQFhmAFkEX1A/Q1dIKy6EfQ+xAgMBAAE=""
publicKeyBinary, err := base64.StdEncoding.DecodeString(publicKeyBase64)

publicKeyInterface, err := x509.ParsePKIXPublicKey(publicKeyBinary)
    if err != nil {
    fmt.Println(""Could not parse DER encoded public key (encryption key)"")
    return """","""",err
}

publicKey, isRSAPublicKey := publicKeyInterface.(*rsa.PublicKey)
if !isRSAPublicKey {
    fmt.Println(""Public key parsed is not an RSA public key"")
    return """","""",err
}

encryptedMessage, err := rsa.EncryptPKCS1v15(rand.Reader, publicKey, ""message"")

When i run this code, i got this error: 
Could not parse DER encoded public key (encryption key)

asn1: structure error: tags don't match (16 vs {class:0 tag:2 length:129 isCompound:false}) {optional:false explicit:false application:false defaultValue:<nil> tag:<nil> stringType:0 timeType:0 set:false omitEmpty:false} AlgorithmIdentifier @3

The error points to publicKeyInterface, it failed to parse from Base64 decoded format to public Key, What's the problem with my code ?
=======updated=====
my publicKeyBase64 is retrieved from my models with Binary Data type
When i store it in my mongoDB from my Rails API, i receive public_key params as Base64 format, but i decode it to binary and then i stored it with this code 
def create
  params = device_params      
  public_key = Base64.decode64 device_params[:public_key]
  #device_params[:public_key] value is ""MIGJAoGBAJJYXgBem1scLKPEjwKrW8+ci3B/YNN3aY2DJ3lc5e2wNc0SmFikDpow1TdYcKl2wdrXX7sMRsyjTk15IECMezyHzaJGQ9TinnkQixJ+YnlNdLC04TNWOg13plyahIXBforYAjYl2wVIA8Yma2bEQFhmAFkEX1A/Q1dIKy6EfQ+xAgMBAAE=""
  params[:public_key] = BSON::Binary.new(public_key, :generic)
  device = Device.find_or_create_by(id: device_params[:id])

  render_success device.update_attributes(params), device
end

When i use rails code to convert my Base64 public key string using this code, it succeeded:
rsa_public_key = OpenSSL::PKey::RSA.new(Base64.decode64(public_key))

in my iOS app, i use https://github.com/DigitalLeaves/AsymmetricCrypto 
to generate a public Key using this code:
AsymmetricCryptoManager.sharedInstance.createSecureKeyPair({ (success, error) -> Void in
   if success {
    print(""RSA-1024 keypair successfully generated."")
    let publicKey = AsymmetricCryptoManager.sharedInstance.getPublicKeyData()?.base64EncodedString()

    let url = ENV.BASE_URL + ""devices""
    let headers = [""Authentication-Token"": CurrentUser.getCurrentUser().token] as! HTTPHeaders
    let params = [""device[user_id]"": CurrentUser.getCurrentUser().id!, ""device[id]"": instanceID,""device[token]"": fcmToken, ""device[os]"": ""ios"", ""device[public_key]"": publicKey!]

    Alamofire.request(url, method: .post, parameters: params, encoding: URLEncoding.default, headers: headers)
} else { print(""An error happened while generating a keypair: \(error)"") }
})

","We can dump the ASN.1 contents to see what they look like:
$ echo ""MIGJAoGBAJJYXgBem1scLKPEjwKrW8+ci3B/YNN3aY2DJ3lc5e2wNc0SmFikDpow1TdYcKl2wdrXX7sMRsyjTk15IECMezyHzaJGQ9TinnkQixJ+YnlNdLC04TNWOg13plyahIXBforYAjYl2wVIA8Yma2bEQFhmAFkEX1A/Q1dIKy6EfQ+xAgMBAAE="" | \
    base64 -d | \
    dumpasn1 -
  0 137: SEQUENCE {
  3 129:   INTEGER
       :     00 92 58 5E 00 5E 9B 5B 1C 2C A3 C4 8F 02 AB 5B
       :     CF 9C 8B 70 7F 60 D3 77 69 8D 83 27 79 5C E5 ED
       :     B0 35 CD 12 98 58 A4 0E 9A 30 D5 37 58 70 A9 76
       :     C1 DA D7 5F BB 0C 46 CC A3 4E 4D 79 20 40 8C 7B
       :     3C 87 CD A2 46 43 D4 E2 9E 79 10 8B 12 7E 62 79
       :     4D 74 B0 B4 E1 33 56 3A 0D 77 A6 5C 9A 84 85 C1
       :     7E 8A D8 02 36 25 DB 05 48 03 C6 26 6B 66 C4 40
       :     58 66 00 59 04 5F 50 3F 43 57 48 2B 2E 84 7D 0F
       :     B1
135   3:   INTEGER 65537
       :   }

0 warnings, 0 errors.

A well-formatted ASN.1 public key should include the algorithm as well. We should have a line similar to:
  5   9:     OBJECT IDENTIFIER rsaEncryption (1 2 840 113549 1 1 1)

The AsymmetricCryptoManager.getPublicKeyData() returns a very barebones  ASN.1 key, without any algorithm information. This makes Go very unhappy as it has no way of knowing what kind of key it is. See more about correctly exporting the key here.
If you can change the iOS code, you should instead use CryptoExportImportManager and use one of exportPublicKeyToPEM or exportPublicKeyToDER. These take the output of getPublicKeyData and generate output usable by other tools. You can find an example of how to use them in the CryptoExportImportManager example.
If you cannot change the key export code, you can instead parse it directly in Go. This assumes that you know for sure that it is a RSA public key:
func main() {
    publicKeyBase64 := ""MIGJAoGBAJJYXgBem1scLKPEjwKrW8+ci3B/YNN3aY2DJ3lc5e2wNc0SmFikDpow1TdYcKl2wdrXX7sMRsyjTk15IECMezyHzaJGQ9TinnkQixJ+YnlNdLC04TNWOg13plyahIXBforYAjYl2wVIA8Yma2bEQFhmAFkEX1A/Q1dIKy6EfQ+xAgMBAAE=""

    // Base64 decode.
    publicKeyBinary, err := base64.StdEncoding.DecodeString(publicKeyBase64)
    if err != nil {
        panic(err)
    }

    // rsa.PublicKey is a big.Int (N: modulus) and an integer (E: exponent).
    var pubKey rsa.PublicKey
    if rest, err := asn1.Unmarshal(publicKeyBinary, &pubKey); err != nil {
        panic(err)
    } else if len(rest) != 0 {
        panic(""rest is not nil"")
    }

    fmt.Printf(""key: %+v\n"", pubKey)
}

This prints out:

key:
  {N:+102767083290202280873554060983826675083148443795791447833515664566475334389364583758312108980110921996262487865832851258326049062353432991986398760705560379825908169063986770245967781444794847106351934016144540466696422397564949226710181429429140226472206572796987719088983654589217713611861345869296293449649
  E:65537}

You can now use your public key in package rsa functions.
","784","<ios><go><swift3><rsa><public-key-encryption>","1","1","1","2018-02-13 10:51:31","48763222","12","1","4511009","","2018-02-13 10:37:32","2018-02-13 06:50:06",""
"6448226","Using Rjindael and RSA to encrypt data stored in QR code in Visual Basic .NET","I'm wanting to encrypt some data (hopefully under five hundred bytes' worth) and store it in a QR code. Originally I wanted to use RSA, so the data would be signed with User A's private key and User B's public key, but unfortunately, VB.NET doesn't like encrypting that much data. I've read that I should use Rjindael to encrypt the actual data, and then use RSA to encrypt the key used by Rjindael. However, I'm not having much luck being able to search the web for some kind of tutorial or something.
Also, if I was wanting to store this on a QR code, wouldn't I have to store both the encrypted data and the encrypted key used by Rjindael? Do you think this would all fit? I may be able to use version 40 on medium error correction (according to http://www.denso-wave.com/qrcode/vertable4-e.html, it stores 18,672 ""data bits""), but I would prefer to use a lower version (that is, smaller) if at all possible.
Generating the QR code won't be the problem (I know there's a .NET library for that), I'm just curious about getting the data encrypted to begin with.
Thanks for your help!
Sam
","Look at the ""binary"" column. This is actually how many bytes you can store.
Anything above version 10 gets a bit hard to scan in practice, though possible. Above version 20 it's quite difficult from a camera, though can be scanned off a printed page. So if the point is to scan with a camera -- no doesn't sound like it will fit in practice.
","784","<vb.net><rsa><qr-code><public-key-encryption><encryption-symmetric>","0","1","1","2011-06-23 08:27:32","6451264","1","","","","","2011-06-23 00:55:04",""
"18550196","Encoding using SHA256 with RSA","I'm attempting to authorize with the Google Data API as a service in a language for which there isn't any client library. The crux is in how to generate the signature. To do this I have to encode a string using ""SHA256 with RSA"".
I have it from here that it shouldn't be ""terribly difficult"" however I cannot find a description of the procedure? Anyone knows?
(The language does have a function to generate SHA256 hash codes.)
","OAuth 2.0 requires RSASSA-PKCS1-V1_5-SIGN, which is described in RFC 3447.
Just check section 9.2 of this RFC - you need just add some formatting to the hash of your message.
","783","<encryption><public-key-encryption><private-key>","0","2","1","2013-08-31 18:09:25","18551302","4","","-1","","2017-05-23 10:24:19","2013-08-31 16:21:06",""
"33043091","Public Key Encryption in Microsoft Edge","I have the following JavaScript code to implement public key encryption using the Web Cryptography API. It works for Firefox and Chrome but fails for Microsoft Edge. The error I am getting from Edge is ""Could not complete the operation due to error 80700011."" What have I missed? 
<script>
    var data = new Uint8Array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]);

    var crypto = window.crypto || window.msCrypto;
    var cryptoSubtle = crypto.subtle;

    cryptoSubtle.generateKey(
        {
            name: ""RSA-OAEP"",
            modulusLength: 2048, 
            publicExponent: new Uint8Array([0x01, 0x00, 0x01]),
            hash: { name: ""SHA-256"" }, 
        },
        true, 
        [""encrypt"", ""decrypt""]
    ).then(function (key) { 
        console.log(key);
        console.log(key.publicKey);
        return cryptoSubtle.encrypt(
            {
                name: ""RSA-OAEP""
            },
            key.publicKey,
            data
            );
    }).then(function (encrypted) { 
        console.log(new Uint8Array(encrypted));
    }).catch(function (err) {
        console.error(err);
    });
</script>

","I've found the cause of this issue. I have to add the hash field when invoking the encrypt function:
        return cryptoSubtle.encrypt(
            {
                name: ""RSA-OAEP"",
                hash: { name: ""SHA-256"" }
            },
            key.publicKey,
            data
            );

This does not match the Web Cryptography API Spec but it works.
","782","<encryption><microsoft-edge><public-key-encryption><webcrypto-api>","5","9","2","2017-02-06 22:16:57","","2","0","552067","","2017-02-06 22:16:57","2015-10-09 16:25:57",""
"33043091","Public Key Encryption in Microsoft Edge","I have the following JavaScript code to implement public key encryption using the Web Cryptography API. It works for Firefox and Chrome but fails for Microsoft Edge. The error I am getting from Edge is ""Could not complete the operation due to error 80700011."" What have I missed? 
<script>
    var data = new Uint8Array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]);

    var crypto = window.crypto || window.msCrypto;
    var cryptoSubtle = crypto.subtle;

    cryptoSubtle.generateKey(
        {
            name: ""RSA-OAEP"",
            modulusLength: 2048, 
            publicExponent: new Uint8Array([0x01, 0x00, 0x01]),
            hash: { name: ""SHA-256"" }, 
        },
        true, 
        [""encrypt"", ""decrypt""]
    ).then(function (key) { 
        console.log(key);
        console.log(key.publicKey);
        return cryptoSubtle.encrypt(
            {
                name: ""RSA-OAEP""
            },
            key.publicKey,
            data
            );
    }).then(function (encrypted) { 
        console.log(new Uint8Array(encrypted));
    }).catch(function (err) {
        console.error(err);
    });
</script>

","Same problem with crypto.subtle.sign. Needed to add the hashing algorithm (same issue in Safari)
Replace 
crypto.subtle.sign(
            {
                 name: ""RSASSA-PKCS1-v1_5""
            },
            cryptoKey,
            digestToSignBuf);

with 
crypto.subtle.sign(
            {
                 name: ""RSASSA-PKCS1-v1_5"", 
                 hash: ""SHA-256""
            },
            cryptoKey,
            digestToSignBuf);

","782","<encryption><microsoft-edge><public-key-encryption><webcrypto-api>","5","1","2","2017-02-06 22:16:57","","2","0","552067","","2017-02-06 22:16:57","2015-10-09 16:25:57",""
"24265866","RSA algorithm implementation not working properly in java","Theoretically I know that if n=33, e(public key)=3 and d(private key)=7 I can encrypt a plaintext by using BigInteger class with modPow(e, n), and decrypt with modPow(d,n), but after decryption plaintext is not the same as first.  
Here is my code:
  public class KeyTest {
private BigInteger n = new BigInteger(""33"");
private BigInteger e = new BigInteger(""3"");
private BigInteger d = new BigInteger(""7"");

public static void main(String[] args) {
    KeyTest test = new KeyTest();

    BigInteger plaintext = new BigInteger(""55"");
    System.out.println(""Plain text: "" + plaintext);

    BigInteger ciphertext = test.encrypt(plaintext);
    System.out.println(""Ciphertext: "" + ciphertext);

    BigInteger decrypted = test.decrypt(ciphertext);
    System.out.println(""Plain text after decryption: "" + decrypted);
}

public BigInteger encrypt(BigInteger plaintext) {

    return plaintext.modPow(e, n);
}

public BigInteger decrypt(BigInteger ciphertext) {

    return ciphertext.modPow(d, n);
}
}

The output is:  
Plain text: 55 Ciphertext: 22 Plain text after decryption: 22

","Your plaintext (55) is larger than the the modulus (33), so you can't actually encrypt the message. Consider the following slightly different example:

p = 11
q = 17
n = 187
phi(n) = 160
Choose e = 3
If d = 107 then e * d = 321 = 1 mod phi(n)

So change your code to:
  private BigInteger n = new BigInteger(""187"");
  private BigInteger e = new BigInteger(""3"");
  private BigInteger d = new BigInteger(""107"");

  public static void main(String[] args) {
    KeyTest test = new KeyTest();

    BigInteger plaintext = new BigInteger(""55"");
    System.out.println(""Plain text: "" + plaintext);

    BigInteger ciphertext = test.encrypt(plaintext);
    System.out.println(""Ciphertext: "" + ciphertext);

    BigInteger decrypted = test.decrypt(ciphertext);
    System.out.println(""Plain text after decryption: "" + decrypted);
  }

  public BigInteger encrypt(BigInteger plaintext) {

    return plaintext.modPow(e, n);
  }

  public BigInteger decrypt(BigInteger ciphertext) {

    return ciphertext.modPow(d, n);
  }
}

Output:
Plain text: 55
Ciphertext: 132
Plain text after decryption: 55

","781","<java><encryption><rsa><biginteger><public-key-encryption>","4","3","1","2014-06-17 14:43:57","24266776","2","1","3485434","","2014-06-17 14:04:47","2014-06-17 14:02:01",""
"21240800","RSA key length - character limits?","If i'm using UTF-8 encoding, how many characters can i safely encrypt with different size RSA keys using PKCS1 padding?
EDIT: I understand that the answer would depend on which characters i'm encrypting, but as this is variable, i'm after a ""worst case"" safe limit for different key sizes (1024 2048 4096). Just something to go on.
","To quote from RFC 3447, §7.1:

RSAES-OAEP can operate on messages of length up to k - 2hLen - 2 octets, where hLen is the length of the output from the underlying hash function and k is the length in octets of the recipient's RSA modulus.

This is defined in terms of octets; exactly how many characters that'll equate to will depend on the characters you encode. One code point can occupy more than one octet, and one character (as most people think of it, anyway) can require more than one code point.
","772","<utf-8><rsa><public-key-encryption>","0","1","1","2014-01-20 18:09:46","21240931","1","","1536598","","2014-01-20 18:09:46","2014-01-20 17:49:22",""
"45018290","Converting String to PublicKey","I am passing a public key as a string from a web server to an android device where the key is converted back from a string to a public key. On the android device I am getting this error
java.security.spec.InvalidKeySpecException: java.lang.RuntimeException: error:0c0000af:ASN.1 encoding routines:OPENSSL_internal:TOO_LONG

The android class:
@Override
public void onCreate(Bundle savedInstanceState) {
   /*
    * Other code
    */
   PublicKey publicKey = KeyUtil.StringToPublicKey(publicKeyString);
}

Key class:
Public class KeyUtil {

public static byte[] publicKeyToByteArray(PublicKey key) {
    return Base64.encode(key.getEncoded(), Base64.DEFAULT);
}

public static PublicKey byteArrayToPublicKey(byte [] array) throws NoSuchAlgorithmException, InvalidKeySpecException {
    X509EncodedKeySpec spec = new X509EncodedKeySpec(Base64.decode(array, Base64.DEFAULT));
    KeyFactory kf = KeyFactory.getInstance(""RSA"");
    return kf.generatePublic(spec); //Error is thrown here
}

public static PublicKey StringToPublicKey(String array) throws NoSuchAlgorithmException, InvalidKeySpecException {
    byte[] b = Base64.encode(array.getBytes(), Base64.DEFAULT);
    return byteArrayToPublicKey(b);
}
}

This error only happens on the android device, I am able to convert the code to and from string to PublicKey with no problems in java. 
I can't figure out how to convert a string to publicKey on the android device with out getting an error. Help is greatly appropriated. 
","","767","<java><android><security><public-key-encryption>","1","","0","2017-07-10 17:29:29","","1","","","","","2017-07-10 17:29:29",""
"40710825","Why can't openssl_public_encrypt handle this plaintext?","openssl_public_encrypt apparently can't handle arbitrary plaintexts.
<?php

$msg = '{""args"":[""argxx"",""argyy""],""data"":""xx\nyyy\n"",""symkey"":""0a6e860640413acfe6e4e461a28fab3fad3aff78ef95c962c5e63bef7e2b3439""}';

# If you uncomment this line, the function succeeds.
# $msg = 'test';

$pub = '-----BEGIN PUBLIC KEY-----
MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQC80g7AA5XexMCiJW3tKr/eeN8Q
EMNfGYG0qiUuLS/dtir7c3c1MmpNzrE8R+xqleOLNVkbbSZqqQ2qUJtPhwbLhQyL
yilRH5WMz9Pabx62v7k+vm81/6Xa9fnIV7DE0DZhMO5vQvBE3+5jkXbfU4yBZRv5
UOty5gqGXXaR6bim4QIDAQAB
-----END PUBLIC KEY-----';


if (openssl_public_encrypt ($msg, $enc, $pub))
{
    print bin2hex ($enc);

    exit (0);
}
else
{
    print ""Could not encrypt message.\n"";
}
?>

This outputs Could not encrypt message. on Ubuntu PHP 7.
Why is it failing on this $msg?
","If we test this situation empirically, we will see, that everything longer than 117 bytes will fail:
$msg = 'abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklm';

The line above represents 117 characters and 117 bytes in total. This works when encrypting with the public key you provided.
If I add another character, n, encryption fails:
$msg = 'abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmn';

Same thing goes with other unicode characters. Let's say I try to encrypt this, which is 85 characters long, but exactly 117 bytes in length:
$msg = ' i ♥ ui ♥ ui ♥ ui ♥ ui ♥ ui ♥ ui ♥ ui ♥ ui ♥ ui ♥ ui ♥ ui ♥ ui ♥ ui ♥ ui ♥ ui ♥ ui  u';

This gets encrypted perfectly. But if I add another byte, it fails (86 characters, 118 bytes):
$msg = ' i ♥ ui ♥ ui ♥ ui ♥ ui ♥ ui ♥ ui ♥ ui ♥ ui ♥ ui ♥ ui ♥ ui ♥ ui ♥ ui ♥ ui ♥ ui ♥ ui  uZ';


.. the openssl_public_encrypt() function will fail by design if you pass it more than 117 characters to encrypt.
Snyder, Chris, Myer, Thomas, Southwell, Michael, ISBN 978-1-4302-3318-3

Further, in the book it says:

Because RSA is expensive, and was never intended for encrypting quantities of data, if you are encrypting something that is routinely longer than 56 characters, you should be planning to encrypt your data using a fast and efficient symmetric algorithm like AES with a randomly generated key.

","759","<php><public-key-encryption><php-openssl>","3","1","2","2016-11-21 18:34:37","40711911","4","2","608639","","2016-11-21 07:21:14","2016-11-20 23:50:00",""
"40710825","Why can't openssl_public_encrypt handle this plaintext?","openssl_public_encrypt apparently can't handle arbitrary plaintexts.
<?php

$msg = '{""args"":[""argxx"",""argyy""],""data"":""xx\nyyy\n"",""symkey"":""0a6e860640413acfe6e4e461a28fab3fad3aff78ef95c962c5e63bef7e2b3439""}';

# If you uncomment this line, the function succeeds.
# $msg = 'test';

$pub = '-----BEGIN PUBLIC KEY-----
MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQC80g7AA5XexMCiJW3tKr/eeN8Q
EMNfGYG0qiUuLS/dtir7c3c1MmpNzrE8R+xqleOLNVkbbSZqqQ2qUJtPhwbLhQyL
yilRH5WMz9Pabx62v7k+vm81/6Xa9fnIV7DE0DZhMO5vQvBE3+5jkXbfU4yBZRv5
UOty5gqGXXaR6bim4QIDAQAB
-----END PUBLIC KEY-----';


if (openssl_public_encrypt ($msg, $enc, $pub))
{
    print bin2hex ($enc);

    exit (0);
}
else
{
    print ""Could not encrypt message.\n"";
}
?>

This outputs Could not encrypt message. on Ubuntu PHP 7.
Why is it failing on this $msg?
","The actual key is 128-bytes (1024-bits), this is a common minimally accepted key size. 128 - 11 padding bytes = 117 allowable bytes of data to be encrypted.
The public key in the question is encoded and has additional header and footer lines and thus longer than 128-bytes.
","759","<php><public-key-encryption><php-openssl>","3","2","2","2016-11-21 18:34:37","40711911","4","2","608639","","2016-11-21 07:21:14","2016-11-20 23:50:00",""
"25217099","Why must a UNIX user have a password?","I am configuring the ssh server on my raspberry pi so that it only supports key-based authentication.
I have created a user on the server and set up the ~/.ssh directory with my public key and correct permissions.
The user is currently marked as 'locked' because it does not have a password. This causes openssh to refuse the connection.
# /var/log/auth.log

Aug  9 09:05:26 raspberrypi sshd[6875]: User foo not allowed because account is locked
Aug  9 09:05:26 raspberrypi sshd[6875]: input_userauth_request: invalid user foo [preauth]
Aug  9 09:05:26 raspberrypi sshd[6875]: Connection closed by 192.168.0.4 [preauth]

Ideally, I don't want a password. I have already authenticated via PKI.
Perhaps I could set the password to 'password', or a random string - but that seems messy.
Any recommendations?
EDIT:
Just to clarify, my account is locked because it doesn't have a password, i.e.
$ passwd -u foo
passwd: unlocking the password would result in a passwordless account.
You should set a password with usermod -p to unlock the password of this account.

Petesh solution is correct:
usermod -p '*' foo

From the man page for shadow:
""If the password field contains some string that is not a valid result of crypt(3), for instance ! or *, the user will not be able to use a unix password to log in (but the user may log in the system by other means).""
","No, it's telling you the account is locked, not that it doesn't have a password. You lock and account to prevent people from logging in using that account; even via SSH. You generally can only switch to a locked account using su or sudo.
The rules are described in the shadow manual page which says:

If the password field contains some string that is not a valid result of crypt(3), for instance ! or *, the user will not be able to use a unix password to log in (but the user may log in the system by other means).

The logic is * will never match a password, but doesn't mean locked, while ! means locked.
This encrypted password is stored, generally, in the shadow file and can be changed using the passwd command or the usermod command. If you wish to change the password to one that doesn't work, then you can change to one starting with *, which will never match a password, so, for example, using the usermod command:
bubble ~ [2]> sudo usermod -L freerad
bubble ~> sudo grep freerad /etc/shadow
freerad:!*:16197:0:99999:7:::

This is a locked freerad account. ssh should prevent you from logging in using that account even if you use public/private key pairs.
bubble ~> sudo usermod -p '*' freerad
bubble ~> sudo grep freerad /etc/shadow
freerad:*:16291:0:99999:7:::

This freerad account has a never-matchable password. The account is not locked, but if you were to login using ssh public/private keys it would not prevent you from logging in.
","757","<linux><unix><ssh><public-key-encryption><openssh>","2","3","2","2014-08-09 10:10:34","25217198","0","","839238","","2014-08-09 10:10:34","2014-08-09 09:27:01",""
"25217099","Why must a UNIX user have a password?","I am configuring the ssh server on my raspberry pi so that it only supports key-based authentication.
I have created a user on the server and set up the ~/.ssh directory with my public key and correct permissions.
The user is currently marked as 'locked' because it does not have a password. This causes openssh to refuse the connection.
# /var/log/auth.log

Aug  9 09:05:26 raspberrypi sshd[6875]: User foo not allowed because account is locked
Aug  9 09:05:26 raspberrypi sshd[6875]: input_userauth_request: invalid user foo [preauth]
Aug  9 09:05:26 raspberrypi sshd[6875]: Connection closed by 192.168.0.4 [preauth]

Ideally, I don't want a password. I have already authenticated via PKI.
Perhaps I could set the password to 'password', or a random string - but that seems messy.
Any recommendations?
EDIT:
Just to clarify, my account is locked because it doesn't have a password, i.e.
$ passwd -u foo
passwd: unlocking the password would result in a passwordless account.
You should set a password with usermod -p to unlock the password of this account.

Petesh solution is correct:
usermod -p '*' foo

From the man page for shadow:
""If the password field contains some string that is not a valid result of crypt(3), for instance ! or *, the user will not be able to use a unix password to log in (but the user may log in the system by other means).""
","Try unlocking it with 
passwd -u foo

Being locked and not having a password are two different things.
","757","<linux><unix><ssh><public-key-encryption><openssh>","2","0","2","2014-08-09 10:10:34","25217198","0","","839238","","2014-08-09 10:10:34","2014-08-09 09:27:01",""
"7569980","What encryption method should I use on iOS Android Apps: AES128 or 3DES","I have been given the choice by a client of AES128 or 3DES encryption.
I have to roll it out on both iOS and Android.
Which will be easier to do?
Are there libraries for both iOS and Android?  
Full or Partial answer would be great (i.e. if you only know about one platform)
","Prefer AES128 over 3DES. 3DES provides an effective key size of 112 bits, while AES 128 uses 128 bits of key space.
http://en.wikipedia.org/wiki/Aes128
http://en.wikipedia.org/wiki/Triple_DES
","756","<android><iphone><ios><encryption><public-key-encryption>","1","4","2","2011-09-27 15:23:50","7570096","2","1","","","","2011-09-27 13:29:28",""
"7569980","What encryption method should I use on iOS Android Apps: AES128 or 3DES","I have been given the choice by a client of AES128 or 3DES encryption.
I have to roll it out on both iOS and Android.
Which will be easier to do?
Are there libraries for both iOS and Android?  
Full or Partial answer would be great (i.e. if you only know about one platform)
","Please read this article in its entirety, and feel free to come back to post further comments or new questions.
Cryptographic Right Answers
In particular, the very first question answered is:

Encrypting data: Use AES in CTR (Counter) mode, and append an HMAC.
AES is about as standard as you can get, and has done a good job of
  resisting cryptologic attacks over the past decade. Using CTR mode
  avoids the weakness of ECB mode, the complex (and bug-prone) process
  of padding and unpadding of partial blocks (or ciphertext stealing),
  and vastly reduces the risk of side channel attacks thanks to the fact
  that the data being input to AES is not sensitive. However, because
  CTR mode is malleable, you should always add an HMAC to confirm that
  the encrypted data has not been tampered with.

And the very next question answered is:

AES key length: Use 256-bit AES keys.
Theoretically speaking, 128-bit AES keys should be enough for the
  forseeable future; but for most applications the increased cost of
  using 256-bit keys instead of 128-bit keys is insignificant, and the
  increased key length provides a margin of security in case a side
  channel attack leaks some but not all of the key bits.

[EDIT 1] Also, the fact that you've applied a ""public-key-encryption"" tag to your question implies that your understanding of cryptography could be better. Please also read chapter 5 of Security Engineering (PDF) by Ross Anderson; it's free and very accessible.
","756","<android><iphone><ios><encryption><public-key-encryption>","1","2","2","2011-09-27 15:23:50","7570096","2","1","","","","2011-09-27 13:29:28",""
"52306768","JSch giving invalid private key errors for key pair generated by Java","I am generating a keypair using Java's KeyPairGenerator for use with JGit. However, JSch (the underlying SSH implementation for JGit) keeps giving me ""invalid privatekey"" errors when trying to use the generated private key. 
Here is the stack trace:
Caught: org.eclipse.jgit.api.errors.TransportException: ssh://git@bitbucket.hostname/~wlaw/bitbucket_upgrade_test_repo.git: invalid privatekey: [B@4650a407
org.eclipse.jgit.api.errors.TransportException: ssh://git@bitbucket.hostname/~wlaw/bitbucket_upgrade_test_repo.git: invalid privatekey: [B@4650a407
    at org.eclipse.jgit.api.FetchCommand.call(FetchCommand.java:254)
    at org.eclipse.jgit.api.CloneCommand.fetch(CloneCommand.java:306)
    at org.eclipse.jgit.api.CloneCommand.call(CloneCommand.java:200)
    at org.eclipse.jgit.api.CloneCommand.call(CloneCommand.java:1)
    at java_util_concurrent_Callable$call.call(Unknown Source)
    at Test.run(Test.groovy:95)
Caused by: org.eclipse.jgit.errors.TransportException: ssh://git@bitbucket.hostname/~wlaw/bitbucket_upgrade_test_repo.git: invalid privatekey: [B@4650a407
    at org.eclipse.jgit.transport.JschConfigSessionFactory.getSession(JschConfigSessionFactory.java:183)
    at org.eclipse.jgit.transport.SshTransport.getSession(SshTransport.java:140)
    at org.eclipse.jgit.transport.TransportGitSsh$SshFetchConnection.<init>(TransportGitSsh.java:280)
    at org.eclipse.jgit.transport.TransportGitSsh.openFetch(TransportGitSsh.java:170)
    at org.eclipse.jgit.transport.FetchProcess.executeImp(FetchProcess.java:137)
    at org.eclipse.jgit.transport.FetchProcess.execute(FetchProcess.java:123)
    at org.eclipse.jgit.transport.Transport.fetch(Transport.java:1271)
    at org.eclipse.jgit.api.FetchCommand.call(FetchCommand.java:243)
    ... 5 more
Caused by: com.jcraft.jsch.JSchException: invalid privatekey: [B@4650a407
    at com.jcraft.jsch.KeyPair.load(KeyPair.java:948)
    at com.jcraft.jsch.IdentityFile.newInstance(IdentityFile.java:46)
    at com.jcraft.jsch.JSch.addIdentity(JSch.java:442)
    at Test$1.createDefaultJSch(Test.groovy:82)
    at org.eclipse.jgit.transport.JschConfigSessionFactory.getJSch(JschConfigSessionFactory.java:335)
    at org.eclipse.jgit.transport.JschConfigSessionFactory.createSession(JschConfigSessionFactory.java:293)
    at org.eclipse.jgit.transport.JschConfigSessionFactory.createSession(JschConfigSessionFactory.java:200)
    at org.eclipse.jgit.transport.JschConfigSessionFactory.getSession(JschConfigSessionFactory.java:130)
    ... 12 more

Here is my code:
KeyPairGenerator keyGen = KeyPairGenerator.getInstance(""RSA"")
keyGen.initialize(4096)
KeyPair pair = keyGen.generateKeyPair()

def pub = pair.public as RSAPublicKey
def priv = pair.private as RSAPrivateCrtKey

Base64.Encoder encoder = Base64.getEncoder();
def publicKeyText = ""ssh-rsa "" + encoder.encodeToString(keyBlob(pub.publicExponent, pub.modulus))

def id = bitbucket.post {
    request.uri.path = ""/rest/ssh/1.0/keys""
    request.uri.query = [user: bitbucketUsername]
    request.body = new JsonBuilder([text: publicKeyText]).toPrettyString()
    response.success { FromServer fs, Object responseBody ->
        responseBody.id
    }
    response.failure { FromServer fs, Object responseBody ->
        println fs.statusCode
        println fs.message
        println fs.headers
        println responseBody
        null
    }
}

def privateKeyText = ""-----BEGIN RSA PRIVATE KEY-----\n"" +
    encoder.encodeToString(priv.getEncoded()) +
    ""\n-----END RSA PRIVATE KEY-----\n""

new File(""priv"").text = privateKeyText
new File(""pub"").text = publicKeyText

SshSessionFactory sshSessionFactory = new JschConfigSessionFactory() {
    @Override
    protected void configure(OpenSshConfig.Host hc, com.jcraft.jsch.Session session) {}

    @Override
    protected JSch createDefaultJSch(FS fs) throws JSchException {
        JSch defaultJSch = super.createDefaultJSch(fs)
        defaultJSch.addIdentity(""test"", privateKeyText.bytes, publicKeyText.bytes, null)
    }
};

CloneCommand cloneCommand = Git.cloneRepository()
cloneCommand.setURI(""ssh://git@$bitbucketHostPort/$project/${repo}.git"")
cloneCommand.setTransportConfigCallback(new TransportConfigCallback() {
    @Override
    void configure(Transport transport) {
        SshTransport sshTransport = (SshTransport) transport
        sshTransport.setSshSessionFactory(sshSessionFactory)
    }
})
cloneCommand.call()

I did some debugging in the JSch source code, and found that the library is getting an ArrayIndexOutOfBoundsException on line 228 in com.jcraft.jsch.KeyPairRSA.java. 
Is it something I am doing wrong with formatting the keys for JSch? Or could this be a bug in Java's implementation of a KeyPair or perhaps JSch's implementation of parsing them?
Here is an example keypair that is generated by my code:
ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQDNPvFmy81wj3L4ndJzMcYFa9YctDzz0KvXyb9vg+UQ5622kyE255fwL4eatihL8/TrH1OOLQtSVjThLwWObx4fQ6bk25rJA0jS7G7CAfAQwbTY9JpNrcH5HHtiAhbUjEF/MXU6IlPNCmBMQPFh1eSa21aIdYie+KVgXQnUP4qN6ks1iR8XX4YHpg2KKhEoJtaVYGHp15EmpRvDYzsheqrcfyg4N5taGgG9/GzdfpeBWqCyJhrjgso85ARecGTpqCHqFNy46tXtIMR6FL36UDc/EpWifmf7oY4HVLa0DJpLq2BHmjRlUtiFFox1Jzk+shFiDZYwnCmdKnpCnlxFQ1Hv06XLgvcUx/0mkleh14Nme/b61pmJDO05v9zKho+9Q+lNgrTK+kOeC7I9PgUePyzWJteys/0MqENJxvM4g65/r9vzpcSvdEziSJ8Y3xI3qlzOa3Av1Jv5qIntgjEeAnth+AANdUP/GcpYbnCNp1QsjaZoFKFe2DcUTYM3CGzh0SFm9CeRfBV1phQ2+5gi1bH5ZiAfTNpksZz+SYIPyEsbaqNRcBk53htWfINShNVP7a/b/H7tyZs+zvMoHN2bZzsIMIUWO8Df+owpCK7ZT/EadDZzkzG2LUUUjm6aVsz2rjLFcvQtYOs0U/+suWhXNQ2dAW4psGLHkNb3NDHSzjzk7w==

-----BEGIN RSA PRIVATE KEY-----
MIIJQgIBADANBgkqhkiG9w0BAQEFAASCCSwwggkoAgEAAoICAQDNPvFmy81wj3L4ndJzMcYFa9YctDzz0KvXyb9vg+UQ5622kyE255fwL4eatihL8/TrH1OOLQtSVjThLwWObx4fQ6bk25rJA0jS7G7CAfAQwbTY9JpNrcH5HHtiAhbUjEF/MXU6IlPNCmBMQPFh1eSa21aIdYie+KVgXQnUP4qN6ks1iR8XX4YHpg2KKhEoJtaVYGHp15EmpRvDYzsheqrcfyg4N5taGgG9/GzdfpeBWqCyJhrjgso85ARecGTpqCHqFNy46tXtIMR6FL36UDc/EpWifmf7oY4HVLa0DJpLq2BHmjRlUtiFFox1Jzk+shFiDZYwnCmdKnpCnlxFQ1Hv06XLgvcUx/0mkleh14Nme/b61pmJDO05v9zKho+9Q+lNgrTK+kOeC7I9PgUePyzWJteys/0MqENJxvM4g65/r9vzpcSvdEziSJ8Y3xI3qlzOa3Av1Jv5qIntgjEeAnth+AANdUP/GcpYbnCNp1QsjaZoFKFe2DcUTYM3CGzh0SFm9CeRfBV1phQ2+5gi1bH5ZiAfTNpksZz+SYIPyEsbaqNRcBk53htWfINShNVP7a/b/H7tyZs+zvMoHN2bZzsIMIUWO8Df+owpCK7ZT/EadDZzkzG2LUUUjm6aVsz2rjLFcvQtYOs0U/+suWhXNQ2dAW4psGLHkNb3NDHSzjzk7wIDAQABAoICAFeJI83y1/DMzX0pWmtU7B69yji9yk02T0QeQG5gM18NYHJAt+bByXRf4Rbj37XdGzT4TFuT7IM2TyFHO7huvcsZwGFVI+Pdab7Dpc1KpEeRRf9N+01r8RG8ywaW24PVOc30mwmrQFBvv3hmLkzKu9AsAfD7J8SdSXMa2ylR3FcAeQkhLUh7rh8u/BFUNbMJNXXKAJiKHtb7jia7+KkjtyGJfe7UEIbSFrIfqZKh/h3mOCkixU8JJhXoLdDVYMSit6wtL6ISTiDvW7yxggDzG0zkMTt3bAPO+FM6Fx4dTeU99zcylmwsdDn2zvrcOrb5nR5Tqx2aTMlCJ5ioD7RerN+3YAhE1+cvrvZc5wa+aZruNMioTrxWzhc3iSoZHKKGE5VAnF/HkoR/lgCGVCcsWeNamdUjydD9H9Y/33S7Y0e+wLCNXOAmyE2jSMpHGEPwohlwyXrMvnKXoWX/LlNjhG8aWW8dWL6Lym3Z/eO3WBEe1Xccv9jd56h52rqvzW3MOpL320RcgqdLtgb7Ihz8twQdAyjaY81fJJtSnns/GBrbqAxO//EyWi8vBU82p4hl3tw8RAxGrx91LFPwv78ACvht8X8ogU4/c1B6rnI0n+Ofsvq9ZxQsATQAk1y83vPbTUNc+XJ8X/Jvxr/y1mp+8q9fIq2jHGUGJevBSW1+RBoZAoIBAQDzyhXuEiXtoBPMWew+ALUIJ5sW3JS+uShxq8KKo/a/V7OyrrBZTYmbjkxyxBlkKJUFA7xqwVXgnMkywA0EnrdE0TmmBwr7czZjT7Lp4PbhoZ73YJ/y31nuJJCGzkLeJKrtFaM2BdzPdqC86qeAIN9YHZnzyud+o6RkJlDje5hFv6cP5+JGu1OyhqNvFSyevKZLq5hGx6gkqSCVM65PhJELj4jwgI84E7pm9w7sZ5xN2X0W66dmElpN3OBj2VWlF6eiUNoIU3WyHwMn2+rrC8+YTGp9ByCR/+sHkM9mXQeT/3tjrBdXppRjy5EggcTW6T1KObnmOBgLDYLyxj4dFfXVAoIBAQDXhqUUFQarfK4jBgBcD3PzwyXtl9F6e4/IrdCwePjgRDuTNlcdUV/9HlfwNDEiVhd9ymcNwX/26W6VmEBAdec6czVVAY9fhZRz6Pp9DOH/7nJsln6Yz76ezOFeTJXm93dRLX/mkVM4qz4+JqPgll53IlYI9f6eqBZCfHJHj+LeCZDnDvKvF4M+LTpLR/fiF4/mVrBjrh6DuHwWPBnRCViKQyTkj8WCRRtRSWucZYplguCYN30iSH7Dv1MdnJGYie8dRDnDvV2G3dI666ugDVLZb48Rg+o3La3DzA7qEMQ6Lpy3abjyaaWOIz1Z/n3gQGWrqgeZpIZpnV04E5WS9X2zAoIBAH0iAmWjrRIuc1sV4PvmUwWvhpySdkr7MTY/amjNRm7qblNN9TixYuuUe8sAuuO9LNhZFZJaUGEtONyy1TvE198b4ZJF1S5B8e3Bz9zaWv5vffAOCauZV0i0Pfbj0lDB03ZD//VPxwo6IsE1VOqgdON+tjH7uR04k73QKP7KxtsuR2sTpAKYTpq5HxR6ct+7h0QZ/Nx/yN+gbBgJYfRw4B5l+20vH9Qx1CDbuS5A9GrFMr7cEJ2E2BNVR1wZByvpW2MmSvOxGx1la7I+4HLrKhBLUPGCAgbOrG3Ct6IcKDKgFU6Q255i45HhwElGMqn5KDt8K95udnDd65P/i4xUZE0CggEBALqThwixgwqlbqJHKbyIbBqTz5u1F9TubnSNc+Gxd9G9f81a92Mb9PrMb9gzdm2BFekBdOEFp996CQ9btBOZfcitv3eNWC6bFv6Yq2/h3SuPomK6jXGANkaGmnrl1ccSZ6pQty5ElES0ibeH/8oGolSD1vL+8aMrY8m+rbehqgYJRfWgjRpiQm1q/dH5xW9mcl42oZBJRYVGCbW95aN+cbWPlrp+c77oUFO4OX40sPBbsk5TivJIy+RtFmjGB4yDrAor6821euer07jKF9MAdb5hwvqotfN6ibi8SBT82sJ7Y5Or5D2Gk5lOjGgB1bpyRRGsqdOqB+oaHn7TBWMpPd0CggEAFPHds2f5CKjsNg9IkiA4yoCzfsjVhy9qiE/2BikA25JTc6nMfTfpWMzcDL3qnfhFGsFWz31Xf8MbZDMq0cCsMQhsgYPolU5N2AkWvAeqSbwMz9zIDiPeND/Ql4sOyicPd6LJrT3UTRWoY3+p4wo73rpOXM4Ju3u++sCeERTulghgGZoJBSIT+8H7pKa7cFchATvBKZQTUnOZEhqzQN4R2wZ3j5ujG8rGjfRHDRL8OPiNRRv/L/oHxGnhB4Rfbc4ba0zNx4zy6d+Em6H8wX72WHhz5eVs2xQR+EIBtxDVlmvdpGkvCtUhS1227yiiL+wqkfNz3UnTSjGy3eHNRGAsVg==
-----END RSA PRIVATE KEY-----

","You need to write the private key in PEM format.
For that you need BouncyCastle library.
For an example see:
Java generate RSA key pair and convert to PEM
","755","<java><groovy><ssh><public-key-encryption><jsch>","1","0","1","2019-09-10 07:01:58","","0","1","850848","","2018-09-13 06:36:46","2018-09-13 04:43:48",""
"13272063","How / Should I Encrypt Variable Size Data with RSA (RSACryptoServiceProvider)","In my research I have found mixed messages on this subject so I'm looking for expertise to explain the best approach to encrypting variable amounts of data.
Requirements:
[Edit: Adding additional requirement #3 in response to comment]

I would like to use RSA for the public/private key encryption scheme
so I can distribute the public key to an application that should
encrypt data but should not know how to decrypt it
I need to support data lengths from 16 characters (credit card
number) to kilobytes (serialized objects) and beyond.  Most of the
    data I encrypt will be small (credit cards, addresses, etc).
This is for encrypting data at rest.

Options I'm Aware Of:

RSA-ONLY: Use RSACryptoServiceProvider to encrypt all data using public key. 
Iterate through the data in blocks that are less than the key size
minus padding.
HYBRID: Use AesCryptoServiceProvider to encrypt the data, calling
.GenerateKey() and .GenerateIV() to generate a random key and IV.
Then use RSACryptoServiceProvider to encrypt the above key and IV
and prepend or append that to the data.

It seems to my the Hybrid approach gives me the best of both worlds.  Strong block cipher (AES) and distributed public key (RSA).
What are the pros and cons of these approaches?  What is the standard?  Surprisingly I have not found much opinion or information on the subject and would appreciate any references you might have.
Bonus:
I am rolling my own for various reasons including corporate licensing restrictions but I'm curious if there is a good standard opensource approach for C#.
","in most cases RSA is used to encrypt a symetric key (you don't really need to encrypt the IV, but hey...)
if you use RSA for encryption of data (instead of a key) you might run into the ECB (Electronic Code Book mode) problem that is known in the context of symetric block cyphers: for a given key, a clear-text is always mapped to the same cypher-text ... that alone doesn't help in breaking the encryption, but it can leak information since an attacker can identify which data packages contain the same clear-texts 
i'd choose the hybrid approach, because it's suitable for arbitrary sized data, and won't be prone to this information leak unless you choose ECB for the mode of operation (CBC - Cypher Block Chaining mode - should do)
","753","<c#><encryption><rsa><public-key-encryption>","2","2","2","2015-09-01 03:26:19","13274101","5","1","941058","","2012-11-07 15:04:06","2012-11-07 14:47:40",""
"13272063","How / Should I Encrypt Variable Size Data with RSA (RSACryptoServiceProvider)","In my research I have found mixed messages on this subject so I'm looking for expertise to explain the best approach to encrypting variable amounts of data.
Requirements:
[Edit: Adding additional requirement #3 in response to comment]

I would like to use RSA for the public/private key encryption scheme
so I can distribute the public key to an application that should
encrypt data but should not know how to decrypt it
I need to support data lengths from 16 characters (credit card
number) to kilobytes (serialized objects) and beyond.  Most of the
    data I encrypt will be small (credit cards, addresses, etc).
This is for encrypting data at rest.

Options I'm Aware Of:

RSA-ONLY: Use RSACryptoServiceProvider to encrypt all data using public key. 
Iterate through the data in blocks that are less than the key size
minus padding.
HYBRID: Use AesCryptoServiceProvider to encrypt the data, calling
.GenerateKey() and .GenerateIV() to generate a random key and IV.
Then use RSACryptoServiceProvider to encrypt the above key and IV
and prepend or append that to the data.

It seems to my the Hybrid approach gives me the best of both worlds.  Strong block cipher (AES) and distributed public key (RSA).
What are the pros and cons of these approaches?  What is the standard?  Surprisingly I have not found much opinion or information on the subject and would appreciate any references you might have.
Bonus:
I am rolling my own for various reasons including corporate licensing restrictions but I'm curious if there is a good standard opensource approach for C#.
","If you just want to use RSA to store a small amount of data, smaller than the number of bits in the key, you can pad the input data with random numbers. There are several padding schemes listed at https://en.wikipedia.org/wiki/RSA_(cryptosystem)#Padding
","753","<c#><encryption><rsa><public-key-encryption>","2","0","2","2015-09-01 03:26:19","13274101","5","1","941058","","2012-11-07 15:04:06","2012-11-07 14:47:40",""
"53924326","RSA should I use X.509 or PKCS #1","Use case:
I have a use case wherein client generates private and public key , sends the base 64 encoded public key to the server.
On server side I will encrypt a message using this public key and send the encrypted message to client , which the client decrypts using its private key.The algorithm agreed upon is 'RSA'.
The problem is on server side I am seeing that certain keys are working using X509EncodedKeySpec as key spec
byte[] publicBytes = Base64.decodeBase64(base64EncodedPubKey);
X509EncodedKeySpec keySpec = new X509EncodedKeySpec(publicBytes);
KeyFactory keyFactory = KeyFactory.getInstance(""RSA"");
PublicKey pubKey = keyFactory.generatePublic(keySpec);

While some keys throw exception (Caused by: java.security.InvalidKeyException: IOException: algid parse error, not a sequence) using X509EncodedKeySpec but work using RSAPublicKeySpec:
byte[] publicBytes = Base64.decodeBase64(base64EncodedPubKey);
org.bouncycastle.asn1.pkcs.RSAPublicKey.RSAPublicKey pkcs1PublicKey = org.bouncycastle.asn1.pkcs.RSAPublicKey.RSAPublicKey.getInstance(publicBytes);
BigInteger modulus = pkcs1PublicKey.getModulus();
BigInteger publicExponent = pkcs1PublicKey.getPublicExponent();
RSAPublicKeySpec keySpec = new RSAPublicKeySpec(modulus, publicExponent);
KeyFactory keyFactory = KeyFactory.getInstance(""RSA"");
PublicKey pubKey = keyFactory.generatePublic(keySpec);

So, what I came to understand is that client and server need to agree whether to use:
PKCS #1 or X.509 for encoding the key . My question is which one is better for my use case? Any guidelines when to use which format?
","There's very little difference. The key format Java calls X.509, more exactly known as the ASN.1 structure SubjectPublicKeyInfo (or SPKI) defined in X.509 or equivalently and more conveniently in RFC5280 sec 4.1, is a quite simple way to handle a large and flexible set of algorithms: it consists of a substructure AlgorithmIdentifier which identifies the algorithm and its parameters if applicable, then an opaque BIT STRING which contains the actual key information (encoded) in a format depending on (the algorithm identified by) the AlgorithmIdentifier. 
For RSA, the algorithm-dependent part is the ASN.1 structure RSAPublicKey defined in PKCS1 or more conveniently RFC8017 appendix A.1.1 and its earlier versions, and duplicated in RFC3279 sec 2.3.1. Thus for RSA the X.509 (SPKI) format contains the PKCS1 format, and since RSA doesn't have parameters (or at least key-related parameters), the only real difference is that the X.509 format explicitly specifies that the key is RSA -- which in your application you already know.
You have already discovered that vanilla (Oracle-was-Sun-now-OpenJDK) Java crypto, aka JCA Java Cryptographic Architecture, directly supports only the X.509 (SPKI) format, which is a minor advantage. However if you use BouncyCastle it is much easier to convert back and forth than the code in your Q; you simply use the org.bouncycastle.asn1.x509.SubjectPublicKeyInfo class to add or discard the AlgorithmIdentifier:
    // test data source
    KeyStore ks = KeyStore.getInstance(""JKS""); ks.load (new FileInputStream (args[0]), args[1].toCharArray());
    byte[] spkienc = ks.getCertificate(args[2]).getPublicKey().getEncoded();
    System.out.println (DatatypeConverter.printHexBinary(spkienc));

    // extract PKCS1 part of original SPKI
    byte[] pkcs1enc = SubjectPublicKeyInfo.getInstance(spkienc).parsePublicKey().getEncoded();
    System.out.println (DatatypeConverter.printHexBinary(pkcs1enc));

    // rebuild SPKI from the PKCS1
    AlgorithmIdentifier algid = new AlgorithmIdentifier(PKCSObjectIdentifiers.rsaEncryption, DERNull.INSTANCE);
    byte[] spki2enc = new SubjectPublicKeyInfo (algid, pkcs1enc).getEncoded();
    System.out.println (DatatypeConverter.printHexBinary(spki2enc));

See my answer to the similar golang x509.MarshalPKIXPublicKey vs x509.MarshalPKCS1PublicKey() and especially the links to:
Converting A public key in SubjectPublicKeyInfo format to RSAPublicKey format java
Generating RSA keys in PKCS#1 format in Java
Problem transmiting a RSA public key, javaME , bouncy castle 
If you don't have BouncyCastle, it's a little harder; you need to write a partial ASN.1 parser or generator. Full ASN.1 processing is rather complicated, but for this case you need only a small subset that isn't too bad. (Yeah, that's faint praise.) I may add this later if I have more time. 
A much bigger potential issue is that your key is not authenticated. The hard part of public key distribution, much harder than tiny format details, is making sure that only the legitimate key is distributed. If an attacker can substitute their publickey for the correct one, then the victim encrypts the supposedly secret data in a way the attacker can easily read, and all your fancy cryptography code is completely worthless.
This is why most actual systems don't distribute bare publickeys, but instead certificates that allow verifying the key is the correct key. There are a few certificate schemes, but the most widespread by far is X.509 and its Internet profile PKIX -- in fact the RFCs I referenced above, 5280 and 3279, are part of PKIX. SSL-now-TLS uses X.509. Code-signing uses X.509. S/MIME email uses X.509. (PGP/GPG uses a different kind of certificates, not X.509, but still certificates.) And (vanilla) Java directly supports X.509 certificates just as well or even better than it does ""X.509"" (SPKI) publickeys.
","752","<java><public-key-encryption><public-key>","1","1","1","2018-12-30 07:39:26","","5","1","2713255","","2018-12-26 04:52:33","2018-12-25 17:27:35",""
"42525861","How to encrypt your Travis keys","The Travis docs say that the easiest way to encrypt keys eg. To upload to S3,  is to use their command line tool.
Are there other ways to do this that doesn't involve installing Ruby etc just to use their command line tool?
","There happens to be a Javascript method, and it's available here with the corresponding github repo here.
To use encrypted S3 keys is moderately confusing because the principles are not well explained in the Travis docs.
In the top left field of the form mentioned above you enter your Travis-CI userid/repo-name so this allows the script to pull down the public key for your repository that has been created by Travis.
In the right top field, you enter:
AWS_ACCESS_KEY_ID:...the..access..string..from..Amazon.IAM...

Click on Encrypt and copy the string generated below Encrypted Data
Then in the right top field, you enter:
AWS_SECRET_ACCESS_KEY:...the.very.secret.string.from.Amazon.IAM...

and again copy the encrypted string. Note that the encrypted strings change each time due to random data being included into the encrypted strings.
These encrypted key pairs are decrypted by Travis and exported as environment variables.  You enter them in the .travis.yml file like this:
global:
        # travis encrypt AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID
        - secure: ""--first-very--long-encrypted-string--="" 
        # travis encrypt AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY
        - secure: ""--second--very-long-encrypted-string--=""
        - AWS_S3_BUCKET_NAME: yourbucketname

Now in the deploy section, you reference them by using the names you used for the encryption pair
deploy:
   provider: s3
   # these are set up in the global env
   access_key_id: $AWS_ACCESS_KEY_ID
   secret_access_key: $AWS_SECRET_ACCESS_KEY
   bucket: $AWS_S3_BUCKET_NAME
   skip_cleanup: true
   upload-dir: travis-builds

If you had used the name ACCESS_ID in global env when you encrypted it, then in deploy you would refer to it as $ACCESS_ID
The upload-dir is created in the named bucket.
When your build runs in Travis, the decrypted keys are not exposed.  Instead what you see is:
See https://docs.travis-ci.com/user/workers/container-based-infrastructure/ for details.
Setting environment variables from .travis.yml
$ export AWS_ACCESS_KEY_ID=[secure]
$ export AWS_SECRET_ACCESS_KEY=[secure]
$ export AWS_S3_BUCKET_NAME=yourbucketname

","750","<travis-ci><public-key-encryption>","2","4","1","2017-03-02 05:27:24","","0","","","","","2017-03-01 07:40:45",""
"37563835","openssl, dafault expiry validity if not provided at creation time","If I create a public private key using openssl, without using any validity flags or any days flag or default days.
What will be the expiry time for such a public private key.
I believe such keys don't have any expiry time.
Please confirm.
I tried looking many Google search results but didn't find much info on this.
","If you are not sure about when your keys expire, use the following command to know it:
openssl x509 -enddate -noout -in yourfile
EDIT: Creating a cert without -days option, it seems expiration date is 30 days after the time certificate is created.
","748","<openssl><rsa><public-key-encryption>","0","0","1","2016-06-01 12:14:18","37564603","3","","466862","","2016-06-01 12:14:18","2016-06-01 08:52:32","2016-06-01 12:14:27"
"48516295","Node-Forge: how can I convert the public key's modulo and exponent from decimal to hex?","I'm using node forge (https://www.npmjs.com/package/node-forge) to create a public and private key pair (nodeforge.pki.rsa.generateKeyPair()) for testing purposes. The modulo (n) and exponent (e) of the public key is represented as an array of decimal values. However, the service that will provide the public key for encryption in production represents modulo and exponent in hex values. My question now is, how can I easily transform these values created by node forge from decimal to hex (I then want to use these values in NodeRSA (https://github.com/rzcoder/node-rsa)):
let pair = nodeforge.pki.rsa.generateKeyPair();

var key = new NodeRSA();
key.importKey({
    n: new Buffer(pair.publicKey.n.data, 'hex'),
    e: new Buffer(pair.publicKey.e.data, 'hex')
});

The format of the public key provided by node forge is:
""publicKey"": {
    ""n"": {
        ""data"": [
            95452259,
            62292680,
            234781115,
            46168802,
            112578909,
            58538647,
            44874864,
            186853653,
            197342112,
            104676488,
            229032986,
            262511790,
            101189381,
            134141598,
            55892282,
            145717908,
            78729040,
            107967002,
            62922480,
            120440374,
            262852613,
            65361518,
            128040269,
            29796715,
            171859902,
            201093939,
            131227011,
            165441987,
            9273795,
            130804401,
            240125365,
            221986724,
            32034899,
            180589760,
            106981089,
            188935555,
            21820073,
            96309166,
            54553752,
            100808208,
            198611546,
            11382488,
            139519439,
            212193674,
            26780810,
            225883560,
            101310123,
            78467199,
            181998612,
            8435669,
            195696345,
            41284550,
            129888967,
            137003722,
            74415901,
            92893643,
            57787310,
            143216416,
            42433969,
            100838107,
            34667532,
            136300465,
            185624737,
            67347,
            93800454,
            226047286,
            76852009,
            57120535,
            266741908,
            27775411,
            39685199,
            4113773,
            214629603,
            12
        ],
        ""t"": 74,
        ""s"": 0
    },
    ""e"": {
        ""data"": [
            65537
        ],
        ""t"": 1,
        ""s"": 0
    }

The reason I want to do that is that I want to test if the encryption facility works correctly (first, encrypt a value with the public key, then decrypt the value with the private key again), because the public key is provided by an external party and else I have no possibility to check, as the private key is not provided. 
Thanks a lot in advance!
","You can use toString(16) to convert to hexadecimal
var nHex = publicKey.n.toString(16);
var eHex = publicKey.e.toString(16);

","748","<node.js><encryption><rsa><public-key-encryption>","1","1","1","2018-01-30 08:39:57","","0","","","","","2018-01-30 07:41:28",""
"37485570","getByte() is returning same byte[ ] for different Strings","I am generating a Session key, that changes every time i run the program.
But when i am converting it into BYTE ARRAY then Byte Array generated is same every time i run the program . IT should be different right?
Here is my code 
Key key;
SecureRandom rand = new SecureRandom();
KeyGenerator generator = KeyGenerator.getInstance(""AES"");
generator.init(rand);
generator.init(256);
key = generator.generateKey();
String key1=key.toString();
byte[] genratesessionKey1 = key1.getBytes();
System.out.println(""SESSION KEY IS(Byte format)   ""+genratesessionKey1.toString());

Then i also used one dummy string. and then i generated its Byte[]. Then i changed the value in that string and generated its Byte[] Again. Still it returns the same result.
String test2=""yadav"";
String key1=key.toString();
byte[] genratesessionKey1 = key1.getBytes();
byte[] g2=test.getBytes(""UTF-8"");
byte[] g3=test.getBytes();              
System.out.println(""Session key in String   ""+key1);
System.out.println(""Testing Byte Format   ""+g2);
System.out.println(""Testing Byte Format 2   ""+g3);

Why Its happening.Any Suggestions will be appreciated
First Execution 
Second Execution
","You can't rely on calling toString() on a byte array to inspect its contents.  The returned value doesn't tell you what the bytes are.
If you really want to check the contents of a byte array and see whether it changes or not, use Arrays.toString(byteArray) instead.  And then you should be able to verify that the byte array does indeed change.
","746","<java><bytearray><public-key-encryption><session-keys>","0","2","3","2016-05-27 16:36:36","37486733","9","","1938988","","2016-05-27 16:33:46","2016-05-27 14:07:33",""
"37485570","getByte() is returning same byte[ ] for different Strings","I am generating a Session key, that changes every time i run the program.
But when i am converting it into BYTE ARRAY then Byte Array generated is same every time i run the program . IT should be different right?
Here is my code 
Key key;
SecureRandom rand = new SecureRandom();
KeyGenerator generator = KeyGenerator.getInstance(""AES"");
generator.init(rand);
generator.init(256);
key = generator.generateKey();
String key1=key.toString();
byte[] genratesessionKey1 = key1.getBytes();
System.out.println(""SESSION KEY IS(Byte format)   ""+genratesessionKey1.toString());

Then i also used one dummy string. and then i generated its Byte[]. Then i changed the value in that string and generated its Byte[] Again. Still it returns the same result.
String test2=""yadav"";
String key1=key.toString();
byte[] genratesessionKey1 = key1.getBytes();
byte[] g2=test.getBytes(""UTF-8"");
byte[] g3=test.getBytes();              
System.out.println(""Session key in String   ""+key1);
System.out.println(""Testing Byte Format   ""+g2);
System.out.println(""Testing Byte Format 2   ""+g3);

Why Its happening.Any Suggestions will be appreciated
First Execution 
Second Execution
","First of all the code won't compile nor run. What will (omitting imports and class) is 
   public static void main(String[] args) 
           throws NoSuchAlgorithmException, UnsupportedEncodingException {
      Key key;
      SecureRandom rand = new SecureRandom();
      KeyGenerator generator = KeyGenerator.getInstance(""AES"");
      generator.init(rand);
      generator.init(256);
      key = generator.generateKey();
      String key1 = key.toString();
      byte[] genratesessionKey1 = key1.getBytes();
      System.out.println(""SESSION KEY IS(Byte format)   "" 
                             +  genratesessionKey1.toString());

      String test2=""yadav"";
      byte[] g2 = test2.getBytes(""UTF-8"");
      byte[] g3 = test2.getBytes();              
      System.out.println(""Session key in String   "" + key1);
      System.out.println(""Testing Byte Format   "" + g2);
      System.out.println(""Testing Byte Format 2   "" + g3);

      System.out.println(""Session key in String   ""
                                     + Arrays.toString(genratesessionKey1));

   } // main(String[])

The output would be 
SESSION KEY IS(Byte format)   [B@1c53fd30
Session key in String   javax.crypto.spec.SecretKeySpec@fffe8e54
Testing Byte Format   [B@50cbc42f
Testing Byte Format 2   [B@75412c2f

This just shows arrays inheriting Object.toString() in the sense of showing the (useless) address as hash value. Hence, toString() lets all arrays look alike no matter what length or content.
Probably, Mudit wants to see the array's content. Adding
System.out.println(""Session key in String   ""
                                     + Arrays.toString(genratesessionKey1));

yields
Session key in String   [106, 97, 118, 97, 120, 46, 99, 114, 121, ....

Rationale: Downward compatibility forbade to enhance the (useless to repeat me) method toString() of all Arrays. Hence, what Mudit and many others expect was put as static methods in the helper class java.util.Arrays since Java5.
","746","<java><bytearray><public-key-encryption><session-keys>","0","0","3","2016-05-27 16:36:36","37486733","9","","1938988","","2016-05-27 16:33:46","2016-05-27 14:07:33",""
"37485570","getByte() is returning same byte[ ] for different Strings","I am generating a Session key, that changes every time i run the program.
But when i am converting it into BYTE ARRAY then Byte Array generated is same every time i run the program . IT should be different right?
Here is my code 
Key key;
SecureRandom rand = new SecureRandom();
KeyGenerator generator = KeyGenerator.getInstance(""AES"");
generator.init(rand);
generator.init(256);
key = generator.generateKey();
String key1=key.toString();
byte[] genratesessionKey1 = key1.getBytes();
System.out.println(""SESSION KEY IS(Byte format)   ""+genratesessionKey1.toString());

Then i also used one dummy string. and then i generated its Byte[]. Then i changed the value in that string and generated its Byte[] Again. Still it returns the same result.
String test2=""yadav"";
String key1=key.toString();
byte[] genratesessionKey1 = key1.getBytes();
byte[] g2=test.getBytes(""UTF-8"");
byte[] g3=test.getBytes();              
System.out.println(""Session key in String   ""+key1);
System.out.println(""Testing Byte Format   ""+g2);
System.out.println(""Testing Byte Format 2   ""+g3);

Why Its happening.Any Suggestions will be appreciated
First Execution 
Second Execution
","I would use DatatypeConverter I've used it with my Security project and it worked like a charm... 
","746","<java><bytearray><public-key-encryption><session-keys>","0","0","3","2016-05-27 16:36:36","37486733","9","","1938988","","2016-05-27 16:33:46","2016-05-27 14:07:33",""
"39752414","MongoDB cant start encrypted server","I keep receiving this error when i try to start the server encrypted:
iMac:~ User$ mongod --enableEncryption --encryptionKeyFile  /data/encryrest/mongodb-keyfile
2016-09-28T08:43:06.120-0700 I CONTROL  [initandlisten] MongoDB starting : pid=50483 port=27017 dbpath=/data/db 64-bit host=iMac.local
2016-09-28T08:43:06.121-0700 I CONTROL  [initandlisten] db version v3.2.9
2016-09-28T08:43:06.121-0700 I CONTROL  [initandlisten] git version: 22ec9e93b40c85fc7cae7d56e7d6a02fd811088c
2016-09-28T08:43:06.121-0700 I CONTROL  [initandlisten] OpenSSL version: OpenSSL 0.9.8zh 14 Jan 2016
2016-09-28T08:43:06.121-0700 I CONTROL  [initandlisten] allocator: system
2016-09-28T08:43:06.121-0700 I CONTROL  [initandlisten] modules: enterprise 
2016-09-28T08:43:06.121-0700 I CONTROL  [initandlisten] build environment:
2016-09-28T08:43:06.121-0700 I CONTROL  [initandlisten]     distarch: x86_64
2016-09-28T08:43:06.121-0700 I CONTROL  [initandlisten]     target_arch: x86_64
2016-09-28T08:43:06.121-0700 I CONTROL  [initandlisten] options: { security: { enableEncryption: true, encryptionKeyFile: ""/data/encryrest/mongodb-keyfile"" } }
2016-09-28T08:43:06.139-0700 I -        [initandlisten] Detected data files in /data/db created by the 'wiredTiger' storage engine, so setting the active storage engine to 'wiredTiger'.
2016-09-28T08:43:06.139-0700 I STORAGE  [initandlisten] wiredtiger_open config: create,cache_size=6G,session_max=20000,eviction=(threads_max=4),config_base=false,statistics=(fast),log=(enabled=true,archive=true,path=journal,compressor=snappy),file_manager=(close_idle_time=100000),checkpoint=(wait=60,log_size=2GB),statistics_log=(wait=0),extensions=[local=(entry=mongo_addWiredTigerEncryptors)],encryption=(name=AES256-CBC,keyid="".system""),
2016-09-28T08:43:06.140-0700 W STORAGE  [initandlisten] It looks like the data files were previously encrypted using an external key with id .DS_Store. Attempting to use the provided key file.
2016-09-28T08:43:09.336-0700 E STORAGE  [initandlisten] WiredTiger (-31802) [1475077389:336536][50483:0x7fff7d80e000], file:WiredTiger.wt, connection: unable to read root page from file:WiredTiger.wt: WT_ERROR: non-specific WiredTiger error
2016-09-28T08:43:09.336-0700 E STORAGE  [initandlisten] WiredTiger (0) [1475077389:336604][50483:0x7fff7d80e000], file:WiredTiger.wt, connection: WiredTiger has failed to open its metadata
2016-09-28T08:43:09.336-0700 E STORAGE  [initandlisten] WiredTiger (0) [1475077389:336632][50483:0x7fff7d80e000], file:WiredTiger.wt, connection: This may be due to the database files being encrypted, being from an older version or due to corruption on disk
2016-09-28T08:43:09.336-0700 E STORAGE  [initandlisten] WiredTiger (0) [1475077389:336664][50483:0x7fff7d80e000], file:WiredTiger.wt, connection: You should confirm that you have opened the database with the correct options including all encryption and compression options
2016-09-28T08:43:10.136-0700 I -        [initandlisten] Assertion: 28595:-31802: WT_ERROR: non-specific WiredTiger error
2016-09-28T08:43:10.136-0700 I STORAGE  [initandlisten] exception in initAndListen: 28595 -31802: WT_ERROR: non-specific WiredTiger error, terminating
2016-09-28T08:43:10.136-0700 I CONTROL  [initandlisten] dbexit:  rc: 100
iMac:~ User$ 

Im on a Mac OS X and assuming the issue is coming for WiredTiger. Can anyone help me? Thank you!
","","741","<mongodb><rest><encryption><terminal><public-key-encryption>","0","","0","2016-09-28 20:14:41","","7","","874185","","2016-09-28 20:14:41","2016-09-28 15:59:14",""
"40582147","PGP Encryption Fails on Large Files","I'm in this weird situation.
I'm trying to encrypt this 11GB which has ~42 Million rows in it using PGP with RSA/Armored Public Key.
Here are the commands I used:
Import Key -> 
gpg --import ~/underwood/keys/my_pub_4096_RSA_key.asc 
PGP Encryption -
gpg -r ""underwood@publickey.com"" -o /usr/local/encrrypted-file/encrypted-11GB-file.txt.pgp
--armor --encrypt /usr/local/file-to-encrrypt/this-is-a-11GB-file.txt

`
Issue :
The file size of /usr/local/encrrypted-file/encrypted-11GB-file.txt.pgp is 4GB and row count is only 8M. I'm not sure what happened here. The command completed successfully after 3min without errors. 
Question:  

How do I further investigate this issue ?   
Is there a cap on gpg command on file size ? Because this command workds perfectly fine with 500MB file. 
How do I achieve full encryption on 11GB file ?

One solution I can think on top of my head is to chunk the 11GB in 500MB files and do this. But the problem here, I'm not allowed to chunk the file.  
Please let me know if there is a better solution to this. 
","See unix split function to split a binary file into pieces.
","738","<encryption><public-key-encryption><pgp><encryption-asymmetric>","0","0","1","2017-07-28 14:44:57","","1","","","","","2016-11-14 05:02:32",""
"22141410","How to encrypt a number larger than N on RSA?","Here is an example:
p = 11, q = 5, N = p*q = 55, choose encryption exponent e = 3, so d = e^-1 mod (p-1)(q-1) = 27.
If I want encrypt x=13, x^e=13^3=52mod55.
I understand how to encrypt a number which is less than N, but how to encrypt a number which is larger than N?
I know if X is larger than N, we should decompose X into several parts and encrypt them respectively, but I don't know how RSA decompose it?
Optional question:
How to encrypt a file with RSA on IOS or python?
","The RSA algorithm does not handle decomposition of the message at all. It just encrypts fixed-size integers. This kind of encryption algorithms is called a block cipher, because it encrypts messages in fixed-size ""blocks"".
How the blocks are obtained is generally not specified by the block-cipher itself. So, you have to decide how to split the message. One of the possible ways to decompose an integer into fixed-size blocks is to convert it to base N, and encrypt each digit separately.
Note that you should not encrypt each digit independently from the others, because that wouldn't be safe. In fact doing so is equivalent to using a monoalphabetic cipher. . There are different mode of operations for block ciphers that you can use to safely encrypt multiple blocks. You should read the wikipedia page to learn about them.
","736","<python><ios><encryption><rsa><public-key-encryption>","1","2","2","2014-03-03 17:40:01","22153517","16","","1079899","","2014-03-03 08:40:50","2014-03-03 07:55:37",""
"22141410","How to encrypt a number larger than N on RSA?","Here is an example:
p = 11, q = 5, N = p*q = 55, choose encryption exponent e = 3, so d = e^-1 mod (p-1)(q-1) = 27.
If I want encrypt x=13, x^e=13^3=52mod55.
I understand how to encrypt a number which is less than N, but how to encrypt a number which is larger than N?
I know if X is larger than N, we should decompose X into several parts and encrypt them respectively, but I don't know how RSA decompose it?
Optional question:
How to encrypt a file with RSA on IOS or python?
","You don't use RSA to encrypt long messages. 
The correct approach is using hybrid encryption instead:

Generate a random AES key, encrypt the actual data with AES. Preferably using an authenticated mode like AES-GCM.
Encrypt the AES key with RSA. This key (126 to 256 bits) is small enough to fit within one RSA block. For example using small and thus weak 1024 bit RSA keys you have 500-700 bits for the actual data (the rest is consumed by the padding).
The ciphertext consists of both the RSA encrypted AES key and the AES encrypted file.
It's essential for security to apply padding here, namely OAEP. Most other paddings, including the popular PKCS#1v1.5 padding are not secure.

Don't try to split the file into blocks which you encrypt with RSA. There are no standard ways for doing this, because it's a bad idea.
","736","<python><ios><encryption><rsa><public-key-encryption>","1","2","2","2014-03-03 17:40:01","22153517","16","","1079899","","2014-03-03 08:40:50","2014-03-03 07:55:37",""
"7057840","Security tokens with unreadable private keys?","I'd like to uniquely identify users by issuing security tokens to them. In order to guarantee non-repudiation I'd like to ensure that no one has access to the user's private key, not even the person who issues the tokens.
What's the cheapest/most-secure way to implement this?
","Use a 3rd party certificate authority: you don't know the private key and you don't have to care about how the client gets and secures the private key (but you can worry about it). Not the cheapest solution ever... 
OR:

Share a secret with each client (printed on paper, through email, phone, whatever...).
Have the client generate the keys based on that secret, time (lets say 5 minute intervals) and whatever else you can get (computer hardware id - if you already know it, client IP, etc...). Make sure that you have the user input the secret and never store it in an app/browser.
Invalidate/expire the tokens often and negotiate new ones

This is only somewhat safe (just like any other solution)...if you want to be safe, make sure that the client computer is not compromised.
It depends on where/how you want to use those keys* but the bottom line is that in the case of asymmetric keys, the client will encrypt the data sent to you (the server) using their private key and you (the server) will decrypt that data using the client's public key (opposite of how HTTPS works).
Can you verify, at any point in time, the identity of your clients?
If the client computer is compromised, you can safely assume that the private key is compromised too. What's wrong with SSL/HTTPS. Do you really need to have one certificate per client?
Tokens are not the same thing as keys and they don't have to rely on public/private keys. Transport, however, might require encryption. 
*my bank gave me a certificate (which only works in IE) used to access my online banking account. I had to go through several convoluted steps to generate and install that certificate  and it only works on one computer - do you think that your clients/users would agree to go through this kind of setup?  
","732","<security><public-key-encryption>","1","3","3","2011-08-18 00:00:40","7058570","0","","14731","","2011-08-14 22:05:58","2011-08-14 15:46:09",""
"7057840","Security tokens with unreadable private keys?","I'd like to uniquely identify users by issuing security tokens to them. In order to guarantee non-repudiation I'd like to ensure that no one has access to the user's private key, not even the person who issues the tokens.
What's the cheapest/most-secure way to implement this?
","It would be relatively easy for compromised computers to steal the user's private key if it were stored as a soft public key (e.g., on the hard drive).  (APT (botnet) malware has been known to include functionality to do exactly this.)
But more fundamentally, nothing short of physically incapacitating the user will guarantee non-repudiation.  Non-repudiation is something the user chooses to do, opposing evidence notwithstanding, and to prove that a user didn't do something is impossible.  Ultimately, non-repudiation involves a legal (or at least a business) question: what level of confidence do you have that the user performed the action he is denying having performed and that his denial is dishonest?  Cryptosystems can only provide reasonable confidence of a user's involvement in an action; they cannot provide absolute proof.
PIV cards (and PIV-I cards) use a number of safeguards for signing certificates.  First, the private key is stored on the smart card, and there is no trivial way to extract it.  The card requires a numeric PIN to use the private signing key, and effectively destroys the key after a certain number of incorrect attempts.  The hardware cryptomodule must meet Level-2 standards and be tamper-resistant, and transport of the card requires Level-3 physical security (FIPS 201).  The certificate is signed by a trusted CA.  The PIN, if entered using a keyboard, must be sent directly to the card to avoid keylogger-type attacks.
These precautions are elaborate, intensive, and still do not guarantee non-repudiation.  (What if malware convinces the user to sign a different document than the one he is intending to sign?  Or the user is under duress?  Or an intelligence agency obtains the card in transit and uses a secret vulnerability to extract the private key before replacing the card?)
Security is not generally a question of cheapest/most secure, but rather of risk assessment, mitigation, and ultimately acceptance.  What are your significant risks?  If you assess the types of non-repudiation risks you face and implement effective compensating controls, you will be more likely to find a cost-effective solution than if you seek to eliminate risk altogether.
","732","<security><public-key-encryption>","1","1","3","2011-08-18 00:00:40","7058570","0","","14731","","2011-08-14 22:05:58","2011-08-14 15:46:09",""
"7057840","Security tokens with unreadable private keys?","I'd like to uniquely identify users by issuing security tokens to them. In order to guarantee non-repudiation I'd like to ensure that no one has access to the user's private key, not even the person who issues the tokens.
What's the cheapest/most-secure way to implement this?
","The standard way to handle non-repudiation in a digital signature app is to use a trusted third party, a 3rd party cert authority. 
Be careful trying to create your own system--since you're not an expert in the field, you'll most probably end up either losing the non-repudiation ability that you seek or some other flaw.
The reason the standards for digital signatures exist is that this stuff is very hard to get right in a provable way. See ""Schneier's Law""
Also, eventually, non-repudiation comes down to someone being sued--you say that ""B"" did it (signed the agreement, pressed the button, etc), but ""B"" denies it. You say you can ""prove"" that B did it. But so what, you'll need to prove in court that B did it, to get the court to grant you relief (to order B to do something such as pay damages.) 
But it will be very very expensive to sue someone and to prove their case due to a digital sig system. And if you went to all that trouble and then the digital sig system was some homebrew system, not a standard, then your odds of relief would drop down to about 0%.
Conclusion: if you care enough about the digital sig to sue people, then use a standard for digital sig. If you will ultimately negotiate rather than sue, then look at the different options. 
For example, why not use a hardware security token They're now available as apps for people's phones, too.
","732","<security><public-key-encryption>","1","0","3","2011-08-18 00:00:40","7058570","0","","14731","","2011-08-14 22:05:58","2011-08-14 15:46:09",""
"23068616","Can't run Curve25519 implementation on Android device - able to on PC","I am trying to port a Java implementation of a authentication mechanism that uses Curve25519. 
The libraries work perfect on my PC. But when I run it on an android device - I get a stackoverflow. 
The Curve25519 implementation does have a lot of recursive calls but my question is why is it capable of running on my PC and not on my Moto G. Is this an Android limitation?
The error throws up in the public key method of the Curve Implementation that too inside the publicKeyFrom512 and somewhere in the scalarmult function.
Here is the android login activity: 
public class LoginActivity extends Activity {

    protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.activity_login);
    SecureRandom secureRandomGenerator = null;
    try {
        secureRandomGenerator = SecureRandom.getInstance(""SHA1PRNG"");
    } catch (NoSuchAlgorithmException e) {
        // TODO Auto-generated catch block
        e.printStackTrace();
    }
    byte[] randomBytes = new byte[256];
    secureRandomGenerator.nextBytes(randomBytes);
    byte[] privateKey = HMACSHA256.mac(randomBytes, ""www.example.com"");
    // STEP 5: Synthesize a public key by using the result from STEP 4
    byte[] publicKey = Curve25519.publickey(privateKey);

    byte[] signature = Curve25519.signature(
            ""www.example.com"".getBytes(Charset.forName(""UTF-8"")),
            privateKey, publicKey);
    System.out.println(signature.toString());
    try {
        boolean check = Curve25519.checkvalid(signature,
                ""www.example.com"".getBytes(), publicKey);
        Log.d(""TRUE?"", Boolean.toString(check));
    } catch (Exception e) {
        // TODO Auto-generated catch block
        e.printStackTrace();
    }
}

I am using this implementation of Curve25519 
import android.annotation.SuppressLint;
import android.annotation.TargetApi;
import android.os.Build;
import java.math.BigInteger;
import java.nio.ByteBuffer;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.Arrays;

/* Written by k3d3
 * Released to the public domain
 */

@TargetApi(Build.VERSION_CODES.GINGERBREAD)
public class Curve25519 {
    static final int b = 256;
    static final BigInteger q = new BigInteger(""57896044618658097711785492504343953926634992332820282019728792003956564819949"");
    static final BigInteger qm2 = new BigInteger(""57896044618658097711785492504343953926634992332820282019728792003956564819947"");
    static final BigInteger qp3 = new BigInteger(""57896044618658097711785492504343953926634992332820282019728792003956564819952"");
    static final BigInteger l = new BigInteger(""7237005577332262213973186563042994240857116359379907606001950938285454250989"");
    static final BigInteger d = new BigInteger(""-4513249062541557337682894930092624173785641285191125241628941591882900924598840740"");
    static final BigInteger I = new BigInteger(""19681161376707505956807079304988542015446066515923890162744021073123829784752"");
    static final BigInteger By = new BigInteger(""46316835694926478169428394003475163141307993866256225615783033603165251855960"");
    static final BigInteger Bx = new BigInteger(""15112221349535400772501151409588531511454012693041857206046113283949847762202"");
    static final BigInteger[] B = {Bx.mod(q),By.mod(q)};
    static final BigInteger un = new BigInteger(""57896044618658097711785492504343953926634992332820282019728792003956564819967"");

    static byte[] H(byte[] m) {
        MessageDigest md;
        try {
            md = MessageDigest.getInstance(""SHA-512"");
            md.reset();
            return md.digest(m);
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
        return null;
    }

    static BigInteger expmod(BigInteger b, BigInteger e, BigInteger m) {
        //System.out.println(""expmod open with b="" + b + "" e="" + e + "" m="" + m);
        if (e.equals(BigInteger.ZERO)) {
            //System.out.println(""expmod close with 1z"");
            return BigInteger.ONE;
        }
        BigInteger t = expmod(b, e.divide(BigInteger.valueOf(2)), m).pow(2).mod(m);
        //System.out.println(""expmod 1/2 t=""+t+"" e=""+e+"" testbit=""+(e.testBit(0)?1:0));
        if (e.testBit(0)) {
            t = t.multiply(b).mod(m);
        }
        //System.out.println(""expmod close with "" + t);
        return t;
    }

    static BigInteger inv(BigInteger x) {
        //System.out.println(""inv open with "" + x);
        //System.out.println(""inv close with "" + expmod(x, qm2, q));
        return expmod(x, qm2, q);
    }

    static BigInteger xrecover(BigInteger y) {
        BigInteger y2 = y.multiply(y);
        BigInteger xx = (y2.subtract(BigInteger.ONE)).multiply(inv(d.multiply(y2).add(BigInteger.ONE)));
        BigInteger x = expmod(xx, qp3.divide(BigInteger.valueOf(8)), q);
        if (!x.multiply(x).subtract(xx).mod(q).equals(BigInteger.ZERO)) x = (x.multiply(I).mod(q));
        if (!x.mod(BigInteger.valueOf(2)).equals(BigInteger.ZERO)) x = q.subtract(x);
        return x;
    }

    static BigInteger[] edwards(BigInteger[] P, BigInteger[] Q) {
        BigInteger x1 = P[0];
        BigInteger y1 = P[1];
        BigInteger x2 = Q[0];
        BigInteger y2 = Q[1];
        BigInteger dtemp = d.multiply(x1).multiply(x2).multiply(y1).multiply(y2);
        //System.out.println(""edwards open with ""+x1+"",""+x2+"" ""+y1+"",""+y2+"" d=""+d+"" dtemp=""+dtemp);
        BigInteger x3 = ((x1.multiply(y2)).add((x2.multiply(y1)))).multiply(inv(BigInteger.ONE.add(dtemp)));
        //System.out.println(""edwards 1/2 with ""+x1+"",""+x2+"" ""+y1+"",""+y2+"" d=""+d+"" dtemp=""+dtemp);
        BigInteger y3 = ((y1.multiply(y2)).add((x1.multiply(x2)))).multiply(inv(BigInteger.ONE.subtract(dtemp)));
        //System.out.println(""edwards 2/2 with ""+x1+"",""+x2+"" ""+y1+"",""+y2+"" d=""+d+"" dtemp=""+dtemp);
        //System.out.println(""edwards close with ""+x3.mod(q)+"",""+y3.mod(q));
        return new BigInteger[]{x3.mod(q), y3.mod(q)};
    }

    static BigInteger[] scalarmult(BigInteger[] P, BigInteger e) {
        //System.out.println(""scalarmult open with e = "" + e);
        if (e.equals(BigInteger.ZERO)) {
            //System.out.println(""scalarmult close with Q = 0,1"");
            return new BigInteger[]{BigInteger.ZERO, BigInteger.ONE};
        }
        BigInteger[] Q = scalarmult(P, e.divide(BigInteger.valueOf(2)));
        //System.out.println(""scalarmult asQ = "" + Q[0] + "","" + Q[1]);
        Q = edwards(Q, Q);
        //System.out.println(""scalarmult aeQ = "" + Q[0] + "","" + Q[1] + "" e=""+e+"" testbit=""+(e.testBit(0)?1:0));
        if (e.testBit(0)) Q = edwards(Q, P);
        //System.out.println(""scalarmult close with Q = "" + Q[0] + "","" + Q[1]);
        return Q;
    }

    static byte[] encodeint(BigInteger y) {
        byte[] in = y.toByteArray();
        byte[] out = new byte[in.length];
        for (int i=0;i<in.length;i++) {
            out[i] = in[in.length-1-i];
        }
        return out;
    }

    static byte[] encodepoint(BigInteger[] P) {
        BigInteger x = P[0];
        BigInteger y = P[1];
        byte[] out = encodeint(y);
        //System.out.println(""encodepoint x=""+x+"" testbit=""+(x.testBit(0) ? 1 : 0));
        out[out.length-1] |= (x.testBit(0) ? 0x80 : 0);
        return out;
    }

    static int bit(byte[] h, int i) {
        //System.out.println(""bit open with i=""+i);
        //System.out.println(""bit close with ""+(h[i/8] >> (i%8) & 1));
        return h[i/8] >> (i%8) & 1;
    }

    public static byte[] publickeyFrom512(byte[] h) {
        //System.out.println(""publickey open with h="" + test.getHex(h));
        BigInteger a = BigInteger.valueOf(2).pow(b-2);
        for (int i=3;i<(b-2);i++) {
            BigInteger apart = BigInteger.valueOf(2).pow(i).multiply(BigInteger.valueOf(bit(h,i)));
            //System.out.println(""publickey apart=""+apart);
            a = a.add(apart);
        }
        BigInteger[] A = scalarmult(B,a);
        //System.out.println(""publickey close with A=""+A[0]+"",""+A[1]+"" out=""+test.getHex(encodepoint(A)));
        return encodepoint(A);
    }

    public static byte[] publickey(byte[] sk) {
        byte[] h = H(sk);
        return publickeyFrom512(h);
    }

    static BigInteger Hint(byte[] m) {
        byte[] h = H(m);
        BigInteger hsum = BigInteger.ZERO;
        for (int i=0;i<2*b;i++) {
            hsum = hsum.add(BigInteger.valueOf(2).pow(i).multiply(BigInteger.valueOf(bit(h,i))));
        }
        return hsum;
    }

    public static byte[] signatureFrom512(byte[] m, byte[] h, byte[] pk) {
        //System.out.println(""signature open with m=""+test.getHex(m)+"" h=""+test.getHex(h)+"" pk=""+test.getHex(pk));
        BigInteger a = BigInteger.valueOf(2).pow(b-2);
        for (int i=3;i<(b-2);i++) {
            a = a.add(BigInteger.valueOf(2).pow(i).multiply(BigInteger.valueOf(bit(h,i))));
        }
        //System.out.println(""signature a=""+a);
        ByteBuffer rsub = ByteBuffer.allocate((b/8)+m.length);
        rsub.put(h, b/8, b/4-b/8).put(m);
        //System.out.println(""signature rsub=""+test.getHex(rsub.array()));
        BigInteger r = Hint(rsub.array());
        //System.out.println(""signature r=""+r);
        BigInteger[] R = scalarmult(B,r);
        ByteBuffer Stemp = ByteBuffer.allocate(32+pk.length+m.length);
        Stemp.put(encodepoint(R)).put(pk).put(m);
        BigInteger S = r.add(Hint(Stemp.array()).multiply(a)).mod(l);
        ByteBuffer out = ByteBuffer.allocate(64);
        out.put(encodepoint(R)).put(encodeint(S));
        return out.array();
    }
    public static byte[] signature(byte[] m, byte[] sk, byte[] pk) {
        byte[] h = H(sk);
        return signatureFrom512(m, h, pk);
    }

    static boolean isoncurve(BigInteger[] P) {
        BigInteger x = P[0];
        BigInteger y = P[1];
        //System.out.println(""isoncurve open with P=""+x+"",""+y);
        BigInteger xx = x.multiply(x);
        BigInteger yy = y.multiply(y);
        BigInteger dxxyy = d.multiply(yy).multiply(xx);
        //System.out.println(""isoncurve close with ""+xx.negate().add(yy).subtract(BigInteger.ONE).subtract(dxxyy).mod(q));
        return xx.negate().add(yy).subtract(BigInteger.ONE).subtract(dxxyy).mod(q).equals(BigInteger.ZERO);
    }

    static BigInteger decodeint(byte[] s) {
        byte[] out = new byte[s.length];
        for (int i=0;i<s.length;i++) {
            out[i] = s[s.length-1-i];
        }
        return new BigInteger(out).and(un);
    }

    static BigInteger[] decodepoint(byte[] s) throws Exception {
        byte[] ybyte = new byte[s.length];
        for (int i=0;i<s.length;i++) {
            ybyte[i] = s[s.length-1-i];
        }
        //System.out.println(""decodepoint open with s=""+test.getHex(s)+"" ybyte=""+test.getHex(ybyte));
        BigInteger y = new BigInteger(ybyte).and(un);
        //System.out.println(""decodepoint y=""+y);
        BigInteger x = xrecover(y);
        //System.out.println(""decodepoint x=""+x+"" testbit=""+(x.testBit(0)?1:0)+"" bit=""+bit(s, b-1));
        if ((x.testBit(0)?1:0) != bit(s, b-1)) {
            x = q.subtract(x);
        }
        BigInteger[] P = {x,y};
        if (!isoncurve(P)) throw new Exception(""decoding point that is not on curve"");
        return P;
    }

    @SuppressLint(""NewApi"")
    public static boolean checkvalid(byte[] s, byte[] m, byte[] pk) throws Exception {
        if (s.length != b/4) throw new Exception(""signature length is wrong"");
        if (pk.length != b/8) throw new Exception(""public-key length is wrong"");
        //System.out.println(""checkvalid open with s=""+test.getHex(s)+"" m=""+test.getHex(m)+"" pk=""+test.getHex(pk));
        byte[] Rbyte = Arrays.copyOfRange(s, 0, b/8);
        //System.out.println(""checkvalid Rbyte=""+test.getHex(Rbyte));
        BigInteger[] R = decodepoint(Rbyte);
        BigInteger[] A = decodepoint(pk);
        //System.out.println(""checkvalid R=""+R[0]+"",""+R[1]+"" A=""+A[0]+"",""+A[1]);
        byte[] Sbyte = Arrays.copyOfRange(s, b/8, b/4);
        //System.out.println(""checkvalid Sbyte=""+test.getHex(Sbyte));
        BigInteger S = decodeint(Sbyte);
        //System.out.println(""checkvalid S=""+S);
        ByteBuffer Stemp = ByteBuffer.allocate(32+pk.length+m.length);
        Stemp.put(encodepoint(R)).put(pk).put(m);
        BigInteger h = Hint(Stemp.array());
        BigInteger[] ra = scalarmult(B,S);
        BigInteger[] rb = edwards(R,scalarmult(A,h));
        //System.out.println(""checkvalid ra=""+ra[0]+"",""+ra[1]+"" rb=""+rb[0]+"",""+rb[1]);
        if (!ra[0].equals(rb[0]) || !ra[1].equals(rb[1])) // Constant time comparison
            return false;
        return true;
    }
}

And here is the error:

04-15 00:37:31.317: W/dalvikvm(26308): threadid=1: thread exiting with
  uncaught exception (group=0x41614d40)
04-15 00:37:31.714: E/AndroidRuntime(26308): FATAL EXCEPTION: main
04-15 00:37:31.714: E/AndroidRuntime(26308): Process:
  com.rtindru.qrlogin, PID: 26308
04-15 00:37:31.714: E/AndroidRuntime(26308):
  java.lang.StackOverflowError
04-15 00:37:31.714: E/AndroidRuntime(26308):  at
  java.lang.ref.FinalizerReference.add(FinalizerReference.java:54)
04-15 00:37:31.714: E/AndroidRuntime(26308):  at
  java.math.BigInt.(BigInt.java:24)
04-15 00:37:31.714: E/AndroidRuntime(26308):  at
  java.math.BigInt.newBigInt(BigInt.java:56)
04-15 00:37:31.714: E/AndroidRuntime(26308):  at
  java.math.BigInt.bigExp(BigInt.java:285)
04-15 00:37:31.714: E/AndroidRuntime(26308):  at
  com.sqrl.crypto.Curve25519.expmod(Curve25519.java:48)
04-15 00:37:31.714: E/AndroidRuntime(26308):  at
  com.sqrl.crypto.Curve25519.expmod(Curve25519.java:48)
04-15 00:37:31.714: E/AndroidRuntime(26308):  at
  com.sqrl.crypto.Curve25519.expmod(Curve25519.java:48)
04-15 00:37:31.714: E/AndroidRuntime(26308):  at
  com.sqrl.crypto.Curve25519.expmod(Curve25519.java:48)
  (These lines are repeated a hundred odd times)
  04-15 00:37:31.714: E/AndroidRuntime(26308):  at com.sqrl.cry
04-15 00:41:52.842: I/dalvikvm(26712): threadid=1: stack overflow on
  call to Ljava/lang/ref/FinalizerReference;.:VLL 04-15
00:41:52.842: I/dalvikvm(26712):   method requires 12+20+12=44 bytes,
  fp is 0x5755f314 (20 left) 
04-15 00:41:52.842: I/dalvikvm(26712):
  expanding stack end (0x5755f300 to 0x5755f000)

","This was an issue with the calculations causing a stack overflow. 
The repeated recursive division exceeded the call stack allocated to the process. 
I tried running it as an AsyncTask, but still the same issue. 
I got around this by spawning a new Thread with a lot more memory (64kb) than what Android typically allocates.
I used this constructor:
Thread(ThreadGroup group, Runnable target, String name, long stackSize)

This did resolve the issue, but I am not sure how such a simple workaround is possible! 
Any comments?
","732","<java><android><public-key-encryption><elliptic-curve>","0","0","1","2014-06-27 09:56:34","24449005","1","5","1410277","","2014-04-14 19:33:24","2014-04-14 19:28:21",""
"7936393","Is there anything strange about a 4096 bit GPG key?","I noticed the GnuPG HowTo says ""some people say you should have at a key-size of 2048 bits (which is also really a maximum with GnuPG at this moment).""  Is there any reason besides computation time why this discourages key sizes above 2048 bits?
","I didn't read it as discouraging. It says: 

When security is a top priority and performance is less an issue you
  ought to pick the largest key-size available.

It also says ""...key-size of 2048 bits (which is also really a maximum with GnuPG at this moment). ..."", but that moment was in 2004, more than 7 years ago.
","731","<rsa><public-key-encryption><gnupg>","0","2","1","2013-10-17 19:54:02","7940077","0","","","","","2011-10-29 01:26:38",""
"43876917","How to encrypt java object in rest web service response and decrypt in angularjs controller response?","I am sending a java object like user information in rest web service call and display the some information in angularjs controller $http.post call response as data
Below is my piece of code in rest web service call
public @ResponseBody getEmployeeDetails(int id){
      Employee employee = getDetailsFromDB(id);
      return Response.put(employee).build();
}

In angularjs controller i am getting as
$http.post(""./rest/getEmployeeDetails"").then(function(data){
       var employee = data;
 });

So in browser networks, in response i can see the response data clearly like
data: ""Name"": ""Bri Squared"", ""Role"": ""Admin"", ""Mobile"": ""9829399402""

In this case i need to hide the information, so i need to encrypt and decrypt data. Can anyone suggest me any idea for encryption and decryption between rest web service call and response in angularjs controller?
","For the sake of answering the question, you can use Crypto-js for angular/2.
How to use CryptoJS with Angular 2 and TypeScript in WebPack build environment?
But as a reminder, there is really nothing to hide in Javascript. It would be useless to do encryption and decryption in JavaScript.  Keep your channel secure on TSL and anything you want to hide from the client just don't share it.
","730","<angularjs><encryption><public-key-encryption>","-1","0","1","2017-05-09 18:19:15","","3","","","","","2017-05-09 18:04:32",""
"43296285","Extending Expiration dates of gnupg keys with the private key residing on a smart card","I had setup a working smart card setup, where the local key ring solely contained public subkeys and secret keys resided on a smart card.
Conservatively I set the expiration date to 1 year.
Setup worked nicely and as the keys approached there expiration date, I proceeded as follows to attempt to extend their expiration date:

Kill running gpg-agent:
pkill gpg-agent

Import offline master key (backup):
gpg --import <KEYID>.master.key

Edit expiry of subkeys (pubkey):
gpg --expert --edit-key <KEYID>


toggle keys 1, 2, 3 (sign, encrypt, authentication) 
expire: 1y
save

Remove secret master keys:
gpg --delete-secret-keys <KEYID>


As a result the keys remain unavailable (expired?) to all means I intent to use them with (kmail/kgpg/kleopatra, evolution/seahorse, etc.).
Where did I go wrong and how may I recover?
","As evident from the comments above, I noted, that the secret keys were (no longer?) listed by gpg --list-secret-keys.
That was remedied by explicitly querying the reader-inserted smart card using gpg --card-status, followed by a now successful gpg --list-secret-keys.
After having pointed evolution at the now available secret key and removing the smart card from its reader, the mail client now (again) asks for insertion of the card when requesting signatures/encryption.
Works again. considered solved.
","725","<public-key-encryption><gnupg><public-key>","2","1","1","2018-12-01 15:14:57","43319757","2","1","","","","2017-04-08 16:02:42",""
"40353070","Proper asymmetric file encryption in Go","I need a way to allow multiple people encrypting various files but only one party been able to read them all. I wrote a program in Go by following various online examples but at some point I got the following error:
Error from encryption: crypto/rsa: message too long for RSA public key size
Is RSA the wrong way to go? Is it ok if I break the file into multiple chunks and encrypt them? Is there an asymmetric block cipher that I can easily use?
I read the discussion here and it is said that RSA is not the proper way to go.
Can you also provide with an example?
","If you need public key asymmetric encryption for data larger than the key size you need to use hybrid encryption. Essentially this is how HTTPS works.
Hybrid encryption is where the data is encrypted with symmetric key encryption such as AES and that key is encrypted with asymmetric key encryption such as RSA or EC (Elliptic Curve) Cryptography.
Do not break the file into multiple chunks and encrypt them. 
","724","<encryption><go><public-key-encryption>","2","0","2","2017-08-11 11:01:33","45633604","1","","-1","","2017-05-23 12:00:37","2016-11-01 01:49:20",""
"40353070","Proper asymmetric file encryption in Go","I need a way to allow multiple people encrypting various files but only one party been able to read them all. I wrote a program in Go by following various online examples but at some point I got the following error:
Error from encryption: crypto/rsa: message too long for RSA public key size
Is RSA the wrong way to go? Is it ok if I break the file into multiple chunks and encrypt them? Is there an asymmetric block cipher that I can easily use?
I read the discussion here and it is said that RSA is not the proper way to go.
Can you also provide with an example?
","So I ended up using GPG and my service has one unique private key and I share the public one with my users.
","724","<encryption><go><public-key-encryption>","2","0","2","2017-08-11 11:01:33","45633604","1","","-1","","2017-05-23 12:00:37","2016-11-01 01:49:20",""
"16524785","Windows Phone 8 RSA Encryption","Hi i am trying o generate my public key for my RSA 4096 encryption in my windows phone 8 ecryption app
i am using this method:
RSACryptoServiceProvider rsaProvider = new RSACryptoServiceProvider(4096);
var pub_key = rsaProvider.ExportParameters(false); // export public key
and now i am trying to convert the pub_key to a pem format so i can send it to the server
i am doing the below step
Byte[] bpkey = Combine(pub_key.Modulus, pub_key.Exponent);
i am combining the byte array into one using "" RSA public key = modulus + exponent ""
string pkey = ""----BEGIN PUBLIC KEY----\n"" + Convert.ToBase64(bpkey)+ ""\n----END PUBLIC KEY----"";
but i am getting that the pkey is an invalid pem format when i send it to the server!!!
any idea how to it correctly or how to fix the error.
","just like i say if your server DeEncrypt string use Java language . you can't use RSACryptoServiceProvider encrypt string in windows phone client.
.Net platform SDK provides RSA encryption due plus random numbers, so it must also decrypt the. Net platform for decryption. If you keep such a cross-platform java platform decryption will be a problem.
you can try this  way . use bigintege convert string 
http://www.codeproject.com/csharp/biginteger.asp
will be fine
","722","<silverlight><encryption><windows-phone-8><rsa><public-key-encryption>","1","1","2","2014-01-08 14:54:06","","0","","","","","2013-05-13 14:40:57",""
"16524785","Windows Phone 8 RSA Encryption","Hi i am trying o generate my public key for my RSA 4096 encryption in my windows phone 8 ecryption app
i am using this method:
RSACryptoServiceProvider rsaProvider = new RSACryptoServiceProvider(4096);
var pub_key = rsaProvider.ExportParameters(false); // export public key
and now i am trying to convert the pub_key to a pem format so i can send it to the server
i am doing the below step
Byte[] bpkey = Combine(pub_key.Modulus, pub_key.Exponent);
i am combining the byte array into one using "" RSA public key = modulus + exponent ""
string pkey = ""----BEGIN PUBLIC KEY----\n"" + Convert.ToBase64(bpkey)+ ""\n----END PUBLIC KEY----"";
but i am getting that the pkey is an invalid pem format when i send it to the server!!!
any idea how to it correctly or how to fix the error.
","Actually it's because there's a difference in signing between Java and .NET (little endian vs big endian).  Just reverse the byte arrays and you should be good to go. Also check out:
http://scrypt.codeplex.com
","722","<silverlight><encryption><windows-phone-8><rsa><public-key-encryption>","1","1","2","2014-01-08 14:54:06","","0","","","","","2013-05-13 14:40:57",""
"27723613","Importing RSA keys in PHP","I wanted to encrypt/decrypt/sign... and so on and I found this code:
public $pubkey = '...public key here...';
public $privkey = '...private key here...';

public function encrypt($data)
{
    if (openssl_public_encrypt($data, $encrypted, $this->pubkey))
        $data = base64_encode($encrypted);
    else
        throw new Exception('Unable to encrypt data. Perhaps it is bigger than the key size?');

    return $data;
}

public function decrypt($data)
{
    if (openssl_private_decrypt(base64_decode($data), $decrypted, $this->privkey))
        $data = $decrypted;
    else
        $data = '';

    return $data;
}

The only problem is that I got a private.pem (or .key dosnt matter) format and the question:
How should I import my private.pem file in this code?
","Use the openssl_pkey_get_public() function: http://php.net/manual/en/function.openssl-pkey-get-public.php
It decrypt the .pem format and extracts the keys necessary for the work.
","719","<php><encryption><rsa><public-key-encryption><private-key>","1","1","1","2014-12-31 18:38:19","27724365","0","","206403","","2014-12-31 17:42:38","2014-12-31 16:20:18",""
"43957055","openssl_pkey_new doesn't work in xampp","I have googled and studied openssl for several days, and have not found a solution to the problem with openssl_pkey_new in XAMPP for windows. Have tried both ver. 7.1.1 and 7.1.4. Each time i try to run this code:
echo getenv('OPENSSL_CONF').""<p>"";

$config = array(
    ""config"" => ""c:/xampp/apache/conf/openssl.cnf"",
    ""digest_alg"" => ""sha256"",
    ""private_key_bits"" => 4096,
    ""private_key_type"" => OPENSSL_KEYTYPE_RSA,
);

// Create the private and public key
$res = openssl_pkey_new($config);
echo ""<br>openssl_pkey_new: <br>"";
//var_dump(openssl_error_string());
while($e = openssl_error_string() ) {
    print_r($e.""<br>\n"");
}

// Extract the private key from $res to $privKey
openssl_pkey_export($res, $privKey);
echo ""<br>openssl_pkey_export: <br>"";
while($e = openssl_error_string() ) {
    print_r($e.""<br>\n"");
}

// Extract the public key from $res to $pubKey
$pubKey = openssl_pkey_get_details($res);
$pubKey = $pubKey[""key""];
echo ""<br>openssl_pkey_get_details: <br>"";
while($e = openssl_error_string() ) {
    print_r($e.""<br>\n"");
}

I get these errors:
openssl_pkey_new:
error:02001003:system library:fopen:No such process
error:2006D080:BIO routines:BIO_new_file:no such file
error:0E064002:configuration file routines:CONF_load:system lib
error:0E06D06C:configuration file routines:NCONF_get_string:no value
error:0E06D06C:configuration file routines:NCONF_get_string:no value
error:0E06D06C:configuration file routines:NCONF_get_string:no value
error:0E06D06C:configuration file routines:NCONF_get_string:no value

openssl_pkey_export:
error:02001003:system library:fopen:No such process
error:2006D080:BIO routines:BIO_new_file:no such file
error:0E064002:configuration file routines:CONF_load:system lib
error:02001003:system library:fopen:No such process
error:2006D080:BIO routines:BIO_new_file:no such file
error:0E064002:configuration file routines:CONF_load:system lib

Maybe erroneous openssl.cnf or/and server.key+server.csr+server.crt
and/or maybe erroneous  libeay32.dll+ssleay32.dll, or all is bad?
an anoying problem to be mild in my expression!!
Key generating tutorial: 
https://latunyj.wordpress.com/2011/10/31/generating-self-signed-certificate-in-xampp-win32-for-apache-web-server/
Comprhensive answers to the problem:
What I have to do to OpenSSL extension work on my xampp (Windows)? :(
Other links:
https://snippets.aktagon.com/snippets/543-how-to-fix-pem-read-bio-no-start-line-error-nginx-error
http://au.php.net/manual/en/openssl.installation.php
https://community.apachefriends.org/f/viewtopic.php?f=16&t=71199
Really hope someone know the answer to this problem.
Edit:
If wondering why it is annoying, is because i am using RSA-OAEP between server and client, implementing openssl and webcrypto to encrypt/decrypt AES-CBC keys. AES-CBC encrypted data is exchanged together with the encrypted keys.
My temporary workaround is generating the on server reciding RSA keypair on client and send in clear text. Ok for development, but not appopriate for production. That is the annoying part. XAMPP prior to 7.x.x didn't have AES-CBC methods. By the way XAMPP is only development.
","","718","<php><encryption><public-key-encryption><php-openssl>","3","","0","2017-05-14 15:21:22","","7","","-1","","2017-05-23 12:03:02","2017-05-13 19:12:48",""
"9965845","Combining Symmetric and Asymmetric encryption","I am trying to move a file from station A to station C securely, on the way from A to C there is another ** insecure ** station, B.
(A) -> (B) -> (C)
Station B receives the file from station A and pass it to station C.
I want to make sure that Station B will not be able to read the content of the file.
In order to enforce that I am using Symmetric and Asymmetric encryption to encrypt the file.

Generating a random symmetric key = SK on station A
Encrypt the file symmetrically using SK as the key.
Encrypting SK asymmetrically with C's public key = AK

Now I need to deliver C both AK and the Encrypted File.
Since B doesn't have the Private Key, he will not be able to retrieve SK and will not be able to decrypt the file.
Question:
1. Is there a way to combine AK and the encrypted File into one big file? (is there any standard way of doing this using OpenSSL). 
The only way i can think of is to make my own format: [AK Len][AK][Encrypted File]
Any libraries in python that can help doing that task?
","Yes, there are several existing standards for encrypting files in this way.
I suggest using the gpg utility, which implements the OpenPGP standard.
","715","<encryption><openssl><public-key-encryption><encryption-symmetric>","0","-1","1","2012-04-02 04:37:57","","2","","1144031","","2012-04-01 16:04:14","2012-04-01 15:55:54",""
"22722708","Finding d in RSA encryption without extended euclid algorithm","I am trying to implement RSA in a PIC16 micro-controller using assembly!
I wrote a math library that can perform addition,subtraction, multiplication and modular exponentiation (all unsigned).
but now I am stuck with the last step that is finding ""d"" which satisfies:
d*e = 1 (mod phi(n)) 
I want to avoid implementing the extended Euclid algorithm which is a bit complicated and needs signed operations.
I tried calculating it with Euler's theorem http://en.wikipedia.org/wiki/Modular_multiplicative_inverse#Using_Euler.27s_theorem 
but then I need to find phi(phi(n) which is a complicated process unless p and q are safe primes.
The only option I am left with 
is to loop through d=(KN+1)/e while changing k until (KN+1) mod e = 0 
so my question now is: is this last formula the only other option for calculating d?
(if not) what are other options?
and what are the limits of K ?
","You can implement the binary extended Euclidean algorithm. The algorithm can be found in the Handbook of Applied Cryptography - Chapter 14.4.3. It only requires multiple-precision additions, subtractions, and shifts. The note: 14.64 describes how to optimize the algorithm to obtain the multiplicative inverse - (d) in this case.
It's typical to chose a relatively small prime with a low Hamming weight for (e), like (65537). Since gcd(65537, phi(n)) = 1, the multiplicative inverse will always exist.
","713","<assembly><rsa><public-key-encryption><pic><number-theory>","0","0","1","2014-03-29 01:07:31","","0","","","","","2014-03-28 20:34:50",""
"42709721","How do i generate input data for Aadhar card (used by indian citizen as their unique identifier) API integration","I am implementing aadhar card api and I got stuck in generating PID and sKey xml block for input xml data, following is the requirement for both key element.
PID block data should be encrypted with a dynamic session key using AES-256 symmetric algorithm (AES/ECB/PKCS7Padding). Session key, in turn, is encrypted with 2048-bit UIDAI public key using asymmetric algorithm (RSA/ECB/PKCS1Padding).
Skey Value of this element is base-64 encoded value of encrypted 256-bit AES session key.
Below is the code what I have created:
 /////////////////////

$ci = '20170922';       

$method = 'AES-256-ECB';
$skey = openssl_encrypt (session_id(), $method ,$ci, true);

$pid_block = '<Pid ts=""2016061512000000"" ver=""1.0""><Demo lang=""""><Pi ms=""E"" mv="""" name=""Shivshankar Choudhury"" lname="""" lmv="""" gender="""" dob="""" dobt="""" age="""" phone="""" email="""" /></Demo></Pid>';
$pid_encoded = base64_encode($pid_block);
$hash_256_pid = hash (  'sha256'  ,  $pid_block);
$hmac_pid_block = openssl_encrypt($hash_256_pid , $method , session_id());
$encoded_hmac_pid_block = base64_encode($hmac_pid_block);


$xml_data = '<Auth ac=""public"" sa=""public"" ver=""1.6"" txn=""706bf70d"" tid=""public"" uid=""999999990019""><Uses pi=""y"" pa=""n"" pfa=""n"" bio=""y"" bt=""FMR"" otp=""n"" pin=""n""/><Meta udc=""UIDAI:SampleClient"" fdc=""NC"" idc=""NA"" pip=""127.0.0.1"" lot=""P"" lov=""560103""/><Skey ci=""20131003"" >'.$skey.'</Skey><Data type=""X"">'.$pid_encoded.'</Data><Hmac>'.$encoded_hmac_pid_block.'</Hmac></Auth>';
echo $xml_data;
$url = ""http://auth.uidai.gov.in/1.6/public/9/9/"";

        //setting the curl parameters.
        $ch = curl_init();
        curl_setopt($ch, CURLOPT_URL, $url);
// Following line is compulsary to add as it is:
        curl_setopt($ch, CURLOPT_POSTFIELDS,
                    ""xmlRequest="" . $xml_data);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
        curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 300);
        $data = curl_exec($ch);
        curl_close($ch);

        //convert the XML result into array
        $array_data = json_decode(json_encode(simplexml_load_string($data)), true);

","This is already answered at below link for PHP.
How To integrate Aadhaar Card Authentication Api for Aadhaar number Verification in PHP?
If you are going to use java, to generate skey(32characters,256 bit) in AES and then encrypting it, You need to use bouncycastle jar. This is because java by default has limit of 128 bit(16 charcaters) limit and then encode it. 
You can find the sample code in uidai developer portal
","713","<php><xml><public-key-encryption>","0","0","1","2017-06-30 18:30:29","","1","","2831104","","2017-03-10 05:30:32","2017-03-10 03:34:13",""
"4720795","Can I use a digital signature in this scenario? With c#","I want to sign an xml document using a private key. And then when my client receives the software for them to be able to verify that the xml document hasnt changed by using a public key. 
I want to distribut the same public key amongst all of my customers so that we can issue licenses to them. 
Is this possible? I am using c# and .net.
","Yes, this is possible.  There are more important questions when putting together a solution.

Do you want this verification to be done automatically by your program?
Do you want to set up your own public key infrastructure?
Does your company already have a public signing certificate?

Depending on the answers, you might not need to write any code.
","706","<c#><digital-signature><public-key-encryption>","4","0","3","2011-07-08 10:15:13","","0","1","21234","","2011-01-18 20:02:06","2011-01-18 05:33:21",""
"4720795","Can I use a digital signature in this scenario? With c#","I want to sign an xml document using a private key. And then when my client receives the software for them to be able to verify that the xml document hasnt changed by using a public key. 
I want to distribut the same public key amongst all of my customers so that we can issue licenses to them. 
Is this possible? I am using c# and .net.
","Yes it is perfectly possible. Here is a comprehensive overview: How to: Verify the Digital Signatures of XML Documents with .NET
Also here is how to sign documents for later verification: In C#, sign an xml with a x.509 certificate and check the signature
","706","<c#><digital-signature><public-key-encryption>","4","2","3","2011-07-08 10:15:13","","0","1","21234","","2011-01-18 20:02:06","2011-01-18 05:33:21",""
"4720795","Can I use a digital signature in this scenario? With c#","I want to sign an xml document using a private key. And then when my client receives the software for them to be able to verify that the xml document hasnt changed by using a public key. 
I want to distribut the same public key amongst all of my customers so that we can issue licenses to them. 
Is this possible? I am using c# and .net.
","There is also a nice article here about licenses using XML digital signatures: http://www.codeproject.com/KB/security/xmldsiglic.aspx
","706","<c#><digital-signature><public-key-encryption>","4","0","3","2011-07-08 10:15:13","","0","1","21234","","2011-01-18 20:02:06","2011-01-18 05:33:21",""
"6029407","How to encrypt a text","I need to implement a simple text encryption in C++ without using any existing framworks. This is purely for educational purpose to learn the in-and-outs and to learn the way to implement such a system. I am not planning to implement this in production code. I can use Windows APIs but it won't be cross platform. I am trying to learn something can work across multiple platforms. the best way to implement this is implement using C/C++. Please share good resources or links in this regard.
","Depending on what you actually want, you could look at the CipherSaber project: instructions to implement your own RC4 encryption code for a simple IV+text format.
However this is an academic exercise only: you should never use your own crypto code in production unless you really know what you're doing. You could also read Schneier's Applied Cryptography for a good introduction to all of this stuff.
","704","<c++><encryption><encryption-asymmetric><public-key-encryption><aes>","0","3","1","2011-05-17 10:26:29","","6","","59249","","2011-05-17 10:26:29","2011-05-17 10:19:34","2011-05-17 10:36:37"
"22065722","C# and IOS RSA public key encryption","Ok so basically i have a WCF service which provides the IOS application with a public key, i want to encrypt data with the public key and send it to the WCF service.
On the C# wcf service i use RSACryptoServiceProvider and at the moment i export to a CspBlob byte array. but i guess i would need to use xml export.
So thats fine, i need to somehow create a SecKeyRef to encrypt the data on IOS.
Iv tried looking for a working solution but all i can find is this library and it cost a lot of money just to encrypt some data. I also found this but i cant get it to work.
And there is a failed attempt over here using this.
Can someone help me encrypt data with RSA public key encryption on IOS. It needs to be able to decrypt on C#.
","","704","<c#><ios><encryption><rsa><public-key-encryption>","1","","0","2014-02-27 10:29:34","","5","","-1","","2017-05-23 12:28:23","2014-02-27 10:29:34",""
"53406421","Encrypted chat app using python and RSA algorithm","I am trying to create an encrypted chat application using RSA algo in python but I am getting error messages. I am unable to find the errors in the code and the chat system is not working at all. The client.py is terminating with showing this error   
File ""client.py"", line 17, in 
           server_string = server.recv(1024)

           OSError: [Errno 107] Transport endpoint is not connected

The codes are: 
the server.py is: 
import socket
from Crypto.PublicKey import RSA
from Crypto import Random

#Generate private and public keys
random_generator = Random.new().read
private_key = RSA.generate(1024, random_generator)
public_key = private_key.publickey()

#Declartion
mysocket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
host = socket.gethostbyname(socket.getfqdn())
port = 8888
encrypt_str = ""encrypted_message=""

if host == ""127.0.1.1"":
    import commands
    host = commands.getoutput(""hostname -I"")
print(""host = "" + host)

#Prevent socket.error: [Errno 98] Address already in use
mysocket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)

mysocket.bind((host, port))

mysocket.listen(5)

c, addr = mysocket._accept()

while True:

    #Wait until data is received.
    data = c.recv(1024)
    data = data.replace(""\r\n"", '') #remove new line character

    if data == ""Client: OK"":
        c.send(""public_key="" + public_key.exportKey() + ""\n"")
        print(""Public key sent to client."")

    elif encrypt_str in data: #Reveive encrypted message and decrypt it.
        data = data.replace(encrypt_str, '')
        print(""Received:\nEncrypted message = ""+str(data))
        encrypted = eval(data)
        decrypted = private_key.decrypt(encrypted)
        c.send(""Server: OK"")
        print(""Decrypted message = "" + decrypted)

    elif data == ""Quit"": break

#Server to stop
c.send(""Server stopped\n"")
print(""Server stopped"")
c.close()

The client.py is 
import socket
from Crypto.PublicKey import RSA
import sys 
import os 

server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
host = ""127.0.0.1""
port = 7777

server.bind((""my_IP_addr_goes_here"", 8880))
#data= ""Client: OK""

#Tell server that connection is OK
#server.sendall(""Client : OK"")

#Receive public key string from server
server_string = server.recv(1024)

#Remove extra characters
server_string = server_string.replace(""public_key="", '')
server_string = server_string.replace(""\r\n"", '')

#Convert string to key
server_public_key = RSA.importKey(server_string)

#Encrypt message and send to server
message = ""This is my secret message.""
encrypted = server_public_key.encrypt(message, 32)
server.sendall(""encrypted_message=""+str(encrypted))

#Server's response
server_response = server.recv(1024)
server_response = server_response.replace(""\r\n"", '')
if server_response == ""Server: OK"":
    print(""Server decrypted message successfully"")

#Tell server to finish connection
server.sendall(""Quit"")
print(server.recv(1024)) #Quit server response
server.close()

The errors are:
The server script is running but when I am terminating the script it's showing  
For server.py: 
               ^CTraceback (most recent call last):
           File ""server.py"", line 28, in <module>

           c, addr = mysocket._accept()

           KeyboardInterrupt

For client.py: 
               File ""client.py"", line 17, in 
           server_string = server.recv(1024)

           OSError: [Errno 107] Transport endpoint is not connected

","You want to capture SIGINT... See How do I capture SIGINT in Python?
import signal
import sys
def stop_server(sig, frame):
        server.sendall(""Quit"")
        print(server.recv(1024)) #Quit server response
        server.close()
        sys.exit(0)
signal.signal(signal.SIGINT, stop_server)

","703","<python><python-3.x><rsa><public-key-encryption><python-sockets>","1","3","1","2018-11-22 14:49:51","53406470","0","","10045255","","2018-11-22 14:49:51","2018-11-21 06:32:48",""
"15413647","Java strong encryption - standalone library- source code only","I am looking for a Java based encryption library with support for strong encryption.
I am aware of the Java Cryptography Extension but to use it I would like to access the source code first, modify those, compile them and use my own version of them ( i do not really care about open source licenses ) 
Alternatively, I am wondering if there are any good, strong Java based encryption libraries that does not rely or use anything from the JDK crypto libraries. Here, I am also interested in getting access to the source files to compile them myself. 
As you can see, I am trying to avoid any man in the middle attacks, including modified versions of the JVM, or modified third party libraries. It is just an obsession.
Thanks!
","Have you tried Cryptix? It's a free, source available, compatible with JCA library, so you can install it as only security provider.
","702","<java><security><encryption><public-key-encryption><crypt>","2","0","2","2013-03-14 15:41:13","","7","","","","","2013-03-14 15:37:27",""
"15413647","Java strong encryption - standalone library- source code only","I am looking for a Java based encryption library with support for strong encryption.
I am aware of the Java Cryptography Extension but to use it I would like to access the source code first, modify those, compile them and use my own version of them ( i do not really care about open source licenses ) 
Alternatively, I am wondering if there are any good, strong Java based encryption libraries that does not rely or use anything from the JDK crypto libraries. Here, I am also interested in getting access to the source files to compile them myself. 
As you can see, I am trying to avoid any man in the middle attacks, including modified versions of the JVM, or modified third party libraries. It is just an obsession.
Thanks!
","I'm not sure making your own library is a good idea, but if you really want to, you should look at bouncycastle.
","702","<java><security><encryption><public-key-encryption><crypt>","2","2","2","2013-03-14 15:41:13","","7","","","","","2013-03-14 15:37:27",""
"46890700","Getting a string representation of a SecKey","Edit Added a screnshot of the request needed.
I'm trying to make a MacOs app in Swift 4. This app communicates with a api that requires RSA encryption.
Google didn't give results that could explaining how to do this. Apple's documentation on this subject is quite extensive (https://developer.apple.com/library/content/documentation/Security/Conceptual/CertKeyTrustProgGuide/KeyRead.html#//apple_ref/doc/uid/TP40001358-CH222-SW2), but still not what I need.
The function SecKeyCopyExternalRepresentation gives a Data object that 
cannot be transformed to a String. The documentation says that it is a PCKS #1 response, but I can't work it out.
I've tried a lot of things, including below, but I can't get it to work.
func externalRepresentation(_ key: SecKey) -> String? {
    var error: Unmanaged<CFError>?

    guard let data = SecKeyCopyExternalRepresentation(key, &error) as Data? else {
        return nil
    }

    return data.base64EncodedString()
}

The request needs to be the following:
Request
Is this even possible in Swift?
","The normal way to encode a binary blob, like a certificate or RSA key as a string is to use base64 encoding. You can convert a Data to base64 quite easily with the function base64EncodedString(options:). i.e.
let myString = myData.base64EncodedString()

whether that is exactly what you need for this application is hard to tell because your question doesn't give much context.
Looking at your screen shot, as well as the base64 encoded string, you need a header and footer. Most of the apparently random letters in the data structure are the base64 string (the JSON conversion has encoded the line feeds with \n and something else has doubled up the backslashes). Your last step is therefore to prepend the string with -----BEGIN PUBLIC KEY----- and a new line, ad append a new line and -----END PUBLIC KEY-----
One more thing: you can get the original data back from the base64 string quite easily with Data.init?((base64Encoded base64String:,options:). i.e.
guard let myDataCopy = Data(base64Encoded: myString)
else { fatalError(""the string was not really base64"") }

","702","<swift><public-key-encryption>","2","1","1","2017-10-24 08:48:15","46891616","0","1","8819414","","2017-10-23 18:10:03","2017-10-23 13:33:45",""
"18105990","XCode import public key file generated with Java Security","I have a java generator public key as this:
final KeyPairGenerator keyGen = KeyPairGenerator.getInstance(""RSA"");
keyGen.initialize(1024);
final KeyPair key = keyGen.generateKeyPair();
PublicKey pubkey = key.getPublic();
byte[] key = pubkey .getEncoded();
FileOutputStream keyfos = new FileOutputStream(""publicKey.der"");
keyfos.write(key);
keyfos.close();

And on another hand, i have xcode,that use this publickey.der to encrypt data:
    NSString *publicKeyPath = [[NSBundle mainBundle] pathForResource:@""public_key""
ofType:@""der""];
if (publicKeyPath == nil) {
NSLog(@""Can not find public_key.der"");
return nil;
}
NSDate *publicKeyFileContent = [NSData dataWithContentsOfFile:publicKeyPath];
if (publicKeyFileContent == nil) {
NSLog(@""Can not read from public_key.der"");
return nil;
 }
certificate = SecCertificateCreateWithData(kCFAllocatorDefault, ( __bridge CFDataRef)publicKeyFileContent);
if (certificate == nil) {
NSLog(@""Can not read certificate from public_key.der"");
return nil;
}
policy = SecPolicyCreateBasicX509();
OSStatus returnCode = SecTrustCreateWithCertificates(certificate, policy, &trust);
if (returnCode != 0) {
NSLog(@""SecTrustCreateWithCertificates fail. Error Code: %ld"", returnCode);
return nil;

    }
SecTrustResultType trustResultType;
returnCode = SecTrustEvaluate(trust, &trustResultType);
if (returnCode != 0) {
 NSLog(@""SecTrustEvaluate fail. Error Code: %ld"", returnCode);
return nil;
}
publicKey = SecTrustCopyPublicKey(trust);
if (publicKey == nil) {
 NSLog(@""SecTrustCopyPublicKey fail"");
return nil;
}

but said me that Can not read certificate from public_key.der.
Well, if i use a openssl public_key it works. Why? Which is the difference openssl keypairgenerator between.
Thanks.
","Your Java code does not create a real certificate. You generated a public key. How to get PublicKeyRef from java generated public key is described in this post. You can read this public key in xcode from a file, but then you need to do some additional stuff.
- (NSData *) extractPublicKeyFromRawFormattedKey: (NSData *) rawFormattedKey {
/* Now strip the uncessary ASN encoding guff at the start */
unsigned char * bytes = (unsigned char *)[rawFormattedKey bytes];
size_t bytesLen = [rawFormattedKey length];

/* Strip the initial stuff */
size_t i = 0;
if (bytes[i++] != 0x30)
    return FALSE;

/* Skip size bytes */
if (bytes[i] > 0x80)
    i += bytes[i] - 0x80 + 1;
else
    i++;

if (i >= bytesLen)
    return FALSE;

if (bytes[i] != 0x30)
    return FALSE;

/* Skip OID */
i += 15;

if (i >= bytesLen - 2)
    return FALSE;

if (bytes[i++] != 0x03)
    return FALSE;

/* Skip length and null */
if (bytes[i] > 0x80)
    i += bytes[i] - 0x80 + 1;
else
    i++;

if (i >= bytesLen)
    return FALSE;

if (bytes[i++] != 0x00)
    return FALSE;

if (i >= bytesLen)
    return FALSE;

/* Here we go! */
NSData * extractedKey = [NSData dataWithBytes:&bytes[i] length:bytesLen - i];

return extractedKey;

}
Then using method from apple example
- (SecKeyRef)addPeerPublicKey:(NSString *)peerName keyBits:(NSData *)publicKey {
OSStatus sanityCheck = noErr;
SecKeyRef peerKeyRef = NULL;
CFTypeRef persistPeer = NULL;

LOGGING_FACILITY( peerName != nil, @""Peer name parameter is nil."" );
LOGGING_FACILITY( publicKey != nil, @""Public key parameter is nil."" );

NSData * peerTag = [[NSData alloc] initWithBytes:(const void *)[peerName UTF8String] length:[peerName length]];
NSMutableDictionary * peerPublicKeyAttr = [[NSMutableDictionary alloc] init];

[peerPublicKeyAttr setObject:(id)kSecClassKey forKey:(id)kSecClass];
[peerPublicKeyAttr setObject:(id)kSecAttrKeyTypeRSA forKey:(id)kSecAttrKeyType];
[peerPublicKeyAttr setObject:peerTag forKey:(id)kSecAttrApplicationTag];
[peerPublicKeyAttr setObject:publicKey forKey:(id)kSecValueData];
[peerPublicKeyAttr setObject:[NSNumber numberWithBool:YES] forKey:(id)kSecReturnPersistentRef];

sanityCheck = SecItemAdd((CFDictionaryRef) peerPublicKeyAttr, (CFTypeRef *)&persistPeer);

// The nice thing about persistent references is that you can write their value out to disk and
// then use them later. I don't do that here but it certainly can make sense for other situations
// where you don't want to have to keep building up dictionaries of attributes to get a reference.
// 
// Also take a look at SecKeyWrapper's methods (CFTypeRef)getPersistentKeyRefWithKeyRef:(SecKeyRef)key
// & (SecKeyRef)getKeyRefWithPersistentKeyRef:(CFTypeRef)persistentRef.

LOGGING_FACILITY1( sanityCheck == noErr || sanityCheck == errSecDuplicateItem, @""Problem adding the peer public key to the keychain, OSStatus == %d."", sanityCheck );

if (persistPeer) {
    peerKeyRef = [self getKeyRefWithPersistentKeyRef:persistPeer];
} else {
    [peerPublicKeyAttr removeObjectForKey:(id)kSecValueData];
    [peerPublicKeyAttr setObject:[NSNumber numberWithBool:YES] forKey:(id)kSecReturnRef];
    // Let's retry a different way.
    sanityCheck = SecItemCopyMatching((CFDictionaryRef) peerPublicKeyAttr, (CFTypeRef *)&peerKeyRef);
}

LOGGING_FACILITY1( sanityCheck == noErr && peerKeyRef != NULL, @""Problem acquiring reference to the public key, OSStatus == %d."", sanityCheck );

[peerTag release];
[peerPublicKeyAttr release];
if (persistPeer) CFRelease(persistPeer);
return peerKeyRef;

}
you can generate a public key
- (void)generatePublicKeyByFile {
NSString *publicKeyPath = [[NSBundle mainBundle] pathForResource:@""public_key""
ofType:@""der""];
NSData *publicKeyFileContent = [NSData dataWithContentsOfFile:publicKeyPath];
NSData *publicKey = [self extractPublicKeyFromRawFormattedKey:publicKeyFileContent];
[[SecKeyWrapper sharedWrapper] removePeerPublicKey:@""peerName""]; //remove public key if it is already added.
SecKeyRef publicKeyRef = [[SecKeyWrapper sharedWrapper]addPeerPublicKey:@""peerName"" keyBits:publicKey]; //our goal.    
}

","700","<java><xcode><public-key-encryption>","1","0","1","2013-10-01 13:47:58","19117925","3","","","","","2013-08-07 14:23:08",""
"22881071","Manual implementation RSA java. Padding ideas","I am implementing RSA manually on java (yes i know not the best idea but it is for university purposes). My algorithm is working good enough with small texts but when big texts come into consideration the algorithm breaks as the number of bits is superior than my key. 
I am looking into the possibility to implement a padding scheme in order to fragment my plain text into small ones and then encrypt them.
Is there any suggestion on how to the padding?
Thanks in advance.
","When one needs to encrypt longer plain text than a assymetric key typically random symmetric cipher block key is generated, for example, AES128 and then it is used to encrypt the data. At the end of a process symmetric key is encrypted with RSA public key and saved along with the cipher text.
A decryption consists of recovering symmetric key with a private RSA key and then using the former to decrypt the long message.
One of the reasons to do so is that RSA is much slower than, for example, AES. Another one is that block cipher has no limitation for a size of a message.
","697","<java><encryption><rsa><public-key-encryption>","0","0","2","2014-04-08 22:45:48","22949669","3","","3054994","","2014-04-05 12:52:03","2014-04-05 12:45:56",""
"22881071","Manual implementation RSA java. Padding ideas","I am implementing RSA manually on java (yes i know not the best idea but it is for university purposes). My algorithm is working good enough with small texts but when big texts come into consideration the algorithm breaks as the number of bits is superior than my key. 
I am looking into the possibility to implement a padding scheme in order to fragment my plain text into small ones and then encrypt them.
Is there any suggestion on how to the padding?
Thanks in advance.
","I'm sorry that I'm writing an answer that contains basically the same information as divanov's answer, but an edit to add all the little details that I think are important would be a complete rewrite of the answer.
Generally you don't want to asymmetrically encrypt your data directly, but instead use RSA to exchange a symmetric key that is used to encrypt your data symmetrically. You can do it like this (idea taken from ""Cryptography Engineering"" by Ferguson, Kohno and Schneier, a book I can wholeheartedly recommend):

Assuming that l is the bit length of your modulus n, generate an l-1 bit long random number r.  Encrypt r with the RSA public key.
Use a cryptographic hash function to generate the symmetric key k out of r. I would advise the use of sha256: k=sha256(r)
Encrypt you data with a block cipher like AES256 using a proper ""mode"" like CBC.

The advantage of this procedure is that you do not have to care about RSA paddings at all (and there is a lot of stuff that can go wrong with them). Please don't check the structure of r after decrypting, though, and just stuff if into the hash function as you otherwise might open yourself up to padding oracle attacks (akin to this one) that are beyond the scope of my answer though.
Note that for a real world scenario you have to care about authenticity of the data, too. The only common use case where encryption is mostly enough is ""data at rest"", i.e. if no data is transmitted over the network and you only care about physical theft of your data.
","697","<java><encryption><rsa><public-key-encryption>","0","2","2","2014-04-08 22:45:48","22949669","3","","3054994","","2014-04-05 12:52:03","2014-04-05 12:45:56",""
"41614139","How to generate Publickey with use of modulus and an exponent?","Hi I am new for developing the ios application. I have a modulus and an exponent and i need to generate SecKey and then use this to encrypt some data (RSA encryption). Please any one help in swift.
","You should not implement crypto algorithms or key generation by yourself (not being an expert in cryptography). Where security matters, use mature and well-known libraries and tools.
On iOS it's worth checking out SecKey API (SecKeyEncrypt(_:_:_:_:_:_:) and so on). It was mentioned at WWDC 2016 Session 706 starting at 16:10.
You may find useful investigating the CryptoCompatibility example project which ""shows common cryptographic operations using Apple APIs.""
As a cross-platform solution you can use OpenSSL which also provides RSA API.
","689","<ios><swift><cocoapods><public-key-encryption>","1","1","2","2018-06-25 09:43:03","","2","","1457385","","2017-01-12 13:33:16","2017-01-12 13:12:10",""
"41614139","How to generate Publickey with use of modulus and an exponent?","Hi I am new for developing the ios application. I have a modulus and an exponent and i need to generate SecKey and then use this to encrypt some data (RSA encryption). Please any one help in swift.
","A few similar questions have been asked/answered already, here's one where you can take a modulus and exponent and get a .PEM format out of it: Generate RSA Public Key from Modulus and Exponent
Here's another, although this one uses OpenSSL: https://stackoverflow.com/a/31010530/209855
Additionally, you've probably run into some people recommending https://github.com/StCredZero/SCZ-BasicEncodingRules-iOS like here https://stackoverflow.com/a/10643894/209855
But if you're like me, nothing actually worked or gave you exactly what you wanted.
If you read through the issues on that github repo, you'll find something broke around iOS 8 and it no longer generates the correct data.
However, someone posted a fix for this: https://github.com/Meniny/Meniny.github.io/blob/5895a2d51502881a7d6cda418beafa546874dfa7/_posts/2017-08-12-RSA_public_key_with_modulus_and_exponent.md
I'll reproduce the code here, in case it disappears in the future.
+ (NSData * __nullable)generateRSAPublicKeyWithModulus:(NSData * __nonnull)modulus exponent:(NSData * __nonnull)exponent {
    const uint8_t DEFAULT_EXPONENT[] = {0x01, 0x00, 0x01,}; //default: 65537
    const uint8_t UNSIGNED_FLAG_FOR_BYTE = 0x81;
    const uint8_t UNSIGNED_FLAG_FOR_BYTE2 = 0x82;
    const uint8_t UNSIGNED_FLAG_FOR_BIGNUM = 0x00;
    const uint8_t SEQUENCE_TAG = 0x30;
    const uint8_t INTEGER_TAG = 0x02;

    uint8_t* modulusBytes = (uint8_t*)[modulus bytes];
    uint8_t* exponentBytes = (uint8_t*)(exponent == nil ? DEFAULT_EXPONENT : [exponent bytes]);

    //(1) calculate lengths
    //- length of modulus
    int lenMod = (int)[modulus length];
    if (modulusBytes[0] >= 0x80)
        lenMod ++;  //place for UNSIGNED_FLAG_FOR_BIGNUM
    int lenModHeader = 2 + (lenMod >= 0x80 ? 1 : 0) + (lenMod >= 0x0100 ? 1 : 0);
    //- length of exponent
    int lenExp = exponent == nil ? sizeof(DEFAULT_EXPONENT) : (int)[exponent length];
    int lenExpHeader = 2;
    //- length of body
    int lenBody = lenModHeader + lenMod + lenExpHeader + lenExp;
    //- length of total
    int lenTotal = 2 + (lenBody >= 0x80 ? 1 : 0) + (lenBody >= 0x0100 ? 1 : 0) + lenBody;

    int index = 0;
    uint8_t* byteBuffer = malloc(sizeof(uint8_t) * lenTotal);
    memset(byteBuffer, 0x00, sizeof(uint8_t) * lenTotal);

    //(2) fill up byte buffer
    //- sequence tag
    byteBuffer[index ++] = SEQUENCE_TAG;
    //- total length
    if(lenBody >= 0x80)
        byteBuffer[index ++] = (lenBody >= 0x0100 ? UNSIGNED_FLAG_FOR_BYTE2 : UNSIGNED_FLAG_FOR_BYTE);
    if(lenBody >= 0x0100) {
        byteBuffer[index ++] = (uint8_t)(lenBody / 0x0100);
        byteBuffer[index ++] = lenBody % 0x0100;
    }
    else
        byteBuffer[index ++] = lenBody;
    //- integer tag
    byteBuffer[index ++] = INTEGER_TAG;
    //- modulus length
    if (lenMod >= 0x80)
        byteBuffer[index ++] = (lenMod >= 0x0100 ? UNSIGNED_FLAG_FOR_BYTE2 : UNSIGNED_FLAG_FOR_BYTE);
    if (lenMod >= 0x0100) {
        byteBuffer[index ++] = (int)(lenMod / 0x0100);
        byteBuffer[index ++] = lenMod % 0x0100;
    }
    else
        byteBuffer[index ++] = lenMod;
    //- modulus value
    if (modulusBytes[0] >= 0x80)
        byteBuffer[index ++] = UNSIGNED_FLAG_FOR_BIGNUM;
    memcpy(byteBuffer + index, modulusBytes, sizeof(uint8_t) * [modulus length]);
    index += [modulus length];
    //- exponent length
    byteBuffer[index ++] = INTEGER_TAG;
    byteBuffer[index ++] = lenExp;
    //- exponent value
    memcpy(byteBuffer + index, exponentBytes, sizeof(uint8_t) * lenExp);
    index += lenExp;

    if (index != lenTotal)
        NSLog(@""lengths mismatch: index = %d, lenTotal = %d"", index, lenTotal);

    NSMutableData* buffer = [NSMutableData dataWithBytes:byteBuffer length:lenTotal];
    free(byteBuffer);

    return buffer;
}

And last but not least, to generate the RSA Public Key from a Modulus and Exponent in Swift 3:
public func encrypt(_ string: String, modulus: String, exponent: String) -> String? {
  if let modData = Data(base64Encoded: modulus),
    let expData = Data(base64Encoded: exponent),
    let keyData = PublicKeyRSA.generatePublicKey(withModulus: modData, exponent: expData) {
      /// encrypt...
  }
}

","689","<ios><swift><cocoapods><public-key-encryption>","1","0","2","2018-06-25 09:43:03","","2","","1457385","","2017-01-12 13:33:16","2017-01-12 13:12:10",""
"24605537","It's possible to allow sudo mode only for specific user?","I would like to enable sudo mode on my Debian server only for one specific user. 
For example, I have two users. Daniel and Peter. Daniel has to have connect to ssh with pub key. Peter's connections to ssh will be possible with password, no key is required.
Daniel will be administrator user, so for him I would like to enable ""su"" command (sudo mode). For Peter not! Peter will be only some kind of user that will testing something for gaming server.
My question is, it is possible? Because I can't find anything useful on google :/ . Any ideas? 
Thank you for all answers!
Daniel
","I believe you want the sudoers file:
http://benaiah41.wordpress.com/2008/08/15/37/
""To give a user the ability to use the “sudo” command you must add them to the “sudoers” file.  Here’s how....""
","686","<bash><ssh><debian><sudo><public-key-encryption>","0","0","2","2014-07-07 08:27:20","24605661","0","","","","","2014-07-07 07:54:37",""
"24605537","It's possible to allow sudo mode only for specific user?","I would like to enable sudo mode on my Debian server only for one specific user. 
For example, I have two users. Daniel and Peter. Daniel has to have connect to ssh with pub key. Peter's connections to ssh will be possible with password, no key is required.
Daniel will be administrator user, so for him I would like to enable ""su"" command (sudo mode). For Peter not! Peter will be only some kind of user that will testing something for gaming server.
My question is, it is possible? Because I can't find anything useful on google :/ . Any ideas? 
Thank you for all answers!
Daniel
","The sudoers file is what you should have a look at. There's a lengthy tutorial here. In essence, it allows you to specify which users should have access to the sudo command via their username.
A short example would be to add the following line to sudoers:
%users ALL=(root) /usr/bin/find
This would means that any member of the group users with any hostname (ALL) can only run the find program as a root user. They will not be able to run rm or any other command not specified. In contrast, something like
%admin ALL=(ALL) ALL
which is one of the defaults, allows any member of the admin group on any hostname to execute any program (the last ALL) as any user (the ALL in parentheses).
","686","<bash><ssh><debian><sudo><public-key-encryption>","0","0","2","2014-07-07 08:27:20","24605661","0","","","","","2014-07-07 07:54:37",""
"49343149","How can convert android PublicKey to string and back?","I am trying to create an app which will encrypt user messages. The user Public Key needs to be published to server as a string. I am generating Android KyeStore PublicKey like this:
    public static PublicKey getOrCreatePublicKey(String alias) throws GeneralSecurityException, IOException {

    KeyStore keyStore = KeyStore.getInstance(ANDROID_PROVIDER);
    keyStore.load(null);
    if (!keyStore.containsAlias(alias) || keyStore.getCertificate(alias) == null) {

        KeyGenParameterSpec spec = new KeyGenParameterSpec.Builder(
                alias,
                KeyProperties.PURPOSE_DECRYPT | KeyProperties.PURPOSE_ENCRYPT)
                .setEncryptionPaddings(KeyProperties.ENCRYPTION_PADDING_RSA_OAEP)
                .setDigests(KeyProperties.DIGEST_SHA256,
                        KeyProperties.DIGEST_SHA512)
                .build();
        KeyPairGenerator generator = KeyPairGenerator.getInstance(KeyProperties.KEY_ALGORITHM_RSA, ANDROID_PROVIDER);
        generator.initialize(spec);
        generator.generateKeyPair();
    }
    return keyStore.getCertificate(alias).getPublicKey();
}

Then I try to convert the PublicKey to string and back to PublicKey like this:
public static PublicKey stringToPublicKey(String publStr)  {

    PublicKey publicKey = null;
    try {
        byte[] data = Base64.decode(publStr, Base64.DEFAULT);
        X509EncodedKeySpec spec = new X509EncodedKeySpec(data);
        KeyFactory fact = KeyFactory.getInstance(""RSA"");
        publicKey = fact.generatePublic(spec);
    } catch (GeneralSecurityException e) {
        e.printStackTrace();
    }
    return publicKey;
}


public static String publicKeyToString(PublicKey publ) {
    String publicKeyString = null;
    try {
        KeyFactory fact = KeyFactory.getInstance(""RSA"");
        X509EncodedKeySpec spec = fact.getKeySpec(publ,
                X509EncodedKeySpec.class);
        publicKeyString = Base64.encodeToString(spec.getEncoded(), Base64.DEFAULT);
    } catch (GeneralSecurityException e) {
        e.printStackTrace();
    }
    return publicKeyString;
}

Then I try to encrypt and decrypt user messages with the Public and Private keys.
If I don't convert Public Key the encryption works fine. But if I convert Public Key to string and back to Public Key the encryption doesn't work anymore.
What am I doing wrong? Thank you.
   PublicKey publicKey1 = getOrCreatePublicKey(""alias"");
        String publicKeyStr = publicKeyToString(publicKey1);
        PublicKey publicKey2 = stringToPublicKey(publicKeyStr);

    //this one works            
        String message = encrypt(str, publicKey1);
        String decryptm = decrypt(message, privateKey);

    //this one doesn't work
    String message = encrypt(str, publicKey2);
        String decryptm = decrypt(message, privateKey);

","I have replaced 
KeyProperties.ENCRYPTION_PADDING_RSA_OAEP 
with 
KeyProperties.ENCRYPTION_PADDING_RSA_PKCS1.
I have also replaced 
Cipher cipher = Cipher.getInstance(""RSA/ECB/OAEPWithSHA-256AndMGF1Padding"");
with
Cipher cipher = Cipher.getInstance(""RSA/ECB/PKCS1Padding"");
And now it works. But I still don't know why it was not working first time.
","683","<android><rsa><public-key-encryption><android-keystore>","1","0","1","2018-03-19 00:21:47","49348543","2","","8411913","","2018-03-18 12:25:46","2018-03-17 23:56:54",""
"52353238","How to encrypt and decrypt data with Openssl RSA public private key pair in Golang?","I am trying to write a program which encrypts data using a RSA public key and and decrypts data using private key. The RSA keys were generated with openssl tool.
I found Spacemonkeygo Openssl https://github.com/spacemonkeygo/openssl wrapper for this purpose. But unable to find any sample over & also their is no document available for the same. So that I am unable to use. 
Please guide me how can I use Openssl in Golang?
I am using first time encryption decryption & Openssl. 
Thank you in advance!
","
I am trying to write a program which encrypts data using a RSA public
  key and and decrypts data using private key. The RSA keys were
  generated with openssl tool.

You don't need an OpenSSL library package to do this: you just need some of the crypto, encoding, and other packages in the Go standard library.  Namely:

encoding/pem
crypto/x509
math/rand
crypto/sha256
crypto/rsa
encoding/base64

Create a PEM block from the key, setting Type to ""RSA PRIVATE KEY"" or ""RSA PUBLIC KEY"", parse the keys with the x509 functions (PKIX for public), use a type assertion to make it the appropriate RSA public/private type, encrypt the message using OAEP padding, an SHA-256 hash function, and rand.Reader for a source of entropy, base64 encode the resulting cipher if you're sending it as text rather than binary, then base64 decode it and decrypt it using the same but with the private key on the other side.
See in particular func EncryptOAEP(hash hash.Hash, random io.Reader, pub *PublicKey, msg []byte, label []byte) ([]byte, error).
Read the documentation in these packages and some general info about encryption and RSA, there are also usage examples for each of these packages on StackOverflow -- though perhaps not put all together.
Every package you need for the described goal is in the Go standard library.
You may need to check that your PKCS function version (e.g. PKCS8) lines up with the private key produced by your OpenSSL version.
","682","<go><openssl><public-key-encryption>","0","1","1","2018-09-16 11:43:46","","2","","","","","2018-09-16 10:38:10",""
"30648980","iOS 5.0 : generated x509 rsa public key of size 2048 is 270 bytes instead of 294 bytes. Why?","I am developing an sdk for iOS 5 at work, and I am communicating with a device via a socket interface. This device requires to be sent a base64 encoded rsa x509 public key of size 2048.
I generate the key pair with the following code:
OSStatus status = noErr;
NSMutableDictionary *privateKeyAttr = [[NSMutableDictionary alloc] init];
NSMutableDictionary *publicKeyAttr= [[NSMutableDictionary alloc] init];
NSMutableDictionary *keyPairAttr = [[NSMutableDictionary alloc] init];

NSData * publicTag = [NSData dataWithBytes:publicKeyIdentifier
                                    length:strlen((const char *)publicKeyIdentifier)];
NSData * privateTag = [NSData dataWithBytes:privateKeyIdentifier
                                     length:strlen((const char *)privateKeyIdentifier)];

SecKeyRef publicKey = NULL;
SecKeyRef privateKey = NULL;

[keyPairAttr setObject:(__bridge id)kSecAttrKeyTypeRSA
                forKey:(__bridge id)kSecAttrKeyType];
[keyPairAttr setObject:[NSNumber numberWithInt:2048]
                forKey:(__bridge id)kSecAttrKeySizeInBits];

[privateKeyAttr setObject:[NSNumber numberWithBool:YES]
                   forKey:(__bridge id)kSecAttrIsPermanent];
[privateKeyAttr setObject:privateTag
                   forKey:(__bridge id)kSecAttrApplicationTag];

[publicKeyAttr setObject:[NSNumber numberWithBool:YES]
                  forKey:(__bridge id)kSecAttrIsPermanent];
[publicKeyAttr setObject:publicTag
                  forKey:(__bridge id)kSecAttrApplicationTag];

[keyPairAttr setObject:privateKeyAttr
                forKey:(__bridge id)kSecPrivateKeyAttrs];
[keyPairAttr setObject:publicKeyAttr
                forKey:(__bridge id)kSecPublicKeyAttrs];

status = SecKeyGeneratePair((__bridge CFDictionaryRef)keyPairAttr,
                            &_publicKey, &_privateKey);

I then use the following code to obtain the raw data for the public key:
NSData* publicTag = [[NSData alloc] initWithBytes:publicKeyIdentifier length:sizeof(publicKeyIdentifier)];

OSStatus sanityCheck = noErr;
NSData* publicKeyBits = nil;

NSMutableDictionary* queryPublicKey = [[NSMutableDictionary alloc] init];
[queryPublicKey setObject:(__bridge id)kSecClassKey forKey:(__bridge id)kSecClass];
[queryPublicKey setObject:publicTag forKey:(__bridge id)kSecAttrApplicationTag];
[queryPublicKey setObject:(__bridge id)kSecAttrKeyTypeRSA forKey:(__bridge id)kSecAttrKeyType];

// Temporarily add key to the Keychain, return as data:
NSMutableDictionary* attributes = [queryPublicKey mutableCopy];
[attributes setObject:(__bridge id)key forKey:(__bridge id)kSecValueRef];
[attributes setObject:@YES forKey:(__bridge id)kSecReturnData];
CFTypeRef result;
sanityCheck = SecItemAdd((__bridge CFDictionaryRef)attributes, &result);
if (sanityCheck == errSecSuccess) {
    publicKeyBits = CFBridgingRelease(result);

    // Remove from Keychain again:
    (void)SecItemDelete((__bridge CFDictionaryRef)queryPublicKey);
}
return publicKeyBits;

The above code yields NSData of 270 bytes long for the public key; I base64 encode this data and send it to the device, but it is rejected.
My colleague at work has completed implementation of the same functionality for android, and he generates his key pair as follows:
    KeyPairGenerator kpg = KeyPairGenerator.getInstance(""RSA"");
    kpg.initialize(2048);
    KeyPair key = kpg.generateKeyPair();

And he uses:
    key.getPublic().getEncoded() 

To access the public key data, which is 294 bytes long, and which the device accepts.
Also, if I take the raw bytes of his generated public key, and use my base64 encode and send, this is also accepted by the device.
What is the difference here? Why is his key 294 bytes, while mine is 270? And how can I fix this? Any help would be much appreciated.
EDIT
I have just found https://crypto.stackexchange.com/questions/14491/why-is-a-2048-bit-public-rsa-key-represented-by-540-hexadecimal-characters-in-x, that states:
Note that this does not count the encoding that says ""this is an RSA public key""; that takes up an additional 24 bytes (including overhead).
This sounds like what I need, although I don't know how to include this information.
Anyone?
","Here's the answer: http://blog.wingsofhermes.org/?p=42
""First off, when you export a key from the iPhone keychain, it’s exported in a cut down format – just the public key and exponent without any of the other ASN.1 stuff you’d expect in a fully encoded public key.""
I thought it was something like this; I've been smashing my head against a monitor all day..
Bloody apple.
","681","<android><ios><rsa><public-key-encryption><encryption-asymmetric>","0","4","1","2015-06-05 19:27:47","","8","2","-1","","2017-04-13 12:48:18","2015-06-04 16:13:11",""
"17317599","How do I use ElGamal encryption with ezPyCrypto","I came across an nice encryption module ezPyCrypto for python's PyCrypto module. In the description it says that the user can specify between RSA and ElGamal encryption, but I can't figure out where I'm supposed to specify this in the code (API here).
Has anyone else managed this or have any experience with ezPyCytpo? Any help would be hugely appreciated. 
Here's the description I was talking about:
Features:

ezPyCrypto lets you:

Generate, export and import public and private keys
Encrypt and decrypt strings with ease
Optionally create encrypted data as email-friendly text
Sign and verify strings (incl. documents)
Protect your private key with a passphrase
Create 'streams', for sending data through secured sockets
Choose any public key size you like (2048-bit recommended)
Choose between RSA and ElGamal for public key, and IDEA, DES3, Blowfish, ARC4, IDEA for session key
Rest in the comfort of security, with 256-bit session keys and defences against common               RSA and ElGamal attacks, which will painfully frustrate anyone seeking to violate your privacy.


","","679","<python><public-key-encryption><elgamal>","1","","0","2013-06-26 10:28:10","","1","","","","","2013-06-26 10:28:10",""
"44547055","Decryption of Secret Key using the Private Key from JKS file","So I have generated a key pair in keytool and generated a symmetric key and the encrypted a String with the symmetric key and then encrypted the symmetric key. Now I have to decrypt the symmetric key and I am having some trouble. The code I am using for decryption is not throwing back any errors but it is not actually doing anything either and I am not sure what I am doing wrong.
    package ReadFileExample;


    import java.io.BufferedOutputStream;
    import java.io.ByteArrayOutputStream;
    import java.io.FileInputStream;
    import java.io.FileOutputStream;
    import java.io.IOException;
    import java.io.InputStream;
    import java.io.ObjectOutputStream;
    import java.security.Key;
    import java.security.KeyException;
    import java.security.KeyPair;
    import java.security.KeyStoreException;
    import java.security.NoSuchAlgorithmException;
    import java.security.PrivateKey;
    import java.security.PublicKey;
    import java.security.UnrecoverableKeyException;
    import java.security.cert.CertificateFactory;
    import java.security.cert.X509Certificate;
    import java.util.Base64;

    import javax.crypto.Cipher;
    import javax.crypto.KeyGenerator;
    import javax.crypto.SecretKey;
    import javax.security.cert.Certificate;

    import java.security.KeyStore;
    import java.security.Key;
    import java.io.FileInputStream;



    public class generatekey {


       static Cipher cipher;
       public static void main(String[] args) throws Exception {






    // generating a symmetric key using the AES algorithm
     KeyGenerator generator = KeyGenerator.getInstance(""AES"");
    // 128 bit key
     generator.init(128);
    //generates a secret key
     SecretKey secretkey = generator.generateKey();
    // returns an AES cipher
     cipher = Cipher.getInstance(""AES"");
    //print key
     System.out.println(""Key: "" + cipher);







     String plainText = ""Hello World"";
    // call to method encrypt 
     String encryptedText  = encrypt(plainText, secretkey);
    // print orignial text and encrypted text
     System.out.println(""Plain Text: "" + plainText);
     System.out.println(""Encrypted Text: "" + encryptedText);





     String publicKey = ""C:/Users/girgich/public.cert"";










    // allows to write data to a file
     FileOutputStream fos = null;
    // write bytes to file
     BufferedOutputStream bos = null;
    // create file to which data needs to be written
     String fileName = ""C:/Users/girgich/newFile.txt"";

     try{
        // allows written data to go into the written path
         fos = new FileOutputStream(fileName);
        // converts written data into bytes
         bos = new BufferedOutputStream(fos);


        // writes the encrypted text into file
         bos.write(encryptedText.getBytes());                


         System.out.println(""encryptedText has been written successfully in ""
                     +fileName);

        // allows to catch bug in code
     } catch (IOException e) {
        e.printStackTrace();
     } finally {
         try{
            // check for null exception
             if (bos != null){
                bos.close();

             }
            // check for null exception
             if (fos != null){
                fos.close();
             }
         } catch (IOException e){
             e.printStackTrace();

         }



     }






    // creates a file input stream by opening a path to the file needed
     FileInputStream fin = new 
                           FileInputStream(""C:/Users/girgich/public.cert"");
    // implements the X509 certificate type
     CertificateFactory f = CertificateFactory.getInstance(""X.509"");
    // initalizes data found in the file
     X509Certificate certificate = 
                    (X509Certificate)f.generateCertificate(fin);
    // gets public key from this certificate 
     PublicKey pk = certificate.getPublicKey();
     System.out.println(pk);

     String encryptedTextKey = encryptedKey(pk, secretkey);
     System.out.println(""Encrypted Key: "" + encryptedTextKey);


    // allows to write data to a file
     FileOutputStream newFos = null;
    // write bytes to file
     BufferedOutputStream newBos = null;
    // create file to which data needs to be written
     String fileNameKey = ""C:/Users/girgich/symmetric.txt"";

     try{
        // allows written data to go into the written path
         newFos = new FileOutputStream(fileNameKey);
        // converts written data into bytes
         newBos = new BufferedOutputStream(newFos);



        // writes the encrypted text into file
        newBos.write(encryptedTextKey.getBytes());                


        System.out.println(""encryptedKey has been written successfully in ""
                     +fileNameKey);






        // allows to catch bug in code
     } catch (IOException e) {
        e.printStackTrace();
     } finally {
         try{
            // check for null exception
             if (newBos != null){
                 newBos.close();

            }
            // check for null exception
             if (newFos != null){
                 newFos.close();
            }
         } catch (IOException e){
             e.printStackTrace();

        }
    }

     String decrypt = (encryptedTextKey);

}







 public static String encrypt(String plainText, SecretKey secretkey) throws 
  Exception {
    //Encodes the string into a sequence of bytes
    byte[] plainTextByte = plainText.getBytes();
    //intialize cipher to encryption mode
    cipher.init(Cipher.ENCRYPT_MODE, secretkey);
    //data is encrypted 
    byte[] encryptedByte = cipher.doFinal(plainTextByte);
    Base64.Encoder encoder = Base64.getEncoder();
    //encodes bytes into a string using Base64
    String encryptedText = encoder.encodeToString(encryptedByte);
    // return the string encrypted text to the main method
    return encryptedText;

}

public static String encryptedKey(PublicKey pk, SecretKey secretkey) throws Exception {
    // data written to byte array
    ByteArrayOutputStream baos = new ByteArrayOutputStream();
    // writes data types to the output stream
    ObjectOutputStream writter = new ObjectOutputStream(baos);
    //specific object of secretkey is written to the output stream
    writter.writeObject(secretkey);

    //creates a byte array  
    byte[] plainTextByteKey = baos.toByteArray();

    //creates a cipher using the RSA algorithm 
    Cipher cipher = Cipher.getInstance(""RSA"");
    // initalizes cipher for encryption using the public key 
    cipher.init(Cipher.ENCRYPT_MODE, pk);
    //encrypts data
    byte[] encryptedByteKey = cipher.doFinal(plainTextByteKey);

    Base64.Encoder encoderKey = Base64.getEncoder();
    // encodes the byte array into a string.
    String encryptedTextKey = encoderKey.encodeToString(encryptedByteKey);
    return encryptedTextKey;

}


public void decrypt(String encryptedTextKey) {
    byte[] decryptedData = null;
    String password = ""******"";


    try {
        FileInputStream is = new FileInputStream(""C:/Users/girgich/keystore.jks"");
        KeyStore keystore = KeyStore.getInstance(KeyStore.getDefaultType());
        keystore.load(is, password.toCharArray());
        String alias = ""mykey"";
        Key key = keystore.getKey(alias, password.toCharArray());

        Cipher cipher = Cipher.getInstance(""RSA"");
        cipher.init(Cipher.DECRYPT_MODE, key);
        decryptedData = cipher.doFinal(encryptedTextKey.getBytes());
        System.out.println(""Decrypted Key: "" + decryptedData);

    } catch (Exception e) {
        e.printStackTrace();
    }
}

}
","","674","<java><encryption><public-key-encryption><private-key>","0","","0","2017-06-14 19:14:56","","2","","238704","","2017-06-14 19:14:56","2017-06-14 14:03:01",""
"21311931","AWS CentOS Root Keypairs","I've launched a CentOS 6.4 AMI and configured it to act as a base instance for our application. I'm now trying to create an AMI from this which can be brought up as required. 
Unfortunately when a new instance is created from the AMI the root user's key pair remains that which was assigned to the original template instance when it was created from a CentOS AMI. I was hoping that AWS would be able to assign a new key pair to each instance of the AMI as it's created. Although we won't be using the root key pair for day-to-day work on the instances, I'd prefer they didn't all share the same key.
Despite creating a new key pair at launch time I'm only able to log in using the original key. I've tried several solutions including removing the authorized_keys for the root user, but to no avail.
I'd appreciate any advice you can provide.
Thanks. 
","
Stop the running EC2 instance
Detach its /dev/sda1 volume (let's call it volume A)
Start new t1.micro EC2 instance, using my new key pair
Attach volume A to the new micro instance, as /dev/xvdf (or /dev/sdf)
SSH to the new micro instance and mount volume A to /mnt/tmp
Copy ~/.ssh/authorized_keys to /mnt/tmp/home/ubuntu/.ssh/authorized_keys
Logout
Terminate micro instance
Detach volume A from it
Attach volume A back to the main instance as /dev/sda1
Start the main instance
Login as before, using your new .pem file

","672","<amazon-web-services><ssh><centos><public-key-encryption><amazon-ami>","0","0","2","2014-09-10 18:02:09","21313625","0","","3228246","","2014-01-23 15:51:22","2014-01-23 15:07:04",""
"21311931","AWS CentOS Root Keypairs","I've launched a CentOS 6.4 AMI and configured it to act as a base instance for our application. I'm now trying to create an AMI from this which can be brought up as required. 
Unfortunately when a new instance is created from the AMI the root user's key pair remains that which was assigned to the original template instance when it was created from a CentOS AMI. I was hoping that AWS would be able to assign a new key pair to each instance of the AMI as it's created. Although we won't be using the root key pair for day-to-day work on the instances, I'd prefer they didn't all share the same key.
Despite creating a new key pair at launch time I'm only able to log in using the original key. I've tried several solutions including removing the authorized_keys for the root user, but to no avail.
I'd appreciate any advice you can provide.
Thanks. 
","I ran into this issue as well, with my Centos 6.5 image.
Here's how I fixed it:
Install the EPEL repo
wget http://download.fedoraproject.org/pub/epel/6/i386/epel-release-6-8.noarch.rpm
rpm -ivh epel-release-6-8.noarch.rpm

Install the cloud-init package
yum install cloud-init

Add a user to the box called ""cloud-user""
Add cloud-user to the sudoers file with the no password option
cloud-user  ALL=(ALL)       NOPASSWD: ALL

Stop the instance, and create the AMI.
When you launch an instance from that AMI you can choose any key you want, and when you login you will just use the following command
ssh -i yourkeyfile.pem cloud-user@your.ip.addy

To become root, just type the following
sudo -i

Cheers
","672","<amazon-web-services><ssh><centos><public-key-encryption><amazon-ami>","0","1","2","2014-09-10 18:02:09","21313625","0","","3228246","","2014-01-23 15:51:22","2014-01-23 15:07:04",""
"16850866","steps to take after creating self signed certificate private key /csr on cpanel","I have created ssl crt/private key/csr from ssl/tls manager from cpanel .
What is the next step/configuration I need to do ?
When I type in address bar only--> example.in it works but if its https://example.in it does not work .
What changes I need to do ? .I have tried many things have created keys/crt/csr 50 times but still I get the same error https://example.in/cgi-sys/defaultwebpage. also the certificate states that its in another name .But that's impossible as everything is created by drop down options in ssl manager so every data is correct.
Also there was empty .htaccess created .I filled it with
RewriteEngine On
RewriteCond %{HTTPS} !on
RewriteRule (.*) https://%{HTTP_HOST}%{REQUEST_URI}

It redirects to https but I keep getting the error above .
Summary : 
1. Should I add something in htaccess ?  

2. Create php in html which authorizes certificate which has the domain website(index.html)?  

3. Or something else ?

","You’ll also need a dedicated IP address, to separate the site from others on the shared hosting server. Make sure you have installed self-signed certificate successfully. you should have .key and .crt created from WHM >> Generate a SSL Certificate & Signing Request, and paste in text file.
Install a self-signed SSL certificate

In WHM, click “Install an SSL Certificate and Setup the Domain”.
Enter the domain name, account user name, and IP address for the certificate in the Domain, User, and IP Address fields.
Click “Fetch” to paste the .key and .crt files for the domain into the available display spaces, if they are currently on your server. 
Don’t enter anything in CA bundle: there is no Certificate Authority because you are installing a self-signed cert.
Click “Submit”, then wait for all processes to complete. WHM will display various lines of information and finally display “Finished Install Process.. “
Point your web browser to https:// followed by the domain, to see your new SSL connection working.

If you don’t see the SSL commands in your WHM, it may be because you don’t have a dedicated IP on your account. Once you have a dedicated IP assigned to a domain, the SSL Certificate links/commands will appear in WHM.
","671","<ssl><https><openssl><cpanel><public-key-encryption>","1","0","1","2013-05-31 10:13:41","16854916","0","","492620","","2013-05-31 06:54:26","2013-05-31 06:17:54",""
"9798480","Problems using CNG and BCRYPT_KDF_SP80056A_CONCAT KDF","I am in the processing of implementing a CNG ECDH  and then I am trying to use the BCRYPT_KDF_SP80056A_CONCAT  KDF to derive a symmetric AES256 key (BCryptDeriveKey()).  I am having a problem (i always get back 0xc000000d status returned.)
i have generated a shared secret successfully and I have created the buffer desc ""BCryptBufferDesc"" which has an array of ""BCryptBuffer"" with 1 AlgorithmID, 1 PartyU and 1 PartyV ""other info"". I think I have the structures all defined and populated properly. I am just picking some ""values"" for PartyU and PartyV bytes (i tried 1 byte and 16 bytes for each but i get the same result). NIST documentation gives no details about what the other info should be.. 
i have followed the Microsoft web site for creating these structures, using their strings, defines, etc.     I tried with the standard L""HASH"" kdf and it works and i get the same derived key on both ""sides"", but with the concatenation KDF i always get the same 0xC000000D status back..  
Has anybody else been able to successfully use BCRYPT_KDF_SP80056A_CONCAT CNG KDF? If you did, do you have any hints? 
","This worked for me:
    ULONG derivedKeySize = 32;
    BCryptBufferDesc params;
    params.ulVersion = BCRYPTBUFFER_VERSION;
    params.cBuffers = 3;
    params.pBuffers = new BCryptBuffer[params.cBuffers];
    params.pBuffers[0].cbBuffer = 0;
    params.pBuffers[0].BufferType = KDF_ALGORITHMID;
    params.pBuffers[0].pvBuffer = new byte[0];
    params.pBuffers[1].cbBuffer = 0;
    params.pBuffers[1].BufferType = KDF_PARTYUINFO;
    params.pBuffers[1].pvBuffer = new byte[0];
    params.pBuffers[2].cbBuffer = 0;
    params.pBuffers[2].BufferType = KDF_PARTYVINFO;
    params.pBuffers[2].pvBuffer = new byte[0];

    NTSTATUS rv = BCryptDeriveKey(secretHandle, L""SP800_56A_CONCAT"", &params, NULL, 0, &derivedKeySize, 0);
    if (rv != 0){/*fail*/}

    UCHAR derivedKey = new UCHAR[derivedKeySize];

    rv = BCryptDeriveKey(secretHandle, L""SP800_56A_CONCAT"", &params, derivedKey, derivedKeySize, &derivedKeySize, 0);
    if (rv  != 0){/*fail*/}

","666","<encryption><public-key-encryption><encryption-asymmetric><bcrypt><cng>","1","2","1","2012-06-10 16:56:24","","0","","","","","2012-03-21 04:08:52",""
"34187124","Phpseclib equivalent to Java RSA Encryption","I'm trying to reproduce Java encryption using Cipher cipher = Cipher.getInstance(""RSA""); with PHP and phpseclib.
I tried this and so many things, but it seems the data are not correctly encrypted
$rsa = new Crypt_RSA();
$rsa->setEncryptionMode(CRYPT_RSA_ENCRYPTION_OAEP);
$rsa->loadKey($pub_key);
$ciphertext = $rsa->encrypt($plaintext);

I tried different combination like 
$rsa->setMGFHash('sha512');
$rsa->setHash('sha512');
//$rsa->setMGFHash('sha256');
//$rsa->setHash('sha256');

without success.
Am I missing something?
","Don't ever use incomplete Cipher strings like this one:
Cipher cipher = Cipher.getInstance(""RSA"");

This doesn't specify the padding and therefore depends on which padding the default security provider prefers. This will probably default to:
Cipher cipher = Cipher.getInstance(""RSA/ECB/PKCS1Padding"");

This would be compatible to
$rsa = new Crypt_RSA();
$rsa->loadKey($pub_key);
$rsa->setEncryptionMode(CRYPT_RSA_ENCRYPTION_PKCS1);
$ciphertext = $rsa->encrypt($plaintext);

But you shouldn't use PKCS#1 v1.5 padding anymore. You really should be using OAEP (meaning):
Cipher cipher = Cipher.getInstance(""RSA/ECB/OAEPWithSHA-256AndMGF1Padding"");

and the phpseclib equivalent should be
$rsa = new Crypt_RSA();
$rsa->loadKey($pub_ley);
$rsa->setEncryptionMode(CRYPT_RSA_ENCRYPTION_OAEP);
$rsa->setHash('sha256');
$ciphertext = $rsa->encrypt($plaintext);

","665","<java><php><encryption><public-key-encryption><phpseclib>","2","3","1","2015-12-09 21:29:47","","0","4","2224584","","2015-12-09 21:29:47","2015-12-09 19:14:43",""
"34223376","PCLCrypto asymmetric encryption failing with leading zero padding public key","Running the following code fails. When I import the public key one of the RSA parameters seems to get padded with a leading zero, causing the publickKey to be 520 bits instead of the 512 bits of the privateKey.
public static void Test()
{
    var algorithm = WinRTCrypto.AsymmetricKeyAlgorithmProvider.OpenAlgorithm(AsymmetricAlgorithm.RsaPkcs1);
    ICryptographicKey privateKey = algorithm.CreateKeyPair(512);
    byte[] publicKeyBytes = privateKey.ExportPublicKey(CryptographicPublicKeyBlobType.X509SubjectPublicKeyInfo);
    ICryptographicKey publicKey = algorithm.ImportPublicKey(publickKeyBytes, CryptographicPublicKeyBlobType.X509SubjectPublicKeyInfo);

    var encryptedValue = WinRTCrypto.CryptographicEngine.Encrypt(publicKey, Encoding.UTF8.GetBytes(""test""));
    var decryptedValue = WinRTCrypto.CryptographicEngine.Decrypt(privateKey, encryptedValue);
}

The problem seems to be this line:
algorithm.ImportPublicKey(publickKeyBytes, CryptographicPublicKeyBlobType.X509SubjectPublicKeyInfo);

The publicKeyBytes seems right. It works against another service that uses it to encrypt some data that I can succesfully decrypt. This issue is when i try to create some dummy encrypted data for unit testing.
Im running this code in a Portable Class Library using .Net Framework 4.5.
The above code throws at the line where it try's to decrypt, a System.Security.Cryptography.CryptographicExceptionwith the following message:

The data to be decrypted exceeds the maximum for this modulus of 64
  bytes.

The following assert fails:
Assert.Equals(privateKey.KeySize, publicKey.KeySize)

Doing the following removeing the padded zero from the Modulus fix the public key and everything works fine.
RSAParameters rsaPublicParameters = publicKey.ExportParameters(false);
rsaPublicParameters.Modulus = rsaPublicParameters.Modulus.Skip(1).ToArray();
ICryptographicKey workingPublicKey = algorithm.ImportParameters(rsaPublicParameters);

Is this a bug in PCLCrypto or am I using it wrong.
","","655","<encryption><rsa><public-key-encryption><pcl-crypto>","0","","0","2015-12-11 14:34:59","","4","","905423","","2015-12-11 14:34:59","2015-12-11 12:17:37",""
"54333855","NodeJS: Can't sign in nodeJS 10.14.2","I read the following https://nodejs.org/api/crypto.html#crypto_class_sign and tried to copy the code:

sign.js

const crypto = require('crypto');

const { privateKey, publicKey } = crypto.generateKeyPairSync('ec', {
  namedCurve: 'sect239k1'
});

const sign = crypto.createSign('SHA256');
sign.write('some data to sign');
sign.end();
const signature = sign.sign(privateKey, 'hex');

const verify = crypto.createVerify('SHA256');
verify.write('some data to sign');
verify.end();
console.log(verify.verify(publicKey, signature));
// Prints: true or false

But it throws me an error
>> node sign.js  
internal/crypto/keygen.js:73
    throw new ERR_INVALID_OPT_VALUE('publicKeyEncoding', publicKeyEncoding);
    ^

TypeError [ERR_INVALID_OPT_VALUE]: The value ""undefined"" is invalid for option ""publicKeyEncoding""
    at parseKeyEncoding (internal/crypto/keygen.js:73:11)
    at check (internal/crypto/keygen.js:240:7)
    at Object.generateKeyPairSync (internal/crypto/keygen.js:53:16)
    at Object.<anonymous> (/Users/norfeldt/Desktop/AsymEnc/sign.js:3:42)
    at Module._compile (internal/modules/cjs/loader.js:689:30)
    at Object.Module._extensions..js (internal/modules/cjs/loader.js:700:10)
    at Module.load (internal/modules/cjs/loader.js:599:32)
    at tryModuleLoad (internal/modules/cjs/loader.js:538:12)
    at Function.Module._load (internal/modules/cjs/loader.js:530:3)
    at Function.Module.runMain (internal/modules/cjs/loader.js:742:12)

Update
I made the following change (as suggested by @ottomeister)
const crypto = require('crypto')

const { privateKey, publicKey } = crypto.generateKeyPairSync('ec', {
  namedCurve: 'sect239k1',
  publicKeyEncoding: { type: 'spki', format: 'der' },
  privateKeyEncoding: { type: 'pkcs8', format: 'der' },
})

const sign = crypto.createSign('SHA256')
sign.write('some data to sign')
sign.end()
const signature = sign.sign(privateKey, 'hex')

const verify = crypto.createVerify('SHA256')
verify.write('some data to sign')
verify.end()
console.log(verify.verify(publicKey, signature))
// Prints: true or false

But it now throws me a new error
internal/crypto/sig.js:80
  var ret = this._handle.sign(key, passphrase, rsaPadding, pssSaltLength);

Error: error:0906D06C:PEM routines:PEM_read_bio:no start line
    at Sign.sign (internal/crypto/sig.js:80:26)
    at Object.<anonymous> (/Users/norfeldt/Desktop/AsymEnc/sign.js:12:24)
    at Module._compile (internal/modules/cjs/loader.js:689:30)
    at Object.Module._extensions..js (internal/modules/cjs/loader.js:700:10)
    at Module.load (internal/modules/cjs/loader.js:599:32)
    at tryModuleLoad (internal/modules/cjs/loader.js:538:12)
    at Function.Module._load (internal/modules/cjs/loader.js:530:3)
    at Function.Module.runMain (internal/modules/cjs/loader.js:742:12)
    at startup (internal/bootstrap/node.js:282:19)
    at bootstrapNodeJSCore (internal/bootstrap/node.js:743:3)

(I don't know it makes a difference, but I would like to read .pem files I create with openssl)
","You say you're using Node.js version 10 but your link points to the documentation for Node.js version 11.  The documentation for version 10 is at https://nodejs.org/dist/latest-v10.x/docs/api/crypto.html
In version 11, the publicKeyEncoding and privateKeyEncoding properties of the options object passed as the second argument to crypto.generateKeyPairSync are optional.  In version 10 these properties are not optional, they must be specified.  Your program doesn't provide those properties, and that's why it's blowing up.
If you change:
const { privateKey, publicKey } = crypto.generateKeyPairSync('ec', {
  namedCurve: 'sect239k1'
});

to:
const { privateKey, publicKey } = crypto.generateKeyPairSync('ec', {
  namedCurve: 'sect239k1',
  publicKeyEncoding:  { type: 'spki', format: 'der' },
  privateKeyEncoding: { type: 'pkcs8', format: 'der' }
});

then your program should be much happier.

Update
OK, I installed Node 10 and ran your program.  sign.sign() is blowing up because, as stated in the documentation, it requires the private key to be in PEM format.  It can't handle a private key in the DER format my original answer produced.  The same applies to the format of the public key passed to verify.verify() -- it must be PEM, not DER.  So change this:
const { privateKey, publicKey } = crypto.generateKeyPairSync('ec', {
  namedCurve: 'sect239k1',
  publicKeyEncoding:  { type: 'spki', format: 'der' },
  privateKeyEncoding: { type: 'pkcs8', format: 'der' }
});

to this:
const { privateKey, publicKey } = crypto.generateKeyPairSync('ec', {
  namedCurve: 'sect239k1',
  publicKeyEncoding:  { type: 'spki', format: 'pem' },
  privateKeyEncoding: { type: 'pkcs8', format: 'pem' }
});

That is, change both occurrences of 'der' to 'pem'.
That will let your program run without throwing exceptions.  However, the verification attempt will fail and the reported result written by the final console.log() call will be false.  That's because the program does not tell verify.verify() the encoding that was used in the privateKey string.  To fix that and get a true result from the verification, change:
verify.verify(publicKey, signature)

to:
verify.verify(publicKey, signature, 'hex')

matching the string encoding that was specified when the signature was generated by sign.sign().  The documentation isn't very clear on this part, but from experimentation it seems that if the signature is a string then you must always specify the encoding of the string.  The only circumstance in which you can skip providing the encoding here is if you also skip it in the sign.sign() call, which would have caused signature to be generated as a Buffer rather than as a string.
","653","<javascript><node.js><encryption><public-key-encryption><encryption-asymmetric>","1","4","1","2019-01-24 22:07:41","54340970","0","","618099","","2019-01-24 20:31:40","2019-01-23 18:51:43",""
"53711756","Java RSA With No Padding","I am trying to implement RSA encryption with no Padding.
I need it to obtain the same cipher text if I encrypt the same thing multiple times.
The problem is, even though I seem to have managed to do that, the cipher text does not decrypt. The code below works if I replace ""RSA/ECB/NoPadding"" with ""RSA"".
import javax.crypto.Cipher;
import java.io.InputStream;
import java.security.*;
import java.util.Base64;

import static java.nio.charset.StandardCharsets.UTF_8;

public class RsaExample {
//https://gist.github.com/nielsutrecht/855f3bef0cf559d8d23e94e2aecd4ede
public static KeyPair generateKeyPair() throws Exception {
    KeyPairGenerator generator = KeyPairGenerator.getInstance(""RSA"");
    generator.initialize(2048, new SecureRandom());
    KeyPair pair = generator.generateKeyPair();

    return pair;
}

public static KeyPair getKeyPairFromKeyStore() throws Exception {
    //Generated with:
    //  keytool -genkeypair -alias mykey -storepass s3cr3t -keypass s3cr3t -keyalg RSA -keystore keystore.jks

    InputStream ins = RsaExample.class.getResourceAsStream(""/keystore.jks"");

    KeyStore keyStore = KeyStore.getInstance(""JCEKS"");
    keyStore.load(ins, ""s3cr3t"".toCharArray());   //Keystore password
    KeyStore.PasswordProtection keyPassword =       //Key password
            new KeyStore.PasswordProtection(""s3cr3t"".toCharArray());

    KeyStore.PrivateKeyEntry privateKeyEntry = (KeyStore.PrivateKeyEntry) keyStore.getEntry(""mykey"", keyPassword);

    java.security.cert.Certificate cert = keyStore.getCertificate(""mykey"");
    PublicKey publicKey = cert.getPublicKey();
    PrivateKey privateKey = privateKeyEntry.getPrivateKey();

    return new KeyPair(publicKey, privateKey);
}

public static String encrypt(String plainText, PublicKey publicKey) throws Exception {
    Cipher encryptCipher = Cipher.getInstance(""RSA/ECB/NoPadding"");
    encryptCipher.init(Cipher.ENCRYPT_MODE, publicKey);

    byte[] cipherText = encryptCipher.doFinal(plainText.getBytes(UTF_8));

    return Base64.getEncoder().encodeToString(cipherText);
}

public static String decrypt(String cipherText, PrivateKey privateKey) throws Exception {
    byte[] bytes = Base64.getDecoder().decode(cipherText);

    Cipher decriptCipher = Cipher.getInstance(""RSA/ECB/NoPadding"");
    decriptCipher.init(Cipher.DECRYPT_MODE, privateKey);

    return new String(decriptCipher.doFinal(bytes), UTF_8);
}

public static String sign(String plainText, PrivateKey privateKey) throws Exception {
    Signature privateSignature = Signature.getInstance(""SHA256withRSA"");
    privateSignature.initSign(privateKey);
    privateSignature.update(plainText.getBytes(UTF_8));

    byte[] signature = privateSignature.sign();

    return Base64.getEncoder().encodeToString(signature);
}

public static boolean verify(String plainText, String signature, PublicKey publicKey) throws Exception {
    Signature publicSignature = Signature.getInstance(""SHA256withRSA"");
    publicSignature.initVerify(publicKey);
    publicSignature.update(plainText.getBytes(UTF_8));

    byte[] signatureBytes = Base64.getDecoder().decode(signature);

    return publicSignature.verify(signatureBytes);
}

public static void main(String... argv) throws Exception {
    //First generate a public/private key pair
    KeyPair pair = generateKeyPair();
    //KeyPair pair = getKeyPairFromKeyStore();

    //Our secret message
    String message = ""the answer to life the universe and everything"";

    //Encrypt the message
    String cipherText = encrypt(message, pair.getPublic());
    System.out.println(""Cipher 1=""+ cipherText);

    String cipherText2 = encrypt(message, pair.getPublic());
    System.out.println(""Cipher 2=""+ cipherText2);

    //Now decrypt it
    String decipheredMessage = decrypt(cipherText, pair.getPrivate());
    //System.out.println(""Private ""+pair.getPrivate().toString());
    System.out.println(""Deciphered ""+ decipheredMessage);

    //Let's sign our message
    String signature = sign(""foobar"", pair.getPrivate()); 
    System.out.println(""Signature ""+signature);
    //Let's check the signature
    boolean isCorrect = verify(""foobar"", signature, pair.getPublic());
    System.out.println(""Signature correct: "" + isCorrect);
}
}

Any help would be appreciated.
","","649","<java><public-key-encryption>","0","","0","2018-12-10 18:41:53","","3","","","","","2018-12-10 18:41:53",""
"41827428","Encrypting a file with Nodejs (Crypto) throw an error: bad base64 decode","Hello and sorry if my question is stupid, I'm just beginning on nodejs and bring a heavy luggage from PHP world.
I'm trying to encrypt a file using a public key generated through linux command line using the GnuPG command.
On my app I use Express, fs and Crypto to create a buffer from the file and get the public key content and then use publicEncrypt to get the encrypted data.
When I do so the application stops and throw an error complaining about the PEM format: bad base64 decode.
Error: error:0906D064:PEM routines:PEM_read_bio:bad base64 decode

Here you have the main parts of this code:
var encryptStringWithRsaPublicKey = function(toEncrypt, relativeOrAbsolutePathToPublicKey) {
var absolutePath = path.resolve(relativeOrAbsolutePathToPublicKey);
var publicKey = fs.readFileSync(absolutePath, ""utf8"");
if(typeof toEncrypt !=='object') return false;
var buffer = new Buffer(toEncrypt);
console.log(publicKey);
var encrypted = crypto.publicEncrypt(publicKey, buffer);
return encrypted.toString(""base64"");

};
        fs.readFile(req.files[0].path, function (err, data){
            var encrypted = encryptStringWithRsaPublicKey(data, '/home/app/data/pub_key.txt');
            if(!encrypted) {
                fs.writeFile(""/home/app/data/uploads/enc1/test.pdf"", encrypted, function(err) {
                    if(err) {
                        return console.log(err);
                    }

                    console.log(""The file was saved!"");
                    res.end(req.files[0].filename);
                }); 
            }
            else {
                res.end({error:'encryption failed. all data deleted.'});
            }
        });

Maybe the Public Key has some end of line bad characters somewhere or maybe Crypto requires a very special format?
This is the content of the pub key:
-----BEGIN PGP PUBLIC KEY BLOCK-----
Version: GnuPG v1

mQENBFiFz2ABCADGk6E2IgbaGYIHO7EVNotxiDjB4k5UZJ4xx41RwY9LeG0c+SLW
rC/ijPFJZ/kN3nrpvTAZEYpnK51olqvw/OOgt5p3k32mW47HALx91vU9WRrykt2Y
DMj+aeMDi5QZnda8qTnWCW3E+OBg4W0ZdpwPs+eOyHWRjp6zuBFxZfrtKQuFlzHs
6KKczdGidemUQCZL7ve34EQmgeh4rDJ1oNC8QzSFOYZHiSVQDXGvZSFirc3OMZus
JiflY1Al3Y0fJj2m8catu/i9bKfAPA+YE+yU86BrgV05Skn82px2K3coiI/+eSjp
j/ROxijvwzLf/F98B3/AiMJjx8pD/9APmnSbABEBAAG0MVBheSBGaWxlIChDdWJl
IEluc3BpcmUpIDxwYXlmaWxlQGN1YmVpbnNwaXJlLmNvbT6JATgEEwECACIFAliF
z2ACGwMGCwkIBwMCBhUIAgkKCwQWAgMBAh4BAheAAAoJEBeEp+MzfXEgefgH/0bJ
Oug/m66vlENqR+y6Z+mbC7RzFnhvojJ51EB6JlJe9EJ2VwtcirxorY5zL9DjTyB2
ys/kzdeN0+FmuIIO0To7ksB1ASZ5jsg1UdQEvLuLeSZSJRzbmz9M7jvxEfR+vz0h
RJPqs6EfgAOtRyDs8C/IXyWTrhu1wI+09CChjBH0/tCJ2sO074f4xMY1IYzf8nm7
ohuiGpN1egHOVjIjIajpmb94dGBXnbGNq/tzNwGZu9GUtaeTs3+kuqqy0+eIQDvR
7AU4Gt43etwpFz4dbWVDd77OxKUFshilaChIAwGmngfFn3ksnrl/AZVsGIJrxmy0
ja5t+yZOwl7KdC82SOa5AQ0EWIXPYAEIAOHRdsrEm/WFG3Fps++Mo6xUf/CFTyz3
WQr2nkOoBxAzcHPQd/3muDNKUblRhxZMrwuVZcnOZVOOz9rMqaM5kYSAB84PpVpG
26QcYFUn5WCmR3KSn9MiKqtSFJDn695ysaCdzzEW5Y/eKgxydG4rhFOy07VcKTev
dBC19XcukjxAbzmnZ7qUFhaRrS2u11mA+s0FmRz+EVOd0uxQdJq/Lps1nMvZ3UfL
saHJuBDgX+gCarbt+7uSx3aC/jBDzrq63Ry7nqN5mypSMRBeEAmi7kKToIRDj0Uj
xwqCgU4NVj8zCG2iBlOzrfKPk9oMLgHBvMPQYDW9wLz5rQnoVr4RkrUAEQEAAYkB
HwQYAQIACQUCWIXPYAIbDAAKCRAXhKfjM31xIBDYB/0VTjC/zvFHJwD5t+8DzHjN
UqPg7Mk0kYbu6dyPYb0/S2G5uZa3LoJ99EgOhgFlfUHM9k0GBC0OTxKiUEqKtENH
+W/wBouTltqGGyzDit+KlqzKz9gsyWF/HO3GTg1Df9D8o3MhUHRGjEeuik0BbJyd
Hy4YfDk5a4qUYtFztbmUSxVqdLlFBZ7oMn3n+A25HaDtohv9g1ZC3gTLD+yTTMsG
ruOEs6ZMIOENn6pgsjFdMIUmJVP3tt9n538jVfbVf7EgTrPt+JKjoQF3EfTysTnO
Y0IuotQuA83+5Fa6IY+iFLLvkNABr1WACVOKMUzBJJJG7EnlvgPufZL3eJE4LUZ9
=rpky
-----END PGP PUBLIC KEY BLOCK-----

","I've found the solution to my problem.
In fact the method publicEncrypt is a wrapper of OpenSSL and then it expect a public/private key on that format. A key from GPG won't do it.
By generating the private and public keys with the following command the code work as expected:
$ openssl genpkey -algorithm RSA -out private_key.pem -pkeyopt rsa_keygen_bits:2048
$ openssl rsa -pubout -in private_key.pem -out public_key.pem

","642","<node.js><encryption><public-key-encryption><gnupg><cryptojs>","2","0","1","2017-01-27 14:43:44","","2","","","","","2017-01-24 11:45:55",""
"27473770","Generate shared secret using private key from string type","I have very little knowledge in Cryptology, please excuse if this is a silly question.
I want to generate ECDH shared secret using private key and peer public key in Java.
I am trying to follow some sources on the internet and what is given here : http://dev.coova.org/svn/cjradius/trunk/ssl/src/main/java/net/jradius/ssl/ECDHCrypt.java
The code which I have, generates public and private key based on user credentials: 
import com.google.bitcoin.bouncycastle.asn1.sec.SECNamedCurves;
import com.google.bitcoin.bouncycastle.asn1.x9.X9ECParameters;
import com.google.bitcoin.bouncycastle.math.ec.ECPoint;
import com.google.bitcoin.core.Utils

public String ecdaPrivate(String hexstring) {  // The hexstring is the hex value   generated based on username and password

    byte[] hexBytes = new byte[32];
    for (int i = 0, j = 0; i < hexstring.length(); i++, j++) {
        String pairStr = hexstring.substring(i, i + 2);
        int value = Integer.parseInt(pairStr, 16);
        hexBytes[j] = (byte) (value & 0xFF);

        i++;
    }

    char[] hexChars = new char[hexBytes.length * 2];
    for (int j = 0; j < hexBytes.length; j++) {
        int v = hexBytes[j] & 0xFF;
        hexChars[j * 2] = hexArray[v >>> 4];
        hexChars[j * 2 + 1] = hexArray[v & 0x0F];
    }

    return new String(hexChars);
}


public String getPublicKey(String privateKey) {
    BigInteger privKey = new BigInteger(privateKey, 16);
    X9ECParameters ecp = SECNamedCurves.getByName(""secp256k1"");
    ECPoint curvePt = ecp.getG().multiply(privKey);
    BigInteger x = curvePt.getX().toBigInteger();
    BigInteger y = curvePt.getY().toBigInteger();
    byte[] xBytes = this.removeSignByte(x.toByteArray());
    byte[] yBytes = this.removeSignByte(y.toByteArray());
    byte[] pubKeyBytes = new byte[65];
    pubKeyBytes[0] = new Byte(""04"");
    System.arraycopy(xBytes, 0, pubKeyBytes, 1, xBytes.length);
    System.arraycopy(yBytes, 0, pubKeyBytes, 33, yBytes.length);
    return this.bytesToHex(pubKeyBytes);
}

These keys are in String type.
The problem is that most of the sources from Internet uses Privatekey and PublicKey types (java.security.PrivateKey), however the private key what I have is in the form of string type. 
Question is how do I convert a string to private key/public key object type.
","","640","<java><ssl><encryption><bouncycastle><public-key-encryption>","0","","0","2014-12-14 22:21:07","","3","1","2640248","","2014-12-14 22:21:07","2014-12-14 20:33:19",""
"35126246","multiparty encryption and decryption","Is is possible to send a single encrypted data message to multiple users and the users receiving the message can only decrypt certain parts of the message depending on their rights. 
For example, I send a message ""Hello World"", User A could decrypt can receive the whole message(hello world), but user B only can decrypt certain part and receive the message as ""hello"" only. 
","","639","<encryption><public-key-encryption><transmission>","0","","0","2016-02-01 08:48:18","","3","","","","","2016-02-01 08:48:18",""
"26029597","openssl X509 certificate with own rsa public key information","I am a beginner in using Openssl in generating x509 certificates. 
I would like to create a X509 certificate with my own RSA public key, i.e. own modulus and public exponent. Is it possible for me to do so? If yes, what is the procedure to that?
","
If yes, what is the procedure to that?

There's a lot to it. My routines span 3 source files, so I know I can't easily copy/paste something. The answer is arguably too broad.
As a starting point, you should start with this OpenSSL command to generate a self signed certificate:
openssl req -config example-com.conf -new -x509 -sha256 \
    -newkey rsa:2048 -nodes -keyout example-com.key.pem \
    -days 365 -out example-com.cert.pem

That OpenSSL command creates a new self signed certificate. If you omit the -x509 option, then you generate a Certificate Signing Request (CSR).
Most options are self explanatory, The -nodes means ""no password on the private key"". The other unknown is -config example-com.conf, and you can find that at https://stackoverflow.com/a/26029695/608639.
Given you know the command and options, you should study the source code in <openssl src>/apps/req.c. Its the source code for the openssl req ... command. If you need the source code, you can download it from OpenSSL: Source, Tarballs.
","639","<ssl><openssl><rsa><public-key-encryption>","0","0","1","2014-09-25 05:29:39","","0","","","","","2014-09-25 02:34:51",""
"36382514","RSA encryption/decryption in c","i am trying to implement rsa algorithm using c program. it works well in most cases.But in some cases it does not encrypt and again decrypt back to same stage.for example: ""--"" after encryption and decryption changes to ""ƒƒ""
here is the code for encryption and decryption. help would be appreciated. thanks in advance
void encrypt(uChar state[16])
{
    long int pt,ct,key=e[0],k;
    i=0;
    while(i<=16)
    {
        pt=state[i];
        pt=pt-96;
        k=1;
        for (j=0;j<key;j++)
        {
            k=k*pt;
            k=k%n;
        }
    ct=k+96;
    state[i]=ct;
    i++;
    }
}

void decrypt(uChar state[16])
{
    long int pt,ct,key=d[0],k;
    i=0;
    while(i<=16)
    {
        ct=state[i]-96;
        k=1;
        for (j=0;j<key;j++)
        {
            k=k*ct;
            k=k%n;
        }
        pt=k+96;
        state[i]=pt;
        i++;
    }
}

","You are indexing outside the bounds of the array with
while(i<=16)

You can index state[16] only up to 15 so (in both functions) it should be
while(i < 16)

","638","<c><public-key-encryption>","-1","2","1","2016-04-03 07:12:30","","7","","","","","2016-04-03 06:59:14",""
"54517587","RSA/ECB/PKCS1Padding decryption in PHP 7.2","I've been trying to get this to work since this morning, but I'm stuck at this thing for hours now.
This is my Public Key : https://pastebin.com/EBszJhSi
I have a string that I need to encrypt.
String = ""Hello""
This is my code below...
function RSAEncryption($text)
{

    $encrypted = 'hey';
    $publicKey = ""file:/"".PUBLIC_KEY;
    $plaintext = ""Hello"";
    $pubkey = openssl_pkey_get_public(file_get_contents(PUBLIC_KEY));
    openssl_public_encrypt($plaintext, $encrypted, re($publicKey), OPENSSL_PKCS1_PADDING);
    echo $encrypted;   //encrypted string
    return $encrypted;
}

This returns nothing. It's pure blank.
var_dump(openssl_public_encrypt($plaintext, $encrypted, re($publicKey), OPENSSL_PKCS1_PADDING));

This returns ""false"". I've tried multiple libraries like phpseclib as well and that has another issue. I've tried both the versions of phpseclib, 1.0 and 2.0. The issue with phpseclib was that the files and some variables were missing, even though I downloaded from official sources.
Anyways, can someone please help me with this?
EDIT : 
The value of PUBLIC_KEY is /location/keys/publickey.pem.
re() function :
function re($key_file_path)
{
    $handle = fopen($key_file_path, ""r"");
    // echo ""Key Contents : "" . fread($handle, filesize($key_file_path)) . ""<br>"";
    return nl2br(fread($handle, filesize($key_file_path)));
}

","
Check your path to file: ""file:/"".PUBLIC_KEY;. It should be with 2 slashes
You try to get file content from file name, not from path: file_get_contents(PUBLIC_KEY)
What does re($publicKey) do? It is not PHP built-in function

    function RSAEncryption($text)
    {
        $publicKeyContent = file_get_contents(""file://"".PUBLIC_KEY);
        $publicKey = openssl_pkey_get_public($publicKeyContent);

        openssl_public_encrypt($text, $encrypted, $publicKey, OPENSSL_PKCS1_OAEP_PADDING);

        return $encrypted;
    }

","636","<php><rsa><public-key-encryption><phpseclib><php-7.2>","0","-1","2","2019-02-05 14:41:50","54536852","0","1","8337044","","2019-02-04 15:13:02","2019-02-04 13:51:22",""
"54517587","RSA/ECB/PKCS1Padding decryption in PHP 7.2","I've been trying to get this to work since this morning, but I'm stuck at this thing for hours now.
This is my Public Key : https://pastebin.com/EBszJhSi
I have a string that I need to encrypt.
String = ""Hello""
This is my code below...
function RSAEncryption($text)
{

    $encrypted = 'hey';
    $publicKey = ""file:/"".PUBLIC_KEY;
    $plaintext = ""Hello"";
    $pubkey = openssl_pkey_get_public(file_get_contents(PUBLIC_KEY));
    openssl_public_encrypt($plaintext, $encrypted, re($publicKey), OPENSSL_PKCS1_PADDING);
    echo $encrypted;   //encrypted string
    return $encrypted;
}

This returns nothing. It's pure blank.
var_dump(openssl_public_encrypt($plaintext, $encrypted, re($publicKey), OPENSSL_PKCS1_PADDING));

This returns ""false"". I've tried multiple libraries like phpseclib as well and that has another issue. I've tried both the versions of phpseclib, 1.0 and 2.0. The issue with phpseclib was that the files and some variables were missing, even though I downloaded from official sources.
Anyways, can someone please help me with this?
EDIT : 
The value of PUBLIC_KEY is /location/keys/publickey.pem.
re() function :
function re($key_file_path)
{
    $handle = fopen($key_file_path, ""r"");
    // echo ""Key Contents : "" . fread($handle, filesize($key_file_path)) . ""<br>"";
    return nl2br(fread($handle, filesize($key_file_path)));
}

","With phpseclib:
$key = '---- BEGIN SSH2 PUBLIC KEY ----
Comment: ""imported-openssh-key""
AAAAB3NzaC1yc2EAAAABJQAAAQEAgsYRVei5nVln0cX9D/x5OcscdO5WCsmyZUEN
dHhfgVD8UklasxcXElKoL0UEer9nvJWMILAU/ZMHbf0O1SaiYbhFmDFyHi/CfwT6
QHD2mu7qLbadXXs0OiGiTUPwZX2Sux2uoxm0ZwfxjSbO85rlJ7Yg0ZjXkRiw+4qT
OQNyYEq4Vt6R/BwIdf5Yt75+7Nzlm5HHi4TPNE63YJJTdazJQ1OWgdZWIZjk4M9K
Zl8x9qNRsKd2GC1G6CGq+L1DOgBbPVWPE7DGUVYJYYF609Iau11LXS6d2FBDUS3S
xna7mtmlZQNEvSRtctuojWfwWI2k1Ac/DW3RJ+M1ccN78dseEw==
---- END SSH2 PUBLIC KEY ----';

$key = preg_replace('#----.*?----#', '', $key);
$key = preg_replace('#Comment: .*#', '', $key);
$key = str_replace([""\r"", ""\n""], '', $key);

$key = 'ssh-rsa ' . $key;

$rsa = new RSA();
$rsa->loadKey($key);

echo $rsa;

Echo'ing out the key is generally a pretty good way to see if the key successfully loaded. If you comment out the preg_replace's, the str_replace and the 'ssh-rsa' . $key bit (ie. if you try to load the key directly) it won't load but if they're in place then it does.
This technique won't work with OpenSSL because the base64-encoded key structure is, ultimately, an SSH formatted key and OpenSSL doesn't support those. phpseclib, in contrast, does but not in the exact same format as your key. phpseclib expects the keys to be in the same format that they would be in the ~/.ssh/authorized_keys file.
","636","<php><rsa><public-key-encryption><phpseclib><php-7.2>","0","0","2","2019-02-05 14:41:50","54536852","0","1","8337044","","2019-02-04 15:13:02","2019-02-04 13:51:22",""
"16915971","SSH RFC User authentication Message SSH_MSG_USERAUTH_REQUEST","I'm working on some proprietary development on SSH protocol.
I want one clarification on message SSH_MSG_USERAUTH_REQUEST
As per RFC 4252, client can send this below message to server to just verify the whether publickey would be acceptable or not. 
byte SSH_MSG_USERAUTH_REQUEST
string user name in ISO-10646 UTF-8 encoding [RFC3629]
string service name in US-ASCII
string ""publickey""
boolean FALSE
string public key algorithm name
string public key blob
Once above message is replied properly by server with SSH_MSG_USERAUTH_PK_OK. 
Then client sends actual authentication message described below. 
byte SSH_MSG_USERAUTH_REQUEST
string user name
string service name
string ""publickey""
boolean TRUE
string public key algorithm name
string public key to be used for authentication
string signature :This extra than first message
Now I can see first message (without signature) contains publickey blob. 
Should I verify the blob in first message or I should always skip that and do verification only during actual authentication message ?
I'm asking this because I have implemented my code like it does verification on both messages. But whenever i'm trying test against OpenSSH, it fails on first message for authentication but always get passed with second message. However i have debugged and found out OpenSSH is not sending same publickey blob in both message. so my question is why OpenSSH is doing so ? 
Is OpenSSH is properly following RFC then seems like i should skip verifying publickey blob in first message. if i do that , am i not breaking the RFC ? doing that is right or not ?
Please help me to resolve this query. 
Please let me know if more information is required. 
Thanks in advance. 
","> Now I can see first message (without signature) contains publickey blob. 
> Should I verify the blob in first message or I should always skip that and
> do verification only during actual authentication message ?

It is not clear what you mean ""verify"" for the first message,
but, for that message, sshd will just check if the given publickey blob exists in ~/.ssh/authorized_keys file.  If it exists in that file, ssh client will receive SSH_MSG_USERAUTH_PK_OK .
> However i have debugged and found out OpenSSH is not sending same publickey
> blob in both message. so my question is why OpenSSH is doing so ?

I had implemented a ssh client in Java from scratch, but I had not recognized such OpenSSH behaviors.
","634","<ssh><public-key-encryption><ssh-keys><public-key>","0","0","1","2013-06-04 12:19:24","","0","","","","","2013-06-04 10:52:28",""
"14198775","Why are these Botan public keys so similar?","I am using Botan to create public/private ECDSA keypairs.  The public keys that are generated (even on different machines using this code) are very similar... too similar to consider safe I would think.  Here is an example of two runs:
-----BEGIN PUBLIC KEY-----  
MIIBEzCB7AYHKoZIzj0CATCB4AIBATAsBgcqhkjOPQEBAiEA////////////////
/////////////////////v///C8wRAQgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAEIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHBEEEeb5m
fvncu6xVoGKVzocLBwKb/NstzijZWfKBWxb4F5hIOtp3JqPEZV2k+/wOEQio/Re0
SKaFVBmcR9CP+xDUuAIhAP////////////////////66rtzmr0igO7/SXozQNkFB
AgEBAyIAAneDBKm4ubKbv0hxgzhkh0oAI8WKFTs1Hz/Qqyl6qxzD  
-----END PUBLIC KEY-----

-----BEGIN PUBLIC KEY-----  
MIIBEzCB7AYHKoZIzj0CATCB4AIBATAsBgcqhkjOPQEBAiEA////////////////
/////////////////////v///C8wRAQgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAEIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHBEEEeb5m
fvncu6xVoGKVzocLBwKb/NstzijZWfKBWxb4F5hIOtp3JqPEZV2k+/wOEQio/Re0
SKaFVBmcR9CP+xDUuAIhAP////////////////////66rtzmr0igO7/SXozQNkFB
AgEBAyIAAtQr5BPT04pk/Ror6uIGRqEKeB8dwIteR8p/r+Nl7hql  
-----END PUBLIC KEY-----

I am using X509 encoding to encode the public key.  Here's the code to generate the ECDSA keys:
LibraryInitializer init;
AutoSeeded_RNG rng;
EC_Group ecGroup(""secp256k1"");
ECDSA_PrivateKey key(rng, ecGroup);

Why am I generating such similar public keys?  And am I right in assuming that isn't ""safe"" if multiple users were to use this code to generate their own keys?

UPDATE:
The answer below seems correct. I emailed the creator of XCA, Christian Hohnstaedt, to probe a little further into how XCA generates this public key and what it is. He replied that it is the EC_POINT and is obtained by using the command 
openssl ec -pubin -noout -text

Plugging in the X509 PEM encoded public keys indeed reveals different public EC Points.  It should be noted (for other newbs like me) that the public EC Points in the answer do no good for another party on their own - the other party needs to know which EC Group is being used, and that's why the X509 PEM encoding is much more helpful than just an EC Point.
","The actual public keys from these are:
02:77:83:04:A9:B8:B9:B2:9B:BF:48:71:83:38:64:87
4A:00:23:C5:8A:15:3B:35:1F:3F:D0:AB:29:7A:AB:1C
C3 

and
02:D4:2B:E4:13:D3:D3:8A:64:FD:1A:2B:EA:E2:06:46
A1:0A:78:1F:1D:C0:8B:5E:47:CA:7F:AF:E3:65:EE:1A
A5

These are not the same, so there is no apparent reason to worry on that front. The data that is the same is the key meta-data and encoding bumf (which you would expect to be the same for identical format keys).
Values obtained by importing into xca (linux). There are better tools for inspecting DER encoded data, but I couldn't find any easily.
","626","<security><public-key-encryption><x509><botan><ecdsa>","3","3","1","2013-01-09 21:33:21","14205433","4","","515412","","2013-01-09 21:33:21","2013-01-07 15:22:02",""
"44680703","RandomNumberGenerator requirement during RSA encryption and decryption?","I'm trying to encrypt a message with a public key and decrypt the cipher with the private key using crypto++ like this in the shell:
openssl rsautl -encrypt -inkey id_rsa.pub.pem -pubin -in message -out message.enc

and
openssl rsautl -decrypt -inkey id_rsa.pem -in message.enc -out message.dec

Encryption/Decryption is done in separate applications. I started with the example from https://www.cryptopp.com/wiki/RSA_Cryptography.
My code:
std::string publicEncrypt(std::string const& plain) {
    auto cipher = std::string{};
    CryptoPP::RSAES_OAEP_SHA_Encryptor e(getPublicKey());
    CryptoPP::StringSource(plain, true,
        new CryptoPP::PK_EncryptorFilter(CryptoPP::NullRNG(), e,
                new CryptoPP::StringSink(cipher)));
   return cipher;
}

std::string privateDecrypt(std::string const& cipher) {
    auto decrypted = std::string{};
    CryptoPP::RSAES_OAEP_SHA_Decryptor d(getPrivateKey());
    CryptoPP::StringSource(cipher, true,
        new CryptoPP::PK_DecryptorFilter(CryptoPP::NullRNG(), d,
                new CryptoPP::StringSink(decrypted)));
    return decrypted;
}

My questions: 

Why is a random number generator (RNG) needed for EncryptorFilter/DecryptorFilter?
The RNG has to be the same for encryption/decription, right? So, how to share between processes?

Using the NullRNG() as recommended by https://stackoverflow.com/users/608639/jww in Unable to do RSA Encrption/Decryption using Crypto++ (isValidCoding is false) leads to 
std::exception NullRNG: NullRNG should only be passed to functions that don't need to generate random bytes.

I guess I fundamentally miss something. Thanks for hints and advices.
If I use this code in a unit test with a global RNG, everything works fine.
","
Why is a random number generator (RNG) needed for EncryptorFilter/DecryptorFilter?

The signing and verification classes are abstract interfaces setup in cryptlib.h. Some cryptosystems use them, others do not. A class will specialize and can forgo using a generator. Sometimes a class does not need a generator for one of the operations. NullRNG can be used if not needed.
The reason RSA needs a RNG during public key operations is message padding. Padding is often part of the message formatting function. As @PuzzlePalace pointed out, OAEP padding is randomized and not deterministic.
The reason RSA needs a RNG during private key operations is blinding. For RSA and other RSA-like schemes (like Rabin-Williams), blinding is just a multiplication by a random value to mask the inversion by the priavte key to recover the original value. Later, after signing or decryption, the blinding value is removed and the result of the operation remains.
Related, a reason DSA or ECDSA would not need a RNG during private key operations is RFC 6979, Deterministic Usage of the Digital Signature Algorithm (DSA) and Elliptic Curve Digital Signature Algorithm (ECDSA). Deterministic signatures don't use randomized formatting or randomized k's.
Another reason a RNG is needed for public key and private key operations is validation checks on the key. For example, a key might be checked to ensure a particular constraint holds, like its prime or it has a particular Jacobi symbol.


The RNG has to be the same for encryption/decryption, right? So, how to share between processes?

No, the generators can be different. The only requirements is they produce a random stream for some reasonable definition of what it means to be ""random"". Without splitting too many hairs, it means the generator produces a uniform distribution.
You can find more reading on Crypto++ generators at RandomNumberGenerator on the wiki.


If I use this code in a unit test with a global RNG, everything works fine.

One quick word of caution... GlobalRNG is part of the Test namespace. It is defined in test.cpp : 115:
NAMESPACE_BEGIN(CryptoPP)
NAMESPACE_BEGIN(Test)

ANONYMOUS_NAMESPACE_BEGIN
OFB_Mode<AES>::Encryption s_globalRNG;
NAMESPACE_END

RandomNumberGenerator & GlobalRNG()
{
    return dynamic_cast<RandomNumberGenerator&>(s_globalRNG);
}

NAMESPACE_END  // Test
NAMESPACE_END  // CryptoPP

GlobalRNG is a deterministic generator and its not part of the library proper. Your code will fail to compile in the field if you depend on it.
Use one of the other generators discussed at RandomNumberGenerator on the wiki. AutoSeededRandomPool is a good choice.


Using the NullRNG() as recommended by https://stackoverflow.com/users/608639/jww in Unable to do RSA
  Encrption/Decryption using Crypto++ (isValidCoding is false) leads to
std::exception NullRNG: NullRNG should only be passed to functions that don't need to generate random bytes.


That information is incorrect. I need to fix it. Thanks.

Interestingly (in a morbid sort of way), Crypto++ took CVE-2015-2141 due to blinding in Rabin-Williams. The blinding value needed to be a quadratic residue; otherwise an attacker could prepare special messages to reveal the private key.
The full paper by Evgeny Sidorov is available at Breaking the Rabin-Williams digital signature system implementation in the Crypto++ library. Here's what the new and improved inverse function looks like after fixing Sidorov's attack (from rw.cpp):
ModularArithmetic modn(m_n), modp(m_p), modq(m_q);
Integer r, rInv;

do
{
    // Do this in a loop for people using small numbers for testing
    r.Randomize(rng, Integer::One(), m_n - Integer::One());
    // Fix for CVE-2015-2141. Thanks to Evgeny Sidorov for reporting.
    // Squaring to satisfy Jacobi requirements suggested by Jean-Pierre Munch.
    r = modn.Square(r);
    rInv = modn.MultiplicativeInverse(r);
} while (rInv.IsZero());

If you read Section 6 of Sidorov's paper, he suggests generating a random r, and then checking the Jacobi symbol of r to ensure its a quadratic residue. If it was not a QR, then try a new random r. The triage used the method, but it showed the scheme slowed down considerably because a random r satisfies the condition with probability 1/16.
However, we knew squaring r ensured we satisfied Jacobi on the first try because r2 mod n was always a quadratic residue. The squaring/multiplication only takes log (exp) (not n log (n)), so it turned out to be a significant speedup over trial and error. Before we released the next version of the library, we switched to the squaring method.
","623","<c++><rsa><public-key-encryption><crypto++>","4","3","1","2017-06-23 18:23:40","","3","1","608639","","2017-06-22 03:03:06","2017-06-21 15:43:41",""
"45957207","Android key pair generation in format with -----BEGIN PUBLIC KEY----- and ending with -----END PUBLIC KEY-----","I am generating my keypair like this:
 KeyPair kp = null;
 KeyPairGenerator kpg = KeyPairGenerator.getInstance(""RSA"");
 kpg.initialize(2048);
 kp = kpg.generateKeyPair();

and I get my public key like this:
    PublicKey publicKey = kp.getPublic();
    byte[] publicKeyBytes = publicKey.getEncoded();
    String publicKeyEncoded = new String(Base64.encode(publicKeyBytes, Base64.DEFAULT));

What I get in return is perfectly fine key, but the server is accepting keys in the format in which I need to have starting and ending tags

-----BEGIN PUBLIC KEY-----
     -----END PUBLIC KEY-----

Should I add these tags myself in the encoded key or there is some method/format in Java that gives me the key in the following format?
","Post the next answer because the headline and footline strings fails when these don't have the right characters:
public class KeyManager {

    public static final String TAG = KeyManager.class.getSimpleName();

    public static String getPublicKey(){
        KeyPair kp = generateRSAKeys();
        assert kp != null;
        PublicKey publicKey = kp.getPublic();
        String key = encodeKey(publicKey.getEncoded());
        return addHeaders(key);  // --> ADDED HEADERS FOR SERVER COMPATIBILITY
    }

    private static String getPrivateKey(){
        KeyPair kp = generateRSAKeys();
        assert kp != null;
        PrivateKey privateKey = kp.getPrivate();
        return encodeKey(privateKey.getEncoded());
    }

    private static KeyPair generateRSAKeys() {
        try {
            KeyPairGenerator kpg = KeyPairGenerator.getInstance(""RSA"");
            kpg.initialize(2048);
            return kpg.generateKeyPair();

        } catch (NoSuchAlgorithmException e) {
            Log.e(TAG,""[ENCRYPT] NoSuchAlgorithmException error: "");
            e.printStackTrace();
            return null;

        } catch (Exception e) {
            Log.e(TAG,""[ENCRYPT] generateRSAKeys error: "");
            e.printStackTrace();
            return null;
        }
    }

    private static String addHeaders(String key){
        String headline = ""-----BEGIN PUBLIC KEY-----\n"";
        String footline = ""-----END PUBLIC KEY-----\n"";
        return headline+key+footline;
    }

    private static String encodeKey(byte[] keyBytes) {
        return new String(Base64.encode(keyBytes, Base64.DEFAULT));
    }
}

","621","<java><android><public-key-encryption>","1","0","1","2019-03-28 11:37:03","","4","","","","","2017-08-30 09:52:19",""
"35298470","How to gpg encrypt with ssh public key?","I have a public key in a file called key.pub, and the contents look like:
ssh-rsa AAAAB...<snip>...t+f klahnakoski

I would like to to use it to encrypt a file with gpg.  What is the sequence of shell commands required?
I imagine the sequence looks something like:

convert key to gpg-friendly format
invent some credentials to sign key with
invent a user to facilitate adding key to keyring
perform the encryption

Thank you!
","Probably ssh-vault could give you some ideas, it follows the same principle of PGP and using the public ssh keys to encrypt the password only.
","620","<ssh><public-key-encryption><gnupg>","1","0","1","2017-03-11 19:52:07","","1","","5880389","","2016-02-09 19:29:50","2016-02-09 17:34:48",""
"23114808","OpenSSL Encryption of Session Key","I am writing a method that encrypts session keys. It needs to do this such that the key can be decrypted by a different program that has been tested successfully. The decryption program cannot change. Where I am stuck is on getting my encryption to work in a way that it aligns with the decryption routine.
Let me give the decryption routine first. Remember, this cannot change:
public Boolean decryptSessionKey() {

    // first, base64 decode the session key
    String sslString = ""openssl base64 -d -in enc_sesskey -out temp"";

    try {
        Process p = Runtime.getRuntime().exec(sslString);
    } catch (IOException e2) {
        e2.printStackTrace();
    }

    // now we can decrypt it
    try {
        sslString = ""openssl rsautl -in temp -inkey privkey.pem -decrypt"";
        Process p = Runtime.getRuntime().exec(sslString);   
        BufferedReader stdInput = new BufferedReader(new InputStreamReader(p.getInputStream()));

        try {
            String s;
            while ((s = stdInput.readLine()) != null) {           
                decrypted_session_password = s;
                writeToFile(decrypted_sesskey, s);
            }
            return true;

        } catch (Exception e) {
            return false;
        }
    } catch (IOException e1) {
        return false;
    } catch (Exception e) {
        return false;
    }
}

Here is the encryption routine that I am writing. I yields base64 encoded text, but it is ultimately not decryptable. It's worth noting that I have verified that the decryption routine correctly picks up the results of the encryption routine (no handshake problems between the two).
public Boolean encryptSessionKey(Cert receiver_cert) {

    String sslString = 
        ""openssl rsautl base64 -in sesskey -out temp -inkey cert.pem -encrypt -certin"";

    // run this openssl encryption. Note that it will not yet be base64 encoded
    try {
        Process p = Runtime.getRuntime().exec(sslString);
    } catch (IOException e2) {
        e2.printStackTrace();
    }

    // now we base64-encode the encrypted file
    sslString = ""openssl base64 -in temp -out enc_sesskey""; 

    try {
        Process p = Runtime.getRuntime().exec(sslString);   
    } catch (IOException e1) {return false;
    } catch (Exception e) {return false;
    }

    return true;
}

I'm really stuck. Any help is appreciated. Thank you.
","RSA encryption with PKCS padding and public key acquired from certificate:
openssl rsautl -encrypt -in sesskey -inkey cert.pem -certin -out temp
openssl base64 -e -in temp -out enc_sesskey

RSA decryption with PKCS padding and private key:
openssl base64 -d -in enc_sesskey -out temp
openssl rsautl -decrypt -in temp -inkey privkey.pem -out sesskey2

Tested and confirmed to be OK because content of the ""sesskey"" file is the same as content of the ""sesskey2"" file.
","620","<java><openssl><public-key-encryption>","1","1","1","2014-04-16 16:51:46","23115523","1","0","","","","2014-04-16 16:14:09",""
"50031789","Bouncy Castle CMS public key encryption","I'm following the example here: http://www.baeldung.com/java-bouncy-castle
And I've got a couple of questions:
public static byte[] encryptData(byte[] data,
  X509Certificate encryptionCertificate)
  throws CertificateEncodingException, CMSException, IOException {

    byte[] encryptedData = null;
    if (null != data && null != encryptionCertificate) {
        CMSEnvelopedDataGenerator cmsEnvelopedDataGenerator
          = new CMSEnvelopedDataGenerator();

        JceKeyTransRecipientInfoGenerator jceKey 
          = new JceKeyTransRecipientInfoGenerator(encryptionCertificate);
        cmsEnvelopedDataGenerator.addRecipientInfoGenerator(transKeyGen);
        CMSTypedData msg = new CMSProcessableByteArray(data);
        OutputEncryptor encryptor
          = new JceCMSContentEncryptorBuilder(CMSAlgorithm.AES128_CBC)
          .setProvider(""BC"").build();
        CMSEnvelopedData cmsEnvelopedData = cmsEnvelopedDataGenerator
          .generate(msg,encryptor);
        encryptedData = cmsEnvelopedData.getEncoded();
    }
    return encryptedData;
}

Applying this to my real world scenario, I only have an RSA public key for the recipient and not the whole X509Certificate. I poked around a bit, but I'm not sure how I could make that work. Is it possible?
The other thing is that I see the JceCMSEncryptorBuilder is takes an ASN1ObjectIdentifier. We're currently using doing something like this:
KeyGenerator cryptKeyGenerator = KeyGenerator.getInstance(""AES"", ""BC"");
cryptKeyGenerator.init(256);
Key encryptionKey = cryptKeyGenerator.generateKey();
Cipher symmetricCipher = Cipher.getInstance(""AES/CTS/NoPadding"", ""BC"");
symmetricCipher.init(Cipher.ENCRYPT_MODE, encryptionKey, new IvParameterSpec(ivBytes));

and in the CMSAlgorithm class I don't see any CTS option. Am I missing something or is there a way to still use CTS? 
","
I only have an RSA public key for the recipient and not the whole X509Certificate

The KeyTransRecipientInfo structure of CMS EnvelopedData can use the SubjectKeyIdentifier value sometimes present in the X.509/PKIX certificate as an extension and Bouncy has an overloaded ctor for this case. Since you don't have the cert, you'll have to find out what method was used to calculate the value in the cert(s?) if the recipient(s) will use a cert, or try different guesses until you find one that works, or if you control the recipient(s) just choose some value(s) that it(they) will accept. 
org.bouncycastle.cert.X509ExtensionUtils and its two subclasses provide methods for computing the two standard schemes, but I find them no more convenient than doing it directly.

We're currently using ... AES/CTS/NoPadding ... and in the CMSAlgorithm class I don't see any CTS option

It's not just what's in CMSAlgorithm. There are two relevant factors:

any specific cipher (in JCA terms, transformation) used in CMS/PKCS7 EnvelopedData must be identified by an OID and conditionally parameters
the cipher used for a given message must be supported by the sender and the recipient or all recipients.

org.bouncycastle.cms.CMSAlgorithm is just a handy compendium of ciphers and some other things like keyagreements that both have standardized OIDs and are implemented by BC, which latter is actually controlled by org.bouncycastle.cms.jcajce.EnvelopedDataHelper or the bc-native equivalent which as you can see support only CBC mode for the supported block ciphers. (Both also support RC4 but as a stream cipher it does not use any mode. Plus RC4 is now very unpopular.) 
I don't recall ever seeing any standardized OID for a cipher in CTS mode. If that's right, you'd have to allocate one, and since no one else will implement that OID your messages will not be interoperable with anybody. If you can find a standard OID (or at least AlgId) that your peer(s) implement, for BC you'll have to create your own class conforming to (interface) OutputEncryptor, which isn't all that complicated if you look at the sources above given that you have either a provider or bc-native implementation of the underlying cipher.
","614","<java><encryption><bouncycastle><public-key-encryption>","0","1","1","2018-04-26 09:17:18","","0","","","","","2018-04-25 21:44:24",""
"48208432","How to decrypt RSA encrypted string in c# while it was encrypted in GO language. Error occurred while decoding OAEP padding","I have an application running on c# and another server application in go. I need to implement secure communication using rsa.
What i'am doing is I've initialized the RSA provider in my C# application and generated public key to extract Modulus and Exponent. Then concatenated the modulus (Hexadecimal) and exponent (int) and converted this string to Base64 string, send it to a GO endpoint. 
Here is C# code snippet
public string ConvertToPublicKey()
    {
        CspParameters rsaParameters = GetCspParameters();
        RSACryptoServiceProvider provider = newRSACryptoServiceProvider(rsaParameters);
        string paramsXml = RsaProvider.ToXmlString(false);

        XDocument xDocument = XDocument.Parse(paramsXml);
        string modulus = xDocument.Descendants().FirstOrDefault(x => x.Name == ""Modulus"")?.Value ?? string.Empty;
        string exponent = xDocument.Descendants().FirstOrDefault(x => x.Name == ""Exponent"")?.Value ?? string.Empty;
        byte[] base64BytesOfModulus = Convert.FromBase64String(modulus);
        string hexaDecimalofModulus = BitConverter.ToString(base64BytesOfModulus).Replace(""-"", string.Empty);
        byte[] base64BytesOfExponent = Convert.FromBase64String(exponent);
        string hexadecimalOfExponent = BitConverter.ToString(base64BytesOfExponent).Replace(""-"", string.Empty);
        int intOfExponent = Convert.ToInt32(hexadecimalOfExponent, 16);
        byte[] publicKey = Encoding.UTF8.GetBytes($""{hexaDecimalofModulus};{intOfExponent}"");
        return Convert.ToBase64String(publicKey);
    }

    private static CspParameters GetCspParameters()
    {
        const string containerName = ""KeyContainer"";
        return new CspParameters
        {
            KeyContainerName = containerName,
            Flags = CspProviderFlags.UseMachineKeyStore
        };
    }

At Go endpoint I received public key and modulus correctly. Then I encrypted the message using public key and sent it back to c# application in response after converting encrypted message byte[] to base64.
Here is GO code snippet
func GetLicenseInfo(responseWriter http.ResponseWriter,request*http.Request) 
    {
    encryptionKey := request.Header.Get(""Authorization"")
    var decodedStringBytes, errors = b64.StdEncoding.DecodeString(encryptionKey)
    if errors == nil {
        var decodedString = string(decodedStringBytes)
        result := strings.Split(decodedString, "";"")
        modulus := new(big.Int)
        modulus.SetString(result[0], 16)
        exponent, exponentErrors := strconv.Atoi(result[1])
        if exponentErrors == nil {
            var someInfo = utils.GetInfo()
            var InfoInJson = ToJson(someInfo)
            publicKey := &rsa.PublicKey{N: modulus, E: exponent}
            var encryptedMessage, err = rsa.EncryptOAEP(sha256.New(),rand.Reader, publicKey,[]byte(InfoInJson), []byte(""""))
            var response = b64.StdEncoding.EncodeToString(encryptedMessage)
            if err == nil {
                json.NewEncoder(responseWriter).Encode(response)
            }
        }

    }
}

func ToJson(model InfoModel) string {
    InfoInJson, errors := json.Marshal(model)
    if errors != nil {
        panic(""An error occurred while serializing the response"")
    }
    return string(InfoInJson)
}

When i received the response back in Base64 string i converted it to Byte[] and tried decrypting that with same instance of RSACryptoServiceProvider then it throws the following exception

Error occurred while decoding OAEP padding.

any help?
UPDATE
for example here is the base64 string that i received in GO 

QUQ2NDlFRTlCQTA3Q0IxNEI1MTNDMzczQzBBMjNBOEQyMDI5MkVGQTBFMjgyNUIyMEEyMzM1MEE3OTUyNjgyQ0Y3MEFBQjJBMTZGMzQyNTM4MkU2RDZBRjU5M0IxRTI2MTE0OEIyQkFFRTY3MUVDMTQ1NDk1NjBDRkNEQUNCQzI3RUUxNDRFODZDQUI4RDBDOUY2OENBNTUwNUMxQjZGQkVBQjQ0MTlBMjg3RDhBRjgxRDUyREY3MEM0RDZDQTA5MkREMzk5Q0NEODU5Q0FGQzAzQ0JEQ0JBQzgwOTg3NDY0NThBMkY4NEREOTc1QjU5QTJBMUNBNzQxQTBDNkQ2RDs2NTUzNw==

and here is what my GO app sent back

QuWpWdEPSJR+l9UJTkh+heJJ/NpPwhz/hVVu1VdKYdz37YGWWdKTj7Fc5lZ3A8p1WjtC4F+yieZCz0tEatCqTpRmm9g6Oioyjbtr9qGTxO/PE+GA33YyBe6nmMRe674SPePx/fg6l3nnfSZ4/+iLCV4bNgyNqFHCaXc7H4Snms8=

UPDATE 2
I've updated the code snippet and included the data types and here is the part that dscrypts the content received from GO end point
public byte[] Decrypt(byte[] encryptedData, RSAParameters rsaParameters)
    {
        RsaProvider.ImportParameters(rsaParameters);
        return RsaProvider.Decrypt(encryptedData, true);
    }

i receive a base64 string then i convert to byte[] using this 
byte[] b = Convert.FromBase64String(responseString); byte[] decryptedBytes=crypto.Decrypt(b, crypto.RsaProvider.ExportParameters(false));

crypto is the instance of the class that contains decryption logic,instacne of RSACryptoServiceProvider and that method(ConvertToPublicKey) given above returning the public key
","In go you have
var encryptedMessage, err = rsa.EncryptOAEP(sha256.New(), ...

Which I'll go ahead and assume is OAEP with SHA-2-256.
In C# you have
return RsaProvider.Decrypt(encryptedData, true);

Which is OAEP with SHA-1.
You need to abandon RSACryptoServiceProvider.  If you switch to RSACng you can then decrypt it with
using (RSA rsa = new RSACng())
{
    rsa.ImportParameters(rsaParameters);
    return rsa.Decrypt(encryptedData, RSAEncryptionPadding.OaepSHA256);
}


And while I'm here:
In ConvertToPublicKey you export the XML, parse the XML, and turn it into byte arrays.  Why not just call ExportParameters(false) and extract the Modulus and Exponent byte arrays directly?
","610","<c#><go><encryption><rsa><public-key-encryption>","1","2","2","2018-01-11 21:23:06","48216013","9","0","5165332","","2018-01-11 20:21:08","2018-01-11 13:39:25",""
"48208432","How to decrypt RSA encrypted string in c# while it was encrypted in GO language. Error occurred while decoding OAEP padding","I have an application running on c# and another server application in go. I need to implement secure communication using rsa.
What i'am doing is I've initialized the RSA provider in my C# application and generated public key to extract Modulus and Exponent. Then concatenated the modulus (Hexadecimal) and exponent (int) and converted this string to Base64 string, send it to a GO endpoint. 
Here is C# code snippet
public string ConvertToPublicKey()
    {
        CspParameters rsaParameters = GetCspParameters();
        RSACryptoServiceProvider provider = newRSACryptoServiceProvider(rsaParameters);
        string paramsXml = RsaProvider.ToXmlString(false);

        XDocument xDocument = XDocument.Parse(paramsXml);
        string modulus = xDocument.Descendants().FirstOrDefault(x => x.Name == ""Modulus"")?.Value ?? string.Empty;
        string exponent = xDocument.Descendants().FirstOrDefault(x => x.Name == ""Exponent"")?.Value ?? string.Empty;
        byte[] base64BytesOfModulus = Convert.FromBase64String(modulus);
        string hexaDecimalofModulus = BitConverter.ToString(base64BytesOfModulus).Replace(""-"", string.Empty);
        byte[] base64BytesOfExponent = Convert.FromBase64String(exponent);
        string hexadecimalOfExponent = BitConverter.ToString(base64BytesOfExponent).Replace(""-"", string.Empty);
        int intOfExponent = Convert.ToInt32(hexadecimalOfExponent, 16);
        byte[] publicKey = Encoding.UTF8.GetBytes($""{hexaDecimalofModulus};{intOfExponent}"");
        return Convert.ToBase64String(publicKey);
    }

    private static CspParameters GetCspParameters()
    {
        const string containerName = ""KeyContainer"";
        return new CspParameters
        {
            KeyContainerName = containerName,
            Flags = CspProviderFlags.UseMachineKeyStore
        };
    }

At Go endpoint I received public key and modulus correctly. Then I encrypted the message using public key and sent it back to c# application in response after converting encrypted message byte[] to base64.
Here is GO code snippet
func GetLicenseInfo(responseWriter http.ResponseWriter,request*http.Request) 
    {
    encryptionKey := request.Header.Get(""Authorization"")
    var decodedStringBytes, errors = b64.StdEncoding.DecodeString(encryptionKey)
    if errors == nil {
        var decodedString = string(decodedStringBytes)
        result := strings.Split(decodedString, "";"")
        modulus := new(big.Int)
        modulus.SetString(result[0], 16)
        exponent, exponentErrors := strconv.Atoi(result[1])
        if exponentErrors == nil {
            var someInfo = utils.GetInfo()
            var InfoInJson = ToJson(someInfo)
            publicKey := &rsa.PublicKey{N: modulus, E: exponent}
            var encryptedMessage, err = rsa.EncryptOAEP(sha256.New(),rand.Reader, publicKey,[]byte(InfoInJson), []byte(""""))
            var response = b64.StdEncoding.EncodeToString(encryptedMessage)
            if err == nil {
                json.NewEncoder(responseWriter).Encode(response)
            }
        }

    }
}

func ToJson(model InfoModel) string {
    InfoInJson, errors := json.Marshal(model)
    if errors != nil {
        panic(""An error occurred while serializing the response"")
    }
    return string(InfoInJson)
}

When i received the response back in Base64 string i converted it to Byte[] and tried decrypting that with same instance of RSACryptoServiceProvider then it throws the following exception

Error occurred while decoding OAEP padding.

any help?
UPDATE
for example here is the base64 string that i received in GO 

QUQ2NDlFRTlCQTA3Q0IxNEI1MTNDMzczQzBBMjNBOEQyMDI5MkVGQTBFMjgyNUIyMEEyMzM1MEE3OTUyNjgyQ0Y3MEFBQjJBMTZGMzQyNTM4MkU2RDZBRjU5M0IxRTI2MTE0OEIyQkFFRTY3MUVDMTQ1NDk1NjBDRkNEQUNCQzI3RUUxNDRFODZDQUI4RDBDOUY2OENBNTUwNUMxQjZGQkVBQjQ0MTlBMjg3RDhBRjgxRDUyREY3MEM0RDZDQTA5MkREMzk5Q0NEODU5Q0FGQzAzQ0JEQ0JBQzgwOTg3NDY0NThBMkY4NEREOTc1QjU5QTJBMUNBNzQxQTBDNkQ2RDs2NTUzNw==

and here is what my GO app sent back

QuWpWdEPSJR+l9UJTkh+heJJ/NpPwhz/hVVu1VdKYdz37YGWWdKTj7Fc5lZ3A8p1WjtC4F+yieZCz0tEatCqTpRmm9g6Oioyjbtr9qGTxO/PE+GA33YyBe6nmMRe674SPePx/fg6l3nnfSZ4/+iLCV4bNgyNqFHCaXc7H4Snms8=

UPDATE 2
I've updated the code snippet and included the data types and here is the part that dscrypts the content received from GO end point
public byte[] Decrypt(byte[] encryptedData, RSAParameters rsaParameters)
    {
        RsaProvider.ImportParameters(rsaParameters);
        return RsaProvider.Decrypt(encryptedData, true);
    }

i receive a base64 string then i convert to byte[] using this 
byte[] b = Convert.FromBase64String(responseString); byte[] decryptedBytes=crypto.Decrypt(b, crypto.RsaProvider.ExportParameters(false));

crypto is the instance of the class that contains decryption logic,instacne of RSACryptoServiceProvider and that method(ConvertToPublicKey) given above returning the public key
","After addressing comments by @bartonjs I've also changed response response from go to 
var encryptedMessage, err = rsa.EncryptOAEP(sha256.New(), rand.Reader, publicKey, []byte(licenseInformationJson), []byte(""""))
if err == nil {
    responseWriter.Write([]byte(encryptedMessage))
}

Notice []byte(encryptedMessage) byte stream sent from go to c# is slightly changed because encryptedMessage is []unint8. so you need to typecast encryptedMessage to []byte so that values are correctly mapped in c#.
","610","<c#><go><encryption><rsa><public-key-encryption>","1","1","2","2018-01-11 21:23:06","48216013","9","0","5165332","","2018-01-11 20:21:08","2018-01-11 13:39:25",""
"41801956","Mock a private/public key in a unit test?","Currently I have a code base that uses openssl_public_encrypt/openssl_private_decrypt. Now I would like to test my encryption and decryption methods with a unit test, since these are pretty vital.
To really test them I think I would like to simply mock the private and public keys. Is this viable and how would I go about mocking these keys without putting any sensitive information in my code base?
Of course I could circumvent the openssl public/private part and mock the outcome of that but this logic also throws some exceptions, etc. which I would like to test.
","If you have PHP's OpenSSL extension installed and enabled then you can generate your public/private key pair with OpenSSL Functions:
openssl_pkey_new, for the private key with:
$private_key = openssl_pkey_new([
    'digest_alg' => 'sha256',
    'private_key_bits' => 1024,
    'private_key_type' => OPENSSL_KEYTYPE_RSA
]);

Then pass the private key to openssl_pkey_get_details to get details about the key including the public key:
$details = openssl_pkey_get_details($private_key);
$public_key = $details['key'];

","610","<php><phpunit><public-key-encryption><php-openssl>","3","2","1","2017-02-26 06:12:44","42465358","1","","608639","","2017-01-23 08:50:15","2017-01-23 08:31:29",""
"16179376","decryption requires private key and passphrase","Is it possible to require BOTH a private key and a passphrase in order to decrypt a file using gpg? I understand I can encrypt the file twice once using the public key. Then encrypt that file with the passphrase. Is there an option in gpg that will do this in one step? Looking through the man file I only was able to find a key or passphrase. Any insight would be appreciated.
","
I understand I can encrypt the file twice once using the public key.
  Then encrypt that file with the passphrase. Is there an option in gpg
  that will do this in one step?

Nope. There is no such option.
(You can however PGP-encrypt a file with a symmetric passphrase while at the same time encrypting it to multiple recipients. This basically results in multiple copies of the session key [which is used to symmetrically encrypt the message] being encrypted via different means [potentially various public keys along with a shared passphrase]).
","609","<linux><public-key-encryption><gnupg><passphrase>","0","1","1","2013-10-10 23:01:01","16182443","2","","695343","","2013-10-10 23:01:01","2013-04-23 21:19:29","2013-10-11 08:45:03"
"36206897","JWT RSA Encryption - Would this be be slow with many requests?","I am considering using JSON web token with RSA encryption, but I'm worried about this being slow. My logic behind this is that TLS uses RSA encryption to exchange keys, but after that, AES encryption is used because Public/Private key decryption is slow.
","This sounds like you're going in a dangerous direction. There are a few ways you can implement JWT:

HMAC
RSA signing not encryption
ECDSA signing

Neither RSA encryption nor AES is the right tool for the job. You want authentication, not encryption.
I'd recommend HMAC if you want speed. With a SHA2-family hash function; e.g. SHA-256.
","605","<encryption><rsa><jwt><public-key-encryption>","0","2","2","2018-07-31 15:01:16","","0","","4996248","","2016-03-24 18:00:01","2016-03-24 17:57:08",""
"36206897","JWT RSA Encryption - Would this be be slow with many requests?","I am considering using JSON web token with RSA encryption, but I'm worried about this being slow. My logic behind this is that TLS uses RSA encryption to exchange keys, but after that, AES encryption is used because Public/Private key decryption is slow.
","Here's a benchmark from a Go implementation.

BenchmarkHMACSign/HS256-12            500000          3421 ns/op
BenchmarkHMACSign/HS384-12            300000          4014 ns/op
BenchmarkHMACSign/HS512-12            300000          4131 ns/op
BenchmarkHMACCheck/HS256-12           200000          8737 ns/op
BenchmarkHMACCheck/HS384-12           200000          9506 ns/op
BenchmarkHMACCheck/HS512-12           200000          9634 ns/op
BenchmarkRSASign/1024-bit-12            2000        567073 ns/op
BenchmarkRSASign/2048-bit-12             500       2569703 ns/op
BenchmarkRSASign/4096-bit-12             100      14835903 ns/op
BenchmarkRSACheck/1024-bit-12          50000         35438 ns/op
BenchmarkRSACheck/2048-bit-12          20000         75855 ns/op
BenchmarkRSACheck/4096-bit-12          10000        204811 ns/op

","605","<encryption><rsa><jwt><public-key-encryption>","0","1","2","2018-07-31 15:01:16","","0","","4996248","","2016-03-24 18:00:01","2016-03-24 17:57:08",""
"22113859","PKE REST Auth using SHA-1 Hash","I'm designing my first RESTful API and am trying to figure out how I'm going to authenticate API calls. I've worked with the Gengo API (dev docs) in the past and had great luck with it, so admittedly, am basing a lot of my auth design on their algorithm described in that link.
To sum their process up, to create a valid/authenticated API call:

Register for an account with them and generate a public/private key set. Then for each API call:
Obtain the UNIX epoch timestamp that the call is being made at.
Calculate the SHA-1 hash of your timestamp ""against"" your private key.
Make sure that your public key, private key and the calculated hash (above) is present as 3 separate HTTP parameters with every single API call.

At first this was a little confusing to me, but I was able to get authentication working pretty quickly with their API. But I never fully understood why I had to generate this SHA-1 hash, and I had no clue what they were doing on the server-side to actually authenticate my API calls.
Now that I'm writing my own authenticated API, I need to understand these things. So I ask:

What purpose does the timestamp and its derived SHA-1 hash serve? Why is it less secure to just require users send me their public/private keys with each API call?
Is this pubkey + privkey + hashed_timestamp method that Gengo is using a standardized practice for API auth? If so, does it have a name/algorithm? Are there other, equally-secure competitors to it?
I'm confused by the whole HMAC/SHA-1 stuff (see the link above for concrete example). I always thought SHA-1 was a one-way function that turned a string into a unqiue, encoded strinig similar to what MD5 offers. But in that example (see link), it looks like it's passing SHA-1 and the string to some HMAC algorithm. What purpose does this HMAC serve and why does it require 3 arguments (SHA-1, the timestamp and the private key)?
Finally, what do I do with the 3 parameters (pub key, priv key, hashed timestamp) on the server-side to perform authentication? If I was designing a system that only used the pub/priv keys, then I would treat them like a username/password combo and would check the database to see if that combo existed or not. But the hashed timestamp is really throwing me off here.

","
What purpose does the timestamp and its derived SHA-1 hash serve? Why is it less secure to just require users send me their public/private keys with each API call?

To clear any misunderstanding you seem to have up front, the user should never send the private key over the network. The private key is to stay private. It is a secret shared between you and the user. Reread the Gengo link, you'll see that it is only used as a parameter to the HMAC function. It is up to the user to find a way to secure it, but your API does not need it to verify calls.
The timestamp serves two purposes. First it is a piece of data for which you will get both the plaintext and the HMAC. You will be recomputing the HMAC on your side with the private key of the user. If the HMAC checks, it means that not only the timestamp was not tampered with, but also that only someone knowing the private key could have sent it. It provides integrity and authenticity for that piece of data.
If it was a simple SHA1, a attacker could have intercepted the message, changed the timestamp, and recomputed the hash. By using a keyed hash, you ensure that the sender is who you think he is.
The second purpose for the timestamp is to prevent replay attacks. Even if using a keyed hash, the attacker could have captured an old request and send it again, possibly triggering unwanted actions. If your users hash the time and you test it and reject requests that are unreasonably old, you can prevent such replay attacks.  

Is this pubkey + privkey + hashed_timestamp method that Gengo is using a standardized practice for API auth? If so, does it have a name/algorithm? Are there other, equally-secure competitors to it?

Again the privkey is not sent through the pipe. Using HMAC for API authentication is quite common. It is used for Amazon Web Services for example. When used in the Gengo way, the fact that there is seemingly a public/private key pair can be confusing, it is really still symmetric cryptography, and the private key is used as a shared secret.
However I think it is better to include more than just the timestamp in the data that is HMAC'ed. Otherwise an attacker could tamper with other parts of the request. The headers, the HTTP verb, and a hash of the content of the request should be included as well.
Another scheme is to use the private key on client side to sign (encrypt with the private key) a piece of data, so the server only needs to verify it with the public key of the client and needs not know the private key of the client. Embedding a time information is still needed to prevent replays. I do not know much about this scheme, it might be hard to reliably link clients with a given public key in the first place.

What purpose does this
  HMAC serve and why does it require 3 arguments (SHA-1, the timestamp
  and the private key)?

An HMAC is a keyed hash. Consider the simplest form of message authentication: hash(key + message). It was found that this was not secure (see length extension attack) and a nested structure fixes the vulnerability. 
HMAC is a generic name of that structure: hash(k1 + hash(k2 + message)), where k1 and k2 are derived from the actual secret key. So when we do an HMAC we need to pass the name of the actual hash algorithm that will be used (here SHA-1), the message (here, the timestamp), and the secret key.

Finally, what do I do with the 3 parameters (pub key, priv key, hashed
  timestamp) on the server-side to perform authentication? If I was
  designing a system that only used the pub/priv keys, then I would
  treat them like a username/password combo and would check the database
  to see if that combo existed or not. But the hashed timestamp is
  really throwing me off here.

Hopefully clearer by now. You use the public key as an identifier to retrieve the private key. You take the ts header and recompute the HMAC of it with the private key. If it matches with the hmac header sent, the request is authentic. You check the actual timestamp to see if it's not an old request replayed by some attacker. If all checks, the call can go through. I think it's better to embed all the important information in the HMAC, not just a timestamp though.
","603","<api><rest><authentication><public-key-encryption><hmac>","0","0","2","2014-03-10 15:29:04","","0","","","","","2014-03-01 11:38:29",""
"22113859","PKE REST Auth using SHA-1 Hash","I'm designing my first RESTful API and am trying to figure out how I'm going to authenticate API calls. I've worked with the Gengo API (dev docs) in the past and had great luck with it, so admittedly, am basing a lot of my auth design on their algorithm described in that link.
To sum their process up, to create a valid/authenticated API call:

Register for an account with them and generate a public/private key set. Then for each API call:
Obtain the UNIX epoch timestamp that the call is being made at.
Calculate the SHA-1 hash of your timestamp ""against"" your private key.
Make sure that your public key, private key and the calculated hash (above) is present as 3 separate HTTP parameters with every single API call.

At first this was a little confusing to me, but I was able to get authentication working pretty quickly with their API. But I never fully understood why I had to generate this SHA-1 hash, and I had no clue what they were doing on the server-side to actually authenticate my API calls.
Now that I'm writing my own authenticated API, I need to understand these things. So I ask:

What purpose does the timestamp and its derived SHA-1 hash serve? Why is it less secure to just require users send me their public/private keys with each API call?
Is this pubkey + privkey + hashed_timestamp method that Gengo is using a standardized practice for API auth? If so, does it have a name/algorithm? Are there other, equally-secure competitors to it?
I'm confused by the whole HMAC/SHA-1 stuff (see the link above for concrete example). I always thought SHA-1 was a one-way function that turned a string into a unqiue, encoded strinig similar to what MD5 offers. But in that example (see link), it looks like it's passing SHA-1 and the string to some HMAC algorithm. What purpose does this HMAC serve and why does it require 3 arguments (SHA-1, the timestamp and the private key)?
Finally, what do I do with the 3 parameters (pub key, priv key, hashed timestamp) on the server-side to perform authentication? If I was designing a system that only used the pub/priv keys, then I would treat them like a username/password combo and would check the database to see if that combo existed or not. But the hashed timestamp is really throwing me off here.

","You need either public key cryptography or an HMAC, not both.
Let's come back to the timestamp later, and you're confusing authentication with integrity, which we'll also come back to later.
Authentication: in your case this is where the client proves knowledge of some secret to the server. Two common ways to do this are via public key cryptography and using an HMAC.

PKC: before using the service a public/private key pair is generated. The client has the private key; the server has the public key. Important: the private key never leaves the client. In particular, the server does not have access to the private key. To authenticate, the client encrypts some random value N (called a nonce), and sends N and its encrypted form to the server. The server uses the public key to decrypt the encrypted nonce and confirms that it equals the supplied nonce. This proves to the server that the client has the private key.
HMAC: client and server agree a shared secret K beforehand. To authenticate, the client creates a nonce N, computes HMAC(K, N), and sends N and HMAC(K, N) to the server. The server also computes HMAC(K, N) since it knows the shared secret and has received N from the client. If the computed and received HMAC(K, N) values are the same then the server knows that the client has the shared secret K.

The HMAC approach has one significant weakness compared with PKC: if the server is compromised then the attacked gains knowledge of K and can then use that to masquerade as the client.
If using PKC, ideally generate the keypair on the client and send the public key to the server. That way the server never has the private key.
However, unless the communication channel is confidential (e.g. uses SSL/TLS), both approaches have a problem: replay attacks. A passive observer can record the N+encrypted form, or N+HMAC(K,N) and replay them to the server. The server will then think that the observer is a valid client.
Two standard defences are:

Use a time-based nonce.
The server remembers previously-seen nonces, and rejects new requests that use a previously-seen nonce.

That's where the timestamp comes in, and is discussed in more detail here: Should I sign (with a public/private key) a form based authentication (no SSL)?
Integrity: we've proved to the server that we're a valid client, but we haven't provided any protection of the request itself. An attacker could modify our request in flight: we'd authenticate correctly but then execute the attacker's request rather than the client's original request.
To resolve this we need to protect the integrity of the request. We can do this with the same mechanism as above. Rather than just using a nonce (N) or nonce+timestamp, include the entire request in the data been encrypted or hashed. An important consideration here is that encrypted and hashing operate on bytes, not REST requests. You therefore need a reliable way to convert the REST request (i.e. HTTP method, URL, request parameters) into bytes. This is often called ""canonicalisation"": the client and server must both canonicalise the request in exactly the same way, so that they are encrypting/hashing the same bytes given the request.
This whole process is standardised in things like OAuth, e.g.  https://dev.twitter.com/docs/auth/authorizing-request
To answer your specific questions:

The timestamp defends against replay attacks: passive observers can't reply a client's session. The SHA-1 hash is used as a component of the HMAC.
Yes, to a point. But I'd use a fully-fledged implementation of it rather than rolling your own, such as something OAuth-based.
An HMAC is a keyed hash: it's like a standard cryptographic hash (such as SHA-1, except that you also include a shared secret key in the hash. Simply concatenating the key to the data being hashed has cryptographic weaknesses that the HMAC construct avoids. (https://en.wikipedia.org/wiki/HMAC.)
If you're using PKC then you look up the client's public key on the server (based on some client ID, which ist not the client's private key), use that to decrypt the encrypted request, and verify that that request matches the received request. If you're using HMAC then you look up the client's shared secret, canonicalise the request, compute HMAC(K, R) and verify that it matches the received HMAC(K, R). In both cases you must also verify timestamps/nonces to protected against replays.

BUT: rule #1 of crypto: don't roll your own. Use an established mechanism, such as OAuth. You probably also want to use SSL/TLS, which would then also let you use client certificates as a third authentication option. If you used those then you could also rely on SSL/TLS to give you integrity and replay protection. However, implementing SSL/TLS certificate validation correctly seems to fox many developers...
","603","<api><rest><authentication><public-key-encryption><hmac>","0","0","2","2014-03-10 15:29:04","","0","","","","","2014-03-01 11:38:29",""
"45007755","short encryption for integer","I gave a task which encrypts an input integer value, this integer maximum 4 length, however, I'm required to encrypt into an alphanumeric string. Apart from this, the result that i generated from the same value (eg 10) the value have to not same. The most difficult parts is, The encrypted string maximum to only can have 15 length since we have to put it in the query string. It was a difficult task and I tried to ask google and I don't found any solution can help me with this. all the length is too long and doesn't meet the requirement I needed. Any encrypt professional can help me with this?
"," public static string GetUniquePasswordSalt(string password)
{
    string uniqueSaltValue = """";
    Rfc2898DeriveBytes rfc2898 = new Rfc2898DeriveBytes(password, 16);
    uniqueSaltValue = Convert.ToBase64String(rfc2898.Salt);
    return uniqueSaltValue;
}

Out will be ""HB6yY+f5fyOaFFyrKEcPYw=="" for ""01""
Try Rfc2898DeriveBytes 
https://msdn.microsoft.com/en-us/library/system.security.cryptography.rfc2898derivebytes(v=vs.110).aspx
","602","<c#><.net><encryption><public-key-encryption>","-2","-2","3","2017-07-10 13:04:43","","6","","5426330","","2017-07-10 13:04:43","2017-07-10 08:59:06","2017-07-10 12:54:26"
"45007755","short encryption for integer","I gave a task which encrypts an input integer value, this integer maximum 4 length, however, I'm required to encrypt into an alphanumeric string. Apart from this, the result that i generated from the same value (eg 10) the value have to not same. The most difficult parts is, The encrypted string maximum to only can have 15 length since we have to put it in the query string. It was a difficult task and I tried to ask google and I don't found any solution can help me with this. all the length is too long and doesn't meet the requirement I needed. Any encrypt professional can help me with this?
","I assume that you want a function to input a four digit number: [0000 .. 9999] and produce a 15 character alphanumeric output.
You do not make it clear if this function is to be reversible.  If reversibility is not needed, then a one-way hash function will do what you want.  15 hex characters are 60 bits or 15 Base32 characters are 75 bits.  Use a larger size hash function, truncate and convert to hex or Base32.  Base32 gives a wider range of output characters than hex.
For reversibility you will need a Format Preserving Encryption, where the output size is limited to 60 or 75 significant bits.  For 60 bits, use DES as the base cipher as it has a 64 bit block size.  75 bits is more awkward.  AES, at 128 bits, has too large a block size so you might need to write a simple 76 bit Feistel cipher.  That will give you good obscurity, but only middling security.  You do not say how secure this function needs to be. 
","602","<c#><.net><encryption><public-key-encryption>","-2","0","3","2017-07-10 13:04:43","","6","","5426330","","2017-07-10 13:04:43","2017-07-10 08:59:06","2017-07-10 12:54:26"
"45007755","short encryption for integer","I gave a task which encrypts an input integer value, this integer maximum 4 length, however, I'm required to encrypt into an alphanumeric string. Apart from this, the result that i generated from the same value (eg 10) the value have to not same. The most difficult parts is, The encrypted string maximum to only can have 15 length since we have to put it in the query string. It was a difficult task and I tried to ask google and I don't found any solution can help me with this. all the length is too long and doesn't meet the requirement I needed. Any encrypt professional can help me with this?
","Assumptions: ""integer maximum 6 length"" means 6 numeric characters 000000-999999.
Encrypt with a algorithm that has a 8-byte block size and then Base64 encode, that will produce 12 characters of output. 
Append 2 random bytes to the 6 characters of data to make 8-bytes, this will cause up to 2^16 or 65536 different results on encryption of the same value. Encrypt in ECB mode and Base64 encode. That will produce 12 characters of output.
To recover the input decode the Base64 encrypted to data, decrypt that and delete the 2 random bytes.
Possible encryption algorithm include Blowfish, XTEA, DES and others.
Note: For a larger range of different output the 6-digit number could first be converted to a binary representation of 3-bytes allowing 5 random bytes producing 2^40 different outputs for the same 6-digit input.
","602","<c#><.net><encryption><public-key-encryption>","-2","1","3","2017-07-10 13:04:43","","6","","5426330","","2017-07-10 13:04:43","2017-07-10 08:59:06","2017-07-10 12:54:26"
"38447487","Android: initialize PublicKey with key file stored in Assets directory","I'm currently working on RSA encryption and try to encrypt and decrypt using public and private key file stored in assets directory in android project.
Currently, the public key file is in assets/public_key.pem
and I use code below to read the file to get the key.
InputStream is = assetManager.open(stringKey);
String publicKeyString= """";
BufferedReader reader = new BufferedReader(new InputStreamReader(is));
String line;

while (( line= reader.readLine()) != null) {
    publicKeyString += line;
}

is.close();

Then I get the publicKeyString value. Then I tried to initialize a PublicKey object with publicKeyString using following code.
PublicKey pubKey = null;
byte[] publicBytes = Base64.decode(publicKeyString, Base64.DEFAULT);
X509EncodedKeySpec keySpec = new X509EncodedKeySpec(publicBytes);
KeyFactory keyFactory = KeyFactory.getInstance(""RSA"");
pubKey = keyFactory.generatePublic(keySpec);

However I got following exception
java.security.spec.InvalidKeySpecException: java.lang.RuntimeException: error:0D0680A8:asn1 encoding routines:ASN1_CHECK_TLEN:wrong tag

I'm not sure if there is something wrong with public key file itself or the code that i use. Any idea?
","This is and old question, but in case someone is facing this issue, the answer is given in this post.
Summarizing: 

X509EncodedKeySpec expects DER-encoded data, not PEM-encoded. Your
  code will work fine if you simply discard the ""BEGIN"" and ""END"" blocks
  from the public key content

","600","<java><android><encryption><public-key-encryption><private-key>","1","0","1","2018-03-19 13:32:20","","0","1","6225661","","2016-07-19 04:22:29","2016-07-18 23:40:35",""
"4248226","X509Certificate validation with SerialNumber or Public Key","Can anyone offer some advice on validating a X509Certificate. I am already checking to see if the cert is signed by a trusted root, however I also want to check that the certificate is issued to a known party.
What is the best property to use for this? I'm thinking along the lines of SerialNumber or Public Key but don't fully understand the implications of either. I guess public key lives beyond any reissued certificates, whereas SerialNumber is constrained to a particular certificate issued on a particular date?
Can anyone offer some informed advice?
Edit: It looks like the certificate thumbprint might be the typical way to achieve this.
","I found there is a Thumbprint property which uniquely identifies the exact certificate details. 
However in the end I reverted to string matching the Company Name in the Subject, as it's the only way I could know for sure that I could validate renewed or re-issued certificates.
","596","<public-key-encryption><x509certificate2>","1","0","1","2010-12-03 21:52:14","4350183","2","","215057","","2010-11-23 21:10:30","2010-11-22 17:23:49",""
"7881717","How to load RSA Public Key from String in J2ME","I need to do some encryption in J2ME through sms. The app receives the public key in an sms as String, the same way openssl creates Public key from Private key, this is how the keys are created: 

Private Key:   openssl genrsa -out privkey.pem 144
Public key:    openssl rsa -in privkey.pem -out pubkey.pem

The String is created with something like this, which is the public key:
MGwCAQACEwCxcz+Qk8J6CptiRg6EBpG6SHECAwEAAQISVTLKcDYhh8sTJggObTKI
pdIJAgoA7EwFr5Un3AErAgoAwD8WTwqL0vbTAgoAkuPfVPr/wD/pAgl44rKqfR0z
SRUCCgDDqC/pMSBHTJs=

Now, how to get to the point in a source code to get this public key in a RSAPublicKey ready to be used in a cipher?
To do this:
byte[] plaintext=""some text"".getBytes();
byte[] encryptedtext;
Cipher cipher=Cipher.getInstance(""RSA"");
RSAPublicKey pubKey=new RSAPublicKey(????????);
cipher.init(Cipher.ENCRYPT_MODE,pubkey);
cipher.doFinal(plaintext,0,plaintext.length,encryptedtext,0)

","","589","<java-me><public-key-encryption><encryption>","1","","0","2011-10-24 20:47:44","","2","3","839601","","2011-10-24 20:47:44","2011-10-24 20:40:03",""
"25108128","Encrypt with RSACryptoServiceProvider and public key string on Windows Mobile 6","my Windows Mobile 6 application needs to send data to a php REST web service of a company.
that WS has a method that returns the public key to use to encrypt the username and password of the user of the mobile application.
They give me a sample code written in php which simply calls the WS to obtain the public key and then calls openssl_public_encrypt with, as public key parameter, the value returned by the web service's call. This is an excerpt
function CallAPI($url, $data = false)
{
    $curl = curl_init();

    $url = sprintf(""%s?%s"", $url, http_build_query($data)); 

    curl_setopt($curl, CURLOPT_URL, $url);
    curl_setopt($curl, CURLOPT_RETURNTRANSFER, 1);      
    return curl_exec($curl);
}

$public_key=CallAPI(, ""https://***.***.***/index.php/rest/getPKey"");
$json = json_encode(array(""username""=>""********"",""psw""=>""*******""));
openssl_public_encrypt($json, $encrypted, $public_key);

From Windows Mobile point of view seems to be more complicated than this, also I am not really into RSA encryption.
the first thing I do is to call the WS to obtain the public key and I save it into a string. The following is the code I use to encrypt data.
ASCIIEncoding ByteConverter = new ASCIIEncoding();

byte[] dataToEncrypt = ByteConverter.GetBytes(data_string);
byte[] public_key = ByteConverter.GetBytes(public_key_string);
byte[] encryptedData;

RSACryptoServiceProvider RSA_provider = new RSACryptoServiceProvider();
RSAParameters key_info = RSA_provider.ExportParameters(false);

key_info.Modulus = public_key;

RSA_provider.ImportParameters(key_info);

encryptedData = RSA_provider.Encrypt(dataToEncrypt, false);
string encrypted_string = ByteConverter.GetString(encryptedData, 0, encryptedData.Length);

return encrypted_string;

If I try to send data to the web service it fails due to an authentication failure, also I noted that from php code that the encrypted string is always of 256 chars, while the .NET encrypted string has completely different length.
What I'm doing wrong?
I have seen a lot of questions on StackOverflow about working with .NET and RSA Encryption, but the features that are used are not contained in the Compact Framework.
Thank you in advance.
","I've solved using BouncyCastle API for ecnryption/decryption on .NET side and sending data between Windows Mobile client and PHP server using UrlEncode and replacing all '+'s in the UrlEncoded string with a custom string known from both the client and the server, I decided for ""####"".
","589","<c#><windows-mobile><rsa><public-key-encryption><windows-mobile-6.5>","0","0","1","2015-01-30 17:38:14","","2","","902771","","2014-08-04 07:47:59","2014-08-03 19:10:27",""
"8656866","Which key store should I read to see the installed certificates","Am installing certificate(.pk12) in my galaxy s2 from settings.After installing it shows toast "" installed "". After that in my code am opening ""/system/etc/security/cacerts.bks"" key store and from it i can see number of aliases in keystore is 44 .Regardless of how many number of certificates I install the aliases count does not change. I doubt whether the installed certificates go to this key store itself.How do I confirm it?
Which key store should I read to see the installed certificates.
","You cannot do what you're trying to do, unless you root the phone. Importing certificates using the standard interface (settings) only allows you to import certificates for VPN or Wi-Fi connections. To actually modify the system store (cacerts.bks), a system update from the manufacturer must be made to implement the new cacerts.bks file. 
Details here:
http://code.google.com/p/android/issues/detail?id=11231#c25
If you root the phone, you can directly modify cacerts.bks, but stock Android does not permit this operation.
","587","<android><security><encryption><certificate><public-key-encryption>","1","0","1","2011-12-29 14:45:41","","1","","642583","","2011-12-29 07:26:16","2011-12-28 14:00:43",""
"41172839","How to convert the x509.get_pubkey() to hexadecimal in python","I need to extract the public-key from x509 certificate. I used this script:
import socket, ssl
import OpenSSL

hostname='www.google.com'
port=443

context = ssl.SSLContext(ssl.PROTOCOL_TLSv1_2)

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
ssl_sock = context.wrap_socket(s, server_hostname=hostname)
ssl_sock.connect((hostname, port))
ssl_sock.close()
print(""ssl connection Done"")

cert = ssl.get_server_certificate((hostname, port))

# OpenSSL
x509 = OpenSSL.crypto.load_certificate(OpenSSL.crypto.FILETYPE_PEM, cert)

print(x509.get_pubkey().to_cryptography_key())

The value I get from .get_pubkey().to_cryptography_key() is this:
<cryptography.hazmat.backends.openssl.rsa._RSAPublicKey object at 0x0000021B75346908>

But I need the public-key in hexadecimal format. i.e. RSA modulus. 
","This answer may be quite late for you, but useful for others.
print OpenSSL.crypto.dump_publickey(OpenSSL.crypto.FILETYPE_PEM,x509.get_pubkey())
","586","<python><python-3.x><rsa><public-key-encryption><tls1.2>","0","0","1","2016-12-21 02:37:50","","0","","","","","2016-12-15 20:30:36",""
"7498642","Encrypt data with public key","i need to encrypt my symmetric key which is in AES with my public key. I take my public key from server's certificate but i don't know how to encrypt my symmetric key with this public key in Windows Phone 7, i cannot use X509Certificate2. I don't know how to make that RSACryptoServiceProvider to use this public key to encrypt data? Please Help me!
","There is a discussion on another forum about this, I hope this will aid you in your quest!
Working With X509Cert on WP7
","585","<windows-phone-7><encryption><public-key-encryption>","2","2","1","2011-09-21 16:50:29","","0","","","","","2011-09-21 11:03:02",""
"42456624","How can I create or open a libsodium compatible sealed box in pure Java","libsodium provides an API to create or open a sealed box documented here https://download.libsodium.org/doc/public-key_cryptography/sealed_boxes.html
How can I achieve the same in pure Java, so that allows me to open a box created by libsodium or create one that libsodium can open?
","The following example code can create and open a libsodium sealed box.
It requires TweetNaclFast from https://github.com/InstantWebP2P/tweetnacl-java and a Blake2b hash implementation, for example the one from https://github.com/alphazero/Blake2b
import java.security.GeneralSecurityException;
import java.util.Arrays;
import ove.crypto.digest.Blake2b;
import com.iwebpp.crypto.TweetNaclFast;


/**
 * Example how to open sealed boxes in pure java (libsodium sealed boxes according to 
 * https://download.libsodium.org/doc/public-key_cryptography/sealed_boxes.html)
 * 
 * Has a dependency on TweetNaclFast and Blake2B, for example
 * 
 * https://github.com/alphazero/Blake2b
 * and
 * https://github.com/InstantWebP2P/tweetnacl-java
 * 
 */
public class SealedBoxUtility {


public static final int crypto_box_NONCEBYTES = 24;
public static final int crypto_box_PUBLICKEYBYTES = 32;
public static final int crypto_box_MACBYTES = 16;
public static final int crypto_box_SEALBYTES = (crypto_box_PUBLICKEYBYTES + crypto_box_MACBYTES);

//  libsodium
//  int crypto_box_seal(unsigned char *c, const unsigned char *m,
//            unsigned long long mlen, const unsigned char *pk);


/**
 * Encrypt in  a sealed box
 *
 * @param clearText clear text
 * @param receiverPubKey receiver public key
 * @return encrypted message
 * @throws GeneralSecurityException 
 */
public static byte[] crypto_box_seal(byte[] clearText, byte[] receiverPubKey) throws GeneralSecurityException {

    // create ephemeral keypair for sender
    TweetNaclFast.Box.KeyPair ephkeypair = TweetNaclFast.Box.keyPair();
    // create nonce
    byte[] nonce = crypto_box_seal_nonce(ephkeypair.getPublicKey(), receiverPubKey);
    TweetNaclFast.Box box = new TweetNaclFast.Box(receiverPubKey, ephkeypair.getSecretKey());
    byte[] ciphertext = box.box(clearText, nonce);
    if (ciphertext == null) throw new GeneralSecurityException(""could not create box"");

    byte[] sealedbox = new byte[ciphertext.length + crypto_box_PUBLICKEYBYTES];
    byte[] ephpubkey = ephkeypair.getPublicKey();
    for (int i = 0; i < crypto_box_PUBLICKEYBYTES; i ++)
        sealedbox[i] = ephpubkey[i];

    for(int i = 0; i < ciphertext.length; i ++)
        sealedbox[i+crypto_box_PUBLICKEYBYTES]=ciphertext[i];

    return sealedbox;
}

//  libsodium:
//      int
//      crypto_box_seal_open(unsigned char *m, const unsigned char *c,
//                           unsigned long long clen,
//                           const unsigned char *pk, const unsigned char *sk)

/**
 * Decrypt a sealed box
 *
 * @param c ciphertext
 * @param pk receiver public key
 * @param sk receiver secret key
 * @return decrypted message
 * @throws GeneralSecurityException 
 */
public static byte[] crypto_box_seal_open( byte[]c, byte[] pk, byte[]sk ) throws GeneralSecurityException{
    if ( c.length < crypto_box_SEALBYTES) throw new IllegalArgumentException(""Ciphertext too short"");

    byte[] pksender = Arrays.copyOfRange(c, 0, crypto_box_PUBLICKEYBYTES);
    byte[] ciphertextwithmac = Arrays.copyOfRange(c, crypto_box_PUBLICKEYBYTES , c.length);
    byte[] nonce = crypto_box_seal_nonce(pksender,pk);

    TweetNaclFast.Box box = new TweetNaclFast.Box(pksender, sk);
    byte[] cleartext = box.open(ciphertextwithmac, nonce);
    if (cleartext == null) throw new GeneralSecurityException(""could not open box"");
    return cleartext;
}


/**
 *  hash the combination of senderpk + mypk into nonce using blake2b hash
 * @param senderpk the senders public key
 * @param mypk my own public key
 * @return the nonce computed using Blake2b generic hash
 */
public static byte[] crypto_box_seal_nonce(byte[] senderpk, byte[] mypk){
// C source ported from libsodium
//      crypto_generichash_state st;
//
//      crypto_generichash_init(&st, NULL, 0U, crypto_box_NONCEBYTES);
//      crypto_generichash_update(&st, pk1, crypto_box_PUBLICKEYBYTES);
//      crypto_generichash_update(&st, pk2, crypto_box_PUBLICKEYBYTES);
//      crypto_generichash_final(&st, nonce, crypto_box_NONCEBYTES);
//
//      return 0;
    final Blake2b blake2b = Blake2b.Digest.newInstance( crypto_box_NONCEBYTES ); 
    blake2b.update(senderpk);
    blake2b.update(mypk);
    byte[] nonce = blake2b.digest();
    if (nonce == null || nonce.length!=crypto_box_NONCEBYTES) throw new IllegalArgumentException(""Blake2b hashing failed"");
    return nonce;


}

}

","584","<java><encryption><public-key-encryption><elliptic-curve><libsodium>","1","3","1","2017-02-25 13:50:53","42456750","0","","1816580","","2017-02-25 13:50:53","2017-02-25 13:23:35",""
"20390762","Python Crypto RSA textbook encryption versus openssl - what is it doing?","I have an existing set of Python code that uses the primitive (textbook) RSA encryption mechanism to encrypt small pieces of data. Specifically, the python code loads a public key into variable publickey and then encrypts this data using the following code:
ciphertext = publickey.encrypt(plaintext,None)

Yes I have read the disclaimer that ""this function performs the plain, primitive RSA encryption (textbook). In real applications, you always need to use proper cryptographic padding,..."" Unfortunately, I cannot change this code at the present time, so I am stuck with using this ""textbook"" encrypt command.
Note that even though this command does not use any padding scheme, it still seems to be able to encrypt any (appropriately small) amount of plaintext. In other words, the plaintext can be any length up to whatever limit is imposed by RSA.
Now however, I want to use the OPENSSL C library in an IOS app to do an identical RSA encryption. I cannot figure out how to do the exact same thing that the python function is doing. OPENSSL has a method RSA_public_encrypt where you pass in the size of the plaintext, the plaintext itself, an RSA object pointer which contains public key information, and the RSA padding mechanism. To replicate what python is doing in the crypto library, I thought I could use RSA_NO_PADDING as the padding mechanism. The problem is that OPENSSL states in their documentation that if you use RSA_NO_PADDING, then the length of the plaintext to encrypt must be EXACTLY equal to a certain value: RSA_Size(rsa) where rsa is a pointer to the RSA object passed in (the object that contains the public key).
In other words, the python crypto library seems to be able to encrypt variable length plaintext with no padding, but OPENSSL requires plaintext to be fixed length. So what exactly is the python crypto library doing to handle the variable size of the plaintext, and is there any way I can replicate this in OPENSSL?
","If you look at the documentation for RSA_NO_PADDING, they explain:

This mode should only be used to implement cryptographically sound
  padding modes in the application code. Encrypting user data directly
  with RSA is insecure.

In other words, RSA_NO_PADDING is for cases where you're going to handle padding on your own, so OpenSSL expects an input of the proper size. It doesn't mean ""textbook RSA"". 
Is there a compelling reason you can't change the python code? Textbook RSA is insecure and you're taking a great risk by using it. 
","581","<encryption><openssl><rsa><public-key-encryption><pycrypto>","0","-1","1","2013-12-05 03:31:05","20390858","0","","","","","2013-12-05 03:20:20",""
"20751947","How to read id_rsa.pub into ruby Bignum?","I'm trying to read in some public key files generated with:
for i in $(seq 1 100); do
    ssh-keygen -t rsa -f keys/$i -q -N """"
done

I'm using ruby and my code is below. The problem I'm having is that I
can't be sure I'm doing it correctly. I thought that the public key
was a large number generated by multiplying 2 large prime numbers. I'm
getting numbers that are divisible by 3, 15, 33, and/or some other
numbers. These are all multiples of prime numbers but I was expecting
only 2 prime numbers, not 3 or 4. It may be that I am using ruby
incorrectly or that I am misunderstanding the format of a public key.
Any help would be greatly appreciated.
#!/usr/bin/env ruby
pubhash = Hash.new
# Read in public key files
pubfiles = File.join(""**"", ""*.pub"")
Dir.glob(pubfiles) do |filename|
    File.open(filename) do |file|
        file.each do |line|
            base64 = line.chomp.split[1]
            bytes = base64.unpack(""m"").first.unpack(""C*"").reverse
            key = bytes.each_with_index.inject(0) do
                |sum, (byte, index)|
                sum + byte * (256 ** index)
            end
            pubhash[filename] = key
        end
        file.close
    end
end

EDIT solution thanks to the link that Charlie provided:
File.open(filename) do |file|
    file.each do |line|
        base64 = line.chomp.split[1]
        keydata = base64.unpack(""m"").first
        parts = Array.new
        while (keydata.length > 0)
            dlen = keydata[0, 4].bytes.inject(0) do |a, b|
                (a << 8) + b
            end
            data = keydata[4, dlen]
            keydata = keydata[(dlen + 4)..-1]
            parts.push(data)
        end
        @type = parts[0]
        @e = parts[1].bytes.inject do |a, b|
            (a << 8) + b
        end
        @n = parts[2].bytes.inject do |a, b|
            (a << 8) + b
        end
    end
    file.close
end

","The reason you're finding other divisors of this number is likely because the base64 block contains more than just the key. 
For example, I used ssh-keygen -t rsa -b 768 -C so-is-cool to generate a keypair and have this as my .pub: 
ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAAAYQDK92Q/FMsaOuBE9NL7OufMYWVPWj62F6QXl4ADcYgFMrGMJRF1njg5UGujgqaIrouGjoqudt23fykUNG7HRZV4M4Plxknj4TSvFIG5hi+6x/AQzzPP7xnLkYBKDOxSs+M= so-is-cool

Fire up IRB:
base64='AAAAB3NzaC1yc2EAAAADAQABAAAAYQDK92Q/FMsaOuBE9NL7OufMYWVPWj62F6QXl4ADcYgFMrGMJRF1njg5UGujgqaIrouGjoqudt23fykUNG7HRZV4M4Plxknj4TSvFIG5hi+6x/AQzzPP7xnLkYBKDOxSs+M='
base64.unpack('m').first

You will see that the first bytes of it are: 
\x00\x00\x00\assh-rsa\x00\x00\x00\

or in other words my key algorithm. You probably need to parse this value a bit more to be of actual value. I found this blog that discusses the format of the OpenSSH .pub file a bit: http://blog.oddbit.com/2011/05/08/converting-openssh-public-keys/
","580","<ruby><rsa><public-key-encryption>","0","1","1","2013-12-24 16:49:16","20752568","2","","-1","","2017-05-23 10:25:30","2013-12-23 22:12:57",""
"46771465","Express Can Use .pfx file with encrypted private key without the private key's password","I have an express instance and an unencrypted pfx which contains my cert and an encrypted private key. When I load the pfx in express, I do not need to provide any sort of password, and it works. How is the node.js instance getting access to the private key? Isnt access to the unencrypted private key needed for https to work?
express code:
var httpsOptions = {
    'pfx': fs.readfileSync('./cert.pfx'),
    'passphrase': ''
};

https.createServer(httpsOptions, expressApp).listen(443, 'example.com');

My .pfx info from openSSL looks like the following:
openssl pkcs12 -in cert.pfx -info
MAC Iteration 2048
MAC verified OK
PKCS7 Encrypted data: XXXXXXXXXXXX, Iteration 2048
Certificate bag
Bag Attributes
    localKeyID: XX XX XX XX XX XX XX XX XX XX XX XX XX XX XX XX XX XX XX XX
subject=/OU=Domain Control Validated/CN=*.example.com
issuer=/C=US/ST=Arizona/L=Scottsdale/O=GoDaddy.com, 
Inc./OU=http://certs.godaddy.com/repository//CN=Go Daddy Secure 
Certificate Authority - G2
-----BEGIN CERTIFICATE-----
XXXXXXXXXXX=
-----END CERTIFICATE-----
PKCS7 Data 
Shrouded Keybag: pbeWithSHA1And3-KeyTripleDES-CBC, Iteration 2048
Bag Attributes
    localKeyID: XX XX XX XX XX XX XX XX XX XX XX XX XX XX XX XX XX XX XX XX
Key Attributes: <No Attributes>
Enter PEM pass phrase:
Verifying - Enter PEM pass phrase:
-----BEGIN RSA PRIVATE KEY-----
Proc-Type: 4,ENCRYPTED
DEK-Info: DES-EDE3-CBC,XXXXXXXXXXX

XXXXXXXXXXXXXXXX==
-----END RSA PRIVATE KEY-----

","Turns out both the pfx itself and the private key within the pfx were stored unencrypted.
I mistakenly thought the private key within the pfx was encrypted because 1.) I was told it was and 
2.) and because the openSSL package will not display the raw private key unless explicitly told to with the -nodes option
when openssl displays Enter PEM pass phrase: as it did above, it was asking for how to encrypt the displayed output: not how to decrypt the stored key, as I originally thought
The correct command I was looking for above was
openssl pkcs12 -in cert.pfx -info -nodes
","580","<node.js><express><public-key-encryption>","0","0","1","2017-10-27 19:09:27","46981904","0","","6810787","","2017-10-16 13:35:46","2017-10-16 13:25:02",""
"38701106","Send encrypted Service Bus messages with Azure API App","I would like to post brokered messages using an Azure API App to a Service Bus queue in Azure. The only 
problem I have with this is that the messages must be encrypted using asymmetric encryption
(public/private key). So the idea is that the API App sends encrypted messages using the public key 
to the Service Bus and later BizTalk polls the Service Bus and decrypts the messages with the private key.
Is it possible to do this?
","Data encryption is not something that is built into Service Bus, but you could definitely encrypt the data on your own using a .NET library. This is really easy if your messages are below the max size (256 KB for standard messaging and 1 mb for premium messaging). Just set the message body to be the resulting encrypted message.
","577","<biztalk><public-key-encryption><azureservicebus><azure-api-apps>","0","1","1","2016-08-01 20:50:16","38707879","2","","","","","2016-08-01 14:13:47",""
"50123944","Getting Public Key from a .pfx Certficate in Python","I do this to process a pfx certificate, by writing out a pem file.
How can I also pull out the public_key?  I noticed there is no get_publickey() method for the p12 object.
import contextlib
import OpenSSL.crypto
import os
import requests
import ssl
import tempfile
pfx_password = 'thiscertpassword' 
tpem = 'temppem.pem' 
pfxfile = 'fts.pfx' 


f_pem = open(tpem, 'wb')
pfx = open(pfxfile, 'rb').read()
p12 = OpenSSL.crypto.load_pkcs12(pfx, pfx_password)

f_pem.write(OpenSSL.crypto.dump_privatekey(OpenSSL.crypto.FILETYPE_PEM, 
p12.get_privatekey()))
#f_pem.write(OpenSSL.crypto.dump_publickey(OpenSSL.crypto.FILETYPE_PEM,  
p12.get_publickey()))  # NO SUCH METHOD 
f_pem.write(OpenSSL.crypto.dump_certificate(OpenSSL.crypto.FILETYPE_PEM, 
p12.get_certificate()))

","Example code to extract the Public Key suitable to be written to a file or for futher processing such as valdating a Signed-JWT. The important point is that the Public Key is extracted from the Certificate.
I use this code with Google Service Account P12 Credentials.
The Public Key that this code generates will look like this:
b'-----BEGIN PUBLIC KEY-----\nMIIBIjANBgkqhkiG9w0BAQEFDEADbeefMIIBCgKCAQEA5vFQucW2JW2WBhLI3dB0\n8OIkgCJPJDxoJ65kphmFSB2ZWsejV/iSecoIBYLyD2+HdHJm8pUgOOy05lm07gei\n0BRqLNYtUk2nlQIMoLPXxv23+VOWdpN/mYUsRhRwB13Aq4BybxObq+c7b08YWitI\nEtPmSEv+YkKlpcGzQcfctT7GNjjBqWuUuM1dxAqJll6JIEGAWEsDeTh9YOqnBnRb\nAWxI62D9/9bVnLkRWv0S9gfOZLuboVBhBSbHQyjbeefDeAd1J6nToug7wdxC66r1\n55lLzf9Ow9KPlsj30d6Alv59xX9QEU3MfIEfyxGiIHNTX6g8A3XUHOtgdmDyVB//\nXwIDAQAB\n-----END PUBLIC KEY-----\n'

Python 3.x code:
import OpenSSL.crypto

def load_public_key(pfx_path, pfx_password):
        ''' Read the public key and return as PEM encoded '''

        # print('Opening:', pfx_path)
        with open(pfx_path, 'rb') as f:
                pfx_data = f.read()

        # print('Loading PFX contents:')
        pfx = OpenSSL.crypto.load_pkcs12(pfx_data, pfx_password)

        public_key = OpenSSL.crypto.dump_publickey(
                OpenSSL.crypto.FILETYPE_PEM,
                p12.get_certificate().get_pubkey())

        print(public_key)

        return public_key

","576","<python><google-cloud-platform><public-key-encryption><pem><pfx>","1","2","1","2018-12-24 03:16:36","53908621","0","","8016720","","2018-12-24 02:27:13","2018-05-01 21:16:45",""
"40903818","PGP Encryption and Decryption in Android?","I am new to PGP encryption and Decryption technique. Can anybody take a look into this how to implement.
I tried and implemented successfully by using a vendor provided that libraries. But it is supporting only for free trial with 45 days. But I need it freeware for development. Can anyone suggest me how to use it for free or any other vendor libraries available.
Below are the links I used to implement it.
Vendor Site Link for libraries
Encryption Sample
","","576","<android><encryption><public-key-encryption><pgp><openpgp>","2","","0","2016-12-01 06:22:43","","0","1","1157879","","2016-12-01 06:22:43","2016-12-01 06:17:20","2016-12-12 06:28:39"
"28795706","ed25519 ECDH encryption possible and safe?","As far as I can see everybody use curve25519 for public/private encryption (ECDH) and ed25519 for signing (ECDSA). This creates double size of keys or some special conversion tricks that may not be safe: 
https://github.com/dchest/ed2curve-js
Is it not possible to use curve ed25519 for both ECDH and ECDSA and have half the key size?
Is it not possible to use curve ed25519 for only ECDH?
I admit that I have a very limited understanding of ECC so the reason above may be because of security considerations but it is not easy to find any hint about this on the web!
NB: I understand that curve25519 can not be used for signing!
Benny
","I don't think you'll find anything better than the paper linked at Using same keypair for Diffie-Hellman and signing.
I suspect that this key reuse is fine as long as you're comfortable with assumption that SHA-512 (used in Ed25519 signing) and HSalsa (used as KDF with NaCl's Curve25519 based boxes) are independent hash functions (I do). But it'd be probably cleaner to use the same hash function with different prefixes.
I heard that Bernstein, Lange and Schwabe (authors of NaCl) are working on a paper about these issues, but who knows when it'll be published.
","574","<javascript><encryption><public-key-encryption><encryption-asymmetric><elliptic-curve>","0","-1","1","2015-03-01 16:37:15","","1","","","","","2015-03-01 16:05:26",""
"8884821","using Perl Crypt::RSA but getting `Incomplete key` on attempted decryption","I am trying to use Crypt::RSA to decrypt a message (I was given n, which I then factored into p and q, and I was also given e. I computed d. programmatically generate `d` from `p` and `q` (RSA)) but am having some difficulties. Every time I run the following code, I get Incomplete key.
It's such an unhelpful error message.
use Crypt::RSA;

my $rsa = new Crypt::RSA;

my $privkey = bless( {
    'p' => 'NUMBER',                                                                                        
    'q' => 'NUMBER',        
    'n' => 'NUMBER',
    'Version' => '1.99',
    'Identity' => '<email>' #put your email here?                                                                                                         
                     }, 'Crypt::RSA::Key::Private' );

my $plaintext = $rsa->decrypt (
    Cyphertext => ""- -----BEGIN COMPRESSED RSA ENCRYPTED MESSAGE-----                                                                                                      
Version: 1.99                                                                                                                                                              
Scheme: Crypt::RSA::ES::OAEP                                                                                                                                               

block_message_here

- -----END COMPRESSED RSA ENCRYPTED MESSAGE-----"",
    Key        => $privkey,
    Armour     => 1,
    ) or die $rsa->errstr();

print $plaintext;

","","573","<perl><encryption><rsa><public-key-encryption>","1","","0","2012-01-16 22:11:38","","4","","-1","","2017-05-23 12:03:14","2012-01-16 18:49:01",""
"40490834","sign XML with public Key","I am rather new to .Net MVC and even newer to Signatures. 
I have to sign a XML file anveloped and then send it to my client with a response stream.
Aftwe a whole bunch of fights with the code i was be able to sign my XML Enveloped. 
With the RSACryptoServiceProvider Private Key, Dataobject, KeyInfo and everything.
But then my Client told me i only get a public key from him. 
After a day of searching through the internet i still dont know how.
So my question:
How can I sign my XML with a public key in .Net MVC with C#?
","You cannot sign an XML file with a public key, public keys are only for validation.
For signing you will need a private key, this key can be generated by OpenSSL. You can work on this for the moment and then you should ask to your client to merge your code with his keystore implementation. 
Once you are able to sign your file, you'll see the certificate in base64 format as part of the signed document, this certificate includes a public key which is used to validate the sign done by the private key.
","572","<c#><xml><public-key-encryption><xml-signature>","0","0","1","2017-01-22 17:01:39","41793713","2","","47589","","2016-11-08 15:43:46","2016-11-08 15:37:17",""
"24455109","ssh via public keys failing for account on CentOS 6 with user id below 500","I converted a non-login user jenkins,  created by the jenkins CI server installation, to allow log in by doing the following:

Adding a home dir and shell in the /etc/passwd file for the jenkins user
Creating a home directory

I then created a public an private key pair by

Added public & private keys in the .ssh directory in the new home space
Created and authorized_keys file
Set the correct permissions for the .ssh directory and contents.

Now, on the machine, as root I can su - jenkins and become the jenkins user.  However, on a remote machine I cannot ssh with public key  to this machine (as the jenkins user with the respective keys).  
I created a new user on the machine via useradd, copied the jenkins ssh keys over to this account and was able to log in as this user using the keys.
I'm completely stumped with what is special about the jenkins user that could be blocking ssh public key access.  The only thing that sticks out in my mind is the jenkins user was 
created with User ID of 498.  Is there something blocking 'system' user from allowing ssh?
The end of the ssh command with -v enabled for failing login as user jenkins looks like this:
 debug1: Authentications that can continue: publickey,gssapi-keyex,gssapi-with-mic
 debug1: Next authentication method: publickey
 debug1: Trying private key: id_rsa
 debug1: read PEM private key done: type RSA
 debug1: Authentications that can continue: publickey,gssapi-keyex,gssapi-with-mic
 debug1: No more authentication methods to try.
 Permission denied (publickey,gssapi-keyex,gssapi-with-mic).

The successfull login as user foo (with the same keys):
 debug1: Authentications that can continue: publickey,gssapi-keyex,gssapi-with-mic
 debug1: Next authentication method: publickey
 debug1: Trying private key: id_rsa
 debug1: read PEM private key done: type RSA
 debug1: Authentication succeeded (publickey).
 Authenticated to jenkins.internal.nara.me ([54.83.203.146]:22).
 debug1: channel 0: new [client-session]
 debug1: Requesting no-more-sessions@openssh.com
 debug1: Entering interactive session.
 debug1: Sending environment.
 debug1: Sending env LANG = en_US.UTF-8

","you are likely missing something among this : 

permission on the home directory of your jenkins user are not right (like not owned by user, or world or group-writableà
ssh not allowing key-based authentication for some users
having an unexpected carrigae-return in the authorized_keys file

to debug this, reload your sshd with 
LogLevel VERBOSE

in /etc/ssh/sshd_config
and look at /var/log/auth.log (or centos equivalent) for information on why this key is not accepted. In verbose mode, sshd always says why ;) 
","566","<linux><security><ssh><centos><public-key-encryption>","-2","1","1","2016-05-24 02:36:14","24455354","0","","722263","","2014-06-27 15:23:31","2014-06-27 15:07:52",""
"12154558","How to configure Jenkins to send encrypted emails with gpg?","I am looking for instructions on how to configure the jenkins email plugin (ext-mail) to encrypt notifications? The uncle google did not help me too much. 
","such feature is not out-of-box, you need custom ExtendedEmailPublisher for your needs.
        MimeMessage msg = createMail(mailType, build, listener);
        Address[] allRecipients = msg.getAllRecipients();
        if (allRecipients != null) {
            StringBuilder buf = new StringBuilder(""Sending email to:"");
            for (Address a : allRecipients) {
                buf.append(' ').append(a);
            }
            listener.getLogger().println(buf);
            Transport.send(msg);
            if (build.getAction(MailMessageIdAction.class) == null) {
                build.addAction(new MailMessageIdAction(msg.getMessageID()));
            }
            return true;
        }

you can get Recipients and Email message for sign/encrypt and call Transport.send(msg) at last.
","559","<jenkins><public-key-encryption><gnupg><jenkins-plugins>","1","2","1","2012-08-28 08:00:10","12155051","0","1","","","","2012-08-28 07:20:53",""
"15193064","Storing sensitive data in mySql","I am lookin to harden security on one of my client sites. There is no payment provider set up so sensitive Direct Debit information needs to be on a mySql server. This Direct Debit information needs to be human readable by users from accounting department.
Testing server is set up as follows:

At present, main site is sitting on a wordpress blog.
Customer completes HTTPS encrypted form with an EV SSL certificate.
Data is stored in a separate database to the wordpress database.
Direct debit details are currently stored as plain text

Now part 4 is what bothers me... but it's ok at the moment, because only on the testing server!
","This is really difficult to answer, as it depends on how far you need to protect this data.
First step is obviously encrypting all details stored in mysql, incase someone gets a dump of your database.
This solution is good, but it introduces the vulnerability as if someone gets the decryption keys from your application server, they would be able to decrypt the dump of the database anyway.
There are many solutions to consider from here, i'm sure with some research you should be able to find some decent ones, but one way that comes to mind is:
You could encrypt the data on the application servers with a public/private key encryption algorithm. Public key can only be used to encrypt the information for storage, which lives on your application server. If that gets hacked, the only thing that they will be able to do is to add more data to your database =/. The private key in this case will be a password that would need to be entered every time a human needs to see this information.
This has the obvious disadvantage that you can't do any machine processing on your data, as its traveling completely encrypted all the way until its displayed.
(And you still have vulnerabilities of someone gaining access to your application server and simply dumping the session files/memcache where the key would have to be stored temporarily)
To be honest, first thing i'd do is encrypt the entire database one way or another. That alone adds a decent layer of protection. Dumping the database is easier than getting access to the file system of a server in most cases.
","558","<https><security><public-key-encryption><encryption-asymmetric>","0","1","2","2013-03-04 13:40:25","","0","","","","","2013-03-04 01:16:50",""
"15193064","Storing sensitive data in mySql","I am lookin to harden security on one of my client sites. There is no payment provider set up so sensitive Direct Debit information needs to be on a mySql server. This Direct Debit information needs to be human readable by users from accounting department.
Testing server is set up as follows:

At present, main site is sitting on a wordpress blog.
Customer completes HTTPS encrypted form with an EV SSL certificate.
Data is stored in a separate database to the wordpress database.
Direct debit details are currently stored as plain text

Now part 4 is what bothers me... but it's ok at the moment, because only on the testing server!
","Are you talking about bank account details / credit card details or both?
Be aware storing credit card details brings attached fulfilling PCI requirements.
Also, if you are planning to store confidential details, NEVER store them unencrypted.
Any questions, just let me know.
Fabio
@fcerullo
","558","<https><security><public-key-encryption><encryption-asymmetric>","0","0","2","2013-03-04 13:40:25","","0","","","","","2013-03-04 01:16:50",""
"42949797","RSA implementation in c using gmp","I have wrote this program that successfully encrypt & decrypt the message. Then I added the code that see if there is another private key that pair the same public key, things got comfusing.
Anyway, the code will show everything. Thank you for viewing my question.
I was expecting the message I encrypted by the public-key I just generated which in the below code to be able to decrypted by the only private-key I generate. But after it successfully decryptd the message, I got another private-key that can decrypt the message. 
I think it's a lots easier to understand me just reading the code, sorry for the lack of detail. I don't know what's going on.
If a public-key encrypted message can be decrypted by many other private-key, then why is this algorithm secure?
// Module
 // System
  #include <stdio.h>
  #include <stdlib.h>
  #include <unistd.h>
  #include <limits.h>
  #include <errno.h>
  #include <string.h>
  #include <time.h>
  #include <math.h>
  #include <gmp.h>
  // sys
   #include <sys/time.h>
   #include <sys/file.h>
 // Homemade
  #include ""/root/01_Code/03_C/00_Module/output_option.h""
  //
// main()
 int main(void){
  // Value
   // Basic
    long   Loop  [1];
    time_t Seed;
    long   Level = 8;
    gmp_randstate_t Random_State; gmp_randinit_default(Random_State);
   // RSA
    mpz_t Buffer_mpz_1; mpz_init(Buffer_mpz_1);
    mpz_t Buffer_mpz_2; mpz_init(Buffer_mpz_2);
    mpz_t Prime_1;      mpz_init(Prime_1);
    mpz_t Prime_2;      mpz_init(Prime_2);
    mpz_t Phi;          mpz_init(Phi);
    mpz_t Common_Key;   mpz_init(Common_Key);
    mpz_t Public_Key;   mpz_init(Public_Key);
    mpz_t Private_Key;  mpz_init(Private_Key);
  // Implementation
   // RSA init
    // Prime_1
     sleep(1);
     time(&Seed);
     gmp_randseed_ui(Random_State, Seed);
     mpz_urandomb(Prime_1, Random_State, Level);
     while(mpz_probab_prime_p(Prime_1, 49) != 2)
      mpz_add_ui(Prime_1, Prime_1, 1);
    // Prime_2
     sleep(1);
     time(&Seed);
     gmp_randseed_ui(Random_State, Seed);
     mpz_urandomb(Prime_2, Random_State, Level);
     while(mpz_probab_prime_p(Prime_2, 49) != 2)
      mpz_add_ui(Prime_2, Prime_2, 1);
    // Phi
     mpz_sub_ui(Phi,          Prime_1, 1);
     mpz_sub_ui(Buffer_mpz_1, Prime_2, 1);
     mpz_mul(   Phi,          Phi,     Buffer_mpz_1);
    // Common_Key
     mpz_mul(Common_Key, Prime_1, Prime_2);
     //
    // Public_Key
     // Init random Public_Key
      do{
       sleep(1);
       time(&Seed);
       gmp_randseed_ui(Random_State, Seed);
       mpz_urandomb(Public_Key, Random_State, Level);
      }while(mpz_cmp(Public_Key, Phi) >= 0 || mpz_cmp_ui(Public_Key, 1) == 0);
      mpz_set(Buffer_mpz_2, Public_Key);
     // Pick Public_Key
      while(1){
       if(mpz_cmp(Public_Key, Phi) < 0){
        mpz_gcd(Buffer_mpz_1, Public_Key, Phi);
        if(mpz_cmp_ui(Buffer_mpz_1, 1) == 0) break;
        mpz_add_ui(Public_Key, Public_Key, 1);
       }else{
        mpz_set(Public_Key, Buffer_mpz_2);
        while(1){
         mpz_sub_ui(Public_Key, Public_Key, 1);
         if(mpz_cmp_ui(Public_Key, 1) == 0){
          printf(""%d\n"", __LINE__);
          mpz_clear(Buffer_mpz_1);
          mpz_clear(Buffer_mpz_2);
          mpz_clear(Prime_1);
          mpz_clear(Prime_2);
          mpz_clear(Phi);
          mpz_clear(Common_Key);
          mpz_clear(Public_Key);
          mpz_clear(Private_Key);
          return 1;
         }
         mpz_gcd(Buffer_mpz_1, Public_Key, Phi);
         if(mpz_cmp_ui(Buffer_mpz_1, 1) == 0) goto l_END_PK;
        }
       }
      }
      l_END_PK:;
    // Private_Key
     mpz_set_ui(Buffer_mpz_1, 1);
     mpz_set_ui(Private_Key,  2); char Switch = 'V';
     l_AGAIN:do{
      mpz_add_ui(Private_Key, Private_Key, 1);
      mpz_mul(Buffer_mpz_1, Public_Key,   Private_Key);
      mpz_mod(Buffer_mpz_1, Buffer_mpz_1, Phi);
     }while(mpz_cmp_ui(Buffer_mpz_1, 1) != 0);
     if(Switch == 'V'){
      Switch = 'X';
      mpz_set(Buffer_mpz_2, Private_Key);
      goto l_AGAIN;
     }
   // Encrypt & Decrypt
    mpz_set_ui(Buffer_mpz_1, 88);
    mpz_powm(Buffer_mpz_1, Buffer_mpz_1, Public_Key,  Common_Key);
    mpz_powm(Buffer_mpz_1, Buffer_mpz_1, Private_Key, Common_Key);
    gmp_printf(""Prime_1     %Zd\n"", Prime_1);
    gmp_printf(""Prime_2     %Zd\n"", Prime_2);
    gmp_printf(""Public_Key  %Zd\n"", Public_Key);
    gmp_printf(""Private_Key %Zd\n"", Private_Key);
    gmp_printf(""Common_Key  %Zd\n"", Common_Key);
    gmp_printf(""Decrypted   %Zd\n"", Buffer_mpz_1);
    printf(""----------------------------------------------------\n"");
    mpz_set_ui(Buffer_mpz_1, 88);
    mpz_powm(Buffer_mpz_1, Buffer_mpz_1, Public_Key,   Common_Key);
    mpz_powm(Buffer_mpz_1, Buffer_mpz_1, Buffer_mpz_2, Common_Key);
    gmp_printf(""Prime_1     %Zd\n"", Prime_1);
    gmp_printf(""Prime_2     %Zd\n"", Prime_2);
    gmp_printf(""Public_Key  %Zd\n"", Public_Key);
    gmp_printf(""Private_Key %Zd\n"", Buffer_mpz_2);
    gmp_printf(""Common_Key  %Zd\n"", Common_Key);
    gmp_printf(""Decrypted   %Zd\n"", Buffer_mpz_1);
  // Clean up
   mpz_clear(Buffer_mpz_1);
   mpz_clear(Buffer_mpz_2);
   mpz_clear(Prime_1);
   mpz_clear(Prime_2);
   mpz_clear(Phi);
   mpz_clear(Common_Key);
   mpz_clear(Public_Key);
   mpz_clear(Private_Key);
   return 0;
 }

","","555","<c><encryption><rsa><public-key-encryption><gmp>","0","","0","2017-03-22 11:35:49","","13","","7750945","","2017-03-22 11:35:49","2017-03-22 11:04:38",""
"39033368","Microsoft Software Key Storage Provider in SQL Server 2016 Always Encrypted","I am evaluating Always Encrypted feature in SQL Server 2016.
One of the options to store CMK is windows certificate store i.e. User/LocalMachine. If you want to allow other machines to have access to the data in un-encrypted format you need to import the same certificate in other machines. All this was fairly simple and I could do it easily.
Now I created and stored my CMK in a ""Microsoft Software Key Storage Provider"". 
How can I import this CMK in other machines?
","To provision a column master key using Microsoft Software Key Storage Provider in SSMS, you need to use the New Column Master Key dialog: select Key Store Provider (CNG) as an Always Encrypted key store provider, and then select Microsoft Software Key Storage Provider. You will find the detailed instructions here: https://msdn.microsoft.com/en-us/library/mt757096.aspx#Anchor_2 .
Here is the example showing how to configure a column master key using Microsoft Software Key Storage Provider in PowerShell: https://msdn.microsoft.com/en-us/library/mt732057.aspx#Anchor_3. 
","554","<sql-server><public-key-encryption><sql-server-2016><always-encrypted>","0","0","1","2018-11-16 12:50:50","","2","","3706016","","2016-08-19 07:31:24","2016-08-19 07:27:04",""
"15691854","How to read an encrypted directory file using different IIS user","I would like to read/access a file which from an encrypted  directory using IIS on browser?
","If you have specific files, you should be able to add the IIS user as an authorized user: http://technet.microsoft.com/en-us/library/bb457007.aspx
On my machine the IIS user has an EFS certificate already, but I could not find any documentation about whether that is always the case.
","549","<windows><web-services><encryption><public-key-encryption>","2","2","1","2013-04-03 20:22:15","15797329","1","1","1968158","","2013-03-28 20:58:32","2013-03-28 20:48:29",""
"51597672","RSA Encryption using SwiftyRSA","I'm using SwiftyRSA for using RSA encryption in my app.
I'm receiving a public key in String format from server and I want to create my public key using that string but I can't achieve that.
Any help would be appreciated.
","Finally I was able to fix this by creating the .pem file by using this string literal in swift """""" for multiline string creation and it solved the problem.
Here is the example:
// This creates a multiline public key
fileprivate var pbKey = """"""
                        blah blah
                        blah blah
                        public key
                        """"""

// Then you use that public key in your pem file
let publicKey = try PublicKey(pemEncoded: pbKey)
let clear = try ClearMessage(string: ""Clear Text"", using: .utf8)
let encrypted = try clear.encrypted(with: publicKey, padding: .OAEP)

","548","<swift><rsa><public-key-encryption>","0","1","1","2018-08-08 08:49:22","51684053","3","","","","","2018-07-30 15:43:26",""
"33642310","Is there a way to get the components of an RSA key in the WebCrypto API?","I can create a rsa key like this using the WebCrypto API
( see the really useful set of examples here https://vibornoff.github.io/webcrypto-examples/index.html )
 window.crypto.subtle.generateKey({
         name: ""RSASSA-PKCS1-v1_5"",
         modulusLength: 2048,
         publicExponent: new Uint8Array([0x01, 0x00, 0x01]),
         hash: {name: ""SHA-256""},
        }, 
    true, 
  [""sign"", ""verify""])

How can I actually find the modulus of the generated public key?
","The following code should give you the modulus and exponent as Uint8Arrays:
window.crypto.subtle.generateKey({
  name: ""RSASSA-PKCS1-v1_5"",
  modulusLength: 2048,
  publicExponent: new Uint8Array([0x01, 0x00, 0x01]),
  hash: {
    name: ""SHA-256""
  },
}, true, [""sign"", ""verify""]).then(function(keyPair) {
  window.crypto.subtle.exportKey(""jwk"", keyPair.publicKey).then(
    function(key) {
      // base64url-decode modulus
      var modulus = base64UrlDecode(key.n);

      // base64url-decode exponent
      var exponent = base64UrlDecode(key.e);

      // modulus and exponent are now Uint8Arrays
    });
});

function base64UrlDecode(str) {
  str = atob(str.replace(/-/g, '+').replace(/_/g, '/'));
  var buffer = new Uint8Array(str.length);
  for(var i = 0; i < str.length; ++i) {
    buffer[i] = str.charCodeAt(i);
  }
  return buffer;
}

","546","<javascript><public-key-encryption><webcrypto-api>","2","3","1","2015-11-11 01:16:40","33642684","0","1","","","","2015-11-11 00:38:47",""
"25441997","How to make apk secure and what is the most unique identifier an app has?","MD5 fingerprint of any app can be easily acquired using keytool. Then what is the most unique identifier an app has?
I am trying to build a client server app and I want a secure the communications.
My problem revolves around these two assumptions - 
1) Someone can reverse engineer my app and understand how I interact with server webservices
2) My app can be simply uninstalled and replaced with malicious app with similar package name.
The system can easily compromised using these two loopholes.
My solution to these problems was transmitting MD5 signature of my app to the server. The MD5 signature will be conveyed to server before hand. MD5 signature is unique for every app, But there is big problem in this approach. MD5 signature of any apk can be generated using keytool. Anyone may pull my apk and generate MD5 and use it in the webservices communication.
What is the unique identifier of an android app?
Package name and MD5 fingerprint can be easily compromised!
","First question
1) My app can be simply uninstalled and replaced with malicious app with similar package name.
best approach is probably the use of ANDROID_ID
Try this  link http://blog.vogella.com/2011/04/11/android-unique-identifier/
Check this also  http://android-developers.blogspot.in/2011/03/identifying-app-installations.html
Solution for the second issue
2) Someone can reverse engineer my app and understand how I interact with server webservices 
Use DexGuard, which can make reverse engineering even harder, like by encrypting strings
https://www.saikoa.com/dexguard
Proguard
“The ProGuard tool shrinks, optimizes, and obfuscates your code by removing unused code and renaming classes, fields, and methods with semantically obscure names. The result is a smaller sized .apk file that is more difficult to reverse engineer.”
When you create android project.
1. proguard.cfg file is automatically generated in the root directory of the project.
2. The default configuration file only covers general cases, so customize as per your needs.

Enable it
“Set the proguard.config  property in the /project.properties file. The path can be an absolute path or a path relative to the project’s root.”
 Case1:    Just add proguard.config=proguard.cfg if the proguard.cfg is in projects root path.
 Case2:    Configure from other location  [proguard.config=/path/to/proguard.cfg]

Remove the “#” (or uncomment) the proguard configuring statement in project.properties. Which will be in commented initially.
Customize it. try this link http://1belong2jesus.wordpress.com/
","544","<android><md5><public-key-encryption>","2","0","3","2014-08-22 13:09:13","25444216","7","1","3020568","","2014-08-22 08:47:33","2014-08-22 07:44:33",""
"25441997","How to make apk secure and what is the most unique identifier an app has?","MD5 fingerprint of any app can be easily acquired using keytool. Then what is the most unique identifier an app has?
I am trying to build a client server app and I want a secure the communications.
My problem revolves around these two assumptions - 
1) Someone can reverse engineer my app and understand how I interact with server webservices
2) My app can be simply uninstalled and replaced with malicious app with similar package name.
The system can easily compromised using these two loopholes.
My solution to these problems was transmitting MD5 signature of my app to the server. The MD5 signature will be conveyed to server before hand. MD5 signature is unique for every app, But there is big problem in this approach. MD5 signature of any apk can be generated using keytool. Anyone may pull my apk and generate MD5 and use it in the webservices communication.
What is the unique identifier of an android app?
Package name and MD5 fingerprint can be easily compromised!
","Basically you want to be sure that you are talking to your client app at server end.
Verify Back-End Calls from Android. This link could be helpful as it gives high confidence for such a case. (HTTPS is must here)
","544","<android><md5><public-key-encryption>","2","1","3","2014-08-22 13:09:13","25444216","7","1","3020568","","2014-08-22 08:47:33","2014-08-22 07:44:33",""
"25441997","How to make apk secure and what is the most unique identifier an app has?","MD5 fingerprint of any app can be easily acquired using keytool. Then what is the most unique identifier an app has?
I am trying to build a client server app and I want a secure the communications.
My problem revolves around these two assumptions - 
1) Someone can reverse engineer my app and understand how I interact with server webservices
2) My app can be simply uninstalled and replaced with malicious app with similar package name.
The system can easily compromised using these two loopholes.
My solution to these problems was transmitting MD5 signature of my app to the server. The MD5 signature will be conveyed to server before hand. MD5 signature is unique for every app, But there is big problem in this approach. MD5 signature of any apk can be generated using keytool. Anyone may pull my apk and generate MD5 and use it in the webservices communication.
What is the unique identifier of an android app?
Package name and MD5 fingerprint can be easily compromised!
","As an additional step for @Maddy 's answer, you might think about tamper resistance/integrity protection techniques, that will make your app inoperable in case somebody tried to modify it.  DexProtector (http://dexprotector.com) could be the solution here. The slides under the link also should be helpful.
N.B.
I am Licel's CEO, thus I am affiliated with DexProtector.
","544","<android><md5><public-key-encryption>","2","1","3","2014-08-22 13:09:13","25444216","7","1","3020568","","2014-08-22 08:47:33","2014-08-22 07:44:33",""
"27262955","How does the signature in a digital certificate come from?","According to here:
A digital certificate contains:

Serial Number: Used to uniquely identify the certificate.
Subject: The person, or entity identified.
Signature Algorithm: The algorithm used to create the signature.
Signature: The actual signature to verify that it came from the
issuer.
Issuer: The entity that verified the information and issued the
certificate.
Valid-From: The date the certificate is first valid from.
Valid-To: The expiration date.
Key-Usage: Purpose of the public key (e.g. encipherment, signature,
certificate signing...).
Public Key: The public key.
Thumbprint Algorithm: The algorithm used to hash the public key
certificate.
Thumbprint (also known as fingerprint): The hash itself, used as an
abbreviated form of the public key certificate.

My question is, how does the signature come from? I think it is used to ensure the digital certificate is issued by a trusted issuer. So the issuer use its private key to sign on something to produce the signature, then the verifier of the certificate must have the corresponding public key of the issuer to decipher the signature and verify that this something is genuine.
If I am correct, this something must be stored in the certificate as well for the verifier to compare the deciphered signature to. So what's this something? Could it be the thumbprint (hash) of the public key? 
","This something is most of the certificate itself. The receiver can calculate the hash over the TBSCertificate (the part of the certificate To Be Signed) itself using the algorithm in the certificate. The receiver can then verify that it is the same as the hash calculated by the signer (the issuer of the certificate). If the signature is verified and the signer is trusted, then the certificate is verified.
There are more tests to be performed such as validating that the certificate has not been revoked or over it's date of expiry before it can be fully trusted.  
A digital certificate consists of:

certificate information 
signature algorithm 
signature value

See the RFC 5280 for more info on the exact structure of the certificate.
","540","<encryption><certificate><public-key-encryption><digital-certificate><pki>","1","3","1","2014-12-04 16:51:20","","0","1","264052","","2014-12-03 04:30:05","2014-12-03 03:06:08",""
"33460655","Docker Data Container Encryption","I am not sure if this is feasible with current Docker/Linux, so I have this question. I am looking for advices, tools and How-To's in order to achieve this.
I want to add optional encryption to my existing Docker containers. My preferred choice is exposing volumes through a data container. The data container manages encryption and is provided with the encryption credentials:

Data container has volume /data
Data container has encryption credentials (Password or Key).
Data written to /data is written on a host directory encrypted using the data containers credentials.
Data read from /data can only be done through the data container.

The application container:

Application mounts data container with the Docker parameter -v
Application container Writes and Reads without any regards to encryption and decryption to and from data container.

","","539","<encryption><docker><public-key-encryption>","1","","0","2015-11-01 09:07:15","","0","","","","","2015-11-01 09:07:15",""
"4654680","Restricting access of a Web application using public key/ private key techniques","I have a requirement of restricting access of a web application (public url available on www) & allowing it to specified set of clients.
Application details as follows:
Technology Used  – JSP / Java EE
Deployed on   – IBM Webshpere
My problems are:
01. Can this be achieved through client side SSL certificate?
02. Any mechanism of pulbic key / private key technics availble for this
03. Whether these techniques are dependant on browsers type  
","Client certificates are standardized in the servlet spec, so yes this is absolutely possible.  You specify CLIENT-CERT in your web.xml file.
You will need to set up the keys in WebSphere's keystore (http://publib.boulder.ibm.com/infocenter/wasinfo/v6r0/index.jsp?topic=/com.ibm.websphere.nd.multiplatform.doc/info/ae/ae/rsec_csiv2cca.html) but this is a proprietary procedure for different containers.
Client certificates are public/private keys, so that should meet your requirement.
There shouldn't be any browser issues, other than giving the users different instructions for different browsers to set up their certificates.
","538","<java><java-ee><client-server><command-line-interface><public-key-encryption>","0","1","2","2013-04-12 21:04:48","4654920","0","","472792","","2013-04-12 21:04:48","2011-01-11 06:00:36",""
"4654680","Restricting access of a Web application using public key/ private key techniques","I have a requirement of restricting access of a web application (public url available on www) & allowing it to specified set of clients.
Application details as follows:
Technology Used  – JSP / Java EE
Deployed on   – IBM Webshpere
My problems are:
01. Can this be achieved through client side SSL certificate?
02. Any mechanism of pulbic key / private key technics availble for this
03. Whether these techniques are dependant on browsers type  
","It's in the Java EE spec but has its own problems implementing it. These articles show how to enable and solutions to common issues that arise in such an authentication schema.
","538","<java><java-ee><client-server><command-line-interface><public-key-encryption>","0","1","2","2013-04-12 21:04:48","4654920","0","","472792","","2013-04-12 21:04:48","2011-01-11 06:00:36",""
"44743746","Public private key signing/encoding","I'm stuck trying to base64 encode a public private key. It looks like I can encode public and private keys separately with the SwiftyRSA library.
My problem is that I can't put them together the way the API JWT assertion should look (in RS256). I've read through plenty of documentation, but I'm having trouble trying to do the final task of having a base64 encoded variable.
I found the code below to be helpful. Essentially what I want to do is combine the public and private key into a token. This code is for javascript, but I can't seem to find something similar for Swift.
// First, let's try to use the top-level one-off methods.
jwt = new lib.JsonWebTokens();
 // Encode JWT token using 512-bit RSA signing algorithm.
token = jwt.encode( payload, ""HS512"", getPublicKey(), getPrivateKey() );

Would anyone be willing to look at this and tell me the one or two steps I'm missing?
Other details:
This is for the Box api
Thanks in advance!
--------------- EDIT -----------------------------------------------
I was able to implement the SwiftyRSA library. The example code is below. The output gives me a JWT assertion that works with the jwt.io website. However...(please read below code)
        do {
        // the keys
        let publicKey = try PublicKey(pemNamed: ""public_key"")
        let privateKey = try PrivateKey(pemNamed: ""dec_private_key"")

        // signing the base64url string
        let clear = try ClearMessage(string: encodedStuff, using: .utf8)
        let signature = try clear.signed(with: privateKey, digestType: .sha256)
        print(signature.data)

        // making the signature string base64url encoded
        let finalSig = signature.base64String.replacingOccurrences(of: ""/"", with: ""_"")
        .replacingOccurrences(of: ""+"", with: ""-"")
        .replacingOccurrences(of: ""="", with: """")
        print(""finalSig: "", finalSig)

        // encrypt the signature and make sure it's in base64url
        let dataToEncrypt = try ClearMessage(string: finalSig, using: .utf8)
        let encryptedData = try dataToEncrypt.encrypted(with: publicKey, padding: .PKCS1)
        let finalEncryptedData = encryptedData.base64String.replacingOccurrences(of: ""/"", with: ""_"")
        .replacingOccurrences(of: ""+"", with: ""-"")
        .replacingOccurrences(of: ""="", with: """")
        print(finalEncryptedData)

        // concatenate assertion
        jwtAssertion = encodedStuff + ""."" + finalEncryptedData
        print(""JWT Assertion: \(jwtAssertion)"")

        // decrypt to see if it works
        let recodedBase64 = base64urlToBase64(base64url: finalEncryptedData)
        let theEncrypted = try EncryptedMessage(base64Encoded: recodedBase64)
        let clearMessage = try theEncrypted.decrypted(with: privateKey, padding: .PKCS1)
        // decode decrypted message
        let finalDecrypted1 = clearMessage.base64String
        let finalDecrypted2 = Data(base64Encoded: finalDecrypted1)
        let finalDecrypted3 = String(data: finalDecrypted2!, encoding: .utf8)
        print(""finalDecrypted3: "", finalDecrypted3 ?? ""no go!"") //this gives you the finalSig (which is decrypted)



    } catch let thisError {
        print(""An error has occurred!"",thisError)
    }

It turns out I have to use base64url for each, which is only a matter of replacing some characters with other, etc. So, everything looks good and still works on the jwt website, but when I send it using the code below I get this error message: 

{""error"":""invalid_grant"",""error_description"":""OpenSSL unable to verify data: error:0906D06C:PEM routines:PEM_read_bio:no start line""}

I've followed all the steps on how to do this for the Box API, but it's just not working out. I'd really like to know what I'm doing wrong here. 
Thanks in advance! 
","","537","<ios><swift><jwt><public-key-encryption><private-key>","0","","0","2018-03-08 13:27:58","","2","","3856941","","2017-07-03 13:08:12","2017-06-25 06:18:40",""
"43522151","Best way to encrypt the data & place it on the Secure FTP site","I have a requirement to develop a tool .
I am confused to use SSIS or windowsservice.
Please find below the requirement.
I need to fetch data from database.The data will be saved in txt /csv format.
The text file needs to be encrypted with PGP(Pretty Good Privacy).
I will have only public key to use for encryption/decryption.
After PGP encryption the ""EmpInfo.txt.pgp"" document will be placed on the Secure FTP site using
Protocol: SSH/SFTP
The above data feed document will be scheduled monthly once
Could you please let me know which is the best way to do it i.e using SSIS/windows service.
If there is any other way please let me know.
","SSIS can be used for this task, but you need licences for CozyRoc(third party tool) which provides PGP encryption/decryption (OpenPGP Task). SQL server for deploying the SSIS ispac file.

To fetch data from database to CSV:
DataFlowTask can be used, inside which you can specify Source Database (OLE DB Source) and Flat File destination (csv file).
Text file needs to be encrypted with PGP(Pretty Good Privacy):
CozyRoc tool OpenPGP Task can be used to encrypt the files.
Document will be placed on the Secure FTP:
File Transfer Task (CozyRoc) can be used for this purpose.
Data feed document will be scheduled monthly once: Once the ispac file is deployed on the server you can create a job for the deployed project and job can be configured to run at a particular time.

Note: SFTP task (CozyRoc) is deprecated, alternate for this is File Transfer Task.
","535","<c#><ssis><sftp><public-key-encryption><pgp>","0","0","1","2017-04-25 11:21:52","","3","1","","","","2017-04-20 14:18:46",""
"17987957","Alternatives to Windows Crypto API for C# RSA PKI?","I'm currently building a secure WhatsApp-like messenger for me and my friends. It encrypts all messages with AES and then uses RSA to encrypt the random AES key, it's very similar to PGP. For the desktop client, I have a nicely working version, but there's one thing that bugs me: at the moment I use the Windows Crypto API for generating key pairs and encrypting/decrypting. To make it short: I don't trust them anymore.
So what I'm looking for is a working and stable library that I can use for all these standard tasks of key creation, de-/encryption, etc. I found one over at the code project, but unfortunately it is quite buggy and unstable. Are there any libraries/frameworks that you can recommend? I really don't want to reinvent the wheel.
Thanks,
Rob
","Bouncycastle has a c# crypto library. It generally tracks their Java library but not perfectly. It is not well documented. However, I have found the source code to be very readable. What I have done in the past is use the Javadocs for the Java API as a starting point, then looked through the roughly corresponding classes in the c# library.
","529","<c#><dll><rsa><public-key-encryption>","1","2","1","2013-08-02 00:19:13","18006788","0","","","","","2013-08-01 07:43:24",""
"49059360","libsodium PHP storing private key in file","I have been using the openssl libraries in PHP to generate keypairs for RSA encryption, and have seen that in the latest version of PHP, 7.2, libsodium has now been integrated.
I would like to update to the newer library, and can generate the keypairs. In the openssl libraries I was able to export the keys to an encrypted keyfile, for storage on the filesystem.
How is this equivalence achieved with libsodium?
Thanks,
Leon
","libsodium does not support RSA. Per https://wiki.php.net/rfc/libsodium the algorithms that libsodium supports are as follows:

Password hashing and key derivation (sodium_crypto_pwhash_*)

Argon2i (the chosen algorithm of the Password Hashing Competition)
Scrypt

ECDH over Curve25519 (sodium_crypto_box)
Authenticated secret key encryption (sodium_crypto_secretbox)
Ed25519 digital signatures (sodium_crypto_sign)
AEAD Modes


ChaCha20-Poly1305
AES-256-GCM


One of the design principals of libsodium is that people don't know how to choose the best cryptographic primitive so libsodium chooses for you and doesn't let you choose for yourself.
","526","<php><encryption><rsa><public-key-encryption><libsodium>","2","1","1","2018-03-02 15:17:39","","0","","","","","2018-03-01 21:58:42",""
"9349296","how to resolve ssh key rejection while deploying 1st Rails3 app?","I'm trying to deploy a Rails3 application, for the 1st time, to Dreamhost using Git & Capistrano. Using Dreamhost's Capistrano setup instructions. Down to one last error:
Cap deploy:check => looks good.
Cap deploy:setup => looks good.

However, Cap deploy:cold  => fails:
** [alvarez.dreamhost.com :: out] Permission denied (publickey).
** [alvarez.dreamhost.com :: out] fatal: The remote end hung up unexpectedly

My config/deploy.rb file contains, among other variables,
ssh_options[:keys] = %w(/home/bubby/.ssh/id_rsa)        
set :chmod755, ""app config db lib public vendor script script/* public/disp*""
set :use_sudo, false

Public key setup completed on home PC. (Ubuntu.) Working with GitHub repository.
Have copied public key to domain directory per DH's instructions.
Any suggestions? Reaching the limit of DH's help capabilities. Thanks.
","Please set the repository url to the read-only version:
set :repository, ""https://github.com/bjpcjp/catalog.git""
Otherwise git is trying to use your private ssh key to authenticate against GitHub. This fails on server unless you take additional actions.
","526","<ruby-on-rails><git><capistrano><public-key-encryption><dreamhost>","1","3","1","2012-02-19 13:57:36","9349806","2","","","","","2012-02-19 12:52:04",""
"5952944","Public Key Encryption","I just wanted to make sure I am on the right track

Sender generates private key, encrypts message
Sender requests receivers public key
""Secret"" is then encrypted with this public key
Data sent to receiver for decryption

I assume logically speaking the ""Secret"" can only be encrypted with the receivers public key, although is the encrypted secret attached to the encrypted file / document?
","p1. Sender generates session symmetric key. 
p3. session key is encrypted using this public key. 
Yes, the encrypted secret is attached to the encrypted file. There's no risk in this as this is a session (one-time) key. 
","518","<public-key-encryption>","1","1","3","2017-08-27 04:18:54","5952964","0","","1033581","","2017-08-27 04:18:54","2011-05-10 16:00:16",""
"5952944","Public Key Encryption","I just wanted to make sure I am on the right track

Sender generates private key, encrypts message
Sender requests receivers public key
""Secret"" is then encrypted with this public key
Data sent to receiver for decryption

I assume logically speaking the ""Secret"" can only be encrypted with the receivers public key, although is the encrypted secret attached to the encrypted file / document?
","Public key encryption: An easy way to visualize this is as follows:
I send someone an unlocked box that they can put stuff in. Then they close it and it locks. They can ship me the box and I have the only key that will open the lock. 
The locked box is the public key encryption; the key is my private key. 
Symmetric key encryption works like this:
We buy a padlock at Home Depot and it comes with two keys. You take one and move to Boston; I take one and move to San Jose. We can padlock our box and ship it back and forth, only we have the keys.  
","518","<public-key-encryption>","1","2","3","2017-08-27 04:18:54","5952964","0","","1033581","","2017-08-27 04:18:54","2011-05-10 16:00:16",""
"5952944","Public Key Encryption","I just wanted to make sure I am on the right track

Sender generates private key, encrypts message
Sender requests receivers public key
""Secret"" is then encrypted with this public key
Data sent to receiver for decryption

I assume logically speaking the ""Secret"" can only be encrypted with the receivers public key, although is the encrypted secret attached to the encrypted file / document?
","
Sender generates session symmetric key. 

Symmetric meaning both parties will use the same key.

Sender encrypts data with session key.
Sender requests receivers public key.
Receiver sends public key while keeping the matching private key secret.
Session key is encrypted using receivers pubic key. 

Now only the receivers private key can decrypt the session key.

Encrypted Data and encrypted session key are sent to receiver. 
Receiver decrypts senders session key using receivers secret private key.
Receiver decrypts data using decrypted session key.

Sticking with John Browne's metaphor:

I lock a document in a box with a key.
I ask a friend to send me a box to which only they have a key too. 
I place a copy of my document-box-key in my friends box and lock it. 
I send the document box and my friends box (which contains the key to the document box) to my friend.
My friend opens their box with their secret key, and retrieves the document-box-key from inside.
My friend then uses that key to open the document box. 

","518","<public-key-encryption>","1","0","3","2017-08-27 04:18:54","5952964","0","","1033581","","2017-08-27 04:18:54","2011-05-10 16:00:16",""
"56480160","C#, .Net Core Private key authentication httpClient","We are having a problem with a friend with loading a private certificate to httpHandler.
  We are using .net core and need to host all aplication in the cloud.
Main goal is to get message from SQS and perform some specified API shots after with consumed data.
We have a problem with certificate with public / private key. We have tried I think all the possible ways of loading it.  
    public async Task<HttpResponseMessage> VisitHttps()
    {
        // Proceed for an invalid cerficate
        ServicePointManager.ServerCertificateValidationCallback +=
        (sender, certificate, chain, sslPolicyErrors) => true;

        // Add the certificate
        var handler = new HttpClientHandler();
        var cert = GetMyCert();
        if (cert != null)
        {
            handler.ClientCertificates.Add(cert);
            handler.ClientCertificateOptions = ClientCertificateOption.Manual;
            handler.SslProtocols = System.Security.Authentication.SslProtocols.Tls12;
            //handler.PreAuthenticate = true;
        }
        ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12 | SecurityProtocolType.Tls11 | SecurityProtocolType.Tls;


        HttpClient cclient = new HttpClient(handler)
        {
            //BaseAddress = new Uri(""https://someurl.com"")

        };
        cclient.DefaultRequestHeaders.Accept.Clear();
        cclient.DefaultRequestHeaders.Accept.Add(new 

MediaTypeWithQualityHeaderValue(""application/json""));
            return await cclient.GetAsync(""https://some-url.com/ping""); }

And the method GetMyCert() looks like below:  
string currentLocation = $""{AppDomain.CurrentDomain.BaseDirectory}key-public.crt"";
                //var xcert = new X509Certificate2(currentLocation, ""password"");

                ////var currentLocationPriv = $""{AppDomain.CurrentDomain.BaseDirectory}key-private.crt"";
                ////var privcert = new X509Certificate2(currentLocationPriv, ""password"", X509KeyStorageFlags.EphemeralKeySet);
                //var certStore = new X509Store(StoreName.My, StoreLocation.CurrentUser);
                //certStore.Open(OpenFlags.ReadWrite);
                //certStore.Add(xcert);
                //certStore.Close();
            //return xcert;

            X509Store store = new X509Store(""My"", StoreLocation.CurrentUser);
            X509Certificate2 cert;
            cert = new X509Certificate2(File.ReadAllBytes(currentLocation), ""password"", X509KeyStorageFlags.MachineKeySet);
            bool result = cert.Verify();
            var r2 = result;
            return cert;

commented lines are variances of what we have tried to do.
We have no idea what else we should try to handle this issue.
Any guidelines would be more than welcome  
EDIT:
I've tried registering this inside startup class but it seems not working anyway. I always got the private key field inside certificate empty. And hasPrivateKey marked as false.
 private void CreateCert(IServiceCollection services)
    {
        string currentLocation = $""{AppDomain.CurrentDomain.BaseDirectory}key-public.crt"";
        var certificate = new X509Certificate2(currentLocation, ""password"");
        services.AddHttpClient(""TestClient"", client =>
        {
            client.BaseAddress = new Uri(""https://someurl.com"");
        })
        .ConfigurePrimaryHttpMessageHandler(() =>
            {
            var handler = new HttpClientHandler();
            handler.ClientCertificates.Add(certificate);
            return handler;
        });
    }  

My Test code:
        [Fact]
    public async Task ShouldPong()
    {
        var testClient = new TestClient()
        {
            BaseAddress = new Uri(""https://someurl.com"")
        };
        var result = await testClient.GetAsync(""/ping"");
        result.StatusCode.Should().Be(HttpStatusCode.OK);
    }

TestClient:  
public class TestClient : HttpClient
{
    public TestClient()
        :base()
    {

    }

    public TestClient(HttpMessageHandler handler)
        : base(handler)
    {

    }
}  

EDIT:
The problem was solved when changing the .crt files into a .pfx file. Since the API we was hitting was hosted on nginx.
","I think you're not instantiating the client correctly, accordingly with the doc for Named Clients.
You will need to receive the IHttpClientFactory in run-time and ask for your named client like this:
 var client = _clientFactory.CreateClient(""TestClient"");

About testing with Dependency Injection, I believe this Microsoft tutorial can help: Integration Tests Asp.Net Core. The deal here is, as the Startup.cs file and the Core Dependency Injector are part of the framework, you need to setup simulate the web application in the test context. And Microsoft provides the WebApplicationFactory for that. 
This example demonstrate a test with a httpClient given by the IHttpClientFactory in a simulated web application environment.
","517","<c#><.net><public-key-encryption><private-key>","6","0","2","2019-06-12 10:01:25","56559458","4","","6134278","","2019-06-12 09:59:13","2019-06-06 14:55:34",""
"56480160","C#, .Net Core Private key authentication httpClient","We are having a problem with a friend with loading a private certificate to httpHandler.
  We are using .net core and need to host all aplication in the cloud.
Main goal is to get message from SQS and perform some specified API shots after with consumed data.
We have a problem with certificate with public / private key. We have tried I think all the possible ways of loading it.  
    public async Task<HttpResponseMessage> VisitHttps()
    {
        // Proceed for an invalid cerficate
        ServicePointManager.ServerCertificateValidationCallback +=
        (sender, certificate, chain, sslPolicyErrors) => true;

        // Add the certificate
        var handler = new HttpClientHandler();
        var cert = GetMyCert();
        if (cert != null)
        {
            handler.ClientCertificates.Add(cert);
            handler.ClientCertificateOptions = ClientCertificateOption.Manual;
            handler.SslProtocols = System.Security.Authentication.SslProtocols.Tls12;
            //handler.PreAuthenticate = true;
        }
        ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12 | SecurityProtocolType.Tls11 | SecurityProtocolType.Tls;


        HttpClient cclient = new HttpClient(handler)
        {
            //BaseAddress = new Uri(""https://someurl.com"")

        };
        cclient.DefaultRequestHeaders.Accept.Clear();
        cclient.DefaultRequestHeaders.Accept.Add(new 

MediaTypeWithQualityHeaderValue(""application/json""));
            return await cclient.GetAsync(""https://some-url.com/ping""); }

And the method GetMyCert() looks like below:  
string currentLocation = $""{AppDomain.CurrentDomain.BaseDirectory}key-public.crt"";
                //var xcert = new X509Certificate2(currentLocation, ""password"");

                ////var currentLocationPriv = $""{AppDomain.CurrentDomain.BaseDirectory}key-private.crt"";
                ////var privcert = new X509Certificate2(currentLocationPriv, ""password"", X509KeyStorageFlags.EphemeralKeySet);
                //var certStore = new X509Store(StoreName.My, StoreLocation.CurrentUser);
                //certStore.Open(OpenFlags.ReadWrite);
                //certStore.Add(xcert);
                //certStore.Close();
            //return xcert;

            X509Store store = new X509Store(""My"", StoreLocation.CurrentUser);
            X509Certificate2 cert;
            cert = new X509Certificate2(File.ReadAllBytes(currentLocation), ""password"", X509KeyStorageFlags.MachineKeySet);
            bool result = cert.Verify();
            var r2 = result;
            return cert;

commented lines are variances of what we have tried to do.
We have no idea what else we should try to handle this issue.
Any guidelines would be more than welcome  
EDIT:
I've tried registering this inside startup class but it seems not working anyway. I always got the private key field inside certificate empty. And hasPrivateKey marked as false.
 private void CreateCert(IServiceCollection services)
    {
        string currentLocation = $""{AppDomain.CurrentDomain.BaseDirectory}key-public.crt"";
        var certificate = new X509Certificate2(currentLocation, ""password"");
        services.AddHttpClient(""TestClient"", client =>
        {
            client.BaseAddress = new Uri(""https://someurl.com"");
        })
        .ConfigurePrimaryHttpMessageHandler(() =>
            {
            var handler = new HttpClientHandler();
            handler.ClientCertificates.Add(certificate);
            return handler;
        });
    }  

My Test code:
        [Fact]
    public async Task ShouldPong()
    {
        var testClient = new TestClient()
        {
            BaseAddress = new Uri(""https://someurl.com"")
        };
        var result = await testClient.GetAsync(""/ping"");
        result.StatusCode.Should().Be(HttpStatusCode.OK);
    }

TestClient:  
public class TestClient : HttpClient
{
    public TestClient()
        :base()
    {

    }

    public TestClient(HttpMessageHandler handler)
        : base(handler)
    {

    }
}  

EDIT:
The problem was solved when changing the .crt files into a .pfx file. Since the API we was hitting was hosted on nginx.
","The problem was resolved by creating a .PFX file. The server we were hitting was hosted on nginx that requires .pfx format. The .crt files are PEM certificate that was not valid for nginx.
","517","<c#><.net><public-key-encryption><private-key>","6","3","2","2019-06-12 10:01:25","56559458","4","","6134278","","2019-06-12 09:59:13","2019-06-06 14:55:34",""
"41713108","error: redeclaration of enumerator for contiki os libtomcrypt library","I am working on encryption in CONTIKI OS and COOJA simulator which i tired to use the library libtomcrypt. I include the library into CONTIKI folder but when i tired to call the rsa_make_key function it given me this error. Thanks in advance and hope to heard from you guys soon.
> make TARGET=cooja clean 
rm -f *~ *core core *.srec \
    *.lst *.map \
    *.cprg *.bin *.data contiki*.a *.firmware core-labels.S *.ihex *.ini \
    *.ce *.co
rm -rf 
rm -rf obj_cooja

> make sender-node.cooja TARGET=cooja 
  CC        sender-node.c
In file included from ../../../core/./../apps/libtomcrypt/src/headers/tomcrypt.h:80:0,
                 from sender-node.c:43:
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:4:4: error: redeclaration of enumerator 'PK_PUBLIC'
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:4:4: note: previous definition of 'PK_PUBLIC' was here
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:5:4: error: redeclaration of enumerator 'PK_PRIVATE'
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:5:4: note: previous definition of 'PK_PRIVATE' was here
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:16:4: error: redeclaration of enumerator 'PKA_RSA'
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:16:4: note: previous definition of 'PKA_RSA' was here
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:17:4: error: redeclaration of enumerator 'PKA_DSA'
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:17:4: note: previous definition of 'PKA_DSA' was here
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:20:16: error: redefinition of 'struct Oid'
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:20:16: note: originally defined here
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:24:3: error: conflicting types for 'oid_st'
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:24:3: note: previous declaration of 'oid_st' was here
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:26:5: error: conflicting types for 'pk_get_oid'
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:26:5: note: previous declaration of 'pk_get_oid' was here
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:32:16: error: redefinition of 'struct Rsa_key'
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:32:16: note: originally defined here
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:51:3: error: conflicting types for 'rsa_key'
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:51:3: note: previous declaration of 'rsa_key' was here
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:53:5: error: conflicting types for 'rsa_make_key'
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:53:5: note: previous declaration of 'rsa_make_key' was here
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:55:5: error: conflicting types for 'rsa_get_size'
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:55:5: note: previous declaration of 'rsa_get_size' was here
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:57:5: error: conflicting types for 'rsa_exptmod'
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:57:5: note: previous declaration of 'rsa_exptmod' was here
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:61:6: error: conflicting types for 'rsa_free'
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:61:6: note: previous declaration of 'rsa_free' was here
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:80:5: error: conflicting types for 'rsa_encrypt_key_ex'
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:80:5: note: previous declaration of 'rsa_encrypt_key_ex' was here
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:85:5: error: conflicting types for 'rsa_decrypt_key_ex'
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:85:5: note: previous declaration of 'rsa_decrypt_key_ex' was here
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:91:5: error: conflicting types for 'rsa_sign_hash_ex'
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:91:5: note: previous declaration of 'rsa_sign_hash_ex' was here
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:98:5: error: conflicting types for 'rsa_verify_hash_ex'
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:98:5: note: previous declaration of 'rsa_verify_hash_ex' was here
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:104:5: error: conflicting types for 'rsa_sign_saltlen_get_max_ex'
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:104:5: note: previous declaration of 'rsa_sign_saltlen_get_max_ex' was here
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:107:5: error: conflicting types for 'rsa_export'
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:107:5: note: previous declaration of 'rsa_export' was here
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:108:5: error: conflicting types for 'rsa_import'
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:108:5: note: previous declaration of 'rsa_import' was here
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:170:16: error: redefinition of 'struct Dh_key'
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:170:16: note: originally defined here
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:174:3: error: conflicting types for 'dh_key'
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:174:3: note: previous declaration of 'dh_key' was here
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:178:5: error: conflicting types for 'dh_get_size'
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:178:5: note: previous declaration of 'dh_get_size' was here
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:180:5: error: conflicting types for 'dh_make_key'
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:180:5: note: previous declaration of 'dh_make_key' was here
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:181:6: error: conflicting types for 'dh_free'
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:181:6: note: previous declaration of 'dh_free' was here
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:183:5: error: conflicting types for 'dh_export'
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:183:5: note: previous declaration of 'dh_export' was here
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:184:5: error: conflicting types for 'dh_import'
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:184:5: note: previous declaration of 'dh_import' was here
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:186:5: error: conflicting types for 'dh_shared_secret'
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:186:5: note: previous declaration of 'dh_shared_secret' was here
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:189:5: error: conflicting types for 'dh_encrypt_key'
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:189:5: note: previous declaration of 'dh_encrypt_key' was here
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:194:5: error: conflicting types for 'dh_decrypt_key'
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:194:5: note: previous declaration of 'dh_decrypt_key' was here
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:198:5: error: conflicting types for 'dh_sign_hash'
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:198:5: note: previous declaration of 'dh_sign_hash' was here
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:202:5: error: conflicting types for 'dh_verify_hash'
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:202:5: note: previous declaration of 'dh_verify_hash' was here
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:241:3: error: conflicting types for 'ltc_ecc_set_type'
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:241:3: note: previous declaration of 'ltc_ecc_set_type' was here
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:253:3: error: conflicting types for 'ecc_point'
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:253:3: note: previous declaration of 'ecc_point' was here
In file included from ../../../core/./../apps/libtomcrypt/src/headers/tomcrypt.h:80:0,
                 from sender-node.c:43:
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:271:3: error: conflicting types for 'ecc_key'
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:271:3: note: previous declaration of 'ecc_key' was here
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:274:31: error: conflicting types for 'ltc_ecc_sets'
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:274:31: note: previous declaration of 'ltc_ecc_sets' was here
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:278:6: error: conflicting types for 'ecc_get_size'
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:278:6: note: previous declaration of 'ecc_get_size' was here
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:280:6: error: conflicting types for 'ecc_make_key'
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:280:6: note: previous declaration of 'ecc_make_key' was here
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:281:6: error: conflicting types for 'ecc_make_key_ex'
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:281:6: note: previous declaration of 'ecc_make_key_ex' was here
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:282:6: error: conflicting types for 'ecc_free'
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:282:6: note: previous declaration of 'ecc_free' was here
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:284:6: error: conflicting types for 'ecc_export'
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:284:6: note: previous declaration of 'ecc_export' was here
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:285:6: error: conflicting types for 'ecc_import'
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:285:6: note: previous declaration of 'ecc_import' was here
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:286:6: error: conflicting types for 'ecc_import_ex'
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:286:6: note: previous declaration of 'ecc_import_ex' was here
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:288:5: error: conflicting types for 'ecc_ansi_x963_export'
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:288:5: note: previous declaration of 'ecc_ansi_x963_export' was here
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:289:5: error: conflicting types for 'ecc_ansi_x963_import'
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:289:5: note: previous declaration of 'ecc_ansi_x963_import' was here
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:290:5: error: conflicting types for 'ecc_ansi_x963_import_ex'
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:290:5: note: previous declaration of 'ecc_ansi_x963_import_ex' was here
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:292:6: error: conflicting types for 'ecc_shared_secret'
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:292:6: note: previous declaration of 'ecc_shared_secret' was here
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:295:6: error: conflicting types for 'ecc_encrypt_key'
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:295:6: note: previous declaration of 'ecc_encrypt_key' was here
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:300:6: error: conflicting types for 'ecc_decrypt_key'
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:300:6: note: previous declaration of 'ecc_decrypt_key' was here
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:304:5: error: conflicting types for 'ecc_sign_hash_raw'
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:304:5: note: previous declaration of 'ecc_sign_hash_raw' was here
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:308:6: error: conflicting types for 'ecc_sign_hash'
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:308:6: note: previous declaration of 'ecc_sign_hash' was here
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:312:5: error: conflicting types for 'ecc_verify_hash_raw'
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:312:5: note: previous declaration of 'ecc_verify_hash_raw' was here
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:316:6: error: conflicting types for 'ecc_verify_hash'
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:316:6: note: previous declaration of 'ecc_verify_hash' was here
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:321:12: error: conflicting types for 'ltc_ecc_new_point'
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:321:12: note: previous declaration of 'ltc_ecc_new_point' was here
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:322:12: error: conflicting types for 'ltc_ecc_del_point'
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:322:12: note: previous declaration of 'ltc_ecc_del_point' was here
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:328:5: error: conflicting types for 'ltc_ecc_projective_dbl_point'
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:328:5: note: previous declaration of 'ltc_ecc_projective_dbl_point' was here
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:331:5: error: conflicting types for 'ltc_ecc_projective_add_point'
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:331:5: note: previous declaration of 'ltc_ecc_projective_add_point' was here
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:349:5: error: conflicting types for 'ltc_ecc_mulmod'
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:349:5: note: previous declaration of 'ltc_ecc_mulmod' was here
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:353:5: error: conflicting types for 'ltc_ecc_mul2add'
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:353:5: note: previous declaration of 'ltc_ecc_mul2add' was here
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:369:5: error: conflicting types for 'ltc_ecc_map'
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:369:5: note: previous declaration of 'ltc_ecc_map' was here
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:403:3: error: conflicting types for 'dsa_key'
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:403:3: note: previous declaration of 'dsa_key' was here
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:405:5: error: conflicting types for 'dsa_make_key'
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:405:5: note: previous declaration of 'dsa_make_key' was here
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:406:6: error: conflicting types for 'dsa_free'
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:406:6: note: previous declaration of 'dsa_free' was here
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:408:5: error: conflicting types for 'dsa_sign_hash_raw'
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:408:5: note: previous declaration of 'dsa_sign_hash_raw' was here
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:412:5: error: conflicting types for 'dsa_sign_hash'
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:412:5: note: previous declaration of 'dsa_sign_hash' was here
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:416:5: error: conflicting types for 'dsa_verify_hash_raw'
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:416:5: note: previous declaration of 'dsa_verify_hash_raw' was here
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:420:5: error: conflicting types for 'dsa_verify_hash'
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:420:5: note: previous declaration of 'dsa_verify_hash' was here
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:424:5: error: conflicting types for 'dsa_encrypt_key'
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:424:5: note: previous declaration of 'dsa_encrypt_key' was here
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:429:5: error: conflicting types for 'dsa_decrypt_key'
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:429:5: note: previous declaration of 'dsa_decrypt_key' was here
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:433:5: error: conflicting types for 'dsa_import'
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:433:5: note: previous declaration of 'dsa_import' was here
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:434:5: error: conflicting types for 'dsa_export'
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:434:5: note: previous declaration of 'dsa_export' was here
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:435:5: error: conflicting types for 'dsa_verify_key'
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:435:5: note: previous declaration of 'dsa_verify_key' was here
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:437:5: error: conflicting types for 'dsa_shared_secret'
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:437:5: note: previous declaration of 'dsa_shared_secret' was here
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:445:14: error: nested redefinition of 'enum ltc_asn1_type_'
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:445:14: error: redeclaration of 'enum ltc_asn1_type_'
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:445:14: note: originally defined here
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:447:2: error: redeclaration of enumerator 'LTC_ASN1_EOL'
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:447:2: note: previous definition of 'LTC_ASN1_EOL' was here
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:448:2: error: redeclaration of enumerator 'LTC_ASN1_BOOLEAN'
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:448:2: note: previous definition of 'LTC_ASN1_BOOLEAN' was here
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:449:2: error: redeclaration of enumerator 'LTC_ASN1_INTEGER'
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:449:2: note: previous definition of 'LTC_ASN1_INTEGER' was here
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:450:2: error: redeclaration of enumerator 'LTC_ASN1_SHORT_INTEGER'
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:450:2: note: previous definition of 'LTC_ASN1_SHORT_INTEGER' was here
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:451:2: error: redeclaration of enumerator 'LTC_ASN1_BIT_STRING'
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:451:2: note: previous definition of 'LTC_ASN1_BIT_STRING' was here
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:453:2: error: redeclaration of enumerator 'LTC_ASN1_OCTET_STRING'
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:453:2: note: previous definition of 'LTC_ASN1_OCTET_STRING' was here
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:454:2: error: redeclaration of enumerator 'LTC_ASN1_NULL'
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:454:2: note: previous definition of 'LTC_ASN1_NULL' was here
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:455:2: error: redeclaration of enumerator 'LTC_ASN1_OBJECT_IDENTIFIER'
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:455:2: note: previous definition of 'LTC_ASN1_OBJECT_IDENTIFIER' was here
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:456:2: error: redeclaration of enumerator 'LTC_ASN1_IA5_STRING'
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:456:2: note: previous definition of 'LTC_ASN1_IA5_STRING' was here
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:457:2: error: redeclaration of enumerator 'LTC_ASN1_PRINTABLE_STRING'
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:457:2: note: previous definition of 'LTC_ASN1_PRINTABLE_STRING' was here
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:459:2: error: redeclaration of enumerator 'LTC_ASN1_UTF8_STRING'
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:459:2: note: previous definition of 'LTC_ASN1_UTF8_STRING' was here
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:460:2: error: redeclaration of enumerator 'LTC_ASN1_UTCTIME'
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:460:2: note: previous definition of 'LTC_ASN1_UTCTIME' was here
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:461:2: error: redeclaration of enumerator 'LTC_ASN1_CHOICE'
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:461:2: note: previous definition of 'LTC_ASN1_CHOICE' was here
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:462:2: error: redeclaration of enumerator 'LTC_ASN1_SEQUENCE'
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:462:2: note: previous definition of 'LTC_ASN1_SEQUENCE' was here
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:463:2: error: redeclaration of enumerator 'LTC_ASN1_SET'
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:463:2: note: previous definition of 'LTC_ASN1_SET' was here
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:465:2: error: redeclaration of enumerator 'LTC_ASN1_SETOF'
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:465:2: note: previous definition of 'LTC_ASN1_SETOF' was here
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:466:2: error: redeclaration of enumerator 'LTC_ASN1_RAW_BIT_STRING'
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:466:2: note: previous definition of 'LTC_ASN1_RAW_BIT_STRING' was here
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:467:2: error: redeclaration of enumerator 'LTC_ASN1_TELETEX_STRING'
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:467:2: note: previous definition of 'LTC_ASN1_TELETEX_STRING' was here
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:468:2: error: redeclaration of enumerator 'LTC_ASN1_CONSTRUCTED'
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:468:2: note: previous definition of 'LTC_ASN1_CONSTRUCTED' was here
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:469:2: error: redeclaration of enumerator 'LTC_ASN1_CONTEXT_SPECIFIC'
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:469:2: note: previous definition of 'LTC_ASN1_CONTEXT_SPECIFIC' was here
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:473:16: error: redefinition of 'struct ltc_asn1_list_'
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:473:16: note: originally defined here
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:484:3: error: conflicting types for 'ltc_asn1_list'
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:484:3: note: previous declaration of 'ltc_asn1_list' was here
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:497:5: error: conflicting types for 'der_encode_sequence_ex'
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:497:5: note: previous declaration of 'der_encode_sequence_ex' was here
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:502:5: error: conflicting types for 'der_decode_sequence_ex'
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:502:5: note: previous declaration of 'der_decode_sequence_ex' was here
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:507:5: error: conflicting types for 'der_length_sequence'
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:507:5: note: previous declaration of 'der_length_sequence' was here
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:515:5: error: conflicting types for 'der_decode_subject_public_key_info'
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:515:5: note: previous declaration of 'der_decode_subject_public_key_info' was here
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:522:5: error: conflicting types for 'der_encode_set'
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:522:5: note: previous declaration of 'der_encode_set' was here
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:525:5: error: conflicting types for 'der_encode_setof'
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:525:5: note: previous declaration of 'der_encode_setof' was here
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:533:6: error: conflicting types for 'der_decode_sequence_flexi'
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:533:6: note: previous declaration of 'der_decode_sequence_flexi' was here
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:535:6: error: conflicting types for 'der_sequence_free'
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:535:6: note: previous declaration of 'der_sequence_free' was here
In file included from ../../../core/./../apps/libtomcrypt/src/headers/tomcrypt.h:80:0,
                 from sender-node.c:43:
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:624:5: error: conflicting types for 'der_decode_choice'
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:624:5: note: previous declaration of 'der_decode_choice' was here
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:638:3: error: conflicting types for 'ltc_utctime'
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:638:3: note: previous declaration of 'ltc_utctime' was here
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:640:5: error: conflicting types for 'der_encode_utctime'
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:640:5: note: previous declaration of 'der_encode_utctime' was here
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:643:5: error: conflicting types for 'der_decode_utctime'
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:643:5: note: previous declaration of 'der_decode_utctime' was here
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:646:5: error: conflicting types for 'der_length_utctime'
../../../core/./../apps/libtomcrypt/src/headers/tomcrypt_pk.h:646:5: note: previous declaration of 'der_length_utctime' was here
make: *** [sender-node.co] Error 1
Process returned error code 2

This is the part where i tired to call the functionprng_state* prng;
 prng_state* prng;
  rsa_key* key;
  int result = rsa_make_key(
    prng,
    0,
    rsa_get_size(key),
    65537,
    key);

I had also include the tomcrypt.h for the library in the code
#include ""../apps/libtomcrypt/src/headers/tomcrypt.h""

","I suppose that either tomcrypt.h or `tomcrypt_pk.h"" file gets included several times and that therefore the same things get defined several times.
To try out if this is the reason, I'd add the following lines at the top and at the end of tomcrypt.h, respectively.
At the top:
#ifndef _TOMCRYPT_H
#define _TOMCRYPT_H

At the end:
#endif

Repeat this for tomcat_pk.h:
#ifndef _TOMCRYPT_PK_H
#define _TOMCRYPT_PK_H
...
#endif

If the code then compiles, then the problem is that the same header file gets included (directly or indirectly) more than once in a compilation unit may also apply to other header files, e.g. tomcrypt_pk.h. So you could also check if you incude, for example, tomcrypt_pk.h directly in your .c-file, while another header file (e.g. tomcrypt.h) also includes this file.
If this is the case, you have two principal ways of solving the problem: (1) remove unnecessary include statements, (2) protect the include file from being interpreted more than once, e.g. by surrounding the definitions by #ifndef - #define-statements. I'd prefer option (1) over option (2).
Note that - as pointed out by StoryTeller - it is not encouraged to edit third party library files, even not for introducing such #ifndef-#define-statements. If you cannot manage to follow option (1), you could still surround the respective #include-statements in your files, e.g.
// in myFile.c:
#ifndef _TOMCRYPT_PK_H
#define _TOMCRYPT_PH_H
#include ""tomcrypt_pk.h""
#endif

","517","<c><rsa><public-key-encryption><contiki>","0","2","1","2017-01-18 08:18:35","41713189","3","","","","","2017-01-18 06:54:08",""
"17799049","How to sign the soap body of a request on the client's side","I have built my Stub and other Web Service Facade classes via wscompile. The request can be built with no problems, but once it is sent off, the following error arises:
javax.xml.rpc.soap.SOAPFaultException: WSEC5061E: The SOAP Body is not signed.; null
at com.sun.xml.rpc.client.StreamingSender._raiseFault(StreamingSender.java:365)
at com.sun.xml.rpc.client.StreamingSender._send(StreamingSender.java:228)

The error clearly states that The SOAP Body is not signed. From my knowledge, this seems like I am doing something incorrect with setting the system properties. Below is what properties I have set:
System.setProperty(""javax.net.debug"",""ssl"");
System.setProperty(""javax.net.ssl.keyStoreType"",""pkcs12"");
System.setProperty(""javax.net.ssl.keyStore"",KeystorePath);
System.setProperty(""javax.net.ssl.keyStorePassword"",KeystorePassword);
System.setProperty(""javax.net.ssl.trustStoreType"",""jks"");
System.setProperty(""javax.net.ssl.trustStore"",TrustStorePath);
System.setProperty(""javax.net.ssl.trustStorePassword"",TrustStorePassword);         

I have searched a bit about signing the body of a SOAP request with a public key or KeyStore but don't really know much about the topic, so I am probably searching for the wrong keywords.
If anyone could point me in the direction of any information or tutorials it would be greatly appreciated.
Thanks
","","516","<java><soap><keystore><public-key-encryption><jax-rpc>","1","","0","2013-07-25 01:13:11","","0","","1510467","","2013-07-25 01:13:11","2013-07-22 23:18:14",""
"44517689","Moving a private key without passphrase from a server to another causes request of passphrase by GPG","I generated a key pair using GPG by following command in Debian 8. 
gpg --gen-key

I left the passphrase step of key generation empty and just hit the Enter key. After that, I exported private and public key using following commands.
gpg --export-secret-key -a ""X"" > private.key
gpg --export-key -a ""X"" > public.key

Then I tried to encrypt a folder using the private key. It was successful and without asking any passphrase the encrypted file was generated.
But When I transferred the public key to another computer with Ubuntu OS 14.04 and import it using following command, gpg requested passphrase. Even, by giving empty passphrase to gpg, it says that passphrase is incorrect.
gpg --import public.key

Furthermore, when I imported the private key in the second computer for encryption, it asks me passphrase again.
Does anyone have any idea what is the problem? 
","There is no need to export and import keys. Just copy the key files located in ~/.ssh/ on your source machine to the other system. 
","515","<encryption><debian><rsa><public-key-encryption><gnupg>","1","0","2","2018-12-09 08:31:30","53690618","0","","","","","2017-06-13 09:37:06",""
"44517689","Moving a private key without passphrase from a server to another causes request of passphrase by GPG","I generated a key pair using GPG by following command in Debian 8. 
gpg --gen-key

I left the passphrase step of key generation empty and just hit the Enter key. After that, I exported private and public key using following commands.
gpg --export-secret-key -a ""X"" > private.key
gpg --export-key -a ""X"" > public.key

Then I tried to encrypt a folder using the private key. It was successful and without asking any passphrase the encrypted file was generated.
But When I transferred the public key to another computer with Ubuntu OS 14.04 and import it using following command, gpg requested passphrase. Even, by giving empty passphrase to gpg, it says that passphrase is incorrect.
gpg --import public.key

Furthermore, when I imported the private key in the second computer for encryption, it asks me passphrase again.
Does anyone have any idea what is the problem? 
","It was because there exist other keyring in second system before. Indeed, it is required to clear all keys before import
","515","<encryption><debian><rsa><public-key-encryption><gnupg>","1","0","2","2018-12-09 08:31:30","53690618","0","","","","","2017-06-13 09:37:06",""
"37230706","getting public key format in javascript","I want to detect and validate (the format) of public keys, using javascript
are thy any libraries out there that can help me?
Basically I want a user to paste his key into a textarea and then I want to parse it to validate that this is in fact a rsa\ssh\etc. key, get the key name (description), bit size and any other relevant info.
Thank you.
","You should be able to do it with a regular expression.
This one matches the format that openssl outputs in.
var re = new RegExp(""^-----BEGIN CERTIFICATE-----\r?\n[A-Za-z0-9+\/=]{64}\r?\n[A-Za-z0-9+\/=]{64}\r?\n[A-Za-z0-9+\/=]{64}\r?\n[A-Za-z0-9+\/=]{64}\r?\n[A-Za-z0-9+\/=]{64}\r?\n[A-Za-z0-9+\/=]{64}\r?\n[A-Za-z0-9+\/=]{64}\r?\n[A-Za-z0-9+\/=]{64}\r?\n[A-Za-z0-9+\/=]{64}\r?\n[A-Za-z0-9+\/=]{64}\r?\n[A-Za-z0-9+\/=]{64}\r?\n[A-Za-z0-9+\/=]{64}\r?\n[A-Za-z0-9+\/=]{38}==\r?\n-----END CERTIFICATE-----\r?\n?$"");

re.test(""-----BEGIN CERTIFICATE-----\n""+
""MIICWDCCAcGgAwIBAgIJAPoiU8TwxKfZMA0GCSqGSIb3DQEBCwUAMEUxCzAJBgNV\n""+
""BAYTAkFVMRMwEQYDVQQIDApTb21lLVN0YXRlMSEwHwYDVQQKDBhJbnRlcm5ldCBX\n""+
""aWRnaXRzIFB0eSBMdGQwHhcNMTYwOTIxMjI1NzAzWhcNMjEwOTIwMjI1NzAzWjBF\n""+
""MQswCQYDVQQGEwJBVTETMBEGA1UECAwKU29tZS1TdGF0ZTEhMB8GA1UECgwYSW50\n""+
""ZXJuZXQgV2lkZ2l0cyBQdHkgTHRkMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKB\n""+
""gQDKylIukm5ZNIFsFxqMNlqazn+bWlzSXnATvyu783KMTXGRMbKb8C+SVra3gofs\n""+
""0D7cgPPECMINFP0PEGBvN6iQXaJOL4YQUbl2FQOQEi6xOATytaWqaHy9DiZ8zeRs\n""+
""WhT/m+6fjefZD1FhBaIAPi2dy/TKSBo61SU9f2O0NyyIiQIDAQABo1AwTjAdBgNV\n""+
""HQ4EFgQUpyK5bWplT+owyTHUUD5FG5frc80wHwYDVR0jBBgwFoAUpyK5bWplT+ow\n""+
""yTHUUD5FG5frc80wDAYDVR0TBAUwAwEB/zANBgkqhkiG9w0BAQsFAAOBgQAupycX\n""+
""kF3RhL0bUmxbh1nZaZ0ZAuWh4A1pc5XjwSGYLhWMHpNmrIvGnlUuyQlyE6L45DR2\n""+
""JekCMC0TBK8mv2BpaUCcPA844LSix1lSoNvuGQ7GRuLvPDDY/v8I28mRLsLmqxg2\n""+
""uz3VNtJwu/igOCf4mDI9ZoQWPBRb+pqXJ42V8Q==\n""+
""-----END CERTIFICATE-----\n"");

// outputs 'true'

","514","<javascript><public-key-encryption><public-key>","0","1","1","2016-09-22 23:49:25","","1","","","","","2016-05-14 19:00:02",""
"29762856","Encrypting .rtf and .docx files programmatically using java","I am able to encrypt and decrypt .txt files using RSA algorithm in java.
How can I do same for .rtf and .docx files?
Update: other files are encrypting but generating zero byte size file !!
here is the code
public void encrypt(String inputFile, String outputFile, PublicKey publicKey) throws InvalidKeyException, IOException {
    cipher = Cipher.getInstance(RSA);
    KeyPairGenerator kpg = KeyPairGenerator.getInstance(RSA);
    kpg.initialize(1024);
    KeyPair keyPair = kpg.generateKeyPair();
    privKey = keyPair.getPrivate();
    pubKey = keyPair.getPublic();
    cipher.init(Cipher.ENCRYPT_MODE, pubKey);

    FileInputStream fis = new FileInputStream(inputFile);
    FileOutputStream fos = new FileOutputStream(outputFile);
    CipherOutputStream cos = new CipherOutputStream(fos, cipher);
    byte[] block = new byte[1024];
    int i;
    try {
        while ((i = fis.read(block)) != -1) {
            cos.write(block, 0, i);
        }
    } catch (Exception e) {
        throw new IOException(e);
    } finally {
        cos.close();
    }
}

Even if I copy simple xml content in a text file and encrypt it, I get zero byte encrypted file :(
<note>
   <to>Tove</to>
   <from>Jani</from>
   <heading>Reminder</heading>
   <body>Don't forget me this weekend!</body>
</note>

","","511","<java><public-key-encryption><documents>","0","","0","2015-04-29 10:45:26","","5","","734298","","2015-04-29 10:45:26","2015-04-21 04:21:53",""
"14643282","How to encrypt in a pgcrypto compatible way in python","For a project I am working on I would like to use a pgcrypto compatible encryption in python. And specific the public key encryption part.
The problem I have is that most (all) of the implementations make use of subprocess like approaches to fork gpg, as I have to encrypt a lot of data (50.000+ entries per session) this approach will not work for me.
Can someone give me some pointers how that this could be achieved?
","Have a look at PyCrypto, it doesn't seem to use forking. pgcrypto can be configured to fit most crypto configurations.
","511","<python><postgresql><public-key-encryption><gnupg><pgcrypto>","4","1","1","2013-02-02 09:43:44","","3","1","","","","2013-02-01 09:34:30",""
"28522578","SecKeyRef causes EXC_BAD_ACCESS (code=1) error when using SecItemCopyMatching","I'm fairly new to crypto on iOS, and I've been running into an error that I haven't been able to find a solution for:
Whenever I try to get a SecKeyRef to a public key in the iOS keychain and use it, I end up with a EXC_BAD_ACCESS error. The SecKeyRef (called ""publicKeyReference"" in my code below is initially set to NULL, but it should have a value after the SecItemCopyMatching method is called, which can be seen from the memory address in the debugger window.
Here's my code:
SecKeyRef publicKeyReference = NULL;
NSData* publicTag = [publicKeyIdentifier dataUsingEncoding:NSUTF8StringEncoding];


NSMutableDictionary *queryPublicKey = [[NSMutableDictionary alloc] init];

// Set the public key query dictionary.
[queryPublicKey setObject:(__bridge id)kSecClassKey forKey:(__bridge id)kSecClass];
[queryPublicKey setObject:publicTag forKey:(__bridge id)kSecAttrApplicationTag];
[queryPublicKey setObject:(__bridge id)kSecAttrKeyTypeRSA forKey:(__bridge id)kSecAttrKeyType];
[queryPublicKey setObject:[NSNumber numberWithBool:YES] forKey:(__bridge id)kSecReturnPersistentRef];

// Get the key.
sanityCheck = SecItemCopyMatching((__bridge CFDictionaryRef)queryPublicKey, (CFTypeRef *)&publicKeyReference);

// Encrypt using the public.
sanityCheck = SecKeyEncrypt(    publicKeyReference,
                       PADDING,
                       plainBuffer,
                       plainBufferSize,
                       &cipherBuffer[0],
                       &cipherBufferSize
                       );        

And Here's some screenshots of the error and the debug window:


It seems that something is being assigned to the SecKeyRef, since the value of the address isn't ""0x0"", but I've been continually getting the EXC_BAD_ACCESS error regardless of what I've tried. Any and all help is greatly appreciated on the issue.
","I got the same error with SecKeyCreateEncryptedData function (which is intended for replacing the usage of SecKeyEncrypt on iOS 10+ ), it is not caused by the SecKeyRef, but the CFDataRef which is the encrypted data. So I suggest to check the encrypted data like plainBuffer, plainBufferSize, etc.
","510","<ios><null><exc-bad-access><public-key-encryption><seckeyref>","3","0","1","2019-10-05 10:34:09","","1","","","","","2015-02-15 02:55:42",""
"27477715","Spring-Batch: How to read encrypted XML file node by node using StaxEventReader","I am developing one Migration Utility which reads data from XML and migrate to ORACLE database.
I am using Spring Batch.
My source XML can be at any location :

Classpath location
Shared Network Location

My Spring Batch configuration is
<batch:job id=""reportJob"">
        <batch:step id=""step1"">
            <batch:tasklet>
                <batch:chunk reader=""xmlItemReader"" writer=""oracleDBWriter""
                    processor=""filterReportProcessor"" commit-interval=""1"">
                </batch:chunk>
            </batch:tasklet>
        </batch:step>
    </batch:job>

    <bean id=""filterReportProcessor"" class=""com.mkyong.processor.FilterReportProcessor"" />

    <bean id=""xmlItemReader"" class=""org.springframework.batch.item.xml.StaxEventItemReader"">
        <property name=""fragmentRootElementName"" value=""record"" />
        <property name=""resource"" value=""classpath:xml/report.xml"" />
        <property name=""unmarshaller"" ref=""reportUnmarshaller"" />
    </bean>

I am able to read XML and dumps to DB.
One of change is XML file will not be in plain format, it will be encrypted using Asymmetric algorithm (public-private key).
So I am wondering that I will not be able to use StaxEventItemReader to read node by node.
and before that I am not aware how to

decrypt file
Read node by node.

I was looking to use ByteArrayResource but not able to do that as m new to spring batch and have not so much idea of extension.
Please suggest.
","Spring Batch currently doesn't support decryption while reading.  Because of that, you'd need to do a separate step of decrypting the file before processing it.  Obviously you'll need the appropriate controls around the removal of the decrypted file once processing is complete.
","496","<spring-batch><public-key-encryption>","0","1","1","2014-12-17 15:19:53","27528861","2","","","","","2014-12-15 05:09:27",""
"11120619","SQLite database encryption","I am using open_ssl to create public and private keys to secure the transaction of a database and the server.
The problem is that the database's (sqllite) only have the input of a byte array of 16bits. The open ssl method that I'm using creates around 600 - 1024 bits, so using that is impossible.
Any idea of what I could do to the public key to use this 16bit encryption technique?
Thanks in advance!
","Sounds like you're trying to use public / private key pairs when symmetric keys ought to be used.
I'd just generate a random string of 16 bytes and use that.  You can get it from /dev/urandom on Linux.
Public / private key pairs are longer because they have special requirements that regular symmetric algorithm keys don't.  The mudolo of an RSA key pair, for instance, needs to be a multiple of two primes, which excludes a lot of numbers / strings.  eg. 60000 isn't a multiple of just two primes - it's factorization shows that it's a multiple of 5^4 * 2^5 * 3.
","494","<sqlite><openssl><public-key-encryption><private-key><16-bit>","0","0","1","2012-06-24 06:08:04","","0","","","","","2012-06-20 13:24:05",""
"12322072","Was given a GnuPG v1.4.5 public key file. Is there a simple dummy proof tool that can encrypt files on OSX?","I almost had to deal with PGP encryption before and all I remember was that it confused the heck out of me. Today, a client threw a curveball at us telling us we have to encrypt our CSV files before passing them over through FTP. They sent us a public key. Unfortunately, we will have fairly non-tech savvy people handling the CSV files and encrypting them and last time I remember there was quite a bit of command lining I had to do and initial setup of stuff in keychain or something. Is there a simple tool that I can walk the CSV managers through to set up their system and use a nice GUI tool to encrypt the file? Or do we have to do a crazy manual command line setup? I work remotely from the CSV managers so it isn't easy for me to figure it out on my system first and then try to mirror what I did here on their system. The managers are all running at least OSX Snow Leopard and I am on Lion
Thanks!
","GPGMail is pretty easy to use, although not easy to setup. Unfortunately it doesn't work in Mountain Lion yet.
Do you have to use public/private key encryption? If they're okay with shared key encryption, creating AES-encrypted disk images is fairly easy under OS X: http://blog.makezine.com/2007/03/18/how-to-create-an-encrypted-dis/
","494","<public-key-encryption><pgp><gnupg><openpgp>","0","0","2","2018-06-12 01:55:51","","0","","","","","2012-09-07 16:32:17",""
"12322072","Was given a GnuPG v1.4.5 public key file. Is there a simple dummy proof tool that can encrypt files on OSX?","I almost had to deal with PGP encryption before and all I remember was that it confused the heck out of me. Today, a client threw a curveball at us telling us we have to encrypt our CSV files before passing them over through FTP. They sent us a public key. Unfortunately, we will have fairly non-tech savvy people handling the CSV files and encrypting them and last time I remember there was quite a bit of command lining I had to do and initial setup of stuff in keychain or something. Is there a simple tool that I can walk the CSV managers through to set up their system and use a nice GUI tool to encrypt the file? Or do we have to do a crazy manual command line setup? I work remotely from the CSV managers so it isn't easy for me to figure it out on my system first and then try to mirror what I did here on their system. The managers are all running at least OSX Snow Leopard and I am on Lion
Thanks!
","GPG Tools is also very straight foreward - here is a super article about it: https://www.deepdotweb.com/2015/02/20/pgp-tutorial-os-x/ or directly the GPG Tools Help Page
Any File can then be encrypted just using the mac os x right click menu.
It is quite easy, but you will not be able to avoid a bit of setup.
","494","<public-key-encryption><pgp><gnupg><openpgp>","0","0","2","2018-06-12 01:55:51","","0","","","","","2012-09-07 16:32:17",""
"35580529","tweetnacl api and different key pairs","The tweetnacl library provides two functions to generate public and secret key pairs: crypto_box_keypair(pk,sk); and crypto_sign_keypair(pk,sk);:

The first function initializes key pairs which are intended to be used to
encrypt messages using the crypto_box(c,m,mlen,n,pk,sk); API and to
decrypt these later using the crypto_box_open(c,n,pk,sk) function.
Good example code seems to be hard to find.  Here is one for 
the library libsodium which is as tweetnacl based on NaCl.
The second function however initializes a keypair which can be used to 
sign a message using the crypto_sign(sm,&smlen,m,mlen,sk); API and 
later verify the signature using crypto_sign_open(m,&mlen,sm,smlen,pk);

While looking at the key generation code I figured out that in both cases the key generation starts with a 256 bit random number but yields different 
public keys in the end.  In fact the returned 512 bit signing sk key contains a copy of the public key pk in its so to say upper half.
I've looked through all documentation I could find which is not much.
Currently I've come to the conclusion that there is no proper way to use the same single key pair for both facilities.  Am I right?
","They are not the same kind of keypairs. The key generation for both may start with a 32-byte seed, but the relationship between the generated public and private keys in the two types of keypairs are different, so you cannot use them interchangeably. The fact that the private signing key contains its public key has no bearing on this matter.
","493","<c><digital-signature><public-key-encryption>","1","0","1","2016-07-22 00:19:22","","3","1","1816580","","2016-02-23 14:50:06","2016-02-23 14:45:10",""
"29842044","How WCF service and consumer client exchange keys for certificate?","I read a simplification about how public and private keys work on security.stackexchange.com: How can I explain the concept of public and private keys without technical jargon?.
Whatever I understood from there: private key sat at owner and owner send a encrypted data to some one along with public key. Public key decrypts that data at client side and also encrypt data of client sent to owner. Once the data is encrypted at client side by public key then the same public key can not reused to encrypt that data. Only the owner of the private key can encrypt and decrypt data as many as time.
Am I right whatever I understood?
My question is: how public key is travel from owner side to client side?
Every time the same public key will be sent from server end to client end or ever time the different public key will be send from server end to client end? 
@Ewan said as follows:

Client : Sends ""Hello""
Server : Here is my public key
Server : Please send your public key
Client : Here is my (encrypted with server public key)public key
Client : Here is an (encrypted with server public key)request
Server : Here is an (encrypted with client public key)response

This raises the following questions at said steps:

When first time client send Hello to server then how hello
will travel to server in encrypted way?
Do not understand why server find his public key?
Why server request client to send his public key?

","No you are wrong:

PersonA : creates public and private key pair
PersonA : Sends Public Key(A) to PersonB
PersonB : Encrypts data with Public Key(A)
PersonB : Sends encrypted Data to PersonA
PersonA : Decrypts encrypted Data with Private Key(A)

WCF can be setup to do multiple types of encryption and protocols but essentialy what i think you are asking boils down to
Handshake protocol:

Client : Sends ""Hello"" (not encrypted)
Server : Here is my public key (ServerPublicKEY = ""123"")
Server : Please send your public key
Client : Here is my public key (ClientPublicKEY = ""ABC"")
Client : Here is an (encrypted with ServerPublicKEY)request
Server : Decrypt with server private key and read
Server : Here is an (encrypted with ClientPublicKEY)response
Client : decrypt with client private key

to answer your additional questions
q1: ""When first time client send Hello to server then how hello will travel to server in encrypted way?""
a1: It is not encrypted
q2: ""Do not understand why server find his public key?""
a2: the server sends a public key so that the client can encrypt messages to send to the server
q3: ""Why server request client to send his public key?""
a3: The server needs the clients public key so it can encrypt messages to send to the client
","488","<encryption><certificate><public-key-encryption>","-2","1","1","2015-04-24 13:53:01","","2","","-1","","2017-03-17 13:14:46","2015-04-24 08:10:58",""
"41636664","Convert a public key to a string","In my development steps I need to consume an API which requires me to send a RSA public key to it, something like:
-----BEGIN RSA PUBLIC KEY-----
MIIBCgKCAQEAsFxynduUThmOU9j7Qg7C/XOKVccJ26AlL/SdEDA1YcFLfG4XcmLm
2rYAq4ia52tIJRuaiDGxaG3EKB38J35ycUe0pB48x+y+rMLDtn/p3PxyfOmkZ+VT
vKN025eNG9MisO+r6dQY8UaODtvRBzov2oB7+sQUD0i2zn7F5BmO86wFxibSk4OG
ssgNyrg6G/H7X/AssgWWtUDV+r4hHRu1aDYJHoNeYTF/nMZl3g9cxuASBOfDemNS
iZPCqiGKuZ3X3tdUBkz/XlkeC+X/tJT9TBEnY2SS4FllHQcMhYaTiKf1ScG3JLbd
ekJCK2fnzXAp/3+Wp0GZD12de/7XLaPMhwIDAQAB
-----END RSA PUBLIC KEY-----

For that purpose I use the Keystore API from Android, I do it so:
KeyStore keyStore = KeyStore.getInstance(SecurityConstants.KEYSTORE_PROVIDER_ANDROID_KEYSTORE);
        keyStore.load(null);

        String alias = SecurityConstants.KEYSTORE_KEY_ALIAS;

        // Create the keys if necessary
        if (!keyStore.containsAlias(alias)) {

            Calendar notBefore = Calendar.getInstance();
            Calendar notAfter = Calendar.getInstance();
            notAfter.add(Calendar.YEAR, 1);
            KeyPairGeneratorSpec spec = new KeyPairGeneratorSpec.Builder(context)
                    .setAlias(alias)
                    .setKeyType(KeyProperties.KEY_ALGORITHM_RSA)
                    .setKeySize(2048)
                    .setSubject(new X500Principal(""CN=test""))
                    .setSerialNumber(BigInteger.ONE)
                    .setStartDate(notBefore.getTime())
                    .setEndDate(notAfter.getTime())
                    .build();
            KeyPairGenerator generator = KeyPairGenerator.getInstance(SecurityConstants.TYPE_RSA, SecurityConstants.KEYSTORE_PROVIDER_ANDROID_KEYSTORE);
            generator.initialize(spec);

            KeyPair keyPair = generator.generateKeyPair();
        }

Now the thing is, I have to get the public key as a string and I'm not really sure what's the proper way to do it but I did it like that:
public static PublicKey getPublicKey() throws CertificateException, NoSuchAlgorithmException, IOException, KeyStoreException, UnrecoverableEntryException {
    KeyStore keyStore = KeyStore.getInstance(SecurityConstants.KEYSTORE_PROVIDER_ANDROID_KEYSTORE);
    keyStore.load(null);
    KeyStore.PrivateKeyEntry privateKeyEntry = (KeyStore.PrivateKeyEntry)keyStore.getEntry(SecurityConstants.KEYSTORE_KEY_ALIAS, null);
    return privateKeyEntry.getCertificate().getPublicKey();
}

public static String getPublicKeyAsString() {
    try {
        return ""-----BEGIN RSA PUBLIC KEY-----\n"" + Base64.encodeToString(getPublicKey().getEncoded(), Base64.DEFAULT) +
                ""-----END RSA PUBLIC KEY-----"";
    } catch (CertificateException e) {
        e.printStackTrace();
    } catch (NoSuchAlgorithmException e) {
        e.printStackTrace();
    } catch (IOException e) {
        e.printStackTrace();
    } catch (KeyStoreException e) {
        e.printStackTrace();
    } catch (UnrecoverableEntryException e) {
        e.printStackTrace();
    }
    return null;
}

I managed to get a string but I'm not sure if that's the way to go, might be not the same exact key that it's supposed to be stored in the keystore, I didn't see Google advocating in doing so. Anyone had that experience?
","","484","<android><keystore><public-key-encryption><android-keystore>","1","","0","2017-01-13 14:20:06","","3","","","","","2017-01-13 14:20:06",""
"4544637","what is file verification system for php project or licence checking the configuration files","My colleague asked me a question like
""license check to config file"".
when i searched i got this
http://www.google.com/search?q=file+verification+system&ie=utf-8&oe=utf-8&aq=t&rls=org.mozilla:en-US:official&client=firefox-a
and in the result i got this http://integrit.sourceforge.net/texinfo/integrit.html but could not grasp much of its idea.
Here is my thoughts...
Our project is written in codeigniter. The project owner is providing it to their customer. The owner is a business partner with that concept. Besides, the owner needs control of the project code so that the customer will not break rules with him like changing the code or moving it go another server or validity.
So the owner needs a system to enable disable the site. Let me give an example...
owner.com will have an admin panel where he can either disable or enable the client.com.
when he disables the client.com should display a custom message instead of loading the files.
client.com is written i a way that i will process requests from owner.com and also the other way round.
so, here i want a list of the concepts with which we can implement the ownership and control over client.com
any suggestions, links, references, answers will be helpful.
If i am missing something in my question i will update my question according to your comments if any so that the users can give in their idea without confusing of what i had asked.
THX
","Since the app is written in php , i don't think there is any way you can secure it to one server alone since php is plain text anybody can modify the part of the code where you test if the key is valid or not ( not eaven if you test it on you're own server eg: when the app is runned you make a curl request to one of you're own servers and test if the key is valid or not , based on the response the app shuts down or continue to run , but as i sayd since this is plain php you can't make it work couse anybody can edit a few lines of code and make everithing run perfectly without any tests for a key at all ) , you could probably use some external binary file but again since the app code is plain text ... looking forward to see if there is any way of securing an php app to run on a server alone 
p.s. ah , forgot about hiphop php witch turns you're php project into a c ( or is it c++ ? ) program and that can be secured better , but i don't know how it handles large frameworks ...
Edit
HipHop-PHP if you can use it , you're app will turn from php into a binary program , this way nobody has access to you're php code + it will run faster than just plain php , worth a try
Update
Oki so as the last reply suggested , you can use ioncube or anyother php code encription , i did a fast test with ioncube evaluation , using this you need to load a php extension on the client side witch in some cases might not be viable since clients hosts may not allow this , you need to concider the environment in witch you're app will run and it should be as wide as possible ( eg. would anybody buy an app if they have to change they'r web hosting plan/company , to allow the ioncube php extenstion to be loaded ? ) , plus decripting a whole framework like codeigniter whont be fast witch in turn raises more problems eg. caching ...
","481","<php><encryption><public-key-encryption>","0","1","3","2012-07-26 05:10:04","4544791","0","1","168868","","2012-07-26 05:10:04","2010-12-28 08:18:07",""
"4544637","what is file verification system for php project or licence checking the configuration files","My colleague asked me a question like
""license check to config file"".
when i searched i got this
http://www.google.com/search?q=file+verification+system&ie=utf-8&oe=utf-8&aq=t&rls=org.mozilla:en-US:official&client=firefox-a
and in the result i got this http://integrit.sourceforge.net/texinfo/integrit.html but could not grasp much of its idea.
Here is my thoughts...
Our project is written in codeigniter. The project owner is providing it to their customer. The owner is a business partner with that concept. Besides, the owner needs control of the project code so that the customer will not break rules with him like changing the code or moving it go another server or validity.
So the owner needs a system to enable disable the site. Let me give an example...
owner.com will have an admin panel where he can either disable or enable the client.com.
when he disables the client.com should display a custom message instead of loading the files.
client.com is written i a way that i will process requests from owner.com and also the other way round.
so, here i want a list of the concepts with which we can implement the ownership and control over client.com
any suggestions, links, references, answers will be helpful.
If i am missing something in my question i will update my question according to your comments if any so that the users can give in their idea without confusing of what i had asked.
THX
","Most of your Problems can be solved with ioncube.
http://www.ioncube.com
Ioncube allows you to encrypt php code and has a quite powerfull license managment system.
You will however have to implement the admin console yourself.
","481","<php><encryption><public-key-encryption>","0","1","3","2012-07-26 05:10:04","4544791","0","1","168868","","2012-07-26 05:10:04","2010-12-28 08:18:07",""
"4544637","what is file verification system for php project or licence checking the configuration files","My colleague asked me a question like
""license check to config file"".
when i searched i got this
http://www.google.com/search?q=file+verification+system&ie=utf-8&oe=utf-8&aq=t&rls=org.mozilla:en-US:official&client=firefox-a
and in the result i got this http://integrit.sourceforge.net/texinfo/integrit.html but could not grasp much of its idea.
Here is my thoughts...
Our project is written in codeigniter. The project owner is providing it to their customer. The owner is a business partner with that concept. Besides, the owner needs control of the project code so that the customer will not break rules with him like changing the code or moving it go another server or validity.
So the owner needs a system to enable disable the site. Let me give an example...
owner.com will have an admin panel where he can either disable or enable the client.com.
when he disables the client.com should display a custom message instead of loading the files.
client.com is written i a way that i will process requests from owner.com and also the other way round.
so, here i want a list of the concepts with which we can implement the ownership and control over client.com
any suggestions, links, references, answers will be helpful.
If i am missing something in my question i will update my question according to your comments if any so that the users can give in their idea without confusing of what i had asked.
THX
","Zend Guard would allow you to encode the source and require the licenses for running the files. The license may contain expiration dates, feature lists, etc. 
","481","<php><encryption><public-key-encryption>","0","1","3","2012-07-26 05:10:04","4544791","0","1","168868","","2012-07-26 05:10:04","2010-12-28 08:18:07",""
"51344351","Node.js crypto.publicEncrypt: 'Error: error:0906D06C:PEM routines:PEM_read_bio:no start line'","I'm trying to use the public key encryption in crypto.js, I want to encrypt some message using publicEncrypt, and decrypt it with privateDecrypt.
const crypto=require('crypto');
let alice=crypto.getDiffieHellman('modp14');
alice.generateKeys();
let enc=crypto.publicEncrypt(alice.getPublicKey(),Buffer.from('hello'));

However, the crypto.publicEncrypt line is causing the following error:
""Error: error:0906D06C:PEM routines:PEM_read_bio:no start line""
","The public key value returned by crypto.DiffieHellman.getPublicKey() is just the raw DH number, optionally encoded in base64 or hex. It is not in (any) PEM format or even ASN.1/DER format (which could easily be turned into PEM). Similarly crypto.ECDH.getPublicKey() is only the point (in conventional X9.62 format), not any PEM or DER format.
Moreover, DH and ECDH are not encryption algorithms, they are key-agreement (or secret-agreement) algorithms, and that operation is performed by DiffieHellman.computeSecret() or ECDH.computeSecret() respectively. Although not clearly documented, publicEncrypt actually calls OpenSSL's EVP_PKEY_encrypt{_init,} which doesn't support DH or ECDH, only RSA (with several choices of padding) and possibly GOST-wrap (I can't easily verify that and it may well be version dependent because upstream OpenSSL as of 1.1.0 a few years ago dropped the GOST algorithms).
In short, you can't do that.
","481","<node.js><encryption><public-key-encryption><diffie-hellman>","0","1","1","2018-07-15 10:57:45","51347719","0","","10044403","","2018-07-15 00:21:04","2018-07-15 00:16:00",""
"32247393","openssl smime message signing","Here is how one should sign a message with openssl smime? according to the docs
openssl smime -sign -in in.txt -text -out mail.msg -signer mycert.pem \
 -inkey mykey.pem -certfile mycerts.pem

But why is there a -signer key with a certificate -- isn't a private key passed in -inkey enough for message signing? Isn't it just a usual asymmetric encryption scheme, where my private key is for message signing and my certificate (i.e., signed public key corresponding to my private key) is for my counterpart to encrypt the message?
","As far as I found out this is for the second side to verify your signature -- in case if it does not have that certificate.
","481","<encryption><openssl><public-key-encryption><private-key><sign>","0","0","1","2015-08-27 12:21:25","","0","","","","","2015-08-27 10:50:16",""
"14426186","Make Javascript RSA message encryption giving same result","Hello I'm using a javascript RSA encryption process and it's working : 
<!DOCTYPE html>
    <html lang=""en"">
            <head>
            <title></title>
              <script src=""jquery-1.7.2.min.js"" type=""text/javascript""></script>
              <script type=""text/javascript"" src=""base64.js""></script>
              <script type=""text/javascript"" src=""asn1.js""></script>
              <script type=""text/javascript"" src=""jsbn.js""></script>
              <script type=""text/javascript"" src=""prng4.js""></script>
              <script type=""text/javascript"" src=""rng.js""></script>
              <script type=""text/javascript"" src=""rsa.js""></script>
              <script type=""text/javascript"" src=""pemconvert.js""></script>
              <script>
                    function loadpubKey(){
                            var pubkey = ""-----BEGIN PUBLIC KEY-----\nMFwwDQYJKoZIhvcNAQEBBQADSwAwSAJBAPBYvSszUjI5psKM958bHTDb+9NONv3X\nWVIGLR9/Al4j8/mqSDMhwFuu9oEyXl80+Ga2cohEQPpWyxzg3/tfGDUCAwEAAQ==\n-----END PUBLIC KEY-----"";
                            $(""#publicKey"").html(pubkey);
                        }
                    function RSAEncryptData()
                        {
                            var Message = $(""#Message_to_Encrypt"").val();
                            var pubkey = pem_import($(""#publicKey"").val());             
                            $(""#RSAMessageEncrypted"").html(pubkey.encrypt(Message));
                        }
            </script>
            </head>
        <body onload=""loadpubKey();"">
        <h1>RSA Encryption/Decryption using library From :https://github.com/tao-software/jsrsa</h1>
        <form>
                <strong>Public key         :</strong> <textarea rows=""3"" cols=""100""  id=""publicKey""></textarea><br>
                <strong>Message to RSA encrypt :</strong> <textarea rows=""3"" cols=""100""  id=""Message_to_Encrypt""></textarea><br>
                <input type=""button"" value=""RSA Encrypt"" onclick=""RSAEncryptData();"">
                <strong>RSA encrypted Message :</strong> <textarea rows=""3"" cols=""100""  id=""RSAMessageEncrypted""></textarea><br>
        </form> 
        </body>
    </html>

Each time I hit ""encrypt"" button using the same message to encrypt I get a new different encrypted value. What can I do to make this encryption giving the same encrypted result for the same message used?  
Actually what I want to do is to encrypt some phone numbers with a public key using RSA then store them in a table after that I will encrypt any phone number that I'll get through a process with the same public key in RSA and look in the table if there is a match. 
With the script above I will never find a match even if I'm encrypting the same phone number more than once that's why I want the result to be the same when encrypting the same phone number. Any idea is welcome.
Thank you in advance.
","It sounds like you want to sign a message with your private key and have other verify the signature with your public key. The libraries you have linked to provide an RSASign and RSAVerify methods, possibly under the sign and verify methods of an RSAKey instance. I'm not a JS programmer so all I can say is that's what it looks like. 
","478","<javascript><rsa><public-key-encryption>","2","-1","2","2013-06-24 19:37:33","","2","","1818439","","2013-01-20 22:00:48","2013-01-20 15:45:54",""
"14426186","Make Javascript RSA message encryption giving same result","Hello I'm using a javascript RSA encryption process and it's working : 
<!DOCTYPE html>
    <html lang=""en"">
            <head>
            <title></title>
              <script src=""jquery-1.7.2.min.js"" type=""text/javascript""></script>
              <script type=""text/javascript"" src=""base64.js""></script>
              <script type=""text/javascript"" src=""asn1.js""></script>
              <script type=""text/javascript"" src=""jsbn.js""></script>
              <script type=""text/javascript"" src=""prng4.js""></script>
              <script type=""text/javascript"" src=""rng.js""></script>
              <script type=""text/javascript"" src=""rsa.js""></script>
              <script type=""text/javascript"" src=""pemconvert.js""></script>
              <script>
                    function loadpubKey(){
                            var pubkey = ""-----BEGIN PUBLIC KEY-----\nMFwwDQYJKoZIhvcNAQEBBQADSwAwSAJBAPBYvSszUjI5psKM958bHTDb+9NONv3X\nWVIGLR9/Al4j8/mqSDMhwFuu9oEyXl80+Ga2cohEQPpWyxzg3/tfGDUCAwEAAQ==\n-----END PUBLIC KEY-----"";
                            $(""#publicKey"").html(pubkey);
                        }
                    function RSAEncryptData()
                        {
                            var Message = $(""#Message_to_Encrypt"").val();
                            var pubkey = pem_import($(""#publicKey"").val());             
                            $(""#RSAMessageEncrypted"").html(pubkey.encrypt(Message));
                        }
            </script>
            </head>
        <body onload=""loadpubKey();"">
        <h1>RSA Encryption/Decryption using library From :https://github.com/tao-software/jsrsa</h1>
        <form>
                <strong>Public key         :</strong> <textarea rows=""3"" cols=""100""  id=""publicKey""></textarea><br>
                <strong>Message to RSA encrypt :</strong> <textarea rows=""3"" cols=""100""  id=""Message_to_Encrypt""></textarea><br>
                <input type=""button"" value=""RSA Encrypt"" onclick=""RSAEncryptData();"">
                <strong>RSA encrypted Message :</strong> <textarea rows=""3"" cols=""100""  id=""RSAMessageEncrypted""></textarea><br>
        </form> 
        </body>
    </html>

Each time I hit ""encrypt"" button using the same message to encrypt I get a new different encrypted value. What can I do to make this encryption giving the same encrypted result for the same message used?  
Actually what I want to do is to encrypt some phone numbers with a public key using RSA then store them in a table after that I will encrypt any phone number that I'll get through a process with the same public key in RSA and look in the table if there is a match. 
With the script above I will never find a match even if I'm encrypting the same phone number more than once that's why I want the result to be the same when encrypting the same phone number. Any idea is welcome.
Thank you in advance.
","As Greg states in his comment, the randomness in the PKCS #1 padding will cause your encrypted result to vary each time.
Based on your use case, I would suggest you store a hash of the phone number alongside the encrypted data. You can then perform a quick lookup based on the hash. You may wish to salt your phone numbers prior to hashing.
Bear in mind that hashes are not guaranteed to be unique, so there is a teeny-tiny chance you'll get two hashes that clash.
","478","<javascript><rsa><public-key-encryption>","2","1","2","2013-06-24 19:37:33","","2","","1818439","","2013-01-20 22:00:48","2013-01-20 15:45:54",""
"10056716","Objective-C best method for decrypting NSStrings from .txt file","I've have a .txt file containing an NSString (encrypted using a private key) that my application uses (decrypted using a public key). Everything works beautifully for one string, however, if I have another NSString that I want to use I have to create another separate .txt file with that encrypted NSString. I know there has to be a way to put all the NSStrings in one file and somehow parse it, although I'm not sure how to achieve this. Could it be done using a .plist file that contains all the encrypted strings?
This is an example of the code I use to decrypt my .txt file with one NSString:
NSString *filePath = @""/path/to/file.txt"";

    if ([[NSFileManager defaultManager] fileExistsAtPath:filePath]) {
        crypto = [[MyCrypto alloc] initWithPublicKey:publicKeyData privateKey:privateKeyData];

        NSError *err;

        theString = [NSString stringWithContentsOfFile:filePath encoding:NSUTF8StringEncoding error:&err];

        if (!theString) {
            NSLog(@""error: %@"", err);
        }

[crypto setClearTextWithString:theString];
decryptedTextData = [crypto decrypt];
NSLog(@""Decrypted: %@"", theString);

...


If someone can shed some light on the subject with an example I would truly appreciate it. 
","Make a for loop and put your decription code inside, furthermore modify the line
 theString = [NSString stringWithContentsOfFile:filePath encoding:NSUTF8StringEncoding error:&err];

to the following (assuming i is the loop variable):
 theString = [array objectAtIndex:i];

Where you created array in the initialization part of your code, using:
NSArray *array = [NSArray arrayWithContentsOfFile:@""file.txt""];

The specified file also has to be a valid PLIST, an array being its root element. Example:
<plist>
<array>
    <string>alshnj369537nwlzba</string>
    <string>9ö876534tzhwjukmhnlfb</string>
    <!-- et cetera... -->
</array>
<plist>

Hope this helps.
","476","<objective-c><public-key-encryption><encryption>","0","1","1","2012-04-07 17:54:55","10056880","1","","1289217","","2012-04-07 17:45:15","2012-04-07 17:33:53",""
"26327647","Does iOS built-in security framework support ECC and ECDH?","I could find an answer from 2013 that iOS does not support ECC based encryption and a recommendation to use OpenSSL. I see at the Security Framework Reference some definitions for TLS_ECDH but it is not clear to me that ECC based is fully supported. I need to be able to generate a key pair based on secp256r1 and use the other party 64 byte public key to generate a shared secret by using ECDH. I also need to be able to use ECDSA to sign and verify signatures.
","","476","<ios><security><public-key-encryption><shared-secret>","3","","0","2014-10-12 16:57:36","","1","","","","","2014-10-12 16:57:36",""
"53906783","TPM and private key protection","Lets say I create a self-signed certificate in Powershell like this:
New-SelfSignedCertificate -Provider ""Microsoft Platform Crypto Provider"" -Subject ""CN=foobar"" -KeyExportPolicy NonExportable -KeyAlgorithm RSA  -KeyLength 2048 -CertStoreLocation ""Cert:\CurrentUser\My"" -NotAfter $((Get-Date).AddYears(10))  

The intended use of the certificate is code-signing of powershell scripts.
Because of the fact that the Provider is MS platform crypto provider the keys will be generated by the Trusted Platform Module (TPM) Chip embedded in my motherboard.
The private key is thus now stored in the ""black-box"" TPM. So is there any need to wrap / password-protect the private key?
","Any key created by a TPM is already wrapped, either by:

The storage root key for TPM 1.2, or
One of the primary keys indicated as the key's parent for TPM 2

So the key is wrapped by one of the root keys at the time of creating the key, and there is nothing special you have to do to make it happen. In fact, you cannot make it not happen.
The root keys themselves are guaranteed by the TPM spec to never leave the TPM. If you want to guarantee that your newly generated key will never leave the TPM either, make it non-migrateable. 
In addition, you can also make any of the aforementioned keys password-protected. Whether or not you do that depends on your specific requirements. Keep in mind however that the TPM spec is not focused on protecting against physical attacks, so if you lose physical access to your machine you should probably consider it compromised.
","475","<powershell><public-key-encryption><tpm>","1","1","1","2018-12-24 13:23:42","53914056","3","","7992712","","2018-12-24 09:34:52","2018-12-23 20:02:11",""
"6626048","Hot to encrypt using PHP and decrypt with Outlook Express","I'm trying to create this kind of system:

a user writes a mail with confidential data in it
I manage them with PHP, sending them to the administrator
only administrator should be able to open that mail

Achieving this seems to be possible this way:

encrypt the mail using an Outlook Express-compatible encryption (DES, 3DES, RC"" (various bit)) with PHP and an asymmetric pubblic key.
decrypt the mail using Outlook Express with an account that owns the asymmetric private key

However, I totally don't know what kind of certificate should I use, how to get it (I'd like to get at least a free one to do some testing) and I'm not sure this infrastructure would work.
","You can use PGP for this. It's more or less the standard of encrypting mails and there is a free open source utility for the server side of things. In the client, your users will have to install a plugin of which there are several to pick from.
I don't know of any native bindings of GnuPG for php, but you can execute it over the command line, using shell_exec
Update: Looks like someone even wrote a tutorial on this: http://devzone.zend.com/article/1265
","471","<php><email><outlook><public-key-encryption>","0","1","1","2019-03-19 01:15:44","6626089","1","0","387076","","2019-03-19 01:15:44","2011-07-08 14:37:20",""
"43586812","Resource id #2 when using openssl_pkey_get_private();","I get a resource(2) of type (OpenSSL key) Resource id #2 error when running
the decryption.php file can anyone help?
My decryption.php file:
<?php
{
if (isset($_POST['en_text']) && isset($_POST['key_file']))
$passphrase = $_POST['password'];
$encrypted = $_POST['en_text'];    
$key_file = $_POST['key_file'];
$privateKey = openssl_pkey_get_private( $key_file , $passphrase );
$sensitiveData =  """";
openssl_private_decrypt( $encrypted , $sensitiveData ,  $privateKey );
echo ""$sensitiveData"";
}
?>

and my form.html
    <form id=""frm1"" method=""post""  action=""decryption1.php"" >
    link to .pem file:<input type=""text"" value="""" name=""key_file"" /><br />
    Encrypted Text:<input type=""text"" value="""" name=""en_text""  /><br />
    Password: <input type=""password"" value="""" name=""password""  /><br />
    <input type=""submit"" value=""Decrypt"" id=""submit"" />
    </form>

I get an error 


resource(2) of type (OpenSSL key) Resource id #2.
    The link to my pem is file:///home/ssl/private.pem can anyone help?


","","471","<php><html><linux><public-key-encryption><php-openssl>","0","","0","2017-04-24 20:39:16","","2","","5113071","","2017-04-24 20:39:16","2017-04-24 11:25:09",""
"23649173","Prevent use of my API by authenticated clients (PGP/GPG maybe?)","I have a mobile app (Android) that makes tens of thousands of RESTful webservice requests to my server (per day of course).
For a variety of reasons, specifically the fact that my server has limited resources (both in hardware specs as well as in the form of pricey licensed content which is sent to my app via the API responses), I would like to ensure that only my apps are able to make successful API requests to my webservice.
I do know it's at least theoretically possible to do this, at least for Android-based systems because Google has a method to verify backend calls from Android on a trusted 3rd-party server (e.g., your API server). I believe it's based on OAuth and is tied to the requisite Google account that every Android device must have been setup with.
I actually ended up implementing this, but abandoned it after about a month as it needed the GoogleAuthUtil mechanism only provided in the most recent version of Google Play Services which had to be installed on the user's device (and of course this prevented most of my users from upgrading). Another problem is that multiple Google accounts can be on a device, so I'd either have to guess which was the right one, or worse, prompt/annoy the user to choose; these options were absolutely out of the question.
My initial thought on the matter is to use some kind of public key encryption, such as PGP/GPG. Include my API's public key in the app (with the understanding that it's not meant to be secure -- it's a PUBLIC key after all), and then in addition to what I already do to sign my API requests I could encrypt the entire contents using the API's public key.
A few days later (today) I finally got the time to sit down and hash out the design and implementation details, and it quickly dawned on me (as well as Robert below in the comments) that because the API's public key as well as the other signature related logic could theoretically be extracted, a successful hacker could then quite easily generate ""genuine"" API requests that my API server would decrypt with its private key and be none the wiser.
I did come across these two questions posted on programmers.stackexchange that have some really good answers on the subject by people much smarter than me:

https://softwareengineering.stackexchange.com/questions/219028/how-to-safeguard-a-rest-api-for-only-trusted-mobile-applications
https://softwareengineering.stackexchange.com/questions/220080/is-it-possible-to-check-a-client-side-application-identity-from-server-side

From what I have gathered, I'm willing to say that yes it's theoretically possible (just look at Google's GoogleAuthUtil OAuth-based backend verification system that I linked to above). However, it's incredibly painful to correctly implement/maintain, so unless your API is serving nuclear launch codes it's probably wise just to obfuscate the requests as best you can to prevent 90% of the cheaters.
If a mod wants to remove this question or mark it as a duplicate please feel free. OTOH, if someone comes along wondering the same thing maybe this will help them -- I never thought to ask this on programmers.stackexchange, but most of my leads were found in those questions. And of course in the unlikely scenario that a security guru sees this and can explain how this can be done relatively easily and effectively well that would be great too. ;)
","Why not generate on client side public/private keys and use the server public key to send the client private one to the server. Store client private key on server side with some kind of request identifier, and further requests could be crypted with client public key, in order to send user credential (is there any on your server?) for example.
Requests could however come from any kind of client aware of your interface, but at least that requests comes from users with valid credentials, otherwise they would fail (still have to got resources to handle wrong request).
Does this makes sens? I'm really new to this subject, but I also have read tons of articles without coming accross to really well defined solution.
","466","<android><web-services><public-key-encryption><gnupg><pgp>","0","1","1","2014-11-27 16:22:14","","4","1","-1","","2017-04-12 07:31:17","2014-05-14 08:18:15",""
"26425933","How to load RSA key pair without Openssl or other Library","CCFor a project I was searching for a simple RSA implementation to exchange a small secret via an unsecured but existing communication protocol. To keep it small and easy to portable to different platforms I did not want to link against OpenSSL or Crypto++. I found that as a part of the axTLS project which has a suitable license and an easy to extract RSA algorithm. The rsa function for encryption needs two components (as it usses the public key). The pup_exp is 65537 and modulus is the public part of the key and priv_exp the private one.
void RSA_priv_key_new(RSA_CTX **ctx, 
        const uint8_t *modulus, int mod_len,
        const uint8_t *pub_exp, int pub_len,
        const uint8_t *priv_exp, int priv_len
    )

For easy use for the user, I want to load a certificate like X.509 or PEM generated by a library like OpenSSL, but in C or C++ code without including the whole OpenSSL stuff. But at the moment I even did not find an understandable documentation of the common key file formats. 
","There are two types of RSA public key format widely used and they are PKCS#1 and X.509(SubjectPublicKeyInfo).
I have used libtomcrypt(http://libtom.org/?page=features). It supports both the RSA key formats and very much portable. The license is non restrictive. 
","465","<c++><c><rsa><public-key-encryption>","2","1","1","2014-10-17 13:42:10","","3","1","1922748","","2014-10-17 13:24:19","2014-10-17 13:18:05",""
"22484843","RSACryptoServiceProvider Conversion from C# to VB","I was sent the following code block by a third party client to allow me access some of there web services:
    RSACryptoServiceProvider rsaCryptoServiceProvider = new
    RSACryptoServiceProvider(dwKeySize);
    rsaCryptoServiceProvider.FromXmlString(xmlString);
    int keySize = dwKeySize / 8;
    byte[] bytes = Encoding.UTF32.GetBytes(inputString);
    int maxLength = keySize - 42;
    int dataLength = bytes.Length;
    int iterations = dataLength / maxLength;
    StringBuilder stringBuilder = new StringBuilder();
    for (int i = 0; i <= iterations; i++)
   {
     byte[] tempBytes = new byte[(dataLength - maxLength * i > maxLength) ?
     maxLength : dataLength - maxLength * i];
     Buffer.BlockCopy(bytes, maxLength * i, tempBytes, 0, tempBytes.Length);
     byte[] encryptedBytes = rsaCryptoServiceProvider.Encrypt(tempBytes, true);
     Array.Reverse(encryptedBytes);
     stringBuilder.Append(Convert.ToBase64String(encryptedBytes));
    }
    return stringBuilder.ToString();

And I have converted it from C# to VB.Net:
    Dim objEncrypter As New RSACryptoServiceProvider(Me.m_intKeySize)
    objEncrypter.FromXmlString(m_strEncryptionString)
    Dim intKeySize = Me.m_intKeySize / 8
    Dim objByte() As Byte = Encoding.UTF32.GetBytes(p_strXMLString.InnerXml)
    Dim intMaxLength As Integer = intKeySize - 42
    Dim intDataLength As Integer = objByte.Length
    Dim intIterations As Integer = intDataLength / intMaxLength
    Dim strResult As StringBuilder = New StringBuilder

    For intCounter As Integer = 0 To intIterations
        Dim tempBytes(IIf(intDataLength - intMaxLength * intCounter > intMaxLength, intMaxLength, intDataLength - intMaxLength * intCounter)) As Byte
        Buffer.BlockCopy(objByte, intMaxLength * intCounter, tempBytes, 0, tempBytes.Length)
        Dim objEncryptedBytes() As Byte = objEncrypter.Encrypt(tempBytes, True)
        Array.Reverse(objEncryptedBytes)
        strResult.Append(Convert.ToBase64String(objEncryptedBytes))
    Next

    Return strResult.ToString

The problem is it keeps throwing the following exception:
System.ArgumentException: Offset and length were out of bounds for the array or count is greater than the number of elements from index to the end of the source collection.
I can see what it's doing, trying to address areas of the byte array the don't exists but I can't see why. Unless either the C# code doesn't work or something has gotten lost in the translation. Any suggestions?
Kevin
","VB arrays are declared using the upper bound, not the length.
So use:
Dim tempBytes(If(dataLength - maxLength * i > maxLength, maxLength, dataLength - maxLength * i) - 1) As Byte

Also, you should use VB integer division for the following:
Dim iterations As Integer = dataLength \ maxLength

","464","<c#><vb.net><public-key-encryption>","2","1","1","2014-03-18 16:17:07","22485063","3","","","","","2014-03-18 16:08:47",""
"8253690","Decrypting using same private key that is used to encrypt","In RSA, 
I understand that if a data is encrypted using public key, corresponding private key can be used to decrypt it and vice versa. But :
Data encrypted using public key can be decrypted using same public key?
Data encrypted using private key can be decrypted using same private key?
This property is same for other public key algorithms too?
","
Data encrypted using public key can be decrypted using same public key?

No. That would defeat the purpose, because everyone knows the public key.

Data encrypted using private key can be decrypted using same private key?

No. That would defeat the purpose, because then you cannot send anyone an encrypted message (without knowing their private key, which by definition you don't).
Symmetric cryptography does work this way, though. There is only a single secret key, that you can use to encrypt your files before you put them on Dropbox, or that you can share with your friend to send messages that only the two of you can read. 
Also, in some public key systems, it is possible to derive the public key from the private key (not the other way around, of course). But this does not really change the principle (because the public key is known to the owner of the private key anyway).

This property is same for other public key algorithms too?

The definition of public key cryptography is that there is a key pair, consisting of a private half and a public half, one of them being used to create the message, the other to read them.
","462","<encryption><public-key-encryption>","0","3","1","2011-11-24 08:00:08","8253718","1","","","","","2011-11-24 07:52:12",""
"52677443","How to create a public key file in gpg from a given public key","A colleague of mine gave me their public key in text format and now I want to use that public key to encrypt my plain messages.
The thing is, I don't know how to create a key for an existing public key. As in how do I import the public key in GnuPG if I only have the public key in an email message? Like I know how to generate a random new key, just now how to create or import a public key
This is the public key given to me:
-----BEGIN PGP PUBLIC KEY BLOCK-----
Version: OpenPGP.js v3.0.9
Comment: https://openpgpjs.org

xsBNBFu4XWABCAD3CPThI8OyFNnvKsxdG5IxiGNWXrlN/Rw8Ors16TkSAsNg
j9s898/k9FZn9YiRGWG60zlfedgl0mQtHU+w/FBdgSV3EqVaUPjPsFGEq6eD
WOXKSPeTdhuYaM8wxt0ru7llLjxKBc6kw1CyXP+Da/gZLIX756KhqqDIlAKr
cx8oh4mvxpkj7L3qACDKIenJevhrz/iUIbnyBpd76qKQp0xojcqsqh7KXziC
xOiIL01lT130Hzd2FvcKiPlvbcKp7WJJy6cc9dKQ/3bSM6dqOQshqfUtWmxr
TU7s7jGGuexsTX5Bd/Rss2yTLv4Cn2MlNnOzcioUgE7XhKHvYZCFX3TvABEB
AAHNHFJlemFyaW9zIDxnYW51QGVvczJtYWlsLmNvbT7CwHUEEAEIACkFAlu4
XWAGCwkHCAMCCRCEnF0xNji/7gQVCAoCAxYCAQIZAQIbAwIeAQAAYKwH/0L5
TwxJPcAfv8/5Ku+VcSixnDmkHaVc4zd9VWpxDX9MpOmqNYOXwlHzKl1h2hm8
/M91fO+NOGxugDRathEtmlWrnE+/3X6nLhU63xtaj23cK17WfcU8xGzPpzPD
iRqMt4HwQlIby/Zp2GqhoxjRfYIULYtwubpsCZLoQtyUqR1c/JTYScWm51UP
CP8VyzqWBYgznI2yf5ODl4aOXN3S3Z1CaItcJcAcwomye14dfabVnPkQhlD2
BCr8kfBj3Y49PO60PUuaoes3t8ZTDpxHQTfAdx9ZNe53jy7FXMfOuYvdQWve
aG5SYP4hTVcSD8L/C3AnPcuqLR380A0qYqtKe5fOwE0EW7hdYAEIAMF/O+cI
mzCVH5U7xRZVy6gvQAwO+sHScUwaIYB0akst1Qocc3LcRV0C5qwu/gCYthIE
onShp1CNBgSuPUB6n1LlqV4/hvujSxBKycl3rKlasf1BWBLIlZk3cIDcZ8JH
crdXbpoEfHCUcE8D3mpLopC+2zF/uKeityhZwiOiWbmkqfqWibepUs2Y7f9E
x9ncIb8joEXzpZpW6YTVjZz7v7mcOnyNn/5HY4X+EI5Uk/SNXmm63j5IjBHz
34QPhLCaVm73Zo9FxDzau6bDlFhgyZ9yntuCi2QRQJqCSu/XU6KZ1PSzy/pO
wl8YQybJMe9+OP+BfbvDdXVXayzddRzFXpcAEQEAAcLAXwQYAQgAEwUCW7hd
YAkQhJxdMTY4v+4CGwwAANAlCAC0mQ9KsEThyPa6iygn9+MyIUY81XGxG9pY
1FbprCtRsIbB/YZ4hTdIwreW2uIllgMEizbMCUYFDNOrrftf8cZbuB3aEeu7
kiPa8cw6sIt/VDHtY9Z+NOQoPy4TtS7u4u8yJgi1/z79AGyncAakBg0FfSkV
EmbolYNRcvDt+/UQZ6L2cfn1nmeFhXWFZKV0TzI0W3JxAekaWfmxi7qQAeE/
BcQy1IrFkNSbHmSE1n9hj07BmlKW5dBavRxo6eOjS7nycx7WYf5Abq7ABAN+
LSBSJ9UYmph8Lc5bJFpP1LEmC4PXE7tZ9bhG7QseNyaEoMOcwZpkO0COzgGJ
yaBBfP21
=jHTx
-----END PGP PUBLIC KEY BLOCK-----

Once imported, would I encrypt my plaintext in the following manner:
echo ""New to the game"" | gpg -e -r recipient_userid textfile

I know it may seem easy to some, but it has been driving me mad only because I don't know how to create a file which has my colleagues public key in it
","This is a valid OpenPGP key file. Just store it into a text file (using a proper text editor which does not ""fiddle"" with the characters or newlines, so MS Office or Libreoffice do not qualify here) and rund gpg --import <path-to-keyfile>.
Usually the ASCII-armored keys (the base64-like copy you posted here) are stored with .asc extension, but this is not really important especially when working on the command line. If you want to import the key using a graphical user interface (by double clicking, ...) the extension might be important, though.
","459","<public-key-encryption><gnupg><public-key>","0","0","1","2018-10-06 10:02:49","","0","","","","","2018-10-06 09:08:18",""
"17616127","are public key and private key generated using same algorithm?","Can a message that encrypted by public key decrypts by private key?
Can a message that encrypted by private key decrypts by public key ?
Are public key and private key generated using same algorithm ?
","In respective order: yes, yes and yes.
Actually, only the public key can decrypt whatever was encrypted by the private one, and vice-versa.
Also notice that the names ""public"" and ""private"" are just arbitrary ones. It's just that the best use for pairs of asymetric keys is having one of them secret and the other known by everyone else, so that:

people with the public key can send you messages that only you can decrypt, with the private one;
you can send messages that can only be decrypted with your public key, so people know you are the true author.

","457","<security><encryption><public-key-encryption>","0","-1","2","2013-07-12 14:44:19","17617408","4","","","","","2013-07-12 13:31:55","2013-07-12 19:47:56"
"17616127","are public key and private key generated using same algorithm?","Can a message that encrypted by public key decrypts by private key?
Can a message that encrypted by private key decrypts by public key ?
Are public key and private key generated using same algorithm ?
","
Q: Are public key and private key generated using same algorithm ?

Generally speaking they are not generated using the same algorithm. For RSA they could have been generated identically, but most cryptography libraries use a known public exponent. This means that if the private key is known that it is easy to deduce the public key. In many key formats the public key is included with the private key or can be calculated easily from the information in the private key format.
Note that it is theoretically possible to generate a key pair where the public exponent has as much entropy as the private exponent. Some HSM's do allow such an operation.
All in all you cannot switch keys without sacrificing security for encryption purposes.

Q: Can a message that encrypted by private key decrypts by public key ?

In theory this could be the case if your cryptographic library allows it. Most libraries do not allow this however. First of all, as described above, it is not a secure operation. Furthermore, many libraries will assume that anything encrypted with a private key should use the padding mode for digital signature generation. In that case decryption is likely to fail; if it doesn't your ciphertext is not secure - so that's probably worse.
From the PKCS#1 specification:


The main mathematical operation in each primitive is exponentiation,
  as in the encryption and decryption primitives of Section 5.1. RSASP1
  and RSAVP1 are the same as RSADP and RSAEP except for the names of
  their input and output arguments; they are distinguished as they are
  intended for different purposes.


The padding mechanism that is applied before the primitive differs significantly for  encryption and signature generation.

Q: Can a message that encrypted by public key decrypts by private key?

That is the underlying idea of asymmetrical encryption. That means ""yes"".
","457","<security><encryption><public-key-encryption>","0","1","2","2013-07-12 14:44:19","17617408","4","","","","","2013-07-12 13:31:55","2013-07-12 19:47:56"
"9793870","Enable MSDTC WS-AT(Web Service Atomic Transactions) with SSL Certificate error","I'm having an error trying to enable a SSL Certificate for the WS-AT module fot MSDTC:
I've already follow the steps to create the certificate:
How to: Create and Install Temporary Client Certificates in WCF During Development
But still got this error:
""Could not use the SSL Certificate because it does not support Key Encipherment or Digital Signature""
I also made sure that I am using an admin accont and Application Data --> Microsoft --> Crypto -->RSA --> key file has the necessary full permissions to the admin account I am using
I'm using IIS 7, on a Windows 7 machine
Any clues?
","I've made it work, finally. I've used the next commands
makecert.exe -pe -n CN=MyCN -cy authority -r -sv C:\Mycer.pvk C:\Mycer.cer
makecert.exe -ss Root -sr LocalMachine -n CN=MyCN -cy authority -r -sv C:\Mycer.pvk
makecert -ss My -sr LocalMachine -n CN=MyFullDomainName -sky exchange -ir LocalMachine -iv C:\Mycer.pvk -ic C:\Mycer.cer
hope it helps someone
","454","<ssl-certificate><digital-signature><public-key-encryption><msdtc><wsat>","0","0","1","2012-03-22 18:09:15","","0","","","","","2012-03-20 19:50:55",""
"44929026","Server to Server ssh via Private Key -- Permission denied (publickey)","I know this question is from the list of probably most downvoted questions but nonetheless have been stuck on it since morning, so worth a try getting a positive response from the community. I have already went through various already questions asked and their solutions, but guess it's not working.
I am following the https://docs.gitlab.com/ee/ci/examples/deployment/composer-npm-deploy.html to write deploy script from gitlab runner to my server. Hence, the runner (ubuntu/docker based) needs to transfer the files to my server and because the runner is dynamic (In this case - both are droplets)

I am using the private key of my server
Placing the private key in the runner by running 


eval $(ssh-agent -s)
nano /root/.ssh/id_rsa_sid (pasted the private key content from my server (.ssh/id_rsa))
ssh-add /root/.ssh/id_rsa_sid
Identity added: /root/.ssh/id_rsa_sid (/root/.ssh/id_rsa_sid)

Now, when I do ssh -v root@serverip, I am getting Permission denied (publickey). (I tried -i key file path flag as well -- same result) 
root@ubuntu-512mb-sgp1-01:~/.ssh# ssh -v -i id_rsa_sid root@serverip
OpenSSH_7.2p2 Ubuntu-4ubuntu2.2, OpenSSL 1.0.2g  1 Mar 2016
debug1: Reading configuration data /etc/ssh/ssh_config
debug1: /etc/ssh/ssh_config line 19: Applying options for *
debug1: Connecting to 128.xxx.xxx.xxx [128.xxx.xxx.xxx] port 22.
debug1: Connection established.
debug1: permanently_set_uid: 0/0
debug1: key_load_public: No such file or directory
debug1: identity file id_rsa_sid type -1
debug1: key_load_public: No such file or directory
debug1: identity file id_rsa_sid-cert type -1
debug1: Enabling compatibility mode for protocol 2.0
debug1: Local version string SSH-2.0-OpenSSH_7.2p2 Ubuntu-4ubuntu2.2
debug1: Remote protocol version 2.0, remote software version 
OpenSSH_7.2p2 Ubuntu-4ubuntu2.2
debug1: match: OpenSSH_7.2p2 Ubuntu-4ubuntu2.2 pat OpenSSH* compat 0x04000000
debug1: Authenticating to 128.199.253.228:22 as 'root'
debug1: SSH2_MSG_KEXINIT sent
debug1: SSH2_MSG_KEXINIT received
debug1: kex: algorithm: curve25519-sha256@libssh.org
debug1: kex: host key algorithm: ecdsa-sha2-nistp256
debug1: kex: server->client cipher: chacha20-poly1305@openssh.com MAC: <implicit> compression: none
debug1: kex: client->server cipher: chacha20-poly1305@openssh.com MAC: <implicit> compression: none
debug1: expecting SSH2_MSG_KEX_ECDH_REPLY
debug1: Server host key: ecdsa-sha2-nistp256 SHA256:/El3UFF60r6/qNAwvfyIzx6Cf6N2YuXed/UU5QWEP1Q
debug1: Host '128.199.253.228' is known and matches the ECDSA host key.
debug1: Found key in /root/.ssh/known_hosts:1
debug1: rekey after 134217728 blocks
debug1: SSH2_MSG_NEWKEYS sent
debug1: expecting SSH2_MSG_NEWKEYS
debug1: rekey after 134217728 blocks
debug1: SSH2_MSG_NEWKEYS received
debug1: SSH2_MSG_EXT_INFO received
debug1: kex_input_ext_info: server-sig-algs=<rsa-sha2-256,rsa-sha2-512>
debug1: SSH2_MSG_SERVICE_ACCEPT received
debug1: Authentications that can continue: publickey
debug1: Next authentication method: publickey
debug1: Offering RSA public key: /root/.ssh/id_rsa_sid
debug1: Authentications that can continue: publickey
debug1: Trying private key: id_rsa_sid
debug1: Authentications that can continue: publickey
debug1: No more authentication methods to try.
Permission denied (publickey).

As you can see, it trying the file both as public key and private key but failing.
I went to the server for logs:     

cat /var/log/auth.log

Jul  5 13:13:16 docker-512mb-sgp1-01 sshd[2371]: Connection closed by 128.yyy.yyy.yy port 43292 [preauth]

Please let me know what I am doing wrong or if you may - point me to right resource.
","For anyone like me (who came looking for an answer here)
Did a bit of troubleshooting and found it to be rather a silly mistake.
Add the server's public key to it's authorized keys file. That will do :-)
Thanks
","453","<linux><ssh><public-key-encryption><gitlab-ci><gitlab-ci-runner>","-1","0","1","2017-07-06 05:03:02","","4","","","","","2017-07-05 14:27:52",""
"36883747","How to store modulus, public exponent and private exponent securely on Android?","I have given modulus, public exponent and private exponent and I need to store those values securely on Android. How can I achieve that?
Most examples are creating public and private keys without getting n,d,e parameters. I have given those n,e,d values and want to store them securely and then use those values to create my ICC Public Key Certificate and also to sign my dynamic data.
How can I achieve that? 
","Use the Keystore System.
setEntry() allows you to store any object implementing KeyStore.Entry. You can simply implement your own subtype if you need to store data that doesn't fit the defaults. (There's RSAPrivateCrtKey though, which you can store in a PrivateKeyEntry.)
","452","<android><security><encryption><public-key-encryption><emv>","10","6","2","2016-05-05 12:04:11","","3","1","5760943","","2016-05-05 11:12:02","2016-04-27 07:58:38",""
"36883747","How to store modulus, public exponent and private exponent securely on Android?","I have given modulus, public exponent and private exponent and I need to store those values securely on Android. How can I achieve that?
Most examples are creating public and private keys without getting n,d,e parameters. I have given those n,e,d values and want to store them securely and then use those values to create my ICC Public Key Certificate and also to sign my dynamic data.
How can I achieve that? 
","Probably, the only secure storage on an Android device would be Android Keystore System. 

Key material never enters the application process.

and 

Key material may be bound to the secure hardware.

(see http://developer.android.com/training/articles/keystore.html)
The problem with it is that you are restricted in what you can store in it. The KeyChain class allows you to store  private keys and certificate chains. While, the Keystore Provider supports the following types of entries: PrivateKeyEntry, SecretKeyEntry, TrustedCertificateEntry according to docs. In practice, trying to put an instance of SecretKeyEntry causes an exception.
I suggest putting two entries in the keystore. 

KeyStore.PrivateKeyEntry that you can instantiate given a PrivateKey (generated from the modulus and the private exponent using RSAPrivateKeySpec in conjunction with KeyFactory)
KeyStore.TrustedCertificateEntry with your self signed certificate, which you would have to pre-generate using java keytool and load at runtime from assets. It is not supposed to be secret by definition.

","452","<android><security><encryption><public-key-encryption><emv>","10","2","2","2016-05-05 12:04:11","","3","1","5760943","","2016-05-05 11:12:02","2016-04-27 07:58:38",""
"43108776","SFTP using public key authentication in ASP.NET","How to send a CSV file to SFTP by using public key authentication?
What is the procedure to do it?
","Using SSH.NET library in C#:
const string hostname = ""example.com"";
const string username = ""username"";
const string privateKey = @""C:\mykey"";
const string sourcePath = @""C:\local\path\file.txt"";
const string targetPath = ""/remote/path/file.txt"";

AuthenticationMethod authenticationMethod =
    new PrivateKeyAuthenticationMethod(username,
        new PrivateKeyFile[]{new PrivateKeyFile(privateKey)});

ConnectionInfo connectionInfo = new ConnectionInfo(hostname, username, authenticationMethod);

using (SftpClient client = new SftpClient(connectionInfo))
{
    client.Connect();

    using (Stream fileStream = new FileStream(sourcePath, FileMode.Open))
    {
        client.UploadFile(fileStream, targetPath, true);
    }

    client.Disconnect();
}

","450","<asp.net><ssh><sftp><public-key-encryption>","0","0","1","2017-03-30 06:45:31","","1","1","850848","","2017-03-30 06:05:30","2017-03-30 04:49:10",""
"11282469","If port 443 is open does this definitely means taht the remote host has a certificate?","I know that if port 443 is open that means the remote host supports the secure protocol https that encrypts the traffic, and therefore, the remote host has private and public key pairs. 
But my question is: If I knew that port 443 for a remote host is open, does this definitely means the remote host has a certificate ? Is it possible that there is a remote host which has private/public key pairs without certificate at all ??
","I can run whatever I want on port 443. I can run on it also http (withous 's').
So, the answer is no! It doesn't means that that host has a certificate. Not even a public/private key system.
","446","<public-key-encryption><network-security>","0","0","1","2012-07-01 13:48:42","11282496","1","","","","","2012-07-01 13:43:44",""
"10565424","Security between Android and PHP webservice","I have an Android application and an in-app purchase.
I want to post the user_id s of the ones that purchase it to my remote database via a php file.
I know some clever users can listen to the network and see the address of my php service. They may even find out what variables I am sending. 
I know how to encrypt user_id of course. I can do it either with RSA or AES. But I need to keep public key for RSA in the app.
Here is my question: A more clever attacker can easily get the public key and encrypt his user id and post to my web service. How do I prevent this scenario?
","I have solved my problem. What i need is to do signature verification on the server side. I just need to send the signature and the signed data to my server.
No one can trick these data. They are coming directly from google.
Once the signature verification is complete I just added the user to my mysql table.
","445","<php><android><security><rsa><public-key-encryption>","0","2","1","2012-05-19 19:54:29","10668435","3","0","","","","2012-05-12 16:22:25",""
"23575580","NTRU Key Exchange example implementation","Are there any open-source implementations of NTRU-KE (Preferably in Java or C#) out there that I can use as a reference for implementing it in a different language?
The implementations listed on the Wikipedia page for NTRUEncrypt don't have it included, and there's a paper covering the algorithm here but the language is a bit too technical for me to be able to understand it fully.
","Future readers, please prove me wrong (and post your own answer).
Given it is pretty new (November 2013) there probably aren't any implementations at all. Even the authors of the paper might not have implemented it themselves (you could ask them though). But as far as I can tell the protocol only uses operations that would have to be included in NTRUEncrypt implementations anyway. So it shouldn't be to difficult to write one yourself on top of an existing NTRU library. You can ask specific questions on the protocol here or on https://crypto.stackexchange.com. Probably you should try to understand the basics of NTRUEncrypt first, though.
","444","<math><public-key-encryption><public-key><ntruencrypt>","1","0","1","2016-10-11 14:14:33","","0","1","","","","2014-05-09 23:42:11",""
"10937601","How to implement encryption and decryption asymmetrically between client and server using openSSL library?","I am trying to create a secure connection between a simple client and server application programed in ASP.NET and C#. I have to encrypt the messages exchanged between server and client. I have to apply integrity too, by using hash functions. 
My question is how to parse the array of bytes exchanged and decrypt it. 
Note: each message exchanged contains:

original message encrypted with public key of the destination 
original message hashed (SH512) then encrypted with source private key  

How to send and parse such an array of bytes?
","","443","<c#><asp.net><openssl><public-key-encryption>","2","","0","2012-06-08 15:04:31","","8","","1237934","","2012-06-08 15:04:31","2012-06-07 18:22:58",""
"9751965","secure way to transfer user passwords in php","Hi I am googling these days to find a better way to send user info(including password) through the internet. Our servers don't have SSL installed. so need a very simple and secure method to send user info. In future my boss want to expand it to connect with desktop applications written in .net(C#). so the methods should be compatible with .net also. I need a advice or any thing that I can get a good  idea for developing a better solution. 
","1 curl (simple)
2 md5 encryption POST method
3 web service (complex)
","441","<c#><php><encryption><public-key-encryption><password-encryption>","3","0","4","2012-03-17 17:54:42","9752059","11","2","2421575","","2012-03-17 17:38:13","2012-03-17 17:08:47",""
"9751965","secure way to transfer user passwords in php","Hi I am googling these days to find a better way to send user info(including password) through the internet. Our servers don't have SSL installed. so need a very simple and secure method to send user info. In future my boss want to expand it to connect with desktop applications written in .net(C#). so the methods should be compatible with .net also. I need a advice or any thing that I can get a good  idea for developing a better solution. 
","If you mean sending the password from a login form to the server in a secure way, there is nothing better than SSL. You could try implementing a system like Public key encryption, but I think it would be easier to enable SSL...
To store the passwords, simply use an encryption function like sha1 
If you mean authenticating users in a desktop application you could implement oauth for example, which is not very hard and provides a very safe way of doing so.
","441","<c#><php><encryption><public-key-encryption><password-encryption>","3","1","4","2012-03-17 17:54:42","9752059","11","2","2421575","","2012-03-17 17:38:13","2012-03-17 17:08:47",""
"9751965","secure way to transfer user passwords in php","Hi I am googling these days to find a better way to send user info(including password) through the internet. Our servers don't have SSL installed. so need a very simple and secure method to send user info. In future my boss want to expand it to connect with desktop applications written in .net(C#). so the methods should be compatible with .net also. I need a advice or any thing that I can get a good  idea for developing a better solution. 
","Some thoughts:

Use TLS/SSL. Really. A web server certificate can be obtained for free these days. 
Use TLS/SSL. I really mean it. Don't be naive thinking that you can do a home brew solution, no matter which complex encryption algorithm you can imagine, that can outperform the legacy secure and easy of implementation as TLS/SSL is.
To solve a scenario with web clients and desktop clients, you should take a look at OAuth.

","441","<c#><php><encryption><public-key-encryption><password-encryption>","3","4","4","2012-03-17 17:54:42","9752059","11","2","2421575","","2012-03-17 17:38:13","2012-03-17 17:08:47",""
"9751965","secure way to transfer user passwords in php","Hi I am googling these days to find a better way to send user info(including password) through the internet. Our servers don't have SSL installed. so need a very simple and secure method to send user info. In future my boss want to expand it to connect with desktop applications written in .net(C#). so the methods should be compatible with .net also. I need a advice or any thing that I can get a good  idea for developing a better solution. 
","This approach is called Digest authentication and quite easy to implement. 
However, to use it you have to store passwords in plain text, you can't use it with hashes.
Which, in my point of view, makes it completely impossible to use. 
","441","<c#><php><encryption><public-key-encryption><password-encryption>","3","1","4","2012-03-17 17:54:42","9752059","11","2","2421575","","2012-03-17 17:38:13","2012-03-17 17:08:47",""
"41885964","Contiki mote type creation error when trying to use libtomcrypt library (rsa public key generation)","I am trying to work on RSA public key generation using libtomcrypt library for my school project. But I am unable to load the library in Cooja using Contiki OS.
I tried to compile the file I need into an object file and load it in .csc file.
This is the error message I got:
se.sics.cooja.GUI$SimulationCreationException: Mote type creation error: Error when creating corecomm instance: Lib1
        at se.sics.cooja.GUI.loadSimulationConfig(GUI.java:3440)
        at se.sics.cooja.GUI.loadSimulationConfig(GUI.java:3352)
        at se.sics.cooja.GUI.doLoadConfig(GUI.java:2397)
        at se.sics.cooja.GUI$4.run(GUI.java:636)
        at java.lang.Thread.run(Thread.java:745)
    Caused by: se.sics.cooja.MoteType$MoteTypeCreationException: Error when creating corecomm instance: Lib1
        at se.sics.cooja.CoreComm.createCoreComm(CoreComm.java:343)
        at se.sics.cooja.contikimote.ContikiMoteType.doInit(ContikiMoteType.java:385)
        at se.sics.cooja.contikimote.ContikiMoteType.configureAndInit(ContikiMoteType.java:348)
        at se.sics.cooja.contikimote.ContikiMoteType.setConfigXML(ContikiMoteType.java:1389)
        at se.sics.cooja.Simulation.setConfigXML(Simulation.java:681)
        at se.sics.cooja.GUI.loadSimulationConfig(GUI.java:3422)
        ... 4 more
    Caused by: java.lang.reflect.InvocationTargetException
        at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
        at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:57)
        at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
        at java.lang.reflect.Constructor.newInstance(Constructor.java:526)
        at se.sics.cooja.CoreComm.createCoreComm(CoreComm.java:334)
        ... 9 more
    Caused by: java.lang.UnsatisfiedLinkError: /home/user/contiki/regression-tests/12-rpl/code/obj_cooja/mtype834.cooja: /home/user/contiki/regression-tests/12-rpl/code/obj_cooja/mtype834.cooja: undefined symbol: rsa_get_size
        at java.lang.ClassLoader$NativeLibrary.load(Native Method)
        at java.lang.ClassLoader.loadLibrary1(ClassLoader.java:1968)
        at java.lang.ClassLoader.loadLibrary0(ClassLoader.java:1893)
        at java.lang.ClassLoader.loadLibrary(ClassLoader.java:1854)
        at java.lang.Runtime.load0(Runtime.java:795)
        at java.lang.System.load(System.java:1062)
        at se.sics.cooja.corecomm.Lib1.<init>(Lib1.java:49)
        ... 14 more
    se.sics.cooja.GUI$SimulationCreationException: Mote type creation error: Error when creating corecomm instance: Lib1
        at se.sics.cooja.GUI.loadSimulationConfig(GUI.java:3440)
        at se.sics.cooja.GUI.loadSimulationConfig(GUI.java:3352)
        at se.sics.cooja.GUI.doLoadConfig(GUI.java:2397)
        at se.sics.cooja.GUI$4.run(GUI.java:636)
        at java.lang.Thread.run(Thread.java:745)
    Caused by: se.sics.cooja.MoteType$MoteTypeCreationException: Error when creating corecomm instance: Lib1
        at se.sics.cooja.CoreComm.createCoreComm(CoreComm.java:343)
        at se.sics.cooja.contikimote.ContikiMoteType.doInit(ContikiMoteType.java:385)
        at se.sics.cooja.contikimote.ContikiMoteType.configureAndInit(ContikiMoteType.java:348)
        at se.sics.cooja.contikimote.ContikiMoteType.setConfigXML(ContikiMoteType.java:1389)
        at se.sics.cooja.Simulation.setConfigXML(Simulation.java:681)
        at se.sics.cooja.GUI.loadSimulationConfig(GUI.java:3422)
        ... 4 more
    Caused by: java.lang.reflect.InvocationTargetException
        at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
        at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:57)
        at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
        at java.lang.reflect.Constructor.newInstance(Constructor.java:526)
        at se.sics.cooja.CoreComm.createCoreComm(CoreComm.java:334)
        ... 9 more
    Caused by: java.lang.UnsatisfiedLinkError: /home/user/contiki/regression-tests/12-rpl/code/obj_cooja/mtype834.cooja: /home/user/contiki/regression-tests/12-rpl/code/obj_cooja/mtype834.cooja: undefined symbol: rsa_get_size
        at java.lang.ClassLoader$NativeLibrary.load(Native Method)
        at java.lang.ClassLoader.loadLibrary1(ClassLoader.java:1968)
        at java.lang.ClassLoader.loadLibrary0(ClassLoader.java:1893)
        at java.lang.ClassLoader.loadLibrary(ClassLoader.java:1854)
        at java.lang.Runtime.load0(Runtime.java:795)
        at java.lang.System.load(System.java:1062)
        at se.sics.cooja.corecomm.Lib1.<init>(Lib1.java:49)
        ... 14 more

This is the code I tried to use to add the object file (rsa_get_size.o) into the mote section in the Cooja simulation script.
 <motetype>
      se.sics.cooja.contikimote.ContikiMoteType
      <identifier>mtype456</identifier>
      <description>Sender</description>
      <source>[CONFIG_DIR]/code/sender-node.c</source>
      <commands>make TARGET=cooja clean
make sender-node.cooja rsa_get_size.o TARGET=cooja</commands>
      <moteinterface>se.sics.cooja.interfaces.Position</moteinterface>
      <moteinterface>se.sics.cooja.interfaces.Battery</moteinterface>
      <moteinterface>se.sics.cooja.contikimote.interfaces.ContikiVib</moteinterface>
      <moteinterface>se.sics.cooja.contikimote.interfaces.ContikiMoteID</moteinterface>
      <moteinterface>se.sics.cooja.contikimote.interfaces.ContikiRS232</moteinterface>
      <moteinterface>se.sics.cooja.contikimote.interfaces.ContikiBeeper</moteinterface>
      <moteinterface>se.sics.cooja.interfaces.RimeAddress</moteinterface>
      <moteinterface>se.sics.cooja.contikimote.interfaces.ContikiIPAddress</moteinterface>
      <moteinterface>se.sics.cooja.contikimote.interfaces.ContikiRadio</moteinterface>
      <moteinterface>se.sics.cooja.contikimote.interfaces.ContikiButton</moteinterface>
      <moteinterface>se.sics.cooja.contikimote.interfaces.ContikiPIR</moteinterface>
      <moteinterface>se.sics.cooja.contikimote.interfaces.ContikiClock</moteinterface>
      <moteinterface>se.sics.cooja.contikimote.interfaces.ContikiLED</moteinterface>
      <moteinterface>se.sics.cooja.contikimote.interfaces.ContikiCFS</moteinterface>
      <moteinterface>se.sics.cooja.interfaces.Mote2MoteRelations</moteinterface>
      <moteinterface>se.sics.cooja.interfaces.MoteAttributes</moteinterface>
      <symbols>false</symbols>
    </motetype>
    <motetype>

This is the code where I tried to implement RSA public key generation:
#include ""contiki.h""
#include ""lib/random.h""
#include ""sys/ctimer.h""
#include ""sys/etimer.h""
#include ""net/uip.h""
#include ""net/uip-ds6.h""
#include ""net/uip-debug.h""

#include ""simple-udp.h""

#include <stdio.h>
#include <string.h>
#include <tomcrypt.h>
#define UDP_PORT 1234

#define SEND_INTERVAL       (60 * CLOCK_SECOND)
#define SEND_TIME       (random_rand() % (SEND_INTERVAL))

static struct simple_udp_connection unicast_connection;

/*---------------------------------------------------------------------------*/
PROCESS(sender_node_process, ""Sender node process"");
AUTOSTART_PROCESSES(&sender_node_process);
/*---------------------------------------------------------------------------*/
static void
receiver(struct simple_udp_connection *c,
         const uip_ipaddr_t *sender_addr,
         uint16_t sender_port,
         const uip_ipaddr_t *receiver_addr,
         uint16_t receiver_port,
         const uint8_t *data,
         uint16_t datalen)
{
  printf(""Sender received data on port %d from port %d with length %d\n"",
         receiver_port, sender_port, datalen);
}
/*---------------------------------------------------------------------------*/
static void
set_global_address(void)
{
  uip_ipaddr_t ipaddr;
  int i;
  uint8_t state;

  uip_ip6addr(&ipaddr, 0xaaaa, 0, 0, 0, 0, 0, 0, 0);
  uip_ds6_set_addr_iid(&ipaddr, &uip_lladdr);
  uip_ds6_addr_add(&ipaddr, 0, ADDR_AUTOCONF);

  printf(""IPv6 addresses: "");
  for(i = 0; i < UIP_DS6_ADDR_NB; i++) {
    state = uip_ds6_if.addr_list[i].state;
    if(uip_ds6_if.addr_list[i].isused &&
       (state == ADDR_TENTATIVE || state == ADDR_PREFERRED)) {
      uip_debug_ipaddr_print(&uip_ds6_if.addr_list[i].ipaddr);
      printf(""\n"");
    }
  }
}

/*---------------------------------------------------------------------------*/
PROCESS_THREAD(sender_node_process, ev, data)
{
  static struct etimer periodic_timer;
  static struct etimer send_timer;
  uip_ipaddr_t addr;
  prng_state* prng;
  rsa_key* key;
  // register_algs();
  int size = rsa_get_size(key);
  int result = rsa_make_key(
    prng,
    0,
    size,
    65537,
    key);
  printf(""key %d\n"",result);
  PROCESS_BEGIN();

  set_global_address();

  simple_udp_register(&unicast_connection, UDP_PORT,
                      NULL, UDP_PORT, receiver);

  etimer_set(&periodic_timer, SEND_INTERVAL);
  while(1) {

    PROCESS_WAIT_EVENT_UNTIL(etimer_expired(&periodic_timer));
    etimer_reset(&periodic_timer);
    etimer_set(&send_timer, SEND_TIME);

    PROCESS_WAIT_EVENT_UNTIL(etimer_expired(&send_timer));

    uip_ip6addr(&addr, 0xaaaa, 0, 0, 0, 0x0201, 0x001, 0x001, 0x001);

    {
      static unsigned int message_number;
      char buf[20];

      printf(""Sending unicast to "");
      uip_debug_ipaddr_print(&addr);
      printf(""\n"");
      sprintf(buf, ""Message %d"", message_number);
      message_number++;
      simple_udp_sendto(&unicast_connection, buf, strlen(buf) + 1, &addr);
    }
  }

  PROCESS_END();
}

","Contiki uses GNU make based system. There is a Makefile for each application. To add extra files to your application, change the Makefile.
If it's just one file you need to add:
PROJECT_SOURCEFILES += rsa_get_size.c

If it's a whole directory of .c files, let's say tomcrypt in the application's folder: 
MODULES += ./tomcrypt

","440","<c><encryption><public-key-encryption><contiki><libtomcrypt>","2","1","1","2017-01-28 11:06:54","","0","1","2435820","","2017-01-28 11:06:54","2017-01-27 01:48:46",""
"42960226","REST API Authentication for client-to-server and server-to-server","I have a REST api( nodejs+express+mongo) that is being consumed by two types of users:

End-user (Authenticated via website, mobile apps using google-signin).
Gateways/services that will consume the API programmatically.

My question is about what is the best way to handle authentication for the second type of user ?
The users are stored in my database(linked to google-signin using their email-id)
The end-user creates gateways and services so I could provide an interface to manage credentials for that.(For example if I use API Keys or public-private key pair, then the user could use the website to add/remove credentials for gateways/services).
I am using passport-google-oauth2 Strategy to handle authentication for the first case.  What would be the best way to handle authentication for the second type of consumer ?
","Firstly, OAuth is an authorization protocol, not an authentication protocol. Google authentication is performed within a web login session, so I'm not clear how that would work for you in conjunction with a REST client.
Unfortunately there are many ways you could approach your problem, depending on how much code you want to write vs how many existing services you want to use instead and how you intend to do your user management.
","440","<passport.js><public-key-encryption><api-key><passport-google-oauth>","0","0","1","2017-03-24 15:59:29","","0","","5626936","","2017-03-24 15:59:29","2017-03-22 18:46:36",""
"19705861","RNCryptor Sign with OpenSSL and private key","i use RNCryptor in my iOS project.
i have a openssl .pem (private key) file. and only that file.
i need to use that file to encript / sign a string.
does anybody know how the code could look like to do that?
","RNCryptor is a format and library for managing AES symmetrical encryption. What you're describing is very likely RSA asymmetrical encryption (public/private key encryption). They're not compatible.
","439","<openssl><public-key-encryption><sign><pem><rncryptor>","0","0","1","2014-01-09 13:44:22","21021950","3","","","","","2013-10-31 11:55:18",""
"42753518","Nodejs crypto Decryption and browser encryption","I need to pass a public key to the browser from nodejs and the browser should encrypt the user data and send it to the nodejs server, then nodejs should be able to decrypt it.
I am trying to use crypto of nodejs in the server side and https://github.com/wwwtyro/cryptico cryptico in the browser.
I looked into angularjs-crypo, ursa etc, It made me more confused.
PS: Im new to encryption and cryptography, any help would be appreciated
","","439","<node.js><public-key-encryption><private-key>","0","","0","2017-03-12 21:40:32","","9","","","","","2017-03-12 21:40:32",""
"14127078","CA public key vs. server public key: what should I use to establish an HTTPS connection?","I need to create a client library to talk to a single service (say google.com) over HTTPS.
I would like the library to ship with all data (a certificate or a key) needed to authenticate the service.
I'm confused what this data should be. Should it be a public key of a certificate authority that signed google.com certificate? Or should it be google.com public key?
In all examples I've seen, the certificate authority's public key is used to authenticate a connection. But it seems unnecessary. If my library talks only to google.com, can I obtain and save google.com public key over secure channel (a browser) and then use this key directly to establish authenticated connections without using CA key again? 
","You need to use the server's key pair, not the CA. When establishing an HTTPS connection, data will be encrypted under the public key that gets presented. In order to decrypt that data, the server will need access to the corresponding private key, and it would be really bad if you had the CA's private key sitting around. 
The purpose of the CA is so the client can validate the server's certificate through some trusted 3rd party. Your client will need the CA certificate to correctly authenticate the server, but presumably will already have and trust that CA. 
Edit based on your comment:
There are more advantages to shipping the CA certificate instead of just the server certificate. 
The primary reason is that in the event there is ever a compromise of the server's private key, you don't need to distribute new certificates to all your clients. Since the CA should be better protected than your server, the CA can simply issue a new certificate, which clients will trust without any extra work. 
If you shipped your server's certificate, you'd need a way to securely update the certificate on every client. 
","438","<security><ssl><https><public-key-encryption>","0","2","1","2013-01-02 21:49:59","14127138","5","","","","","2013-01-02 18:18:01",""
"23643545","RSA BadPaddingException when decrypting","I am encrypting some bytes of data On a java smart card using a public key I generated on a desktop app, but when I try to decrypt the data on my desktop I get the BadPaddingException :  Data must start with zero, I read that this might be caused by the use of a false private key to decrypt the data.

First, I generated a public/private key pair on a desktop app and loaded them on the smart card using the following code (being generated in BigInteger type, I converted them to hexadecimal, and from hexa decimal to a byte array):
void keyGen(String ID)throws Exception{
    // where ID is the name of the user 
    KeyPairGenerator kpg = KeyPairGenerator.getInstance(""RSA"");
    kpg.initialize(512);
    KeyPair kp = kpg.genKeyPair();
    this.pubKey = (RSAPublicKey) kp.getPublic();
    this.privKey = (RSAPrivateKey) kp.getPrivate();

    KeyFactory fact = KeyFactory.getInstance(""RSA"");
    this.pub = fact.getKeySpec(kp.getPublic(), RSAPublicKeySpec.class);
    this.priv = fact.getKeySpec(kp.getPrivate(),  RSAPrivateKeySpec.class);

    saveToFile(ID+"".pub"", pub.getModulus(),  pub.getPublicExponent());
    saveToFile(ID+"".priv"", priv.getModulus(),  priv.getPrivateExponent());

}


here is the savetofile function:
    public void saveToFile(String fileName,  BigInteger mod, BigInteger exp) throws IOException {
          ObjectOutputStream oout = new ObjectOutputStream(
            new BufferedOutputStream(new FileOutputStream(fileName)));
          try {
            oout.writeObject(mod);
            oout.writeObject(exp);
          } catch (Exception e) {
            throw new IOException();
          } finally {
            oout.close();
          }
        }

This is the line used to store the public key on the smart card:
Main.sRmi.setPub(Crypto.hexStringToByteArray(Main.crypto.getPubMod().toString(16)), 
 toByteArray(""0""+Main.crypto.getPubexp().toString(16)));

(The zero is added to the string because we cannot convert a string of odd hexadecimals into bytes)

Then I try to encrypt the data using that public key inside the card, and this is the function I'm using:
private Cipher cipherRSA = Cipher.getInstance(Cipher.ALG_RSA_PKCS1, false);
private byte[] cipherText = new byte[64];

public byte[] encrypt(byte[] clearText){

    cipherRSA.init(rsa_PublicKey, Cipher.MODE_ENCRYPT);
    cipherRSA.doFinal(clearText, (short)0,  (short)clearText.length,cipherText, (short)0 );
    return cipherText;
}

Then I try to get this encrypted value on another desktop application, and decrypt it using the private key I'm reading from the file:

This is how I read the private key from the file:
public void init (String ID ) throws FileNotFoundException, IOException, Exception{

    Object o[] = openFile(ID+"".pub"");
    setPubMod((BigInteger) o[0]);
    setPubexp((BigInteger) o[1]);
    RSAPublicKeySpec keySpec = new RSAPublicKeySpec(this.pubMod, this.pubexp);
    KeyFactory fact = KeyFactory.getInstance(""RSA"");
    pubKey = (RSAPublicKey) fact.generatePublic(keySpec);
    o = openFile(ID+"".priv"");
    setPrivMod((BigInteger) o[0]);
    setPrivexp((BigInteger) o[1]);
    RSAPrivateKeySpec keySpec1 = new RSAPrivateKeySpec(this.privMod, this.privexp);
    fact = KeyFactory.getInstance(""RSA"");
    privKey = (RSAPrivateKey) fact.generatePrivate(keySpec1);
    cipher = Cipher.getInstance(""RSA/ECB/PKCS1PADDING""); 
    cipher.init(Cipher.ENCRYPT_MODE, pubKey);
}

After getting the private key in the BigInteger Variable, I decrypt using the following method:
public byte[] rsaDecrypt(byte[] data) throws Exception, BadPaddingException {

      Cipher cipher = Cipher.getInstance(""RSA"");
      cipher.init(Cipher.DECRYPT_MODE, privKey);
      byte[] clearData = cipher.doFinal(data);
      return clearData;
    }

To sum it all up, I create a key pair in BigInteger Format, I save the BigInteger Variable into a Serialized array of two BigIntegers to be used by the other desktop App, then I convert them into Hexa String, then into an array of bytes which i put inside the smart card.
Can anyone please tell me what's wrong with this procedure? Is it too much? Is there a better way to do so?

I think I know where the problem is, it's with the key stored inside the smart card, converting it the way I did obviously is not working, seeing how I read it from the card and printed it out and got a completely different result, so the question is now, how do I export successfully a public key created on java.crypto (in BigInteger) to the Smart card where public keys are stored in Bytes?
I found this:
Sets the public exponent value of the key. The plaintext data format is big-endian and right-aligned (the least significant bit is the least significant bit of last byte). Input exponent data is copied into the internal representation. 
so how can I convert a big integer to this big-endian byte format?
Now I'm trying to set the public key, here is the code i'm executing for that:
public void setPub(byte[] expo,byte[] mod){
    rsa_PublicKey.clearKey();
    rsa_PublicKey.setExponent(expo, (short)0, (short)expo.length);
    rsa_PublicKey.setModulus(mod, (short)0, (short)mod.length);
}

where expo is a 65 byte array and mod is a 3 byte array generated by a key gen, but I'm getting this error : 
Exception in thread ""AWT-EventQueue-0"" java.lang.UnsatisfiedLinkError: com.sun.javacard.impl.NativeMethods.getCurrentContext()B
at com.sun.javacard.impl.NativeMethods.getCurrentContext(Native Method)
at com.sun.javacard.impl.PrivAccess.getCurrentAppID(PrivAccess.java:454)
at javacard.framework.CardRuntimeException.<init>(CardRuntimeException.java:46)
at javacard.security.CryptoException.<init>(DashoA10*..:25)
at com.sun.javacard.javax.smartcard.rmiclient.CardObjectFactory.throwIt(Unknown Source)
at com.sun.javacard.javax.smartcard.rmiclient.CardObjectFactory.throwException(Unknown Source)
at com.sun.javacard.javax.smartcard.rmiclient.CardObjectFactory.getObject(Unknown Source)
at com.sun.javacard.rmiclientlib.JCRemoteRefImpl.parseAPDU(Unknown Source)
at com.sun.javacard.rmiclientlib.JCRemoteRefImpl.invoke(Unknown Source)
at sid2.CompteurImpl_Stub.setPub(Unknown Source)
at sid2.ServerRmi.setPub(ServerRmi.java:27)
at AddCard$2.actionPerformed(AddCard.java:160)

and this is how the keys priv and pub are generated : 
KeyPairGenerator kpg = KeyPairGenerator.getInstance(""RSA"");
    kpg.initialize(512);
    KeyPair kp = kpg.genKeyPair();
    this.pubKey = kp.getPublic();
    this.privKey = kp.getPrivate();

    KeyFactory fact = KeyFactory.getInstance(""RSA"");
    this.pub = fact.getKeySpec(kp.getPublic(), RSAPublicKeySpec.class);
    this.priv = fact.getKeySpec(kp.getPrivate(),  RSAPrivateKeySpec.class);

","""where expo is a 65 byte array and mod is a 3 byte array generated by a key gen, but i'm getting this error : ...""
Little wonder you get errors, the exponent is normally shorter than the modulus, which is always the same size as the key size. You are switching the modulus and the exponent around. 
","438","<java><encryption><rsa><public-key-encryption><javacard>","1","1","1","2019-04-06 09:45:50","","2","3","13860","","2019-04-06 09:45:50","2014-05-14 00:01:00",""
"31647835","FATCA IDES Response message decryption","I have successfully uploaded the fatca data packets to IDES. I got response from IDES, now I want to decrypt the messages.
Whenever i tried to decypt using our private key it throws ""BAD DATA"" error.
I have verified my certificate is valid, and we uploaded same certificate to IDES at the time of registration.
I am using c#.net as per IDES guidelines.
What might be the error and any areas which I can cross check?
","Maybe a bit late, but I had published a tool for this. 
It's the IDES receiver and it's source code is here. 
It's written in javascript
","437","<public-key-encryption>","0","0","2","2018-08-10 09:30:19","","0","","1033581","","2018-01-18 04:34:18","2015-07-27 08:01:51",""
"31647835","FATCA IDES Response message decryption","I have successfully uploaded the fatca data packets to IDES. I got response from IDES, now I want to decrypt the messages.
Whenever i tried to decypt using our private key it throws ""BAD DATA"" error.
I have verified my certificate is valid, and we uploaded same certificate to IDES at the time of registration.
I am using c#.net as per IDES guidelines.
What might be the error and any areas which I can cross check?
","I'd recommend to use the official IDES Data Tool, this one has been validated by the IRS and you can download it from https://github.com/IRSgov/IDES-Data-Preparation-Dot-Net.

Install the IDES tool
Open the Decrypt Notification tab
Upload the received Data Packet
Check your Output folder, you should have the Data Packet unzipped, and among others the XML decrypted.

If you have still problems with this process you can also debug this application from the source code.
","437","<public-key-encryption>","0","0","2","2018-08-10 09:30:19","","0","","1033581","","2018-01-18 04:34:18","2015-07-27 08:01:51",""
"46052241","Openssl cannot decrypt message using PuttyGen private key","I've created public and private keys using PuttyGen then the public key was used to encrypt a message.
I am now trying to decrypt such message using the private key with the following command:
echo [my encrypted message] | openssl enc -d -base64 -A | openssl rsautl -decrypt -inkey ~/.ssh/private.ppk

but I get the error:
unable to load Private Key
6870300:error:0906D06C:PEM routines:PEM_read_bio:no start line:pem_lib.c:707:Expecting: ANY PRIVATE KEY

The private key looks like this (actual key omitted):
PuTTY-User-Key-File-2: ssh-rsa
Encryption: none
Comment: rsa-key-20170724
Public-Lines: 6
[...]
Private-Lines: 14
[...]
Private-MAC: [...]

What's wrong?
","Thanks to this guy I sorted it out.
I've reopened the private key with PuttyGen and exported as OpenSSH, then used this new file to decrypt the message.
","437","<encryption><public-key-encryption>","0","0","1","2017-09-05 10:13:40","","0","","2442991","","2017-09-05 10:13:40","2017-09-05 10:02:03",""
"31104143","How are digital signatures useful?","As per my understanding, if A and B want to talk and X is the man in the middle,  then X can just delete B's public key and make A believe that X's public key is actually B's public key. Now whenever A asks for a digital signature from B, the message will actually go to X. X will use his private key to sign the digest, which then A will decrypt using X's public key, thinking that it was B who signed it.
This is a typical man in the middle attack scenario, and there does not seem a clear solution as to how Digital Signatures can be helpful in this case.
My question:1) Is there some way that A and B can communicate even if they have X in the middle.
2) If not, then why are digital signatures useful(under what assumptions). An assumption can be as simple as:: X can only look at the public keys but not modify them(X cannot turn B's public key to X's public key). 
","Say A is Alice and B is her Bank. The bank gets a public key certificate signed by a trusted authority whose key Alice already knows. The certificate proves that a certain public key actually belongs to that bank. When Alice tries to connect to her bank, if Xavier tries to switch the bank's key for his own, Alice won't trust Xavier's key, because it isn't certified as belonging to the bank. If Xavier tries to replace Alice, he won't be able to log in as Alice. He doesn't have her password, and he can't get it, because he can't successfully pose as her bank.
","436","<digital-signature><public-key-encryption>","-2","1","1","2015-06-28 20:10:39","31104263","1","","","","","2015-06-28 19:56:05",""
"15961454","Ruby OpenSSL unable to decrypt","I am able to encrypt files, but when I try to decrypt them I am getting ""error reading input file"".  I am using a public/private keypair to encrypt the passphrase that is used in encrypting the file.  This is so that only the owner of the private key is able to decrypt the file.
My encryption method uses the Ruby OpenSSL module and looks like:
file = params[:submission][:report].path
filename = params[:submission][:report].original_filename.gsub("" "", ""_"")

pubkey = OpenSSL::PKey::RSA.new File.read ""#{Rails.root.to_s}/key/pubkey.pem""
cipher = OpenSSL::Cipher.new(""aes-256-cbc"")
cipher.encrypt
cipher.key = key = (0...50).map{ ('a'..'z').to_a[rand(26)] }.join

buf = """"
File.open(""#{Rails.root.to_s}/evidence/#{filename}.enc"", ""wb"") do |outf|
  File.open(file, ""rb"") do |inf|
    while inf.read(4096, buf)
      outf << cipher.update(buf)
    end
    outf << cipher.final
  end
end

encrypted_key = pubkey.public_encrypt key
File.open(""#{Rails.root.to_s}/evidence/#{filename}_passphrase.bin"", 'wb') {|f| f.write(encrypted_key) }

Then I am using openssl in a Linux environment to handle the decrypting
openssl rsautl -in file_passphrase.bin -out passphrase.txt -inkey privkey.pem -decrypt
openssl enc -a -d -aes-256-cbc -in file.enc -out file.pdf -pass file:passphrase.txt

I have also tried using a salt, encrypting/decrypting it the same as the passphrase, and I get the same error.
What am I doing wrong here?
Thanks
","Not exactly a solution, but this works. Instead of the OpenSSL module, I'm just using system commands:
file = params[:submission][:report].path
filename = params[:submission][:report].original_filename.gsub("" "", ""_"")
passphrase = (0...50).map{ ('a'..'z').to_a[rand(26)] }.join
system(""openssl enc -a -e -aes-256-cbc -in #{file} -out #{Rails.root.to_s}/evidence/#{filename}.asc -pass pass:#{passphrase}"")
system(""echo #{passphrase} | openssl rsautl -out #{Rails.root.to_s}/evidence/#{filename}_password.bin -pubin -inkey #{Rails.root.to_s}/key/pubkey.pem -encrypt"")

Then using the same decryption method as in the question.
","435","<ruby><openssl><public-key-encryption>","2","0","2","2016-06-24 23:21:00","15991499","0","","","","","2013-04-12 01:06:45",""
"15961454","Ruby OpenSSL unable to decrypt","I am able to encrypt files, but when I try to decrypt them I am getting ""error reading input file"".  I am using a public/private keypair to encrypt the passphrase that is used in encrypting the file.  This is so that only the owner of the private key is able to decrypt the file.
My encryption method uses the Ruby OpenSSL module and looks like:
file = params[:submission][:report].path
filename = params[:submission][:report].original_filename.gsub("" "", ""_"")

pubkey = OpenSSL::PKey::RSA.new File.read ""#{Rails.root.to_s}/key/pubkey.pem""
cipher = OpenSSL::Cipher.new(""aes-256-cbc"")
cipher.encrypt
cipher.key = key = (0...50).map{ ('a'..'z').to_a[rand(26)] }.join

buf = """"
File.open(""#{Rails.root.to_s}/evidence/#{filename}.enc"", ""wb"") do |outf|
  File.open(file, ""rb"") do |inf|
    while inf.read(4096, buf)
      outf << cipher.update(buf)
    end
    outf << cipher.final
  end
end

encrypted_key = pubkey.public_encrypt key
File.open(""#{Rails.root.to_s}/evidence/#{filename}_passphrase.bin"", 'wb') {|f| f.write(encrypted_key) }

Then I am using openssl in a Linux environment to handle the decrypting
openssl rsautl -in file_passphrase.bin -out passphrase.txt -inkey privkey.pem -decrypt
openssl enc -a -d -aes-256-cbc -in file.enc -out file.pdf -pass file:passphrase.txt

I have also tried using a salt, encrypting/decrypting it the same as the passphrase, and I get the same error.
What am I doing wrong here?
Thanks
","Your encrypted is file base64 encoded. If the lines are longer than 64 characters, then openssl has a problem undoing the base64 encoding and prints error reading input file. I'm not sure whether the problem exists with all versions of openssl or not.
Two solutions come to mind:

base64 decode the file first with another utility and then run the openssl enc command without the -a switch
insert a linefeed after every 64 characters in the encrypted and base64 encoded file (file.enc in your example)

","435","<ruby><openssl><public-key-encryption>","2","0","2","2016-06-24 23:21:00","15991499","0","","","","","2013-04-12 01:06:45",""
"17692005","HashCode for a CSR","I have generated a P10 certificate and a Certification applicant document using a software(Dakota). The document contains a hash code. This hash code is supposed to be an SHA1 hash of the public key of the certificate. 
To verify this i converted the P10 certificate to a PEM format certificate using openssl.
I then extracted the public key of this PEM certificate using openssl.
On applying the SHA1 hash algorithm on this public key I obtain a hashcode different from the one which is auto generated by the Dakota Software.
Am I doing anything wrong? 
","I can think of 2 possible issues here.  First, is your public key in PEM format?  If so, you will probably want to convert it to DER format before taking the SHA1 hash of it.
The 2nd possible issue is that the hash may not just be a hash of the public key.  It might be a hash of the public key, the distinguished name, and optionally, a set of certificate attributes.  Those components make up the CSR along with a signature.
I'm not sure why the hash is even there.  If the signature is part of the CSR, the hash really isn't needed.
","434","<openssl><certificate><sha1><public-key-encryption><csr>","1","0","1","2014-03-20 18:24:24","","0","","321731","","2014-03-20 18:24:24","2013-07-17 05:44:39",""
"12696581","Software licencing scheme","I've devised the following mechanism so as to license a software without direct connection to a server, it seems simple, yet I fail to find any serious flaw:
I plan to use asymetric crypto so as to send a message from 1 server (the licence server) to n clients (the n computers on which the software is installed)

The client sends (via mail, for example) some informations about the computer (MAC address, machine name, you name it)
On the licence server, these informations are encrypted using a well secured public (not so public) RSA key, this encrypted payload is the licence.
the encrypted licence is sent to the client
When the software is launched, it cheks for a licence file, it is able to ensure the payload was encrypted with the server key, using the corresponding RSA private key, shipped with each version of the software.
Once the licence decrypted, the software checks it's running on the same machine the licence was given to. 
In my opinion, no one will be able to forge an encrypted payload without access to the Licence server RSA key.

Of course, the licence might be stolen, then the software launched in a virtual machine which mimics a genuine client machine, or the software might be disassembled so as to unplug the licence check.
But is this scheme good enough, or am I utterly naive in this regard?
Thanks
","It's a decent scheme, although are you sure you want the client to have the private key and the server the public key? Unless you're generating one keypair per install, shouldn't it be the other way around?
The scheme is simple, but is it practical? If your goal is to prevent casual cracking of your application there are simpler solutions that are just as effective. And if your goal is to prevent crackers from running your application, chances are that (a) you won't succeed and (b) your program isn't important enough to merit such attention.
And why would someone seek to attack the cryptography part of the license scheme when simply hex-editing the binary to change the license checking code to NOPs will almost certainly work just fine?
I'd rethink the licensing strategy and its importance to your product and its success if I were you.
","434","<licensing><rsa><public-key-encryption>","2","3","1","2012-10-03 02:05:51","12701010","2","1","","","","2012-10-02 19:03:28","2015-06-17 08:15:24"
"14933526","How to configure Phabricator to encrypt outgoing emails?","Has somebody made phabricator to encrypt and decrypt outgoing and incoming emails? Do I need to write a customized code / plugin? 
As I can do for jenkins: How to configure Jenkins to send encrypted emails with gpg?
","This looks extremely easy to me. For the outbound email just create:
Some Custom Class You Write: use a custom adapter you write, see ""Adapter: Custom"".
as the documentation states. To make it easier just copy some of the existing adapters and modify it to allow for encryption of the message. 
Then for the incoming mail, considering you are using sendmail just follow this: MTA: Configuring Sendmail and create your custom email parsing logic along side with the decryption in the php file that will be used to parse the incoming mails as defined in the docs.
","433","<php><email><public-key-encryption><phabricator>","2","2","1","2013-02-28 19:15:11","","0","","-1","","2017-05-23 11:49:17","2013-02-18 09:55:11",""
"5755157","SSL certificate strategy for untrusted server","I'm developing a product that needs to act as a server over a local network for other client applications to connect to, under the following constraints:

The data exchanged is very valuable, and we have no guarantee over the security of the users' network or the machine acting as a server. Therefore any SSL certificate could potentially fall into ""the wrong hands"".
To minimise disruption to the user experience, any non-electronic means of identifying the server to the client should be limited to information that can be written on a post-it (i.e. IP address, passcode rather than exchanging key files).

Given these, our current SSL strategy is:

Do not install any SSL certificates into any trusted stores or sign any certificates against a CA certificate - this could give a potential attacker a front-door key to all the client machines
SSL certificates will therefore be self-signed. This offers no man in the middle protection, because we have no way of verifying the server. It does however offer eavesdropping protection to those users who have insecure networks but secure servers.
Implement a ""passcode"" system over the top using Rijndael symmetric encryption, so even if the certificate is compromised there is some eaves-dropping protection (I know, many leaky buckets - but better than nothing). This passcode can be regularly regenerated with minimal interruption to the user experience of the clients.

Within these constraints, is there a more secure strategy for the client and server to communicate?
","In the end we developed a system where we could generate a new SSL certificate in memory for each channel we were going to support. This cannot provide protection against Man in the Middle but does at least protect against eavesdropping (unless the third party has access to the memory of the server at time of transmission, in which case all security is moot anyway!).
","433","<ssl><ssl-certificate><public-key-encryption>","1","0","1","2012-05-11 20:23:29","6243523","0","0","151019","","2012-05-11 20:23:29","2011-04-22 11:58:25",""
"9331488","Determining if a request came from an iPhone app","I have an iPhone app that communicates with a server (both of which I own and wrote the code for). I need to way to determine if a request on my server came from an iPhone (or any mobile device running the app I wrote for that matter). Basically, I only want to allow apps that I wrote to communicate with the server and need a way to verify that. Since I'm writing the apps, I can modify the headers and what not any way I need to.
I read up a little on Public Key Encryption, but I don't think it'd work. If I sent some sort of secret hashed word in my headers to verify it, couldn't some outside party simply get those headers and use the same ones in their request?
","You can use a checksum. Let's say that you have something like:
date
subject
and calculate the checksum by using, let's say MD5 of (date + ""string"" + subject),
and you calculate the MD5 in the very same way on the server. If they match, they are from the mobile client.
This will work until someone figures out your algorithm.
","432","<iphone><encryption><verification><public-key-encryption>","0","1","3","2012-02-17 18:32:30","9331553","0","","","","","2012-02-17 16:00:38",""
"9331488","Determining if a request came from an iPhone app","I have an iPhone app that communicates with a server (both of which I own and wrote the code for). I need to way to determine if a request on my server came from an iPhone (or any mobile device running the app I wrote for that matter). Basically, I only want to allow apps that I wrote to communicate with the server and need a way to verify that. Since I'm writing the apps, I can modify the headers and what not any way I need to.
I read up a little on Public Key Encryption, but I don't think it'd work. If I sent some sort of secret hashed word in my headers to verify it, couldn't some outside party simply get those headers and use the same ones in their request?
","You could have your server send a message to your app that contains a random code. This message and code changes every time it is sent. 
Your app then does some kind of algorithm on that message to ""encrypt"" it and send it back to the server and the server can then check it. That way there's nothing to intercept and use without knowing your ""encryption"". 
Of course, they could intercept the message from each direction and then work out your algorithm, but if you make it sufficiently difficult, then that would be a while.
","432","<iphone><encryption><verification><public-key-encryption>","0","0","3","2012-02-17 18:32:30","9331553","0","","","","","2012-02-17 16:00:38",""
"9331488","Determining if a request came from an iPhone app","I have an iPhone app that communicates with a server (both of which I own and wrote the code for). I need to way to determine if a request on my server came from an iPhone (or any mobile device running the app I wrote for that matter). Basically, I only want to allow apps that I wrote to communicate with the server and need a way to verify that. Since I'm writing the apps, I can modify the headers and what not any way I need to.
I read up a little on Public Key Encryption, but I don't think it'd work. If I sent some sort of secret hashed word in my headers to verify it, couldn't some outside party simply get those headers and use the same ones in their request?
","You could just use HTTP Basic authentication, unless you needed something more secure.
","432","<iphone><encryption><verification><public-key-encryption>","0","0","3","2012-02-17 18:32:30","9331553","0","","","","","2012-02-17 16:00:38",""
"26139726","Encrypt data by RSA","I used these 2 methods for encrypt and decrypt string value by RSA keys (public and private)
public string EncryptString( string inputString, int dwKeySize, string xmlString )
{
    // TODO: Add Proper Exception Handlers
    RSACryptoServiceProvider rsaCryptoServiceProvider = new RSACryptoServiceProvider( dwKeySize );
    rsaCryptoServiceProvider.FromXmlString( xmlString );
    int keySize = dwKeySize / 8;
    byte[] bytes = Encoding.UTF32.GetBytes( inputString );
    // The hash function in use by the .NET RSACryptoServiceProvider here is SHA1
    // int maxLength = ( keySize ) - 2 - ( 2 * SHA1.Create().ComputeHash( rawBytes ).Length );
    int maxLength = keySize - 42;
    int dataLength = bytes.Length;
    int iterations = dataLength / maxLength;
    StringBuilder stringBuilder = new StringBuilder();
    for( int i = 0; i <= iterations; i++ )
    {
        byte[] tempBytes = new byte[ ( dataLength - maxLength * i > maxLength ) ? maxLength : dataLength - maxLength * i ];
        Buffer.BlockCopy( bytes, maxLength * i, tempBytes, 0, tempBytes.Length );
        byte[] encryptedBytes = rsaCryptoServiceProvider.Encrypt( tempBytes, true );
        // Be aware the RSACryptoServiceProvider reverses the order of encrypted bytes after encryption and before decryption.
        // If you do not require compatibility with Microsoft Cryptographic API (CAPI) and/or other vendors.
        // Comment out the next line and the corresponding one in the DecryptString function.
        Array.Reverse( encryptedBytes );
        // Why convert to base 64?
        // Because it is the largest power-of-two base printable using only ASCII characters
        stringBuilder.Append( Convert.ToBase64String( encryptedBytes ) );               
    }           
    return stringBuilder.ToString();
}

public string DecryptString( string inputString, int dwKeySize, string xmlString )
{
    // TODO: Add Proper Exception Handlers
    RSACryptoServiceProvider rsaCryptoServiceProvider = new RSACryptoServiceProvider( dwKeySize );
    rsaCryptoServiceProvider.FromXmlString( xmlString );
    int base64BlockSize = ( ( dwKeySize / 8 ) % 3 != 0 ) ? ( ( ( dwKeySize / 8 ) / 3 ) * 4 ) + 4 : ( ( dwKeySize / 8 ) / 3 ) * 4;
    int iterations = inputString.Length / base64BlockSize;
    ArrayList arrayList = new ArrayList();
    for( int i = 0; i < iterations; i++ )
    {
        byte[] encryptedBytes = Convert.FromBase64String( inputString.Substring( base64BlockSize * i, base64BlockSize ) );
        // Be aware the RSACryptoServiceProvider reverses the order of encrypted bytes after encryption and before decryption.
        // If you do not require compatibility with Microsoft Cryptographic API (CAPI) and/or other vendors.
        // Comment out the next line and the corresponding one in the EncryptString function.
        Array.Reverse( encryptedBytes );
        arrayList.AddRange( rsaCryptoServiceProvider.Decrypt( encryptedBytes, true ) );             
    }           
    return Encoding.UTF32.GetString( arrayList.ToArray( Type.GetType( ""System.Byte"" ) ) as byte[] );
}

but when I encrypt some text by public key, the encrypted text will be so long. for example when I encrypt 280 character, the encrypted text will be about 2500 character!! and its so long... is there any better way? I want to send the encrypted text by sms to another phone, so its better to be short as same as 3 message. any Ideas?
","","430","<c#><public-key-encryption>","0","","0","2014-10-01 10:59:34","","4","","","","","2014-10-01 10:54:05",""
"48993560","RSA encrypt with BouncyCastle API","I have a problem when I want to encrypt a file using RSA with BouncyCastle API in Java. The problem is the following: in the code below, the line in which I create an object of RSAKeyParameters,its constructor asks me three parameters:
1. If We want to cipher with public or private key.
2. A BigInteger with the modulus of the key.
3. A BigInteger with the exponent of the key.  
The first parameter that my method receives is the file where the key is contained. So in the RSAKeyParameter's constructor, how can I pass it a BigInteger that is the modulus and exponent?, how can I get the modulus and the exponent from the file?
PD: The file that contains the key has a CR and LF, that's why there are two readLine().
void cifrar_asimetrica(String fichClave, String archivoClaro, String result, boolean conPrivada){

    byte[] modulo;
    byte[] exponente;

    try(
        BufferedReader lectorClave = new BufferedReader (new FileReader(fichClave));
        BufferedInputStream lectorFichero = new BufferedInputStream(new FileInputStream(archivoClaro));
        BufferedOutputStream fsalida = new BufferedOutputStream(new FileOutputStream(result))){

        modulo = Hex.decode(lectorClave.readLine()); 
        exponente = Hex.decode(lectorClave.readLine());


        RSAEngine cifrador = new RSAEngine();
        CipherParameters parametro = new RSAKeyParameters(conPrivada, new BigInteger(modulo.toString()), new BigInteger(exponente.toString()));

        cifrador.init(true,parametro); // vamos a cifrar

        byte[] datosLeidos = new byte[cifrador.getOutputBlockSize()];
        byte[] datosCifrados = new byte[cifrador.getOutputBlockSize()];
        int leidos = 0;
        //NO SE SI ES GETINPUTBLOCKSIZE O OUTPUT
        leidos = lectorFichero.read(datosLeidos, 0, cifrador.getOutputBlockSize());

        while(leidos > 0){
            datosCifrados = cifrador.processBlock(datosLeidos, 0, cifrador.getOutputBlockSize());
            fsalida.write(datosCifrados, 0, datosCifrados.length);
            leidos = lectorFichero.read(datosLeidos, 0, cifrador.getOutputBlockSize());
        }

    }catch(Exception e){
        e.printStackTrace();
    }
}

","If your byte arrays, converted from hex in the file, are big-endian as is conventional, to convert a positive big-endian byte array to BigInteger look at the javadoc for BigInteger for the constructor that takes an int sign for positive and a big-endian byte array for magnitude.
'Textbook' (unpadded) RSA is insecure; see crypto.SX security.SX and wikipedia. Using RSA for data larger than one block the way you've coded it will semi-randomly fail, and if you correct that, what amounts to ECB mode is inefficient and insecure; see crypto.SX security.SX and wikipedia. Using an unauthenticated public key is usually insecure.
If you are doing this for fun because it makes you feel like a ""l33t hack5r"" or Bond supervillain, and don't care about actual securty, this is fine. If you need or want actual security, drop this and use programs written by people who know what they are doing, and/or search 'don't roll your own crypto'. 
","428","<java><encryption><rsa><bouncycastle><public-key-encryption>","1","1","2","2018-02-27 01:55:09","","1","","451475","","2018-02-26 21:43:40","2018-02-26 17:05:32",""
"48993560","RSA encrypt with BouncyCastle API","I have a problem when I want to encrypt a file using RSA with BouncyCastle API in Java. The problem is the following: in the code below, the line in which I create an object of RSAKeyParameters,its constructor asks me three parameters:
1. If We want to cipher with public or private key.
2. A BigInteger with the modulus of the key.
3. A BigInteger with the exponent of the key.  
The first parameter that my method receives is the file where the key is contained. So in the RSAKeyParameter's constructor, how can I pass it a BigInteger that is the modulus and exponent?, how can I get the modulus and the exponent from the file?
PD: The file that contains the key has a CR and LF, that's why there are two readLine().
void cifrar_asimetrica(String fichClave, String archivoClaro, String result, boolean conPrivada){

    byte[] modulo;
    byte[] exponente;

    try(
        BufferedReader lectorClave = new BufferedReader (new FileReader(fichClave));
        BufferedInputStream lectorFichero = new BufferedInputStream(new FileInputStream(archivoClaro));
        BufferedOutputStream fsalida = new BufferedOutputStream(new FileOutputStream(result))){

        modulo = Hex.decode(lectorClave.readLine()); 
        exponente = Hex.decode(lectorClave.readLine());


        RSAEngine cifrador = new RSAEngine();
        CipherParameters parametro = new RSAKeyParameters(conPrivada, new BigInteger(modulo.toString()), new BigInteger(exponente.toString()));

        cifrador.init(true,parametro); // vamos a cifrar

        byte[] datosLeidos = new byte[cifrador.getOutputBlockSize()];
        byte[] datosCifrados = new byte[cifrador.getOutputBlockSize()];
        int leidos = 0;
        //NO SE SI ES GETINPUTBLOCKSIZE O OUTPUT
        leidos = lectorFichero.read(datosLeidos, 0, cifrador.getOutputBlockSize());

        while(leidos > 0){
            datosCifrados = cifrador.processBlock(datosLeidos, 0, cifrador.getOutputBlockSize());
            fsalida.write(datosCifrados, 0, datosCifrados.length);
            leidos = lectorFichero.read(datosLeidos, 0, cifrador.getOutputBlockSize());
        }

    }catch(Exception e){
        e.printStackTrace();
    }
}

","You're currently using toString on a byte array. This will only return a representative of the object reference, which has little to do with the value within the array.
Instead you can use the BigInteger constructor that takes a string and radix, using 16 as radix. Do make sure that you don't have any spurious or invalid characters in the hexadecimal representation though.
","428","<java><encryption><rsa><bouncycastle><public-key-encryption>","1","1","2","2018-02-27 01:55:09","","1","","451475","","2018-02-26 21:43:40","2018-02-26 17:05:32",""
"5986232","GnuPG encrypting all file uploads","I would like to encrypt a file as it gets uploaded, generally what happens is that it gets written to disk and then you can encrypt it from there, I would like to encrypt it before that happens.
Is there any module for a http server or for an application framework that would allow me to do that, I don't want to spend a lot of time working on writing the software for this, but if needs must I'll do it.
The important thing is that no unencrypted record ever touches the hard disk.
The hard drive is already encrypted using aes but as the server can be accessed by a third party without my knowledge I would prefer if there was some way to prevent the actual data being /that/ easily compromised.
","Sysadmin answer: ramdisk holding area for pre-encrypted data.  Never touches the disk, problem solved.  No?
","428","<file-upload><public-key-encryption>","1","0","3","2011-05-17 15:43:56","6033465","0","","","","","2011-05-13 01:05:04",""
"5986232","GnuPG encrypting all file uploads","I would like to encrypt a file as it gets uploaded, generally what happens is that it gets written to disk and then you can encrypt it from there, I would like to encrypt it before that happens.
Is there any module for a http server or for an application framework that would allow me to do that, I don't want to spend a lot of time working on writing the software for this, but if needs must I'll do it.
The important thing is that no unencrypted record ever touches the hard disk.
The hard drive is already encrypted using aes but as the server can be accessed by a third party without my knowledge I would prefer if there was some way to prevent the actual data being /that/ easily compromised.
","Here is the answer I have received but haven't tested yet, I'm not going to mark it as the answer until I have tested exactly what it does.
The answer is this django project, it's for leaking websites, it reads the entire file into memory and then encrypts it.
http://gitorious.org/deaddrop/deaddrop/blobs/master/drop/views.py
There is however a way to chunk the data
http://docs.djangoproject.com/en/1.3/topics/http/file-uploads/
There is also a problem that the httpd is handling the file upload and can ignore the application framework depending... so I need to test it out a lot before I'm sure what it's doing. 
However that said I'm pretty sure you can do it with wsgi which I'm pretty sure that django does when you use mod_wsgi with apache... not sure what other web servers use and I'd prefer to use something more light weight.
edit: if someone does happen to test this out rigorously, and posts it as an answer I'll mark that as the answer.
","428","<file-upload><public-key-encryption>","1","0","3","2011-05-17 15:43:56","6033465","0","","","","","2011-05-13 01:05:04",""
"5986232","GnuPG encrypting all file uploads","I would like to encrypt a file as it gets uploaded, generally what happens is that it gets written to disk and then you can encrypt it from there, I would like to encrypt it before that happens.
Is there any module for a http server or for an application framework that would allow me to do that, I don't want to spend a lot of time working on writing the software for this, but if needs must I'll do it.
The important thing is that no unencrypted record ever touches the hard disk.
The hard drive is already encrypted using aes but as the server can be accessed by a third party without my knowledge I would prefer if there was some way to prevent the actual data being /that/ easily compromised.
","What I ended up doing was using mod_wsgi..
with that I'm able to take the upload as a stream and then encrypt it using PyCrypto
works nicely
        inputLength  = int(environ.get('CONTENT_LENGTH', 0))
        input = environ['wsgi.input']
        f = open(dropDir + '/input','w')
        while 1:
                remain = inputLength - f.tell()
                if remain <= 0: break
                chunk = input.read(min(chunksize, remain))
                if  not chunk: break
                f.write(crypt.encrypt(chunk))
        f.close()

When I do that I end up encrypting the entire postdata using a stateful cipher and writing it into a file, I then save the key to another file after using GnuPG to encrypt that.
","428","<file-upload><public-key-encryption>","1","0","3","2011-05-17 15:43:56","6033465","0","","","","","2011-05-13 01:05:04",""
"48309124","Android verify signature always returns false","I'm trying to verify some signed content using ECDSA and spongycastle. Here is the code I'm using to generate the keypair with the brainpoolP512t1 ec curve:

public static KeyPair getKeyPairbrainpoolP512t1() throws Exception {
    KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance(""EC"", ""SC"");
    ECNamedCurveParameterSpec curveParameterSpec = ECNamedCurveTable.getParameterSpec(""brainpoolP512t1"");
    keyPairGenerator.initialize(curveParameterSpec, new SecureRandom());
    return keyPairGenerator.generateKeyPair();
}


Here is the code I'm using to sign and verify signatures:
private byte[] ecdsaSign(ECPrivateKey key, byte[] content) throws Exception {
    Signature ecdsaSign = Signature.getInstance(""SHA256withECDSA"", ""SC"");
    ecdsaSign.initSign(key);
    ecdsaSign.update(content);
    byte[] signature = ecdsaSign.sign();

    return signature;
}

public static boolean ecdsaVerify(ECPublicKey key, byte[] content, byte[] signature) throws Exception {
    Signature ecdsaVerify = Signature.getInstance(""SHA256withECDSA"", ""SC"");
    ecdsaVerify.initVerify(key);
    ecdsaVerify.update(content);
    boolean result = ecdsaVerify.verify(signature);
    return result;
}

I'm passing in the bytes of a simple string message that was signed using the private key, and also the public key in order to verify. I'm always getting false however. What am I doing wrong? Any help is deeply appreciated. 
","Figured out what was wrong. I was exporting the keys to PEM in order to have them in string format prior to calling sign and verify, and then decoding back to private key original format. When I omitted this conversion and called Verify directly with the private key (without the PEM string back and forth conversion), the content got verified.
","424","<java><public-key-encryption><signature><spongycastle>","1","0","1","2018-01-17 21:44:12","","0","","5432190","","2018-01-17 20:28:57","2018-01-17 20:02:59",""
"37273468","Reading public key in Java","I read a lot of similar topics on SO but I am still a little bit confused.
I have a public key in .pub format (pure public key). The question is if it is possible to read it in this format in Java. I am able to read public key if it has .der format. 
    RSAPublicKey publicKey
            = (RSAPublicKey) KeyFactory.getInstance(""RSA"").
            generatePublic(new X509EncodedKeySpec(FileCopyUtils.
                    copyToByteArray(resource.getInputStream())));

Works fine. 
However it is not working for .pub format. If the only option is to read der file how should I correctly convert .pub to .der.
Thanks in advance for any help.
","","421","<java><encryption><rsa><public-key-encryption>","0","","0","2016-05-17 10:24:58","","4","","","","","2016-05-17 10:24:58",""
"9237422","Secure way to transfer data over NFC?","I am currently writing a payment system to accept payment details from an NFC enabled smartphone (BlackBerry 9900) to a Windows client (C#.NET)
I am currently having two issues relating to security:
1) What is a good way to secure the data for transmission over NFC? I'm thinking public key encryption so that it can be encrypted on the phone using the public key and then decrypted by the .NET on the other side using the private key.
2) How to secure the data so that the data can't be cloned by another reader i.e. another reader pretends the be the windows client and reads the secure data. This could then be played back to the windows client by the attacker at a later data to make a payment. I'm thinking that when the phone taps the client reader the client will send a token that must be present in the data returned from the phone that includes the sensitive data. I think that maybe the public and private keys should be created per each transaction request. The public key sent to the phone to encrypt the data. Maybe that would suffice as the token also as if it can't be decrypted by the client then it's an invalid request.
Please note that I have no experience in cryptography at all. I'm aiming to implement a solution that has libraries readily available in .NET 3.0 and BlackBerry SDK 7.0.
Thanks
","","421","<.net><encryption><blackberry-jde><public-key-encryption>","1","","0","2012-10-02 10:19:21","","1","","1077364","","2012-10-02 10:19:21","2012-02-11 02:51:40",""
"43772965","Can I identify the type of encryption from a password, public key and my encrypted password?","I have a password: myCoolPassword 
I have an encrypted password, for example 324lrwefglkn2tlk24htlk2hglkn42jbt32lk3tb23lkb 
I also have access to the encryption key myCoolKey
Is there any way of me working out what type of encryption/hashing my server is using from these three things? With the system I am using it is unclear what type of encryption is being used.
","It depends on what type of encryption it is, if it has been salted etc... one way to find out given those information is to loop through the well known encryption algorithms and encrypt your password with the key and see if it matches with the encrypted password but Of course this might not always work
","421","<encryption><hash><public-key-encryption>","0","1","1","2017-05-04 03:10:20","","2","1","2017550","","2017-05-04 02:46:34","2017-05-04 02:41:17",""
"6491916","Complex encryption/decryption model - is this even possible?","Suppose I have a server which is publishing information (e.g. via a message bus) to four parties: A, B, C and D. All traffic can be discovered in encrypted form by any party. In order to make use of the information, obviously it would need to be decrypted:

Party A should be able to read all information (i.e. decrypt information intended for A, B and C)
Party B should be able to read information intended for B and C
Party C should only be able to read information intended for party C
Party D should be able to read information for B and D

Obviously this could be achieved by having completely separate public/private key pairs for each party and then sharing the private keys as per the requirements above. Unfortunately this does not scale nicely to hundreds of parties.
Is there a better way? 

EDIT
Basically, what I would like to do is for each person to have their private key and for me to say, when encrypting a message, that it is encrypted with key = A | B | C such that this means that a person with any of key A, B or C can decrypt it. Imagine a trunk which can have n locks fitted to it, any of which can open the trunk.
","Can you use custom encryption like Blowfish?
In such a case you can share the Blowfish encryption key and store it in a, let's say, a properties file!
When the data arrives, depending on the destination and the key value in properties file you can try decrypting them
","420","<java><security><scala><encryption><public-key-encryption>","1","-1","4","2011-06-28 04:13:17","6501454","9","0","16853","","2011-06-27 14:43:59","2011-06-27 11:08:43",""
"6491916","Complex encryption/decryption model - is this even possible?","Suppose I have a server which is publishing information (e.g. via a message bus) to four parties: A, B, C and D. All traffic can be discovered in encrypted form by any party. In order to make use of the information, obviously it would need to be decrypted:

Party A should be able to read all information (i.e. decrypt information intended for A, B and C)
Party B should be able to read information intended for B and C
Party C should only be able to read information intended for party C
Party D should be able to read information for B and D

Obviously this could be achieved by having completely separate public/private key pairs for each party and then sharing the private keys as per the requirements above. Unfortunately this does not scale nicely to hundreds of parties.
Is there a better way? 

EDIT
Basically, what I would like to do is for each person to have their private key and for me to say, when encrypting a message, that it is encrypted with key = A | B | C such that this means that a person with any of key A, B or C can decrypt it. Imagine a trunk which can have n locks fitted to it, any of which can open the trunk.
","
Imagine a supermarket. Every single shelf is independently stockable. There are a hundred shelf stackers, each of whom stack a number of shelves. These stackers have managers, who can overview the shelves of all of their subordinates. These stock managers have section managers possibly having complex relationships, such as manager A being able to see a subset of manager B's shelves. There are a few store managers who can see everything.

I don't think the scalability problem comes from using public-key crypto. It rather comes from the complexity in your requirement (wanting to have so many configurable groups).
If you are going to send out the same encrypted message to hundreds of parties, and there can be an arbitrary subset of them that are supposed to read it, and you want to be able modify these permissions later, you need to give everyone his own key-pair.
You would then send out the message encrypted symmetrically (with a random session key) along with copies of the session key encrypted for all recipients.
If you see that very often you address the exact same subset, you may extend the validity of those session keys to span multiple messages. Then you do not need to transmit all the keys every time (you should still expire them after some time, though).

None of the shelf stackers, stock managers, section managers or store managers would have any kind of clue about public/private key cryptography

Well, their software/device would handle that.
","420","<java><security><scala><encryption><public-key-encryption>","1","3","4","2011-06-28 04:13:17","6501454","9","0","16853","","2011-06-27 14:43:59","2011-06-27 11:08:43",""
"6491916","Complex encryption/decryption model - is this even possible?","Suppose I have a server which is publishing information (e.g. via a message bus) to four parties: A, B, C and D. All traffic can be discovered in encrypted form by any party. In order to make use of the information, obviously it would need to be decrypted:

Party A should be able to read all information (i.e. decrypt information intended for A, B and C)
Party B should be able to read information intended for B and C
Party C should only be able to read information intended for party C
Party D should be able to read information for B and D

Obviously this could be achieved by having completely separate public/private key pairs for each party and then sharing the private keys as per the requirements above. Unfortunately this does not scale nicely to hundreds of parties.
Is there a better way? 

EDIT
Basically, what I would like to do is for each person to have their private key and for me to say, when encrypting a message, that it is encrypted with key = A | B | C such that this means that a person with any of key A, B or C can decrypt it. Imagine a trunk which can have n locks fitted to it, any of which can open the trunk.
","Here's a way that requires n key exchanges, but keeps the messages themselves as small as for two-party communication.
Assuming that the general form of your problem is:

There are n parties, numbered p_1 through p_n
Messages have a security level m, such that only parties p_1 to p_m can decrypt the message.

You can use this key exchange step:

Generate n AES keys, numbered k_1 to k_n.
Securely give each key k_i to all parties p_1 to p_i.

Then to send a message with security level m, just encrypt it with the key k_m.
One side-effect of this scheme is that party p_b does not have the ability to prevent party p_a from decrypting messages they send if a < b. Hopefully that's okay.
","420","<java><security><scala><encryption><public-key-encryption>","1","1","4","2011-06-28 04:13:17","6501454","9","0","16853","","2011-06-27 14:43:59","2011-06-27 11:08:43",""
"6491916","Complex encryption/decryption model - is this even possible?","Suppose I have a server which is publishing information (e.g. via a message bus) to four parties: A, B, C and D. All traffic can be discovered in encrypted form by any party. In order to make use of the information, obviously it would need to be decrypted:

Party A should be able to read all information (i.e. decrypt information intended for A, B and C)
Party B should be able to read information intended for B and C
Party C should only be able to read information intended for party C
Party D should be able to read information for B and D

Obviously this could be achieved by having completely separate public/private key pairs for each party and then sharing the private keys as per the requirements above. Unfortunately this does not scale nicely to hundreds of parties.
Is there a better way? 

EDIT
Basically, what I would like to do is for each person to have their private key and for me to say, when encrypting a message, that it is encrypted with key = A | B | C such that this means that a person with any of key A, B or C can decrypt it. Imagine a trunk which can have n locks fitted to it, any of which can open the trunk.
","What you want can be achieved using normal protocols based on public key cryptography.  The Bouncy Castle Crypto APIs has support for both OpenPGP and CMS, either of which can work from Scala.
TO set everything up:

Every party is given a public/private key pair.

No one EVER shares the private key.  The private key must stay private

Every party knows every other party's public key

The protocols allow encryption using multiple public keys.  For example, if you use something like the PGPEncryptedDataGenerator, then you would call the addMethod(PGPPublicKey) method for every recipient you wish to be able to decrypt the message.
There are a lot of nuances to the API's, but the unit tests and examples will really help you navigate them.
Implementation Details
Both protocols work in fundamentally the same way.

Securely generate a random symmetric key
For every recipient, encrypt the symmetric key with the recipient's public key.  All of the encrypted public keys are written into a message header.
Encrypt the message using the symmetric key.  This becomes the message content.

Recipients reverse the process to decrypt the message

Search message header for key addressed to self.
Use private key to decrypt symmetric key.
Use symmetric key to decrypt the message content.

","420","<java><security><scala><encryption><public-key-encryption>","1","1","4","2011-06-28 04:13:17","6501454","9","0","16853","","2011-06-27 14:43:59","2011-06-27 11:08:43",""
"22979298","RSA on Android is different from PC","I search a lot but I didn't find the useful answer. I develop java and android security application. I found some problem that when I create RSA key on PC and I transfer RSA public key to android. When I encrypt my data with public key on android and I decrypt the data by using private key on PC, it shows Badpadding Exception. I search on the google on this exception. I found some user that has the same problem to me but the answer is no use. They told me to use Base64 to encode it but the key is still wrong. here is my code.
 public void generateKeys(){
    try {
        KeyPairGenerator generator;
        generator = KeyPairGenerator.getInstance(""RSA"");
        generator.initialize(1024, new SecureRandom());
        KeyPair pair = generator.generateKeyPair();

        pubKey = pair.getPublic();
        privKey = pair.getPrivate();
        //================================================
       System.out.println(""My Public KEY ""+pubKey.toString());
         System.out.println(""My Private KEY ""+privKey.toString());

        byte[]pk_byte = pubKey.getEncoded();
        byte[]sk_byte = privKey.getEncoded();

            FileOutputStream keyfos_pub = new FileOutputStream(new File(Environment.getExternalStorageDirectory(),""RSAKey/publicKey.txt""));
            keyfos_pub.write(pk_byte);
            keyfos_pub.close();

            FileOutputStream keyfos_pri = new FileOutputStream(new File(Environment.getExternalStorageDirectory(),""RSAKey/privateKey.txt""));
            keyfos_pri.write(sk_byte);
            keyfos_pri.close();
        } catch (FileNotFoundException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        } catch (NoSuchAlgorithmException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        } 

}

When I print out the key, it looks like this.
RSA Private CRT Key
            modulus: dba017a7653612c53f3a46bb99f5098c7bf9012d06f3d20f8f01a67d17aeefd83070a2ff181468679a2d5abae6f7c074b7b3888a4a57533acc3d2d1dfdd86cdc032d3eafd6cf8423edfa3451333bf1d7377352dd3feb9268032831abd72c5c932fed9b4c667f3da062f4beb7a321f2c434d232ee746885dce13a1656eb42fe6b
    public exponent: 10001
   private exponent: 72f10f5019653a5fa6de9e0432e80e4e4ad79fe8ebd99157793598e7a10c7a14000e0310548ee1b14efc6b9ea3a08845cd9a955c22da1f0207c000abd09d83228e05a42f9bd88733afc2a4c1e30770e7ac3c41c55adae734e4f8126da494a88f362d716d6b37a2d7bfbe53824cfb9dc7a0289aa432226bbece49129f47de2a61
             primeP: efa2665a1e08dce4450ad608e17df1e3650ab2cfc44e9b3b6a346611b270b245e21c28f71971d5062368e66b99297085f23104577e529ef08b263e63387cf17b
             primeQ: ea9fde740a15d7f68f5aadb72a588f65da3761119b0c73930f111a43d513d19f42185afcd0291f03a9861a7757108f0e83d4d904ddf541a2debd79344387bbd1
     primeExponentP: 45202ab84a3bb244a2e9fa4dfb861235cf5ae3b3ed63e381a32454613c8127dbe2daceb26103a638ac14418bbe55e6e0acb99910081f9b3bb65824dd08597a6b
     primeExponentQ: 53ca665a90a37e6e1a822ad9e8309a7da871f0a3a5f8cb69b08ece0f7d90476395ea36cc64d6dab1a72032617e6176859b852f3ff2b8bd091a7d164518fce791
     crtCoefficient: 695a3707d033aa2474a7a64959589842099a220540167b48f42bbbd1d786d1a84c378f9a1bc0311948287cbf7669aa44156dd9f24bfe88baf931e5da70a06c4

RSA Public Key
            modulus: dba017a7653612c53f3a46bb99f5098c7bf9012d06f3d20f8f01a67d17aeefd83070a2ff181468679a2d5abae6f7c074b7b3888a4a57533acc3d2d1dfdd86cdc032d3eafd6cf8423edfa3451333bf1d7377352dd3feb9268032831abd72c5c932fed9b4c667f3da062f4beb7a321f2c434d232ee746885dce13a1656eb42fe6b
    public exponent: 10001

I send my key to PC and print out it looks like this
Sun RSA private CRT key, 1024 bits
  modulus:          133510687177139403090984227659818165988216147752229771757259279456909046924729578431711819486905574365970242930474912203422914618872480707080105400973005394104312017850522474151319747965391515392091886771183127658574637486403332621957057719375091145573274843838361168501101321026667287976397870949812555235301
  public exponent:  65537
  private exponent: 9980146428442039393666657480590341260299844482325612277626580558453963728645653672535456363067433797990268399780224833064816191126482490562360748269935354262219600344146818595176602910809143102802601846580823241077395526479491554799584457750285244532837191028964347562514222968145677820868899082320352227173
  prime p:          12299841631131712301068734715117232218530765196368758184959862403767638338760002562429845237522849739220962134079733702092483313582445665328865919334315231
  prime q:          10854667172235374767842313747899047475769598966944705527971116954964144369647441254504149073040778536441723902849901407264741891511747045046848533162966971
  prime exponent p: 9681923647204217071082501281466465900019303827612974308340469989251337818636053102684450861548877311242977166683023364260601327205871598989662862911311993
  prime exponent q: 1654443602597908945419791446477006656323336803344838236704510234877044083623118096514059921732827819407607611968318128037101282547428799502158627916518563
  crt coefficient:  8339065711012644104593134475846199184972354402766421557421676186133596071951423663692155855342215056476322973047333984032026031966395156454879551656339085

It is clear that the key was changed because there is a word ""1024 bits"" appear in the key and the number of modulas is not the same as well
How can I manage this problem. I'd like a professional to help me please 
","They're the same thing, but Android prints it out in base 16 (hexadecimal) whereas your desktop's Java is printing it in base 10 (decimal). You'll see variations of the output of toString() between different implementations.
For instance, look at the public exponent and note that hex 0x10001 is equal to decimal 65537. This exponent is commonly known as RSA F4. However as this public exponent is used for a lot of keys, you cannot use it to distinguish between keys.
","419","<android><security><rsa><public-key-encryption>","1","-1","2","2014-04-13 00:09:52","23037535","0","1","","","","2014-04-10 05:25:58",""
"22979298","RSA on Android is different from PC","I search a lot but I didn't find the useful answer. I develop java and android security application. I found some problem that when I create RSA key on PC and I transfer RSA public key to android. When I encrypt my data with public key on android and I decrypt the data by using private key on PC, it shows Badpadding Exception. I search on the google on this exception. I found some user that has the same problem to me but the answer is no use. They told me to use Base64 to encode it but the key is still wrong. here is my code.
 public void generateKeys(){
    try {
        KeyPairGenerator generator;
        generator = KeyPairGenerator.getInstance(""RSA"");
        generator.initialize(1024, new SecureRandom());
        KeyPair pair = generator.generateKeyPair();

        pubKey = pair.getPublic();
        privKey = pair.getPrivate();
        //================================================
       System.out.println(""My Public KEY ""+pubKey.toString());
         System.out.println(""My Private KEY ""+privKey.toString());

        byte[]pk_byte = pubKey.getEncoded();
        byte[]sk_byte = privKey.getEncoded();

            FileOutputStream keyfos_pub = new FileOutputStream(new File(Environment.getExternalStorageDirectory(),""RSAKey/publicKey.txt""));
            keyfos_pub.write(pk_byte);
            keyfos_pub.close();

            FileOutputStream keyfos_pri = new FileOutputStream(new File(Environment.getExternalStorageDirectory(),""RSAKey/privateKey.txt""));
            keyfos_pri.write(sk_byte);
            keyfos_pri.close();
        } catch (FileNotFoundException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        } catch (NoSuchAlgorithmException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        } 

}

When I print out the key, it looks like this.
RSA Private CRT Key
            modulus: dba017a7653612c53f3a46bb99f5098c7bf9012d06f3d20f8f01a67d17aeefd83070a2ff181468679a2d5abae6f7c074b7b3888a4a57533acc3d2d1dfdd86cdc032d3eafd6cf8423edfa3451333bf1d7377352dd3feb9268032831abd72c5c932fed9b4c667f3da062f4beb7a321f2c434d232ee746885dce13a1656eb42fe6b
    public exponent: 10001
   private exponent: 72f10f5019653a5fa6de9e0432e80e4e4ad79fe8ebd99157793598e7a10c7a14000e0310548ee1b14efc6b9ea3a08845cd9a955c22da1f0207c000abd09d83228e05a42f9bd88733afc2a4c1e30770e7ac3c41c55adae734e4f8126da494a88f362d716d6b37a2d7bfbe53824cfb9dc7a0289aa432226bbece49129f47de2a61
             primeP: efa2665a1e08dce4450ad608e17df1e3650ab2cfc44e9b3b6a346611b270b245e21c28f71971d5062368e66b99297085f23104577e529ef08b263e63387cf17b
             primeQ: ea9fde740a15d7f68f5aadb72a588f65da3761119b0c73930f111a43d513d19f42185afcd0291f03a9861a7757108f0e83d4d904ddf541a2debd79344387bbd1
     primeExponentP: 45202ab84a3bb244a2e9fa4dfb861235cf5ae3b3ed63e381a32454613c8127dbe2daceb26103a638ac14418bbe55e6e0acb99910081f9b3bb65824dd08597a6b
     primeExponentQ: 53ca665a90a37e6e1a822ad9e8309a7da871f0a3a5f8cb69b08ece0f7d90476395ea36cc64d6dab1a72032617e6176859b852f3ff2b8bd091a7d164518fce791
     crtCoefficient: 695a3707d033aa2474a7a64959589842099a220540167b48f42bbbd1d786d1a84c378f9a1bc0311948287cbf7669aa44156dd9f24bfe88baf931e5da70a06c4

RSA Public Key
            modulus: dba017a7653612c53f3a46bb99f5098c7bf9012d06f3d20f8f01a67d17aeefd83070a2ff181468679a2d5abae6f7c074b7b3888a4a57533acc3d2d1dfdd86cdc032d3eafd6cf8423edfa3451333bf1d7377352dd3feb9268032831abd72c5c932fed9b4c667f3da062f4beb7a321f2c434d232ee746885dce13a1656eb42fe6b
    public exponent: 10001

I send my key to PC and print out it looks like this
Sun RSA private CRT key, 1024 bits
  modulus:          133510687177139403090984227659818165988216147752229771757259279456909046924729578431711819486905574365970242930474912203422914618872480707080105400973005394104312017850522474151319747965391515392091886771183127658574637486403332621957057719375091145573274843838361168501101321026667287976397870949812555235301
  public exponent:  65537
  private exponent: 9980146428442039393666657480590341260299844482325612277626580558453963728645653672535456363067433797990268399780224833064816191126482490562360748269935354262219600344146818595176602910809143102802601846580823241077395526479491554799584457750285244532837191028964347562514222968145677820868899082320352227173
  prime p:          12299841631131712301068734715117232218530765196368758184959862403767638338760002562429845237522849739220962134079733702092483313582445665328865919334315231
  prime q:          10854667172235374767842313747899047475769598966944705527971116954964144369647441254504149073040778536441723902849901407264741891511747045046848533162966971
  prime exponent p: 9681923647204217071082501281466465900019303827612974308340469989251337818636053102684450861548877311242977166683023364260601327205871598989662862911311993
  prime exponent q: 1654443602597908945419791446477006656323336803344838236704510234877044083623118096514059921732827819407607611968318128037101282547428799502158627916518563
  crt coefficient:  8339065711012644104593134475846199184972354402766421557421676186133596071951423663692155855342215056476322973047333984032026031966395156454879551656339085

It is clear that the key was changed because there is a word ""1024 bits"" appear in the key and the number of modulas is not the same as well
How can I manage this problem. I'd like a professional to help me please 
","That does look like a different key. Please try again as you've probably send an old key or something. Make sure you don't regenerate the key pair, it will be different each time. Use the private key to print out the modulus as BigInteger instead; BigInteger instances will always print out as decimals making for an easier comparison. Or even better, use BigInteger.toString(16) to get a hexadecimal representation.
If you use a good random number generator (like the default one in Java) then the modulus should be unique for the key pair. Therefore it, or the SHA1 hash over the modulus is normally used to identify the key.
","419","<android><security><rsa><public-key-encryption>","1","0","2","2014-04-13 00:09:52","23037535","0","1","","","","2014-04-10 05:25:58",""
"24814734","Java send PublicKey to PHP and encrypt data","So I have a PublicKey in Java, and I need to send a post request to the server with the key in it, then read the key server side, and send some data encrypted with it!
I succeeded at:
Generating the keypair (duh)
Encrypting and decrypting data with it in the Java program
Maybe: making a pem formatted key from it, I'm not sure
String phpPublic = (""-----BEGIN PUBLIC KEY-----""+Base64.encodeToString(MainActivity.instance.rsa.readPublicKeyFromFile(MainActivity.instance.rsa.PUBLIC_CLIENT_KEY_FILE).getEncoded(),Base64.DEFAULT)+""-----END PUBLIC KEY-----"");

I think this does it, but I'm not sure! And would it be the same process to convert private keys to pem, just to make PUBLIC -> PRIVATE in the header and footer.
I don't know if converting to pem is really necessary, if it's not please suggest a better way to do it.
This is how I do it in PHP, but I'm 99% sure it is wrong
$PubKey = openssl_pkey_get_public($publicPem);
$encrypted;
openssl_public_encrypt($toEncode, $encrypted, $PubKey);
echo $encrypted;

Sorry for my bad English (if there is any)!
Thx in forward!
Sincerely, Roberto
","can you post a sample key?
in lieu of that i do think you'd have better success with phpseclib a pure php rsa implementation. it supports a lot more key formats than openssl does and it'll auto detect the type too.
example:
<?php
include('Crypt/RSA.php');

$rsa = new Crypt_RSA();
$rsa->loadKey('...');

$rsa->setSignatureMode(CRYPT_RSA_SIGNATURE_PKCS1);
echo $rsa->encrypt('whatever');

","419","<java><php><encryption><rsa><public-key-encryption>","2","1","1","2014-07-18 19:24:06","","2","0","","","","2014-07-17 22:44:25",""
"55066925","Get RSA Public or Private Key from KeyPair Generation Flutter","I have added pointycastle and generated a keypair, encrypting the trial ""Hello World"" string. From this, I want to get the values of the Private and Public Key. Is there anywhere they are stored, because whenever I try to print the values of keyPair.privateKey, it returns Instance of 'RSAPrivateKey. 
Here is the code I used
        var keyParams = new RSAKeyGeneratorParameters(new BigInt.from(65537), 2048, 5);
        var secureRandom = new FortunaRandom();
        var random = new Random.secure();
        List<int> seeds = [];
        for (int i = 0; i < 32; i++) {
          seeds.add(random.nextInt(255));
        }
        secureRandom.seed(new KeyParameter(new Uint8List.fromList(seeds)));

        var rngParams = new ParametersWithRandom(keyParams, secureRandom);
        var k = new RSAKeyGenerator();
        k.init(rngParams);
        var keyPair = k.generateKeyPair();
        var cipher = new RSAEngine()..init( true, new PublicKeyParameter<RSAPublicKey>(keyPair.publicKey));
        print(""pubkey: ${keyPair.publicKey.toString()}"");
        var cipherText = cipher.process(new Uint8List.fromList(""Hello World"".codeUnits));
        print(""Encrypted: ${new String.fromCharCodes(cipherText)}"");
        cipher.init( false, new PrivateKeyParameter<RSAPrivateKey>(keyPair.privateKey));
        //cipher.init( false, new PrivateKeyParameter(keyPair.privateKey) )
        var decrypted = cipher.process(cipherText);
        print(""Decrypted: ${new String.fromCharCodes(decrypted)}"");

","Make sure to import package:pointycastle/asymmetric/api.dart, then use:
  var k = RSAKeyGenerator()..init(rngParams);
  AsymmetricKeyPair<PublicKey, PrivateKey> keyPair = k.generateKeyPair();
  RSAPrivateKey privateKey = keyPair.privateKey;
  RSAPublicKey publicKey = keyPair.publicKey;
  print(privateKey.d); // prints private exponent
  print(publicKey.n); // prints modulus

Recreate from the individual parts:
  RSAPrivateKey foo = RSAPrivateKey(
    privateKey.n,
    privateKey.d,
    privateKey.p,
    privateKey.q,
  );
  RSAPublicKey bar = RSAPublicKey(publicKey.n, publicKey.e);

","418","<dart><flutter><public-key-encryption><pointycastle>","0","0","1","2019-03-19 17:35:56","55068219","4","","","","","2019-03-08 16:08:42",""
"13591781","PHP RSA encryption","I have the following Public Key: 
//Beginig of the PBK
30819f300d06092a864886f70d010101050003818d003081890281810095e15f182ec7b6e84786c0ee54e3bb72af0461e6fd859a3625f38dcd3fdec80dfcc51a44756ec7cd6c14b430d55670460c5143efadd1ade7380e890e9957d6e6b38f35412862cc955e04d1928f21c0d2f7bc48c3855276f0e7c1b45a558e3a013b969cbfaebca42b748e64bff787f86ec5f0adcd94428c4ab8ca6d2b710d785b0203010001
//End of the PBK

which is a PKCS#1 encoded public key within a X509 structure.
So my question is How can I -in PHP- extract the public Key from this X509 PKIX format to use it in the RSA encryption?
Thanks.
","Using phpseclib, a pure PHP RSA implementation:
<?php
include('Crypt/RSA.php');

$cert = pack('H*', '30819f300d06092a864886f70d010101050003818d003081890281810095e15f182ec7b6e84786c0ee54e3bb72af0461e6fd859a3625f38dcd3fdec80dfcc51a44756ec7cd6c14b430d55670460c5143efadd1ade7380e890e9957d6e6b38f35412862cc955e04d1928f21c0d2f7bc48c3855276f0e7c1b45a558e3a013b969cbfaebca42b748e64bff787f86ec5f0adcd94428c4ab8ca6d2b710d785b0203010001');

$rsa = new Crypt_RSA();
$rsa->loadKey($cert);
echo $rsa;
?>

Returns this:
-----BEGIN PUBLIC KEY-----
MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCV4V8YLse26EeGwO5U47tyrwRh5v2FmjYl843N
P97IDfzFGkR1bsfNbBS0MNVWcEYMUUPvrdGt5zgOiQ6ZV9bms481QShizJVeBNGSjyHA0ve8SMOF
Unbw58G0WlWOOgE7lpy/rrykK3SOZL/3h/huxfCtzZRCjEq4ym0rcQ14WwIDAQAB
-----END PUBLIC KEY-----

What I think phpseclib is really doing here is base64_encode'ing the packed $cert and adding a header and a footer to it.  In what format do you want the key?  Do you want the exponent and the modulo in base-10 format or is the above sufficient?
","416","<php><rsa><public-key-encryption>","0","0","1","2013-11-30 18:21:17","","0","1","569976","","2013-11-30 18:21:17","2012-11-27 19:41:03",""
"41422958","AES Encryption between iOS and C#","I am using FBEncryptor Library for encryption and decryption. If I encrypt data from iOS, it will easily decrypt on C# server side. But while decrypting the first 10 characters from original data get corrupted. 
Example : 
 Received data From C# :        0Nwr30kSkJxGCYiFg8TUrfW51587SUkS8lQ7Uno7gglxjVGW5gR4MA+isTknjXzK
Key uses for encryption : e64f9fa01f0418 
Decrypted data from iOS :  gZUUTabcdefghijklmnopqrstuvwxyz""}
Expected Decrypted data :  {""Successeed"" : ""abcdefghijklmnopqrstuvwxyz""}
iOS side code:
encryptedios = ""0Nwr30kSkJxGCYiFg8TUrfW51587SUkS8lQ7Uno7gglxjVGW5gR4MA+isTknjXzK""
let decryptedString = FBEncryptorAES.decryptBase64String(encryptedios , keyString: ""e64f9fa01f0418"")

C# code:
public RijndaelManaged GetRijndaelManaged(String secretKey)
    {
        var keyBytes = new byte[16];
        var secretKeyBytes = Encoding.UTF8.GetBytes(secretKey);
        Array.Copy(secretKeyBytes, keyBytes, Math.Min(keyBytes.Length, secretKeyBytes.Length));
        return new RijndaelManaged
        {
            Mode = CipherMode.CBC,
            Padding = PaddingMode.PKCS7,
            KeySize = 128,
            BlockSize = 128,
            Key = keyBytes,
            IV = keyBytes
        };
    }

    public byte[] Encrypt(byte[] plainBytes, RijndaelManaged rijndaelManaged)
    {
        return rijndaelManaged.CreateEncryptor()
            .TransformFinalBlock(plainBytes, 0, plainBytes.Length);
    }

    public byte[] Decrypt(byte[] encryptedData, RijndaelManaged rijndaelManaged)
    {
        return rijndaelManaged.CreateDecryptor()
            .TransformFinalBlock(encryptedData, 0, encryptedData.Length);
    }

    /// <summary>
    /// Encrypts plaintext using AES 128bit key and a Chain Block Cipher and returns a base64 encoded string
    /// </summary>
    /// <param name=""plainText"">Plain text to encrypt</param>
    /// <param name=""key"">Secret key</param>
    /// <returns>Base64 encoded string</returns>
    public String Encrypt(String plainText, String key)
    {
        var plainBytes = Encoding.UTF8.GetBytes(plainText);
        return Convert.ToBase64String(Encrypt(plainBytes, GetRijndaelManaged(key)));
    }

    /// <summary>
    /// Decrypts a base64 encoded string using the given key (AES 128bit key and a Chain Block Cipher)
    /// </summary>
    /// <param name=""encryptedText"">Base64 Encoded String</param>
    /// <param name=""key"">Secret Key</param>
    /// <returns>Decrypted String</returns>
    public String Decrypt(String encryptedText, String key)
    {
        var encryptedBytes = Convert.FromBase64String(encryptedText);
        return Encoding.UTF8.GetString(Decrypt(encryptedBytes, GetRijndaelManaged(key)));
    }

","Your first block differs as you use different IV in the decrypt. In IOS decryptBase64String(..) don't take an IV as input, which triggers it to be initialized to all 0'es. In C# you initializes it to the same value as the key. 
In general the IV need to be a random value generated at encryption time, and passed along with the encrypted data. Often it's prepended the encrypted data, so you easily can get it when you initializes your decryption library. Using all 0'es as IV is bad practice .. and the same goes for using the key as IV.
","416","<c#><ios><encryption><public-key-encryption>","0","1","1","2017-01-02 09:15:49","41423881","2","","3583853","","2017-01-02 08:55:32","2017-01-02 07:38:24",""
"17042887","Secure asymmetric key implementation client-side","I'm currently trying to develop a client-server structure, with the client being in .NET and the server being a PHP based SOAP server.
Now, I'm trying to implement an asymmetric key system using Rijndael 256 and a bit of fiddling about. I understand the basic concept of a public/private key pair (as per this page & Wikipedia), however I cannot get my head around it being secure in any client-side environment.
In short, the software will be running on the client machine, so the user will have the ability to tamper with the software. Most of the client's functionality revolves around responses received from the server in order to display reports & details. Along with that the client software will occasionally await a command from the server, where the server will tell the client to show a pop-up or execute a client-program shutdown (to do with licensing). I realise the server may crash or hang, or the client gets disconnected. Most of this has all been thought over and handled in code. But what I'm worried about is someone tampering with the client so that it completely ignores the server's commands.
The customer will have access to a wide variety of 'toys' such as IDA, ILDASM, de4dot and various other debuggers and/or decompilers and Im fairly certain an experienced cracker will be able to figure out the public/private key combination within a short period of time. I know .NET code on its own is very insecure, but I'm not sure what to do against that other then using tools such as .NET Reactor & Dotfuscator etc.
My question: what sort of practices, code, ideas or anything can I put to use in order to either severely delay said cracker, or rather, how do I protect the private key at all costs.
Any hints, tips, suggestions or samples very appreciated!
","As @Corak stated, public/private key pairs usually work by keeping the private key private. On the client side, you can generate a new public/private key pair every time you connect. The easiest data to hide is the data that isn't saved in the first place.
The other part of your question is ""how to stop a cracker!"" That's not possible because the end-user has full control of the machine. You can play tricks to try to obfuscate your private key in memory, keep it out of the swap file, etc., etc., but any cracker with suitable tools and desire to crack your program will do it.
UNLESS!
You can partner with leading hardware vendors. Have them install a super-secure chip on all their hardware, and this chip will be under your control and not the user's control. When activated, this chip will monitor all I/O and memory and only allow what you decide to allow. Then you can simply disallow programs like IDA, rendering crackers helpless! As a side effect, you also get complete control over the user's computer, and you can use that power however you want. Everyone wins!
One last note: if you do decide to implement this, I recommend that your marketing department put a heavy spin on it. There'll probably be a bunch of jerks whining about ""privacy"" and ""ownership"" and crap like that. So you'll need a good name for this technology; the name has to sound like something people would want.
I think you should call it ""trustworthy computing"" (since ""trusted computing"" is already taken). Or maybe ""secure computing"".
","415","<c#><encryption><public-key-encryption><decompiling><code-security>","1","1","1","2013-06-11 14:01:54","17043929","6","","","","","2013-06-11 11:23:07",""
"32583673","Encryption using public-private keys","I've generated public-private keys using ssh-keygen -t rsa
Following is my public key
ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDtbGPZjdnMWk8lJ/CdaBZROCtNk8H+Ru4keC7DK55q2t2ISRgjBaR4qZnWezAA2iJX3cwq2ulfwCPmyoc0G180lUEMDkZkeuWzyvwWjZIo0cehN2j28evgpZadfe+NxYYqQ2f7/3eJ+3IwT4EE6WmzaYjsYXloilJLVJFBbPkdy+1xnHAa1RXsdDNjMPQ9d9PSdr9BYlph21lzflk5wdBxXnLxzUD3mb3j0cCMrIl7IF2CbkKnBC4VFZahRRyJLBWvXvcxXR7Pspv6/WUE2GsZZ3GynAhS7LuHk7NKmB13+lQFejDGO4yVsXQLw7dg+JsIs4h3JkindgJRUytQq7lZ user@Ganesh-VirtualBox

This is my code which gets me the public key
public static PublicKey getPublicKey(String filename)
        throws Exception {

    File f = new File(filename);
    FileInputStream fis = new FileInputStream(f);
    DataInputStream dis = new DataInputStream(fis);
    byte[] keyBytes = new byte[(int)f.length()];
    dis.readFully(keyBytes);
    dis.close();

    X509EncodedKeySpec spec =
            new X509EncodedKeySpec(keyBytes);
    KeyFactory kf = KeyFactory.getInstance(""RSA"");
    return kf.generatePublic(spec);
}

I'm passing correct filename to this method. The line kf.generatePublic(spec) is throwing error as shown below. 
Exception in thread ""main"" java.security.spec.InvalidKeySpecException: java.security.InvalidKeyException: invalid key format
at sun.security.rsa.RSAKeyFactory.engineGeneratePublic(RSAKeyFactory.java:205)
at java.security.KeyFactory.generatePublic(KeyFactory.java:334)

Why am I getting this error?
","Typically public keys are required in X.509 format and private keys are required in PKCS#8 format. So, whenever you are dealing with public/private keys, you need to make sure that they are in appropriate format.
Read below from Oracle docs

So, first you need a key specification. You can obtain one via the
  following, assuming that the key was encoded according to the X.509
  standard, which is the case, for example, if the key was generated
  with the built-in DSA key-pair generator supplied by the SUN provider:

Main error you are getting is InvalidKeyException which says:

This is the exception for invalid Keys (invalid encoding, wrong
  length, uninitialized, etc).

Now in you case it is the invalid encoding which is resulting this error because you are using the generated public key in clear and not making it compatible with X509EncodedKeySpec. So, to fix you problem first encode your public key as per X.509 standard so that you can use in X509EncodedKeySpec
","413","<java><encryption><rsa><public-key-encryption>","0","1","1","2015-09-15 11:20:52","","2","","","","","2015-09-15 10:26:09",""
"26221413","Public Key Integrity - Man in the middle attack","I want to license my product.
The question is about validation and making sure that public key is not changed so is the certificate (Man in the middle attack).
What I have planned so far is;

I give my EXE with license key and signed certificate (signed with private key) to the customer.
when customer enters license key, my EXE will validate it using public key (generating hash code, then decrypting certificate to get other hash code and compare)

Now problem is; if someone reverse engineers the EXE, changes the public key with his own public key and get a new certificate generated with his own private key. Then the EXE will always validate the certificate and my EXE is hacked.
Is this possible? If yes, what could be the solution to be sure my public key is not changed?
NOTE: There is no internet connection involved.
","To ensure integrity of something (executable, for example), sign it (or critical parts of it) with private key and check that the signature is valid every time you start the application.
Someone with enough time could of course figure out how the signature is done and replace that as well. They could bypass the check altogether. The only cure for that is encryption. But someone with enough time could work out the decryption algorithm...
The common way is to protect your license is to bind the software to some hardware, such as USB dongle, TPM or HDD serial number. This still does not guarantee that a determined hacker will not bypass your licensing.
There is no 100% protection against hackers. All you have to do is make it uneconomical for your users to hack it. Make the effort to hack a good deal more expensive than you are charging for the product. Make licensing terms very explicit and warn about risk of prosecution in case of breach. Build in reporting mechanism for suspected breaches so you can go after them.
","412","<c++><c++builder><public-key-encryption><encryption-asymmetric>","0","1","1","2014-10-06 17:33:23","","1","","","","","2014-10-06 17:21:21",""
"4689613","Conversion from BigInteger to octet?","I am trying to manually create the signature tag for a web service call. I accessed the certificate from the keystore and accessed the public key for the certificate. I now have the problem in converting the RSAKeyValue to ds:CryptoBinary type. Code returns the Biginteger value for mudulus and exponent and I am looking for a method or algorithm to convert them to octets and then converting to Bas64. Here is my code
RSAPublicKey rsaKey  = (RSAPublicKey)certificate.getPublicKey();
customSignature.Modulus = rsaKey.getModulus(); 
customSignature.Exponent = rsaKey.getPublicExponent();

Is there any solution available in Java for converting the integers to octet representation?
","Try following code using apache commons codec framework:
BigInteger modulus = rsaKey.getModulus();
org.apache.commons.codec.binary.Base64.encodeBase64String(modulus.toByteArray());

","408","<java><rsa><public-key-encryption>","1","2","2","2012-09-27 00:47:58","4689679","0","","","","","2011-01-14 09:29:35",""
"4689613","Conversion from BigInteger to octet?","I am trying to manually create the signature tag for a web service call. I accessed the certificate from the keystore and accessed the public key for the certificate. I now have the problem in converting the RSAKeyValue to ds:CryptoBinary type. Code returns the Biginteger value for mudulus and exponent and I am looking for a method or algorithm to convert them to octets and then converting to Bas64. Here is my code
RSAPublicKey rsaKey  = (RSAPublicKey)certificate.getPublicKey();
customSignature.Modulus = rsaKey.getModulus(); 
customSignature.Exponent = rsaKey.getPublicExponent();

Is there any solution available in Java for converting the integers to octet representation?
","Unfortunatly, modulus.toByteArray() does not map directly to the XML Digital Signature's ds:CryptoBinary type, which also requires stripping leading zero octets. You need to do something like the following, before you do the base64 encoding
byte[] modulusBytes = modulus.toByteArray();
int numLeadingZeroBytes = 0;
while( modulusBytes[numLeadingZeroBytes] == 0 )
    ++numLeadingZeroBytes;
if ( numLeadingZeroBytes > 0 ) {
    byte[] origModulusBytes = modulusBytes;
    modulusBytes = new byte[origModulusBytes.length - numLeadingZeroBytes];
    System.arraycopy(origModulusBytes,numLeadingZeroBytes,modulusBytes,0,modulusBytes.length);
}

","408","<java><rsa><public-key-encryption>","1","0","2","2012-09-27 00:47:58","4689679","0","","","","","2011-01-14 09:29:35",""
"36485298","decrypt pgp files from a folder and moving it - c#","I am trying to decrypt .pgp files from a location and then moving those files to another location. I looked into this article and code accordingly. In my code I am developing an application which will check to a certain location after every 100 seconds and if there are files then it will decrypt and move. but I am getting this exception The process cannot access the file 'c:\file.pgp' because it is being used by another process.
Here is my code where I am calling that class which I copied from that article.
private static void OnTimedEvent(object source, ElapsedEventArgs e)
    {
        //Do the stuff you want to be done every hour;
        string sourcePath = @""files location"";
        string archivePath = @""move original file after decrypting location"";
        string targetPath = @""decrypted file location"";
        string pubkeyPath = @""public key location\PGPPublicKey.txt"";
        string privkeyPath = @""private key location\PGPPrivateKey.txt"";

        string fileName = """";
        string destFile = """";

        if (System.IO.Directory.Exists(sourcePath))
        {
            string[] files = System.IO.Directory.GetFiles(sourcePath);

            // Copy the files and overwrite destination files if they already exist.
            foreach (string s in files)
            {
                PGPDecrypt test = new PGPDecrypt(s,
                                         privkeyPath,
                                         ""password"",
                                         targetPath + ""decrypted.txt"",
                                         pubkeyPath);
                FileStream fs = File.Open(s, FileMode.Open);
                test.decrypt(fs, targetPath + ""decrypted.txt"");

                // Use static Path methods to extract only the file name from the path.
                fileName = System.IO.Path.GetFileName(s);
                destFile = System.IO.Path.Combine(archivePath, fileName);
                System.IO.File.Move(s, archivePath);
            }
        }        
    }

","Where are you getting the error. If you are getting error while moving it might be because your filestream is not close. After decryption and before move close the filestream with fs.Close();
","407","<c#><encryption><bouncycastle><public-key-encryption><pgp>","1","1","3","2018-12-17 16:50:39","53819670","0","","","","","2016-04-07 19:20:39",""
"36485298","decrypt pgp files from a folder and moving it - c#","I am trying to decrypt .pgp files from a location and then moving those files to another location. I looked into this article and code accordingly. In my code I am developing an application which will check to a certain location after every 100 seconds and if there are files then it will decrypt and move. but I am getting this exception The process cannot access the file 'c:\file.pgp' because it is being used by another process.
Here is my code where I am calling that class which I copied from that article.
private static void OnTimedEvent(object source, ElapsedEventArgs e)
    {
        //Do the stuff you want to be done every hour;
        string sourcePath = @""files location"";
        string archivePath = @""move original file after decrypting location"";
        string targetPath = @""decrypted file location"";
        string pubkeyPath = @""public key location\PGPPublicKey.txt"";
        string privkeyPath = @""private key location\PGPPrivateKey.txt"";

        string fileName = """";
        string destFile = """";

        if (System.IO.Directory.Exists(sourcePath))
        {
            string[] files = System.IO.Directory.GetFiles(sourcePath);

            // Copy the files and overwrite destination files if they already exist.
            foreach (string s in files)
            {
                PGPDecrypt test = new PGPDecrypt(s,
                                         privkeyPath,
                                         ""password"",
                                         targetPath + ""decrypted.txt"",
                                         pubkeyPath);
                FileStream fs = File.Open(s, FileMode.Open);
                test.decrypt(fs, targetPath + ""decrypted.txt"");

                // Use static Path methods to extract only the file name from the path.
                fileName = System.IO.Path.GetFileName(s);
                destFile = System.IO.Path.Combine(archivePath, fileName);
                System.IO.File.Move(s, archivePath);
            }
        }        
    }

","I believe the issue you are having is caused by the file not being closed, when you loop with the foreach loop the first iteration probably works. However, the next time, because it was never closed, it is still being used.
Try adding 
fs.Close();

At the end of the foreach loop
","407","<c#><encryption><bouncycastle><public-key-encryption><pgp>","1","0","3","2018-12-17 16:50:39","53819670","0","","","","","2016-04-07 19:20:39",""
"36485298","decrypt pgp files from a folder and moving it - c#","I am trying to decrypt .pgp files from a location and then moving those files to another location. I looked into this article and code accordingly. In my code I am developing an application which will check to a certain location after every 100 seconds and if there are files then it will decrypt and move. but I am getting this exception The process cannot access the file 'c:\file.pgp' because it is being used by another process.
Here is my code where I am calling that class which I copied from that article.
private static void OnTimedEvent(object source, ElapsedEventArgs e)
    {
        //Do the stuff you want to be done every hour;
        string sourcePath = @""files location"";
        string archivePath = @""move original file after decrypting location"";
        string targetPath = @""decrypted file location"";
        string pubkeyPath = @""public key location\PGPPublicKey.txt"";
        string privkeyPath = @""private key location\PGPPrivateKey.txt"";

        string fileName = """";
        string destFile = """";

        if (System.IO.Directory.Exists(sourcePath))
        {
            string[] files = System.IO.Directory.GetFiles(sourcePath);

            // Copy the files and overwrite destination files if they already exist.
            foreach (string s in files)
            {
                PGPDecrypt test = new PGPDecrypt(s,
                                         privkeyPath,
                                         ""password"",
                                         targetPath + ""decrypted.txt"",
                                         pubkeyPath);
                FileStream fs = File.Open(s, FileMode.Open);
                test.decrypt(fs, targetPath + ""decrypted.txt"");

                // Use static Path methods to extract only the file name from the path.
                fileName = System.IO.Path.GetFileName(s);
                destFile = System.IO.Path.Combine(archivePath, fileName);
                System.IO.File.Move(s, archivePath);
            }
        }        
    }

","This is I ended up and it is working
//Decrypt
using DidiSoft.Pgp;
 PGPLib pgp = new PGPLib();

            string inputFileLocation = file Location; 
            string privateKeyLocation = @""I posted my private at this location"";
            string privateKeyPassword = ""Decryption Password"";
            string outputFile = @""Output Location"";

            // decrypt and obtain the original file name
            // of the decrypted file
            string originalFileName =
              pgp.DecryptFile(inputFileLocation,
                          privateKeyLocation,
                          privateKeyPassword,
                          outputFile);
//Move decrypted file to archive
string path = Decrypted file Location;
            string path2 = @""Archive file location"" + Path.GetFileName(file); ;
            try
            {
                if (!File.Exists(path))
                {
                    // This statement ensures that the file is created,
                    // but the handle is not kept.
                    using (FileStream fs = File.Create(path)) { }
                }

                // Ensure that the target does not exist.
                if (File.Exists(path2))
                    File.Delete(path2);

                // Move the file.
                File.Move(path, path2);

            }
            catch (Exception e)
            {

            }

","407","<c#><encryption><bouncycastle><public-key-encryption><pgp>","1","0","3","2018-12-17 16:50:39","53819670","0","","","","","2016-04-07 19:20:39",""
"47594704","gpg protection algorithm is not supported","I have files that are encrypted with gpg. I've created a new server and I exported\imported the public and private key to my new server. The files are now encrypted on the new server. When I try to decrypt a file on the new server I get the following error:
gpg: protection algorithm 3 is not supported
gpg: encrypted with 4096-bit ELG key, ID 15BBEC7A, created 2012-11-21
      ""test test (Logs) ""
gpg: public key decryption failed: Invalid cipher algorithm
gpg: decryption failed: No secret key
If I copy the file to my old server I'm still able to decrypt it. I can't find the problem. My first guess is that the cipher used originaly is CATS5 and that it's no longuer supported.
","Yes, algorithm 3 is CAST5.  You will have to compile GnuPG yourself or use an older version.
However, it's curious that your system cannot handle CAST5.  Have you enabled FIPS mode?  That would explain it.
","405","<encryption><redhat><public-key-encryption><gnupg>","0","0","1","2017-12-01 20:38:09","","1","","","","","2017-12-01 13:41:40",""
"39235014","How would you do public key encryption by hand?","Can the public key encryption method be used if you were to encrypt and decrypt messages by hand using the pen and paper method? If so then how would you do it?
If it's possible, then can you provide a step-by-step example, perhaps by using keys that are only a few bits in length?
","","404","<encryption><public-key-encryption><public-key>","0","","0","2016-08-30 20:18:40","","5","","6242026","","2016-08-30 20:18:40","2016-08-30 18:50:06",""
"45426767",".NET - Porting RSACryptoServiceProvider to CNG for signing data","I'm trying to port an RSA signing function written in C#, from the (relatively easy to use) RSACryptoServiceProvider.SignHash method, to the CNG API, in order to use a specific cryptographic service provider.
This is the original (before porting) function:
    private static byte[] SignDigest(RSAParameters keyMaterial, byte[] digest, string hashAlgo)
    {
        using (var cryptoProvider = new RSACryptoServiceProvider())
        {
            cryptoProvider.ImportParameters( keyMaterial );
            // hashAlgo can only be one of ""SHA1"", ""SHA256"", ""SHA384"" and ""SHA512"".
            return cryptoProvider.SignHash( digest, CryptoConfig.MapNameToOID( hashAlgo ) );
        }
    }

Quite simple, don't you think? When porting to CNG, this is the best I could do so far:
    private static byte[] SignDigest(RSAParameters keyMaterial, byte[] digest, string hashAlgo)
    {
        var size = 6 * 4 + keyMaterial.Exponent.Length + keyMaterial.Modulus.Length + keyMaterial.P.Length + keyMaterial.Q.Length;
        var keyBlob = new byte[size];            
        using (var writer = new BinaryWriter(new MemoryStream(keyBlob)))
        {
            // This is BCRYPT_RSAKEY_BLOB structure (https://msdn.microsoft.com/en-us/library/windows/desktop/aa375531(v=vs.85).aspx).
            writer.Write(0x32415352); // BCRYPT_RSAPRIVATE_MAGIC
            writer.Write(keyMaterial.Modulus.Length * 8); // BitLength
            writer.Write(keyMaterial.Exponent.Length); // cbPublicExp
            writer.Write(keyMaterial.Modulus.Length); // cbModulus
            writer.Write(keyMaterial.P.Length); // cbPrime1
            writer.Write(keyMaterial.Q.Length); // cbPrime2
            writer.Write(keyMaterial.Exponent); // PublicExponent
            writer.Write(keyMaterial.Modulus); // Modulus
            writer.Write(keyMaterial.P); // Prime1
            writer.Write(keyMaterial.Q); // Prime2
        }

        // Function NCryptImportKey uses ""RSAPRIVATEBLOB"" to indicate a BCRYPT_RSAPRIVATE_BLOB structure.
        // See https://msdn.microsoft.com/en-us/library/windows/desktop/aa376276(v=vs.85).aspx.

        var key = CngKey.Import( keyBlob, new CngKeyBlobFormat( ""RSAPRIVATEBLOB"" ), _myProvider );

        IntPtr pPaddingInfo = question; // What do I specify here?
        byte[] pbHashValue = question; // Should I calculate hash from digest? How can I make sure it will be valid for verification?
        byte[] pbSignature = question; // Is the signature size related to hash size? Or RSA key size?
        int dwFlags = question; // Should I use BCRYPT_PAD_PKCS1 here or simply zero?

        int pcbResult;
        int result;

        using ( var hKey = key.Handle )
        {
            result = NCryptSignHash( hKey, pPaddingInfo, pbHashValue, pbHashValue.Length, pbSignature, pbSignature.Length, out pcbResult, dwFlags );
        }

        if (result != 0)
            throw new Exception();

        return TrimArray(pbSignature, pcbResult);
    }

    // As described on https://msdn.microsoft.com/en-us/library/windows/desktop/aa376295(v=vs.85).aspx.
    [DllImport(""ncrypt.dll"")]
    internal static extern NCryptErrorCode NCryptSignHash(
        SafeNCryptKeyHandle hKey, 
        IntPtr pPaddingInfo, 
        [MarshalAs(UnmanagedType.LPArray)] byte[] pbHashValue, 
        int cbHashValue, 
        [MarshalAs(UnmanagedType.LPArray)] byte[] pbSignature, 
        int cbSignature, 
        out int pcbResult, 
        int dwFlags);

I can successfully import the key to CNG, but I don't know how to perform the signing operation. Any help is welcome...
","If you're on .NET 4.6 or higher, then after var key = CngKey.Import(...)
using (RSACng rsa = new RSACng(key))
{
    // Consider changing your signature to take a HashAlgorithmName instead of string.
    // I'm assuming you want RSA-SSA PKCS#1 v1.5 instead of RSA-SSA-PSS.
    return rsa.SignHash(digest, new HashAlgorithmName(hashAlgo), RSASignaturePadding.Pkcs1);
}

Or you can just check out https://referencesource.microsoft.com/#System.Core/System/Security/Cryptography/RsaCng.cs,672daeef0962f4ad if you want to see the P/Invokes (assuming that you're not doing anything that violates the license of referencesource.microsoft.com).
","404","<.net><rsa><digital-signature><public-key-encryption><cng>","0","1","1","2017-08-03 14:55:03","45487814","0","","","","","2017-07-31 23:31:12",""
"50926762","php gnupg decrypt exists with ""decrypt failed""","I try to encrypt and decrypt a string with php gnupg. The encryption work well. It could be decrypted via shell.
When I try to decrypt the string with gnupg_decrypt it terminates with a simple ""decrypt failed"".
I tried to regenerate the keys with different methods but the result is the same.
The code seems to import only the public key but the private key isn't imported.

PHP-Version: 7.2.5
GPGme Version: 1.10.0
Extension Version: 1.4.0
gpg (GnuPG) 2.2.4
--libgcrypt 1.8.1

How could I decrypt the text?
The folowing code is used to decrypt the message:
// initialize PGP
putenv(""GNUPGHOME="".__DIR__.""/.gnupg"");
$oPgp = new gnupg();
var_dump($oPgp->keyinfo(''));

// get encrypted Message
$sEncryptedText = file_get_contents(__DIR__.'/msg.txt');

// import Key
$mInfo = $oPgp->import($sPrivateKey);

// show infos
echo ""<br><br> Private-Key: <br> "";
var_dump($mInfo);

echo ""<br><br>was Key added?<br>"";
var_dump($oPgp->adddecryptkey($mInfo['fingerprint'], 'here is the correct password'));

echo 'Decrypted:<br>';
var_dump( $oPgp->decrypt($sEncryptedText));

echo 'Errors:<br>';
var_dump($oPgp->geterror());

$oPgp->cleardecryptkeys();

var_dump($oPgp->keyinfo(''));

The output is the flollowing:
/var/www/html/encrypt_test/encrypt.php:73: array (size=0)
empty


Private-Key: 
/var/www/html/encrypt_test/encrypt.php:83:
array (size=9)
  'imported' => int 1
  'unchanged' => int 0
  'newuserids' => int 0
  'newsubkeys' => int 0
  'secretimported' => int 1
  'secretunchanged' => int 0
  'newsignatures' => int 0
  'skippedkeys' => int 0
  'fingerprint' => string 'fingerprint1' (length=40)


was Key added?
/var/www/html/encrypt_test/encrypt.php:86:boolean true
Decrypted:
/var/www/html/encrypt_test/encrypt.php:89:boolean false
Errors:
/var/www/html/encrypt_test/encrypt.php:92:string 'decrypt failed' (length=14)
/var/www/html/encrypt_test/encrypt.php:96:
array (size=1)
  0 => 
    array (size=8)
      'disabled' => boolean false
      'expired' => boolean false
      'revoked' => boolean false
      'is_secret' => boolean false
      'can_sign' => boolean true
      'can_encrypt' => boolean true
      'uids' => 
        array (size=1)
          0 => 
            array (size=6)
              'name' => string 'name' (length=x)
              'comment' => string 'comment' (length=x)
              'email' => string 'email' (length=x)
              'uid' => string 'uid' (length=x)
              'revoked' => boolean false
              'invalid' => boolean false
      'subkeys' => 
        array (size=2)
          0 => 
            array (size=11)
              'fingerprint' => string 'fingerprint1' (length=X)
              'keyid' => string 'id1' (length=X)
              'timestamp' => int 1234
              'expires' => int 0
              'is_secret' => boolean false
              'invalid' => boolean false
              'can_encrypt' => boolean false
              'can_sign' => boolean true
              'disabled' => boolean false
              'expired' => boolean false
              'revoked' => boolean false
          1 => 
            array (size=11)
              'fingerprint' => string 'fingerprint2' (length=x)
              'keyid' => string 'keyid2' (length=x)
              'timestamp' => int 1234
              'expires' => int 0
              'is_secret' => boolean false
              'invalid' => boolean false
              'can_encrypt' => boolean true
              'can_sign' => boolean false
              'disabled' => boolean false
              'expired' => boolean false
              'revoked' => boolean false

","I've got the Solution:
In GPG version > 2.0.0 you can't pass a Password to the private key. This is restricted, cause of security reasons. The password shouldn't pass readable to the program. 
It could be fixed in two ways:
One way is to use a Key without a Password. Then you can use the Method without a Password.
The other way is to allow unattended processing. You can see here how to do that.
","404","<php><encryption><public-key-encryption><gnupg><pgp>","1","0","1","2018-07-26 07:46:31","","0","","4140943","","2018-07-20 13:15:33","2018-06-19 10:59:02",""
"5517687","RSA trick in email reply","A uses RSA encryption for her email. B ﬁnds an encrypted email to A: c = m^e mod n that he wants to know the plain text. B knows that when A replies to her email, she always includes the text of the message she is responding to in the reply.
Assume A only receives messages that are bit strings of length at most log n, which can be 
mapped to Zn.
Also assume that B cannot simply send c as his own email to A and expect a reply, but that A will respond to email messages other than c.
How can B learn m using only c, e, n and random values from Zn? 
","From wikipedia:

RSA has the property that the product
  of two ciphertexts is equal to the
  encryption of the product of the
  respective plaintexts. That is m1^e m2^e≡(m1m2)^e (mod n) Because
  of this multiplicative property a
  chosen-ciphertext attack is possible.
  E.g. an attacker, who wants to know
  the decryption of a ciphertext c = m^e
  (mod n) may ask the holder of the
  private key to decrypt an
  unsuspicious-looking ciphertext c' =
  cr^e (mod n) for some value r chosen by
  the attacker. Because of the
  multiplicative property c' is the
  encryption of mr (mod n). Hence, if
  the attacker is successful with the
  attack, he will learn mr (mod n) from
  which he can derive the message m by
  multiplying mr with the modular
  inverse of r modulo n.

That's actually pretty neat, thanks for asking the question that lead me to learning this.
As for your question of 3020 vs 600, it's multiplicative; rarely are concatenations used in mathematics, since after all we should always be working independent of base.
","401","<encryption><rsa><public-key><public-key-encryption>","0","1","1","2011-04-01 20:13:12","5517933","1","","","","","2011-04-01 19:03:12",""
"25968443","Encrypt a file in Android then decrypt it in PC","I want to collect data and write in a encrypted file using public key (in Android). Then I send file to PC to read. In my PC I need to create an application to decrypt the file too. How can I do and how to share key securely?
","If you have encrypted file using Public key, file can be decrypted only using associated Private key. It is also called as Asymmetric Encryption. But sending your application private key out of application context will be a severe security breach. Public keys are meant to be shared publicly, not the Private Key.  
In your case you can encrypt your file on android device using PC/Sever public key, send it to  server and decrypt at server/PC using PC's Private key. This would be the only best solution.
","398","<android><encryption><public-key-encryption>","0","0","1","2015-11-16 23:32:44","","0","","126273","","2015-11-16 23:32:44","2014-09-22 07:11:37",""
"38709652","SecKeyEncrypt returns error -50 and 0 cipherSize","I am porting a PKI api to Swift 2.2 and found the following error.  Everything works fine in Objective-C.
The data object to be encrypted is 32 bytes in size.  This is the code I am using.
let buflen = 64
var cipherBuffer = UnsafeMutablePointer<UInt8>.alloc(buflen)
cipherBuffer[buflen] = 0 // zero terminate

var cipherLength: Int = 0

var statusCode: OSStatus?

let dataPointer = UnsafePointer<UInt8>(data.bytes)

statusCode = SecKeyEncrypt(publicKey, SecPadding.PKCS1, dataPointer, data.length, cipherBuffer, &cipherLength)

This results in an error -50 and 0 cipher length.
I am doing an hexdump of the public key and the dataPointer to ensure they are OK, but can´t find the problem with the SecKeyEncrypt call
Any help will be appreciated
","After some research I found a solution to the problem
I was creating the cipherBuffer using alloc and zero terminating the array, as follows:
let buflen = 64
var cipherBuffer = UnsafeMutablePointer<UInt8>.alloc(buflen)
cipherBuffer[buflen] = 0 // zero terminate

I tried the following approach and it works fine.
let blockSize = SecKeyGetBlockSize(publicKey) //64
var cipherBuffer = [UInt8](count: Int(blockSize), repeatedValue: 0)

Given that both approaches reported a block of 64 bytes with 0x00 using hexDump, I did a quick test and reviewed the previous code and found that removing the line with ""cipherBuffer[buflen] = 0"" fixes the problem.
It seems that it has to do with the zero termination of the array, or I may have done something weird.
","397","<swift><encryption><public-key-encryption><pki>","1","1","1","2016-08-02 20:16:06","38729677","0","","","","","2016-08-01 23:38:21",""
"19427429","RSA using bouncy castle with key stored in CSP blog","I have a private key in a csp format. I need migrate to Bouncy Castle. But I don't find any function to import this format.
Please, can you help me to traslate this code?
using (RSACryptoServiceProvider privatekey = new RSACryptoServiceProvider()) {
    privatekey.ImportCspBlob(""chave em csp"");
    Byte[] buffer = Encoding.GetEncoding(""utf-8"").GetBytes(textEdit1.Text);
    Byte[] signature = privatekey.SignData(buffer, ""SHA1"");
    return Convert.ToBase64String(signature);
}

Thanks
","You can start with this: C# Sign Data with RSA using BouncyCastle, it tells how to sign using Bouncy Castle, to import the key to Bouncy Castle, you need to look at the DotNetUtilities class on Org.BouncyCastle.Security namespace.
","397","<c#><bouncycastle><public-key-encryption>","0","0","1","2013-11-15 20:22:21","","0","","","","","2013-10-17 12:59:31",""
"43943374","Java getEncoded() NoSuchMethodError","I'm using this web-push java library: https://github.com/MartijnDwars/web-push
Gradle build task to compile as a jar file to be use in Coldfusion.
jar {
  baseName = 'web-push'
  version = '3.0.0'
  doFirst {
      from {
          configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
      }
  }
  exclude 'META-INF/*.RSA', 'META-INF/*.SF','META-INF/*.DSA' 
}

So i have a functioning jar file with all the dependencies. However, when I go to send a notification I get this error.
java.lang.NoSuchMethodError: org.bouncycastle.math.ec.ECPoint.getEncoded(Z)[B
which points to the savePublicKey method in Utils.java
public static byte[] savePublicKey(ECPublicKey publicKey) {
    return publicKey.getQ().getEncoded(false);
}

Its my understanding that getEncoded is a build int java Key method. So I'm not sure if I'm getting this error because publicKey.getQ isn't a valid key or because I need to import/include a java key class. 
Thanks in advance for any tips/help. 
CFML Code
<cfscript>

variables.server.pubKey = 'XXXXXXXXXXX';
variables.server.priKey = 'XXXXXX';

variables.subscription = {
      ""endpoint"": ""https://fcm.googleapis.com/fcm/send/eEmctHWg8-k:APA91bF-kzQfUv1Y1T9C3sJ3eN5zDDtyRhcDU0MyVS1XWgPIko2X7VpjeymhqDAzb-4nbg4x2SmObHk1JSITG4lmsx-40E_uNi4a_TnFavs4ICMzbeHQJzKgnuTAcQxSXDxJSBNFrzY_""
    , ""keys"": {
          ""p256dh"": ""BMIWtizmL6BgkofOn6DmPq/AaDwBvh894GBHvPpH2xgg9/uNoNsvKWAfEXVxLgpaUeytb8tGryguvIAmYTDO0W8=""
        , ""auth"": ""zDH8z4GPHvW2zFXG0bf2pQ==""
    } 
}
variables.json = serializeJSON(variables.subscription);

variables.java.gson = createObject('java', 'com.google.gson.Gson', expandPath('/fw/jar/gson-2.8.0.jar'));

variables.lib               = expandPath('/fw/jar/web-push-3.0.0.jar');
variables.java.subscription = createObject('java', 'nl.martijndwars.webpush.Subscription', variables.lib);
variables.java.notification = createObject('java', 'nl.martijndwars.webpush.Notification', variables.lib);
variables.java.pushservice  = createObject('java', 'nl.martijndwars.webpush.PushService', variables.lib);

variables.java.subscription = variables.java.gson.fromJson(variables.json, variables.java.subscription.class);

variables.java.notification.init(variables.java.subscription, 'Hello, World!');

variables.java.pushservice.init(variables.server.pubKey, variables.server.priKey, ""mailto:craig@thinkerventures.com"");

variables.resonse = variables.java.pushservice.send(variables.java.notification);

</cfscript>

CFML Stack Trace
Full Trace: org.bouncycastle.math.ec.ECPoint.getEncoded(Z)[B 
at nl.martijndwars.webpush.Utils.savePublicKey(Utils.java:36):36 
at nl.martijndwars.webpush.HttpEce.lengthPrefix(HttpEce.java:124):124 
at nl.martijndwars.webpush.HttpEce.deriveDH(HttpEce.java:115):115 
at nl.martijndwars.webpush.HttpEce.deriveKey(HttpEce.java:55):55 
at nl.martijndwars.webpush.HttpEce.encrypt(HttpEce.java:172):172 
at nl.martijndwars.webpush.PushService.encrypt(PushService.java:92):92 
at nl.martijndwars.webpush.PushService.sendAsync(PushService.java:128):128 
at nl.martijndwars.webpush.PushService.send(PushService.java:113):113 
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method):-2 
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62):62 
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43):43 
at java.lang.reflect.Method.invoke(Method.java:497):497 
at lucee.runtime.reflection.pairs.MethodInstance.invoke(MethodInstance.java:55):55 
at lucee.runtime.reflection.Reflector.callMethod(Reflector.java:857):857 
at lucee.runtime.reflection.Reflector.callMethod(Reflector.java:842):842 
at lucee.runtime.java.JavaObject.call(JavaObject.java:228):228 
at lucee.runtime.java.JavaObject.call(JavaObject.java:259):259 
at lucee.runtime.util.VariableUtilImpl.callFunctionWithoutNamedValues(VariableUtilImpl.java:743):743 
at lucee.runtime.PageContextImpl.getFunction(PageContextImpl.java:1593):1593 
at script.dev.push_cfm$cf.call(D:\nonprofitthrive_com\script\dev\push.cfm:38):38 
at lucee.runtime.PageContextImpl.doInclude(PageContextImpl.java:954):954 
at lucee.runtime.PageContextImpl.doInclude(PageContextImpl.java:858):858 
at fw.application_fw_cfc$cf.udfCall1(D:\nonprofitthrive_com\fw\application_fw.cfc:279):279 
at fw.application_fw_cfc$cf.udfCall(D:\nonprofitthrive_com\fw\application_fw.cfc):-1 
at lucee.runtime.type.UDFImpl.implementation(UDFImpl.java:111):111 
at lucee.runtime.type.UDFImpl._call(UDFImpl.java:328):328 
at lucee.runtime.type.UDFImpl.call(UDFImpl.java:229):229 
at lucee.runtime.ComponentImpl._call(ComponentImpl.java:642):642 
at lucee.runtime.ComponentImpl._call(ComponentImpl.java:524):524 
at lucee.runtime.ComponentImpl.call(ComponentImpl.java:1761):1761 
at lucee.runtime.listener.ModernAppListener.call(ModernAppListener.java:414):414 
at lucee.runtime.listener.ModernAppListener._onRequest(ModernAppListener.java:223):223 
at lucee.runtime.listener.MixedAppListener.onRequest(MixedAppListener.java:37):37 
at lucee.runtime.PageContextImpl.execute(PageContextImpl.java:2265):2265 
at lucee.runtime.PageContextImpl.execute(PageContextImpl.java:2228):2228 
at lucee.runtime.engine.CFMLEngineImpl.serviceCFML(CFMLEngineImpl.java:456):456 
at lucee.loader.servlet.CFMLServlet.service(CFMLServlet.java:47):47 
at javax.servlet.http.HttpServlet.service(HttpServlet.java:729):729 
at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:291):291 
at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206):206 
at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52):52 
at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:239):239 
at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206):206 
at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:217):217 
at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:106):106 
at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:502):502 
at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:142):142 
at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:79):79 
at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:88):88 
at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:518):518 
at org.apache.coyote.ajp.AbstractAjpProcessor.process(AbstractAjpProcessor.java:844):844 
at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:673):673 
at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1500):1500 
at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1456):1456 
at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142):1142 
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617):617 
at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61):61 
at java.lang.Thread.run(Thread.java:745):745 

","","396","<java><coldfusion><public-key-encryption>","2","","0","2017-05-12 17:48:38","","22","","2687861","","2017-05-12 17:48:38","2017-05-12 17:27:41",""
"10071701","Ruby: Cryptographically sign a string to ensure authenticity?","Lets say I have a origin server which through the act of a redirect with particular query string params needs to provide details to a target server. However, I need to ensure those details came from my origin server only.
Also I can't sure the integrity of the target server. Or specifically, the target server might be compromised so any encryption keys might have been read by a malicious party.
I'm thinking I could sign the query string using some form of public/private keypair. The origin server uses a private key to sign the string, and the target server uses a public key to verify it came from my origin server, and the message hasn't been tampered with.
I'm far from a cryptography expert or anything, so any assumption here I've made might be wrong, please correct me if so :)
I'm basically after a (hopefully) simple way to do this in Ruby.
","Probably, the easiest form of signing the query data (in your case a redirection URL) is by using an HMAC. Your origin and destination server would need to share a common key in this case - HMACs are not a form of public/private key cryptography, but rather a form of keyed hashing.
The module you're looking for is ruby-hmac, and your source and destination server would have to do something like:
require 'hmac-md5'
HMAC::MD5.new(""<your shared key>"").update(""<your URL to check>"").hexdigest

and compare on the destination side that the digest computed by the HMAC on the source side is equivalent: both sides thus do the same computation. The hexdigest of the HMAC can simply be transported by an additional query parameter from source to destination.
","395","<ruby><encryption><digital-signature><public-key-encryption>","2","1","1","2012-04-09 11:10:32","","0","1","42146","","2012-04-09 11:10:32","2012-04-09 10:07:09",""
"22563438","RSA Encryption File larger than PublicKey","With the following method i can successfully encrypt a NSData-Object which is not bigger than the 256Bit:
OSStatus SecCertificateCopyPublicKey (
                                  SecCertificateRef certificate,
                                  SecKeyRef *key
                                  );

- (NSData *)encryptWithData:(NSData *)content {

OSStatus result = -1;

NSData *plainTextData = content;//[@""123456789"" dataUsingEncoding:NSUTF8StringEncoding];
size_t plainTextLength = [plainTextData length];

SecTrustRef trustRef;
SecTrustResultType trustResult;

SecPolicyRef policy = SecPolicyCreateBasicX509();

NSData *certificateData = [self getPublicKey];

SecCertificateRef cert = NULL;
if( [certificateData length] ) {
    cert = SecCertificateCreateWithData(NULL, (__bridge CFDataRef)certificateData);
    if( cert != NULL ) {
        CFStringRef certSummary = SecCertificateCopySubjectSummary(cert);
        NSString* summaryString = [[NSString alloc] initWithString:(__bridge NSString*)certSummary];
        NSLog(@""CERT SUMMARY: %@"", summaryString);
        CFRelease(certSummary);
    } else {
        NSLog(@"" *** ERROR *** trying to create the SSL certificate from data located, but failed"");
    }
}

result = SecTrustCreateWithCertificates(cert, policy, &trustRef);

if (result != errSecSuccess) {
    NSLog(@""Trust create failed with code: %d"",(int)result);
    return nil;
}

result = SecTrustEvaluate(trustRef, &trustResult);

if (result != errSecSuccess) {
    NSLog(@""Trust eval failed with code: %d"",(int)result);

    CFRelease(trustRef);
    return nil;
}

SecKeyRef publicKey = SecTrustCopyPublicKey(trustRef);

uint8_t *cipherTextBuf = NULL;


size_t keyBlockSize = SecKeyGetBlockSize(publicKey);
int maxInputSize = keyBlockSize - 11; //If using PKCS1 Padding, else keyBlockSize
size_t cipherTextLen = keyBlockSize;

if (plainTextLength > maxInputSize) {
    //Fail
    NSLog(@""Data size is larger than max permitted!"");

    CFRelease(trustRef);
    CFRelease(publicKey);
    CFRelease(policy);

    return nil;
}

cipherTextBuf = malloc(sizeof(uint8_t)*keyBlockSize);
memset(cipherTextBuf,0,keyBlockSize);

//result = SecKeyEncrypt(publicKey, kSecPaddingPKCS1, plainTextBuf, plainTextLength, cipherTextBuf, &cipherTextLen);
result = SecKeyEncrypt(publicKey, kSecPaddingPKCS1, (const uint8_t *)[plainTextData bytes], plainTextLength, cipherTextBuf, &cipherTextLen);

NSData *cipherText = nil;
if (result == errSecSuccess) {

    cipherText = [NSData dataWithBytes:cipherTextBuf length:cipherTextLen];

} else {
    NSLog(@""Error detected: %d"",(int)result);
}

free(cipherTextBuf);
cipherTextBuf = NULL;

CFRelease(trustRef);
CFRelease(publicKey);
CFRelease(policy);

return cipherText;
}

-(NSData *)getPublicKey
{
NSString *filePath = [[NSBundle mainBundle] pathForResource:@""public_key"" ofType:@""cer""];
NSData *myData = [NSData dataWithContentsOfFile:filePath];

return myData;
}

But how would i encrypt a file which is larger than 256Bit?!
","The general procedure is to asymmetrically (with RSA for example) transfer a symmetric key that can be used to encrypt/decrypt your payload with a symmetric cipher like AES (in combination with a block cipher mode like CBC). If possible you should avoid building such crypto yourself though. A rather user friendly library is NaCl for which the Sodium implementation purportedly can be used with iOS.
","393","<ios><iphone><objective-c><ios7><public-key-encryption>","-1","2","1","2014-04-11 23:42:12","","1","","","","","2014-03-21 15:52:16",""
"20614901","Certificate based authentication","I'm planning to do a desktop app for secure file exchange in Java.
The app needs a reliable authentication method that must guarantee that only authorised users access the system.
In the registration, the users generate a key pair and send their username and public key to the central server of the system. A system admin, which has access to this central server, approves the registration and asks a certificate authority to issue a public key certificate that binds the username to the public key. A x509 certificate is generated and stored at a certificate server.
When the user wants to authenticate, he enters his username and the app creates a digital signature for him, with his private key. This signature is sent to central server, which requests the x509 certificate for the matching private key. If a x509 is found at the certificate server, it sends the certificate for the central server and the user is authenticated.
I think I have the correct idea, but I don't know how to start the implementation in Java. Can you guys give me a few pointers, or correct my ideas if you think I'm a little confused?
","In your scenario, I don't really see the point of having a certificate authority sign an x509 certificate. It feels needlessly complicated since there isn't a need for a chain of trust.
Instead, I'd look into using something like SSH keys for authentication like what git does.
","387","<java><authentication><certificate><x509certificate><public-key-encryption>","0","2","2","2014-02-23 08:03:40","","3","","321731","","2014-02-23 08:03:40","2013-12-16 14:48:45",""
"20614901","Certificate based authentication","I'm planning to do a desktop app for secure file exchange in Java.
The app needs a reliable authentication method that must guarantee that only authorised users access the system.
In the registration, the users generate a key pair and send their username and public key to the central server of the system. A system admin, which has access to this central server, approves the registration and asks a certificate authority to issue a public key certificate that binds the username to the public key. A x509 certificate is generated and stored at a certificate server.
When the user wants to authenticate, he enters his username and the app creates a digital signature for him, with his private key. This signature is sent to central server, which requests the x509 certificate for the matching private key. If a x509 is found at the certificate server, it sends the certificate for the central server and the user is authenticated.
I think I have the correct idea, but I don't know how to start the implementation in Java. Can you guys give me a few pointers, or correct my ideas if you think I'm a little confused?
","I'd agree with Terry Chia that client auth SSL will give you a fast and easy way to get what you want.  Configure your web server with SSL and specifically client authentication, and provide the trusted CAs that the admin will use for signing approved certs.
The Java app will need to use an SSL library and have access to the way to set the credential for the library.  I think the default libary for SSL in Java may even do this, and may use the X509Certificate as a way to specify the credential.
What strikes me as odd in your description is that the client is not sending its certificate with the proof of private key (whether you sign it or use SSL, there is a proof of private key as either the signature or the SSL handshake).  It's far more typical to have the client say ""This is who I am, and here is proof"" - ie provide both the X509 Certificate and the proof of private key.  I suspect that the server *could• lookup the credential based on the public key, but it would be less efficient.
","387","<java><authentication><certificate><x509certificate><public-key-encryption>","0","1","2","2014-02-23 08:03:40","","3","","321731","","2014-02-23 08:03:40","2013-12-16 14:48:45",""
"31996117","Migrating RSA signature generation from m2crypto to pycrypto","I am hoping you can help me out with my migration to PyCrypto from M2Crypto. 
The content to encrypt is XML. 
I am loading the pk as follows:
M2Crypto:
sha = hashlib.sha1(xml)
rsa_private_key = M2Crypto.RSA.load_key_string(PRIVATE_KEY)
signature = rsa_private_key.private_encrypt(sha.digest(), M2Crypto.RSA.pkcs1_padding)

PyCrypto:
sha = hashlib.sha1(xml.encode('utf-8'))
rsa_private_key = RSA.importKey(PRIVATE_KEY)
rsa_private_key = PKCS1_OAEP.new(rsa_private_key)
signature = rsa_private_key.encrypt(sha.digest())

It is at this point that the signature value is different for both M2Crypto and Pycrypto. Can anyone please let me know what am I doing different in PyCrypto?
","It's different because:

the padding is randomized and 
you're not actually using the same padding scheme.

pkcs1_padding usually means PKCS#1 v1.5 padding whereas OAEP is PKCS#1 v2 padding. You would need to use PKCS1_v1_5 in pycrypto.
Since the padding is randomized, you cannot compare the ciphertext of both. You need to encrypt in one and decrypt in the other to see if the same hash is produced.
sha = hashlib.sha1(xml.encode('utf-8'))
rsa_public_key = RSA.importKey(PUBLIC_KEY)
rsa_public_key = PKCS1_v1_5.new(rsa_public_key)
recovered_hash = rsa_public_key.decrypt(signature_from_m2)
print(""success?"", sha.digest() == recovered_hash)

Note that there are dedicated classes in PyCrypto for generating signatures and verifying them. M2Crypto has additional functions on the RSA object to create (sign) and verify signatures.
","387","<python><digital-signature><public-key-encryption><pycrypto><m2crypto>","0","1","1","2015-08-13 20:06:47","","0","","1816580","","2015-08-13 20:06:47","2015-08-13 18:45:25",""
"33320817","Password-less SSH login on Raspbain Wheezy","On Ubuntu machines I just add this line in ~/.ssh/authorized_keys
ssh-rsa XXXsdfsdfqw3eqwesdsdfasdfasdfadfrsdfsdfsdf=

I did the same on Raspberry PI running Raspbian Wheezy. But when I try to do password-less login using my private key in Putty, I get the following error:
Using username ""pi"".
Server refused our key
pi@192.168.0.5's password:

How do I get it to work with my existing key?
","It was permission related issue. 
Did 
sudo chown pi:pi .ssh 
and 
sudo chown pi:pi .ssh/autherized_keys
See https://www.raspberrypi.org/forums/viewtopic.php?t=79932&p=568968
","384","<ssh><raspberry-pi><debian><public-key-encryption><raspbian>","-1","0","2","2015-11-04 09:44:57","33320987","2","","681671","","2015-11-04 09:44:57","2015-10-24 16:56:22",""
"33320817","Password-less SSH login on Raspbain Wheezy","On Ubuntu machines I just add this line in ~/.ssh/authorized_keys
ssh-rsa XXXsdfsdfqw3eqwesdsdfasdfasdfadfrsdfsdfsdf=

I did the same on Raspberry PI running Raspbian Wheezy. But when I try to do password-less login using my private key in Putty, I get the following error:
Using username ""pi"".
Server refused our key
pi@192.168.0.5's password:

How do I get it to work with my existing key?
","There is fastest and effective way to copy your public key to a remote machine's is with ssh-copy-id
ssh-copy-id pi@192.168.0.5

If you edit authorized_keys by hand ensure that authorized_keys and .ssh folder has the correct permissions :
chown -Rv -- pi:pi ~/.ssh/
chmod 700 ~/.ssh/
chmod 600 ~/.ssh/authorized_keys

","384","<ssh><raspberry-pi><debian><public-key-encryption><raspbian>","-1","2","2","2015-11-04 09:44:57","33320987","2","","681671","","2015-11-04 09:44:57","2015-10-24 16:56:22",""
"48939099","PGP key armored encoding in Go's openpgp package","I am trying to print a PGP public key in an ASCII armored encoding using Go's openpgp/armor package.
The output I would expect:
-----BEGIN PGP PUBLIC KEY BLOCK-----

<base64 encoded bytes of public key>
<checksum>
-----END PGP PUBLIC KEY BLOCK-----

The output I get:
-----BEGIN PGP PUBLIC KEY BLOCK-----

<first part of base64 encoded bytes of public key>

It only prints the first part of the public key.
The public key is obtained from a local keyring file and processed as follows:
keyRingFileBuffer, err := os.Open(keyRingFilePath)
if err != nil {
    log.Fatal(err)
}
defer keyRingFileBuffer.Close()

keyRing,err := openpgp.ReadKeyRing(keyRingFileBuffer)
if err != nil {
    log.Fatal(err)
}

for _, k := range keyRing {
    w, _ := armor.Encode(os.Stdout, openpgp.PublicKeyType, nil)
    k.PrimaryKey.Serialize(w)
}

Am I using the package incorrectly? Any ideas on how to track the reason for this (in my opinion) wrong output?
","Whoops, after putting a bounty on the question I found an answer. Oh well.
The armor writer must be closed in order to add that end line.
pubKeyBuf := bytes.NewBuffer(nil)
pubKeyWriter, err := armor.Encode(pubKeyBuf, openpgp.PublicKeyType, nil)
checkIfError(err)
err = e.Serialize(pubKeyWriter)
pubKeyWriter.Close()
checkIfError(err)

","384","<go><public-key-encryption><gnupg><pgp><openpgp>","9","3","1","2018-05-27 20:09:42","50556048","1","3","3564720","","2018-02-24 17:49:11","2018-02-22 23:51:14",""
"29778321","unable to get local issuer certificate..installing RVM on a mac","I'm trying to install RVM to set up my ruby on rails installation. I'm following this guide http://railsapps.github.io/installrubyonrails-mac.html. I'm at the stage where I have to install RVM. From the RVM install page I executed the following command 
    gpg --keyserver hkp://keys.gnupg.net --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3
And received the following...
 gpg: DBG: armor-keys-failed (KEY      0x409B6B1796C275462A1703113804BB82D39DC0E3 BEGIN

) ->0
gpg: DBG: armor-keys-failed (KEY 0x409B6B1796C275462A1703113804BB82D39DC0E3 END
) ->0
gpg: key D39DC0E3: public key ""Michal Papis (RVM signing) "" imported
gpg: 3 marginal(s) needed, 1 complete(s) needed, PGP trust model
gpg: depth: 0  valid:   1  signed:   0  trust: 0-, 0q, 0n, 0m, 0f, 1u
gpg: next trustdb check due at 2018-08-19
gpg: Total number processed: 1
gpg:               imported: 1  (RSA: 1)
When I then try to execute the next command
    \curl -sSL https://get.rvm.io | bash -s stable --ruby
I get back the message
    curl: (60) SSL certificate problem: unable to get local issuer certificate
More details here: http://curl.haxx.se/docs/sslcerts.html
Not familiar with the gap tools and I'm wondering did I receive the public key and if so where would it be....and why can't I download from the server.
","","378","<ruby-on-rails><authentication><rvm><public-key-encryption><public-key>","2","","0","2015-04-21 16:41:56","","0","","","","","2015-04-21 16:41:56",""
"49597986","RSA Key encrypt and decrypt issue","I am trying to send a encrypted response to client's api using public key and trying to decrypt the response that comes out of the client using my private key.
When i try to decrypt the message, it says ""Key does not exist"". Below are the codes that I am using. 
public string Encryption(string strText, string publickey)
{
  var data = Encoding.UTF8.GetBytes(strText);
  using (var rsa = new RSACryptoServiceProvider(2048))
  {
    try
    {
      var key = ""<RSAKeyValue><Modulus>"" + publickey.Replace('-', '+').Replace(' ', '+') + ""</Modulus><Exponent>AQAB</Exponent></RSAKeyValue>"";
      rsa.FromXmlString(key);
      var encryptedData = rsa.Encrypt(data, true);
      var base64Encrypted = Convert.ToBase64String(encryptedData);
      return base64Encrypted;
    }
    catch (Exception ex)
    {
      return ex.Message;
    }
    finally
    {
      rsa.PersistKeyInCsp = false;
    }
  }
}

And for Decryption
  public string Decrypt(string data, string privateKey)
{
  CspParameters cp = new CspParameters();
  cp.KeyContainerName = ""MyKeyContainerName"";
  var rsa = new RSACryptoServiceProvider(cp);
  var dataArray = data.Split(new char[] { ',' });
  byte[] dataByte = new byte[dataArray.Length];
  dataByte = Encoding.UTF8.GetBytes(data);
  var encoder = new UnicodeEncoding();
  var key = ""<RSAKeyValue><Modulus>"" + privateKey + ""</Modulus><Exponent>AQAB</Exponent></RSAKeyValue>"";
  rsa.FromXmlString(key);
  var decryptedByte = rsa.Decrypt(dataByte, false);
  return encoder.GetString(decryptedByte);
}

Hope this is enough. Please advice
","You're trying to perform a series of transformations, but you're not doing the opposite thing in each direction.
You've taken the encrypted binary data and converted it to base64, but then you're taking the base64 data and converting it back to binary using UTF-8, after splitting it by commas for some reason:
var dataArray = data.Split(new char[] { ',' });
byte[] dataByte = new byte[dataArray.Length];
dataByte = Encoding.UTF8.GetBytes(data);

To reverse the last operation of the base64-encoding, you should be performing a base64-decoding:
byte[] dataByte = Convert.FromBase64String(data);

That may not be the only thing wrong, but it's the first thing I spotted.
","373","<c#><encryption><rsa><public-key-encryption><private-key>","0","1","1","2018-04-01 16:25:21","","3","","","","","2018-04-01 12:19:59",""
"52085492","ssh public key fingerprint does not match. Man-in-the-middle attack?","I have a cloud server of IP address 39.106.xx.xxx hosted on Aliyun. I generated a RSA 2048 ssh keypair (~/.ssh/rsa_bj.pub and ~/.ssh/rsa_bj) on my local laptop using ssh-keygen, and imported the public key file to the server through console webpage of Aliyun. 
When I ssh connect to the server, it shows the fingerprint of my public key, beginning with Meg4xe. But this fingerprint does not match my local fingerprint, which I got by ssh-keygen -l -f ~/.ssh/rsa_bj.pub, beginning with qEqyMv.
Does this mean that I ran into a man-in-the-middle attack? Or does it mean that the two fingerprints were calculated using different rehash algorithms on the same public key?
my ssh config file
my commands
","","372","<ssh><public-key-encryption><fingerprint><public-key><man-in-the-middle>","0","","0","2018-08-29 20:19:12","","3","","","","","2018-08-29 20:19:12",""
"8667334","Protect public RSA key during transit","*Clarification: My question relates to setting up a ""secure"" communication channel between two parties where a key (read passphrase) has been agreed upon in the real world. Only using RSA allows for MITM-attacks  (if I'm not misstaken), so I was thinking encrypting the public keys with AES (the key that both have agreed upon) before sending them to respective parties *
I'm currently trying to build two applications that talks with eachother. To secure the exchanged messages I was thinking on using RSA where each application has it's own set of keys.
Before communication is started between the two applications they do need to exchange keys. That shouldn't be a problem but I was thinking on using AES to encrypt the public keys before sending them over the internet.
I know what the word public (as in public key) means but I was thinking that this would see to that the right application/computer gets the key and no one else. 
So I want to exchange keys and to protect them from MITM attacks.
If anybody could give a better suggestion (I'm using the LibCrypto library btw), I'm all ears.
Thank you.
Best regards
/Tomas Gustavsson
","This question shows many misconceptions from your part.

I know what the word public (as in public key) means but I was
  thinking that this would see to that the right application/computer
  gets the key and no one else.

I think this is the real problem you have and ask.
Which I think is: How can you know that you are using the public key of the entity you actually want to communicate with and not the public key of a malicious entity claiming to be the who you want to communicate with?  
This problem is solved in a typical installation by certificates signed by a trusted authority and issued to the specific entity i.e. IP or DNS name.  
In your case you haven't given any details of your certificates.  
You could just as well manually pre-install them and use them for your secure connections.  
If you follow some other plan e.g. symmetric encryption then your would start asking other questions e.g. how do you securely share the secret key etc
","370","<encryption><rsa><aes><public-key-encryption><encryption-asymmetric>","0","1","1","2011-12-29 13:16:39","","3","","1121036","","2011-12-29 13:16:39","2011-12-29 11:32:47",""
"16296328","Win32 Encryption with the same size","I want to encrypt an array of 15 byte. The problem is I want the cipher text to be of the same size. 
What I did as

Make certificate: makecert.exe -n ""CN=me"" -sv PrivateKey.pvk -pe Certificate.cer
Write this code to import the certificate and then encrypt the plain text.
BYTE    FileContent[1024];
DWORD   dwActualFileLen = 0;
HANDLE  hCertFile;
if(CryptAcquireContext(&m_hCryptProv, NULL, MS_ENHANCED_PROV, PROV_RSA_FULL, 0))
{
hCertFile = CreateFileA(""C:\\projects\\Certificate.cer"", 
     GENERIC_READ,
     FILE_SHARE_READ, 
     NULL, 
     OPEN_EXISTING,
     FILE_FLAG_SEQUENTIAL_SCAN,
     NULL);

ReadFile(hCertFile, FileContent, 1024, &dwActualFileLen, NULL);

m_CertContext = CertCreateCertificateContext(X509_ASN_ENCODING, FileContent, dwActualFileLen);

CryptImportPublicKeyInfo(m_hCryptProv, X509_ASN_ENCODING, &m_CertContext->pCertInfo->SubjectPublicKeyInfo, &m_hPubKey);
}

CryptEncrypt(m_hPubKey, NULL, TRUE, 0, tempBuffer, &dwNewLen, 128);


The cipher text is always 128 byte. I want to force it to be of the same size as the plain text.
","RSA algorithm can not output arbitrary sized ciphertext. You have to live with this. As your RSA keylen seems to be 1024 bits (128 bytes), input and output sizes are always 128 bytes, equal to the size of the RSA keylen...
","365","<c++><winapi><encryption><public-key-encryption>","0","2","2","2013-05-02 13:48:28","16297010","1","","764191","","2013-04-30 09:49:03","2013-04-30 09:18:44",""
"16296328","Win32 Encryption with the same size","I want to encrypt an array of 15 byte. The problem is I want the cipher text to be of the same size. 
What I did as

Make certificate: makecert.exe -n ""CN=me"" -sv PrivateKey.pvk -pe Certificate.cer
Write this code to import the certificate and then encrypt the plain text.
BYTE    FileContent[1024];
DWORD   dwActualFileLen = 0;
HANDLE  hCertFile;
if(CryptAcquireContext(&m_hCryptProv, NULL, MS_ENHANCED_PROV, PROV_RSA_FULL, 0))
{
hCertFile = CreateFileA(""C:\\projects\\Certificate.cer"", 
     GENERIC_READ,
     FILE_SHARE_READ, 
     NULL, 
     OPEN_EXISTING,
     FILE_FLAG_SEQUENTIAL_SCAN,
     NULL);

ReadFile(hCertFile, FileContent, 1024, &dwActualFileLen, NULL);

m_CertContext = CertCreateCertificateContext(X509_ASN_ENCODING, FileContent, dwActualFileLen);

CryptImportPublicKeyInfo(m_hCryptProv, X509_ASN_ENCODING, &m_CertContext->pCertInfo->SubjectPublicKeyInfo, &m_hPubKey);
}

CryptEncrypt(m_hPubKey, NULL, TRUE, 0, tempBuffer, &dwNewLen, 128);


The cipher text is always 128 byte. I want to force it to be of the same size as the plain text.
","Far too complex. XOR the input string with a 15 byte key. This is known as an One Time Pad, and is provably 100% secure. Decrypting is the same as encrypting, (a XOR b) XOR b = a for all a and b, and (a XOR b) XOR c = a if and only if b=c.
","365","<c++><winapi><encryption><public-key-encryption>","0","1","2","2013-05-02 13:48:28","16297010","1","","764191","","2013-04-30 09:49:03","2013-04-30 09:18:44",""
"15057856","Net::SSH2 authenticate using public key","I'm trying to use Net::SSH2 to execute commands on a remote machine. However, I do not know how to authenticate by using a public key. The documentation mentions this method:
auth_publickey ( username, public key, private key [, password ] )

However, it requires both a public key and a private key. Is there anyway that I can authenticate by just using a public key? Thanks!
","That makes no sense. ""Everyone"" has your public key. It can't be used to authenticate you.
","365","<perl><ssh><public-key-encryption><perlnetssh>","0","1","1","2013-02-25 00:21:12","15058366","0","","","","","2013-02-24 23:16:20",""
"18047366","RSA prime decimal digits","In RSA encryption there is multiply of 2 big primes like: key=bigPrime1*bigPrime2
I want to know how big is the key and bigPrime. 
How many digits do they have in a RSA key?
","These days, 1024-bit keys are probably breakable by governments, most people probably use 2048-bit keys, and high-security environments (banks, governments, criminals, terrorists) probably use 4096-bit (or more) keys. We use 2048-bit keys where I work to protect personally-identifiable information (SSN, birthday) in our database.
","364","<encryption><rsa><primes><public-key-encryption>","-3","1","1","2013-08-04 23:09:40","18048515","1","","1831530","","2013-08-04 20:46:41","2013-08-04 20:39:07","2013-08-05 08:04:39"
"25776433","GruntFile automated deployment using ssh (Windows)","I am trying to set up a GruntFile.js file to automate the process of logging on to my personal website's server via ssh and pulling the latest version of the git repo. The relevant part of my grunt file looks like this:
sshconfig: {
    portfolioServer: {
    host: 'mySite.com',
    username: 'root',
    agent: process.env.SSH_AUTH_SOCK,
    }
},

sshexec:{
    deploy:{
    command: [
        'cd portfolio',
        'git pull'
    ].join(' && ')
    },
    options:{
    config: 'portfolioServer'
    }
},

However, when I run the associated task (I named it ""grunt deploy""). I get the following error.
Running ""sshexec:deploy"" (sshexec) task
Warning: Connection :: error :: Error: Authentication failure. Available authentication methods: publickey,password Use --force to continue.

Aborted due to warnings.

My understanding is that this error means that I have not set up the public/private ssh keys correctly. However, I have already gone through the process of setting up public/private keys.I am already able to run the following command through git bash and log in successfully:
ssh root@mySite.com

I have searched online for this problem and it seems like it might have something to do with process.env.SSH_AUTH_SOCK not behaving in git bash on windows in the same way that it might be expected to be have in a native linux distribution.
What further steps in my setup do I have to take in order to make this deployment configuration work?
","","362","<javascript><git><ssh><gruntjs><public-key-encryption>","1","","0","2014-09-10 23:00:48","","0","2","","","","2014-09-10 23:00:48",""
"11667177","Encrypting Credit Card info on iOS app and send to server","First of all, can an iOS app collect Credit Card info and send it to the server? Will such an app be rejected by Apple? 
Further questions are :-
I am developing an iOS app which takes Credit Card related info and sends it to the server. The server then processes the payment request via payment gateway.
I need to know the best/good way to encrypt this info on my iOS app before sending it to the server.
The server runs PHP with MongoDB and the server side guys are planning to use an RSA-2048 encryption. 
Please guide me in this matter ASAP.
","If you go to the WWDC 2012 videos there is a video called ""Networking Best Practises"". That video is the best way of explaining what network security you should be implementing and how to use the apple api's to do so.
","361","<ios><credit-card><public-key-encryption>","1","0","1","2012-07-26 10:44:55","","0","","817126","","2012-07-26 10:42:45","2012-07-26 10:15:41",""
"3751889","Public & Private Keys in .NET besides RSA","Am I missing something obvious here (I  hope I am), besides RSA, are there any other crypto methods in .NET that use a public & private key?
Thanks!
","
DSA
ECDiffieHelman  (Contrary to MSDN docs, not supported on Windows XP)

","357","<.net><encryption><private-key><public-key-encryption>","1","0","4","2010-09-23 03:51:50","3751954","0","","60761","","2010-09-20 18:52:00","2010-09-20 13:26:51",""
"3751889","Public & Private Keys in .NET besides RSA","Am I missing something obvious here (I  hope I am), besides RSA, are there any other crypto methods in .NET that use a public & private key?
Thanks!
","http://en.wikipedia.org/wiki/Public-key_cryptography#Examples
","357","<.net><encryption><private-key><public-key-encryption>","1","0","4","2010-09-23 03:51:50","3751954","0","","60761","","2010-09-20 18:52:00","2010-09-20 13:26:51",""
"3751889","Public & Private Keys in .NET besides RSA","Am I missing something obvious here (I  hope I am), besides RSA, are there any other crypto methods in .NET that use a public & private key?
Thanks!
","Rsa is derived from the class AsymmetricAlgorithm
From there, MSDN lists the following derived classes:
System.Security.Cryptography.DSA
System.Security.Cryptography.ECDiffieHellman
System.Security.Cryptography.ECDsa
System.Security.Cryptography.RSA

","357","<.net><encryption><private-key><public-key-encryption>","1","1","4","2010-09-23 03:51:50","3751954","0","","60761","","2010-09-20 18:52:00","2010-09-20 13:26:51",""
"3751889","Public & Private Keys in .NET besides RSA","Am I missing something obvious here (I  hope I am), besides RSA, are there any other crypto methods in .NET that use a public & private key?
Thanks!
","No. You are not missing anything. RSA appears to be the only public key encryption scheme implemented in .NET. DSA and ECDSA are signature schemes and Diffie-Hellman is a key agreement scheme.
","357","<.net><encryption><private-key><public-key-encryption>","1","0","4","2010-09-23 03:51:50","3751954","0","","60761","","2010-09-20 18:52:00","2010-09-20 13:26:51",""
"45130483","Make the publicKey Object from the loaded certificate","I have a certificate which I would like to use to encrypte some message. Now I am trying to load certificate from the file  but I do not know how to create
the PublicKey object. I want to create it use this methode to encrypte it.
I downloaded the certificate from this link:
https://dtc.jrc.ec.europa.eu/dtc_public_key_certificates.php
Code
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.security.PublicKey;

import javax.crypto.BadPaddingException;
import javax.crypto.Cipher;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.NoSuchPaddingException;


public class MakePublicKey {

    static byte[] signature = null;


    public static void main(String[] args) {

        try {
            FileInputStream ecPubKeyFIS = new FileInputStream(""D__TCC40-1.bin"");

            try {
                int certificateLength = ecPubKeyFIS.available();
                byte[] certificate = new byte[certificateLength];
                ecPubKeyFIS.read(certificate);

                MakePublicKey.signature = new byte[128];
                System.arraycopy(certificate, 0, MakePublicKey.signature, 0, 128);

                // How can I make of the signature byte[] an  PublicKey Object to call the method as the following: encrypte(""Hellow World!"", pk)?


            } catch (IOException e1) {
                // TODO Auto-generated catch block
                e1.printStackTrace();
            }
            // }
        } catch (FileNotFoundException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }

    }


    public static byte[] encrypte(String message, PublicKey pk) {

        Cipher cipher = null;
        byte[] encrypted = null;
        try {
            cipher = Cipher.getInstance(""RSA"");
        } catch (NoSuchAlgorithmException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        } catch (NoSuchPaddingException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        try {
            cipher.init(Cipher.ENCRYPT_MODE, pk);
        } catch (InvalidKeyException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        try {
            encrypted = cipher.doFinal(message.getBytes());
        } catch (IllegalBlockSizeException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        } catch (BadPaddingException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        return encrypted;

    }

}

Edit
When using the following snipt 
                CertificateFactory cf = CertificateFactory.getInstance(""X.509"");
                X509Certificate certificate = (X509Certificate) cf.generateCertificate(ecPubKeyFIS);
            PublicKey pk = certificate.getPublicKey();

I am getting the following error:
java.security.cert.CertificateException: Could not parse certificate: java.io.IOException: Empty input
    at sun.security.provider.X509Factory.engineGenerateCertificate(X509Factory.java:104)
    at java.security.cert.CertificateFactory.generateCertificate(CertificateFactory.java:339)
    at MakePublicKey.main(MakePublicKey.java:32)

","Read the certficate as a X509Certificate.html, and than you can call getPublicKey:
FileInputStream ecPubKeyFIS = new FileInputStream(""D__TCC40-1.bin"");
CertificateFactory cd = CertificateFactory.getInstance(""X.509"");
X509Certificate c=(X509Certificate)cf.generateCertificate(ecPubKeyFIS );
c.getPublicKey();

","356","<java><rsa><public-key-encryption>","0","0","2","2017-07-16 20:05:05","","3","3","4850587","","2017-07-16 20:05:05","2017-07-16 15:49:17",""
"45130483","Make the publicKey Object from the loaded certificate","I have a certificate which I would like to use to encrypte some message. Now I am trying to load certificate from the file  but I do not know how to create
the PublicKey object. I want to create it use this methode to encrypte it.
I downloaded the certificate from this link:
https://dtc.jrc.ec.europa.eu/dtc_public_key_certificates.php
Code
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.security.PublicKey;

import javax.crypto.BadPaddingException;
import javax.crypto.Cipher;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.NoSuchPaddingException;


public class MakePublicKey {

    static byte[] signature = null;


    public static void main(String[] args) {

        try {
            FileInputStream ecPubKeyFIS = new FileInputStream(""D__TCC40-1.bin"");

            try {
                int certificateLength = ecPubKeyFIS.available();
                byte[] certificate = new byte[certificateLength];
                ecPubKeyFIS.read(certificate);

                MakePublicKey.signature = new byte[128];
                System.arraycopy(certificate, 0, MakePublicKey.signature, 0, 128);

                // How can I make of the signature byte[] an  PublicKey Object to call the method as the following: encrypte(""Hellow World!"", pk)?


            } catch (IOException e1) {
                // TODO Auto-generated catch block
                e1.printStackTrace();
            }
            // }
        } catch (FileNotFoundException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }

    }


    public static byte[] encrypte(String message, PublicKey pk) {

        Cipher cipher = null;
        byte[] encrypted = null;
        try {
            cipher = Cipher.getInstance(""RSA"");
        } catch (NoSuchAlgorithmException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        } catch (NoSuchPaddingException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        try {
            cipher.init(Cipher.ENCRYPT_MODE, pk);
        } catch (InvalidKeyException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        try {
            encrypted = cipher.doFinal(message.getBytes());
        } catch (IllegalBlockSizeException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        } catch (BadPaddingException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        return encrypted;

    }

}

Edit
When using the following snipt 
                CertificateFactory cf = CertificateFactory.getInstance(""X.509"");
                X509Certificate certificate = (X509Certificate) cf.generateCertificate(ecPubKeyFIS);
            PublicKey pk = certificate.getPublicKey();

I am getting the following error:
java.security.cert.CertificateException: Could not parse certificate: java.io.IOException: Empty input
    at sun.security.provider.X509Factory.engineGenerateCertificate(X509Factory.java:104)
    at java.security.cert.CertificateFactory.generateCertificate(CertificateFactory.java:339)
    at MakePublicKey.main(MakePublicKey.java:32)

","You need to read the data as a Certificate, using the CertificateFactoryclass, and then call getPublicKey().
This is all documented.
","356","<java><rsa><public-key-encryption>","0","0","2","2017-07-16 20:05:05","","3","3","4850587","","2017-07-16 20:05:05","2017-07-16 15:49:17",""
"39755865","Restrict Eliptic curve in sun JSSE (JDK 1.8)","Which EC ciphers should be selected to avoid - secp160k1 curve as its weaker one.
I am using jdk 1.8 with SunEC as JCA provider
","In some contexts, algorithms and key sizes can be restricted using the java.security file in the JRE, but there isn't a way to restrict EC curves using that method.
However, by specifying the curves you permit when you generate your keys, you are effectively restricting key agreement to those curves. If a particular curve is not permitted, you shouldn't have a key pair to support it.
","354","<ssl><java-8><public-key-encryption><elliptic-curve><jsse>","0","2","1","2016-09-28 20:55:12","","5","","1493834","","2016-09-28 19:20:54","2016-09-28 19:14:12",""
"34389421","pem.Decode - returns nil when given contents of id_rsa.pem","
I'm trying to use rsa package for encrypt and decrypt with public and private keys.
func main() {
    flag.Parse()

    text := ""my super secret""
    glog.Infof(""Original text: %s\n"", text)

    glog.Infoln(""Loading public key.."")
    pubKey, err := loadPublicKey(""id_rsa.pub"")
    if err == nil {
        glog.Infoln(""SUCCESS!"")
    } else {
        glog.Errorln(""LOOSE =("")
    }

    etext, err := encrypt([]byte(text), pubKey)
    if err != nil {
        glog.Errorf(""Can't encrypt text: %+v\n"", err)
    }
    glog.Infof(""Encrypted text: %s\n"", etext)

    glog.Infoln(""Loading private key.."")
    privKey, err := loadPrivateKey(""id_rsa"")
    if err == nil {
        glog.Infoln(""SUCCESS!"")
    } else {
        glog.Errorln(""LOOSE =("")
    }

    dtext, err := decrypt(etext, privKey)
    if err != nil {
        glog.Errorf(""Can't decrypt text: %+v\n"", err)
    }
    glog.Infof(""Decrypted text: %s\n"", dtext)

    glog.Flush()
}

func loadPublicKey(path string) (*rsa.PublicKey, error) {
    data, err := ioutil.ReadFile(path)
    if err != nil {
        return nil, err
    }

    block, _ := pem.Decode(data)
    if block == nil {
        return nil, fmt.Errorf(""no key found\n"")
    }

    if block.Type != ""PUBLIC KEY"" {
        return nil, fmt.Errorf(""invalid key type - %s\n"", block.Type)
    }

    pubKey, err := x509.ParsePKIXPublicKey(block.Bytes)
    if err != nil {
        return nil, fmt.Errorf(""can't parse key - %+v\n"", err)
    }

    return pubKey.(*rsa.PublicKey), nil
}

func loadPrivateKey(path string) (*rsa.PrivateKey, error) {
    data, err := ioutil.ReadFile(path)
    if err != nil {
        return nil, err
    }

    block, _ := pem.Decode(data)
    if block == nil {
        return nil, fmt.Errorf(""no key found\n"")
    }

    if block.Type != ""PRIVATE KEY"" {
        return nil, fmt.Errorf(""invalid key type - %s\n"", block.Type)
    }

    return x509.ParsePKCS1PrivateKey(block.Bytes)
}

func encrypt(data []byte, pubKey *rsa.PublicKey) ([]byte, error) {
    return rsa.EncryptPKCS1v15(rand.Reader, pubKey, data)
}

func decrypt(data []byte, privKey *rsa.PrivateKey) ([]byte, error) {
    return rsa.DecryptPKCS1v15(rand.Reader, privKey, data)
}

But I have an error in rsa.EncryptPKCS1v15:
panic: runtime error: invalid memory address or nil pointer dereference
[signal 0xb code=0x1 addr=0x0 pc=0x5c16c]

goroutine 1 [running]:
crypto/rsa.EncryptPKCS1v15(0x11641f8, 0xc8200762a0, 0x0, 0xc82004ddc8, 0xf, 0x20, 0x0, 0x0, 0x0, 0x0, ...)
    /usr/local/go/src/crypto/rsa/pkcs1v15.go:32 +0x5c
main.encrypt(0xc82004ddc8, 0xf, 0x20, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
    /Users/cnaize/Dropbox/develop/gocode/src/test/main.go:132 +0x87
main.main()
    /Users/cnaize/Dropbox/develop/gocode/src/test/main.go:67 +0x3b8

Why where is the error? How to resolve this?
EDITED:

thanks, now I understand the problem - in loadPublicKey(""id_rsa.pub"") pem.Decode(data) returns nil block.

What is the right way to parse ssh keys?
","","351","<encryption><go><rsa><public-key-encryption>","0","","0","2015-12-21 12:09:57","","9","","1896328","","2015-12-21 12:09:57","2015-12-21 05:22:28",""
"44081960","SSL - Public key pinning confusion","
How SSL key pinning prevents MITM attacks when some CA is
  compromised?

What I understand from comprising CA is, private keys are compromised and an attacker can easily get symmetric key used to encrypt data. Am I right?
Another thing, if public key remains same when certificates are rotated and in key pinning we match the public keys, how can we know that, key (we are getting) is from original certificate?
I don't really get the concept. Can anyone elaborate it step by step?
I have gone through this question but couldn't really get the answer.
","When a CA is compromised, the attacker has the CA's private key. Then the attacker has the same power as a trusted CA, meaning that he can issue certificates for any domains. If this happens, without public key pinning (HPKP), all sites are immediately vulnerable to MITM attacks by this attacker, until clients distrust the compromised CA.
HPKP tries to mitigate this issue by allowing site operations to designate which root CA or which leaf certificate's public keys you want browsers to trust. For instance, if you pin Let's Encrypt and GlobalSign's root certificates, then a compromise of any other CA won't affect you at all.
To answer your questions:
1) No, not symmetric keys. It is the private key of the CA, used for signing not encrypting, that gets compromised.
2) It doesn't matter, because the site is not compromised; only the CA is compromised. In other words, the attacker doesn't have the private keys of your site. If he wants to attack, he will have to present a different public key that he generates himself.
I hope this answer helps to clarify.
","349","<ssl><public-key-encryption><certificate-pinning><public-key-pinning>","1","1","1","2017-05-20 05:37:16","44082176","0","","","","","2017-05-20 04:38:15",""
"30228737","Encrypt data with using public key file in C language","I need to pass the data to the server2.c through another server1.c in the middle.
Before calling SSL_write() I want to encrypt my data using public key file pubkey.pem of the server2.c so the server1.c cannot understand the data and simply writes it to the server2.c
What system call I should use that takes data and public key file as arguments?
","
What system call I should use that takes data and public key file as arguments?

In the C language with OpenSSL, there are no arguments like in a program with argc and argv. There are functions and parameters.
In OpenSSL, you use the EVP functions to do it. In particular, EVP_Seal to encrypt and EVP_Open to decrypt using public key cryptography. See the EVP(3) man pages for more details. Or see OpenSSL's EVP Wiki page for details.
There are EVP_encrypt and EVP_Decrypt functions, but they are used for symmetric key encryption, and not public key encryption.
","348","<c><ssl><openssl><public-key-encryption>","0","1","1","2015-05-14 06:09:08","","0","","","","","2015-05-14 03:28:04",""
"53807792","How to implement asymmetric cryptography for distributed app where keys can both be stored as strings?","I have what seems to be a simple need - I want to generate a public key that I can put into an app, and use to to encrypt data that may be exposed to others. Later, using a private key known only to myself, I want to be able to decrypt that data.
There are bits and pieces of the solution to this scattered all over, but I have yet to find a good explanation of how to:

generate keys that can be turned into string representations that then can be used to reconstruct the keys
pass Data objects into the encryption, and get a string representation of the encrypted data
turn the string representing the encrypted data back into a Data object, and then decrypt this data into its original form
do all the above only using Swift 4.1 or newer

I am aware that there are frameworks that can do this, but it seems like this should ultimately be a fairly small piece of code and so a framework is overkill.
","Inspiration for this answer comes from Swift 3 export SecKey to String and NSString Crypt.m gist.
Don't know what PKI (Public Key Encryption)is? Then a nice tutorial:  Everything you should know about certificates and PKI but are too afraid to ask
The recommended way to use public/private encryption for large data sets is to use public/private encryption to first share a temporary symmetric key, then use that key to encrypt, send the data, and allow the remote side to decrypt it. 
That seemed like a complex task, but then it turned out that Apple already provides this capability for iOS/macOS (search for ""In fact, the certificate, key, and trust services API provides a simple way to accomplish this."")
The code below is designed as a test vehicle to let anyone experiment with the settings. You exercise it twice - one with the #if set to true, the second to false. In the first run (using the Simulator for sure), you get string representations of the public and private keys. You then paste those into the class properties, change the #if setting, and re-run the test method.
The test method then re-creates both keys, encrypts the supplied data, then hands that encrypted data off to be decrypted. In the end, the original data is compared to the decrypted data and the result printed out. The raw code is available as gist on github.
The code is constructed as a test vehicle - you can run it as is to have it produce two strings representing the private and public key, then paste those in below to verify that the strings themselves perform exactly as a test with keys freshly generated. The test has four stages:

run an encrypt and decrypt with just the generated keys (SecKeys)
convert the public key to a string, then recreate a new public SecKey from the string, then do the encrypt/decrypt test
same as above except convert private key to string and back
same as above but both keys converted to strings and back

The gist above also contains a class Asymmetric that just uses the public key to encrypt data - this is what you would use in an app (but it's completely based on methods in this class).
You use either a RSA algorithm or an Elliptic Curve key pair. With the current key size, both use a AES 128-bit symmetric key for actual data encryption (see Apple headers). 
#if true
private let keyType = kSecAttrKeyTypeRSA // kSecAttrKeyTypeEC
private let algorithm = SecKeyAlgorithm.rsaEncryptionOAEPSHA512AESGCM // EncryptionOAEPSHA512AESGCM
private let keySize = 4096 // SecKey.h states that with this size, you get AES 256-bit encoding of the payload
#else
private let keyType = kSecAttrKeyTypeECSECPrimeRandom // kSecAttrKeyTypeECSECPrimeRandom
private let algorithm = SecKeyAlgorithm.eciesEncryptionCofactorVariableIVX963SHA512AESGCM
private let keySize = 384   // SecKey.h states that with this size, you get AES 256-bit encoding of the payload
#endif

@objcMembers
  final class AsymmetricTest: NSObject {
This is where you will paste in the keys you generate when running the program.
// Some Key pair I generated - replace with your own
private let publicStr = """"""
    BFZjQQZVrcHitn13Af89ASrRT2VVPa4yGCreBJim52R/d3yJj3iTroanc7XW+YLJpijFBMei6ddf
    lb2PjJLvXNJy8hQItCFRlpbGj7ddSCOuBNyjQP+cpmddgFhy8KCbgw==
""""""

private let privateStr = """"""
    BFZjQQZVrcHitn13Af89ASrRT2VVPa4yGCreBJim52R/d3yJj3iTroanc7XW+YLJpijFBMei6ddf
    lb2PjJLvXNJy8hQItCFRlpbGj7ddSCOuBNyjQP+cpmddgFhy8KCbg+Sy8M4IjGDI5gdzNmWhDQp2
    mggdySIqrjVobCL5NcAg5utA/2QdJGCy9mPw0GkFHg==
""""""

var publicKey: Data = Data()
var privateKey: Data = Data()

Run the 4 tests. You provide the data - I tested with a few thousand bytes, but it should work for any data size.
func test(_ testData: Data) -> Bool {
    func key2string(key: SecKey) -> String {
        guard let keyData = secKey2data(key: key) else { fatalError(""key2string FAILED!!!"") }
        let base64publicKey = keyData.base64EncodedString(options: [.lineLength76Characters, .endLineWithCarriageReturn])
        return base64publicKey
    }
    func string2key(str: String, cfType: CFString) -> SecKey? {
        let d = Data(base64Encoded: str, options: [.ignoreUnknownCharacters])
        print(""string2key: dataSize ="", d?.count ?? ""-1"")
        guard
            let data = Data(base64Encoded: str, options: [.ignoreUnknownCharacters]),
            let key = data2secKey(keyData: data, cfType: cfType)
        else { return nil }

        return  key
    }
    func runTest(data testData: Data, keys: (public: SecKey, private: SecKey)) {
            let d1 = Date()
            let _ = self.encryptData(data: testData, key: keys.public)
            print(""Time:"", -d1.timeIntervalSinceNow)  // measure performance

        if
            let d1 = self.encryptData(data: testData, key: keys.public)
            ,
            let d2 = self.decryptData(data: d1, key: keys.private)
        {
            print(""Input len:"", d1.count, ""outputLen:"", d2.count)
            print(""Reconstructed data is the same as input data:"", testData == d2 ? ""YES"" : ""NO"")
        } else {
            print(""TEST FAILED"")
        }
    }

If you set the line below to false, then instead of generating keys, it will use the two strings at the top of the class.
#if true // set to true, then copy the two strings to publicStr and privateStr above and set this to false
    guard let keys = createKey(keySize: keySize) else { print(""WTF""); return false } // size is important smaller failed for me
    print(""PUBLIC:\n\(key2string(key: keys.public))\n"")
    print(""PRIVATE:\n\(key2string(key: keys.private))\n"")

    runTest(data: testData, keys: keys) // Original Keys

    do {    // So suppose we have our public app - it gets the public key in base64 format
        let base64key = key2string(key: keys.public)
        guard let key = string2key(str: base64key, cfType: kSecAttrKeyClassPublic) else { fatalError(""FAILED!"") }

        runTest(data: testData, keys: (key, keys.private)) // Reconstructed public
    }
    do {    // So suppose we have our private app - it gets the private key in base64 format
        let base64key = key2string(key: keys.private)
        guard let key = string2key(str: base64key, cfType: kSecAttrKeyClassPrivate) else { fatalError(""FAILED!"") }

        runTest(data: testData, keys: (keys.public, key)) // Reconstructed private
    }
    do {
        let base64keyPublic = key2string(key: keys.public)
        guard let keyPublic = string2key(str: base64keyPublic, cfType: kSecAttrKeyClassPublic) else { fatalError(""FAILED!"") }
        let base64keyPrivate = key2string(key: keys.private)
        guard let keyPrivate = string2key(str: base64keyPrivate, cfType: kSecAttrKeyClassPrivate) else { fatalError(""FAILED!"") }

        runTest(data: testData, keys: (keyPublic, keyPrivate)) // Reconstructed private
    }
#else
    do {
        guard let keyPublic = string2key(str: publicStr, cfType: kSecAttrKeyClassPublic) else { fatalError(""FAILED!"") }
        guard let keyPrivate = string2key(str: privateStr, cfType: kSecAttrKeyClassPrivate) else { fatalError(""FAILED!"") }

        runTest(data: testData, keys: (keyPublic, keyPrivate)) // Reconstructed private
    }
#endif
    return true
}

Encrypts the supplied data with the supplied key (which should be the public key):
func encryptData(data: Data, key: SecKey) -> Data? {
    //var status: OSStatus = noErr
    var error: Unmanaged<CFError>?
    let cfData: CFData = data as NSData as CFData

    guard SecKeyIsAlgorithmSupported(key, .encrypt, algorithm) else {
        fatalError(""Can't use this algorithm with this key!"")
    }
    if let encryptedCFData = SecKeyCreateEncryptedData(key, algorithm, cfData, &error) {
        return encryptedCFData as NSData as Data
    }

    if let err: Error = error?.takeRetainedValue() {
        print(""encryptData error \(err.localizedDescription)"")

    }
    return nil
}

Decrypts the supplied data with the supplied key (which should be the private key):
func decryptData(data: Data, key: SecKey) -> Data? {
    var error: Unmanaged<CFError>?
    let cfData: CFData = data as NSData as CFData

    guard SecKeyIsAlgorithmSupported(key, .decrypt, algorithm) else {
        fatalError(""Can't use this algorithm with this key!"")
    }
    if let decryptedCFData = SecKeyCreateDecryptedData(key, algorithm, cfData, &error) {
        return decryptedCFData as NSData as Data
    } else {
        if let err: Error = error?.takeRetainedValue() {
            print(""Error \(err.localizedDescription)"")
        }
        return nil
    }
}

Genreate a key - you should only need to do this one in a real world situation, then make sure the private key stays private:
func createKey(keySize: Int) -> (public: SecKey, private: SecKey)? {
    var sanityCheck: OSStatus = 0

    let publicKeyAttr:[CFString: Any] = [
        kSecAttrIsPermanent     : 0,
        kSecAttrApplicationTag  : ""com.asymmetric.publickey"".data(using: .ascii)!
    ]
   let privateKeyAttr:[CFString: Any] = [
        kSecAttrIsPermanent     : 0,
        kSecAttrApplicationTag  : ""com.asymmetric.privatekey"".data(using: .ascii)!
    ]

    let keyPairAttr:[CFString: Any] = [
        kSecAttrKeyType         : keyType,
        kSecAttrKeySizeInBits   : keySize,
        kSecPrivateKeyAttrs     : privateKeyAttr,
        kSecPublicKeyAttrs      : publicKeyAttr
    ]

    var publicKey: SecKey? = nil
    var privateKey: SecKey? = nil
    sanityCheck = SecKeyGeneratePair(keyPairAttr as CFDictionary, &publicKey, &privateKey)
    if sanityCheck == noErr {
        return (publicKey!, privateKey!)
    } else {
        print(""Fucked!"")
        return nil
    }
}

Method that converts a SecKey to Data:
func secKey2data(key: SecKey) -> Data? {
    var error:Unmanaged<CFError>?
    guard let keyData = SecKeyCopyExternalRepresentation(key, &error) as Data? else { error?.release(); return nil  }
    //print(""secKey2data size \(keyData.count)"")
    return keyData
}

Method that converts Data to a SecKey:
func data2secKey(keyData: Data, cfType: CFString) -> SecKey? {
    var error:Unmanaged<CFError>?

    let attrs: [CFString: Any] = [
        kSecAttrKeyType: keyType,
        kSecAttrKeyClass: cfType
    ]
    let key = SecKeyCreateWithData(keyData as CFData, attrs as CFDictionary, &error)

    if let err: Error = error?.takeRetainedValue() {
        //let nsError: NSError = realErr
        print(""data2secKey ERR: \(err.localizedDescription)"")
    }
    return key
}

}

","347","<ios><swift><encryption><public-key-encryption>","0","0","1","2018-12-23 22:34:03","","4","","","","","2018-12-17 00:46:46",""
"35656000","Unable to connect via ssh with public key authentication method","On my Windows 10, I am running into the problem of not being able to connect to m Vagrant virtual machine via ssh user with public key authentication method at git bash using command such as 
$ ssh -v lauser@127.0.0.1 -p 2222 -i ~/.ssh/id_rsa

I would be prompted for password, as if the public key I copied to in the ~/.ssh/Authorized_keys file inside the vm were not seen. Meanwhile,the password authentication method works, as well as 'vagrant ssh'. 
I have made sure to

create key pairs locally, create a .ssh directory at the remote, and add pub key string to the remote's .ssh /authorized_keys file; both the .ssh and the .ssh /authorized_keys file are owned by the user(lauser), and set at 700 and 644 
edit the /etc/ssh/sshd_config file on vm to use
RSAAuthentication yes
PubkeyAuthentication yes
and restarted the sshd server (with 'sudo service ssh restart').
verify that firewall has been disabled temporarily to eliminate any complication.
verify that there is only one vm running, all others are either in 'suspend' or 'halt' mode.
confirm the file type by 'file ~/.ssh/authorized_keys', and get confirmation '~/.ssh/authorized_keys: OpenSSH RSA public key'
verify that the keys match by comparing the output from 'sudo cat ~/.ssh/authorized_keys' in vm and the output from ' cat ~/.ssh/id_rsa.pub' at the local.

but still I get Permission denied (publickey) when trying to connect through public key authentication.
","It sounds like you've done everything correctly so far. When I run in to this problem, it's usually due to directory permissions on the target user's home directory (~), ~/.ssh or ~/.ssh/authorized_keys.
See this answer on SuperUser.
","344","<linux><ssh><vagrant><public-key-encryption>","1","0","2","2019-05-02 11:12:00","","2","","2196426","","2016-02-26 16:15:31","2016-02-26 15:45:42",""
"35656000","Unable to connect via ssh with public key authentication method","On my Windows 10, I am running into the problem of not being able to connect to m Vagrant virtual machine via ssh user with public key authentication method at git bash using command such as 
$ ssh -v lauser@127.0.0.1 -p 2222 -i ~/.ssh/id_rsa

I would be prompted for password, as if the public key I copied to in the ~/.ssh/Authorized_keys file inside the vm were not seen. Meanwhile,the password authentication method works, as well as 'vagrant ssh'. 
I have made sure to

create key pairs locally, create a .ssh directory at the remote, and add pub key string to the remote's .ssh /authorized_keys file; both the .ssh and the .ssh /authorized_keys file are owned by the user(lauser), and set at 700 and 644 
edit the /etc/ssh/sshd_config file on vm to use
RSAAuthentication yes
PubkeyAuthentication yes
and restarted the sshd server (with 'sudo service ssh restart').
verify that firewall has been disabled temporarily to eliminate any complication.
verify that there is only one vm running, all others are either in 'suspend' or 'halt' mode.
confirm the file type by 'file ~/.ssh/authorized_keys', and get confirmation '~/.ssh/authorized_keys: OpenSSH RSA public key'
verify that the keys match by comparing the output from 'sudo cat ~/.ssh/authorized_keys' in vm and the output from ' cat ~/.ssh/id_rsa.pub' at the local.

but still I get Permission denied (publickey) when trying to connect through public key authentication.
","I faced same challenges when the home directory on the remote did not have correct privileges. Changing permissions from 777 to 744 helped me
","344","<linux><ssh><vagrant><public-key-encryption>","1","0","2","2019-05-02 11:12:00","","2","","2196426","","2016-02-26 16:15:31","2016-02-26 15:45:42",""
"48997526","Does OpenSSL provide any post quantum asymmetric algorithms?","I'm familiar with classical encryption algorithms and mathematics, like RSA and ECC, but just out of interest. I'm not a specialist in this field. I'd like to start a long-term project, but since I'm not a cryptographer, it's very difficult to research this topic and get a clear and correct answer. I'm looking to use OpenSSL as a black-box for this purpose.
My question: Does OpenSSL provide any post quantum asymmetric algorithms for both encryption and/or signatures?
If not, are there any plans in the future to support this?
PS: Please note that I'm not asking for software recommendation as I understand this is off-topic. I'm asking about OpenSSL here and its supported algorithms.
","No, it does not.
However, you should monitor the Open Quantum Safe project, which creates a library that operates with OpenSSL with the view of introducing post-quantum safe algorithms into OpenSSL.
","343","<c++><encryption><openssl><public-key-encryption><post-quantum-cryptography>","-1","0","1","2018-02-26 22:36:59","48998216","1","","","","","2018-02-26 21:38:07",""
"25371892","How to encrypt data in objective-c using a public key generated from php script","I've looked around and found scant information on encryption on Mac OS X.  It seems like OpenSSL support is deprecated in newer version of Mac OS X. I need to be able to support from 10.5 and up.  Here's my problem:
I have a public and private key pair generate on our licensing server using php (code shown below)
$dn = array(configs....);
$privkey = openssl_pkey_new();

$csr = openssl_csr_new($dn, $privkey);

$sscert = openssl_csr_sign($csr, null, $privkey, $term);

openssl_x509_export($sscert, $publickey);
openssl_pkey_export($privkey, $privatekey, ""somepassphrase"");

//base64 encode the keys
$privatekey = base64_encode($privatekey);
$publickey = base64_encode($publickey);

The base64 encoded private key is stored in a secure location on one of our servers and the base64 encoded public key is written to a file for download by our users.  The file is loaded into a desktop application for MacOS X written in cocoa, which base64 decodes the public key.  Until this step is good.  However, I want to then encrypt data with the public key and send it to our license server.  Does anyone know how I can use this public key to encrypt data in cocoa and what is the ""best"" practice method?  Any examples or tips would be much appreciated!
","It is not so much OpenSSL that is deprecated on the Mac but merely the OpenSSL libraries that are provided by OS X are deprecated. Nothing stops you from compiling your own OpenSSL and use it in your app by statically linking to it:

Although OpenSSL is commonly used in the open source community,
  OpenSSL does not provide a stable API from version to version. For
  this reason, although OS X provides OpenSSL libraries, the OpenSSL
  libraries in OS X are deprecated, and OpenSSL has never been provided
  as part of iOS. Use of the OS X OpenSSL libraries by apps is strongly
  discouraged.
If your app depends on OpenSSL, you should compile OpenSSL yourself
  and statically link a known version of OpenSSL into your app. This use
  of OpenSSL is possible on both OS X and iOS. However, unless you are
  trying to maintain source compatibility with an existing open source
  project, you should generally use a different API.
Common Crypto and Security Transforms are the recommended alternatives
  for general encryption. CFNetwork and Secure Transport are the
  recommended alternatives for secure communications.

In other words: It is still fine to use OpenSSL in your OS X app - just don't rely on the bundled OpenSSL anymore. Alternatively, you can make use of OS X' Security Framework: It is capable of handling X.509 public key encryption which you seem to be doing as well. 
Source: Cocoa Cryptographic Services Guide
","343","<php><cocoa><public-key-encryption>","0","1","1","2014-08-23 18:26:35","25465050","0","","","","","2014-08-18 20:56:54",""
"18861742","RSACryptoServiceProvider helper","I was looking for RSACryptoServiceProvider helper and found two different implementations
1) http://www.cnblogs.com/WYB/archive/2008/06/19/1225704.html
2) https://github.com/robvolk/Helpers.Net/blob/master/Src/Helpers.Net/EncryptionExtensions.cs
both of them working
var encryptedBytes = myBytes.RSAEncrypt(publicKey);
System.Text.Encoding.Unicode.GetString(encryptedBytes); 
returns strings like ""蹩巷Ӂය馧㾵봽놶徤蕺蓷課Ϝ堲泍썳⁙䃑ക늏....""

myString.EncryptStringUsingXMLFile(publicKey) 
returns strings like ""AnvFFT6YpoiAyIFwl+tueZq56Zcb0B7WhBEvz5uWl....""

May be some one can explain why first one producing Chinese strings and how to change that?
What approach is better?
","To answer your first question. While it may look like it is producing Chinese characters what is actually happening is it is turning a byte array into unicode. In c# typically when you want to store a byte array you convert it to base64 which is what your second example appears to return.
Your first example would become this:
var encryptedBytes = myBytes.RSAEncrypt(publicKey);
Convert.ToBase64String(encryptedBytes) // this line changed
returns strings like ""AnvFFT6YKpoiAy....""

As for what is recommended, the most common is to use base64. The reasons people use base64 over unicode or UTF-8 for binary data can be found in these answers:
https://stackoverflow.com/a/201491/701062
MSDN - Convert.ToBase64String(byte[]) 
http://msdn.microsoft.com/en-us/library/dhx0d524(v=vs.100).aspx
MSDN - Convert.FromBase64String(string) - Useful if you need to convert back into a byte array
http://msdn.microsoft.com/en-us/library/system.convert.frombase64string(v=vs.100).aspx
","343","<c#><rsa><public-key-encryption>","1","0","1","2013-09-18 04:38:41","18863965","1","0","2612332","","2013-09-18 00:40:00","2013-09-17 23:51:58","2013-09-18 05:55:58"
"54621039","How to test/debug Decrypting Encrypted Assertion using OpenSAML 2 and Java?","I am trying to write a Java app together with OpenSAML2 (2.6.6) to decrypt an encrypted assertion, but I am getting:
[main] ERROR org.opensaml.xml.encryption.Decrypter - Failed to decrypt EncryptedKey, valid decryption key could not be resolved
[main] ERROR org.opensaml.xml.encryption.Decrypter - Failed to decrypt EncryptedData using either EncryptedData KeyInfoCredentialResolver or EncryptedKeyResolver + EncryptedKey KeyInfoCredentialResolver
[main] ERROR org.opensaml.saml2.encryption.Decrypter - SAML Decrypter encountered an error decrypting element content

Here's my Java code (sorry it still has lots of debug output):
/*
 * ****************************************************************************************************
 * Original source from: https://stackoverflow.com/questions/9422545/decrypting-encrypted-assertion-using-saml-2-0-in-java-using-opensaml
 * And hint about needed to add DefaultBootstrap.bootstrap() for OpenSAML 2.x: https://stackoverflow.com/questions/25066183/opensaml-error-receiving-correct-unmarshaller
 * And hing about chain resolvers: https://www.programcreek.com/java-api-examples/index.php?api=org.opensaml.saml2.encryption.Decrypter
 * ****************************************************************************************************
 * ****************************************************************************************************
 * ****************************************************************************************************
 * ****************************************************************************************************
 */
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream;
import java.security.KeyFactory;
import java.security.interfaces.RSAPrivateKey;
import java.security.spec.PKCS8EncodedKeySpec;
import java.util.ArrayList;
import java.util.List;

import org.opensaml.DefaultBootstrap;
import org.opensaml.saml2.core.Assertion;
import org.opensaml.saml2.core.EncryptedAssertion;
import org.opensaml.saml2.encryption.Decrypter;
import org.opensaml.saml2.encryption.EncryptedElementTypeEncryptedKeyResolver;
import org.opensaml.xml.Configuration;
import org.opensaml.xml.encryption.ChainingEncryptedKeyResolver;
import org.opensaml.xml.encryption.EncryptedKeyResolver;
import org.opensaml.xml.encryption.InlineEncryptedKeyResolver;
import org.opensaml.xml.encryption.SimpleRetrievalMethodEncryptedKeyResolver;
import org.opensaml.xml.io.Unmarshaller;
import org.opensaml.xml.io.UnmarshallerFactory;
import org.opensaml.xml.parse.BasicParserPool;
import org.opensaml.xml.security.keyinfo.StaticKeyInfoCredentialResolver;
import org.opensaml.xml.security.x509.BasicX509Credential;
import org.w3c.dom.Document;
import org.w3c.dom.Element;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class test_opensaml {


    public static void main(String[] args) {
        String PROGVERSION = ""V1.00"";

        String xmlFileName = """";
        String privateKeyFileName = """";

        System.out.println(""test_opensaml "" + PROGVERSION);

        if(args.length < 2) {
            System.out.println(""Command line is: java test_opensaml <signed_samlassertion_xml> <private_key_der>"");
            System.exit(0);
        }

        xmlFileName = args[0];
        privateKeyFileName = args[1];

        Logger logger = LoggerFactory.getLogger(test_opensaml.class);
        logger.info(""xmlFileName=["" + xmlFileName + ""]"");
        logger.info(""privateKeyFileName=["" + privateKeyFileName + ""]\n"");

        try {
            // Initialize the library
            DefaultBootstrap.bootstrap();
        } catch (Exception e) {
            System.out.println(""** ERROR ** - ERROR WHILE Executing DefaultBootstrap.bootstrap() - e=["" + e + ""]"");
            System.exit(-1);
        }

        InputStream inputStream = null;

        // Load the XML file and parse it.
        File xmlFile = new File(xmlFileName);
        try {
            inputStream = new FileInputStream(xmlFile);
        } catch (Exception e) {
            System.out.println(""** ERROR ** - ERROR WHILE LOADING ASSERTION XML FILE - e=["" + e + ""]"");
            System.exit(-1);
        }


        BasicParserPool parserPoolManager = new BasicParserPool();

        Document document = null;
        Element metadataRoot = null;
        try {
            document = parserPoolManager.parse(inputStream);
            metadataRoot = document.getDocumentElement();
            System.out.println(""metadataRoot.getNodeName()=["" + metadataRoot.getNodeName() + ""]"");
        } catch (Exception e) {
            System.out.println(""** ERROR ** - ERROR WHILE CREATING DOCUMENT FROM XML FILE - e=["" + e + ""]"");
            System.exit(-1);
        }

        UnmarshallerFactory unmarshallerFactory = null;
        Unmarshaller unmarshaller = null;
        EncryptedAssertion encryptedAssertion = null;

        try {
            // Unmarshall
            unmarshallerFactory = Configuration.getUnmarshallerFactory();
        } catch (Exception e) {
            System.out.println(""** ERROR ** - ERROR WHILE CREATING UNMARSHALLFACTORY - e=["" + e + ""]"");
            System.exit(-1);
        }

        if (unmarshallerFactory == null) {
            System.out.println(""unmarshallerFactory is null"");
        } else {
            System.out.println(""unmarshallerFactory is OK/NOT-null"");
        }

        try {
            // Unmarshall
            unmarshaller = unmarshallerFactory.getUnmarshaller(metadataRoot);
            if (unmarshaller == null) {
                System.out.println(""unmarshaller is null"");
            } else {
                System.out.println(""unmarshaller is OK/NOT-null"");
            }

            System.out.println(""unmarshaller.getClass().getname=["" + unmarshaller.getClass().getName() + ""]"");
        } catch (Exception e) {
            System.out.println(""** ERROR ** - ERROR WHILE CREATING UNMARSHALLER - e=["" + e + ""]"");
            System.exit(-1);
        }


        try {
            // Unmarshall
            encryptedAssertion = (EncryptedAssertion)unmarshaller.unmarshall(metadataRoot);
        } catch (Exception e) {
            System.out.println(""** ERROR ** - ERROR CREATING ENCRYPTEDASSERTION BY UNMARSHALLING - e=["" + e + ""]"");
            e.printStackTrace();
            System.exit(-1);
        }
        System.out.println(""SUCCESS - CREATED ENCRYPTEDASSERTION BY UNMARSHALLING!!"");
        System.out.println(""Will now try to load the PRIVATE KEY FILE..."");

        // Load the private key file.
        File privateKeyFile = new File(privateKeyFileName);
        FileInputStream inputStreamPrivateKey = null;
        byte[] encodedPrivateKey = null;
        try {
            inputStreamPrivateKey = new FileInputStream(privateKeyFile);
            encodedPrivateKey = new byte[(int)privateKeyFile.length()];
            inputStreamPrivateKey.read(encodedPrivateKey);
            inputStreamPrivateKey.close();
        } catch (Exception e) {
            System.out.println(""** ERROR ** - ERROR WHILE READING PRIVATE KEY FROM FILE - e=["" + e + ""]"");
            System.exit(-1);
        }
        System.out.println(""SUCCESS - READ/INPUT THE PRIVATE KEY FILE!!"");

        PKCS8EncodedKeySpec privateKeySpec = null;
        RSAPrivateKey privateKey = null;
        try {
            // Create the private key.
            privateKeySpec = new PKCS8EncodedKeySpec(encodedPrivateKey);
            privateKey = (RSAPrivateKey)KeyFactory.getInstance(""RSA"").generatePrivate(privateKeySpec);
        } catch (Exception e) {
            System.out.println(""** ERROR ** - ERROR WHILE CREATING PRIVATE KEY - e=["" + e + ""]"");
            System.exit(-1);
        }
        System.out.println(""SUCCESS - CREATING THE PRIVATE KEY INSTANCE!!"");



        ChainingEncryptedKeyResolver keyResolver = new ChainingEncryptedKeyResolver();
        keyResolver.getResolverChain().add(new InlineEncryptedKeyResolver());
        keyResolver.getResolverChain().add(new EncryptedElementTypeEncryptedKeyResolver());
        keyResolver.getResolverChain().add(new SimpleRetrievalMethodEncryptedKeyResolver());
        System.out.println(""Built a list of encrypted key resolvers..."");

        boolean successfulDecryption = false;

        // Create the credentials.
        BasicX509Credential decryptionCredential = new BasicX509Credential();
        decryptionCredential.setPrivateKey(privateKey);

        StaticKeyInfoCredentialResolver resolver = new StaticKeyInfoCredentialResolver(decryptionCredential);

        // Create a decrypter.
        Decrypter decrypter = new Decrypter(null, resolver, keyResolver);
        decrypter.setRootInNewDocument(true);
        // Decrypt the assertion.
        Assertion decryptedAssertion = null;
        System.out.println(""WILL NOW TRY TO DECRYPT THE ENCRYPTED ASSERTION..."");
        try
        {
            decryptedAssertion = decrypter.decrypt(encryptedAssertion);
        } catch (Exception e) {
            System.out.println(""** ERROR ** - ERROR WHILE DECRYPTING THE ASSERTION - e=["" + e + ""]"");
            System.exit(-1);
        }

        System.out.println(""SUCCESS - DECRYPTED THE ENCRYPTED ASSERTION - will now dump out the decrypted assertion...!!"");
        System.out.println(""decryptedAssertion.toString=["" + decryptedAssertion.toString() + ""]"");
        System.out.println(""Finished..."");
        System.exit(0);
    } // end main()

}

When I run that with a test signed assertion (XML) and the private key, I am getting the following output.  This is being run under Eclipse and using Java 1.8 build 201:
test_opensaml V1.00
[main] INFO test_opensaml - xmlFileName=[E:\ECLIPSE-WORKSPACES\opensaml\opensaml\data\encrypted_assertion.xml]
[main] INFO test_opensaml - privateKeyFileName=[E:\ECLIPSE-WORKSPACES\opensaml\opensaml\data\geoaxis-gxaccess.com.private-key.der]

metadataRoot.getNodeName()=[saml:EncryptedAssertion]
unmarshallerFactory is OK/NOT-null
unmarshaller is OK/NOT-null
unmarshaller.getClass().getname=[org.opensaml.saml2.core.impl.EncryptedAssertionUnmarshaller]
SUCCESS - CREATED ENCRYPTEDASSERTION BY UNMARSHALLING!!
Will now try to load the PRIVATE KEY FILE...
SUCCESS - READ/INPUT THE PRIVATE KEY FILE!!
SUCCESS - CREATING THE PRIVATE KEY INSTANCE!!
Built a list of encrypted key resolvers...
WILL NOW TRY TO DECRYPT THE ENCRYPTED ASSERTION...
[main] ERROR org.opensaml.xml.encryption.Decrypter - Error decrypting encrypted key
org.apache.xml.security.encryption.XMLEncryptionException: Unwrapping failed
Original Exception was java.security.InvalidKeyException: Unwrapping failed
    at org.apache.xml.security.encryption.XMLCipher.decryptKey(XMLCipher.java:1539)
    at org.opensaml.xml.encryption.Decrypter.decryptKey(Decrypter.java:708)
    at org.opensaml.xml.encryption.Decrypter.decryptKey(Decrypter.java:639)
    at org.opensaml.xml.encryption.Decrypter.decryptUsingResolvedEncryptedKey(Decrypter.java:794)
    at org.opensaml.xml.encryption.Decrypter.decryptDataToDOM(Decrypter.java:535)
    at org.opensaml.xml.encryption.Decrypter.decryptDataToList(Decrypter.java:453)
    at org.opensaml.xml.encryption.Decrypter.decryptData(Decrypter.java:414)
    at org.opensaml.saml2.encryption.Decrypter.decryptData(Decrypter.java:141)
    at org.opensaml.saml2.encryption.Decrypter.decrypt(Decrypter.java:69)
    at test_opensaml.main(test_opensaml.java:193)
Caused by: java.security.InvalidKeyException: Unwrapping failed
    at com.sun.crypto.provider.RSACipher.engineUnwrap(RSACipher.java:445)
    at javax.crypto.Cipher.unwrap(Cipher.java:2549)
    at org.apache.xml.security.encryption.XMLCipher.decryptKey(XMLCipher.java:1537)
    ... 9 more
Caused by: javax.crypto.BadPaddingException: Decryption error
    at sun.security.rsa.RSAPadding.unpadOAEP(Unknown Source)
    at sun.security.rsa.RSAPadding.unpad(Unknown Source)
    at com.sun.crypto.provider.RSACipher.doFinal(RSACipher.java:363)
    at com.sun.crypto.provider.RSACipher.engineUnwrap(RSACipher.java:440)
    ... 11 more
[main] ERROR org.opensaml.xml.encryption.Decrypter - Failed to decrypt EncryptedKey, valid decryption key could not be resolved
[main] ERROR org.opensaml.xml.encryption.Decrypter - Failed to decrypt EncryptedData using either EncryptedData KeyInfoCredentialResolver or EncryptedKeyResolver + EncryptedKey KeyInfoCredentialResolver
[main] ERROR org.opensaml.saml2.encryption.Decrypter - SAML Decrypter encountered an error decrypting element content
org.opensaml.xml.encryption.DecryptionException: Failed to decrypt EncryptedData
    at org.opensaml.xml.encryption.Decrypter.decryptDataToDOM(Decrypter.java:546)
    at org.opensaml.xml.encryption.Decrypter.decryptDataToList(Decrypter.java:453)
    at org.opensaml.xml.encryption.Decrypter.decryptData(Decrypter.java:414)
    at org.opensaml.saml2.encryption.Decrypter.decryptData(Decrypter.java:141)
    at org.opensaml.saml2.encryption.Decrypter.decrypt(Decrypter.java:69)
    at test_opensaml.main(test_opensaml.java:193)
** ERROR ** - ERROR WHILE DECRYPTING THE ASSERTION - e=[org.opensaml.xml.encryption.DecryptionException: Failed to decrypt EncryptedData]

Since this is (for me, at least) new and untested code, I was wondering how I can diagnose this problem further?  
Is there some additional logging or something that might help to find out what is wrong or pinpoint the problem?
I know that this is going to sound a little unusual, but also, FYI, I was given the signed assertion and private key that I am using to test right now, by a third party, so I am actually not 100% sure if they are good, so I was wondering if maybe there is somewhere I could get/download a known-good encrypted assertion example together with the corresponding private key, so that I could try to test my code above with known-good data?
Thanks,
Jim
EDIT:  Sorry I forgot to include a snippet of the encrypted assertion that I have been using to test:
<?xml version=""1.0""?>
<saml:EncryptedAssertion xmlns:saml=""urn:oasis:names:tc:SAML:2.0:assertion"">
<xenc:EncryptedData Type=""http://www.w3.org/2001/04/xmlenc#Element"" Id=""_332ec9de74ee4a8b97b84694edb58ba9"" xmlns:xenc=""http://www.w3.org/2001/04/xmlenc#"">
<xenc:EncryptionMethod Algorithm=""http://www.w3.org/2001/04/xmlenc#aes256-cbc""/>
<ds:KeyInfo xmlns:ds=""http://www.w3.org/2000/09/xmldsig#"">
<xenc:EncryptedKey Type=""http://www.w3.org/2001/04/xmlenc#Element"" Id=""_d32f036453ed438b84783a21a2e2cca7"">
<xenc:EncryptionMethod Algorithm=""http://www.w3.org/2001/04/xmlenc#rsa-oaep-mgf1p""/>
<xenc:CipherData>
<xenc:CipherValue>Rfn5PDApVSF3wTBgsiQsFn5rybj...EZoHpGvxDPv5kAhVw==</xenc:CipherValue>
</xenc:CipherData>
</xenc:EncryptedKey>
</ds:KeyInfo>
<xenc:CipherData>
<xenc:CipherValue>FTk8D8nGOTuZsunGifMEHtj...xiAvwSQ=</xenc:CipherValue>
</xenc:CipherData>
</xenc:EncryptedData>
</saml:EncryptedAssertion>

EDIT 2: For someone who is familiar with OpenSAML and SAML:  Is there something wrong with the signed assertion above?  I've been doing some additional testing, and it seems like none of the resolvers are able to find the encryption key and I noticed that the ds:Keyinfo is embedded inside xenc:EncryptedData, at the same level as the xenc:CipherData.  Is that a normal structure, and which of the chained resolvers is supposed to find that ds:Keyinfo?
","FYI, I was finally get this working as-is, once I found the correct private key to match the sample encrypted assertion.
","341","<java><encryption><saml-2.0><public-key-encryption><opensaml>","0","0","1","2019-02-11 21:24:14","","0","","555303","","2019-02-11 02:31:02","2019-02-10 21:02:12",""
"39484169","RSA encryption technique implemetation in Worklight mobile application","We are developing a banking mobile application using MobileFirst V7.1. As it is a banking mobile application security matters more the sensitive data from mobile client to MobileFirst server trasnferred securely. hence the data should be encrypted from the mobile client/App side and sent to the MobileFirst Server and at the server side we have to decrypt the data and call the backend webservice. As per the client requirement the following are the steps to be implemented for encryption logic:
Step 1:  Generate a symmetric key
                A 32 bit random key will be generated 
Step 2:  Encrypt the data with this key, using a symmetric algorithm like AES.
                The sensitive data is encrypted with the above generated key using AES algorithm
Step 3:  Encrypt the symmetric key with the public key, using a asymmetric algorithm like RSA.
                The key (32 bit random key generated in step1 an used for encryption of sensitive data in step2)  is encrypted using the asymmetric algorithm RSA public key   
Step 4:  Bundle the encrypted symmetric key with the encrypted data
                Bundle both the encrypted sensitive data and encrypted random key in an object and sent it to the server. At the worklight server end, from step4 to step1 is performed in reverse to decrypt and get the original data
The problem is I'm able to achieve the encryption logic from step1 to stpe4 at the application end, but when I use the same RSA alogorithm java script libraries in the MobileFirst HTTP adapter side to decrypt the data, I'm getting many errors stating that ""window"" is undefined, ""navigator"" is undefined. The RSA javascript libraries consists of navigator, window, at the mobilefirst adapter javascript file these navigaotr or window is unavailable, hence I'm getting this errors and I'm unable to move forward. Can anyone please help me to resolve this or help me in implementing the Enctyprtion logic as mentioned in the above step1 to step4 in my MobileFirst application.
Thanks in adavance.   
","Check this older response form stackoverflow: 
I don't see issues on encrypting you adapter request/response payload(the data you send and receive inside of an adapter call). 
Worklight adapter calls are not encrypted (WL.Client.invokeProcedure)
Although, if you encrypt the entire request(or response) used by this will confuse  the adapter Client/Server  internal communication protocol. 
If you want extra protection on on the transport layer(Like HTTP/HTTPS) and maybe an extra layer. I would check if in your case, a IBM DataPower would not what you are searching for: https://en.wikipedia.org/wiki/IBM_WebSphere_DataPower_SOA_Appliances
Application Layer: https://en.wikipedia.org/wiki/Application_layer
You can use also the adapter mash up technic at the adapter calls in a single adapter endpoint to prevent unwanted eyes to try ton reverse engineer this call by its name, and this 1st adapter can decrypt the payload at the server-side and send to the wanted adapter internally(inside the server-side). 
https://mobilefirstplatform.ibmcloud.com/tutorials/en/foundation/8.0/adapters/advanced-adapter-usage-mashup/
I hope this helps,
","340","<ibm-mobilefirst><rsa><public-key-encryption><encryption-asymmetric><mobilefirst-adapters>","1","0","2","2016-09-27 22:19:08","","4","1","3894072","","2016-09-14 09:07:21","2016-09-14 06:53:09",""
"39484169","RSA encryption technique implemetation in Worklight mobile application","We are developing a banking mobile application using MobileFirst V7.1. As it is a banking mobile application security matters more the sensitive data from mobile client to MobileFirst server trasnferred securely. hence the data should be encrypted from the mobile client/App side and sent to the MobileFirst Server and at the server side we have to decrypt the data and call the backend webservice. As per the client requirement the following are the steps to be implemented for encryption logic:
Step 1:  Generate a symmetric key
                A 32 bit random key will be generated 
Step 2:  Encrypt the data with this key, using a symmetric algorithm like AES.
                The sensitive data is encrypted with the above generated key using AES algorithm
Step 3:  Encrypt the symmetric key with the public key, using a asymmetric algorithm like RSA.
                The key (32 bit random key generated in step1 an used for encryption of sensitive data in step2)  is encrypted using the asymmetric algorithm RSA public key   
Step 4:  Bundle the encrypted symmetric key with the encrypted data
                Bundle both the encrypted sensitive data and encrypted random key in an object and sent it to the server. At the worklight server end, from step4 to step1 is performed in reverse to decrypt and get the original data
The problem is I'm able to achieve the encryption logic from step1 to stpe4 at the application end, but when I use the same RSA alogorithm java script libraries in the MobileFirst HTTP adapter side to decrypt the data, I'm getting many errors stating that ""window"" is undefined, ""navigator"" is undefined. The RSA javascript libraries consists of navigator, window, at the mobilefirst adapter javascript file these navigaotr or window is unavailable, hence I'm getting this errors and I'm unable to move forward. Can anyone please help me to resolve this or help me in implementing the Enctyprtion logic as mentioned in the above step1 to step4 in my MobileFirst application.
Thanks in adavance.   
","You have to write own code for encryption or decryption, I think you are using third party library to do encryption/decryption which is browser based. As worklight adpater does not recognize window/navigator. 
","340","<ibm-mobilefirst><rsa><public-key-encryption><encryption-asymmetric><mobilefirst-adapters>","1","0","2","2016-09-27 22:19:08","","4","1","3894072","","2016-09-14 09:07:21","2016-09-14 06:53:09",""
"37103632","How to generate temporary public-key using html5","How to generate a public/private key pair in the user's browser, 
This key must be:

temporary (not saved for ever, valid only for the current session). 
generated in a cross browser/system manner without prompting the user for any input.
allow access to the public key's hash for validation purposes.

I tried using <keygen> but it requires using forms and user intervention.
","Consider using WebCrypto
Specifically, crypto.subtle.generateKey will do the key generation.

The key can be temporary as long as you discard it securely and/or invalidate it after its desired validity period has expired.  Depending on how your system works, you may want to validate the expiry/validity of a given key by rolling it into the hash.
Here is a tutorial which offers a cross-browser solution.
Hashing the key (and/or other data) can be done using other parts of the WebCrypto API (see crypto.subtle.digest)

","339","<javascript><html5><public-key-encryption><public-key><temporary>","3","2","1","2016-05-08 19:47:31","","0","","3088349","","2016-05-08 18:56:15","2016-05-08 18:54:58",""
"20476365","Need to create DHPublicKey from y, p, g as BigIntegers","I need a DHPublicKey to encrypt some data.
Therefore I have been provided with all the needed parameters as BigIntegers (y, p, g).
Unfortunately I don't see a straight way for creating a public key object from these parameters that would fit the DHPublicKey interface.
Any idea?
","    KeyFactory keyFactory;
    KeyPairGenerator kpg;
    DHPublicKey originalDhPubKey, fromSpecsDhPubKey;
    DHPublicKeySpec dhPubKeySpecs;
    KeyPair kp;
    BigInteger p, g, y;

    // generate a DH key pair
    kpg = KeyPairGenerator.getInstance(""DH"");
    kp = kpg.generateKeyPair();

    // get the DH public key
    originalDhPubKey = (DHPublicKey) kp.getPublic();
    // get P, G and Y specs
    p = originalDhPubKey.getParams().getP();
    g = originalDhPubKey.getParams().getG();
    y = originalDhPubKey.getY();

    // get a DH KeyFactory
    keyFactory = KeyFactory.getInstance(""DH"");

    // create a DHPublicKeySpec with the specs you have
    dhPubKeySpecs = new DHPublicKeySpec(y, p, g);

    // get the DHPublicKey
    fromSpecsDhPubKey = (DHPublicKey) keyFactory.generatePublic(dhPubKeySpecs);

    // Check that the DH public values are equal
    System.out.println(originalDhPubKey.getY().equals(fromSpecsDhPubKey.getY()));

","338","<java><public-key-encryption><diffie-hellman>","1","2","1","2014-03-28 15:48:25","22717472","0","1","","","","2013-12-09 17:06:21",""
"17463441","How can I use openssl RSA public key to decrypt with out read the pem file","I send a string of the client's public key from a pem file and want to use this string to do decryption on server without writing the string into another pem file. How can I do it?
read key code:
if ( (my_public_key = PEM_read_RSA_PUBKEY(fp, NULL, My_PWD, NULL)) == NULL) {
    ERR_print_errors_fp(stdout);
    fclose(fp);
    return;
}

do decrypt code:
rsa_len = RSA_size(target_public_key);
p_de = (unsigned char*)malloc(rsa_len+1);
memset(p_de, 0, rsa_len+1);
if (RSA_public_decrypt(rsa_len, (unsigned char*)from_hex,p_de , target_public_key, RSA_NO_PADDING) <0) {
    perror(""can't decrypt data!"");
    return;
}

","","337","<openssl><rsa><public-key-encryption><pem>","0","","0","2014-02-19 14:44:45","","2","","608639","","2014-02-19 14:44:45","2013-07-04 06:40:59",""
"41537708","How can I externally verify a JWT token that has been signed with an RSA private key","I have a JWT token from AWS Cognito. The token is obtained via a call to getOpenIdTokenForDeveloperIdentity and I'm using the flow for AWS Cognito Developer Authenticated identity
The token is hashed with SHA512 and signed with Amazons RSA private key for the region/zone I'm using.  
How can I externally verify the signature with python?
","Answering my own question here in the hope it helps somebody. 
In my case I wanted to verify the signature of a JWT token obtained via the AWS Cognito Developer Authenticated identity route. No AWS API Gateway involvement.
Like many posters on various sites I had trouble piecing together exactly the bits I needs to verify the signature of an AWS JWT token externally i.e., server side or via script
I think I figured out out and put a gist to verify an AWS JWT token signature. It'll verify an AWS JWT/JWS token with either pyjwt or PKCS1_v1_5c from Crypto.Signature in PyCrypto
So, yes this was python in my case but it's also doable easily in node (npm install jsonwebtoken jwk-to-pem request). 
I attempted to highlight some gotchas in the comments because when I was trying to figure this out I was mostly doing the right thing but there were some nuances like python dict ordering, or lack there of, and json representation.
I've also noticed some questions around about doing the validation using the signers Certificate. I'll amend my gist to show this also.
Hopefully it may help somebody somewhere. 
","336","<amazon-web-services><jwt><public-key-encryption><amazon-cognito><pyjwt>","1","2","1","2017-07-06 22:31:00","","0","","","","","2017-01-08 20:46:48",""
"20108748","Secure communication + authentification on android server","I am trying to implement a server on android which securely communicates with (registered) clients. The protocol is proprietary.
My question is: Is following communication secure?

Adding a User:

Client requests sign up

Server creates public key and sends it to the client.

Client encrypts username+password with public key and sends it to the server.

Server accepts connection, hashes salted password, stores it in a keystore and
informs client about accepted sign up. (the decision, if a client will be
accepted or declined will be made by the user of the phone)


Communication for registered users:

Client requests service

Server creates public key and sends it to the client.

Client sends username+password+symmetric communication key to server.

Server verifies username and password using stored hash and salt. Server starts
symmetrically encrypted communication with client.



RSA will be used for asymmetric and AES will be used for symmetric en/decryption.
","","335","<android><encryption><client-server><public-key-encryption><encryption-symmetric>","1","","0","2013-11-21 00:52:53","","2","","2097062","","2013-11-21 00:52:53","2013-11-20 22:48:21",""
"35161374","php openssl encrypt stream on the fly","I have a php script that downloads huge zip file that is compressed on the fly using zipstream ( http://pablotron.org/software/zipstream-php/ ).
Is it possible to encrypt it using public key cryptography without storing the entire thing on servers disk or in memory?
As far as I can tell standard openssl_encrypt function requires entire data to be in the memory.
","","330","<php><openssl><public-key-encryption><zipstream>","0","","0","2016-02-02 18:42:08","","9","","5874330","","2016-02-02 18:42:08","2016-02-02 18:41:32",""
"16266475","RSA encryption using public key from .pem file","I am using RSA_public_encrypt function to send the encrypted data to socket. I am reading the public key  from .PEM file using ""pkey = PEM_read_PUBKEY(f, NULL, NULL, NULL);""  function.
'pkey' retrieved from above function is of type EVP_PKEY* which I can not use in function RSA_public_encrypt. (RSA_public_encrypt uses RSA* type key)
How to convert EVP_PKEY *pkey to RSA *rsa?
","Use RSA *EVP_PKEY_get1_RSA(EVP_PKEY *pkey) to get RSA type key from EVP_PKEY.
Example:
EVP_PKEY    *evp;
RSA         *pubkey

evp = ...; /* some way to get the public key */
pubkey = EVP_PKEY_get1_RSA(evp);
if (pubkey == NULL) {
    /* error handling */
}

","329","<rsa><public-key-encryption><evp-cipher>","0","1","1","2018-06-27 02:05:03","","2","","1033581","","2018-06-27 02:05:03","2013-04-28 18:52:27",""
"44296671","How do I take a Public Key String and turn it into a Pycryptodome key (Python)","I have a public key, however, I'm not sure on how to turn that into a key on Pycryptodome. I've been using this code that I found here
keyDER = b64decode(key64)
seq = asn1.DerSequence()
seq.decode(keyDER)
keyPub = RSA.construct((seq[0], seq[1]))

print(keyPub.encrypt('test',""Unguessable""))

With key64 as the PublicKey, however, I get ValueError: Unexpected DER tag. Is there a better way of doing this in python 3.6 with Pycryptodome?
","We need these modules:
import os
from Cryptodome.Hash import SHA256
from Cryptodome.PublicKey import RSA
from Cryptodome.Signature import pkcs1_15

We have a plantext:
message = b'hello!'

Find a hash from plaintext:
h = SHA256.new(message)

Generate random key:
key = RSA.generate(1024, os.urandom)

Create a signature:
signature = pkcs1_15.new(key).sign(h)

And finally take a public key:
pub_key = key.publickey()

The check func will look like this:
 def sign(message, pubkey, signature):
      h = SHA256.new(message)
      try:
          pkcs1_15.new(pubkey).verify(h, signature)
          print('Success!')
      except ValueError:
          print('Invalid signature!')

","324","<python><python-3.x><public-key-encryption><pycryptodome>","0","0","1","2018-04-11 10:33:43","","2","","","","","2017-06-01 00:31:08",""
"43672389","java.security.spec.InvalidKeySpecException: when generate SAML signature","I met below error when I use saml generator together with my keystore and certificate, can anyone tell me what goes wrong?
    java.security.spec.InvalidKeySpecException: java.security.InvalidKeyException: IOException : DerInputStream.getLength(): lengthTag=109, too big.
    at sun.security.rsa.RSAKeyFactory.engineGeneratePrivate(Unknown Source)
    at java.security.KeyFactory.generatePrivate(Unknown Source)
    at com.rackspace.saml.CertManager.getSigningCredential(CertManager.java:43)
    at com.rackspace.saml.SamlAssertionProducer.createSignature(SamlAssertionProducer.java:228)
    at com.rackspace.saml.SamlAssertionProducer.createSAMLResponse(SamlAssertionProducer.java:39)
    at com.rackspace.saml.Client.getSAMLXML(Client.java:186)
    at com.rackspace.saml.Client.main(Client.java:208)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
    at java.lang.reflect.Method.invoke(Unknown Source)
    at com.intellij.rt.execution.application.AppMain.main(AppMain.java:144)
Caused by: java.security.InvalidKeyException: IOException : DerInputStream.getLength(): lengthTag=109, too big.
    at sun.security.pkcs.PKCS8Key.decode(Unknown Source)
    at sun.security.pkcs.PKCS8Key.decode(Unknown Source)
    at sun.security.rsa.RSAPrivateCrtKeyImpl.<init>(Unknown Source)
    at sun.security.rsa.RSAPrivateCrtKeyImpl.newKey(Unknown Source)
    at sun.security.rsa.RSAKeyFactory.generatePrivate(Unknown Source)
    ... 12 more
java.lang.NullPointerException
    at org.opensaml.xml.io.AbstractXMLObjectMarshaller.marshall(AbstractXMLObjectMarshaller.java:95)
    at org.opensaml.common.impl.AbstractSAMLObjectMarshaller.marshall(AbstractSAMLObjectMarshaller.java:59)
    at org.opensaml.xml.io.AbstractXMLObjectMarshaller.marshall(AbstractXMLObjectMarshaller.java:85)
    at com.rackspace.saml.Client.getSAMLXML(Client.java:189)
    at com.rackspace.saml.Client.main(Client.java:208)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
    at java.lang.reflect.Method.invoke(Unknown Source)
    at com.intellij.rt.execution.application.AppMain.main(AppMain.java:144)

","","324","<java><rsa><saml><public-key-encryption>","0","","0","2017-04-28 05:22:35","","3","0","44512","","2017-04-28 05:22:35","2017-04-28 05:11:43",""
"42647395","How to encrypt file from Base64 generated public key","I got the task to encrypt the given file using public key which I have to generate from given Base64 exponent and modulus. I generated the public key using code
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.math.BigInteger;
import java.security.KeyFactory;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.NoSuchAlgorithmException;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.RSAPrivateKeySpec;
import java.security.spec.RSAPublicKeySpec;
import javax.crypto.Cipher;
import java.util.Base64;


/**
 *
 * @author Kunjesh RSA - Encrypt Data using Public Key RSA - Descypt Data using
 * Private Key
 */
public class RSAEncryption {

    private static final String PUBLIC_KEY_FILE = ""Public.key"";

    public static void main(String[] args) throws IOException {

        try {

            System.out.println(""\n--------SAVING PUBLIC KEY AND PRIVATE KEY TO FILES-------\n"");


            // Hardcode the RSA key

            String modulusString = ""qSwYXXE+SQ/ROpCQazST9imW+mPSjiCSjF4s+TFsPpdVln+tL9LrFEVo2ok+97WNg8ZkTEO5atw7uN8FJFXnWAXpQuHBos9/m3Y31nwSaj+CbFr+qdCHFxAq+l7cJUZI7JCCG8GS2365rMBzMSHK0tHcqCNk/EzW+jsBvKumQ7E="";

            //String modulusString = ""00d56047acf652298e3fcdbb8cecbc32214722aa1625f88480cf570cee373ada932b140c29b00dc44f6e59e7018dddca66b2f1c645dacb9d4a45459cfa8f7e33df"";

            //String exponentString = ""18bc01730656bde47476f7cfbd3d8f9e15ede9c389814672dc161e349b08627fc885fe9d2442ae92f0214c7e97cf0b9a9fc876df4f53517ab63d710f997b2779"";

            String publicExponentString = ""AQAB"";


            // Load the key into BigIntegers

            BigInteger modulus = new BigInteger(Base64.getDecoder().decode(modulusString));

            //BigInteger exponent = new BigInteger(exponentString, 16);

            BigInteger pubExponent = new BigInteger(Base64.getDecoder().decode(publicExponentString));


            // Create private and public key specs

            //RSAPrivateKeySpec privateSpec = new RSAPrivateKeySpec(modulus, exponent);

            RSAPublicKeySpec publicSpec = new RSAPublicKeySpec(modulus, pubExponent);


            // Create a key factory

            KeyFactory factory = KeyFactory.getInstance(""RSA"");

            System.out.println(""Hello world"");


           // Create the RSA private and public keys

           // PrivateKey priv = factory.generatePrivate(privateSpec);

            PublicKey pub = factory.generatePublic(publicSpec);

            RSAEncryption rsaObj = new RSAEncryption();

            rsaObj.saveKey(PUBLIC_KEY_FILE, modulus, pubExponent);

        } catch (Exception e) {
        }
    }


    private void saveKey(String fileName, BigInteger mod, BigInteger exp) throws IOException {

        System.out.println(""Hello World"");

        FileOutputStream fos = null;

        ObjectOutputStream oos = null;

        try {

            System.out.println(""Generating "" + fileName + ""..."");
            fos = new FileOutputStream(fileName);
            oos = new ObjectOutputStream(new BufferedOutputStream(fos));
            oos.writeObject(mod);
            oos.writeObject(exp);

            System.out.println(fileName + "" generated successfully"");

        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (oos != null) {
                oos.close();
                if (fos != null) {
                    fos.close();
                }
            }
        }
    }
}

The public key successfully generated. But when I encrypt the given file using generated key by this code
public void encryptFile(String inputFileName, String outputFileName, String keyFileName) throws Exception {
        try {
            KeyGenerator keygen = KeyGenerator.getInstance(""AES"");
            SecureRandom random = new SecureRandom();
            keygen.init(random);

            SecretKey key = keygen.generateKey();

            //Packages with the RSA public key
            System.out.println(""keyFileName : "" + keyFileName);
            ObjectInputStream keyIn = new ObjectInputStream(new FileInputStream(keyFileName));
            Key publicKey = (Key) keyIn.readObject();
            keyIn.close();

            Cipher cipher = Cipher.getInstance(""RSA"");
            cipher.init(Cipher.WRAP_MODE, publicKey);

            byte[] wrappedKey = cipher.wrap(key);
            DataOutputStream out = new DataOutputStream(new FileOutputStream(outputFileName));
            out.writeInt(wrappedKey.length);
            out.write(wrappedKey);

            InputStream in = new FileInputStream(inputFileName);
            cipher = cipher.getInstance(""AES"");
            cipher.init(Cipher.ENCRYPT_MODE, key);

            crypt(in, out, cipher);
            in.close();
            out.close();
        } catch (Exception e) {
            System.out.println(""++++ Exception encryptFile ++++"");
            e.printStackTrace();
            throw e;
        }
}

private void crypt(InputStream in, OutputStream out, Cipher cipher)
            throws IOException, GeneralSecurityException {

        System.out.println(""in inside crypt ---- "" + in);
        System.out.println(""in inside crypt ---- "" + out);
        System.out.println(""cipher inside crypt  ----- "" + cipher);

        int blockSize = cipher.getBlockSize();
        int outputSize = cipher.getOutputSize(blockSize);
        byte[] inBytes = new byte[blockSize];
        byte[] outBytes = new byte[outputSize];

        int inLength = 0;
        boolean done = false;

        while (!done) {
            inLength = in.read(inBytes);

            if (inLength == blockSize) {
                int outLength = cipher.update(inBytes, 0, blockSize, outBytes);
                out.write(outBytes, 0, outLength);
            } else {
                done = true;
            }
        }


        if (inLength > 0) {
            outBytes = cipher.doFinal(inBytes, 0, inLength);
        } else {
            outBytes = cipher.doFinal();
        }

        out.write(outBytes);
}

It is showing error
java.lang.ClassCastException: java.math.BigInteger cannot be cast to java.security.Key
Exception occurred java.lang.ClassCastException: java.math.BigInteger cannot be cast to java.security.Key
Where am I wrong? Help me..
","You can't go directly cast a BigInteger to a Key. A Key should be constructed from two BigIntegers, the modulus and the exponent. Try this:
RSAPublicKeySpec spec = new RSAPublicKeySpec(modulus, publicExponent);
KeyFactory factory = KeyFactory.getInstance(""RSA"");
PublicKey pub = factory.generatePublic(spec);

","323","<java-8><base64><public-key-encryption><java-security>","-1","0","1","2017-03-09 15:53:58","","0","2","1439733","","2017-03-07 16:49:50","2017-03-07 11:40:48",""
"34459588","Secure communication using encrypted messages","I have a question about how to encrypt messages between users. Note i will only talk about cryptography theory and not platform dependent code like C++ with Windows Cryptography. I am talking about system programming and not web programming encryption with TLS, SSL, etc...
Also, ignore Certificates and Signing of messages, so just think of the Public keys as already being verified as not fraudulent and messages as being from the correct user.
I believe the best way to reach fast and secure encryption communication between users is to have both users with a session key because symmetric encryption is faster than asymmetric, and using asymmetric encryption (RSA) for the secure transfer of the session key.
I know there are other key agreement algorithms like Diffie-Hellmans, but lets stick with RSA which is what i've chosen.
Please tell me if you see where this might be a insecure (man-in-the-middle attack) or drastically inefficient way of performing encrypted communications.
Theory steps:
i.) Parties = {Server, Client}
ii.) Server: Generate session key (RC4)
iii.) Client: Generate private/public key pair (RSA)
iv.) Client: Send public key to Server
v.) Server: Encrypt session key with Client's Public Key, then send encrypted 
session key to Client
vi.) Client: Decrypt session key using Client's Private Key
vii.) Both parties now hold the session key for fast encrypted communications
Server(Server's Session key) <--> Session Key's encrypted packet (Communication medium) <--> Client(Server's Session key, Client's Public/Private key pair)
Thanks! 
","Assumptions: 

Public Key Tampering is not possible.


I think you mean this, by ""ignore Certificates and Signing of messages""

Cryptosystem is not broken.


Symmetric cipher is not broken (RC4 is broken, for example)
Asymmetric cipher is not broken
One-way Hash function is not broken
Random number generator is not broken


Under these conditions, that's perfectly safe. In fact what you described in your question is how PGP works.

If you are willing to learn more about attacks against PGP, go here.
And if you are willing to learn basics of cryptology, this is an excellent beginner tutorial.
","317","<security><encryption><rsa><public-key-encryption><private-key>","-1","3","2","2015-12-25 03:24:28","34459612","0","","","","","2015-12-25 02:41:44",""
"34459588","Secure communication using encrypted messages","I have a question about how to encrypt messages between users. Note i will only talk about cryptography theory and not platform dependent code like C++ with Windows Cryptography. I am talking about system programming and not web programming encryption with TLS, SSL, etc...
Also, ignore Certificates and Signing of messages, so just think of the Public keys as already being verified as not fraudulent and messages as being from the correct user.
I believe the best way to reach fast and secure encryption communication between users is to have both users with a session key because symmetric encryption is faster than asymmetric, and using asymmetric encryption (RSA) for the secure transfer of the session key.
I know there are other key agreement algorithms like Diffie-Hellmans, but lets stick with RSA which is what i've chosen.
Please tell me if you see where this might be a insecure (man-in-the-middle attack) or drastically inefficient way of performing encrypted communications.
Theory steps:
i.) Parties = {Server, Client}
ii.) Server: Generate session key (RC4)
iii.) Client: Generate private/public key pair (RSA)
iv.) Client: Send public key to Server
v.) Server: Encrypt session key with Client's Public Key, then send encrypted 
session key to Client
vi.) Client: Decrypt session key using Client's Private Key
vii.) Both parties now hold the session key for fast encrypted communications
Server(Server's Session key) <--> Session Key's encrypted packet (Communication medium) <--> Client(Server's Session key, Client's Public/Private key pair)
Thanks! 
","
lets stick with RSA which is what i've chosen.

That's where your biggest vulnerability is.
Protocols such as TLS (which can use RSA) SSH and PGP provide a well defined mechanism for negotiating encryption, and implementations such as openssl provide a documented, tested, portable, robust and we'll tested abstraction layer. 
Rolling your own solution carries massive risks of injecting vulnerabilities. And entails ongoing pain in maintenance.
BTW RC4 is considered broken by many people.
","317","<security><encryption><rsa><public-key-encryption><private-key>","-1","1","2","2015-12-25 03:24:28","34459612","0","","","","","2015-12-25 02:41:44",""
"44418256","Is there a way to verify a signed digest within Postgres?","The following command was run and the content of content_file, signature_file and id_rsa.pub (or pem) are inserted into a Postgres database.
openssl dgst -sign id_rsa content_file > signature_file
Is there any way to verify that the signature corresponds with the content/public key within Postgres?
I have looked at the pgcrypto functions however the only relevant function seems to be pgp_pub_decrypt which requires the secret key.
Basically I am looking to perform the following in Postgres:
openssl dgst -verify .\id_rsa.pem -signature .\signature_file .\content_file
","As per Craig's suggestion, I ended up using plpythonu to solve this.
CREATE OR REPLACE FUNCTION api.verify(
  p_data text,
  p_signature text,
  p_publickey text
)
  RETURNS boolean AS
$$
   try:
     import rsa

     pubkey = rsa.PublicKey.load_pkcs1(p_publickey)
     signature = bytearray.fromhex(p_signature)
     verified = rsa.verify(p_data, signature, pubkey)

     return verified
   except:
     return False

$$ LANGUAGE plpythonu VOLATILE
  SECURITY DEFINER;

With my lack of python knowledge, the hardest part of this was actually setting up the required python packages (Docker environment in my case). Here is the relevant excerpt from the Dockerfile:
FROM postgres:9.6

# Install necessary python packages to work with postgres
RUN apt-get update \
 && apt-get install -y --no-install-recommends \
    ""postgresql-plpython-$PG_MAJOR"" \
 && apt-get install -y python-pip python-dev

# Install python rsa module for signature verification
RUN pip install rsa

The function worked given the following parameters:
-- Generate private key. Provide secure passphrase when prompted.
openssl genrsa -aes256 -out private.pem 4096

--Export public KEY
openssl rsa -in private.pem -RSAPublicKey_out -out public.pem

--Sign data. Provide secure passphrase when prompted.
--Remove first line (RSA-SHA256(data.txt)=) when passing into database verify function.
openssl dgst -hex -sign private.pem data.txt > signature.txt

","316","<postgresql><public-key-encryption><sign><pgcrypto>","1","0","1","2017-06-09 21:09:40","44466569","3","1","","","","2017-06-07 16:32:03",""
"23337948","Extracting public keys from windows keystore","I'm trying to sign a file with private key
using windows keystore. I also wish to enclose the public key (.cer x509) of the signing digital signature. The .cer file is currently exported from windows certificate collection manually and saved to .cer file but I wish to generate the .cer at the time of signing. Below is the code:
KeyStore ks = KeyStore.getInstance(""Windows-MY"");
            String alias = """";            
            ks.load(null, null) ;
            alias = ks.aliases().nextElement(); // read the first element only
            Key key;
            key = ks.getKey(alias,null);
            Certificate certificate = ks.getCertificate(alias);
            RSAPublicKey pub = (RSAPublicKey) certificate.getPublicKey();

Here how do I write the variable pub into .cer file to be enclosed with signed file for verification at recipient side.
","Just got the solution: I was writing the RSAPublickKey from pub variable to .cer file, whereas I should be writing Certificate to file, which worked for me and it shows valid .cer file. Thanks.
","316","<java><xml><encryption><x509certificate><public-key-encryption>","0","0","1","2014-04-28 11:20:36","","2","","","","","2014-04-28 09:55:36",""
"38133097","Why is senders private key used in encryption?","I'm looking through libsodium-examples of public-key-cryptography and it seems the senders private key is used in addition to the receivers public key when encrypting the plaintext.
Extract from the relevant example:

The crypto_box_easy() function encrypts a message m whose length is
  mlen bytes, with a recipient's public key pk, a sender's secret key sk
  and a nonce n.

What is the point of this? My understanding was that the senders private key only was used when signing a message? 
","Digital signatures encrypt with the private key and are decrypted with the public key. This allows anyone to verify the signature with the signer's public key.
","316","<public-key-encryption><libsodium>","0","0","2","2016-07-01 01:57:37","38135858","5","","","","","2016-06-30 20:55:28",""
"38133097","Why is senders private key used in encryption?","I'm looking through libsodium-examples of public-key-cryptography and it seems the senders private key is used in addition to the receivers public key when encrypting the plaintext.
Extract from the relevant example:

The crypto_box_easy() function encrypts a message m whose length is
  mlen bytes, with a recipient's public key pk, a sender's secret key sk
  and a nonce n.

What is the point of this? My understanding was that the senders private key only was used when signing a message? 
","The libsodium documentation refers to an ""authentication tag"" which is explained in a different chapter in the following section:
This operation: 

 * Encrypts a message with a key and a nonce to keep it confidential.
 * Computes an authentication tag. This tag is used to make sure that
   the message hasn't been tampered with before decrypting it.

So what libsodium calls authentication tag is equivalent to the more common terminology of signing a message. Therefore it makes sense for the crypto_box_easy(...) function to take the senders private key as input since the encryption really is encryption and signing.
","316","<public-key-encryption><libsodium>","0","0","2","2016-07-01 01:57:37","38135858","5","","","","","2016-06-30 20:55:28",""
"53394102","OpenSSL Decryption - EVP_DecryptFinal_ex fails","I'm using this decryption function to get the plain text value of a cipher which was encrypted using EVP AES 265 GCM; I can see data in rawOut but ret = EVP_DecryptFinal_ex(ctx, rawOut, &len); returns 0; can you provide any insight as to why? I've also seen sources which do rawOut + len in the EVP_DecryptFinal_ex code, I'm not sure why this would be needed as it would move the pointer to the end of the buffer.
unsigned char* keyDecrypter(unsigned char* pszMasterKey)
{
    ERR_load_crypto_strings();

    int ret, len;
    EVP_CIPHER_CTX* ctx;
    unsigned char* rawOut = new unsigned char[48]; // ToDo Remove Hardcoded Value

    Info info = m_header.processKeyInfo();
    if (NULL == info.nonce)
        return NULL;

    if (!(ctx = EVP_CIPHER_CTX_new()))
        return NULL;

    if (!EVP_DecryptInit_ex(ctx, EVP_aes_256_gcm(), NULL, pszMasterKey, info.nonce))
        return NULL;

    if (!EVP_DecryptUpdate(ctx, NULL, &len, m_header.aad, m_header.aad_len))
        return NULL;

    if (!EVP_DecryptUpdate(ctx, rawOut, &len, m_header.encryptedValue, m_header.encryptedValueLen))
        return NULL;

    // Finalise the decryption. A positive return value indicates success,
    // anything else is a failure - the plain text is not trustworthy.
    ret = EVP_DecryptFinal_ex(ctx, rawOut, &len);

    ERR_print_errors_fp(stderr);

    EVP_CIPHER_CTX_free(ctx);

    if (ret > 0)
    {
        return rawOut;
    }
    else
    {
        return NULL;
    }
}

","You need to pass rawOut + len to EVP_DecryptFinal_ex. See in the example at the end of the documentation:
    /* Buffer passed to EVP_EncryptFinal() must be after data just
     * encrypted to avoid overwriting it.
     */
    if(!EVP_EncryptFinal_ex(ctx, outbuf + outlen, &tmplen))
    {
         /* Error */
         return 0;
    }
    outlen += tmplen;

Also note that rawOut must have enough room for (m_header.aad_len + cipher_block_size) bytes. You can get the block size with EVP_CIPHER_block_size().
","315","<c++><c><c++11><openssl><public-key-encryption>","0","0","1","2018-11-20 14:25:59","","0","","1105735","","2018-11-20 13:47:31","2018-11-20 13:29:55",""
"41257415","I am getting error while using SecKeyEncrypt with Secure Enclave","I am try to use the kSecAttrTokenIDSecureEnclave for generating KeyPair using function .
But when try to encrypt data using function
SecKeyEncrypt(publicKey,padding,(const uint8_t *)[symmetricKey bytes],keyBufferSize,cipherBuffer,&cipherBufferSize);

getting error code -50, which show a parameter error.
Can anyone suggest me what I am missing ?

here is my functions that generate key pair and try to encrypt the data
- (void)generateKeyPair{
  OSStatus sanityCheck = noErr;

NSData *privateTag = [[NSData alloc] initWithBytes:privateKeyIdentifier length:sizeof(privateKeyIdentifier)];
NSData *publicTag = [[NSData alloc] initWithBytes:publicKeyIdentifier length:sizeof(publicKeyIdentifier)];


// Container dictionaries.
NSMutableDictionary * privateKeyAttr = [[NSMutableDictionary alloc] init];
NSMutableDictionary * publicKeyAttr = [[NSMutableDictionary alloc] init];
NSMutableDictionary * keyPairAttr = [[NSMutableDictionary alloc] init];


CFErrorRef error = NULL;
// Should be the secret invalidated when passcode is removed? If not then use `kSecAttrAccessibleWhenUnlocked`.
SecAccessControlRef sacObject = SecAccessControlCreateWithFlags(
                                                                kCFAllocatorDefault,
                                                                kSecAttrAccessibleWhenPasscodeSetThisDeviceOnly,
                                                                kSecAccessControlTouchIDAny | kSecAccessControlPrivateKeyUsage,
                                                                &error
                                                                );

if (error != errSecSuccess) {
    NSLog(@""Generate key error: %@\n"", error);
}
[privateKeyAttr setObject:(__bridge id)sacObject forKey:(id)kSecAttrAccessControl];

[keyPairAttr setObject:[NSNumber numberWithUnsignedInteger:256] forKey:(id)kSecAttrKeySizeInBits];
[keyPairAttr setObject:(id)kSecAttrTokenIDSecureEnclave forKey:(id)kSecAttrTokenID];
[keyPairAttr setObject:(id)kSecAttrKeyTypeECSECPrimeRandom forKey:(id)kSecAttrKeyType];

// Set the private key dictionary.
[privateKeyAttr setObject:[NSNumber numberWithBool:YES] forKey:(id)kSecAttrIsPermanent];
[privateKeyAttr setObject:privateTag forKey:(id)kSecAttrApplicationTag];
// See SecKey.h to set other flag values.

// Set the public key dictionary.
[publicKeyAttr setObject:[NSNumber numberWithBool:NO] forKey:(id)kSecAttrIsPermanent];
[publicKeyAttr setObject:publicTag forKey:(id)kSecAttrApplicationTag];
// See SecKey.h to set other flag values.

// Set attributes to top level dictionary.
[keyPairAttr setObject:privateKeyAttr forKey:(id)kSecPrivateKeyAttrs];
[keyPairAttr setObject:publicKeyAttr forKey:(id)kSecPublicKeyAttrs];

// SecKeyGeneratePair returns the SecKeyRefs just for educational purposes.
sanityCheck = SecKeyGeneratePair((CFDictionaryRef)keyPairAttr, &publicKeyRef, &privateKeyRef);
LOGGING_FACILITY( sanityCheck == noErr && publicKeyRef != NULL && privateKeyRef != NULL, @""Something really bad went wrong with generating the key pair."" );


//Encypt
NSString *stringData = @""Hello Testing"";
NSLog(@""encryptedData Data = %@"",stringData);
NSData *encryptedData = [self wrapSymmetricKey:[stringData dataUsingEncoding:NSUTF8StringEncoding] keyRef:publicKeyRef];

}


- (NSData *)wrapSymmetricKey:(NSData *)symmetricKey keyRef:(SecKeyRef)publicKey {
OSStatus sanityCheck = noErr;
size_t cipherBufferSize = 0;
size_t keyBufferSize = 0;

LOGGING_FACILITY( symmetricKey != nil, @""Symmetric key parameter is nil."" );
LOGGING_FACILITY( publicKey != nil, @""Key parameter is nil."" );

NSData * cipher = nil;
uint8_t * cipherBuffer = NULL;

// Calculate the buffer sizes.
cipherBufferSize = SecKeyGetBlockSize(publicKey);
keyBufferSize = [symmetricKey length];

// Allocate some buffer space. I don't trust calloc.
cipherBuffer = malloc(cipherBufferSize * sizeof(uint8_t) );
memset((void *)cipherBuffer, 0x0, cipherBufferSize * sizeof(uint8_t));
SecPadding          padding = kSecPaddingNone;
// Encrypt using the public key.
sanityCheck = SecKeyEncrypt(    publicKey,
                            padding,
                            (const uint8_t *)[symmetricKey bytes],
                            keyBufferSize,
                            cipherBuffer,
                            &cipherBufferSize
                            );

LOGGING_FACILITY1( sanityCheck == noErr, @""Error encrypting, OSStatus == %d."", sanityCheck );

// Build up cipher text blob.
cipher = [NSData dataWithBytes:(const void *)cipherBuffer length:(NSUInteger)cipherBufferSize];

if (cipherBuffer) free(cipherBuffer);

return cipher;
}

","","314","<ios><security><public-key-encryption><private-key>","2","","0","2016-12-21 08:01:24","","3","1","3093854","","2016-12-21 08:01:24","2016-12-21 07:33:56",""
"24363191","In the public key cryptography, number of keys required for secure communication between n parties will be?","In the public key cryptography, number of keys required for secure communication between n parties will be? 
In my view the answer should be n*n (or n^2 or n squared)
Reason:
There are ‘n’ Parties.
Every Party has One (1) Public Key (for Encryption).
Also, every Party has n-1 private keys (paired) (for Decryption)
So every party has 1 + n-1 = n keys, and there are n parties communicating.
No. of Keys required is = n x n = n^2.
So Am I correct? (Please be specific & also show the full logic & give proper explanations).
","n key pairs is enough.
Every party generates a private/public key pair and publishes the public part.
When Alice wants to communicate with Bob, she encrypts her message with Bobs public key and now only Bob (not even Alice!) can decrypt it.
I think you are confusing this with secret key (aka symmetric) crypto, where every communication channel must have its own key, and there are n*(n-1)/2 channels for n parties.
","313","<algorithm><encryption><public-key-encryption>","0","0","1","2014-06-23 13:55:51","","3","","","","","2014-06-23 10:02:16",""
"50277766","JJWT errors with a 4096 length keys","I have the following test keys that I am using JJWT to perform JWT validation on:
-----BEGIN RSA PRIVATE KEY-----
MIIJKAIBAAKCAgEAyzAnJJCV/ihJGhutqA1147elFKtDQ4pNpQjhIwNPc1YkHYqa
nThHbyejv5Nsfn4yC9wpuEnpnsmD1yrfsFuVnl8MymOKmL7FoLkT9vALDpPhnMtH
d9b4ffI6kZTrVpQBmd5yNud6buVPTjH+N3o7Y9yZhAMChc9X+6SyllnE55gBXR57
r1e0b+s0BKqswE/iUuvSNHUN+JyuJnF+TrUIE6pqQJpkyXQOgjGgKuE+/HZzY7XT
54PnUbZRH+CIReS2nJ9TholG4UtRnxCl2hPge21KcjFG0bYPFJfpS/+Js+XS1p2g
7ttPTLlPMdg5GZYa9cUbJvIu1CatudWvb7Kuc/FeNI5QKIe2nOKiTh+4CL9ENWsN
9e6IVXNPFwGGOOgklnL8tCy00lZTMoTkpD20eK830ZXRMHQ6E4D/fgbttL4CJYY3
BNwNRcuQEZGOuUS85kiDGVyqdrqK2oVUlfQ6ezU6qWRyrPuZJK2Kpmaq572VFJtZ
0yZYkQ/7mtLzcHhavKvnqeYV5nhqkmRHG+/qoqMLdrzhL04HGaWmPRe2kSrZnCAX
XD+qED7noDcbGdv521ioxrnBbv6LweGSoHoHogEU+ReQrst2nJijfxgGS5tHLct5
dRkztxcLXdt5WM0xydobqhp/sf1mLaXqRhwqhWevTP4OD4NFAqDi2IDFHZ0CAwEA
AQKCAgBaNT6rlSWCeRA7bx5iBdfZCadYzdBHJBfktVR+3vFfG1ddZjPOqTXNu6OP
YjxAzHYbndtH3kjCHmVSGc7F1WNPtJNRJ3BY8Bl9ia27bEb8ads4aWeJZP9dqzUl
fSAeiAdN8Nx0U8Cfi17yMG/U4YeMhlwBp/Ruw+cj6bL/3Ur2Jx4z4Vy4NA//wESP
7dZUayLn/ZqNf4p8XdNTbf/NocG8OWSC2gj1B3mJg87AOtBj9ZK1KfyyRHVmabMK
m/zkSu5oCrRifn/hdjb+j72SXFDFe3gZypbOdC2tzuPcwc6498frUIAqi2NhhMQM
NRrkqSe/BYtQdyUjOyjV4HDK/mFEfcd/O4yVBaSmrsWOf3dtUbVrEkmP7dVbyoYI
9iostAi9WN7FW4h0AivKkf22E3hd0+5zCMoZRV+vxrdLWqn1bPb75WZZdM/1tJSL
47XO7teyXdbXw10ad/D1Dqn4prWSp1v0Lt59ZouBzRfWTF0ZUUQOrbDjSTPSqptx
j23Wj0pMnTr1jSCEmzitYeE6NK+8FiitCfrVw+EQGg8EkqAnnxmj7QrU4an7Sbn2
Ko4zXezBzQV3VzlhOqCNt6Gvn37mIj8C2ElOSoPUWHnt94or1iRzH2+9R60rlNz5
AtooWxfTf6rUQye1POwgXgWq7GvD3eGpHUyFZ2fPRgRRzN3TYQKCAQEA6hyJCR1Y
gr6pul0ooBNoyoHiaf7zWLbQH53sFUDAuRpfeTgf7Yc2SYrL5BxKpKALr+J6fyr+
1ENN9vN7JXPshoRUc+FPdBJxYWFTNK1cTb8XIYjzr79NZNdwhLlL0ZC9HTobZwA8
Pr/qNHLFUCYZdSNtlba0yW38KjJbNxVZPN3lsEHEfLxnECPNLQ+r4sux1fTSpoQ4
Pw1RaxqY6BXYfYz+opfO98y5txqo/NoCQWxNyQUABq6+Qvr5bsmr2V4DF4pWW7su
NO8uV0muyslF+Ah/+8S4a0bvtyNb5JhrV1oEvF7YTrc1A19YO5wmO/oJ+AOAehAJ
PvHpcghWrD3WIwKCAQEA3i93RA5qyEeXM2yociWadLMmGXFAdhjzNABkvqHvA5AU
eLYGQSsUY8ikBo+L6i4bGUTO5R8aDLRZyi2javdsXsyksFXcBWyx4oaVUxTdGZBY
gBPKFOilhk7/TEgq8pqY4rsfCMGEwP5R1iGiH9m2t635pEt6M1M2zZbide8SZqC0
ASRbu4JOqoj/94cmp77ayc8HT4Tgi7aG4adQ1SNXVlwA46RG/ofYAtzNzMNT48FK
U0Dp2iG/1K2jkEhdJJUEnMYRh7XpJoYIb9JmxxQG1N2aa6jw14CieT2wLOiSVRxp
DbQymMmcZjNXrxdaxZgpI3aGNRvGUgEbvHEjbgwZPwKCAQEAuXCw+49LNQVh3EU+
kM3PC9mmRt+0Umk8ok6tWohYIEdLqPFUGQopbkeLCb1/QrejikaTUXf1Mp29fAeR
XDFfAY6AdunZzc9uD/zPs8I+gzcCU4XvwR5/Z4lfj0JXVECaDDSi0AvXrLzH/5OJ
x9rl/2t4ukZnHccJH0OUDSXT8eqyrdLqmQODf71cIH1xYcyHqTqsQUoqY4dhHr2K
sQvc2FZ+vLwTLSX1VZzAjskBUGFBnCFhy+lOvC+gtKj6fsuBF3x0u2ShTTzIMEwl
MGwOCFJzTjKdAhzGdQKFH6W8IQ0lAzD9lhx42ZsEgPNHNerxSos7kXRyXnGwwKrq
PLUekQKCAQAcAbWx8XNKXaPUipzNDqpijXZ+/ISYnlqBso8AbJ8ZPt8lvCQbsNd4
IIF0hkGnujoWPFMsFHiPI2iyEICp6hhR9s/HnnsGgAYIPNizyUx5fXV6Z4QwkIbU
4D5UGkC3pf8hjV7DFsmqHiSorkKmayYaDycJq63yrEmbLqrLHOCf6R/niPK7Nxi9
bFl/lRytRmSDzcHpJyG62r4z0Yhh5XuL2jsOdtWwHeV/rt+OMQzxB5tb1THlGh35
LA4TENwU0WfsbxckmSyTe4+ysL3d2EtoJ6rgaUI6l+9jAwCjGInhipw/avh5w+gg
BdbGrlX11FFTNAyEw0SDb7pUTZqes423AoIBABvffrM+TIKc3cIjQGlVw+RmYKBm
O+SyU80/eh2tEyZLZOg50R6CaIgWCKmEWODdlYiix/YdD0WgR5MBM3V8nb+BmV7m
FCZIqyH7flYCd9/FVLTpl6tCZ0YUHefSL+V09FvX9eLmnoXmwjNwR1kaZj3Ks6va
EqSxhtTxVs1aiffJ7vBvBUbXdNvnUcwoXwouJtFptSAApmnvfKMfnPN7e9zwSK6N
CLlFm24orAq0rH5x8xml/OzdMjiat3y0ZZRA2Bpuo1yfn015hkI2wrB+TQewU976
Tb2h49XJOwIv6npX6VhX6rVi4oHk+5DvNCYnYfGz3cyeV2mIVb9IVjAyJjw=
-----END RSA PRIVATE KEY-----
-----BEGIN PUBLIC KEY-----
MIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAyzAnJJCV/ihJGhutqA11
47elFKtDQ4pNpQjhIwNPc1YkHYqanThHbyejv5Nsfn4yC9wpuEnpnsmD1yrfsFuV
nl8MymOKmL7FoLkT9vALDpPhnMtHd9b4ffI6kZTrVpQBmd5yNud6buVPTjH+N3o7
Y9yZhAMChc9X+6SyllnE55gBXR57r1e0b+s0BKqswE/iUuvSNHUN+JyuJnF+TrUI
E6pqQJpkyXQOgjGgKuE+/HZzY7XT54PnUbZRH+CIReS2nJ9TholG4UtRnxCl2hPg
e21KcjFG0bYPFJfpS/+Js+XS1p2g7ttPTLlPMdg5GZYa9cUbJvIu1CatudWvb7Ku
c/FeNI5QKIe2nOKiTh+4CL9ENWsN9e6IVXNPFwGGOOgklnL8tCy00lZTMoTkpD20
eK830ZXRMHQ6E4D/fgbttL4CJYY3BNwNRcuQEZGOuUS85kiDGVyqdrqK2oVUlfQ6
ezU6qWRyrPuZJK2Kpmaq572VFJtZ0yZYkQ/7mtLzcHhavKvnqeYV5nhqkmRHG+/q
oqMLdrzhL04HGaWmPRe2kSrZnCAXXD+qED7noDcbGdv521ioxrnBbv6LweGSoHoH
ogEU+ReQrst2nJijfxgGS5tHLct5dRkztxcLXdt5WM0xydobqhp/sf1mLaXqRhwq
hWevTP4OD4NFAqDi2IDFHZ0CAwEAAQ==
-----END PUBLIC KEY-----

and here is my request with the JWT:
curl -k -H ""Authorization: Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoiYWRtaW4iLCJpYXQiOjE1MTYyMzkwMjIsImV4cCI6MTY1NjcyMzg3Mywic3ViIjoiYWRtaW4iLCJyb2xlcyI6ImFkbWluIn0.E0p_41R2qzm7UNioF8vW3Lt_OwGoCwo187c6Lt-LNSG8cnKNZTrEEkUCTV2iO-1BpWrekUY7v5WiTm0hV55YZqg62cHl5T_KVrQvTjO1ozLAfMiZnVeTCEI7EgR1xc_nKqmknhU6ogtVOrnGWBixU2lyPEGePa31niU98lyX4cWKtr2Ti4xNWrbeSwSXjqspEwG7-tmArUorgS5rJ20KtxAOj8FAXZhVPL1aC-VUTo9caXSgEl6-ktFKoDfm-lX7Snnsx5sPdX90zIugmllVPq_mUD75m5HiOhMlG4OkFVTc8aQ2WhrJqTOV4MFPYCSyz50RcTelqwG-MMKDrXzguUApyM4yVOynKhghdaEGDJBh6FIi8AOS8mHWxXwzd6VnZeLNmAFDw5Jm-IdI2T_tVeDc24BFJCG6zODiY3DAmOwLKpKSYeEU29sgeLA7M5-Q1BU4jF4LhelaE0E5kwtOO8MRWFAIsyoFCCuFqoP6W50achMQQi95h-KWtlHNKmrJs6Z2tCk7GwkyTgFPc76wAAioIhJnfXGNE_RQq0RRmtR6Kuzd-DPr4exrX6tmuUb2B3fGYkEeFXOWmXa1bg-DDLTWpVlkH3_Zsw3XS7wNwIMNzZQsDpXv5fzFtD3sajANPUjs0zsqE4asLBjMbSM4ohOrth6IV2JkBhrpuNYIHdU"" https://localhost:9200

Both keys and the JWT token are valid when checked with jwt.io, however JWT throws this error on runtime.
java.lang.IllegalArgumentException: Key bytes can only be specified for HMAC signatures. Please specify a PublicKey or PrivateKey instance.
    at io.jsonwebtoken.lang.Assert.isTrue(Assert.java:38) ~[jjwt-0.8.0.jar:0.8.0]
    at io.jsonwebtoken.impl.DefaultJwtParser.parse(DefaultJwtParser.java:324) ~[jjwt-0.8.0.jar:0.8.0]
    at io.jsonwebtoken.impl.DefaultJwtParser.parse(DefaultJwtParser.java:481) ~[jjwt-0.8.0.jar:0.8.0]
    at io.jsonwebtoken.impl.DefaultJwtParser.parseClaimsJws(DefaultJwtParser.java:541) ~[jjwt-0.8.0.jar:0.8.0]

In my code I have this function to get the public key:
private static PublicKey getPublicKey(final byte[] keyBytes, final String algo) throws NoSuchAlgorithmException, InvalidKeySpecException {
        X509EncodedKeySpec spec = new X509EncodedKeySpec(keyBytes);
        KeyFactory kf = KeyFactory.getInstance(algo);
        return kf.generatePublic(spec);
    }

and the full code can be viewed here: https://github.com/floragunncom/search-guard-authbackend-jwt/blob/master/src/main/java/com/floragunn/dlic/auth/http/jwt/HTTPJwtAuthenticator.java
","You didn't provide your source code in the question, which it is needed to solve your question. But I can deduce that you are probably using somewhere
jwtParser.setSigningKey(byte[] key)

which is reserved for HMAC keys, when you need to provide an RSA public key. Use:
jwtParser.setSigningKey(Key key);

Where key is the PublicKey.
","312","<java><jwt><public-key-encryption><jjwt>","1","1","1","2018-05-11 06:02:41","50285941","0","","","","","2018-05-10 16:47:26",""
"17760725","How to safely transfer some data from a server to an android device","I am working on an android application where I need to get some data securely from a server making sure that nobody has access to the data other than the application and the server.
For that I am planning to use public/private key encryption.
Is it the correct approach, or is there any better way?
I am new to both android and encryption. any pointers on where I can get some details/examples on how to implement this.
Thanks
Edit:
I am also planning to use private key for encryption and public key for decryption, which is  not the convention. Any issues with that?
","pack your data in a JSON package, and encrypt it on the server with the same key as the client. Ensure that the key at the mobile side is hard coded (static field) of a class, and not in any xml files.
i have seen people doing this because ""it's easier"" but not a good practice. And then transfer it through https. (not http !)
If you want, feel free to read the OWASP guide
","311","<android><encryption><public-key-encryption>","5","0","1","2013-07-20 10:03:02","","3","","1000642","","2013-07-20 10:03:02","2013-07-20 09:23:07",""
"28676156","PGP with empty passphrase fails in Mule","I'm trying to create an encryption-decryption service in Mule using PGP. As I created my key pair without a passphrase (since this is just a proof of concept), naturally I am not setting it in my config. However it seems Mule is enforcing a non-empty passphrase.
The error I'm getting:
    ERROR 2015-02-23 14:19:31,509 [[mule-pgp].HTTP_Listener_Configuration.worker.01] org.mule.exception.DefaultMessagingExceptionStrategy: 
********************************************************************************
Message               : Crypto Failure
Code                  : MULE_ERROR-111
--------------------------------------------------------------------------------
Exception stack is:
1. The password should not be null (java.lang.IllegalArgumentException)
  org.apache.commons.lang.Validate:203 (null)
2. Crypto Failure (org.mule.api.security.CryptoFailureException)
  org.mule.module.pgp.KeyBasedEncryptionStrategy:75 (http://www.mulesoft.org/docs/site/current3/apidocs/org/mule/api/security/CryptoFailureException.html)
--------------------------------------------------------------------------------
Root Exception stack trace:
java.lang.IllegalArgumentException: The password should not be null
    at org.apache.commons.lang.Validate.notNull(Validate.java:203)
    at org.mule.module.pgp.DecryptStreamTransformer.<init>(DecryptStreamTransformer.java:56)
    at org.mule.module.pgp.KeyBasedEncryptionStrategy.decrypt(KeyBasedEncryptionStrategy.java:69)
    + 3 more (set debug level logging or '-Dmule.verbose.exceptions=true' for everything)
********************************************************************************

Is there any way to get around this? I tried setting a space for the passphrase but no cigar.
","The source code shows a bunch of validations that can't be bypassed:
Validate.notNull(toBeDecrypted, ""The toBeDecrypted should not be null"");
Validate.notNull(publicKey, ""The publicKey should not be null"");
Validate.notNull(secretKey, ""The secretKey should not be null"");
Validate.notNull(password, ""The password should not be null"");
Validate.notNull(provider, ""The security provider can't be null"");

So the only workaround for your problem I can think of is to actually use a passphrase.
","304","<encryption><mule><public-key-encryption><pgp>","0","0","1","2015-02-23 21:18:23","28683642","0","","","","","2015-02-23 14:34:37",""
"2696139","BAD_UID error while exporting key in CryptoAPI","I am writing a test application for Microsoft CryptoAPI. I want to export the secret key of one party using the public key of the second party, and then import that secret key as the second party's secret key (this sets up a shared secret key for communication). Here is my code:
if(!CryptExportKey(encryptT->hSymKey, decryptT->hPubKey, SIMPLEBLOB, 0, keyExBuf, &bufLen)) {
    FormattedDebugPrint(NULL, GetLastError(), ""could not export secret key"", TRUE);
    return -1;
}
if(!CryptImportKey(decryptT->hCryptProv, keyExBuf, bufLen, decryptT->hPubKey, 0, &(decryptT->hSymKey))) {
    FormattedDebugPrint(NULL, GetLastError(), ""could not import secret key"", TRUE);
    return -1;
}

And this gives the error:
80090001: Bad UID.

The public keypair is being generated for both encryptT and decryptT (sender, receiver) by calling:
CryptGenKey(encryptT->hCryptProv, CALG_RSA_KEYX, CRYPT_EXPORTABLE, &(encryptT->hPubKey))

Any idea what could be causing the error?
Thanks,
","Never mind, I figured it out. Basically, you can't just use another public key directly even if it's initialized the same way -- I needed to first export that public key, and then import it using the handle to the cryptographic provider of the other party.
","302","<encryption><cryptoapi><encryption-symmetric><public-key-encryption><secret-key>","0","0","1","2010-04-23 18:57:31","2701229","2","","","","","2010-04-23 04:06:57",""
"42522434","C# implementation for identity based encryption(IBE)","I am a student and I want to implement Identity based encryption by using c#.
Example: I want to encrypt a message by using receivers email address(Public Key) and sender will send this message to receiver. Once receiver receives this encrypted message, he will decry-pt this message by using his private key.
This looks okay theoretically, but I am struggling to do this practically.
I don't know 

how to encrypt a message by using receivers email address 
how receiver will decry-pt encrypted message? 
how receiver will get his private key?

I am expecting help from this platform, as I already spent a lot of time on searching this.
What I have tried:
I tried encryption and decryption by using RSA algorithm, but the problem here is RSA generates his own public and private key pair. And I can not use receivers email address as a public key to encrypt message.
Thank you in advance.
Ashok
","You can generate secure symmetric keys from an email address, any string for that matter, with a key derivation function such as PBKDF2 (aka Rfc2898DeriveBytes).
RSA is asymmetric encryption with separate keys for encryption and decryption, symmetric encryption such as AES uses one key for both encryption and decryption.
Asymmetric encryption  such as RSA has the advantage of two keys where the encryption key can be publicly known. But it is very slow and the data size, the keys are large (2048-bits is a currently secure size) and the data length is limited to the key size, it is generally used to encrypt symmetric keys. There is no control over symmetric key pair creation other than length.  Use asymmetric encryption only when a public/private key pair must be used.
Asymmetric encryption such as AES is fast, has smaller keys with 128-bits common and secure and can handle data of essentially any length.
","301","<c#-4.0><rsa><public-key-encryption><des><encryption-asymmetric>","0","1","1","2017-03-01 13:00:12","","3","","","","","2017-03-01 03:04:29",""
"21770539","determine if the bits are encrypted?","let's assume that I am listening a network , and I acquired some bits, but I want to know if there is a way to determine bits are encrypted ? what method or algorithm exists ? I mean if the bits are meaningless, it means encrypted but is there are more technical approach or algorithm to determine from bits 
let's say I have 0101010100001011001001100001001, how would you tell that if this is encrypted ?
","Generally speaking, you can't. Encrypted data is, in almost all cases, indistinguishable from random or heavily compressed data.
In some situations, there may be circumstantial evidence to suggest that the data you're seeing is encrypted. For instance, it may contain headers characteristic of TLS or SSH, or it may be transmitted on a port that is typically used for encrypted data (e.g, 443 for HTTPS). However, this is all a matter of guesswork — if you don't recognize the data, it could be anything.
","301","<security><encryption><network-programming><public-key-encryption><password-encryption>","0","1","3","2014-02-19 16:16:41","","0","","","","","2014-02-14 03:55:46",""
"21770539","determine if the bits are encrypted?","let's assume that I am listening a network , and I acquired some bits, but I want to know if there is a way to determine bits are encrypted ? what method or algorithm exists ? I mean if the bits are meaningless, it means encrypted but is there are more technical approach or algorithm to determine from bits 
let's say I have 0101010100001011001001100001001, how would you tell that if this is encrypted ?
","You can't.
Consider this simple example (python):
def xor(s1, s2): return ''.join(chr(ord(a) ^ ord(b)) for a,b in zip(s1, s2))

key = '\x07\x07\x04\x16\x00\x1b\x12N\x17\x1a\x0eHO\x14T\x03\x10\x17R\n\x16V\x04\n\x06\x00\r\x1e'
message = 'this is such a secret message'

ciphertext = xor(message, key)

This is a simple xor-cipher, which can be used e.g. in one-time-pads. Nothing wrong with it obviously, but if you print the ciphertext you get: 'some random output obviously'.
The secret message is properly encrypted, but the output is something that does not look encrypted at all.
I've chosen the key by xoring message and the example output ;-) but a key like this is basically random and can be the result of any random number generator.
You can never tell if data is encrypted, encoded, compressed, masked, or whatever just by looking on the bits, because these bits can look like something unencrypted even if they are. This is also the reason why a OTP can't be bruteforced because you can never tell if the bruteforced plaintext is the correct plaintext: http://en.wikipedia.org/wiki/One-time_pad#Attempt_at_cryptanalysis
Try it yourself:
Python 2.7.5 (default, Aug 25 2013, 00:04:04)
[GCC 4.2.1 Compatible Apple LLVM 5.0 (clang-500.0.68)] on darwin
Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.
>>> def xor(s1, s2): return ''.join(chr(ord(a) ^ ord(b)) for a,b in zip(s1, s2))
...
>>> key = '\x07\x07\x04\x16\x00\x1b\x12N\x17\x1a\x0eHO\x14T\x03\x10\x17R\n\x16V\x04\n\x06\x00\r\x1e'
>>> message = 'this is such a secret message'
>>> ciphertext = xor(message, key)
>>> print ciphertext
some random output obviously

","301","<security><encryption><network-programming><public-key-encryption><password-encryption>","0","1","3","2014-02-19 16:16:41","","0","","","","","2014-02-14 03:55:46",""
"21770539","determine if the bits are encrypted?","let's assume that I am listening a network , and I acquired some bits, but I want to know if there is a way to determine bits are encrypted ? what method or algorithm exists ? I mean if the bits are meaningless, it means encrypted but is there are more technical approach or algorithm to determine from bits 
let's say I have 0101010100001011001001100001001, how would you tell that if this is encrypted ?
","It is not possible to prove that data is encrypted or not, but you can analyze the frequency of data values to filter out packets that are likely to be encrypted. 
Properly-encrypted data is nearly indistinguishable from random noise. So if you are looking for encrypted data, you should see a fairly even representation of characters. There is a great tool called pcaphistogram.pl for analyzing packets this way. You can get it here: http://www.willhackforsushi.com/code/pcaphistogram.pl.txt
Here is a sample histogram of properly-encrypted data:

Below is a sample histogram of plain-text data. Notice how the values bunch up in the printable region. If you compare this to an ASCII table, you will see lots of lower-case letters(61-7a), a few upper-case(41-5a), spaces (20) and the carriage-return (0a):

Below is a sample histogram for text data that was encrypted with an XOR. The XOR shifted all of the characters, but the basic shape is the same as the unencrypted set.

Note that you need a reasonably large data sample in order to use this technique.
Images courtesy of http://www.packetstan.com/2010/11/packet-payloads-encryption-and-bacon.html
","301","<security><encryption><network-programming><public-key-encryption><password-encryption>","0","1","3","2014-02-19 16:16:41","","0","","","","","2014-02-14 03:55:46",""
"17053432","How to use public-key encryption in Py4A scripts?","I'm developing an Py4a (Python in SL4a) application running on an Android phone.
The application collects some sensitive data, and then sends it via e-mail, using the smtplib module.
To assure necessary protection, I need to encrypt that information.
As phone is considered to be unsafe device, I have to use the public-key encryption, and only recipient's public key should be stored in the phone.
The standard Py4a distribution contains two packages supporting public key cryptography:
the ssl and gdata.
Unfortunately none of them provides a ready to use function, allowing me to encrypt longer information with the private key.
Well, I know that in fact I should generate a random temporary symmetric key, encrypt my information with that key, and finally encrypt only this key with the recipient's public key. However there are some details which must be considered to obtain secure solution...
So here my question comes. Is there any simple encryption library, well suited to Py4a (ie. based on the cryptographic libraries already available in Py4a - like ssl and gdata.Crypto) providing easy to use public key encryption?
Update 2013.06.13
I have performed some experiments with the gdata library in Py4a.
Finally I have get the following ""quick&dirty"" solution:
import gdata.tlslite.utils.keyfactory as rk
#Generate the recipient's RSA key
sec=rk.generateRSAKey(1024)
#obtain the publickey, which will be stored
#in the sender mobile phone
pubxml=sec.writeXMLPublicKey()
print pubxml
#Create the public key from XML
pub=rk.parseXMLKey(pubxml)
#
#Now lets simulate the sender
#It has only access to ""pub"" 
#
import gdata.tlslite.utils.PyCrypto_AES as sk
import gdata.tlslite.utils.cipherfactory as cf
#Generate random key and initioalization vectors
key=sk.getRandomBytes(32)
iv=sk.getRandomBytes(16)

#Here we should check if the key and iv are reasonable
#Now we accept them as they are

#Text to encrypt
txt1=""Strictly secret unknown text!""
#Pad the text to the length N*16
padlen=16-(len(txt1) % 16)
if padlen:
   txt1=txt1.ljust(len(txt1)+padlen, "" "")
#Create the AES key
ak=cf.createAES(key.tostring(),iv.tostring())
#Encrypt text
ctxt1=ak.encrypt(txt1)
#Encrypt key and initialization vector with recipients publickey
ckey1=pub.encrypt(key+iv)
#
# Now we simulate the recipient
# It has its secret key 'sec', and received encrypted key
# and iv from the sender in ckey1. It also receives ctxt1
#
pkey1=sec.decrypt(ckey1)
pkey=pkey1[0:32]
piv=pkey1[32:48]
# Now we decipher the text
pak=cf.createAES(pkey.tostring(),piv.tostring())
ptxt1=pak.decrypt(ctxt1)
# Print the deciphered text
print ptxt1

Probably this solution is far from being optimal, but it at least works.
","Because the phone is an unsecure device, you cannot trust anything that is computed on the phone. If you want something done securely, do it on your server. 
As for your question, this is just how public cryptography (at least RSA) works: you cannot encrypt any data that is longer than the key. The reason there are not libraries for this is that it is impossible. If you need secure email use S/MIME or GPG and don't try to reinvent the wheel. Also note that since the key needs to be in the app, anyone can extract it and decrypt your data. If you just want to send data securely, a better approach might be so send the data over HTTPS. Then you don't need to manage client keys and your data will be protected in transit.
","301","<android><encryption><public-key-encryption><sl4a>","1","0","1","2013-06-13 21:17:28","","1","","1735409","","2013-06-13 21:17:28","2013-06-11 20:42:31",""
"16134068","Bash shell scripting for answering the questions of SSH key generation","I want to answer the question of  that appear in the bash shell 
Ex: 
at the script 
#!/bin/bash
ssh-keygen -t rsa

#it will appear a question >> Enter file in which to save the key 
# (/root/.shh/id_rsa) so how  can i read answer from the user(which is the path)
# and **enter it to be the answer of the question.

","Try doing this (no need to use STDIN):
rm -f ~/.ssh/id_rsa*
ssh-keygen -q -t rsa -P MyOwnPassPhrase -f ~/.ssh/id_rsa

Have you ever read 
man ssh-keygen 

? =)
","301","<shell><scripting><public-key-encryption><ssh-keys><openssh>","-1","0","1","2013-04-21 18:18:00","","0","","465183","","2013-04-21 18:05:37","2013-04-21 17:29:09",""
"38236985","Server refused our key, set authorized_keys perrmissions to 777","I was copying some files from my home directory on my ec2 instance, and in a fit of laziness, I ran the command sudo chmod 777 /home/ec2-user/*.  I guess this made my .ssh folder and possibly the authorized_keys have 777 privileges as well.  Well it turns out that if authorized_keys is set to 777, you cannot SSH into the box with those keys (since another user could have updated it).  
My question is, how can I fix this and log into my box again?  This is an ec2 instance, so I have to ssh in.  
","To Change permissions you'll need to access the files that are inside the Instance.
Since you can't ssh in the Instance you'll need to do the following things:

Schedule a downtime for your application, because you'll need to stop the instance.
Back-up everything inside the Instance Store(ephemeral volumes).
Stop the instance.
Detach the Volume from the EC2 instance in question.
Attach the Volume to another working EC2 instance.
Make the chmod changes to your .ssh directory and it's files.
Detach the volume.
Attach to the EC2 instance in question.
Start the EC2 Instance.
Try Connecting to the EC2 instance.

Please note that if you don't have Elastic IP configured for the Instance, the IP address will change.
For more information about attaching volume to EC2 instance refer to this AWS Documentation.
","301","<amazon-web-services><ssh><amazon-ec2><public-key-encryption>","0","4","2","2016-07-07 16:47:08","38239672","0","","","","","2016-07-07 03:06:58",""
"38236985","Server refused our key, set authorized_keys perrmissions to 777","I was copying some files from my home directory on my ec2 instance, and in a fit of laziness, I ran the command sudo chmod 777 /home/ec2-user/*.  I guess this made my .ssh folder and possibly the authorized_keys have 777 privileges as well.  Well it turns out that if authorized_keys is set to 777, you cannot SSH into the box with those keys (since another user could have updated it).  
My question is, how can I fix this and log into my box again?  This is an ec2 instance, so I have to ssh in.  
","To keep the downtime minimum, take the image of instance (in no-reboot mode) and create a new machine with this image and the key that you had previously specified.
AWS, while creating the new box, puts the keys with proper permissions.
Note that private and public IPs will change, use elastic IP if you don't want IP change then use elastic IP.
","301","<amazon-web-services><ssh><amazon-ec2><public-key-encryption>","0","1","2","2016-07-07 16:47:08","38239672","0","","","","","2016-07-07 03:06:58",""
"19999947","blowfish encryption with iaik pkcs7 EnvelopedData","I am migrating my module from bouncy castle to iaik pkcs7. I need to use blowfish,twofish and idea encryption algorithms in conjunction with iaik.pkcs.pkcs7.EnvelopedDataStream of IAIK library. Idea encryption algorithm Id is present in AlgorithmID class of IAIK but cant be implemented directly(probably because of variable key length). Blowfish is present as separate cipher class but I could not figure out a way to use it along with enveloped data(which is important because I will be using public key encryption method). I can actually encrypt using blowfish,then wrap using enveloped data and some algorithm such as aes and send this but the receiver won't have the algorithm info in that case. Secret key can be passed along with recepientInfo.
If anyone can possible show me the way een basic I may be able to proceed.
Thanks in advance
Atraya
","Hi I came up with the solution 
ByteArrayInputStream is = new ByteArrayInputStream(message);
  AlgorithmID blowfish=new AlgorithmID(""1.3.6.1.4.1.3029.1.2"",""BLOWFISH_CBC"",""Blowfish/CBC/PKCS5Padding"");
  byte[] iv = new byte[8];
    random.nextBytes(iv);
  try{
        KeyGenerator keyGen = KeyGenerator.getInstance(""Blowfish"", ""IAIK"");
        secretKey = keyGen.generateKey();

        AlgorithmParameterSpec params = new IvParameterSpec(iv);

        keyGen.init(128);

        secretKey = keyGen.generateKey();
        iaik.pkcs.pkcs7.EncryptedContentInfoStream eci = new iaik.pkcs.pkcs7.EncryptedContentInfoStream(ObjectID.pkcs7_data, is);
        eci.setupCipher(blowfish, secretKey, params);
        return eci;
  }catch(Exception e){

  }

Tell me if this way is wrong or can be improved or there is another way of doing this.
thanks
","300","<java><public-key-encryption><blowfish><pkcs#7><iaik-jce>","0","0","1","2013-11-19 06:52:03","","0","4","","","","2013-11-15 11:22:50",""
"16529265","FFs Github: Permission denied (publickey) fatal: The remote end hung up unexpectedly","I'm using VM virtual machine as my Rails working environment. And now I'm trying to upload my project to GitHub. When I run command git push -u origin master or git push origin master there is an error message like: 
Permission denied (publickey).
fatal: The remote end hung up unexpectedly

However, I Googled this error and followed the ssh guide I found, it looks like I have pasted the ssh key correctly by running the checking command :ssh-add -l and it gives me:
 2048 d4:05:6d:03:cb:f3:b1:9c:63:7f:74:ce:09:26:be:a2 /home/bruce/.ssh/id_rsa (RSA)
What happened? I don't quite understand. Did I miss something or make a mistake? Somebody help please. Thanks a lot. 
","","299","<git><github><public-key-encryption>","0","","0","2013-05-15 10:09:38","","7","","109678","","2013-05-15 10:09:38","2013-05-13 19:01:38",""
"48750107","RSA 512 bit implementation in android with NO PADDING","My question is that on how to use RSA 512 bit in Android; I was able to generate the public and private keys by looking up on the internet but not sure if its with NO padding as I could not find any solution for it.The public key would be sent to the server also with the integer encrypted with the private key.
I am new to it so it would be great to have some help. Thanks!
genreateKeys(""RSA"",512)
The following code:
    private static void generateKeys(String keyAlgorithm, int numBits) {

    try {
        // Get the public/private key pair
        KeyPairGenerator keyGen = KeyPairGenerator.getInstance(keyAlgorithm);
        keyGen.initialize(numBits);
        KeyPair keyPair = keyGen.genKeyPair();
        PrivateKey privateKey = keyPair.getPrivate();
        PublicKey publicKey = keyPair.getPublic();

        System.out.println(""\n"" + ""Generating key/value pair using "" + privateKey.getAlgorithm() + "" algorithm"");

        // Get the bytes of the public and private keys
        byte[] privateKeyBytes = privateKey.getEncoded();
        byte[] publicKeyBytes = publicKey.getEncoded();

        // Get the formats of the encoded bytes
        String formatPrivate = privateKey.getFormat(); // PKCS#8
        String formatPublic = publicKey.getFormat(); // X.509

        System.out.println(""Private Key : "" + HttpRequest.Base64.encode(String.valueOf(privateKeyBytes)));
        System.out.println(""Public Key : "" + HttpRequest.Base64.encode(String.valueOf(publicKeyBytes)));

        // The bytes can be converted back to public and private key objects
        KeyFactory keyFactory = KeyFactory.getInstance(keyAlgorithm);
        EncodedKeySpec privateKeySpec = new PKCS8EncodedKeySpec(privateKeyBytes);
        PrivateKey privateKey2 = keyFactory.generatePrivate(privateKeySpec);

        EncodedKeySpec publicKeySpec = new X509EncodedKeySpec(publicKeyBytes);
        PublicKey publicKey2 = keyFactory.generatePublic(publicKeySpec);

        // The original and new keys are the same
        System.out.println(""  Are both private keys equal? "" + privateKey.equals(privateKey2));
        System.out.println(""  Are both public keys equal? "" + publicKey.equals(publicKey2));
    } catch (InvalidKeySpecException specException) {
        System.out.println(""Exception"");
        System.out.println(""Invalid Key Spec Exception"");
    } catch (NoSuchAlgorithmException e) {
        System.out.println(""Exception"");
        System.out.println(""No such algorithm: "" + keyAlgorithm);
    }

}

It gives me the output of public and private keys but its not with NO PADDING also how can I use the private key to encrypt my integer value?
","","298","<java><android><rsa><public-key-encryption><private-key>","0","","0","2018-12-28 14:33:30","","8","","","","","2018-02-12 15:39:35",""
"36684414","C# RSA encrypt then decrypt fails(error:0407A079:rsa routines:RSA_padding_check_PKCS1_OAEP:oaep decoding error)","using Org.BouncyCastle.Crypto;
using Org.BouncyCastle.Crypto.Encodings;
using Org.BouncyCastle.Crypto.Engines;
using Org.BouncyCastle.OpenSsl;


    public string RsaEncryptWithPublic(string clearText)
    {
        var bytesToEncrypt = Encoding.UTF8.GetBytes(clearText);

        var encryptEngine = new Pkcs1Encoding(new RsaEngine());

        using (var txtreader = new StringReader(publickey))
        {
            var keyParameter = (AsymmetricKeyParameter)new PemReader(txtreader).ReadObject();

            encryptEngine.Init(true, keyParameter);
        }

        var encrypted = Convert.ToBase64String(encryptEngine.ProcessBlock(bytesToEncrypt, 0, bytesToEncrypt.Length));
        Console.WriteLine(encrypted);
        return encrypted;

    }

And my public key look like this:
public string publickey = @""-----BEGIN PUBLIC KEY-----
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx

-----END PUBLIC KEY-----
"";

Error when Server side decrypt (error:0407A079:rsa routines:RSA_padding_check_PKCS1_OAEP:oaep decoding error).
can i edit my code to accommodate server side?
can i encrypt using RSA_padding_check_PKCS1_OAEP:oaep decoding mathod?
","public static string Encrypt(string data)
      {
          string _publicKey = @""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
                                xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
                                xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
                                xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
                                xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
                                xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
                                xxxxxxxx"";
          RSACryptoServiceProvider rsa = DecodeX509PublicKey(Convert.FromBase64String(_publicKey));
          return (Convert.ToBase64String(rsa.Encrypt(Encoding.ASCII.GetBytes(data), true)));
      }

private static  bool CompareBytearrays(byte[] a, byte[] b)
      {
          if (a.Length != b.Length)
              return false;
          int i = 0;
          foreach (byte c in a)
          {
              if (c != b[i])
                  return false;
              i++;
          }
          return true;
      }

public static  RSACryptoServiceProvider DecodeX509PublicKey(byte[] x509key)
      {
          // encoded OID sequence for  PKCS #1 rsaEncryption szOID_RSA_RSA = ""1.2.840.113549.1.1.1""
          byte[] SeqOID = { 0x30, 0x0D, 0x06, 0x09, 0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01, 0x01, 0x01, 0x05, 0x00 };
          byte[] seq = new byte[15];
          // ---------  Set up stream to read the asn.1 encoded SubjectPublicKeyInfo blob  ------
          MemoryStream mem = new MemoryStream(x509key);
          BinaryReader binr = new BinaryReader(mem);    //wrap Memory Stream with BinaryReader for easy reading
          byte bt = 0;
          ushort twobytes = 0;

          try
          {

              twobytes = binr.ReadUInt16();
              if (twobytes == 0x8130) //data read as little endian order (actual data order for Sequence is 30 81)
                  binr.ReadByte();    //advance 1 byte
              else if (twobytes == 0x8230)
                  binr.ReadInt16();   //advance 2 bytes
              else
                  return null;

              seq = binr.ReadBytes(15);       //read the Sequence OID
              if (!CompareBytearrays(seq, SeqOID))    //make sure Sequence for OID is correct
                  return null;

              twobytes = binr.ReadUInt16();
              if (twobytes == 0x8103) //data read as little endian order (actual data order for Bit String is 03 81)
                  binr.ReadByte();    //advance 1 byte
              else if (twobytes == 0x8203)
                  binr.ReadInt16();   //advance 2 bytes
              else
                  return null;

              bt = binr.ReadByte();
              if (bt != 0x00)     //expect null byte next
                  return null;

              twobytes = binr.ReadUInt16();
              if (twobytes == 0x8130) //data read as little endian order (actual data order for Sequence is 30 81)
                  binr.ReadByte();    //advance 1 byte
              else if (twobytes == 0x8230)
                  binr.ReadInt16();   //advance 2 bytes
              else
                  return null;

              twobytes = binr.ReadUInt16();
              byte lowbyte = 0x00;
              byte highbyte = 0x00;

              if (twobytes == 0x8102) //data read as little endian order (actual data order for Integer is 02 81)
                  lowbyte = binr.ReadByte();  // read next bytes which is bytes in modulus
              else if (twobytes == 0x8202)
              {
                  highbyte = binr.ReadByte(); //advance 2 bytes
                  lowbyte = binr.ReadByte();
              }
              else
                  return null;
              byte[] modint = { lowbyte, highbyte, 0x00, 0x00 };   //reverse byte order since asn.1 key uses big endian order
              int modsize = BitConverter.ToInt32(modint, 0);

              byte firstbyte = binr.ReadByte();
              binr.BaseStream.Seek(-1, SeekOrigin.Current);

              if (firstbyte == 0x00)
              {   //if first byte (highest order) of modulus is zero, don't include it
                  binr.ReadByte();    //skip this null byte
                  modsize -= 1;   //reduce modulus buffer size by 1
              }

              byte[] modulus = binr.ReadBytes(modsize);   //read the modulus bytes

              if (binr.ReadByte() != 0x02)            //expect an Integer for the exponent data
                  return null;
              int expbytes = (int)binr.ReadByte();        // should only need one byte for actual exponent data (for all useful values)
              byte[] exponent = binr.ReadBytes(expbytes);

              // ------- create RSACryptoServiceProvider instance and initialize with public key -----
              RSACryptoServiceProvider RSA = new RSACryptoServiceProvider();
              RSAParameters RSAKeyInfo = new RSAParameters();
              RSAKeyInfo.Modulus = modulus;
              RSAKeyInfo.Exponent = exponent;
              RSA.ImportParameters(RSAKeyInfo);
              return RSA;
          }
          catch (Exception)
          {
              return null;
          }

          finally { binr.Close(); }

      }

","297","<c#><.net><encryption><rsa><public-key-encryption>","0","0","1","2016-04-19 01:48:43","36707102","2","","4443779","","2016-04-18 02:35:54","2016-04-18 02:08:31",""
"45446369","What is the algorithm of PGP to encrypt messages?","
Is there any documentation that explains what are the mathematical algorithms used in PGP to encrypt a message (key generation, converting a message into a number, signature...) ?

For example, suppose that I have a friend who is using a third-party software to encrypt and decrypt messages with PGP, and I want to send him a message, e.g. ""Hello my friend!"", and I want to encrypt the message myself without using a third-party software. How do I generate my pair of keys, and how do I calculate the signed-encrypted message ?
I aware about asymetric encryption, DSA, RSA, SHA-1, etc... but I can't find any documentation about PGP algorithm.
","PGP and some other derivated software initially used a closed file format. This was a problem, so P. Zimmermann (that wrote and first published the software named PGP in year 1991) wrote a RFC (with co-authors W. Stallings and D. Atkins), titled PGP Message Exchange Formats published in year 1996 by the IETF: this RFC number is ... 1991 (easy to remember: PGP first published in 1991, RFC number 1991, repeat after me, ...).
Note that this RFC is not a standard: it is only an informational document. Nobody should claim conformance to it. It has been published only because, as stated by Postel, Huitema, and Crocker in RFC-1796: Rather Document Than Ignore.
This RFC has been obsoleted by RFC-2440, titled OpenPGP Message Format, and this one is a standard. The latter has been obsoleted by RFC-4880, with same title and same category (standards track). And finally, RFC-5581 added some minor updates to RFC-4880. These specifications explain which algorithms are used and how to use them to format messages.
There are many implementations of this format and cryptographic operations. You will even find JavaScript implementations. A notable online service that lets your browser use JavaScript to manage Open PGP messages is available here: https://keybase.io This is not an implementation of a protocol: you have to copy/paste the  encoded ciphertext to you mail user agent, for instance, if you want to send OpenPGP messages built with the help of this service.
","297","<public-key-encryption><sign><pgp><encryption-asymmetric>","1","0","1","2017-08-16 23:52:03","","3","","","","","2017-08-01 19:40:17",""
"51286633","Java BC SicBlockCipher direct output equivalent in c#","I am implementing something in C#, for which I have a separate spec and fairly clear understanding of what I need to do, but at the same time as a reference I have a Java implementation and would like to follow the Java implementation in this case as close as I can.
The code involves an encrypted stream and the Java source is here 
The relevant lines are here:
  private final StreamCipher enc;
...
  BlockCipher cipher;
  enc = new SICBlockCipher(cipher = new AESEngine());
  enc.init(true, new ParametersWithIV(new KeyParameter(secrets.aes), new byte[cipher.getBlockSize()]));
...
...
byte[] ptype = RLP.encodeInt((int) frame.type); //Result can be a single byte long
...
...
enc.processBytes(ptype, 0, ptype.length, buff, 0);
out.write(buff, 0, ptype.length); //encrypt and write a single byte from the SICBlockCipher stream

The above Java BouncyCastle SicBlockCipher is a StreamCipher and allows processing a single or small number of bytes less than the Aes block size. 
In c# BouncyCastle the SicBlockCipher only offers ProcessBlock and BufferedBlockCipher does not seem to offer a way of guaranteeing an output using ProcessBytes. 
What do I need to do with C# BouncyCastle library to achieve the equivalent functionality?
","Unfortunately the SicBlockCipher itself is not implemented as a stream cipher, so this functionality is (indeed) not available directly.
BufferedBlockCipher has been created with many different modes of operation in mind. It buffers the input, while for counter (CTR) mode which SicBlockCipher implements, you would need to buffer the encrypted counter blocks instead.
The encrypted counter blocks make up the key stream, which can then be XOR'ed with the plaintext to create the cipherstream (or indeed, with the ciphertext to retrieve the plaintext again, encryption is decryption for counter mode).
The only way I see how to do this is to create your own implementation of IBlockCipher and implement said functionality.

Here is the counter mode as stream cipher...
using Org.BouncyCastle.Crypto;
using Org.BouncyCastle.Crypto.Modes;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace SicStream
{
    public class SicStreamCipher : IStreamCipher
    {
        private SicBlockCipher parent;
        private int blockSize;

        private byte[] zeroBlock;

        private byte[] blockBuffer;
        private int processed;

        public SicStreamCipher(SicBlockCipher parent)
        {
            this.parent = parent;
            this.blockSize = parent.GetBlockSize();

            this.zeroBlock = new byte[blockSize];

            this.blockBuffer = new byte[blockSize];
            // indicates that no bytes are available: lazy generation of counter blocks (they may not be needed)
            this.processed = blockSize;
        }

        public string AlgorithmName
        {
            get
            {
                return parent.AlgorithmName;
            }
        }

        public void Init(bool forEncryption, ICipherParameters parameters)
        {
            parent.Init(forEncryption, parameters);

            Array.Clear(blockBuffer, 0, blockBuffer.Length);
            processed = blockSize;
        }

        public void ProcessBytes(byte[] input, int inOff, int length, byte[] output, int outOff)
        {
            int inputProcessed = 0;
            while (inputProcessed < length)
            {
                // NOTE can be optimized further
                // the number of available bytes can be pre-calculated; too much branching
                if (processed == blockSize)
                {
                    // lazilly create a new block of key stream
                    parent.ProcessBlock(zeroBlock, 0, blockBuffer, 0);
                    processed = 0;
                }

                output[outOff + inputProcessed] = (byte)(input[inOff + inputProcessed] ^ blockBuffer[processed]);

                processed++;
                inputProcessed++;
            }
        }

        public void Reset()
        {
            parent.Reset();

            Array.Clear(blockBuffer, 0, blockBuffer.Length);
            this.processed = blockSize;
        }

        public byte ReturnByte(byte input)
        {
            if (processed == blockSize)
            {
                // lazily create a new block of key stream
                parent.ProcessBlock(zeroBlock, 0, blockBuffer, 0);
                processed = 0;
            }
            return (byte)(input ^ blockBuffer[processed++]);
        }
    }
}

... and here it is wrapped so that it can be retrofitted in code where a block cipher mode of operation is used ...
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Org.BouncyCastle.Crypto;
using Org.BouncyCastle.Crypto.Modes;

namespace SicStream
{
    /**
     * A class that implements an online Sic (segmented integer counter mode, or just counter (CTR) mode for short).
     * This class buffers one encrypted counter (representing the key stream) at a time.
     * The encryption of the counter is only performed when required, so that no key stream blocks are generated while they are not required.
     */
    public class StreamingSicBlockCipher : BufferedCipherBase
    {
        private SicStreamCipher parent;
        private int blockSize;

        public StreamingSicBlockCipher(SicBlockCipher parent)
        {
            this.parent = new SicStreamCipher(parent);
            this.blockSize = parent.GetBlockSize();
        }

        public override string AlgorithmName
        {
            get
            {
                return parent.AlgorithmName;
            }
        }

        public override byte[] DoFinal()
        {
            // returns no bytes at all, as there is no input
            return new byte[0];
        }

        public override byte[] DoFinal(byte[] input, int inOff, int length)
        {
            byte[] result = ProcessBytes(input, inOff, length);

            Reset();

            return result;
        }

        public override int GetBlockSize()
        {
            return blockSize;
        }

        public override int GetOutputSize(int inputLen)
        {
            return inputLen;
        }

        public override int GetUpdateOutputSize(int inputLen)
        {
            return inputLen;
        }

        public override void Init(bool forEncryption, ICipherParameters parameters)
        {
            parent.Init(forEncryption, parameters);
        }

        public override byte[] ProcessByte(byte input)
        {
            return new byte[] { parent.ReturnByte(input) };
        }

        public override byte[] ProcessBytes(byte[] input, int inOff, int length)
        {
            byte[] result = new byte[length];
            parent.ProcessBytes(input, inOff, length, result, 0);
            return result;
        }

        public override void Reset()
        {
            parent.Reset();
        }
    }
}

Note that the last code is less efficient because of the additional arrays that need to be created.
","295","<java><c#><aes><bouncycastle><public-key-encryption>","1","1","2","2018-07-23 19:41:48","51287061","0","1","589259","","2018-07-11 14:33:09","2018-07-11 13:24:12",""
"51286633","Java BC SicBlockCipher direct output equivalent in c#","I am implementing something in C#, for which I have a separate spec and fairly clear understanding of what I need to do, but at the same time as a reference I have a Java implementation and would like to follow the Java implementation in this case as close as I can.
The code involves an encrypted stream and the Java source is here 
The relevant lines are here:
  private final StreamCipher enc;
...
  BlockCipher cipher;
  enc = new SICBlockCipher(cipher = new AESEngine());
  enc.init(true, new ParametersWithIV(new KeyParameter(secrets.aes), new byte[cipher.getBlockSize()]));
...
...
byte[] ptype = RLP.encodeInt((int) frame.type); //Result can be a single byte long
...
...
enc.processBytes(ptype, 0, ptype.length, buff, 0);
out.write(buff, 0, ptype.length); //encrypt and write a single byte from the SICBlockCipher stream

The above Java BouncyCastle SicBlockCipher is a StreamCipher and allows processing a single or small number of bytes less than the Aes block size. 
In c# BouncyCastle the SicBlockCipher only offers ProcessBlock and BufferedBlockCipher does not seem to offer a way of guaranteeing an output using ProcessBytes. 
What do I need to do with C# BouncyCastle library to achieve the equivalent functionality?
","Having had something of an epiphany about streaming and block ciphers based on Maarten Bodewes helpful and informative answers (many thanks!) I also came up with the below approach.
The .NET BC library has a StreamBlockCipher class, as in Java, but has a guard in its ctor or initializer that the underlying cipher should have a block size of 1.
To use the StreamBlockCipher then, I created a subclass of SicBlockCipher that buffers the block of keystream internally. I named it StreamableSicBlockCipher. It is not yet tested but if there are issues, it at least points the direction to another way.
 public class StreamableSicBlockCipher : SicBlockCipher
{
    private int blockSize;
    private int position = 0;
    private byte[] zeroBlock;
    private byte[] keyStreamBlock;

    public StreamableSicBlockCipher(IBlockCipher cipher) : base(cipher)
    {
        blockSize=cipher.GetBlockSize();
        zeroBlock = new byte[blockSize];
        keyStreamBlock = new byte[blockSize];
    }



    public override int GetBlockSize()
    {
        return 1;
    }

    public override int ProcessBlock(byte[] input, int inOff, byte[] output, int outOff)
    {
        int keyStreamBlockOffset = position % blockSize;

        if (0==keyStreamBlockOffset)
        {

            var cipher = GetUnderlyingCipher();
            cipher.ProcessBlock(zeroBlock, 0, keyStreamBlock, 0);

            // Increment the counter
            int j = zeroBlock.Length;
            while (--j >= 0 && ++zeroBlock[j] == 0)
            {
            }
        }

        output[outOff] = (byte)(input[inOff] ^ keyStreamBlock[keyStreamBlockOffset]);

        position++;

        return 1;

    }
    public override void Reset()
    {
        base.Reset();
        this.position = 0;

    }

It can then be called using the appropriate wrappers as follows:
StreamBlockCipher EncCipher = new StreamBlockCipher(new StreamableSicBlockCipher(new AesEngine()));

Initialisation can be done using an instance of IBlockCipher the get the block size. Example below inits with empty IV, using 'Cipher' which is an instance of AESEngine.:
 EncCipher.Init(true, new ParametersWithIV(new KeyParameter(cryptoSecret), new byte[Cipher.GetBlockSize()]));

","295","<java><c#><aes><bouncycastle><public-key-encryption>","1","1","2","2018-07-23 19:41:48","51287061","0","1","589259","","2018-07-11 14:33:09","2018-07-11 13:24:12",""
"48247144","Self Signed Certificate for localhost","My Machine localhost image
I have created a self signed apache certificate for my localhost but I'm getting red https ( Not Secure connection ).
How would I turn it into green https.
","You are using a self-signed certificate, then the browser by default will not accept as a valid one, because the certificate isn't trusted by an certificate authority;
Moreover, you can deploy one free from Let's Encrypt, e.g;
Here is a link from Certbot - It is an easy way to deploy on your server.
","294","<ssl-certificate><public-key-encryption><digital-certificate>","0","0","1","2018-01-14 06:25:47","48247195","3","","","","","2018-01-14 06:15:40",""
"55261449","How to generate SSL certificate & public key for encryption?","I am working with some XYZ API provider. 
What they are asking is the following:

Certificate with 4096 bits public key for encryption (.pem or .cer
format)
SSL certificate for sending callback response on call back URL.

I generated the self-signed SSL certificate using OpenSSL & shared with them along with the private key (I know we shouldn't). They asked me to share a valid public key & SSL certificate. 
I even generated a certificate & private key on DigiCert, but couldn't figure out how to generate a public key for SSL Certificate.  
Can anyone kindly suggest how to generate Public key & private key for the SSL Certificate? 
Kindly also suggest if I can use Comodo or DigiCert to generate a public key for the SSL certificate?
","An SSL Certificate is a public key verified and signed by a Certificate Authority. You generate a public/private key pair, then from that generate a Certificate Signing Request (which includes the public key), which you send to the CA. It then signs that public key included in the CSR producing the certificate which is sends back to you. See also here.
It sounds like you already have this though, so you'd need to clarify what you're trying to achieve. It sounds like it may be a client authentication / mutual authentication scenario? If so, it depends on what the service provider requires - certificates for client authentication may need to be signed either by a public authority that the server trusts, or by the server itself.
","293","<ssl><ssl-certificate><public-key-encryption><private-key><public-key>","0","2","1","2019-03-21 21:52:34","55289811","2","","","","","2019-03-20 13:05:40",""
"33397436","DSA public key bigger than private key","If I generate a private and public key for DSA using Crypto++:
CryptoPP::AutoSeededRandomPool rng;

CryptoPP::DSA::PrivateKey privateKey;

privateKey.GenerateRandomWithKeySize(rng, 2048);

CryptoPP::DSA::PublicKey publicKey;

privateKey.MakePublicKey(publicKey);

When I encode the private key like so:
CryptoPP::ByteQueue privateKeyQueue;
key.DEREncodePrivateKey(privateKeyQueue);

Then the information pushed to the queue for the private key is smaller than the encoded data for the public key:
CryptoPP::ByteQueue publicKeyQueue;
key.DEREncodePublicKey(publicKeyQueue);

Is this expected and is this the right way to generate my public key that will be shared with others?
I've only every worked with RSA before and the public key is much smaller than the private key.
","So... treading lightly because modulo arithmetic is not my strong point...
Source of my information is here:
https://en.wikipedia.org/wiki/Digital_Signature_Algorithm

Choose an approved cryptographic hash function H. In the original DSS, H was always SHA-1, but the stronger SHA-2 hash functions are approved for use in the current DSS.[5][9] The hash output may be truncated to the size of a key pair.
Decide on a key length L and N. This is the primary measure of the cryptographic strength of the key. The original DSS constrained L to be a multiple of 64 between 512 and 1024 (inclusive). NIST 800-57 recommends lengths of 2048 (or 3072) for keys with security lifetimes extending beyond 2010 (or 2030), using correspondingly longer N.[10] FIPS 186-3 specifies L and N length pairs of (1024,160), (2048,224), (2048,256), and (3072,256).
Choose an N-bit prime q. N must be less than or equal to the hash output length.

(so q is N bits long - say 256 for a 3072-bit key)

Choose an L-bit prime modulus p such that p–1 is a multiple of q.
  Choose g, a number whose multiplicative order modulo p is q. This may be done by setting g = h(p–1)/q mod p for some arbitrary h (1 < h < p−1), and trying again with a different h if the result comes out as 1. Most choices of h will lead to a usable g; commonly h=2 is used.

(so p would be 3072 bits long)
The algorithm parameters (p, q, g) may be shared between different users of the system.

Per-user keys
Given a set of parameters, the second phase computes private and public keys for a single user:
Choose x by some random method, where 0 < x < q.
  Calculate y = gx mod p.
Public key is (p, q, g, y). 

public key has a p in it - so it must be at least 3072 bits long

Private key is x.

since x depends on q, it will have (in our case) 256 bits - this is the private key length.
Does that seem reasonable?
","292","<c++><public-key-encryption><crypto++><dsa>","0","1","1","2015-11-03 18:33:43","33398949","0","","608639","","2015-11-03 18:33:43","2015-10-28 17:16:25",""
"8325621","Replacement for M2Crypto import BIO, RSA, EVP","I'm using google app engine and have to use the packages BIO, RSA and EVP, but as I have read, M2Crypto is not supported in app engine.
Any workaround for this ?
","","291","<python><google-app-engine><public-key-encryption>","3","","0","2011-11-30 12:00:54","","0","","","","","2011-11-30 12:00:54",""
"36122964","Are there missing padding options from PHP?","I'm trying to get my front end and backend communicating with private key pairs, using JS on the front end with https://github.com/vibornoff/asmcrypto.js, and PHP on the backend with php's openssl library.
asmcrypto has some functions to encrypt like: asmCrypto.RSA_OAEP_SHA1.encrypt(). It also has asmCrypto.RSA_OAEP_SHA256.encrypt() which I assume is more secure, but PHP only wants to decrypt with the option OPENSSL_PKCS1_OAEP_PADDING, which only works for SHA1, and not SHA256.
Also, it seems that openssl_public_decrypt() and openssl_private_encrypt() are missing the OPENSSL_PKCS1_OAEP_PADDING, and won't work with that option at all, only OPENSSL_PKCS1_PADDING and OPENSSL_NO_PADDING, which I understand are both very insecure.
OpenSSL is kind of the standard tool for a lot of encryption systems, so I can't imaging they are missing from that toolkit. Is it just not implemented in PHP? Is there another library that has these available, without having to use a PHP library that does all the calculation?
","","290","<php><openssl><rsa><public-key-encryption>","0","","0","2016-03-21 04:51:53","","3","","3711988","","2016-03-21 04:51:53","2016-03-21 04:06:16",""
"39587504","JWT Public Keys and Private Keys Invalid","I am trying to use JWT.io (https://jwt.io/#libraries) to create a JWT token.  However, when I add either my public key or private key for the signature portion, it keeps saying it is invalid.
I created the private and public key with the following respectively:
Generating a Private Key
 openssl genrsa -aes256 -out private_key.em 2048
Generating a Public Key
 openssl rsa -pubout -in private_key.pem -out public_key.em
Then all I do is copy-paste them into jwt.io.
All my other data is fine, it is just the public key and private key.  
","JWT.io needs to use your private key to generated the signature for the JWT. However, your private key is encrypted with a password that JWT.io does not have because you used the -aes256 flag with the openssl genrsa command. You should generate an unencrypted private key with the following command:
openssl genrsa -out private_key.em 2048

and paste that in to the JWT.io private key entry alongside of the public key.
","288","<oauth-2.0><jwt><public-key-encryption><private-key><public-key>","1","0","1","2016-09-20 07:43:39","","0","","","","","2016-09-20 06:53:31",""
"30447516","How to add padding to Rabin Encryption in .NET?","I'm trying to implement the Rabin Cryptosystem in C# but I'm stuck in the part where I have to add a padding to my message in order to have a secure Cryptosystem with OAEP or PKCS#1. Which are the implementation steps? I'm using the Bouncy Castle's Library.
// Encrypt data using public key
public byte[] PublicEncryption(byte[] data)
{
    // Converting the byte array data into a BigInteger instance
       BigInteger bnData = new BigInteger(data);

    // (bnData ^ Exponent) % Modulus - This Encrypt the data using the public Exponent
       BigInteger encData = bnData.ModPow(new BigInteger(""2""), _n);
       return GetBytes(encData.ToString());
}


Example (Rabin public-key encryption with artificially small
  parameters) Key generation. Entity A chooses the primes p = 277, q =
  331, and computes n = pq =
  91687. A’s public key is n = 91687, while A’s private key is (p = 277, q = 331). 
Encryption. Suppose that the last six bits of original
  messages are required to be replicated prior to encryption (cf. Note
  8.14(i)). 
  In order to encrypt the 10-bit message m = 1001111001, B replicates the last six bits of m to obtain the 16-bit message m = 1001111001111001, which in 
  decimal notation is m = 40569. B then computes c = m2 mod n = 405692 mod 91687 
  = 62111 and sends this to A.
Decryption. To decrypt c, A uses Algorithm 3.44 and her knowledge of
  the factors of n to compute the four square roots of c mod n: m1 =
  69654, m2 = 22033, m3 = 40569, m4 = 51118, which in binary are m1 =
  10001000000010110, m2 = 101011000010001, m3 = 1001111001111001, m4 =
  1100011110101110. 
  Since only m3 has the required redundancy, A decrypts c to m3 and
  recovers the original message m = 1001111001

","","287","<c#><.net><security><padding><public-key-encryption>","2","","0","2015-05-26 00:15:26","","2","","4938420","","2015-05-26 00:15:26","2015-05-26 00:04:49",""
"39446999","public private key generation in php and storing them in variable","I am quite new to php and public private key..
Can somebody guide me .. how to generate public private key in php and store hem in variables. 
Thanks
Update my code lloks like this.
   $privateKey = openssl_pkey_new(array('private_key_bits' => 2048));
   $details = openssl_pkey_get_public($privateKey);
   $publicKey = $details['key'];

   echo $publicKey;

","You can use openssl_pkey_new() of php to generate private key which is documented in detail here
For public key get the details using $all_values = openssl_pkey_get_details($privateKey); function and get public key out of it like $all_values['key'];
Update:
or there is also another post on stackoverflow stating the same thing:here
","287","<php><public-key-encryption><private-key>","1","1","1","2016-09-12 09:53:14","39447095","1","","6777962","","2016-09-12 09:53:14","2016-09-12 09:18:21",""
"16723725","Generating crx file via PHP fails with: ""Package is invalid: CRX_SIGNATURE_VERIFICATION_INITIALIZATION_FAILED""","I'm generating a crx file in PHP using phpseclib. When I try to install the crx into Chrome, I get the error:
Package is invalid: 'CRX_SIGNATURE_VERIFICATION_INITIALIZATION_FAILED'

Here's my code:
<?php
//Include phpseclib files
include('File/X509.php');
include('Crypt/RSA.php');

//RSA Handler
$rsa = new Crypt_RSA();

//Create key pair
$keyPair = $rsa->createKey();

//Get the keys
$privKey = $keyPair[ ""privatekey"" ];
$pubKey = $keyPair[ ""publickey"" ];

//The Zip file contents
$zipContents = file_get_contents( ""helloworld.zip"" );

//Load the private key into the handler
$rsa->loadKey( $privKey );

//Sign the content (default is SHA1)
$signature = $rsa->sign( $zipContents ) ;

/* Tried this, but it also did not work */
//Convert to openSSH and remove the leading/trailing ""comments"": ""ssh-rsa "", "" phpseclib-generated-key""
//$rsa->loadKey( $pubKey );
//$rsa->setPublicKey(); 
//$pubKey = $rsa->getPublicKey( CRYPT_RSA_PUBLIC_FORMAT_OPENSSH );
//$pubKey = substr( $pubKey, 8, strlen( $pubKey ) - 32 );

//Encode public key in Base64 and remove the ""-----BEGIN PUBLIC KEY-----\r\n"" and ""\r\n-----END PUBLIC KEY-----"" (to put in .crx)
$base64Key = base64_decode( substr( $pubKey, 28, strlen( $pubKey ) - 54 ) );

//Create the crx (wb = write in binary mode)
$crxFile = fopen( ""helloworld.crx"", ""wb"" );

//Add crx ""magic"" marker, format version
fwrite( $crxFile, ""Cr24"" );
fwrite( $crxFile, pack( ""V"", 2 ) );

//Write public key and signature length
fwrite( $crxFile, pack( ""V"", strlen( $base64Key ) ) );
fwrite( $crxFile, pack( ""V"", strlen( $signature ) ) );

//Write public key (base64 encoded) and signature
fwrite( $crxFile, $base64Key );
fwrite( $crxFile, $signature );

//Write the zip file contents
fwrite( $crxFile, $zipContents );

fclose( $crxFile );
?>

What am I doing wrong? I'm guessing it's something to do with the format of the key and the signing?
","I found the answer! The signature was using CRYPT_RSA_SIGNATURE_PSS and apparently only works with PKCS1. So you need to add this line:
$rsa->setSignatureMode( CRYPT_RSA_SIGNATURE_PKCS1 );

before the signature creation code. So the signature code now looks like this:
//Load the private key into the handler
$rsa->loadKey( $privKey );

//Sign the content (default is SHA1)
$rsa->setSignatureMode( CRYPT_RSA_SIGNATURE_PKCS1 ); /* <-- This is required */
$signature = $rsa->sign( $zipContents ) ;

","286","<php><google-chrome><google-chrome-extension><openssl><public-key-encryption>","0","0","1","2013-05-24 06:29:34","16728886","0","1","","","","2013-05-23 20:55:32",""
"1676692","Grant access to SYSTEM account for RSA container on Windows Server 2003","I have a need to access an RSA private key from a Windows service running under the NT AUTHORITY\SYSTEM account.  I'm able to install the private key on the server, and then make use of that key when running as the user that installed the key.  However, the key does not seem to be available from the Windows service.  Do I need a machine-level key here (which I understand increases the risk of compromise), or is there a way I can install a key specifically intended for use by the SYSTEM account?
","You can do start->run->mmc, load the Certificates snap-in and then choose ""Service account"" to manage the certificates for a specific service.  I am not sure if you can do this for the SYSTEM account.  Is this a requirement or are you able to run your service as a custom least privilege account?
","286","<rsa><public-key-encryption>","0","0","1","2012-05-05 00:32:10","","0","","11343","","2012-05-05 00:32:10","2009-11-04 21:17:19",""
"48130985","Client Server Program with Intel SGX","I wanted to design and build a secure remote computation application. I wanted to leverage Intel SGX capabilities and I have thought of 2 approaches but due to lack of development experience, I could not be able to decide which approach I should implement.
Scenario:
Typical client(assumed secure + Non SGX) machine and Server(could be malicious + SGX enabled) system
Approach 1:
Each client(having some data) generates a symmetric key(AES) at client side and encrypt the data locally and sends to the server. The clients secret key is provisioned to the server via remote attestation and then use this secret key to decrypt the data inside the SGX enclave. 
Approach 2:
The server generates public-private key pair inside enclave and the public key is sent to each client. Each client then encrypts using public key and then send data to the server which is later decrypted using the previously generated private key.
Please Note: SGX enclave can be disassembled but could not be debugged. So is it safe to do approach 2? 
","","284","<c><encryption><public-key-encryption><sgx>","1","","0","2018-01-06 19:20:52","","7","1","","","","2018-01-06 19:20:52",""
"47168986","String encrypted in Ruby gives: 'BadPaddingException' when decrypted in Java","I'm using the following Ruby code to encrypt a string
require 'openssl'
require 'base64'

public_key = OpenSSL::PKey::RSA.new(File.read('public_key'))

Base64.encode64(public_key.public_encrypt('Some random string that I want to encrypt.'))

I need to pass the encrypted text in a request to the API, and on the API end, I'm getting the following error(read through the API logs):
javax.crypto.BadPaddingException: Decryption error

Now, I have gone through numerous questions over at Stackoverflow, but given my Ruby code, what I'm doing wrong that the encrypted text can't be decrypted on the API end. Obviously, the API end is using Java.
I'm a completely noob when it comes to encryption, but through encrypting and decrypting in Ruby, I have made sure that the implementation is correct in Ruby. The problem arises when the text encrypted through Ruby language gets decrypted through Java on the API end.
","According to the openJdk source code, BadPaddingException means ""if this cipher is in decryption mode, and (un)padding has been requested, but the decrypted data is not bounded by the appropriate padding bytes"". This means that there are two separate possible reasons for this exception - whose name is probably misleading, while being technically correct at the lowest level - either the padding is wrong, or the decryption does not match the encryption. In the latter case the result of the decryption would be gibberish, and thus - to interpret the technical language of the source code - would not fit the padding scheme. 
","283","<java><ruby><encryption><rsa><public-key-encryption>","4","2","3","2017-11-14 21:35:00","47291680","6","","","","","2017-11-07 23:16:14",""
"47168986","String encrypted in Ruby gives: 'BadPaddingException' when decrypted in Java","I'm using the following Ruby code to encrypt a string
require 'openssl'
require 'base64'

public_key = OpenSSL::PKey::RSA.new(File.read('public_key'))

Base64.encode64(public_key.public_encrypt('Some random string that I want to encrypt.'))

I need to pass the encrypted text in a request to the API, and on the API end, I'm getting the following error(read through the API logs):
javax.crypto.BadPaddingException: Decryption error

Now, I have gone through numerous questions over at Stackoverflow, but given my Ruby code, what I'm doing wrong that the encrypted text can't be decrypted on the API end. Obviously, the API end is using Java.
I'm a completely noob when it comes to encryption, but through encrypting and decrypting in Ruby, I have made sure that the implementation is correct in Ruby. The problem arises when the text encrypted through Ruby language gets decrypted through Java on the API end.
","From Cryptography book

'PKCS1 padding adds 11 bytes to your original data.'

So you shall encrypt using buffer of size public key length - 11 and use actual public key size for decryption
For 1024 bit RSA keys, the encryption size is normally 117 and decryption buffer size is 128. 
","283","<java><ruby><encryption><rsa><public-key-encryption>","4","1","3","2017-11-14 21:35:00","47291680","6","","","","","2017-11-07 23:16:14",""
"47168986","String encrypted in Ruby gives: 'BadPaddingException' when decrypted in Java","I'm using the following Ruby code to encrypt a string
require 'openssl'
require 'base64'

public_key = OpenSSL::PKey::RSA.new(File.read('public_key'))

Base64.encode64(public_key.public_encrypt('Some random string that I want to encrypt.'))

I need to pass the encrypted text in a request to the API, and on the API end, I'm getting the following error(read through the API logs):
javax.crypto.BadPaddingException: Decryption error

Now, I have gone through numerous questions over at Stackoverflow, but given my Ruby code, what I'm doing wrong that the encrypted text can't be decrypted on the API end. Obviously, the API end is using Java.
I'm a completely noob when it comes to encryption, but through encrypting and decrypting in Ruby, I have made sure that the implementation is correct in Ruby. The problem arises when the text encrypted through Ruby language gets decrypted through Java on the API end.
","I wrote a very simple Java program to decrypt the output from that very simple Ruby program and it worked fine. Thus, not surprisingly, there's no inherent incompatibility between the ruby openssl module and standard Java cryptography. Without any more info about the Java side, all we can do is list some of the possibilities:

Mismatched keys

The public key you are using must correspond to the private key the Java side is using. If not, you'll likely receive the BadPadding exception.

Formatting issues

Obviously what you transmit, base64 encoded strings with embedded newlines, must be correctly parsed and decoded on the Java side. Getting a single byte wrong can cause the error you see. Most base64 decoders either choke on the newlines and throw an exception or ignore them. Neither explanation would result in a BadPaddingException. Perhaps the Java side is expecting Base64URL instead of Base64? If the Java side is expecting base64url encoding and if it ignores invalid characters then this could be the problem. It's worth trying to remove whitespace including newlines from the base64 output, and if that doesn't work then try encoding with a base64url encoder (again, remove any whitespace from the output).
","283","<java><ruby><encryption><rsa><public-key-encryption>","4","3","3","2017-11-14 21:35:00","47291680","6","","","","","2017-11-07 23:16:14",""
"7155100","Sending public key to Android from Ruby","On the server
OpenSSL::PKey::RSA.generate(1024).public_key.to_s

returns 
""-----BEGIN RSA PUBLIC KEY-----\nMIGJAoGBAPHpKZe0jKkyyslkhnoQzRovzQB+6OLtACNkILk+6UKgYJ1UM7Qkpxab\noEHnpR/XHrIfFUB8dfhaIeqHGC3IASZh6vveH6ypwZTqDHrejqYcfOuKOJcCRDJf\n/qxeVy1jwt7oMbrDhCeVNd3eIYdq0joEnZ6k4KwqvG1ZIOKkE8adAgMBAAE=\n-----END RSA PUBLIC KEY-----\n""

which works when I copy and paste this string as a java String. However, I need to get this public key through a httpResponse. When called by an HttpRequest, it returns:
-----BEGIN RSA PUBLIC KEY-----
MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCySmMxjxX1Xw80yRB35BQHP27V
EhIUG9/bxsyJMs4rhmvnpP7saeBznyDMQ3I5wt7cJEPABy+QuuAGjphj6/FsfsXP
9zLRroX02f48fQXNM7j8RtQ5y8bhcZrnb8/MNoAKnbAqkKlkuW/gRxSB0qeG5Q17
vvSJ6KHb5heAFwaGtwIDAQAB
-----END RSA PUBLIC KEY-----

But this is invalid. What gives?
","This is really a nice one :) OK, let's start from the beginning. 

I checked whether I can Base64-decode the contents of the string with problems -> yes
I checked whether the decoded byte array is a valid DER encoding -> yes
I checked whether the DER encoding represents an RSA public key -> yes
I checked whether I could parse the original string as an RSA public key directly -> no

WTF?! Then I reencoded the RSA public key I was able to decode to PEM - and it gave me:
-----BEGIN PUBLIC KEY-----
... same Base64 as in your string ...
-----END PUBLIC KEY-----

See the difference - it's the PEM headers. The structure that is Base64-encoded is the generic X.509 representation of a public key (therefore also the difference in the headers), and not the RSA-specific representation described in PKCS#1, which your headers would imply! If you change the PEM headers, then it'll work!
","283","<android><ruby><openssl><public-key-encryption>","1","0","1","2011-08-25 01:29:15","","1","","","","","2011-08-23 00:28:41",""
"44810996","Is storing a private key possible to be secure?","This question is about a project of mine. I have a server-side application running on my Raspberry Pi, while the client-side application is supposed to be distributed on all my other devices. The following exzerpt is showing the code of the client-side.
I've been digging the Internet and what I have gathered is that in the end there no 100% safe way to store a private key. However, it is considered good practice to safe all keys in a KeyStore. The following is my solution to it, but my problem is: the KeyStore-file, client.jks, lies inside the JAR, together with the hardcoded password. client.jks contains the server-side's public key and the client-side's private key.
        KeyStore keyStore = KeyStore.getInstance(""JKS"");
        keyStore.load(new FileInputStream(KEYSTORE), PASSWORD.toCharArray());

        KeyManagerFactory keyManagerFactory = KeyManagerFactory.getInstance(""SunX509"");
        keyManagerFactory.init(keyStore, PASSWORD.toCharArray());

        TrustManagerFactory trustManagerFactory = TrustManagerFactory.getInstance(""SunX509"");
        trustManagerFactory.init(keyStore);

        SSLContext sslContext = SSLContext.getInstance(""TLS"");
        sslContext.init(keyManagerFactory.getKeyManagers(), trustManagerFactory.getTrustManagers(), new SecureRandom());

        SSLSocket connection = (SSLSocket) sslContext.getSocketFactory().createSocket(""localhost"", 6789);
        System.out.println(""Connection successful!"");

The Strings KEYSTORE and PASSWORD contain the KeyStore-file and the password, both hardcoded.
Is this really the best practice or am I missing something? Is the new SecureRandom object created for every connection enough to make the connection safe?
Best regards and thank you for your answers!
","","280","<java><ssl><public-key-encryption><private-key><jks>","0","","0","2017-06-28 19:27:42","","2","2","","","","2017-06-28 19:27:42",""
"33540667","Check RSA encryption via public key: command-line vs SQL Server","I have done some search, both here and on the web, but apparently it seems to be difficult to find a similar issue around, so I decided to post a question here.
I have the following task to accomplish (and unfortunately I am not an expert in OpenSSL encryption), having the following ingredients:

a SQL Server database (where I have 'sa' access rights, if necessary);
a DER certificate with a public key only.

I am requested to encrypt some DB data using that public key, and the result of the encryption must be the same I would obtain by using the following command (it uses the PKCS#1 v 1.5 padding, if I understood well):
.\openssl rsautl -encrypt -inkey <public key cert> -certin -pkcs

I know that SQL Server can import a certificate and encrypt data, but I don't know how/if I can set any options to drive the encryption process (e.g.: which padding it should use) in order to make sure that I really reproduced the  template I was given.
On the other hand, if I am not wrong, since I have no private key, then I cannot test my encryption by just encrypting some data via SQL Server and then de-crypting them via the openssl command.
As an alternative, I thought that a check method could consist in encrypting the same data via openssl and via SQL Server, and then check if the returned strings are the same. Unfortunately, I learned from another StackOverflow question the every time a data is encrypted it is applied some random padding which cause the encrypted string to be always different.
Then, the first question: is it possible, both in the openssl command and in SQL Server, to temporarily 'fix' the used random seed, in order to make sure that every time one encrypts a string, it will always be applied the same padding, in order to be able to compare the results?
As an alternative, I would try to do my tests with a test certificate which I could try to generate with a pair of keys, but in this case I have some silly questions:

how can I generate a pair of keys and then create a certificate with the public key which will be an analogue to the one I was provided by the entity I will have to send data to?
how can I make sure that the format of this 'test' certificate is compliant to that of the production certificate provided to me?

Thanks a lot for every help and best regards. Sorry if my question can appear silly, but I am not an expert in this topic.
","","279","<sql-server><encryption><openssl><public-key-encryption>","1","","0","2015-11-05 09:20:53","","0","","","","","2015-11-05 09:20:53",""
"15791400","OpenSSL add CA for certificate verification","Trying to connect to a SSL website using ruby (https://bank.barclays.co.uk/olb/auth/LoginLink.action)
When I connect I get the following error:
:in `connect': SSL_connect returned=1 errno=0 state=SSLv3 read server certificate B: certificate     verify failed (OpenSSL::SSL::SSLError)

I have tried all the existing solutions:

update gem (using 2.0.3) & openssl (using 1.0.1-4ubuntu5.8)
adding 'ssl_verify_mode' to .gemrc

I need to use SSL verify and high level security because Im going to be transferring secure passcodes to a bank.
I think the problem is that the SSL CA of the receiving website is not trusted by my computer. However, rather than configure the OS to trust the certificate natively, Id rather find a solution that does not rely on the OS (preferably something where I can pass a configuration to OpenSSL on runtime).
Thanks for your help.
","If you can use something like Typhoeus, you can do this:
Typhoeus::Request.get(url.to_s, :disable_ssl_peer_verification => true)

","279","<ruby><ubuntu><ssl><openssl><public-key-encryption>","1","0","1","2013-04-03 15:38:35","","0","","","","","2013-04-03 15:18:56",""
"8314767","signature verification RSA in ActionScript","I have PEM encoded X.509 version 3 certificate. Also I have public key, signature and message. How can I check if this signature is original (true) ?
","Look at this. Might be helpful. Currently, it doesn't support the PEM encoding but provides .NET-compatible RSA signature verification.
","279","<actionscript-3><verification><public-key-encryption>","0","0","1","2012-04-04 01:28:00","","0","","","","","2011-11-29 17:08:11",""
"19026384","what is different between public keys","I have tried to create a public key in two ways,

I created Self Signed Certificate and export it to .pfx file and used Openssl to get temp.cer file which contains the public key
used openssl to generate a public key as follows.
openssl genrsa -out myjira.pem 1024

openssl rsa -in temp.pem -pubout -out temp.pub


I am using an application and trying to implement OAuth on it. when I enter the public key from temp.cer (which is longer) it does not accepts it and says 
Must be a valid public key. java.security.InvalidKeyException:. But when I enter the public key from temp.pub (which is  much shorter than the other one) it accepts it.
now my question is what is differences between those public keys? 
","It sounds like the longer of your keys is in fact a private key. Generally you have a key pair, a private and public key.
more info: http://en.wikipedia.org/wiki/Public-key_cryptography
","278","<openssl><public-key-encryption><public-key>","0","0","2","2013-09-26 23:09:53","","0","","","","","2013-09-26 11:00:16",""
"19026384","what is different between public keys","I have tried to create a public key in two ways,

I created Self Signed Certificate and export it to .pfx file and used Openssl to get temp.cer file which contains the public key
used openssl to generate a public key as follows.
openssl genrsa -out myjira.pem 1024

openssl rsa -in temp.pem -pubout -out temp.pub


I am using an application and trying to implement OAuth on it. when I enter the public key from temp.cer (which is longer) it does not accepts it and says 
Must be a valid public key. java.security.InvalidKeyException:. But when I enter the public key from temp.pub (which is  much shorter than the other one) it accepts it.
now my question is what is differences between those public keys? 
","A certificate file contains a public key as well as identity information that is bound to that key via a signature.  That's why your certificate file is longer than your public key file.
If you load the certificate into a Java X509Certificate object, you can obtain the PublicKey by using the getPublicKey() method of the X509Certificate object.
","278","<openssl><public-key-encryption><public-key>","0","1","2","2013-09-26 23:09:53","","0","","","","","2013-09-26 11:00:16",""
"38027867","How to return JWKS to Relying Party in OpenId Connect ""jwks_uri"" and How to convert RSA Public key in base64urlUInt in Java","I am working on OpenId Connect 2.0 Discovery Endpoint. Here, we have to send URL for ""jwks_uri"" in Configuration Response to ""Relying Party"" which has the ""RSA Public Key"" for validating the ""ID Token"". I have no Idea on ""How to send the RSA Public Key"" I mean, In which application/json ? or some other fomat? and How to Encode the RSA Public Key in base64urlUInt in Java(Get the big-endian byte sequence of integer in Java base64urlUInt). Please Help me. Iam new to Java.
Thanks in Advance.  
","","278","<java><openid><public-key-encryption>","1","","0","2016-06-25 11:13:50","","0","","","","","2016-06-25 11:13:50",""
"31579815","Fixing the IV for JCE RSA Encryption","I'm trying to pass an RSA Key generated in JS to encrypt something in Java. We're passing the exponent and the modulus and then generating a key from that.
However when encrypting in JCE, two ciphertexts are never the same because the initialization creates a random IV, as directed.
Is there some way to fix the IV for initiliazation so the Javascript can pass it to the Java server? The documentation for the JCE gives me nothing.
Thanks in advance, its much appreciated.
EDIT: its come to my attention that the IV is used for the padding. I'm using PKCS1 padding, if that changes anything.
EDIT: I've done some more reading, and apparently the difference between the ciphertexts is due to the padding. While I appreciate that this is working as directed, I need the client to be able to decrypt the encrypted text. If I pass it the ciphertext encrypted with the public key, will the client be able to decrypt it even without knowing anything about the padding, even if its a different library and language doing the decrypting?
","","278","<java><rsa><public-key-encryption><jce>","0","","0","2015-07-24 00:59:34","","3","","5051134","","2015-07-24 00:59:34","2015-07-23 06:36:15",""
"11795820","Send email from iphone/android with public key. Manually unlock with private key","I am needing to know is there a way with iphone and android to send a file encrypted based on a public/private key system? 
-- Edit after below post --
Basically I am wanting to:
1. Take a file off an iphone/android
2. Public key encrypt it
3. Email it
4. Manually private key unencrypt it
Thanks
","Implement RSA at both side iPhone and Android. You can use openssl to implement RSA at both side. It is peer reviewed and i have used once. And it is working at both side. Generate key pair and send public key to all and keep private key confidential. For example Encrypt file at iPhone side using public key and decrypt the file at Android side with private key .
","275","<android><iphone><email><public-key-encryption><gnupg>","0","0","1","2012-08-03 12:44:22","11795904","0","","168188","","2012-08-03 12:44:22","2012-08-03 12:32:13",""
"30477944","How to encrypt a string using RSA algorithm and PKCS1_PADDING not OAEP and print the encrypted string in PHP","Here is the code I am using but I keep getting a blank echo. How can I echo the encrypted text.
include('Crypt/RSA.php');
$rsa = new Crypt_RSA();
$rsa->loadKey(file_get_contents('privatekey.txt'));
$rsa->loadKey($rsa->getPublicKey());
$rsa->setEncryptionMode(CRYPT_RSA_ENCRYPTION_PKCS1);
echo $rsa->encrypt('1234567890');

","","274","<php><encryption><rsa><public-key-encryption><phpseclib>","0","","0","2015-05-27 09:29:43","","6","","1816580","","2015-05-27 09:29:43","2015-05-27 09:09:40",""
"42931053","CryptoPP vs PHP Base64 Encoding/Decoding","I am trying to create a communication exchange between an application in PHP and C++ (CryptoPP).
I have the following code in PHP:
$in = ""ALApfWG920ZFle/2r6CkXKXt+zG5tiw7Gw9ZLl1mKRNP9fyb12T92e9rTQF4JeapXSrZVBPyrGx52l4zmu+wr3u2EQW7CeYFbl9h8y5+xx0MPOL/1nyX6ENzo755klTy5AxcM9GMrpKt689i79ouuxceA2bCa0cpWMUv4c2dHN8nKaXDSyCW04dRglFds9CVb29JgQamFRc7H8yjPPdk/FIMDt3xCDOKjoT5VGM1v1Tsyo92qCSFW9N4xXqLr5NUO0hv5u+kVCg0P/gWbgSSNsflXjyqV+dBp3YzKdxHGQXbpl8IQvec95GjL60zQ7IS/rWOZg40+IrwbhvoWHUQIkM=""
$out = base64_decode($decode)

It decodes the text and returns a binary string, as expected.
I am doing a similar command using CryptoPP in C++:
string out;
string in = ""ALApfWG920ZFle/2r6CkXKXt+zG5tiw7Gw9ZLl1mKRNP9fyb12T92e9rTQF4JeapXSrZVBPyrGx52l4zmu+wr3u2EQW7CeYFbl9h8y5+xx0MPOL/1nyX6ENzo755klTy5AxcM9GMrpKt689i79ouuxceA2bCa0cpWMUv4c2dHN8nKaXDSyCW04dRglFds9CVb29JgQamFRc7H8yjPPdk/FIMDt3xCDOKjoT5VGM1v1Tsyo92qCSFW9N4xXqLr5NUO0hv5u+kVCg0P/gWbgSSNsflXjyqV+dBp3YzKdxHGQXbpl8IQvec95GjL60zQ7IS/rWOZg40+IrwbhvoWHUQIkM="";
CryptoPP::StringSource decryptor(in, true,
new CryptoPP::Base64Decoder(
new CryptoPP::StringSink(out)
    ));

However, when I inspect the out string, it is empty.
Could someone please pin-point what I am doing wrong?
","You cannot see the binary data because they start with a zero (\0).
\0 terminates a string, so you cannot see anything, but your data is stored.
Check:
out.size() 

You can access your data with:
const char* data = out.c_str();
char* firstByte = data[0];

","274","<php><c++><encryption><public-key-encryption>","2","4","1","2017-03-21 17:04:54","42932750","3","","6178493","","2017-03-21 15:59:51","2017-03-21 15:13:30",""
"38706955","Error casting from AnyObject? to SecKeyRef? in Swift","As part of a Swift based PKI implementation, I ported the SecKeyWrapper.m to Swift
Both, (Objective-C and Swift) of the Keychain access methods are working fine except one part in the Swift implementation.
I receive the public key from the peer in base64 format. It is converted to NSData and then saved in the Keychain using:
statusCode = SecItemAdd(queryDictionary, &persistentPeer)

After successfully saving the peer public key in the keychain, I need to get it as SecKeyRef.
    queryDictionary[kSecReturnPersistentRef] = true
    var peerKeyRef: AnyObject?
    statusCode = SecItemCopyMatching(queryDictionary, &peerKeyRef)

The problem is that SecItemCopyMatching returns an object of type AnyObject? than can´t be casted to SecKeyRef (or SecKey thats is an alias)
let key = peerKeyRef as? SecKeyRef // Compile error.

The work around I found is to cast the peerKeyRef as NSObject? and then use Objective-C to bridge to SecKey as follows:
let keyObject = peerKeyRef as? NSObject
keyRef = Utility.getSecKeyRefFromAnyObject(keyObject).takeRetainedValue()

The Objetive-C code to do it is as follows:
+(SecKeyRef) getSecKeyRefFromNSObject:(id)theObject {
    return (__bridge SecKeyRef)theObject;
}

The casting to SecKey using this workaround works fine (no warnings or errors) with the expected result.
What do you think is missing in the Swift code to cast AnyObject? to SecKeyRef?
I am working with Xcode 7.3.1 and Swift 2.2
Rgds.... 
","That compile error seems to be a bug to me.
(Which was once a valid diagnosis when all CF types were imported as typealiases of AnyObject.)
But in your case I would just do it as:
let key = peerKeyRef as! SecKeyRef?

You are 100% sure that the query returns SecKeyRef or nil, no?
","272","<objective-c><swift><rsa><public-key-encryption><seckeyref>","1","1","1","2016-08-01 20:46:51","38707840","0","","","","","2016-08-01 19:47:02",""
"46379773","Failing openssl_public_encrypt","When I'm encrypting a variable where I put some text in it, it's working, but if I'm using a variable where I'm assigning to the $output this:
$data1 = new DOMDocument(""1.0"", ""utf-8"");
//creating the xml document
...
//after creating the document
$output = $data1->saveXML();

where $data1 is an xml object. After that I'm using a public certificate to extract the public key, for encrypting the string $output:
$pub_key = openssl_pkey_get_public(file_get_contents('./certificate.cer'));
$keyData = openssl_pkey_get_details($pub_key);
$key = $keyData['key'];

After I have the public key in the variable $key, I want to encrypt the $output with the public key $key, and I'm using the following code to handle possible error:
$crypted='';
if (($blnResult = openssl_public_encrypt($output, $crypted, $key)) === false) {
    throw new \Exception(""error: openssl_public_encrypt() failed!"");
}

echo base64_encode($crypted);

And it gives me the error: openssl_public_encrypt() failed!. Notice that if I'm assigning to $output='foo', it's working, so I don't understand why it isn't working if I'm assigning to $output the data->saveXML();? It is a 270 characters long string. It ""should"" work.
","I had the same problem. My problem was that either the public key I used was very short or the data I was trying to encrypt was very long. So, you have 2 options:
- You may reduce the amount of data you are trying to encrypt or,
- You may use a public key that allows you to encrypt more data (a bigger public key)
Reference:
https://en.wikipedia.org/wiki/RSA_(cryptosystem)
","267","<php><encryption><x509certificate><public-key-encryption><php-openssl>","0","1","1","2019-10-29 17:34:05","","5","","608639","","2017-09-23 15:42:05","2017-09-23 12:50:47",""
"31783951","How can I encrypt text using a public key WITH passphrase?","Now I can encrypt a text using the method in this tutorial. (Sorry for it is in Chinese only but I think you can understand the post by its code snippets). 
It encrypts using a public key WITHOUT passphrase. How can I encrypt my text using a public key WITH passphrase?

Update 1:
I can read a public key without passpharse using the code below:
certificate = SecCertificateCreateWithData(kCFAllocatorDefault, ( __bridge CFDataRef)publicKeyFileContent);
if (certificate == nil) {
    NSLog(@""Can not read certificate from pub.der"");
    return nil;
}

The problem is - How can I read a public key WITH passpharse in iOS?

Update 2
The communication between server and iOS app is using https
Other than https both backend and app has their public key and private key for secure communication. 
Steps for their communication:

App owns public key (with passphrase) from server
App generates a public key (with passphrase) and a private key (when app is used for first time)
when app sends data (a JSON with 3 parameters) to server, app will send a public cert generated by app (JSON parameter 1) + app generated public key passphrase (JSON parameter 2) + message encrypted by public key from server (JSON parameter 3)
Server can read the received message (decrypted by server side private key)
Server will send response message after receive a JSON. The message is encrypted by public key generated by app

So the secure connection is established from server to every single app. And ensure correct individual app won't receives message that is not intended for them. 
","RSA  encryption is an asymmetric encryption algorithm. When encrypted with the public key it can only be decrypted with the associated private key. There is no passphrase.
In general data encryption usage symmetric key encryption such as AES is used with a key that is derived from a password/phrase with PBKDF2.
In general when using asymmetric encryption the text would be encrypted with a symmetric algorithm such as AES using a random one-time key. The key would is encrypted with the asymmetric algorithm and both the symmetric encrypted text and the asymmetric encrypted key are both sent to the other end. The receiver reverses the process using the private key.
Note that asymmetric encryption is both slow and the data to be encrypted is limited to the key size. This is why it is generally used just to encrypt a key or very limited data.
","267","<ios><encryption><rsa><public-key-encryption>","-1","0","1","2015-08-06 03:08:05","","14","","720139","","2015-08-06 03:08:05","2015-08-03 09:33:39",""
"36300837","Decrypt master password of windows API CryptProtectData (presumably)","Is it possible to decrypt master password if I have data for encryption (text) and the result of encryption of this data (BLOB). 
I want to decrypt Google Chrome master password that is used for encryption data. As I know chrome uses windows API CryptProtectData function. I have plaintext1 and ciphertext1. Also I have ciphertext2 and I want to decrypt plaintext2.
","","265","<encryption><public-key-encryption><password-encryption><encryption-symmetric>","2","","0","2016-03-30 07:10:40","","4","","3065976","","2016-03-30 07:10:40","2016-03-30 05:59:59",""
"33772147","Encrypt a pdf using openssl private key - PHP","Is there a possibility to encrypt a PDF using openssl private/public key in PHP?
Appreciate if you can provide an answer with an example.
","Yes. You would encrypt it with a public key and decrypt it with the private key.
As per this blog post, I recommend using PHPSecLib instead of interfacing with OpenSSL directly, as there are a lot of things that can go wrong. In particular: padding oracle attacks.
","265","<php><encryption><laravel-4><openssl><public-key-encryption>","1","1","1","2015-11-18 08:52:39","","0","","","","","2015-11-18 04:59:33",""
"9311134","Using RSA (with openssl) in opposition to HTTPS","I am planning to implement API security in my REST application, Where i need work for authorization URL (on server PHP application) which will return a session token to client (mobile clients android, iphone, BB, wp7, wp8)requesting this url.
After looking for possible solutions i found these two perfect for my needs. but i am not able to decide on solution which will survive me on long runs.

Using RSA encryption with openssl for transferring user data to authorization URL (i am going with openssl just to stick with standard and secure method).
I have a hunch that it's possible to just use HTTPS to pass the user data and let OS handle encryption/decryption.

However, I am particularly inclined to first approach, since here client will not be able to make successful call to authorization url unless it has access to public key. But i am not sure about how well this approach will gel with all mobile clients.
Any help on this is much appreciated!.. 
","You should be ok when sending the authentication URL over SSL. SSL will authenticate the server and make sure that the data is protected against eavesdropping and man in the middle attacks. The URL will then be send over this protected channel, so after verifying the URL, the server can determine that the client is indeed the right entity. The token can then be safely send to the client over the same SSL session
If you go with your own scheme you will have to setup your own key management scheme and protocol. This is extremely hard to get right. Your comment on having access on a public key is a good indication that you will fail. SSL is not perfect either, but it has had a lot of scrutiny, and chances of it failing out of the blue are slim.
In other words, choose #2 over #1.
","264","<encryption><openssl><rsa><public-key-encryption>","0","0","1","2012-02-18 00:57:16","","1","","464642","","2012-02-16 12:24:01","2012-02-16 12:17:49",""
"15935762","Saving a uint8_t ciphertext into DataModel","I am building a simple iphone (SDK6.1) application that encrypts some user's notes, stores the into a database and when user enters a password (does not need to be encrypted) it will decrypt his notes and show them to him.
For the database i am using Core Data (.xcdatamodel). The encrypted text at the moment is declared as String in the data model and in the Notes.h fil,e it is declared as NSString.
For the Encryption i am using apple's sample code from CryptoExercise which works perfectly.
The problem is that when i try to save the encrypted text in the database and then decrypt it i am not getting the desired results.. basically i am getting an empty string back.
Obviously i am using the following code to convert from uint8_t to NSString so i can store it into the data model and i understand that this is my main problem.
uint8_t *cipherBuffer = NULL;
SecKey *encrypt = [[SecKey alloc]init];
NSString *et = [[NSString alloc]init];

[encrypt generateKeyPairRSA];

// Encrypt the plain text
cipherBuffer = [encrypt Encryption:plainTextField.text];

// Convert uint8_t to NSString
NSMutableData *data = [[NSMutableData alloc]init];
[data appendBytes:cipherBuffer length:strlen((char*)cipherBuffer)+1];
NSString *string = [[NSString alloc]initWithData:data encoding: NSASCIIStringEncoding];

// Save to Data Model
[self.currentNote setEncryptedText:string];
[self.delegate addNewNoteViewControllerDidSave];
// Retrieve encrypted text from database
et = [self.currentNote encryptedText];

// Convert back to uint_8
NSData *someData = [et dataUsingEncoding:NSUTF8StringEncoding];
const void *bytes = [someData bytes];
uint8_t *crypto_data = (uint8_t*)bytes;

// Decrypt Data
[encrypt Decryption:crypto_data];

As i said before i understand that converting uint8_t is the main problem here and i would like to know which is the correct way to do this?
Is it possible with Data Model at all, or should i go to SQLite??
","You cannot convert arbitrary bytes sequences to NSString and back like that. For example,
if data contains the single byte 128 (hex 0x80), then
NSString *string = [[NSString alloc] initWithData:data encoding:NSASCIIStringEncoding];

creates a string with one Unicode character U+0080. When you convert this back to NSData with
NSData *d1 = [string dataUsingEncoding:NSUTF8StringEncoding];

then d1 will contain the bytes 0xC2 0x80 (which is the UTF-8 for U+0080). But
NSData *d2 = [string dataUsingEncoding:NSASCIIStringEncoding];

does also not work (d2 = nil), because the string cannot be converted to 7-bit
ASCII.
So you should either

store the encrypted data as ""Binary Data"" in Core Data, or
store the encrypted data as String, but choose a different conversion strategy,
for example Base64.

","264","<iphone><rsa><public-key-encryption><xcdatamodel>","0","2","2","2013-04-11 10:49:19","15946829","0","","","","","2013-04-10 20:27:45",""
"15935762","Saving a uint8_t ciphertext into DataModel","I am building a simple iphone (SDK6.1) application that encrypts some user's notes, stores the into a database and when user enters a password (does not need to be encrypted) it will decrypt his notes and show them to him.
For the database i am using Core Data (.xcdatamodel). The encrypted text at the moment is declared as String in the data model and in the Notes.h fil,e it is declared as NSString.
For the Encryption i am using apple's sample code from CryptoExercise which works perfectly.
The problem is that when i try to save the encrypted text in the database and then decrypt it i am not getting the desired results.. basically i am getting an empty string back.
Obviously i am using the following code to convert from uint8_t to NSString so i can store it into the data model and i understand that this is my main problem.
uint8_t *cipherBuffer = NULL;
SecKey *encrypt = [[SecKey alloc]init];
NSString *et = [[NSString alloc]init];

[encrypt generateKeyPairRSA];

// Encrypt the plain text
cipherBuffer = [encrypt Encryption:plainTextField.text];

// Convert uint8_t to NSString
NSMutableData *data = [[NSMutableData alloc]init];
[data appendBytes:cipherBuffer length:strlen((char*)cipherBuffer)+1];
NSString *string = [[NSString alloc]initWithData:data encoding: NSASCIIStringEncoding];

// Save to Data Model
[self.currentNote setEncryptedText:string];
[self.delegate addNewNoteViewControllerDidSave];
// Retrieve encrypted text from database
et = [self.currentNote encryptedText];

// Convert back to uint_8
NSData *someData = [et dataUsingEncoding:NSUTF8StringEncoding];
const void *bytes = [someData bytes];
uint8_t *crypto_data = (uint8_t*)bytes;

// Decrypt Data
[encrypt Decryption:crypto_data];

As i said before i understand that converting uint8_t is the main problem here and i would like to know which is the correct way to do this?
Is it possible with Data Model at all, or should i go to SQLite??
","So just to answer the question so i can use code and everything..
I changed the EncryptedText in the Data Model to Binary Data and then the code would look like this:
uint8_t *cipherBuffer = NULL;
SecKey *encrypt = [[SecKey alloc]init];

[encrypt generateKeyPairRSA];

cipherBuffer = [encrypt Encryption:plainTextField.text];

NSMutableData *data = [[NSMutableData alloc]init];
[data appendBytes:cipherBuffer length:strlen((char*)cipherBuffer)+1];

// Save cipher into the Data Model
[self.currentNote setEncryptedText:data];
[self.delegate addNewNoteViewControllerDidSave];

// Retrieve cipher back from Data Model
NSData *etData = [[NSData alloc]init];
etData = [self.currentNote encryptedText];

// Convert back to uint8_t
const void *bytes = [etData bytes];
uint8_t *crypto_data = (uint8_t*)bytes;

// De cypher
[encrypt Decryption:crypto_data];

","264","<iphone><rsa><public-key-encryption><xcdatamodel>","0","0","2","2013-04-11 10:49:19","15946829","0","","","","","2013-04-10 20:27:45",""
"31152186","Recaptcha stoken generation (convert from Java to Ruby)","Google have provided the following example code showing how to generate a secure token for their second version of Recaptcha:
public class STokenUtils {
  private static final String CIPHER_INSTANCE_NAME = ""AES/ECB/PKCS5Padding"";

  public static final String createSToken(String siteSecret) {
    String sessionId = UUID.randomUUID().toString();
    String jsonToken = createJsonToken(sessionId);
    return encryptAes(jsonToken, siteSecret);
  }

  private static final String createJsonToken(String sessionId) {
    JsonObject obj = new JsonObject();
    obj.addProperty(""session_id"", sessionId);
    obj.addProperty(""ts_ms"", System.currentTimeMillis());
    return new Gson().toJson(obj);
  }

  private static String encryptAes(String input, String siteSecret) {
    try {
      SecretKeySpec secretKey = getKey(siteSecret);
      Cipher cipher = Cipher.getInstance(CIPHER_INSTANCE_NAME);
      cipher.init(Cipher.ENCRYPT_MODE, secretKey);
      return BaseEncoding.base64Url().omitPadding().encode(cipher.doFinal(input.getBytes(""UTF-8"")));
    } catch (Exception e) {
      e.printStackTrace();
    }
    return null;
  }

  private static String decryptAes(String input, String key) throws Exception {
    SecretKeySpec secretKey = getKey(key);
    Cipher cipher = Cipher.getInstance(CIPHER_INSTANCE_NAME);
    cipher.init(Cipher.DECRYPT_MODE, secretKey);
    return new String(cipher.doFinal(
        BaseEncoding.base64Url().omitPadding().decode(input)), ""UTF-8"");
  }

  private static SecretKeySpec getKey(String siteSecret){
    try {
      byte[] key = siteSecret.getBytes(""UTF-8"");
      key = Arrays.copyOf(MessageDigest.getInstance(""SHA"").digest(key), 16);
      return new SecretKeySpec(key, ""AES"");
    } catch (NoSuchAlgorithmException | UnsupportedEncodingException e) {
      e.printStackTrace();
    }
    return null;
  }
}

The full code can be found at: https://github.com/google/recaptcha-java
I'm wanting to generate this token in Ruby 2.1+ and have got this far but it outputs incorrect data. I'm trying to slowly debug it, but in the meantime I'm wondering if anyone can see any obvious flaws in my process?
      stoken_json = hash_to_json({'session_id' => SecureRandom.uuid, 'ts_ms' => Time.now.to_i})
      cipher = OpenSSL::Cipher::AES128.new(:ECB)
      private_key_digest = Digest::SHA1.hexdigest(private_key)[0...16]    

      cipher.encrypt
      cipher.key = private_key_digest
      encrypted_stoken = cipher.update(stoken_json) << cipher.final
      encoded_stoken = Base64.urlsafe_encode64(encrypted_stoken).gsub(/\=+\Z/, '')

","Turns out I was close. I needed to digest not hexdigest the private key:
private_key_digest = Digest::SHA1.digest(private_key)[0...16]

So the final code is:
stoken_json = hash_to_json({'session_id' => SecureRandom.uuid, 'ts_ms' => (Time.now.to_f * 1000).to_i})
cipher = OpenSSL::Cipher::AES128.new(:ECB)
private_key_digest = Digest::SHA1.digest(private_key)[0...16]

cipher.encrypt
cipher.key = private_key_digest
encrypted_stoken = cipher.update(stoken_json) << cipher.final
encoded_stoken = Base64.urlsafe_encode64(encrypted_stoken).gsub(/\=+\Z/, '')

There didn't seem to be a built-in way to strip the padding from the base64 string, thus the .gsub at the end.
I also needed the timestamp in milliseconds so that part has been modified too.
In the recaptcha gem there is a method hash_to_json that I'm using, otherwise I suspect you'd use the JSON gem.
","263","<java><ruby><recaptcha><public-key-encryption>","2","1","1","2015-07-01 21:29:30","31152577","0","2","129798","","2015-07-01 21:23:05","2015-07-01 03:44:24",""
"11566254","What if, a public key was stored on the server?","The public key and private key pairs are created on the client side via a java script algorithm and the public key is then transferred over to the Server.
A copy of the persons private key was stored on the users computer in the form of a java script variable.
When User A sends a message to User B
The server encrypts the message with User B's public key.
User B picks up the message and decrypts (algorithm written in java script) it with User B's private key which is private and kept in a java script variable.
At no point in the time the User B's private key is disclosed over the network what so ever.
Would that be secure???
","'public' and 'private' are just names given to the two keys. It doesn't matter WHICH of the two keys is public and which is private, as long as you never ever mix up the usage. Once both keys are available to someone at the same time, the security of the messaging system is utterly destroyed.
Technically, since you say the keys are stored in javascript variables, you're implying that the variables were sent IN THE CLEAR embedded in some browser-based html/javascript. That further implies that there's no security - since both keys are exposed to the network.
","261","<algorithm><private><public><public-key-encryption>","0","2","3","2012-07-20 08:03:21","","2","","1416970","","2012-07-20 08:03:21","2012-07-19 17:33:07",""
"11566254","What if, a public key was stored on the server?","The public key and private key pairs are created on the client side via a java script algorithm and the public key is then transferred over to the Server.
A copy of the persons private key was stored on the users computer in the form of a java script variable.
When User A sends a message to User B
The server encrypts the message with User B's public key.
User B picks up the message and decrypts (algorithm written in java script) it with User B's private key which is private and kept in a java script variable.
At no point in the time the User B's private key is disclosed over the network what so ever.
Would that be secure???
","It wouldn't be too secure since:

The private key of any user (say user B) can be leaked out of your app via injected JS code, or a bad browser addon
Once this is done, any one who gets access to any of the messages directed at User B, will be able to decrypt it and make sense of it
Of course the above wont happen if you are the only one using the app - since you'll likely have other users with different browser setups/addons/browsing-behaviors etc, it is entirely possible
When user A tries to send something to user B, you said the server will encrypt the message using user B's public key - Now, this request made via JS can be interpreted by a middle man. Once done, this middle man can initiate any request to any user by manipulating the sender, referrer etc. This can lead to impersonation and so..
You also mentioned that after generation, you intend to send the public key over to the server. This call made from JS can easily be interpreted, which means the public key can be leaked.

","261","<algorithm><private><public><public-key-encryption>","0","0","3","2012-07-20 08:03:21","","2","","1416970","","2012-07-20 08:03:21","2012-07-19 17:33:07",""
"11566254","What if, a public key was stored on the server?","The public key and private key pairs are created on the client side via a java script algorithm and the public key is then transferred over to the Server.
A copy of the persons private key was stored on the users computer in the form of a java script variable.
When User A sends a message to User B
The server encrypts the message with User B's public key.
User B picks up the message and decrypts (algorithm written in java script) it with User B's private key which is private and kept in a java script variable.
At no point in the time the User B's private key is disclosed over the network what so ever.
Would that be secure???
","To decide if something is ""secure"", you have to know what the security requirements are. Your case satisfies a few likely requirements, but there are several likely requirements that it does not satisfy. For example:

A plaintext copy of the message is apparently transmitted over the network from User A to the server, so anyone can eavesdrop on it at that point. (This is likely to be a serious problem.)
You don't explain how the public key is transmitted to the server. If it's not transmitted in an authenticated fashion, then a man-in-the-middle can generate his own public-private key pair, and give his public-key to the server. (This could be a serious problem.)
User B cannot verify the authenticity of the message (s)he receives. The message may have come from the server (and ultimately from User A), or it may have come from anyone else with a copy of the public key. (This may or may not be a serious problem, depending on the application.)

So overall, I would not consider this design to be ""secure"".
","261","<algorithm><private><public><public-key-encryption>","0","1","3","2012-07-20 08:03:21","","2","","1416970","","2012-07-20 08:03:21","2012-07-19 17:33:07",""
"3165638","Getting IllegalBlockSize when trying to encrypt too much data","Here are my constants
//Encryption fields
/** Algorithm=RSA Mode=ECB Padding=PKCS1Padding*/
public static final String ALGORITHM_MODE_PADDING = ""RSA/ECB/PKCS1Padding"";
/** Algorithm=RSA */
public static final String ALGORITHM = ""RSA"";
/** Provider=BouncyCastle */
public static final String PROVIDER = ""BC"";
/** Key size for the public and private keys */
public static final int KEY_SIZE = 1024;

I have made two public / private keys like this:
//Generate the keys
KeyPairGenerator kpg = KeyPairGenerator.getInstance(ALGORITHM,PROVIDER);
kpg.initialize(KEY_SIZE);
KeyPair kp = kpg.generateKeyPair();
PublicKey pubk = kp.getPublic();
PrivateKey prvk = kp.getPrivate();

I am decrypting like this:
byte[] privateKey = Base64.decodeBase64(pKey); //decode
PKCS8EncodedKeySpec keySpec = new PKCS8EncodedKeySpec(privateKey);
KeyFactory factory = KeyFactory.getInstance(ALGORITHM,PROVIDER);
PrivateKey privKey = factory.generatePrivate(keySpec);
Cipher cipher = Cipher.getInstance(ALGORITHM_MODE_PADDING);
cipher.init(Cipher.ENCRYPT_MODE, privKey);
return cipher.doFinal(data);

This works with small amounts of data, when when the data becomes larger such as 263 bytes if fails with an IllegalBlockSizeException.  I thinks this is because the data is greater than 256 bytes but that is just an guess and I have no idea of how to fix it.
What am I doing wrong?
I changed it to use the update method, but still have the same problem:
// encryption pass
cipher.init(Cipher.ENCRYPT_MODE, privKey);
byte[] cipherText = new byte[cipher.getOutputSize(data.length)];
int ctLength = cipher.update(data, 0, data.length, cipherText, 0);
ctLength += cipher.doFinal(cipherText, ctLength);

I am trying to implement digital signatures by the way.  The client has the public key and the server has the private key.
","You cannot use RSA to encrypt more data than the size in bytes of the modulus - 11. This is probably what you are looking for.
","261","<java><encryption><public-key-encryption>","1","2","1","2014-11-02 06:55:38","3168665","7","1","3622940","","2014-11-02 06:55:38","2010-07-02 12:30:55",""
"54449171","Encryption using RSA with given public key in Android","import android.util.Log;
import org.bouncycastle.bcpg.ArmoredOutputStream;
import org.bouncycastle.jce.provider.BouncyCastleProvider;
import org.bouncycastle.openpgp.PGPCompressedDataGenerator;
import org.bouncycastle.openpgp.PGPEncryptedData;
import org.bouncycastle.openpgp.PGPEncryptedDataGenerator;
import org.bouncycastle.openpgp.PGPException;
import org.bouncycastle.openpgp.PGPLiteralData;
import org.bouncycastle.openpgp.PGPLiteralDataGenerator;
import org.bouncycastle.openpgp.PGPPublicKey;
import org.bouncycastle.openpgp.PGPPublicKeyRing;
import org.bouncycastle.openpgp.PGPPublicKeyRingCollection;
import org.bouncycastle.openpgp.PGPUtil;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.security.NoSuchProviderException;
import java.security.SecureRandom;
import java.security.Security;
import java.util.Date;
import java.util.Iterator;

import static android.support.constraint.Constraints.TAG;

public class RSAEncryption {

static dataToBeEncrypt = ""Hello"";
static String publickey = ""-----BEGIN PGP PUBLIC KEY BLOCK-----\n"" +
        ""\n"" +
        ""mI0EXEr27gEEALybxOEubZ39PX1t+oU9iXhTTmqrc/+ha+J6TYd+yvYcNEBIOzPI\n"" +
        ""1fG2Tz30zJYwT9uZOyW7LAGKRcsIH6p4SiKGaEYBLEWuCQrGfXPAAXaH+WNsKOmz\n"" +
        ""SAZilPwugEcWknIUDZzfU0AD8PPCLqhJM6Ij7AJ/SNa2xUIsyUW+PwBdABEBAAG0\n"" +
        ""BWplZXRziM4EEwEKADgWIQRp0+dcK5ZTXht9TIcw0CiFbn2j6gUCXEr27gIbAwUL\n"" +
        ""CQgHAgYVCgkICwIEFgIDAQIeAQIXgAAKCRAw0CiFbn2j6um7A/9Ttzl8xHa4MvuF\n"" +
        ""htOEAb6sXOk17B9BQyd3bkUCYtBjmFA3Q7XzWln5lm2QQTxW+AnlVJYwQS5zvVC0\n"" +
        ""8WgPh6XP9sCi6/2ar748wpS8dL1wEAwaMOSYGEDCUpmW2uEGsrsAKfiMlKGhLiPC\n"" +
        ""uUvPJ0x2jjHn9HHO1e9BES9tlkRPJLiNBFxK9u4BBADQtF6EajJMi2IPsVDR6PTX\n"" +
        ""swjGgVbYKqwZRUwfLecJ95VeiQzznWUMpWFze4ESlAjCYeJf37voDazs6Ol5Uqz7\n"" +
        ""7d5GurEk4kNjQp4Pm+chFQWLWU1seMghyJqsXCjWApy0lNJ2YPNbYKUqdJsZpJgT\n"" +
        ""7qofPvEEPlGRRqzZxdN8oQARAQABiLYEGAEKACAWIQRp0+dcK5ZTXht9TIcw0CiF\n"" +
        ""bn2j6gUCXEr27gIbDAAKCRAw0CiFbn2j6ky9BACgADAD/VIFIUjuQtNa4GEcAS0T\n"" +
        ""vtJvsL26qW/Gohl5nb1ix7MLBwiH/l1Co6K52GKAVUrZBCnjkJW5zyGTKUkPGbGY\n"" +
        ""Loh481phsvpYgXHqol7UQivBoF14EO1dNmn61QFRn7D3zhNirziOKQl3kLSuEdc5\n"" +
        ""VpRF7ubkHL3jRrdQFA==\n"" +
        ""=/lmV\n"" +
        ""-----END PGP PUBLIC KEY BLOCK-----"";

public static void main (String[] args){
    String encrypted = null;
    try {
        encrypted = encryptToFile(dataToBeEncrypt, publicKey);
    } catch (Exception e) {
        Log.i(TAG, ""Exception: "" + e);
    }
    return encrypted;
}

public static String encryptToFile(String inputdata, String keyFile) throws Exception {
    Security.addProvider(new BouncyCastleProvider());
    byte[] original = inputdata.getBytes();
    InputStream secKey = new ByteArrayInputStream(keyFile.getBytes(""UTF-8""));
    byte[] encrypted = encrypt(original, readPublicKey(secKey), true, true);
    return new String(encrypted);
}

private static PGPPublicKey readPublicKey(InputStream in) throws IOException, PGPException {
    PGPPublicKey k = null;
    in = PGPUtil.getDecoderStream(in);
    PGPPublicKeyRingCollection pgpPub = new PGPPublicKeyRingCollection(in);
    Iterator rIt = pgpPub.getKeyRings();
    while (rIt.hasNext()) {
        PGPPublicKeyRing kRing = (PGPPublicKeyRing) rIt.next();
        Iterator kIt = kRing.getPublicKeys();
        while (kIt.hasNext()) {
            k = (PGPPublicKey) kIt.next();
            if (k.isEncryptionKey()) {
                break;
            }
        }
    }
    return k;
}

/**
 * Simple PGP encryptor between byte[].
 *
 * @param clearData
 *            The test to be encrypted
 * @param //passPhrase
 *            The pass phrase (key). This method assumes that the key is a
 *            simple pass phrase, and does not yet support RSA or more
 *            sophisiticated keying.
 * @param //fileName
 *            File name. This is used in the Literal Data Packet (tag 11)
 *            which is really inly important if the data is to be related to
 *            a file to be recovered later. Because this routine does not
 *            know the source of the information, the caller can set
 *            something here for file name use that will be carried. If this
 *            routine is being used to encrypt SOAP MIME bodies, for
 *            example, use the file name from the MIME type, if applicable.
 *            Or anything else appropriate.
 *
 * @param armor
 * @return encrypted data.
 * @exception IOException
 * @exception PGPException
 * @exception NoSuchProviderException
 */
public static byte[] encrypt(byte[] clearData, PGPPublicKey encKey, boolean withIntegrityCheck, boolean armor)
        throws IOException, PGPException, NoSuchProviderException {

    ByteArrayOutputStream encOut = new ByteArrayOutputStream();

    OutputStream out = encOut;
    if (armor) {
        out = new ArmoredOutputStream(out);
    }

    ByteArrayOutputStream bOut = new ByteArrayOutputStream();
    PGPCompressedDataGenerator comData = new PGPCompressedDataGenerator(
            PGPCompressedDataGenerator.ZIP);
    OutputStream cos = comData.open(bOut); // open it with the final
    // destination
    PGPLiteralDataGenerator lData = new PGPLiteralDataGenerator();

    // we want to generate compressed data. This might be a user option
    // later,
    // in which case we would pass in bOut.
    OutputStream pOut = lData.open(cos, // the compressed output stream
            PGPLiteralData.BINARY, """", // ""filename"" to store
            clearData.length, // length of clear data
            new Date() // current time
    );
    pOut.write(clearData);
    lData.close();
    comData.close();

    PGPEncryptedDataGenerator cPk = new PGPEncryptedDataGenerator(
            PGPEncryptedData.CAST5, withIntegrityCheck, new SecureRandom(),
            ""BC"");

    cPk.addMethod(encKey);
    byte[] bytes = bOut.toByteArray();

    OutputStream cOut = cPk.open(out, bytes.length);
    cOut.write(bytes); // obtain the actual bytes from the compressed stream
    cOut.close();
    out.close();
    return encOut.toByteArray();
    }
}

I was trying to achieve encryption using RSA algorithm with given public key and text to be encrypted. Below is my code which I was trying where I am passing my public key and string and getting the encrypted data. The problem is below code works fine when I run it as Java Application but when I use it in my android code I always get org.bouncycastle.openpgp.PGPException: Exception creating cipher as exception for line OutputStream cOut = cPk.open(out, bytes.length);. Please suggest me how can I make it work with my Android application.
Also,
OutputStream pOut = lData.open(cos, // the compressed output stream PGPLiteralData.BINARY, """", // ""filename"" to store clearData.length, // length of clear data new Date() // current time );
I am passing file name as null. Is this creating issue?
I expect Encrypted Message Without Version: BCPG v1.46, but I am getting org.bouncycastle.openpgp.PGPException: Exception creating cipher at line OutputStream cOut = cPk.open(out, bytes.length);
Editted
Exception:
  org.bouncycastle.openpgp.PGPException: Exception creating cipher
    at org.bouncycastle.openpgp.PGPEncryptedDataGenerator.open(Unknown Source)
    at org.bouncycastle.openpgp.PGPEncryptedDataGenerator.open(Unknown Source)
    at com.example.Resources.RSAEncryption.encrypt(RSAEncryption.java:157)
    at com.example.Resources.RSAEncryption.encryptToFile(RSAEncryption.java:74)
    at com.example.Resources.RSAEncryption.encryption(RSAEncryption.java:62)
    at com.example.EQR.QRUserCredentials.onActivityResult(QRUserCredentials.java:140)
    at android.app.Activity.dispatchActivityResult(Activity.java:6931)
    at android.app.ActivityThread.deliverResults(ActivityThread.java:4090)
    at android.app.ActivityThread.handleSendResult(ActivityThread.java:4137)
    at android.app.ActivityThread.-wrap20(ActivityThread.java)
    at android.app.ActivityThread$H.handleMessage(ActivityThread.java:1529)
    at android.os.Handler.dispatchMessage(Handler.java:102)
    at android.os.Looper.loop(Looper.java:154)
    at android.app.ActivityThread.main(ActivityThread.java:6123)
    at java.lang.reflect.Method.invoke(Native Method)
    at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:867)
    at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:757)
Caused by: java.security.NoSuchAlgorithmException: Provider BC does not provide CAST5/CFB/NoPadding
    at javax.crypto.Cipher.createCipher(Cipher.java:921)
    at javax.crypto.Cipher.getInstance(Cipher.java:901)
    ... 17 more


","Finally, I found the solution.
Instead of CAST5 I am using AES_128 PGPEncryptedDataGenerator cPk = new PGPEncryptedDataGenerator(PGPEncryptedData.AES_128, withIntegrityCheck, new SecureRandom(),""BC"");
Below is the working code
import android.util.Log;
import org.bouncycastle.bcpg.ArmoredOutputStream;
import org.bouncycastle.jce.provider.BouncyCastleProvider;
import org.bouncycastle.openpgp.PGPCompressedDataGenerator;
import org.bouncycastle.openpgp.PGPEncryptedData;
import org.bouncycastle.openpgp.PGPEncryptedDataGenerator;
import org.bouncycastle.openpgp.PGPException;
import org.bouncycastle.openpgp.PGPLiteralData;
import org.bouncycastle.openpgp.PGPLiteralDataGenerator;
import org.bouncycastle.openpgp.PGPPublicKey;
import org.bouncycastle.openpgp.PGPPublicKeyRing;
import org.bouncycastle.openpgp.PGPPublicKeyRingCollection;
import org.bouncycastle.openpgp.PGPUtil;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.security.NoSuchProviderException;
import java.security.SecureRandom;
import java.security.Security;
import java.util.Date;
import java.util.Iterator;

import static android.support.constraint.Constraints.TAG;

public class RSAEncryption {

static dataToBeEncrypt = ""Hello"";
static String publickey = ""-----BEGIN PGP PUBLIC KEY BLOCK-----\n"" +
        ""\n"" +
        ""mI0EXEr27gEEALybxOEubZ39PX1t+oU9iXhTTmqrc/+ha+J6TYd+yvYcNEBIOzPI\n"" +
        ""1fG2Tz30zJYwT9uZOyW7LAGKRcsIH6p4SiKGaEYBLEWuCQrGfXPAAXaH+WNsKOmz\n"" +
        ""SAZilPwugEcWknIUDZzfU0AD8PPCLqhJM6Ij7AJ/SNa2xUIsyUW+PwBdABEBAAG0\n"" +
        ""BWplZXRziM4EEwEKADgWIQRp0+dcK5ZTXht9TIcw0CiFbn2j6gUCXEr27gIbAwUL\n"" +
        ""CQgHAgYVCgkICwIEFgIDAQIeAQIXgAAKCRAw0CiFbn2j6um7A/9Ttzl8xHa4MvuF\n"" +
        ""htOEAb6sXOk17B9BQyd3bkUCYtBjmFA3Q7XzWln5lm2QQTxW+AnlVJYwQS5zvVC0\n"" +
        ""8WgPh6XP9sCi6/2ar748wpS8dL1wEAwaMOSYGEDCUpmW2uEGsrsAKfiMlKGhLiPC\n"" +
        ""uUvPJ0x2jjHn9HHO1e9BES9tlkRPJLiNBFxK9u4BBADQtF6EajJMi2IPsVDR6PTX\n"" +
        ""swjGgVbYKqwZRUwfLecJ95VeiQzznWUMpWFze4ESlAjCYeJf37voDazs6Ol5Uqz7\n"" +
        ""7d5GurEk4kNjQp4Pm+chFQWLWU1seMghyJqsXCjWApy0lNJ2YPNbYKUqdJsZpJgT\n"" +
        ""7qofPvEEPlGRRqzZxdN8oQARAQABiLYEGAEKACAWIQRp0+dcK5ZTXht9TIcw0CiF\n"" +
        ""bn2j6gUCXEr27gIbDAAKCRAw0CiFbn2j6ky9BACgADAD/VIFIUjuQtNa4GEcAS0T\n"" +
        ""vtJvsL26qW/Gohl5nb1ix7MLBwiH/l1Co6K52GKAVUrZBCnjkJW5zyGTKUkPGbGY\n"" +
        ""Loh481phsvpYgXHqol7UQivBoF14EO1dNmn61QFRn7D3zhNirziOKQl3kLSuEdc5\n"" +
        ""VpRF7ubkHL3jRrdQFA==\n"" +
        ""=/lmV\n"" +
        ""-----END PGP PUBLIC KEY BLOCK-----"";

public static void main (String[] args){
    String encrypted = null;
    try {
        encrypted = encryptToFile(dataToBeEncrypt, publicKey);
    } catch (Exception e) {
        Log.i(TAG, ""Exception: "" + e);
    }
    return encrypted;
}

public static String encryptToFile(String inputdata, String keyFile) throws Exception {
    Security.addProvider(new BouncyCastleProvider());
    byte[] original = inputdata.getBytes();
    InputStream secKey = new ByteArrayInputStream(keyFile.getBytes(""UTF-8""));
    byte[] encrypted = encrypt(original, readPublicKey(secKey), true, true);
    return new String(encrypted);
}

private static PGPPublicKey readPublicKey(InputStream in) throws IOException, PGPException {
    PGPPublicKey k = null;
    in = PGPUtil.getDecoderStream(in);
    PGPPublicKeyRingCollection pgpPub = new PGPPublicKeyRingCollection(in);
    Iterator rIt = pgpPub.getKeyRings();
    while (rIt.hasNext()) {
        PGPPublicKeyRing kRing = (PGPPublicKeyRing) rIt.next();
        Iterator kIt = kRing.getPublicKeys();
        while (kIt.hasNext()) {
            k = (PGPPublicKey) kIt.next();
            if (k.isEncryptionKey()) {
                break;
            }
        }
    }
    return k;
}

/**
 * Simple PGP encryptor between byte[].
 *
 * @param clearData
 *            The test to be encrypted
 * @param //passPhrase
 *            The pass phrase (key). This method assumes that the key is a
 *            simple pass phrase, and does not yet support RSA or more
 *            sophisiticated keying.
 * @param //fileName
 *            File name. This is used in the Literal Data Packet (tag 11)
 *            which is really inly important if the data is to be related to
 *            a file to be recovered later. Because this routine does not
 *            know the source of the information, the caller can set
 *            something here for file name use that will be carried. If this
 *            routine is being used to encrypt SOAP MIME bodies, for
 *            example, use the file name from the MIME type, if applicable.
 *            Or anything else appropriate.
 *
 * @param armor
 * @return encrypted data.
 * @exception IOException
 * @exception PGPException
 * @exception NoSuchProviderException
 */
public static byte[] encrypt(byte[] clearData, PGPPublicKey encKey, boolean withIntegrityCheck, boolean armor)
        throws IOException, PGPException, NoSuchProviderException {

    ByteArrayOutputStream encOut = new ByteArrayOutputStream();

    OutputStream out = encOut;
    if (armor) {
        out = new ArmoredOutputStream(out);
    }

    ByteArrayOutputStream bOut = new ByteArrayOutputStream();
    PGPCompressedDataGenerator comData = new PGPCompressedDataGenerator(
            PGPCompressedDataGenerator.ZIP);
    OutputStream cos = comData.open(bOut); // open it with the final
    // destination
    PGPLiteralDataGenerator lData = new PGPLiteralDataGenerator();

    // we want to generate compressed data. This might be a user option
    // later,
    // in which case we would pass in bOut.
    OutputStream pOut = lData.open(cos, // the compressed output stream
            PGPLiteralData.BINARY, """", // ""filename"" to store
            clearData.length, // length of clear data
            new Date() // current time
    );
    pOut.write(clearData);
    lData.close();
    comData.close();

    PGPEncryptedDataGenerator cPk = new PGPEncryptedDataGenerator(
            PGPEncryptedData.AES_128, withIntegrityCheck, new SecureRandom(),
            ""BC"");

    cPk.addMethod(encKey);
    byte[] bytes = bOut.toByteArray();

    OutputStream cOut = cPk.open(out, bytes.length);
    cOut.write(bytes); // obtain the actual bytes from the compressed stream
    cOut.close();
    out.close();
    return encOut.toByteArray();
    }
}

","261","<java><android><encryption><rsa><public-key-encryption>","0","0","1","2019-02-01 07:00:58","54468241","11","","5045911","","2019-01-31 20:15:04","2019-01-30 20:39:58",""
"50879698","How can I implement public key encryption/decryption?","So I'm making an application that will store some sensitive data such as password and user location details (longitude and latitude) in a database.
I have been able to encrypt the password using a one way encryption. (Did not make it myself don't worry.) But as for the user location, I need to be able to decrypt this data as I will need to re-use it.
I am aware this can be achieved using Public Key Encryption, I just don't know how to go about it. I have read and understood the concept, but can't seem to find ways in which I can do this. As in where my public key is placed, where my private key is placed and such.
Sorry if this question is broad, I'm really lost and can't find the information I'm looking for on the internet.
","Maybe you want to have a look at the Android keystore system.
Tutorial how to use a key stored in the keystore to encrypt/decrypt: https://medium.com/@josiassena/using-the-android-keystore-system-to-store-sensitive-information-3a56175a454b
(You could use symmetric cryptography to encrypt/decrypt your data and encrypt/decrypt the key for the symmetric cryptography with help of the Android keystore.)
","261","<android><encryption><public-key-encryption>","0","1","1","2018-06-17 23:12:23","","3","","9943593","","2018-06-17 23:12:23","2018-06-15 16:40:54",""
"6383858","Help designing a secure network protocol","In an app, I Have a network server and clients.
After a handshake, let's say the client sends ""userId sessionId SOME_COMMAND param param param"".
I have already identified the client and the sessionId is checked on the server accordingly, so identity is no more an issue.
But I'd like to prevent a hacker to modify the message or create a false one, for example sending ""userId sessionId SOME_COMMAND paramModified paramModified paramModified"".
I thought about using a pair of private/public encryption keys, and send the hash of the message in the message itself. But since it's automated in the client program, I may have to send the public key during the handshake. So the hacker could simply retrieve it and generate the proper hash.
I could also use complex encryption seeds or algorithms, but my experience with hackers has shown me that they will decompile anything.
So the bottom line is: I can hide everything that runs on the server, but I can't hide anything on the client program. And I'd like to to forbid to modify the message that the client program is supposed to send.
I don't even know if it's possible. And I'm opened to any suggestion. And by the way, I'm using Java, although it should not be very relevant. Thanks.
","Forget it. Use SSL like everybody else. There are complexities which you haven't even begun to address.
","261","<networking><authentication><network-programming><network-protocols><public-key-encryption>","0","2","1","2011-06-18 09:58:18","6395217","0","","","","","2011-06-17 09:31:06",""
"8479899","Does anyone recognise this kind of public key?","For an application I want to write, the webservice gives me this public key, with which I have to encrypt the password for signing in. But I don't know what kind of encryption this might be. Is this recognisable? Is it possible to tell what this is or do I have to find it out my own by sniffing into the JavaScript (of the web GUI) which handles this key?
Here it is:

-----BEGIN PUBLIC KEY-----
MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDN+SsAsYvIstaZ\/SYUNv7wvr+a
Ajkc28XxuKWpCbqFQS+EWeYpbuBB88iJU98yFjsFMh5BLbXhEX+2JmrC0DWd6o3r
1ILhNL27KmXo6Dh+2y0b9l3YXtmwiA1ThZEQun4Z1rUBPMF43DF805keLIsASFpj
nzc6zWw+jYCX7PTasQIDAQAB
-----END PUBLIC KEY-----

The fact that there is PUBLIC KEY, indicates this is asymmetric encryption. But there are lots of it. Here is a list, taken from Wikipedia of asymmetric encryption methods:

Benaloh · Blum–Goldwasser · Cayley–Purser · CEILIDH · Cramer–Shoup ·
  Damgård–Jurik · DH · DSA · EPOC · ECDH · ECDSA · EKE · ElGamal
  (encryption · signature scheme) · GMR · Goldwasser–Micali · HFE · IES
  · Lamport · McEliece · Merkle–Hellman · MQV · Naccache–Stern ·
  NTRUEncrypt · NTRUSign · Paillier · Rabin · RSA · Okamoto–Uchiyama ·
  Schnorr · Schmidt–Samoa · SPEKE · SRP · STS · Three-pass protocol ·
  XTR

RSA is the only one I know by it's name. Is that the most common one?
Thanks you very much for the help.
","It's a 1024-bit RSA public key in PEM format with one character mangled in the first line:
Public-Key: (1024 bit)
Modulus:
 00:cd:f9:2b:00:b1:8b:c8:b2:d6:99:fd:26:14:36:
 fe:f0:be:bf:9a:02:39:1c:db:c5:f1:b8:a5:a9:09:
 ba:85:41:2f:84:59:e6:29:6e:e0:41:f3:c8:89:53:
 df:32:16:3b:05:32:1e:41:2d:b5:e1:11:7f:b6:26:
 6a:c2:d0:35:9d:ea:8d:eb:d4:82:e1:34:bd:bb:2a:
 65:e8:e8:38:7e:db:2d:1b:f6:5d:d8:5e:d9:b0:88:
 0d:53:85:91:10:ba:7e:19:d6:b5:01:3c:c1:78:dc:
 31:7c:d3:99:1e:2c:8b:00:48:5a:63:9f:37:3a:cd:
 6c:3e:8d:80:97:ec:f4:da:b1
Exponent: 65537 (0x10001)

","261","<javascript><security><encryption><public-key-encryption><encryption-asymmetric>","4","11","1","2011-12-12 19:48:40","8479979","3","1","","","","2011-12-12 19:42:27",""
"49719823","Java SHA256 Signature using Public Key in Andorid (25)","I am writing an application targeting Android 25 and I am trying to sign my HTTP query parameter String by using my public key. However, I am getting the following exception java.security.SignatureException: object not initialized for signing when this method is invoked. 
What do you think I am missing here? The related line in my code where exception is thrown is marked with the comment //EXCEPTION IS THROWN HERE IN THE FOLLOWING LINE.
 private static String signSHA256RSA(String httpQueryParameterString, String strPublicKey) throws Exception {

    String input = httpQueryParameterString;

    if(input == null || input.isEmpty() || strPublicKey == null || strPublicKey.isEmpty()){
        return """";
    }

    String realPublicKey = strPublicKey.
            replaceAll(""-----END PUBLIC KEY-----"", """").
            replaceAll(""-----BEGIN PUBLIC KEY-----"", """").
            replaceAll(""\n"", """");

    byte[] b1 = Base64.decode(realPublicKey, Base64.DEFAULT);
    X509EncodedKeySpec keySpec = new X509EncodedKeySpec(b1);
    KeyFactory kf = KeyFactory.getInstance(""RSA""); 
    RSAPublicKey rsaPubKey = (RSAPublicKey) kf.generatePublic(keySpec);

    Signature publicSignature = Signature.getInstance(""SHA256withRSA"");
    publicSignature.initVerify(rsaPubKey);

    //EXCEPTION IS THROWN HERE IN THE FOLLOWING LINE
    byte[] s = publicSignature.sign();

    return Base64.encodeToString(s, Base64.DEFAULT);
}

","","259","<java><android><encryption><public-key-encryption><rsa-sha256>","0","","0","2018-04-08 16:05:33","","6","","4413406","","2018-04-08 16:05:33","2018-04-08 15:55:14",""
"17720909","how to make amazon EC2 instances authenticate each other automatically?","I am using aws java sdk to launch EC2 instances (running Ubuntu 12.04) and run a distributed tool on them, the tool uses openMPI for message passing between the nodes and openMPI uses SSH to connect nodes with each other. 
The problem is that the EC2 instances don't authenticate each other for SSH connections by default, this tutorial shows how to set up SSH by generating keys and adding them to nodes, However, when I tried to add the generated key to the slaves using the command
$ scp /home/mpiuser/.ssh/id_dsa.pub mpiuser@slave1:.ssh/authorized_keys

I still got permission denied. Also, after generating new keys, I was not able to log in using the "".pem"" key that I got from amazon.
I am not experienced with SSH keys, but I would like to have some way of configuring each EC2 instance (when its firstly created) to authenticate the others, for example by coping a key into each of them. Is this possible and how It could be done?
P.S.: I can connect to each instance once it is launched and can execute any commands on them over SSH. 
","I found the solution, I added the amazon private key (.pem) in the image (AMI) that I use to create the EC2 instances and I changed the /etc/ssh/ssh_config file by adding a new identity file
IdentityFile /path/to/the/key/file

This made SSH recognize the .pem private key when it tries to connect to any other EC2 instance created with the same key. 
I also changed StrictHostKeyChecking to no, which stopped the message ""authenticity of host xxx can't be established"" which requires users interaction to proceed with connecting to that host.
","258","<ssh><amazon-ec2><ubuntu-12.04><public-key-encryption><openmpi>","0","0","1","2013-07-21 14:05:20","17773167","0","","","","","2013-07-18 10:26:38",""
"37622552","value of rolling password generators","Several products like google Authenticator and RSA will display periodic numerical values to authenticate users into a system.

How do the changing numerical values make it more secure?
Is the premise that no one is likely to reverse factor a 256 bit private key in 10 (or X) seconds? Because doesn't that take more like decades/centuries?
Suppose they are able to reverse factor it in an hour while I am still having my authenticated session. If there was a man-in-the-middle, what has expired that would make him less able to reverse the encryption?
Or is it just that the numbers aren't visible in the screen anymore?
","","257","<authentication><encryption><rsa><public-key-encryption><prime-factoring>","1","","0","2016-06-03 20:06:42","","3","","","","","2016-06-03 20:06:42",""
"8538006","Would there be any problems using private/public key encryption for saving a password?","Using hashing algorithms like md5 we suffer from a limited entropy which means that very long passwords might result in hashes that can be regenerated by a shorter password.
I was thus wondering if it would be a good idea to store a password encrypted with the public key of public/private key encryption on the server. As decrypting is not needed, one could just throw away the secret key to avoid losing passwords when the server is compromised.
However, this method does not seem to be used widely. So are there drawbacks? If yes, then which?
","There are several drawbacks.  Among them:

You now have a token which must be protected.  If someone gets your secret key, they have every password that was encrypted with that key.  Asymmetric encryption is less of an issue if you ""lose"" the private key, but you better pray all copies of it are gone.  Hashes can't be decrypted, period.
An encrypted password can be pretty much any length, and thus would require a pretty large field in the database (or length limits for the plaintext) in order to be stored.  Hashes have a known length.
If you can decrypt the password, you know it.  If ever there was a problem with someone using that password to break into something else, everyone who knew that password belonged to that user is a suspect.  That now means you.  Even if you use one-way encryption as a hash, you'd better be able to prove you can't decrypt it -- and then, if you don't want to decrypt it, why encrypt?

Generally, you'd only choose encryption over hashing when you have to know the password for something else -- like, say, when you're using it to log in to another system on behalf of the user.  And ideally, you'd exhaust all other possibilities first.
","256","<passwords><public-key-encryption>","1","3","2","2011-12-16 17:53:59","8538136","3","","","","","2011-12-16 17:38:37",""
"8538006","Would there be any problems using private/public key encryption for saving a password?","Using hashing algorithms like md5 we suffer from a limited entropy which means that very long passwords might result in hashes that can be regenerated by a shorter password.
I was thus wondering if it would be a good idea to store a password encrypted with the public key of public/private key encryption on the server. As decrypting is not needed, one could just throw away the secret key to avoid losing passwords when the server is compromised.
However, this method does not seem to be used widely. So are there drawbacks? If yes, then which?
","Well there is always the drawback that computing a cryptographic hash is much less costly than encrypting a tiny password with a public-key encryption algorithm.
Secondly, you still suffer from limited entropy with public-key encryption, your bit string will still be limited. If you need more bits, use a hash with a bigger internal state (SHA-512, Whirlpool, etc...)
Third, you would need to store the public key along with the password, which results in a pretty hefty storage cost (considering how big public keys are), and if you're thinking of using the same public key for all passwords, don't - if that key is compromised it's over.
Also another consideration: without a password size limit there's a chance even padded block encryption will result in different storage sizes for different passwords, which can make database indexing a hell of a lot more difficult (probably not a huge concern but to keep in mind).
And finally, the biggie - hashes are meant to unequivocally destroy all structure in the input data, which is exactly what you want when storing passwords for verification. Encryption algorithms don't do that - they transform the data to make it unintelligible without the proper key, which sort of goes against what you're trying to use it for.
So, no, this method should not be used because it is self-defeating. Use a hash with a bigger internal state.
","256","<passwords><public-key-encryption>","1","1","2","2011-12-16 17:53:59","8538136","3","","","","","2011-12-16 17:38:37",""
"52652937","Diffie-Hellman key exchange over the network or any other key exchange","What is the correct approach to build an end to end encrypted service ? 
My thought process - 

Create public keys and private keys for a user, share the key using public key with the receiver in the handshake stage (when two users chat initiate the chat)
Once the keys are obtained by both the parties, I suppose the pycrypto library can be used to encrypt the Tx side message and same can be decrypt on the Rx side using the key shared in the first step.

My problem - how can I achieve the DH key exchange? Do we have libraries in python? 
PS: The application is being built using gRPC,
Thanks
","How about not reinventing the wheel:
import socket
import ssl
s = socket.socket(...)
secure = ssl.wrap_socket(s, keyfile=""mykey"", certfile=""mycert"")

openssl will set up an ssl session and do the negotiation.  You can then communicate over the secured socket.
","256","<python><python-3.x><encryption><public-key-encryption><grpc>","1","0","1","2018-10-04 18:18:48","","6","","9655732","","2018-10-04 18:18:48","2018-10-04 18:06:02",""
"5866147","What is X.509 and how does one use it?","What is X.509?
How does one use it in REST web service for authentication?
","X.509
As stated above in comments your question is too bread.
I assume that you mean authetication using SSL with Client Authentication. But may be you mean something else...
Anyway, Basically you need to configure SSL with Client Authentication.
Most servlet containers (like Tomcat) or Web Servers (like Apache) can do it for you.
Here's guide how to configure SSL in Tomcat. Pay attention that clientAuth should be true,
","255","<web-services><rest><public-key-encryption><pem>","1","0","1","2018-02-13 19:35:50","5870918","1","","5794048","","2018-02-13 19:35:50","2011-05-03 06:58:44",""
"6017615","Encrpytion between iPhone and a php page with Key exchange","I need to send data to and from a php-page from my iPhone application and now I have a couple of questions to get it right the first time, and the best result:)
Lets start with the transfer of data.
Which is the best way to get the data from a php-page?
Option 1: Use NSString in a background thread
[[NSString alloc] initWithContentsOfURL:url];

Or Option 2: Use NSURLConnection with delegates?
Then we have the encryption part. I have google a little bit but haven't found so much. I need to be able to encrypt and decrypt on both sides (both in the iPhone app and on the php-page). What encryption is best for this? Are there any implementations of any good encryption?
And last, for key-exchange. I thinking of using diffie-hellman, which ""require"" large prime-numbers. Are there any easy way to generate such thing (on both the iPhone and the php-page)?
","Have you considered using HTTPS? SSL/TLS seems to match what you're looking for in terms of encryption, key exchange, etc. HTTP on top of this will get you to transfer data to the PHP page.
","254","<php><iphone><encryption><public-key-encryption><diffie-hellman>","0","1","1","2011-05-16 12:54:34","","1","","","","","2011-05-16 12:48:28",""
"41546807","Getting javax.crypto.IllegalBlockSizeException: last block incomplete in decryption error","I am new to java, so please forgive me for silly questions
1) my project moved from netbeans 6 to 8
2) jdk moved from 6u45 to 8u11
3) After successful setup to new environment when I debug

got error: javax.crypto.IllegalBlockSizeException: last block
  incomplete in decryption

Stacktrace:

com.alstom.tsoft.controller.system.ParameterTablesController$LoadOfflineWorker
  - [javax.crypto.CipherInputStream.getMoreData(CipherInputStream.java:121),
  javax.crypto.CipherInputStream.read(CipherInputStream.java:192),
  com.alstom.tsoft.crypto.CryptoManager.decryptString(CryptoManager.java:146),
  com.alstom.tsoft.io.CryptedFieldReader.readField(CryptedFieldReader.java:58),

4) It never happened in previous environment(jdk6 and netbeans 6), that is the only change in project.
We are using following input:
private static final String ALGO_TYPE = ""AES"";
private static final String ALGO_FULL_NAME = ""AES/ECB/PKCS5Padding"";
private static final String ALGO_PROVIDER = ""BC"";

public String encryptString(String input) throws NoSuchAlgorithmException,NoSuchProviderException,
       NoSuchPaddingException,InvalidKeyException,IOException {
    StringBuffer output = new StringBuffer();
    CipherInputStream cis = new CipherInputStream(
           new ByteArrayInputStream(input.getBytes()),
           getEncryptionCipher());                
    int b;
    while ( ( b = cis.read() ) != -1 ) {           
       String twoHexDigit = String.format(""%1$02x"",b);           
       //m_logger.info("":""+b+"":""+twoHexDigit.toUpperCase());
       output.append(twoHexDigit.toUpperCase());
    }
    return output.toString();
}
//Dencryption
public String decryptString(String input) throws NoSuchAlgorithmException,NoSuchProviderException,
       NoSuchPaddingException,InvalidKeyException,IOException {       
    StringBuffer output = new StringBuffer();                        
    byte[] inputBytes = convertHexStringToByte(input);        

    CipherInputStream cis = new CipherInputStream(
           new ByteArrayInputStream(inputBytes), 
           getDecryptionCipher());                      
    int b;
    while ( ( b = cis.read() ) != -1 ) {
       output.append(new Character((char)b));
    }                                              
    return output.toString();
}

Please suggest where I am doing wrong and how to debug
Thanks in advance
","","248","<java><swing><encryption><netbeans><public-key-encryption>","2","","0","2017-01-13 06:38:24","","5","","7394145","","2017-01-13 06:38:24","2017-01-09 11:17:48",""
"15055650","Encrypting connection in Java without SSL","I have a server and a client connecting with raw sockets. I want the connection to be encrypted, but SSL is not an option.
Ideally I want to mimic SSH's encryption, havind a public key on the server and a private key on the client, and generating a session-key everytime.
How should I implement this? Any examples?
","","248","<java><sockets><client-server><public-key-encryption>","0","","0","2013-02-24 19:27:46","","6","1","","","","2013-02-24 19:27:46",""
"23378088","How represent message in elgamal elliptic curve Scheme?","I read about elgamal elliptic curve Scheme but I didn't understood how it represent message in this algorithm. If the message m has 128 bit and base point b(x,y) and private key k1 and public key is pub= k1 * b.now Is message m should be is represent in coordinates m(x,y) or not neccessary may be integer number. I need three requests 

How it represent message in this algorithm.
Where I can find code algorithm for standard Elgamal elliptic curve by java.
any link explain a bout. How it work..

","","246","<java><algorithm><public-key-encryption><elgamal>","0","","0","2015-03-20 17:15:47","","3","","","","","2014-04-30 01:21:32",""
"50324649","how to encrypt the data using node and decrypt data using only webcrypto","How to encrypted server data from node js stored in indexeddb and decrypted data from indexeddb using webcrypto technology
And it works on offline mode also...And then if using rsa encryption how to use that same key values which can be used in webcrypto ..
","Take a look at this site for examples of using webcrypto: https://github.com/diafygi/webcrypto-examples
For how to store a key in indexdb see:
https://gist.github.com/saulshanabrook/b74984677bccd08b028b30d9968623f5
On node you will need:
https://www.npmjs.com/package/node-webcrypto-ossl
","244","<javascript><node.js><encryption><public-key-encryption><webcrypto-api>","-3","0","1","2018-05-17 03:13:52","","3","","","","","2018-05-14 06:59:14",""
"51887234","Public Key Generation from .cer file not working on Android 28","I have a method that generates a public key from .cer file. I conver the .cer file contents into an input stream and once I get the stream I call this method to generate public key
public static void generatePublicKey(InputStream inputStream) {
        try {
            CertificateFactory certificateFactory = CertificateFactory.getInstance(""X.509"", ""BC"");
            Certificate certificate = certificateFactory.generateCertificate(inputStream);
            publicKey = certificate.getPublicKey();
            inputStream.close();
        } catch (CertificateException | IOException e) {
            e.printStackTrace();
        }
    }

It worked until we updated our project to target Android Pie. It looks like google deprecated using BC providers and that's causing the issue. If I use ""BC"" in the getInstance() I get NoSuchAlgorithmException. If I remove ""BC"" and pass CertificateFactory.getInstance(""X.509"") which was the suggested method by Google here https://android-developers.googleblog.com/2018/03/cryptography-changes-in-android-p.html
I get
com.android.org.conscrypt.OpenSSLX509CertificateFactory$ParsingException: com.android.org.conscrypt.OpenSSLX509CertificateFactory$ParsingException: java.lang.RuntimeException: error:0c0000be:ASN.1 encoding routines:OPENSSL_internal:WRONG_TAG
","I had the same error. The problem was how the input stream was created.
Try this:
InputStream is = getAssets().open(""certbase64.cer"");
BufferedInputStream bis = new BufferedInputStream(is);    
CertificateFactory cf = CertificateFactory.getInstance(""X.509"");
Certificate cert = cf.generateCertificate(bis);

The file has to be in the ""assets"" folder.
","243","<java><android><ssl-certificate><x509certificate><public-key-encryption>","8","0","1","2019-07-09 10:35:27","","1","","","","","2018-08-17 01:21:09",""
"52073156","Encryption of an public rsa key file with Poco fails with ""file access error""","I'm trying to encrypt an rsa public key that I have generated using libary poco crypto. The idea came from these answers (C++ Encrypt a text file, allow use of decrypt via ifstream). The pubkey is in the form of 
""MIIBIDANBgkqhkiG.........==
I'm using ubuntu 16.04 and poco library version 1.7.8p2 which has been built with OpenSSL 1.0.2g.
The code I use is the following:  
#include <iostream>
#include <fstream> 
#include ""Poco/Crypto/CipherFactory.h""
#include ""Poco/Crypto/Cipher.h""
#include ""Poco/Crypto/RSADigestEngine.h""

using namespace std;
using namespace Poco::Crypto;

int main(int argc, char** argv)   
{ 
    try {
  Cipher::Ptr pCipher = CipherFactory::defaultFactory().createCipher(RSAKey(""pubkey.txt""));       
    } 
    catch (const exception& exc)
        {
            cout << exc.what() << endl;
        }   
}

When I run the above code I get the exception ""file access error""
The txt file is given all the permissions to read write and execute.
Afterwards I tried with the istream constructor that RSAKey class provides:
int main(int argc, char** argv)

{
    try {

        ifstream myfile(""pubkey.txt"");
        Cipher::Ptr pCipher = CipherFactory::defaultFactory().createCipher(RSAKey(&myfile));

    catch (const exception& exc)

    {

      cout << exc.what() << endl;

    }

}

But I got the same error.
It worked when I replaced the above code with the following line:
Cipher::Ptr pCipher = CipherFactory::defaultFactory().createCipher(RSAKey(RSAKey::KL_1024, RSAKey::EXP_SMALL));

But this is not what I want. 
I also print the text file into a string by using  
ifstream myfile(""pubkey.txt"");
string file;
myfile >> file;
file;

and the file is correctly written into the string.
What am I doing wrong in this case?
","","242","<c++><text><public-key-encryption><poco-libraries>","0","","0","2018-09-16 13:53:08","","3","","1033581","","2018-09-16 13:53:08","2018-08-29 08:43:24",""
"6755471","Looking for strong key en/decryption algorithm which will ""loudly"" fail on corrupt or modified data?","I'm looking for a strong key encryption algorithm that has the additional feature that when the encrypted file gets corrupted or tempered with it will fail ""loudly""; i.e. it will fail and tell me about it instead of producing garbage as decrypted output. 
Ideally one which comes standard with Java. Does AES do this?
Thanks,
Carsten
PS> I know that I can do this manually by additionally computing a hash on the encrypted file, but I'd like to avoid doing that.
[edit: removed ""public / private""  as not really necessary for me, and inconsistent as people pointed out]
","You probably should check out PKCS #7, which is also used in S/MIME. It supports strong encryption and authentication, and is widely used and available via many implementing libraries. Bouncy Castle would be a good Java option.
","241","<java><encryption><public-key-encryption>","0","0","5","2011-07-20 09:21:00","6755578","3","3","182837","","2011-07-20 04:57:46","2011-07-19 23:48:09",""
"6755471","Looking for strong key en/decryption algorithm which will ""loudly"" fail on corrupt or modified data?","I'm looking for a strong key encryption algorithm that has the additional feature that when the encrypted file gets corrupted or tempered with it will fail ""loudly""; i.e. it will fail and tell me about it instead of producing garbage as decrypted output. 
Ideally one which comes standard with Java. Does AES do this?
Thanks,
Carsten
PS> I know that I can do this manually by additionally computing a hash on the encrypted file, but I'd like to avoid doing that.
[edit: removed ""public / private""  as not really necessary for me, and inconsistent as people pointed out]
","You said that you want to use public/private key algorithm so asymetric. For example RSA encryption is using PKCS#1 padding. If you use Cipher.getInstance(""RSA"") this padding is default. If decryption fails it is very probable that padding will be corrupted. In java you will get BadPaddingException.
Nevertheless I strongly suggest using hashing (even fast MD5) or simple control sum instead. Look how it is done in IPSec. IPsec uses symmetric encription (DES) and  HMAC (Message Authentication Codes using Hashing) - a mechanism for message authentication using cryptographic hash functions. Maybe, if you don't need to hide data you should use HMAC only?
I can guess that you don't need encryption, but digital signature. In fact digital signature is an encrypted (with private key) hash of a message. Verification is a decryption of this hash and comparation with computed from plaintext message.
If your provide more detail description then we can help to find the best solution. 
","241","<java><encryption><public-key-encryption>","0","2","5","2011-07-20 09:21:00","6755578","3","3","182837","","2011-07-20 04:57:46","2011-07-19 23:48:09",""
"6755471","Looking for strong key en/decryption algorithm which will ""loudly"" fail on corrupt or modified data?","I'm looking for a strong key encryption algorithm that has the additional feature that when the encrypted file gets corrupted or tempered with it will fail ""loudly""; i.e. it will fail and tell me about it instead of producing garbage as decrypted output. 
Ideally one which comes standard with Java. Does AES do this?
Thanks,
Carsten
PS> I know that I can do this manually by additionally computing a hash on the encrypted file, but I'd like to avoid doing that.
[edit: removed ""public / private""  as not really necessary for me, and inconsistent as people pointed out]
","If you want authenticity of your data, then you could apply a MAC (Message Authentication Code) or a digital signature on your data. 
A viable solution using asymmetric public/private keys would be to wrap your data in a SignedData which then itself would be the payload of an EnvelopedData (cf. CMS).
Signature validation on your SignedData will loudly fail if somebody tampered with the contents.
If you don't want to involve asymmetric keys, another standardized way to achieve your goal is using the AuthenticatedData structure described in the same RFC. The payload would be your already encrypted data, and the MAC would additionally ensure integrity and authenticity, again failing noticeably if the contents were tampered with.
The advantage of using a standard such as CMS here is a) that libraries already exist that support these features out of the box and b) that you can rely on something that has been tested and analyzed, so you don't run the risk of creating something insecure, something that happens all too easily with these kind of things.   
","241","<java><encryption><public-key-encryption>","0","2","5","2011-07-20 09:21:00","6755578","3","3","182837","","2011-07-20 04:57:46","2011-07-19 23:48:09",""
"6755471","Looking for strong key en/decryption algorithm which will ""loudly"" fail on corrupt or modified data?","I'm looking for a strong key encryption algorithm that has the additional feature that when the encrypted file gets corrupted or tempered with it will fail ""loudly""; i.e. it will fail and tell me about it instead of producing garbage as decrypted output. 
Ideally one which comes standard with Java. Does AES do this?
Thanks,
Carsten
PS> I know that I can do this manually by additionally computing a hash on the encrypted file, but I'd like to avoid doing that.
[edit: removed ""public / private""  as not really necessary for me, and inconsistent as people pointed out]
","I am nearly certain that any cryptographic system that is sensitive to the content (in the way that you want) will be leaking way too much info to be good encryption.
The reason we have specialized, concern specific, algorithms is (imo) precisely for this reason.  
It should be a trivial matter for you to provide an interface that includes the message digest in the (compound) plain-text and then apply encryption.  On decryption, your simple wrapper will seek a (fixed) n-byte matter (somewhere in the compound plain-text)  
e.g. encrypt this:
   +--------------+----------------//----------+
   | digest bytes | content (plain-text)       |
   +--------------+----------------//----------+

","241","<java><encryption><public-key-encryption>","0","1","5","2011-07-20 09:21:00","6755578","3","3","182837","","2011-07-20 04:57:46","2011-07-19 23:48:09",""
"6755471","Looking for strong key en/decryption algorithm which will ""loudly"" fail on corrupt or modified data?","I'm looking for a strong key encryption algorithm that has the additional feature that when the encrypted file gets corrupted or tempered with it will fail ""loudly""; i.e. it will fail and tell me about it instead of producing garbage as decrypted output. 
Ideally one which comes standard with Java. Does AES do this?
Thanks,
Carsten
PS> I know that I can do this manually by additionally computing a hash on the encrypted file, but I'd like to avoid doing that.
[edit: removed ""public / private""  as not really necessary for me, and inconsistent as people pointed out]
","You need to use a MAC to validate that the data isn't corrupted or modified. I suggest you read this.
","241","<java><encryption><public-key-encryption>","0","0","5","2011-07-20 09:21:00","6755578","3","3","182837","","2011-07-20 04:57:46","2011-07-19 23:48:09",""
"39591827","Encrypting data in php and decryption in javascript","I am working with 2 servers.
I want to create a pair of keys and store the private key in local storage and send the public key to PHP server.
basically encryption of data with the public key in PHP and decryption of data in JavaScript
Any suggestion.. what should I do.
I already tried few things but the result is not coming like for (public key)[http://phpseclib.sourceforge.net/rsa/examples.html#convert] and (private key)[https://github.com/travist/jsencrypt]
thanks.
Update:
AIM: the aim is to send data from PHP server to client side with safety.
Update Edit :
how safe is it to keep private key in php code and giving public key to client side(javascript server node.js) on call... like for sending data from node.js server to php server.... is that safe without https ??
Or if we use https then we don't need to use this methed...??
Thanks
","If your aim is to send data from php server to client side with safety, then consider using HTTPS.
What you're trying to do instead is extremely hard to get right. If you don't use HTTPS then it's pointless because your visitors won't be able to know who they are talking to and whether the key generation and decryption code is trustworthy. If you're using HTTPS then you already send data from php server to client side with safety (using private and public keys) and encrypting it once more wouldn't do anything.
If you are trying to protect that secret from other JavaScript code running in the browser, it will still not do anything because having the private key, encryption algorithm and encrypted message in your browser is not safer than having it in clear text.
Additionally, there is a lot of room for subtle errors in key generation, key distribution, the encryption algorithm, handling the encrypted message etc. Even if you could do all of that correctly, what you would get is at most what you already have with HTTPS.
And don't think it's easy - OpenSSL with good intentions and experienced developers is probably a world record holder for the number of CVE entries because this stuff is extremely hard to get right.
Make sure you read this classic article:

JavaScript Cryptography Considered Harmful

Also worth reading:

What’s wrong with in-browser cryptography?

","240","<javascript><php><node.js><rsa><public-key-encryption>","0","2","1","2016-09-27 22:05:13","39592167","10","","6777962","","2016-09-20 12:37:20","2016-09-20 10:31:01",""
"41421154","unable to verify string signed by openssl with dsa key","Adapting the directions at Creating a DSA Signature from the Linux command line I created a DSA signed message:
echo ""foobar"" > foo.txt
openssl dgst -dss1 -sign dsa_priv.pem foo.txt > sigfile.bin

The directions actually used foo.sha1 instead of foo.txt, where foo.sha1 was generated by sha1sum but signing a hash seems a bit redundant since DSA is, itself, supposed to do hashing.
So, anyway, I did that. Here's the private key I used (I generated it specifically for testing purposes):
-----BEGIN DSA PRIVATE KEY-----
MIIBvAIBAAKBgQDsGAHAM16bsPlwl7jaec4QMynYa0YLiLiOZC4mvH4UW/tRJxTz
aV7eH1EtnP9D9J78x/07wKYs8zJEWCXmuq0UluQfjA47+pb68b/ucQTNeZHboNN9
5oEi+8BCSK0y8G3uf3Y89qHvqa9Si6rP374MinEMrbVFm+UpsGflFcd83wIVALtJ
ANi+lYG7xMKQ/bE4+bS8gemNAoGBAORowvirD7AB9x2SpdiME41+O4jVR8rs6+GX
Ml3Hif6Yt1kem0CeraX9SNoyBNAzjD5TVMGIdGlgRr6GNreHeXMGWlvdDkvCACER
ZEEtMsKZicm+yl6kR8AGHTCA/PBltHfyrFQd4n9I//UDqI4RjqzvpCXGQcVEsSDY
CCBGBQJRAoGBALnHTAZlpoLJZuSBVtnMuRM3cSX43IkE9w9FveDV1jX5mmfK7yBV
pQFV8eVJfk91ERQ4Dn6ePLUv2dRIt4a0S0qHqadgzyoFyqkmmUi1kNLyixtRqh+m
2gXx0t63HEpZDbEPppdpnlppZquVQh7TyrKSXW9MTzUkQjFI9UY7kZeKAhQXiJgI
kBniZHdFBAZBTE14YJUBkw==
-----END DSA PRIVATE KEY-----

Here's the hex encoded output of sigfile.bin:
302c021456d7e7da10d1538a6cd45dcb2b0ce15c28bac03402147e973a4de1e92e8a87ed5218c797952a3f854df5

I'm now trying to verify this in Java with BouncyCastle and am unable to do so. Here's my Java code:
import java.io.StringReader;
import org.bouncycastle.openssl.PEMReader;
import java.security.interfaces.DSAPublicKey;
import org.bouncycastle.crypto.params.DSAPublicKeyParameters;

import org.bouncycastle.crypto.signers.DSADigestSigner;
import org.bouncycastle.crypto.signers.DSASigner;
import org.bouncycastle.crypto.digests.SHA1Digest;
import org.bouncycastle.crypto.params.DSAParameters;

public class DSA
{
    public static void main(String[] args)
    throws Exception
    {
        byte[] message = ""foobar"".getBytes();
        byte[] signature = hexStringToByteArray(""302c021456d7e7da10d1538a6cd45dcb2b0ce15c28bac03402147e973a4de1e92e8a87ed5218c797952a3f854df5"");

            String key = ""-----BEGIN PUBLIC KEY-----\n"" +
                ""MIIBuDCCASwGByqGSM44BAEwggEfAoGBAOwYAcAzXpuw+XCXuNp5zhAzKdhrRguI\n"" +
                ""uI5kLia8fhRb+1EnFPNpXt4fUS2c/0P0nvzH/TvApizzMkRYJea6rRSW5B+MDjv6\n"" +
                ""lvrxv+5xBM15kdug033mgSL7wEJIrTLwbe5/djz2oe+pr1KLqs/fvgyKcQyttUWb\n"" +
                ""5SmwZ+UVx3zfAhUAu0kA2L6VgbvEwpD9sTj5tLyB6Y0CgYEA5GjC+KsPsAH3HZKl\n"" +
                ""2IwTjX47iNVHyuzr4ZcyXceJ/pi3WR6bQJ6tpf1I2jIE0DOMPlNUwYh0aWBGvoY2\n"" +
                ""t4d5cwZaW90OS8IAIRFkQS0ywpmJyb7KXqRHwAYdMID88GW0d/KsVB3if0j/9QOo\n"" +
                ""jhGOrO+kJcZBxUSxINgIIEYFAlEDgYUAAoGBALnHTAZlpoLJZuSBVtnMuRM3cSX4\n"" +
                ""3IkE9w9FveDV1jX5mmfK7yBVpQFV8eVJfk91ERQ4Dn6ePLUv2dRIt4a0S0qHqadg\n"" +
                ""zyoFyqkmmUi1kNLyixtRqh+m2gXx0t63HEpZDbEPppdpnlppZquVQh7TyrKSXW9M\n"" +
                ""TzUkQjFI9UY7kZeK\n"" +
                ""-----END PUBLIC KEY-----"";
        PEMReader reader = new PEMReader(new StringReader(key));
        DSAPublicKey decoded = (DSAPublicKey) reader.readObject();

        DSADigestSigner dsa = new DSADigestSigner(new DSASigner(), new SHA1Digest());
        DSAParameters params = new DSAParameters(
            decoded.getParams().getP(),
            decoded.getParams().getQ(),
            decoded.getParams().getG()
        );
        DSAPublicKeyParameters publickey = new DSAPublicKeyParameters(decoded.getY(), params);
        dsa.init(false, publickey);
        dsa.update(message, 0, message.length);
        boolean result = dsa.verifySignature(signature);

        System.out.println(result ? ""good"" : ""bad"");
    }

    public static byte[] hexStringToByteArray(String s)
    {
        int len = s.length();
        byte[] data = new byte[len / 2];
        for (int i = 0; i < len; i += 2)
        {
            data[i / 2] = (byte) ((Character.digit(s.charAt(i), 16) << 4)
                + Character.digit(s.charAt(i+1), 16));
        }
        return data;
    }
}

The signature is not validating. Is there something wrong with my Java code? Maybe OpenSSL is doing something weird with dss1?
I was able to validate the signature just fine with OpenSSL:
openssl dgst -dss1 -verify dsa_pub.pem -signature sigfile.bin foo.txt

","(Unix) echo outputs its arguments, space-separated if more than one, PLUS A NEWLINE. Use ""foobar\n"" as the data to verify. Alternatively sign the result of printf '%s' foobar >foo.txt which portably omits the newline; some versions of echo support -n for this purpose, some older ones use \c, and some don't support it at all.
FYI BouncyCastle as of version 150 (2013) no longer has org.bouncycastle.openssl.PEMReader; instead you need PEMParser which returns org.bouncycastle.asn1.x509.SubjectPublicKeyInfo which can be converted to key object by org.bouncycastle.openssl.jcajce.JcaPEMKeyConverter or KeyFactory.getInstance(alg).generatePublicKey(new X509EncodedKey(spki.getEncoded())) which is what JcaPEMKeyConverter actually does. 
OTOH you can use org.bouncycastle.jcajce.provider.asymmetric.dsa.DSAUtil.generatePublicKeyParameter to replace that fiddling with the parameter pieces; that's what the BC provider interface (as opposed to the lightweight interface) does. Or of course you could just use JCA in the first place and you don't really need BC at all, since OpenSSL publickey formats (unlike privatekey) are consistently compatible with basic Java crypto.
Also BTW openssl dgst needed the -dss1 hack only through version 0.9.8; since version 1.0.0 released 2010 (but not immediately upgraded by many distros and products due to actual or feared incompatibility) you only need -sha1 and a DSA pubkey.
","239","<java><openssl><bouncycastle><public-key-encryption><dsa>","1","2","1","2017-01-02 07:02:24","41422522","0","","-1","","2017-04-13 12:13:44","2017-01-02 03:51:06",""
"14102132","Best way to protect POSTED data over http?","I have a Chrome extension that I am working on that will POST data to a remote server. I wish to encrypt the data before it gets sent. My server doesn't have HTTPS so I have to send it over plain HTTP.
I currently use RSA 4096-bit public key encryption in the extension in Javascript, and SHA1 hash the data and send the hash and encrypted data via an Ajax post request.
Is this acceptable encryption to be sent over HTTP?
","Well, what Wikipedia tells is:

...and that 2048-bit keys are sufficient until 2030...
  An RSA key length of 3072 bits should be used if security is required beyond 2030

So I'd guess using 4k Bit encryption is kind of paranoid
","237","<javascript><google-chrome><google-chrome-extension><rsa><public-key-encryption>","3","1","2","2012-12-31 13:59:20","14102486","7","","1136195","","2012-12-31 13:25:09","2012-12-31 13:21:54",""
"14102132","Best way to protect POSTED data over http?","I have a Chrome extension that I am working on that will POST data to a remote server. I wish to encrypt the data before it gets sent. My server doesn't have HTTPS so I have to send it over plain HTTP.
I currently use RSA 4096-bit public key encryption in the extension in Javascript, and SHA1 hash the data and send the hash and encrypted data via an Ajax post request.
Is this acceptable encryption to be sent over HTTP?
","Client: Hash your message.  Append the hash to your message.  Encrypt your message + hash.  Send your encrypted message + hash.
Server: Decrypt your message + hash.  Split the message and the hash.  Hash the message.  Make sure that the hash on the server side is the same as the hash from the client side.  If these don't match, then there was either some bits that switched on the wire, or someone has altered your message.
And yes,  RSA 4096-bit public key encryption is more than sufficient.
","237","<javascript><google-chrome><google-chrome-extension><rsa><public-key-encryption>","3","1","2","2012-12-31 13:59:20","14102486","7","","1136195","","2012-12-31 13:25:09","2012-12-31 13:21:54",""
"44828856","Google IAP Public Keys Expiry?","This page provides public keys to decrypt headers from Google's Identity Aware Proxy. Making a request to the page provides its own set of headers, one of which is Expires (it contains a datetime). 
What does the expiration date actually mean? I have noticed it fluctuating occasionally, and have not noticed the public keys changing at the expiry time. 
I have read about Securing Your App With Signed Headers, and it goes over how to fetch the keys after every key ID mismatch, but I am looking to make a more efficient cache that can fetch the keys less often based on the expiry time.
Here are all the headers from the public keys page:
Accept-Ranges →bytes
Age →1358
Alt-Svc →quic="":443""; ma=2592000; v=""39,38,37,36,35""
Cache-Control →public, max-age=3000
Content-Encoding →gzip
Content-Length →519
Content-Type →text/html
Date →Thu, 29 Jun 2017 14:46:55 GMT
Expires →Thu, 29 Jun 2017 15:36:55 GMT
Last-Modified →Thu, 29 Jun 2017 04:46:21 GMT
Server →sffe
Vary →Accept-Encoding
X-Content-Type-Options →nosniff
X-XSS-Protection →1; mode=block

","The Expires header controls how long HTTP caches are supposed to hold onto that page. We didn't bother giving Google's content-serving infrastructure any special instructions for the keyfile, so whatever you're seeing there is the default value.
Is there a reason the ""refresh the keyfile on lookup failure"" approach isn't a good fit for your application? I'm not sure you'll be able to do any better than that, since:

Unless there's a bug or problem, you should never get a key lookup failure.
Even if you did have some scheduled key fetch, it'd probably still be advisable to refresh the keyfile on lookup failure as a fail-safe.

We don't currently rotate the keys super-frequently, though that could change in the future (which is why we don't publish the rotation interval), so it shouldn't be a significant source of load. Are you observing that refreshing the keys is impacting you?
--Matthew, Google Cloud IAP engineer
","236","<google-cloud-platform><jwt><public-key-encryption><google-identity><google-iap>","0","1","1","2017-07-04 04:27:56","44897043","0","","4926817","","2017-06-29 15:12:44","2017-06-29 15:07:09",""
"36364887","How or What is the best way to pass an encryption key?","Ok. so, encrypted data is sent from the computer to the server and spread to other computers. And, let say there is a person in the middle attack? 
Here is where I'm confuse; The client/server need to decrypt the data with the key, but if the key can be seen by the client computer then the attacker can see it in the data as well. The key can be encrypted, but another key would have to be sent un-encrypted. so how do you pass the ""key"" to decrypt the data? 
So when I hear new chat system saying they are enprypted their client messages; I'm wondering, how are they doing it? When hacker can try to find the key in thier data and decrypt the message.
","","236","<encryption><public-key-encryption><password-encryption><encryption-symmetric><encryption-asymmetric>","0","","0","2016-04-01 20:01:32","","11","","","","","2016-04-01 20:01:32",""
"53595365","Encrypting image files in python3 using RSA algo","i am encrypting images in python3 by using RSA algo, but i am getting some error when i run the code;
the error is:
 File ""encrypt_blob.py"", line 59, in <module>
 encrypted_blob = encrypt_blob(unencrypted_blob, public_key)
 File ""encrypt_blob.py"", line 37, in encrypt_blob
 chunk += "" "" * (chunk_size - len(chunk))
 TypeError: can't concat str to bytes

I have generated the keys previously and using those in this script to encrypt the image file. But i am getting this error. as i have found this code on a blog, I think the code is written on python2 but i am using python3, and i don't know how to resolve the problem 
The code is: 
from Crypto.PublicKey import RSA
from Crypto.Cipher import PKCS1_OAEP
import zlib
import base64

def encrypt_blob(blob, public_key):
  #Import the Public Key and use for encryption using PKCS1_OAEP
  rsa_key = RSA.importKey(public_key)
  rsa_key = PKCS1_OAEP.new(rsa_key)

  #compress the data first
  blob = zlib.compress(blob)

  #In determining the chunk size, determine the private key length used in bytes
#and subtract 42 bytes (when using PKCS1_OAEP). The data will be in encrypted
#in chunks
chunk_size = 470
print(type(chunk_size))
offset = 0
end_loop = False
encrypted =  """"
print(type(encrypted))

while not end_loop:
    #The chunk
    chunk = (blob[offset:offset + chunk_size])

    #If the data chunk is less then the chunk size, then we need to add
    #padding with "" "". This indicates the we reached the end of the file
    #so we end loop here
    if len(chunk) % chunk_size != 0:
        end_loop = True
        chunk += "" "" * (chunk_size - len(chunk))

    #Append the encrypted chunk to the overall encrypted file
    encrypted += (rsa_key.encrypt(chunk))

    #Increase the offset by chunk size
    offset += chunk_size

#Base 64 encode the encrypted file
return base64.b64encode(encrypted)

#Use the public key for encryption
fd = open(""public_key.pem"", ""rb"")
public_key = fd.read()
fd.close()

#Our candidate file to be encrypted
fd = open(""img.jpg"", ""rb"")
unencrypted_blob = fd.read()
fd.close()

encrypted_blob = encrypt_blob(unencrypted_blob, public_key)

#Write the encrypted contents to a file
fd = open(""encrypted_img.jpg"", ""wb"")
fd.write(encrypted_blob)
fd.close()

Looking forward to suggestions. Thank you.
","","236","<python><python-3.x><python-2.7><rsa><public-key-encryption>","2","","0","2018-12-03 13:59:43","","0","","","","","2018-12-03 13:59:43",""
"4475415","Public key cryptography with user-chosen passwords?","The whole point is designing a simple system where users are able to send encrypted messages between them (with support from a server).
In this scenario, clients have no local storage, so I'm forced to use passwords that users will be able to choose, remember and type when needed. (I know this weakens the whole system but this is a hard requirement)
Another requirement is that the server cannot store cleartext private keys or any other data which can be used to decrypt messages (eg: only the user can read encrypted messages, server admins should not be able to).
My approach would be to generate an asymmetric keypair on the client, publish public key on the server along with an encrypted copy of the private key (encrypted with the user password).
Users can then send encrypted messages to other users, using the recipient published public key; when a user needs to decrypt a message, his (encrypted) private key is fetched on the client from the server, decrypted with the password provided by the user and then used to decrypt messages.
Does this make any sense? Is there any flaw in this system design? (apart from the weakness derived from users choosing short or bad passwords)
Is this approach already used in similar scenarios?
Thank you :)
","As described, the scheme seems reasonable in that it should allow someone to send another person a message that only the recipient can read.  There are some items that come to mind that you may have already thought about but left out for brevity:

When encrypting the private key, use something like PBKDF2 with salt and some fairly large number it iterations.
This is probably implied, but rather than encrypt with the public key, it probably makes sense to generate a random key (e.g., 32-bytes of random data if using, for example, AES-256). Encrypt the message with that key, encrypt the key with the public key, and send both pieces.
As described, there is no identification of the sender.  It allows purely anonymous messages to be sent. This might be intended, but if not, then some kind of identification/authentication would be necessary.
Somewhat similar to the previous entry, no message authentication is described. The attacker could change the encrypted message and the recipient would not be able to tell that it was changed.  Although, if it is a text message, it would be pretty clear that it had been modified, because it would be just garbled text. There are some types of data, though, that might not be so easy to tell if it had been modified.

","234","<security><password-protection><public-key><public-key-encryption>","6","1","4","2010-12-18 08:16:02","4475818","2","1","","","","2010-12-17 22:46:02",""
"4475415","Public key cryptography with user-chosen passwords?","The whole point is designing a simple system where users are able to send encrypted messages between them (with support from a server).
In this scenario, clients have no local storage, so I'm forced to use passwords that users will be able to choose, remember and type when needed. (I know this weakens the whole system but this is a hard requirement)
Another requirement is that the server cannot store cleartext private keys or any other data which can be used to decrypt messages (eg: only the user can read encrypted messages, server admins should not be able to).
My approach would be to generate an asymmetric keypair on the client, publish public key on the server along with an encrypted copy of the private key (encrypted with the user password).
Users can then send encrypted messages to other users, using the recipient published public key; when a user needs to decrypt a message, his (encrypted) private key is fetched on the client from the server, decrypted with the password provided by the user and then used to decrypt messages.
Does this make any sense? Is there any flaw in this system design? (apart from the weakness derived from users choosing short or bad passwords)
Is this approach already used in similar scenarios?
Thank you :)
","If I understand correctly, you want to create a system where two users can initiate private communication through a server that they do not trust.
This won't work.
In the scenario you lay out, the server can generate its own key pair, and publish its public key in place of the users'. When a user encrypts a message, intending it for their partner, they can't detect that the server has substituted its public key. The server decrypts the message, presents it to the server admins, and re-encrypts it (or some new message that they fabricated) with the real partner public key, and forwards it to the destination.
What's missing here is a certificate authority. This is a trusted third party that digitally signs a binding between a public key and a user name. This binding is called a certificate. This way, when the server presents a public key to a client to use for encryption, the client can use the CA's public key to verify the certificate, and be assured that the public key they are about to encrypt with belongs to the intended recipient, and not an attacker.
The users have to trust the CA, which might be more palatable than trusting the server administrators. But, there must also be a tamper-proof way to store the CA certificate. In practice, this is often done using a password-based MAC (message authentication code). Or, the CA could be digitally signed with the user's private key (never seen this done, but it would work). But the tricky part would be getting the CA certificate from a trusted source, bypassing the untrustworthy server.
As far as encrypting the private key with the password, that is done very often, and is as safe as the password you choose.
Alternatively, if the users can share a secret with each other out-of-band, you don't need public key encryption. The client could encrypt the shared secret with a user-selected password, and store the cipher text on the server.
","234","<security><password-protection><public-key><public-key-encryption>","6","2","4","2010-12-18 08:16:02","4475818","2","1","","","","2010-12-17 22:46:02",""
"4475415","Public key cryptography with user-chosen passwords?","The whole point is designing a simple system where users are able to send encrypted messages between them (with support from a server).
In this scenario, clients have no local storage, so I'm forced to use passwords that users will be able to choose, remember and type when needed. (I know this weakens the whole system but this is a hard requirement)
Another requirement is that the server cannot store cleartext private keys or any other data which can be used to decrypt messages (eg: only the user can read encrypted messages, server admins should not be able to).
My approach would be to generate an asymmetric keypair on the client, publish public key on the server along with an encrypted copy of the private key (encrypted with the user password).
Users can then send encrypted messages to other users, using the recipient published public key; when a user needs to decrypt a message, his (encrypted) private key is fetched on the client from the server, decrypted with the password provided by the user and then used to decrypt messages.
Does this make any sense? Is there any flaw in this system design? (apart from the weakness derived from users choosing short or bad passwords)
Is this approach already used in similar scenarios?
Thank you :)
","This sounds something like what hushmail did. However, there was a major problem in that, since they had the private key of the users (encrypted) they just had to push down a hacked java applet which would transmit the user's password to the server (which they did).
A much better solution is to avoid having that private key on the server at all. With the requirement of no local storage, that's out.
Why not use symmetric encryption via a pre-shared password? It can be done without storage on the client side. I believe this is what @erickson was saying in his last paragraph.
","234","<security><password-protection><public-key><public-key-encryption>","6","1","4","2010-12-18 08:16:02","4475818","2","1","","","","2010-12-17 22:46:02",""
"4475415","Public key cryptography with user-chosen passwords?","The whole point is designing a simple system where users are able to send encrypted messages between them (with support from a server).
In this scenario, clients have no local storage, so I'm forced to use passwords that users will be able to choose, remember and type when needed. (I know this weakens the whole system but this is a hard requirement)
Another requirement is that the server cannot store cleartext private keys or any other data which can be used to decrypt messages (eg: only the user can read encrypted messages, server admins should not be able to).
My approach would be to generate an asymmetric keypair on the client, publish public key on the server along with an encrypted copy of the private key (encrypted with the user password).
Users can then send encrypted messages to other users, using the recipient published public key; when a user needs to decrypt a message, his (encrypted) private key is fetched on the client from the server, decrypted with the password provided by the user and then used to decrypt messages.
Does this make any sense? Is there any flaw in this system design? (apart from the weakness derived from users choosing short or bad passwords)
Is this approach already used in similar scenarios?
Thank you :)
","The major problem is that if the decryption code is downloaded from the server, one (either server admin or a hacker that has got to the server) can replace this code. The user on the client side should trust the server, but he has no way to verify the server in order to trust it. 
","234","<security><password-protection><public-key><public-key-encryption>","6","1","4","2010-12-18 08:16:02","4475818","2","1","","","","2010-12-17 22:46:02",""
"15964458","RSA Encryption in iPhone using existing Public Key and MOD","I have RSA Encryption implemented in Android using BouncyCastle API. I have Public Key and MOD which I want to use for iPhone app. The only thing I am concern with using RSA encryption is the encryption part.
Server is same for both Android and iPhone app and has the Private Key to decrypt the data.
Kindly, explain how can I implement the RSAEncrypter in iPhone?
","Try this code might might help or give u some idea.. :
https://discussions.apple.com/thread/1795474?start=0&tstart=0
","234","<iphone><objective-c><encryption><rsa><public-key-encryption>","0","0","1","2013-04-12 06:38:38","","0","","","","","2013-04-12 06:23:24",""
"51003636","Unable to decrypt binary file","I've been trying to encrypt docx file using GPG public key and go's openpgp library. It encrypts document but then I am unable to decrypt it using my private key.
Already tried to do the same with plain text file and decryption worked without any problems.
What am I missing here?
package main

import (
    ""golang.org/x/crypto/openpgp""
    ""bytes""
    ""io/ioutil""
    ""fmt""
    ""os""
)

func main() {
    entitylist, _ := openpgp.ReadArmoredKeyRing(bytes.NewBufferString(...))

    buf := new(bytes.Buffer)
    w, _ := openpgp.Encrypt(buf, entitylist, nil, nil, nil)
    b, _ := ioutil.ReadFile(""in.docx"")

    w.Write(b)
    w.Close()

    bts, _ := ioutil.ReadAll(buf)
    ioutil.WriteFile(""out.gpg"", bts, os.ModePerm)
}

","Sorry guys to take your time it appears that Encode function accepts FileHints struct so passing with binary from solves the problem
w, _ := openpgp.Encrypt(buf, entitylist, nil, &openpgp.FileHints{IsBinary: true}, nil)

More details on FileHints
// FileHints contains metadata about encrypted files. This metadata is, itself,
// encrypted.
type FileHints struct {
    // IsBinary can be set to hint that the contents are binary data.
    IsBinary bool
    // FileName hints at the name of the file that should be written. It's
    // truncated to 255 bytes if longer. It may be empty to suggest that the
    // file should not be written to disk. It may be equal to ""_CONSOLE"" to
    // suggest the data should not be written to disk.
    FileName string
    // ModTime contains the modification time of the file, or the zero time if not applicable.
    ModTime time.Time
}

Thanks.
","233","<go><encryption><public-key-encryption><gnupg>","0","1","1","2018-06-24 12:49:50","51003951","2","","214790","","2018-06-24 12:49:50","2018-06-23 17:43:17",""
"23520028","Error when decrypting with OpenSSL rsa key","I am trying to write a simple application to encrypt/decrypt a buffer of unsigned char using OpenSSL RSA encryption. I have my public key and encrypt an array with 
unsigned char plain [13] = ""Hello World!"";
unsigned char encrypted[1024]={};
unsigned char decrypted[1024]={};
int padding = RSA_PKCS1_OAEP_PADDING;
int flen = 13;
int res = RSA_public_encrypt(flen, plain, encrypted, rsa_pbk, padding);

where rsa_pbk is an RSA structure that contains the key. If I print it, the result is the following hexadecimal array:
13 d0 44 a3 2b 12 67 d8 e2 aa cf 53 6c 81 ed e9 9e 2d 9c dd 1d 28 84 5b 60 93 58 1c 7f eb b 66 26 39 8c 27 48 11 31 6 53 90 16 2e da 5c 7e 48 3e 15 c2 19 d3 10 79 71 1a fa f7 c1 57 93 82 f2 95 1 e d8 70 ba 1b 7e 12 d5 a 34 75 8f 2f 3c a6 60 f1 4b 60 6c 94 3e 4b 72 61 81 fb 89 e2 1e 5a 8 48 55 a5 5f 44 3b a4 e2 16 eb 7e 87 10 18 2e 1b 82 e7 86 43 69 21 ec a5 98 4 de 90 c5 5a 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0

I am a little bit suspicious of the zeros at the end, but it could be ok. But, when I try to decrypt it with 
flen = keysize - 50;
RSA_private_decrypt(flen, encrypted, decrypted, this->rsa_pvk, padding);

I get the following error
error:0407A079:rsa routines:RSA_padding_check_PKCS1_OAEP:oaep decoding error
error:04065072:rsa routines:RSA_EAY_PRIVATE_DECRYPT:padding check failed

that I'm not able to understand. Does anybody know what it means and why it arises?
","Manual page states that: RSA_public_encrypt() returns the size of the encrypted data. RSA_private_decrypt() returns the size of the recovered plaintext. On error, -1 is returned; the error codes can be obtained by ERR_get_error(3).
Your code should look like this:
unsigned char plain [13] = ""Hello World!"";
unsigned char encrypted[1024]={};
unsigned char decrypted[1024]={};
int padding = RSA_PKCS1_OAEP_PADDING;
int flen = 13;
int res = RSA_public_encrypt(flen, plain, encrypted, rsa_pbk, padding);
flen = res;
res = RSA_private_decrypt(flen, encrypted, decrypted, this->rsa_pvk, padding);

","230","<encryption><openssl><rsa><public-key-encryption>","1","2","1","2014-05-07 14:27:49","23520587","0","0","3602256","","2014-05-07 14:19:16","2014-05-07 14:04:16",""
"46646327","Issues in importing a certificate to Spring","I want to hit the REST endpoints of a Server, say xyz.com. They have provided certificates in PEM format which I should be including in my application while connecting to their endpoints.
My application is written on Spring Framework and I need to convert PEM to P12 format as Spring won't accept PEM. This is how I convert:
openssl pkcs12 -export -out certificate.p12 -inkey private.pem -in server_cert.pem

Where,

certificate.p12 = resultant p12 file
private.pem = private key
server_cert.pem = certificate files of the server

The error I get is:

No certificate matches private key.

Now my questions:

Whose private key should be used to generate the P12 file from the PEM file? 
If the private key of client is used to generate p12, how could it possibly match with the certificate (error message becomes obvious)?
Why would I need my private key to communicate with the server? As per my understanding, during an SSL session, the private key of the client doesn't come into the picture. Or is my understanding wrong?
If the private key of the server is used to generate p12, why would they share it?

I'm a novice and therefore any links/suggested-reading/sources/answers are welcome.
","If you look at how the client-authentication works, in the 'Negotiation Phase', the second from the last point says:

The client sends a CertificateVerify message, which is a signature over the previous handshake messages using the client's certificate's private key. This signature can be verified by using the client's certificate's public key. This lets the server know that the client has access to the private key of the certificate and thus owns the certificate.

So to answer your questions:

You should be using the private-key that was given to you.
A PKCS12 is a type of Java KeyStore, which is similar to a standard JKS. It can contain a list of keypair's. But the internet standard of PKCS12 is to have only 1 key pair entry, i.e., 1 Private Key with its associated certificate-chain. Since the private key and the certificate chain were given to you as separate entities, you should be constructing the PKCS12 yourself, which you will be using in your code, to authenticate your client to the server that is providing you the service.
If you look at the steps of how the handshake happens at the protocol level, you should see that the client's private key (your private key) is used to sign some data and send to the server, where the server will be validating the authenticity of the message based on your public key. Once the server validates the message, it will come to a conclusion that you posses the private key.
You wouldn't be given servers private key. You are given your (users) private key, which you guard it and shouldn't be giving to anyone.

There might be something missing or trivial error while you are constructing with p12 with the private key and the certificate chain, which is causing to fail. If it doesn't work out, you could also construct the p12 using the KeyStore api programmatically.
","229","<java><spring><ssl><certificate><public-key-encryption>","0","1","1","2017-10-10 14:45:34","46669646","4","","","","","2017-10-09 12:20:46",""
"4527790","What's a good way to encrypt data using an asymmetric key, that's available to both java and ruby?","I have a customer that wants to encrypt some data in his database (not passwords; this needs actual encryption, not hashing).  The application which will be doing the encrypting/writing is in Java, but the process which will DECRYPT it is behind a secure firewall, and is written in ruby.
The idea was to use a public/private key scheme; the java system would encrypt it with the public key, then the process on his local box would use the private key to decrypt it as needed.
I'm looking for any experience anyone has doing something like that; my main question is what sorts of libraries on java and ruby can interoperate with the same keys and data.
","OpenPGP is supported by both Java and Ruby.
The nice thing about OpenPGP is that key management is all specified upfront, so you don't have to reinvent that particular wheel. (Encrypting and decrypting the data itself isn't hard. Managing the keys in a secure way is.)
","228","<java><ruby><public-key-encryption>","2","4","1","2010-12-24 18:49:21","","0","","","","","2010-12-24 18:30:05",""
"10032664","ArgumentError: message representative out of range when using the rsa gem","I am getting this error when trying to encrypt big messages. I wonder whether this is a limitation with rsa.rb or if I am doing something wrong. Did anyone bump against this error?
This is happening on the client side, where I am encrypting a huge message using the server's public key like this:
RSA::KeyPair.new(nil,server_public_key).encrypt(huge_base64_str)

This code blows up with the ArgumentError: message representative out of range when using the rsa gem
","The best thing to do in this case is to encrypt the message with a symetric key (e.g. AES) and then encrypt the symetric key with rsa. and send the message and the encrypted symetric key.
","226","<ruby-on-rails><ruby><encryption><rsa><public-key-encryption>","0","0","1","2012-04-06 14:05:07","10044613","6","","330889","","2012-04-05 17:06:09","2012-04-05 16:47:46",""
"8300366","How to convert from X.509v2 to X.509v3 key encryption","Who knows how to convert PEM encoded X.509 version 2 certificate with RSA public key to X.509 version 3?
","As far as I know, you cannot change a certificate once issued. You need to re-issue the certificate. The reason being that the certificate contents are hashed by the CA and the hash is encrypted by the CA's private key. If there is a change in the content of the certificate, the exisitng hash will no longer match the calculated hash making your certificate useless.
","226","<encryption><public-key-encryption><public-key>","0","1","2","2011-11-28 22:59:51","8300632","1","","","","","2011-11-28 18:17:00",""
"8300366","How to convert from X.509v2 to X.509v3 key encryption","Who knows how to convert PEM encoded X.509 version 2 certificate with RSA public key to X.509 version 3?
","Vikas is correct, you cannot convert an X.509 certificate as the signature on the certificate is linked to the DER representation of that particular certificate. Any change to the certificate changes its DER representation and thus breaks the signature. If you need a v3 certificate the only option is to issue a new certificate. The public key component only enables you to verify what key was used to sign the certificate, making a signature requires the private key component.
","226","<encryption><public-key-encryption><public-key>","0","1","2","2011-11-28 22:59:51","8300632","1","","","","","2011-11-28 18:17:00",""
"42324465","Android: Cipher with public key from php server","I am trying to encript a string in an Android app with a public key that I get from my php server.
php server code:
$res = openssl_pkey_new();
openssl_pkey_export($res, $privKey);

$pubKey = openssl_pkey_get_details($res);
$pubKey = $pubKey[""key""];

echo $pubKey;

The server create correctly the key. In my app I store the public key in ""response"" variable. This var is like:
response = ""-----BEGIN PUBLIC KEY-----MIIB... etc ...wIDAQAB-----END PUBLIC KEY-----""
Android code:
String pass = ""password"";
String strEncryInfoData="""";
try {
     KeyFactory keyFac = KeyFactory.getInstance(""RSA"");
     KeySpec keySpec = new X509EncodedKeySpec(Base64.decode(response.trim().getBytes(), Base64.DEFAULT));
     Key publicKey = keyFac.generatePublic(keySpec);

     cipher = Cipher.getInstance(""RSA"");
     cipher.init(Cipher.ENCRYPT_MODE, publicKey);
     byte[] cipherText = cipher.doFinal(pass.getBytes());
     strEncryInfoData = new String(Base64.encode(cipherText,Base64.DEFAULT));
} catch (Exception e){

}

When I run the application, appear this error:
java.security.spec.InvalidKeySpecException: java.lang.RuntimeException: error:0D0680A8:asn1 encoding routines:ASN1_CHECK_TLEN:wrong tag
I don't know why the code doesn't encript the password. Any idea? It is about the encode type?
Thanks.
","","225","<java><php><android><public-key-encryption>","0","","0","2017-02-19 09:50:58","","3","3","2239368","","2017-02-19 09:50:58","2017-02-19 06:45:44",""
"54138952","How do I convert a SSH2 PUBLIC KEY (rsa-key file) to PEM? (Base-64 encoded public key of X.509 certificate)","I have a private/public key that was generated by Putty in the following format:
SSH2 PUBLIC KEY rsa-key

However, I am trying to get it to work with Docebo API using the JWT Grant Type, which requires a different format (according to this post).
How would I convert my key(s) to work with that format?  Is there a way within Putty?
","I figured out the steps to take to get the proper format of key using OpenSSL:
openssl genrsa -out private.key 1024
openssl req -new -x509 -key private.key -out publickey.cer 
openssl x509 -in publickey.cer -out publickey.pem

","225","<putty><public-key-encryption><private-key><pem>","0","1","1","2019-01-11 19:04:32","","3","1","","","","2019-01-11 00:51:01",""
"12576463","Problems with sharing public key","I am using a client/server where I have given every client a public key in the application itself and at the start of any conversation between the client and server they share a AES key using this public/private key pair and then every thing is encrypted using this key ....
I wanted to know what problems arise with this model....one would be the server cannot verify who is actually sending the data .digital signature ...but the user would later send it's credentials ....
what can a MIM attack do here?
","In, short this is complicated, don't try to reinvent it, just use SSL. There are multiple ways to get this wrong, unless this is for academic purposes, don't do it. 
","223","<android><security><aes><public-key-encryption>","1","1","2","2012-09-25 05:19:58","","0","","","","","2012-09-25 05:05:39",""
"12576463","Problems with sharing public key","I am using a client/server where I have given every client a public key in the application itself and at the start of any conversation between the client and server they share a AES key using this public/private key pair and then every thing is encrypted using this key ....
I wanted to know what problems arise with this model....one would be the server cannot verify who is actually sending the data .digital signature ...but the user would later send it's credentials ....
what can a MIM attack do here?
","Yes, You are taking a risk here. One(attacker) can take this public key and act as a trusted client. I am guessing you have created public key using ssh-keygen. 
","223","<android><security><aes><public-key-encryption>","1","0","2","2012-09-25 05:19:58","","0","","","","","2012-09-25 05:05:39",""
"32151835","How to create ECDSA key pair without openssl","I am writing a cross-platform application in c++. I would like to know if it is possible to create an ECDSA key pair (public key and private key) without using any external library, just pure c++. Any answer leading me to the right path would be much appreciated.
","","222","<c++><public-key-encryption><ecdsa>","1","","0","2015-08-22 03:01:42","","2","","","","","2015-08-22 03:01:42",""
"45652278","PGP encryption for the server based app","Here is context:
I am using PGP to encrypt messages in a chat web app. After going through some articles, I get brief idea how PGP works and here is how I am doing it with openPGPJs :  

Client(web browser) generate the public/private key-pairs and send public key to server to store it.
Sender use receiver's public key to encrypt data and send it.
Receiver use their own private key to decrypt the message.

As a chat app I need to store all messages and decrypt them when user wants to see old message. decryption of messages need the private key. here the client is web browser which  neither can store the private keys for long nor can keep them safe. so I decided to store the private key on web server. Now client(web browser) asks server for the private key whenever decryption of message needed.     
Considering PGP an End to End protocol, storing private key on server is vulnerable. my question is:

How PGP encryption works for web based applications where client is not able to keep private key safe and confidential? 
Is it Okay to store private key on server?
Is there any better way to do this?  

Thanks for any suggestions.
","","222","<encryption><public-key-encryption><gnupg><pgp><openpgp>","0","","0","2017-08-12 19:12:19","","7","1","3949639","","2017-08-12 19:12:19","2017-08-12 16:04:00",""
"45862317","Update/Delete Certificate chain: Cannot assign the key to the given alias","I want to update my previous self-signed certificate with new one eg: chains which is returned (signed CSR) from TEST CA.  My default keystore is: Windows-MY

Step 1: I have created  a private-public key pair, self-signed
certifcate and CSR(private key is stored in Windows-MY with
self-signed certificate).
Step 2: sent CSR to CA.
Step 3: CA returns a certificate chain for that public key.

Now I want to replace that self-signed certificate with the CA returned certificate. NB: I have the private key stored in my store.

Key privKey = keyStore.getKey(commonName, keyPass);
System.out.println(""invalid private key :"" + (privKey == null));

// keyStore.deleteEntry(commonName);
// keyStore.load(null, keyPass);

if (isPrivateKeyAvailable) {
    System.out.println(""name:"" + commonName + "" is updatded"");
    keyStore.setKeyEntry(commonName, privKey, keyPass, chains);
} else {
    System.out.println(""name:"" + commonName + "" does not exist"");
}

But I am getting these errors:

java.lang.UnsupportedOperationException: Cannot assign the key to the
  given alias.  at
  sun.security.mscapi.KeyStore.engineSetKeyEntry(KeyStore.java:415)     at
  sun.security.mscapi.KeyStore$MY.engineSetKeyEntry(KeyStore.java:55)
    at java.security.KeyStore.setKeyEntry(Unknown Source)   at
  keygenerator.KeyInstaller.installCertificateInWindowsStore(KeyInstaller.java:284)
    at keygenerator.KeyInstaller.doJob(KeyInstaller.java:167)   at
  keygenerator.KeyGeneration.installCertificate(KeyGeneration.java:171)
    at keygenerator.KeyGeneration.main(KeyGeneration.java:68)

","Windows keystore (named Windows-MY from Java) is not directly writable. You need to pack the private key and the certificate chain returned by CA into a PKCS#12 file (.p12) and import it using The Windows import tool.
","220","<java><digital-signature><keystore><public-key-encryption><digital-certificate>","0","1","1","2017-08-24 17:58:18","45863776","0","","1540689","","2017-08-24 17:58:18","2017-08-24 12:59:17",""
"51088085","C# Store Public-Key X.509 encoded key in ANS.1","i am trying to implement an API. (https://www.loxone.com/dede/wp-content/uploads/sites/2/2016/08/0903_Communicating-with-the-Miniserver.pdf)
When you go to Page 5 you will see under 2.b) that I need to store a public key in Format: X.509 encoded key in ANS.1.
The problem is I have no idea how to do this in C#...
Can anyone please help me with that problem :)
Thanks in advance!
Here is an example for the publicKey that I get:
-----BEGIN CERTIFICATE-----MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQC393RoCVFixg3cZicByw05GYqlIkmqfx1lylJqBaF7BMI/FffD5BBoFpFurj4N1pDdMF/QhBEj1Pb3XGOkrHFCinYc0lCMbSjreE+QPjmnWnZeaPd3mtBfdcTSF6hYH0regFU8nvFVgLsoBUCMjuhfsvuaW4sLylU6KhZ9hCqVQwIDAQAB-----END CERTIFICATE-----
","I think you need to export this public key as X.509 encoded as ANS.1 which can be a .pem file.
From https://serverfault.com/questions/9708/what-is-a-pem-file-and-how-does-it-differ-from-other-openssl-generated-key-file/9717#9717 :
PEM on it's own isn't a certificate, it's just a way of encoding data. X.509 certificates are one type of data that is commonly encoded using PEM.
PEM is a X.509 certificate (whose structure is defined using ASN.1), encoded using the ASN.1 DER (distinguished encoding rules), then run through Base64 encoding and stuck between plain-text anchor lines (BEGIN CERTIFICATE and END CERTIFICATE).
You can use openssl to make a .pem file which is ANS.1 compliant.
openssl req -new -x509 -days 365 -nodes -out ./cert.pem -keyout ./cert.pem

","220","<c#><public-key-encryption><x509><public-key>","0","0","2","2018-06-28 18:00:52","","2","","","","","2018-06-28 16:57:55",""
"51088085","C# Store Public-Key X.509 encoded key in ANS.1","i am trying to implement an API. (https://www.loxone.com/dede/wp-content/uploads/sites/2/2016/08/0903_Communicating-with-the-Miniserver.pdf)
When you go to Page 5 you will see under 2.b) that I need to store a public key in Format: X.509 encoded key in ANS.1.
The problem is I have no idea how to do this in C#...
Can anyone please help me with that problem :)
Thanks in advance!
Here is an example for the publicKey that I get:
-----BEGIN CERTIFICATE-----MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQC393RoCVFixg3cZicByw05GYqlIkmqfx1lylJqBaF7BMI/FffD5BBoFpFurj4N1pDdMF/QhBEj1Pb3XGOkrHFCinYc0lCMbSjreE+QPjmnWnZeaPd3mtBfdcTSF6hYH0regFU8nvFVgLsoBUCMjuhfsvuaW4sLylU6KhZ9hCqVQwIDAQAB-----END CERTIFICATE-----
","Presumably, by ""ANS.1"" they meant ""ASN.1"" (Abstract Syntax Notation 1), and by ""ASN.1"" they meant ""DER"" (Distinguished Encoding Rules for Abstract Syntax Notation 1).
To convert your current PEM certificate into a ""DER"" certificate you either a) openssl x509 -in cert.pem -out cert.der -outform der or b) read the base64 string between ""-----BEGIN CERTIFICATE-----"" and ""-----END CERTIFICATE-----"" and convert it to bytes (e.g. Convert.FromBase64String).
","220","<c#><public-key-encryption><x509><public-key>","0","0","2","2018-06-28 18:00:52","","2","","","","","2018-06-28 16:57:55",""
"6025585","DSACryptoProvider fails with mandatory or temporary profiles","The following code fails when the user is logged on under a mandatory or temporary profile.
private static bool VerifySignature(byte[] signature, byte[] data) {    
     DSACryptoServiceProvider verifier = new DSACryptoServiceProvider();
     verifier.FromXmlString(publicKey);
     bool isValid = verifier.VerifyData(data, signature);
     return isValid;
}

where publicKey is an xml string containing elements for P, Q, G, Y, J, etc.
The failure occurs on the FromXmlString method and according to this article using P/Invoke should allow us to get around it. There is even a full blown code version by the same author that looks promising. The problem is that these are both for RSA encryption, and we are using DSA encryption.
Does anyone have any code that will successfully verify the signature of a byte array of data given a byte arry for signature and an xml public key?
","","217","<c#><.net><public-key-encryption><profiles><dsa>","1","","0","2011-05-17 02:24:59","","0","","","","","2011-05-17 02:24:59",""
"53245576","Android RSA Encryption throws InvalidKeySpecException","I'm trying to encrypt data using a given public key.
public static final String public_key = ""MIIBCgKCAQEAr/oYAoxIcXnLzVDNN6TPJVjkwOJZnDcSEeoRntqhOvgjiycfswMWZZ5+UClJ4CMgMCVAs71BzAJzPv902Jt763SPkAO/vh6CwfLq2S3YcqDoRQJYZuSKQHW40R6sN7eFvQdxYhJnF45ketCdLdPFuF5o/ieChwLcCEDKzkWD7xio2TQlZ8jfzB4jNGr6bmW/aqF5ihe0pbhtfvlyM+jNF2vWeB1SCJ4v5zHLNKKYNy4cMsmIGHKB+0BaGVz87eYp65FFc2K9LawBBbWtVCxykYBzEnXRuU+0YzcTi4LThXg1cUsf++LK9qL/G7PZdN6HMGP7DYzgstFLfp8VRpKhqQIDAQAB"";

String encryptData(String txt)
{
    String encoded = null;
    try {
        PublicKey key = KeyFactory.getInstance(""RSA"").generatePublic(
                new X509EncodedKeySpec(Base64.decode(public_key, Base64.DEFAULT)));

        Cipher cph = Cipher.getInstance(""RSA/ECB/PKCS1Padding"");
        cph.init(Cipher.ENCRYPT_MODE, key);
        encoded = Base64.encodeToString(cph.doFinal(txt.getBytes()),
                Base64.DEFAULT);
    }
    catch (Exception e) {
        e.printStackTrace();
    }
    return encoded;
}

And  get the error
W/System.err: java.security.spec.InvalidKeySpecException: 
java.lang.RuntimeException: error:0D0680A8:asn1 encoding routines:ASN1_CHECK_TLEN:wrong tag
    at com.android.org.conscrypt.OpenSSLKey.getPublicKey(OpenSSLKey.java:143)
    at com.android.org.conscrypt.OpenSSLRSAKeyFactory.engineGeneratePublic(OpenSSLRSAKeyFactory.java:47)
    at java.security.KeyFactory.generatePublic(KeyFactory.java:172)

I have used the same public key in Python3, with the 'BEGIN PUBLIC KEY...END PUBLIC KEY' header/footer and it works fine:
public_key = """"""-----BEGIN PUBLIC KEY-----
MIIBCgKCAQEAr/oYAoxIcXnLzVDNN6TPJVjkwOJZnDcSEeoRntqhOvgjiycfswMWZZ5+UClJ4CMgMCVAs71BzAJzPv902Jt763SPkAO/vh6CwfLq2S3YcqDoRQJYZuSKQHW40R6sN7eFvQdxYhJnF45ketCdLdPFuF5o/ieChwLcCEDKzkWD7xio2TQlZ8jfzB4jNGr6bmW/aqF5ihe0pbhtfvlyM+jNF2vWeB1SCJ4v5zHLNKKYNy4cMsmIGHKB+0BaGVz87eYp65FFc2K9LawBBbWtVCxykYBzEnXRuU+0YzcTi4LThXg1cUsf++LK9qL/G7PZdN6HMGP7DYzgstFLfp8VRpKhqQIDAQAB
-----END PUBLIC KEY-----
""""""

def encode(msg):
    rsa_key = RSA.importKey(public_key)
    pks1_v1_5 = PKCS1_v1_5.new(rsa_key)
    encrypted = pks1_v1_5.encrypt(msg.encode('utf-8'))
    encrypted = base64.b64encode(encrypted)
    return encrypted

Can someone help me out plz?
--- EDIT ---
I did some debugging on the Python code: stepping into 'RSA.importKey(public_key)' I see it recognizes the key as PEM encoded key, removes the header/footer and converts it to binary (binascii.a2b_base64). The binary is passed to RSA._importKeyDER which discovers that it follows the PKCS#1 standard and, in comment, 'The DER object is an RSAPublicKey SEQUENCE with two elements'.
","Are you generate your public key from openssl, since your public key is too long:
for example i generated from openssl and replace your public key, and everything fine:
openssl genrsa -out key.pem 1024

openssl rsa -in key.pem -pubout > key.pub

and paste key.pub string in your code.
","216","<android><rsa><public-key-encryption>","0","0","1","2018-11-11 23:10:56","","6","","3199957","","2018-11-11 23:10:56","2018-11-11 03:25:02",""
"51890727","how to find encryption format of the String","I have a key and Value also but i don't know which encryption type and algorithm is used to encrypt this key

String = b866e64b396d915d6710d95d355436d75da0d0b83cbd7dbda84827ff03e9fb68f392d382aa4b42880b7cf3942dc1f22cae433aa2b7aa67fc28b7a612e9499a95
Password = admin@123

how to find this encryption algorithm type and algorithm
","With no extrinsic information - you probably can't. That's partially the point of encrypting something, it does not show any identifying characteristics.
","216","<php><encryption><public-key-encryption><password-encryption><encryption-asymmetric>","1","0","1","2018-08-17 09:11:54","","4","","380331","","2018-08-17 08:57:59","2018-08-17 07:53:32",""
"11741101","Logging into unix boks using public/private key encryption","I am trying to login to my unix box using a public key(XYZ). I found out that I have to create a pair of public and private keys and add the public key to my server from where I will be logging in. But I am actually trying to login to the server from a seperate tool. The tool is being deployed into a seperate server. So adding the public key to that server would solve my problem? Is there method other than this to do this?
","Suppose you want to access machine B from machine A. Then generate public and private key of machine A. Then add the public key of machine A in the trusted keys list of machine B
Let me know if I am not understanding your question correctly 
","216","<unix><public-key-encryption>","0","0","2","2012-07-31 22:04:51","","0","","","","","2012-07-31 13:22:03",""
"11741101","Logging into unix boks using public/private key encryption","I am trying to login to my unix box using a public key(XYZ). I found out that I have to create a pair of public and private keys and add the public key to my server from where I will be logging in. But I am actually trying to login to the server from a seperate tool. The tool is being deployed into a seperate server. So adding the public key to that server would solve my problem? Is there method other than this to do this?
","If you are talking about ssh, then ssh-copy-id can help put your public key into the correct place on the unix box.
","216","<unix><public-key-encryption>","0","0","2","2012-07-31 22:04:51","","0","","","","","2012-07-31 13:22:03",""
"56606226","""Malformed UTF-8 characters"" error when trying to json_encode and array that holds some encrypted values","I need to send some JSON data to an API endpoint that requires parts of the request to be encrypted. I have a public key that was supplied to me by the API provider. Here's the relevant piece of code:
$key = ""-----BEGIN PUBLIC KEY-----
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
-----END PUBLIC KEY-----"";

openssl_public_encrypt('my_username', $username, openssl_pkey_get_public($key));
openssl_public_encrypt('my_pa55w0rd', $password, openssl_pkey_get_public($key));

$client = new GuzzleHttp\Client();
$result = $client->post(
    'https://api.domain.com/endpoint',
    [
        'headers' => [
            'Authorization' => 'Bearer ' . $bearerToken,
            'Content-Type' => 'application/json',
        ],
        'json' => [
            'username' => $username,
            'pasword' => $password,
            'unencrypted_key' => 'an unencrypted value,
        ]
    ]
);

The code snippet above gives me an json_encode error: Malformed UTF-8 characters, possibly incorrectly encoded error. When doing a echo $username; I see that the string outputted has a bunch of malformed characters:

I'm not sure what I'm doing wrong or if there's some other approach I should take to encrypting the values before it gets json encoded.
NOTE: Although I am not using the json_encode function in my code above, I believe the guzzle HTTP library json_encodes the array before sending out the request.
","As msg noted in a comment:

openssl_public_encrypt returns a binary stream, that's the mangled output, you would need to encode it in ascii first, probably with base64_encode but why do you need encryption if the transport is already using ssl ? Check with the api provider. 

However, it's also possible that they're expecting hex-encoded data instead. Give bin2hex() a try instead.
If they have some other weird format (Base32Hex?), feel free to use this RFC 4648 library to encode your messages.

Important Security Information
This isn't an answer to your question, but it is something you and your API should both be aware of.
openssl_public_encrypt defaults to RSA with PKCS#1 v1.5 padding, which is vulnerable to a padding oracle attack.
At a minimum: The developer for the API you're communicating with should stop accepting data encrypted with RSA with PKCS#1v1.5 padding and instead only accept OAEP ciphertexts.
There are ways to work around Bleichenbacher's 1998 attack but they're messy and can only be solved at a protocol level, not a the library or primitive level.
However, RSA encryption is messy for other reasons: You can't encrypt large messages directly with RSA.
There are also plenty of other ways RSA can go wrong.
Recommendation
A better solution is to stop using RSA entirely.
Libsodium has bindings in most popular programming languages (and is included in the PHP 7.2 core) and makes this easier to get right.
// On your end...
$sendToProvider = sodium_bin2hex(
    sodium_crypto_box_seal($privateData, $publicKey)
);

// On their end...
$decrypted = sodium_crypto_box_seal_open(
    sodium_hex2bin($encrypted),
    $keypair
);

You would have encountered the encoding issue either way (since both APIs return raw binary strings). However, using libsodium would have side-stepped a ton of security issues you probably weren't aware of until you read this StackOverflow answer.
Also: Don't feel bad if you didn't know. You're not alone. Even Zend Framework's cryptography library got bit by these RSA vulnerabilities, and they had Enrico Zimuel on their team. RSA is just a bad choice for real world cryptography.
","216","<php><encryption><public-key-encryption><pki>","1","3","1","2019-06-19 19:02:25","56674164","3","1","","","","2019-06-14 23:44:21",""
"27698666","Public key of a website as seen in the browser vs using openssl command","When I see the public key of say google.com in Chrome browser, I see a 256 bytes value as below:

When I fetch the public key using openssl command, the value is an alphanumeric string:
Command:
openssl s_client -connect google.com:443 | openssl x509 -pubkey -noout

Output (only public key):
MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAqgFRiImAfGWowkJ7FfD+
W27ms/bDJ85XrhneaTzJ3U8mo0z+9k2udrK4FJSHK0cZIwJ8ep4NnyL5/60eC1/N
hDS3CsLvzla7dFxNh38TlEZnhTH+Kg/r9KtMea3T+GzZXGU1bmL9udX22SkvsRnr
owpqAasWaIh9r3y1+ag2LD8fLSM4xvsCOyeywq0CmL+7aYcH7oKWY38EzZk7mgo/
n2YOrB10jVDnKgQRtesIepY0d4fwILYXaZRhlllRHjRXBrp+7EeVkEhF/Aav03pA
Hhvk07upsXZEE3NqOCw7mObtaB/rCc2hfmhxMNHFP+V8rlxOzbaErXwbHfx6CCv4
XwIDAQAB

My questions are:

Is this an hashed value of the above? 
Or an encrypted value?
What is the role of the signature (another 256 bytes value) as shown in the browser?
Is there any command line utility to convert between the two representations?

","","215","<ssl><openssl><public-key-encryption>","0","","0","2014-12-30 01:57:23","","2","","","","","2014-12-30 01:57:23",""
"53546771","How to encrypt with public key in openpgp.js?","I try to encrypt data with openpgp.js
Unfortunately, the documentation seems to be lacking in consistency across several sites. Copy and paste the provided code for encryption with PGP public key from their github does not work. 
<script>
const openpgp = window.openpgp // use as CommonJS, AMD, ES6 module or via      window.openpgp

openpgp.initWorker({     path:'openpgp.worker.js' }) // set the relative web worker path

var options = {
userIds: [{ name:'Jon Smith', email:'jon@example.com' }], // multiple user IDs
curve: ""ed25519"",                                         // ECC curve name
passphrase: 'super long and hard to guess secret'         // protects the private key
 };  
 openpgp.generateKey(options).
  then(function(key) {
var privkey = key.privateKeyArmored; // '-----BEGIN PGP PRIVATE KEY BLOCK ... '
var pubkey = key.publicKeyArmored;   // '-----BEGIN PGP PUBLIC KEY BLOCK ... '
console.log(pubkey);
console.log(privkey);
var revocationSignature = key.revocationSignature; // '-----BEGIN PGP PUBLIC KEY BLOCK ... '
});

// put keys in backtick (``) to avoid errors caused by spaces or tabs
const pubkey = `-----BEGIN PGP PUBLIC KEY BLOCK----- Version: OpenPGP.js v4.2.1 Comment: https://openpgpjs.org xjMEXAArxRYJKwYBBAHaRw8BAQdAIgQN1lj9GOGVFoPzPzYjkz1iO3jHajwA HKauyPaf3RbNG0pvbiBTbWl0aCA8am9uQGV4YW1wbGUuY29tPsJ3BBAWCgAf BQJcACvFBgsJBwgDAgQVCAoCAxYCAQIZAQIbAwIeAQAKCRBrvmKohFbjYggf AP403aIEJQRe//fsqsUDu2Ur34AL/c1QBfsIU/Zrkrxw/gEAvV6/gpI1Y1aL dBgGnDgqhPUbRlWNan9k8498M0VAuwbOOARcACvFEgorBgEEAZdVAQUBAQdA gvaGU/GRRU8bp3fc+GO8JcRhMBzD4T8dO9t+hHZc81YDAQgHwmEEGBYIAAkF AlwAK8UCGwwACgkQa75iqIRW42LnUAEA2qoQAqSOkHoNmi1E+78VaTxe0xO4 YymcqfBXVcqTGPoA/RgLuEe7mF35dYRWFOqznNfudL5lhsElmsePQa84q70D =crPX -----END PGP PUBLIC KEY BLOCK----- `;

const privkey = `-----BEGIN PGP PRIVATE KEY BLOCK----- Version: OpenPGP.js v4.2.1 Comment: https://openpgpjs.org xYYEXAArxRYJKwYBBAHaRw8BAQdAIgQN1lj9GOGVFoPzPzYjkz1iO3jHajwA HKauyPaf3Rb+CQMImFDdXFcbpXDgsWHIZjzfQe+AMwiANg70YZQgfXgR6VAz oMcVTMI9px+lJAGFmIi6upQDIRUqt4GOffqrtDhpLyCTG9snNWaWVly3hQ/N rM0bSm9uIFNtaXRoIDxqb25AZXhhbXBsZS5jb20+wncEEBYKAB8FAlwAK8UG CwkHCAMCBBUICgIDFgIBAhkBAhsDAh4BAAoJEGu+YqiEVuNiCB8A/jTdogQl BF7/9+yqxQO7ZSvfgAv9zVAF+whT9muSvHD+AQC9Xr+CkjVjVot0GAacOCqE 9RtGVY1qf2Tzj3wzRUC7BseLBFwAK8USCisGAQQBl1UBBQEBB0CC9oZT8ZFF Txund9z4Y7wlxGEwHMPhPx07236EdlzzVgMBCAf+CQMIpu98k4tMseDgwbok uW59BZCFpdycpzvSYohdtAQb9bYAdnjV4GNENWlHj4rMEhZVDZ6s2sQbc1gW w66RkRGJeku5e8KQv8TzNQoIoTmlKcJhBBgWCAAJBQJcACvFAhsMAAoJEGu+ YqiEVuNi51ABANqqEAKkjpB6DZotRPu/FWk8XtMTuGMpnKnwV1XKkxj6AP0Y C7hHu5hd+XWEVhTqs5zX7nS+ZYbBJZrHj0GvOKu9Aw== =Ub8c -----END PGP PRIVATE KEY BLOCK-----`;  

//encrypted private key
const passphrase = 'yourPassphrase';   

//what the privKey is encrypted with
const message = 'Hello, World!';    //    input as Message object
const encryptDecryptFunction = async() => {
const privKeyObj = (await openpgp.key.readArmored(privkey)).keys[0]
await privKeyObj.decrypt(passphrase)

const options = {
    message: openpgp.message.fromText('Hello, World!'),       // input as Message object
    publicKeys: (await openpgp.key.readArmored(pubkey)).keys, // for encryption
    privateKeys: [privKeyObj]                                 // for signing (optional)
}

openpgp.encrypt(options).then(ciphertext => {
    encrypted = ciphertext.data // '-----BEGIN PGP MESSAGE ... END PGP MESSAGE-----'
    return encrypted
})
.then(encrypted => {
    const options = {
        message: await openpgp.message.readArmored(encrypted),    // parse armored message
        publicKeys: (await openpgp.key.readArmored(pubkey)).keys, // for verification (optional)
        privateKeys: [privKeyObj]                                 // for decryption
    }

    openpgp.decrypt(options).then(plaintext => {
        console.log(plaintext.data)
        return plaintext.data // 'Hello, World!'
    })

})
}

encryptDecryptFunction();


This is the error which I get in the browser console.
SyntaxError: missing } after property list[Learn More] openpgptest2 copy.html:103:27 note: { opened at line 102, column 24
How can a simple encryption with openpgp.js be performed? 
","","215","<javascript><public-key-encryption><pgp><openpgp><openpgp.js>","0","","0","2018-11-29 20:26:04","","0","","9231813","","2018-11-29 20:26:04","2018-11-29 20:07:21",""
"5626611","Restricting access to downlad URL's using public/private key / certificates","How do I restrict access to url's on my site and only allow my client applications to access these urls. I am putting in a rest api to request the url and was thinking I could use public/private key sort of like AWS S3 does. My understanding is that I still need need SSL certificate to secure data during transfer.
Does this seem like a right approach? Also I am unsure on how to go about generating the keys on the server side. I am coding in both rails and php.
","I am going use Query Request Authentication to secure the download urls.
http://docs.amazonwebservices.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/index.html?Query_QueryAuth.html
","215","<url><ssl><amazon-s3><security><public-key-encryption>","0","0","1","2011-04-15 02:05:47","5671664","0","","","","","2011-04-11 19:42:19",""
"20019486","Is Facebook Hash key for android secret","I wanted to know if the secret key used for Facebook SDK on Android should be kept a secret. Can I show it to users as part of a bug report?
","In your code Facebook SDK only use your Facebook App id. 
And you put the hash key to the Facebook Developer web page. 
This way facebook ensures the calls from the specific app id only calls from the authorized application. This way, no one can act as your application. 
Even if you give the hash and some malicious user tries to mock your application, facebook will hash that app's sign key and the two hash values won't match and there will be no problem. 
","213","<android><facebook><encryption><hash><public-key-encryption>","0","2","2","2013-11-16 16:19:21","20020653","0","","","","","2013-11-16 14:18:51",""
"20019486","Is Facebook Hash key for android secret","I wanted to know if the secret key used for Facebook SDK on Android should be kept a secret. Can I show it to users as part of a bug report?
","The hashkey is only meaningful to the apps which are signed with the same certificates. So if you don't share your keystore/certificate, there is noting to worry about. 
","213","<android><facebook><encryption><hash><public-key-encryption>","0","0","2","2013-11-16 16:19:21","20020653","0","","","","","2013-11-16 14:18:51",""
"11663728","Empty PGPKeyRing or PGPKeyRingCollection in Bouncy Castle","How to create an empty PGPKeyRing or PGPKeyRingCollection in Bouncy Castle ?
","This worked for me
PGPSecretKeyRingCollection aSecretKeyRingCollection = new PGPSecretKeyRingCollection(new ArrayList<>());
","212","<encryption><bouncycastle><public-key-encryption><pgp><key-management>","0","1","1","2012-09-25 04:12:06","","1","","","","","2012-07-26 06:37:29",""
"37262058","Asymmetric encryption with Pycripto","I want to do an encryption and a decryption scripts with Pycripto using public/private keys.
I know asymmetric encryption is super expensive in use of resources, but I intend to encrypt and decrypt a text file with some passwords (let's say 200-300 characters in total).
I've done some research but I could only find how to encrypt and decrypt little short strings.
In case that's not possible/convenient, would you recommend using mixed encryption? I mean using asymmetric to ""securely transfer the pass phrase "" and the decrypting the rest with symmetric.
I intend to have the encrypted file in the cloud, so I can download it everywhere I am. To decrypt, I'll have a USB flash drive I take everywhere I go. In the USB I should have my private key, and the decryption script. I plan to decrypt ""inside the USB"" so the decrypted file is never stored in any computer.
Is that possible?
Thanks!
","","212","<python><public-key-encryption><encryption-asymmetric>","0","","0","2016-05-16 19:46:39","","3","","","","","2016-05-16 19:46:39",""
"47300298","Best way for two way encrypted authentication in Java RMI api","One way is to send id in plain text, but this is not secure. man on middle or other client can manipulate plain text information. I want to implement two way authentication between server and client.
","","212","<java><authentication><encryption><rmi><public-key-encryption>","2","","0","2017-11-15 05:55:58","","0","","","","","2017-11-15 05:52:30","2017-11-15 05:57:37"
"26624677","Permission denied (public key) for ubuntu user but not for root on AWS EC2 instance","Yesterday I was able to use my key pair to log into my EC2 instance, but this morning it tells me ""Permission denied (public key)"". 
I am on an ubuntu AMI, I checked that I was trying the correct user name. However what is interesting is that when I try to ssh in using 'root', it connects and authenticates successfully, but tells me to use 'ubuntu' instead and terminates the connection. 
How can the public key work for root, but not for the 'ubuntu' user?
Is there perhaps something wrong with the permissions for user 'ubuntu' on the EC2 instance?
","Public key/private key pair added in .ssh directory of every user. Check where you hace added this key. in ssh directory of root user or ssh directory of ubuntu user. ssh directory is different for all users.
You can find this directory as /home/ubuntu/.ssh
","212","<ubuntu><amazon-web-services><ssh><amazon-ec2><public-key-encryption>","0","0","2","2014-12-03 15:50:01","27275958","0","","","","","2014-10-29 07:18:57",""
"26624677","Permission denied (public key) for ubuntu user but not for root on AWS EC2 instance","Yesterday I was able to use my key pair to log into my EC2 instance, but this morning it tells me ""Permission denied (public key)"". 
I am on an ubuntu AMI, I checked that I was trying the correct user name. However what is interesting is that when I try to ssh in using 'root', it connects and authenticates successfully, but tells me to use 'ubuntu' instead and terminates the connection. 
How can the public key work for root, but not for the 'ubuntu' user?
Is there perhaps something wrong with the permissions for user 'ubuntu' on the EC2 instance?
","Turns out I had changed the permissions on the ubuntu user's home directory.
","212","<ubuntu><amazon-web-services><ssh><amazon-ec2><public-key-encryption>","0","0","2","2014-12-03 15:50:01","27275958","0","","","","","2014-10-29 07:18:57",""
"56594962","Not able to encrypt using public key in golang","I am using golang crypto library. 
func encrypt(publicKey *rsa.PublicKey, message string) []byte {
    msg := []byte(message)
    println(message, msg)
    cipherText, err := rsa.EncryptPKCS1v15(rand.Reader, publicKey, msg)
    if err != nil {
        println(""Error:"", err.Error())
    }

    return cipherText
}

I am getting following errors 
panic: runtime error: invalid memory address or nil pointer dereference
[signal SIGSEGV: segmentation violation code=0x1 addr=0x0 pc=0x40e86d6].
How to handle it? How to encrypt using PKCS1?
Console:-
Verifying local data [20/32]0xc0000d37b0
panic: runtime error: invalid memory address or nil pointer dereference
[signal SIGSEGV: segmentation violation code=0x1 addr=0x0 pc=0x40e8456]

goroutine 1 [running]:
crypto/rsa.checkPub(...)
        /usr/local/Cellar/go/1.12.5/libexec/src/crypto/rsa/rsa.go:75
crypto/rsa.EncryptPKCS1v15(0x4334500, 0xc0000a0060, 0x0, 0xc0000d37b0, 0x14, 0x20, 0x402ddb2, 0x2, 0x42df45d, 0x1c, ...)
        /usr/local/Cellar/go/1.12.5/libexec/src/crypto/rsa/pkcs1v15.go:42 +0x56
main.encrypt(0x0, 0x42dcb46, 0x14, 0x0, 0x0, 0x0)
        /Users/weri/goModules/src/EastWinds/CoreUtils.go:195 +0x129
main.main()
        /Users/weri/goModules/src/EastWinds/main.go:26 +0x11e


code for publicKey:-
func importPublicKey(publicKeyString string) *rsa.PublicKey {
    block, _ := pem.Decode([]byte(publicKeyString))
    if block == nil {
        return nil
    }

    pub, err := x509.ParsePKIXPublicKey(block.Bytes)
    if err != nil {
        println(""Error: "", err.Error())
        return nil
    }

    switch pub := pub.(type) {
    case *rsa.PublicKey:
        println(pub.N)
        return pub
    default:
        break // fall through
    }

    return nil
}

publicKey:- 

-----BEGIN RSA PUBLIC KEY-----
MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAz1Ibsf4IGAs1ymoew4hR
MQUJwIGotca3kiHOeZzuzosuw58z8FFEDQt+PcxjTsx3mvo0uK04oL5CGorQZrTl
jJroZj5B2IwmHu2l1wpoKjaPbQDWu8RoIKlObaq9ENcqmH2/yvxUIBcJ0M9e5Tky
UslTmqUdZCSDljPO+u30HkBVRqs5Z/bE82BfYMKJ3oDBdWMfiM2nyxGb9ynlml5B
dC3USyVIr9NE7NEW5y78ru2F1/zmnPdfnOp4FgsgwLrinML7LZ+TUKT2zfwsVhJK
IKl6WFwDQUspi1Oo5km3AsvGtGqBynCyWtj3ZPHMlCQplEusDmF9flyiABgvBrwk
uQIDAQAB
-----END RSA PUBLIC KEY-----


","In the playground link you shared, your PEM key string is not formatted properly, it needs to be exactly like this:
    const pubPEM = `
-----BEGIN RSA PUBLIC KEY-----
MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAz1Ibsf4IGAs1ymoew4hR
MQUJwIGotca3kiHOeZzuzosuw58z8FFEDQt+PcxjTsx3mvo0uK04oL5CGorQZrTl
jJroZj5B2IwmHu2l1wpoKjaPbQDWu8RoIKlObaq9ENcqmH2/yvxUIBcJ0M9e5Tky
UslTmqUdZCSDljPO+u30HkBVRqs5Z/bE82BfYMKJ3oDBdWMfiM2nyxGb9ynlml5B
dC3USyVIr9NE7NEW5y78ru2F1/zmnPdfnOp4FgsgwLrinML7LZ+TUKT2zfwsVhJK
IKl6WFwDQUspi1Oo5km3AsvGtGqBynCyWtj3ZPHMlCQplEusDmF9flyiABgvBrwk
uQIDAQAB
-----END RSA PUBLIC KEY-----`

If I grab the example from x509.ParsePKIXPublicKey and pass it a properly formatted key, it works: https://play.golang.org/p/-wPYh7gxr5P
A few more notes on your original code:

you are merely printing errors, they should be returned as well and checked
you are not checking whether the returned key is nil which can silently happen when block == nil
you should check that the unparsed portion returned by pem.Decode is empty

","212","<go><rsa><public-key-encryption>","-4","3","1","2019-06-14 13:26:10","","6","","11646963","","2019-06-14 09:34:37","2019-06-14 09:10:32",""
"24585820","SecKeyRef RSA pair from a seed","I'm very noob with ObjC. I want to generate an RSA key-pair from a (random) seed just like I do in Java, is it possible in ObjectiveC (iOS) to do this?
Here is the code I use now to generate a key-pair (is the same as the CryptoExercise on the Apple documentation).
//here i generate the key pair
#define kPublicKeyTag           ""com.apple.sample.publickey""
#define kPrivateKeyTag          ""com.apple.sample.privatekey""
//i should use these as seed!?!!?
- (void)generateKeyPair:(NSUInteger)keySize {
    OSStatus sanityCheck = noErr;
    publicKeyRef = NULL;
    privateKeyRef = NULL;


    // Container dictionaries.
    NSMutableDictionary * privateKeyAttr = [[NSMutableDictionary alloc] init];
    NSMutableDictionary * publicKeyAttr = [[NSMutableDictionary alloc] init];
    NSMutableDictionary * keyPairAttr = [[NSMutableDictionary alloc] init];

    // Set top level dictionary for the keypair.
    [keyPairAttr setObject:(id)kSecAttrKeyTypeRSA forKey:(id)kSecAttrKeyType];
    [keyPairAttr setObject:[NSNumber numberWithUnsignedInteger:keySize] forKey:(id)kSecAttrKeySizeInBits];

    // Set the private key dictionary.
    [privateKeyAttr setObject:[NSNumber numberWithBool:YES] forKey:(id)kSecAttrIsPermanent];
    [privateKeyAttr setObject:privateTag forKey:(id)kSecAttrApplicationTag];
    // See SecKey.h to set other flag values.

    // Set the public key dictionary.
    [publicKeyAttr setObject:[NSNumber numberWithBool:YES] forKey:(id)kSecAttrIsPermanent];
    [publicKeyAttr setObject:publicTag forKey:(id)kSecAttrApplicationTag];
    // See SecKey.h to set other flag values.

    // Set attributes to top level dictionary.
    [keyPairAttr setObject:privateKeyAttr forKey:(id)@kSecPrivateKeyAttrs];
    [keyPairAttr setObject:publicKeyAttr forKey:(id)@kSecPublicKeyAttrs];

    // SecKeyGeneratePair returns the SecKeyRefs just for educational purposes.
    sanityCheck = SecKeyGeneratePair((__bridge CFDictionaryRef)keyPairAttr, &publicKeyRef, &privateKeyRef);


}

","","210","<ios><security><encryption><rsa><public-key-encryption>","1","","0","2014-07-05 11:15:18","","0","1","","","","2014-07-05 11:15:18",""
"21206788","SQL Server 2008 import asymmetric keys from file","I've generated a pair of asymmetric keys in my Linux box. Now I want to import them into SQL Server with:
CREATE ASYMMETRIC KEY fi2 
    FROM FILE = 'c:\keys\public_key.pem' 

I always get the error:

The certificate, asymmetric key, or private key file does not exist or has invalid format.

Any clues on the format the file must have to be imported?
","","209","<sql-server><sql-server-2008><public-key-encryption>","1","","0","2014-01-18 18:22:11","","0","","13302","","2014-01-18 18:22:11","2014-01-18 16:34:18",""
"37729422","Public Key Encryption vs HSM for storing encryption keys","Let's say I have sensitive data in the database server that needs to be encrypted (i.e emails, etc..) and I want to make sure that in the event that the server is compromised, the attacker shouldn't be able to decrypt these data (at the very least make it harder).
I've read some solutions online, and it seems like I can either
Use Hardware Security Modules (i.e. Amazon KMS/Vault) to having a separate server handle encryption/decryption.
Use Public Key Encryption (where the public key in database server encrypts data, and a private key is stored in separate server that solely handles decryption)
What are the tradeoffs of each other and which one would you choose?
","","207","<encryption><public-key-encryption><azure-keyvault><aws-kms>","1","","0","2016-06-09 18:52:35","","1","","803865","","2016-06-09 18:52:35","2016-06-09 14:53:47",""
"34430295","Android Diffie hellman BN_mod_inverse 0306E06C error","I am trying to implement Diffie Hellman Algo between client and server. For that I am using below code to generate Public key
Shared p,g and public key from server end
DH p:E1C66AFAB0E8518914EE1E58DDD9B337
DH g:05
DH public key(95D1FAFBFE8096BFF6C528A571B307B4)

Android code below
final BigInteger p = new
BigInteger(""E1C66AFAB0E8518914EE1E58DDD9B337"", 16);//convert hex to BigInteger
final BigInteger g = new BigInteger(""05"", 16);//convert hex to BigInteger
final int l = 128;

KeyPairGenerator keyGen = KeyPairGenerator.getInstance(""DH"");
keyGen.initialize(new DHParameterSpec(p, g, l));
KeyPair ackp = keyGen.generateKeyPair(); 
PrivateKey priKey = ackp.getPrivate();
PublicKey pubKey = ackp.getPublic();

Output: pubKey value 
OpenSSLDHPublicKey{
        Y=8d664db67d53602ef3f2eb5dce616fb9,
        P=b7f51eb91d787dbcd74ab1d752abf207,
        G=5}

So far, so good but when I am using public key(95D1FAFBFE8096BFF6C528A571B307B4 shared by server end) to generate symmetric/final key 
Code:
final BigInteger p = new
    BigInteger(""95D1FAFBFE8096BFF6C528A571B307B4"", 16);//convert hex to BigInteger
    final BigInteger g = new BigInteger(""05"", 16);//convert hex to BigInteger
    final int l = 128;

    KeyPairGenerator keyGen = KeyPairGenerator.getInstance(""DH"");
    keyGen.initialize(new DHParameterSpec(p, g, l));
    KeyPair ackp = keyGen.generateKeyPair(); 
    PrivateKey priKey = ackp.getPrivate();
    PublicKey pubKey = ackp.getPublic();

I am getting following error:
12-23 12:16:35.801: W/System.err(12512): java.lang.RuntimeException: error:0306E06C:bignum routines:BN_mod_inverse:no inverse

What am I doing wrong. Any help will be appreciated :)
","","206","<android><algorithm><security><public-key-encryption><diffie-hellman>","1","","0","2015-12-23 06:59:59","","0","1","","","","2015-12-23 06:59:59",""
"44440408","Setting Private and Public Key as a String, rather than loading from a file","The below code needs the path to the key file. 
String PATHPRIVATE = ""C:\\keys\\PRIVATE_KEY.pem"";
String PATHPUBLIC = ""C:\\keys\\PUBLIC_KEY.pem"";

plugin.setSignPrivateKey(RSAEncryption.readFile(PATHPRIVATE));
plugin.setCipherPublicKeyFromFile(PATHPUBLIC);

Details of the plugin class.
 public void setSignPrivateKey(String signPrivateKey)
    {
        SignPrivateKey = signPrivateKey;
    }

 public void setCipherPublicKeyFromFile(String file)
        throws Exception
    {
        CipherPublicKey = RSAEncryption.readFile(file);
    }

public void setPublicKeyFromFile(String file)
        throws Exception
    {
        StringPublicKey = readFile(file);
    }

In local it works fine, but when I load it on a server as an application deployment, the need is to do away with the physical key file and rather load it as a string i.e. the contents of the key file to be loaded as a string and not from a file.
How to do something like the below.
plugin.setSignPrivateKey(RSAEncryption.readFile(""-----BEGIN RSA PRIVATE KEY-----
MIICXQIBAAKBgQDEnL+ATwAj0hVbqoaiSaJke-----END RSA PRIVATE KEY-----""));
    plugin.setCipherPublicKeyFromFile(""-----BEGIN PUBLIC KEY-----
MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCf8X4kBjhtiK6YZ6JcW9sfGfAX
-----END PUBLIC KEY-----"");

Thanks. 
","","205","<java><encryption><rsa><public-key-encryption><private-key>","0","","0","2017-06-09 08:43:35","","3","","2967948","","2017-06-09 08:43:35","2017-06-08 15:54:26",""
"56085720","Using pynacl to encrypt with one file and decrypt with a second file","I have some code that I wrote below with Python 2.7 and uses pynacl, running on a mac os x. It currently works as written below and it will encrypt the password and then decrypt it later. I want to know if there is away where the last few lines that decrypt can be on a separate python file ? The separate python file is a cronjob that run daily and will need the password to run, this is the reason why I need the decryption part to be on file #2. Please let me know of any suggestions.
I have tried importing the File #1 to File #2 and also even saving the required variables in File #1 to files but the ""SealedBox"" cannot be saved into a file with error ""TypeError: argument 1 must be convertible to a buffer, not SealedBox""
#!/usr/bin/env python2


import nacl.utils
from nacl.public import PrivateKey, SealedBox
import getpass

# Generate Bob's private key, as we've done in the Box example
skbob = PrivateKey.generate()
pkbob = skbob.public_key

# Alice wishes to send a encrypted message to Bob,
# but prefers the message to be untraceable
sealed_box = SealedBox(pkbob)

# This is Alice's message
message = getpass.getpass(""LDAP Password is:"")

# Encrypt the message, it will carry the ephemeral key public part
# to let Bob decrypt it
encrypted = sealed_box.encrypt(message)

# Store the data with binary mode:
# with open('file.bin', 'wb') as f:
#   f.write(encrypted)

unseal_box = SealedBox(skbob)

# with open('file2.bin', 'wb') as f:
#   f.write(unseal_box)

# decrypt the received message, this is where File #2 would start
plaintext = unseal_box.decrypt(encrypted)
print(plaintext.decode('utf-8'))

","you can use pickle:
encrypt script
from nacl.public import PrivateKey, SealedBox
import getpass
import pickle

# Generate Bob's private key, as we've done in the Box example
skbob = PrivateKey.generate()
pkbob = skbob.public_key

# Alice wishes to send a encrypted message to Bob,
# but prefers the message to be untraceable
sealed_box = SealedBox(pkbob)

# This is Alice's message
message = getpass.getpass(""LDAP Password is:"")

# Encrypt the message, it will carry the ephemeral key public part
# to let Bob decrypt it
encrypted = sealed_box.encrypt(message.encode())

# Store the data with binary mode:
with open('file.bin', 'wb') as f:
    pickle.dump(encrypted, f)
with open('file2.bin', 'wb') as f:
    pickle.dump(skbob, f)

decrypt script
from nacl.public import SealedBox
import pickle

with open('file.bin', 'rb') as f:
    encrypted = pickle.load(f)
with open('file2.bin', 'rb') as f:
    skbob = pickle.load(f)

unseal_box = SealedBox(skbob)
# decrypt the received message, this is where File #2 would start
plaintext = unseal_box.decrypt(encrypted)
print(plaintext.decode('utf-8'))

","205","<python><encryption><public-key-encryption><pynacl>","1","0","1","2019-05-10 23:40:42","56086040","1","","","","","2019-05-10 22:52:24",""
"56594954","CngKey how i can append accessrule to previously created and assigned rules to a machine key?","How can i append access rule(CryptoAccessRule) to already/previously created and assigned(some default crypto access rule already assigned) machine key which is Crypto api?
I have a already created crypto api . I have used below code so as to append crypto access rule to this key. But, it failed and returned me 'invalid flags '  exceptions in HasProperty/GetProperty. Please suggest. Please note this is Crypto api key so, it dosn't contain CngProperty option, but as Cng api provides backword compatibility, there should be some way to retrieve the previosuly applied CryptoAccessRules from CryptoApi using RSACng . 
NCRYPT_SECURITY_DESCR_PROPERTY=""Security Descr"";
DACL_SECURITY_INFORMATION=(CngPropertyOptions)4;
if (cngKey.HasProperty(NCRYPT_SECURITY_DESCR_PROPERTY, CngPropertyOptions.Persist | DACL_SECURITY_INFORMATION))
                {
                    CngProperty prop = cngKey.GetProperty(NCRYPT_SECURITY_DESCR_PROPERTY,
                        DACL_SECURITY_INFORMATION);
                    sec.SetSecurityDescriptorBinaryForm(prop.GetValue());

                }
               CryptoKeyAccessRule rule =
                new CryptoKeyAccessRule(new SecurityIdentifier(WellKnownSidType.LocalSystemSid, null),
                    CryptoKeyRights.GenericAll, AccessControlType.Allow);



            sec.AddAccessRule(rule);

Expected :- I want to append acceess rule to previously existing default access rules in machine key.
actual:- I am getting an exception 'Invalid Flags specified.!'.
Please suggest.
","","203","<security><encryption><public-key-encryption><pki><cng>","0","","0","2019-06-20 13:25:42","","8","","5061847","","2019-06-20 13:25:42","2019-06-14 09:10:10",""
"31079065","How to create valid public and private key for digital sign?","How i can get free X509 Certificates with true public and private key?
I use .net to encrypt and decrypt document.
Its can import pfx file.
And now how i can create single pfx file with public & private for each User?  
","You need to use makecert and pvk2pfx, both get installed with visual studio.
First run makecert to get a certificate (cer file) and private key file (pvk file)
makecert -sv yourprivatekeyfile.pvk -n ""cert name"" yourcertfile.cer -b mm/dd/yyyy -e mm/dd/yyyy -r

where:

-sv yourprivatekeyfile.pvk is the name of the file containing the private key. 
-n ""cert name"" is the name that will appear on the certificate (and in the certificate store).
yourcertfile.cer is the name of the certificate file. 
-b  mm/dd/yyyy is the date when the certificate becomes valid.
-e  mm/dd/yyyy is the date when the certificate expires.
-r indicates that this will be a self-signed certificate.

One you have your two files you can combine them in to a pfx file
PVK2PFX –pvk yourprivatekeyfile.pvk –spc yourcertfile.cer –pfx yourpfxfile.pfx –po yourpfxpassword

where:

-pvk  yourprivatekeyfile.pvk is the private key file that you created
-spc  yourcertfile.cer is the certificate file you created
-pfx  yourpfxfile.pfx is the name of the .pfx file that will be created.
-po  yourpfxpassword is the password that you want to assign to the .pfx file.

","203","<.net><encryption><public-key-encryption><private-key><pki>","-1","1","1","2015-06-26 18:14:03","31079622","0","","","","","2015-06-26 17:37:28",""
"7621900","How to add the path for publickey.xml file to the InputStream in android? Where to put the file publickey.xml?","//how to place the path for publickeyfile.xml here?
InputStream in =

//the objectipnutstream that gets the inputstream
  ObjectInputStream oin =
new ObjectInputStream(new BufferedInputStream(in));
  try {
BigInteger m = (BigInteger) oin.readObject();
BigInteger e = (BigInteger) oin.readObject();
RSAPublicKeySpec keySpec = new RSAPublicKeySpec(m, e);
KeyFactory fact = KeyFactory.getInstance(""RSA"");
PublicKey pubKey = fact.generatePublic(keySpec);

  } catch (Exception e) {
throw new RuntimeException(""Spurious serialisation error"", e);
  } finally {
oin.close();
  }

","
create a res>raw folder in the project
put the publickeyfile.xml file in the new folder
""Inputstream is = myResources.openRawResource(R.raw.publickeyfile)""

...it should work
","201","<android><xml><rsa><inputstream><public-key-encryption>","0","0","1","2011-10-24 21:42:38","","0","1","","","","2011-10-01 17:48:51",""
"27285890","Creating SecKeyRef object via public key on iOS","I have created a pair of private/public keys using SecKeyGeneratePair. I am successfully able to use the public key to encode and private key to decode. However, I need to save the public key and pass it to another user. That user then needs to create a SecKeyRef object using that public key to encode a text and send it back. I can then use the private key to decode it.
This all works within a single application where the public key and private keys are already loaded in SecKeyRef. I have used the Apple recommended code to get publicKeyBits. But, no matter which I call I have tried, I haven't been successful in creating a SecKeyRef to do my encoding/decoding.
My questions are:

How do I save my public key and how do I pass it on?
How do I create a new SecKeyRef object using that public key in a new instance of a client?

","","200","<ios><rsa><public-key-encryption>","2","","0","2014-12-04 03:42:27","","0","2","","","","2014-12-04 03:42:27",""
"10291383","How to make a static string not visible while encounter disassembling?","I got a couple of licence keys from third-party vendor, these keys are authorized to my mobile application(C/C++ language), for not to be leaked to out world, the vendor need to review my code to ensure these keys are encrypted to prevent disassembling.
The initial way I got is encrypting(use reversible encrypt method) these keys and decrypting it while using, but this isn't the final solution, to be extreme, one can decrypt it to by reverse my code.
The vendor recommend using the reverse hash to encrypt these keys(I have no idea about reverse hash), is there any other choice(that simple, easy to implement but harder to disassemble) I can hide these keys in my code to prevent disassembling?
","There is no such thing as a ""reverse hash algorithm"". Any hash algorithm is designed to be one-way and implies the loss of data. If it is two-way, it is called a cipher.
As long as user is able to run your application, and the application uses those keys at some point, the keys may be leaked. This can be done through disassembling and reverse engineering, through dumping the keys from memory, or through running a debugger. So the best thing you can do is to encrypt it somehow and make it as non-obvious to decrypt as possible.
Given that you are writing it for a mobile platform, you may try to rely on some OS mechanism to protect the keys. Or, if these are the keys for some web API, you may set up a server which stores those keys and work as a proxy. Or actually ask your third-party vendor about the best practices they have for protecting the keys and for specific implementation details like suggested encryption mechanism.
","199","<c><public-key-encryption><password-encryption>","2","1","3","2012-04-24 07:10:18","10292673","4","","342348","","2012-04-24 03:45:54","2012-04-24 03:32:16",""
"10291383","How to make a static string not visible while encounter disassembling?","I got a couple of licence keys from third-party vendor, these keys are authorized to my mobile application(C/C++ language), for not to be leaked to out world, the vendor need to review my code to ensure these keys are encrypted to prevent disassembling.
The initial way I got is encrypting(use reversible encrypt method) these keys and decrypting it while using, but this isn't the final solution, to be extreme, one can decrypt it to by reverse my code.
The vendor recommend using the reverse hash to encrypt these keys(I have no idea about reverse hash), is there any other choice(that simple, easy to implement but harder to disassemble) I can hide these keys in my code to prevent disassembling?
","You can make reversing harder but you can't stop it. No matter what encrypting you choose a hacker can get the keys from your program because your program decrypts the keys for license checking.
Also a hacker can break the 3-rd party library instead of stealing your keys :)
I would ask the library vendor for code samples showing how to protect the keys to satisfy their requirements.
By the way there is a question about reversible hash on SO: Reversible hash function?
","199","<c><public-key-encryption><password-encryption>","2","3","3","2012-04-24 07:10:18","10292673","4","","342348","","2012-04-24 03:45:54","2012-04-24 03:32:16",""
"10291383","How to make a static string not visible while encounter disassembling?","I got a couple of licence keys from third-party vendor, these keys are authorized to my mobile application(C/C++ language), for not to be leaked to out world, the vendor need to review my code to ensure these keys are encrypted to prevent disassembling.
The initial way I got is encrypting(use reversible encrypt method) these keys and decrypting it while using, but this isn't the final solution, to be extreme, one can decrypt it to by reverse my code.
The vendor recommend using the reverse hash to encrypt these keys(I have no idea about reverse hash), is there any other choice(that simple, easy to implement but harder to disassemble) I can hide these keys in my code to prevent disassembling?
","Let's assume you'll have code like this:
unsigned char *bytes;
some_extremely_complicated_function_which_decrypt_key(bytes);
add_some_confusing_things();
maybe_even_split_into_several_calls(bytes);
// ...
call_function_using_their_key(bytes,data1,data2,data3);

Which will result into assembler looking like this:
push [ebp+0004h]  // data3
push ecx          // data2
push [ebp+0024h]  // data1
push [eax]        // key (bytes)
call 123456h      // call to call_function_using_their_key

You will almost always be able to get address of call_function_using_their_key from import/relocation table (unless it'll be inline, obfuscated really hard or few similar techniques).
I'd simply add automatically breakpoints to every call 123456h, last push = key, key pointing to memory address 543216h, get key from 543216h. 
Any encryption was useless.
The moral of the story: first make sure that their API makes sense to encrypt data, otherwise you'll be good with this:
char *globalBytesPtr;

int main(){
    globalBytesPtr = malloc(N);
    globalBytesPtr[8] = 0x35;
    globalBytesPtr[3] = 0x14;
    globalBytesPtr[5] = 0x20;
    ...
}

Because with this your keys won't show up in static dump. This won't decrease security, because the weakest point is their API call and you cannot make application more safe in this universe.
","199","<c><public-key-encryption><password-encryption>","2","1","3","2012-04-24 07:10:18","10292673","4","","342348","","2012-04-24 03:45:54","2012-04-24 03:32:16",""
"35463204","How to exchange and authenticate ephemeral public keys with tweetnacl?","The C library http://tweetnacl.cr.yp.to/ for strong ECC encryption written
and published by Daniel J.Bernstein is very neat and small.
Using it from Python is even easier with the tweetnacl Python interface module written and published by Jan Mojžíš : https://mojzis.com/software/python-tweetnacl/index.html
Generating ephemeral public and secret key pairs is very easy: 
python
>>> import tweetnacl as nacl
>>> pk, sk = nacl.crypto_box_keypair()

Assuming Alice got Bobs public key and vice versa then encrypted communication using the crypto_box() and crypto_box_open() functions 
is pretty straight forward and easy to implement.
But I wonder:  What is easiest way to get Alice ""pk"" from here to 
Bob and the public key of Bob back to Alice?  How can Bob be sure that
a received public key is really the key of Alice and vice versa?
","You can't without a trusted third party and another secure channel. That is the reason SSL has certificate authorities and trust-chain certificates pre-deployed in the browser. Without those, the exchange process is vulnerable to an active man in the middle.
","199","<python><c><encryption><public-key-encryption>","1","0","1","2016-07-21 22:59:03","","3","","","","","2016-02-17 17:08:48",""
"48062829","Apache WSS4J - How to load a key store password from database","In order to provide key store information we have store-password in plain text file. To secure the key store either we need to encrypt the store password or move them in db. Is there any way to access this key store information from Database during run time. I tried below ref for encrypting password in crypto.properties but that is not helping. 
Encrypting passwords in Crypto property files
","There is no support there by default, you would have to write your own implementation of PasswordEncryptor instead to communicate with the DB:
https://svn.apache.org/repos/asf/webservices/wss4j/trunk/ws-security-common/src/main/java/org/apache/wss4j/common/crypto/PasswordEncryptor.java
","198","<cxf><keystore><public-key-encryption><ws-security><wss4j>","0","0","1","2018-01-04 10:51:51","","0","","4217359","","2018-01-02 18:45:34","2018-01-02 14:35:01",""
"38565664","How to encrypt data using rsa public key in php","Receiver has given me a public key and I need to use it to encrypt username and password. I have done various r&d but nothing works.
I have used 
function public_encrypt($plaintext)
{
    $fp=fopen(""private.key"",""r"");
    $pub_key=fread($fp,8192);
    fclose($fp);
    openssl_get_publickey($pub_key);
    openssl_public_encrypt($plaintext,$crypttext, $pub_key);
    return(base64_encode($crypttext));
}

But it gives me openssl_public_encrypt(): key parameter is not a valid public key error. 
I have also added begin and end line to key, but still no success
Kindly guide me with steps to follow as I am new in it.
","You're trying to decode a key that is not in any known format it seems. I presume it has been made by somebody that does not fully understand crypto, as it has a 1023 bit modulus.
If you look at the hexadecimal representation you'll find a modulus with a value of:
4D49BB0D2E0FA132D081A6338C178124AB2B1B61A57C6C30D05EAD179BE1040B235E0EE83F3BF29A8F19DC33B7E245FAE7BE96E35CC2DF49E8B519D4F53501E3566D693A66E69D8C812AF66AC6D5D86ED764ED27A91C5828CE860A8B01077C15142B77BF772AFF201577DF8FBE9E92168539480E024DFF51173CD26B65858ACA

(simply the last value within the structure with a size close to 1024 bits) and a public exponent with a value
010001

","196","<php><encryption><rsa><public-key-encryption>","1","1","1","2016-08-03 00:21:32","","12","","4911875","","2016-07-25 12:05:41","2016-07-25 10:44:50",""
"34767284","encyrpt a key with setted RSA public key in java","i'm triying encrypt a password. firstly i will set a rsa public key, after encyrpt a password. but my results are not equals between java and javascript code. is there a way or sample. Could you help me? thanks.
here is my javascript code
var rsa = new RSAKey();
rsa.setPublic(rasn, rase);
var res = rsa.encrypt(""myPassword"");
return restotal;

here is my java code
RSA1 rsa = new RSA1(new BigInteger(rasn.getBytes()),new BigInteger(rase.getBytes()));    
String text1 = ""myPassword"";
BigInteger plaintext = new BigInteger(text1.getBytes());
BigInteger ciphertext = rsa.encrypt(plaintext);
System.out.println(ciphertext);

","Not sure what your RSA1 class exactly does, but you can check a nice sample here.
Your results will never be same, because before RSA encryption, your data will be appended with random bytes called padding.
If you want to test your encryption, decrypt the result back with your private key and see if it works. You can do this between javascript and java if you wish.
","196","<java><rsa><public-key-encryption>","-1","2","1","2016-01-13 13:53:51","34768518","0","","","","","2016-01-13 12:53:08",""
"54506163","Trying to convert private and public keys to String format","import java.security.*;

public class MyKeyGenerator {

    private KeyPairGenerator keyGen;
    private KeyPair pair;
    private PrivateKey privateKey;
    private PublicKey publicKey;
    private Context context;

    public MyKeyGenerator(Context context, int length)throws Exception{
        this.context =context;
        this.keyGen = KeyPairGenerator.getInstance(""RSA"");
        this.keyGen.initialize(length);
    }

    public void createKeys(){
        this.pair = this.keyGen.generateKeyPair();
        this.privateKey = pair.getPrivate();
        this.publicKey = pair.getPublic();
    }

    public PrivateKey getPrivateKey(){
        return this.privateKey;
    }

    public PublicKey getPublicKey(){
        return this.publicKey;
    }

    public  String getPrivateKeyStr(){
        byte b [] = this.getPrivateKey().getEncoded();
          return new String(b));
    }

    public  String getPublicKeyStr(){
        byte b [] = this.getPublicKey().getEncoded();
        return new String(b));
    }


}

Hello, I have searched SO for how to convert or get the String representation of a public key or private key, most of the answers were very old and only for how to convert  String pubKey =""...."";  into a key.
I tried to generate the keys and get the encoded bytes and I tried to convert the byte to String as my code shows above, but I am not sure if I am doing it in the right way by simply converting the encoded bytes into a String.
","
The Private/Public Key bytes:
byte[] theBytes = key.getEncoded();
Using new String(theBytes) is not so good, because it uses the default Charset (based on OS). Better is to pass the Charset you want (e.g UTF-8) a be consistent in that.
I would suggest to have a HEX representation of the Private/Public keys . There are multiple ways to convert a byte[] into HEX string ( Java code To convert byte to Hexadecimal ). Having the HEX format makes also the key easier to read in some UI. E.g: AA BB CC 22 24 C1 ..
Other option is Base64 format e.g:  Base64.getEncoder().encodeToString(theBytes). (Java 8)

","196","<java><public-key-encryption><encryption-symmetric>","0","2","1","2019-02-03 19:37:58","54506783","0","","6910819","","2019-02-03 18:48:55","2019-02-03 18:33:51",""
"35011562","How to encrypt a short string into another SHORT string using OpenSSL","I wish to take a string like ""abcd-efgh"" and perform an asymmetric encryption so that the resulting string is itself fairly short when export as hex - 20 characters or so. 
I realise, of course, that this won't be very secure. It's not an issue for the use case in question.
The encrypted string needs to be generated in PHP and decrypted on a desktop application, so using OpenSSL would be useful.
I've tried using openssl_private_encrypt with a 2048 bit RSA key but the result is very long.
Can anyone help?
","You could try Elliptic Curve. It's still not small, but it's a lot more dense than RSA. 160 bits is non-trivial to break.
","193","<encryption><openssl><public-key-encryption>","0","0","1","2016-02-15 18:26:33","","3","","","","","2016-01-26 10:21:37",""
"38713717","Converting RSA encryption code from C# to php","I have c# code for encryption. And I need to convert it with same logic in PHP. 
// Public key to be used for encryption
    String publicKey=""yxnxuhj2322i23k232sasas123121"";
    // Sample data to be encrypted
    String data=""test"";
    //Encryption logic
    CspParameters cspParams = new CspParameters { ProviderType = 1 };
    RSACryptoServiceProvider rsaProvider = new RSACryptoServiceProvider(cspParams);
    rsaProvider.ImportCspBlob(Convert.FromBase64String(publicKey));
    byte[] plainBytes = Encoding.UTF8.GetBytes(data);
    byte[] encryptedBytes = rsaProvider.Encrypt(plainBytes, false);
    string encryptedString = Convert.ToBase64String(encryptedBytes);

PHP Code: 
include('Crypt/RSA.php');
$a = 'yxnxuhj2322i23k232sasas123121';
$a = base64_decode($a);

$rsa= parseCSBBlob($a);

$rsa->setEncryptionMode(CRYPT_RSA_ENCRYPTION_PKCS1);
define('CRYPT_RSA_PKCS15_COMPAT', true);

$user=utf8_encode(""test"");
$enc_user= $rsa->encrypt($user);
$enc_user=base64_encode($enc_user);

function parseCSBBlob($str) {
    // from https://msdn.microsoft.com/en-us/library/windows/desktop/aa387453(v=vs.85).aspx
    extract(unpack('atype/aversion/vreserved/Valgo', $str));
    if (ord($type) != 6) { // 6 == PUBLICKEYBLOB
        return false;
    }
    //https://msdn.microsoft.com/en-us/library/windows/desktop/aa375549(v=vs.85).aspx
    if ($algo != 0x0000a400) { // 0x0000a400 == CALG_RSA_KEYX
        return false;
    }
    $str = substr($str, 8); // aavV
    extract(unpack('Vmagic/Vbitlen/Vpubexp', $str));
    if ($magic != 0x31415352) { // RSA1
        return false;
    }
    $str = substr($str, 12); // VVV
    if (strlen($str) != $bitlen / 8) {
        return false;
    }
    $str = strrev($str);

    $rsa = new Crypt_RSA();
    $rsa->loadKey(array(
        'e' => new Math_BigInteger($pubexp, 256),
        'n' => new Math_BigInteger($str, 256)
    ));
    return $rsa;
}

I have used the parseCSBBlob method from other stackoverflow post. But it wont work. I am getting encryption from this code but it is not get decrypted in C#. I could not get the ImportCspBlob method in PHP. Encryption should be done in PHP and decryption is done in C#.
","","192","<c#><php><encryption><rsa><public-key-encryption>","0","","0","2016-08-02 07:22:55","","6","","6005981","","2016-08-02 07:22:55","2016-08-02 07:00:55",""
"53982539","Libsodium and Perfect Forward Secrecy","I'm thinking of creating a mobile app that uses Libsodium's crypto_box_easyfor encrypting and decrypting chat messages.
However, after reading a lot on the net, I found that one of the major flaws of public-private-key algorithms is that recorded data can be decrypted as soon as the recipients private key is leaked.
To avoid that, the use of Perfect Forward Secrecy (PFS) is suggested and I'm wondering, if Libsodium is already supporting PFS in the former mentioned function as individual nonces are used for each encryption.
Maybe someone can guide me on the difference between PFS and Libsodiums functions (if there are some) or help me by clarifying the relationship of nonces and PFS.
","There is no forward secrecy.
crypto_box_seal() is slightly better, as the sender uses ephemeral keys. These messages can be signed using a long-term secret key in order to check that they come from the expected party, but that key being compromised will not allow decryption of previous messages.
However, if the recipient's secret key get compromised, recorded messages can still be decrypted.
For these reasons, the box construction doesn't exist in libhydrogen. Instead, there are Noise-based protocol implementations for secure key exchange, all with forward secrecy. These APIs will be backported to libsodium at some point.
But secure chat applications are far from trivial to build. The signal library is a much better starting point, even though the license may not be compatible with your expectations.
","191","<encryption><public-key-encryption><encryption-asymmetric><nonce><libsodium>","0","0","1","2019-01-13 20:47:48","","1","","","","","2018-12-31 00:23:22",""
"21542084","Private Key changes between exports from a .PFX (PKCS#12) File","I am Exporting only the private key(s) from a .pfx file to a .pem (.key) file: 
I am using the command as below.....I executed the command twice to generate the private key twice (It asks me for a import password and a PEM pass phrase each time) in two different physical files

openssl pkcs12 -nocerts -in DigitalCertificateExport.pfx -out
  OnlyKey_SameParaPhrase_1.key openssl pkcs12 -nocerts -in
  DigitalCertificateExport.pfx -out OnlyKey_SameParaPhrase_2.key

However, the resulting key file has different private key each time. Should it not be the same always? I was expecting it to be the same each time.
Worth mentioning that I provide exactly the same pass phrase each time.
","According to this OpenSSL doc, at least some encryption methods for .pem files use a random salt. When using your command to convert a .pfx file I get a file with the following line:
-DEK-Info: DES-EDE3-CBC,6AC8DB439F2BDE03
This cointains a random salt used for encryption and / or validation.
","191","<security><openssl><x509certificate><public-key-encryption><network-security>","1","1","1","2014-02-18 15:18:34","21857927","3","","513983","","2014-02-04 19:11:58","2014-02-04 02:46:37",""
"54602456","unable to parse the input : keystore","I am trying to encrypt the Keystore file to upload the certificate into Google play Console, I am using pepk.jar in the terminal in mac
Any idea why I am having this error
java -jar pepk.jar —keystore Mykeystore.keystore —alias  MyAlias --encryptionkey=eb10fe8f7c7c9df715022017b00c6471f8ba8170b13049a11e6c09ffe3056a104a3bbe4ac5a955f4ba4fe93fc8cef27558a3eb9d2a529a2092761fb833b656cd48b9de6a —output=MyOutputFile
Error: Unable to parse the input: [—keystore, Mykeystore.keystore, —alias, MyAlias, --encryptionkey=eb10fe8f7c7c9df715022017b00c6471f8ba8170b13049a11e6c09ffe3056a104a3bbe4ac5a955f4ba4fe93fc8cef27558a3eb9d2a529a2092761fb833b656cd48b9de6a, —output=MyOutputFile]
java.lang.IllegalArgumentException: Invalid argument: —keystore
    at com.google.wireless.android.vending.developer.signing.tools.extern.export.Utils.processArgs(Utils.java:32)
    at com.google.wireless.android.vending.developer.signing.tools.extern.export.ExportEncryptedPrivateKeyTool.main(ExportEncryptedPrivateKeyTool.java:79)
","I found it, two things:
1- there where some typo in my command, here is the right one:
java -jar pepk.jar --keystore Mykeystore.keystore --alias MyAlias --encryptionkey=eb10fe8f7c7c9df715022017b00c6471f8ba8170b13049a11e6c09ffe3056a104a3bbe4ac5a955f4ba4fe93fc8cef27558a3eb9d2a529a2092761fb833b656cd48b9de6a -- output=MyOutputFile
2- the output file should be .zip file
And now all works fine.
","191","<java><android><console><keystore><public-key-encryption>","0","0","1","2019-02-09 21:34:23","","0","","10178534","","2019-02-09 20:40:56","2019-02-09 01:58:07",""
"4282326","If I give someone only the public key, can he write messages for himself?","I want to distribute license keys, which an application at the customer premises will need to decode.
I was thinking to give him the private key, so that the app can decode, and keep the public key for myself in order to encrypt license files.
Now, the n00b question is: if I give him only the private key and keep the public key very, very safe, can he create license files which can be decrypted by the private key?
I know that I seem to be standing everything on its head here, but I hope that you can see why.
","The private key is what you keep safe. The public key gets distributed to the general public... hence the names, private & public.
Anything encrypted with one of the keys can only be decoded by the other key, which is the whole point of public key encryption. In this case, you'd encode the license key file with the private key, and then the user can decrypt it with the public key. Of course, anyone else with a copy of the public key can decrypt the license file as well, but that's another problem.
Functionally, there's no difference between the two keys. It's entirely arbitrary which is public and which is private. Just never ever reveal the contents of whichever key you decide is the private one.
","189","<public-key-encryption>","1","3","3","2011-11-03 05:03:36","4282346","0","1","","","","2010-11-26 03:21:48",""
"4282326","If I give someone only the public key, can he write messages for himself?","I want to distribute license keys, which an application at the customer premises will need to decode.
I was thinking to give him the private key, so that the app can decode, and keep the public key for myself in order to encrypt license files.
Now, the n00b question is: if I give him only the private key and keep the public key very, very safe, can he create license files which can be decrypted by the private key?
I know that I seem to be standing everything on its head here, but I hope that you can see why.
","No, he can't.
Keys are made in pairs; one is called ""public"" and the other ""private"", but that's an arbitrary choice. I think you're using the terms in an odd way (the keys are ""public"" and ""private"" from the point of view of the customer), but the scheme is secure as far as it goes.
","189","<public-key-encryption>","1","4","3","2011-11-03 05:03:36","4282346","0","1","","","","2010-11-26 03:21:48",""
"4282326","If I give someone only the public key, can he write messages for himself?","I want to distribute license keys, which an application at the customer premises will need to decode.
I was thinking to give him the private key, so that the app can decode, and keep the public key for myself in order to encrypt license files.
Now, the n00b question is: if I give him only the private key and keep the public key very, very safe, can he create license files which can be decrypted by the private key?
I know that I seem to be standing everything on its head here, but I hope that you can see why.
","This answer is almost a year late, but I just happened to come across this question.
If you don't mind that the license key file is readable (after all, the customer has the key to decrypt it), instead of encrypting  the file, why don't you just digitally sign it?
You would sign the file with the private key, which you keep safe, and verify the signature in the app using the public key, which the customer gets a copy of. The license key file cannot be modified without breaking the signature.
","189","<public-key-encryption>","1","0","3","2011-11-03 05:03:36","4282346","0","1","","","","2010-11-26 03:21:48",""
"50286710","unprotect data with password using .net core DataProtection?","My case is that I want to make the data protected even from people who have access to the back-end (the keys store), so they couldn't read it without the user's (represented by the client app, in my case the browser) assistance.

One option is to have the decryption keys stored on the client and passed with each request which sounds pretty messy to me and i'm not sure I want my keys to wander around the net like this. What I imagine though is that the client will keep some token (it might be a password the user knows) and the decryption can't happen without it.
I thought about using the purpose string for this, I have the feeling it is not a good idea since its main purpose is isolation. On the other hand it is part of the additional authenticated data used for subkey derivation. (based on this article https://docs.microsoft.com/en-us/aspnet/core/security/data-protection/implementation/subkeyderivation?view=aspnetcore-2.1#additional-authenticated-data-and-subkey-derivation).
I came across some examples that create their own symmetric encryption with a lower level classes. (like this post Encrypt and decrypt a string in C#?). Since I'm not an expert in this area I would like to use as much build in classes as possible. 

What is the recommended way to achieve what I need with the classes from the Data Protection API? (I'm using .net core 1.1 on Ubuntu)
","","189","<encryption><asp.net-core><.net-core><public-key-encryption>","1","","0","2018-05-11 16:30:49","","0","","9774704","","2018-05-11 16:30:49","2018-05-11 06:58:06",""
"44707649","Can Forest crack public-key cryptography?","Can Rigetti Forest quantum computing be used to crack (in a reasonable amount of time) public-key cryptography. Ie, can you use it to hack Bitcoin & Ethereum?
If so, write a solution in code using the Python library for Quil, called pyQuil. 
","No. They are announcing so far a computer with 2 qubit gate scheme. This is not enough for doing anything. It's exciting news to work with this because it SEEMS to be a good environment (a full stack eco-system) to test the interfaces between classic/quantum computers, creating the API, etc... but the quantum computer with 2 qubits is not very useful in general.
About the cryptocoins, let's separate the issues: Bitcoin address is NOT the public key of the owner of the coin, but a hash of the public key. The public key is only revealed when you SPEND your bitcoins. Then you HASH you public key again (to prove that you own that address) and use you private key to sign the transactions, etc, etc...
So, EVEN IF you have a strong quantum computer, they will not break the bitcoin. HOWEVER IF you use the same address TWICE, it means, you spend some money with the address A and then make another deposit to the same address, then the public key is accessible because it was published at the time you spent the first time... then the strong quantum computer will be able to find the private key and spend your bitcoins.
I don't know about Etherium, but I assume it must be something similiar to Bitcoin... any serious cryptographic system today must prevent to be protected against quantum computers.
--
Kudos to Graig, in the comments: Yes, there's yet another risk. Someone could crack the keys in between the moment that transaction is published and ""committed"". Very interesting point.
","188","<public-key-encryption><cracking><quantum-computing>","3","2","1","2017-06-26 20:41:01","","1","","","","","2017-06-22 19:16:35",""
"52321052","RSA encryption with OpenSSL using char array public key","I have a public key stored in a variable like so:
static const char publicKey[] =
""-----BEGIN PUBLIC KEY-----\n\
MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDCKFctVrhfF3m2Kes0FBL/JFeO\
cmNg9eJz8k/hQy1kadD+XFUpluRqa//Uxp2s9W2qE0EoUCu59ugcf/p7lGuL99Uo\
SGmQEynkBvZct+/M40L0E0rZ4BVgzLOJmIbXMp0J4PnPcb6VLZvxazGcmSfjauC7\
F3yWYqUbZd/HCBtawwIDAQAB\n\
-----END PUBLIC KEY-----"";

I would like to encrypt with PKCS #1 v1.5 padding (RSA_PKCS1_PADDING) but I can't figure out how to load the key from memory instead of a file:
void init()
{
    RSA* rsa = RSA_new();

    //what now?
    //rsa = PEM_read_RSA_PUBKEY(file, &rsa, NULL, NULL); //requires a file
}

void encrypt(unsigned char* data, int length)
{
    //can input buffer and output buffer be the same?
    RSA_public_encrypt(length, data, data, rsa, RSA_PKCS1_PADDING);
}

Also, do I need to call any cleanup code?
","You need to create bio and use functions that work with them:
BIO *mem = BIO_new_mem_buf(publicKey, -1);
RSA *rsa = PEM_read_bio_RSA_PUBKEY( mem, nullptr, nullptr, nullptr );
BIO_free( mem );
... // using rsa

error handling is ommited obviously.

Also, do I need to call any cleanup code?

Yes you always should. I would use RAII with smart pointers:
using BIO_ptr = std::unique_ptr<BIO,int(BIO *)>;

BIO_ptr createMemBio( const char *str )
{
    return BIO_ptr{ BIO_new_mem_buf(str, -1), BIO_free };
}

and so on
","188","<c++><encryption><openssl><public-key-encryption>","0","2","1","2018-09-13 20:26:59","52321270","1","","","","","2018-09-13 20:04:50",""
"16496530","Biometric locked file vault","I'm trying to create a file vault that is locked using biometrics.  Using a library like libCrypto++ seems a nice plan.  Its simple to store things in the vault as the public key can be kept in the clear.  
However the part I'm struggling with is how you convert from the biometrics to the private key.  I assume I need to store the private key somewhere but I can't figure out how.  Otherwise I run the risk of using a very secure system for file storage and then suffering from a far less secure private key.
I'm sure there must be a solution to this, I just can't think of one.
","With biometric you will never get same image or same templates. Everytime you get a new capture, you will have a different image that will supply a different template. So you can`t use it as a key to encrypt some file. You can try to take a hash code from biometric templates. Therefore this is not a good way because noise, rotation, translation and several other things that influence on biometric capture.
There are several academic articles dealing with this subject. But I yet didn`t see one that has a good way to deal with this.
The better way I saw is to use biometric devices to capture a template, match this template with a template previously saved in a database, and if you have a match, release the key kept in a database.
You need this because match of biometric data is not a byte to byte equal operation have many other things to care as I told before.
","188","<c++><public-key-encryption><private-key><biometrics>","0","1","1","2013-06-05 21:22:06","16950118","0","","","","","2013-05-11 11:19:21",""
"16879230","Public Key signing/verification","I'm developing an application to manage file and email encryption using (primarily) PKI. I have a Public Keyring with a list of contacts and their Public Keys. 
Referring back to the olden days when I used PGP, I recall a requirement to sign public keys with your Private Key. 
Is this a necessity on PKI and if so, what does this signing achieve? Is it bad practice to simply hold a list/database of people's names (and email) and their Public Key? Surely if their public key is - in any way - tampered with the encryption would fail and as you choose who you're sending or sharing the encrypted data with, even if a 'successful tamper' went unnoticed, the encrypted data wouldn't end up in the wrong hands anyway?
","The whole thing about signing a public key with a private key is useful when you have a dedicated key-pair that you use only for signing, and then other key-pairs that you use for encrypting.  This dedicated key-pair is your ""trusted"" key-pair that is somehow known to be legitimately attached to you (often by having it signed by a certificate authority or by having many trusted people sign that they have verified it's connection to you.)
You use this ""trusted"" private key to sign your not-quite-as-trusted public key.  This way, people can un-sign/decrypt your new public-key with your trusted public-key.  This is only mathematically possible if it was signed by your trusted private-key.
This process helps people to be sure that this new public-key actually belongs to you.
","186","<public-key-encryption><pki>","2","2","1","2013-06-04 14:45:40","16879250","7","1","","","","2013-06-02 02:30:01",""
"23779703","In iOS application for safe login and secure password protection which mechanisms or methods are good for security purpose.? RSA encryption?","In iOS application i have to make user's login safe and secure and user can login from different iPhones having same application downloaded. Application should work in offline too. So which method should i implement? 
I searched and got RSA encryption in which there is private and public key method but i can't figure out how i implement it in application?whether i hold both keys in server and client side or who get which key? And how can i make only one key generation for every application downloaded? As data should roam securely between client server system.
Is there any other mechanism which i should consider implementing in my problem?
","You don't need to perform any encryption. Just store the passwords in the keychain, which has stronger encryption than anything you could possibly implement — as it's integrated into the Secure Enclave which has no public API other than keychain and already uses RSA encryption, among other things to make it even stronger than just that alone.
If the user enables iCloud KeyChain syncing, then the password you store there will be synced across all their devices.
Your application will work offline.
If the user has a weak passcode to unlock their device, then the encryption will not be very good - it can probably be cracked in under an hour (although this information is old, and may not be valid for modern hardware). The best security practice is to disable ""Simple Passcode"" and use alphabetic characters + digits. It doesn't need to be as strong password, just something short and alphanumeric is fine (the iPhone is a special case, and handles weak passwords better than most security systems). If the user has a finger print scanner available, that can be used to avoid having to type their password in regularly. This is quite secure, contrary to early reports otherwise.
If the devise has no passcode at all, then there is no encryption and it is impossible to implement protection. In that case your only option is to store your secure data on a remote server, and never ever allow the device to access it. Or else just hope nobody steals the phone. Without a passcode/password, it is impossible to store anything securely on an iPhone.
It sounds like you want a single device that will be shared by many users? If that's the case you cannot store the password on the device. It is impossible to achieve security unless there is a passcode and the passcode must be secret, anybody who knows it will be able to bypass any encryption you implement.
","184","<ios><iphone><security><rsa><public-key-encryption>","0","0","1","2014-05-21 10:19:05","23780346","4","","","","","2014-05-21 09:51:22",""
"11802690","Signing data with javascript why it doesn't work with these keys?","I tested the js tool http://shop-js.sourceforge.net/crypto2.htm mentionned here Sign data using private key on client-side (javascript)
with a pfx certificate I self created for test I converted to pem but it doesn't work why ? Seems its length is greater than the sample on the site:
-----BEGIN PRIVATE KEY-----
MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQCoC+KNsgr9zbje
pKex2eyIwCjMJAFDeQXaHUU1e8ivuBhJ1TygvBgw/EjRMvNFjrebngdxpci1mXO/
iBuQ0bs4CE1lowLRO7O/amZ13WZVamPHSW1R5bhs+r7Atk3y+8lWc+EpxCPfxmyn
nOeyKvX5zykHJMfKojJYdGZ5YYulWHSDuHOHDy1FcKTb4nBSK5rJ0+DpjnU7GlfK
BV6MmLGbBsZxbxs5fYVf5pIbGg3CUQ5zAemEWTyXHwmpwRm48ruYsbWAPygdkwkc
wIUM+fC/B8M8uKHojWJgEDVaUpY8AYxCFpUTTxY9IJJYOfuvi9ef0PJ0/nh0GdqE
LihbjK/1AgMBAAECggEAL94SzqHkl58+Bc2JJxQYWGvEM0IeSgXzMModqLp10/fw
kzd2aaKqkWmLpGuK+ElK67z8CddbcL8hRXGTyJC1b6SNx2HDr6396Yx5WyGRwMrp
WR8FUMrK2eAi7eoAEjK+iy2++ZKxVVDEKop7RTkPj/T+jtZfQs0o4iFl/zVV/eba
F1k1RNE4KkYRe/EroIp2VbnhyMkfPqUSXSpQtZib9xjEqASHgyq/BElS1iQ8oxOl
8dipTgkR8SBEwU5v9XPrpeyp7V3aypd0dw1Yh0YrGufihNftQlr9u7OXX1qmJyMS
sPgypdUFQ7mfnjvz7a5dQvt6wuUifvIqrifpo7kUgQKBgQDaa9ZLh6VKLVbvB5jy
TSDADZRX8tsaQx49h0US6wn3tzOoh56kmTrEv/PNLEaC7KB7Fz6JqBvts8xRWEFA
zzWD5y1KzFYU1y4oCSgAvBFGkQwey8WCArvEHnEldIxhWYi5U/IRynk4ipRGwcAB
6rS6UvDcB0wjPgm8oWM26P7+SQKBgQDE9VXjWTqlHfBou58fwiXNg1zHS5LTtC6N
wD77DYuiCGbXCD3Y30+c7bm747Qu2vOlqK+/puO7r8kfT6U9Z9ktdyYuVh1LHAQ9
omiiwEddGJqkbmSWS2dPuXUcsVyX7NKJ64ZgUK8Y37UddUvQfzM6Poxpm7hK89iV
Pfpk3RiUTQKBgAK0y1bsO1QL88PKaE64PeujP29HhwdwRXOltWlimCEFmBJCe+i2
LVA6wJ6OKeF9ZQ+hXhj+iDoNvD5VxZkz+AnGV31Rws9HSz8bve8kZWJmcawAAlZ2
CjWH2wcHxqV+In+JVrp5s77LmMK3q9VaPxr/5BQV0w+suRopNb18bYxhAoGBAKAF
K9jg4BLS9kZBWZE17fzBI5oQPqSeGcy1SvYyFSZ6aQOAAK+5DzfStTqAUB5ZaedH
3DJ75z7QHTnBPeFcBEk6Kt0uvfIOOyvQTe8dBV4P5WR/BF5PuQo/BXVgbHhKwuun
Xa/XHcu5xa6/Y+9ryTUjKHWNPPg4kdj/V/am45dpAoGAf0FHF4WoTsSDqOH31dNF
mdG818Rkk8aFnlki2DYjOIOCRKv2bgscKDqRnKF7OOlMBxY0cYbGcwVTO/ed/hRv
nQgXrj07T+yx2IMdF4SFtUQZeSDIpgsWBYlOW3YS+iC71Cl9FyHqj8BaZ5L/PEsc
HDI8X3cMH7GMCZmYtduSmzI=
-----END PRIVATE KEY-----
-----BEGIN CERTIFICATE-----
MIIDqDCCApCgAwIBAgIRAM5AhzLyP3DHRQSCWdv8TAMwDQYJKoZIhvcNAQEFBQAw
aDELMAkGA1UEBhMCZnIxDjAMBgNVBAcMBXBhcmlzMS0wKwYJKoZIhvcNAQkBFh5z
aWduYXR1cmVlbGVjdHJvbmlxdWVAeWFob28uZnIxCzAJBgNVBAoMAmxrMQ0wCwYD
VQQDDAR0ZXN0MB4XDTEyMDgwMTE1MTIzMVoXDTEzMDgwMTE1MTIzMVowaDELMAkG
A1UEBhMCZnIxDjAMBgNVBAcMBXBhcmlzMS0wKwYJKoZIhvcNAQkBFh5zaWduYXR1
cmVlbGVjdHJvbmlxdWVAeWFob28uZnIxCzAJBgNVBAoMAmxrMQ0wCwYDVQQDDAR0
ZXN0MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAqAvijbIK/c243qSn
sdnsiMAozCQBQ3kF2h1FNXvIr7gYSdU8oLwYMPxI0TLzRY63m54HcaXItZlzv4gb
kNG7OAhNZaMC0Tuzv2pmdd1mVWpjx0ltUeW4bPq+wLZN8vvJVnPhKcQj38Zsp5zn
sir1+c8pByTHyqIyWHRmeWGLpVh0g7hzhw8tRXCk2+JwUiuaydPg6Y51OxpXygVe
jJixmwbGcW8bOX2FX+aSGxoNwlEOcwHphFk8lx8JqcEZuPK7mLG1gD8oHZMJHMCF
DPnwvwfDPLih6I1iYBA1WlKWPAGMQhaVE08WPSCSWDn7r4vXn9DydP54dBnahC4o
W4yv9QIDAQABo00wSzAdBgNVHQ4EFgQUOq1xir7kKG9Op42730/t5FJzQFMwCwYD
VR0PBAQDAgeAMB0GA1UdJQQWMBQGCCsGAQUFBwMCBggrBgEFBQcDBDANBgkqhkiG
9w0BAQUFAAOCAQEAJAWRgsGlqfU4U6N35rZ+Y/ZVab5C9ddAwqKYuMwcl1VPFTxx
70WFaqA8qCg/4sOHsBONuBIYbHYOlMDSA07cHfJi6JCvEqs9UJzPXgJwCZZggqQ4
/oYHFtSF5MX1+FlVNubJ5W6iko8+CqyYWXtT1jE0Ei5kDKW7KZC7wb2e2PT22RA4
+kb+Qr7smiDItc+8eSfkREmuXw/bwU0ThTG3Uc97GhRv03RBgC50ccYJdpcfQwEX
paa2KIi5ve06rNpIPiQMFT5z5cTDYuyLks1RvEjqPQGLvIr0GYU07P2wL8s/Bemg
pq2FtTsQa8SJz4KSsNSEw6nqJWkdn4zZ8fiXiQ==
-----END CERTIFICATE-----
","","183","<javascript><encryption><public-key-encryption><encryption-asymmetric>","0","","0","2012-08-03 20:15:59","","2","","-1","","2017-05-23 10:24:34","2012-08-03 20:15:59",""
"22154458","OpenSSL analogue for Java","Is there any way to do these OpenSSL operation using Java
openssl genrsa -out private.pem 2048
openssl pkcs8 -topk8 -in private.pem -outform DER -out private.der -nocrypt
openssl rsa -in private.pem -pubout -outform DER -out public.der

to generate private.der and public.der
","KeyPairGenerator gen = KeyPairGenerator.getInstance(""RSA"");
gen.initialize(2048);
KeyPair pair = gen.generateKeyPair();
try (OutputStream os = Files.newOutputStream(Paths.get(""public.der""), StandardOpenOption.CREATE_NEW)) {
  os.write(pair.getPublic().getEncoded());
  os.flush();
}
try (OutputStream os = Files.newOutputStream(Paths.get(""private.der""), StandardOpenOption.CREATE_NEW)) {
  os.write(pair.getPrivate().getEncoded());
  os.flush();
}

","182","<java><openssl><rsa><public-key-encryption>","2","2","1","2014-03-03 18:42:40","22154667","4","","","","","2014-03-03 18:31:00",""
"20427005","Ensuring Data completeness and validity on third party storage","I'm dealing with untrusted external storage and need to ensure the storage provider does not withhold any records in a query.
Example:
I have two trusted entities TA and TB, those entities should be able to alter the data that is stored in the cloud/untrusted storage, but nobody else.
So my solution I equip TA and TB with Public-Keys and i have a data structure that can be compared to a table with versions say
 Ver | Data | Signature       | Signee
  4  |  ... | (AAAAAAAAA)_TA  | TA
  3  |  ... | (ZZZZZZZZZ)_TB  | TB
  2  |  ... | (YYYYYYYYY)_TA  | TA
  1  |  ... | (XXXXXXXXX)_TA  | TA

So when I retrieve such a table from the storage provider, I can easily verify
the signatures and check whether the signature is correct, whether the signee was allowed to change the table or not.
However, I would also like to check for record completeness. Say TA uploads version 4, but TB is only aware of all records up to Version 3. Now the storage provider may withhold Version 4 completely when TB queries it. 
As there is no direct sidechannel between TA and TB, there is no way to exchange the current version. Is there a way to circumvent this?
I was thinking of periodically inserting dummy records to at least have some time certainty. However, this approach lacks scalability and would result in a lot of storage and signing overhead.
What is the actual system property i am looking for (it is hard to find research for something you do not know the name of)?
","If the problem was about record integrity, I would recommend to use MAC (Message Authentication Code). In this case you should use symmetric key cryptography, and it is much more efficient than cryptographic signatures (asymmetric).
I thought about two directions:

You can reduce your problem to record integrity. If you have specific important data that you want to verify, you can just create specific table in the storage that saves when each of the trusted entities updated each of your important variables.
Important data can be something like: number of records (total, new, according to some category), latest version, etc.
When someone does a change that affects important data, he updates the relevant record in the spacial table, and sign on the record - and the record contains also the date of the last update.
Now, to prevent the untrusted storage from returning old records or such things, each of the trusted parties must update the records at least once every some time period (for example - one day)- the records might not changed (only the date in the record), and the sign will change (now the sign is on later date).
When entity reads information, he can verify that the data is authentic and was true for (in the example) at most one day before. If the date of the returned record is older than one day, than it should not be considered.
You can change the frequency of the periodic updates according to your needs. For this option you can use MAC instead of signatures as well (to improve efficiency).
You can try another strategy: You cannot validate the completeness of every update, but you can try to catch the untrusted storage if it tries to lie! You can do it by scheduling updates and query for them. 

Last thing - You wrote: 

As there is no direct sidechannel between TA and TB, there is no way
  to exchange the current version. Is there a way to circumvent this?

I believe you meant communication channel. Side-channel is something else. If it was me, I would just create such communication channel to solve the problem. And by the way, similarly to the first option I describe, you can create such a channel:
Create a table of messages from the different entities where they announce about the important changes they did and sign about them with the date of the change:
Entity | Changes | Date | Signature (or MAC)
Like in the first option every entity must add such a message once every some predefined time period - and you have trusted communication channel between the entities.
","180","<security><encryption><cloud><public-key-encryption><verification>","10","2","2","2013-12-13 22:30:43","20574265","0","1","506651","","2013-12-13 22:30:43","2013-12-06 14:59:47",""
"20427005","Ensuring Data completeness and validity on third party storage","I'm dealing with untrusted external storage and need to ensure the storage provider does not withhold any records in a query.
Example:
I have two trusted entities TA and TB, those entities should be able to alter the data that is stored in the cloud/untrusted storage, but nobody else.
So my solution I equip TA and TB with Public-Keys and i have a data structure that can be compared to a table with versions say
 Ver | Data | Signature       | Signee
  4  |  ... | (AAAAAAAAA)_TA  | TA
  3  |  ... | (ZZZZZZZZZ)_TB  | TB
  2  |  ... | (YYYYYYYYY)_TA  | TA
  1  |  ... | (XXXXXXXXX)_TA  | TA

So when I retrieve such a table from the storage provider, I can easily verify
the signatures and check whether the signature is correct, whether the signee was allowed to change the table or not.
However, I would also like to check for record completeness. Say TA uploads version 4, but TB is only aware of all records up to Version 3. Now the storage provider may withhold Version 4 completely when TB queries it. 
As there is no direct sidechannel between TA and TB, there is no way to exchange the current version. Is there a way to circumvent this?
I was thinking of periodically inserting dummy records to at least have some time certainty. However, this approach lacks scalability and would result in a lot of storage and signing overhead.
What is the actual system property i am looking for (it is hard to find research for something you do not know the name of)?
","This problem is not fully solvable without dummy records:
Let's call the state when the current version is version 3 ""state 3"", and the state when the current version is version 4 ""state 4"". No matter how you sign these states - as long as the attacker is telling you ""state 3 is the current one"" (showing you the entire database as it was during state 3), you can't know if this is true or if state 4 exists in the meantime.
Thus, you will have to periodically sign ""no change"" updates. You won't be able to avoid the signing overhead, but you don't have to store all of these. You make a separate ""lastupdate"" table:
 Signer | Last | Timestamp | Signature
  TA    |  4   | 2013-1... | (TA;4;2013-1...)_TA
  TB    |  3   | 2013-1... | (TB;3;2013-1...)_TB

meaning ""Signer TA confirms that as of 2013-1..., the last version sent by me was 4"".
If the storage provider cannot show you a current confirmation from all signers that they didn't issue a newer version, you have to assume that he is hiding something (or something broke - either way, the data is not up to date). Any new signed statement replaces the older ones from that signer, because they are irrelevant now.
Now, if you don't have just one versioned ""thing"", but a large number of them, you don't necessarily have to have one such dummy log per ""thing"". For example, you could calculate a hash (or hash tree) over all the most current lines by your signer (e.g. ""Thing A, Version 3. Thing B, Version 7. Thing C, Version 2."") and then just put the hash or the root of the hash tree in the lastupdate table.
If you really want to avoid additional signatures, and some things get updated all the time, you could include the hash and timestamp in the signatures of the version records you sign - the most current signed record would then be sufficient proof for freshness, and if it were too old, you could still use the ""lastupdate"" table. This is not worth the complexity, IMHO.
","180","<security><encryption><cloud><public-key-encryption><verification>","10","2","2","2013-12-13 22:30:43","20574265","0","1","506651","","2013-12-13 22:30:43","2013-12-06 14:59:47",""
"12619862","Encryption Decryption on Multiple Servers","We have system setup that involves multiple servers. For e.g access management server does the authentication part when a user logs in to the application, on successful login it forwards the HTTP Request to a web-server that further forwards it to the application server.   
Now the requirement is that during authentication at AM server, we need to write some data in cookies, add these cookies in HTTP request being forwarded to the application server. The applications deployed on App Server will read these cookies and use the value.    
This I have done and tested successfully. But actually the data in cookies needs to be in encrypted format. So the AM server should encrypt the data and App server should decrypt the data to use it.
I created a JCEKS keystore on AM server, added one Encryption Key to it using keytool command. Then in my custom class written on AM server, I use Cipher to encrypt the data with AES-128 algorithm. This is done successfully.
I also created another JCEKS keystor on my App server, added an Encryption Key to it using keytool command. Then I exported the cert from keystore of AM server and imported it into the keystore of App server which created a TrustedCert entry in App server's keystore.
But when I decrypt the data on App server using Cipher and AES-128 also, I get exception:
javax.crypto.BadPaddingException: Given final block not properly padded

I must be missing something in my keystore setup. Please provide some guidance on how to do this.
Thanks!
","I got the solution. What I was doing wrong was that i was generating encryption keys in both the keystores. Correct way is to generate a secretkey in one keystore and export-import it to another keystore. I was not able to do this with keytool so i used keytool IUI, great tool!!!
","180","<java><public-key-encryption>","1","1","1","2012-10-01 10:16:00","","0","","589206","","2012-09-27 11:57:15","2012-09-27 11:02:01",""
"1541916","DSA public key system verification with Silverlight","I need to verify a DSA signature in Silverlight and since the runtime does not include the System.Security.Cryptography.DSA class I was wondering if anyone has an alternative?
","Unfortunately there is not, unless you could find an open source, safe managed code implementation elsewhere that would compile within the BCL subset of Silverlight.
","180","<silverlight><public-key-encryption>","0","0","1","2009-10-10 16:22:32","1548374","0","","","","","2009-10-09 05:13:38",""
"12025391","Setting up public key encryption for git ssh","I want to to setup public key access to my git shell application (windowspowershell v1.0). It's the shell application that comes with the github for windows application.
I want to push commits to a bare repository on my remote CentOS web server.
","just put your keypair in %USERPROFILE%/.ssh/, and upload your public key to server ~/.ssh/authorized_keys.
","180","<git><version-control><github><public-key-encryption><ssh-keys>","2","1","1","2013-03-25 17:54:59","12025464","0","","102536","","2013-03-25 17:54:59","2012-08-19 09:00:57",""
"17789005","Generate Keytool Object from CSR","I have to develop an application which uses another application for generating a CSR. After generating the CSR I have to provide this CSR along with a SHA256 hash of the public key to a CA. The problem is the application which generates the CSR doesn't generate the hash. 
How do I generate the hashcode?
Can I create a keystore object using this particular CSR and then extract the hash from it? 
Or can anyone suggest any other technique?
","Your question is missing some details like what language you are developing in, if you need to do this programmatically or if command line OpenSSL is an option.
You can do this with the following OpenSSL command lines (I'm sure there is an equivalent way to do this with the OpenSSL C libraries).
# Extract public key from CSR
openssl req -noout -in my.csr -pubkey > pubkey.pem

# Convert public key to DER format
openssl rsa -in pubkey.pem -outform der -out pubkey.der

# Take the SHA256 hash of the public key
openssl dgst -sha256 pubkey.der

","179","<certificate><keystore><public-key-encryption><sha><csr>","1","1","1","2014-03-18 02:44:10","","0","","321731","","2014-03-18 02:44:10","2013-07-22 13:35:04",""
"6429048","Exchanging Symmetric Keys","I have a WinForms client that is sending encrypted data to a web service.  The WinForms client creates a Symmetric RijndaelManaged sessionKey and also has a ""hard-coded RSA asymmetric public key"".
I am using the EncryptedXml class which makes it really easy to package up my data.
The Web Service has both the private and public keys ""hardcoded"" and can successfully decrypt the SessionKey and then use it to decrypt the actual data I am sending.
This is pretty much handled automatically by the EncryptedData class.
The problem I am having is that on the Web Service end when I want to reply, I can't seem to figure out how to get the SessionKey that was sent over.  
Before I do any decrypting on the Web Service side, I can see the encrypted session key, but after I decrypt the XML, it's gone (and therefore I don't have any session keys for my reply).
Any ideas how I can get this unencrypted key?
","The reason that you cannot see the session key is that it is automatically decrypted and used. Normally it is considered part of the XML. If you want to get at it, just use
encryptedxml.decryptencryptedkey
And you should be alright. Note that for all the less important security warnings, the code represented here is vulnerable to both man in the middle attacks and to a lesser extend to padding oracle attacks. It should help against most eavesdropping attempts though.
Finally, reusing a session key is considered pretty bad security practice too. If you reuse it, at least consider using an IV, e.g. a counter for each followup message.
","178","<encryption><encryption-asymmetric><public-key-encryption><encryption-symmetric>","0","0","1","2011-06-21 20:46:56","","3","","","","","2011-06-21 16:55:03",""
"38285575","Can I use same public key for ssh handshake and authentication?","I have an application that is distributed and installed in many machines. There is a central machine which can request other machine where the application installed and the other machines can request the central machine. So the each installation will act as a server as well as client. I want to secure the access using ssh public key cryptography.
For simplicity, let's say server A(manager - which is installed first) and server B have the application installed. 
Let's say when server B installed, server A's public key will be available in server B. 
Also assume server A will make the first request to server B. When doing so,  the server A will get server B's public key during the handshake(by verifying the fingerprint, the key will be saved in server A) and server A will send its public key to server B for authentication. As server B already has the server A's public key, authentication successful?.
When server B wants to request server A, the server A will send its public key during the handshake and it is verified against the server A's public key available in server B. For authentication, server B will send its public key which will be verified against the public key that server A got during the previous request handshake(from server A to server B).
One point to note is, there is no user involved. The application is accessible to all the users of the machine.
My query is, do we need separate keys for handshake and authentication or as I described single key is enough?
Also please let me know the above explained security model will have any issues particularly security related?
Let me know if you need more information.
Thanks,
Naga
","Yes. This is called Host-Based authentication as described in the RFC4252, section 9. But note that is poses several security threads and using proper (openssh) certificates makes much more sense these days (or Kerberos).
","178","<ssh><rsa><public-key-encryption><public-key>","0","0","1","2016-07-10 13:15:17","38292267","3","1","275960","","2016-07-09 19:36:52","2016-07-09 19:29:56",""
"22413179","Unable to connect more than 1 client to the same server via ssh with priv/pub key pair. Only first client can login w/out password","I setup a client linux computer to connect to a linux server via ssh/sshfs with a priv/pub key pair so it wouldn't require a password. I used this method:
http://www.linuxproblem.org/art_9.html

On client, create priv/pub key pair using ssh-keygen -t rsa
Create .ssh directory on server: ssh user@192.168.1.111 mkdir -p .ssh
Add public key to server's authorized keys: cat .ssh/id_rsa.pub | ssh user@192.168.1.111 'cat >> .ssh/authorized_keys'

This works. BUT, when I try either of the following methods on another computer, they both fail (Note: I tried this on two other computers and both failed):

Create a new priv/pub key pair on this second computer and just like on first computer, export the pub key to the server (This fails)
Copy the id_rsa and id_rsa.pub to the .ssh directory on the new client computer and use that (this also fails)

On both the 2nd and 3rd client it keeps asking for the remote user's password (not the password for the key file). I've now tried this on 3 different computers, and it only works on the first client I set up. No others work. Why would the server only accept the first one?
Looking in the logs, I see the following difference in the successful client and a rejected client:
//Rejected
/var/log/audit/audit.log:type=USER_AUTH msg=audit(1394819951.391:76): user pid=1787 uid=0 auid=4295967295 ses=4295967295 subj=system_u:system_r:sshd_t:s0-s0:d0.c1023 msg='op=pubkey acct=""myuser"" exe=""/usr/sbin/sshd"" hostname=? addr=192.168.1.138 terminal=ssh res=failed'

//Successful
/var/log/audit/audit.log:type=USER_AUTH msg=audit(1394821121.443:114): user pid=1865 uid=0 auid=4395767295 ses=4395767295 subj=system_u:system_r:sshd_t:s0-s0:d0.c1023 msg='op=pubkey_auth rport=56096 acct=""myuser"" exe=""/usr/sbin/sshd"" hostname=? addr=192.168.1.125 terminal=? res=success'

The difference is the successful one has rport=56096 and the other has no ""rport"". 
","","175","<linux><ssh><public-key-encryption><ssh-keys><sshfs>","1","","0","2014-03-14 18:39:23","","4","","","","","2014-03-14 18:39:23",""
"50592110","Converting a hex String to x509 encoding","I'm working with some Android Java code that uses ECDSA keys. The code compiles and runs fine, but has some logic errors during the verification process. I want to try using a constant key pair (that's known to be valid) to troubleshoot the program.
Using an online generator, I got an EC public key in hex,

0x044fb7cebbb1f4a1e0412c8e0b6f2d675ebfee000c5e860a81ffd795b5743033dec0e114abfba3de8db8705fc8ed985c5550c66a6ee9fdd258d058a2ef749eba78

As well as a valid private key to complete the pair,

0x0c84e7e707b31ecf0254e8cb3040513883d92d81e977ad4754a409a6ab18ee51

I can convert the hex string to a primitive byte array, but that byte array appears to be invalid. I cannot figure out how to convert a hex representation of my keys to a X509 representation so that I can make a Java key object.
KeyFactory mFactory = KeyFactory.getInstance(""EC"");
X509EncodedKeySpec mPublicKey = new X509EncodedKeySpec(publicKeyBytes);
PublicKey publicKey = mFactory.generatePublic(mPublicKey);

That code results in:
java.security.spec.InvalidKeySpecException: com.android.org.conscrypt.OpenSSLX509CertificateFactory$ParsingException: Error parsing public key

I am reasonably sure that my conversion from hex string to byte array is working, but I'll include that method as well for a sanity check.
private static byte[] hexStringToByteArray(String s) throws IllegalArgumentException {
    int len = s.length();
    if (len % 2 == 1) {
        throw new IllegalArgumentException(""Hex string must have even number of characters"");
    }
    byte[] data = new byte[len / 2]; // Allocate 1 byte per 2 hex characters
    for (int i = 0; i < len; i += 2) {
        // Convert each character into a integer (base-16), then bit-shift into place
        data[i / 2] = (byte) ((Character.digit(s.charAt(i), 16) << 4)
                + Character.digit(s.charAt(i+1), 16));
    }
    return data;
}

The end goal is to have a constant, valid PublicKey/PrivateKey object for testing. Any advice about how to generate those objects would be greatly appreciated. 
","","175","<java><android><public-key-encryption><ecdsa>","0","","0","2018-05-29 20:02:40","","2","","","","","2018-05-29 20:02:40",""
"40785970","Can Turbo LockBox use certificates from smartcard PKCS11","There is nice Delphi cryptography library https://sourceforge.net/projects/tplockbox/ It is possible to sign and very documents with this library. The question is - can this library access certificates that are stored in smarcart or can this library otherwise can use smartcard for signing and verification of documents. Maybe Turbo Lockbox with smartcard capabilities can replace the commercial XMLBlackbox product from Eldos https://www.eldos.com/sbb/desc-xml.php 
","","175","<delphi><public-key-encryption><pkcs#11>","1","","0","2016-11-24 12:04:39","","1","","","","","2016-11-24 12:04:39",""
"16915234","Unable to sign text block with Private Key","I am trying to create a digital signature of a load of clipboard text. I am:

Creating a SHA-256 hash of the plain text.
Encrypting this hash with my PRIVATE key.
Attempting to decrypt this with my PUBLIC key.

I'm doing this as I am of the understanding that anything signed with my PRIVATE key can be decrypted with my PUBLIC - such as this for verification?  Is this wrong?
I'm encrypting the hash with these methods:
                public static string EncryptText(string text, int keySize, string publicKey)
            {
                var encrypted = Encrypt(Encoding.UTF8.GetBytes(text), keySize, publicKey);
                return Convert.ToBase64String(encrypted);
            }

            public static byte[] Encrypt(byte[] data, int keySize, string publicKeyXml)
            {
                if (data == null || data.Length == 0) throw new ArgumentException(""Data are empty"", ""data"");
                int maxLength = GetMaxDataLength(keySize);
                if (data.Length > maxLength) throw new ArgumentException(String.Format(""Maximum data length is {0}"", maxLength), ""data"");
                if (!IsKeySizeValid(keySize)) throw new ArgumentException(""Key size is not valid"", ""keySize"");
                if (String.IsNullOrEmpty(publicKeyXml)) throw new ArgumentException(""Key is null or empty"", ""publicKeyXml"");

                using (var provider = new RSACryptoServiceProvider(keySize))
                {
                    provider.FromXmlString(publicKeyXml);
                    return provider.Encrypt(data, OptimalAsymmetricEncryptionPadding);
                }
            }

but passing my PRIVATE KEY down instead of my PUBLIC KEY.
Then to verify the signature, I am using:
                public static string DecryptText(string privateKey, int keySize, string text)
            {
                var decrypted = Decrypt(Convert.FromBase64String(text), keySize, privateKey);
                return Encoding.UTF8.GetString(decrypted);
            }

            public static byte[] Decrypt(byte[] data, int keySize, string publicAndPrivateKeyXml)
            {
                if (data == null || data.Length == 0) throw new ArgumentException(""Data are empty"", ""data"");
                if (!IsKeySizeValid(keySize)) throw new ArgumentException(""Key size is not valid"", ""keySize"");
                if (String.IsNullOrEmpty(publicAndPrivateKeyXml)) throw new ArgumentException(""Key is null or empty"", ""publicAndPrivateKeyXml"");

                using (var provider = new RSACryptoServiceProvider(keySize))
                {
                    provider.FromXmlString(publicAndPrivateKeyXml);
                    return provider.Decrypt(data, OptimalAsymmetricEncryptionPadding);
                }
            }

but passing down my PUBLIC KEY rather than the PRIVATE KEY. At this point, I am getting an error ""Key does not exist"".
I'm presuming this is the case because the PRIVATE KEY contains the relevant key information for the PUBLIC KEY so it can decode this one-way.
How can I sign a block of text in this way that allows me to distribute a signature with it, that can be decrypted by anybody who knows my PUBLIC KEY? 
","After much trawling, I found this page:
http://juzzbott.com.au/blog/signing-and-verifying-data-within-csharp
","173","<public-key-encryption><signing><private-key><sha256><public-key>","0","0","1","2013-06-04 20:35:52","","0","","","","","2013-06-04 10:15:29",""
"7047281","Personal Identity Verification","I'm trying to implement two-factor authentication (a token you hold, a password you know).
http://en.wikipedia.org/wiki/Security_token lists many expensive solutions. I need:

Strong encryption.
The ability to programmatically reset the private key on the token (multiple times, if the token is expensive) and read the new private key.
The ability to encrypt a short string (20 characters or less). I believe this means computational power can be very low.
Something cheap. I'd like to ship these tokens to average consumers (think VISA), if possible.

I don't need:

To protect against physical attacks on the token (I assume this is beyond the skill of the average attacker).
To kill the token remotely.
To store any data on the token aside from the private key.
Time-dependent tokens (for fear they will fall out of sync).

I plan on doing the following:

User inserts the token into a PC.
User enters their password on the keyboard.
The token encrypts the password using the private key.
The application sends the result over the network.
The server decrypts the password using the token's public key. If the password matches I let the user in.

I need to make it reasonably difficult for an average programmer/hacker to read the private key off the token. What are my options? If you believe I am setting the bar too low, what do you suggest?
","""The server decrypts the password using the token's public key""
That doesn't make sense. The point of a public key is that can be public without compromising the security of the system. Perhaps what you meant is that the token contains a public key, and the server stores the private key corresponding to that token?
Security tokens are typically not used in the manner you describe. They are quite commonly used as single sign on (SSO) devices. The token generates a pseudo-random number that is time-dependent. In most cases, the number generated changes every 30 or so seconds. The server is configured with the random seed of the token, so it can generate the same number to verify.
Edit: As per your comment, here's my new suggestion:

Public key on token or client application
Corresponding private key on server
It doesn't matter if the public key is read since knowledge of the public key does not help in guessing the private key
If necessary, change keys at scheduled intervals

","172","<security><public-key-encryption>","0","0","2","2011-08-25 20:33:37","7047454","4","","14731","","2011-08-25 20:33:37","2011-08-12 23:12:07",""
"7047281","Personal Identity Verification","I'm trying to implement two-factor authentication (a token you hold, a password you know).
http://en.wikipedia.org/wiki/Security_token lists many expensive solutions. I need:

Strong encryption.
The ability to programmatically reset the private key on the token (multiple times, if the token is expensive) and read the new private key.
The ability to encrypt a short string (20 characters or less). I believe this means computational power can be very low.
Something cheap. I'd like to ship these tokens to average consumers (think VISA), if possible.

I don't need:

To protect against physical attacks on the token (I assume this is beyond the skill of the average attacker).
To kill the token remotely.
To store any data on the token aside from the private key.
Time-dependent tokens (for fear they will fall out of sync).

I plan on doing the following:

User inserts the token into a PC.
User enters their password on the keyboard.
The token encrypts the password using the private key.
The application sends the result over the network.
The server decrypts the password using the token's public key. If the password matches I let the user in.

I need to make it reasonably difficult for an average programmer/hacker to read the private key off the token. What are my options? If you believe I am setting the bar too low, what do you suggest?
","if the audience is consumers then it is quite possible that the computer they use is infected somehow - virus/keyboard logger...
IF that is a possibility then the whole scheme becomes risky because of using the PC keyboard...
Putting aside those concerns:
you could run your own ""CA"" and generate client certificates - these can be put anywhere (USB stick...) and the application could work with them for verifying the user - by just using the passphrase as password etc. - the beauty of this is: you get for example the ability to revoke certificates etc.
another point:
Depending on how your application communicates with the server you could use this scheme to have SSL connections... SSL standard contains the option not only of authenticating the server but also the client by means of a client certificate...
EDIT:
anything cheap could be read - smartcards would be better but they are not really cheap and the PC needs additional HW to handle them... 
Secure but NOT cheap option:
if you want something secure then you need an external smartcard reader with a keyboard, so that nothing sensitive it entered via PC keyboard - but that is not cheap... 
another option (cheaper but still secure):
use the mobile as second channel, they login to your app - the app contacts the server, the server generates some unique and time-limited code and sends it via SMS to their mobile and they need to enter that code to complete login process... 
","172","<security><public-key-encryption>","0","0","2","2011-08-25 20:33:37","7047454","4","","14731","","2011-08-25 20:33:37","2011-08-12 23:12:07",""
"50224571","Node js exec how to enter the passphrase for public key in terminal when git clone in a single line","I am writing a script in node.js to clone a git repository. 
 const { exec } = require('child_process');
 exec('git clone <path>.git', (err, stdout, stderr) => {
        if(err){
          return;
        }

        console.log(`stdout: ${stdout}`);
        console.log(`stderr: ${stderr}`);
      });

I need to pass the passphrase key in order to clone using the public key. How to pass it in the single line as an argument for exec('git clone <path>.git'
Passphrase should pass as a param and it should not be saved
Rather than moving in to 2 steps is it possible to do in a single step?
","Looks like git clone will not take a passphrase on the command line. But your node script can read command line arguments. Then you should be able to pass the credentials to the git using node-expect.
","172","<node.js><git><exec><public-key-encryption>","1","1","2","2018-05-10 21:58:04","50282079","2","","1110636","","2018-05-08 04:14:07","2018-05-08 01:33:13",""
"50224571","Node js exec how to enter the passphrase for public key in terminal when git clone in a single line","I am writing a script in node.js to clone a git repository. 
 const { exec } = require('child_process');
 exec('git clone <path>.git', (err, stdout, stderr) => {
        if(err){
          return;
        }

        console.log(`stdout: ${stdout}`);
        console.log(`stderr: ${stderr}`);
      });

I need to pass the passphrase key in order to clone using the public key. How to pass it in the single line as an argument for exec('git clone <path>.git'
Passphrase should pass as a param and it should not be saved
Rather than moving in to 2 steps is it possible to do in a single step?
","In order to clone a repository I have used the following library
    var cmd = require('node-cmd');
    cmd.get(
      `
        git clone <repo-name>
      `,
      function(err, data, stderr){
          console.log(data);
        }
      );

And it worked like a charm 
","172","<node.js><git><exec><public-key-encryption>","1","1","2","2018-05-10 21:58:04","50282079","2","","1110636","","2018-05-08 04:14:07","2018-05-08 01:33:13",""
"9228447","How to know which private key use to decipher when there is more than one in the keystore","I have a system that receives requests encoded with 2 different public keys and which I have to decipher with the respective private keys that I have in the Java keystore.
How can I know which one of the private keys in my JKS I should use to decipher? Preferably better than test-and-fail till I find the correct key?
","Most of encryption standards (like CMS, XML Encrpyption, GPG...) require the inclusion of an unambiguous way to determine the public key used to encrypt. It could be a reference to the public key (i.e. a hash) or a certificate. With this indication it is possible to select the correct private key.
Unfortunately if the system you are using does not provide that kind of indication I don't think there is no other way than try-and-fail.
","172","<java><keystore><public-key-encryption><jks>","1","1","1","2012-07-30 13:29:11","9238980","0","","387076","","2012-07-30 13:29:11","2012-02-10 13:22:56",""
"57238837","Derive Shared Secret From ECDH with existing foreign public key","Im converting a method from nodeSJ to Java, but im having trouble getting it to work. Im stuck trying to calculate a derived shared secret. 
Hoping someone can catch what im doing wrong porting over the nodeJS to Java. 
NodeJS code:
 //the public_key param here is from a different device. 
 sign: function(public_key)
    {
        //dummy values 
        var PRE_SALT_VALUE = 'f0f0f0f0f0';
        var POST_SALT_VALUE = '0101010101';

        const crypto = require('crypto');
        var sha512 = crypto.createHash(""sha512"");

        var EC = require('elliptic').ec;
        var ec = new EC('p256');

        // Generate keys
        var key1 = ec.genKeyPair(); //key1 is gen before pub key
        var key2 = ec.keyFromPublic(public_key, 'hex') //pub key gen from saved cert

        var derived_secret = key1.derive(key2.getPublic()); 
        var derived_secret = Buffer.from(derived_secret.toString(16), 'hex')

        var public_key_client = key1.getPublic('hex') 

        var pre_salt = Buffer.from(PRE_SALT_VALUE, 'hex')
        var post_salt = Buffer.from(POST_SALT_VALUE, 'hex')

        derived_secret = Buffer.from(pre_salt.toString('hex')+derived_secret.toString('hex')+post_salt.toString('hex'), 'hex') // finalyze shared secret 
        // Hash shared secret
        var sha = sha512.update(derived_secret);
        derived_secret = sha.digest();

        return {
            public_key: public_key_client.toString('hex').slice(2), //anyone know why we drop the first byte here?
            secret: derived_secret.toString('hex')  
        }
    }

In progress Java Code:
        //load cert from pem string (passed in from file), foreign cert
        ByteArrayInputStream input = new ByteArrayInputStream(pem);
        CertificateFactory cf = CertificateFactory.getInstance(""X.509"");
        Certificate cert = cf.generateCertificate(input);
        X509Certificate x509Cert = (X509Certificate) cert;

        // get pub key from cert
        PublicKey publicKeyForSignature = x509Cert.getPublicKey();

        // Generate ephemeral ECDH keypair KEY1
        KeyPairGenerator kpg = KeyPairGenerator.getInstance(""EC"");
        kpg.initialize(256);
        KeyPair kp1 = kpg.generateKeyPair();
        byte[] ourPk = kp1.getPublic().getEncoded(); //use this later

        //load KEY2 from others public key
        KeyFactory kf = KeyFactory.getInstance(""EC"");
        X509EncodedKeySpec pkSpec = new X509EncodedKeySpec(publicKeyForSignature.getEncoded());
        PublicKey otherPublicKey = kf.generatePublic(pkSpec);

        // Perform key agreement
        KeyAgreement ka = KeyAgreement.getInstance(""ECDH"");
        ka.init(kp1.getPrivate());
        ka.doPhase(otherPublicKey, true);

        // Read shared secret
        byte[] sharedSecret = ka.generateSecret();

        // Derive a key from the shared secret and both salt keys
        MessageDigest hash = MessageDigest.getInstance(""SHA-512"");
        hash.update(Util.PRE_SALT_VALUE);
        hash.update(sharedSecret);
        hash.update(Util.POST_SALT_VALUE);

        byte[] derivedKey = hash.digest();

        ... etc, derivedKey = secret returned in JS method, ourPk = public_key returned in JS method. 

One thing i notice is that the public/private keys generated from nodejs vs java are different sizes? 65 bytes in node an 91 bytes in java. No idea why that would happen. 
What stands out as wrong here? 
Thanx
Edit:
So basically, I just need to know how to do this in Java
 var EC = require('elliptic').ec;
 var ec = new EC('p256');
 // Generate keys
 var key1 = ec.genKeyPair();
 var key2 = ec.keyFromPublic(public_key, 'hex') //pub key from foreign device     
 var derived_secret = key1.derive(key2.getPublic());  

","Like already mentioned in the comments, to be able to use the shared secret between Java and Node you need to convert the keys accordingly. 
For the key conversion code from this two fine stackoverflow answers can be used:
https://stackoverflow.com/a/57209308/2331445
https://stackoverflow.com/a/36033552
Test
To get a complete test case, one can write a Java program that generates a DER public key, converts it into an uncompressed EC key (65 bytes) and outputs it to the console. It then reads the other PK from the console, converts it to a public key, and prints out the shared secret.
The Node code uses the PK from the Java program, determines the shared secret and a public key. This public key can then be passed to the Java program via copy/paste, which is still waiting for the input.
The Java program finally determines the shared secret and prints it out.
If both shared secrets have the same value, we know it works.
Java
import org.apache.commons.codec.binary.Hex;
import org.bouncycastle.asn1.ASN1Sequence;
import org.bouncycastle.asn1.DERBitString;
import org.bouncycastle.asn1.DERSequence;
import org.bouncycastle.jce.ECNamedCurveTable;
import org.bouncycastle.jce.ECPointUtil;
import org.bouncycastle.jce.provider.BouncyCastleProvider;
import org.bouncycastle.jce.spec.ECNamedCurveParameterSpec;
import org.bouncycastle.jce.spec.ECNamedCurveSpec;

import javax.crypto.KeyAgreement;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.security.*;
import java.security.spec.ECPoint;
import java.security.spec.ECPublicKeySpec;
import java.security.spec.InvalidKeySpecException;

public class Main {

    public static byte[] ecKeyBytesFromDERKey(byte[] ourPk) {
        ASN1Sequence sequence = DERSequence.getInstance(ourPk);
        DERBitString subjectPublicKey = (DERBitString) sequence.getObjectAt(1);
        return subjectPublicKey.getBytes();
    }

    private static PublicKey publicKeyFromEC(byte[] ecKeyByteArray) throws NoSuchProviderException, NoSuchAlgorithmException, InvalidKeySpecException {
        KeyFactory kf = KeyFactory.getInstance(""EC"", ""BC"");
        ECNamedCurveParameterSpec spec = ECNamedCurveTable.getParameterSpec(""secp256r1"");
        ECNamedCurveSpec params = new ECNamedCurveSpec(""secp256r1"", spec.getCurve(), spec.getG(), spec.getN());
        ECPoint publicPoint = ECPointUtil.decodePoint(params.getCurve(), ecKeyByteArray);
        ECPublicKeySpec pubKeySpec = new ECPublicKeySpec(publicPoint, params);
        return kf.generatePublic(pubKeySpec);
    }

    public static void main(String[] args) throws Exception {
        Security.addProvider(new BouncyCastleProvider());
        KeyPairGenerator kpg = KeyPairGenerator.getInstance(""EC"", ""BC"");
        kpg.initialize(256);
        KeyPair kp = kpg.generateKeyPair();
        byte[] ourPk = kp.getPublic().getEncoded();
        byte[] ecPublicKey = ecKeyBytesFromDERKey(ourPk);
        System.out.println(""our ec public key (65 bytes): "" + Hex.encodeHexString(ecPublicKey));

        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        System.out.println(""other public key (65 bytes): "");
        String input = br.readLine();
        br.close();

        byte[] otherPk = Hex.decodeHex(input);
        PublicKey otherPublicKey = publicKeyFromEC(otherPk);

        KeyAgreement ka = KeyAgreement.getInstance(""ECDH"");
        ka.init(kp.getPrivate());
        ka.doPhase(otherPublicKey, true);

        byte[] sharedSecret = ka.generateSecret();
        System.out.println(""Shared secret: "" + Hex.encodeHexString(sharedSecret));
    }
}

Node
One change is required in your node program:
In the line
public_key: public_key_client.toString('hex').slice(2), //anyone know why we drop the first byte here?

the .slice(2) needs to be removed:
public_key: public_key_client.toString('hex'),

because it removes the first byte (which is hex 04) needed to indicate that it is an uncompressed key.  
So just using the public key from the Java program (which will be different for each run) the Node part could look like this:
var publickey = Buffer.from(""<public key from java>"", 'hex');
var derived = sign(publickey);
console.log(derived);

Test

In the upper area you see the Java program and in the lower area the output of the Node program. The shared secret is the same.
","171","<java><node.js><public-key-encryption><ecdh>","0","1","1","2019-08-06 07:59:31","57366928","2","","1247964","","2019-07-29 07:47:54","2019-07-28 07:34:05",""
"19020409","How to encrypt large strings with pri/pub keys using PHP","I need to encrypt large string is it possible to do it with RSA public key private key ?
","Depending on how large the string you're wanting to encrypt is - if it's larger than the modulo - it's usually best to just encrypt a randomly generated string of x bytes that serves as the key to a symmetric algorithm and then use that symmetric algorithm to encrypt the ""large string"".
eg. encrypt a 16 byte (128 bit) key for AES and then encrypt the ""large string"" not with RSA but with AES and append it to the RSA encrypted AES key.
Or you could use a larger modulo, too, but the larger the modulo the more time it'd take to perform encryption / decryption.
","171","<php><encryption><public-key-encryption>","0","2","1","2013-09-26 15:42:27","","0","","","","","2013-09-26 05:56:08",""
"19916998","Encrypting XML with a public key in C#: how to create the SessionKey","Regarding this documentation:
http://msdn.microsoft.com/en-us/library/ms229746(v=vs.110).aspx
I would like to encrypt the XML using a business partner's Public Key, which we have in a text file. So instead of this:
sessionKey = new RijndaelManaged();
sessionKey.KeySize = 256;

and then this:
EncryptedXml eXml = new EncryptedXml();
byte[] encryptedElement = eXml.EncryptData(elementToEncrypt, sessionKey, false);

I need to create a sessionKey using the partner's X509Certificate and send that key as the second parameter to the EncryptData method.  What are the steps to produce a sessionKey from the partner's certificate?
","","171","<c#><xml><public-key-encryption>","1","","0","2013-11-11 22:12:58","","3","","","","","2013-11-11 22:12:58",""
"42640866","BouncyCastle encrypted file is forcing passphrase to be entered","I have a bit of a peculiar issue with BouncyCastle.
What is happening is I am using a public key to encrypt a text file, which is then being transmitted to a third party.  When they attempt to auto-decrypt the file at their end (using Globalscape - not sure of the version), the process fails, asking for a passphrase to unlock the secret key.
If I do the same process, but encrypt the file using GPG4Win with the same key, they are not getting the same issue.
This is the code doing the encryption:
private static bool EncryptFile(Stream outputStream, string fileName, PgpPublicKey encKey, bool withIntegrityCheck)
        {
            try
            {
                var bytes = PgpUtils.CompressFile(fileName, CompressionAlgorithmTag.Uncompressed);

                // encrypt using AES-256
                var encryptedDataGenerator = new PgpEncryptedDataGenerator(SymmetricKeyAlgorithmTag.Aes256, withIntegrityCheck, new SecureRandom());
                encryptedDataGenerator.AddMethod(encKey);

                using (var cOutStream = encryptedDataGenerator.Open(outputStream, bytes.Length))
                {
                    cOutStream.Write(bytes, 0, bytes.Length);
                }

                return true;
            }
            catch (Exception e)
            {
                Trace.TraceError($""Exception in EncryptFile: {e}"");
                return false;
            }
        }

I admit I am a little lost here.  Can anyone point out what I am missing?  Or should I be asking the third party to dig further?
Cheers
","This is more a high level approach  to pin down the underlying problem:
You are encrypting with a Public Key. That means the recipient needs the matching Private Key.
It looks like the recipient has the key because else the client should complain about a missing private key, not about a missing passphrase for the key.
Check the following (from easy to not so easy)

Can the recipient decrypt when he enters the passphrase? If yes, configure the client to save the passphrase.
Try to decrypt with your local gpg
Are you sure that the client has the private key? If not, make sure that the client has the private key (Maybe you use different keys with your Code and gpg4win)
Can the client handle the encryption method at all? I.e. does the client know how to decrypt the message format you send?(""did it ever work?"" - I have no experience with Globalscape)

","171","<c#><bouncycastle><public-key-encryption>","0","0","1","2017-03-16 12:28:25","","0","","","","","2017-03-07 05:27:54",""
"40146212","RSA encryption in Snap","For AP Computer Science my class had to use Snap whose source can be found at https://github.com/jmoenig/Snap--Build-Your-Own-Blocks in class. We had to make a simple encryption algorithm using a Caesar cipher. I thought to myself, why can't you use something more secure?
So I tried making RSA encryption in Snap. I realize snaps computing limitations but wanted something a small as 1 bit or 2 bit encryption to work. My code can be found on this webpage.
The code however does not work and I wanted to know if it was because my understanding of RSA was wrong or I missed a step in RSA. My end goal is for my code to be able to encrypt any text in 1 or 2 bit RSA.
Here is the actual code:




","","170","<encryption><rsa><public-key-encryption>","1","","0","2016-12-31 10:51:54","","7","","472495","","2016-12-31 10:51:54","2016-10-20 05:34:43",""
"9319530","Providing encrypted data, and the means to decrypt it, insecure?","I'm developing an add on to a system I have that will allow my clients websites to pull data from it to display on their sites.  
Now, most of the time the information being stored in the system is not in any way sensitive (because its just published to their website) but some users have set up tables that they want to manage in the system out of convenience, but not publish on their website - though they might want to make a request on it (ie, to check a customer has a login to their website perhaps, or to grab an email address).  So I need to encrypt the responses to reduce the chances of someone getting the data that shouldn't have it.
My plan is that the user will identify themselves with a user ID, a public key, and the name of a query they want to run (which they will have defined in the system itself beforehand) - and the request will take a form something like this:
require(""backend-api.php"");

$myUserID = ""bobs-restaurant.com"";
$myPublicKey = ""sdg136MAGHYasfadgHGQ""; //send this with the request
$myPrivateKey = ""adgljavd8i1356avdilj""; //never send this anywhere
$queryName = ""LIST_OF_DISHES"";

$backend = new backend-api();
$response = $backend->getData($myUserID,$myPublicKey,$queryName);

$list_of_dishes = $backend->decrypt($response,$myPrivateKey);

//user then goes on to use the data in their code or maybe just display it as-is.

It has to be simple, because the users are either not going to be seasoned PHP'ers or they're going to be time poor, and using the system to instead of having to write their own content management solution.
Assuming the above user ID and public key were a match, and the query existed and returned data - I was going to have my system encrypt the response to a private key which is known to the user ($myPrivateKey) and which is known to my system, but never exchanged between the two in a request so that it couldn't be intercepted, and I was going to use something like this reversible encryption class to do the encryption.
The problem is, I'm going to have to provide users with the decryption class so that they can get the data out of the response.
So if Mr Malicious somehow obtains a user ID and public key belonging to someone else, and he has downloaded a copy of the decryption class from the tutorial/user manual on my systems website, am I right in saying that he wouldn't need to know the private key, because he could just work out how to decrypt it from studying the code?
If the answer is yes, what is it that I haven't thought of that will prevent that from happening?
","Mr Malicious wouldn't know how to decrypt anything from simply studying the code. The best he could do would be to brute force the ""private key"".  
I put that in quotes because this actually isn't public key encryption or cryptography.  This would only be public key cryptography if your server encrypted the data using the client's public key, then the client decrypted that using their private key.  If that were the case, the server would have no need to know the private key at all. But it sounds like you're using the public key for something entirely different.
What you seem to be talking about here is symmetric key cryptography (using the same key to encrypt and decrypt the data).
If you use a strong encryption / decryption method, your method seems fine, but I would go with an existing algorithm such as Blowfish or AES.
","169","<php><public-key-encryption>","0","1","2","2012-02-16 22:04:27","9319707","2","","","","","2012-02-16 21:43:02",""
"9319530","Providing encrypted data, and the means to decrypt it, insecure?","I'm developing an add on to a system I have that will allow my clients websites to pull data from it to display on their sites.  
Now, most of the time the information being stored in the system is not in any way sensitive (because its just published to their website) but some users have set up tables that they want to manage in the system out of convenience, but not publish on their website - though they might want to make a request on it (ie, to check a customer has a login to their website perhaps, or to grab an email address).  So I need to encrypt the responses to reduce the chances of someone getting the data that shouldn't have it.
My plan is that the user will identify themselves with a user ID, a public key, and the name of a query they want to run (which they will have defined in the system itself beforehand) - and the request will take a form something like this:
require(""backend-api.php"");

$myUserID = ""bobs-restaurant.com"";
$myPublicKey = ""sdg136MAGHYasfadgHGQ""; //send this with the request
$myPrivateKey = ""adgljavd8i1356avdilj""; //never send this anywhere
$queryName = ""LIST_OF_DISHES"";

$backend = new backend-api();
$response = $backend->getData($myUserID,$myPublicKey,$queryName);

$list_of_dishes = $backend->decrypt($response,$myPrivateKey);

//user then goes on to use the data in their code or maybe just display it as-is.

It has to be simple, because the users are either not going to be seasoned PHP'ers or they're going to be time poor, and using the system to instead of having to write their own content management solution.
Assuming the above user ID and public key were a match, and the query existed and returned data - I was going to have my system encrypt the response to a private key which is known to the user ($myPrivateKey) and which is known to my system, but never exchanged between the two in a request so that it couldn't be intercepted, and I was going to use something like this reversible encryption class to do the encryption.
The problem is, I'm going to have to provide users with the decryption class so that they can get the data out of the response.
So if Mr Malicious somehow obtains a user ID and public key belonging to someone else, and he has downloaded a copy of the decryption class from the tutorial/user manual on my systems website, am I right in saying that he wouldn't need to know the private key, because he could just work out how to decrypt it from studying the code?
If the answer is yes, what is it that I haven't thought of that will prevent that from happening?
","A good encryption method never relies on people not knowing how it works for its security. In fact, if you're going to use encryption, you never want to try and make your own. If the method used to encrypt something is simple, like ROT13, then yes, knowing the method will allow an attacker to decrypt it pretty easily. 
However, an encryption method like AES is widely known, published, and used all over the world. Everyone knows how it works, but without knowing the keys used to encrypt and decrypt, it's hard to break.
The biggest issue that you have is that both the encryption class that you linked, and AES are symmetric or pre-shared key encryption methods. This means that you must use the same key to encrypt and decrypt the data. This doesn't work for your purposes, because you and your users don't know the same key. If you have a way to know the same key, check out mcrypt for PHP
Otherwise, use asymmetric key cryptography. This works using the method you described, where something can be encrypted using a public key that anyone can know, but only decrypted by the person with the private key. The easiest version of this to use is GPG, and it's possible to use it in PHP, although probably more work to setup. See this article
","169","<php><public-key-encryption>","0","1","2","2012-02-16 22:04:27","9319707","2","","","","","2012-02-16 21:43:02",""
"14933060","How to explain public key encryption to non-programmers?","Apologies as this is a bit borderline (off topic) but I think a solution will only come from someone who intimately understands the principles of public key encryption and not just the theory.
A few of my colleagues have to explain public key encryption to students who are not really interested in how it works (technicians, Web developers etc.).  They just need to know when and how to use it.  Unfortunately to pass the course the students must grasp the basics at least.  They do but it is never enjoyable.
We have tried to come up with a way to represent public key encryption practically.  Our best effort was a lockable box/cabinet with two keys/combinations which allowed one student to put something in and one to remove it but we couldn't quite make that work.
I personally would love a way to actually and manually encode something in a way which suggests public key encryption and the way it works but I am nowhere near capable of thinking it through.  A hands-on mechanical device is obviously the easiest for non-programmers to understand.  We are open.
Anyone out there got a solution?  Thanks.
","You could see the public key as a padlock and the private key as the real key that opens it: Alice gets a padlock from Bob, use it to lock a box with a message for Bob; when Bob receives the box can open it with his own key.
","167","<public-key-encryption>","0","0","2","2017-01-28 02:08:13","","0","","","","","2013-02-18 09:30:04",""
"14933060","How to explain public key encryption to non-programmers?","Apologies as this is a bit borderline (off topic) but I think a solution will only come from someone who intimately understands the principles of public key encryption and not just the theory.
A few of my colleagues have to explain public key encryption to students who are not really interested in how it works (technicians, Web developers etc.).  They just need to know when and how to use it.  Unfortunately to pass the course the students must grasp the basics at least.  They do but it is never enjoyable.
We have tried to come up with a way to represent public key encryption practically.  Our best effort was a lockable box/cabinet with two keys/combinations which allowed one student to put something in and one to remove it but we couldn't quite make that work.
I personally would love a way to actually and manually encode something in a way which suggests public key encryption and the way it works but I am nowhere near capable of thinking it through.  A hands-on mechanical device is obviously the easiest for non-programmers to understand.  We are open.
Anyone out there got a solution?  Thanks.
","How about the Paint and Clocks metaphor?
","167","<public-key-encryption>","0","1","2","2017-01-28 02:08:13","","0","","","","","2013-02-18 09:30:04",""
"55290860","Handshake in JWT public/private key authentication using vertx","I created a small vertx auth-server which signs/generates JWT tokens using public/private key.
        PrivateKey privateKey = CertUtil.getPrivateKey(""config/private_key.der"");
        PublicKey publicKey = CertUtil.getPublicKey(""config/public_key.der"");

        // Create a JWT Auth Provider
        JWTAuth jwt = JWTAuth.create(vertx, new JWTAuthOptions()
                .setPubSecKeys(List.of(new PubSecKeyOptions()
                        .setAlgorithm(""RS256"")
                        .setPublicKey(Base64.getEncoder().encodeToString(publicKey.getEncoded()))
                        .setSecretKey(Base64.getEncoder().encodeToString(privateKey.getEncoded())))));
        // protect the API
        router.route(""/api/*"").handler(JWTAuthHandler.create(jwt, ""/api/new-token""));

        // this route is excluded from the auth handler
        router.get(""/api/new-token"").handler(ctx -> this.generateAndSendToken(ctx, jwt));

        // this is the secret API
        router.get(""/api/protected"").handler(ctx -> {
            ctx.response().putHeader(""Content-Type"", ""text/plain"");
            ctx.response().end(""a secret you should keep for yourself..."");
        });

        vertx.createHttpServer().requestHandler(router).listen(8080);

now when i access /api/new-token from client i get a JWT token back signed from my auth-server above. however I have some open questions:

How is auth-server making sure that client has server public key and it is genuine?
How can client send public key to auth-server?
How can i make /api/new-token secure so only legitimate client can connect to it?

","Why don't you delegate this task to KeyCloak an Open Source Identity and Access Management. It adds authentication to your app and secures services with minimum fuss.
We have used it into our project and it works pretty well!  
To plug it with Vert.x, you can follow these tutos : 

https://vertx.io/blog/vertx-3-and-keycloak-tutorial/
https://medium.com/@alexpitacci/vert-x-and-keycloak-working-together-9d459a5ebd9e
http://paulbakker.io/java/jwt-keycloak-angular2/
https://piotrminkowski.wordpress.com/2017/09/15/building-secure-apis-with-vert-x-and-oauth2/

","167","<java><jwt><rsa><public-key-encryption><vert.x>","1","0","1","2019-03-25 15:39:12","55341433","0","","","","","2019-03-21 23:47:34",""
"13936010","github-like authentication for api in rails","I am creating an API that will only be used by specific devices.  I'd like to authenticate using a public and private key pair, similarly to the way that github authenticates using SSH.
The scheme I think would work is as follows:

The device will request authorization with it's ID.
The server finds the public key of the device by the provided ID and encrypts a random string.  The string is sent to the device.
The device receives the encrypted string and decrypts it with its private key, sending the result back to the server.
The server checks the string to make sure it matches and sets the correct session variables for the device if the check was correct.

All of this is over an SSL connection, so step 3 can't be snooped and used to authenticate again.  Some devices will not need this type of authorization, so the SSL connection can't just verify that the public key of the device was generated by the server's certificate authority and close the connection if it was not.
First of all, does this make sense, or is there a better way?  And second - is there some gem that already does this in rails?  It seems like this would be a somewhat common method of doing things.
","","166","<ruby-on-rails><authentication><ssl><public-key-encryption>","0","","0","2012-12-18 15:17:51","","2","","","","","2012-12-18 15:17:51",""
"11630710","Non-Prime Factorization Public Key Algorithms and Code?","I'm looking for public key algorithms that are not based on the difficulty of prime factorization. In particular, there are rumblings about the prime factorizations being solved in some state security apparatus with a combination of better algorithms and the horsepower for brute forcing.
I remember reading a few years back about alternative algorithms based on other equally difficult problems that won't be easily solved if P <> NP.
What are the most promising research avenues in security and encryption that do not rely on prime factorization?
","Elliptic Curve is big these days. The math is pretty mind boggling, though.
McEliece is another alternative that meets your description.
Beyond that, you can just wander the wikipedia public key encryption references.
","166","<public-key-encryption><prime-factoring><public-key>","0","0","1","2012-07-24 17:16:39","","0","","","","","2012-07-24 12:18:17",""
"57043571","Can I store Apple's public key for verifying token signature?","In order to implement OAuth with Apple, we make a call GET https://appleid.apple.com/auth/keys.
(According to the documentation in https://docs.developer.pv.apple.com/documentation/signinwithapplerestapi/fetch_apple_s_public_key_for_verifying_token_signature)
The result goes along the lines of:
{
    ""kty"": ""RSA"",
    ""kid"": ""1234567890"",
    ""use"": ""..."",
    ""alg"": ""RS256"",
    ""n"": ""..."",
    ""e"": ""...""
}

Can I trust that this information will not change without notice? Or should I make this request every time we need to use Apple's public key?
","","166","<ios><oauth><public-key-encryption>","4","","0","2019-07-15 16:10:32","","1","","","","","2019-07-15 16:10:32",""
"43266119","When decrypting in RSA using Java BigIntegers, how do I preserve a zero byte at the beginning of the original data?","I am implementing my own version of RSA, along with the padding scheme RSA-OAEP in Java. This is my code for the basic algorithm:
public byte[] encrypt(byte[] data, RSA_PublicKey publicKey) {
   BigInteger message = new BigInteger(data);
   BigInteger n = publicKey.getModulus(); //RSA Modulus
   BigInteger e = publicKey.getPublicExponent(); //RSA Public Exponent
   if (message.compareTo(n) >= 0) {
       throw new InvalidDataException();
   }
   byte[] cipherText = message.modPow(e, n).toByteArray(); //Encryption
   return cipherText;
}

public byte[] decrypt(byte[] data, RSA_PrivateKey privateKey) {
   BigInteger cipherText = new BigInteger(data);
   BigInteger n = privateKey.getModulus(); //RSA Modulus
   BigInteger d = privateKey.getPrivateExponent(); //RSA Private Exponent
   if (cipherText.compareTo(n) >= 0) {
       throw new InvalidDataException();
   }
   if (cipherText.compareTo(n.subtract(BigInteger.ONE)) == 1) {
       throw new InvalidDataException();
   }
   byte[] message = cipherText.modPow(d, n).toByteArray(); //Decryption
   return message;
}

In RSA-OAEP, a series of operations are performed on the data and a random seed using a mask generation function before encryption. A zero byte is placed in front of the padded data. This is what it looks like in my code:
buffer = ByteBuffer.allocate(k);
buffer.put((byte)0);
buffer.put(maskedSeed);
buffer.put(maskedDB);
byte[] em = buffer.array();
byte[] cipherText = encrypt(em, publicKey);
return cipherText

When I decrypt this ciphertext, sometimes the zero byte is still in the resulting byte array, and other times it is not. For example, this data (in hex) was the same before encryption and after decryption:
00c127a743b56f53e46223eba367b63d3378648c1d5ce3e8eec1f714c099a15b674c528d5051c1c9a32dc39fb13ee745864c7f572fa950dc8336a54d89503754f6c18dd463ec1633e6e94638230d9b10cc6e2904f4c69247a8bac0c60885b37b8adefe3b682b3a6d39f445447fa2f173b408346d3d0db086e199ef9c1fd0d14f
However, this data:
001c924b794c178c9955d4f3211c67ecda59ffe8c4be55c101bcd5ff3ce0a746ca447b5fc8fd8725cbb083e4b9244cf49b6ca84465680c0c49bec2bab3dfab6371673f0d01605d641330592ffb8915229c2dc4ea1ffcdf8a9a0e461fdf224f5cf57f74affac9d35dd3ce61ff1dd068a8c9495290735415984ddb71515823f746
was decrypted as this:
1c924b794c178c9955d4f3211c67ecda59ffe8c4be55c101bcd5ff3ce0a746ca447b5fc8fd8725cbb083e4b9244cf49b6ca84465680c0c49bec2bab3dfab6371673f0d01605d641330592ffb8915229c2dc4ea1ffcdf8a9a0e461fdf224f5cf57f74affac9d35dd3ce61ff1dd068a8c9495290735415984ddb71515823f746
According to the RSA standard, the decrypted padded data is supposed to be checked for this zero byte to ensure it is properly padded, and to return an error message if it is not. I believe this has something to do with the fact that BigIntegers are signed. Is there some workaround for this issue?
","new BigInteger(data) always parses the data in two-complement notation where the most-significant bit signalizes the sign. In RSA, all numbers are positive, so you can set the sign as 1: 
new BigInteger(1, data)

","165","<java><encryption><rsa><biginteger><public-key-encryption>","1","0","1","2017-04-06 21:54:34","","3","","","user7187118","2017-04-06 21:42:50","2017-04-06 21:32:54",""
"16246181","What determines the size of the message in the algorithm RSA?","I read about RSA algorithm and How it work? But I don't understand some think.I ask for plaintext length 
Why specify the size of the plaintext in the 64-bit algorithm rsa?
also
Is plaintext length is related key length?
I need any suggested to understand this idea?
","When using the RSA algorithm, the plaintext size cannot be larger than the modulus of the key. For example, a 2048-bit RSA key cannot operate on plaintext that is larger than 2048 bits (or 256 bytes).
This restriction also needs to consider padding, which normally adds several bytes. For example, PKCS#1 padding typically adds at least 11 bytes to the plaintext, meaning the largest plaintext is then 245 bytes (or smaller).
","165","<encryption><rsa><public-key-encryption>","1","2","1","2013-04-28 05:27:18","","2","","","","","2013-04-26 22:32:15",""
"33626905","Converting String to Key for Encryption","I'm tring to convert my private key in RSA into a Key from a string, but for some reason it's outputing an system error.
static private Key privatekey;
try{
byte[] keyprivBytes = Base64.decode(KeypriString,0);
PKCS8EncodedKeySpec specpriv = new PKCS8EncodedKeySpec(keyprivBytes);
KeyFactory keyFactorypriv = KeyFactory.getInstance(""RSA"");
privatekey = keyFactorypriv.generatePrivate(specpriv);  <--(here is where the logcat says the code is broken)
}catch(UnsupportedEncodingException | InvalidKeySpecException | NoSuchAlgorithmException e){
e.printStackTrace();
}

in which keypriString is the String where my private key is.
LogCat:
11-12 11:11:20.066 15141-15141/<pakage name> W/System.err: java.security.spec.InvalidKeySpecException: java.lang.RuntimeException: error:0D0680A8:asn1 encoding routines:ASN1_CHECK_TLEN:wrong tag
11-12 11:11:20.066 15141-15141/<pakage name> W/System.err:     at com.android.org.conscrypt.OpenSSLKey.getPrivateKey(OpenSSLKey.java:180)
11-12 11:11:20.076 15141-15141/<pakage name> W/System.err:     at com.android.org.conscrypt.OpenSSLRSAKeyFactory.engineGeneratePrivate(OpenSSLRSAKeyFactory.java:64)
11-12 11:11:20.076 15141-15141/<pakage name> W/System.err:     at java.security.KeyFactory.generatePrivate(KeyFactory.java:187)
11-12 11:11:20.076 15141-15141/<pakage name> W/System.err:     at <pakage name>.Crypto.<init>(Crypto.java:62)

Can anybody tell me the problem??
","1 : verify step by step with encoding and then decoding, and trace each step to the output: you will see where it crashes
2 : possible errors: Base64.decode gives null because this is not a good base64 string
3 : or Are you confusing between PKCS and X509 ?
You should see 
Converting Strings to encryption keys and vice versa java
, this:
Java asymmetric encryption: preferred way to store public/private keys
, this:
Create PrivateKey and PublicKey from a String base64 encoding with DER format
","164","<java><android><public-key-encryption><private-key>","1","1","1","2015-11-12 11:37:16","","6","1","4841706","","2015-11-12 11:37:16","2015-11-10 09:39:07",""
"42860107","How to use erlang public_key:decrypt_private?","I try to encrypt text with public RSA key and decrypt this text using a private RSA key. When I encrypt user public key it works.
encode public_key
encrypt_public_key(PlainText, PublicKey) ->
[ RSAEntry2 ] = public_key:pem_decode(PublicKey),
PubKey = public_key:pem_entry_decode( RSAEntry2 ),
public_key:encrypt_public(PlainText, PubKey).

But when I try to decrypt this text using a private key, it does not work, and I don't know why.
decode private key
decrypt_private_key(CryptText,PrivateKey) ->
[ RSAEntry2 ] = public_key:pem_decode(PrivateKey),
PrivKey = public_key:pem_entry_decode( RSAEntry2 ),
Result =  public_key:decrypt_private(CryptText, PrivKey, rsa_pkcs1_padding ),
Result.

How i encode and try to decode
PublicKey = ems_util:open_file(?SSL_PATH ++  ""/"" ++ binary_to_list(<<""public_key.pem"">>)),

        CryptoText = ems_util:encrypt_public_key(ResponseData2,PublicKey),
        PrivateKey = ems_util:open_file(?SSL_PATH ++  ""/"" ++ binary_to_list(<<""private_key.pem"">>)),
      %erro in this line
       TextPlain = ems_util:decrypt_private_key(TextCrypt,PrivateKey).

Error
=ERROR REPORT==== 17-Mar-2017::10:59:29 ===
Ranch listener ems_http_server1, connection process <0.2159.0>, stream 1 had its request process <0.2160.0> exit with reason function_clause and stacktrace [{public_key,decrypt_private,[<<55,66,78,123,456,2456>>,<<55,173,2367,140,71>>,asn1_NOVALUE}],[{file,""public_key.erl""},{line,313}]},{ems_util,decrypt_private_key,2,[{file,""src/util/ems_util.erl""},{line,614}]},{ems_auth_user,do_barer_authorization,1,[{file,""src/auth/ems_auth_user.erl""},{line,51}]},{ems_dispatcher,lookup_request,1,[{file,""src/distpatcher/ems_dispatcher.erl""},{line,70}]},{ems_http_handler,init,2,[{file,""src/http/ems_http_handler.erl""},{line,22}]},{cowboy_handler,execute,2,[{file,""src/cowboy_handler.erl""},{line,39}]},{cowboy_stream_h,execute,3,[{file,""src/cowboy_stream_h.erl""},{line,172}]},{cowboy_stream_h,proc_lib_hack,3,[{file,""src/cowboy_stream_h.erl""},{line,157}]}]

I don't know what's happening. 
","I describle the solution for my problem. The problem is the public and the private keys are generated wrongly. The right way to generate a pair key rsa using openssl is:
 openssl genrsa -out private.pem 2048
 openssl rsa -in private.pem -out public.pem -outform PEM -pubout

These commands generate a correct key pair and the code now ir working correctly.
","164","<erlang><rsa><public-key-encryption><private-key><public-key>","0","0","1","2017-03-17 18:03:49","","1","","1816580","","2017-03-17 18:03:49","2017-03-17 14:28:15",""
"40521034","Why facebook does not use public key to encrypt password before sending it to the server?","
As shown in the screen shot above facebook is showing users password in request headers.
I am just curious to know why facebook is not hiding the password using a public key. 
EDIT:
Even if it is the work of HTTPS to encrypt data but HTTPS can be broken by using FIDDLER like applications.
What's wrong in encrypting the password before sending it to the server?
","As @WizKid have commented the password is encrypted using HTTPS before it is sent from your browser, but the console you are checking it in gets the data before they are encrypted. You can try using a tool like fiddler to see what is actually sent
","163","<javascript><facebook><rest><security><public-key-encryption>","-2","0","2","2016-11-10 07:42:02","","5","0","4221433","","2016-11-10 07:30:22","2016-11-10 06:15:28",""
"40521034","Why facebook does not use public key to encrypt password before sending it to the server?","
As shown in the screen shot above facebook is showing users password in request headers.
I am just curious to know why facebook is not hiding the password using a public key. 
EDIT:
Even if it is the work of HTTPS to encrypt data but HTTPS can be broken by using FIDDLER like applications.
What's wrong in encrypting the password before sending it to the server?
","As @WizKid commented, the encryption you are suggesting in the question is exactly what HTTPS is doing.
HTTPS uses signed certificates that are pre-installed in your browser or devices, provided by trusted third-party certificate authorities, to validate the identity of the website and the associated servers. This would prevent website phishing and man-in-the-middle (MITM) attack.
The communication between the users and the web server is encrypted by Transport Layer Security (TLS) or Secure Socket Layer (SSL), so your exchanged data is protected by MITM attacks.
As HTTPS relies on trusting the signed certificate, you could decrypt the data using Fiddler because Fiddler asked you to add a self-generated certificate to trust. Without your permission, your data would be safe.
","163","<javascript><facebook><rest><security><public-key-encryption>","-2","0","2","2016-11-10 07:42:02","","5","0","4221433","","2016-11-10 07:30:22","2016-11-10 06:15:28",""
"57148122","RSACryptoServiceProvider not working in .net core","I have to call a government API, session key needs to be encrypted using public key provided by them. Following code to encrypt the session key is working fine on windows server using .NET framework, but I need to host the API on aws lambda using .NET core. There is gives following error

System.InvalidCastException: Unable to cast object of type
  'System.Security.Cryptography.RSAOpenSsl' to type
  'System.Security.Cryptography.RSACryptoServiceProvider

private static string EncryptRsa(byte[] input)
{
    string output = string.Empty;
    System.Security.Cryptography.X509Certificates.X509Certificate2 cert = new X509Certificate2(@""Cert/server_pub.cer"");


    using (RSACryptoServiceProvider csp = (RSACryptoServiceProvider)cert.PublicKey.Key)
    {
        byte[] bytesData = input;
        byte[] bytesEncrypted = csp.Encrypt(bytesData, true);
        output = Convert.ToBase64String(bytesEncrypted);
    }
    return output;
}

I changed the code to following, it runs successfully but when I call the API it give an error saying session key decryption error, please encrypt the session key using correct public key. 
How to I get similar encryption to RSACryptoServiceProvider in .net core
private static string EncryptRsa(byte[] input)
{
    string output = string.Empty;
    System.Security.Cryptography.X509Certificates.X509Certificate2 cert = new X509Certificate2(@""Cert/server_pub.cer"");


    using (RSA csp = (RSA)cert.PublicKey.Key)
                {
                    byte[] bytesData = input;
                    byte[] bytesEncrypted = csp.Encrypt(bytesData, RSAEncryptionPadding.Pkcs1);
                    output = Convert.ToBase64String(bytesEncrypted);
                }
    return output;
}

Code in answer of other question is not working on .net core, it uses .net framework
Casting private key to RSACryptoServiceProvider not working
","It worked, in the updated code I was trying, I changed the padding to OaepSHA1, its working now. Thank you
Below is the working code (Tested on AWS Lambda):
private static string EncryptRsa(byte[] input)
{
    string output = string.Empty;
    System.Security.Cryptography.X509Certificates.X509Certificate2 cert = new X509Certificate2(@""Cert/server_pub.cer"");


    using (RSA csp = (RSA)cert.PublicKey.Key)
                {
                    byte[] bytesData = input;
                    byte[] bytesEncrypted = csp.Encrypt(bytesData, RSAEncryptionPadding.OaepSHA1);
                    output = Convert.ToBase64String(bytesEncrypted);
                }
    return output;
}

","162","<c#><public-key-encryption>","3","0","1","2019-07-22 15:41:32","","2","","4209762","","2019-07-22 14:49:01","2019-07-22 14:24:32",""
"29888112","How to Generate Email to Get Public and Private Key Using Java","I want to get public key like this. Is java can do it?
for example i input name, email, and password. so java generate it's to public and private key. this example of public key
-----BEGIN PGP PUBLIC KEY BLOCK-----
Comment: http://openpgpjs.org
xsBNBFU9xmABCAC/9KabOlwoa+OdFAWkMt9blHeg9dggGCdwrAr66/E+5zqJ
reintA7h7cVphdyOiRvMZjxHK80Osdb0F/3ywHoyPiZtOsBk3NgaCCvKz5ai
8rQzbOg+ge0LAs0/rbH+BWh/6aCOwTAymDVo7QrJedNZsQTtJ1qFRK8qoRkS
nMlG5qjZuRSOAK5sqEAReT3jWGvpcRh2A+IM8RxC02ijxA+57qN0ncahV2E+
0ROCe20mW9Wo2tUONV418UsuZzaGmcfThW6JJPMKeCAeQseV/J/BvcK7NSOi
u6dwBWZqOP1/LTtbFOLoLaeeNSc3KhopuRDpYNCWZej099T/zugJVQ5fABEB
AAHNGktveWFtYSA8aGltaXRzdUB5YWhvby5jb20+wsByBBABCAAmBQJVPcZh
BgsJCAcDAgkQOSpK7V+SVG8EFQgCCgMWAgECGwMCHgEAAG8mCACqAyCglWDU
I/zhq/5PJO7FRuhj3yU93Vju99z+E/0dQzUGgGAYtdzUxhAKk0ny9ZXC3FSa
LboXY8GlgkcmEyzyDKAstLXv7//Se7a1dMcI9yluYLOCNo7z4h0o8MBAg3K2
jU0iPtEqiGBk2+4Iy5Sh0uGoeE6uq0JauL5Uq6P2aZWepf1ZIQrVbFYHcez4
W1JBnGFmb57ovUq1BvRYl5MJQcvqzXpLN8ZE1ZpMw8u3osMljV1Z4DaAd9bu
y+S4gF2Toyz8cr9DUIfyG5i5lh6Pxj7XT3dMeOQa/ZygrtZZt5DP0TDIN3s8
7xSvKFFMym9v9S9B9LsqaMnYig8tX3MBzsBNBFU9xmABCACvxd9JpfiyJZw1
MFr9c/DcUXMkE+pWWWTSybR/5b60BtIWu5mi9IDD3dtcrjiJzBuBYvxHAzS2
AlYM0qEhyDlKhWYKqZW/xGaZcqNUCRCWzG4eplaSOQbJC84n/d2Qg5mebwgO
mtjoJ0C+5TgwkLdYd8TnWtkulqRW5Wsgk1LIZMvAWzQNc8eNR5uLaXbNckK1
PG6/9myBJSKOhJcSg0mHbcleF6egFfthg6tRXTm2EgHTlNnkRUTSDx3OhCT6
DEQDmDo92lAs1ocJrBXUNRCMGgNrsowsi0pvmEJY2eBQkb4syUh7YzfeIdYw
eQo60AwA/yazFqwlZvmUDgMtXcNBABEBAAHCwF8EGAEIABMFAlU9xmIJEDkq
Su1fklRvAhsMAABhOAf9FujFEEv8DfK4wHP3m+VUtOl6TOcK3oDnuw+wO+Jb
VyURM0BktLK4NtCD2q8l8+3W9MaOFQ2nFmf5bnFTghvItRcuMmWJF+vyLlIv
QhfpAPMVjFnQjsVr8fYd3t+kep+Hw2ihPBXaHxyESUxA5QRiRuPs56yLFUK7
horcHsDXl3I8+FyW3iQ2eBgk5+9d97va1ZxjUvNDZDm8fDvBKyRT3As4QBbF
DPI26u+v89EfAI3Q2HZwt08vhu8TkjK2y/wZYT9ihruzDfdR/XXExCwUq/rx
WhaKXDwc9fuqhU9wSNadjKVPytW9vkro9i4PgW7zRy+NepfWNlrP7R9jxLc+
2w==
=wGlq
-----END PGP PUBLIC KEY BLOCK-----

","You can do this with the Bouncy Castle Crypto APIs, https://www.bouncycastle.org.
KeyPairGenerator keyGen = KeyPairGenerator.getInstance(""RSA"");
keyGen.initialize(1024);
KeyPair key = keyGen.generateKeyPair();
PrivateKey priv = key.getPrivate();
PublicKey pub = key.getPublic();
String privateKey = new String(Base64.encode(priv.getEncoded(), 0,priv.getEncoded().length, Base64.NO_WRAP));
String publicKey1 = new String(Base64.encode(pub.getEncoded(), 0,pub.getEncoded().length, Base64.NO_WRAP));
String publicKey = new String(Base64.encode(publicKey1.getBytes(),0, publicKey1.getBytes().length, Base64.NO_WRAP));

As far as adding things like name, email and password, you are referring to generating a certificate, which requires that a key pair is generated. Certificate types vary depending on usage, as does the means to generate them. 
If you wish to truly secure communications, http://www.amazon.com/Applied-Cryptography-Protocols-Algorithms-Source/dp/0471117099/ is an important read, since poorly generated certificate and key exchanges are worse than no cryptography at all.
","162","<java><public-key-encryption>","0","1","1","2015-04-27 06:07:30","","0","","","","","2015-04-27 05:49:54",""
"34082142","Encrypt phone numbers in android using asymmetric encryption (PKCS8 key)","I am trying to encrypt phone numbers inside an android application using RSA keys with below steps. The encrypting keys are in X509 format and decrypting keys are in PKCS8 format. 
PROBLEM FACED: The results of encryption a text and decrypting it back don't match.
Generate keys with:-
$ openssl genrsa -out privkey.pem 2048
$ openssl rsa -in privkey.pem -pubout > pubkey.pub
Convert private key into pkcs8 format:-
$ openssl pkcs8 -topk8 -inform PEM -outform PEM -in privkey.pem -out privkey.pkcs8 -nocrypt
Encryption code:-
String pubKeyPem = PUBKEY_X509.replace(""-----BEGIN PUBLIC KEY-----\n"", """")
.replace(""-----END PUBLIC KEY-----"", """");
byte [] encoded = Base64.decode(pubKeyPem, Base64.DEFAULT);
X509EncodedKeySpec keySpec = new X509EncodedKeySpec(encoded);
KeyFactory kf = KeyFactory.getInstance(""RSA"");
privateKey = kf.generatePrivate(keySpec);
cipher = Cipher.getInstance(""RSA"");
cipher.init(Cipher.ENCRYPT_MODE, publicKey);

...
    encodedNum = cipher.doFinal(phNum);
Decryption code:
String privKeyPEM = PRIVATEKEY.replace(""-----BEGIN PRIVATE KEY-----\n"", """")
.replace(""-----END PRIVATE KEY-----"", """");
byte [] encoded = Base64.decode(privKeyPEM, Base64.DEFAULT);
PKCS8EncodedKeySpec keySpec = new PKCS8EncodedKeySpec(encoded);
KeyFactory kf = KeyFactory.getInstance(""RSA"");
privateKey = kf.generatePrivate(keySpec);
cipher = Cipher.getInstance(""RSA"");
cipher.init(Cipher.DECRYPT_MODE, privateKey);

...
    decNum = cipher.doFinal(encNum);
I am encoding a phone number. The encoded and decoded phone numbers dont match.
The algo encode 0000 to [B@4173bed8 .. and decodes the encoded bits back into [B@417412e8
As we can see the initial number (0000) and does not match the decrypted number ( [b41... ). 
Please advice on how to correct this issue.
Thanks a lot.
","The android IRC group was very helpful. 
I was making a mistake of converting bytes array into a string, using toString() . When we convert the byte array (or byte[]) into a string using toString(), we print the start address of the object. So actually [B@xxxxx is actually the address of the byte array (the xxxx part), while I was confusing them to be the actual contents of the array.
The above suggested method works. Encrypting and decrypting results in the same number.
","162","<android><public-key-encryption>","0","0","1","2015-12-06 14:00:53","","0","4","2022892","","2015-12-04 13:10:58","2015-12-04 06:22:58",""
"16326925","Debugging public key authentication with paramiko","Is there any way to confirm which file (and what contents) paramiko is sending out when attempting to authenticate using public key authentication?
Up until now the authentication has worked. It's not working all of a sudden and I want to confirm that the correct public key is being sent to the server.
Also, given a private key file, how does paramiko determine the public key to send to the server? Is this pulled from a file somewhere on the server, or is it calculated from the private key?
","","161","<public-key-encryption><paramiko><public-key>","2","","0","2013-05-01 21:36:19","","0","","","","","2013-05-01 21:36:19",""
"36728112","Unable to verify a CMS signed message with webcrypto API","I want to verify a CMS signed message with the JavaScript webcrypto API. The message is part of a timestamp response according to RFC 3161.

So I take the signature, the content (from encapContentInfo) and the public key and pass it to the following function that imports the key and verifies the signature:
function verify(signature, data, publicKey, callback) {

  console.log(""pubkey: "" + publicKey);
  console.log(""data: "" + data);
  console.log(""signature: "" + signature);

  crypto.subtle.importKey(
    ""spki"",
    new Uint8Array(hexToArray(publicKey)),
    {
      name: ""RSASSA-PKCS1-v1_5"",
      hash: {name: ""SHA-1""}
    },
    false,
    [""verify""]
    )
    .then(function(publicKey){

      console.log(publicKey);

      crypto.subtle.verify(
        {
          name: ""RSASSA-PKCS1-v1_5"",
          hash: {name: ""SHA-1""}
        },
        publicKey,
        new Uint8Array(hexToArray(signature)),
        new Uint8Array(hexToArray(data))
        )
        .then(function(isvalid){
          console.log(""valid: "" + isvalid);
        })
        .catch(function(err){
          throw(err);
        });

    })
    .catch(function(err){
      throw(err);
    });
}

The output is the following:
pubkey: 30820122300d06092a864886f70d01010105000382010f003082010a0282010100a9ac33b296da7177999d464f47aa4a40d57d58dcfd93beae68913ab75cb77fe36c4b52b3b55a53cce10f70880a81aba4ffdc1d4826fe645cbabcd1e0b4eceff702f6fb378670128eadbe39a4a9e484c1d01f95fcfcbd44ca091dcc344e0356ca8967f54f7f6acc0dd5af8c1a4f77003fe01c3b98d6611d52b3fe432962544e142cc6f99163ccb7798bb8d4aea948d0cd6f72b740915b87ca2824ac9ec958ab0e5eacb36a7a66be091e826f862849026aa911e3b1a84487f6654aad7f3be4d1d9d312b2f9fcd7c69836ae893060393a47b310a6a4b03eeea6c8659df57782fa75855007d5ffb622ff8d229edd57c0771149b7fc827780fcde0c02f82bc2977d250203010001
data: 306b020101060c2b0601040181ad21822c16013031300d0609608648016503040201050004201b14e43e38297d534d827e351c15347f9eebc973258c8b555c044de46c5a0f02021424e3f636950c119fb3ebdb289d60d7bc637f3bd9180f32303136303431393139333931395a
signature: 7a65069868d97fb0ffcd53bca6b80daa671e1b0ac1a1d262ba2fba1525d0ca8e4998d4f49cba990f9a89c52003457ca1bbb037dee8e5e64c617af0c1ea72215b648477b052165810f4f6eb7f869ac19373b2aad1a2b5a809b8b758bdad540a5cd1f33d3c80870c7ae9c6db61dd7c7f8c346ee3c7aadc16f90ed87833a4ba771cbdc930a6dfb3fd16f5ab57de212deddc4d49c11ef825a8d996ba40e0e07c7c5788000d61169fe7512c97d29f7ff4b8ce2842e5b339dae5cef1eb517457b3e8b98bc887dda952b6346bd8345e5eb2cdd976fe5688d375551bc2a20cd7aafd1bbf6a9d102ad2a8dea620ad3ed6763f0841ec020dc1ad485ed1448ae5f5d511ef8f
CryptoKey {}
valid: false

As you can see, the verification fails, but I am pretty sure the signature is valid as this timestamp server is used by many people.
Is there anything wrong with my implementation?
I try to do this inside of an Firefox extension.
Edit: It seem that it is required to use the DER value of the signedAttrs field, hash it and then verify it with the certificate.
","I managed to do it myself: You first have to decrypt the signature with the public key to get a ASN.1 object that contains the message digest.
e.g. openssl rsautl -inkey cert.pem -pubin -in signature -out out

Then you take the signedAttrs object and replace the explicit tag at the beginning (0xA0) with the set tag (0x31) because of the following sentence in the RFC:
The IMPLICIT [0] tag in the signedAttrs is not used for the DER encoding, rather an EXPLICIT SET OF tag is used

Then you calculate a digest (with the same algorithm as in digestAlgorithm in signerInfo) of the set object.
The two digest values are the same if the signature is valid.
","160","<javascript><rsa><public-key-encryption><signature><webcrypto-api>","0","0","1","2016-04-20 14:38:21","36747238","0","","1609018","","2016-04-20 12:48:48","2016-04-19 19:49:24",""
"50493054","pgcrypto keeps visible the private key on the logs?","Somebody told me it could be possible if i use pgcrypto pgp_pub_decrypt() function with my queries the logs will reveal the secret key used to decrypt my data
SELECT pgp_pub_decrypt(string_to_decrypt, private_key)

I can not check that because i dont have access to the logs, but if this is true, from my point of view this should be considered as a security issue. Is this true?
","Yes, this is true. Assuming you are logging statements.
It is also probably visible in pg_stat_activity to a superuser who is looking at the right moment.
Of course, a superuser could also install an extension to secretly log just crypto-related function calls, that's the nature of having superuser access.
If you don't control the server your database is running on and don't trust the people who do, then you shouldn't store sensitive information in it.
","160","<postgresql><security><public-key-encryption>","0","1","1","2018-05-24 12:13:29","50496376","1","","81202","","2018-05-24 12:13:29","2018-05-23 16:15:01",""
"33603987","Encrypting with RSA, what's the best practice to store the public key?","I was developing an hybrid app where I used RSA to encrypt the communication. I then stored the public key inside an element in index.html like some library suggested, and read the public key from there. It was fine by me as no one could access the key unless he could get the compiled app file.
Now I wish to use the same method of encryption on the web, and I don't feel like adding the public key to the html.
I wonder what's the best practice with storing the RSA public key without hardcoding it in the html or js files?
Much thanks for any advice!
","","159","<javascript><encryption><rsa><public-key-encryption>","0","","0","2015-11-09 07:02:49","","6","1","","","","2015-11-09 07:02:49",""
"5175426","Encrypting a POST variable using HTTPS against the same server - will it encrypt differently each time?","My understanding of Public Key Cryptography is that the word alleycat will be encrypted in to the same encrypted string each time if the same public key is used (which is my understanding of how HTTPS works for any given web server).
Does this mean that someone could intercept my HTTPS headers each time I try to log in to a ""secure"" site, and log in as me by using the same ""encrypted"" headers?
","HTTPS does not have headers of its own. It simply uses an encrypted ""tunnel"" to send regular HTTP requests. AFAIK sending the same cleartext twice over SSL/TLS does not necessarily send the same data each time.
The long and the short of it is that current implementations of public-key cryptography are pretty tight, and trying to outsmart them is unwise until you've studied crypto for a few years.
","159","<https><public-key-encryption>","0","0","2","2011-04-29 22:33:24","","0","","","","","2011-03-03 01:02:25",""
"5175426","Encrypting a POST variable using HTTPS against the same server - will it encrypt differently each time?","My understanding of Public Key Cryptography is that the word alleycat will be encrypted in to the same encrypted string each time if the same public key is used (which is my understanding of how HTTPS works for any given web server).
Does this mean that someone could intercept my HTTPS headers each time I try to log in to a ""secure"" site, and log in as me by using the same ""encrypted"" headers?
","Https does not use public key encryption for transmitting data like http requests, it is used for setting up symmetric random keys. So your value might be encoded to the same ciphertext during one session, but not in any other.
Added: SSL / TLS uses random numbers in the client_hello and server_hello handshake messages to prevent replay attacks
","159","<https><public-key-encryption>","0","0","2","2011-04-29 22:33:24","","0","","","","","2011-03-03 01:02:25",""
"29878608","Random function in Javascript considered insecure. Does it really matter?","I am writing some code that shall run in a browser, which uses Javascript random function(s) for key generation. 
Now reading in several forums that this is considered to be not secure, due to bad random number generation.
Now, what if I only create one key pair per browser/computer. So, having a distributed scenario where there is actually no sequence of random numbers per browser. Will this fundamentally change the problematic situation? Thanks for your thoughts.
","Random numbers are generated in Javascript by the amount of milliseconds since 1st of January 1970(UNIX Timestamp). Then Javascript just takes the first few values and that is your random number. i.e. 
Math.floor((Math.random() * 10) + 1);

Makes a random number between 1 and 10.
","156","<javascript><html5><security><public-key-encryption><encryption-asymmetric>","0","0","2","2015-04-27 12:21:10","","1","","","","","2015-04-26 14:03:39",""
"29878608","Random function in Javascript considered insecure. Does it really matter?","I am writing some code that shall run in a browser, which uses Javascript random function(s) for key generation. 
Now reading in several forums that this is considered to be not secure, due to bad random number generation.
Now, what if I only create one key pair per browser/computer. So, having a distributed scenario where there is actually no sequence of random numbers per browser. Will this fundamentally change the problematic situation? Thanks for your thoughts.
","Yes it matters. If an attacker generates random numbers at the same time as a genuine user, they can predict what is generated and retrieve they key. Even if the clocks aren't fully synchronised, an attacker could generate a range around the UNIX timestamp when the key was known to have been generated and then try each one in turn.
Solution: Use window.crypto to generate a secure random number using the crypto library.

The Crypto interface represents basic cryptography features available
  in the current context. It allows access to a cryptographically strong
  random number generator and to cryptographic primitives.

","156","<javascript><html5><security><public-key-encryption><encryption-asymmetric>","0","2","2","2015-04-27 12:21:10","","1","","","","","2015-04-26 14:03:39",""
"49254392","Sending encrypted message through RSA over a local network using socket programming","I'm trying to send an encrypted message over a network using tcp/ip communication but an error occurred at the last step i.e the message is being send and after receiving at private decrypt the error occurred.
Also this code runs completely ok when the key is being used for the first time after generation but after first use the error occurs every time:

0407109F:rsa routines:RSA_padding_check_PKCS1_type_2:pkcs decoding error

I'm sharing the code:
server side-


#include <stdio.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netinet/tcp.h>
#include <string.h>
#include <arpa/inet.h>
#include <sys/types.h>
#include <unistd.h>
#include <pthread.h>
//openssl headers
#include <openssl/pem.h>
#include <openssl/ssl.h>
#include <openssl/rsa.h>
#include <openssl/evp.h>
#include <openssl/bio.h>
#include <openssl/err.h>
//int padding = RSA_SSLV23_PADDING;
//int padding = RSA_PKCS1_OAEP_PADDING;

int padding = RSA_PKCS1_PADDING;

RSA * createRSA(unsigned char * key,int public)
{
    RSA *rsa= NULL;
    BIO *keybio ;
    keybio = BIO_new_mem_buf(key, -1);
    if (keybio==NULL)
    {
        printf( ""Failed to create key BIO"");
        return 0;
    }
    if(public)
    {
        rsa = PEM_read_bio_RSA_PUBKEY(keybio, &rsa,NULL, NULL);
    }
    else
    {
        rsa = PEM_read_bio_RSAPrivateKey(keybio, &rsa,NULL, NULL);
    }
    if(rsa == NULL)
    {
        printf( ""Failed to create RSA"");
    }

    return rsa;
}

int public_encrypt(unsigned char * data,int data_len,unsigned char * key, unsigned char *encrypted)
{
    RSA * rsa = createRSA(key,1);
    int result = RSA_public_encrypt(data_len,data,encrypted,rsa,padding);               //fun for encrypting
    return result;
}



void printLastError(char *msg)
{
    char * err = malloc(130);;
//    ERR_load_crypto_strings();
    ERR_error_string(ERR_get_error(), err);
    printf(""%s ERROR: %s\n"",msg, err);
    free(err);
}


//////////////////////////////////////////////////////////////////////////////////////////////////////////////
int  main()
{
        int eof=0;
        char plainText[2048/8] = ""Hello this is AMIT""; //key length : 2048
        char publicKey[4098];
        char privatekey[4098];

        FILE *fd=fopen(""public.pem"",""r"");
        while(!feof(fd))
        {
                eof=fread(&publicKey,sizeof(publicKey),1,fd);
//              perror(""public key fread"");
                if(eof==0)
                {
                        fclose(fd);
                        break;
                }
        }
//printf(""public key---%s\n"",publicKey);

        unsigned char  encrypted[4098]={};

        int encrypted_length= public_encrypt(plainText,strlen(plainText),publicKey,encrypted);
//      perror(""public encryption"");
        if(encrypted_length == -1)
        {
                printLastError(""Public Encrypt failed "");
                exit(0);
        }
        printf(""Encrypted length =%d\n"",encrypted_length);
//      printf(""Encrypted DATA =%s\n"",encrypted);

/*------------------SOCKET---------------------------*/
        struct sockaddr_in server , client;
        char buf[10];
        memset(buf,'\0',sizeof(buf));

        int socket_id = socket(AF_INET, SOCK_STREAM, 0);
        server.sin_family=AF_INET;
        server.sin_port=htons(5000);
        server.sin_addr.s_addr=inet_addr(""127.0.0.1"");

        bind(socket_id, (struct sockaddr *)&server,sizeof(server));
        perror(""bind"");
        listen(socket_id,5);

        int addrlen=sizeof(struct sockaddr);
        int client_sock=accept(socket_id,(struct sockaddr *)&client,(socklen_t*)&addrlen);
        perror(""accept"");
/*      while(9)
        {
                printf(""write data for client\n"");
                scanf(""%s"",buf);
                write(client_sock,&buf,strlen(buf));
                perror(""write"");
        }
*/
        printf(""sending encryptd data\n"");
        write(client_sock,&encrypted_length,sizeof(encrypted_length));
        perror(""write"");
        sleep(1);
        write(client_sock,&encrypted,strlen(encrypted));
        perror(""write"");
/*-----------------END-----------------------------*/
}

client side-
#include <stdio.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netinet/tcp.h>
#include <string.h>
#include <arpa/inet.h>
#include <sys/types.h>
#include <unistd.h>
#include <pthread.h>
//openssl headers
#include <openssl/pem.h>
#include <openssl/ssl.h>
#include <openssl/rsa.h>
#include <openssl/evp.h>
#include <openssl/bio.h>
#include <openssl/err.h>
int padding = RSA_PKCS1_PADDING;
//int padding = RSA_SSLV23_PADDING;
//int padding = RSA_PKCS1_OAEP_PADDING;

RSA * createRSA(unsigned char * key,int public)
{
    RSA *rsa= NULL;
    BIO *keybio ;
    keybio = BIO_new_mem_buf(key, -1);
    if (keybio==NULL)
    {
        printf( ""Failed to create key BIO"");
        return 0;
    }
    if(public)
    {
        rsa = PEM_read_bio_RSA_PUBKEY(keybio, &rsa,NULL, NULL);
    }
    else
    {
        rsa = PEM_read_bio_RSAPrivateKey(keybio, &rsa,NULL, NULL);
    }
    if(rsa == NULL)
    {
        printf( ""Failed to create RSA"");
    }

    return rsa;
}


int private_decrypt(unsigned char * enc_data,int data_len,unsigned char * key, unsigned char *decrypted)
{
printf(""len = %d\n"",data_len);
    RSA * rsa = createRSA(key,0);
    int  result = RSA_private_decrypt(data_len,enc_data,decrypted,rsa,padding);         //fun for decrypting
perror(""RSA"");
printf(""Resut = %d\n"",result);
    return result;
}


void printLastError(char *msg)
{
    char * err = malloc(130);;
//    ERR_load_crypto_strings();
    ERR_error_string(ERR_get_error(), err);
    printf(""\n%s ERROR: %s\n"",msg, err);
    free(err);
}


//////////////////////////////////////////////////////////////////////////////////////////////////////////////
int  main()
{
        int eof=0;
//      char plainText[2048/8] = ""Hello this is AMIT""; //key length : 2048
        char publicKey[4098];
        char privateKey[4098];
        unsigned char decrypted[4099]={};
        unsigned char encrypted[4098]={};
        int encrypted_length=0;

        FILE *fd=fopen(""private.pem"",""r"");
        while(!feof(fd))
        {
                eof=fread(&privateKey,sizeof(privateKey),1,fd);
                perror(""private key fread"");
                if(eof==0)
                {
                        fclose(fd);
                        break;
                }
        }

//      printf(""private key--->\n%s\n"",privateKey);

/*------------------SOCKET---------------------------*/

        struct sockaddr_in server , client;
//      char buf[10];
        memset(encrypted,'\0',sizeof(encrypted));
        int socket_id = socket(AF_INET, SOCK_STREAM, 0);

        client.sin_family=AF_INET;
        client.sin_port=htons(5000);
        client.sin_addr.s_addr=inet_addr(""127.0.0.1"");


        connect(socket_id,(struct sockaddr *)&client,sizeof(client));
        perror(""connect"");
        printf(""\nWAITING TO RECEIVE DATA LENGTH...\n"");
        read(socket_id,&encrypted_length,sizeof(encrypted_length));
        //printf(""\nENCRYPTED DATA= %s\n"",encrypted);

        printf(""WAITING TO RECEIVE DATA...\n"");
        read(socket_id,&encrypted,sizeof(encrypted));
perror(""read"");
        printf(""ENCRYPTED LENGTH= %d\n"",encrypted_length);
/*----------------------------END-----------------------------*/

        int decrypted_length = private_decrypt(encrypted,encrypted_length,privateKey, decrypted);
        //int decrypted_length = private_decrypt(encrypted,512,privateKey, decrypted);
        printf(""\nDecrypted Length =%d\n"",decrypted_length);
        if(decrypted_length == -1)
        {
                printLastError(""Private Decrypt failed "");
                //exit(0);
        }
        printf(""\nDecrypted Text =%s\n"",decrypted);
}

","","155","<openssl><rsa><public-key-encryption><tcp-ip><private-key>","0","","0","2018-03-13 12:27:59","","2","","472495","","2018-03-13 12:27:59","2018-03-13 10:57:28",""
"19811566","Hierarchical Encryption","Is there a way to setup a hierarchical encryption using public key encryption ? 
Let's say a higher level user can decrypt messages encrypted by lower level users. 
Is it something possible ? I guess it is only possible to do with hierarchical 
key management, like the higher level users have access to the lower level user's keys. 
Any other option to do something like this ? 
","What I'd propose is, to some extent, an extension of your hierarchical key management idea.
Here's the core idea:
We use a cryptographically-strong random secret to encrypt the file symetrically (public-key-encryption of large datasets is actually quite slow, so most software like GPG uses a symmetric block cipher to encrypt the data, then they public-key-encrypt the random secret.). The random secret itself is encrypted with the key of each user that is allowed to access the data.
This scheme is similar to when you send a PGP message to multiple receivers. It's quite simple, but the problem is you have to update any encrypted data if users are added, modified or removed. Generally you can introduce intermediary keys to counteract this effect.
In order to address these issues, cryptographers invented HIBE (Hierarchical Identity-Based Encryption). If you want to use this in a real application, please don't build the crypto stack yourself, but use proven, peer-reviewed algorithms.
","155","<encryption><rsa><public-key-encryption>","2","2","1","2014-01-05 00:15:45","20928410","1","","","","","2013-11-06 11:59:03",""
"39192494","Google API RS256 Key Signing","I wanted to implement Google's OAuth 2.0 Sever to Server process in Erlang/Elixir, but am having a bit of difficutly.
Primarily, I can't seem to find the public key that Google is using to verify my signature (at least this is what I think the problem is.
I've downloaded the JSON file that google provides which includes a ""private_key"" as well as a URL where I can find the ""client_x509_certs"". When I go to that link I even see an x509 certificate that has an identifier that corresponds to my private key. So how come I can't verify my signatures?
I mean first off, in order to make erlang happy I had to convert the private key to the RSA format using this command:
openssl rsa -in key.pem -out rsa.key
I was then able to sign things using Erlang's public_key.sign.
{ :ok, key } = File.read(""./private_key"")
[ key | _ ] = :public_key.pem_decode(key)
key = :public_key.pem_entry_decode(key)
sig = :public_key.sign(""halloween"", :sha256, key)

However, after extracting the RSA public key from the x509 certificates provided in the UR; I can't verify any of my signatures.
:public_key.verify(""halloween"", :sha256, sig, public_key)

Am I not getting my public key from the right place?
","","154","<google-api><erlang><elixir><public-key-encryption>","2","","0","2016-08-28 14:50:30","","0","","","","","2016-08-28 14:50:30",""
"24485759","Running script on another server and append value to the same file","This is a script I developed to check memory on a server and return values in a table which can be mailed to me. I've created Public Key authentication from the server of the script to the disk check.
mem_check Variable User Server
{
ssh $3@$2 a1=$1 'bash -s' <<'ENDSSH'
echo $a1 >> table
echo $HOSTNAME >> table
echo ${HOME//home/} | tr -d / | sed ':a;N;s/\n/ /g' >> table
mem=$(df -kh /tmp | grep -vE '^Filesystem|cdrom' | awk '{print $5}' | cut -d '%' -f 1 )
if [ $mem -ge 80 ]; then
echo -e ""$mem% \n<font style=\""BACKGROUND-COLOR: #FF0000\"">R</font>\n"" >> table
else
echo -e ""$mem% \n<font style=\""BACKGROUND-COLOR: #33cc33\"">G</font>\n"" >> table
fi
ENDSSH
}

The problem I'm facing is that it is creating the table file in the remote server only and not in the directory where the shell is running?
Is it possible to append the file in the same directory?
If not should I copy the table back to the host server and than append it myself?
Also if that is the case how do I delete the lagging copies of the table files remaining in that server?
EDIT: I'm able to append the file to the same server by using scp... I am wondering if there is a way to do directly?
scp $3@$2:/home/$3/table2 /home/host/table2
cat table2 >> table

","You should retrieve the data on your remote server and then process the data on your computer. Here is one of the solution :
mem_check Variable User Server
{
    mem=`ssh $3@$2 ""df -h /tmp --output=pcent | grep -v Use | cut -d '%' -f 1""`
    echo $1 >> table
    echo $2 >> table
    echo $3 >> table
    if [ $mem -ge 80 ]; then
        echo -e ""$mem% \n<font style=\""BACKGROUND-COLOR: #FF0000\"">R</font>\n"" >> table
    else
        echo -e ""$mem% \n<font style=\""BACKGROUND-COLOR: #33cc33\"">G</font>\n"" >> table
    fi
}

I have changed command to retrieve space because df has a built-in fonction to format output so you don't need to awk. Also I think that with df, -k option is useless while using -h option.
You can see I also delete process about HOSTNAME and USER because you already gave it to ssh command.
Using your script you can do this :
mem_check Variable User Server
{
    ssh $3@$2 a1=$1 'bash -s' <<'ENDSSH' >> table
    echo $a1
    echo $HOSTNAME
    echo ${HOME//home/} | tr -d / | sed ':a;N;s/\n/ /g'
    mem=$(df -kh /tmp | grep -vE '^Filesystem|cdrom' | awk '{print $5}' | cut -d '%' -f 1 )
    if [ $mem -ge 80 ]; then
        echo -e ""$mem% \n<font style=\""BACKGROUND-COLOR: #FF0000\"">R</font>\n""
    else
        echo -e ""$mem% \n<font style=\""BACKGROUND-COLOR: #33cc33\"">G</font>\n""
    fi
    ENDSSH
}

This will redirect all of the ssh output in your local file.
","154","<bash><shell><public-key-encryption>","0","2","1","2014-06-30 12:37:58","24486998","4","","3750859","","2014-06-30 09:09:08","2014-06-30 08:21:21",""
"55341115","How to generate RSA public key from private key?","I was reading a question on SO and find out that we can generate the public key from private key using openssl in python. Now I wonder how this works(the mathematics part) and  how can I implement the method in python or in C, without using the openssl or any other library ?
","If the private key is stored in CRT format (Chinese Remainder Theorem), there is no math involved; the format includes the public exponent. This is how OpenSSL tools ""create"" a public key from a private key.
If the private is not stored in CRT format, it's generally not feasible to compute the public exponent given the private exponent. You can, however, guess common public exponents and easily verify your guess.
Mathematically, in order to quickly compute one exponent using the other, you need to know the totient, a number computed from the factors of the modulus. And of course the security of RSA is predicated on the infeasibility of factoring the modulus. This relationship is symmetrical; it doesn't matter whether you know the public exponent and try to compute the private exponent, or vice-versa.
","153","<encryption><rsa><public-key-encryption><public-key><pyopenssl>","2","2","1","2019-03-25 15:44:29","55341548","2","1","","","","2019-03-25 15:21:57",""
"23253921","PKE keys vs. digital certificates","I am trying to understand the difference between PKE keys (public and private) and digital certificates, such as SSL certs.

Do SSL certs contains keys inside them? If so, which ones (public or private)?
If so, why is it necessary for the SSL cert to contain the key(s)?
Is there a notion of ""public"" vs ""private"" certificates like there is with keys?

","A digital certificate ""contains"" a public key, along with some other information.  The other information often includes a host name, and the certificate may be digitally ""signed"" by certificating authority.  Digital certificates do not contain private keys.
Certificates contain public keys because the purpose of the certificate includes providing the public key to clients.
Since certificates don't contain private keys, there is no notion of ""public"" versus ""private"" certificates.
","152","<ssl><https><public-key-encryption><digital-certificate>","0","1","1","2014-04-23 21:33:43","23255620","0","","","","","2014-04-23 19:50:25",""
"52797337","How to generate entropy by myself? - RSA Golang","I'm working with Golang's RSA encryption library. The following is the function to encrypt a message:
func EncryptOAEP(hash hash.Hash, random io.Reader, pub *PublicKey, msg []byte, label []byte) ([]byte, error)

The random parameter is used as a source of entropy to ensure that encrypting the same message twice doesn't result in the same ciphertext. This parameter allow to use linux functions like getrandom(2) if available or /dev/urandom otherwise that serves as a random number generator by accessing environmental noise collected from devices and other sources. I don't want the EncryptOAEP function to use the functions of the operating system (getrandom(2) or /dev/urandom) to generate the random number. I need to generate a random number by myself (that is, outside the EncryptOAEP function) and then insert it into it. Is that possible with this library? In case it is not, what Golang's library could I use to achieve this behavior? I hope I was clear enough, any help will be appreciated, thanks!
","By design, it is possible and it is easy to do. Provide any io.Reader as the random argument. 
Here's an example from the Go crypto/rsa package. I replaced the crypto/rand io.Reader with a math/rand io.Reader .
package main

import (
    ""crypto/rsa""
    ""crypto/sha256""
    ""fmt""
    ""math/big""
    ""math/rand""
    ""os""
    ""time""
)

func main() {
    secretMessage := []byte(""send reinforcements, we're going to advance"")
    label := []byte(""orders"")

    // crypto/rand.Reader is a good source of entropy for randomizing the
    // encryption function.
    // rng := rand.Reader
    // However, you can use any io.Reader.
    // For example, math/rand.Reader
    rng := rand.New(rand.NewSource(time.Now().UnixNano()))

    ciphertext, err := rsa.EncryptOAEP(sha256.New(), rng, &test2048Key.PublicKey, secretMessage, label)
    if err != nil {
        fmt.Fprintf(os.Stderr, ""Error from encryption: %s\n"", err)
        return
    }

    // Since encryption is a randomized function, ciphertext will be
    // different each time.
    fmt.Printf(""Ciphertext: %x\n"", ciphertext)
}

func fromBase10(base10 string) *big.Int {
    i, ok := new(big.Int).SetString(base10, 10)
    if !ok {
        panic(""bad number: "" + base10)
    }
    return i
}

var test2048Key *rsa.PrivateKey

func init() {
    test2048Key = &rsa.PrivateKey{
        PublicKey: rsa.PublicKey{
            N: fromBase10(""14314132931241006650998084889274020608918049032671858325988396851334124245188214251956198731333464217832226406088020736932173064754214329009979944037640912127943488972644697423190955557435910767690712778463524983667852819010259499695177313115447116110358524558307947613422897787329221478860907963827160223559690523660574329011927531289655711860504630573766609239332569210831325633840174683944553667352219670930408593321661375473885147973879086994006440025257225431977751512374815915392249179976902953721486040787792801849818254465486633791826766873076617116727073077821584676715609985777563958286637185868165868520557""),
            E: 3,
        },
        D: fromBase10(""9542755287494004433998723259516013739278699355114572217325597900889416163458809501304132487555642811888150937392013824621448709836142886006653296025093941418628992648429798282127303704957273845127141852309016655778568546006839666463451542076964744073572349705538631742281931858219480985907271975884773482372966847639853897890615456605598071088189838676728836833012254065983259638538107719766738032720239892094196108713378822882383694456030043492571063441943847195939549773271694647657549658603365629458610273821292232646334717612674519997533901052790334279661754176490593041941863932308687197618671528035670452762731""),
        Primes: []*big.Int{
            fromBase10(""130903255182996722426771613606077755295583329135067340152947172868415809027537376306193179624298874215608270802054347609836776473930072411958753044562214537013874103802006369634761074377213995983876788718033850153719421695468704276694983032644416930879093914927146648402139231293035971427838068945045019075433""),
            fromBase10(""109348945610485453577574767652527472924289229538286649661240938988020367005475727988253438647560958573506159449538793540472829815903949343191091817779240101054552748665267574271163617694640513549693841337820602726596756351006149518830932261246698766355347898158548465400674856021497190430791824869615170301029""),
        },
    }
    test2048Key.Precompute()
}

Playground: https://play.golang.org/p/KtqUuDC2Tai
Output:
Ciphertext: 47516ff9863897f8f5344d07bca363515856ace56fed5451ede414eb6771eff357f09ca67f07d0d918b6e7107975f83afc4eebc932a7d9ba3f48c3f70399af88917c852e46a3d43eaa9bc563c7780bf7cf090c0b5e1690ac77af9e7c8cc6ec0d2fb729eed3fb45c824754bfd898e02eee8dae88b4fb3277f6970dbb0b929da7c14d245e51ed3a3e63127efc3e4c438adcfce78bbc1117a134f5a9dd62f9ebc14f125561c959ce6963a2b8605687ab568ec570295bb8f25477c7bbcb7303d96e888a0150e23ea0dd4880fefe40d86567518784d7f54c594f2c0e576a14c210201bf9d75fbd96b70fdd793c28ffecaa5c036b2949dba6e66004ec2f0e676095f1c

","152","<go><encryption><rsa><public-key-encryption><public-key>","2","2","1","2018-10-13 21:59:41","52797711","0","2","9508850","","2018-10-13 21:26:15","2018-10-13 21:08:06",""
"11456408","Authenticode / Digitally Signing a Deployment","In a scenario where a (ASP.NET) web site is deployed to servers in a foreign country, what security benefit could be had by digitally signing the assemblies? I am not asking what digital signing does as, unto itself, I already know that.  
I'm curious if the web site host OS could check the publisher and reject the web site from loading if the vendor is not my company.  Said differently, if an attacker replaces one or more of my assemblies on the server, I want the site to refuse to load.
Certainly Authenticode offers essentially this facility, but I only know of its use within IE...and that is not the scenario I am addressing.  Is there a way to incorporate Authenticode or similar, perhaps via an API or OS configuration, into the site / IIS / WAS boot-strapping process?
","","149","<asp.net><security><iis><digital-signature><public-key-encryption>","1","","0","2012-07-12 16:31:11","","0","1","","","","2012-07-12 16:31:11",""
"42740861","Can I attack two rsa encryption knowing they have different encrypted messages and different modulus, yet a common exponent?","So yeah, different modulus(n), same exponent(e), different encrypted messages(C). Can I do anything with that to find the original messages(M) ? Thank you !
","Sure. You can factor the modulus, altho for real world RSA keys, that's not gonna be very practical.
More seriously, 99% of all RSA keys use 65537 as the exponent. If a common public exponent were a weakness 99% of all RSA applications would be vulnerable.
","148","<encryption><rsa><public-key-encryption>","0","1","1","2017-03-11 21:33:56","","2","","","","","2017-03-11 21:28:23","2017-03-12 10:17:54"
"45989583","Ad-Hoc SSL in Angular (and backend)","Most of the frontend web frameworks are just a few years old, and are rapidly changing. Are there any recent JS packages or libraries that do SSL very well?
It can cost quite a bit of money to enable SSL with cloud hosting platforms, registrars, etc.
Whatever private keys our browsers use for their typical SSL behavior should be accessible to a javascript app running in that browser, no?
The ideal situation would be to encode information within Javascript so that, on the backend server, in some backend framework, it was indistinguishable (from a developer's perspective) from standard browser-implemented SSL.
SO has some posts about it, but none of them are very recent. This SO post has perspectives from 2011 through 2014, and this SO post from circa 2013.
If someone built something that did this in Javascript, then, for example, ideally, an Angular app could incorporate it by putting something in app.config() regarding $routeProvider or $httpProvider
","","148","<angularjs><ssl><encryption><public-key-encryption><encryption-asymmetric>","0","","0","2017-08-31 20:27:11","","4","","","","","2017-08-31 20:27:11",""
"52162857","""cryptodev_digest_update: illegal inputs"" error when trying to cipher a number with rsa public key using PKCS1_OAEP at an ARM board","I've created a c++ app that runs on a arm7l board with linux v3.10.17-rt12+yocto. At some point I need to cipher a rsa public key. The public key I'm using is created using openssl: 
openssl genrsa -des3 -out private.pem 2048
openssl rsa -in private_rsa.pem -pubout -out public.pem 

For that case I have used poco library. The code I've created is the following:  
Poco::Crypto::CipherFactory &factory = Poco::Crypto::CipherFactory::defaultFactory();
Poco::Crypto::Cipher* pCipher = factory.createCipher(Poco::Crypto::RSAKey(""public.pem""), RSA_PADDING_PKCS1_OAEP);
Poco::Crypto::CryptoTransform *pEncryptor = NULL;
pEncryptor = pCipher->createEncryptor();
std::stringstream memstream;
Poco::Crypto::CryptoOutputStream encryptor(memstream, pEncryptor);
std::string number = ""123456789"";
encryptor << number;
encryptor.close();

After the encryptor.close() command I get the following error message :
cryptodev_digest_update: illegal inputs

However when I try the RSA_PADDING_PKCS1 or even RSA_PADDING_NONE the code works correct. I don't want to remove kernel cryptodev for the time being.
The openssl version is :  
OpenSSL 1.0.1s

The openssl engines are:
(cryptodev) cryptodev engine
(dynamic) Dynamic engine loading support

While the supported openssl commands are:
Standard commands
asn1parse         ca                ciphers           cms               
crl               crl2pkcs7         dgst              dh                
dhparam           dsa               dsaparam          ec                
ecparam           enc               engine            errstr            
gendh             gendsa            genpkey           genrsa            
nseq              ocsp              passwd            pkcs12            
pkcs7             pkcs8             pkey              pkeyparam         
pkeyutl           prime             rand              req               
rsa               rsautl            s_client          s_server          
s_time            sess_id           smime             speed             
spkac             srp               ts                verify            
version           x509              

Message Digest commands (see the `dgst' command for more details)
md4               md5               mdc2              rmd160            
sha               sha1              

Cipher commands (see the `enc' command for more details)
aes-128-cbc       aes-128-ecb       aes-192-cbc       aes-192-ecb       
aes-256-cbc       aes-256-ecb       base64            bf                
bf-cbc            bf-cfb            bf-ecb            bf-ofb            
camellia-128-cbc  camellia-128-ecb  camellia-192-cbc  camellia-192-ecb  
camellia-256-cbc  camellia-256-ecb  cast              cast-cbc          
cast5-cbc         cast5-cfb         cast5-ecb         cast5-ofb         
des               des-cbc           des-cfb           des-ecb           
des-ede           des-ede-cbc       des-ede-cfb       des-ede-ofb       
des-ede3          des-ede3-cbc      des-ede3-cfb      des-ede3-ofb      
des-ofb           des3              desx              idea              
idea-cbc          idea-cfb          idea-ecb          idea-ofb          
rc2               rc2-40-cbc        rc2-64-cbc        rc2-cbc           
rc2-cfb           rc2-ecb           rc2-ofb           rc4               
rc4-40            seed              seed-cbc          seed-cfb          
seed-ecb          seed-ofb     

Has anyone come across a similar problem? Is there a correlation between the padding algorithm and cryptodev because I haven't find anything relevant ?
","","147","<c++><arm><public-key-encryption><poco-libraries>","1","","0","2018-09-04 09:15:54","","0","","","","","2018-09-04 09:15:54",""
"21707425","How to encrypt in linux using an xml public key","I created a key pair in C# and i'd like to upload the public key to a server so the server can send private data to the client. The server must use this public key, but it's in XML format. I've been reading and it seems the best way to encrypt a file in linux using a public key is with openssl.
This is how my public key looks like after being generated with RSACryptoServiceProvider in .net

<RSAKeyValue>
    <Modulus>sqprMX0n4y1gmmgpTt6pHb870k5U0MIuXixidD+S8foQf5BbFS44kth2uWDKzXOXqiONxIPHPb+84XdxrRi2O7bvLysztgrFeU8oNDMeuIwJOKVQzKoJ1vGqjBKiA9w48oQKxvO+Ck3GmObW67LFNcrt50sEco2/OMmrpiH3W8hRx55TcR1flCJduU0/6jA7Yct9ZfhOw5wBq6o5IwiT8Mi1R6LVq9sTzSNAWHC/bFcEONktz6NgUKbFKtt+mTfFGToiwPB1L4TecGyTIweH84nl8jVAngcMvvFP415Eg1kd9PJbRqrIESM5AU1YcsapWV3bsqEGVS2y+r5N4yzXPCYRCRyFWJSnNVlax+gtDFTNz3m9UT8m2E7elGe5hPhR6nN3votzBNvTeQ4Lwc5JDIvnWUg7aOdVIXnHQbBqEQke79BXxIv8tzVPczGkFqFExkmPPQQv8zJvBKkIYc+BFJtkylBiZfQX0590NS3L1y31VSeXn8Ncx2/ceJfUXsMWJ3sQ+dk51MKBJ2LLoyJq8IgloBLnXWvlYZ+tkzRVTExFR277V3Jr17DeTOMQGEg5HqRkbDDVGPTl2RvC2S2BTe7+r9xNzyAZMieVjZLZgb6icE6uSJFcu4qqJ1khQUjW7taymqW8Ao3oEiCUJKvRpZcJPMN+JtMnji+2we17ytk=</Modulus>
    <Exponent>AQAB</Exponent>
</RSAKeyValue>

The fact is that openssl only accepts PEM (as far as I've seen). How do I convert this key into something openssl can use to encrypt?
","
but it's in XML format

The presentation format is RFC 3275, XML-Signature Syntax and Processing.


How do I convert this key into something openssl can use to encrypt?

You will need to parse the RFC 3275 RSAKeyValue, then put it in an OpenSSL RSA structure.
Its somewhat painful.... are you sure you want to see it? (The XML parsing is left as an exercise to the reader, but it uses the values you provided above).
#include <stdio.h>
#include <string.h>

#include <openssl/bn.h>
#include <openssl/rsa.h>
#include <openssl/bio.h>
#include <openssl/evp.h>

int main(int argc, char* argv[])
{
    int ret = -1;

    char nz[] = ""sqprMX0n4y1gmmgpTt6pHb870k5U0MIuXixidD+S8foQf5Bb""
             ""FS44kth2uWDKzXOXqiONxIPHPb+84XdxrRi2O7bvLysztgrF""
             ""eU8oNDMeuIwJOKVQzKoJ1vGqjBKiA9w48oQKxvO+Ck3GmObW""
             ""67LFNcrt50sEco2/OMmrpiH3W8hRx55TcR1flCJduU0/6jA7""
             ""Yct9ZfhOw5wBq6o5IwiT8Mi1R6LVq9sTzSNAWHC/bFcEONkt""
             ""z6NgUKbFKtt+mTfFGToiwPB1L4TecGyTIweH84nl8jVAngcM""
             ""vvFP415Eg1kd9PJbRqrIESM5AU1YcsapWV3bsqEGVS2y+r5N""
             ""4yzXPCYRCRyFWJSnNVlax+gtDFTNz3m9UT8m2E7elGe5hPhR""
             ""6nN3votzBNvTeQ4Lwc5JDIvnWUg7aOdVIXnHQbBqEQke79BX""
             ""xIv8tzVPczGkFqFExkmPPQQv8zJvBKkIYc+BFJtkylBiZfQX""
             ""0590NS3L1y31VSeXn8Ncx2/ceJfUXsMWJ3sQ+dk51MKBJ2LL""
             ""oyJq8IgloBLnXWvlYZ+tkzRVTExFR277V3Jr17DeTOMQGEg5""
             ""HqRkbDDVGPTl2RvC2S2BTe7+r9xNzyAZMieVjZLZgb6icE6u""
             ""SJFcu4qqJ1khQUjW7taymqW8Ao3oEiCUJKvRpZcJPMN+JtMn""
             ""ji+2we17ytk="";

    char ez[] = ""AQAB"";

    BIO* nn = NULL, *ee = NULL;
    BIO* b1 = NULL, *b2 = NULL;
    RSA* rsa = NULL;

    nn = BIO_new_mem_buf(nz, strlen(nz));
    if(!nn) { ret = 1; goto done; }

    ee = BIO_new_mem_buf(ez, strlen(ez));
    if(!ee) { ret = 2; goto done; }

    b1 = BIO_new(BIO_f_base64());
    if(!b1) { ret = 3; goto done; }

    b2 = BIO_new(BIO_f_base64());
    if(!b2) { ret = 4; goto done; }

    /* If you leave these out even though you   */
    /* are reading, then BIO_read will return 0 */
    /* and BIO_should_retry will return false   */
    BIO_set_flags(b1, BIO_FLAGS_BASE64_NO_NL);
    BIO_set_flags(b2, BIO_FLAGS_BASE64_NO_NL);

    nn = BIO_push(b1, nn);
    if(!nn) { ret = 5; goto done; }

    ee = BIO_push(b2, ee);
    if(!ee) { ret = 6; goto done; }

    rsa = RSA_new();
    if(rsa == NULL) { ret = 7; goto done; }

    unsigned char buff[4096];
    const int bsize = sizeof(buff);
    int rr = 0, rd = 0;

    /* See http://marc.info/?l=openssl-users&m=123171064303018&w=2 */
    /* for this contorted goodness */
    rd = 0;
    do {
        rr = BIO_read(nn, buff + rd, bsize - rd);
        if(rr < 0) { ret = 8; goto done; } /* failed */

        rd += rr;
    } while (rr > 0 || BIO_should_retry(nn));

    if(rd == 0) { ret = 9; goto done; }

    rsa->n = BN_bin2bn(buff, rd, NULL);
    if(rsa->n == NULL) { ret = 10; goto done; }

    rd = 0;
    do {
        rr = BIO_read(ee, buff + rd, bsize - rd);
        if(rr < 0) { ret = 11; goto done; } /* failed */

        rd += rr;
    } while (rr > 0 || BIO_should_retry(ee));

    if(rd == 0) { ret = 12; goto done; }

    rsa->e = BN_bin2bn(buff, rd, NULL);
    if(rsa->e == NULL) { ret = 13; goto done; }

    /***** Paydirt *****/

    RSA_print_fp(stdout, rsa, 0);

    ret = 0;

done:

    if(ret != 0)
        fprintf(stderr, ""Failed to parse and validate RSA key\n"");

    if(rsa)
       RSA_free(rsa), rsa = NULL;

    if(nn)
        BIO_free_all(nn), nn = NULL;

    if(ee)
        BIO_free_all(ee), ee = NULL;

    return ret;
}



How to encrypt in linux using an xml public key

With the RSA from above, try RSA_encrypt (and RSA_verify). See rsa(3) in the OpenSSL docs.


The fact is that openssl only accepts PEM (as far as I've seen).

OpenSSL accepts PEM and DER.

Here's the output of the program above on your parameters.
$ ./rsa-test.exe
Public-Key: (4096 bit)
Modulus:
    00:b2:aa:6b:31:7d:27:e3:2d:60:9a:68:29:4e:de:
    a9:1d:bf:3b:d2:4e:54:d0:c2:2e:5e:2c:62:74:3f:
    92:f1:fa:10:7f:90:5b:15:2e:38:92:d8:76:b9:60:
    ca:cd:73:97:aa:23:8d:c4:83:c7:3d:bf:bc:e1:77:
    71:ad:18:b6:3b:b6:ef:2f:2b:33:b6:0a:c5:79:4f:
    28:34:33:1e:b8:8c:09:38:a5:50:cc:aa:09:d6:f1:
    aa:8c:12:a2:03:dc:38:f2:84:0a:c6:f3:be:0a:4d:
    c6:98:e6:d6:eb:b2:c5:35:ca:ed:e7:4b:04:72:8d:
    bf:38:c9:ab:a6:21:f7:5b:c8:51:c7:9e:53:71:1d:
    5f:94:22:5d:b9:4d:3f:ea:30:3b:61:cb:7d:65:f8:
    4e:c3:9c:01:ab:aa:39:23:08:93:f0:c8:b5:47:a2:
    d5:ab:db:13:cd:23:40:58:70:bf:6c:57:04:38:d9:
    2d:cf:a3:60:50:a6:c5:2a:db:7e:99:37:c5:19:3a:
    22:c0:f0:75:2f:84:de:70:6c:93:23:07:87:f3:89:
    e5:f2:35:40:9e:07:0c:be:f1:4f:e3:5e:44:83:59:
    1d:f4:f2:5b:46:aa:c8:11:23:39:01:4d:58:72:c6:
    a9:59:5d:db:b2:a1:06:55:2d:b2:fa:be:4d:e3:2c:
    d7:3c:26:11:09:1c:85:58:94:a7:35:59:5a:c7:e8:
    2d:0c:54:cd:cf:79:bd:51:3f:26:d8:4e:de:94:67:
    b9:84:f8:51:ea:73:77:be:8b:73:04:db:d3:79:0e:
    0b:c1:ce:49:0c:8b:e7:59:48:3b:68:e7:55:21:79:
    c7:41:b0:6a:11:09:1e:ef:d0:57:c4:8b:fc:b7:35:
    4f:73:31:a4:16:a1:44:c6:49:8f:3d:04:2f:f3:32:
    6f:04:a9:08:61:cf:81:14:9b:64:ca:50:62:65:f4:
    17:d3:9f:74:35:2d:cb:d7:2d:f5:55:27:97:9f:c3:
    5c:c7:6f:dc:78:97:d4:5e:c3:16:27:7b:10:f9:d9:
    39:d4:c2:81:27:62:cb:a3:22:6a:f0:88:25:a0:12:
    e7:5d:6b:e5:61:9f:ad:93:34:55:4c:4c:45:47:6e:
    fb:57:72:6b:d7:b0:de:4c:e3:10:18:48:39:1e:a4:
    64:6c:30:d5:18:f4:e5:d9:1b:c2:d9:2d:81:4d:ee:
    fe:af:dc:4d:cf:20:19:32:27:95:8d:92:d9:81:be:
    a2:70:4e:ae:48:91:5c:bb:8a:aa:27:59:21:41:48:
    d6:ee:d6:b2:9a:a5:bc:02:8d:e8:12:20:94:24:ab:
    d1:a5:97:09:3c:c3:7e:26:d3:27:8e:2f:b6:c1:ed:
    7b:ca:d9
Exponent: 65537 (0x10001)

","147","<c#><.net><xml><openssl><public-key-encryption>","1","0","1","2014-02-13 07:22:18","21726817","0","","","","","2014-02-11 16:28:11",""
"51489021","how to restore rsa public key from modulus and exponent in Excel VBA","Problem: as title
What i got from web server to restore public key:
modulus: 9a91586b02a923d79302c5be83f25861452b78e59bd1d383045addc9debad1db9675726276a10f90bf0d0ae4880dbe4a54c821fffdb2f1394faf9df56d87408bb97398dcb2319fab7f53ee59fdb58def6f55ca91dbd9f2af65a4a36779f5353ec212d4bf99ba9197108acb2337d31d3efae038018dcb29665510641f32ac99e8152f297e2056ea14d9bd62350797b2da8edc23574326f57e1563952006dbbb133e2b15d2a4dd6a55aa7debfb28ba610d7e637022957b063e605985c402be41dd8dc3c3852645034f0b29f4fad0f45419f03f1bbb71c0dc54c1069a081d3edb73fd93a204edd0a99459b38e6486d41171328c5f53913696f8f2b1718019db9b65
exponent: 10001
What i have tried:
First base64encode the modulus and exponent then dump them into xml format, here's the result:
<RSAKeyValue><Modulus>OWE5MTU4NmIwMmE5MjNkNzkzMDJjNWJlODNmMjU4NjE0NTJiNzhlNTliZDFkMzgzMDQ1YWRk
 YzlkZWJhZDFkYjk2NzU3MjYyNzZhMTBmOTBiZjBkMGFlNDg4MGRiZTRhNTRjODIxZmZmZGIy
 ZjEzOTRmYWY5ZGY1NmQ4NzQwOGJiOTczOThkY2IyMzE5ZmFiN2Y1M2VlNTlmZGI1OGRlZjZm
 NTVjYTkxZGJkOWYyYWY2NWE0YTM2Nzc5ZjUzNTNlYzIxMmQ0YmY5OWJhOTE5NzEwOGFjYjIz
 MzdkMzFkM2VmYWUwMzgwMThkY2IyOTY2NTUxMDY0MWYzMmFjOTllODE1MmYyOTdlMjA1NmVh
 MTRkOWJkNjIzNTA3OTdiMmRhOGVkYzIzNTc0MzI2ZjU3ZTE1NjM5NTIwMDZkYmJiMTMzZTJi
 MTVkMmE0ZGQ2YTU1YWE3ZGViZmIyOGJhNjEwZDdlNjM3MDIyOTU3YjA2M2U2MDU5ODVjNDAy
 YmU0MWRkOGRjM2MzODUyNjQ1MDM0ZjBiMjlmNGZhZDBmNDU0MTlmMDNmMWJiYjcxYzBkYzU0
 YzEwNjlhMDgxZDNlZGI3M2ZkOTNhMjA0ZWRkMGE5OTQ1OWIzOGU2NDg2ZDQxMTcxMzI4YzVm
 NTM5MTM2OTZmOGYyYjE3MTgwMTlkYjliNjU=</Modulus>
 <Exponent>MTAwMDE=</Exponent>
 </RSAKeyValue>

Then invoke RSACryptoServiceProvider.FromXmlString(publickey)
and error occurred:
Run-time error -2146893819(80090005)
Automation error 
Bad data
Then i tried to generate xml format public key RSACryptoServiceProvider.ToXmlString(False)
and got
 <RSAKeyValue><Modulus>ph0JbRrKHFY5sfmVa9cDPICAtYfT6OKF4KcjgBIKIuFRz3azyCCiE12qP0ZbuHqwb6YQxg6778NJK8S0Xvft6Fu9s0FCO7zUxVRaIw6gumOAV2ih/s+S9pFuxMf3k5w2v5iMA6TFjxS72kCa4O8iIXhOG4u05+o2fRC2cwEYVSk=</Modulus><Exponent>AQAB</Exponent></RSAKeyValue>

amazingly this key could be recognized by RSACryptoServiceProvider.FromXmlString
I didn't see much difference between the former one and the latter one, why does error occur in the first case?
Is there any other way to restore the public key given modulus and exponent?
","You received a hex (base 16) version of the integer modulus and public exponent. You then converted that base 16 version into base64. However, the XML is supposed to contain the base64 encoding of the integers as byte arrays in big-endian format. You can easily do that from the hex by converting every two hex characters into its byte value. The result should look something like
<RSAKeyValue><Modulus>mpFYawKpI9eTAsW+g/JYYUUreOWb0dODBFrdyd660duWdXJidqEPkL8NCuSIDb5KVMgh//2y8TlPr531bYdAi7lzmNyyMZ+rf1PuWf21je9vVcqR29nyr2Wko2d59TU+whLUv5m6kZcQissjN9MdPvrgOAGNyylmVRBkHzKsmegVLyl+IFbqFNm9YjUHl7LajtwjV0Mm9X4VY5UgBtu7Ez4rFdKk3WpVqn3r+yi6YQ1+Y3AilXsGPmBZhcQCvkHdjcPDhSZFA08LKfT60PRUGfA/G7txwNxUwQaaCB0+23P9k6IE7dCplFmzjmSG1BFxMoxfU5E2lvjysXGAGdubZQ==</Modulus><Exponent>AQAB</Exponent></RSAKeyValue>

","147","<vba><excel-vba><rsa><public-key-encryption><modulus>","1","1","1","2018-07-24 11:34:07","51497558","0","1","","","","2018-07-24 00:55:36",""
"44697705","Encryption and Decryption with the help of Certificate public Private key","I want to create certificate with public and private key. Then I want to extract public key from it and with the help of public key I want to encrypt data.
On the receiver side I want to decrypt data.
How can i create required certificate?
Sample code for encryption and decryption.
","You can use OpenSSL for creating a certificate with public and private keys. 
Using that certificate you can generate the public from it.
The following video series will guide you in that process
https://www.youtube.com/watch?v=1xtBkukWiek
","147","<.net><c#-4.0><x509certificate><public-key-encryption><.net-security>","0","0","1","2019-06-23 12:45:46","","3","","","","","2017-06-22 11:12:01",""
"44423474","How to cast ""byte[] publicKey"" to ""Data Object"" (to use ObjectHandle)","I'm extracting the Public key for encryption from the sender's Certificate as byte[] array
    JObject o = JObject.Parse(reply);
    string certResponse = o.GetValue(""certificate"").Value<string>();
    byte[] certByteArray = Encoding.ASCII.GetBytes(certResponse);

    //Extract Public key from Certificate
    var certTest = new X509Certificate2(certByteArray);
    var certPublicKey = certTest.GetPublicKey();

I wish to use PKCS11Interop Encrypt() function which takes ObjectHandle of the key to Encrypt message/data. The only way I find is to set ObjectAttributes and session.CreateObject(objectAttributes); and eventually DestroyObject.
However I get CKR_FUNCTION_NOT_SUPPORTED calling CreateObject(). As clarified by jariq in this post that OpenSC PKCS#11 library does not support/implement some functions defined in PKCS#11 specification, What is the alternative/workaround to use the byte array publicKey for encryption?
","","146","<public-key-encryption><pkcs#11><opensc>","0","","0","2017-06-07 21:58:56","","5","0","","","","2017-06-07 21:58:56",""
"55248347","Sodium Crypto box seal open not working in PHP","So I'm trying to get libsodium's sodium_crypto_box_seal and sodium_crypto_box_seal_open working but for some reason, the open is failing and I can't work out why.
So in all my trying to get this working, I have built a test system that a single PHP file that tests how it would work cross server.
<pre>
<?php
/*** Client Sending ***/
// saved argument
$remotePublic = ""DXOCV4BU6ptxt2IwKZaP23S4CjLESfLE+ng1tMS3tg4="";

// create out key for this message
$key = sodium_crypto_box_keypair();

// encrypt our message using the remotePublic
$sealed = sodium_crypto_box_seal(""This is a test"", base64_decode($remotePublic));
$send = json_encode((object)array(""pub"" => base64_encode(sodium_crypto_box_publickey($key)), ""msg"" => base64_encode($sealed)));
echo ""Sending : {$send} \r\n"";

/*** Server Setup ***/
$payload = json_decode($send);
$apps = 
array (
  'test' => 
  array (
    'S' => 'lv/dT3YC+Am1MCllkHeA2r3D25HW0zPjRrqzR8sepv4=',
    'P' => 'DXOCV4BU6ptxt2IwKZaP23S4CjLESfLE+ng1tMS3tg4=',
  ),
);

/*** Server Opening ***/
$msg = $payload->msg;
$key = sodium_crypto_box_keypair_from_secretkey_and_publickey(base64_decode($apps['test']['S']), base64_decode($apps['test']['P']));
$opened = sodium_crypto_box_seal_open(base64_decode($msg), $key);
echo ""Opened : {$opened} \r\n"";

/*** Server Responding ***/
$sealedResp = base64_encode(sodium_crypto_box_seal(""We Got your message '{$opened}'"", base64_decode($payload->pub)));
echo ""Responding : {$sealedResp}\r\n"";

/*** Client Receiving ***/
$received = sodium_crypto_box_seal_open(base64_decode($sealedResp), $key);
echo ""Received : {$received}\r\n"";

/*** Sanity Checking ***/
if($received == ""We Got your message 'This is a test'""){
    echo ""Test Successfull.\r\n"";
}else{
    echo ""Test Failed got '{$received}' is not \""We Got your message 'This is a test'\""\r\n"";
}
?>
</pre>

Output is:
Sending : {""pub"":""DS2uolF5lXZ1E3rw0V2WHELAKj6+vRKnxGPQFlhTEFU="",""msg"":""VVYfphc2RnQL2E8A0oOdc6E\/+iUgWO1rPd3rfodjLhE+slEWsivB6QiaLiMuQ31XMP\/1\/s+t+CSHu8QukoY=""} 
Opened : This is a test 
Responding : cvDN9aT9Xj7DPRhYZFGOR4auFnAcI3qlwVBBRY4mN28JmagaR8ZR9gt6W5C0xyt06AdrQR+sZFcyb500rx6iDTEC4n/H77cUM81vy2WfV8m5iRgp
Received : 
Test Failed got '' is not ""We Got your message 'This is a test'""

","There's two problems here.
First -- in this step under ""Server Opening"":
$opened = sodium_crypto_box_seal_open($msg, $key);

$msg is still Base64 encoded, so trying to decrypt it will fail.
Second -- the public key that is included in the ""pub"" field of $send is the public key of a random keypair that was generated by sodium_crypto_box_keypair(), not the same public key as $remotePublic or the pair in $apps. This key is overwritten by a call to sodium_crypto_box_keypair_from_secretkey_and_publickey() later in the application, making the original message unrecoverable.
","145","<php><public-key-encryption><libsodium>","0","3","1","2019-03-19 19:34:46","55248691","2","","623150","","2019-03-19 19:34:46","2019-03-19 19:04:26",""
"20463883","implication of lacking ind-cca security","I was wondering if somebody could tell me what the impication is of an encryption scheme lacking ind-cca or ind-cpa security.  For example, the ElGamal scheme is known to lack ind-cca security.  The Helios voting protocol uses ElGamal to encrypt each ballot - what I am have a difficult time understanding is what the implication is of ElGamal having an efficient ind-cpa adversary and ElGamal being used in Helios.
","","145","<public-key-encryption><encryption-asymmetric><helios><elgamal>","2","","0","2013-12-09 05:39:17","","1","","","","","2013-12-09 05:39:17",""
"26076540","Trying to encrypt a random key for password reset functionality","I am trying to encrypt a random token to be stored in the user table when a user uses the forgot password field by entering their username. It will also send out an e-mail with a url to the change user password page. This url will have a query string param called 'key'. 
i.e. www.mysite.com/Changepassword?key=xfsdfsdffsdfiughjksdf.
Once the user clicks the link and they are on this page. I have a function that will get a user by ResetToken. If it finds a user then proceed.
I need advice on a few things:

What kind of random token/encryption technique should I use to
ensure that no one can go to the Changepassword page and guess a key
and be able to change a users password.
How will I handle making this key url friendly?

","If you want to be super-secure, using the cryptographically secure random number generator would work. And converting to hex is the easiest way to ensure it's URL-safe:
byte[] bytes = new byte[8];
using (var rng = RandomNumberGenerator.Create())
{
    rng.GetBytes(bytes);
}
string key = string.Join("""", bytes.Select(b => b.ToString(""X2"")));

EDIT Keep in mind that e-mail is potentially insecure, so it's possible (however unlikely) that your message can be intercepted by a malicious third-party before reaching the recipient.
","144","<c#><encryption><public-key-encryption>","0","1","1","2014-09-27 17:10:56","26076635","0","","380384","","2014-09-27 17:10:56","2014-09-27 16:06:32",""
"52299535","How to encrypt the stanzas sent to ejabberd","I am currently using ejabberd. My app is working fine but I have a question. How can I encrypt the stanzas sent to ejabberd from the client (Presence, Message, IQ). I am currently using TLS transport protocol for client to server communication and server to server communications. What I want to do is encrypt the data sent to ejabberd from the clients to server using a public key.
","I believe you are talking about End-To-End encryption 
If we are talking about XMPP in general, the following things are available and can be used:

Off-the-Record Messaging (OTR) and XEP-0364 
OpenPGP: XEP-0027 and XEP-0374
Signal Protocol
OMEMO and XEP-omemo

Regarding Ejabberd - as stated here https://www.process-one.net/en/ejabberd/protocols/ - they support OpenPGP out of the box. 
Other things (at least OTR) also can be used in any messaging apps.
Anyway, it's a very broad topic and you need to invest some good amount of time to implement End-To-End encryption, it's not a quick task 
","144","<ejabberd><public-key-encryption>","0","1","1","2018-09-13 09:40:20","52310926","0","","","","","2018-09-12 16:14:52",""
"4193437","Client proof public key encryption","I want to set up an automated email of sensitive data to a non-techy client, and I'm looking for some very easy to use public key encryption (or rather decryption) desktop software I can supply them which will allow them to generate a password protected key pair, present the public key to them in a way which they can easily put in an email to me, and then offer a nice straightforward browse-select-decrypt function they can use on any downloaded attachment I send them. At my end I'd be hoping to use the likes of Bouncy Castle's PGP. 
Does anyone have any recommendations? I've looked at GPG and SecureZip and neither appears straightforward and focused enough. The less the software does beyond generate and decrypt the better really, otherwise I'm going to be pushed towards using symmetric Winzip password protection.
","You can use commercial/opensource library (Which uses OpenPGP, or ZIP encryption, or whatever else), and write small utility, which will do the needed task for customer.
","144","<.net><security><public-key><pgp><public-key-encryption>","0","0","2","2011-02-08 04:13:09","","2","1","","","","2010-11-16 11:00:44",""
"4193437","Client proof public key encryption","I want to set up an automated email of sensitive data to a non-techy client, and I'm looking for some very easy to use public key encryption (or rather decryption) desktop software I can supply them which will allow them to generate a password protected key pair, present the public key to them in a way which they can easily put in an email to me, and then offer a nice straightforward browse-select-decrypt function they can use on any downloaded attachment I send them. At my end I'd be hoping to use the likes of Bouncy Castle's PGP. 
Does anyone have any recommendations? I've looked at GPG and SecureZip and neither appears straightforward and focused enough. The less the software does beyond generate and decrypt the better really, otherwise I'm going to be pushed towards using symmetric Winzip password protection.
","Depending on your budget and existing apps, you could use a standard PGP plugin for Microsoft Outlook which will offer very simple encrypt/decrypt integration by the addition of a simple button to the existing icons.
Lotus Notes also has a similar plugin, and there are a range of open source ones as well.
Using this route you minimise problems with user knowledge. If they are slightly more tech savvy, you can use various apps such as Windows Privacy Tray (which incorporates GPG and is free) but it does require a couple of simple steps to encrypt/decrypt/manage keys etc.
","144","<.net><security><public-key><pgp><public-key-encryption>","0","0","2","2011-02-08 04:13:09","","2","1","","","","2010-11-16 11:00:44",""
"34148112","Can I create a bitcoin wallet with SecurityDriven.Net/Inferno library?","I see that SecurityDriven.NET/Inferno is a minimalistic & safe approach to cryptography in .NET, especially compared to BouncyCastle.
Does it provide enough algorithms to create a simple bitcoin wallet?
","Base58 encoder/decoder is not in Inferno. More importantly, Inferno uses NIST P-384 elliptic curve, while bitcoin uses Secp256k1 elliptic curve.
","143","<.net><public-key-encryption><bitcoin><.net-security>","1","2","1","2015-12-09 03:06:07","","0","","544947","","2015-12-09 03:06:07","2015-12-08 04:39:21",""
"55656854","How to transform a jwk to public key over openssl","I have a JWE and in header an ephemeral public key.
So I have coordinate X and Y.
My question in shell mode how to convert the JWK to ECC public key in pem format. 
For example, here a jwk
{""epk"":{""kty"":""EC"",""crv"":""P-256"",""x"":""GCl--lQHb7NKYU3jXpKVI_BYaTlALT5JFPdl3sbB9mY"",""y"":""ADRX25PBSlZJE79drET0ARtRqZAkUIMNt9aa2bbjBYY""}}

After I do this 
> # I convert the x coordonate from base64url to base64
> echo -n -e ""GCl++lQHb7NKYU3jXpKVI/BYaTlALT5JFPdl3sbB9mY"" | base64 -d | hexdump

0000000 2918 fa7e 0754 b36f 614a e34d 925e 2395
0000010 58f0 3969 2d40 493e f714 de65 c1c6 66f6
0000020

> echo -n -e ""ADRX25PBSlZJE79drET0ARtRqZAkUIMNt9aa2bbjBYY"" | base64 -d | hexdump

0000000 3400 db57 c193 564a 1349 5dbf 44ac 01f4
0000010 511b 90a9 5024 0d83 d6b7 d99a e3b6 8605
0000020

So the public key is
04
2918 fa7e 0754 b36f 614a e34d 925e 2395
58f0 3969 2d40 493e f714 de65 c1c6 66f6
3400 db57 c193 564a 1349 5dbf 44ac 01f4
511b 90a9 5024 0d83 d6b7 d99a e3b6 8605
But I have the curve, the public key, I want to know how to generate a pem?
In other words,
I have a file mykey.pub which contains this:
-----BEGIN PUBLIC KEY-----
MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAETGUwowNEfqQ0LtHiMXJPY+Os5pXc
lsYCRPOi3F6K0n4k1RjJ7PGp/9RhZy3XS1yn1Qlu4hoCClHcc9rPXPn4fQ==
-----END PUBLIC KEY-----

I execute this command to display the public key:
> openssl ec -in mykey.pub -pubin -text -noout
read EC key
Public-Key: (256 bit)
pub:
    04:4c:65:30:a3:03:44:7e:a4:34:2e:d1:e2:31:72:
    4f:63:e3:ac:e6:95:dc:96:c6:02:44:f3:a2:dc:5e:
    8a:d2:7e:24:d5:18:c9:ec:f1:a9:ff:d4:61:67:2d:
    d7:4b:5c:a7:d5:09:6e:e2:1a:02:0a:51:dc:73:da:
    cf:5c:f9:f8:7d
ASN1 OID: prime256v1
NIST CURVE: P-256


So my question is if I have this data
> openssl ec -in mykey.pub -pubin -text -noout
read EC key
Public-Key: (256 bit)
pub:
    04:4c:65:30:a3:03:44:7e:a4:34:2e:d1:e2:31:72:
    4f:63:e3:ac:e6:95:dc:96:c6:02:44:f3:a2:dc:5e:
    8a:d2:7e:24:d5:18:c9:ec:f1:a9:ff:d4:61:67:2d:
    d7:4b:5c:a7:d5:09:6e:e2:1a:02:0a:51:dc:73:da:
    cf:5c:f9:f8:7d
ASN1 OID: prime256v1
NIST CURVE: P-256


how to retrieve this in shell mode
-----BEGIN PUBLIC KEY-----
MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAETGUwowNEfqQ0LtHiMXJPY+Os5pXc
lsYCRPOi3F6K0n4k1RjJ7PGp/9RhZy3XS1yn1Qlu4hoCClHcc9rPXPn4fQ==
-----END PUBLIC KEY-----

","Let me first briefly describe your target format. What you are seeking to obtain is a PEM encoded SubjectPublicKeyInfo (SPKI) file. PEM encoding is essentially DER encoding (which is a binary format) and then base64 encoded with a header and footer. The SPKI structure is defined in RFC5280 (see section 4.1):
https://tools.ietf.org/html/rfc5280#section-4.1
   SubjectPublicKeyInfo  ::=  SEQUENCE  {
        algorithm            AlgorithmIdentifier,
        subjectPublicKey     BIT STRING  }

So the first chunk of bytes in the binary DER encoding consists of a header that identifies the algorithm being used (and part of that includes the curve). The last bytes are the raw public key (which is an encoded x and y co-ordinate on the curve).
Since your sample key is for the same curve as the key you want to create it will have the same AlgorithmIdentifier header bytes. Taking your mykey.pub file we can convert it to the binary DER format:
$ openssl ec -in mykey.pub -pubin -outform DER -out key.der

Lets look at the contents:
$ hexdump -C key.der
00000000  30 59 30 13 06 07 2a 86  48 ce 3d 02 01 06 08 2a  |0Y0...*.H.=....*|
00000010  86 48 ce 3d 03 01 07 03  42 00 04 4c 65 30 a3 03  |.H.=....B..Le0..|
00000020  44 7e a4 34 2e d1 e2 31  72 4f 63 e3 ac e6 95 dc  |D~.4...1rOc.....|
00000030  96 c6 02 44 f3 a2 dc 5e  8a d2 7e 24 d5 18 c9 ec  |...D...^..~$....|
00000040  f1 a9 ff d4 61 67 2d d7  4b 5c a7 d5 09 6e e2 1a  |....ag-.K\...n..|
00000050  02 0a 51 dc 73 da cf 5c  f9 f8 7d                 |..Q.s..\..}|
0000005b

You can see the first bytes of the public key that you printed out above starting at offset 0x1a (i.e. 26 bytes in): 04 4c 65 30 .... The raw public key data extends all the way the end of the file and is 65 bytes long. This consists of a leading 0x04 byte followed by 32 bytes of x co-ordinate and 32 bytes of y co-ordinate. The leading 0x04 tells us how the co-ordinate is represented. 0x04 means ""uncompressed"" - which is handy because that's the simplest for us to deal with. We will also use uncompressed format for our target key. Therefore we need to take the first 26 bytes of header plus the 0x04 byte (so 27 bytes in total) from our sample key:
$ head -c 27 key.der >key.head

And just to check we got what we were expecting:
$ hexdump -C key.head
00000000  30 59 30 13 06 07 2a 86  48 ce 3d 02 01 06 08 2a  |0Y0...*.H.=....*|
00000010  86 48 ce 3d 03 01 07 03  42 00 04                 |.H.=....B..|
0000001b

Now we create the x and y elements of our co-ordinate, which you already did:
$ echo -n ""GCl++lQHb7NKYU3jXpKVI/BYaTlALT5JFPdl3sbB9mY="" | base64 -d >key.x
$ echo -n ""ADRX25PBSlZJE79drET0ARtRqZAkUIMNt9aa2bbjBYY="" | base64 -d >key.y

And then put all the elements together:
cat key.head key.x key.y >keynew.der

We can convert the new key in DER format to PEM format:
$ openssl ec -in keynew.der -inform DER -pubin -out keynew.pem

Which gives us:
-----BEGIN PUBLIC KEY-----
MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEGCl++lQHb7NKYU3jXpKVI/BYaTlA
LT5JFPdl3sbB9mYANFfbk8FKVkkTv12sRPQBG1GpkCRQgw231prZtuMFhg==
-----END PUBLIC KEY-----

And just to check it looks sane:
$ openssl ec -in keynew.pem -pubin -noout -text
read EC key
Public-Key: (256 bit)
pub:
    04:18:29:7e:fa:54:07:6f:b3:4a:61:4d:e3:5e:92:
    95:23:f0:58:69:39:40:2d:3e:49:14:f7:65:de:c6:
    c1:f6:66:00:34:57:db:93:c1:4a:56:49:13:bf:5d:
    ac:44:f4:01:1b:51:a9:90:24:50:83:0d:b7:d6:9a:
    d9:b6:e3:05:86
ASN1 OID: prime256v1
NIST CURVE: P-256

","143","<encryption><openssl><public-key-encryption><elliptic-curve><jwk>","1","1","1","2019-04-12 23:26:41","55660604","0","","","","","2019-04-12 17:26:20",""
"30901873","What format are .tox files stored in?","Specifically, I am looking for a way to start working up some Python 3 or Elixir code open and access the tox_save.tox file for the Tox network client μTox. 
Once I figure out how to get pip install pysqlite going on my virtual environment, I'll try poking around at it with that. In the mean time, though, I am hoping someone will respond here or on Github. 
My other guess is that it's a plain old C array stored in binary format. 
It looks like tox_save.tox could be an encrypted sqlite file. 
Before I bust out the ol' hex editor, does anyone know the format for sure? 
","It's binary format. Basically storing C structure to a file.
Here's python2 example how to work with it:
import struct
#messenger.c
MESSENGER_STATE_TYPE_NOSPAMKEYS = 1
MESSENGER_STATE_TYPE_NAME = 4
MESSENGER_STATE_TYPE_STATUSMESSAGE = 5

def process_chunk(index, state):
    if index + 8 >= len(state):
        return
    length = struct.unpack_from(""<H"", state, index)[0]
    new_index = index + length + 8
    data_type = struct.unpack_from(""<H"", state, index + 4)[0]

    if data_type == MESSENGER_STATE_TYPE_NOSPAMKEYS:
        result = str(state[index + 8:index + 8 + length]).encode('hex')
        print(""nospam = {}, public_key = {}, private_key = {}"".format(result[0:4],
                                                                      result[4:36],
                                                                      result[36:68]))
    if data_type == MESSENGER_STATE_TYPE_NAME:
        print(""User name = {}"".format(str(state[index + 8:index + 8 + length])))

    if data_type == MESSENGER_STATE_TYPE_STATUSMESSAGE:
        print(""Status = {}"".format(str(state[index + 8:index + 8 + length])))

    # ... there's much more data
    process_chunk(new_index, state)


tox_save = open('/tmp/tox_save.tox', 'rb').read()
process_chunk(8, tox_save)

","143","<public-key-encryption><file-format>","0","1","1","2016-04-14 09:18:57","","0","","744178","","2015-06-17 20:35:40","2015-06-17 20:34:03",""
"52221546","Replacing cryptico.js with WebCryptoAPI - how do I get Public Key string?","I hope someone can help.
I have been using cryptico.js and have been generating keys via:
var RSAkey = cryptico.generateRSAKey(passphrase, 512);
var publicKeyString = cryptico.publicKeyString(RSAkey);

Giving me clean good access to a public key, like: vnY5f+HVUQa2oBZKsb2LUgTlso/wtVsA5Ytqlr1RL13xVN81mnIHoL/5/8CKG4rQ/vQfnBAUBYfJzBQGeAXYnw==
I am switching to use WebCrypto API as I want to use a different key type:
promise_key = crypto.subtle.generateKey({name: ""ECDSA"", namedCurve: ""P-256"", hash: {name: ""SHA-256""} }, true, [""sign"", ""verify""]);
promise_key.then(function(key) {
    private_key_object = key.privateKey;
    public_key_object = key.publicKey;
    console.log(key.publicKey);
});

I am wanting to get the Public Key String as I do with cryptico, and I am sure I am doing something very silly but I can't seem to get it.
I have used crypto.subtle.exportKey with 'spki', 'raw' and 'jwk' options but no joy.
Even if I use RSA to generate keys instead of ECDSA, I still get the same.
What am I doing wrong, please?
Thanks a lot
","The CryptoKey itself is not viewable via a simple console.log. It first needs to be transformed into the desired format. You can use exportKey for that (as long as you have set extractable to `true - which you did).
Here are some examples.
","142","<javascript><public-key-encryption><webcrypto-api><cryptico>","0","0","1","2018-09-07 11:34:28","","0","","","","","2018-09-07 11:23:04",""
"35089811","how do I channel all browsing traffic through encrypted sTunnel session?","I have sTunnel running on my client and server and cant seem to get my head round how i can have it running in a sort of ""silent mode"" whereby if i were abroad I could fire up the sTunnel connection on my client, connect to my server and then my browsing traffic connection would behave as if i were in the UK (an encrypted proxy )
on the client conf i have:
accept = localhost:xxx (i understand this means the local sTunnel installation listens on xxx port and grabs any traffic sent on that port)
connect = serverip:xxx ( this is the instruction of where it needs to be forwarded, i.e the server)
on my server :
accept: clientIP:xxx (the source IP address of my client)
connect: localhostxxx (the loopback address of the server)
What am i failing to see here? as i see it i can only use this tunnel if i explicitly target a port with my browser and even then wouldnt it only make it as far as the sTunnel server and not onwards to website intended? do i need to setup proxy settings in the browser?
thanks a lot
","I'm not sure stunnel is what you're looking for here.
What you describe would be best accomplished with OpenSSH, and its dynamic SOCKS5 proxy functionality, e.g. ssh -D1080 from the client.
This generally doesn't require any extra settings on the server-side (unless it was specifically disabled by your system administrator), and then on your roaming client-side, you simply establish an SSH connection to your server as per usual, but add an extra -D1080 parameter to your ssh invocation.
Or, if using PuTTY, set up dynamic port forwarding within Connection, SSH, Tunnels, Source port of 1080 and Destination of Dynamic, click Add.
Subsequently, change the settings of your browser to use SOCKS proxy at localhost, port 1080, and also make sure to specify SOCKS v5 and ensure that the checkbox for resolving hostnames remotely is set, too.
","142","<unix><proxy><ssl-certificate><public-key-encryption><stunnel>","1","0","1","2016-01-29 17:17:15","","0","","","","","2016-01-29 16:49:04",""
"46309056","Encrypting the X509Certificate public Key","All, I am working on IDP initiated web sso for a project and the Service Provider has this requirement to RSA encrypt the AES-128 symmetric key(ECB with PKCS1 padding) and Base64 encode that before adding this to the AttributeStatement section of SAML 2.0 response .My understanding is RSA encryption is asymmetric and the key we have to encrypt is the Service Providers public key.But we dont have SP's public certificate ,so I decided to RSA encrypt our X509Certicate's public key
This is the code I have and it throws a Bad Length Cryptographic exception on calling the Encrypt method on RSACryptoServiceProvider class.Does anyone know what the issue?
using(var rsa = cert.PublicKey.Key as RSACryptoServiceProvider)
            {
                rsa.KeySize = 1024;                
                byte[] encryptedKey = rsa.Encrypt(cert.GetPublicKey(),false);                
                encodedPublicKey =  Convert.ToBase64String(encryptedKey);
            }

","The amount of data that you are able to encrypt using RSA public key must be (I don't know the exact equation) less than the length of the public key.
In case of encrypting AES-128 you will be encrypting 128 bits. 
","138","<c#><public-key-encryption><x509certificate2>","1","2","1","2017-09-20 19:15:50","","0","","","","","2017-09-19 20:15:03",""
"4241831","How to make a file that user can read, but not write?","I want to distribute s/w licenses as encrypted files. I create a new file every time someone buys a licence & email it out, with instructions to put it in a certain directory.
The PHP code which the user runs should be able to unencrypt the file (and the code is obfuscated to stuff him hacking that). Obviously the user should not be able to write a similar file.
Let's not discuss whether this is worth it. I have been ordered to implement it, so ... how do I go about it? Can I use public key encryption and give him one key?

Can't I just give the user one key & keep the other? HE can read & I can write
","Possibly what you want to do is use XOR encryption (XOR each n-byte chunk of the file with the key) and since as @AndreKR said what you actually want to do is impossible, you might want to sign the encrypted file with your private key, then you can verify that the encryption was done by you. 
Of course if you don't check this every time, and you don't use an opaque file-format and compiled/obfsucated code then it won't really make much difference
It is impossible in the general case to stop digital duplication of data if you are going to display that data to the user - in the worst case they can just take screen shots (or even capture signals sent to the monitor) 
","138","<php><encryption><public-key-encryption>","-1","0","5","2016-11-11 19:46:02","4274360","3","","192910","","2010-11-22 03:14:47","2010-11-22 02:44:33",""
"4241831","How to make a file that user can read, but not write?","I want to distribute s/w licenses as encrypted files. I create a new file every time someone buys a licence & email it out, with instructions to put it in a certain directory.
The PHP code which the user runs should be able to unencrypt the file (and the code is obfuscated to stuff him hacking that). Obviously the user should not be able to write a similar file.
Let's not discuss whether this is worth it. I have been ordered to implement it, so ... how do I go about it? Can I use public key encryption and give him one key?

Can't I just give the user one key & keep the other? HE can read & I can write
","If you have a file that just says ""yes, software may be run"" you can of course not stop him from copying that file.
What you can do is to encrypt a file with something that is specific to the customer's system, the customer's name or an IP address or something. Then you can make your software check this IP address or print the customer's name on all reports or something.
You can do it with simple symmetric encryption or using a signature, neither of them preventing him from tampering with the program to find the key. So tell your boss it's an obstacle but certainly not unbreakable.
","138","<php><encryption><public-key-encryption>","-1","2","5","2016-11-11 19:46:02","4274360","3","","192910","","2010-11-22 03:14:47","2010-11-22 02:44:33",""
"4241831","How to make a file that user can read, but not write?","I want to distribute s/w licenses as encrypted files. I create a new file every time someone buys a licence & email it out, with instructions to put it in a certain directory.
The PHP code which the user runs should be able to unencrypt the file (and the code is obfuscated to stuff him hacking that). Obviously the user should not be able to write a similar file.
Let's not discuss whether this is worth it. I have been ordered to implement it, so ... how do I go about it? Can I use public key encryption and give him one key?

Can't I just give the user one key & keep the other? HE can read & I can write
","Simple RSA encryption will not solve your woes, once the code is in the clear anyone can get it.  
A better question is ""How much work am I willing to put into making it difficult for my client to get my code?""  As no matter the language and method eventually it gets run, and when it's run it can be read.
The only fool proof way is to host it yourself and not allow your client or his servers any access to your code.
","138","<php><encryption><public-key-encryption>","-1","1","5","2016-11-11 19:46:02","4274360","3","","192910","","2010-11-22 03:14:47","2010-11-22 02:44:33",""
"4241831","How to make a file that user can read, but not write?","I want to distribute s/w licenses as encrypted files. I create a new file every time someone buys a licence & email it out, with instructions to put it in a certain directory.
The PHP code which the user runs should be able to unencrypt the file (and the code is obfuscated to stuff him hacking that). Obviously the user should not be able to write a similar file.
Let's not discuss whether this is worth it. I have been ordered to implement it, so ... how do I go about it? Can I use public key encryption and give him one key?

Can't I just give the user one key & keep the other? HE can read & I can write
","You can use a license like FlexNet Publisher License System.
There are two sides to the FlexNet license. The first is establishing that a site has a license. This can be done based upon IP, Mac Address, or an internal ID of the processor.
Once you've licensed the site, licenses at that site can be done on an active user basis (you can have thousands of users, but only ten users at a time can use the software), seat license (you have ten users at the site who can use it, and only those people can use it. If an eleventh person wants it, the site must move the license from one person who is licensed to that new user. Or, buy more licenses). And, you can have a site license with unlimited users.
FlexNet license can be broken, but are generally strong and can report back to you violations of the license policy.
Of course, you'll have to pay a licensing fee to Flexera Software to use their licensing scheme. And, there may even be some sort of ""open source"" implementation of the FlexNet licensing scheme although I don't know of one.
I've never used it because I believe fully in the open source software philosophy. That and the fact than no one would pay a cent for anything I wrote.
","138","<php><encryption><public-key-encryption>","-1","2","5","2016-11-11 19:46:02","4274360","3","","192910","","2010-11-22 03:14:47","2010-11-22 02:44:33",""
"4241831","How to make a file that user can read, but not write?","I want to distribute s/w licenses as encrypted files. I create a new file every time someone buys a licence & email it out, with instructions to put it in a certain directory.
The PHP code which the user runs should be able to unencrypt the file (and the code is obfuscated to stuff him hacking that). Obviously the user should not be able to write a similar file.
Let's not discuss whether this is worth it. I have been ordered to implement it, so ... how do I go about it? Can I use public key encryption and give him one key?

Can't I just give the user one key & keep the other? HE can read & I can write
","It sounds like what you are looking for is a digital signature.
When you create the license file, you sign it using your private key.  When the application loads the license file, it verifies the signature using your public key, which is hardcoded into your obfuscated license check.
Obviously, the user can just patch the license check code itself - either to replace your public key with their own, or just to avoid the license check altogther - but there's really nothing you can do about that.
","138","<php><encryption><public-key-encryption>","-1","1","5","2016-11-11 19:46:02","4274360","3","","192910","","2010-11-22 03:14:47","2010-11-22 02:44:33",""
"26536374","Asymmetric encryption with multiple decryption results","Edit
I am trying to develop a password managing tool for companies. My idea is that the passwords in some kind of database are encrypted with a master password which only the admin has.
Per department in a company there should be an own password, which lets the users of that department only access their passwords.
Lets look at an example.

Department A

Billing system, Password: ""Hello""

Department B

Mail, Password: ""World""


The passwords are encrypted with the master password of the admin. Lets just assume it is 0000. So in the database there would be something like this

Department A

Billing system, Password: encrypt(""Hello"",0000,'A')

Department B

Mail, Password: encrypt(""World"",0000,'B')


Furthermore, the password of department A would be 9999 and of department B 7777. Now I am searching for a possibility to decrypt the password of the billing system with the password 9999 and decrypt the mail password with 7777. But it should not be possible to decrypt the mail password with 9999 and vice versa.

Billing system: decrypt(encrypt(""Hello"",0000,'A'), 9999) = ""Hello""
Billing system: decrypt(encrypt(""Hello"",0000,'A'), 7777) != ""Hello""
Mail: decrypt(encrypt(""World"",0000,'B'), 9999) != ""World""
Mail: decrypt(encrypt(""World"",0000,'B'), 7777) = ""World""

Not that this it hard enough, the admin user must have the possibility to decrypt any password with his master password 0000

Billing system: decrypt(encrypt(""Hello"",0000,'A'), 0000) = ""Hello""
Mail: decrypt(encrypt(""World"",0000,'B'), 0000) = ""World""

I hope that my ideas are getting clearer now...
","Preface: you cannot design a cryptographic system without knowing its full intent and purpose, so me giving any snippet of advice may be wholly unsuitable for your eventual end goal. Also, you may rather want to ask the experts at http://security.stackexchange.com or http://crypto.stackexchange.com. Also, I have more of a general knowledge of cryptography and this is a general programming forum, so take the below with a grain of salt.

Having said that, the usual way to store one piece of information in an encrypted form but make it accessible to multiple parties using different passwords is to use intermediate encryption keys. You have your plaintext. You generate a random key and use that to encrypt the plaintext. You now encrypt the randomly generated key with the user's personal password and store the result.
plaintext  = 'Hello World'
key        = make_random_string(128)
ciphertext = encrypt(plaintext, key)
keys = {
    user1: encrypt(key, user1password),
    user2: encrypt(key, user2password),
    ...
}

To decrypt, you use the user's password to decrypt the key to then decrypt the actual information.
key       = decrypt(keys.user1, user1password)
plaintext = decrypt(ciphertext, key)

print plaintext

This indirection allows you to share the same piece of information among several users. In practice you'd probably use symmetric encryption to encrypt the plaintext with the random key, and asymmetric encryption to encrypt the random key with each user's public key. That means in practice, every time you generate a new random symmetric encryption key, the system needs to create a copy of it individually encrypted with each user's public key that should have access to it.
This also allows you to irretrievably revoke an individual user's access to a specific piece of information, simply by nuking that users version of the random encryption key.
","137","<encryption><encoding><public-key-encryption><decoding><encryption-asymmetric>","0","1","1","2014-10-24 04:58:48","26540276","5","","1778320","","2014-10-24 00:10:44","2014-10-23 19:59:33",""
"43543531","Bouncy Castle NTRU encryption export public key","I got   AsymmetricKeyParameter a = asymmetricCipherKeyPair.getPublic();
I've spent couple of hours on this one and do not know how to turn the public key into a sequence of bytes.  any ideas?
 NTRUEncryptionKeyPairGenerator ntruEncryptionKeyPairGenerator = new NTRUEncryptionKeyPairGenerator();
        long begin = System.currentTimeMillis();
        NTRUEncryptionKeyGenerationParameters ntruEncryptionKeyPairGeneratorParameters = NTRUEncryptionKeyGenerationParameters.EES1087EP2;


        ntruEncryptionKeyPairGenerator.init(ntruEncryptionKeyPairGeneratorParameters);


        AsymmetricCipherKeyPair asymmetricCipherKeyPair = ntruEncryptionKeyPairGenerator.generateKeyPair();

I tried 
AsymmetricKeyParameter a = asymmetricCipherKeyPair.getPublic();
SubjectPublicKeyInfo info = SubjectPublicKeyInfoFactory.createSubjectPublicKeyInfo(a);

but it throws""key parameters not recognised.""
","((NTRUEncryptionPublicKeyParameters)asymmetricCipherKeyPair.getPublic()).getEncoded();

","137","<java><bouncycastle><public-key-encryption>","0","0","1","2017-04-21 14:39:05","","0","","1549596","","2017-04-21 13:50:27","2017-04-21 13:06:27",""
"53881635","How to print SealedObject encrypted data without file I/O?","Below is my code.
when I try to print sealed object it only displays 

""javax.crypto.SealedObject@34dac684""

private void encryptUserCodes(List<UserCode> userCodes) {

        try {
            // generate a secret key using the DES algorithm
            key = KeyGenerator.getInstance(""DES"").generateKey();
            ecipher = Cipher.getInstance(""DES"");
            dcipher = Cipher.getInstance(""DES"");
            // initialize the ciphers with the given key
            ecipher.init(Cipher.ENCRYPT_MODE, key);
            dcipher.init(Cipher.DECRYPT_MODE, key);
            // create a sealed object
            SealedObject sealed = new SealedObject((Serializable) userCodes, ecipher);
            //PRINT SEALED OBJECT HERE
        }
        catch(Exception e){
            e.printStackTrace();
        }
}

","1. Encrypt:
Create Outputstreams and use Base64 Encoder to get the String.
2. Decrypt:
Create a new Cipher, Inputstreams and use Base 64 Decoder to get back your original String.
Fully working example (just copy and paste):
import javax.crypto.SecretKey;
import javax.crypto.KeyGenerator;
import javax.crypto.Cipher;
import javax.crypto.SealedObject;
import java.io.Serializable;

import java.io.ByteArrayOutputStream;
import javax.crypto.CipherOutputStream;
import java.io.ObjectOutputStream;

import java.io.ByteArrayInputStream;
import javax.crypto.CipherInputStream;
import java.io.ObjectInputStream;

import java.util.Base64;

public class MyClass {
    public static void main(String args[]) {
        OtherClass myObject = new OtherClass();
        myObject.print();
    }
}

// you can add other public classes to this editor in any order
class OtherClass
{
public void print() {


 try {
       String userCodes = ""Test123"";
        // generate a secret key using the DES algorithm
        SecretKey key = KeyGenerator.getInstance(""DES"").generateKey();
        Cipher ecipher = Cipher.getInstance(""DES"");
        // initialize the ciphers with the given key
        ecipher.init(Cipher.ENCRYPT_MODE, key);
        // create a sealed object
        SealedObject sealed = new SealedObject((Serializable) userCodes, ecipher);

    ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
    CipherOutputStream cipherOutputStream = new CipherOutputStream(
            outputStream, ecipher);

    ObjectOutputStream oos = new ObjectOutputStream(cipherOutputStream);
    oos.writeObject( sealed );
    cipherOutputStream.close();

    byte[] values = outputStream.toByteArray();

    String base64encoded = Base64.getEncoder().encodeToString(values);
    System.out.println(base64encoded);

    // decrypt
    Cipher fcipher = Cipher.getInstance(""DES"");
    fcipher.init(Cipher.DECRYPT_MODE, key);

    ByteArrayInputStream istream = new ByteArrayInputStream(Base64.getDecoder().decode(base64encoded));
    CipherInputStream cipherInputStream = new CipherInputStream(istream, fcipher);
    ObjectInputStream inputStream = new ObjectInputStream(cipherInputStream);
    SealedObject sealdedObject = (SealedObject) inputStream.readObject();
    System.out.println(sealdedObject.getObject(key));

}
catch(Exception e){
    e.printStackTrace();
}
}
}

","133","<java><encryption><public-key-encryption><password-encryption>","2","1","3","2019-10-04 08:41:20","53881884","8","1","11112788","","2019-10-04 08:41:20","2018-12-21 08:46:48",""
"53881635","How to print SealedObject encrypted data without file I/O?","Below is my code.
when I try to print sealed object it only displays 

""javax.crypto.SealedObject@34dac684""

private void encryptUserCodes(List<UserCode> userCodes) {

        try {
            // generate a secret key using the DES algorithm
            key = KeyGenerator.getInstance(""DES"").generateKey();
            ecipher = Cipher.getInstance(""DES"");
            dcipher = Cipher.getInstance(""DES"");
            // initialize the ciphers with the given key
            ecipher.init(Cipher.ENCRYPT_MODE, key);
            dcipher.init(Cipher.DECRYPT_MODE, key);
            // create a sealed object
            SealedObject sealed = new SealedObject((Serializable) userCodes, ecipher);
            //PRINT SEALED OBJECT HERE
        }
        catch(Exception e){
            e.printStackTrace();
        }
}

","Your sealed object is serializable. Thus you can write it to ObjectOutputStream:
try(ByteArrayOutputStream bos = new ByteArrayOutputStream(); ObjectOutput out = new ObjectOutputStream(bos)) {
    out.writeObject(sealed);
    byte [] bytes =  bos.toByteArray();
    System.out.println(bytes);
} catch (IOException e) {
    e.printStackTrace();
}

To print it more user friendly, you can encode it in base64:
String base64encoded = Base64.getEncoder().encodeToString(bytes);
System.out.println(base64encoded);

","133","<java><encryption><public-key-encryption><password-encryption>","2","1","3","2019-10-04 08:41:20","53881884","8","1","11112788","","2019-10-04 08:41:20","2018-12-21 08:46:48",""
"53881635","How to print SealedObject encrypted data without file I/O?","Below is my code.
when I try to print sealed object it only displays 

""javax.crypto.SealedObject@34dac684""

private void encryptUserCodes(List<UserCode> userCodes) {

        try {
            // generate a secret key using the DES algorithm
            key = KeyGenerator.getInstance(""DES"").generateKey();
            ecipher = Cipher.getInstance(""DES"");
            dcipher = Cipher.getInstance(""DES"");
            // initialize the ciphers with the given key
            ecipher.init(Cipher.ENCRYPT_MODE, key);
            dcipher.init(Cipher.DECRYPT_MODE, key);
            // create a sealed object
            SealedObject sealed = new SealedObject((Serializable) userCodes, ecipher);
            //PRINT SEALED OBJECT HERE
        }
        catch(Exception e){
            e.printStackTrace();
        }
}

","System.out.println will always print value of toString() method. In your case printing Class@hex is default implementation in Object class which gets inherited in all classes in java.
You can create a custom method to print the your object.
Provide method definition with traversing the desire result by calling getter methods  from your object and print them. Concatenation and return is also an option.
","133","<java><encryption><public-key-encryption><password-encryption>","2","2","3","2019-10-04 08:41:20","53881884","8","1","11112788","","2019-10-04 08:41:20","2018-12-21 08:46:48",""
"23224073","How do you generate keys for Authenticode signing?","How does one generate the original public/private keys used for Authenticode signing? I see commans like this in the tutorials:
pvk2pfx.exe -pvk mykey.pvk -pi <password> -spc mycert.spc -pfx mycert.pfx -po <password>

but they don't say how to get the private key in the first place.
","According to a Twitter answer, ""You need to get a Class 3 Code Signing cert from a CA.""
","133","<public-key-encryption><authenticode>","0","0","2","2014-10-15 09:07:51","23225615","0","","","","","2014-04-22 15:40:01",""
"23224073","How do you generate keys for Authenticode signing?","How does one generate the original public/private keys used for Authenticode signing? I see commans like this in the tutorials:
pvk2pfx.exe -pvk mykey.pvk -pi <password> -spc mycert.spc -pfx mycert.pfx -po <password>

but they don't say how to get the private key in the first place.
","For testing you can generate a self sign certificate:
REM May change depending of your installed Windows SDK
cd ""C:\Program Files (x86)\Microsoft SDKs\Windows\v7.1A\Bin""

REM Generate the root certificate
.\makecert.exe -r -pe -n ""CN=Sample.CA"" -ss CA -sr CurrentUser -a sha1 -cy authority -sky signature -sv d:\Sample.CA.pvk d:\Sample.CA.cer

REM Add the Root certificate to the user store
certutil.exe -user -addstore Root d:\Sample.CA.cer

REM Create the certificate for code signing
.\makecert.exe -pe -n ""CN=Sample.CodeSigning"" -eku ""1.3.6.1.5.5.7.3.3,1.3.6.1.4.1.311.10.3.13"" -a sha1 -cy end -sky signature -ic d:\Sample.CA.cer -iv d:\Sample.CA.pvk -sv d:\Sample.CodeSigning.pvk d:\Sample.CodeSigning.cer

REM Convert to certificate to pfx file format
.\pvk2pfx.exe -pvk d:\Sample.CodeSigning.pvk -spc d:\Sample.CodeSigning.cer -pfx d:\Sample.CodeSigning.pfx

","133","<public-key-encryption><authenticode>","0","1","2","2014-10-15 09:07:51","23225615","0","","","","","2014-04-22 15:40:01",""
"48511632","PyCrypto encryption/decryption error client/server and CHIL engine","I have two sides:

one or more clients, running Python 2.7.10, Pycrypto 2.6.1
one server, running the same 
all running on: django 1.11.2, Centos 6.9, OpenSSL 1.0.1e-fips
the server holds an HSM-backed private key and the corresponding public key.
the clients have the public key at their disposal, and use it to encrypt before sending the encrypted data to the server.

Client-side code to encrypt:
from Crypto.Cipher import PKCS1_OAEP
from Crypto.PublicKey import RSA
from Crypto.Hash import SHA256


def encrypt_RSA(public_key_loc, clear_text):
    key = open(public_key_loc, ""r"").read()
    rsakey = RSA.importKey(key)
    cipher = PKCS1_OAEP.new(rsakey, hashAlgo=SHA256)
    encrypted = cipher.encrypt(clear_text)
    return encrypted.encode('base64')

Client-side code to send:
import json
import requests
from .crypt import encrypt_RSA

r = requests.post(
    settings.THE_URL,
    data=json.dumps({
        'text': encrypt_RSA(settings.PUBLIC_KEY, 'clear text'),
    }),
    headers={'content-type': 'application/json'},
    timeout=5
)

This works -- apparently.
When received server-side, the following happens:
engine ""chil"" set.
RSA operation error
140648313706312:error:0407106B:rsa routines:RSA_padding_check_PKCS1_type_2:block type is not 02:rsa_pk1.c:190:
140648313706312:error:04065072:rsa routines:RSA_EAY_PRIVATE_DECRYPT:padding check failed:rsa_eay.c:674:

This is the code handling decryption, after going through a layer of validators such as django REST framework.
def decrypt_RSA_CHIL(private_key_loc, encrypted_text):

    print private_key_loc

    print '######### BEFORE ##########'
    print encrypted_text
    encrypted_text = base64.b64decode(encrypted_text)
    print '######### AFTER ##########'
    print encrypted_text

    # after checking those temp files, they have a proper size of 256 byte
    # so it seems they are indeed padded
    encrypted_text_location = '/tmp/encrypted_' + str(uuid.uuid4())

    print encrypted_text_location

    f = open(encrypted_text_location, 'w')
    f.write(encrypted_text)
    f.close()

    # Running the decryption command
    result = execute(
        [
            '/opt/nfast/bin/preload /usr/bin/openssl rsautl -engine chil -decrypt -inkey '
            + str(private_key_loc) + ' -in ' + encrypted_text_location
        ],
        '/tmp'
    )
    print result

    # removing the file with encrypted data from file system
    os.remove(encrypted_text_location)

    stdout_list = result[1].split(""\n"") if result[1] else []

    print stdout_list

    if result[0] is False and stdout_list and result[2] == u'engine ""chil"" set.\n':
        return stdout_list[0]
    else:
        pass

    return None

The execute method (found somewhere on the Internet a long time ago and has worked fine so far):
import subprocess

def execute(cmd_array, working_dir):

    stdout = ''
    stderr = ''

    try:
        try:
            process = subprocess.Popen(
                cmd_array,
                cwd=working_dir,
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                bufsize=1,
                shell=True,
            )
        except OSError as e:
            return [False, '', 'ERROR : command(' + ' '.join(cmd_array) + ') could not get executed!']

        for line in iter(process.stdout.readline, b''):

            try:
                echo_line = line.decode(""utf-8"")
            except:
                echo_line = str(line)

            stdout += echo_line

        for line in iter(process.stderr.readline, b''):

            try:
                echo_line = line.decode(""utf-8"")
            except:
                echo_line = str(line)

            stderr += echo_line.decode()

    except (KeyboardInterrupt, SystemExit) as err:
        return [False, '', str(err)]

    process.stdout.close()

    return_code = process.wait()
    if return_code != 0 or stderr != '':
        return [False, stdout, stderr]
    else:
        return [True, stdout, stderr]

Now I know the HSM (relatively low-end model) does work:
> sudo /opt/nfast/bin/generatekey embed name=PRIVKEYNAME cardset=Keymanager
# answer a few questions
# private key saved in /tmp/KEY

> sudo openssl rsa -in /tmp/KEY -pubout > /tmp/KEY.pub
# generates the public key

> sudo cat /tmp/clear.txt | openssl rsautl -encrypt -pubin -inkey veeip2.pub > /tmp/encrypted.txt
# ""clear.txt"" contains ""foo""
# ""encrypted.txt"" is always 256 bytes long, which is correct.

> sudo /opt/nfast/bin/preload /usr/bin/openssl rsautl -engine chil -decrypt -inkey /tmp/KEY -in /tmp/encrypted.txt
# engine ""chil"" set.
# ""foo""

There seems to be a loss (or an addition??) somewhere between the client and the server, related to padding. But for the life of me, I have no idea what it could be.
I suspect the way the encryption is done client-side could be the culprit, as when done locally, everything works flawlessly.
Thanks
","","132","<django><python-2.7><encryption><public-key-encryption><pycrypto>","0","","0","2018-01-30 12:34:01","","2","","3240457","","2018-01-30 12:34:01","2018-01-29 23:24:00",""
"34778931","How to use asymmetrical encryption to receive data in javascript?","I understand the concept of asymmetrical encryption in the context of the client wanting to send data securely to the server. The server sends a public key to the client that is used to encrypt the data. The server decrypts the message using it's private key. In this context, everything makes sense, since the private key is only accessible by the server.
But what if the client wants to receive data securely? The same concept could apply in the opposite direction (the front end shares the public key and possess the private key), except the private key would be available to anyone, since the source code in javascript is available in the web browser and it would defeat the purpose of encryption...
Surely there is a solution for this. When searching I have not found a clear answer to my question, although many people mentioned HTTPS. I would also like to know why and how does it work and where my knowledge is flawed.
How does a client securely receive data from a server?
","As you have already mentioned, HTTPS is the solution here.  You have already covered how this works but you are just missing a few key details.
HTTPS use asymmetric encryption to establish the initial encrypted communication.  Subsequent communication is actually performed using symmetric encryption as it is more performant and more secure for a smaller key size.  So the initial hand shake uses the server's public key to exchange a shared secret key that both the server and client will then use for all communication.
Additionally, the public key used by the server is generally signed by a trusted certificate authority whose key your browser already knows.  This allows your web browser to verify the server's public key so that you know that the communication has not been intercepted and altered by an attacker sitting between you and the server.  Otherwise an attacker could just intercept all communication and send you a different public key claiming to be the server's public key, and how would you know the difference?
Once the encrypted channel is established, anything the client sends to the server is encrypted, and likewise, anything the server sends to the client is encrypted.  The encryption guarantees here ensure both confidentiality and integrity of all communication.
So by using HTTPS, the client is securely receiving data from the server, as well as securely sending data to the server, all without embedding any keys directly into the Javascript code.
","132","<javascript><encryption><frontend><public-key-encryption><encryption-asymmetric>","4","6","2","2016-01-13 23:54:06","34778998","0","3","","","","2016-01-13 23:18:33",""
"34778931","How to use asymmetrical encryption to receive data in javascript?","I understand the concept of asymmetrical encryption in the context of the client wanting to send data securely to the server. The server sends a public key to the client that is used to encrypt the data. The server decrypts the message using it's private key. In this context, everything makes sense, since the private key is only accessible by the server.
But what if the client wants to receive data securely? The same concept could apply in the opposite direction (the front end shares the public key and possess the private key), except the private key would be available to anyone, since the source code in javascript is available in the web browser and it would defeat the purpose of encryption...
Surely there is a solution for this. When searching I have not found a clear answer to my question, although many people mentioned HTTPS. I would also like to know why and how does it work and where my knowledge is flawed.
How does a client securely receive data from a server?
","SSL is just another layer of security (at least to some extent). Any CA is not inherently secure. You may want to use PKI along with the usual symmetric algorithms like this (a sample usage), where (depending on the data size - PKI serves to encrypt small data chunks) the public key encrypts preliminarily generated symmetric key (which encrypts some data) on the sender side and the private key on the receiver side decrypts the symmetric key (which on its turn decrypts the data).
","132","<javascript><encryption><frontend><public-key-encryption><encryption-asymmetric>","4","0","2","2016-01-13 23:54:06","34778998","0","3","","","","2016-01-13 23:18:33",""
"44581184","Why does Spring's default OAuth JWT implementation make the JWT verifier public?","Spring's default OAuth JWT flow (using client_credentials grant) is as follows:

Launch the Auth Server (AS)
Launch the Resource Server (RS)


At startup the RS requests the tokenKey by calling GET /oauth/token_key using Basic Auth

The AS returns a PUBLIC KEY using RS256 (SHA256withRSA)
Some time later, the Client requests an accessToken by calling GET /oauth/token using the client_credentials grant
The AS returns a JWT accessToken containing a JWS signature
The Client sends the JWT as a Bearer token to the RS
The RS uses the tokenKey that it received from the AS at startup to verify that the JWT accessToken came from the AS. This is where I get confused...

Is this secure? Why would a public cert be used rather than a shared secret key? Couldn't a hacker easily obtain the public key and sign their own valid JWT accessToken? How does the usage of the public key cert and the JWT signature work together to verify that the sender was actually the Auth Server and not an attacker?
Any insight would help.
","Some research into the nature of public key cryptography and digital signatures gleans this: 
Digital signatures implement asymmetric cryptography. A digital signature gives the receiver reason to believe the message was sent by the claimed sender. Similar to a handwritten signature they are difficult to forge. The signer, in this case, the AS, uses a secret PrivateKey to create the signature. Some non-repudiation schemes offer a time stamp for the digital signature, so that even when the PrivateKey is exposed, the signature is valid.
A digital signature scheme typically consists of 3 algorithms 
1) A key generation algorithm that selects a PrivateKey uniformly at random from a set of possible private keys. The algorithm outputs the private key and a corresponding public key.
2) A signing algorithm that creates a signature using the message and the private key
3) A signature verifying algorithm that, given the message, PublicKey and signature, either accepts or rejects the message's claim to authenticity.
In this case (RS256), the signature was created using SHA256withRSA which is not used as an encryption algorithm, rather it is used to verify the origin or the authenticity of the data.  The signature was generated using a private key. The public key is passed to the Resource server to be used to verify the signature. In this scenario, even if an attacker has the PublicKey, they cannot create a spoof message with the signature or alter the contents. 
","131","<jwt><public-key-encryption><spring-security-oauth2><hmac>","1","0","1","2018-12-10 17:38:04","","0","","1380406","","2017-06-16 08:40:00","2017-06-16 05:03:13",""
"42468131","cryptlib cryptSignCert fails","I'm actually programming and end to end encryped calendar. For this I am using cryptlib. I've more or less copied the code from the manual. But always, when I try to generate a root ca. It fails with error code -2 at cryptSignCert(). (Which means, according to the manual, that there is a problem with the second parameter) Here is a little code to reproduce the problem. 
#include <iostream>
#include <cstring>

#include ""cryptlib.h""

/*Generating a root ca*/
auto genRootCA(const char* commonName,const char* keyLabel,const char* country) -> int
{
    int status;
    CRYPT_CONTEXT cryptContext;

    cryptCreateContext( &cryptContext, CRYPT_UNUSED, CRYPT_ALGO_RSA );
    cryptSetAttributeString( cryptContext, CRYPT_CTXINFO_LABEL, keyLabel, strlen( keyLabel ) );
    cryptGenerateKey( cryptContext );

    CRYPT_CERTIFICATE cryptCertificate;
    cryptCreateCert(&cryptCertificate,CRYPT_UNUSED,CRYPT_CERTTYPE_CERTIFICATE);
    cryptSetAttributeString(cryptCertificate,CRYPT_CERTINFO_COUNTRYNAME,country,strlen(country));
    cryptSetAttributeString(cryptCertificate,CRYPT_CERTINFO_COMMONNAME,commonName,strlen(commonName));

    //Set to self-signed
    cryptSetAttribute(cryptCertificate,CRYPT_CERTINFO_SELFSIGNED,1);
    cryptSetAttribute(cryptCertificate,CRYPT_CERTINFO_CA,1);

    //Sign certificate
    status = cryptSignCert(cryptCertificate,cryptContext); //This is, what is actually not working
    if( cryptStatusError( status ) )
    {
        cryptDestroyContext( cryptContext );
        cryptDestroyCert(cryptCertificate);
        return( status );
    }

    //Save data to disk....(cut out)
}

int main()
{
    cryptInit();
    cryptAddRandom(NULL,CRYPT_RANDOM_FASTPOLL);
    std::cout << ""Generating root ca.\n"";
    int r = genRootCA(""test@example.com"",""Private key"",""DE"");
    std::cout << ""Returned value "" << r << std::endl;
    cryptEnd();
}

Thanks in advance,
David.
","I've finally found a solution for the problem. I've forgotten to add the public key to the certificate. Here is a working example code:
#include <iostream>
#include <cstring>

#include ""cryptlib.h""

/* generating the root ca */
auto genRootCA(const char* commonName,const char* keyLabel, const char* country,const char* path, const char* password) -> int
{
    int status;
    CRYPT_CONTEXT cryptContext;

    cryptCreateContext( &cryptContext, CRYPT_UNUSED, CRYPT_ALGO_RSA );

    cryptSetAttributeString( cryptContext, CRYPT_CTXINFO_LABEL, keyLabel, strlen( keyLabel ) );

    cryptGenerateKey( cryptContext );

    CRYPT_CERTIFICATE cryptCertificate;
    cryptCreateCert(&cryptCertificate,CRYPT_UNUSED,CRYPT_CERTTYPE_CERTIFICATE);

    /* Add the public key */
    status = cryptSetAttribute( cryptCertificate,
    CRYPT_CERTINFO_SUBJECTPUBLICKEYINFO, cryptContext );

    cryptSetAttributeString(cryptCertificate,CRYPT_CERTINFO_COUNTRYNAME,country,strlen(country));

    cryptSetAttributeString(cryptCertificate,CRYPT_CERTINFO_COMMONNAME,commonName,strlen(commonName));

    //Set to self-signed
    cryptSetAttribute(cryptCertificate,CRYPT_CERTINFO_SELFSIGNED,1);
    cryptSetAttribute(cryptCertificate,CRYPT_CERTINFO_CA,1);

    //Sign certificate
    status = cryptSignCert(cryptCertificate,cryptContext); //Works now
    if( cryptStatusError( status ) )
    {
        cryptDestroyContext( cryptContext );
        cryptDestroyCert(cryptCertificate);
        return( status );
    }

    //Saving data to disk (cut out)

    return CRYPT_OK;
}

int main()
{
    cryptInit();
    cryptAddRandom(NULL,CRYPT_RANDOM_FASTPOLL);
    std::cout << ""Generating root ca.\n"";
    int r = genRootCA(""test@example.com"",""Private key"",""DE"",""key.pem"",""abc"");
    std::cout << ""Returned value "" << r << std::endl;
    cryptEnd();
}

I hope this helps others, who have the same problem.
","131","<c++><public-key-encryption><ca><cryptlib>","1","1","1","2017-02-26 13:59:29","","7","","6299714","","2017-02-26 12:21:58","2017-02-26 11:54:12",""
"37575947","Asymmetric on the fly encryption with Nginx","I want to encrypt a big static file on the server with Nginx when it's serving it. I want the encryption to be done with the public key sent in the request as a header and I want this endpoint to be accessible only to specific users (if someone finds the url, he should get access denied if he's not allowed to access the file.) I want Nginx to serve these encrypted files with random access.
First question: Is it possible at all? (for the authorization part I'm all ears to know if there's any solution, my authentication and authorization is done in Django, session keys stored in postgre, but I have no idea if it's feasible to share it with nginx.) Can a lua plugin for nginx read session data from postgre (or redis) and do the authorization checks with good performance?
Second question: How?
One possible solution I though about is using different certificate files (generated with passwords by django) to serve files as https. But I have no idea if it's possible to use different certificate files dynamically generated based on URI or not and I have no idea if nginx can serve files with asymmetric encryption over https or if https protocol supports it at all even if client is a custom client other than normal browsers than can parse data whatever way needed.
Another possible solution is writing a Lua plugin for Nginx but that'd be extremely expensive solution for me considering my resources. But I'd be thankful if someone could tell me if it's possible at all even with a custom plugin or not.
","","131","<encryption><nginx><public-key-encryption><encryption-asymmetric>","0","","0","2016-06-01 18:18:52","","6","","1349278","","2016-06-01 18:18:52","2016-06-01 18:11:49",""
"30949522","How Restful Request Public Key and Private Key Works for each request","I am looking at public key and private key encryption for web request. I came across some API which encrypts data using jQuery with public key which is requested from server and then passed to server for further process.
My question is how to handle such dynamically created public/private key each time. Say for example we are requesting RSA public key from server and encrypt data and pass to server, how server will know which key pair will be used for that request.
I am seeing some examples like http://www.jcryption.org/ in that it requests key and passed to server for decryption, say I have plenty of requests that generate separate key for each request how we can decode on server side.
","","131","<php><jquery><encryption><rsa><public-key-encryption>","0","","0","2015-06-20 02:02:30","","3","1","","","","2015-06-20 02:02:30",""
"53547386","How to run John Ripper attack to p12 password (educative pruposes)?","I want to crack the p12 password to extract the public key using openssl
penssl pkcs12 -in yourP12File.pfx -clcerts -nokeys -out publicCert.pem

After putting this command it ask me the password. I want to know how the john command has to be writed to try to break the password.
","Part of the john distribution/package are many tools (ending with suffix 2john) used to convert the encrypted file to ""john format"". In Your case:
pfx2john yourP12File.pfx  |john /dev/stdin

","130","<security><encryption><openssl><key><public-key-encryption>","0","0","1","2019-09-06 18:10:57","","0","","","","","2018-11-29 20:51:32",""
"12487090","Encrypt file in Rails 3.2","I want to encrypt a binary file with an asymetric key from my filesystem within rails (and then deliver it via email).
Can you recommend me how to do this? is it possible via bcrypt?
Didnt found so much (not outdated) informations about this...
","Ok, i found a solution by myself - i did it with gpg...
First you have to generate/install the public key on the server and copy the private to your local machine.. afterwards you can use following command to encrypt and compress the file(if you have gzip installed):
  # encrypting
  system ""gpg --armor -e -r 'receiverid' -o #{MYFILE_ENC} #{MYFILE} ""

  # compressing
  system ""gzip #{MYFILE_ENC}""

","130","<ruby-on-rails><ruby-on-rails-3><encryption><public-key-encryption><bcrypt>","0","0","1","2012-09-20 15:43:27","12516184","0","","","","","2012-09-19 00:47:22",""
"27877041","AES-RSA-Hybrid - AES BadPaddingException when using on different computers","I'm getting an ""javax.crypto.BadPaddingException: Given final block not properly padded"" when using a client/server program on different computers.
It works, running both client and server on the same computer.
The server is running Debian 7, the computer OS X 10.10.1
Client:
    Socket socket;
    InputStream in = socket.getInputStream();
    OutputStream out = socket.getOutputStream();

    socket.setSoTimeout(10 * 1000);

    System.out.println(""Encrypting..."");

    RSA rsa = new RSA(new File(""public.key""), Cipher.ENCRYPT_MODE);
    AES aes = new AES(Cipher.DECRYPT_MODE);

    byte[] wrappedKey = rsa.wrap(aes.getKey());

    out.write(wrappedKey);

    int length = ByteBuffer.wrap(Utils.readBytes(in, 4)).getInt();

    aes.decrypt(Utils.readBytes(in, length)); // Here is the exception thrown

Server:
    RSA rsa = main.getRSAEncryption();
    SecretKey session = rsa.unwrap(Utils.readBytes(in, 256));

    AES aes = new AES(Cipher.ENCRYPT_MODE, session);
    byte[] data = aes.encrypt(Utils.toByteArray(file));

    out.write(ByteBuffer.allocate(4).putInt(data.length).array());
    out.write(data);
    out.flush();

RSA and AES are own util classes. What they're doing should be clear.
","","130","<java><aes><java-8><public-key-encryption><encryption-symmetric>","0","","0","2015-01-10 14:04:00","","6","0","","","","2015-01-10 14:04:00",""
"8085486","Storing Encryption Key Locally for Disconnected Mode","I need to store an encryption key locally in order to allow a user to use my CouchApp in a disconnected mode. The data that I will be sending is very sensitive and requires encryption by law. However, we would like to offer full access to data when running disconnected. Currently we have a password key generator, but this would require the user to enter their password every time they want to view a record. Also this doesn't seem to be secure as an experienced/advanced user could potentially access the encryption key, and then the Local Database. I'm basically wondering if anybody has experience with the disconnected security model, or if you can offer any pointers on how to allow access while maintaining security.
","If your client is connecting directly to the database then all users have access to the entire data set.  Apparently you trust your users... with everything.  This feature right here breaks the most common data protection models. An attacker doesn't need sql injection or insecure direct object reference,  he can just grab whatever he because you are giving him everything. 
I don't see how cryptography solves your problems.  It looks like a textbook CWE-602 violation.
","130","<security><encryption><public-key-encryption><couchapp>","1","2","1","2011-11-10 23:51:20","8088017","0","","","","","2011-11-10 19:55:36",""
"31801225","Are there any recommended solutions for private key management in AWS?","I'm setting up PayPal integration with my Rails website and currently am using PayPal's stored button solution. That works just fine for the two subscription levels I currently have in place, but in anticipation of negotiated rates for our larger customers, I need to have a more flexible solution that doesn't involve creating a new button for every rate we negotiate--I need a secure way to pass the payment amount to PayPal.
The way to do this seems to be to use PayPal's encrypted buttons, which uses asymmetric key cryptography. This makes me shudder because, as I understand it, I then have to remember to regenerate a new public key every year. I then need to find a secure way to store my private key and make sure that any new instances that I spin up in my AWS ElasticBeanstalk environment will have that private key on hand (without checking it into source control, obviously).
I was thinking that AWS Key Management Service might be a promising solution for key management, but everything I've read thus far suggests that it would not solve the problem I'm facing.
Can anyone offer a best practice for how to manage private keys in AWS and how to make sure I don't get bit by an expired certificate?
","You could use the BMCreateButton API call to create dynamically encrypted buttons on the fly. You wouldn't need to regenerate a new public key every year.  The encrypted buttons would also prevent anyone from modifying the amount passed over. 
","130","<ruby-on-rails><amazon-web-services><paypal><public-key-encryption>","0","1","1","2015-08-04 13:00:17","31810065","0","","","","","2015-08-04 05:20:35",""
"56051834","Signing data in c++ app using CNG and verifying in php api","I read a lot about asymmetric encryption and still can't understand how is the step by step process to achieve what I need.
What I need:

Create 1 Private and 1 Public key only once.
Include the private key in my C++ app without the user being able to read it (ofc everything can be hacked, but you know what I mean, don't let the user see it in plain text).
Distribute the app.
Then my app, when used, will Hash an string.
Encrypt this hash with the included private key.
Send this signed hash to my api using an http request.
Decrypt the signed hash in my api (php) using my Public Key.

What I don't understand:
Using the example here: Signing Data with CNG I don't get how can I create the keys once then store the private one in my c++ app and the public one in my api (php).
What I achieved
I learned to hash and encrypt/decrypt data using bCrypt but I don't understand what steps I have to do to achieve what I wrote before
","You have to change the design. Currently you design has a major security flaw. You got the concepts of the pubkey/prikey correct, but the implementation is incorrect. The private key should be kept private. Currently it is easy to derive the public key, given the private key for a lot of algorithms, but not the other way around. The right design is as follows.

Generate a self-signed certificate. This certificate will contain private and public key
Export the public certificate and embed it as resource/or hardcode it in your application that you are going to distribute
The application will then hash the data to be signed and use the public key from the application resource.
This hashed data is then sent over the http to your server that has the copy of private key.
The server will hash the data and verify the hash with the private key.

All of the above steps are well documented with samples on MSDN. If you need further help, let me know and I can point it to the articles.
The above design will make sure that your private key is never in the wild. If you distribute your private key in your application, it will take literally only few minutes to get your private key.
Storing the public key in the application is just the matter of either hardcoding the key in the application using byte array or putting the certificate in the resource file.
The private key portion of the key pair should never be hardcoded in any application. The private key should be non exportable and be managed by the operating system only. Windows now has keyguard that uses VSM technology that makes it impossible for even the local administrator to know the private key. The admin can only use it for signing and verifying (and exporting the key, if exporting is enabled) but never be able to look at the private key and misuse it.
Regarding step by step process.

Create a self-signed certificate. This will generate a certificate with both public and private key in the pfx file.
Import the self-signed certificate in the certificate store. This can be achived by simply double-clicking on the file and following the directions.
Export the public portion of newly imported certificate from by opening the certificate manager.
You can embed this public exported certificate in your application as a resource.
The application can then load the certificate from the resource and use it to sign the hash.
On the server side, if the certificate with private key is not already imported, follow the step 2 to import it.
Server can then use the Apis to verify the signed data using private key.

","129","<php><c++><winapi><public-key-encryption><cng>","1","0","1","2019-05-17 22:12:28","56191239","4","1","11467293","","2019-05-09 03:49:31","2019-05-09 03:40:14",""
"53947613","RSA public key generated in Java is not valid in php","I'm creating a RSA key pair in Java and want to use it in PHP. Java code is as follows:

public static boolean keyGen() throws NoSuchAlgorithmException, IOException, OperatorCreationException, InvalidKeySpecException {
    KeyPairGenerator kpGen = KeyPairGenerator.getInstance(""RSA"");  
    kpGen.initialize(2048, new SecureRandom());  
    KeyPair keyPair = kpGen.generateKeyPair();  

    PublicKey pub = keyPair.getPublic();
    byte[] pubBytes = pub.getEncoded();
    SubjectPublicKeyInfo spkInfo = SubjectPublicKeyInfo.getInstance(pubBytes);
    ASN1Primitive primitive = spkInfo.parsePublicKey();
    byte[] publicKeyPKCS1 = primitive.getEncoded();
    PemObject pemObject = new PemObject(""RSA PUBLIC KEY"", publicKeyPKCS1);
    StringWriter stringWriter = new StringWriter();
    PemWriter pemWriter = new PemWriter(stringWriter);
    pemWriter.writeObject(pemObject);
    pemWriter.close();
    String pemString = stringWriter.toString();
    FileOutputStream fos2 = new FileOutputStream(""pubk.key"");  
    fos2.write(pemString.getBytes());  
    fos2.flush();  
    fos2.close();
}

The generated public key looks like follow:
-----BEGIN RSA PUBLIC KEY-----
MIIBCgKCAQEAh8cQcRitRdEIzcWDpgDhGTxU4e/4CnFcCi4pEi8Pitme4+9MlVOQ
EtwpiaH54nbxBLZX6m/Z0EETqE9hJm02L8cgvp6/T08atJ9NAayEkN5TFSgdmh3Y
CwGa0ckHlO1lzN3jghUTxLnYEHOvBXVaY1SpDEUlLUi6WKsyklqHK+r6fPa9X1sY
6847VPTQX8ORC13LEzdZrGSR39473HTBhR6SzyTET47AgHPy2Q+FMIvN7DeuX5dK
XtQUlvAjJ7KVQJIXuFEzNvHQfUzjJj+LO2MHX77KbGg6Ytz06CnsWS2f6YKBY3Bg
BQ2zqjE2ON1jDLUcika+2ihEzpfXFGLY9wIDAQAB
-----END RSA PUBLIC KEY-----

And I'm importing the saved key file using PHP as follows:
 $keyString = file_get_contents($filePath);
 openssl_pkey_get_public($keyString);

And when try to encrypt using openssl_public_encrypt  it gives me the error 

openssl_public_encrypt(): key parameter is not a valid public key

However I tried the same with a JavaScript generated key file and it works well. Any help?
","The key evidently needs to be in SubjectPublicKeyInfo format, sometimes referred to as ""X.509"" format -- but not the same thing as an X.509 certificate -- just to add to the general sea of confusion. I got this info not from the documentation but from the user comments below.
Fortunately this takes even fewer lines of Java code to produce, as this little code fragment adapted from your code illustrates:
    PublicKey pub = keyPair.getPublic();
    byte[] pubBytes = pub.getEncoded();
    PemObject pemObject = new PemObject(""PUBLIC KEY"", pubBytes);
    StringWriter stringWriter = new StringWriter();
    PemWriter pemWriter = new PemWriter(stringWriter);
    pemWriter.writeObject(pemObject);
    pemWriter.close();
    System.out.println(stringWriter.toString());

","129","<java><php><bouncycastle><public-key-encryption><php-openssl>","1","1","1","2018-12-28 02:19:27","53952881","8","","8081170","","2018-12-28 02:19:27","2018-12-27 15:52:31",""
"57297239","How to Encrypt Data in Javascript with RSA public key?","Server generates RSA public and private keys and store them in the session. Over a server call the client html page recieves the public key. Now I want to encrypt data using it. I have tried using jsencrypt but it doesn't recognize the public key my server generates. Gives false when I call encrypt after setting the public key. I think the key is 2048 bits. Not sure about the encoding though. How to encrypt data using this key? Any help is appreciated.
Sample public key generated by server: 9995362445e0a98f4da3019f6f3eb960f938056972408675c0b3f642ad5943709f8e8031f00bba6ed24bad1e8e2b099cd154b5eb5b64b310d179b39abb4392442cdb8ad3fe8bc6e3088bd63089d405fb134c633de62b741e4c5bd615b90e096ec3bb16f71ef54825febc5662a96c093db986225825a1cc63d4dc19e2abbbfb1cb9d3a5e41f757ce3f82481a5caf92207ffe4c37e8acc43835dce49cf61a6b113384d333050b6ac59ef78a182bae114b08729e84cbad659eb8bace0481aa51a370daac09f97d779be245ce95af85a285d0ea170da732f9eef2e43a21f5586014ea00259ef09498356eaf2d4e492f0f8978ca167c3f690b35045a8dd1c7ccf4347

Edit: As suggested by many, I tried using crypto:
let crypto;
try {
  crypto = require('crypto');
} catch (err) {
  console.log('crypto support is disabled!');
}
var encryptStringWithRsaPublicKey = function(toEncrypt, publicKey) {
  var buffer = Buffer.from(toEncrypt,'utf8');
  var encrypted = crypto.publicEncrypt(publicKey, buffer);
  return encrypted.toString(""base64"");
};
console.log(encryptStringWithRsaPublicKey('MyText','9995362445e0a98f4da3019f6f3eb960f938056972408675c0b3f642ad5943709f8e8031f00bba6ed24bad1e8e2b099cd154b5eb5b64b310d179b39abb4392442cdb8ad3fe8bc6e3088bd63089d405fb134c633de62b741e4c5bd615b90e096ec3bb16f71ef54825febc5662a96c093db986225825a1cc63d4dc19e2abbbfb1cb9d3a5e41f757ce3f82481a5caf92207ffe4c37e8acc43835dce49cf61a6b113384d333050b6ac59ef78a182bae114b08729e84cbad659eb8bace0481aa51a370daac09f97d779be245ce95af85a285d0ea170da732f9eef2e43a21f5586014ea00259ef09498356eaf2d4e492f0f8978ca167c3f690b35045a8dd1c7ccf4347'));

It is throwing the below error:
Uncaught TypeError: Cannot read property '2' of null
    at push../node_modules/parse-asn1/fixProc.js.module.exports (fixProc.js:19)
    at parseKeys (index.js:27)
    at Object.publicEncrypt (publicEncrypt.js:30)
    at encryptStringWithRsaPublicKey (App.js:20)
    at Module.<anonymous> (App.js:23)
    at Module../src/App.js (App.js:727)
    at __webpack_require__ (bootstrap:781)
    at fn (bootstrap:149)
    at Module../src/index.js (index.css?f3f6:45)
    at __webpack_require__ (bootstrap:781)
    at fn (bootstrap:149)
    at Object.0 (test.css?2a93:45)
    at __webpack_require__ (bootstrap:781)
    at checkDeferredModules (bootstrap:45)
    at Array.webpackJsonpCallback [as push] (bootstrap:32)
    at main.chunk.js:1

","You can use 'crypto' in node:
https://nodejs.org/api/crypto.html
In their official documentation there is news that it encrypt 2048 bits.
","129","<javascript><encryption><rsa><public-key-encryption><cryptojs>","0","1","1","2019-08-01 03:22:04","","3","","10418519","","2019-08-01 03:22:04","2019-07-31 18:52:50",""
"42735451","set Modulus and Exponent from VB.Net to Android/Java","I have this RSA public key which is generated in VB.Net my server.
<RSAKeyValue><Modulus>tv0tzng4pW7erDo2ke/Ku9TGKRukAzx+lihZVblIOE6GWIoiwlILOANeVliZLi1s5qMsXEUA4GV2woC1zFdhJvfFja8Nacl4I3CJ4JYmGqcSZinWKgo3MJdoEqFl9NliF4wTYLow3GYoUh03WxoeArozV1S03drP898b9PdbjPY+ji4jpZHJWnbfg+qWSziF1Q/pSAxpzabeoamz1+ekqlhuxZavQUl+hIhx/quHqy3ybFWcX6yE5NKeY1fzX3L7</Modulus>
<Exponent>AQAB</Exponent>
</RSAKeyValue>

I want to set this value to my android RSA public key but converting with this code doesn't set the key right.
RSAPublicKeySpec spec = new RSAPublicKeySpec(new BigInteger(""tv0tzng4pW7erDo2ke/Ku9TGKRukAzx+lihZVblIOE6GWIoiwlILOANeVliZLi1s5qMsXEUA4GV2woC1zFdhJvfFja8Nacl4I3CJ4JYmGqcSZinWKgo3MJdoEqFl9NliF4wTYLow3GYoUh03WxoeArozV1S03drP898b9PdbjPY+ji4jpZHJWnbfg+qWSziF1Q/pSAxpzabeoamz1+ekqlhuxZavQUl+hIhx/quHqy3ybFWcX6yE5NKeY1fzX3L7"".getBytes())
,new BigInteger(""AQAB"".getBytes()));

EDIT: I tried this code too with no luck.

","First, you have to decode the modulus and the exponent from Base64.
Second, you have to use a different constructor for BigInteger: 
BigInteger(int signum, byte[] magnitude)

with signum as one, because the both values are not in 2-complement notation and are always positive.
","128","<android><vb.net><rsa><public-key-encryption><modulus>","0","1","1","2017-03-13 13:59:45","","7","","3952987","","2017-03-13 13:59:45","2017-03-11 12:54:11",""
"35745558","PowerMod function working for small integers bur not for large ones","Here is the PowerMod function I implemented using ttmath BigInt library:
#include <iostream>
#include <ttmath/ttmath.h>

using namespace std;

template <typename Integer>
Integer iPowerMod(Integer & n,Integer & p,Integer & b)
{
    if (n>b) {n.Div(b,n);}
    Integer iOut=""1"";
    Integer iOutk=n;
    Integer pref=""1"";
    Integer ptemp=p;
    Integer factor=""2"";
    while (ptemp!=0)
    {
         while ((factor*pref)<=ptemp)
        {
            iOutk.Mul(iOutk);
            if (iOutk>b) {iOutk.Div(b,iOutk);}
            pref.Mul(2);
        }
        iOut.Mul(iOutk);
        if (iOut>b) {iOut.Div(b,iOut);}
        iOutk=n;
        ptemp-=pref;
        pref=""1"";
    }
    return iOut;
}

int main()
{
    ttmath::UInt<100> n,p,b;
    n=""52526321452369856214521"";
    p=""731779601467"";
    b=""40420472400259202128651"";
    cout << iPowerMod(n,p,b);
    return 0;
}

This is working for small (4-5 digits) integers, but not for large ones. As I am trying to build an encryption app using the RSA algorithm, I need it to work with large integers. I am using Mathematica 10.2 Kernel for verification. But, I've been unable to find the flaw. It'd be great if anyone could help. :)
","I bet the problem is your frequent use of:
  i.Div(b,i)

Which (if I have read correctly) is supposed to calculate:
  i /= b

and
  i %= b;

At the same time.
That probably works for values that fit in a single 32-bit word, but it's going to go horribly wrong for multi-word values.
I would look for a library with some documentation.
","128","<c++><math><biginteger><public-key-encryption><modular-arithmetic>","-1","0","1","2016-03-02 11:52:20","","16","","5381371","","2016-03-02 11:47:40","2016-03-02 11:11:50",""
"10610313","Using 2 public/private key pairs at the ""same"" time","So I have 2 public/private key pairs (id_rsa and id_rsa.pub - one of them is sitting in a ""key_backup"" folder I made currently), one for GitHub and one for passwordless SSH'ing into a cluster. I looked around Google and could only find guides on how to use two public keys at the same time.. does the same hold for private keys?
How can I maintain authentication w/ GitHub while also being able to maintain passwordless login with my cluster?
Thanks!
-kstruct
","You can use multiple private keys at the same time by making sure that your ssh key agent knows about both keys: ssh-add id_rsa1 id_rsa2 on Mac OS or Linux, or add both to Pageant on Windows.
The other option would be to create separate Host entries in ~/.ssh/config that points each of your two keys at their intended uses.
","127","<ssh><rsa><public-key-encryption>","0","1","1","2012-05-15 23:45:20","10610324","0","","","","","2012-05-15 23:43:00",""
"39125708","How do I get public key info (RSA Bit) using jsrsasign?","I'm using this library jsrsasign. I'd like to know how get this information from certificate.pem

Public Key info: RSA-2048 Bit 

When I open my certificate in console, it shows me this info:

Subject Public Key Info:
  Public Key Algorithm: rsaEncryption
  Public-Key: (2048 bit)

Which class/method from jsrsasign should I use to get this info?
","","126","<rsa><x509certificate><public-key-encryption><pem>","1","","0","2016-08-24 14:23:35","","0","","4551041","","2016-08-24 14:23:35","2016-08-24 14:11:02",""
"35260368","Data encryption algorithm which decrypts the data only once but need a different key to decrypt it again","Is there any encryption algorithm already in which the encrypted data/file can be decrypted with the key only once, but it should re-encrypt the file so that a different key is needed to decrypt the same file again.
","No algorithm can do this.
Your own tools could do this, however...
Any competent attacker is going to

Make a copy of the data
Work with the copy
Prefer to use their own tools, not whatever you provided

If they use your tool, where your own code could, indeed, re-encrypt the data, then they simply make a new copy of the original.
If they use their own tools, then they'd never re-encrypt the data in the first place.
","126","<security><encryption><public-key-encryption><drm>","2","3","2","2016-02-09 08:06:32","35286809","0","","1816580","","2016-02-08 09:58:00","2016-02-07 23:12:41",""
"35260368","Data encryption algorithm which decrypts the data only once but need a different key to decrypt it again","Is there any encryption algorithm already in which the encrypted data/file can be decrypted with the key only once, but it should re-encrypt the file so that a different key is needed to decrypt the same file again.
","Well, not an algorithm per se -- once you have the key, the data is decrypted. But there are techniques to do that, and they typically pivot on one of the following:

software obfuscation (you can Google keywords such as ""software protection""), or
hardware attack countermeasures (look up ""Trusted Execution Environment"" for example), or
both at the same time.

This is for example pretty much what happens when you watch a Netflix movie on your PC which is connected to an HDMI TV: at a very simplified level, what happens is the movie is encrypted with a certain DRM key K1, it gets decrypted with K1 on the PC, and then immediately re-encrypted with a new HDCP key K2 on the way out to the TV (then the TV will decrypt it with the same HDCP key K2). Same story with Miracast and other similar protocols.
","126","<security><encryption><public-key-encryption><drm>","2","1","2","2016-02-09 08:06:32","35286809","0","","1816580","","2016-02-08 09:58:00","2016-02-07 23:12:41",""
"6742725","Encryption Algorithm for PHP & Servelts","We are developing a web application using php/java servlets. i would like to pass encrypted variable from  PHP application to Servlet using $GET[] method and decryption from there. 
Is there any encryption algorithm to use in both languages?
Edited**
How can i Use Mcrypt Algorithm to do this?
Regards
","Yes, use SSL, preferably with client side certificates. 
","126","<php><servlets><encryption><public-key-encryption>","0","1","2","2011-07-19 06:05:16","6742748","0","1","529215","","2011-07-19 06:05:16","2011-07-19 05:41:37",""
"6742725","Encryption Algorithm for PHP & Servelts","We are developing a web application using php/java servlets. i would like to pass encrypted variable from  PHP application to Servlet using $GET[] method and decryption from there. 
Is there any encryption algorithm to use in both languages?
Edited**
How can i Use Mcrypt Algorithm to do this?
Regards
","Any encryption algorithm can be used in any language. For HTTP requests the best option would be to use HTTPS - it will require configuration, rather than coding.
","126","<php><servlets><encryption><public-key-encryption>","0","1","2","2011-07-19 06:05:16","6742748","0","1","529215","","2011-07-19 06:05:16","2011-07-19 05:41:37",""
"17373098","Password as private key for IM","due to all this surveillance on the internet I was planning on writing a complete opensource, cross-platform and fully encrypted chat client including video functionality.
Similar to Skype, but messages and video stream should be fully encrypted and all communication must only occurs between the clients itself and never need to go through any server.
The registration, authentication and online checking, however needs to be done server-side to keep it simple and usable also for beginners.
So to keep it as simple as possible I was gonna go for public/private key encryption.
In order not to store the private key anywhere on the server and also not to carry it to each computer you want to log on, I thought about making password as the private key.
This way you could log on where ever you want and do not have to worry about the key.
If you add a person, you will then automatically send him/her your public key. If he/she accepts, he/she will respond with her/his public key and then you can both chat/video-call.
The problem I am seeing here is:

How can I remain the public key when changing my password (the private key)?
Can I use existing SSL Infrastructure to achieve this, without having to re-implement any encryption standard?

I have already a couple of people willing to help programming (C/C++), but unfortunately none of us is pretty keen on the encryption technology, so I will need to sort those things first. Once I know how to implement the encryption I will publish a diagram and ask for feedback about that.
Thanks in advance.
","First, I think Jitsi roughly is the app your thinking of building. It does encrypted text chat via OTR , and encrypted voice and video chat via ZRTP for key negotiation and SRTP.  In general, cryptographic protocol design is very hard and so if your going to write your own app, you should use these protocols and the libraries that do them. 
To answer your question, you cannot directly derive the key from the password if you want it not to change between passwords. Instead, you store the key on a server encrypted(symmetrically) with a key derived from the password( using say PKBDF2 or scrypt). If the user changes the password, they decrypt the key with their  old password derived key and reencrypt it with their new one.
In general, though, there isn't much of a point in doing this unless your using some webapp type solution where users might log on anywhere. That is actually a very bad idea. See some the the criticism of cryptocat's javascript bassed implementation  e.g. here.
","124","<encryption><chat><public-key-encryption><instant-messaging><videochat>","0","1","1","2013-07-01 14:55:29","","0","","","","","2013-06-28 20:26:06","2014-03-08 15:29:54"
"42609357","How can I Ecrypt using public key generated by jpbc","I am using jpbc(Java pairing based cryptography) to generate public and private keys.  
secret Key=random from Zn (for some n)  
private key=g^secretkey (g is generator)

The generated private key is 520970816610209807017211106072619643342231254982
and public key is 4364377476297398825794257780988969517972762758994254008863941913533830544083793244716093661347745129442432381929639153665437466547480708857597314131003216,6339898572588712728071523268489373098073453182596905335679653151242814037451740962958045848480557497628222698939931012677610106015750048131397924068665707,0  
First Request:My first confusion is that why there are commas in public key? generator g also has comma separated values.
If I have integer m to encrypt, I suppose that it can be encrypted by:  
 encrypted=m^public_key  
 decrypted=m^private_key  

(Correct me if this is wrong (Is mod n required?))
Second Request: How can I encrypt m using those Comma separated public key?
Thanks for help.
","","124","<java><encryption><public-key-encryption><elliptic-curve>","0","","0","2017-03-05 14:09:01","","8","","","","","2017-03-05 14:09:01",""
"34872547","Android: How can i change the public and private key?","I want to create a simple RSA encryption program and I found this tutorial https://sites.google.com/site/androidstem/computinglabware/module-9/2-lav-activity/lab1. I am wondering is it possible for me to pre defined the value of public and private key to maybe 
Public key: Hello
Private key: Goodbye
MainActivity.java
public class MainActivity extends Activity {

/** Called when the activity is first created. */
@Override

public void onCreate(Bundle savedInstanceState) {
    try {
        generateKey();
    } catch (Exception e1) {
        // TODO Auto-generated catch block
        e1.printStackTrace();
    }
    super.onCreate(savedInstanceState);
    setContentView(R.layout.activity_main);
    final Button enButton=(Button)findViewById(R.id.enbutton);
    final Button deButton=(Button)findViewById(R.id.debutton);
    final EditText input=(EditText)findViewById(R.id.input);
    final EditText Raw=(EditText)findViewById(R.id.raw);
    final EditText output=(EditText)findViewById(R.id.originText);
    enButton.setOnClickListener(new OnClickListener()
    {
        public void onClick(View v)
        {
            try {
                Raw.setText(encrypt(input.getText().toString()));
            } catch (Exception e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }

        };
    });
    deButton.setOnClickListener(new OnClickListener()
    {
        public void onClick(View v)
        {
            try {
                output.setText(String.valueOf(decrypt(Raw.getText().toString())));
            } catch (Exception e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }
        }
    });
}

private final static String RSA = ""RSA"";
public static PublicKey uk;
public static PrivateKey rk;

public static void generateKey() throws Exception
{
    KeyPairGenerator gen = KeyPairGenerator.getInstance(RSA);
    gen.initialize(512, new SecureRandom());
    KeyPair keyPair = gen.generateKeyPair();
    uk = keyPair.getPublic();
    rk = keyPair.getPrivate();
}
private static byte[] encrypt(String text, PublicKey pubRSA) throws Exception
{
    Cipher cipher = Cipher.getInstance(RSA);
    cipher.init(Cipher.ENCRYPT_MODE, pubRSA);
    return cipher.doFinal(text.getBytes());
}
public final static String encrypt(String text)
{
    try {
        return byte2hex(encrypt(text, uk));
    }
    catch(Exception e)
    {
        e.printStackTrace();
    }
    return null;
}

public final static String decrypt(String data)
{
    try{
        return new String(decrypt(hex2byte(data.getBytes())));
    }
    catch (Exception e)
    {
        e.printStackTrace();
    }
    return null;
}

private static byte[] decrypt(byte[] src) throws Exception
{
    Cipher cipher = Cipher.getInstance(RSA);
    cipher.init(Cipher.DECRYPT_MODE, rk);
    return cipher.doFinal(src);
}

public static String byte2hex(byte[] b)
{
    String hs = """";
    String stmp = """";
    for (int n = 0; n < b.length; n ++)
    {
        stmp = Integer.toHexString(b[n] & 0xFF);
        if (stmp.length() == 1)
            hs += (""0"" + stmp);
        else
            hs += stmp;
    }
    return hs.toUpperCase();
}

public static byte[] hex2byte(byte[] b)
{
    if ((b.length % 2) != 0)
        throw new IllegalArgumentException(""hello"");

    byte[] b2 = new byte[b.length / 2];

    for (int n = 0; n < b.length; n += 2)
    {
        String item = new String(b, n, 2);
        b2[n/2] = (byte)Integer.parseInt(item, 16);
    }
    return b2;
}
}

","","123","<android><encryption><rsa><public-key-encryption>","0","","0","2016-01-19 09:05:36","","2","1","","","","2016-01-19 09:05:36",""
"44159695","Public key encryption using PKCS","I have looked into many threads to understand about how to create a PKCS encrypted file, but sadly none of the thread worked for me.  
I am working on a requirement where I have to generate a PKCS file (p7 extension) using bounce castle(jdk 8) or any other API if available. If anyone has a working example of generating the PKCS encrypted file that would be great.
","Probably the question wasn't very clear, but I figured out the way to create a PKCS envelop using the bouncy castle API's. I am posting the answer here, it may be helpful to someone.
import org.bouncycastle.cert.jcajce.JcaX509CertificateHolder;
import org.bouncycastle.cms.CMSAlgorithm;
import org.bouncycastle.cms.CMSEnvelopedData;
import org.bouncycastle.cms.CMSEnvelopedDataGenerator;
import org.bouncycastle.cms.CMSProcessableByteArray;
import org.bouncycastle.cms.bc.BcRSAKeyTransRecipientInfoGenerator;
import org.bouncycastle.cms.jcajce.JceCMSContentEncryptorBuilder;
import org.bouncycastle.operator.OutputEncryptor;

// Create the pkcs #7 envelop and add content to it
            CMSEnvelopedDataGenerator fact = new CMSEnvelopedDataGenerator();
            fact.addRecipientInfoGenerator(
                    new BcRSAKeyTransRecipientInfoGenerator(new JcaX509CertificateHolder((X509Certificate) cert)));
            OutputEncryptor encryptor = new JceCMSContentEncryptorBuilder(CMSAlgorithm.DES_EDE3_CBC).setProvider(""BC"")
                    .build();
            CMSProcessableByteArray content = new CMSProcessableByteArray(zipdata);

            CMSEnvelopedData envdata = fact.generate(content, encryptor);
            byte[] enveloped = envdata.getEncoded();

'cert' is the X509 certificate, you can create a self signed certificate or a CA certificate. 'zipdata' is the byte array contents of the zip file and 'enveloped ' is the byte array PKCS envelop which contains the zip data. 
","121","<java><aes><public-key-encryption>","-3","0","1","2017-06-06 07:34:12","","0","","","","","2017-05-24 13:24:09",""
"9957562","openssl phishing : V claims to be A","there are several components of my application, needs their communication secure in the sense Origin Verified. these components cannot share a common secret. So I have to opt for asymmetric key encryption. assuming I've two components A and B A sends some data F to B and B has to verify that it really came from A
A generates digest H of F with its private Key
A attaches A_pub, H to its request Parameters, sends F and declares origin/sender as A 
B verifies the digest H with the A_pub provided against F
apparently it looks Okay But if some other component V does the same with V_pub and claims itself as A, B still thinks the request came from A as this H is made with V_prv openssl verifies Okay.
I want to give protection against this attack of V
I am using ecparam secp112r1 to minimize key length. and keys are repeatedly changed.
-- EDIT --
A, B and V are application components identified by unique URI. Its currently intended to constraint secure page flow. e.g. you can assume A, B, V be urls What I want is Only A can procced to B and only B can proceed to C .... and I don't want to maintain a global/application wide session for that. so If B can just verify the origin of this link based on the special parameters A have passed to it in a state/session-less manner. and the more generic it can be the more reusable it will be to implement in other scenarios too.
Once I thought to maintain a checksums of A_pub in a trusted global storage. however I am afraid wouldn't that be an over engineering ?
another way comes in my mind is to query back the origin url regarding the public key. However I want to avoid that.
","This technique cannot verify the identity of the sender, only that the keys are a matching pair.  
Typically, B would already possess some piece of trusted information that it can use to validate A's identity.  The information is generally a copy of A_pub that it had previously validated, or that has been signed by a trusted third party, in which case B must have access to that third party's public key.
Without this additional information, B cannot verify the identity of A.
","120","<openssl><public-key-encryption><private-key><encryption-asymmetric><digest>","0","0","1","2012-04-01 08:31:10","","2","","256007","","2012-04-01 08:31:10","2012-03-31 16:14:44",""
"56571957","How do I configure GitHub to use SSH correctly?","I was following the instructions by github but got stuck on Step 2.
Step 2:

If you're using macOS Sierra 10.12.2 or later, you will need to modify
  your ~/.ssh/config file to automatically load keys into the ssh-agent
  and store passphrases in your keychain.

I don't have a ~/.ssh/config file.
Should I Create one and put it there?
Why do they assume I have a file that I do not?
From their docs:

Note:
I have already generated a key pair.
","Create a blank config file under this ~/.ssh directory. (~ refers to your HOME directory)
Reference
Based on step 2 from here, add this to the config file,
Host *
  AddKeysToAgent yes
  UseKeychain yes
  IdentityFile ~/.ssh/id_rsa

Update: 
Quoting this from here,

Name
ssh_config - OpenSSH SSH client configuration files
Description
ssh(1) obtains configuration data from the following sources in the following order:

command-line options
user's configuration file (~/.ssh/config)
system-wide configuration file (/etc/ssh/ssh_config)

For each parameter, the first obtained value will be used. The configuration files contain sections separated by ''Host'' specifications, and that section is only applied for hosts that match one of the patterns given in the specification. The matched host name is the one given on the command line.

","119","<git><macos><github><ssh><public-key-encryption>","-1","1","1","2019-06-15 23:30:08","","5","0","","user11623835","2019-06-13 00:52:21","2019-06-13 00:36:03",""
"43756790","distribute private key with application?","I'm building an application and want it to securely transfer data to a server.
Thinking to use public/private keys for initial handshake to encrypt a key with which to encrypt subsequent data.
Is it reasonable to have the private key integrated in the executable which will be distributed out in the wild for anyone to reverse-engineer?
I also thought of using three-pass protocol, but read about some of its weaknesses and it probably won't work for me
","I followed Martin's advice and posted to security exchange (https://security.stackexchange.com/questions/158650/distribute-private-key-with-application).
There I received an answer that I accepted, by user Serverfrog:

Generate the Private/Public Keypair on the client, encrypt this with a
  password (maybe choose from the User itself).
The send the Public Key encrypted via Server Public Key to the Server
  and you have your entire Public/Private Stack.

","117","<security><encryption><public-key-encryption>","0","0","1","2017-05-03 15:16:15","","13","","","","","2017-05-03 09:56:42",""
"34629974","Setting up SFTP Sever for Java client to allow downloads with public key only","I want to setup Secure FTP Server with public and private key cryptography.  A Java program will upload and download files from this server.  Do I need to have two pairs of keys one for upload and one for upload and one for download?
I need to support two operations.

Java client (Private key)  ----------------- Upload File ----------- Server(Public Key) Keys generated on client
Java client(Public Key)-------------------- Download File --------- Server(Private Key) Keys generated on server

Can it be done using the single pair of keys? 
","First, you probably mean SFTP, not Secure FTP (FTPS).

You seem to misunderstand how a public key authentication in FTPS works.
You cannot do anything with the public key only. You always need the private key too. Even for downloads. Any SFTP session is bi-directional. You always need to send something to the server (the SFTP/SSH requests at least), and they need to be encrypted with the private key.

To answer your question: Yes, you need two keypairs. Or rather you need two SFTP/SSH accounts.

To do with the public key only for download, you will need to use plain FTP and use the keypairs for encrypting/decrypting the files only. But that's not SFTP anymore.
","117","<java><sftp><public-key-encryption><ftp-client><openssh>","1","0","2","2016-02-15 18:46:09","","1","","5751538","","2016-01-06 15:45:25","2016-01-06 09:46:35",""
"34629974","Setting up SFTP Sever for Java client to allow downloads with public key only","I want to setup Secure FTP Server with public and private key cryptography.  A Java program will upload and download files from this server.  Do I need to have two pairs of keys one for upload and one for upload and one for download?
I need to support two operations.

Java client (Private key)  ----------------- Upload File ----------- Server(Public Key) Keys generated on client
Java client(Public Key)-------------------- Download File --------- Server(Private Key) Keys generated on server

Can it be done using the single pair of keys? 
","The connection is bidirectional - you can upload and download as much as you like with the single connection.
Having said that, there are two keypairs in the one connection: the client's and the server's. The server presents its public key to the client to validate that you're talking to the correct server. The client public key gets added to the list of authorized keys on the server.
","117","<java><sftp><public-key-encryption><ftp-client><openssh>","1","0","2","2016-02-15 18:46:09","","1","","5751538","","2016-01-06 15:45:25","2016-01-06 09:46:35",""
"12620725","Authentication information in SOA env (Java)","My problem is simple.
I have a service oriented architecture where one of the servers is an auth server.
Users are authenticating with HTTPS in this server and then go to other servers with a token to get services.
My solution idea was this:
The auth server will generate two cookies, one with the actual data of the user (user GUID / session expiration date and privileges)
And another cookie with an encrypted token that includes the actual data (with some salt) encrypted with a private key.
Each server in the system will be able to make sure that the user is how it claims to be with the two cookies and the public key.
I need an example for such a code (or maybe a better solution if I missed anything)
","I don't think you need to reinvent the wheel, you could simply use CAS for this single sign on functionaliy.
","116","<java><public-key-encryption>","-3","0","1","2013-01-17 04:36:20","12620950","2","","878567","","2013-01-17 04:36:20","2012-09-27 11:50:07","2013-01-17 00:25:28"
"13126360","Performing the math behind public key cryptography","I was pretty fascinated by this simple example of the idea behind public key cryptography, and sat down to write my own Client <- Server -> Client example using Java. Just a simple back and forth that encodes messages using the resulting secret.
The problem I initially encountered was a technical one. In the demonstration, the author determines the result of the equation:
3 ^ (24 * 54) mod 17
With a value:
= 1
But my question is, how would one approach the calculation of such a large number in Java?
Or is the example provided simply that: an example, and not the actual method of calculation?
","You need to use BigInteger class to deal with such big numbers. It provides arithmetic operations on big integers.
","116","<java><math><public-key-encryption>","1","0","2","2012-10-29 17:10:35","13126402","2","","","","","2012-10-29 17:07:46",""
"13126360","Performing the math behind public key cryptography","I was pretty fascinated by this simple example of the idea behind public key cryptography, and sat down to write my own Client <- Server -> Client example using Java. Just a simple back and forth that encodes messages using the resulting secret.
The problem I initially encountered was a technical one. In the demonstration, the author determines the result of the equation:
3 ^ (24 * 54) mod 17
With a value:
= 1
But my question is, how would one approach the calculation of such a large number in Java?
Or is the example provided simply that: an example, and not the actual method of calculation?
","There must be a good mathematical reason for it (Daniel Fischer seems to have one). In any case, you can use a BigInteger:
public static void main(String[] args) {
    BigInteger bi = new BigInteger(""3"")
          .modPow(new BigInteger(String.valueOf(24 * 54)), new BigInteger(""17""));
    System.out.println(bi);
}

which outputs 1.
","116","<java><math><public-key-encryption>","1","3","2","2012-10-29 17:10:35","13126402","2","","","","","2012-10-29 17:07:46",""
"46613504","how do devices identify the HDCP compliant version of the monitor?","I wonder how the hdcp compliant devices identify the version of the HDCP like 1.4 or 2.2.
Is it during the key share or after the authentication process.
","","116","<public-key-encryption><hdmi><hdcp>","1","","0","2017-10-06 20:28:35","","0","1","","","","2017-10-06 20:28:35",""
"13426662","Do SSH keys only work from the machine they were generated on","Let's say we are connecting to a server on Rackspace, and generate a public SSH key on my MacBook pro with my username Justin. We then add Justin's public SSH key to the server on Rackspace, and presto we can now connect without a password.
What happens if I take Justin's public SSH key, put it on my iMac, and try to connect to the Rackspace server from this new computer? Will this still work?
If not, what about if I go back to my MacBook Pro, but instead of being logged in as Justin, I am logged in as Mike, and try to use Justin's public SSH key to connect to the Rackspace server from Mike's account. Again what happens?
Basically, do SSH keys only work from the machine and account they were generated on?
","No, they are not tied to a computer.
You should regenerate a new ssh key anyway so you can disable it if your computer gets stolen. It would really suck if you lost your one and only SSH key if you lost your computer.
","116","<ssh><public-key-encryption>","-1","2","1","2012-11-17 01:22:12","13426722","1","","","","","2012-11-17 01:11:40","2012-11-19 15:49:52"
"20159371","How to use public/private keys for short data without a symmetric cipher","I'd like to encrypt and decrypt data with private and public keys, respectively.
The data is between 1 and 32 bytes.
I do not want to use a symmetric cipher for the data - I want to use the keys on the data directly.  (This is not normally done for performance reasons, but my data is very small.)
Is this possible and Where should I start? 
","Maybe keyczar is what you're looking for:
http://www.keyczar.org/
","115","<javascript><python><c><openssl><public-key-encryption>","0","1","2","2013-11-23 08:00:17","20160043","5","","","","","2013-11-23 06:29:35",""
"20159371","How to use public/private keys for short data without a symmetric cipher","I'd like to encrypt and decrypt data with private and public keys, respectively.
The data is between 1 and 32 bytes.
I do not want to use a symmetric cipher for the data - I want to use the keys on the data directly.  (This is not normally done for performance reasons, but my data is very small.)
Is this possible and Where should I start? 
","
I'd like to encrypt and decrypt data with private and public keys

Pretty much anyone who's worked with crypto will tell you that you write crypto at your own risk.  Use the standard libraries, they're made with all the things that (if you are not aware of these techniques) leave your traffic unsecured.  
That said, here's some Python libraries (but you can get this in most languages from PHP to Java or whatever floats your boat):
https://pypi.python.org/pypi/pycrypto
https://www.dlitz.net/software/pycrypto/
Crypto RSA in Python
https://pypi.python.org/pypi/PyECC
You'll see pycrypto because it's popular if you're looking to use RSA.  Another package is PyECC which includes functionality for elliptic curve crypto.  This is important if you're looking to reduce your key size or have less resources to devote to crypto, usually in mobile systems or something small.  The difference in key sizes (link) can get ridiculous as the keys grow (for increased security)
","115","<javascript><python><c><openssl><public-key-encryption>","0","1","2","2013-11-23 08:00:17","20160043","5","","","","","2013-11-23 06:29:35",""
"53868043","What is CKA_VALUE used in AES secret key generation template?","I am trying to integrate safenet HSM with our application. I am writing the program in C. I am referring to the PKCS11 v2.20 cryptoki standard document from RSA labs. I need to generate an AES 256 bit key. While defining the template for key generation I am not sure what value needs to be passed for CKA_VALUE. While generating a DES3 key, I didn't provide this attribute and I was able to generate a key.
I searched for sample programs for CKA_LABEL but failed to find any solid examples in C. I found a couple of Java programs where they have used CKA_VALUE_LEN instead of CKA_VALUE. I am not sure if that will work.
This is the snippet given in the document. Most websites give only this snippet as an example. Nothing is specified for the array value. 
CK_OBJECT_CLASS class = CKO_SECRET_KEY;
CK_KEY_TYPE keyType = CKK_AES;
CK_UTF8CHAR label[] = “An AES secret key object”;
CK_BYTE value[] = {...};
CK_BBOOL true = CK_TRUE;
CK_ATTRIBUTE template[] = {
{CKA_CLASS, &class, sizeof(class)},
{CKA_KEY_TYPE, &keyType, sizeof(keyType)},
{CKA_TOKEN, &true, sizeof(true)},
{CKA_LABEL, label, sizeof(label)-1},
{CKA_ENCRYPT, &true, sizeof(true)},
{CKA_VALUE, value, sizeof(value)}
};

","The CKA_VALUE is the actual value of the key. When you tell the HSM to generate a secret key, it will generate a key for you on the hardware based on the attributes you pass in secret key template, and set the value generated in the CKA_VALUE. This attribute however cannot be read/extracted nor it can be set when generating the key, because the HSM won't allow you to inject a key (directly) from the software nor allow you to extract it from the HSM (directly).
The CKA_VALUE_LEN is the length of the key you can tell the HSM to generate. The AES key can be of length 128, 192 or 256 bits. Depending on the key size you want you would set the CKA_VALUE_LEN as 16, 24 or 32 (key size as bytes).
","115","<c><aes><public-key-encryption><pkcs#11>","0","2","1","2018-12-21 13:51:48","","2","2","2240243","","2018-12-20 12:04:43","2018-12-20 11:44:10",""
"50798206","Server and Client SSL certificates with the same public key","I want to secure the socket communication in a java based application(client and server architecture). I want to achieve this with the help of SSL. 
As per my research I would need a SSL certificate (pair of keys private and public). I have got to know how to generate a certificate using Bouncy Castle library. 
My questions are:

What I assume is that, in the server side the certificate must contain both private and, public key and in the client side the certificate must contain only the public key of the server. Is this correct?
If the above understanding is correct, how should I generate two certificates, one for server using both public and private key 
and the other one for client by only public key. 

can some one give me some directions on this?
","There are several resources online explaining very well how public-key crypto works.  Generally, your server has two resources: a private key and a certificate.  The public key is contained in the certificate. Usually the private key is protected with a password, so your server will also need that.
The certificate is sent to the client upon connection; but the client needs to trust it.  For that to happen, either the certificate needs to be signed by a trusted authority, or you need to explicitly trust that certificate in the client (the latter case is referred to as a self-signed certificate).
Bouncy castle is a library for these kind of things, but you can use anything for creating your keypair.  The most obvious one is keytool, which comes which java. read up on generating your keypair here.
","115","<java><ssl><bouncycastle><public-key-encryption><jce>","1","0","1","2018-06-11 12:57:44","","0","","","","","2018-06-11 12:50:21",""
"50922626","Openssl cipher suite explanation","I want to use the cipher suite, TLS1_TXT_ECDHE_RSA_WITH_AES_256_CBC_SHA, for openssl in fips mode and I wan't to know the details for this. 
Looking at the source code in openssl 1.0.2k, I see it has the parameterss3_lib.c:
  /* Cipher C014 */
{
 1,
 TLS1_TXT_ECDHE_RSA_WITH_AES_256_CBC_SHA,
 TLS1_CK_ECDHE_RSA_WITH_AES_256_CBC_SHA,
 SSL_kEECDH,
 SSL_aRSA,
 SSL_AES256,
 SSL_SHA1,
 SSL_TLSV1,
 SSL_NOT_EXP | SSL_HIGH | SSL_FIPS,
 SSL_HANDSHAKE_MAC_DEFAULT | TLS1_PRF,
 256,
 256,
 },

What I do not understand is that it uses SSL_kEECDH, for key exchange. My question is what eliptic curve it uses and what is the key size ? I plan on using RSA 4096.
EDIT
Looking at openssl source code, in file t1_lib.c, I see the suite B mention, but this is for GCM mode,  so if I use prime256v1 or  secp384r1 for CBC these primes should also be FIPS 140-2 approved ?
if (tls1_suiteb(s)) {
        /*
         * For Suite B ciphersuite determines curve: we already know
         * these are acceptable due to previous checks.
         */
        unsigned long cid = s->s3->tmp.new_cipher->id;
        if (cid == TLS1_CK_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256)
            return NID_X9_62_prime256v1; /* P-256 */
        if (cid == TLS1_CK_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384)
            return NID_secp384r1; /* P-384 */
        /* Should never happen */
        return NID_undef;
    }

","If you are the client, ECDHE_{RSA,ECDSA} key exchange must use the 'curve' chosen by the server, and OpenSSL does so; DHE similarly uses server parameters. (Modified somewhat in draft1.3 protocol expected/planned in version 1.1.1.) If you are the server, OpenSSL has several different ways of choosing the 'curve' depending on code you didn't show us: 

1.0.x supports SSL_{CTX_,}set_tmp_ecdh and SSL_{CTX_,}set_tmp_ecdh_callback which don't have man pages but work equivalently to the _dh versions which do.
1.0.2 adds SSL_{CTX_,}set_ecdh_auto which sets a mode that automatically chooses the 'first' (according to client or server list, using the same option as for ciphersuite preference) curve acceptable to both client and server
1.1.0 makes ecdh_auto the default and no longer supports the tmp_ecdh_callback options, but allows tmp_ecdh to be set with the new text-based and file-based config options as well as direct code.

In SUITEB mode, which is (IIUC) not the same thing as 'FIPS' mode (meaning FIPS-140), but is often required for the same users who are subject to the whole range of FIPS and other NIST 'guidance', the only supported curves are P-256 and/or P-384 depending on the option set.
(Technically what we loosely call a 'curve' for EC cryptography is actually a curve with suitable characteristics, defined by coefficients of an equation over an underlying field, plus a base point aka generator, plus the point order and cofactor. Careful or accurate people, like cryptographers, call this a parameter set or an EC group rather than a curve. OpenSSL implements it as typedef EC_GROUP.) 
TLS represents the public key as a point in X9.62 (and SEC1) uncompressed (usually) or optionally compressed (rare) format, both of which have fixed sizes depending on the size of the underlying field.
","113","<c><openssl><public-key-encryption>","0","2","1","2018-06-19 09:44:29","50924350","0","","1532642","","2018-06-19 09:44:29","2018-06-19 07:18:01",""
"54767185","Is there any encryption mechanism in Angular 6 that will give the same encrypted output everytime?","I am trying to register a customer with his mobile number. I am storing the mobile number as encrypted mobile number and also I am maintaining a session to store this encrypted mobile number. Once I come out of the application and try to log in with the same mobile number, my session goes off. So I am not able to take encrypted mobile number from session.
Is there any way that I can create an encryption mechanism to provide the same encrypted output every time for the same mobile number?
This is the encryption mechanism I am using.
public encrypt_mobile(mobile): Observable<any> {
  var salt = crypto.lib.WordArray.random(128 / 8);
  var key = crypto.PBKDF2(""123"", salt, {
    256: 256 / 32,
    100: 100
  });
  var iv = crypto.lib.WordArray.random(128 / 8);
  var encrypted = crypto.AES.encrypt(mobile, key, {  
    // instead of message try some string or  “9876543210”
    iv: iv,
    padding: crypto.pad.Pkcs7,
    mode: crypto.mode.CBC
  });
  var encrypted_mob = salt.toString() + iv.toString() + 
    encrypted.toString();
  console.log(""encrypted : "", encrypted_mob);
  return encrypted_mob;
}

","You are using CBC mode with random IV. 
mode: crypto.mode.CBC

Actually, that is better because it is probabilistic encryption. But CBC mode prevents comparison on encrypted data.
You should use ECB mode of operation to achieve equality test on encrypted data without decryption.
mode: CryptoJS.mode.ECB

The ECB mode don't use/require an IV. However, keep in mind that ECB mode leaks information, See the penguin from Wikipedia.
","112","<session><encryption><angular6><public-key-encryption>","0","0","1","2019-02-19 15:35:08","","2","","9269043","","2019-02-19 14:24:43","2019-02-19 13:13:20",""
"43844654","Elliptic Curve Cryptography PHP: catchable fatal error argument 1 passed to __construct()","I am trying to use Elliptic Curve Cryptography using Matyas Danter's phpecc libraries available in 1 . However, I am getting the following error when I create the variable Alice , although the passed argument is a Point.. please help..

Catchable fatal error: Argument 1 passed to EcDH::__construct() must be an instance of Point, string given, called in C:\xampp\htdocs\ECC-example.php on line 31 and defined in C:\xampp\htdocs\classes\EcDH.php on line 39

         include 'autoload.inc.php';
         include 'classes/EcDH.php';
         include 'classes/PHPECC.class.php';
         include 'classes/SECurve.class.php';
         $keypair = PHPECC::hex_keypair_genorate();

         $g = NISTcurve::generator_192();
         echo $g;
         $Alice = new EcDH(g);

..........................................
NISTcurve.php has the below function:
         public static function generator_192() {
         // NIST Curve P-192:
        if (extension_loaded('gmp') && USE_EXT == 'GMP') {
        $_p = '6277101735386680763835789423207666416083908700390324961279';
        $_r = '6277101735386680763835789423176059013767194773182842284081';
        $_b = gmp_Utils::gmp_hexdec('0x64210519e59c80e70fa7e9ab72243049feb8deecc146b9b1');
        $_Gx = gmp_Utils::gmp_hexdec('0x188da80eb03090f67cbf20eb43a18800f4ff0afd82ff1012');
        $_Gy = gmp_Utils::gmp_hexdec('0x07192b95ffc8da78631011ed6b24cdd573f977a11e794811');

        $curve_192 = new CurveFp($_p, -3, $_b);
        $generator_192 = new Point($curve_192, $_Gx, $_Gy, $_r);
    } else if (extension_loaded('bcmath') && USE_EXT == 'BCMATH') {
        $_p = '6277101735386680763835789423207666416083908700390324961279';
        $_r = '6277101735386680763835789423176059013767194773182842284081';
        $_b = bcmath_Utils::bchexdec('0x64210519e59c80e70fa7e9ab72243049feb8deecc146b9b1');
        $_Gx = bcmath_Utils::bchexdec('0x188da80eb03090f67cbf20eb43a18800f4ff0afd82ff1012');
        $_Gy = bcmath_Utils::bchexdec('0x07192b95ffc8da78631011ed6b24cdd573f977a11e794811');

        $curve_192 = new CurveFp($_p, -3, $_b);
        $generator_192 = new Point($curve_192, $_Gx, $_Gy, $_r);
    }
    return $generator_192;
}

","The error was in the last line
$Alice = new EcDH(g) -> wrong
$Alice = new EcDH($g) -> correct
A sily mistake that caused a huge error..
","111","<php><encryption><public-key-encryption><elliptic-curve><diffie-hellman>","0","0","1","2017-05-22 08:34:47","","0","","","","","2017-05-08 09:54:28",""
"6020846","Question about public key encryption","Let's say for example, there is a client and a server. They have both exchanged public keys with each other. Now how is public key encryption applied when downloading the data from the server to the client?
","The server encrypts with it's private key and this data can be decrypted with the public key (and vice-versa). The numbers and the algorithm are made like this - they don't need to know each others' private keys.
One of the simpler algorithms is called RSA, you can find more on how it works on Wikipedia. You'll need some maths, but nothing very complicated there.
For performance reasons, public key cryptography is used only for transmitting a normal, symmetric key.
","111","<windows><linux><encryption><public-key-encryption>","-2","3","2","2011-05-17 12:08:59","6020922","1","","463139","","2011-05-17 12:08:59","2011-05-16 17:09:21","2011-05-18 12:14:01"
"6020846","Question about public key encryption","Let's say for example, there is a client and a server. They have both exchanged public keys with each other. Now how is public key encryption applied when downloading the data from the server to the client?
","digital certificates are used in that case which carries users public key in an encrypted form. A server has it's own certificate and a client also has one which are then matched before the downloading starts.
","111","<windows><linux><encryption><public-key-encryption>","-2","1","2","2011-05-17 12:08:59","6020922","1","","463139","","2011-05-17 12:08:59","2011-05-16 17:09:21","2011-05-18 12:14:01"
"52238575","How to check randomness?","I am using BIP39 specifications to generate 12 word mnemonic which will later used to generate Master Public/Private and their 2^32-1 child keys. These children keys will then be used for asymmetric encryption.
 import (
   ""github.com/tyler-smith/go-bip39""
   ""github.com/tyler-smith/go-bip32""
   b64 ""encoding/base64""
 )
 type BipKeys struct {
     Entropy []byte
     Mnemonic string
     Passphrase []byte
     Seed []byte
     MnemonicShares []string
     RootPublicExtendedKey *bip32.Key
     RootPrivateExtendedKey *bip32.Key
     RootPrivateHexKey string
}

func(instance *BipKeys) GenerateEntropy(numberOfBytes int)([]byte, error){
   entropy, err := bip39.NewEntropy(numberOfBytes)
   if err != nil {
     log.Printf(""There is some error generating entropy %s"", err)
}
   return entropy, err
}

func (instance *BipKeys) GenerateMnemonic(entropy []byte) (string, error){
   mnemonic, err := bip39.NewMnemonic(entropy)
   if err != nil {
     log.Printf(""Some error in generating Mnemonic %s"", err)

 }
    return mnemonic, err
 }

func (instance *BipKeys) GeneratePassphrase(saltBytes int, passphraseBytes int) ([]byte, error){
  salt := GenerateRandomSalt(8)
  passphrase := GenerateRandomString(8)
  password, err := GenerateScryptKey(salt, []byte(passphrase))
  return password, err
}

GenerateRandomString and GenerateRandomSalt just generates random string and bytes based on crypto/rand packages. 
My question is, When people say that the keys not generated properly from random functions are susceptible to break, what they actually mean?
How can I check that the bip39.NewEntropy(numberOfBytes) is actually generating the perfect entropy required for Mnemonic?
Is there any way by which I can check if 12 word mnemonic can be generated just by exposing first 5 words (which means the entropy function implementation wasnt correct and is susceptible to attack)?
","
My question is, When people say that the keys not generated properly
  from random functions are susceptible to break, what they actually
  mean?

Bad randomness is attacked in cryptography in two ways:

By exhaustive search of the seed that was used to generate the stream of bits.  A prominent example is the Debian OpenSSH vulnerability.  
By attacking the predictability of random number generators that were not designed to meet cryptographic requirements.  In statistical random number generators, the main requirement is that the data looks random.  In cryptographic random number generators, we require more: given the stream of bits, a very smart person who knows the algorithm cannot figure out what future or previous bits for the random number generator are.  As an example, although the Mersenne Twister has a large internal state, it does not meet the cryptographic requirement.

Your question about measuring entropy is the wrong question.  Measuring entropy is treating it like it is a statistical random number generator, not like a cryptographic random number generator.  You say:

GenerateRandomString and GenerateRandomSalt just generates random string and bytes based on crypto/rand packages.

That's all you need to know -- you should not need to worry about anything else.  As mentioned above, no amount of measuring entropy is going to tell you that your keys are secure.  Instead, you need to be a cryptographic expert to analyse such algorithms.  For a consumer of the randomness, all you can do (short of using another source such as /dev/urandom) is trust that this has been designed well and analysed by cryptographic experts.
","109","<go><encryption><public-key-encryption>","1","4","1","2018-09-08 20:06:42","52238994","1","0","","","","2018-09-08 19:14:28","2018-09-09 18:12:28"
"47711875","crypto.createECDH is not getting added with webpack","I want to use createECDH function provided by crypto module in nodejs. I downloaded all the dependencies. Webpack does not add createECDH function in my resultant javascript files. How to use createECDH function of crypto available in node.
it adds number of functions like createCipher, createDechiper, createDiffihelman, listCiphers, getCiphers etc.
","Possibly you're using old version of crypto lib. According to docs, ECDH class was added in v0.11.14, later than the rest of functions you mentioned.
It would be nice to see your code.
","108","<node.js><webpack><public-key-encryption><secret-key><ecdh>","0","1","1","2017-12-08 10:15:15","47712145","0","","","","","2017-12-08 10:00:17",""
"34045480","Encryption game","I would like to write a series of encrypted questions and answers. Everything is encrypted except the first question. The user of the game must guess the answer to the question, perform some encryption method using a public key, and if the answer they guessed when encrypted is the same as the encrypted answer then they got it right.
Here's the tricky part, when the user gets the right answer, they must also get the private key to decrypt the next question.   Is this possible or am I totally off base? 
Ps I know that keys must be random
","From my point of view 2 comments:

perform some encryption method using a public key, and if the answer they guessed when encrypted is the same as the encrypted answer then they got it right.

When you crypt something with a key (RSA) there are a part that is random so each time that you crypt a message can get a different value, so you have to check if there are in the library that you are going to use (openSSL?) to force this random part. 
You can use a hashing algorithm (MD5, SHA1) that is a common way to achieve your goal

when the user gets the right answer, they must also get the private key to decrypt the next question

I guess that you try that question are not accessible unless you answer the prior question right. So you need to keep a key as secret, so it must be crypted maybe you can use the answer as a key (depending of algorithm that you use to crypt)
","107","<public-key-encryption><private-key>","-1","0","1","2017-03-10 21:43:14","34045854","1","","","","","2015-12-02 14:40:22",""
"11700080","Java tutorial on file exchange: why put the document in a jar before encryption?","I want a user to sign a document using asymetric key.
I read the tut here http://docs.oracle.com/javase/tutorial/security/toolfilex/index.html
I don't understand why the tut requested to put the doc in a jar and afterwards sign the jar. How can I do this at runtime for a user who would upload any document to sign if I need to put it in a jar ? 
Is there any other tut from SUN to do a real digital signature ?
","Your question is answered in the introduction page of the tutorial. You would indeed use an API rather than the JDK tools (which are designed to sign jar files) to do such a thing in an application, at runtime:

You can use the JDK Security API, tools, or a combination to generate
  keys and signatures and to import certificates. You can use these API
  or tool features to securely exchange documents with others. To use
  the tools for document exchange, the document(s) must be placed in a
  JAR (Java ARchive) file, which may be created by the jar tool.

[...]

The Generating and Verifying Signatures shows you how to use the JDK
  Security API to sign documents.

","106","<java><encryption><signature><public-key-encryption>","0","1","1","2012-07-28 10:23:16","11700164","0","","","","","2012-07-28 10:09:28",""
"6644425","passcode for PHP script between PHP and iPad","I am writing a PHP script that responds to GET requests from an iPad, and then makes an appropriate database query, returning a JSON. for example:
http://mydomain.com/index.php?param1=xxx&key=afdS31PsR
is this (key = xxxxxxxxx) a secure way to stop people from accessing my database information? I feel like it would be except it would be hardcoded into the script - so it would never change. 
A better way would be to hash the key value, and compare to the hash in the database of the key word. But even still, unless the iPad sends the key and request over HTTPS, it still seems insecure. Any ideas on how to do it? Perhaps there is a nice way to set up public/private key encryption with a PHP script? I'm very inexperienced with cryptography and authentication, so bear with me. 
","For a really tech savvy user, there's no method of sending the key (unencrypted) that's really safe.
However, sending it as a GET request is generally a bad idea, and hard-coding the value is an even worse idea.
You should definitely set up a database of ""per-user"" hashes and compare the hashed key to the stored hash in the database.  If you must use GET, then so be it, but POST would be the way to go with authentication.
If you're not using HTTPS, then you're really at the mercy of whoever is snooping the data over the air no matter which way you do it, but at least POST would keep it secret from people looking at the URL.
","105","<php><ipad><authentication><encryption><public-key-encryption>","1","4","1","2011-07-10 23:30:00","6644451","2","","","","","2011-07-10 23:24:15",""
"45089192","Read a secret from a PKCS12 file with .NET","According to RSA's docs on the PKCS12 format, it can be used to store 'miscellaneous secrets'.  From the specification:
4.2.5.  The SecretBag Type

   Each of the user's miscellaneous personal secrets is contained in an
   instance of SecretBag, which holds an object identifier-dependent
   value.  Note that a SecretBag contains only one secret.

   SecretBag ::= SEQUENCE {
       secretTypeId   BAG-TYPE.&id ({SecretTypes}),
       secretValue    [0] EXPLICIT BAG-TYPE.&Type ({SecretTypes}
                          {@secretTypeId})
   }

   SecretTypes BAG-TYPE ::= {
       ... -- For future extensions
   }

   Implementers can add values to this set at their own discretion.

I'd like to read such secrets using .NET, but I can't figure out how with X509Certificate2, or even if it's possible. Can it be done?
","","105","<.net><encryption><public-key-encryption><pkcs#12>","2","","0","2017-07-13 19:20:46","","1","1","25758","","2017-07-13 19:20:46","2017-07-13 19:11:19",""
"53582554","Encrypting a file using saved RSA keys in python","I am trying to encrypt an image file using RSA keys that are generated by another script and saved into a .pem file. when i am trying to encrypt the file its showing errors like this 
Traceback (most recent call last):
  File ""rsaencrypt.py"", line 85, in <module>
    main()
  File ""rsaencrypt.py"", line 45, in main
    content = fileObj.read()
  File ""/usr/lib64/python3.7/codecs.py"", line 322, in decode
    (result, consumed) = self._buffer_decode(data, self.errors, final)
UnicodeDecodeError: 'utf-8' codec can't decode byte 0xff in position 0: invalid start byte

I am new to python and file handling so i think the problem is in the way of how i am handling the files both the key files and the inputfile. Looking forward to some suggestion. 
Heres the code of my encryption file:
import time, os, sys

def main():

inputFilename = 'img.jpg'

# BE CAREFUL! If a file with the outputFilename name already exists,

# this program will overwrite that file.

outputFilename = 'encrypted.jpg'

myKey = open(""public_key.pem"",'r')

myMode = 'encrypt' # set to 'encrypt' or 'decrypt'

# If the input file does not exist, then the program terminates early.

if not os.path.exists(inputFilename):

   print('The file %s does not exist. Quitting...' % (inputFilename))

   sys.exit()

# If the output file already exists, give the user a chance to quit.

if os.path.exists(outputFilename):

   print('This will overwrite the file %s. (C)ontinue or (Q)uit?' % (outputFilename))

   response = input('> ')

   if not response.lower().startswith('c'):

        sys.exit()

# Read in the message from the input file

fileObj = open(inputFilename)

content = fileObj.read()

fileObj.close()

print('%sing...' % (myMode.title()))

# Measure how long the encryption/decryption takes.

startTime = time.time()

if myMode == 'encrypt':

    translated = transpositionEncrypt.encryptMessage(myKey, content)

elif myMode == 'decrypt':

    translated = transpositionDecrypt.decryptMessage(myKey, content)

totalTime = round(time.time() - startTime, 2)

print('%sion time: %s seconds' % (myMode.title(), totalTime))

# Write out the translated message to the output file.

outputFileObj = open(outputFilename, 'w')

outputFileObj.write(translated)

outputFileObj.close()

print('Done %sing %s (%s characters).' % (myMode, inputFilename, len(content)))

print('%sed file is %s.' % (myMode.title(), outputFilename))

# If transpositionCipherFile.py is run (instead of imported as a module)

# call the main() function.

if __name__ == '__main__':

   main()

","You need to open the file in binary mode, not text (which is the default).
Turn
fileObj = open(inputFilename)

into
fileObj = open(inputFilename, ""rb"")

and .read() will return bytes (i.e. binary data), not str (i.e. text).
","105","<python><python-3.x><rsa><file-handling><public-key-encryption>","0","1","1","2018-12-02 18:30:10","53582606","0","","","","","2018-12-02 17:01:19",""
"16418534","Securing information from a retail POS system","I have created a back-end/processing/statistics for POS transactions for a retail store chain. The thing is, now it is time to move from alpha to beta, and we need some sort of safety for the incoming data. And this is where I am lost. How do I implement some resemblance of security in this kind of system?
What I have come up with is a simple asymetric key/value pair, that is unique for each POS system, where the server has all of the private keys, and each pos has the public part of this exchange. In addition to this, all of the data exchange is sent via HTTPS.
Does this kind of thing make sense? Or is there a better way to keep the data safe?
P.S. Since there is a need to reconfigure each POS seperately, that is in no way connected to this system, having to do manual work at each POS is not a problem.
","You'd like to accomplish 2 things:
1) Encrypt the traffic so that it is hidden from outsiders (confidentiality).  You can accomplish this quite easily simply by enforcing that SSL is used for traffic between the client(s) and the server.  The server will require an x509 certificate to accomplish this.
2) Ensure that all traffic coming to the server originates from a trusted client/POS (integrity).  You can accomplish this using a couple of different techniques, both of which require an x509 certificate installed on each client (POS) system:
a) Require that all requests to the server be accompanied by client certificates.  In this scenario, the client (POS) has a x509 certificate installed, for which it is able to access its own private key (the server does not, and should not have this private key, it belongs to the client).  The server is configured to require client certificates with each request, it also is configured to validate that the client certificate presented does indeed match one of the POS systems.  So if you add a new POS later, you need to make a change to the server ensuring that it will consider the new POS cert valid.  Here is a description of the protocol for your own enrichment, you shouldn't need to know exactly how it works (because most tools IIS, Apache, etc. will abstract much of this for you) but it does demystify things a bit.  http://publib.boulder.ibm.com/infocenter/tivihelp/v5r1/index.jsp?topic=%2Fcom.ibm.itim.infocenter.doc%2Fcpt%2Fcpt_ic_security_ssl_authent2way.html
OR
b) Require that all requests to the server are digitally signed by trusted clients.  Public key (asymmetric) encryption allows you to sign a message.  Basically it is signed with the client's (POS) private key, and then anyone (including the server) can verify its integrity by validating the signature using the client's public key.  Many tools will actually encrypt and sign the message, which is OK, but if you're already using SSL and performance is a concern, you don't need to encrypt twice.  If security is more important than performance, encrypting twice can't hurt.  Here is some more info on digital signatures:  http://www.cgi.com/files/white-papers/cgi_whpr_35_pki_e.pdf
So you should have a pretty good plan of how to proceed.  Feel free to ask around here when you set out to implement these solutions, as there are a lot of things that usually don't work the first time around and debugging it is often difficult.  I do recommend a tool called Fiddler or WireShark, which can help debug web services to some extent.  Be sure that your client(s) can access their own private keys, and that the certificates of the clients are trusted by the server.  Good luck.
http://fiddler2.com/
","104","<encryption><public-key-encryption>","0","1","1","2013-05-08 13:29:35","16441909","5","","","","","2013-05-07 12:02:14",""
"47378821","How do I use an already given private key as a private key resource in PHP?","I am working on integrating the Walmart API. They require a digital signature with each API call. My code seems to be working up until I have to deal with the private key. Here is my function to generate a digital signature:
//Most of this code is from a Walmart API sample
function _GetWalmartAuthSignature($URL, $RequestMethod, $TimeStamp, $ConsumerId) {
    $WalmartPrivateKey = {given PEM formatted string};
    //Construct the authentication data we need to sign
    $AuthData = $ConsumerId.""\n"";
    $AuthData .= $URL.""\n"";
    $AuthData .= $RequestMethod.""\n"";
    $AuthData .= $TimeStamp.""\n"";

//THIS METHOD IS RETURNING FALSE!!!!
$PrivateKey = openssl_pkey_get_private($WalmartPrivateKey);

//Sign the data using sha256 hash
defined(""OPENSSL_ALGO_SHA256"") ? $Hash = OPENSSL_ALGO_SHA256 : $Hash = ""sha256"";
if (!openssl_sign($AuthData, $Signature, $privKey, $Hash)) {
    return null;
}

//Encode the signature and return
return base64_encode($Signature);

}
The openssl_pkey_get_private() func keeps returning false. So then my openssl_sign() func gives me the error: openssl_sign(): supplied key param cannot be coerced into a private key 
I tried first creating a new key resource, using 
$res = openssl_pkey_new(); 
openssl_pkey_export($res, $privKey);

and then saving my $WalmartPrivateKey to $privKey, but I got the same error. I tried using openssl_get_private_key(), but again- nothing worked.
I only know the very basics of public/private key encryption, and this is my first time using these functions. 
Can anyone help me out? 
","I had a similar issue, and it was because the PEM format was wrong. Make sure you have the correct beginning and ending markers:
""-----BEGIN PRIVATE KEY-----"", ""-----END PRIVATE KEY-----"".
Both markers must have exactly 5 dashes before and after the words, and the words must be all caps.
Good luck!
","104","<php><encryption><public-key-encryption><private-key><php-openssl>","0","0","1","2018-01-21 10:03:38","48365665","0","","","","","2017-11-19 15:56:27",""
"43088599","I want to authenticate api by using public and private key for each user in ruby on rails","I want to know how to implement public private key authentication for API & how to generate the new public private key pair and store them in the database so that at the time of API hit, i can retrieve them for authentication. Please correct me if i am wrong in my suggested approach and please share any example of code, so that i can understand how things are working.
","","103","<ruby-on-rails><ruby><public-key-encryption><api-authorization>","1","","0","2017-03-29 10:23:07","","0","1","","","","2017-03-29 08:45:54",""
"22164538","How to decrypt a string with known key and a IV in java?","I have a string that is encrypted in c#.net which I have to decrypt in java using a key and a IV provided by the client. Used algorithm is AES.
I have tried few things. The key looks something like
key = ""QWEEqweASDreefERTfdf45fefdWERfsdf34fedfdwn5="" //length 44 bytes
iv  =  ""nkfghER24dfdfdf56YUIgH=="" // lenght=24 bytes

When I use this with Cipher class with algorith AES/CBC/PKCS5Padding
passing the above key to Secretkeyspec class it says invalid key lenth 44 bytes
I am not able makeout whats wrong with the key. Tried all suggested solutions for few days nothing works. Can some one help please? Thank you.
","Use java native for C# code.
First write C# code for decrypt the key.
and calling the code in java using native.
for reference 
http://www.codeproject.com/Articles/378826/How-to-wrap-a-Csharp-library-for-use-in-Java
","102","<public-key-encryption><initialization-vector>","2","0","1","2014-03-04 06:41:00","","1","","3377785","","2014-03-04 06:34:51","2014-03-04 06:27:09",""
"26214166","ecc public key initialization and signature check","I'm trying to use Crypto++ to initialize a public key only and use it to verify a signature.
An external chip creates a signature of a message using its private key (K283 aka sect283k1) (invisible for me).The signature has the format of 72 bytes (36 R and 36 S coordinate) concatinated to a single signature messege.
The public key is available as 72 byte X and Y coordinate. When i use the internal key pair creator in crypto++ , the verification works. But if i try to initialize the public key only, the verification fails.
Does anyone know how to properly initialize an ECC public key in crypto++ ?
","","100","<public-key-encryption><public-key>","2","","0","2014-10-06 10:46:12","","0","","785593","","2014-10-06 10:46:12","2014-10-06 10:17:04",""
"33541339","What is Password Encryption bits","What is the ""bits"" meaning in password, for example 16 bit password or 128 bit password?
Can anyone make this clear for me please?
I tried to search on the web but did not fine good explain for this topic.
","If you generate a key for encryption, ""bits"" means the size of the key that should be generated. In a very simplified form, you can think of a key as a secret number. If you use 16 bits to store the key, there are 2^16 = 65536 possible numbers for the key. If you use more bits the range is larger and thus the key is better secured. Using a key that is too small allows to just try out every possible number via a brute-force attack. If you use more bits, the range the secret number is chose from can be large enough that a brute-force attack is not possible any more because it would took years (or even longer) to test all possible numbers. For email encryption via PGP for example, a key size of 2048 bits is recommended nowadays (may people use even 4096 bit keys).
","100","<security><encryption><passwords><public-key-encryption><password-encryption>","0","1","1","2015-11-05 10:29:49","33542202","3","0","4953079","","2015-11-05 10:29:49","2015-11-05 09:52:28",""
"45063390","Not able to convert Azure ad public key string to PublicRSAKey","Background:
I am trying to validate azure ad jwt access token which is in RSA256. I'll be using jjwt or jwt-scala to validate the token. In order to use them, I need to convert the azure public key which is string to RSAPublicKey instance.
Public key:
""-----BEGIN CERTIFICATE-----MIIDBTCCAe2gAwIBAgIQZSAeaqWig4BHC1ksmNNcgjANBgkqhkiG9w0BAQsFADAtMSswKQYDVQQDEyJhY2NvdW50cy5hY2Nlc3Njb250cm9sLndpbmRvd3MubmV0MB4XDTE3MDUwNjAwMDAwMFoXDTE5MDUwNzAwMDAwMFowLTErMCkGA1UEAxMiYWNjb3VudHMuYWNjZXNzY29udHJvbC53aW5kb3dzLm5ldDCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAJL7dVZkeJ8JDTPIzFNMJo9oEkvDc52zrdqWSOmex0E/3rBe1tfRmUe2O9l6NYuc10QzPaNxnkyIwa5698suNUPxGlEOwvm/h5oPeFcuxAWcgYYv5s589HWFrNjCF8EfOjZ4vU5oE1744EzxdmBiaGbeE8HDBXn1vK4owlcjawgQNF7KQ6LjSWr7xtARDF2IoKE4RYy0V0uVN4eAQ3zWRWWUt3cpYjTl34EZ9pO6CE8/If7noj75g0RYd/AHkIMdXBC4SlnNz+boLbba2ksIB+5z9jVILjvZwqx7i+k2filqZkVmasB/o2ChUFbdwg6c8DTOlyS/qB25dcfoCN2GF+cCAwEAAaMhMB8wHQYDVR0OBBYEFGKpXQNrF5IoxS6bL4F92+gxOJlIMA0GCSqGSIb3DQEBCwUAA4IBAQA3HgW5SoHlvvQVxqqi+mtscDZLhNfe13iG/nx8Er5il82b79RVydNs+f9sYxc4T4ctnrZu7x5e7jInJedNdAlrPorBdw+SfvKJsmiNndXugMew1FlcQTQVIFDCbziaJav8rKyMxPfeKkc1aixbajWZkKg6OPmmJn2ceTocbn8PMQy20xNvcWUwgF5FZZIuPqu6feOLJcUIYw+0JFZ265xka30QXpmytcIxajIzpD4PRdCIBuVSqgXacAs4t4+w+OhnosD72yvXck8M4GwX1j+vcuyw0yhDGNMmqsHWP7H3jnJiGDrKhhdVyplzDhTfv2Whbv/dIDn+meLE3yyC5yGL-----END CERTIFICATE-----""

Have also tried removing BEGIN and END certificate.
What I have tried (there are a lot of examples like the one below)
byte[] publicBytes = Base64.decodeBase64(azurePubKey);
X509EncodedKeySpec keySpec = new X509EncodedKeySpec(publicBytes);
KeyFactory keyFactory = KeyFactory.getInstance(""RSA"");
PublicKey pubKey = keyFactory.generatePublic(keySpec); 

But I am getting the following error:
java.security.spec.InvalidKeySpecException: java.security.InvalidKeyException: IOException: ObjectIdentifier() -- data isn't an object ID (tag = -96)
  at sun.security.rsa.RSAKeyFactory.engineGeneratePublic(RSAKeyFactory.java:205)
  at java.security.KeyFactory.generatePublic(KeyFactory.java:334)
  ... 43 elided
Caused by: java.security.InvalidKeyException: IOException: ObjectIdentifier() -- data isn't an object ID (tag = -96)
  at sun.security.x509.X509Key.decode(X509Key.java:398)
  at sun.security.x509.X509Key.decode(X509Key.java:403)
  at sun.security.rsa.RSAPublicKeyImpl.<init>(RSAPublicKeyImpl.java:84)
  at sun.security.rsa.RSAKeyFactory.generatePublic(RSAKeyFactory.java:298)
  at sun.security.rsa.RSAKeyFactory.engineGeneratePublic(RSAKeyFactory.java:201)
  ... 44 more

Is there any way to fix it?
","You don't have an X509EncodedKeySpec, you have an X509 certificate. I don't know scala but here an example in Java showing how to get a Public key out of this:
  public static PublicKey parsePublicKey() throws CertificateException {
        String cert = ""-----BEGIN CERTIFICATE-----MIIDBTCCAe2gAwIBAgIQZSAeaqWig4BHC1ksmNNcgjANBgkqhkiG9w0BAQsFADAtMSswKQYDVQQDEyJhY2NvdW50cy5hY2Nlc3Njb250cm9sLndpbmRvd3MubmV0MB4XDTE3MDUwNjAwMDAwMFoXDTE5MDUwNzAwMDAwMFowLTErMCkGA1UEAxMiYWNjb3VudHMuYWNjZXNzY29udHJvbC53aW5kb3dzLm5ldDCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAJL7dVZkeJ8JDTPIzFNMJo9oEkvDc52zrdqWSOmex0E/3rBe1tfRmUe2O9l6NYuc10QzPaNxnkyIwa5698suNUPxGlEOwvm/h5oPeFcuxAWcgYYv5s589HWFrNjCF8EfOjZ4vU5oE1744EzxdmBiaGbeE8HDBXn1vK4owlcjawgQNF7KQ6LjSWr7xtARDF2IoKE4RYy0V0uVN4eAQ3zWRWWUt3cpYjTl34EZ9pO6CE8/If7noj75g0RYd/AHkIMdXBC4SlnNz+boLbba2ksIB+5z9jVILjvZwqx7i+k2filqZkVmasB/o2ChUFbdwg6c8DTOlyS/qB25dcfoCN2GF+cCAwEAAaMhMB8wHQYDVR0OBBYEFGKpXQNrF5IoxS6bL4F92+gxOJlIMA0GCSqGSIb3DQEBCwUAA4IBAQA3HgW5SoHlvvQVxqqi+mtscDZLhNfe13iG/nx8Er5il82b79RVydNs+f9sYxc4T4ctnrZu7x5e7jInJedNdAlrPorBdw+SfvKJsmiNndXugMew1FlcQTQVIFDCbziaJav8rKyMxPfeKkc1aixbajWZkKg6OPmmJn2ceTocbn8PMQy20xNvcWUwgF5FZZIuPqu6feOLJcUIYw+0JFZ265xka30QXpmytcIxajIzpD4PRdCIBuVSqgXacAs4t4+w+OhnosD72yvXck8M4GwX1j+vcuyw0yhDGNMmqsHWP7H3jnJiGDrKhhdVyplzDhTfv2Whbv/dIDn+meLE3yyC5yGL-----END CERTIFICATE-----"";
        cert = cert.replace(""-----BEGIN CERTIFICATE-----"", """");
        cert = cert.replace(""-----END CERTIFICATE-----"", """");
        byte[] der = Base64.getDecoder().decode(cert);
        CertificateFactory certificateFactory = CertificateFactory.getInstance(""X.509"");
        X509Certificate certificate = (X509Certificate) certificateFactory.generateCertificate(new ByteArrayInputStream(der));
        return certificate.getPublicKey();
    }
}

","100","<scala><azure><rsa><public-key-encryption>","2","0","1","2017-07-12 22:58:21","45064791","0","","","","","2017-07-12 16:43:12",""
"30747216","Storing Encryption Key in Application","I need some string values in my app that I don't want to hard code (one of those in the public key for network communication). So I made a encrypted version using AES algorithm. Now whenever I need the original stringm I need to use my key for decryption, so where should I store this key? It doesn't seem logical to store it as an hard coded string, and I don't want to store my key on the server. What should I do?
","You can use JCA. Use its Password-Based Encryption.
This way you do not have to store your key any where.
Whenever you need to decrypt the data, type your password and you are good to go.
http://docs.oracle.com/javase/7/docs/technotes/guides/security/crypto/CryptoSpec.html#PBEEx
Note: The same salt and iteration count that are used for encryption must be used for decryption.
","100","<android><encryption><public-key-encryption>","1","0","2","2015-06-10 19:58:52","","1","2","2074608","","2015-06-10 05:05:36","2015-06-10 04:38:27",""
"30747216","Storing Encryption Key in Application","I need some string values in my app that I don't want to hard code (one of those in the public key for network communication). So I made a encrypted version using AES algorithm. Now whenever I need the original stringm I need to use my key for decryption, so where should I store this key? It doesn't seem logical to store it as an hard coded string, and I don't want to store my key on the server. What should I do?
","A good way to encrypt and decrypt stuff in your app without hardcoding pwds in the code is using PIN protection screen on the app. Doing this you can derive a final key to encrypt sensitive data and with the same key decrypt everything. Hope this idea will help you to figure out what do you have to do.
","100","<android><encryption><public-key-encryption>","1","0","2","2015-06-10 19:58:52","","1","2","2074608","","2015-06-10 05:05:36","2015-06-10 04:38:27",""
"52924324","decryption error occurring when using rsa in java.","My aim is to take in a message containing a challenge and an origin. On receiving this msg a rsa keypair must be generated which is then used to manipulate the data as shown below. Certain part of the data is encrypted using the generated public key. During authorization, that data must be decrypted with the private key. However, when i try to decrypt it is shows a decryption error. I have even printed different parts of the code just to check if the desired output is achieved which is why i know the private key taken from file is correct. I am unable to solve the decryption error. The specifications for the task require the use of rsa and not hybrid encryption. i have tried padding but that didnt help. please advice on how to solve this problem
package pam;
import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Paths;

import java.security.*;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.PKCS8EncodedKeySpec;
import java.security.spec.X509EncodedKeySpec;

import javax.crypto.BadPaddingException;
import javax.crypto.Cipher;
import javax.crypto.KeyGenerator;
import javax.crypto.SecretKey;
import javax.xml.bind.DatatypeConverter;
import com.sun.jersey.core.util.Base64;

class Test 
{
  public static void kpgen(int numBits, String s) throws Exception
  {
    if(s.length()!=64)
    {
        System.out.println(""invalid entry"");
    }
    else
    {
        KeyPairGenerator keygen = KeyPairGenerator.getInstance(""RSA"");
        KeyPair keyPair = keygen.genKeyPair();
        PrivateKey privateKey = keyPair.getPrivate();
        PublicKey publicKey = keyPair.getPublic();
        System.out.println(""pk: ""+privateKey);
        System.out.println(""pubk: ""+publicKey);

        String fileBase = ""f:\\tempKey"";        //WRITING PVT KEY TO FILE
        try (FileOutputStream out = new FileOutputStream(fileBase + "".key"")) 
        {
            out.write(keyPair.getPrivate().getEncoded());
        }
        try (FileOutputStream out = new FileOutputStream(fileBase + "".pub"")) 
{
            out.write(keyPair.getPublic().getEncoded());
        }

        System.out.println(""Key pair : "" + Base64.encode(String.valueOf(keyPair)));
        MessageDigest md = MessageDigest.getInstance(""SHA-256"");
        byte[] digest = md.digest(keyPair.toString().getBytes(StandardCharsets.UTF_8));
        String sha256 = DatatypeConverter.printHexBinary(digest).toLowerCase();
        System.out.println(""Hash value: ""+sha256);

        String ch = s.substring(0,32);
        String or = s.substring(32,64);
        System.out.println(""Challenge: ""+ch);
        System.out.println(""Origin: ""+or);

        MessageDigest md1 = MessageDigest.getInstance(""SHA-256"");
        byte[] digest1 = md1.digest(privateKey.toString().getBytes(StandardCharsets.UTF_8));
        String sha = DatatypeConverter.printHexBinary(digest1).toLowerCase();
        or = or + sha;
        System.out.println(""String kh: ""+or);

        Cipher cipher = Cipher.getInstance(""RSA"");  
        cipher.init(Cipher.ENCRYPT_MODE, publicKey);
        byte[] keyHandle = cipher.doFinal(or.getBytes());
        System.out.println(""Key Handle: ""+keyHandle);

        String f = ""f:\\keyList.pub"";
        Key pub = getKeyFromFile(f);
        System.out.println(""Attestation Public Key: ""+pub);

        PrivateKey pk = (PrivateKey) getPvtKey(""f:\\keyList.key"");
        Signature rsa = Signature.getInstance(""SHA1withRSA""); 
        rsa.initSign(pk);
        rsa.update(ch.getBytes());
        byte[] sc = rsa.sign();
        System.out.println(""Signed challenge: ""+sc);

        String rm = publicKey.toString() + pub + sc + keyHandle;
        System.out.println(""Response Msg: "" +rm);
    }
}
public static Key getKeyFromFile(String fileName) throws Exception
{
    byte[] bytes = Files.readAllBytes(Paths.get(fileName));
    X509EncodedKeySpec ks = new X509EncodedKeySpec(bytes);
    KeyFactory kf = KeyFactory.getInstance(""RSA"");
    PublicKey pub = kf.generatePublic(ks);
    return pub;
}
public static PrivateKey getPvtKey(String s) throws IOException, NoSuchAlgorithmException, InvalidKeySpecException
{
    byte[] bytes = Files.readAllBytes(Paths.get(s));
    PKCS8EncodedKeySpec ks = new PKCS8EncodedKeySpec(bytes);
    KeyFactory kf = KeyFactory.getInstance(""RSA"");
    PrivateKey pvt = kf.generatePrivate(ks);
    return pvt;
}
public static void auth(String s) throws NoSuchAlgorithmException, Exception, IOException
{   
    String chal = s.substring(0, 32);
    String origin = s.substring(32,64);
    String kh = s.substring(64);
    byte[] kh1 = kh.getBytes();

    PrivateKey pvtKey = getPvtKey(""f:\\tempKey.key""); //READING THE PRIVATE KEY MADE IN KPGEN
    System.out.println(""pk: ""+pvtKey);
    Cipher cipher = Cipher.getInstance(""RSA"");  
    cipher.init(Cipher.DECRYPT_MODE, pvtKey);
    byte[] keyHandle = cipher.doFinal(kh1);

    String or = keyHandle.toString().substring(0, (kh.length()/2));
    String pk = keyHandle.toString().substring(kh.length()/2);

    int c = 0;
    if(or.equals(origin))
    {
        c++;
    }
    else
    {
        System.out.println(""Bad Key Handle: Invalid Origin"");
    }
    if(pk.equals(pvtKey.toString()))
    {
        c++;
    }
    else
    {
        System.out.println(""Bad Key Handle: invalid private key"");
    }
    if(c==2)
    {
        Signature rsa = Signature.getInstance(""SHA1withRSA""); 
        rsa.initSign((PrivateKey) pvtKey);
        rsa.update(chal.getBytes());
        byte[] sc = rsa.sign();
        System.out.println(""Signed Challenge: ""+sc);
    }
    else
        System.out.println(""error"");
}

}
","You have multiple (many) issues in your code with the encryption
First - encode properly your data, String in Java is to represent printable characters. As soon as you work with encryption (working on byte[] level), you need to encode or decode the values.
Example - your code will print the ""keyHandle"", it's a byte array object hash, not really the encrypted data itself
byte[] keyHandle = cipher.doFinal(or.getBytes());
System.out.println(""Key Handle: ""+keyHandle);
...
String rm = publicKey.toString() + pub + sc + keyHandle;

Use at hex or base64 encoding to print out the output. The same applies to the signature.

I am unable to solve the decryption error. 

String kh = s.substring(64);
byte[] kh1 = kh.getBytes();
..  
byte[] keyHandle = cipher.doFinal(kh1);

And you simply assume you can decrypt some random substring? Encrypting using RSA will produce output of size of the key (e.g. 2048 bits) and you have to store and decrypt as whole, not any substring.
As a learning exercise - try to simply encrypt and decrypt, encode, decode to learn the primitives you can (re)use.
","100","<java><encryption><rsa><public-key-encryption>","0","2","1","2018-10-22 09:45:39","","0","","","","","2018-10-22 07:32:18",""
"55095301","Decrypt text encrypted using openSSL in java","If generated RSA keys and encrypted text as below
$ openssl genrsa -out private.pem 1024
$ openssl rsa -in private.pem -out public.pem -outform PEM -pubout
$ echo 'too many secrets' > file.txt
$ openssl rsautl -encrypt -inkey public.pem -pubin -in file.txt -out file.ssl

Now I want to decrypt in in JAVA source code. IS there any way to do it?
","Yes, our code does exactly this.  We encrypt database encryption keys using the openssl tool and then decrypt them in Java using Java's built in Crypto package:
https://docs.oracle.com/javase/7/docs/api/javax/crypto/package-summary.html
I think this S.O. post might give you the information you need:
Java equivalent of an OpenSSL AES CBC encryption
Seems like good stuff here too:
Java decryption of an encrypted file with openssl aes 256 cbc
There should be multiple answers to this question to be had via Google or previous S.O. questions in addition to these.  I think the basic idea is here in these posts.  The trick will be getting everything right for whatever encryption parameters your using to encrypt.  You seem to be using all of the defaults.  We use the -aes-256-cbc option.  If you can control what encryption parameters you can use, finding an answer might be eaiser.
","99","<java><public-key-encryption>","0","0","1","2019-03-13 04:31:25","","0","","6407035","","2019-03-13 04:13:48","2019-03-11 04:38:46",""
"20854827","verify the digitally signed data with public key using RSA in iOS","How to verify the digitally signed data with public key using RSA during decryption at device end. I don't want to use openssl.
Hoping for answer.
","Try looking up using PGP. You can use RSA. Here is a link to read more about it if you did not know already. http://www.gnupg.org
","97","<ios><rsa><public-key-encryption>","0","0","1","2013-12-31 09:50:59","","1","","","","","2013-12-31 09:14:35",""
"32096813","Using PHP-GPG with Wordpress","I'm working on an implementation, which should send every outgoing mail from my Wordpress installation gpg encrypted. 
I built my small plugin with tutorial from Tim Nash, and I used the php-gpg lib from Jason Hinkle. When I send an email from Wordpress 4.3, I get an pgp-encrypted mail, but I can't open it, because WP / my plugin uses the wrong public key. I checked it out, and pasted the right key in my user wp-profile, but ... nothing: wrong key. Have you any ideas?
<?php
/** @package    php-gpg::GPG */

/** seed rand */
list($gpg_usec, $gpg_sec) = explode(' ', microtime());
srand((float) $gpg_sec + ((float) $gpg_usec * 100000));

/**
 * @package    php-gpg::GPG
 */
class GPG_Utility
{

    static function starts_with($haystack, $needle)
    {
        return $needle === """" || strpos($haystack, $needle) === 0;
    }

    static function B0($x) {
        return ($x & 0xff);
    }

    static function B1($x) {
        return (($x >> 0x8) & 0xff);
    }

    static function B2($x) {
        return (($x >> 0x10) & 0xff);
    }

    static function B3($x) {
        return (($x >> 0x18) & 0xff);
    }

    static function zshift($x, $s) {
        $res = $x >> $s;

        $pad = 0;
        for ($i = 0; $i < 32 - $s; $i++) $pad += (1 << $i);

        return $res & $pad;
    }

    static function pack_octets($octets)
    {
        $i = 0;
        $j = 0;
        $len = count($octets);
        $b = array_fill(0, $len / 4, 0);

        if (!$octets || $len % 4) return;

        for ($i = 0, $j = 0; $j < $len; $j += 4) {
            $b[$i++] = $octets[$j] | ($octets[$j + 1] << 0x8) | ($octets[$j + 2] << 0x10) | ($octets[$j + 3] << 0x18);

        }

        return $b;  
    }

    static function unpack_octets($packed)
    {
        $j = 0;
        $i = 0;
        $l = count($packed);
        $r = array_fill(0, $l * 4, 0);

        for ($j = 0; $j < $l; $j++) {
            $r[$i++] = GPG_Utility::B0($packed[$j]);
            $r[$i++] = GPG_Utility::B1($packed[$j]);
            $r[$i++] = GPG_Utility::B2($packed[$j]);
            $r[$i++] = GPG_Utility::B3($packed[$j]);
        }

        return $r;
    }




    static function hex2bin($h)
    {
        if(strlen($h) % 2) $h += ""0"";

        $r = """";
        for($i = 0; $i < strlen($h); $i += 2) {
            $r .= chr(intval($h[$i], 16) * 16 + intval($h[$i + 1], 16));
        }

        return $r;
    }

    static function crc24($data)
    {
        $crc = 0xb704ce;

        for($n = 0; $n < strlen($data); $n++) {
            $crc ^= (ord($data[$n]) & 0xff) << 0x10;
            for($i = 0; $i < 8; $i++) {
                $crc <<= 1;
                if($crc & 0x1000000) $crc ^= 0x1864cfb;
            }       
        }

        return
            chr(($crc >> 0x10) & 0xff) .
            chr(($crc >> 0x8) & 0xff) .
            chr($crc & 0xff);
    }

    static function s_random($len, $textmode)
    {
        $r = """";
        for($i = 0; $i < $len;)
        {
            $t = rand(0, 0xff);
            if($t == 0 && $textmode) continue;
            $i++;

            $r .= chr($t);
        }

        return $r;
    }

    static function c_random() {
        return round(rand(0, 0xff));
    }

}
?>

","","97","<php><wordpress><public-key-encryption><gnupg><pgp>","1","","0","2015-08-22 18:42:18","","3","","5225205","","2015-08-22 18:42:18","2015-08-19 13:24:29",""
"26010267","private/public key ssh-keygen -t rsa","I created a public key with the command ""ssh-keygen -t rsa"" without a passcode, I was going to use this for github but I sent both the public and the private key by mistake....
what are the implications exactly? 
","The implications are that your private key is no longer private, so it can no longer uniquely identify you, so you can now be impersonated.
Throw it away and start again.
","97","<public-key-encryption><private-key><ssh-keygen>","2","2","1","2014-09-24 08:37:00","","0","","","","","2014-09-24 06:43:59",""
"28843696","Breaking RSA given we know minimal solution to discrete log mod N","So I'm trying to figure out the connection between the discrete log problem and RSA. I think this is what the following question is trying to do. 
Suppose you have an oracle which gives you the smallest positive x satisfying
the following congruence:
                                  g^x ≡ k (mod N) 
where N = p*q for some distinct primes p and q, and g and k are any integers.
We also have one more condition that (p -1)/2 and (q -1)/2 are both primes.

What is the quickest way to find p and q? i.e. factor N. 

So I'm completely lost on how to approach the solution to this problem. If somebody can provide me with hints/solution to solve this problem I would be really grateful. Thanks. 
","In g^x = 1, the solution x will always be a divider of (p-1)*(q-1). Choose some different g values, and you will likely find most factors of (p-1)*(q-1). And as (p-1)(q-1) = N - p - q + 1, knowing (p-1)(q-1) and N results in knowing p + q. Knowing N = p*q and p+q is like knowing circumference and area of a rectangle, and can be quickly solved for p and q.
","97","<math><rsa><public-key-encryption><modular-arithmetic>","0","0","1","2015-03-03 23:25:26","28844000","1","","4599713","","2015-03-03 23:13:06","2015-03-03 23:02:22","2015-03-04 10:08:32"
"56227993","How to use a public JWK for ECDH algorithm on iOS 9 and above","I am having problems using a public EC key in JWK format in Objective C with CommonCrypto.
I have a java example of what I can't seem to do in Objective C. This is pulled from the Nimbus Jose JWT library at https://static.javadoc.io/com.nimbusds/nimbus-jose-jwt/2.24/src-html/com/nimbusds/jose/jwk/ECKey.Curve.html
public ECPublicKey toECPublicKey() throws NoSuchAlgorithmException, InvalidKeySpecException {

    ECParameterSpec spec = crv.toECParameterSpec();

    if (spec == null) {
        throw new NoSuchAlgorithmException(""Couldn't get EC parameter spec for curve "" + crv);
    }

    ECPoint w = new ECPoint(x.decodeToBigInteger(), y.decodeToBigInteger());
    ECPublicKeySpec publicKeySpec = new ECPublicKeySpec(w, spec);
    KeyFactory keyFactory = getECKeyFactory();
    return (ECPublicKey)keyFactory.generatePublic(publicKeySpec);
}

I cannot find how to accomplish this in Objective C as CommonCrypto seems to lack JWK support. Does anyone have an idea on how I can get the other party's JWK key into a readable format (.pem, SecKeyRef, or NSData) from the x and y values of the curve?
","","97","<ios><objective-c><encryption><public-key-encryption><jwk>","4","","0","2019-06-10 15:31:55","","1","","11156245","","2019-05-21 16:22:39","2019-05-20 20:49:22",""
"27493406","SSL Certificate Validation for cross server communications","I am writing a python based monitoring agent and a php based service that aggregates all of the agent's data.. I want to be able to securely validate that the server is authorized to talk to the agent.
My thoughts were to exchange SSL certificates between the agent and the server and do some sort of validation with the public/private keys. Much like puppet does/did with agents and puppetmaster.
The agent runs a small python web service on port 8089, and accepts connections from a whitelisted hostname (srv01). This web service receives commands and does various stuff on the ""client"" system in which the agent runs on.
What would be the best way to authenticate and authorize this cross communication from server->agent:8089. Initially I was going to generate a unique sha256 hash and store it both on the agent and server and just do a comparison of this. Is this acceptable, or is there something else I should be looking into?
I would assume a basic flow of getting this process to work would be..

generate a keypair on the server
copy the private key to the agent via ssh or scp
server communicates to the agent via http port 8089, passing along its public key
agent validates the public key against the private key
if the validation is successful, the agent goes and does stuff.

as an FYI, These servers are firewalled off from the rest of the world in an enterprise environment.
","","97","<php><python><security><ssl><public-key-encryption>","0","","0","2014-12-15 21:48:49","","3","","703146","","2014-12-15 21:48:49","2014-12-15 21:25:19",""
"50195765","base58 cannot get 34 chars results (as Bitcoin address does) but 68 chars","I am trying to convert public key hex to Bitcoin address.
From this website http://gobittest.appspot.com/Address, I can do some test.
For example, I have this public key:
04b4d653fcbb4b96000c99343f23b08a44fa306031e0587f9e657ab4a2541129368d7d9bb05cd8afbdf7705a6540d98028236965553f91bf1c5b4f70073f55b55d

According to the website, the address should be:
1DU8Hi1sbHTpEP9vViBEkEw6noeUrgKkJH

which is the base58 encode of 0088C2D2FA846282C870A76CADECBE45C4ACD72BB655DA1216.
However, if I do Base58 encoding directly on 0088C2D2FA846282C870A76CADECBE45C4ACD72BB655DA1216 on this website https://www.browserling.com/tools/base58-encode, I will get:
bSLwwticQjhNvEtqTMZXbn3dLmFrPvNrDGE4hmHsfADpHWb3b2ruh3XqtNzv8ESS8V6V

which is totally different from the 34-char Bitcoin address.
Anyone knows why? 
","","96","<public-key-encryption><bitcoin><public-key><bitcoinj><base58>","0","","0","2018-05-06 02:35:48","","4","","","","","2018-05-06 02:35:48",""
"13022374","How to best encrypt data-at-rest for users logging in with SAML?","I have a web application which allows SAML authentication by users using their own identity provider. I have fields in a database in my application which I want to ensure that only authorized users can decrypt (and developers/administrators of the system are NOT implicitly authorized).  For users logging in with a password this is easy - make an RSA keypair where the private key is encrypted with their login password, and update a keychain if the password ever changes.  But how can this be done when there is no login password, because the user has been authenticated with SAML?
","I hate to tell you this, but I don't consider your secure option (derived key) all that secure either.
The reality is that an admin can do very bad things here...including:

Inject code on the f/e and steal passwords in flight
Steal the data and do a dictionary attack against the db directly, guessing many possible keys to unlock the data (knowing that the password set is relatively small)

IMO just deriving a key from the password isn't enough. You need to raise the bar materially higher if you want to consider it ""best practice."" Ideally you could solve both problems with one solution but if you use password as a source (or derived password hashes) then it might not be possible.
","96","<security><web-applications><public-key-encryption><saml-2.0>","0","0","1","2012-10-23 06:28:03","","0","","","","","2012-10-23 01:31:57",""
"29749087","Is it possible to create a self signed certificate in iOS?","Is it possible to create a self signed certificate in iOS ? And is it possible to extract the public key from public key certificate created on server and store in Keychain?
","You need to use the Apple documented process to generate your certificate.
Extracting keys from the keychain is ok.
","95","<ios><security><rsa><public-key-encryption>","0","0","1","2015-04-20 13:25:52","","1","0","","","","2015-04-20 13:20:54",""
"32724604","Blind signature test fails","In a code below I replicate the whole blind signature procedure: first client picks a message and blinds it, then server signs it, then client unblinds the server's signature and sends it back along with original message, and finally server checks if unblinded signature is valid.  
The problem is that the result is false, unblinded signature does not match the original message and I don't understand why this is so. Can you please point out where I've made a mistake?
import java.math.BigInteger
import java.security.SecureRandom

import org.bouncycastle.crypto.digests.SHA1Digest
import org.bouncycastle.crypto.engines.RSABlindingEngine
import org.bouncycastle.crypto.engines.RSAEngine
import org.bouncycastle.crypto.generators.RSABlindingFactorGenerator
import org.bouncycastle.crypto.generators.RSAKeyPairGenerator
import org.bouncycastle.crypto.params.RSABlindingParameters
import org.bouncycastle.crypto.params.RSAKeyGenerationParameters
import org.bouncycastle.crypto.params.RSAKeyParameters
import org.bouncycastle.crypto.signers.PSSSigner

object ProvinGrounds {
    // Create a key pair for server
    val serverKeyPair = {
        val generator = new RSAKeyPairGenerator
        val bigInteger = new BigInteger(""10001"", 16)
        val params = new RSAKeyGenerationParameters(bigInteger, new SecureRandom, 2048, 80)

        generator.init(params)
        generator.generateKeyPair
    }   

    val public = serverKeyPair.getPublic.asInstanceOf[RSAKeyParameters]
  val message = ""hello there"".getBytes 

  // Generate a blinding factor
  val blindingFactorGenerator = new RSABlindingFactorGenerator
  blindingFactorGenerator.init(public)
  val blindingFactor = blindingFactorGenerator.generateBlindingFactor
  val blindingParams = new RSABlindingParameters(public, blindingFactor)

  // Blind the message and send it to server  
  val blindEngine = new RSABlindingEngine
  blindEngine.init(true, blindingParams)
  val blindedMessage = blindEngine.processBlock(message, 0, message.length)

  // Server signs a blinded message and sends a blind signature to client
  val serverSigner = new PSSSigner(new RSAEngine, new SHA1Digest, 20)
  serverSigner.init(true, serverKeyPair.getPrivate)
  serverSigner.update(blindedMessage, 0, blindedMessage.length)
  val blindedMessageSignature = serverSigner.generateSignature

  // Client unblinds a signature and sends it back to server along with original message
  val unBlindEngine = new RSABlindingEngine
  unBlindEngine.init(false, blindingParams)
  val unblindedMessageSignature = blindEngine.processBlock(blindedMessageSignature, 0, blindedMessageSignature.length)

  // Server checks an original message against an unblinded signature
  val checkSigner = new PSSSigner(new RSAEngine, new SHA1Digest, 20)
  checkSigner.init(false, public)
  checkSigner.update(message, 0, message.length)
  checkSigner.verifySignature(unblindedMessageSignature)  //> res0: Boolean = false, why false?
}

","You may want to read up on using blind signatures. You cannot use PSS after blinding. The blinding property is only maintained if you directly perform modular exponentiation (raw RSA signature) over the result after blinding. This is very well explained in the RSA part of the Wikipedia article about blind signatures.
Furthermore, you should probably feed the hash over your message ""hello there"" instead of the message itself. This is also mentioned in the Wiki article mentioned before.
","95","<scala><digital-signature><public-key-encryption>","1","1","1","2015-09-23 00:21:49","32729120","0","1","","","","2015-09-22 18:47:14",""
"58098853","RSA decryption in Python how i can get a bytes array?","I am trying to use RSA with Python.
I do encryption from .net with the public key generated in Python. Everything going fine for encryption.
When i decrypt my crypted sentence i am not able to bring back to the right value.
How can i convert back my value to a bytes array ? I am sure i am close ... but did not find nothing
I encrypt this bytes array with my public key, but when i decrypt i am not able to get it back
 [0]    3   byte
 [1]    180 byte
 [2]    214 byte
 [3]    196 byte
 [4]    37  byte
 [5]    120 byte
 [6]    213 byte
 [7]    71  byte
 [8]    143 byte
 [9]    64  byte
 [10]   168 byte
 [11]   245 byte
 [12]   172 byte
 [13]   178 byte
 [14]   120 byte
 [15]   114 byte

The public key i used is :
-----BEGIN PUBLIC KEY-----
MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAwsfuJS3TFA5KmzBiFdpS
jl4gBG/oiQcd8JhB2hS2xi/3d/HnyQwzVFbnIuRFWxCSPbbO0M0IC2bE8g0ekWDj
b3YsW7POjVpz6xl/VfcTECIDq0/yGDj5O/FYWx8BGtaPTiTNHq7a5DUUANreYHuB
vzEYyr5lLzsSmZ9pG1BikR0dU5p01g64zJDNtYv6iHvIRseP/2T+Jv44XBLA0eBz
m7Q84dCIX/W8LjV6a6bp4kxBUJ4LYjG2BDslx7ZQMHz7gRFhauNQhyTGXTSLULY+
Q+fhUYhoL+RZjddlO/bn7fG1Evc6TiQi165/ZtfQuCJhkuet4q+Q5jUdUiLTUAfj
gwIDAQAB
-----END PUBLIC KEY-----

My private key is :
-----BEGIN RSA PRIVATE KEY-----
MIIEowIBAAKCAQEAwsfuJS3TFA5KmzBiFdpSjl4gBG/oiQcd8JhB2hS2xi/3d/Hn
yQwzVFbnIuRFWxCSPbbO0M0IC2bE8g0ekWDjb3YsW7POjVpz6xl/VfcTECIDq0/y
GDj5O/FYWx8BGtaPTiTNHq7a5DUUANreYHuBvzEYyr5lLzsSmZ9pG1BikR0dU5p0
1g64zJDNtYv6iHvIRseP/2T+Jv44XBLA0eBzm7Q84dCIX/W8LjV6a6bp4kxBUJ4L
YjG2BDslx7ZQMHz7gRFhauNQhyTGXTSLULY+Q+fhUYhoL+RZjddlO/bn7fG1Evc6
TiQi165/ZtfQuCJhkuet4q+Q5jUdUiLTUAfjgwIDAQABAoIBAA5hwsS+AHLfp0SU
KvngF+5pJsYNGUdc3ioQo/QdSW2Sxxv1IZ8npnaYwBJEdpaFv7aM0/J44RouaWZR
76reU4y8VgQjX6HyRtLaHBvV1XOAf3LbwU1mj4iMhnCb9nHr28LyVq7oTENDZAm4
H2lSVT8vudvmeQQmwXXUXmdk5RI/yhl51yODc79E/LyQMSiItWQERdw0Tow29J/i
0/EDfTN7JmZHs5VQazBHwTUgWiJvdSL4zONCcXrAf2rDHZh7sjEftAWBd6ZJCb4H
IiKxHdDkI7gSjWOgYaepK+wL33kE7CfEHu4Iz869riCy9arIBse13GnDL/3ueDfL
sXQjGTkCgYEA2kLf6SD6fDUZa+RId2sRhA084jQgSo5Q1+is09svxd0KLHyMewPL
sfDZvsdHtqMuJnFDoFQhrcI68S0p4aUTS7qQfxFrvkOG0znnTic+/PHbELwhyIQR
KmF06iYsVMwAmYf805ntMvStTuloznBBOV62Vt39QlO6h8o2k4w4s38CgYEA5HW5
gg9oLkUA+9fhZBM2NqSi3L9AHLAjyIUz41f09zq0VWlwmqoXSRreReKcFAtz1M43
Pqpthsrqjxua2wSZbDon8hqJ+To3eWdKDloElh/Y1M3+RgsQOFLNQxoI0I8qqEhb
p2WPjwtKktFH8l7bGKoHHcvzwvQdQSLGrKY1Af0CgYEAumZWl+EES0OF/HCvut0D
zoUHtB/UXBgCzwH1Z9FPkWnfIHMV/pEVS1hofdfvVPkzlr0whiKTyLOSZxqtI/o4
6nngocSdAZbl9EsFUeeOkbNz5WzmZTr09f7ZPIdxYNIAyR4sPAK/Yr83q6cHTRbt
fTN4AeQAQL8FFKcLySL94b0CgYAow9DcIj+mse1hAr5XCw6LZYkh9oZMGCnqZ8pA
cLtnOfRfoTbUgjExfDfZJHxRH1IF0N4Osn5kpOSBsJ1LI2D07NOf4Zho/jhT01hl
gy56UyhvoGoUuXildDDoHkcgX8tux6qDDh41mgAufmVmHALgPcaTTIcsbD6kFr54
pBelSQKBgFXQSjj0XGHgDbe0ZRAcFgSuiKarnU2Ddms0Jc2eP+KnPFV+vPDOA8L0
Oo3RN9A8J9nUfbeiy/u/Vm8DcvdHxFIBPITcXTGDEz6ikI258QSCNFUaHwVICws7
598VcG9BkuTt0PJXQaTR1aWBBEBAhQ+iIig093Cb6ZZ/7pYz7WCj
-----END RSA PRIVATE KEY-----

The output i received is : 
b""\x02-qf\xcc\xf8\x1c\xdc_bV\xa7\x84o\xc7K2k\xe6\xf0\xd4\x8e\x96\xef9\xbb\xe7%j\xa4h\xd5\xcd\xc1c\x0b\t\x98\x9d\xde\xd9\xe7\xe0druq\x90\xfc\xa5O\xd5\xd4\xb6\xec>\xbb($\x02u^\xb8\xe0\xd2W\x8bzL\x1f\xc0\x05\x1c\xf1\xea7\x99\x06\xd0\xa7ov\xa8A\xc3\x0b\x03\xf9\x1a\xac\x92Gn\xa7\xf0\x93v\xd0\xda\x89)G8\xc2e\xd4\xf5\te\x97\xcf a\x9e\xb5\xeei\xc4\xfci\xcd=/\xd3\xa5\x1fE\x0e\xcf\xaeD\x9fHA\x930\xa9EV\xee\x83\x17f\xe9\xc1\xb4\xc7s\xef%F\xb6!\xb4j\x14\xd4\xf1K\xa3r\x90\xbfI\xfd;\xca>zUcR\x16m\x82\x81iz\xb4C\xed\x1e\xdc\xa9\xfc\x0f\x87\xd7-\xde\x9f(l\x042^e\x84\x15\xb2k\x08\x82@\xd3m\x7f\x95\xabvM\xe6\x88\xb2;_\x0f'\xae\xdbvp\x83\xd6\xba\xc0F\x16\x87\xf1\xf0Y\x1fF~L\x18\x1d\x00\x03\xb4\xd6\xc4%x\xd5G\x8f@\xa8\xf5\xac\xb2xr""

There is my code
I get a CryptoHelper.py
from Crypto.PublicKey import RSA
from Crypto.Cipher import PKCS1_OAEP
from Crypto.Util import number

import base64

class CryptoHelper:
    PrivateKeySize = 2048 
    def CreateRSA_CSP(self):       
        csp = RSA.generate(self.PrivateKeySize)           
        return csp
    def GetRSA_PublicKey(self, csp):
        return str(csp.publickey().exportKey(format='PEM'),""utf-8"")
    def RSAEncrypt(self,publicKEY,byteArray):
        csp =  RSA.importKey(publicKEY);
        encrypted = csp.encrypt(byteArray)
        return base64.standard_b64encode(encrypted)
    def RSADecrypt(self,csp, byteArray):
        return csp.decrypt(byteArray)

That is my HandShakeHelper.py
import json
import requests
import base64
import uuid
from Helpers import CryptoHelper

class HandShakeHelper:
    CSP = None
    CryptoHelper = None

    def __init__(self,serial,endPoint):
        self.Serial = serial
        self.EndPoint = endPoint    
    def GenerateHandShakeKey(self):        
        self.CryptoHelper = CryptoHelper.CryptoHelper()
        self.CSP = self.CryptoHelper.CreateRSA_CSP()
        self.InitializeHandShake()
    def InitializeHandShake(self):
        print(str(self.CSP.exportKey(format='PEM'),""utf-8""))
        print(self.CryptoHelper.GetRSA_PublicKey(self.CSP))
        headers = { ""Content-Type"" : ""application/json"" }
        args = '{ args : { ""Publickey"" : ""' + self.CryptoHelper.GetRSA_PublicKey(self.CSP) + '"", ""Serial"" : ""' + self.Serial + '"" }}'
        answer = requests.post(url = self.EndPoint +""/InitializeHandShake"", headers=headers, data = args)
        se_answer_raw = json.loads(answer.text)
        se_answer = se_answer_raw[""d""]
        if(se_answer[""Status""]==200):           
            cryptedBase64HandShakeId = base64.standard_b64decode(se_answer[""CryptedHandShakeID""])  

            decryptedBytes = self.CSP.decrypt(cryptedBase64HandShakeId)
            print(decryptedBytes)

The handshakehelper call a webservice. Send the public key to the server, and the server return encrypted with the public key a CryptedToken that I try to decrypt.
That is my Test.py
from Helpers import HandShakeHelper, CryptoHelper 



handShake = HandShakeHelper.HandShakeHelper(""8047771c-b1b0-408d-91ad-eacbc03ae6ca"",""http://www.localhost.com/webservice.asmx"")
handShake.GenerateHandShakeKey()

The .net part is this
CryptoHelper.EncryptRSAContent(clientPublicKey, MyGuid.ToByteArray(), false)

public static byte[] EncryptRSAContent(string publicKey, byte[] content, bool fOAEP)
    {
      byte[] cryptedData = null;
      using (RSACryptoServiceProvider RSA = new RSACryptoServiceProvider())
      {
        if (publicKey.StartsWith(""<RSAKeyValue>""))
        {
          RSA.FromXmlString(publicKey);
        }
        else
        {

          PEMCrypto.ImportPublicKey(publicKey, RSA);
        }

        cryptedData = RSA.Encrypt(content, fOAEP);
      }
      return cryptedData;
    }

","Thanks to @t.m.adaam it's working fine
I correct my CryptoHelper.py with that version
from Crypto.PublicKey import RSA
from Crypto.Cipher import PKCS1_v1_5
from Crypto.Util import number
from Crypto import Random

import base64

class CryptoHelper:
    PrivateKeySize = 2048     
    def CreateRSA_CSP(self):       
        csp = RSA.generate(self.PrivateKeySize)
        return csp
    def GetRSA_PublicKey(self, csp):
        return str(csp.publickey().exportKey(format='PEM'),""utf-8"")
    def RSAEncrypt(self,publicKEY,byteArray):
        csp =  RSA.importKey(publicKEY);
        rsa_csp = PKCS1_v1_5.new(csp)
        return base64.standard_b64encode(rsa_csp.encrypt(byteArray))
    def RSADecrypt(self,csp, byteArray):
        sentinel = Random.new().read(256)
        rsa_csp = PKCS1_v1_5.new(csp)
        return rsa_csp.decrypt(byteArray,sentinel)

","95","<python><python-3.x><encryption><rsa><public-key-encryption>","0","1","1","2019-09-27 12:16:43","58134387","1","","82595","","2019-09-26 13:49:35","2019-09-25 12:50:50",""
"34833346","How can the browser handle encrypted data without HTTPS?","I have a use case where the back end serves encrypted video files with a Content-type: video/mp4 HTTP header. Normally, the browser (any browser) would start streaming the video file in it's built-in player, but since the data is encrypted, it doesn't know how to handle it.
The way the encryption is done is kind of like HTTPS. The server sends the front end a public key, the front end generates a symmetrical key with the public key and both the server and front end use it to encrypt/decrypt stuff.
I know that if I was using HTTPS, it would work, as an automatic process would occur between the server and browser. So I guess my question is how do I get the browser to display an encrypted video without using HTTPS?
","You must either use a video player that natively knows how to decrypt that format (contact the vendor of the back end), or put a piece of middleware in to decrypt the format (contact the vendor of the back end).  In both cases, you'll need the key as well.
Or log into the back end to change its settings (guess who you should contact).
Alternately, read the manual for the back end.
","95","<video><https><public-key-encryption><encryption-symmetric><encryption-asymmetric>","1","0","1","2016-02-02 06:22:06","","0","","","","","2016-01-16 23:32:05",""
"11249320","Need to encrypt the data but not with SHA1 or other digest","So m working on a project where I need to encrypt the data user is gonna enter on the website... I don't want to use the SHA1 or any other encryption method, since they are one-way encryption and I need to manipulate the data on the server side (I'm not storing the user data). Can anybody suggect me some good methodologies by which I can achieve this ??? 
Is Public Key Encryption gonna work ? If yes, which one should I use ? Or should I design a new algo ? 
I'm working on Java.
It would be really great if someone could point me to some resources for their answer or give me totally new and awesome idea ... :D
\m/ \m/
Does anybody know how many different type of Hashing algo's are commonly used ... ???
","You should head to http://www.bouncycastle.org/ . You'll find all the info you need, and also some background on hashing/encryption/signing, because you seem to be a bit puzzled about those terms. (no offense)
","95","<java><security><public-key-encryption><encryption-asymmetric>","-1","0","2","2012-06-28 19:42:53","","4","","1349298","","2012-06-28 19:42:53","2012-06-28 16:47:49",""
"11249320","Need to encrypt the data but not with SHA1 or other digest","So m working on a project where I need to encrypt the data user is gonna enter on the website... I don't want to use the SHA1 or any other encryption method, since they are one-way encryption and I need to manipulate the data on the server side (I'm not storing the user data). Can anybody suggect me some good methodologies by which I can achieve this ??? 
Is Public Key Encryption gonna work ? If yes, which one should I use ? Or should I design a new algo ? 
I'm working on Java.
It would be really great if someone could point me to some resources for their answer or give me totally new and awesome idea ... :D
\m/ \m/
Does anybody know how many different type of Hashing algo's are commonly used ... ???
","Are you certain you don't want to transmit the data over https? That would protect the data (via well-understood public key encryption) in transit, and then you don't have to mess with trying to run an extra encryption scheme in your client-side code. What is the use case here?
","95","<java><security><public-key-encryption><encryption-asymmetric>","-1","1","2","2012-06-28 19:42:53","","4","","1349298","","2012-06-28 19:42:53","2012-06-28 16:47:49",""
"39411808","SecKeyRawSign returning error -1, ""generic error""?","I am working on an iOS application that needs to generate a key pair on the device, store the private key in the Secure Enclave, and then access it later to use for signing (does not need to be exported, ever). When I sign, I always hash the data using SHA256, following a couple of stack Overflow answers, and it seems to be working when I print the results. However, after obtaining a valid private key reference from the KeyChain, hashing the data to be signed, and specifying that it is a SHA256 hash, SecKeyRawSign still returns -1. This is just listed as a 'generic error', and my setup seems like it should be valid. Some insight on what's going wrong would be greatly appreciated. Here are my methods to generate and sign:
private func genKeyPair() -> (privateAlias: String, publicKey: NSData)? {

    // Generate a keyhandle, which will be returned as an alias for the private key
    let numBytes = Int(keyHandleLength)
    var randomBytes = [UInt8](count: numBytes, repeatedValue: 0)
    SecRandomCopyBytes(kSecRandomDefault, numBytes, &randomBytes)
    let data = NSData(bytes: &randomBytes, length: numBytes)
    let alias = data.base64EncodedStringWithOptions(NSDataBase64EncodingOptions(rawValue: 0))

    let access = SecAccessControlCreateWithFlags(nil, kSecAttrAccessibleWhenPasscodeSetThisDeviceOnly, .TouchIDCurrentSet, nil)!

    // Key pair parameters
    var keyParams: [String:AnyObject] = [
        kSecAttrKeyType as String: kSecAttrKeyTypeEC,
        kSecAttrKeySizeInBits as String: 256
    ]

    // Private key parameters
    keyParams[kSecPrivateKeyAttrs as String] = [
        kSecAttrIsPermanent as String: true,
        kSecAttrLabel as String: alias,
        kSecAttrApplicationTag as String: applicationTag,
        kSecAttrAccessControl as String: access
    ]

    // Public key parameters
    keyParams[kSecPublicKeyAttrs as String] = [
        kSecAttrIsPermanent as String: true,
        kSecAttrLabel as String: alias + ""-pub"",
        kSecAttrApplicationTag as String: applicationTag
    ]

    var pubKeyRef, privKeyRef: SecKey?
    var err = SecKeyGeneratePair(keyParams, &pubKeyRef, &privKeyRef)

    guard let _ = pubKeyRef where err == errSecSuccess else {

        print(""Error while generating key pair: \(err)."")
        return nil

    }

    // Export the public key for application use
    let query = [
        kSecClass as String: kSecClassKey,
        kSecAttrLabel as String: alias + ""-pub"",
        kSecAttrKeyType as String: kSecAttrKeyTypeEC,
        kSecReturnData as String: true
    ]
    var pubKeyOpt: AnyObject?
    err = SecItemCopyMatching(query, &pubKeyOpt)

    if let pubKey = pubKeyOpt as? NSData where err == errSecSuccess {

        print(""Successfully retrieved public key!"")
        return (alias, pubKey)

    } else {

        print(""Error retrieving public key: \(err)."")
        return nil

    }

}

private func sign(bytes data: NSData, usingKeyWithAlias alias: String) -> NSData? {

    let query = [
        kSecClass as String: kSecClassKey,
        kSecAttrLabel as String: alias,
        kSecAttrApplicationTag as String: applicationTag,
        kSecAttrKeyType as String: kSecAttrKeyTypeEC,
        kSecReturnRef as String: true
    ]

    var privateKey: AnyObject?
    var error = SecItemCopyMatching(query, &privateKey)

    guard error == errSecSuccess else {

        print(""Could not obtain reference to private key with alias \""\(alias)\"", error: \(error)."")
        return nil

    }

    print(""\nData: \(data)"")
    print(""Length: \(data.length)"")

    let hashedData = NSMutableData(length: Int(CC_SHA256_DIGEST_LENGTH))!
    CC_SHA256(data.bytes, CC_LONG(data.length), UnsafeMutablePointer(hashedData.mutableBytes))

    print(""\nHashed data: \(hashedData)"")
    print(""Length: \(hashedData.length)"")

    var signedHashLength = SecKeyGetBlockSize(privateKey as! SecKeyRef)
    let signedHash = NSMutableData(length: signedHashLength)!

    error = SecKeyRawSign(privateKey as! SecKeyRef, .PKCS1SHA256, UnsafePointer<UInt8>(hashedData.mutableBytes), hashedData.length, UnsafeMutablePointer<UInt8>(signedHash.mutableBytes), &signedHashLength)

    print(""\nSigned hash: \(signedHash)"")
    print(""Length: \(signedHashLength)\n"")

    guard error == errSecSuccess else {

        print(""Failed to sign data, error: \(error)."")
        return nil

    }

    return signedHash

}

","","94","<swift><security><public-key-encryption><sha256>","1","","0","2016-09-09 12:38:44","","0","1","","","","2016-09-09 12:38:44",""
"24743706","Adding Digital Signature to an XML Document for TLS","In TLS, how do I add a digital signature to an XML document in C# or Java? Most importantly, at what point is the XML document encrypted? During the signature process or after?
","TLS is not related to the document signing in any way. TLS transfers any data and treats this data as a stream of bytes. Signing is done completely independently. 
XML signature can be embedded into the document (i.e. signature-related XML nodes become a part of the document) or it can be stored in a separate file (detached signature). In both cases you can transfer the document over TLS or any other medium. 
","94","<xml><ssl><public-key-encryption>","0","0","1","2014-07-15 16:11:05","24763123","2","","77265","","2014-07-14 19:15:00","2014-07-14 18:53:59",""
"24750739","How to send and receive email without exposing email address in PHP","I'm developing the feature which offers to establish email communication between buyer and seller, but buyer and seller email ID should not expose to each others.
","You can create automatically a service that every time a user will register itself, creates an alias (ie.: userid@yourdomain.extension) aswell.
When a user send a mail you can change sender field and when someone replies the alias will send back to original sender the message.
I know, there isn't any line of code but the concept should be clear
","92","<php><email><symfony><public-key-encryption>","-2","0","2","2014-12-14 15:14:16","","1","1","1613759","","2014-07-15 10:48:05","2014-07-15 05:53:00",""
"24750739","How to send and receive email without exposing email address in PHP","I'm developing the feature which offers to establish email communication between buyer and seller, but buyer and seller email ID should not expose to each others.
","Finally I got the solution to my problem. By using php email parser and configuring mail server it is possible to solve the problem.
","92","<php><email><symfony><public-key-encryption>","-2","0","2","2014-12-14 15:14:16","","1","1","1613759","","2014-07-15 10:48:05","2014-07-15 05:53:00",""
"18040886","A library or method to create large numbers","I'm working on an prime factorization algorithm. To test it I need some large numbers with few and big prime numbers. for example Number=(BigPrime1*BigPrime2).
By Large Number I mean as large as the current RSA algorithms uses for key generations.
How can I find some of these numbers to test and challenge my algorithm.
Is there any library for them? or any site already have some numbers for challenge?
","Is BigInteger large enough..?
http://msdn.microsoft.com/en-us/library/system.numerics.biginteger.aspx
","92","<c#><algorithm><encryption><public-key-encryption>","0","1","3","2013-08-09 09:30:11","18143575","1","","","","","2013-08-04 07:48:45","2014-03-02 03:13:31"
"18040886","A library or method to create large numbers","I'm working on an prime factorization algorithm. To test it I need some large numbers with few and big prime numbers. for example Number=(BigPrime1*BigPrime2).
By Large Number I mean as large as the current RSA algorithms uses for key generations.
How can I find some of these numbers to test and challenge my algorithm.
Is there any library for them? or any site already have some numbers for challenge?
","The easiest way to get what you are asking for is to construct the numbers. First pick a set of e.g. three largish probable primes. Multiply them together to get an even larger number that probably has a few large prime factors.
","92","<c#><algorithm><encryption><public-key-encryption>","0","3","3","2013-08-09 09:30:11","18143575","1","","","","","2013-08-04 07:48:45","2014-03-02 03:13:31"
"18040886","A library or method to create large numbers","I'm working on an prime factorization algorithm. To test it I need some large numbers with few and big prime numbers. for example Number=(BigPrime1*BigPrime2).
By Large Number I mean as large as the current RSA algorithms uses for key generations.
How can I find some of these numbers to test and challenge my algorithm.
Is there any library for them? or any site already have some numbers for challenge?
","The largest known primes are some of Mersenne primes.  Lists are available of their decimal expansions which would provide some test data for your algorithm.
There is plenty of other information on large primes.  A good overview can be found here.
Of course, if you want to generate a large number of large primes for your test cases, read up on probable primes as suggested in an earlier answer.
","92","<c#><algorithm><encryption><public-key-encryption>","0","1","3","2013-08-09 09:30:11","18143575","1","","","","","2013-08-04 07:48:45","2014-03-02 03:13:31"
"22386587","How to collect PKs used in bitcoins","From my humble understanding of bitcoins, it uses public key system. My question: How can I collect public keys or certificates that were used in bitcoins on the Internet? For example, I have previously collected public keys used in the 305.x certificates. But, now I need public keys known to be used for bitcoins. Is there any way?
","The entire set of Bitcoin transactions ever performed is actually available online. Any Bitcoin client will, when it first starts up, download the entire transaction log. So that's one way to do it. Just use either a client library, or run a client and parse what it downloads.
If you're happy to collect it manually, just go to Blockchain.info, and you can browse all transactions there.
","92","<ssl-certificate><public-key-encryption><public-key><bitcoin>","0","0","1","2014-03-13 17:46:07","22386772","0","","","","","2014-03-13 17:38:55",""
"57272493","Input to large for RSA Cipher","I have generated the following Public Key in Android.   
 fun createCipher(): Cipher
    {
        val posKey = posPublicKey
        posKey.publicKey.modulus

        var spec = RSAPublicKeySpec(BigInteger(posPublicKey.publicKey.modulus), BigInteger(posPublicKey.publicKey.exponent))
        var fact = KeyFactory.getInstance(KeyProperties.KEY_ALGORITHM_RSA)

        publicKey = fact.generatePublic(spec)
        var cipher = Cipher.getInstance(""RSA/ECB/OAEPWithSHA-256AndMGF1Padding"")
        cipher.init(Cipher.ENCRYPT_MODE, publicKey)
        return cipher
    }

The RSA key size that I have selected is 4096 bytes
The exponent is 3 bytes and the modulus is 512 bytes 
The Modulus Byte Array is as follows:
[-32, -28, -121, 32, 109, -82, 43, 115, 43, -117, 20, 35, 122, 33, -2, 23, 23, -22, 75, 0, 91, 10, -89, 48, 33, -89, 57, 1, 57, -13, 9, -127, 90, 121, -96, -94, 106, -16, -105, -112, -74, 30, -12, 74, -74, 104, -26, 15, 99, -22, -55, -75, 14, -45, 56, 20, 85, 90, 83, -50, 68, -114, 5, -10, -109, 79, 44, 81, 68, -98, -45, -51, -97, 71, 90, -13, -78, 118, -21, -47, 66, 104, -83, 56, -72, -27, 45, 16, 70, 32, -76, -125, -11, 108, 126, -61, -126, 16, 6, -49, -106, -114, 18, 49, 121, -39, -109, 115, 111, -128, 83, 8, -110, -10, -4, 51, -67, 49, 66, 103, -76, -88, -110, 122, 56, 29, -101, 22, 3, 117, -104, -54, -64, -71, 23, 58, 87, 37, 96, 25, -114, 38, 1, -126, 33, -91, -4, 89, -28, 10, 95, -104, -24, -38, 17, 47, -122, 24, -89, 123, 100, 12, -10, -57, -44, 45, 25, 39, -80, -101, -6, -99, -95, -5, 70, 32, 37, -57, -52, -47, -66, 85, 10, -48, 75, 4, -114, 104, -7, -112, -128, 4, 114, 77, -40, 96, 66, 83, -54, 10, 111, 102, -39, -63, 2, -75, 38, 36, 24, 13, -51, 96, 89, -60, -40, 99, 65, 123, 52, -114, 122, 75, 32, -121, 80, -76, -11, -1, -31, -118, -51, -21, 13, 109, 111, -102, 120, -56, 62, -19, -79, 86, -41, -81, 67, -80, -63, 37, 35, 47, 109, -32, 47, -128, 95, -48, -53, -1, -125, -19, -9, -10, 15, -116, -50, 53, -86, -102, -24, 107, 122, -43, -125, 51, 14, 101, 67, 57, 116, 97, -40, -98, -82, -118, -83, 120, -107, -14, 19, -49, -27, 10, 25, 40, 43, -27, 31, 59, -57, 58, 33, -98, 1, -45, -118, 76, -21, -13, -123, 67, 42, -37, -96, -32, 33, 124, 1, 44, -99, 74, 18, 32, 10, -107, -121, 86, -115, -70, -107, 109, 17, -92, 109, -47, 60, -49, -91, 7, -125, 47, 78, 86, 81, -2, -35, 17, 124, 94, -26, -80, -84, 120, 110, 38, -55, -90, -11, 107, 73, 71, 44, 69, -58, 56, -59, 2, 94, 27, 88, 29, -57, 95, -99, 5, 102, -66, 118, -82, 126, 20, -104, -95, 47, -2, 77, -33, 89, -66, -92, 121, -5, 78, 68, -1, -82, -95, -121, 117, -29, 70, 11, -72, 54, -99, -13, -87, 9, 77, -113, 51, -124, -56, -8, 126, -114, -31, 90, -125, -11, 41, -85, 74, 3, 90, -95, 85, 121, 61, 14, 116, 51, -40, -57, -124, -69, -51, -76, -119, -80, 95, 95, 17, -34, 80, -36, 66, -51, 14, -69, -113, 35, -109, -115, -16, -3, -118, 114, -20, -81, 57, -65, 40, -8, -67, -85, 110, 50, -128, 44, -78, 93, -44, -93, 89, -76, 13, 98, -38, -55, -120, 11, 127, 84, -2, 101, 57, -121, -111, 91, -102, -118, 85, -124, -90, 91, -84, 28, 120, -28, -105, 88, -73, 6, 89, 33, 8, 9, 30, 9, -6, 17, 25]
The Exponent Byte Array is as Follows:
[1, 0, 1]

The test Key is as follows:
val stringKey = ""8D-F7-5B-15-0F-2A-E5-3E-FD-44-5A-63-50-AC-62-D6-06-2D-59-5C-F1-C3-9A-DB-45-25-0D-7A-72-AE-DF-87""
val stringIV = ""FA-94-FD-74-2E-AC-2C-90-79-98-AF-A3-D7-12-5D-A2""

 var aeskey = AesKeyBuilder()
            val key = (stringKey.replace(""-"", """")).toByteArray(Charsets.US_ASCII)

            val iv = (stringIV.replace(""-"", """")).toByteArray(Charsets.US_ASCII)
            aeskey.key = key
            aeskey.iv = iv

val encryptedKey = cipher.doFinal(aesKey.Key)

The item that I am trying to encrypt is 64 bytes. Using this public key. 
However, I get the following error:
Process: com.touchsides.rewards.debug, PID: 19470
com.android.org.bouncycastle.crypto.DataLengthException: input too large for RSA cipher.
    at com.android.org.bouncycastle.crypto.engines.RSACoreEngine.convertInput(RSACoreEngine.java:115)
    at com.android.org.bouncycastle.crypto.engines.RSABlindedEngine.processBlock(RSABlindedEngine.java:95)
    at com.android.org.bouncycastle.crypto.encodings.OAEPEncoding.encodeBlock(OAEPEncoding.java:199)
    at com.android.org.bouncycastle.crypto.encodings.OAEPEncoding.processBlock(OAEPEncoding.java:131)

I believe the modulus size is large enough to allow for the encryption of this byte array.
","","92","<java><android><rsa><public-key-encryption>","0","","0","2019-07-30 16:07:14","","7","","4319835","","2019-07-30 16:07:14","2019-07-30 13:08:20",""
"17008143","Generating public-private key pairs where determining the public key is also hard to calculate if unknown","I'd like to know how one would go about generating a private-public key pair where the public key is as hard to deduce from the private key as visa versa?
As I understand it presently the exponent part of the public key is left deliberately simple so that the private key can be used to generate the public key. 
My interest in this is to create no-trusted-third party escrow execution using Bitcoin. This raises the second question of whether this is possible using the Bitcoin protocol?
","","92","<encryption><public-key-encryption><private-key><bitcoin>","0","","0","2013-06-09 09:10:29","","2","","","","","2013-06-09 09:10:29",""
"55743331","java.lang.RuntimeException: error:03000068:bignum routines:OPENSSL_internal:CALLED_WITH_EVEN_MODULUS","I want to implement RSA encryption with public and private key in the android. Implementation I have done is as below. 
public static String enccriptData(String dataToEncrypt)
{
    try {
        String publicExponentString = ""AQAB"";
        String PUBLIC_KEY = ""BgIAAACkAABSU0ExAAQAAAEAAQBJGj09Gbyl7BS/8MytvjBUUfaktW984VHHW4lSI9y2OwaeOq4qqSD6IOHU9HL/QtwZ+wELq28eAOQSnr11hifMf6zWjIsCBHOEpLNJjL3wxjl7dUBEGMJOeZj2rmcf8v7lP/rpAtO/G8wKXhAIKLIFxcChkXwQKbQbHQ/FtX2bwg==""

        byte[] modulusBytes = Base64.decodeBase64(PUBLIC_KEY);
        byte[] exponentBytes = Base64.decodeBase64(publicExponentString);
        BigInteger modulus = new BigInteger(1, modulusBytes);
        BigInteger publicExponent = new BigInteger(1, exponentBytes);

        RSAPublicKeySpec rsaPubKey = new RSAPublicKeySpec(modulus, publicExponent);
        KeyFactory fact = null;
        fact = KeyFactory.getInstance(""RSA"");

        PublicKey pubKey = fact.generatePublic(rsaPubKey);
        Cipher cipher = Cipher.getInstance(""RSA/ECB/PKCS1PADDING"");
        cipher.init(Cipher.ENCRYPT_MODE, pubKey);

        String token = dataToEncrypt + "":"" + String.valueOf(getCurrentDateTimeTicks());

        byte[] plainBytes = token.getBytes(""UTF-16LE"");
        byte[] cipherData = cipher.doFinal(plainBytes);
        String encryptedStringBase64 = Base64.encodeBase64String(cipherData);
        return encryptedStringBase64;
    }catch (Exception e){
        e.printStackTrace();
    }

    return null;
}

private static long getCurrentDateTimeTicks(){
    long TICKS_AT_EPOCH = 621355968000000000L;
    long tick = System.currentTimeMillis()*10000 + TICKS_AT_EPOCH;
    return tick;
}

This works fine when I run this code as a Java file. It encrypts the data as expected. But, when I use this code in the android application, it gives below error. 
java.lang.RuntimeException: error:03000068:bignum routines:OPENSSL_internal:CALLED_WITH_EVEN_MODULUS
 at com.android.org.conscrypt.NativeCrypto.RSA_public_encrypt(Native Method)
 at com.android.org.conscrypt.OpenSSLCipherRSA$DirectRSA.doCryptoOperation(OpenSSLCipherRSA.java:371)
 at com.android.org.conscrypt.OpenSSLCipherRSA.engineDoFinal(OpenSSLCipherRSA.java:292)
 at javax.crypto.Cipher.doFinal(Cipher.java:1741)

Equivalent C# code is as below 
public string GenerateToken()
{
    var completeToken = string.Format(""{0}:{1}"", _dataToEncrypt, DateTime.UtcNow.Ticks);
    var encryptedToken = EncryptionHelper.Encrypt(_publicKey, completeToken);
    var token = Convert.ToBase64String(encryptedToken);
    return token;
}

public static byte[] Encrypt(string publicKey, string data)
{
    var cspParams = new CspParameters { ProviderType = 1 };
    var rsaProvider = new RSACryptoServiceProvider(cspParams);

    rsaProvider.ImportCspBlob(Convert.FromBase64String(publicKey));

    var plainBytes = Encoding.UTF8.GetBytes(data);
    var encryptedBytes = rsaProvider.Encrypt(plainBytes, false);

    return encryptedBytes;
}

Ref link 
Translating C# RSACryptoServiceProvider into JAVA Code
","","91","<android><security><rsa><public-key-encryption>","0","","0","2019-04-19 04:36:25","","6","","5142487","","2019-04-19 04:36:25","2019-04-18 09:43:36",""
"44812974","Create authorized keys from ECDSA public key","I'm using Bouncy Castle API and I have ECPublicKey object but I'm not sure exactly how to construct a OpenSSH authorized key from there. I don't know what the format looks like. I'm thinking my solution would be similar to how it's done for RSA and DSA.. Decoding RSA/DSA Public Key
Does anyone have any suggestions?
","The format of ECDSA keys is described in the RFC5656:
In short:

The ""ecdsa-sha2-*"" key formats all have the following encoding:
string   ""ecdsa-sha2-[identifier]""
byte[n]  ecc_key_blob

The ecc_key_blob value has the following specific encoding:
string   [identifier]
string   Q


","90","<bouncycastle><public-key-encryption><openssh><ecdsa>","0","0","1","2017-06-29 07:06:29","","0","","","","","2017-06-28 21:39:54",""
"57884853","Does Azure's Key Vault support PGP key encryption?","I would appreciate clarification and advice on the following:
i am working on secure file transfer using SFTP protocol. We use PGP public/private key pair for file encryption and decryption . for a time being we keep our public/private key in local system. but as per requirement we want to keep these keys on Azure's keyVault . But i didn't found any document related to import my existing PGP public/private key in Azure's keyVault. 
I am confused after reading MS Azure's documentation and related blog posts, where some sources claim Asymmetric key encryption is supported, but there is no official documentation on this.
","When you use Azure Key Vault, you can import or generate keys in hardware security modules (HSMs) that never leave the HSM boundary. This scenario is often referred to as bring your own key, or BYOK. The HSMs are FIPS 140-2 Level 2 validated. Azure Key Vault uses nCipher nShield family of HSMs to protect your keys.
Use the information in this topic to help you plan for, generate, and then transfer your own HSM-protected keys to use with Azure Key Vault.
This functionality is not available for Azure China.
You can read more about it in below docs:
https://docs.microsoft.com/en-us/azure/key-vault/key-vault-hsm-protected-keys#prerequisites-for-byokTo
https://id-3.co.uk/bring-your-own-key-what-is-it-and-what-are-its-benefits/
https://youtu.be/lOpaD4vShsU
Hope it helps.
","90","<java><azure><public-key-encryption><azure-keyvault><pgp>","1","0","1","2019-09-11 09:14:05","","0","","","","","2019-09-11 08:12:44",""
"49324226","How to tie asset to network participant in fabric chaincode","I am writing chaincode for Hyperledger Fabric using node. I am trying to model a network in which I have a buyer and a seller in a channel whose purpose is exchanging a Car asset.
I do have a transaction which is called sellCar and invoked by the seller and it should save as attributes in the world state who is the seller and who is the buyer. I do also have a transaction carReceived which is to be called by the buyer to confim he has received the car.
I am struggling to determine how to link the car.buyer field of my Car asset to a valid identity in the fabric network? In that way I can make sure only the intended buyer can invoke the carReceived transaction for his car.
Should I save a copy of the buyer and seller eCerts as part of the transaction? Is this an insecure practice? For example inside the chaincode then check whether the participant invoking carReceived matches the car.buyer eCert (wich was given in advance to the seller to add in the sellCar transaction)
I am unsure how to proceed. I am using Fabric CA as MSP.
Thank you very much in advanced for your help
","","90","<hyperledger-fabric><public-key-encryption><hyperledger>","1","","0","2018-03-16 15:22:19","","0","","","","","2018-03-16 15:22:19",""
"52728699","Java KeyFactory.generatePublic equivalent in C# for RSA Encryption","I have this Java code to create a public key based on base64 byte array in Java:
return KeyFactory.getInstance(""RSA"").generatePublic(new X509EncodedKeySpec(base64PublicKeyBytes));

That line is subsequently used to encrypt some data.
Assume that I have access to the base64 encoded public key string.
Would the equivalent C# code to generate the key be as simple as:
base64PublicKeyBytes =  Convert.FromBase64String(base64PublicKey);

and this can then be used with RSACryptoServiceProvider as follows:
var rsa = new RSACryptoServiceProvider(2048);
                    var rsaKeyInfo = rsa.ExportParameters(false);
                    rsaKeyInfo.Modulus = base64PublicKeyBytes;

","","89","<java><c#><rsa><public-key-encryption>","0","","0","2018-10-09 20:25:37","","2","","187279","","2018-10-09 20:25:37","2018-10-09 20:16:54",""
"27348151","Are there arbitrary byte-array constants in C#","I want to migrate a c++ code to c# , in my c++ code i am using a public key for testing using a hard coded value like this :
static unsigned char PubKeyModulus[] = {
""\xCA\x68\x77\.....""
""\x17\x55\x79\...""
""\xF5\xD2\....""
""\x2B\xE4\...""
""\x7F\xC5\...""
""\xEA\x19\...""
""\x83\x67\...""
""\x68\xEF\...""
""\x57\x72\...""
""\x0F\xE5\...""
""\xD0\xBD\...""
""\x21\x21\...""
""\x11\x63\...""
""\x05\xFB\...""
""\x44\x7A\...""
""\xD3\x19\...""
};

how can i use this value in C# code.
","Note that while char is a single-byte type in C++, it's a two-byte type in C#. You want byte in C#.
As for the specific question, wouldn't the following work?
static readonly byte PubKeyModulus[] = {
0xCA, 0x68, 0x77, ...
0x17, 0x55, 0x79, ...
0xF5, 0xD2, ...
0x2B, 0xE4, ...
0x7F, 0xC5, ...
0xEA, 0x19, ...
0x83, 0x67, ...
0x68, 0xEF, ...
0x57, 0x72, ...
0x0F, 0xE5, ...
0xD0, 0xBD, ...
0x21, 0x21, ...
0x11, 0x63, ...
0x05, 0xFB, ...
0x44, 0x7A, ...
0xD3, 0x19, ...
};

(Where ... is replaced by more byte values, of course)
If not, please explain why not.
","88","<c#><public-key-encryption>","0","1","1","2014-12-08 00:20:16","","2","","3204551","","2014-12-07 21:43:57","2014-12-07 21:38:13","2014-12-08 00:25:51"
"22099402","does SSLVPN make your http request encrypted?","As a logically I know the answer but I couldn't find any resource on google to clarify my confusing.
I know when you connect to a VPN all your requests is going to VPN through ISP's and routers.
My goal is make the all requests and responses which is incoming or outgoing from my computer must be encrypted with SSL.
That will protect my data from ISP's or any MITM attacks or any dns / tcp sniffing.
When I request any content from http://www.example.com it is not encrypted if I use direct internet and if there is MITM then all my data will captured by the attacker, or with tor, if exit node is capturing the tcp data again my privacy will broke.
So if I use an anonymous tor + ssl vpn or just ssl vpn and if I connect to http://example.com and if there is MITM or any sniffing among the routing or in ISP's, can they see any data non-encrypted ?
","If you connect to http://www.example.com (e.g. non-SSL) through any type of VPN (e.g. it does not matter if SSL based, IPSec, Tor...) it will only protect the connection between the VPN endpoints, e.g. your computer and the other VPN endpoint somewhere on the internet. From there the connection to your final target (www.example.com) host is unprotected.  Only if the target system is the endpoint of the VPN your connection will be end-to-end protected.
","88","<security><ssl><vpn><public-key-encryption><tor>","0","0","1","2014-02-28 15:46:35","22099611","0","0","","","","2014-02-28 15:36:46","2014-07-24 18:31:58"
"32773488","Validate crypted file with public key","I have a server in a hosting with gnupg module and all works fine. The user can crypt messages with my public key (this process should do in a local, not in the server) and upload this messages in my server. I want validate that the ""file"" was encrypted with my public key
The user type something like that and them upload the file into my server.
gpg --encrypt --recipient 12345678 file.txt  

I dont want share my private key in this server, so i cant validate if i will can decrypt. My question is, can i validate what file was crypted with my own public key??
Sorry by my english
","use gpg --decrypt  but don't give your private key, gpg will tell you all the keys that it is encrypted with:
wwalker@hatter:~$ gpg --decrypt foo.asc

You need a passphrase to unlock the secret key for
user: ""Wayne Walker (Ruby Hacker) <wwalker@bybent.com>""
4096-bit ELG-E key, ID 39D0C3D7, created 2007-12-31 (main key ID A62B624A)

gpg: cancelled by user
gpg: encrypted with 1024-bit ELG-E key, ID 70DAE878, created 2015-10-15
      ""Puppet Vault (Used for targeted secrets exchanges) <puppet@pumhost2.lbl.gov>""
gpg: encrypted with 1024-bit ELG-E key, ID 9426026B, created 2015-10-15
      ""Puppet Vault (Used for targeted secrets exchanges) <puppet@jenkins.lbl.gov>""
gpg: encrypted with 4096-bit ELG-E key, ID 39D0C3D7, created 2007-12-31
      ""Wayne Walker (Ruby Hacker) <wwalker@bybent.com>""
gpg: public key decryption failed: bad passphrase
gpg: decryption failed: secret key not available

If you are already using gpg-agent and your key is already in the agent:
(unset GPG_AGENT_INFO; gpg --decrypt foo.asc)

","86","<public-key-encryption><gnupg>","0","0","1","2015-10-27 02:08:15","","0","","","","","2015-09-25 01:42:03",""
"48770955","TPM Windows Key creation","Once Windows has taken ownership of the TPM chip inside my computer is it still possible to create a persistent key inside it ? (Given that I don't have the Owner Password because Windows throws it aways after initializing the TPM).
Is the Storage Root Key (SRK) created by Windows inside the TPM protected with a pin code to perform cipher operations ? If it is where is that password stored in windows ?
Thx!
","For those who pass by, It is possible.
I did a dual boot with a Windows 10 and an Ubuntu. I put the excellent tools developped here tpm2-tools on the Ubuntu and I got to insert my own persistent primary key inside the chip.
The funny/weird thing is that I can create that key and make it persistent under linux (with these tools) also under EFI with a program that I wrote. But under Windows I can't get it to work. I'm going to ask why on another post.
","85","<windows><encryption><public-key-encryption><tpm>","0","0","1","2018-02-19 15:53:05","48869683","0","","","","","2018-02-13 16:07:44",""
"14458913","Basic RSA theory: how does the server ""remember"" the private key","So far, my understanding of a password transfer using a public key algorithm is as follows:

AJAX call to PHP page retrieves generated public key
Password is encrypted using the public key
AJAX call to PHP page transmits the encrypted string
PHP page decrypts the string with the private key

First off, my understanding may be wrong; please correct me if it is. Assuming it isn't, there is a slight problem nonetheless: the private key must be generated in step 1, but it is only used in step 4. My question is: how can I get the PHP page to ""remember"" the private key that it generated in the first call, to be used in the second?
","
how can I get the PHP page to ""remember"" the private key that it generated in the first call, to be used in the second?

Using sessions.
","85","<php><ajax><rsa><public-key-encryption>","-1","2","1","2013-01-22 13:02:34","14459206","5","","","","","2013-01-22 12:47:22","2013-01-22 19:44:54"
"17087895","is client based online encryption practical?","I'm wondering whether a mechanism exists that allows client to client encryption. For example, when enabled, any information that is entered on one client can only be decrypted using a specific key.
Similar to how regular public key transactions work, but server agnostic.
A use case:
Everything on my Facebook profile is encrypted, and no body would be able to view that information (not even facebook). The users that I give the key would be able to decrypt that information.
This would allow complete control of data stored online.
The same idea can be applied for pictures uploaded to the internet.
One issue that I see is to have a practical mechanism to manage keys and a secure way to distribute keys to other users.
Has anyone done something like this before?
","In case of Facebook I can imagine encrypting the data with OpenPGP keys into armored (text) format. Then you can place encrypted block to facebook or anywhere else. Other users would take the block, decrypt it on the client side and see it.
The same applies with other social networks and places where you can store some text block. 
You can easily do encryption in some client application and even in Javascript (if you manage to make JavaScript load local user's keys somehow). 
","83","<security><encryption><public-key-encryption><diffie-hellman>","1","1","1","2013-06-13 13:35:01","17088451","0","","","","","2013-06-13 13:09:08",""
"53456211","How to separate marshalled ecdsa public and private keys in GoLang","So far, I have:
key, err := ecdsa.GenerateKey(elliptic.P521(), rand.Reader)
if err != nil {
    os.Exit(-1)
}
marshalled, err := x509.MarshalECPrivateKey(key) // marshalls data to byte stream
if err != nil {
    os.Exit(-1)
}

Basically, what I am having trouble with has to do with the fact that when a key pair is generated, it is stored in an *ecdsa.PrivateKey, in which the public key is stored in the *ecdsa.PrivateKey.PublicKey, and when I marshall the key pair data (stored in the *ecdsa.PrivateKey) using x509.MarshalECPrivateKey(key), a single byte slice is returned. I am therefore having trouble determining which are the public and private keys in the byte slice itself.
","The private key is a superset of the public key.  It always contains the public key.  Usually a public key is stored as part of a certificate.
If you really want to get the public key by itself, you can grab the X and Y big integers from the ecdsa public key struct and store the binary representation of them.
You might benefit from a bit of retrospect on your design here.  There aren't too many situations where you need to communicate a public key alone.
","83","<go><encryption><public-key-encryption><ecdsa>","0","0","1","2018-11-24 07:55:33","","0","","10033867","","2018-11-24 07:50:57","2018-11-24 07:45:40",""
"40602653","Different public keys after generation pem file from jks file","I have Keystore.jks file and I want to generate public key from it. I have to give the public key file to the other clients who are using my service. 
So I generate foo.pem file including public key and private key from Keystore.jks. I run commands from this
link
After the foo.pem file generation, I compare two public key and private key with the original keystore.jks file by following coding.
    PrivateKey privateKey = (PrivateKey)keystore.getKey(
                    ""testing""
                    , ""123456"".toCharArray ()
                );

    Certificate l_cert = keystore.getCertificate (""testing"");
    PublicKey publicKey = l_cert.getPublicKey();
    System.out.println(""Private Key: ""+Base64.encodeBase64String(privateKey.getEncoded()));
    System.out.println(""Pub key: "" + Base64.encodeBase64String(publicKey.getEncoded()));

I would like to know 

Why two public and private keys are different after generation of
foo.pem file? 
What should I do to get same public and private keys
for both files?

","","83","<java><rsa><public-key-encryption><jks>","0","","0","2016-11-15 05:28:51","","5","","-1","","2017-05-23 12:30:23","2016-11-15 05:28:51",""
"7087335","Custom Application Encryption","I am currently looking to add encryption to a server application (programmed in C) that passes raw data, unencrypted data over TCP to clients (a large number of different applications programmed in many different languages).
What is the best way to do this? Public-key cryptography? If so, how would the process go?
Thanks!
","If you have to ask, you're probably not qualified to be doing cryptographic work. It is far to easy to make a subtle mistake in crypto processing that breaks your entire system's security, and unlike most other bugs, it is not at all obvious until someone else breaks your system.
Just use SSL (aka TLS). The folks that designed the SSL/TLS specs and libraries have already done all the hard work for you.
","82","<c><encryption><tcp><public-key-encryption>","2","3","3","2011-09-04 23:16:30","7302717","0","1","","","","2011-08-17 02:27:43",""
"7087335","Custom Application Encryption","I am currently looking to add encryption to a server application (programmed in C) that passes raw data, unencrypted data over TCP to clients (a large number of different applications programmed in many different languages).
What is the best way to do this? Public-key cryptography? If so, how would the process go?
Thanks!
","SSL: secure socket layers, which initiates and transmits encrypted data.
TLS: transport layer security, which asks to starttls and the answer to that is a list of capabilities, then the transmission can continue using the best mutually accepted encryption.  
Note: the capabilities may include cleartext.
I suggest reading upon how to extend  your existing protocol to support TLS, by looking at an example, say, the smtp starttls( rfc 2487 ).  your time invested will be rewarded.
","82","<c><encryption><tcp><public-key-encryption>","2","0","3","2011-09-04 23:16:30","7302717","0","1","","","","2011-08-17 02:27:43",""
"7087335","Custom Application Encryption","I am currently looking to add encryption to a server application (programmed in C) that passes raw data, unencrypted data over TCP to clients (a large number of different applications programmed in many different languages).
What is the best way to do this? Public-key cryptography? If so, how would the process go?
Thanks!
","OpenSSL suits my needs! A quick view at the documentation and tutorials pointed me in the right direction.
","82","<c><encryption><tcp><public-key-encryption>","2","0","3","2011-09-04 23:16:30","7302717","0","1","","","","2011-08-17 02:27:43",""
"56000057","How to use RSA?","I trying to use RSA to encrypt my data in Python.
I created two small (private and public) keys
e : 14918179  N : 15372757
D : 7495819   N : 15372757

I tried to encrypt a small value (10) with those keys, and it worked. But the problem is that it takes a long time to do.
For example, I compared it to openssl by using a big key and long string and it worked under a second.
And I know there is a third library for using RSA (not a big fan of them).
I am trying to use this method to encrypt my data that is going to be sent to the server and it should do it under a second
How can I do it?
","I think in general your questions on performance are answered here. wikipedia : modular exponentiation
The article describes

Direct exponentiation
Memory efficient exponentiation
Binary exponentiation

Direct Exponentiation
raise to the power e and take the modulo.
This is straight forward, but the size of the number pre modulo is extermely large.
Memory efficient exponentiation
Replacing the power operation with a multiply e times, allows the accumulated result to always be within the modulo range.  This limits the size of the bignum and speeds up the operation.
Binary exponentiation
If you convert the power to a binary number 
if e = 13  => 1101
pow(n, 13) = pow( n, 8) * pow(n,4) * pow(n, 1)
So for an m bit exponent, then only about m operations need to be done.
Combining the memory efficient and binary exponentiation solves most of the performance.
Python offers an implementation of these improvements using the 3 argument power function e.g. 
>>> import timeit
>>> t = timeit.Timer( 'print(pow( 10,14918179, 15372757))' )
>>> t.timeit(1)
10140931
0.06365180000000237

>>> u = timeit.Timer( 'print(pow( 10,14918179) % 15372757)' )
>>> u.timeit(1)
10140931
15.021656000000007

The 3 parameter of pow takes .06s whilst the 2 parameter version of pow takes 15 seconds.
","82","<python><encryption><rsa><public-key-encryption><private-key>","1","1","1","2019-05-06 08:41:12","56000626","3","","1726797","","2019-05-06 07:02:31","2019-05-06 06:46:30",""
"26421155","Public key 48bytes longer when reading certificate crt file","When I read public key from crt certificate file (RSA sig alg : sha256RSA 2048bits) :
        FileInputStream fis = new FileInputStream(PATH_TO_CERTIFICATE_FILE);
        CertificateFactory cf = CertificateFactory.getInstance(""X.509"");
        Certificate cert = (Certificate) cf.generateCertificates(fis).iterator().next();
        RSAPublicKey pk = (RSAPublicKey) cert.getPublicKey();

        byte[] pkValue = pk.getEncoded() 

I will get as result (pkValue variable) array with additional 48bytes on the beginning. 
Why is that, Is my inicializatioin of CertificateFactory correct ?
(Current workaround for me is to remove first 48bytes from pkValue array. Then encryption with public key + decryption with private key works fine)
","Java stores the public keys in SubjectPublicKeyInfo structures. These structures are also present in the certificate. They are ASN.1 DER encoded.
RSA public keys consist of multiple (2) components anyway: the modulus and the public exponent. The modulus is already 2048 bits; it determines the key length. The public exponent is often set to the value ""F4"", the fourth number of Fermat, 0x010001. These need to be separated for a generic implementation to distinguish them.
More information in the X509 spec and you can have a look at your byte array returned by getEncoded (use hex or base64) here.
","82","<java><encryption><public-key-encryption><encryption-asymmetric><x509>","1","1","1","2014-10-17 10:12:35","","1","","589259","","2014-10-17 10:06:51","2014-10-17 08:42:02",""
"12714134","Where can I find a description of BrowserID local verification","The FAQ recommends I don't do local verification of BrowserID (persona) security assertions, however I've never been good at following instructions.  
So... I want to implement local verification anyway.  It looks like the only thing the client libraries pass to the server side is a block of encrypted stuff called an ""assertion"".   Presumably it is encrypted or signed using some public key encryption scheme, but I'm having trouble finding any details.
Can anyone explain it, or point me to the details?
","The spec is currently not up to date with the latest data format changes, but this Python library has the ability to verify Persona assertions by itself (i.e. not using verifier.login.persona.org):
http://pypi.python.org/pypi/PyBrowserID
","82","<encryption><public-key-encryption><browserid>","1","0","1","2012-10-04 20:26:49","12735339","1","","","","","2012-10-03 17:57:24",""
"52034146","PGP encryption and decryption in java","I have the public key which is shared by client for PGP file encrpytion.
I am using Java 1.7 and this question is very similar to this one. 
Unfortunately none of those solutions are working for me or outdated.
Can someone please share the working implementation or guide if they have any?
Code with comments is preferred. 
What i have done so far:
Tried implementating using BouncyCastle and OpenPGP API. 
Didn't succeed.
","","82","<java><public-key-encryption><pgp><openpgp>","2","","0","2018-08-27 08:41:03","","3","","7030357","","2018-08-27 08:41:03","2018-08-27 07:04:32","2018-08-29 02:23:09"
"29051736","Can I implement TLS by skipping some steps?","Is it possible to have a cut down implementation of TLS , where we just 
presume the server we are connecting to is trusted - after the server sends its
certificate, can we bypass verification of this and do away with any further
processing , and get right into standard http ? Is using public key encryption
something that is absolutely necessary , or can it be skipped ?
Rewording my question.
Is it possible to write a tls engine by skipping the need to use RSA public key
code ?, 
or
Can a client notify the server during the handshake that it just requires the severs certificate
info, company name, expiry dates and requests the secret cipher key to be sent in plain text.
","Skipping something in a protocol I don't fully understand is generally a bad idea. 
Only steps marked as optional in the RFC can be safely skipped.
Therefore if you don't plan to use client-side certificate based authentication you can skip it. 
However what you can do however is limit the number of variations in your implementation. This means support only one TLS version (e.g. TLS 1.2) and support only one dedicated cipher suite.
Anyway the pitfalls when implementing TLS are so numerous that I recommend you to use an existing implementation (e.g. implementing in a way that does not allow side channel attacks is not that simple and requires knowledge on that topic). There are other implementations beside OpenSSL with a much smaller footprint.
BTW: If you can presume the connection is trusted you don't need TLS. If you need TLS it should be a secure. 
","80","<ssl><https><public-key-encryption>","0","0","3","2015-03-26 21:56:33","29289634","1","","967007","","2015-03-17 15:06:58","2015-03-14 17:07:08",""
"29051736","Can I implement TLS by skipping some steps?","Is it possible to have a cut down implementation of TLS , where we just 
presume the server we are connecting to is trusted - after the server sends its
certificate, can we bypass verification of this and do away with any further
processing , and get right into standard http ? Is using public key encryption
something that is absolutely necessary , or can it be skipped ?
Rewording my question.
Is it possible to write a tls engine by skipping the need to use RSA public key
code ?, 
or
Can a client notify the server during the handshake that it just requires the severs certificate
info, company name, expiry dates and requests the secret cipher key to be sent in plain text.
","
where we just presume the server we are connecting to is trusted - after the server sends its certificate, can we bypass verification of this and do away with any further processing

The point of verification is less to find out if the server is trusted, but more that you are actually talking to the server you expect to. If you omit this step you are open to man-in-the-middle attacks.
But, TLS is a very flexible protocol and there are actually ways to use anonymous authentication or a shared secret with TLS and thus skip usage of certificates. Of course in this case you would need to have some other way to validate the server, because otherwise you would be still open to man-in-the-middle-attacks. And because this use case is mostly not relevant for the common usage on the internet it is usually not implemented inside the browsers.
","80","<ssl><https><public-key-encryption>","0","0","3","2015-03-26 21:56:33","29289634","1","","967007","","2015-03-17 15:06:58","2015-03-14 17:07:08",""
"29051736","Can I implement TLS by skipping some steps?","Is it possible to have a cut down implementation of TLS , where we just 
presume the server we are connecting to is trusted - after the server sends its
certificate, can we bypass verification of this and do away with any further
processing , and get right into standard http ? Is using public key encryption
something that is absolutely necessary , or can it be skipped ?
Rewording my question.
Is it possible to write a tls engine by skipping the need to use RSA public key
code ?, 
or
Can a client notify the server during the handshake that it just requires the severs certificate
info, company name, expiry dates and requests the secret cipher key to be sent in plain text.
","Ok, my question had been answered and discussed on SO before - it's
called a NULL/ZERO cipher :
Unencrypted SSL protocol?
","80","<ssl><https><public-key-encryption>","0","-1","3","2015-03-26 21:56:33","29289634","1","","967007","","2015-03-17 15:06:58","2015-03-14 17:07:08",""
"45587384","ssh (and git) authentication issues on external port/ip (local ip works fine)","I am trying to set up a git repository on a server machine that is remote-accessible over the internet.
I have succeeded in getting git working over local/internal IP addresses.  Within local LAN, I have private-key-based authentication working for SSH (password logins disabled), and I can clone, push, and pull successfully using Git and SSH, e.g.;
ssh USER@192.168.1.xxx
[-> accepts public key, gives me a remote console prompt as ""USER"", etc]

git clone git+ssh://USER@192.168.1.xxx//gitdir/project.git
[-> creates a local clone as desired, commits and push work, no problems seemingly]

However, I am now trying to access this machine via an external/internet IP in the same way, and I don't understand the behavior it's giving me.  

I have enabled port forwarding on my router for port 22 to the server machine.  
I have opened port 22 in software on ""UFW"" on the server machine.
As far as I can tell, I have no settings on my router, SSH configs, or UFW that would block any specific web address or otherwise cause problems on either my local machine or the server.  The server should accept a connection from any external address accessing via port 22, and both my local machine and the server allow outgoing connections in general.
I am using Ubuntu 17.04 on the local machine, if that matters. 
Both the server and the local machine are currently on the same LAN/connected to the same router.
I have DISABLED ""ChallengeResponseAuthentication"" and ""PasswordAuthentication"", and have ENABLED ""PubkeyAuthentication"" in my ""sshd_config"".  
I have quadruple-checked that I was using the correct IP, and used copy-paste rather than manual typing.  Unless I am truly missing something, I am attempting to connect to the correct machine.

For a direct SSH login, I get this (using the -v flag):
LOCALUSER@LOCALMACHINE:~$ ssh -v -i ~/.ssh/[PRIVATE_KEY] USER@[IP6_EXTERNAL_IP]
OpenSSH_7.4p1 Ubuntu-10, OpenSSL 1.0.2g  1 Mar 2016
debug1: Reading configuration data /home/[HOME]/.ssh/config
debug1: Reading configuration data /etc/ssh/ssh_config
debug1: /etc/ssh/ssh_config line 19: Applying options for *
debug1: Connecting to [IP6_EXTERNAL_IP] [[IP6_EXTERNAL_IP]] port 22.
debug1: Connection established.
debug1: identity file /home/[HOME]/.ssh/[PRIVATE_KEY] type 4
debug1: key_load_public: No such file or directory
debug1: identity file /home/[HOME]/.ssh/[PRIVATE_KEY]-cert type -1
debug1: Enabling compatibility mode for protocol 2.0
debug1: Local version string SSH-2.0-OpenSSH_7.4p1 Ubuntu-10
debug1: Remote protocol version 2.0, remote software version OpenSSH_7.4p1 Ubuntu-10
debug1: match: OpenSSH_7.4p1 Ubuntu-10 pat OpenSSH* compat 0x04000000
debug1: Authenticating to [IP6_EXTERNAL_IP] as 'USER'
debug1: SSH2_MSG_KEXINIT sent
debug1: SSH2_MSG_KEXINIT received
debug1: kex: algorithm: curve25519-sha256
debug1: kex: host key algorithm: ecdsa-sha2-nistp256
debug1: kex: server->client cipher: chacha20-poly1305@openssh.com MAC: <implicit> compression: none
debug1: kex: client->server cipher: chacha20-poly1305@openssh.com MAC: <implicit> compression: none
debug1: expecting SSH2_MSG_KEX_ECDH_REPLY
debug1: Server host key: ecdsa-sha2-nistp256 SHA256:[SHA_HASH]
debug1: Host '[IP6_EXTERNAL_IP]' is known and matches the ECDSA host key.
debug1: Found key in /home/[HOME]/.ssh/known_hosts:4
debug1: rekey after 134217728 blocks
debug1: SSH2_MSG_NEWKEYS sent
debug1: expecting SSH2_MSG_NEWKEYS
debug1: SSH2_MSG_NEWKEYS received
debug1: rekey after 134217728 blocks
debug1: SSH2_MSG_EXT_INFO received
debug1: kex_input_ext_info: server-sig-algs=<ssh-ed25519,ssh-rsa,ssh-dss,ecdsa-sha2-nistp256,ecdsa-sha2-nistp384,ecdsa-sha2-nistp521>
debug1: SSH2_MSG_SERVICE_ACCEPT received
debug1: Authentications that can continue: publickey,password
debug1: Next authentication method: publickey
debug1: Offering ED25519 public key: /home/[HOME]/.ssh/[PRIVATE_KEY]
debug1: Authentications that can continue: publickey,password
debug1: Next authentication method: password
USER@[IP6_EXTRNAL_IP]'s password: 

...and no password I supply works.  I don't know why the server is even asking for a password, I disabled password logins globally in ""sshd_config"", and I have triple-checked that there is no exception to that for this user, as well.
Git similarly asks for my remote user's password when I try to clone from the server via the external IP (because it's working through SSH of course), if I do the following to set it  to use an external IP, instead of the original local IP:
git remote set-url origin ssh+git://USER@[REMOTE_IP]//gitdir/project.git

Any help understanding what I'm missing here would be much appreciated; thanks.
","Figured it out:
I am unclear as to why, but my system does not like it when I try to access my server via an external public ip, from inside my own LAN.  I assume this is because of some kind of packet confusion as the local machine and the server machine share the same public ip via the router (confirmation on this would be appreciated).
When I tried to connect from another network, things worked correctly and as expected.  I am asked for my public key and immediately rejected with no password prompt if I don't supply the right one, and both SSH and git via SSH seem to work as desired over the internet after I change my repo source to use the public ip.  Any further details were covered by editing ~/.ssh/config to set key identities and hosts.
Marking as solved.  Thank you.
","80","<linux><git><networking><ssh><public-key-encryption>","0","0","1","2017-08-09 22:25:09","45601547","3","","7869130","","2017-08-09 12:17:58","2017-08-09 09:57:17",""
"50644831","Could stealing the private key compromise RSA security?","I am developing a windows desktop app where the clients applications need to download some data file from a public shared folder. in order to protect the data from tempering i would like to generate RSA private and public keys. keep the public key in my own machine at home and include the private key in all clients.
when i want to send a new file for the clients to download (at well) i hash the file and encrypt the hash with the public key and store it as .sig file alongside the data file in a public shared folder.
now if one of the client users is malicious he can steal the private key from his machine.
the question is : provided that the public key is secret and this is the only use of that key pair and i absolutely don't need any encryption on the data file. does stealing the private key from a client compromise my public key? i.e can the malicious user craft a file signature so that the data file appear to be coming from me?
","I belive you've designed this backwards.You want to send the public key to the clients and keep the private to yourself. The public key is public; anyone should be able to know it. The private key is private; only the owner should know it.
Rather than hashing the file and encrypting the hash with the public key, you want to sign the file with your private key and let the clients use the public key to verify the signature. The signing operation performs the same idea as your ""encrypt the hash"" but is the standard construction, and your RSA tools likely include a signing function.
","79","<encryption><rsa><public-key-encryption><encryption-asymmetric>","0","4","1","2018-06-01 13:53:51","50645003","1","","","","","2018-06-01 13:44:04",""
"57657948","C# JWT token, header property 'typ' value always JWT, instead of JWE","I'm using Microsofts libraries to create an encrypted JWT ( JWE ), using RSA public/private keys. I'm propably missing something on how to properly create the JWT, because the header 'typ' value is 'JWT' instead of 'JWE'.
    // Create JWT credentials
    var encryptingCredentials = new EncryptingCredentials(publicKey, 
        ""RSA-OAEP"", 
        ""A256CBC-HS512"");

    // Create JWT header
    var header = new JwtHeader(encryptingCredentials);

    // Create JWT payload
    var payload = new JwtPayload
    {
        ...
    };

    // Create JWT request string
    var securityToken = new JwtSecurityToken(header, payload);
    var handler = new JwtSecurityTokenHandler();
    var tokenString = handler.WriteToken(securityToken);

    // Final redirect url
    var url = $""https://some-external-service.com/oidc/authorize?request={tokenString}"";
    return Redirect(url);

The produced header ( after base64url decoding ) is as follows
    {
        ""alg"": ""RSA-OAEP"",
        ""enc"": ""A256CBC-HS512"",
        ""kid"": ""any.oidc-encryption-preprod.test.jwk.v.1"",
        ""typ"": ""JWT""
    }

When I compare this to a working reference example in python, the only difference is
""typ"": ""JWE""

Headers Typ property is read-only, and doing header[""typ""] = ""JWE"" doesn't change the output.
Receiving end produces server error 500, their python example works great so something is wrong with my JWT output.
Am I using System.IdentityModel.Tokens.Jwt libraries wrong?
","","79","<c#><encryption><jwt><public-key-encryption>","2","","0","2019-08-26 12:29:36","","6","","","","","2019-08-26 12:29:36",""
"45546252","RSA encryption difficulty","I'm writing a python script to encrypt/decrypt strings with RSA. I have no problems with the algorithm itself, but I don't understand how to use it correctly.
I mean, there is no point in encrypting every each symbol in a string separately. Because same symbols will give us same ciphers (like Caesar cipher). So I think I should divide the whole message into blocks of same length.
But it makes it difficult to decrypt the message. Because after you encrypt the blocks, the length of each block could change. So when decrypting, you don't know where a certaing blocks starts and where it ends.
For example, when I encrypt ""stronger"" with RSA I get:
5716225862
I divided the original message into 4 blocks of 4 symbols. But after encrypting I get a message of 10 symbols. And that's the problem.
Hope, you understand what I mean. Sorry for my bad English.
","Simply said, RSA is not for directly encrypting plain text, it is used for encrypting a symmetric key (AES, for instance), and this is with this symmetric key that you will encrypt (and further decrypt) your plain text.
Since the plain text may have any size, it is encrypted using AES with a stream cipher (for instance AES-256-GCM) or a block cipher (for instance AES-256-CBC).
With AES, same symbols will not give same ciphers, since you have to choose a new random IV (initialization vector) each time you encrypt your plain text.
So, you need to use a 2-steps encryption scheme: use RSA to encrypt a symmetric key, and use this symmetric key to encrypt your plain text.
","78","<encryption><rsa><public-key-encryption>","1","3","1","2017-09-04 18:19:32","","2","","8394518","","2017-08-07 11:55:31","2017-08-07 11:51:43",""
"21481659","Is An SSL Certificate Required for Secure Encryption","I can't find the answer to this question online:
I have set an apache server with mod_ssl, using the guide at the bottom here:
https://help.ubuntu.com/10.04/serverguide/httpd.html
I am only using this privately to login to PHPMyAdmin and other control panels.
Using only SSL, is my connection securely encrypted, so logins are not passed as plain text? Or do I need a self-signed certificate?
Google Chrome says there is a certificate, but that it does not match the URL and that it is not trusted.
","That tutorial says:

The default HTTPS configuration will use a certificate and key generated by the ssl-cert package. They are good for testing, but the auto-generated certificate and key should be replaced by a certificate specific to the site or server. 

This means, that's there's a default certificate involved. You should generate your own certificate for personal use and look for nasty things when it changes during your connections. You can do that with tools like OpenSSL. If you want to secure a public site, you would need to buy a certificate from a respected authority, so plain users wouldn't be bothered to add the certificate to their browsers and they would also not track if that thing changes.
","77","<ssl><encryption><ssl-certificate><public-key-encryption>","-1","1","1","2014-01-31 15:41:19","21483988","0","","","","","2014-01-31 13:48:37",""
"20809020","Assistance with Public Key Cryptography","I am trying to make my Server more secure, using public key cryptography. I'm not looking for examples on how this works, I understand it. I need help actually encrypting my strings that i'm sending...
So, currently, I'm simply making a public/private key string by taking the current nano time, and converting it into a hexidecimal string, 20 times. It makes an output like:
8ebe14df8ebe14df8ebe14df8ebe14df8ebe14df8ebe14df8ebe14df8ebe14df8ebe14df8ebe14df8ebe14df8ebe14df8ebe14df8ebe14df8ebe14df8ebe14df8ebe14df8ebe14df8ebe14df8ebe14df

which is fine. But how would i encrypt my message, say ""hi"", with this key? I've tried converting both into binary, and multiplying them, but then i couldnt un-convert them, because to do that, there have to be spaces in the binary number, but to multiply them, there cant be. can anyone help me?
Thanks in advance!
Also, let me know if you need any more info!
","It's not just an issue of formatting or playing with binary or hexadecimal numbers here. You don't make a public/private key the way you suggested, as it wouldn't have the necessary cryptographic properties that public/private keys usually have. Also, using the current time in nano s is hardly worthy of being used as any kind of an encryption key. If you want to do this in Java, there are libraries that can do public key crypto for you, such as BouncyCastle (http://bouncycastle.org/). It's quite easy to use and implement some amount of cryptographic security into your application with it.
","77","<java><string><binary><type-conversion><public-key-encryption>","3","2","2","2013-12-27 23:13:55","20809114","0","","1737813","","2013-12-27 23:08:55","2013-12-27 23:03:09",""
"20809020","Assistance with Public Key Cryptography","I am trying to make my Server more secure, using public key cryptography. I'm not looking for examples on how this works, I understand it. I need help actually encrypting my strings that i'm sending...
So, currently, I'm simply making a public/private key string by taking the current nano time, and converting it into a hexidecimal string, 20 times. It makes an output like:
8ebe14df8ebe14df8ebe14df8ebe14df8ebe14df8ebe14df8ebe14df8ebe14df8ebe14df8ebe14df8ebe14df8ebe14df8ebe14df8ebe14df8ebe14df8ebe14df8ebe14df8ebe14df8ebe14df8ebe14df

which is fine. But how would i encrypt my message, say ""hi"", with this key? I've tried converting both into binary, and multiplying them, but then i couldnt un-convert them, because to do that, there have to be spaces in the binary number, but to multiply them, there cant be. can anyone help me?
Thanks in advance!
Also, let me know if you need any more info!
","Take a look at this example: http://stilius.net/java/java_ssl.php
Don't try to invent your own cryptographic algorithm, I know that it sounds interesting but it's also not very safe. Try to use already implemented algorithms and protocols. I suggest you to take a look at the link. Though if you do this just for the fun of it then go ahead, if it's for a client or for something that others (than you at least) use then stick to the known protocols.
","77","<java><string><binary><type-conversion><public-key-encryption>","3","2","2","2013-12-27 23:13:55","20809114","0","","1737813","","2013-12-27 23:08:55","2013-12-27 23:03:09",""
"20957448","Time & device limited licensing","I need to add a license to my application to limit time & device that my app. can be used.
So I thought to store HDD and/or NIC serial numbers and expire date in my license file.
Now how can I protect my license in a way that:  

My application be able to decrypt it and read & check the expire date and serials 
User shouldn't be able to create a license file for himself.

Can I use public/private key encryption to achieve this?  
If I can use public/private key encryption can the user that has private key (for decryption) use that private key for encryption (making a license manually using the private key that be able to decrypt using that private key) or only the pubic key can encrypt in a way that private key decrypt it?  
Is there a better solution?
","Usually a license contains this kind of information (count, dates, etc) in human readable format so your customer can verify them. You then add a signature using your private key so licenses cannot be forged / changed. 
Your app can now use the public key (that is built into it) to verify the license, even if someone can read that key they cannot produce valid licenses. [until they replace the public key in your app with their own]
","77","<encryption><licensing><public-key-encryption><encryption-asymmetric>","0","0","1","2014-02-18 10:12:13","","4","","","","","2014-01-06 19:12:16",""
"56026163","Can't verify RSA signature with pycryptodome","I'm trying to sign a message in Android, then send the message, signature and public key to a Django server for verification. I'm using pycryptodome on the server to verify, but verification always fails - problem is I have no idea which bit I'm doing wrong.
This is what I'm doing on Android:
Generate an RSA public private key
val keyPairGenerator = KeyPairGenerator.getInstance(""RSA"", ""AndroidKeyStore"")

val certStart = Calendar.getInstance()
val certEnd = Calendar.getInstance()
certEnd.add(Calendar.YEAR, 30)

val spec = KeyPairGeneratorSpec.Builder(context)
     .setAlias(""MyKeyAlias"")
     .setKeySize(1024)
     .setSubject(X500Principal(""CN=CryptoIsHard""))
     .setSerialNumber(BigInteger.ONE)
     .setStartDate(certStart.time)
     .setEndDate(certEnd.time)
     .build()

 keyPairGenerator.initialize(spec, SecureRandom.getInstance(""SHA1PRNG""))
 keyPairGenerator.generateKeyPair()

Sign a message using the private key, encode signature as base64
val message = ""some message""
val keystoreEntry = keyStore.getEntry(""MyKeyAlias"", null) as KeyStore.PrivateKeyEntry
val signer= Signature.getInstance(""SHA256withRSA"")
signer.initSign(keystoreEntry.privateKey)
signer.update(message.toByteArray(Charsets.UTF_8))
val signature = Base64.encodeToString(signature.sign(), 0)

Extract the public key as base64
val keystoreEntry = keyStore.getEntry(KEY_ALIAS, null) as KeyStore.PrivateKeyEntry
val publicKey = Base64.encodeToString(keystoreEntry.certificate.publicKey.encoded, 0)

Send the message, signature (base64) and public key (base64) to server
Try to verify the signature
Then on the server (using Python 3, Django 1.11, pycryptodome 3.8.1), I receive the message, signed message, and public key:
from Crypto.PublicKey import RSA
from Crypto.Signature import PKCS1_v1_5
from Crypto.Hash import SHA256

def verify_signature(request):

    response_dict = json.loads(str(request.body, encoding='utf-8'))
    public_key = str(response_dict ['publicKey'])
    signed_message = str(response_dict ['signedMessage'])
    message = str(response_dict ['message'])

At this point I have something like this:
print(public_key)

MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCkmWj9+FLqpCRl35Ac8mFqfJx390kgvhQzNXPp
8/OWqsLitbCQYtw3/sEY60Cz04A3onZNh8iwSms8iZLSZh9Y23/AhSyBXw7XVtCwXQfuZagMwPV2
OhZZGGC8IOsqUOnRswa9L2/SI1i5HQQNqcZ+Su1Po/Xr2+opKps+gHDmPwIDAQAB

print(signed_message)

mdlasq+sN2Hdi+qBTWp6EjMBGYQCCdTSuQlrPozoA3J6dwW0cTXbp7YefD2JlLp8pXkMfYmTivsN
dAKkY/dHEAfUm4YuvaBz72ogwFx8px20JQ0OKVO03FjcZuw1jAGYUrEt8eswTHfmN8yJ/lDVsUlb
UYe/VcD6O/0YWrXGPrI=

Then I try to verify like so:
formatted_public_key = ""-----BEGIN RSA KEY-----\n{}-----END RSA KEY-----"".format(public_key)
rsa_public_key = RSA.importKey(formatted_public_key)
signature = PKCS1_v1_5.new(rsa_public_key)
digest = SHA256.new()
digest.update(message.encode())

verified = signature.verify(digest, signed_message.encode())

This always fails, and I can't figure out why. Some questions:

I've surrounded the public key with ""-----BEGIN RSA KEY-----"" and ""-----END RSA KEY-----"" - is that right? Without doing that I got an error about the RSA key format being invalid
My private key and signed message both have line breaks in them - should I remove these? I've tried with and without them, it doesn't seem to make a difference but would appreciate any advice
PyCharm complains about signature.verify(digest, signature.encode()):

Expected type ModuleType, got SHA256Hash instead.


The docs say digest should be a type from Crypto.Hash, and I'm using Crypto.Hash.SHA256Hash, so why is PyCharm complaining? Can I ignore?

I'm using pycryptodome's PKCS1_v1_5 class to create a signature verifier. I have no idea what that is, I'm just following code I've seen on SO. Is it the right thing to use?
I'm using the algorithm ""SHA256withRSA"" to sign on android, and on the server using PKCS1_v1_5 with an RSA key and passing in a SHA256 hash of the message. I have very little understanding of all these standards. Does this sound right?

I have no idea where to go form here, any suggestions appreciated!
","I figured it out - I had forgotten that the signature had been encoded to base64 on the Android side, so needs to be decoded on the server side. So changing this:
signature.verify(digest, signed_message.encode())

to:
signature.verify(digest, base64.b64decode(signed_message))

Resolves the problem :)
","76","<rsa><public-key-encryption><signing><android-keystore><pycryptodome>","0","1","1","2019-05-07 15:52:43","","0","","","","","2019-05-07 15:40:53",""
"24696055","Does the *.p12 file or the *.pem file contains the url of the Certificate Authority?","My understanding regarding the https protocol is the publickey of the web server which needs to be visited should be received from the Central Authority like verizon.
If that is the case then the url of the central authority must be present in the pem file which the browser holds. But there is no information regarding the url of the CA. Then how does the browser gets the public key of the web server it wants to visit.
","","75","<ssl><encryption><https><public-key-encryption>","0","","0","2014-07-11 10:55:25","","6","","","","","2014-07-11 10:55:25",""
"53447344","CipherInputStream .available() returns ZERO in decryption phase","I'm trying to use encryption tools  flexiprovider in my android app by using the example provided for ECIES. When I run the code in my local machine Enc/Dec work without any problem. But when I'm trying to run it as an android app using the android studio, the decryption doesn't work.
The Main Activity.java
 public void onClick12 (View view) {
        ExampleECIES exampleECIES=new ExampleECIES();
        try {
            exampleECIES.main(null);
        } catch (Exception e) {
            Log.e(""main()"",e.getMessage());

        }
    }

Encryption scheme:
package com.example.enctest3;
import android.Manifest;
import android.support.v4.app.ActivityCompat;
import android.util.Log;

import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.SecureRandom;
import java.security.Security;

import javax.crypto.Cipher;
import javax.crypto.CipherInputStream;
import javax.crypto.CipherOutputStream;

import de.flexiprovider.common.exceptions.ECException;
import de.flexiprovider.common.ies.IESParameterSpec;
import de.flexiprovider.core.FlexiCoreProvider;
import de.flexiprovider.ec.FlexiECProvider;
import de.flexiprovider.ec.parameters.CurveParams;
import de.flexiprovider.ec.parameters.CurveRegistry.BrainpoolP160r1;

public class ExampleECIES {

public static void main(String[] args) throws Exception {

    Security.addProvider(new FlexiCoreProvider());
    Security.addProvider(new FlexiECProvider());

    KeyPairGenerator kpg = KeyPairGenerator.getInstance(""ECIES"", ""FlexiEC"");

    CurveParams ecParams = new BrainpoolP160r1();

    kpg.initialize(ecParams, new SecureRandom());
    KeyPair keyPair = kpg.generateKeyPair();
    PublicKey pubKey = keyPair.getPublic();
    PrivateKey privKey = keyPair.getPrivate();

    // Encrypt

    Cipher cipher = Cipher.getInstance(""ECIES"", ""FlexiEC"");

    IESParameterSpec iesParams = new IESParameterSpec(""AES128_CBC"",
            ""HmacSHA1"", null, null);

    cipher.init(Cipher.ENCRYPT_MODE, pubKey, iesParams);
    String cleartextFile =     ""/storage/emulated/0/Android/data/enctest3/files/cleartext.txt"";
    String ciphertextFile = ""/storage/emulated/0/Android/data/enctest3/files/ciphertextECIES.txt"";
    byte[] block = new byte[64];
    FileInputStream fis = new FileInputStream(cleartextFile);
    FileOutputStream fos = new FileOutputStream(ciphertextFile);
    CipherOutputStream cos = new CipherOutputStream(fos, cipher);
    int i;
    while ((i = fis.read(block)) != -1) {
        cos.write(block, 0, i);
    }
    cos.close();
    fos.close();
    fis.close();
    // Decrypt

    String cleartextAgainFile = ""/storage/emulated/0/Android/data/enctest3/files/cleartextAgainECIES.txt"";

    cipher.init(Cipher.DECRYPT_MODE, privKey, iesParams);
    fis = new FileInputStream(ciphertextFile);

    CipherInputStream cis = new CipherInputStream(fis, cipher);
    fos = new FileOutputStream(cleartextAgainFile);
    int x=cis.available();
    Log.e(""available()"",Integer.toString(x));
    while ((i= cis.read(block)) != -1) {
        fos.write(block, 0, i);
    }

    fos.close();
}

}

And here is the log:
 E/available(): 0
 E/main(): src.length=17 srcPos=0 dst.length=0 dstPos=0 length=17

The post here that is similar to my problem did not help.
","I tried running the app on another machine with a virtual device and it worked without any problem.
","74","<java><android-studio><public-key-encryption>","1","0","1","2018-11-23 21:38:31","53453195","0","","10690704","","2018-11-23 13:27:28","2018-11-23 13:09:45",""
"56651420","How to counter the exception ""Not a JKS or JCEKS keystore (magic number wrong; expected FEEDFEED or CECECECE)""","I am using pyjks to read a jks file and find private key for further encryption. It is quite easy in Windows system but I am not able to figure out what should be done if we are on linux environment. I have a self-signed certificate, from that I have extracted private key and public certificate. Now I need to store it in keystore of linux, that java keystore will further be read by a python script to fetch private key and do the decryption.
openssl pkcs12 -export -in private.crt -inkey server.key -out ks.p12

keytool -importkeystore -deststorepass psswrd -destkeystore msnew.jks -deststoretype JKS -srckeystore ks.p12 -srcstoretype PKCS12

Python Code:
keystore = jks.KeyStore.load('/home/ikscare/Documents/Projects/Subu/crypto/msnew.jks', passphrase)

Exception thrown is : BadKeystoreFormatException: Not a JKS or JCEKS keystore (magic number wrong; expected FEEDFEED or CECECECE)
","","74","<keystore><public-key-encryption><jks><pyjks>","0","","0","2019-06-19 11:48:08","","0","","9715752","","2019-06-19 11:48:08","2019-06-18 14:28:25",""
"44577699","Retrieve public key by providing KeyID for encryption","Can I retrieve public key by providing keyID.( I have imported the public key using kleopatra) 
Note:
I  am currently passing the public key file path to encrypt the stream.I am successfully encrypting the stream without any issues using BountyCastle nuget package.
I have tried this:
  PgpPublicKeyRingBundle bun = new PgpPublicKeyRingBundle(new byte[200]);
  var publicc = bun.GetPublicKey(long.Parse(""12ERTY564""));

Update:
The above is test KeyID.
","","74","<c#><encryption><bouncycastle><gpgpu><public-key-encryption>","0","","0","2017-06-19 14:58:46","","3","","2526236","","2017-06-19 14:58:46","2017-06-15 21:59:54",""
"32036972","what is the best method to transmit a public private key pair when the recipients initially have neither?","what is the best method to transmit a public private key pair when the recipients initially have neither, diffie-hellman is one such method but susceptable to man in the middle attacks what other methods are available? most information appears to suggest parties already have a secret key
","public key / private key encryption was designed to deal with just this problem.
both parties can freely exchange only their public keys for the other to encrypt outgoing messages with.
Man in the middle attacks can only occur in the sense that a 3rd party can generate messages as either party but can decrypt neither (as they would need the private keys).
A complete secure exchange to eliminate man in the middle might go like this:

both parties exchange public keys
party A sends a message with a random number contained within it
party B decrypts the random number and replies with the same number encrypted for party A.
when party A gets the same number back, they can be sure that no man in the middle attack has occurred.
all messages will continue to use the number as proof of who the message came from.   

TLS uses a more complicated version of this scheme for it's handshake: https://en.wikipedia.org/wiki/Transport_Layer_Security#TLS_handshake
","73","<public-key-encryption>","0","0","1","2015-08-16 16:36:27","","0","","","","","2015-08-16 15:43:26",""
"51068775","Directory(Path) of Android Keystore in an android phone","KeyPairGenerator keyGen = KeyPairGenerator.getInstance(KeyProperties.KEY_ALGORITHM_EC, ""AndroidKeyStore"");
        keyGen.initialize(new KeyGenParameterSpec.Builder(
                ""Authentication_Key"" + username,
                KeyProperties.PURPOSE_SIGN | KeyProperties.PURPOSE_VERIFY)
                .setDigests(KeyProperties.DIGEST_SHA256, KeyProperties.DIGEST_SHA512)
                .setKeySize(521)
                .setKeyValidityStart(from)
                .setKeyValidityEnd(to)
                .build());
        KeyPair keyPair = keyGen.generateKeyPair();

In the above code, the key pair is saved in the Android KeyStore. Does someone know where does the keystore save these keys in the android phone. I have a rooted android phone so I was wondering if these keys can be accessed from some directory in an android phone.
Basically I am looking for the path of Android Keystore in an android phone.
","As answered by Gebe, its in the hardware and that is why it is so secured.
","73","<java><android><keystore><public-key-encryption><android-keystore>","0","0","1","2018-07-03 20:08:17","51162172","2","","","","","2018-06-27 17:51:54",""
"40044038","Encrypt in Android and Decrypt in NodeJS (Asymmetric Encryption)","How to Encrypt in Android and Decrypt in NodeJS (Asymmetric Encryption)
I want to Send Encrypted String from android and Decrypt in NodeJS using Asymmetric Encryption
","","73","<android><node.js><public-key-encryption>","0","","0","2016-10-14 16:47:36","","2","","1816580","","2016-10-14 16:47:36","2016-10-14 13:09:47",""
"13461844","One text encrypted with multiple keys. Is it secure?","Let's say i have one plaintext and i encrypt it with different keys (each on its own). Is it possible to find the plaintext from these encrypted ciphers or how hard is it to resample the text?
Does this even make sense, especially in respect to asymmetric-encryption?
For example:
    VALUE     KEY         CIPHER
    ""abc""  +  ""key1""  ->  ""izwer""
    ""abc""  +  ""key2""  ->  ""werio"" 
    ""abc""  +  ""key3""  ->  ""nbmdi""
    ""abc""  +  ""key4""  ->  ""oiuuw""

","The best known example of an attack against asymmetric encryption with multiple keys is
Hastad's broadcast attack against RSA.
This is of course one of the motivations to use a properly designed padding scheme.
","72","<encryption><public-key-encryption><encryption-asymmetric>","0","1","1","2018-06-26 04:20:28","","1","","1033581","","2018-06-26 04:20:28","2012-11-19 20:41:18","2014-03-10 09:06:36"
"58095139","Is it safe to store sha256 hash of the original unencripted file that is to be stored in encrypted form?","I am working on a document management system and in order to detect changes in files/duplicates of files I am using sha256 to get the digests for comparison. This is being done in python. The system can be configured to encrypt the files before storage.
The question is whether it is still safe to store the digest for the unencrypted file.
This digest is used as an identifier for the stored files and is also used to detect if the file being added to the system already exists. I am okay with the chance of collision of sha256 algorithm for this purpose. I have also read that the digest produced by sha256 cannot be used to recreate the original data.
Assuming the file cannot be reconstructed from the hash and the fact that the file is stored in encrypted form, it should be safe to keep the original hash for comparisons/searching right... or should I rethink my strategy? these comparisons are going to be internal to the application and will not be exposed to the user in anyway.
","Preimage resistence of SHA-256 is 2^256, and collision resistance is 2^128 (brief summary). On the other hand, you can simply check the number of combinations needed to guess the key to decrypt the file. SHA-256 preimage attack complexity is comparable to cracking 256-bit key for symmetric encryption. So, in general, I'd say, this approach is secure enough, because it's easier to restore the original file by guessing the key rather than finding preimage from SHA-256. 
Would be good to know which algorithm and parameters you're going to use for file encryption, maybe in your case the answer would be different.
","71","<python><encryption><public-key-encryption><sha256><hashlib>","3","1","1","2019-09-25 09:56:09","58095767","7","","","","","2019-09-25 09:19:07",""
"34151583","ActiveMQ without client authentication. Is the Keystore needed on the client side?","I am using ActiveMQ without client authentication. Do I need the keystore in the client side? I'm asking this question because according to the documentation it seems that the keystore is needed on the client side. But if we are not doing client authentication, what is the use of such a keystore?
","You don't necessarily need a key store if you aren't doing client authentication but you still need the trust store as your client needs to know if it has connected to a trusted broker.  
","71","<ssl><activemq><public-key-encryption>","1","2","1","2015-12-08 15:11:41","34159357","0","","","","","2015-12-08 08:54:48",""
"6139611","Checking my understanding of Public Key Encryption and question about size of algorithm implementations","I have a question about public key encryption if the the following example of how things play out is essentially correct. Then I wonder where I can find the implementations of the three algorithms which I call KG1, EA1, and DA1 and about how many lines of code each is.
Alice wants to get messages securely. She uses a key generation algorithm KG1 to create private key ""C2A836B33FF1E"" and public key ""35B1AC692"" and publishes the public key to the world.
Bob puts the input of his message ""HELLO FROM BOB"" and the public key  ""35B1AC692"" into encryption algorithm EA1 which yields the string ""DF1537532CB23B"" and sends this string to Alice. Chuck intercepts a copy too.
Alice has a decryption algorithm DA1 that can take as input the string ""DF1537532CB23B"" and her private key ""C2A836B33FF1E"" and yield output ""HELLO FROM BOB"", but since Chuck doesn't have the private key ""C2A836B33FF1E"", he can't convert ""DF1537532CB23B"" into ""HELLO FROM BOB"". Also, though Chuck knows the KG1 algorithm and the public key ""35B1AC692"", he can't use this information to work back to the private key.
","Yep that's pretty much it. Note that it is not completely correct to say that Chuck can't decrypt the message, but rather he can't do it easily with known mathematical methods. The reason for this is that the key generation algorithms rely on what are known as one-way functions. These are functions that are relatively easy to compute for a given input, but very difficult to work back from the output. 
An example of a one way function is multiplying two large prime numbers together; the multiplication is easy, but finding the prime factors again is very difficult, barring some new mathematical breakthrough.
As to the implementations of the methods, they vary depending on the exact encryption scheme being used. One of the earlier and better known public key encryption schemes is RSA. There are detailed steps on all three of key generation, encryption, and decryption here.
","71","<implementation><public-key-encryption>","0","1","2","2011-06-08 01:34:46","6139857","0","","82320","","2011-06-08 01:34:46","2011-05-26 13:51:16",""
"6139611","Checking my understanding of Public Key Encryption and question about size of algorithm implementations","I have a question about public key encryption if the the following example of how things play out is essentially correct. Then I wonder where I can find the implementations of the three algorithms which I call KG1, EA1, and DA1 and about how many lines of code each is.
Alice wants to get messages securely. She uses a key generation algorithm KG1 to create private key ""C2A836B33FF1E"" and public key ""35B1AC692"" and publishes the public key to the world.
Bob puts the input of his message ""HELLO FROM BOB"" and the public key  ""35B1AC692"" into encryption algorithm EA1 which yields the string ""DF1537532CB23B"" and sends this string to Alice. Chuck intercepts a copy too.
Alice has a decryption algorithm DA1 that can take as input the string ""DF1537532CB23B"" and her private key ""C2A836B33FF1E"" and yield output ""HELLO FROM BOB"", but since Chuck doesn't have the private key ""C2A836B33FF1E"", he can't convert ""DF1537532CB23B"" into ""HELLO FROM BOB"". Also, though Chuck knows the KG1 algorithm and the public key ""35B1AC692"", he can't use this information to work back to the private key.
","You got things right. The main problem caused by this scheme is ""How can Bob be sure that the public key he got from ""the world"" is Alice's public key, and not Chuck's public key? Indeed, if it were Chuck's public key, Chuck would be able to decrypt the message Bob sends to Alice. 
This is resolved by certificates. Every participant has a copy of the public key of well-known and trusted certificate authorities. When Alice want to publish it public key to the world, she pays one of these authorities to get a certificate, containing her public key. When getting a certificate, everyone can verify, with the authority's public key, that the certificate hasn't been corrupted, and so be sure that the public key is Alice's public key, and not Chuck's. 
The basic process of certification is a cryptographic signature : the certificate authority encrypts some data with its private key. When you have the data, its signature, and the authority's public key, you may verify that decrypting the signature with the authority's public key leads to the original data.
RSA is a de facto standard, and is available in many languages and platforms. You shouldn't reimplement it yourself.
","71","<implementation><public-key-encryption>","0","1","2","2011-06-08 01:34:46","6139857","0","","82320","","2011-06-08 01:34:46","2011-05-26 13:51:16",""
"34409845","What is correct way of authenticating and authorizing using cookie MVC asp.net?","I am making a custom login module for my application. I am using cookies to set the authentication and check cookie for authorization.
Now i want to set cookie, details are given below:

I will create a cookie with http only
Next i will use private and public key concept, public key will be encoded and added to cookie Values with a time stamp and username all encoded.
I think i will encode like below:
private static byte[] GenerateDigitalSignature(byte[] data,RSAParameters asymmetricKey)
{
    using (var rcsp = new RSACryptoServiceProvider())
    using (var cp = new SHA1CryptoServiceProvider())
    {
        rcsp.ImportParameters(asymmetricKey);

        return rcsp.SignData(data, cp);
    }
}

And then upon login request i will decode it using the Private key and if the user is Authorize then i will allow the user to show the page.
Right Now i am thinking to put my private and public key in web.config.

Can you please guide me is this correct implementation for login and setting cookie.
Also can you put an example to set cookie with three parameters viz. Public key, Datetime and UserName and decode it using private key
I am setting my cookie like below:
System.Web.HttpCookie loginCookie1 = new System.Web.HttpCookie(""loginCookie"");
    Response.Cookies[""loginCookie1""].Values = new Dictionary<String, String>()
                        {
                            {""PublicKey"", ""Abc""},
                            {""DateTime"", DateTime.Now.ToString()}
                        };

It is giving me error though, it is conversion error.
Dictionaty<string,string> to NameValueCollection

Thank you
","","69","<asp.net-mvc><cookies><encryption><public-key-encryption><private-key>","0","","0","2015-12-22 07:30:04","","8","","5429775","","2015-12-22 07:30:04","2015-12-22 06:37:24",""
"18170432","Print out server's own public key using PHP","I want to print out my own server's public key using PHP.
So what i want is that a php file that echoes the public key of the server it is being hosted on. Is there a pre-built function for it ?
thanks
","well I am not aware of any pre-built function that does that. To answer your question correctly, you should provide more information about the server and especially what you mean by your server's public key. Any server can generate as many SSH key-pairs as he likes.
Just a guess that might help you: Look in the .ssh folder. If there is a file called id_rsa.pub, I would go for that one. Then use a pre-build PHP function to read the contents of that file.
Cheers
","69","<php><public-key-encryption>","0","0","2","2013-08-11 09:41:08","","3","","","","","2013-08-11 09:12:50",""
"18170432","Print out server's own public key using PHP","I want to print out my own server's public key using PHP.
So what i want is that a php file that echoes the public key of the server it is being hosted on. Is there a pre-built function for it ?
thanks
","Run your script from the folder required and use file_get_contents like this

$content = file_get_contents(""yourkey.extension"");

echo $contents; // Wherever you need this in your script

If you mean SSL key decryption then see openssl_private_decrypt function.
Hope that helps :)
","69","<php><public-key-encryption>","0","0","2","2013-08-11 09:41:08","","3","","","","","2013-08-11 09:12:50",""
"53657658","How to use JWTCreator.Builder for looping around claims ? JWT TOKEN","I have a below json 
  {
    ""status"" : ""oky""
    ""properties"" : ""[
    {
    ""name"" : ""x""
    ""value"" : ""y""
    },
    {
    ""name"" : ""a""
    ""value"" : ""b""
    }
      ]""
}

Can someone pls let me know how to create below JWT from this json : 
{
""iat"" : ""123141242"",
""status"" : ""okay"",
""x"" : ""y"",
""a"" : ""b""
}

I am looking for an option to loop around and create separate claims for each property.
Has anyone ever split the token using JWTCreator.Builder ?
JWTCreator.Builder j =JWT.create()
                     .withIssuedAt(Date.from(Instant.now()));

//    Looping around the following
JWTCreator.Builder j =JWT.create()
                     .withClaim(properties.getName(), properties.getValue());

how to club these two JWTCreator.Builder now ?
","","68","<java><encryption><jwt><token><public-key-encryption>","0","","0","2018-12-06 18:32:51","","0","","","","","2018-12-06 18:32:51",""
"50424928","Encrypt a message using a public key in a file using openssl (virtualbox)","I have a question regarding the public key encryption. I have the public key of X and want to encrypt the message in the file message.txt using the public key of X stored in the file X.pub using openssl. I'm currently using virtualbox. 
I'm not sure how to import the public key of X. Any help is much appreciated.
Thanks.
","I guess you have messed with your ssh public key.
If I am not wrong, regenerates it as PEM :      
 openssl rsa -in <your ssh private key> -pubout -out X.pub.pem

and then encode your message with this public key :
openssl rsautl -in message.txt -out encmessage.txt -pubin -inkey X.pub.pem -encrypt

","67","<openssl><virtualbox><public-key-encryption>","0","0","1","2018-05-25 12:40:24","","5","","","","","2018-05-19 11:45:30",""
"58055494","Java: Converting between Key type and String","Is it possible to take a public key that I have generated, convert it into a string, reverse the process and use it as a key again?
    generator = KeyPairGenerator.getInstance(""RSA"");
    generator.initialize(2048);

    KeyPair keyPair = generator.generateKeyPair();

    RSAPublicKey publicKey = (RSAPublicKey) keyPair.getPublic();
    RSAPrivateKey privateKey = (RSAPrivateKey) keyPair.getPrivate();

Then convert this to a string:
String public = someMethod(publicKey)

and then Reverse it at a later time:
RSAPublicKey newPublicKey = someMethod(public)

","You can convert the Public Key to a String as follows.
String publicKeyString = Base64.getEncoder().encodeToString(publicKey.getEncoded());

Then that String can be converted back to a public key as follows.
byte[] publicKeyBytes = Base64.getDecoder().decode(publicKeyString);
X509EncodedKeySpec spec = new X509EncodedKeySpec(publicKeyBytes);
KeyFactory keyFactory = KeyFactory.getInstance(""RSA"");
PublicKey publicKey2 = keyFactory.generatePublic(spec);

","67","<java><rsa><public-key-encryption>","0","2","1","2019-09-23 06:03:25","58055900","0","","","","","2019-09-23 04:00:12",""
"58584152","Encrypting a data with a public key using pkcs11 module fails","I am using Python's pkcs11 package to access an X.509 certificate stored on my Yubikey 5. Accessing the certificate, public and private keys using pkcs11 Objects work fine as is signing and signature verification. Howerver, for the life of me, I cannot figure out why encrypting with the public key does not work. Here is my code:
import pkcs11
from pkcs11 import Attribute, ObjectClass, KeyType, util
lib = pkcs11.lib('/usr/lib/x86_64-linux-gnu/pkcs11/onepin-opensc-pkcs11.so')
token = lib.get_token(token_label='PIV Card Holder pin (PIV_II)'
session = token.open(user_pin=pin)
# Getting a private and a public key as pkcs11 Object
private = next(session.get_objects({
    Attribute.CLASS: ObjectClass.PRIVATE_KEY, 
}))
public = next(session.get_objects({
    Attribute.CLASS: ObjectClass.PUBLIC_KEY, 
}))
data = 'Hello, world!'
sig = private.sign(data) # Works!
sig_verif = public.verify(data, sig) # Works!
print(""Signature is valid? ""+str(sig_verif)) # True
# So far, everything above worked fine.
# ----------
# Now, this is the part that does not work
encrypt_data = public.encrypt(data) # Fails!

The last line above fails with pkcs11.exceptions.FunctionNotSupported error. I did some research, and it the explanation I found seems to imply that this function (encrypt) is not supported by the openSC library file (*.so) that I am using. However, I find it hard to believe considering that signature feature works just fine. 
Just to make sure that I can use this particular public key outside of session context, I tried the following code using Crypto package:
from Crypto.Cipher import PKCS1_OAEP
public_key = RSA.importKey(public[Attribute.VALUE]) # The content of pkcs11 public key as DER
cipher = PKCS1_OAEP.new(public_key)
encr_data = cipher.encrypt(data) # This works!

So, it seems that using my stand-alone public key allows me to encrypt data. But why can't I do it in the context of a pkcs11 token session? 
Then, I tried using the pkcs11 Object decrypt function to try to decrypt the data generated using Crypto module above:
decrypted = private.decrypt(encr_data) # It fails!

The above failed with pkcs11.exceptions.MechanismInvalid error. I tried using different mechanisms, but all of them resulted in the same error. What is interesting -- it seems that pkcs11 object allows me to at least invoke decrypt function without complaining that it is not supported. 
One more thing I should mention. I checked my certificate and saw that under Extension -> Certificate Key Usage, it says:
Critical
Signing
Key Encipherment

I read on the difference between key encipherment and data encipherment and learned that key encipherment is used to encrypt a secret (symmetric) key instead of data. Can it be the reason I can't use encrypt function for this token session? 
Any feedback would be greatly appreciated! 
","I'm sorry, but I think this is just a shortcoming of the API. As encryption with the public key doesn't require any security, it doesn't make sense to implement it on the Yubikey. It is much faster to export the public key values and perform the encryption on the host.
To be fair, Yubikey could have been nice and implement the functionality in software within the Ubikey PKCS#11 library. If you really want to then you could create a new PKCS#11 ""wrapper"" library that does contain the missing functionality in software; all other commands that Yubikey does implement can be forwarded to the original Yubikey PKCS#11 library.
","67","<python><smartcard><public-key-encryption><pkcs#11><opensc>","2","1","2","2019-10-30 19:36:22","58628476","2","2","","","","2019-10-27 23:10:49",""
"58584152","Encrypting a data with a public key using pkcs11 module fails","I am using Python's pkcs11 package to access an X.509 certificate stored on my Yubikey 5. Accessing the certificate, public and private keys using pkcs11 Objects work fine as is signing and signature verification. Howerver, for the life of me, I cannot figure out why encrypting with the public key does not work. Here is my code:
import pkcs11
from pkcs11 import Attribute, ObjectClass, KeyType, util
lib = pkcs11.lib('/usr/lib/x86_64-linux-gnu/pkcs11/onepin-opensc-pkcs11.so')
token = lib.get_token(token_label='PIV Card Holder pin (PIV_II)'
session = token.open(user_pin=pin)
# Getting a private and a public key as pkcs11 Object
private = next(session.get_objects({
    Attribute.CLASS: ObjectClass.PRIVATE_KEY, 
}))
public = next(session.get_objects({
    Attribute.CLASS: ObjectClass.PUBLIC_KEY, 
}))
data = 'Hello, world!'
sig = private.sign(data) # Works!
sig_verif = public.verify(data, sig) # Works!
print(""Signature is valid? ""+str(sig_verif)) # True
# So far, everything above worked fine.
# ----------
# Now, this is the part that does not work
encrypt_data = public.encrypt(data) # Fails!

The last line above fails with pkcs11.exceptions.FunctionNotSupported error. I did some research, and it the explanation I found seems to imply that this function (encrypt) is not supported by the openSC library file (*.so) that I am using. However, I find it hard to believe considering that signature feature works just fine. 
Just to make sure that I can use this particular public key outside of session context, I tried the following code using Crypto package:
from Crypto.Cipher import PKCS1_OAEP
public_key = RSA.importKey(public[Attribute.VALUE]) # The content of pkcs11 public key as DER
cipher = PKCS1_OAEP.new(public_key)
encr_data = cipher.encrypt(data) # This works!

So, it seems that using my stand-alone public key allows me to encrypt data. But why can't I do it in the context of a pkcs11 token session? 
Then, I tried using the pkcs11 Object decrypt function to try to decrypt the data generated using Crypto module above:
decrypted = private.decrypt(encr_data) # It fails!

The above failed with pkcs11.exceptions.MechanismInvalid error. I tried using different mechanisms, but all of them resulted in the same error. What is interesting -- it seems that pkcs11 object allows me to at least invoke decrypt function without complaining that it is not supported. 
One more thing I should mention. I checked my certificate and saw that under Extension -> Certificate Key Usage, it says:
Critical
Signing
Key Encipherment

I read on the difference between key encipherment and data encipherment and learned that key encipherment is used to encrypt a secret (symmetric) key instead of data. Can it be the reason I can't use encrypt function for this token session? 
Any feedback would be greatly appreciated! 
","After doing a rather extensive research and taking into consideration this thread's replies, I found that encryption not working in this token session is due to the OpenSC API limitation. As a matter of fact there is a compatibility table on the python-pkcs11 page that shows (in plain text) that OpenSC does not support Encryption, Symmetric keys generation, key wrapping and other functionalities. It does fully support signing/verification and partially supports decryption. Had I done a better search, it would've saved me a lot of time.
As a matter of fact, it is very useful to do a hard token test using 'pkcs11-tool', as it will show the supported functionalities and mechanisms for each PIV slot. In my case, I invoked it as follows: 
pkcs11-tool -p $pin -t

and received the following report:
Using slot 0 with a present token (0x0)
C_SeedRandom() and C_GenerateRandom():
  seeding (C_SeedRandom) not supported
  seems to be OK
Digests:
  all 4 digest functions seem to work
  MD5: OK
  SHA-1: OK
  RIPEMD160: OK
Signatures (currently only for RSA)
  testing key 0 (PIV AUTH key) 
  all 4 signature functions seem to work
  testing signature mechanisms:
    RSA-X-509: OK
    RSA-PKCS: OK
    SHA1-RSA-PKCS: OK
    MD5-RSA-PKCS: OK
    RIPEMD160-RSA-PKCS: OK
    SHA256-RSA-PKCS: OK
  testing key 1 (2048 bits, label=SIGN key) with 1 signature mechanism
    RSA-X-509: OK
  testing key 2 (2048 bits, label=KEY MAN key) with 1 signature mechanism -- can't be used to sign/verify, skipping
Verify (currently only for RSA)
  testing key 0 (PIV AUTH key)
    RSA-X-509: OK
    RSA-PKCS: OK
    SHA1-RSA-PKCS: OK
    MD5-RSA-PKCS: OK
    RIPEMD160-RSA-PKCS: OK
  testing key 1 (SIGN key) with 1 mechanism
    RSA-X-509: OK
  testing key 2 (KEY MAN key) with 1 mechanism -- can't be used to sign/verify, skipping
Unwrap: not implemented
Decryption (currently only for RSA)
  testing key 0 (PIV AUTH key) 
    RSA-X-509: OK
    RSA-PKCS: OK
  testing key 1 (SIGN key) 
    RSA-X-509: OK
    RSA-PKCS: OK
  testing key 2 (KEY MAN key) 
    RSA-X-509: OK
    RSA-PKCS: OK
No errors

From there, we can see that decryption is supported for all three occupied slots but only with RSA-X-509 and RSA-PKCS mechanisms (no OAEP). 
Now, I am considering fusing the pkcs11-tool and openssl functionalities to do data encryption. I haven't figured out all the intricacies of this kind of flow, but I am thinking something of this sort:

(pkcs11-tool) Export a certificate from a desired PIV slot
(openssl) Create a symmetric (e.g., AES) secret key
(openssl) Encrypt the data with this secret key
(openssl) Use the certificate from step 1 to encrypt the secret key 
Send the [symmetrically] encrypted data and [asymmetrically] encrypted secret key to the recipient
(pkcs11-tool) Decrypt the secret key on the secure token
(openssl) Use the decrypted secret key to decrypt the actual data

It looks like I should be able to implement such a workaround either in Linux shell using pkcs11-tool and openssl utilities or in Python using pkcs11 and OpenSSL libraries. The latter seems more preferable if I decide to later do it through GUI. This all seems quite low level, so I am wondering if there is a easier way to encrypt/decrypt data. I know that PGP fuses the encrypted data and wrapped secret key together into one single file, so the end-users only have to execute one command on their end. 
","67","<python><smartcard><public-key-encryption><pkcs#11><opensc>","2","1","2","2019-10-30 19:36:22","58628476","2","2","","","","2019-10-27 23:10:49",""
"54212538","How to fix : java.lang.RuntimeException: error:0c0000af:ASN.1 encoding routines:OPENSSL_internal:TOO_LONG in generate sharedKey","I try to create sharedKey with other public key and my private key but i faced to exception.
byte[] otherPublicKey = mOtherPublic.getBytes();

        X509EncodedKeySpec pkSpec = new X509EncodedKeySpec(otherPublicKey);
        KeyFactory keyFactory = KeyFactory.getInstance(""EC"");

        PublicKey otherPublicKey = keyFactory.generatePublic(pkSpec);//in this line i faced to exception

        // Perform key agreement
        KeyAgreement keyAgreement = KeyAgreement.getInstance(""ECDH"");
        keyAgreement.init(mkeyPair.getPrivate());
        keyAgreement.doPhase(otherPublicKey, true);

        // Read shared secret
        byte[] sharedSecret = keyAgreement.generateSecret();

","","67","<java><android><encryption><public-key-encryption><private-key>","0","","0","2019-01-16 07:57:20","","0","","","","","2019-01-16 07:57:20",""
"39402747","Creating a short-lived ""shared secret"" token between client/server for administrative commands","I have a simple client/server example up and running which uses client code and server code courteously provided by the OpenSSL team. I would like to add a feature to the client so that it attempts to run ""privileged"" commands. Some background:

When the tool is installed, some kind of key/token is installed on the system as well (token 1).
When the remote server wants to ""push"" data to the client, it requests a separate token (token 2), from a trusted authority (ie: separate off-site server), and sends token 2 to the client.
The client performs an operation on the two tokens, and if they ""match"" (ie: the two combined forms a valid key, one decrypts the other, or some similar mechanism), a temporary key is generated. The client needs this key to perform certain operations (ie: enter ""manager mode"" and do operations it wouldn't normally trigger).
The client may be asked by the server to re-create its security token (token #1') and re-submit its public key to the server.

The goal of the system is to give system administrators a narrow window where they can send special commands to the client by using a token which expires. Is there an existing mechanism (ie: within libssl) which could be used to accomplish what I've described above?
I think I could just implement this by doing essentially another key exchange over the already-encrypted TLS connection, but I'm not 100% sure if that's the ideal way to do this. The message I'd be sending would effectively be ""MANAGER MODE AUTHORIZED"" after the challenge completes. The client could be coded to exit manager mode after 5 minutes automatically. Is it really a safe test if the algorithm is effectively: ""decrypt this, and if it says MANAGER MODE AUTHORIZED, proceed""?
Thank you.
","","66","<c><linux><ssl><public-key-encryption>","1","","0","2016-09-09 19:20:39","","3","1","608639","","2016-09-09 19:20:39","2016-09-09 02:05:49",""
"38847024","Git command invoked via phing is asking for credentials even though private-public key authentication to git server is in place","Public private key authentication has been setup for my user ""sandeepan"" to access the repository hosted on gitlab. I can run git fetch/pull commands on this server.
However, when I run a fetch command via a phing xml file, I get a prompt to enter the credentials. 
. Following is the line which invokes the git fetch - 
<exec command=""git fetch origin test_sandeepan"" dir=""/home/jenkins/phing/scratchpad/adserver"" />

I ensured that -

I am switched to my user ""sandeepan"".
Also, the permissions and ownerships of the xml file are as follows - 
-rwxrwxrwx 1 sandeepan sandeepan   6479 Aug  9 08:56 build.xml

Any pointers would be appreciated.
","","66","<git><public-key-encryption><phing>","0","","0","2016-08-09 09:32:42","","2","","","","","2016-08-09 09:32:42",""
"9425054","Ideas to harden HTTP traffic so it is not reproducible","I have a project where I need to make secure transactions on a HTTP web server.  I completely control the client (mobile application) and control the server.  I want to develop a system where the client can add or subtract a value stored in the server's database.  The value stored is currency based so it is important that the number is accurate.  My question is how I can prevent someone from reproducing the HTTP traffic and removing or adding values at will.  Someone could take a packet capture from the client, view the HTTP POST parameters necessary to modify to server's currency value, and just reproduce those packets whenever they want.
My first thought was to have the client encrypt the new currency value with a public key and then have the server decrypt it with a private key.  I would also embed a timestamp and their username along with the new currency value before it gets encrypted so the request would always be different.  The server would then check the timestamp and reject if it's past 10 seconds.  One problem with this approach is if the client or server are out of sync time based.  Server would be synced with NTP but there is no guarantee that client will be correct
Any other ideas would be appreciated.  I'm not looking for low level implementation details, just the high-level overview.  Ideally the solution would not be too taxing for either the client or the server since the rate of transactions will be high.
","You should just use HTTP Secure
","66","<security><http><client><public-key-encryption>","1","0","2","2018-04-09 04:33:26","9425344","0","1","1033581","","2018-04-09 04:33:26","2012-02-24 03:41:22",""
"9425054","Ideas to harden HTTP traffic so it is not reproducible","I have a project where I need to make secure transactions on a HTTP web server.  I completely control the client (mobile application) and control the server.  I want to develop a system where the client can add or subtract a value stored in the server's database.  The value stored is currency based so it is important that the number is accurate.  My question is how I can prevent someone from reproducing the HTTP traffic and removing or adding values at will.  Someone could take a packet capture from the client, view the HTTP POST parameters necessary to modify to server's currency value, and just reproduce those packets whenever they want.
My first thought was to have the client encrypt the new currency value with a public key and then have the server decrypt it with a private key.  I would also embed a timestamp and their username along with the new currency value before it gets encrypted so the request would always be different.  The server would then check the timestamp and reject if it's past 10 seconds.  One problem with this approach is if the client or server are out of sync time based.  Server would be synced with NTP but there is no guarantee that client will be correct
Any other ideas would be appreciated.  I'm not looking for low level implementation details, just the high-level overview.  Ideally the solution would not be too taxing for either the client or the server since the rate of transactions will be high.
","A general security tip: You do NOT control the client if it's out in the wild! The server must check everything the client sends.
Simple flow:

Client connects to server with a username/password via SSL, setting up a ""session"".
Client sends a command (increment product X by amount Y)
Server receives this request through the SSL connection
Server checks the request is valid, that the logged-in user is
allowed to do this, executes the command and sends a response to the
client indicating failure or success.
Client disconnects, sending a ""session terminated"" message (the
session should also timeout after a set period as well).

Note:
Everything must be authenticated and checked server-side! Your client application should not be the one in charge of working out what is a ""valid"" request and what is not - that's the job of the server. Each request should go via SSL, and should only be executed once the client has successfully logged on and started a session. Even with a timestamp-based check, someone could reverse engineer your client or use a man-in-the-middle attack, but only if they have a username/password (or are able to intercept a legitimate client's data - hard with SSL/public/private key system). If very strong security is mandatory, every request from the client should be encrypted by RSA.
","66","<security><http><client><public-key-encryption>","1","2","2","2018-04-09 04:33:26","9425344","0","1","1033581","","2018-04-09 04:33:26","2012-02-24 03:41:22",""
"53941878","Can I use PKCS5Padding padding algorithm while decryption for already encrypted data using PKCS7Padding?","I'm replacing PKCS7Padding padding with PKCS5Padding for my AES encryptions.
Can I use PKCS5Padding padding algorithm while decryption for already encrypted data using PKCS7Padding?
I tried using a sample program on local and somehow it works and didn't give any error. Just want to ensure if we need any sort of Migration for all the existing records.
For all the existing records, Do I need to decrypt first using PKCS7Padding and then again encrypt using PKCS5Padding and store it back in the DB?
","You may check the following post https://crypto.stackexchange.com/questions/9043/what-is-the-difference-between-pkcs5-padding-and-pkcs7-padding
PKCS5 and PKCS7 are effectively the same by algorithm, just PKCS5 is defined on 8 byte block (64 bit). Therefore cipher AES/.../PKCS5Padding is formally incorrect designation, effectively PKCS7 is used.

Do I need to decrypt first using PKCS7Padding and then again encrypt using PKCS5Padding and store it back in the DB?

No, just to change the padding you don't need to do anything
","66","<encryption><aes><bouncycastle><public-key-encryption><des>","1","2","1","2018-12-27 09:54:30","53943041","0","","","","","2018-12-27 08:21:50",""
"35623051","Does SSL affect performance nowadays?","I remember years ago, one of the reasons for not using SSL was the it used a lot of resources, so it affected the performance of applications.
Nowadays, with the current technologies, is this still a point to bear in mind? 
This question arose as a workmate is concerned that using SSL will hinder the performance of his application. 
Why? The idea is that there will be thousands of clients that will be opening temporary connections every some determined time frame (I think it's set to 1 minute). So he's concerned that all the authentication process of all those clients is going to be very power consuming and affect the performance of his application. The other alternative is to use permanent connection so the authentication is done only once, but the CTO still hasn't decided which method we'll be using (last notice was temporary, hence this question).
","The question is ill-formed. If you need security, you have little choice but to use SSL, and so comparing it to plaintext is completely pointless. If on the other hand you don't need security, you don't need SSL.
However I did an extensive experiment over the Internet some years ago, which showed that SSL was roughly 3x as slow as plaintext.
","65","<performance><authentication><ssl><public-key-encryption>","0","1","2","2016-02-25 13:37:44","35623885","1","","","","","2016-02-25 09:22:09",""
"35623051","Does SSL affect performance nowadays?","I remember years ago, one of the reasons for not using SSL was the it used a lot of resources, so it affected the performance of applications.
Nowadays, with the current technologies, is this still a point to bear in mind? 
This question arose as a workmate is concerned that using SSL will hinder the performance of his application. 
Why? The idea is that there will be thousands of clients that will be opening temporary connections every some determined time frame (I think it's set to 1 minute). So he's concerned that all the authentication process of all those clients is going to be very power consuming and affect the performance of his application. The other alternative is to use permanent connection so the authentication is done only once, but the CTO still hasn't decided which method we'll be using (last notice was temporary, hence this question).
","In the last 4 years I have seen (benchmarked) iPhone AES encryption speeds increase 13x on iPhones. Speeds are also dependent on the data length since there are two parts: the setup and data encryption/decryption.
As usual benchmark your usage and judge if there is a performance issue.
As @EJP states, if you need security you need to use https (TLS) encryption.
","65","<performance><authentication><ssl><public-key-encryption>","0","0","2","2016-02-25 13:37:44","35623885","1","","","","","2016-02-25 09:22:09",""
"50932051","Why should JWTs need to be verified by the client?","So my understanding is that a JWT is signed by the server with a private key and its legitimacy verified by comparing the public key decrypted signature against the header + payload by both/either the server and client:

The tokens are signed by one party's private key (usually the
  server's), so that both parties (the other already being, by some
  suitable and trustworthy means, in possession of the corresponding
  public key) are able to verify that the token is legitimate.1

I'm just wondering what need is there for the client to verify the authenticity of the JWT? I understand the same mechanism is used for SSL, in which case client-side verification makes sense to me as the certificate contains the public key used by the client to encrypt the initial handshake. But I struggle to understand what benefit public verifiability serves in the case of JWTs. If the JWT were illegitimate, it'd fail on the server anyway, and the client isn't doing anything special aside from tacking it onto the request.
Couldn't just hashing with some private salt on the server satisfy the purpose it serves? The server verifies by hashing the payload with the same salt and comparing against the signature. In this case, only the server can verify, but so what?
","
So my understanding is that a JWT is signed by the server with a private key and its legitimacy verified by comparing the public key decrypted signature against the header + payload by both/either the server and client:

Thiis is incomplete. A JWT can be signed with the private key of a key pair(e.g RSA), or using a symmetric key(e.g HMAC). In this case the same secret key is used to sign and to verify the token

I'm just wondering what need is there for the client to verify the authenticity of the JWT?

When the token is signed with an asymmetric key pair is expected that the client verifies the token. Using a symmetric key, it is only known by the issuer party, so the client can not verify it
See my answer here: When to use RS256 for JWT?

I understand the same mechanism is used for SSL, in which case client-side verification makes sense to me as the certificate contains the public key used by the client to encrypt the initial handshake

Some data used in the handshake is digitally signed (not encrypted) by the server with its private key, and verified by the client

If the JWT were illegitimate, it'd fail on the server anyway, and the client isn't doing anything special aside from tacking it onto the request.

No, if the verification server is not the same that the issuing server (see the above link one more time). 
Suppose the token has been issued by a third party ( e.g. goggle or facebook) as a result of an oauth2 authentication process. It can contains the details of the connected user, and it has been provided to your server using a redirect, so you can not trust the calling party. You must verify that the token has been issued by the expected party. 
","65","<security><jwt><digital-signature><public-key-encryption>","3","3","1","2018-06-19 19:44:25","50935852","0","","1107110","","2018-06-19 15:36:29","2018-06-19 15:29:38",""
"48812225","Spring Cloud 1.4.2 Edgware.SR2 config decryption is not happening on client side","I used this project from spring.io and added asymmetric encryption and decryption by having below property files.
<code>
    application properties (server side) :
       server.port=8888
       spring.cloud.config.server.git.uri=https://{uname}:{password}@{giturl}
       encrypt.key-store.location=classpath:/server.jks
       encrypt.key-store.password=letmein
       encrypt.key-store.alias=mytestkey
       encrypt.key-store.secret=changeme
       spring.cloud.config.server.encrypt.enabled=false
       security.user.name=root
       security.user.password=s3cr3t
</code>
<code>
    bootstrap.properties (client side) :
       spring.application.name=config-client
       spring.cloud.config.uri=http://root:s3cr3t@localhost:8888
       encrypt.key-store.location=classpath:/server.jks
       encrypt.key-store.password=letmein
       encrypt.key-store.alias=mytestkey
       encrypt.key-store.secret=changeme
       server.port=8089    
</code>

The property file within my git has 
<code>
    message={cipher}{key:mytestkey}AQA5...    
</code>

Unfortunately, I am getting encrypted message in my RestController class which is in a Spring Boot application. 
<code>
     @RefreshScope
       @RestController
       class MessageRestController {
          @Value(""${message}"")
          private String message;

          @RequestMapping(""/message"")
          String getMessage() {
              return this.message;
          }
       }    
</code>

Have I missed something to decrypt it? 
","","65","<spring><spring-cloud><public-key-encryption><spring-cloud-config>","0","","0","2018-02-17 17:23:44","","6","","1305969","","2018-02-17 17:23:44","2018-02-15 16:42:33",""
"44882761","Validate if URL is coming from a trusted source","We are working on a redirecting page for our mobile apps. 
Users would go to a page like: https://mobileredirect.our-app.com?target=https://clientdomain.com/some_resource
Mobile apps on iOS and Adroid can intercept the ""mobileredirect.our-app.com"" domain, when installed. If not installed, the browser will open, and redirect the browser to the client domain. 
This is contains an obvious problem. Anyone can put any domain in the scheme and this becomes an attack vector. I would like to be able to verify if the URL is actually coming from a trusted source. We need to do it this way, as we don't control which domains could use our mobile app.
Ideally I'd like to do this in the as well browser, without the need for a server.
I was thinking of using a library like simple-crypt, using the Asymmetric operation. Trusted servers would have the private key, they would encrypt the URL end it would end up like this: https://mobileredirect.our-app.com?target=ENCRYPTED_URL. The clients (mobile apps, and the website) would contain the public key to decrypt the URL. This does mean that the public key will be visible to everyone.
Now my question: 
Is this a good idea? How can this be broken? Is it overkill? Are there easier ways (e.g.: use some type of checksum algorithm)?

This has been answered in a cross post on the security stackexchange

","","65","<javascript><security><encryption><public-key-encryption><encryption-asymmetric>","0","","0","2017-11-05 12:56:44","","6","","476906","","2017-11-05 12:56:44","2017-07-03 10:02:23",""
"27227786","how to implement particular message format in NS-2","i need a little help regarding NS-2
My question is can you implement a particular message format between two nodes in NS-2 like we create a tcp communication but if i want to send particular message eg
a certificate with information inside it such as public key or type of node time, etc.
i am trying to do it in wireless
and also can it be encrypted.
is there any example or sample code or snippet you can share
","Creation of your own packets in aodv is so easy. Have a look at it.
http://karthicksivakrr.blogspot.in/2014/02/how-can-i-create-my-own-packets-in-aodv.html
","65","<simulation><wireless><simulator><public-key-encryption><ns2>","1","0","1","2014-12-12 04:23:44","","0","","","","","2014-12-01 11:49:14",""
"30789388","Seeking: public-key algorithm where public encryption is more expensive than private decryption","I'm looking for a public-key crypto algorithm where encrypting a digital signature with a public key is more computationally expensive than decrypting it with a private key—ideally, significantly more expensive. (see ★ below for why)
I’ve profiled a few algorithms (sha1, md5…) and have gotten this sort of result:
Public encryption: 330ms
Private decryption: 4474ms

This would be fine if the time values were reversed. Any suggestions?

My profiling approach:
$res = openssl_pkey_new(array('encrypt_key' => false, 'digest_alg' => 'sha1',
                              'private_key_bits' => 1024));
openssl_pkey_export($res, $privatekey);

$publickey = openssl_pkey_get_details($res);
$publickey = $publickey[""key""];

function rutime($ru, $rus, $index) {
 return ($ru[""ru_$index.tv_sec""]*1000 + intval($ru[""ru_$index.tv_usec""]/1000))
     -  ($rus[""ru_$index.tv_sec""]*1000 + intval($rus[""ru_$index.tv_usec""]/1000));
}

$cleartext = ""Hey hello hi"";
$crypted = array();
$reps = 10000;

// test public key encryption time
$rustart = getrusage();
for ($i = 1; $i <= $reps; ++$i) {
 openssl_public_encrypt($cleartext, $crypttext, $publickey);
 $crypted[] = $crypttext;
}
$ru = getrusage();
echo ""Public encryption: "".rutime($ru, $rustart, ""utime"").""ms\n"";

// test private key decryption time
$rustart = getrusage();
for ($i = 1; $i <= $reps; ++$i) {
 $crypttext = &$crypted[$i];
 openssl_private_decrypt($crypttext, $decrypted, $privatekey);
}
$ru = getrusage();
echo ""Private decryption: "".rutime($ru, $rustart, ""utime"").""ms\n"";

★ …because I’m investigating ways to make “talking” more expensive than “listening”. If the client has to do difficult crypto-math before sending a message back to the server, and the server can do easy crypto-math to validate that message, it’d make spamming the server with a script more difficult. 
","","65","<php><algorithm><performance><encryption><public-key-encryption>","0","","0","2015-06-11 19:07:20","","3","","","","","2015-06-11 19:07:20",""
"42998561","Public/Private Key encryption avoid MITM attack on a local network","I have a sysem where I want to minimise outbound network communication to the internet. However, I need to ensure communication between local network clients and the local server is secure. I can't use HTTPS as an IP address is used. Also the locations where the servers are installed, the users will be non-technical, so no DNS configuration etc.. etc..
I'm hoping the following will be secure and only requires access to the internet on server/client initialization.
Is this open to attackers? (assuming the local server is secured and private key can not be extracted)

Server initializes, generates Pub/Private key pair. User signs
into account with remote server which issues access token (JWT) for remote server (HTTPS). User creates local server account (Username/Password)
Local server uploads public key to remote server (HTTPS) using remote server access token. 
Client initializes and discovers server  
Server responds with server id  
Client hits remote server with the server id (HTTPS) and gets the public key and stores it. 
Client generates Pub/Private key.  
Signs into local server account sending username/password/public-key envcypted with local server public key
Local Server issues access token (JWT) and stores
client public key with that token. Any response to this access token is encrypted (body/headers) with client public key. 
Client now communicates to local server with accesstoken and encryped headers/body with Local server public key.
Server responds to requests with body/headers encrypted with access token public key

","","64","<networking><encryption><public-key-encryption>","0","","0","2017-03-24 11:38:17","","3","","","","","2017-03-24 11:38:17",""
"21677219","How to sign data(string) in wp8","App will receive a token (string) from server. I want to sign this token with private key. I will pass on corresponding public key and signed token back to server in next request. Now server will validate that token using public key to check whether request is coming from authenticated user.
How to achieve this?
","","64","<windows-phone-7><c#-4.0><windows-phone-8><public-key-encryption><encryption-asymmetric>","1","","0","2014-02-11 13:44:54","","2","","2354902","","2014-02-11 13:44:54","2014-02-10 12:26:34",""
"54567313","how to encrypt a JSON payload using RSA with XML public key and then encode it into hex in node.js","encrypt a JSON payload using RSA with public xml key and encode it into hex in node.js
tried with node-rsa
","","63","<node.js><encryption><hex><rsa><public-key-encryption>","0","","0","2019-02-07 06:35:41","","2","","11026623","","2019-02-07 06:35:41","2019-02-07 06:12:37",""
"53221430","GnuPG encrypt and signed with C# using old style PGP (6.5.8 ) key","I am trying to handshake with server using GISB NAESB, when I encrypt data using GnuPG (2.2.6) it throwing error ""encryption failed: unknown system error"" when trying to specify the key using the --recipient-file option.
I am using c# and gpg.exe with command line and public key is https://github.com/dotnet/coreclr/issues/2191 in old style (6.5.8 ) version any sample or example would be helpful. 
","","63","<c#><public-key-encryption><gnupg><pgp>","0","","0","2018-11-09 07:45:35","","1","1","491907","","2018-11-09 07:45:35","2018-11-09 07:28:10",""
"53333215","c# : How can I create a certificate with key size of 168 using CERTENROLLLib.CX509PrivateKey?","I am working with EDI - AS2. So I have to create a PrivateKey certificate (.pfx) and a PublicKey certificate (.cer). Here I sign my message with my PrivateKey certificate (.pfx) and share the PublicKey certificate (.cer) with my trading partner, so that they can verify the signature.
I have written the code to generate test PublicKey certificate (*.pfx). Following is the part of the code where I set properties of private key:
// create a new private key for the certificate
CX509PrivateKey privateKey = new CX509PrivateKey();
privateKey.ProviderName = ""Microsoft Enhanced RSA and AES Cryptographic Provider"";
privateKey.MachineContext = true;
privateKey.Length = 1024;
privateKey.KeySpec = X509KeySpec.XCN_AT_KEYEXCHANGE;
privateKey.ExportPolicy = X509PrivateKeyExportFlags.XCN_NCRYPT_ALLOW_PLAINTEXT_EXPORT_FLAG;
privateKey.Create();

above code is working fine when I use privateKey.Length = 1024 or 512.
but out trading partner want us to create certificate with key size of 168 with 3DES and SHA1
Whenever I give privateKey.Length = 168 I get following error:
CertEnroll::CX509PrivateKey::Create: Invalid flags specified. 0x80090009 (-2146893815)

I am not able to figure out what change I need to do here to make it work.
Please help,
Thanks
","","63","<certificate><ssl-certificate><x509certificate><public-key-encryption><signing>","0","","0","2018-11-16 07:25:30","","9","","","","","2018-11-16 07:25:30",""
"40510382","Digital Certificate for digitally signing a xml document","I have 3rd party integration requirement that xml docs be digitally signed with the following parameters:
Signature keys shall be 256bit Elliptic Curve Keys, have a length of 256 bits, use the NIST SuiteB P-256 curve.
Do I need to to have a digital certificate to digitally sign a xml document, to meet the these (above) requirements.
or do the libraries for java or c# provide the capability to digitally sign while meeting these requirements.
","Yes, you need a digital certificate. That does not mean you need to buy one. You could generate one yourself.
","62","<java><public-key-encryption><elliptic-curve>","0","0","1","2016-11-09 15:23:26","","0","","","","","2016-11-09 15:20:42",""
"52148064","How to use bip32 to generate a rsa keypair? Is it even possible?","I am trying to solve a multi device app problem using mnemonics and generating a bip32 keypair. But as far as I have read, there was no mention of public key encryption using these bip32 keypair, so is it possible to achieve public key encryption using this at all?
","After going through a lot of articles, websites, I didn't find anything helpful. So I switched to another approach where I could generate RSA keypair using passphrases. This is one example of this - https://github.com/joekir/deterministics
","62","<rsa><blockchain><public-key-encryption><bitcoin><deterministic>","0","0","1","2018-09-05 15:15:21","52188533","0","1","4116955","","2018-09-04 09:38:55","2018-09-03 10:39:33",""
"28257942","Generate RSA Keys Perform KeyPairGenerator x509","I'm trying to do the equivalent of the following commands, but in Java:
openssl genrsa -out privatekey.pem 1024
openssl req -newkey rsa:1024 -x509 -key privatekey.pem -out publickey.cer -days 365 
openssl pkcs8 -topk8 -nocrypt -in privatekey.pem -out privatekey.pcks8

I have the following code, which I understand generates both keys in pcks8 format, but how do I get the public key output in the same format as above? What else am I missing?
KeyPairGenerator keyGen = null;
try {
  keyGen = KeyPairGenerator.getInstance(""RSA"");
} catch (NoSuchAlgorithmException e) {
  throw new RuntimeException(e);
}
KeyPair pair = keyGen.generateKeyPair();
String privateKey = Base64.encodeBase64String(pair.getPrivate().getEncoded());
String publicKey = Base64.encodeBase64String(pair.getPublic().getEncoded());

Any help is greatly appreciated. This is the first time I've worked with asymmetric keys. 
","","62","<java><openssl><rsa><public-key-encryption>","1","","0","2015-02-01 21:23:52","","1","","608639","","2015-02-01 21:23:52","2015-01-31 23:55:59","2015-02-01 14:58:12"
"51978927","Encrypting using publicKey from seckeygeneratepair","Our iOS developer generated a private / public key using the following documentation. The other details includes using RSA 2048 and padding is PKCS1.
https://developer.apple.com/documentation/security/1395339-seckeygeneratepair?language=objc
I've mostly encountered certificate based encryption using certficates from windows store I I can't seem to fit their public key into the examples I've previously encountered. Has anyone tried something like this?

The app generates a public private key pair and provides me the public key.
On the server I encrypt a message with the public key.
On the app the message is decrypted using the private key.

Here are some references that I've read but none of them seem to fit this.
https://docs.microsoft.com/en-us/dotnet/api/system.security.cryptography.rsacryptoserviceprovider?view=netframework-4.7.2
https://codereview.stackexchange.com/questions/92761/very-simple-asymmetric-rsa-encryption-in-c
","After some trial and error here are the lessons learned from this.

The iOS should return a valid RSA public key in the following format. Previously, the key generated was not in standard format so only iOS and encrypt and decrypt it. Here is also a line to validate it. 
openssl rsa -in example.pem -text -pubin -RSAPublicKey_in
-----BEGIN RSA PUBLIC KEY-----
MIIBCgKCAQEAz1zfbybUt5jZX5P6ymy+g04wj3iTYCV8eGbkFyqFNsfN8Lnk6x4x
zstfnpE6asV6NkBecQnT1a9X6AVxA4Mxq4CeysR10TRr8HGczQGKl7R3Nbvvmgw+
jX8LZGxsQTO6qYWhMAtOPFfsMW9iy3AsDE7OIYfya6y/l919ExbgPzJ+0nLdiBmd
bmmzOQ1PaKt3OcxG6qZyBoixRTTOm4UDCLDzYdjz5dS1rbvb7pD15TpkZBkuMRm5
QDv+xhKcz1UFGQP7ssZS++ZoQlF2CZJuLz8R1uUYg4xQnF0r1IBBrlVtKnblgMcA
ZykNweGwrdPaWF3PeZmbvG+/m+Kt7/4BJwIDAQAB
-----END RSA PUBLIC KEY-----
On the .NET side, I was able to encrypt the text but I needed to use bouncy castle to do it. Here is a sample code.
public string Encrypt(string plainText, string publicKey)
        {
            UTF8Encoding ByteConverter = new UTF8Encoding();
            using (RSACryptoServiceProvider csp = new RSACryptoServiceProvider())
            {
                PemReader reader = new PemReader(new StringReader(publicKey));
                object kp = reader.ReadObject();
                csp.ImportParameters(DotNetUtilities.ToRSAParameters((kp as RsaKeyParameters)));
                var encryptedData = csp.Encrypt(data: ByteConverter.GetBytes(plainText), padding: RSAEncryptionPadding.Pkcs1);
                return Convert.ToBase64String(encryptedData);
            }
        }

","61","<c#><ios><swift><encryption><public-key-encryption>","0","0","1","2018-08-28 22:30:13","","0","","4200965","","2018-08-23 21:12:35","2018-08-23 05:34:37",""
"46611613","does changing the md5 hash change the outcome of a digital signature?","From my understanding you need a hash in order to generate a digital signature, so if you change the hash of a EXE or program using a hash changer(not encrypter) of some sort, the digital signature will change?
my head: DATA/SOURCE --> HASH --> SOME KIND OF KEY --> SIGNATURE
correct me if i'm wrong
","Yes, the point of code signing is encrypting file hash of some sort using private key. You then distribute encrypted hash alongside public key (embedded in EXE) so that user's OS can verify if the file has not been tampered with.
Therefore, changing executable's hash will fail the authentication.
","61","<hash><exe><digital-signature><public-key-encryption><private-key>","0","1","1","2017-10-06 18:14:08","46611673","2","","","","","2017-10-06 18:09:29",""
"56235571","How to encrypt string/files with ECC public key from cipher","I'm trying to implement encryption and decryption of files with ECC public and private keys. I able to correctly generate public and private keys through ECC but then I don't what to put in Cipher.getinstance() to implement the Encryption/Decryption part.
I'm trying to use bounycastle library but I can't figure out how to use it.
Security.addProvider(new BouncyCastleProvider());
    KeyPairGenerator ecKeyGen = null;
    try {
        ecKeyGen = KeyPairGenerator.getInstance(""EC"");
    } catch (NoSuchAlgorithmException e) {
        e.printStackTrace();
    }
    ecKeyGen.initialize(new ECGenParameterSpec(""secp384r1""));



    KeyPair ecKeyPair = ecKeyGen.generateKeyPair();
    System.out.println(""What is slow?"");

    Cipher iesCipher = null;
    try {

        try {
    /**/ Dont know what to place in Cipher.getInstance("" "")**

            iesCipher = Cipher.getInstance(""EC"",BouncyCastleProvider.PROVIDER_NAME);
        } catch (NoSuchProviderException e) {
            e.printStackTrace();
        }

    } catch (NoSuchAlgorithmException e) {
        e.printStackTrace();
    } catch (NoSuchPaddingException e) {
        e.printStackTrace();
    }
    try {
        iesCipher.init(Cipher.ENCRYPT_MODE, ecKeyPair.getPublic());
    } catch (InvalidKeyException e) {
        e.printStackTrace();
    }

    String btey = ""fff"";

    byte[] ciphertext = new byte[0];
    try {
        ciphertext = iesCipher.doFinal(btey.getBytes());
    } catch (BadPaddingException e) {
        e.printStackTrace();
    } catch (IllegalBlockSizeException e) {
        e.printStackTrace();
    }

    try {
        iesCipher.init(Cipher.DECRYPT_MODE, ecKeyPair.getPrivate());
    } catch (InvalidKeyException e) {
        e.printStackTrace();
    }
    byte[] plaintext = new byte[0];
    try {
        plaintext = iesCipher.doFinal(ciphertext);
    } catch (BadPaddingException e) {
        e.printStackTrace();
    } catch (IllegalBlockSizeException e) {
        e.printStackTrace();
    }

    System.out.println(Hex.toHexString(ciphertext));
    System.out.println(new String(plaintext));

Whenever I run and debug the code and the Cipher.getInstance(""EC"",BouncyCastleProvider.PROVIDER_NAME) hits, I get a NoSuchAlgorithmException and the detail message is ""Provider BC does not provide EC"". On the other hand if I remove ""BouncyCastleProvider.PROVIDER_NAME"" from Cipher.getInstance(""EC"") it gives me an exception of NoSuchAlgorithmException with a detail message is ""No provider found for EC""
Kindly help me out in this. I don't know which algorithm to use for the encryption/decryption of files with ECC keys.
","","61","<java><android><encryption><public-key-encryption><elliptic-curve>","0","","0","2019-05-21 10:50:02","","0","","8860931","","2019-05-21 10:50:02","2019-05-21 09:45:54","2019-05-21 12:33:32"
"54276568","How to encrypt jwt token with ssh-keygen public and private keys","I have created public and private key using ssh-keygen like
$ ssh-keygen -t rsa -b 4096 -f jwtRS256.key
$ openssl rsa -in jwtRS256.key -pubout -outform PEM -out jwtRS256.key.pub

trying to use it:
//payload
var payload = new Dictionary<string, object>()
{
    { ""sub"", ""mr.x@contoso.com"" },
    { ""exp"", 1300819380 }
};

var key = File.ReadAllBytes(@""C:\Users\ravimodi\jwtRS256.key"");
string token11 = Jose.JWT.Encode(payload, key, JweAlgorithm.RSA_OAEP, JweEncryption.A256GCM);

and get the error:

RsaKeyManagement alg expects key to be of RSACryptoServiceProvider type

","","61","<c#><jwt><public-key-encryption>","0","","0","2019-01-20 12:59:06","","0","","4295017","","2019-01-20 12:59:06","2019-01-20 12:44:09",""
"55599556","Generated Android key pair doesn't have certificate chain to attest","I am generating a key pair on Android device (8.1 / API level 27) using the following piece of code:
KeyGenParameterSpec spec = new KeyGenParameterSpec.Builder(
        KEY_ALIAS,
        KeyProperties.PURPOSE_SIGN | KeyProperties.PURPOSE_VERIFY
    )
    .setDigests(KeyProperties.DIGEST_SHA256, KeyProperties.DIGEST_SHA512)
    .setCertificateSubject(new X500Principal(""CN=X, O=X""))
    .setCertificateSerialNumber(BigInteger.ONE)
    .setSignaturePaddings(KeyProperties.SIGNATURE_PADDING_RSA_PKCS1)
    .setEncryptionPaddings(KeyProperties.ENCRYPTION_PADDING_RSA_PKCS1)
    .build();

KeyPairGenerator generator = KeyPairGenerator.getInstance(""RSA"", ""AndroidKeyStore"");
generator.initialize(spec);

generator.generateKeyPair();

Then I want to attest that generated certificate is signed by the google root certificate to proof that certificate is stored in TEE (see Verifying hardware-backed key pairs with Key Attestation):
KeyStore.PrivateKeyEntry privateKeyEntry = (KeyStore.PrivateKeyEntry) keystore
    .getEntry(KEY_ALIAS, null);


KeyFactory keyFactory = KeyFactory.getInstance(
    privateKeyEntry.getPrivateKey().getAlgorithm(),
    ""AndroidKeyStore""
);
KeyInfo keyInfo = keyFactory.getKeySpec(privateKeyEntry.getPrivateKey(), KeyInfo.class);

Log.i(TAG, ""Is key in secure hardware: "" + keyInfo.isInsideSecureHardware());
Log.i(TAG, ""Number of certificates in the chain: "" + privateKeyEntry.getCertificateChain().length);

Which returns:
Is key in secure hardware: true
Number of certificates in the chain: 1

The only certificate in the chain is the certificate that contains generated public key. And it doesn't have certificate extension data to attest it.
How can I generate a key pair so that I have a certificate chain with extension data to attest?
","","59","<java><android><security><encryption><public-key-encryption>","0","","0","2019-04-09 18:58:33","","5","","","","","2019-04-09 18:58:33",""
"53465038","Can keypair be changed for every message on end-to-end encryption?","I am thinking of security in an encrypted app, and was wondering if it would be feasible and if it would in any way add any security to the app if the keypair created for a user could change with each message sent, so every message is encrypted with a different private key? I understand there would a tremendous need for syncing between user's keys, but this is just a hypothesis I am thinking of.
thanks
","Of course, you can use only one key for each message and we called this forward security. To achieve this you need to use a key exchange protocol as Diffie-Hellman Key exchange protocol. This will increase communication, but security is not cheap and it is used in TLS 1.3 
With forward secrecy, even successful attacks in of the parties, the attacker can at most access the current key if there is an encryption operation. The previous keys are not stored once the message was sent so there is no key compromise.
","59","<encryption><public-key-encryption><private-key>","4","2","3","2018-12-20 19:56:44","","0","","","","","2018-11-25 05:54:55",""
"53465038","Can keypair be changed for every message on end-to-end encryption?","I am thinking of security in an encrypted app, and was wondering if it would be feasible and if it would in any way add any security to the app if the keypair created for a user could change with each message sent, so every message is encrypted with a different private key? I understand there would a tremendous need for syncing between user's keys, but this is just a hypothesis I am thinking of.
thanks
","It is well possible, but feasibility may depend on how you use your keys.
As already answered - ephemeral (one-time temporary) keys are used in TLS for achieving forward-secrecy in the key-excange to derive symmetric session encryption keys. So it's not really a new keypair for every message, but rather for establishig a session. Generating a new good key may needs some performance and time.
Even so your app needs to maintain a long-time key to sign the ephemeral public key to ensure integrity so the recceiving party can be sure the ephemeral keys are really from party it claims to be. That is as well part of te TLS key exchange.
If you are not using direct (session) communication, but sending the messages asynchronously, I see no point to generate a new keypair. You can just create a new random encryption key (assuming hybrid encryption). To ensure integrity the message needs to be signed by the sender as well, so a long-lived persistent key is necessary.  
","59","<encryption><public-key-encryption><private-key>","4","2","3","2018-12-20 19:56:44","","0","","","","","2018-11-25 05:54:55",""
"53465038","Can keypair be changed for every message on end-to-end encryption?","I am thinking of security in an encrypted app, and was wondering if it would be feasible and if it would in any way add any security to the app if the keypair created for a user could change with each message sent, so every message is encrypted with a different private key? I understand there would a tremendous need for syncing between user's keys, but this is just a hypothesis I am thinking of.
thanks
","For encryption, the message receiver could generate a new public/private key pair and send the public key to the message sender.  The sender could then encrypt using this public key.  This decreases the risk due to a compromised key pair.  You lose just one message if the ephemeral key is compromised instead of all of them if a long-term key is compromised.
However, encrypting alone does not provide security.  You also need to authenticate the sender and receiver and provide integrity.  
For authentication, you either need a large set of pre-generated keys that are mapped to particular identities in a secure way (e.g., certificate signed by trusted certificate authority, as in PKI), or some other way to prove who generated each key pair.  This is the tremendous syncing effort you mention.  
The PKI method introduces many ways to authenticate as a user due to their many keys, so it actually reduces security by increasing the attack surface.  If you do things right, the bigger attack surface is balanced by the fact that an attack on an ephemeral key limits damage to a single message.  However, to enforce this limit, you have to have a secure, public place where a list of valid/used keys is maintained in real-time.  Otherwise the single-use keys could be re-used.
If you don't pre-generate keys, you need a long-term public/private key pair to establish ownership of the temporary pair through a method such as a signature.  You may reduce the risk of compromise to the long-term key pair by using it just for signing ephemeral key pairs.  However, this just reduces one type of risk associated with the long-term key pair.  You still have risks associated with generation, distribution, storage, and binding the long-term key pair to a particular user, and the ephemeral key pairs are dependent on the long-term key pair for their security.
For integrity, you can use digital signatures.  Many digital signature methods are similar to authentication methods, where a private key operation is the key security operation.
Bottom line: you may be able to increase security by using ephemeral key pairs for each message, but performance will be impacted, you have to be careful about implementation, and the security benefits are minimal.
","59","<encryption><public-key-encryption><private-key>","4","0","3","2018-12-20 19:56:44","","0","","","","","2018-11-25 05:54:55",""
"54898103","How to encrypt API input and output in angular?","I have a meanstack application, in which we are using REST API to get data from node server to angular client. when I make an API call, in the network tab of the browser's developer tools, we can see the API input and output as plain text. We thought of using a symmetric/asymmetric key encryption but the encryption key will be exposed as we've to store the keys in the client side only. Is there any better approach to solve this problem?? 
Our application is secured with an SSL certificate.
For example, I'm calling the getUserInfo API in one of the webpages. It will return the user's Id, role, department and other details. I want to hide those details getting displayed to the users.  I don't want to display the user's ID, department and some other details getting displayed to the end user. But I need those details for some of the actions in my application.

","","59","<angular><encryption><mean-stack><public-key-encryption>","1","","0","2019-02-27 05:56:49","","6","2","4270246","","2019-02-27 05:56:49","2019-02-27 04:33:12",""
"23692496","How to encode/store encrypted messages","I'm doing encryption with AES and RSA.
Once the encryption stage is complete, I have two pieces of data to transmit.

The AES256 encrypted message - AES256(message,Key)
The AES256 symmetric Key Encrypted with the RSA public key - RSA(Key)

As this data is byte arrays, I naturally feel like I should be Base64 encoding it.
This data is only ever encrypted and decrypted from my own code, so Base64(RSA(Key)) + ""\r\n"" + Base64(AES256(message,Key)) ""works"",  but is there a standard I should be using for doing this?
","You can use a standardized container format as Oleg has suggested. Well known ones are CMS (derived from PKCS#7) and PGP. XML encryption is also possible, but I would personally try to avoid it unless you are very sure you understand the security of XML encryption. Both Sun and Apache didn't - to name just a few.
As for Base64, you should only base 64 encode anything if you think that your ciphertext is used as text anywhere within the system. If you don't encode it you are very likely to loose data. For crypto, loosing some bytes is about equal to loosing all data. Dont' forget that ciphertext looks like random data, so bytes can have any value, including ""fun"" values such as 00, 7F, space, tab, etc. etc. (and that's just for ASCII).
Note that simply encrypting/decrypting data is often not enough for a transport protocol. You will need to provide integrity/authenticity (e.g. a MAC or HMAC) as well.
","58","<encryption><base64><aes><public-key-encryption><file-format>","0","0","1","2014-05-16 13:40:57","23696547","1","","589259","","2014-05-16 13:40:57","2014-05-16 04:10:43",""
"15542361","Space constrained asymmetric signature","I need to sign a small string with an asymmetric key encryption scheme.
The signature will be stored on a small chip together with the signed string. I have very little space to spare (about 60bytes for signature + string), so the generated signature should be as small as possible.
I looked around for how to do it, and what I found is that I could use RSA-SHA1, but the generated signature with a 512 bit key is 64 bytes. That is a bit much.
What secure algorithm could I use to generate a small asymmetric signature?
Would it still be secure if I store the SHA1 sum of the RSA-SHA1 signature, and later verify that instead?
","What you're bumping up against here is one of the properties of a good hash function - the return value should be long to protect against birthday attacks (where two different inputs result in the same output hash). Generally 128-512 bits is preferred hence the SHA-1 signature gives you 512 bits. 
As with all things in cryptography security is a trade off. As you are using asymmetric signing have you considered using RSA-MD5 as your signature option? This will give you a far shorter return of 128 bits but this comes with the caveat that MD5 is considered broken and is generally being moved away from. 
","58","<digital-signature><public-key-encryption>","1","0","1","2013-09-11 13:47:31","18743029","0","","512324","","2013-03-21 08:21:57","2013-03-21 08:14:39",""
"56798210","How can I decrypt text from one application in another application with asymmetric encryption?","I am trying to understand how I can decrypt a String in one application that I have encrypted in a separate application.  I can do this when I am in a single application execution, and I use the PrivateKey from the same KeyPair that generated the PublicKey.  However, I want to encrypt the value in one application, and decrypt the value in another application.  Basically I have a web service sending value I do not want to be tampered with to an application, and I was planning to use asymmetric encryption to handle it.  Feel free to let me know if I am going about solving that the wrong way.
I have tried various encryption techniques, starting with Symmetric.  The issue I ran into with that is that the value is encrypted to the same text each time - not very useful if my goal is to keep someone from tampering with a value - once they know the encrypted version of some text, they will be able to use that in any request.  I have been trying to follow the standards here - https://www.veracode.com/blog/research/encryption-and-decryption-java-cryptography
I can get all my examples working in a single transaction doing the encrypt/decrypt - it is just when I try to encrypt in one request, and decrypt in a second request that I fail.
Here is my current working example:
package com.ni.apps.cartencryptutil;

import java.io.UnsupportedEncodingException;
import java.security.InvalidKeyException;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.NoSuchAlgorithmException;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.SecureRandom;

import javax.crypto.BadPaddingException;
import javax.crypto.Cipher;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.NoSuchPaddingException;
import javax.crypto.SecretKey;
import javax.crypto.spec.IvParameterSpec;
import javax.xml.bind.DatatypeConverter;

import org.apache.commons.lang3.StringUtils;
import org.apache.log4j.Logger;

/**
 * Security class for encrypting and decrypting Strings (that also works in WC ver 7 and above)
 *
 * @author 
 *
 */
public class SecurityTools {
  private static final Logger logger = Logger.getLogger(SecurityTools.class);

  private Cipher cipher;
  private IvParameterSpec initVector;
  private SecretKey secretKey;
  PrivateKey privateKeyParam;
  PublicKey publicKeyParam;
  private static SecureRandom secureRandom = new SecureRandom();

  private static final String TRANSFORMATION = ""RSA/ECB/OAEPWithSHA-1AndMGF1Padding"";
  private static final String ALGORITHM_SHORT = ""RSA"";
  private static final String RNG_ALGORITHM = ""SHA1PRNG"";
  private static final String ALGORITHM = ""PBKDF2WithHmacSHA256"";
  private static final String UTF8 = ""UTF-8"";

  // exceptions
  private static final String _ERR_ILLEGAL_BLOCK_SIZE = ""illegal block size exception."";
  private static final String _ERR_BAD_PADDING = ""bad padding exception."";
  private static final String _ERR_INVALIDKEY = ""invalidkey exception."";
  private static final String _ERR_PADDING = ""padding exception."";
  private static final String _ERR_NO_SUCH_ALGORITHM = ""no such algorithm exception."";
  private static final String _ERR_PASSPHRASE_IS_NULL = ""passphrase is null."";
  private static final String _ERR_INVALID_ALGORITHM = ""invalid algorithm exception."";
  private static final String _ERR_UNSUPPORTED_ENCODING = ""encoding not supported."";
  private static final String _ERR_INVALID_KEY_SPEC = ""invalid key spec exception."";

  /**
   * Constructor
   *
   * @throws EncryptionException
   */
  public SecurityTools() throws EncryptionException {
    if (logger.isDebugEnabled()) {
      logger.debug(""entering Constructor"");
    }
    try {
      cipher = Cipher.getInstance(ALGORITHM_SHORT);
      generateIV();
      generateKeys();
    } catch (NoSuchAlgorithmException iae) {
      logger.error(_ERR_NO_SUCH_ALGORITHM, iae);
      throw new EncryptionException(_ERR_NO_SUCH_ALGORITHM, iae);
    } catch (NoSuchPaddingException nspe) {
      logger.error(_ERR_PADDING, nspe);
      throw new EncryptionException(_ERR_PADDING, nspe);
    }
    if (logger.isDebugEnabled()) {
      logger.debug(""exiting Constructor"");
    }
  }

  /**
   * Encrypts a given plain text String, and returns the encrypted String
   *
   * @param plainText
   * @return
   * @throws EncryptionException
   */
  public String encrypt(String plainText, PublicKey publicKey) throws EncryptionException {
    if (logger.isDebugEnabled()) {
      logger.debug(""entering encrypt"");
    }

    String encryptedKey = null;
    try {
      byte[] byteToEncrypt = plainText.getBytes(UTF8);
      cipher.init(Cipher.ENCRYPT_MODE, publicKey);
      byte[] encryptedBytes = cipher.doFinal(byteToEncrypt);
      encryptedKey = DatatypeConverter.printBase64Binary(encryptedBytes);
    } catch (IllegalArgumentException iae) {
      logger.error(_ERR_PASSPHRASE_IS_NULL, iae);
      throw new EncryptionException(_ERR_PASSPHRASE_IS_NULL, iae);
    } catch (InvalidKeyException ike) {
      logger.error(_ERR_INVALIDKEY, ike);
      throw new EncryptionException(_ERR_INVALIDKEY, ike);
    } catch (BadPaddingException bpe) {
      logger.error(_ERR_BAD_PADDING, bpe);
      throw new EncryptionException(_ERR_BAD_PADDING, bpe);
    } catch (IllegalBlockSizeException bpe) {
      logger.error(_ERR_ILLEGAL_BLOCK_SIZE, bpe);
      throw new EncryptionException(_ERR_ILLEGAL_BLOCK_SIZE, bpe);
    } catch (UnsupportedEncodingException uee) {
      logger.error(_ERR_UNSUPPORTED_ENCODING, uee);
      throw new EncryptionException(_ERR_UNSUPPORTED_ENCODING, uee);
    } /*-catch (InvalidAlgorithmParameterException iape) {
      logger.error(_ERR_INVALID_ALGORITHM, iape);
      throw new EncryptionException(_ERR_INVALID_ALGORITHM, iape);
      }*/

    if (logger.isDebugEnabled()) {
      logger.debug(""exiting encrypt"");
    }

    return encryptedKey;
  }

  /**
   * Decrypts a given encrypted String, and returns the plain text String
   *
   * @param cipherTextStr
   * @return
   * @throws EncryptionException
   */
  public String decrypt(String cipherTextStr, PrivateKey privateKey) throws EncryptionException {
    if (logger.isDebugEnabled()) {
      logger.debug(""entering decrypt"");
    }

    String cleartext = null;
    try {
      cipher.init(Cipher.DECRYPT_MODE, privateKey);
      byte[] plainByte = cipher.doFinal(DatatypeConverter.parseBase64Binary(cipherTextStr));
      cleartext = new String(plainByte);
    } /*-catch (InvalidAlgorithmParameterException iape) {
      logger.error(_ERR_INVALID_ALGORITHM, iape);
      throw new EncryptionException(_ERR_INVALID_ALGORITHM, iape);
      } */catch (IllegalArgumentException iae) {
      logger.error(_ERR_PASSPHRASE_IS_NULL, iae);
      throw new EncryptionException(_ERR_PASSPHRASE_IS_NULL, iae);
    } catch (InvalidKeyException ike) {
      logger.error(_ERR_INVALIDKEY, ike);
      throw new EncryptionException(_ERR_INVALIDKEY, ike);
    } catch (BadPaddingException bpe) {
      logger.error(_ERR_BAD_PADDING, bpe);
      throw new EncryptionException(_ERR_BAD_PADDING, bpe);
    } catch (IllegalBlockSizeException bpe) {
      logger.error(_ERR_ILLEGAL_BLOCK_SIZE, bpe);
      throw new EncryptionException(_ERR_ILLEGAL_BLOCK_SIZE, bpe);
    }

    if (logger.isDebugEnabled()) {
      logger.debug(""exiting decrypt"");
    }

    return cleartext;
  }

  /**
   * Creates the IV using Secure Random Number Generator and an empty 16byte array
   *
   * @return
   */
  private void generateIV() {
    if (logger.isDebugEnabled()) {
      logger.debug(""entering generateIV"");
    }

    byte[] newSeed = secureRandom.generateSeed(16);
    secureRandom.setSeed(newSeed);
    byte[] byteIV = new byte[16];
    secureRandom.nextBytes(byteIV);
    initVector = new IvParameterSpec(byteIV);

    if (logger.isDebugEnabled()) {
      logger.debug(""exiting generateIV"");
    }
  }

  /**
   * Generates the Key used for decryption and encryption
   *
   * @throws EncryptionException
   */
  private void generateKeys() throws EncryptionException {

    try {
      String saltStr = ""salty"";// rbConfig.getString(""salt"");
      String passPhraseStr = ""passy"";// rbConfig.getString(""passphrase"");
      if (StringUtils.isEmpty(saltStr) || StringUtils.isEmpty(passPhraseStr)) {
        throw new EncryptionException(_ERR_PASSPHRASE_IS_NULL);
      }

      KeyPairGenerator keyGen = KeyPairGenerator.getInstance(""RSA"");
      keyGen.initialize(512); // key size specified here.
      KeyPair pair = keyGen.generateKeyPair();
      privateKeyParam = pair.getPrivate();
      publicKeyParam = pair.getPublic();

      /*-byte[] salt = saltStr.getBytes();
      int iterations = 10000;
      int keyLength = 128;

      SecretKeyFactory factory = SecretKeyFactory.getInstance(ALGORITHM);
      SecretKey tmp = factory.generateSecret(new PBEKeySpec(passPhraseStr.toCharArray(), salt, iterations, keyLength));
      secretKey = new SecretKeySpec(tmp.getEncoded(), ALGORITHM_SHORT);*/
    } catch (NoSuchAlgorithmException iae) {
      logger.error(_ERR_NO_SUCH_ALGORITHM, iae);
      throw new EncryptionException(_ERR_NO_SUCH_ALGORITHM, iae);
    } /*-catch (InvalidKeySpecException e) {
      logger.error(_ERR_INVALID_KEY_SPEC, e);
      throw new EncryptionException(_ERR_INVALID_KEY_SPEC, e);
      }*/

  }

  /**
   * Test method
   *
   * @param args
   */
  public static void main(String[] args) {
    String[] message = { ""mktest"", ""9248547896548752345"", ""okok234234234okok467467"",
        ""12"" };
    String result = null;
    try {
      SecurityTools secTool = new SecurityTools();
      PrivateKey priv = secTool.getPrivateKeyParam();
      PublicKey publ = secTool.getPublicKeyParam();
      String temp = ""N5B1zgbvts3Vwrt6qyL/TBzt62HTFz0ISySx5HFu02oVq1YEhFLbrgdCndROX4/5hMpxCHGM8UJBSyZUfjD/DA=="";
      // System.out.println(""ASYMMETRIC TEST"" + secTool.decrypt(temp, priv));

      for (String mess : message) {
        result = secTool.encrypt(mess, publ);
        System.out.println(result);
        result = secTool.decrypt(result, priv);
        System.out.println(result);
      }
    } catch (Exception e) {
      System.out.println(e.getMessage());
      e.printStackTrace();

    }
  }

  /**
   * @return the privateKeyParam
   */
  public PrivateKey getPrivateKeyParam() {
    return privateKeyParam;
  }

  /**
   * @return the publicKeyParam
   */
  public PublicKey getPublicKeyParam() {
    return publicKeyParam;
  }

  class EncryptionException extends Exception {

    private static final long serialVersionUID = 1L;

    public EncryptionException() {}

    public EncryptionException(String message, Throwable cause) {
      super(message, cause);
    }

    public EncryptionException(String message) {
      super(message);
    }

    public EncryptionException(Throwable cause) {
      super(cause);
    }
  }
}

When I run that as-is it works because the main is doing the encryption and decryption all in one go.  However, when I take the output from a run, and store it in the temp String in main(), and then uncomment the line System.out.println(""ASYMMETRIC TEST"" +  is when it fails with
com.ni.apps.cartencryptutil.SecurityTools$EncryptionException: bad padding exception.
    at com.ni.apps.cartencryptutil.SecurityTools.decrypt(SecurityTools.java:154)
    at com.ni.apps.cartencryptutil.SecurityTools.main(SecurityTools.java:239)
Caused by: javax.crypto.BadPaddingException: Decryption error
    at sun.security.rsa.RSAPadding.unpadV15(RSAPadding.java:380)
    at sun.security.rsa.RSAPadding.unpad(RSAPadding.java:291)
    at com.sun.crypto.provider.RSACipher.doFinal(RSACipher.java:363)
    at com.sun.crypto.provider.RSACipher.engineDoFinal(RSACipher.java:389)
    at javax.crypto.Cipher.doFinal(Cipher.java:2165)
    at com.ni.apps.cartencryptutil.SecurityTools.decrypt(SecurityTools.java:141)
    ... 1 more

I assume my issue is that I am re-generating a new KeyPair each time, which will only work the one time as a pair. So once I try to match a PrivateKey that came from one KeyPair to the text that was encrypted with an entirely different KeyPair, it fails.  But I have yet to find how you are supposed to otherwise achieve this in that case.
","package com.ni.apps.cartencryptutil;

import java.io.UnsupportedEncodingException;
import java.security.InvalidAlgorithmParameterException;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.security.SecureRandom;
import java.security.spec.InvalidKeySpecException;
import java.util.Locale;
import java.util.MissingResourceException;
import java.util.ResourceBundle;

import javax.crypto.BadPaddingException;
import javax.crypto.Cipher;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.NoSuchPaddingException;
import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.PBEKeySpec;
import javax.crypto.spec.SecretKeySpec;
import javax.xml.bind.DatatypeConverter;

import org.apache.commons.lang3.StringUtils;
import org.apache.log4j.Logger;

import com.ni.apps.cartencryptutil.exceptions.EncryptionException;

/**
 * Security class for encrypting and decrypting Strings (that also works in WC ver 7 and above).
 *
 * @author mkohanek
 *
 */
public class SecurityTools {
  private static final Logger logger = Logger.getLogger(SecurityTools.class);

  private Cipher cipher;
  private IvParameterSpec initVector;
  private SecretKey secretKey;
  private transient ResourceBundle rbConfig;

  private static SecureRandom secureRandom = new SecureRandom();
  private static final String AES_ALGORITHM = ""AES/CBC/PKCS5Padding"";
  private static final String ALGORITHM_SHORT = ""AES"";
  private static final String PBE_ALGORITHM = ""PBEWithMD5AndDES"";
  private static final String UTF8 = ""UTF-8"";
  private static final int ITERATIONS = 10000;
  private static final int KEY_LENGTH = 128;

  // exceptions
  private static final String _ERR_ILLEGAL_BLOCK_SIZE = ""illegal block size exception."";
  private static final String _ERR_BAD_PADDING = ""bad padding exception."";
  private static final String _ERR_INVALIDKEY = ""invalidkey exception."";
  private static final String _ERR_PADDING = ""padding exception."";
  private static final String _ERR_NO_SUCH_ALGORITHM = ""no such algorithm exception."";
  private static final String _ERR_PASSPHRASE_IS_NULL = ""passphrase is null."";
  private static final String _ERR_SALT_IS_NULL = ""salt is null."";
  private static final String _ERR_INVALID_ALGORITHM = ""invalid algorithm exception."";
  private static final String _ERR_UNSUPPORTED_ENCODING = ""encoding not supported."";
  private static final String _ERR_INVALID_KEY_SPEC = ""invalid key spec exception."";

  /**
   * Constructor
   *
   * @param salt
   *          - for encryption, obtain salt from generateSalt(). for decryption, you should use the same salt used during encryption
   * @throws EncryptionException
   */
  public SecurityTools(String salt) throws EncryptionException {
    if (logger.isDebugEnabled()) {
      logger.debug(""entering Constructor"");
    }
    try {
      loadProperties();
      cipher = Cipher.getInstance(AES_ALGORITHM);
      generateIV(salt);
      generateKey(salt);
    } catch (NoSuchAlgorithmException iae) {
      logger.error(_ERR_NO_SUCH_ALGORITHM, iae);
      throw new EncryptionException(_ERR_NO_SUCH_ALGORITHM, iae);
    } catch (NoSuchPaddingException nspe) {
      logger.error(_ERR_PADDING, nspe);
      throw new EncryptionException(_ERR_PADDING, nspe);
    }
    if (logger.isDebugEnabled()) {
      logger.debug(""exiting Constructor"");
    }
  }

  /**
   * Constructor
   *
   * @param salt
   *          - for encryption, obtain salt from generateSalt(). for decryption, you should use the same salt used during encryption
   * @param passPhrase
   *          - Allows client to pass in a passphrase it wants to use rather than use the one this library defines. This must also be used when decrypting. The length limit for this key is 16
   *          characters
   * @throws EncryptionException
   */
  public SecurityTools(String salt, String passPhrase) throws EncryptionException {
    if (logger.isDebugEnabled()) {
      logger.debug(""entering Constructor"");
    }
    try {
      loadProperties();
      cipher = Cipher.getInstance(AES_ALGORITHM);
      generateIV(salt);
      generateKey(salt, passPhrase);
    } catch (NoSuchAlgorithmException iae) {
      logger.error(_ERR_NO_SUCH_ALGORITHM, iae);
      throw new EncryptionException(_ERR_NO_SUCH_ALGORITHM, iae);
    } catch (NoSuchPaddingException nspe) {
      logger.error(_ERR_PADDING, nspe);
      throw new EncryptionException(_ERR_PADDING, nspe);
    }
    if (logger.isDebugEnabled()) {
      logger.debug(""exiting Constructor"");
    }
  }

  /**
   * Encrypts a given plain text String, and returns the encrypted String
   *
   * @param plainText
   * @return
   * @throws EncryptionException
   */
  public String encrypt(String plainText) throws EncryptionException {
    if (logger.isDebugEnabled()) {
      logger.debug(""entering encrypt"");
    }

    String encryptedKey = null;
    try {
      byte[] byteToEncrypt = plainText.getBytes(UTF8);
      cipher.init(Cipher.ENCRYPT_MODE, secretKey, initVector, new SecureRandom());
      byte[] encryptedBytes = cipher.doFinal(byteToEncrypt);
      encryptedKey = DatatypeConverter.printBase64Binary(encryptedBytes);
    } catch (IllegalArgumentException iae) {
      logger.error(_ERR_PASSPHRASE_IS_NULL, iae);
      throw new EncryptionException(_ERR_PASSPHRASE_IS_NULL, iae);
    } catch (InvalidKeyException ike) {
      logger.error(_ERR_INVALIDKEY, ike);
      throw new EncryptionException(_ERR_INVALIDKEY, ike);
    } catch (BadPaddingException bpe) {
      logger.error(_ERR_BAD_PADDING, bpe);
      throw new EncryptionException(_ERR_BAD_PADDING, bpe);
    } catch (IllegalBlockSizeException bpe) {
      logger.error(_ERR_ILLEGAL_BLOCK_SIZE, bpe);
      throw new EncryptionException(_ERR_ILLEGAL_BLOCK_SIZE, bpe);
    } catch (UnsupportedEncodingException uee) {
      logger.error(_ERR_UNSUPPORTED_ENCODING, uee);
      throw new EncryptionException(_ERR_UNSUPPORTED_ENCODING, uee);
    } catch (InvalidAlgorithmParameterException iape) {
      logger.error(_ERR_INVALID_ALGORITHM, iape);
      throw new EncryptionException(_ERR_INVALID_ALGORITHM, iape);
    }

    if (logger.isDebugEnabled()) {
      logger.debug(""exiting encrypt"");
    }

    return encryptedKey;
  }

  /**
   * Decrypts a given encrypted String, and returns the plain text String
   *
   * @param cipherTextStr
   * @return
   * @throws EncryptionException
   */
  public String decrypt(String cipherTextStr) throws EncryptionException {
    if (logger.isDebugEnabled()) {
      logger.debug(""entering decrypt"");
    }

    String cleartext = null;
    try {
      cipher.init(Cipher.DECRYPT_MODE, secretKey, initVector);
      byte[] plainByte = cipher.doFinal(DatatypeConverter.parseBase64Binary(cipherTextStr));
      cleartext = new String(plainByte);
    } catch (InvalidAlgorithmParameterException iape) {
      logger.error(_ERR_INVALID_ALGORITHM, iape);
      throw new EncryptionException(_ERR_INVALID_ALGORITHM, iape);
    } catch (IllegalArgumentException iae) {
      logger.error(_ERR_PASSPHRASE_IS_NULL, iae);
      throw new EncryptionException(_ERR_PASSPHRASE_IS_NULL, iae);
    } catch (InvalidKeyException ike) {
      logger.error(_ERR_INVALIDKEY, ike);
      throw new EncryptionException(_ERR_INVALIDKEY, ike);
    } catch (BadPaddingException bpe) {
      logger.error(_ERR_BAD_PADDING, bpe);
      throw new EncryptionException(_ERR_BAD_PADDING, bpe);
    } catch (IllegalBlockSizeException bpe) {
      logger.error(_ERR_ILLEGAL_BLOCK_SIZE, bpe);
      throw new EncryptionException(_ERR_ILLEGAL_BLOCK_SIZE, bpe);
    }

    if (logger.isDebugEnabled()) {
      logger.debug(""exiting decrypt"");
    }

    return cleartext;
  }

  /**
   * Creates the IV using Secure Random Number Generator and an empty 16byte array
   *
   * @return
   */
  private void generateIV(String salt) {
    if (logger.isDebugEnabled()) {
      logger.debug(""entering generateIV"");
    }

    byte[] newSeed = DatatypeConverter.parseBase64Binary(salt);
    initVector = new IvParameterSpec(newSeed);

    if (logger.isDebugEnabled()) {
      logger.debug(""exiting generateIV"");
    }
  }

  /**
   * Generates the Key used for decryption and encryption using passphrase from properties file on library
   *
   ** @param saltStr
   * @return
   * @throws EncryptionException
   */
  private void generateKey(String saltStr) throws EncryptionException {
    if (logger.isDebugEnabled()) {
      logger.debug(""entering generateKey"");
    }

    try {
      String passPhraseStr = rbConfig.getString(""passphrase"");
      if (StringUtils.isEmpty(passPhraseStr)) {
        throw new EncryptionException(_ERR_PASSPHRASE_IS_NULL);
      }
      if (StringUtils.isEmpty(saltStr)) {
        throw new EncryptionException(_ERR_SALT_IS_NULL);
      }

      byte[] salt = DatatypeConverter.parseBase64Binary(saltStr);

      SecretKeyFactory factory = SecretKeyFactory.getInstance(PBE_ALGORITHM);
      SecretKey tmp = factory.generateSecret(new PBEKeySpec(passPhraseStr.toCharArray(), salt, ITERATIONS, KEY_LENGTH));
      secretKey = new SecretKeySpec(tmp.getEncoded(), ALGORITHM_SHORT);
    } catch (NoSuchAlgorithmException iae) {
      logger.error(_ERR_NO_SUCH_ALGORITHM, iae);
      throw new EncryptionException(_ERR_NO_SUCH_ALGORITHM, iae);
    } catch (InvalidKeySpecException e) {
      logger.error(_ERR_INVALID_KEY_SPEC, e);
      throw new EncryptionException(_ERR_INVALID_KEY_SPEC, e);
    }

    if (logger.isDebugEnabled()) {
      logger.debug(""exiting generateKey"");
    }
  }

  /**
   * Generates the Key used for decryption and encryption using passphrase passed in
   *
   * @param saltStr
   * @param passPhrase
   * @throws EncryptionException
   */
  private void generateKey(String saltStr, String passPhrase) throws EncryptionException {
    if (logger.isDebugEnabled()) {
      logger.debug(""entering generateKey"");
    }

    try {
      if (StringUtils.isEmpty(passPhrase)) {
        throw new EncryptionException(_ERR_PASSPHRASE_IS_NULL);
      }
      if (StringUtils.isEmpty(saltStr)) {
        throw new EncryptionException(_ERR_SALT_IS_NULL);
      }

      byte[] salt = DatatypeConverter.parseBase64Binary(saltStr);

      SecretKeyFactory factory = SecretKeyFactory.getInstance(PBE_ALGORITHM);
      SecretKey tmp = factory.generateSecret(new PBEKeySpec(passPhrase.toCharArray(), salt, ITERATIONS, KEY_LENGTH));
      secretKey = new SecretKeySpec(tmp.getEncoded(), ALGORITHM_SHORT);
    } catch (NoSuchAlgorithmException iae) {
      logger.error(_ERR_NO_SUCH_ALGORITHM, iae);
      throw new EncryptionException(_ERR_NO_SUCH_ALGORITHM, iae);
    } catch (InvalidKeySpecException e) {
      logger.error(_ERR_INVALID_KEY_SPEC, e);
      throw new EncryptionException(_ERR_INVALID_KEY_SPEC, e);
    }

    if (logger.isDebugEnabled()) {
      logger.debug(""exiting generateKey"");
    }
  }

  /**
   * This generates a random value of user defined size that can be used to encrypt data. The decrypting client will then need to access this value to be able to decrypt
   *
   * @return
   */
  public static String generateSaltStr(int size) {
    String salt = null;
    byte[] newSeed = secureRandom.generateSeed(size);
    salt = DatatypeConverter.printBase64Binary(newSeed);

    return salt;
  }

  /**
   * This generates a random 16 bit value that can be used to encrypt data. The decrypting client will then need to access this value to be able to decrypt
   *
   * @return
   */
  public static String generateSaltStr() {
    String salt = null;
    byte[] newSeed = secureRandom.generateSeed(16);
    salt = DatatypeConverter.printBase64Binary(newSeed);

    return salt;
  }

  /**
   * Loads properties files (call before attempting to read any properties files)
   */
  private void loadProperties() {
    try {
      rbConfig = ResourceBundle.getBundle(""application"", Locale.US);
    } catch (MissingResourceException ie) {
      logger.fatal(
          ""FATAL: SecurityTools.loadProperties Cannot read the properties file.  Please ensure the file is on the classpath."");
    } catch (Exception e) {
      logger.fatal(
          ""FATAL: SecurityTools.loadProperties Cannot read the properties file.  Please ensure the file is on the classpath."");
    }
  }

  /**
   * Test method
   *
   * @param args
   */
  public static void main(String[] args) {
    String[] message = { ""mkohanek"", ""9248547896548752345"", ""okok234234234okok467467"",
        ""12"" };
    String result = null;
    try {
      // ASYMMETRIC TEST - use this block to test values are usable over separate sessions by taking output from loop below and using it here for subsequent calls
      // String previousSalt = ""jriUh+01HlHw4g3mO9PLcw=="";
      // SecurityTools asSecTool = new SecurityTools(previousSalt);
      // String previousEncryptedValue = ""nFVxkzdx+psiUVkCW5NztQ=="";
      // System.out.println(""should decrypt to an expected value - "" + asSecTool.decrypt(previousEncryptedValue));
      // END ASYMMETRIC TEST

      // SYMMETRIC TEST - tests that single requests will encrypt and decrypt successfully
      String salt = generateSaltStr(16);
      System.out.println(""salt - "" + salt);
      SecurityTools secTool = new SecurityTools(salt);
      for (String mess : message) {
        result = secTool.encrypt(mess);
        System.out.println(result);
        result = secTool.decrypt(result);
        System.out.println(result);
      }
      // END SYMMETRIC TEST
    } catch (Exception e) {
      System.out.println(e.getMessage());
      e.printStackTrace();

    }
  }

}

","58","<java><encryption><public-key-encryption><encryption-asymmetric>","0","0","1","2019-06-28 19:43:59","56808558","4","","1810556","","2019-06-27 21:09:05","2019-06-27 20:40:53",""
"48021661","php signature output in a copy'able string","I need to copy paste the signature of a specific input in PHP, there are no errors but the resulting signature is a bunch of symbols and not alphanumeric characters, I highly assume its because I am missing some encoding somewhere. 
This is my code:
<?php 

$unformatted_pub= ""-----BEGIN PUBLIC KEY-----
MIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAs9D/xyfj7Ocgzaytkqsp
f/ABE5csbukSkmkRi9VzuxZZ9v95WJmxldH1QTIKEjAjeGuFoYY+WhqsTQYG3RuM
cZ3e0Vp26Qkkxyu2MU4fuu/ht1AYiq6SMstnS49l5D8ptjh1ZUyWjFHr+sMyHSi/
jiLUtbIK4lzpZHjMJ4g8JknKLhINLeMscRwXFEvfgSPO9AJ1hAFjuWT3UbCOS9s1
nq6daE6TexCOlXbm4rPeRHxIuZJxawPGkQAx/X9sk5mww2kJk1nbmBSll/B2qp7k
jQmXz3J/g+VwQnCIB5XtZ4bOSEVh7GBwYCkmu8PZthZVMiBlHBICTYzGyyWt2djP
lS+jen0BAIrxV3mshB4ErZsRToNCFRzGlRg1opQCJngw1NProlcGMzh1LC5C7Han
awoFUwWaGypAx2XL04WsMo4MJYgKDVN545f/SaXXVG+fTYjWX4I6GyGlqLRjfijY
SGdupIlFUdHPPKNVr1A2JZNYwBtBepvv5DEmD4+yy3gf6hwL4IYZOfUZrpl4YxoH
uZsD0Ly/2ayQBujWgmTdgoPrYB7GKwjc/jgPKvJTU965FOmKd2ujeTfed8HAky7G
DL1zrr0URMC4IZ6CtLF9BEazwzx5CrnOLZ4b2fcxgeX7C36GvNzKgD2PIhYJid10
rb/7Al/a/mWeyZGUxffhkB0CAwEAAQ==
-----END PUBLIC KEY-----"";

$unformatted_priv = ""-----BEGIN PRIVATE KEY-----
MIIJQwIBADANBgkqhkiG9w0BAQEFAASCCS0wggkpAgEAAoICAQCz0P/HJ+Ps5yDN
rK2Sqyl/8AETlyxu6RKSaRGL1XO7Fln2/3lYmbGV0fVBMgoSMCN4a4Whhj5aGqxN
BgbdG4xxnd7RWnbpCSTHK7YxTh+67+G3UBiKrpIyy2dLj2XkPym2OHVlTJaMUev6
wzIdKL+OItS1sgriXOlkeMwniDwmScouEg0t4yxxHBcUS9+BI870AnWEAWO5ZPdR
sI5L2zWerp1oTpN7EI6Vdubis95EfEi5knFrA8aRADH9f2yTmbDDaQmTWduYFKWX
8HaqnuSNCZfPcn+D5XBCcIgHle1nhs5IRWHsYHBgKSa7w9m2FlUyIGUcEgJNjMbL
Ja3Z2M+VL6N6fQEAivFXeayEHgStmxFOg0IVHMaVGDWilAImeDDU0+uiVwYzOHUs
LkLsdqdrCgVTBZobKkDHZcvThawyjgwliAoNU3njl/9JpddUb59NiNZfgjobIaWo
tGN+KNhIZ26kiUVR0c88o1WvUDYlk1jAG0F6m+/kMSYPj7LLeB/qHAvghhk59Rmu
mXhjGge5mwPQvL/ZrJAG6NaCZN2Cg+tgHsYrCNz+OA8q8lNT3rkU6Yp3a6N5N953
wcCTLsYMvXOuvRREwLghnoK0sX0ERrPDPHkKuc4tnhvZ9zGB5fsLfoa83MqAPY8i
FgmJ3XStv/sCX9r+ZZ7JkZTF9+GQHQIDAQABAoICAQCy90GLKvWb1JH+gm2iu34r
WmkH4X8UyB523+HZxdFQlDdoMO7KMvXfgj9R6wbBAW5cLM+saprmPQPeCTCNohyO
/CxHO318BGC5ZpUHz5SfDp8dPreeV48kxPMC7i7gE8llFh4peyefcu2l/96BzQuR
4LLKP/C7SPP1zpCKi/optWlnnwnE8QRLc0S5K6bAti4FB+mEP4nMfGP2xv1pHDzq
uSnrJcF9S4ZN1jCH07NVgEk1gT4m33Qi3wniHo+m++FFK+ae5GE9pNcHOQoyWMBq
avDQREoLsTCgv7Vzr1HApxfqMDv88iMGYg6t9IhbxTB4Gmvnmzj1jDZS/CZi2noG
ewJvzVMMC7ftzm1+Pez3ALawZbBx1h+HY9c/8y07PZ56y7yy6s9UpeyGImSYTmMr
KIELzMIUfPPw7F5zlOTZcg0OcUC8dArAq/DUVR7tFmou0m5GXFJaNQ3v7YncGC30
+vMsEPbLFHi95wUVTESSZuVVRk84O4d6kU+4t6iTM/WE0mdbtzlNd+Rrf9Zj31gT
S5YSvfEO7iqb4j4I8g2k6s0EUjV9WI/gCN9TpwtvNEAXX2WA+pQLu2/iQBqSomoU
ziuulTLOCgzCs1LYhC6sBpHFstdgGYCdb0RUzQYcQks+2bctUClyeg/WEvT8Fvjt
hOU++QtNy7/u7khw09cQwQKCAQEA4J2SBnHSf3fDD4yt2hZ4cfLge25SB6iLlZDY
f3/tCWolTGDx9dIZ7Tp6bjV7ZT7jQNTGHgrc7TmyXOLCm68pk+drYG10fkwN6MEl
MYpcrNCORJV+Qao+KuxB7dxZXQlHUUBG9Dr0A3mLGNKNdJtXDc5jm3OcogwEwmyQ
Mr9vSN/OcMEFj3vkoMiNMoQdwYgRWtvybt8hglNaBkIdPLjYoSWWA7bjjlp3uCFQ
YPr3+UVVIcrV9S2NQtKsPWmKpUNykXYzdeJbhgDo1cfabZspKiPP1l5xJd3a7LVb
4b0U3l5mRkjeiVgpJGg6xFdXJp2LcBQe4Av11v+EbU9GN3iILQKCAQEAzPD6Y28/
IVT8uKtX/BZImukWiNakCBHsYBt2iDy7Inrfm1scS/Qztdw6q2bJNdEAVweNHQHg
W62mNdTpozwz4ggfIi/e4/Z5JdrPSIvlgm/HZnURdCVp8n0lD7u3nv3beuHDGnGH
SCHiogGBEy8FwL0UjFB5FFsbQSQwHOnFwCNFFFp8tkSllv+6wc0JR0LnR5JzoBkp
a7crsMlf6rryT79kQueP+/mSmMh98i0mfk70vzFtcZcEmE070OafHUY+GJmW87fD
jmNq4Ry8kwQvVvysXL87WlQSJ55rhbH+D0NgUx9JYlSLfuNjsQY0EINasiKx0Y1s
hjtp7nYtZbmtsQKCAQA847pAMP7lOywPvQ0r/8dq7HJaQ4/NL62XQArQlXdGhBXU
XLt67hfFLYMe+TSYP7IPUx7Z6gv16xwk/fvPhG56/9Ml8sYPrsJehG12vpFc77SB
dx0g4+uyaxV8S62WAPvqVMhnUMvxXTON6RYbtDinL3nlHDQr4aIwqol0mFysnq8x
9cFyIh3aUEOmnBYM7rv1q4ZO9AH7eGkBJU8TtPBUzwGZxCxv3KpzqeRGRgKO+nKX
lIrnyg9vO/khNMk2/8/BCw/sNw6khv6XZXQbHmLMX6Tp8fQuVbQRUyCzUzSjC2gi
SYK6LMIKco7rxtmDSFYSbgHorpVYUTAvCbx5MR2JAoIBABupk0KEq5LGM+6BQjkG
kPpH6ADEaBOmx68ZReCRwfifeTsxCxq9dZVgipLEJviao18b59I4hJ4bTEoL2RVt
dNtXmUw2BfHjPOr9I+l46Ju4lsOfnaF9w1U1yyDah6hwP4XQn1Mca9QyrrKLXW7H
dBFV9EYUPqOewIkEZ3Ifo8+RcyuSIy8/CNLe5chu8oep4ino/K5pdwvRB5avN8Ep
Rre478GQHAE46K6ysT1VFtMJuUNtWoZwifA8zIwf9O4wowUTBisTbNP1W2HTTSjS
8cjeBi3mqg5BNsoeOgkrw00wHPpbSL57BvEzpCsq2TA5aq6MvE+6tSFRN7U2Ql5u
t6ECggEBAJIVxH4357mbqpv+DlvXW5JkFq5H1WMqIa2SGSDK/Zm2H/fRAX1YKSaF
P+KsQ1XyoefBNByxhkDlx4jtONGq23XQ6BRazfBdu7iXIGNv7VJ4J1hTUmv5PFGM
CnvSxsF+N2KodEsMZcNWs0gIUi78MXhd420IynWQYJgttLDJK+MyqrUnAWd1KcFm
8QYE1/RN/QOb2ebns39ilcBcqxDxBFiJUY3Qf9jFYb8oiln43x0L/KA02AKqpMNZ
t5gCPFB56uHwsKNs3hvzrmRO4FZLJmzbkroB55/IEaONQPRhX9VRg4ddIgCdeJBC
OoyA4sufCzG5Wgy5iBquldUSELkxXEM=
-----END PRIVATE KEY-----"";

$data = '1234';

// compute signature
openssl_sign($data, $signature, $unformatted_priv);

echo $signature;

?>

And this is the result:
���3��TQW<�^�T�Kd�i�hF�X�:0��d�GޱE�)�z9H������ө%CO��H�m˻J@���'6�>�Q�vn�r�&��絛k�=�X��_�ꗼ������1oK�3�1���&�EI��=�����}򤡖]Qo��u 4�'�\� �l��u��/������q�%���2�����)��3+����`��q҃|I�Of֯\�|e�h��u�i�""[Mjtc���""�^���j""s8��'���Y���upW9���1�#��CB�͇�f�ߩ�Hn�N�KF�@,e�݇��7�� �� aIB?.v#���Q�j>z4� ���/s����͇����uߌ,�u��!ᄃ���+""� uO  �{��O3]���h}�- �|�s����;F;�ɣj�x�O=�aw$�Jz7� (ѬJbN�T�?(<��}X%��������!y\V�5u���_C�K��s��<}�M|#w��?�mey�
Lastly, I tried to verify the signature which returns True, so there are no errors, I just want the signature in a format where I can copy and paste it.
Any and all help is greatly appreciated.
","echo base64_encode($signature);

","58","<php><encryption><public-key-encryption>","0","2","2","2017-12-29 11:24:20","48021817","0","","","","","2017-12-29 11:09:44",""
"48021661","php signature output in a copy'able string","I need to copy paste the signature of a specific input in PHP, there are no errors but the resulting signature is a bunch of symbols and not alphanumeric characters, I highly assume its because I am missing some encoding somewhere. 
This is my code:
<?php 

$unformatted_pub= ""-----BEGIN PUBLIC KEY-----
MIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAs9D/xyfj7Ocgzaytkqsp
f/ABE5csbukSkmkRi9VzuxZZ9v95WJmxldH1QTIKEjAjeGuFoYY+WhqsTQYG3RuM
cZ3e0Vp26Qkkxyu2MU4fuu/ht1AYiq6SMstnS49l5D8ptjh1ZUyWjFHr+sMyHSi/
jiLUtbIK4lzpZHjMJ4g8JknKLhINLeMscRwXFEvfgSPO9AJ1hAFjuWT3UbCOS9s1
nq6daE6TexCOlXbm4rPeRHxIuZJxawPGkQAx/X9sk5mww2kJk1nbmBSll/B2qp7k
jQmXz3J/g+VwQnCIB5XtZ4bOSEVh7GBwYCkmu8PZthZVMiBlHBICTYzGyyWt2djP
lS+jen0BAIrxV3mshB4ErZsRToNCFRzGlRg1opQCJngw1NProlcGMzh1LC5C7Han
awoFUwWaGypAx2XL04WsMo4MJYgKDVN545f/SaXXVG+fTYjWX4I6GyGlqLRjfijY
SGdupIlFUdHPPKNVr1A2JZNYwBtBepvv5DEmD4+yy3gf6hwL4IYZOfUZrpl4YxoH
uZsD0Ly/2ayQBujWgmTdgoPrYB7GKwjc/jgPKvJTU965FOmKd2ujeTfed8HAky7G
DL1zrr0URMC4IZ6CtLF9BEazwzx5CrnOLZ4b2fcxgeX7C36GvNzKgD2PIhYJid10
rb/7Al/a/mWeyZGUxffhkB0CAwEAAQ==
-----END PUBLIC KEY-----"";

$unformatted_priv = ""-----BEGIN PRIVATE KEY-----
MIIJQwIBADANBgkqhkiG9w0BAQEFAASCCS0wggkpAgEAAoICAQCz0P/HJ+Ps5yDN
rK2Sqyl/8AETlyxu6RKSaRGL1XO7Fln2/3lYmbGV0fVBMgoSMCN4a4Whhj5aGqxN
BgbdG4xxnd7RWnbpCSTHK7YxTh+67+G3UBiKrpIyy2dLj2XkPym2OHVlTJaMUev6
wzIdKL+OItS1sgriXOlkeMwniDwmScouEg0t4yxxHBcUS9+BI870AnWEAWO5ZPdR
sI5L2zWerp1oTpN7EI6Vdubis95EfEi5knFrA8aRADH9f2yTmbDDaQmTWduYFKWX
8HaqnuSNCZfPcn+D5XBCcIgHle1nhs5IRWHsYHBgKSa7w9m2FlUyIGUcEgJNjMbL
Ja3Z2M+VL6N6fQEAivFXeayEHgStmxFOg0IVHMaVGDWilAImeDDU0+uiVwYzOHUs
LkLsdqdrCgVTBZobKkDHZcvThawyjgwliAoNU3njl/9JpddUb59NiNZfgjobIaWo
tGN+KNhIZ26kiUVR0c88o1WvUDYlk1jAG0F6m+/kMSYPj7LLeB/qHAvghhk59Rmu
mXhjGge5mwPQvL/ZrJAG6NaCZN2Cg+tgHsYrCNz+OA8q8lNT3rkU6Yp3a6N5N953
wcCTLsYMvXOuvRREwLghnoK0sX0ERrPDPHkKuc4tnhvZ9zGB5fsLfoa83MqAPY8i
FgmJ3XStv/sCX9r+ZZ7JkZTF9+GQHQIDAQABAoICAQCy90GLKvWb1JH+gm2iu34r
WmkH4X8UyB523+HZxdFQlDdoMO7KMvXfgj9R6wbBAW5cLM+saprmPQPeCTCNohyO
/CxHO318BGC5ZpUHz5SfDp8dPreeV48kxPMC7i7gE8llFh4peyefcu2l/96BzQuR
4LLKP/C7SPP1zpCKi/optWlnnwnE8QRLc0S5K6bAti4FB+mEP4nMfGP2xv1pHDzq
uSnrJcF9S4ZN1jCH07NVgEk1gT4m33Qi3wniHo+m++FFK+ae5GE9pNcHOQoyWMBq
avDQREoLsTCgv7Vzr1HApxfqMDv88iMGYg6t9IhbxTB4Gmvnmzj1jDZS/CZi2noG
ewJvzVMMC7ftzm1+Pez3ALawZbBx1h+HY9c/8y07PZ56y7yy6s9UpeyGImSYTmMr
KIELzMIUfPPw7F5zlOTZcg0OcUC8dArAq/DUVR7tFmou0m5GXFJaNQ3v7YncGC30
+vMsEPbLFHi95wUVTESSZuVVRk84O4d6kU+4t6iTM/WE0mdbtzlNd+Rrf9Zj31gT
S5YSvfEO7iqb4j4I8g2k6s0EUjV9WI/gCN9TpwtvNEAXX2WA+pQLu2/iQBqSomoU
ziuulTLOCgzCs1LYhC6sBpHFstdgGYCdb0RUzQYcQks+2bctUClyeg/WEvT8Fvjt
hOU++QtNy7/u7khw09cQwQKCAQEA4J2SBnHSf3fDD4yt2hZ4cfLge25SB6iLlZDY
f3/tCWolTGDx9dIZ7Tp6bjV7ZT7jQNTGHgrc7TmyXOLCm68pk+drYG10fkwN6MEl
MYpcrNCORJV+Qao+KuxB7dxZXQlHUUBG9Dr0A3mLGNKNdJtXDc5jm3OcogwEwmyQ
Mr9vSN/OcMEFj3vkoMiNMoQdwYgRWtvybt8hglNaBkIdPLjYoSWWA7bjjlp3uCFQ
YPr3+UVVIcrV9S2NQtKsPWmKpUNykXYzdeJbhgDo1cfabZspKiPP1l5xJd3a7LVb
4b0U3l5mRkjeiVgpJGg6xFdXJp2LcBQe4Av11v+EbU9GN3iILQKCAQEAzPD6Y28/
IVT8uKtX/BZImukWiNakCBHsYBt2iDy7Inrfm1scS/Qztdw6q2bJNdEAVweNHQHg
W62mNdTpozwz4ggfIi/e4/Z5JdrPSIvlgm/HZnURdCVp8n0lD7u3nv3beuHDGnGH
SCHiogGBEy8FwL0UjFB5FFsbQSQwHOnFwCNFFFp8tkSllv+6wc0JR0LnR5JzoBkp
a7crsMlf6rryT79kQueP+/mSmMh98i0mfk70vzFtcZcEmE070OafHUY+GJmW87fD
jmNq4Ry8kwQvVvysXL87WlQSJ55rhbH+D0NgUx9JYlSLfuNjsQY0EINasiKx0Y1s
hjtp7nYtZbmtsQKCAQA847pAMP7lOywPvQ0r/8dq7HJaQ4/NL62XQArQlXdGhBXU
XLt67hfFLYMe+TSYP7IPUx7Z6gv16xwk/fvPhG56/9Ml8sYPrsJehG12vpFc77SB
dx0g4+uyaxV8S62WAPvqVMhnUMvxXTON6RYbtDinL3nlHDQr4aIwqol0mFysnq8x
9cFyIh3aUEOmnBYM7rv1q4ZO9AH7eGkBJU8TtPBUzwGZxCxv3KpzqeRGRgKO+nKX
lIrnyg9vO/khNMk2/8/BCw/sNw6khv6XZXQbHmLMX6Tp8fQuVbQRUyCzUzSjC2gi
SYK6LMIKco7rxtmDSFYSbgHorpVYUTAvCbx5MR2JAoIBABupk0KEq5LGM+6BQjkG
kPpH6ADEaBOmx68ZReCRwfifeTsxCxq9dZVgipLEJviao18b59I4hJ4bTEoL2RVt
dNtXmUw2BfHjPOr9I+l46Ju4lsOfnaF9w1U1yyDah6hwP4XQn1Mca9QyrrKLXW7H
dBFV9EYUPqOewIkEZ3Ifo8+RcyuSIy8/CNLe5chu8oep4ino/K5pdwvRB5avN8Ep
Rre478GQHAE46K6ysT1VFtMJuUNtWoZwifA8zIwf9O4wowUTBisTbNP1W2HTTSjS
8cjeBi3mqg5BNsoeOgkrw00wHPpbSL57BvEzpCsq2TA5aq6MvE+6tSFRN7U2Ql5u
t6ECggEBAJIVxH4357mbqpv+DlvXW5JkFq5H1WMqIa2SGSDK/Zm2H/fRAX1YKSaF
P+KsQ1XyoefBNByxhkDlx4jtONGq23XQ6BRazfBdu7iXIGNv7VJ4J1hTUmv5PFGM
CnvSxsF+N2KodEsMZcNWs0gIUi78MXhd420IynWQYJgttLDJK+MyqrUnAWd1KcFm
8QYE1/RN/QOb2ebns39ilcBcqxDxBFiJUY3Qf9jFYb8oiln43x0L/KA02AKqpMNZ
t5gCPFB56uHwsKNs3hvzrmRO4FZLJmzbkroB55/IEaONQPRhX9VRg4ddIgCdeJBC
OoyA4sufCzG5Wgy5iBquldUSELkxXEM=
-----END PRIVATE KEY-----"";

$data = '1234';

// compute signature
openssl_sign($data, $signature, $unformatted_priv);

echo $signature;

?>

And this is the result:
���3��TQW<�^�T�Kd�i�hF�X�:0��d�GޱE�)�z9H������ө%CO��H�m˻J@���'6�>�Q�vn�r�&��絛k�=�X��_�ꗼ������1oK�3�1���&�EI��=�����}򤡖]Qo��u 4�'�\� �l��u��/������q�%���2�����)��3+����`��q҃|I�Of֯\�|e�h��u�i�""[Mjtc���""�^���j""s8��'���Y���upW9���1�#��CB�͇�f�ߩ�Hn�N�KF�@,e�݇��7�� �� aIB?.v#���Q�j>z4� ���/s����͇����uߌ,�u��!ᄃ���+""� uO  �{��O3]���h}�- �|�s����;F;�ɣj�x�O=�aw$�Jz7� (ѬJbN�T�?(<��}X%��������!y\V�5u���_C�K��s��<}�M|#w��?�mey�
Lastly, I tried to verify the signature which returns True, so there are no errors, I just want the signature in a format where I can copy and paste it.
Any and all help is greatly appreciated.
","As PHP docs example suggests the best way is to save signature to a file instead of copying it.
//create signature
openssl_sign($data, $signature, $private_key_pem);

//save for later
file_put_contents('private_key.pem', $private_key_pem);
file_put_contents('public_key.pem', $public_key_pem);
file_put_contents('signature.dat', $signature);

//verify signature
$r = openssl_verify($data, $signature, $public_key_pem);
var_dump($r);

","58","<php><encryption><public-key-encryption>","0","0","2","2017-12-29 11:24:20","48021817","0","","","","","2017-12-29 11:09:44",""
"54707416","Client side public key encryption","We are building a mobile app that has the following functions

Capture user information (text, audio) while not connected to the internet
Store the information on the device, encrypted using a server-side public key
When internet connectivity is available, upload to s3 using pre-signed URL
Once the file is available in s3 another background process(?) decrypts it using the server-side private of the above public-key and copy to another bucket

Due to regulatory requirements, files on the device need to be encrypted at rest while not connected to the internet. Otherwise s3 encryption client (AmazonS3EncryptionClient) could be used for this purpose to encrypt on the fly when uploading to. 
My question is on step 4. Is it possible to use an s3 trigger lambda function for this step? I imagine the limit of available disk size for lambda will mean copying file from s3 to lambda local directory will not work for large files (the files can be few gigabytes large). What other options are available (preferably serverless)? What about streaming s3 object and decrypt in-memory? 
","
Is it possible to use an s3 trigger lambda function for this step? ..  What about streaming s3 object and decrypt in-memory?

You may read-decrypt-write on s3 as a stream, then the lambda limitation will at the execution time (900s = 15 minutes). If you could process the file in 15 minutes, using lamba may be good idea. IMHO you can process a lot of GB in 15 minutes, but there's always the 15 min. limit (it was 5 minutes some time ago).

What other options are available 

If you want to process the files without any processing-time limit, I'd suggest to have the s3 lambda send a message to an AWS Job Queue 
","57","<c#><encryption><amazon-s3><aws-lambda><public-key-encryption>","0","1","1","2019-02-15 12:22:57","","0","","","","","2019-02-15 10:33:38",""
"55223916","Validate signature from public key, automatically detect algorithm in BouncyCastle","My question is: how can I write my signature validation function to be agnostic of the public key algorithm?
I'm working with .Net's BouncyCastle library (v1.8.4). I'm trying to validate a signature without knowing the algorithm in advance (but it's identification will be embedded in the public key).
I need to verify the signature for a byte stream and I've got the public key in PEM format:
-----BEGIN PUBLIC KEY-----
MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAE7t7Uo4NB7kjqPGMzdXbBI66gy8rz
oYvRatFPTGsdS9lCru6imfdMclcr/hCkxHgfgz0ewmKqEjWK8EjZczUCEA==
-----END PUBLIC KEY-----

I expect it to inform the algorithm within the ASN.1 stream, which in this example parses like this:
$ openssl asn1parse -i -in pubkey.pem
    0:d=0  hl=2 l=  89 cons: SEQUENCE
    2:d=1  hl=2 l=  19 cons:  SEQUENCE
    4:d=2  hl=2 l=   7 prim:   OBJECT            :id-ecPublicKey
   13:d=2  hl=2 l=   8 prim:   OBJECT            :prime256v1
   23:d=1  hl=2 l=  66 prim:  BIT STRING

The algoritm is in this case is prime256v1 (secp256k1, etc.), but I won't know what is it in advance. Currently, my code looks like this:
Private Function SignatureChecks(data() as Byte, pubkey as String, signature as String) As Boolean

    Dim keypars As Org.BouncyCastle.Crypto.AsymmetricKeyParameter 'impements ICipherParameters

    'Read and parse the PEM file into the proper object
    Dim pubkeybytes = Encoding.ASCII.GetBytes(pubkey)
    Using pubkeystream = New MemoryStream(pubkeybytes)
        Using reader = New StreamReader(pubkeystream)
            Dim pemrd = New PemReader(reader)
            'Now this is the decoded PEM for the public key
            keypars = pemrd.ReadObject()
        End Using
    End Using

    Dim signer As ISigner

    '*************************************************************
    'Currently this is hardwired: how can I make this intelligent?
    '*************************************************************
    signer = SignerUtilities.GetSigner(""SHA-256withECDSA"")

    'Init the signer with the public key
    signer.Init(False, keypars)
    'Appends the data to be verified in the SHA block buffer
    signer.BlockUpdate(data, 0, data.Length)

    'Get the bytes from the signature
    Dim sigbytes = Convert.FromBase64String(signature)

    Return signer.VerifySignature(sigbytes)

End Function

This code works fine, as long as the signature was made using the secp256k1 algorithm, which might not be the case. I've tried extracting the info from the AsymmetricKeyParameter object (which is actually an ECPublicKeyParameters), but it has very few public members. However, the relevant information does show in the internals of the object using the debugger: values like publicKeyParamSet=1.2.840.10045.3.1.7, algorithm=""EC"", etc.
Thanks in advance
","The prime256v1 algorithm informed in the public key is just the encryption algorithm (as it should be), while no hash algorithm is specified in either the public key or the signature. To verify the signature, a hash function (in this case SHA-256) must be agreed between the actors using other means. An example is CMS encoding (formerly PKCS#7), which is a container method that can embed all the information required to check the signature validity. Obtaining the encryption algorithm from the public key is not sufficient for performing the task.
","57","<.net><digital-signature><bouncycastle><public-key-encryption><asn.1>","0","0","1","2019-03-19 14:06:41","","0","","","","","2019-03-18 14:41:28",""
"47896658","Sending File Over LAN"," Simple Progarm To Send And Receive Files Over LAN Using Tcp

i want encrypt the file and send it over the lan using both symmetric and asymmetric key approaches,an AES Encryption/Decryption First , then use RSA to Encrypt/Decrypt the symmetric key 

scenario example

johan wants to send Alice a file securely johan must log into the application with his username and password if registered. 
  If .not, johan must create a username and password If registered for the first time,
   johan must generate the pair of key's (Public key and .Private key). 
   Publish the public key and keep the private key secret To send the file to Alice,
   johan generates a random key from the application to use in the encryption process of the file using AES. 
   After the file encryption is done,
   johan uses Alice's Published public key to encrypt the key using RSA and sends the file .
   with the encrypted key When Alice receives the file,
   she must log into the application and uses her stored private key to decrypt the RSA encrypted key. 
   After that she uses the decrypted key to decrypt the file 

This is my code

but i have difficult to understand the encryption Libraries in c# i don't know from where i will start please  anyone help me 

GUI
Groupbox called ""Send"" contain 2 textbox and 2 buttons
 1 - type : textbox name : SrcFilePathTextBox    for   Path
 2 - type : textbox name : DstAddressTextBox     for  Target IP
 3 - type : Button  name : SrcFilePathBrowseButton     for  open file dialog 
 4 - type : Button  name : SendButton        for  start sending Process

 groupbox called ""receive"" contain textbox and 2 buttons
 1 - type : textbox name : LocalhostInfoTextBox    for   Show PC LAN INFO
 2 - type : Button  name : LocalhostInfoLoadButton     for  Put Info In      textbox
 3 - type : Button  name : ReceiveWaitButton   for  start receiving Process
 and at the end progress bar

The Code
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing;
using System.Text;
using System.Windows.Forms;
using System.Net;
using System.Net.Sockets;
using System.IO;
using System.Diagnostics;
namespace JustSendItPrototype
{
public partial class Form1 : Form
{
    public Form1()
    {
        InitializeComponent();
    }
    private void SrcFilePathBrowseButton_Click(object sender, EventArgs e)
    {
        if (SrcOpenFileDialog.ShowDialog(this) == System.Windows.Forms.DialogResult.OK)
            SrcFilePathTextBox.Text = SrcOpenFileDialog.FileName;
    }
    const int PORT = 32665;
    const int BUF_SIZE = 65536;
    private void ReceiveWaitButton_Click(object sender, EventArgs e)
    {
        try
        {
            TcpListener tcpListener = new TcpListener(IPAddress.Any, 32665);
            tcpListener.Start();
            using (TcpClient tcpClient = tcpListener.AcceptTcpClient())
            {
                using (NetworkStream networkStream = tcpClient.GetStream())
                {
                    using (BinaryReader reader = new BinaryReader(networkStream))
                    {
                        using (BinaryWriter writer = new BinaryWriter(networkStream))
                        {
                            string fileName = reader.ReadString();
                            long fileLength = reader.ReadInt64();
                            Debug.Print(""FileName={0}, FileLength={1}"", fileName, fileLength);
                            DstSaveFileDialog.FileName = fileName;
                            if (DstSaveFileDialog.ShowDialog(this) == System.Windows.Forms.DialogResult.OK)
                            {
                                using (FileStream fileStream = new FileStream(DstSaveFileDialog.FileName, FileMode.Create))
                                {
                                    if (fileLength > 0)
                                    {
                                        byte[] buf = new byte[BUF_SIZE];
                                        long bytesLeft = fileLength;
                                        while (bytesLeft > 0)
                                        {
                                            int bytesToTransfer = (int)Math.Min(bytesLeft, (long)BUF_SIZE);
                                            Debug.Print(""Reading {0} B"", bytesToTransfer);
                                            int bytesRead = reader.Read(buf, 0, bytesToTransfer);
                                            Debug.Print(""Read {0} B"", bytesRead);
                                            if (bytesRead > 0)
                                            {
                                                fileStream.Write(buf, 0, bytesRead);
                                                bytesLeft -= bytesRead;
                                                ProgressBar1.Value = 1000 - (int)(bytesLeft * 1000 / fileLength);
                                            }
                                            else
                                                System.Threading.Thread.Sleep(30);
                                        }
                                    }
                                    Debug.Print(""Sending confirmation"");
                                    writer.Write((byte)1);
                                    MessageBox.Show(this, ""File received successfully."", ""Receive File"", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                }
                            }
                        }
                    }
                }
            }
        }
        catch (Exception ex)
        {
            MessageBox.Show(this, ex.Message, ""Receive File"", MessageBoxButtons.OK, MessageBoxIcon.Error);
        }
    }
    private void SendButton_Click(object sender, EventArgs e)
    {
        try
        {
            string srcFilePath = SrcFilePathTextBox.Text;
            FileInfo fileInfo = new FileInfo(srcFilePath);
            long fileLength = fileInfo.Length;

            using (FileStream fileStream = new FileStream(srcFilePath, FileMode.Open))
            {
                using (TcpClient sendingClient = new TcpClient(DstAddressTextBox.Text, PORT))
                {
                    using (NetworkStream sendingStream = sendingClient.GetStream())
                    {
                        using (BinaryWriter binaryWriter = new BinaryWriter(sendingStream))
                        {
                            using (BinaryReader binaryReader = new BinaryReader(sendingStream))
                            {
                                string fileName = Path.GetFileName(srcFilePath);
                                binaryWriter.Write(fileName);
                                binaryWriter.Write(fileLength);
                                Debug.Print(""FileName={0}, FileLength={1}"", fileName, fileLength);

                                if (fileLength > 0)
                                {
                                    byte[] buf = new byte[BUF_SIZE];
                                    long bytesLeft = fileLength;
                                    while (bytesLeft > 0)
                                    {
                                        int bytesToTransfer = (int)Math.Min(bytesLeft, (long)BUF_SIZE);
                                        fileStream.Read(buf, 0, bytesToTransfer);
                                        Debug.Print(""Sending {0} B"", bytesToTransfer);
                                        binaryWriter.Write(buf, 0, bytesToTransfer);
                                        bytesLeft -= bytesToTransfer;
                                        ProgressBar1.Value = 1000 - (int)(bytesLeft * 1000 / fileLength);
                                    }
                                }

                                Debug.Print(""Reading confirmation..."");
                                byte answer = binaryReader.ReadByte();
                                if (answer == 1)
                                    MessageBox.Show(this, ""File sent successfully."", ""Send File"", MessageBoxButtons.OK, MessageBoxIcon.Information);
                            }
                        }
                    }
                }
            }
        }
        catch (Exception ex)
        {
            MessageBox.Show(this, ex.Message, ""Send File"", MessageBoxButtons.OK, MessageBoxIcon.Error);
        }
    }
    private void LocalhostInfoLoadButton_Click(object sender, EventArgs e)
    {
        try
        {
            System.Text.StringBuilder sb = new StringBuilder();

            string hostname = Dns.GetHostName();
            sb.Append(""Hostname: "");
            sb.Append(hostname);
            sb.Append(""\r\n"");

            IPAddress[] addresses = Dns.GetHostAddresses(hostname);
            foreach (IPAddress address in addresses)
            {
                sb.Append(""IP: "");
                sb.Append(address.ToString());
                sb.Append(""\r\n"");
            }

            LocalhostInfoTextBox.Text = sb.ToString();
        }
        catch (Exception ex)
        {
            MessageBox.Show(this, ex.Message, ""Send File"", MessageBoxButtons.OK, MessageBoxIcon.Error);
        }
    }
}
}

","I am not at a computer right now, but the easiest way to accomplish your scenario is to use SslStream on both ends.
On the server(Johan) once you have an incoming connection, you create an SslStream from the TcpStream. On the server, you will use SslStream.AuthenticateAsServer(), this method accepts an X509Certificate (this will be your private key). 
On the client(Alice) you will instead use SslStream.AuthenticateAsClient.
To both of these methods you can pass a Certificate Validation Callback. In your case you will only do this on client side, and check the given certificate is the one that was provided by Johan.
EDIT: I have reread your question and as you requested, I have created an example that first sends a key encrypted with RSA and uses that key to encrypt the following data
When some data is received, first the Key is decrypted, and then used for AES decryption. It is a very rough example, I have no registration and login and I have certificates stored so they both have private and public keys, but should be enough for you to accomplish your goal
","57","<c#><encryption><public-key-encryption>","1","0","1","2017-12-21 22:38:35","","2","","","","","2017-12-19 23:22:39",""
"26381917","Asymmetric unique pair algorithm","This is a fast question. I know about asymmetric encryption and I know that you can use the private key to decrypt whatever is encrypted with the public key. I know too that having the Private key I can generate the public one associated to it. 
Here is my question: Is there any crypto algorithm to generate a pair of keys so I can't generate the public one having the private? 
I would like to know if there is something like 
Private(ciphertext) = Encrypted 
Public(Encrypted) = ciphertext
Public(ciphertext) = Encrypted2
Private(Encrypted2)= ciphertext
And without generating the public from the private.
Thank you very much
","The RSA algorithm relies on the difficulty of factoring the product of two prime numbers. 
Two large, arbitrary, prime numbers p and q are used generate each private-public key pair. Given either only the private key or the public key, it is computationally difficult to find the other key without the prime numbers p and q. However, we do not p and q in order to apply either the public or the private key to a text.
","57","<algorithm><encryption><public-key-encryption><private-key><encryption-asymmetric>","0","0","2","2014-10-15 15:27:26","","0","","","","","2014-10-15 11:54:14",""
"26381917","Asymmetric unique pair algorithm","This is a fast question. I know about asymmetric encryption and I know that you can use the private key to decrypt whatever is encrypted with the public key. I know too that having the Private key I can generate the public one associated to it. 
Here is my question: Is there any crypto algorithm to generate a pair of keys so I can't generate the public one having the private? 
I would like to know if there is something like 
Private(ciphertext) = Encrypted 
Public(Encrypted) = ciphertext
Public(ciphertext) = Encrypted2
Private(Encrypted2)= ciphertext
And without generating the public from the private.
Thank you very much
","You can't conclude that because you have a private key then you can generate the public key. Take RSA as an example - here you can't deduct one of the keys in a key pair from the other - and which one is picked as the private key, and which is picked as the public key is random.
However, when storing the keys the private key file usually includes a copy of the public key as well (or enough information to recreate it). 
","57","<algorithm><encryption><public-key-encryption><private-key><encryption-asymmetric>","0","0","2","2014-10-15 15:27:26","","0","","","","","2014-10-15 11:54:14",""
"34250659","How to limit people access to my EC2 with their public key","Working on EC2 is a snap, you just download the .pem file, give it the right permissions, and you are ready to go, yet ... if you have the .pem file you have full access to the EC2 instance!!
What shall I do to limit people's access to the instance in a controllable way, e.g. people pass me their public key and add it to the instance a la Github
","Follow the steps in this document: http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/managing-users.html
There are 3 steps:

You have to add a user account (adduser) for each user
Make sure the user-home/.ssh dir has 600 permission (chmod)
Add the user public key to user-home/.ssh/authorized_keys and make sure it has 700 permission (chmod)

","56","<amazon-web-services><amazon-ec2><public-key-encryption>","1","3","1","2015-12-13 18:42:40","34254856","10","1","","","","2015-12-13 11:38:03",""
"47050104","Converting public key type to big int","I'm trying to convert my key to a big integer or string in order to take the value of the key. I am currently attempting to convert it to string, where I used
String keyAsString = Base64.getEncoder().encodeToString(receiveKey.getData());

System.out.println(keyAsString);

However, my output is a gibberish of 
MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQC6+ew597p9xGvEjJDRp3pfs1Gjy5UdkhvowzOQeBrAAtNeLa90nAAKFaJEppnuxfudCq0uN6mtvstkQubmA48CL57ScbBGJDGnxnyeagBiFiLmLyG4ETG0Jy9Keu63JzkaN1tbKn6OFydagqzkESS62NfN8adgRHNQVSzQeYBFjw
When I print out the public key, the output is
Sun RSA public key, 1024 bits
  modulus: 131299195463002215195329154870192371667344432008148874302996116714224964708229917223113454026144808551200135139817822182165252026686969926061551496173054324976472225390492516878760786130402059883104313320788015389521111743083669001615716568215520705969686885579227144800412281170037125266006383196172915328399
public exponent: 65537
My goal is to extract out random value from my public key. If there is any other ways to do this, please do advice me on it. Thank you.
","","56","<java><string><public-key-encryption>","0","","0","2017-11-01 07:29:04","","5","","","","","2017-11-01 07:29:04",""
"46972373","How dos ssh connects to an aws EC2 instance even though I didn't explicitly save the public key of the instance on the client?","As I understand the way ssh works is that the two parties agree on a symmetric key for each session. This agreement is done by using the parties' corresponding public key, so it assumes that each party has access to the public key of the other entity. For example, this happens using the Diffie-Hellman key exchange algorithm. 
However, when sshing to an AWS instance, my client doesn't seem to have access to the public key of the instance (in that I didn't explicitly save it on the client), so how is the key exchange part of the ssh process completed?
","When ssh client connects to the server, the server presents its own public key to the client.  If the client does not have the public key, it can prompt the user to establish the trust with the host. If the user accepts the prompt, the client uses the public of the server and might save it locally for future ssh connections. You can typically see that key in ~/.ssh/known_hosts
","56","<amazon-web-services><encryption><amazon-ec2><ssh><public-key-encryption>","1","1","1","2017-10-28 07:13:08","","0","","738826","","2017-10-27 15:57:32","2017-10-27 09:57:35",""
"57288592","Cross Platform RSA Encryption C# to Java and Java to C#","I have generated an RSA key size of 1024 in my Windows form application. The code for the test application is as follows:
namespace WindowsFormsApp1
{
    public partial class Form1 : Form
    {
        private static CspParameters cspParameters;
        const string keyName = ""TestKey1"";
        private static RSACryptoServiceProvider devrsa;
        private RSAParameters publicKey;
        private RSAParameters privateKey;

        public Form1()
        {
            InitializeComponent();
        }

        private void BtnGenerate_Click(object sender, EventArgs e)
        {
            cspParameters = new CspParameters();

            cspParameters.KeyContainerName = keyName;
            devrsa = new RSACryptoServiceProvider(1024, cspParameters);
            devrsa.PersistKeyInCsp = true;

            publicKey = devrsa.ExportParameters(false);
            privateKey = devrsa.ExportParameters(true);

            var mod = publicKey.Modulus;
            var exp = publicKey.Exponent;

            var pubKey = new PublicKey
            {
                modulus = Array.ConvertAll(mod, b => unchecked((sbyte)b)),
                exponent = Array.ConvertAll(exp, b => unchecked((sbyte)b)),
            };

            var sPubKey = JsonConvert.SerializeObject(pubKey);

            var bytePubKey = Encoding.ASCII.GetBytes(sPubKey);

            PrintByteArray(bytePubKey);
        }


        public void PrintByteArray(Byte[] bytes)
        {
            var sb = new StringBuilder(""new byte[] { "");
            foreach (var b in bytes)
            {
                sb.Append(b + "", "");
            }
            sb.Append(""}\n"");
            Console.WriteLine(sb.ToString());
        }
    }

public class PublicKey
{
    [JsonProperty(""modulus"")]
    public SByte[] modulus { get; set; }
    [JsonProperty(""exponent"")]
    public SByte[] exponent { get; set; }
    public PublicKey()
    {

    }
    public PublicKey(SByte[] modulus, SByte[] exponent)
    {
        this.modulus = modulus;
        this.exponent = exponent;
    }
}

I take a copy of the console printed out byte array and use it as input in my Test Android Application. The Test android application is supposed to take the public key as input and use the imported public key to encrypt a sample text string. 
The Code for the Android Application is as follows:
class MainActivity : AppCompatActivity() {


    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)

        setContentView(R.layout.activity_main)

        retrieveElements()
    }


    fun retrieveElements() {
        val request = ByteHelper.pubKey
        var key = ByteHelper.retrieveKey(request)

        val cipher = createCipher(key)

        encrypt(cipher)

    }

    fun createCipher(publicKey: PublicKey): Cipher {
        val modulus = BigInteger(publicKey.modulus)
        val exponent = BigInteger(publicKey.exponent)

        var spec = RSAPublicKeySpec(modulus, exponent)
        var fact = KeyFactory.getInstance(KeyProperties.KEY_ALGORITHM_RSA)

        var publicKey = fact.generatePublic(spec)

        var cipher = Cipher.getInstance(""RSA/ECB/OAEPWithSHA-256AndMGF1Padding"")
        cipher.init(Cipher.ENCRYPT_MODE, publicKey)
        return cipher
    }

    fun encrypt(cipher: Cipher)
    {
        val testString = ""This is a test string""

        val stringBytes = testString.toByteArray(StandardCharsets.US_ASCII)

        val encryptedBytes = cipher.doFinal(stringBytes)

    }
}

class ByteHelper
{
    companion object
    {
        val pubKey = byteArrayOf( 123, 34, 109, 111, 100, 117, 108, 117, 115, 34, 58, 91, 45, 55, 49, 44, 45, 51, 50, 44, 45, 55, 44, 45, 49,
            48, 55, 44, 45, 51, 54, 44, 45, 51, 54, 44, 51, 54, 44, 45, 56, 44, 45, 51, 48, 44, 45, 49, 50, 53, 44, 45, 52, 44, 49,
            48, 48, 44, 45, 54, 49, 44, 45, 56, 48, 44, 45, 55, 53, 44, 50, 44, 52, 44, 49, 50, 51, 44, 52, 50, 44, 53, 54, 44, 45,
            53, 49, 44, 54, 55, 44, 45, 55, 44, 57, 55, 44, 49, 48, 54, 44, 45, 49, 49, 55, 44, 45, 49, 49, 57, 44, 45, 49, 49, 54,
            44, 45, 49, 50, 50, 44, 45, 50, 53, 44, 45, 55, 51, 44, 45, 51, 51, 44, 55, 49, 44, 45, 54, 53, 44, 53, 48, 44, 51, 50,
            44, 45, 51, 49, 44, 45, 49, 48, 56, 44, 45, 55, 49, 44, 45, 49, 49, 51, 44, 53, 53, 44, 45, 49, 49, 48, 44, 53, 55, 44,
            45, 55, 50, 44, 50, 44, 51, 49, 44, 51, 52, 44, 45, 49, 49, 48, 44, 55, 48, 44, 45, 57, 54, 44, 45, 57, 48, 44, 52, 52,
            44, 49, 49, 48, 44, 45, 49, 48, 55, 44, 45, 50, 53, 44, 45, 49, 56, 44, 49, 53, 44, 45, 51, 50, 44, 45, 56, 52, 44, 45,
            53, 44, 51, 53, 44, 45, 49, 48, 44, 45, 54, 49, 44, 45, 53, 51, 44, 49, 50, 49, 44, 45, 50, 50, 44, 56, 53, 44, 45, 49,
            48, 48, 44, 45, 52, 55, 44, 57, 51, 44, 45, 49, 49, 54, 44, 57, 44, 49, 51, 44, 55, 50, 44, 49, 50, 49, 44, 45, 52, 48,
            44, 45, 54, 53, 44, 49, 48, 53, 44, 45, 52, 52, 44, 45, 51, 50, 44, 51, 53, 44, 49, 49, 54, 44, 49, 49, 57, 44, 50, 56,
            44, 45, 55, 53, 44, 52, 53, 44, 56, 52, 44, 45, 53, 55, 44, 49, 55, 44, 49, 49, 44, 45, 49, 53, 44, 45, 52, 51, 44, 45,
            56, 55, 44, 49, 51, 44, 45, 52, 57, 44, 51, 53, 44, 55, 49, 44, 45, 51, 48, 44, 45, 49, 48, 57, 44, 45, 50, 52, 44, 51,
            49, 44, 45, 51, 50, 44, 50, 54, 44, 45, 51, 56, 44, 49, 49, 56, 44, 45, 52, 49, 44, 45, 51, 52, 44, 49, 57, 44, 45, 49,
            50, 50, 44, 45, 54, 51, 44, 52, 48, 44, 50, 53, 44, 57, 54, 44, 45, 56, 55, 44, 52, 53, 44, 45, 53, 48, 44, 45, 53, 54,
            44, 45, 55, 48, 44, 45, 49, 48, 55, 44, 45, 56, 54, 44, 52, 55, 44, 49, 48, 53, 44, 45, 51, 44, 45, 53, 57, 44, 53, 52,
            44, 45, 49, 50, 49, 44, 56, 52, 44, 45, 51, 93, 44, 34, 101, 120, 112, 111, 110, 101, 110, 116, 34, 58, 91, 49, 44, 48,
            44, 49, 93, 125)

        fun retrieveKey(bytes: ByteArray) : PublicKey
        {
            var jsonString = String(bytes, Charset.forName(""US-ASCII""))

            var publicKey = Gson().fromJson(jsonString, PublicKey::class.java)

            return publicKey
        }
    }
}

data class PublicKey(
    @SerializedName(""modulus"") var modulus: ByteArray,
    @SerializedName(""exponent"") var exponent: ByteArray
) {
    constructor() : this(ByteArray(0), ByteArray(0))
}

However, when I run the Android version of my application. I get the following error.
com.android.org.bouncycastle.crypto.DataLengthException: input too large for RSA cipher.
        at android.app.ActivityThread.performLaunchActivity(ActivityThread.java:2666)
        at android.app.ActivityThread.handleLaunchActivity(ActivityThread.java:2727)
        at android.app.ActivityThread.-wrap12(ActivityThread.java)
        at android.app.ActivityThread$H.handleMessage(ActivityThread.java:1478)
        at android.os.Handler.dispatchMessage(Handler.java:102)
        at android.os.Looper.loop(Looper.java:154)
        at android.app.ActivityThread.main(ActivityThread.java:6121)
        at java.lang.reflect.Method.invoke(Native Method)
        at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:889)
        at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:779)
     Caused by: com.android.org.bouncycastle.crypto.DataLengthException: input too large for RSA cipher.
        at com.android.org.bouncycastle.crypto.engines.RSACoreEngine.convertInput(RSACoreEngine.java:115)
        at com.android.org.bouncycastle.crypto.engines.RSABlindedEngine.processBlock(RSABlindedEngine.java:95)
        at com.android.org.bouncycastle.crypto.encodings.OAEPEncoding.encodeBlock(OAEPEncoding.java:199)
        at com.android.org.bouncycastle.crypto.encodings.OAEPEncoding.processBlock(OAEPEncoding.java:131)
        at com.android.org.bouncycastle.jcajce.provider.asymmetric.rsa.CipherSpi.engineDoFinal(CipherSpi.java:475)
        at javax.crypto.Cipher.doFinal(Cipher.java:2056)
        at com.touchsides.myapplication.MainActivity.encrypt(MainActivity.kt:54)

","Within the createCipher function, the issue related to the conversion of the ByteArray to a BigInteger. 
val modulus = BigInteger(1, publicKey.modulus)
val exponent = BigInteger(1, publicKey.exponent)

var spec = RSAPublicKeySpec(modulus, exponent)
var fact = KeyFactory.getInstance(KeyProperties.KEY_ALGORITHM_RSA)

var publicKey = fact.generatePublic(spec)

var cipher = Cipher.getInstance(""RSA/ECB/OAEPWithSHA-1AndMGF1Padding"")
cipher.init(Cipher.ENCRYPT_MODE, publicKey)

To allow for decryption on the other side the cipher instance needs to be changed from :
RSA/ECB/OAEPWithSHA-256AndMGF1Padding => RSA/ECB/OAEPWithSHA-1AndMGF1Padding

","56","<java><c#><android><rsa><public-key-encryption>","0","0","1","2019-07-31 16:10:09","57295009","1","","4319835","","2019-07-31 11:04:57","2019-07-31 10:25:13",""
"19952015","ios how to import a public key into my project","So I have been given a Publikey.key in which to encrypt data for an ios project.
1) How do I deal with this in my project, should I simply copy the key as a resource or does it need to be added to some keychain on the actual device ? This is the part which is not clear to me.
2) How do I generate a SecKeyRef object from this PublicKey.key ? Once I have that object in my code then I can begin encryption process. 
if you have done something like this before please give me some pointers.
Thanks
","","55","<ios><security><ios7><public-key-encryption>","0","","0","2013-11-13 11:03:02","","2","","","","","2013-11-13 11:03:02","2014-04-22 14:28:34"
"52312586","PublicKey.load_pkcs1 for Java","I am looking to load a PEM public key to encrypt a value. In Python I would just use a higher level function like PublicKey.load_pkcs1. I cannot find such a function for the Java/Scala anywhere.
Is such available or do I need to reimplement following the Python implementation?

EDIT:
The content is:
-----BEGIN RSA PUBLIC KEY-----
...
-----END RSA PUBLIC KEY-----

","Making this work is quite simple.
You only need to call a Python script from Scala like so:
val encryptedValue: String = Seq(""python3"", ""foobar.py"", pemKey, value).!!

In Python you can then simply implement PKCS1 reading via:
import base64
import rsa
import sys

pemKey = sys.argv[1]
value = sys.argv[2]
pk = rsa.PublicKey.load_pkcs1(bytes(pemKey, 'utf-8'))
encrypted = base64.b64encode(
    rsa.encrypt(value.encode('utf-8'), pk)).decode('utf-8')
print(encrypted)

","55","<java><scala><encryption><public-key-encryption>","-2","-1","1","2018-09-14 08:46:36","52327951","6","","725937","","2018-09-13 11:28:40","2018-09-13 11:17:34",""
"28365992","Ssh public key authentication without changing system files","I am changing different parameters like RSAAuthentication, PubkeyAuthentication and PasswordAuthentication (sudo vim /etc/ssh/sshd_config) to disable ssh password authentication to force ssh login via public key only. 
The experiments are adversely affecting many users as they suddenly find ""Connection refused"" while trying to ssh to the server. I want to avoid these experiments. Is there any work around to enable public key authentication without touching system files like /etc/ssh/ssd_config?
","Sure.  Set up an alternative configuration file, and run sshd on another port while you are experimenting:
cp sshd_config sshd_config_working
/usr/sbin/sshd -p 2222 -f sshd_config_working

Now you can connect with:
ssh -p 2222 user@localhost

And you can make as many changes as you want until you it working as desired.  At that point, copy your _working config back to the main config file and restart sshd.
Alternatively, stop mucking about on a production server and set up a virtual machine or cotainer for testing, where you can modify the sshd configuration as much as you want without affecting anybody.
","55","<linux><unix><ssh><public-key-encryption><openssh>","-1","2","1","2015-02-06 14:27:23","","0","","1766169","","2015-02-06 14:00:58","2015-02-06 12:39:14",""
"52672303","Python encrypt with PGP","i want to encrypt a sting with a public PGP key from my database.
till now i search trough a lot of libsa and apps and such but i simply dont find a good working way here. I dont need any Key management and to be honest, it would be wonderful not to use any external binary here.
I only need the encrypt function to wrap the string as a PGP encrypted message.
does anybody have a lightwight idea here?
This one seems to be a solution:
https://github.com/singpolyma/OpenPGP-Python
but its quite old.
thanks and kind regards
","The protocols that OpenPGP uses are not different from what many libraries use.
If you only want to encrypt a string you shouldn't worry too much about this unles you are going to store the string somewhere.
What I would recommend is useing the pyAesCrypt module as It is easy to read and It makes use of the more complicated Cryptography module which is pretty much the basis in which many cryptographic libraries are based, It is also partially written in C.
","55","<python><public-key-encryption>","0","0","1","2019-07-18 15:39:13","","0","","","","","2018-10-05 19:38:55",""
"57463010","How to decrypt in PHP without knowing a key?","I encrypted a text using a key and would like to understand this method if it is vulnerable or not.
Could you tell me if it's easy to decrypt, what methods exist and if maybe I should change the encryption method?
$text = ""Hello this is my word"";
$method = ""aes-256-ecb"";
$ivlen = openssl_cipher_iv_length($method);
$iv = openssl_random_pseudo_bytes($ivlen);
$secretKey= ""abcdefghilmnop10032001"";

$encrypted = openssl_encrypt($text, $method, $secretKey, $options=0, $iv);
$decrypted = openssl_decrypt($encrypted, $method, $secretKey, $options=0, $iv);

print_r($encrypted);
print_r('<br>');    
print_r($decrypted);

The encrypted text is:
Ad4jgTNQlNiSBXGidMoAPZeJkUAxQrYPYKHwc9/80Z0=

Besides with openssl_encrypt is possible to have a salt and so ever a different encrypted text (also if text doesn't change)?
","You can add salt to the key.
$text = ""Hello this is my word"";
$method = ""aes-256-ecb"";
$ivlen = openssl_cipher_iv_length($method);
$iv = openssl_random_pseudo_bytes($ivlen);
$secretKey= ""abcdefghilmnop10032001"";
$salt_length = 10;
$salt = make_salt($salt_length); // You need to define this function

$encrypted = $salt . openssl_encrypt($text, $method, $salt . $secretKey, $options=0, $iv);
$salt = substr($encrypted, 0, $salt_length);
$decrypted = openssl_decrypt(substr($encrypted, $salt_length), $method, $salt . $secretKey, $options=0, $iv);

print_r($encrypted);
print_r('<br>');    
print_r($decrypted);

Notice that you have to save the salt along with the encrypted string, so that you can get it back for decrypting.
","55","<php><encryption><openssl><public-key-encryption><encryption-symmetric>","0","1","1","2019-08-12 15:24:46","","17","","3001761","","2019-08-12 14:25:23","2019-08-12 14:23:08",""
"49131495","with a rsa publickey string (not a file), when I encrypt, I got an error ""invalid key format""","I've a public key string(get from an api), and i want to encrypt the parameter using the public key, while I get the error ""java.security.InvalidKeyException: invalid key format"", my code is as below:
try {
            KeyFactory keyFactory = KeyFactory.getInstance(""RSA"");
            X509EncodedKeySpec publicKeySpec = new X509EncodedKeySpec(publicKey.getBytes());
            PublicKey key = keyFactory.generatePublic(publicKeySpec);
            params = EncryptionUtil.encrypt(params.getBytes(), key);
        } catch (Exception e) {
            logger.error(e.getMessage());
        }

        logger.info(""encrypt params:"" + params);

the publicKey value is: ""MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDBYu61cljDpI+XdWPO1bi5Ricv5+U/4u9Mqj4SdWp8YnCr3FaXTphW5mJol9KdqzK50GmD0Kv1x4z5gz6TDayfn527FX9KEO/puFlPiIkik2lg5UP9vGIyeWKoaxw1S8skjW13Md+Lw4i9ZqeoI9boLVMJdxMCtS+MTVDNxwDShwIDAQAB""
so, how to solve the problem?
","You have to decode you public key from api:
String pubk = ""MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDBYu61cljDpI+XdWPO1bi5Ricv5+U/4u9Mqj4SdWp8YnCr3FaXTphW5mJol9KdqzK50GmD0Kv1x4z5gz6TDayfn527FX9KEO/puFlPiIkik2lg5UP9vGIyeWKoaxw1S8skjW13Md+Lw4i9ZqeoI9boLVMJdxMCtS+MTVDNxwDShwIDAQAB"";
byte[] bPubk = Base64.getDecoder().decode(pubk);

try {
    KeyFactory kf = KeyFactory.getInstance(""RSA"");
    X509EncodedKeySpec publicKeySpec = new X509EncodedKeySpec(bPubk);
    PublicKey key = kf.generatePublic(publicKeySpec);
    System.out.println(key);
} catch (Exception e) {
    System.err.println(e.getMessage());
}

Give this result:
Sun RSA public key, 1024 bits
  modulus: 135800586859931582642310957384205018809539137294767840577881254803756232956639555134422701591513823339589448014996895987307431572469047529249728795673095119495397484042215360480856267006156705758125294683622900407564820516858390483599968159314547137229473538993288665937138465454319026029781283370049170625159
  public exponent: 65537

","54","<java><rsa><public-key-encryption>","1","2","1","2018-03-06 13:53:23","49132477","0","","","","","2018-03-06 13:00:27",""
"20439718","Is it possible to have multiple Private Key for a given Public Key?","Considering that the public key of the package is completely visible to every other app:

Is it possible to generate a new private key for the given public key of a package?

","","54","<android><certificate><public-key-encryption>","0","","0","2013-12-07 09:20:39","","4","","","","","2013-12-07 09:20:39",""
"17210365","Distribute a decryption key through Remote Notification Service on the phone?","I'm trying to use remote notification service(Apple APN or Android GCM) to send info to an app in the foreground(currently running).
//This is register the iOS  app with Remote Notification Server   
[[UIApplication sharedApplication] registerForRemoteNotificationTypes:
                                                   UIRemoteNotificationTypeAlert];
//Successfully registered since user allowed it    
-(void)application:.. didRegisterForRemoteNotificationsWithDeviceToken:
                                                            (NSData *)deviceToken;

For security purpose, I'm sending some encrypted message from server to my app directly, and I'm trying to send the decryption key through Remote Notification Service, to make sure this decryption key won't be received by any other app, hence improve the security somehow.
//this is how I receive notification in iOS app    
-(void)application:.. didReceiveRemoteNotification:(NSDictionary *)userInfo;

Since I don't need to alert the user when the app is not running in the foreground, I only want to send info to a running app through a third Authority, Is this a reasonable approach to distribute a cryptography key?
What if the user disabled the notification on the phone? 
Any advice is appreciated, thank you.
","Simple RSA encryption should do just what you need.
I would just preload the app with a public key. And then any messages I am sending over the wire I would have my services encrypt with my private key. If you are trying to get a key to apps that are already on the users devices, I would still preload the key and just update my app.
","54","<ios><security><push-notification><google-cloud-messaging><public-key-encryption>","0","0","1","2013-06-20 14:18:10","","0","","544715","","2013-06-20 11:11:50","2013-06-20 09:41:33",""
"36739918","How to get the message from the signature as a receiver","If I use server-client method, the client update signature using data(message).
And send to server. How does the server get the message from this signature?
final String message = ""Hello world is a stupid message to be signed"";

final KeyPair keyPair = KeyPairGenerator.getInstance(""RSA"").generateKeyPair();

final Signature privSig = Signature.getInstance(""SHA1withRSA"");

privSig.initSign(keyPair.getPrivate());

privSig.update(message.getBytes());

byte[] signature = privSig.sign();

final Signature pubSig = Signature.getInstance(""SHA1withRSA"");

pubSig.initVerify(keyPair.getPublic());
pubSig.update(message.getBytes());

System.out.println(pubSig.verify(signature));

","The signature contains the message in a mangled or digested form. You cannot extract the message from it. You need to send the plain message along with the signature to the receiver. Otherwise, they cannot verify the validity.
","53","<java><digital-signature><public-key-encryption><private-key><java-security>","-1","0","1","2016-04-20 10:19:46","36740727","0","","1816580","","2016-04-20 10:19:46","2016-04-20 09:46:21",""
"36563649","Python script for encrypting / decrypting suddenly doesn't work","I'm brushing up on public/private keypair encryption. To illustrate the concept to myself, I wrote a primitive script. It used to work just a week ago with my python client:
> Python 2.7.9 (default, Apr  2 2015, 15:33:21)  [GCC 4.9.2] on linux2
> Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.
> >>>

Today, I tried to run it, and got the following error:
work@work-IdeaPad-U330p:~/projects/Script$ python example_encrypt_decrypt.py 
Traceback (most recent call last):
  File ""example_encrypt_decrypt.py"", line 9, in <module>
    encrypted_message = public_key_1.encrypt(M, 24)
  File ""/usr/local/lib/python2.7/dist-packages/Crypto/PublicKey/RSA.py"", line 123, in __getattr__
    raise AttributeError(attrname)
AttributeError: encrypt

The script I'm running is this:
from Crypto.PublicKey import RSA
import binascii

private_key_1 = RSA.generate(1024)
public_key_1  = private_key_1.publickey()

M = ""Hello World.""

encrypted_message = public_key_1.encrypt(M, 24)
# print binascii.hexlify(encrypted_message[0])

# The private key corresponding to the public key used
# to encrypt the message can decrypt the message.
decrypted_message = private_key_1.decrypt(encrypted_message)
print decrypted_message

# The message can not be decrypted with another
# private key.
private_key_2 = RSA.generate(1024)
print private_key_2.decrypt(encrypted_message)

","","53","<python><public-key-encryption>","0","","0","2018-04-22 09:36:40","","5","","1033581","","2018-04-22 09:36:40","2016-04-12 04:30:00",""
"55282063","How to encrypt text using RSA algo","I need to encrypt texts written in a file and decrypt it, without using the PyCrypto library. The file will contain string type data. Now I want to convert the strings to int numbers so that I can apply the RSA keys on the integer values. But I did not find any tutorial on how to convert texts into int. How to convert the strings into its integer value and Is there any better way of doing this? then how? Thank you.
","I too had this project, and I did this: 
First what you will need is to read the datas from the text file and save it to a list. You can use .split() which will do this : 
If the file contains only one line like this 
hello ! it will make it as 
list_of_the_file['h', 'e', 'l', 'l', 'o', ' ', '!']
Now as you have a list of all the letters that the file contains serially, you can use the ord() which will generate a unique value for each type of character for example a or more precisely ord(a) will give you the value 97 and it will return 97 only for the a present in the list not for any other character. Then you can apply the keys on that integer value and can store it in a list or a file. Hope this will help. 
","53","<python><python-3.x><encryption><rsa><public-key-encryption>","0","1","1","2019-03-25 19:07:51","55344870","7","0","","","","2019-03-21 13:56:06",""
"57117756","Getting RSA key size from modulus string in javascript","In C# we have a way to figure out RSA key size from modulus string like shown below,
Is there a similar way to get key size in JavaScript or typescript?
var bytesModulus = Convert.FromBase64String(modulusString);

using (var rsa = new RSACryptoServiceProvider())
{
 var rsaKeyInfo = rsa.ExportParameters(false);

 rsaKeyInfo.Modulus = modulus;
 rsa.ImportParameters(rsaKeyInfo);

 return rsa.KeySize;
}

","Assuming the key is following the rules of making the modulus be between 2^(8n - 1) and (2^(8n) - 1) you only need to know the byte length for the modulus (then multiply by 8).
After removing any white space the answer would be:

Hexadecimal: the string length * 4 (length / 2 is bytes, * 8 to get bits)
Base64: ((length + 3) / 4) * 24 — or if you are only getting the =-padded version: length * 6 (length / 4 * 3 bytes, * 8 for bits, reduces to * 3 * 2 when the input is known to be a multiple of 4)
Decimal string: harder. Without a bignum library you can only bound it: it’s greater than length * 3.3, and less than length * 6.7 (or 3 and 7, if you prefer).
Other: Figure out the length in bytes, multiply by 8.

","52","<javascript><typescript><rsa><public-key-encryption><rsacryptoserviceprovider>","0","0","1","2019-07-22 17:28:55","","1","","","","","2019-07-19 18:15:32",""
"56294734","What is the private key and what is public?","This question seems simplistic, but I'm studying for the 70-483 C# exam and getting a little confused.
I understand that Public/Private keys are mathmatically interlinked properties. One can encrypt a message, the other can decrypt.
Everything I read e.g. Wikipedia, Quora, codeproject shows the public key being used to encrypt and private key to decrypt.
However, the practice exam I'm working on (MeasureUp) seems to change which is used. 
Sometimes the answers state to use the pubic key to encrypt, BUT sometimes they state to use the private key.
Example:

The application must communicate securely with the DMV. The DMV must
  be sure that data sent from your application was not modified in
  transit.

Answer to example: 

Generate a hash of the data. Encrypt the hash with
  the private key of your company. Send the data and the encrypted
  hash to the DMV.

The 'Show Answers' part then goes on to explain the above explicitly stating to encrypt with the private key.
Is it just the case that you have to consider what's public and what's private in context? 
e.g.
A) If it doesn't matter if other people can see the message just as long as they can't make one of their own - encrypt using the key you ""keep private"".
B) If other people can make a message, just as long as I'm the only one who can read it - encrypt using the publicly available key.
I feel like MeasureUp might have it wrong, but surely I'm more likely to be wrong than a big company.
Please can someone explain/ provide clarity on why this answer would be correct?
","There are two different security scenarios; in encryption, you encrypt with the public key and decrypt with the private key; but with signing, you sign with the private key, and validate with the public key.
Most likely, the question is about signing, not encryption.
Since the question mentions:

The DMV must be sure that data sent from your application was not modified in transit.

this is signing (integrity and proof of who authored it), not encryption.
","52","<encryption><public-key-encryption>","0","4","2","2019-05-24 14:39:00","56294789","1","","852806","","2019-05-24 14:39:00","2019-05-24 14:32:06",""
"56294734","What is the private key and what is public?","This question seems simplistic, but I'm studying for the 70-483 C# exam and getting a little confused.
I understand that Public/Private keys are mathmatically interlinked properties. One can encrypt a message, the other can decrypt.
Everything I read e.g. Wikipedia, Quora, codeproject shows the public key being used to encrypt and private key to decrypt.
However, the practice exam I'm working on (MeasureUp) seems to change which is used. 
Sometimes the answers state to use the pubic key to encrypt, BUT sometimes they state to use the private key.
Example:

The application must communicate securely with the DMV. The DMV must
  be sure that data sent from your application was not modified in
  transit.

Answer to example: 

Generate a hash of the data. Encrypt the hash with
  the private key of your company. Send the data and the encrypted
  hash to the DMV.

The 'Show Answers' part then goes on to explain the above explicitly stating to encrypt with the private key.
Is it just the case that you have to consider what's public and what's private in context? 
e.g.
A) If it doesn't matter if other people can see the message just as long as they can't make one of their own - encrypt using the key you ""keep private"".
B) If other people can make a message, just as long as I'm the only one who can read it - encrypt using the publicly available key.
I feel like MeasureUp might have it wrong, but surely I'm more likely to be wrong than a big company.
Please can someone explain/ provide clarity on why this answer would be correct?
","Both keys can be used to en- and decrypt. The difference is: you should be the only one to have your private key. Everybody else can have the public key.
So if you encrypt something, everybody can be sure that the content was sent by you, because the public key can only successfully decrypt your message if it really was encrypted with your private key.
On the other hand, if someone wants to send you a message that only you can read, they will encrypt it with your public key. So only you  can decrypt it again (or someone who stole your private key).
","52","<encryption><public-key-encryption>","0","2","2","2019-05-24 14:39:00","56294789","1","","852806","","2019-05-24 14:39:00","2019-05-24 14:32:06",""
"19128553","Encryption security","Let's say we have a number (12345) and we want to store it in the database but encrypted somehow.
We would like to avoid using any common encryption method.
We would like to know if doing this is secure, and if it is, HOW secure.
Original number: 12345
Shuffle: 35124
Add some data: 53412-35124-14352
then you store it on the db...
You can read the original number since you know where to look.
Is this method easlily reverse engineered?
","Let's say I have some way of sending you some numbers to store. I send you a few numbers, then I inspect your ""encrypted"" numbers.
Number I Sent       Number You Stored
12345               53412-35124-14352
11111               73671-11111-78162
67890               98126-80679-98983

Just by looking at that, you can quite easily see what's going on.
You really should not invent your own crypto algorithm. I'll just quote Bruce Scheier:

Anyone, from the most clueless amateur to the best cryptographer, can create an algorithm that he himself can't break. It's not even hard. What is hard is creating an algorithm that no one else can break, even after years of analysis. And the only way to prove that is to subject the algorithm to years of analysis by the best cryptographers around.

","51","<encryption><public-key-encryption>","0","0","2","2014-09-03 11:25:58","19128819","5","","","","","2013-10-02 01:20:32",""
"19128553","Encryption security","Let's say we have a number (12345) and we want to store it in the database but encrypted somehow.
We would like to avoid using any common encryption method.
We would like to know if doing this is secure, and if it is, HOW secure.
Original number: 12345
Shuffle: 35124
Add some data: 53412-35124-14352
then you store it on the db...
You can read the original number since you know where to look.
Is this method easlily reverse engineered?
","The method is very easily reverse engineered and broken.
Something this simple would probably be broken with a human looking at it and noticing that the a constant mapping of positions. I give you abcd and you give me back bdca-bafd-jc6f. The extra data you added does not obscure the first 4 characters are linked
However if there was a more complicated method something similar to machine learning could be applied where computer will detect these direct patterns. Google translations use a version of this to produce translations through pure maths and books that have been translated into multiple languages.
In addition if you are only shuffling numbers the sample space of encrypting something will be quite small.
eg. If the encrypted text is: 1342
Better encryption would mean it could have originally been 0 - 9999 (10,000 total)
Your encryption tells me it started as one of these 24 charcters:
1234 | 2134 | 3124 | 4123

1243 | 2143 | 3142 | 4132

1324 | 2341 | 3214 | 4213

1342 | 2341 | 3241 | 4231

1423 | 2413 | 3412 | 4312

1432 | 2431 | 3421 | 4321

Finally:
Because the ""secrecy"" of your encryption comes from people not knowing how perform it you cannot ask the community to examine its strength without them knowing how you did it and thus cracking it.
All good encryption methods ""secrecy"" comes from a key or password which means you can share the method and ask the community to test its strength because you don't give them the key.
","51","<encryption><public-key-encryption>","0","0","2","2014-09-03 11:25:58","19128819","5","","","","","2013-10-02 01:20:32",""
"39475201","Secure URL parameters when an application delegates the user (concept)","Context
We have an application A that guides our customer consultants throught a workflow based process. Part of this process has been outsourced to a own webapplication - lets call it application B.
Wenn calling application B the certificate of the current user is used for the HTTPs connection (since it just delegates the HTTP GET to a new browser window). 
Application A has the required data to autorize users to perform certain actions while application B expects the autorization to be done once a URL is called. 
Application A must as well deliver certain data such as IDs to enable application B to know for example what customer is beeing processed. 
Requirements
That application B can expect the autorization to have been done it must be ensured that only application A was the source of the call and the user has not changed the parameters of the URL (which he can as it is his certificate that is used for the HTTPS connection). 
What have we done
We thought of building a hash over the parameters, encrypt it with the private key of application A and submit it as additional parameter with any request. Application B uses the public key of application A to decrypt the hash, build a hash over the received parameter and check that parameters have not been changed. 
My Question
What would be other possibilities to ensure the source of the call was application A and the parameters have not been changed by the user?
(If not clear please leave a comment i am currently painting some grafics and can overwork the question). 
Regards
JBA
","So A signs the parameters for B, which is a step in the right direction.
A few more things to consider:

Replay attacks. A malicious user of B might observe a desired set of parameters signed by A. He can replay those anytime in the future, along with the valid signature from A, even if A did not intend to call B with those parameters anymore (say the authorization information changed). To mitigate this, a nonce or a timestamp should also be signed in the request and checked by B when validating the signature (the nonce should be checked for uniqueness, the timestamp for not being too old).
Participants (who's messaging whom). When A signs the message, the signed data should contain the intended recipient, so that an attacker cannot take a message from A to C, and send it to B. Of course if all of your components have a single instance, that's less of an issue, but still A should include something like the message is for B's url, and B should check that the url signed is actually the right one. Similarly, A should include the information that it was signed by A (his own url or IP address for example), and B should validate that the apparent and signed sender are the same.
Not creating a signing oracle. You should make sure that a user cannot use A as a signing oracle for making signatures. The less data a user of A can choose himself for A to sign, the better.

By the way (and apart from all of this), wouldn't it be simpler if B could just query A over some kind of an API request for all the information it needs? That way you wouldn't have to bother with all the relatively complex crypto stuff and would not have to pass sensitive info through the user.
","50","<security><http><public-key-encryption><url-parameters>","0","1","1","2016-09-13 22:36:11","39479924","0","","","","","2016-09-13 16:49:18",""
"47472444","Can SSL key pair only be used on host where key was generated?","I note that when I use ssh-keygen to generate a public/private key pair, the public key file includes details of the user name and host on which the key was generated. Does this mean that this pair can only be used when communicating from this host? I would like to generate key pairs for a group of users and distribute them on to them, without them needing to know the details of the process.
","The host and username info at the end of the public key file generated by ssh-keygen is a comment.  You can edit it without affecting the key.  Its purpose is to help any recipients of the public key in remembering whose key it is.
That said, transferring a private key needs to be handled with some care.  Are your group members comfortable with the idea that you'll effectively have the ability to impersonate them (because you could have kept their private keys)?  
Could you solve this instead by scripting ssh-keygen for them, and pushing their resulting public keys to a publicly accessible place?
Edit: why is this tagged [ssl]? If you're planning on using SSL/TLS (instead of SSH) you don't want to make your keys with ssh-keygen.  You'll have a much easier time with openssl's key/cert-gen tools, e.g.:
openssl req -newkey rsa:3072 -nodes -keyout key.pem -x509 -days 365 -out certificate.pem

(which will prompt you for all the info about whose key it is, and will put that info into the resulting self-signed certificate)
","50","<openssl><public-key-encryption>","0","1","1","2017-11-24 15:27:54","47472734","0","","2816348","","2017-11-24 15:27:54","2017-11-24 11:32:58",""
"57432239","How to convert the object of Uint8Array to string and convert back string to same object?","I am using eccrypto.js library for public key encryption.
Here I want to encrypt the message of A using public key of B and then let B to decrypt using private key of B.
In the library this is done by: 
// Encrypting the message for B.
eccrypto.encrypt(publicKeyB, Buffer.from(""msg to b"")).then(function(encrypted) {
  // B decrypting the message.
  eccrypto.decrypt(privateKeyB, encrypted).then(function(plaintext) {
    console.log(""Message to part B:"", plaintext.toString());
  });
});

if I console log the encrypted value I got the object as:
{iv: Uint8Array(16), ephemPublicKey: Uint8Array(65), ciphertext: Uint8Array(48), mac: Uint8Array(32)}
ciphertext: Uint8Array(48) [13, 240, 10, 109, 88, 109, 108, 153, 213, 115, 40, 237, 66, 232, 251, 120, 27, 67, 119, 231, 17, 143, 78, 69, 43, 76, 214, 74, 132, 127, 220, 131, 44, 144, 221, 133, 48, 124, 239, 158, 226, 22, 119, 200, 170, 101, 241, 82]
ephemPublicKey: Uint8Array(65) [4, 84, 253, 207, 251, 2, 157, 203, 14, 233, 166, 216, 107, 1, 23, 90, 229, 209, 150, 58, 95, 253, 214, 183, 148, 167, 224, 15, 224, 244, 176, 165, 84, 121, 70, 4, 175, 186, 189, 104, 211, 207, 255, 195, 20, 128, 200, 237, 7, 9, 173, 234, 14, 208, 208, 68, 46, 76, 38, 26, 107, 41, 10, 188, 108]
iv: Uint8Array(16) [230, 246, 79, 17, 203, 191, 117, 7, 57, 149, 198, 68, 193, 220, 159, 56]
mac: Uint8Array(32) [202, 77, 212, 211, 27, 186, 174, 106, 211, 145, 100, 81, 100, 68, 61, 172, 175, 188, 213, 49, 63, 92, 172, 83, 30, 22, 47, 93, 60, 215, 33, 116]

Note: I have to store this in json format so i have converted it into json data. 
Now if I convert this object to json and recover the json data the recovered object is not same.
Json object:
{
""iv"":{""type"":""Buffer"",""data"":[226,253,245,0,227,222,47,37,65,177,171,68,201,142,242,35]},
""ephemPublicKey"":{""type"":""Buffer"",""data"":[4,9,137,99,138,202,169,89,90,209,92,130,156,105,170,132,192,250,88,232,15,250,33,107,38,13,129,178,21,237,77,136,215,39,215,123,140,226,102,98,39,110,192,209,79,214,138,83,174,192,100,183,157,44,56,128,38,52,170,244,42,213,199,57,232]},
""ciphertext"":{""type"":""Buffer"",""data"":[135,147,187,164,109,39,204,244,195,161,65,24,178,160,132,146,200,35,113,120,164,140,20,223,225,104,23,111,13,155,193,26,35,73,236,77,209,246,85,16,77,30,250,122,206,242,111,63]},
""mac"":{""type"":""Buffer"",""data"":[79,195,220,150,230,150,13,187,9,131,12,81,151,107,29,216,138,143,85,52,153,71,179,167,243,141,107,88,97,206,110,107]}}


The recovered object (JSON.parse(encrypted)) is:
{iv: {…}, ephemPublicKey: {…}, ciphertext: {…}, mac: {…}}
ciphertext:
data: (48) [135, 147, 187, 164, 109, 39, 204, 244, 195, 161, 65, 24, 178, 160, 132, 146, 200, 35, 113, 120, 164, 140, 20, 223, 225, 104, 23, 111, 13, 155, 193, 26, 35, 73, 236, 77, 209, 246, 85, 16, 77, 30, 250, 122, 206, 242, 111, 63]
type: ""Buffer""
__proto__: Object
ephemPublicKey:
data: (65) [4, 9, 137, 99, 138, 202, 169, 89, 90, 209, 92, 130, 156, 105, 170, 132, 192, 250, 88, 232, 15, 250, 33, 107, 38, 13, 129, 178, 21, 237, 77, 136, 215, 39, 215, 123, 140, 226, 102, 98, 39, 110, 192, 209, 79, 214, 138, 83, 174, 192, 100, 183, 157, 44, 56, 128, 38, 52, 170, 244, 42, 213, 199, 57, 232]
type: ""Buffer""
__proto__: Object
iv:
data: (16) [226, 253, 245, 0, 227, 222, 47, 37, 65, 177, 171, 68, 201, 142, 242, 35]
type: ""Buffer""
__proto__: Object
mac:
data: (32) [79, 195, 220, 150, 230, 150, 13, 187, 9, 131, 12, 81, 151, 107, 29, 216, 138, 143, 85, 52, 153, 71, 179, 167, 243, 141, 107, 88, 97, 206, 110, 107]
type: ""Buffer""
__proto__: Object
__proto__: Object


if i used the recovered object to decrypt I am getting the error as bad public key.
My code is:

let PublicKey = Buffer.from(""0418c7ced07c0c17f42b132747c70fddb6b31ea0ad349c2e9f800f48f0a73c2ea028d41b239077a48136ce546f9d2811bf1ec311c56e6a41f33906a1fc2472e451"", 'hex')
                eccrypto.encrypt(PublicKey, Buffer.from('Message to encrypt').then(function (encrypted) {
                    console.log(encrypted)
                    let encoded = JSON.stringify(encrypted)
                    console.log(encoded)
                    var actual = JSON.parse((encoded))
                    console.log(actual)

                    let pk = Buffer.from(""9a2d66404b69023c2c45da81ca4b696a8234b7ae53ea6b7ffc0d6bdd0e0e3279"", 'hex')

                    eccrypto.decrypt(pk, actual).then(function (plaintext) {
                        console.log(""Message to part B:"", plaintext.toString());
                    });

                });

I am getting error as bad public key.
If i used the encrypted variable instead of acutal in the eccrypto.decrypt(pk,encrypted)...
then i get the decrypted value.
","You can add a second argument to JSON.parse to allow you to inject code to help interpret the JSON as it's deserialized.   It's called a reviver in the documentation. 
You will get each key, value pair in the object.
Here is some sample code: 
JSON.parse('{""p"": 5}', (key, value) =>
  typeof value === 'number'
    ? value * 2 // return value * 2 for numbers
    : value     // return everything else unchanged
);

Here is mode info on MDN: 
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse
In your example, I think you want to identify the values as type buffer and then replace them with UInt8Array
","50","<javascript><json><public-key-encryption><json-deserialization>","2","1","1","2019-08-09 15:38:09","","0","1","747965","","2019-08-09 14:44:22","2019-08-09 14:32:18",""
"53589068","Cannot recover original image file from encrypted file after decryption in Python3","I am writing a script to encrypt files in Python using RSA. I have successfully encrypted the original file and saved it to another file. When decrypting the encrypted file, the code is running, but when I am opening the image it is showing that the file is not a .jpg type file. The values n, d and e are stored in nfile, dfile, and efile, respectively.
Here's the encryption and decryption part of the code:
 if myMode == 'encrypt':

    n = open('nfile.pem', 'r')
    e = open('efile.pem', 'r')
    n1 = int(n.read()) 
    e1 = int(e.read())
    translated = str(pow(content1, e1, n1))      
    print(translated)

elif myMode == 'decrypt':

    fileobj2 = open('encrypted.jpg', 'rb')
    content2 = fileobj2.read
    content3 = int.from_bytes(b'content2', byteorder='big')
    fileobj2.close()
    n = open('nfile.pem', 'r')
    d = open('dfile.pem', 'r')
    n1 = int(n.read()) 
    d1 = int(d.read())
    translated = str(pow(content3, d1, n1))  
    translated1 = str.encode(translated)

# Write out the translated message to the output file.

outputFileObj = open('decrypted1.jpg', 'wb')

outputFileObj.write(translated1)

outputFileObj.close()

Here, encrypted.jpg is the file that is generated after encryption.
The attached image is the error that I am facing 

Looking forward to suggestions.
","Your N the modulus is too small to directly encrypt the message. For this to work N would need to be at least as long as the message in bits. Moduli with a million or so bits are quite impractical. I once tried 32786 bit RSA keys at the time it took a day to generate one key pair. This is why the message is encrypted with AES and the AES key is then encrypted with RSA. The AES key is a lot smaller than the message so keys with a few thousand bits suffice.
","50","<python><python-3.x><encryption><file-handling><public-key-encryption>","4","3","1","2019-04-25 21:52:17","53589537","0","","4089018","","2019-04-25 21:52:17","2018-12-03 07:13:24",""
"53587904","Read int values stored in a file in python","I am writing a program to encrypt a file using RSA algo in python without using Crypto library. i have generated the keys and the e, n and d are stored in a .pem file. Now in another strict where the encrypting is taking place i am using the e, d and n values, but every time i am running the script an error is showing : 
 File ""rsaencrypt.py"", line 91, in <module>
 main()
 File ""rsaencrypt.py"", line 62, in main
 encrypt = pow(content, e, n)      
 TypeError: unsupported operand type(s) for pow(): 'bytes','_io.TextIOWrapper', '_io.TextIOWrapper'

heres how i am opening the file in the encryption script and using pow() to encrypt the files:
    n = open('nfile.pem', 'r')
    c = open('cfile.pem', 'r')
    d = open('dfile.pem', 'r'))
    encrypt = pow(content, e, n) 

I have searched the internet for how to read the int value from a file but i have found nothing.
Heres how i am saving the values in efile, dfile, and nfile:
#saving the values of n, d and e for further use    
efile = open('efile.pem', 'w')
efile.write('%d' %(int(e)))
efile.close()

dfile = open('dfile.pem', 'w')
dfile.write('%d' %(int(d)))
dfile.close()

nfile = open('nfile.pem', 'w')
nfile.write('%d' % (int(n)))
nfile.close()

the values are stored like this: 564651648965132684135419864..............454
Now as want to encrypt the files i need to read the integer values written in the efile, dfile and nfile to use the values in the pow() as arguments.
Looking forward to suggestions. Thank you.
","The open() function returns a file object, not the int. You need to convert returned object into int value by:
n = open('nfile.pem', 'r')
n_value = int(list(n)[0])

etc.
Another option (same result) is:
n = open('nfile.pem', 'r')
n_value = int(n.read())

","49","<python><python-3.x><rsa><file-handling><public-key-encryption>","2","3","2","2018-12-03 05:55:58","53588022","2","","","","","2018-12-03 05:23:09",""
"53587904","Read int values stored in a file in python","I am writing a program to encrypt a file using RSA algo in python without using Crypto library. i have generated the keys and the e, n and d are stored in a .pem file. Now in another strict where the encrypting is taking place i am using the e, d and n values, but every time i am running the script an error is showing : 
 File ""rsaencrypt.py"", line 91, in <module>
 main()
 File ""rsaencrypt.py"", line 62, in main
 encrypt = pow(content, e, n)      
 TypeError: unsupported operand type(s) for pow(): 'bytes','_io.TextIOWrapper', '_io.TextIOWrapper'

heres how i am opening the file in the encryption script and using pow() to encrypt the files:
    n = open('nfile.pem', 'r')
    c = open('cfile.pem', 'r')
    d = open('dfile.pem', 'r'))
    encrypt = pow(content, e, n) 

I have searched the internet for how to read the int value from a file but i have found nothing.
Heres how i am saving the values in efile, dfile, and nfile:
#saving the values of n, d and e for further use    
efile = open('efile.pem', 'w')
efile.write('%d' %(int(e)))
efile.close()

dfile = open('dfile.pem', 'w')
dfile.write('%d' %(int(d)))
dfile.close()

nfile = open('nfile.pem', 'w')
nfile.write('%d' % (int(n)))
nfile.close()

the values are stored like this: 564651648965132684135419864..............454
Now as want to encrypt the files i need to read the integer values written in the efile, dfile and nfile to use the values in the pow() as arguments.
Looking forward to suggestions. Thank you.
","The recommended way is to use with, this ensures your file is closed once you are done with it rather than waiting for garbage collection or explicitly calling f.close() to close your file.
n_results = []

with open('nfile.pem', 'r') as f:
    for line in f:
        #do something
        try:
            n.append(int(i))
        except TypeError:
            n.append(0) #you can replace 0 with any value to indicate a processing error

Also, utilize try-except block in case you have noise in your file that cannot be converted to integers. n_results return a list of all your values from your files which you can use to aggregate or combine them later for a single output.
This would be a better foundation as your project scales and if you deal with more data.
","49","<python><python-3.x><rsa><file-handling><public-key-encryption>","2","1","2","2018-12-03 05:55:58","53588022","2","","","","","2018-12-03 05:23:09",""
"49153121","MAKECERT and duplicate Public Keys","I hope this question makes sense. But let's say I create a Certificate with MAKECERT.EXE like this:
makecert -r -sr LocalMachine -ss my -a sha256 -sky exchange -n ""CN=Hello World""

Now let's say I run this on two different (Windows) machines. Statistically what are the chances the certificates on the two different machines will have the same Public Key?
If this question does not make sense, I'd appreciate an explanation as to why it doesn't.
Thanks.
","
makecert defaults to a 1024-bit RSA key.
It defaults to a fixed e=65537.
A 1024-bit RSA key has two primes, each 512 bits long.
The Prime Number Theorem says that there are more than 2^511/ln(2^511) primes of that size, and if we subtract all the 511-and-smaller bit primes we're left with about 10^151.
So across two runs, the odds of the smaller of the two primes being the same is about 1 in 1e151.
Running that through the formula for the birthday problem we see that all the magic really happens around the 1e75 mark.


1% chance of collision: 4.5e74
10%: 1.5e75
25%: 2.4e75
50%: 3.7e75
75%: 5.3e75
99%: 9.6e75

All of that was for one of the two primes.  If we factor in the other (and, without-loss-of-generality, assume that we always declare that p < q) then we get:


5e150 * 1e151 ~= 5e301 different 1024-bit values of RSA n.
1% collision chance after 1e150 runs.
10% collision chance after 3e150
25% collision chance after 5e150
50% collision chance after 8e150
75% collision chance after 1e151
99% collision chance after 2e151


At 1 million keys per second (1e6) for all ~86000 seconds per day you get 8.6e10 keys per day.  To have a ""millionth of a percent"" chance (1/1e8) of a collision you'll need over 1e136 days of computation. That's 3e133 years.  The universe, currently, is believed to be 1.4e10 years old. So, you need about 2.3e123 universes to have even that high of a chance (give or take a couple universes).
BTW, my computer can only do ~100 1024-bit keys per core-second (right around 10ms per), so I'm assuming you have about 10,000 of them chugging away at this problem.
Unless we model in CSPRNG state collision and VM rollback (to cause CSPRNG state collision), the answer is: effectively impossible.
","49","<windows><certificate><public-key-encryption><makecert>","0","2","1","2018-03-07 15:59:01","49156233","0","","1231882","","2018-03-07 14:13:33","2018-03-07 13:27:40",""
"55598532","Difference between RFC 2986 & RFC 4211 and which one is a spec for Certificate Signing Requests?","The abstract for RFC 4211 seems to say that the RFC is meant to be a spec for CRMF (which I understand to be a protocol for transmitting a CSR), while RFC 2986 specs out the CertificationRequest information type, which seems also be a CSR. 
What is CRMF, how does it relate to a CSR, and which RFC ultimately specs out a CSR? 
Thanks! 
","CRMF is one way to request a certificate SCEP is another, and so is ACME.
The Rfc 2986 specifies PKCS#10, which is what a CSR is. Most protocols transmit PKCS#10 plus some more info (for instance authentication ands other metadata).
","49","<security><certificate><public-key-encryption><rfc><csr>","0","1","1","2019-04-11 07:28:13","","0","","","","","2019-04-09 17:52:40",""
"58165401","How to encrypt data on barcode with public and private key","How could you encrypt data on a barcode with a public and private key, similar to TicketMaster's SafeTix?
Quote from article:

It's a barcode that changes every 15 seconds. If you copy it, 15
  seconds later it'll change and the copied one will no longer work

Mr Re said.

There's two unique keys, one on the fan side and one on the scanning
  side, and as long as they match at the time of scanning they get in.

I am looking for a suitable way to prevent fraud with ticket, and I am currently looking into making the barcode on the tickets dynamic.
","","49","<javascript><c#><barcode><public-key-encryption>","0","","0","2019-09-30 11:45:52","","3","","3653343","","2019-09-30 11:45:52","2019-09-30 09:50:04",""
"40130316","Encryption of text containing tables and structures","i am encrypting decrypting files via certificates from local repo in java.
But for word processing files containing tables , diagrams the files doesnt remain same as the actual . I am using normal file Input/ output stream.
Any help will be useful thanks .
public int encryptFileWithpubkey(String filepath,PublicKey pubkey){
    int retval=0;
    FileInputStream fis = null;
    File file=null;
    final String location = filepath;
    PublicKey pubKey= pubkey;
    try{
    try {
        fis = AccessController.doPrivileged(
         new PrivilegedExceptionAction<FileInputStream>() {
             public FileInputStream run() throws FileNotFoundException {

                 return new FileInputStream(location);
             }
         });
     } catch (PrivilegedActionException e) {
         throw (FileNotFoundException) e.getException();
     }
        InputStream is =  fis;
      //long length = file.length();

        byte[] bytes = new byte[fis.available()];
        int offset = 0;
        int numRead = 0;
        while (offset < bytes.length
               && (numRead=is.read(bytes, offset, bytes.length-offset)) >= 0) {
            offset += numRead;
        }
        is.close();
        file=null;




            String encString="""";        
            int iFixedLen=110;
            if(bytes.length>=iFixedLen){

                int noOfBlocks=(int)Math.ceil((bytes.length/110.0));
            //  System.out.println(""Noof blocks :""+noOfBlocks);
                for(int i=0;i<noOfBlocks;i++){
                    byte[] tempStr=null;
                    if(i==noOfBlocks-1){
                        //System.out.println(""Last block"");
                        tempStr=new byte[(bytes.length-(i*iFixedLen))];
                        System.arraycopy(bytes, (i*iFixedLen), tempStr, 0,(bytes.length-(i*iFixedLen)));
                    }
                    else
                    {   
                        //System.out.println(""i : ""+i);
                        tempStr=new byte[iFixedLen];
                        //tempStr=new byte[iFixedLen];
                        System.arraycopy(bytes, (i*iFixedLen), tempStr, 0,iFixedLen);
                        //tempStr=plainText.substring(0,110) ;
                        //plainText=plainText.substring(110);
                    }
                    encString+= encryptBytes(tempStr,pubKey)+""    "";
                }
                encString=encString.substring(0,encString.length()-1);
                retval=noOfBlocks;
            }else{
                encString=encryptBytes(bytes,pubKey);
                retval=1;

            }

        FileOutputStream fos = null;
    try {
        fos = AccessController.doPrivileged(
         new PrivilegedExceptionAction<FileOutputStream>() {
             public FileOutputStream run() throws FileNotFoundException {

                 return new FileOutputStream(location);
             }
         });
     } catch (PrivilegedActionException e) {
         throw (FileNotFoundException) e.getException();
     }
    fos.write(encString.getBytes());
    fos.close();
    }catch(Exception e){
        e.printStackTrace();
        return 0;
    }
return retval;
}

encryptBytes function followes :
public String encryptBytes(byte[] rawData,PublicKey pubkey){
        String retval=null;

       try{

        byte[] rawByteData=rawData;
        Cipher cp=Cipher.getInstance(""RSA/ECB/PKCS1PADDING"");
        cp.init( Cipher.ENCRYPT_MODE,pubkey);
        byte[] getDat=cp.doFinal(rawByteData);

        retval=java.util.Base64.getEncoder().encodeToString(getDat);

         }catch(Exception e)
         {
        e.printStackTrace();
         }
        return retval;
    }

","You have made just about every mistake in the book here.
        InputStream is =  fis;
      //long length = file.length();

        byte[] bytes = new byte[fis.available()];

InputStream.available() is not an indicator of the length of the input stream. See the Javadoc, which contains a specific warning against exactly what you are doing here. You can practically always use a fixed size buffer when doing I/O of any kind, and it is rarely if ever necessary to read entire files into memory. Compilers don't do it: why should you?
        int offset = 0;
        int numRead = 0;
        while (offset < bytes.length
               && (numRead=is.read(bytes, offset, bytes.length-offset)) >= 0) {
            offset += numRead;
        }
        is.close();
        file=null;

The file = null; statement is pointless here, and the entire loop can be elided as I will show below.
            String encString="""";

String is not a container for binary data.        
            int iFixedLen=110;

Where did the magic number 110 come from?
            if(bytes.length>=iFixedLen){

                int noOfBlocks=(int)Math.ceil((bytes.length/110.0));
            //  System.out.println(""Noof blocks :""+noOfBlocks);
                for(int i=0;i<noOfBlocks;i++){
                    byte[] tempStr=null;
                    if(i==noOfBlocks-1){
                        //System.out.println(""Last block"");
                        tempStr=new byte[(bytes.length-(i*iFixedLen))];
                        System.arraycopy(bytes, (i*iFixedLen), tempStr, 0,(bytes.length-(i*iFixedLen)));
                    }
                    else
                    {   
                        //System.out.println(""i : ""+i);
                        tempStr=new byte[iFixedLen];
                        //tempStr=new byte[iFixedLen];
                        System.arraycopy(bytes, (i*iFixedLen), tempStr, 0,iFixedLen);
                        //tempStr=plainText.substring(0,110) ;
                        //plainText=plainText.substring(110);
                    }
                    encString+= encryptBytes(tempStr,pubKey)+""    "";
                }
                encString=encString.substring(0,encString.length()-1);
                retval=noOfBlocks;
            }else{
                encString=encryptBytes(bytes,pubKey);
                retval=1;

            }

I have no idea what all this is supposed to be doing, but you should not be using blocks of 110 bytes, or characters, or whatever they are, or converting encrypted data in the form of a byte array to String, and you should not be appending four spaces to it. 
        FileOutputStream fos = null;
    try {
        fos = AccessController.doPrivileged(
         new PrivilegedExceptionAction<FileOutputStream>() {
             public FileOutputStream run() throws FileNotFoundException {

                 return new FileOutputStream(location);
             }
         });
     } catch (PrivilegedActionException e) {
         throw (FileNotFoundException) e.getException();
     }
    fos.write(encString.getBytes());

Here you could just have written the original byte array resulting from the actual encryption and avoided the whole problem.
You haven't posted the encryptBytes() method so it is impossible to comment further.
    fos.close();
    }catch(Exception e){
        e.printStackTrace();
        return 0;
    }
return retval;
}

","49","<java><x509certificate><public-key-encryption>","-2","0","2","2016-10-19 19:38:36","","12","3","7041976","","2016-10-19 12:17:19","2016-10-19 11:35:04",""
"40130316","Encryption of text containing tables and structures","i am encrypting decrypting files via certificates from local repo in java.
But for word processing files containing tables , diagrams the files doesnt remain same as the actual . I am using normal file Input/ output stream.
Any help will be useful thanks .
public int encryptFileWithpubkey(String filepath,PublicKey pubkey){
    int retval=0;
    FileInputStream fis = null;
    File file=null;
    final String location = filepath;
    PublicKey pubKey= pubkey;
    try{
    try {
        fis = AccessController.doPrivileged(
         new PrivilegedExceptionAction<FileInputStream>() {
             public FileInputStream run() throws FileNotFoundException {

                 return new FileInputStream(location);
             }
         });
     } catch (PrivilegedActionException e) {
         throw (FileNotFoundException) e.getException();
     }
        InputStream is =  fis;
      //long length = file.length();

        byte[] bytes = new byte[fis.available()];
        int offset = 0;
        int numRead = 0;
        while (offset < bytes.length
               && (numRead=is.read(bytes, offset, bytes.length-offset)) >= 0) {
            offset += numRead;
        }
        is.close();
        file=null;




            String encString="""";        
            int iFixedLen=110;
            if(bytes.length>=iFixedLen){

                int noOfBlocks=(int)Math.ceil((bytes.length/110.0));
            //  System.out.println(""Noof blocks :""+noOfBlocks);
                for(int i=0;i<noOfBlocks;i++){
                    byte[] tempStr=null;
                    if(i==noOfBlocks-1){
                        //System.out.println(""Last block"");
                        tempStr=new byte[(bytes.length-(i*iFixedLen))];
                        System.arraycopy(bytes, (i*iFixedLen), tempStr, 0,(bytes.length-(i*iFixedLen)));
                    }
                    else
                    {   
                        //System.out.println(""i : ""+i);
                        tempStr=new byte[iFixedLen];
                        //tempStr=new byte[iFixedLen];
                        System.arraycopy(bytes, (i*iFixedLen), tempStr, 0,iFixedLen);
                        //tempStr=plainText.substring(0,110) ;
                        //plainText=plainText.substring(110);
                    }
                    encString+= encryptBytes(tempStr,pubKey)+""    "";
                }
                encString=encString.substring(0,encString.length()-1);
                retval=noOfBlocks;
            }else{
                encString=encryptBytes(bytes,pubKey);
                retval=1;

            }

        FileOutputStream fos = null;
    try {
        fos = AccessController.doPrivileged(
         new PrivilegedExceptionAction<FileOutputStream>() {
             public FileOutputStream run() throws FileNotFoundException {

                 return new FileOutputStream(location);
             }
         });
     } catch (PrivilegedActionException e) {
         throw (FileNotFoundException) e.getException();
     }
    fos.write(encString.getBytes());
    fos.close();
    }catch(Exception e){
        e.printStackTrace();
        return 0;
    }
return retval;
}

encryptBytes function followes :
public String encryptBytes(byte[] rawData,PublicKey pubkey){
        String retval=null;

       try{

        byte[] rawByteData=rawData;
        Cipher cp=Cipher.getInstance(""RSA/ECB/PKCS1PADDING"");
        cp.init( Cipher.ENCRYPT_MODE,pubkey);
        byte[] getDat=cp.doFinal(rawByteData);

        retval=java.util.Base64.getEncoder().encodeToString(getDat);

         }catch(Exception e)
         {
        e.printStackTrace();
         }
        return retval;
    }

","Whether a file contains tables or other structures is completely irrelevant for modern encryption, because it works on binary data which is already serialized from the ""document"".
You're trying to apply RSA for some chunks of the original file. This is very tricky to get right, because you have to make sure that the input is smaller than the RSA modulus taking the padding into account. Then you have to make sure that each ciphertext chunk has exactly the same length so that you know which bytes belong to which chunk during decryption. In RSA it is not guaranteed that the output will always have the same number of bytes. It can be smaller compared to the padded input. So you would need to pad the ciphertext chunks consistently. 
A better idea would be to use hybrid encryption. You could use AES to encrypt the actual data and use RSA to encrypt the randomly generated AES key. A simple format should be easy to do: 
4 bytes - Length of the RSA-encrypted AES key (= x)
x bytes - RSA-encrypted AES key
remaining bytes - AES-encrypted file

Of course, if you're doing AES encryption, you would have to think about the mode of operation, the padding mode, how to handle the initialization vector and whether you want to add authenticated encryption.
","49","<java><x509certificate><public-key-encryption>","-2","0","2","2016-10-19 19:38:36","","12","3","7041976","","2016-10-19 12:17:19","2016-10-19 11:35:04",""
"34689940","codeone packages and saving your work","I am trying to develop an encryption and decryption app where user will input text and password and click on encrypt/ decrypt and the respective operation will be performed. 
1). The problem I am facing is how to include Java Packages like :- 

import com.sun.org.apache.xerces.internal.impl.dv.util.Base64; 
import java.security.InvalidAlgorithmParameterException; 
import java.security.NoSuchAlgorithmException; 
import javax.crypto.BadPaddingException; 
import javax.crypto.Cipher;

2) The second thing I want to know is How to share that text (encrypted) through other apps if I place share button. 
3) I also want to save the text with extension as abc.myapp
","Not all packages are available in Codename One see the JavaDocs for what's available.
Encryption and decryption should be done via the Bouncy Castle cn1lib. You can see a sample of that here.
Codename One has a share button API and a share API that works with text and images.
The last question is a bit problematic. Mobile devices don't have a file system in the way desktop OS's have them. Every app runs in its own locked down environment and can't really access other files. I suggest rephrasing the question in more general terms explaining what you are trying to achieve ideally with examples of apps that already do that.
","48","<encryption><aes><codenameone><public-key-encryption>","2","3","1","2016-02-19 09:45:11","34696262","0","1","3162798","","2016-02-19 09:45:11","2016-01-09 05:11:40",""
"51058946","How can i generate RSA key for bigint?","I'm using the following program to generate an RSA key of 4 bytes length (unsigned long). So my question is how can i modify my program to work with big integers ? 
void keygen(unsigned long int e, unsigned long int p, unsigned long int q)
{
    unsigned long int phi,d,n,s;

    n = p*q;
    phi=(p-1)*(q-1);

    d = phi / e ;

    do
    {
        d++;
    }
    while( ((d*e) % phi) != 1 );

    printf(""\n public key: { e=%u n=%u }"",e,n);
    printf(""\n private key: { d=%u n=%u }"",d,n);
    printf(""\n verify modulo = %d\n"",((d*e) % phi)); /* this need to be 1 */
}

void main()
{
    keygen(3, 17, 19);
    system(""pause"");
}

","","48","<c><rsa><public-key-encryption>","0","","0","2018-10-15 13:49:46","","4","","9459066","","2018-10-15 13:49:46","2018-06-27 09:18:49",""
"26248221","What type of public key is this?","I have a public key, and the only way I know how to describe it to other programmer is that it's a xml public key. This description is not exactly the most defined. 
<RSAKeyValue>
    <Modulus>
        uno9DsYcaZ1yAqY20nIM+YjYjjFsGx0DYm7lBGxbmVLLZTYc9MaI0Br+
        8ElcuZVVNRmGeVBlkcHT3JpMDf/fiWSho6o0pRhQZmnG4RZtCWnGjFTV+
        QWBYcuTGoQFKOtsrGqG16XwL2hPxqYW/7nzBVgAGe6myG3hMou8P4DSpjk=
    </Modulus> 
    <Exponent>
        AQAB
    </Exponent> 
</RSAKeyValue>

Is there another term for a key as such other than a generic term like ""XML key""?
This key was generated by C#. Most likely with the command rsa.toxml()
","","48","<rsa><public-key-encryption>","0","","0","2014-10-09 14:00:57","","2","","642653","","2014-10-09 14:00:57","2014-10-08 02:18:22",""
"53596865","opening a text file in python and reading the contains as str","I am trying to encrypt a file using RSA algo in python for that i have stored all the possible values that can be written in a normal text file.
like this 
SYMBOLS = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890 !?.'

now i have a text file which i want to encrypt. It contains only a single line; ""I am a boy"" (without these quote). But when i am trying to encrypt the file its showing that: ""the SYMBOLS does not have the character"", which is a message that will be delivered by the program if the character does not match.
here's the code where i have declared the SYMBOLS and open the  text file: 
 SYMBOLS = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890 !?'

 def main():
 # Runs a test that encrypts a message to a file or decrypts a message
 # from a file.
 filename = 'encrypted_file.txt' # The file to write to/read from.
 mode = 'encrypt' # Set to either 'encrypt' or 'decrypt'.
 if mode == 'encrypt':
     message1 = open('afile.txt', 'r') #open the file which will be encrypted
     message = str((message1.read())
     print(message)

I think that i am making a mistake in opening the text file, as for this script only the contains will be needed as str, but i don't know how to do it. Looking forward to some si=uggestions. Thank you.
","Try the following code following code to read the content from the file.
Error message seems irrelevant to code as you are not using SYMBOLS anywhere.
in message = str(message1.read()) you have unmatched opening and closing bracket.
SYMBOLS = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890 !?'

def main():
    # Runs a test that encrypts a message to a file or decrypts a message
    # from a file.
    filename = 'encrypted_file.txt' # The file to write to/read from.
    mode = 'encrypt' # Set to either 'encrypt' or 'decrypt'.
    if mode == 'encrypt':
        message1 = open(filename, 'r') #open the file which will be encrypted
        message = str(message1.read())
        print(message)

main()

","48","<python><python-3.x><rsa><file-handling><public-key-encryption>","0","-1","1","2018-12-03 16:31:05","","4","1","","","","2018-12-03 15:30:12",""
"52860252","Javascript Signing a message using an Eth address as public key","as far as I understood, on Ethereum every wallet has a private and a public key.
the public key is the address. What I want to achieve is to SIGN a ""string"" with a public address, so that only that address (with the private key) can ""read"" the message.
I'm struggling in finding the best library to do this: i've seen openpgp and JEncrypt but both requires to have ""public / private"" keys specified in some particular format.
Is there any sdk that can help? With web3 is possible only to sign with private key..
","The term ""sign"" in public-key cryptography has a very specific meaning: it generally means the generation of a digital signature to verify the content and sender of a given message.
It sounds like what you're describing when you say ""SIGN"" is that you want to encrypt a message with the ETH address / public key, and decrypt the message with the wallet private key.
In public key cryptography, you encrypt with the public key and decrypt with the private key.

I'm struggling in finding the best library to do this: i've seen openpgp and JEncrypt but both requires to have ""public / private"" keys specified in some particular format.

Public and private keys will need to be in the proper format for any pgp implementation, and this is likely the problem with ETH addresses, because the ETH address is derived from the underlying key pair. This blog post contains a detailed explanation of the relationship between ETH addresses and key pairs.
","48","<encryption><public-key-encryption><private-key><web3><web3js>","0","1","1","2018-10-17 19:05:38","52861954","0","","","","","2018-10-17 17:10:59",""
"26985095","What is the use for ssh keys with no passphrase?","What is the point of allowing ssh-keygen to generate empty passphrase keys when it is not recommended to use such keys for remote login? What situations would such keys be useful for?
","The passphrase protects the key in its storage on your local computer.
Even without a passphrase, a key is still better than a password, as it can only be ""stolen"" if someone has physical access to your computer (or at least some kind of network access to the files on your computer), whereas a password can be brute-forced (or leaked from any number of places in case you re-use passwords).
","48","<ssh><public-key-encryption><ssh-keys><ssh-keygen>","-1","4","1","2014-11-18 01:32:21","26985119","5","0","","","","2014-11-18 01:29:33","2014-12-08 04:22:56"
"36253520","Direct encode/decode does not result in original data","I want to create a RSA key pair and use it for encoding/decoding data. My code is quite short but I cannot find any error.
Can anyone help me finding my problem?
Thanks for every hint!
// Generate key pair.
KeyPairGenerator kpg = KeyPairGenerator.getInstance(""RSA"");
kpg.initialize(1024, new SecureRandom());
KeyPair keyPair = kpg.genKeyPair();
PublicKey publicKey = keyPair.getPublic();
PrivateKey privateKey = keyPair.getPrivate();

// Data to encode/decode.
byte[] original = ""The quick brown fox jumps over the lazy dog."".getBytes(""UTF8"");

// Encode data with public key.
Cipher cipherEncoder = Cipher.getInstance(""RSA/ECB/NoPadding"");
cipherEncoder.init(Cipher.ENCRYPT_MODE, publicKey);
byte[] encodedData = cipherEncoder.doFinal(original);

// Decode data with private key.
Cipher cipherDecoder = Cipher.getInstance(""RSA/ECB/NoPadding"");
cipherDecoder.init(Cipher.DECRYPT_MODE, privateKey);
byte[] decodedData = cipherEncoder.doFinal(encodedData);

// Output.
System.out.println(new String(""Original data:   "" + new String(original, ""UTF8"")));
System.out.println(new String(""Encoded/decoded: "" + new String(decodedData, ""UTF8"")));

The output at the end seems to be quirky.
","Firstly, you are using the cipherEncoder to decode your data. You probably meant to use cipherDecoder. Secondly, you are going to have issues using RSA without padding (namely, your data will have a load of 0 bytes at the start). I would recommend you at least use PKCS1 padding. Here is the code after those changes.
// Generate key pair.
KeyPairGenerator kpg = KeyPairGenerator.getInstance(""RSA"");
kpg.initialize(1024, new SecureRandom());
KeyPair keyPair = kpg.genKeyPair();
PublicKey publicKey = keyPair.getPublic();
PrivateKey privateKey = keyPair.getPrivate();

// Data to encode/decode.
byte[] original = ""The quick brown fox jumps over the lazy dog."".getBytes(""UTF8"");

// Encode data with public key.
Cipher cipherEncoder = Cipher.getInstance(""RSA/ECB/PKCS1Padding"");
cipherEncoder.init(Cipher.ENCRYPT_MODE, publicKey);
byte[] encodedData = cipherEncoder.doFinal(original);

// Decode data with private key.
Cipher cipherDecoder = Cipher.getInstance(""RSA/ECB/PKCS1Padding"");
cipherDecoder.init(Cipher.DECRYPT_MODE, privateKey);
byte[] decodedData = cipherDecoder.doFinal(encodedData);

// Output.
System.out.println(new String(""Original data:   "" + new String(original, ""UTF8"")));
System.out.println(new String(""Encoded/decoded: "" + new String(decodedData, ""UTF8"")));

","47","<java><encryption><rsa><public-key-encryption>","0","2","1","2016-03-27 23:02:46","36253719","6","3","","","","2016-03-27 22:36:28",""
"8557524","Keypair is smaller than expected","This C# code (running against .NET 4.5):
using System;
using System.Security.Cryptography;
class Program
{
    static void Main()
    {
        using (var rsa = new RSACryptoServiceProvider(1024))
        {
            Console.WriteLine(rsa.KeySize);
            Console.WriteLine(rsa.ExportCspBlob(true).Length);
        }
    }
}

Produces this output:
1024
596

Why is the resulting key blob about half of the requested key size?  How could it be any less than the keysize?
","1024 is bits, 596 is bytes, or 4768 bits.
","47","<.net><public-key-encryption>","1","1","1","2011-12-19 07:06:44","8558135","0","","","","","2011-12-19 05:40:50",""
"46770829","Dropbox HTTPS public key","My software connects to Dropbox using an HTTPS connection in order to retrieve some sensitive data.
I pinned Dropbox public keys with the following code
ServicePointManager.ServerCertificateValidationCallback = PinPublicKey;
private static readonly List<string> AllowedPublicKeys = new List<string>
        {
            ""3082010A0282010100EEAE8C9A3A274355F04A25F35B43EF9F12B37BDCDE39076C1BCD66C58D8CA236C7413A46DD7B0EF7BBB414E60DE093B8870555CF01BB61F6EC821637B1093F120B8E282B725A69914DCE1B6455AB61C88DD6220259172A0566D38DCDD571A6EE6283C29464BC3A775537C66F1B30F028134D9411C890FC676D1059A54CA0E3E308529FAC6E4010D3C7D243220D9D7766A0245EB76ED9D413340A6D0C0AC605BD5AF41EB74E25587CFBE2A64A3947498660BE5346B011CB93C33D1BB905031ACDA017FAE17F9885002ED56218AAB824344024A2938E472087C1E4DECD3DD02A76BF965D626FA8AE142B34789399A3CB3D28D2A9BE2D3F13138BE36C319113BDA90203010001"",

            ""3082010A0282010100D169E87071F5C91C8E552563EE5A9519297425DDFCB620482F3D0D61FB85B834766EC93D87BB9EAFF99785BDCE118A85D52A144B7C8C601CCF020714FD34B99793635498917F6F6E2F90ECBF0E6E37E80456054BC00B18D6A06E71F3E713B8A15B6A329924A2C644A488CF602DAFC050FB9FE1B49169609B16AB05C0ACAA470C081908C68937A74778FAAE9D0A192B3BF50FB1FAE47159E604687071A1E823EEBD24A2FE245D4E7AF656E8EE7C7E8DDFF306A0D16FFFAA650562B6DC9A18392604AA6886B2C1CFB9F7AD4893DA817770773D929ED92C779C3D4F608D8D637CA4294A9064F206EF8E6BF7FC85BBB9104F8F57D10BC4990C5F1B7C9F68D0F02E3D0203010001""
        }; //dropbox.com and dl.dropboxusercontent.com public keys 2017-10-16

        public static bool PinPublicKey(object sender, X509Certificate certificate, X509Chain chain,
            SslPolicyErrors sslPolicyErrors)
        {
            if (null == certificate)
                return false;

            String pk = certificate.GetPublicKeyString();
            if (AllowedPublicKeys.Any(s => s.Equals(pk, StringComparison.InvariantCultureIgnoreCase)))
                return true;

            return false;
        }

While this works perfectly fine for me in Europe, a customer in India says that the HTTPS connection cannot be established. 
I am thinking that maybe Dropbox is using different public keys for their CDN around the world.
What can I do about that? Is there any way to pin all public keys without knowing them?
","","47","<c#><.net><https><public-key-encryption>","1","","0","2017-10-16 12:52:55","","0","","","","","2017-10-16 12:52:55",""
"45017912","Does Travis CI use probabilistic encryption?","I tried running travis encrypt ""some secret string"" multiple times in the same repository, and it returned different encrypted strings each time. Does Travis use probabilistic encryption? If not, what am I doing wrong?
Edit: if there is an IV, how is this IV agreed upon by my local travis cli and the Travis servers? Can I view or change it?
","See Probabilistic Encryption WRT block ciphers .
An example of different results encryption the same data in a block based encryption algorithm such as AES and CBC mode with a random IV. The IV can be prefixed to the encrypted data and the encrypted data will be different because there is a different IV each time the same data is encrypted, this is a common and good standard practice, the IV does not need to be secret.
If the IV can be prepended to the encrypted data it is available for decryption, no prior agreement ios required.
Here is CBC mode, notice that the IV is xor'ed with the first block of data and each subsequent block is xored with the previous encrypted block. Thus the IV affects every block of the encrypted data.
This is done so that two identical messages will not have the same encrypted data. Consider the case where one of two messages is sent on an on-going basis: ""0"" or ""1"" where 0 meant sell and 1 meant buy. If the encryption were the same each time even though the message themselves could not be determined the two states could be determined and which one it was.
Travis-ci uses aes-256-cbc for it's Automated Encryption.
There are other encryption options such as asymmetric encryption such as RSA that can use random padding.
","47","<encryption><continuous-integration><travis-ci><public-key-encryption><travis-ci-cli>","-1","1","1","2017-07-10 19:22:45","45018545","2","","1181387","","2017-07-10 18:20:27","2017-07-10 17:06:55",""
"55363375","What is the most appropriated and secure way to encrypt files using private/public keys in Node.js","I was wondering in which use case i should use these methods when encrypting and decrypting files in my node.js application.
The Problem
I want to encrypt some files in my server, after asking other people, i realized that the most recommended method is encrypt those files (larges) using a private key.
Now, i was looking for the docs and saw these methods

crypto.publicEncrypt(pubKey, buffer)
crypto.publicDecrypt(pubKey, buffer)
crypto.privateEncrypt(privKey, buffer)
crypo.privateDecrypt(privKey, buffer)

this is very confusing because i don't know what of them i must to use now, ahm... i don't know what is the most appropriate way to do this securely.
","tl;dr encrypt with the public key. Keep your private key safe.
Unfortunately, these methods are poorly named. privateEncrypt should be called something like sign and publicDecrypt should be called something like verify.
When using public-key encryption (also known as asymmetric encryption), one key can be used to write a cipher and the other key can undo that operation. Your public key is potentially known to everyone, and your private key is secret.
If you want to keep something secret, except from the owner of a certain key, you want to encrypt a message with their public key. So if Alice wants to receive encrypted messages, she'll share her public key A_pub and her secret key A_priv, she'll keep to herself.. You'll encrypt your message crypto.publicEncrypt(A_pub, buffer). She'll then decrypt that message with crypto.privateDecrypt(A_priv, buffer).
Doing it the other way is known as a digitial signature. 
","46","<node.js><encryption><public-key-encryption><private-key><public-key>","2","2","1","2019-03-26 17:58:53","","1","","6885387","","2019-03-26 17:50:11","2019-03-26 17:48:00",""
"34209767","SSH: Use private key option and port redirection simultaneously","I have a server which I access over ssh with pubkey-authentication like so:
ssh ""Host"" -l ""my identity""

This works very well. However, I cant do port redirection and identification with my private key in one command (this is what I tried):
ssh ""Host"" -L 127.0.0.1:19000:""Host"":445 -l ""my identity""

ssh then asks for the password for the user ""my Identity""@""Host"", which of course I don't have, because I want to connect with my private key (I tried the password which the private key is encrypted with - it didn't work).
It however works when I first create a normal ssh tunnel and then a second one with the port redirection.
So my question in short: How can i authenticate with my private key AND do a port redirection in one command?
","You should specify the options in front of the hostname, as the manual page for ssh(1) hints:

 ssh [...] [-L [bind_address:]port:host:hostport]
     [-l login_name] [...] [user@]hostname [command]


The parsing of arguments after the hostname can be suppressed or omitted since it is not according to specification.
You should rather use:
ssh -L 127.0.0.1:19000:""Host"":445 -l ""my identity"" ""Host""

Which should work just fine as your previous command.
","46","<ssh><public-key-encryption>","1","1","1","2015-12-10 19:21:50","34210038","0","","","","","2015-12-10 19:07:36",""
"55368970","Sending and receiving encrypted and signed documents in a local client server scenario","I want to build a local cilen-server which can transfer a file which will be encrypted by RSA algo and signed and the receiver will decrypt that file and will verify the signature. I found many tutorials on how to build a client server scenario in Python but to send the encrypted file I need to first convert the large file into smaller block and I don't know how to do that and after the receiving the encrypted file how I can setup the receiver that it will automatically decrypt the file using the keys that are exchanged between them at the time of setting up of the connection and verify the signature ? I am hoping to do this without using PyCrypto or any other built in libraries. Is there any tutorial which can help me understand on how to do this in python ? Or any structured way of solving this problem. Looking forward to suggestion. Thank you. 
","","46","<client-server><rsa><digital-signature><public-key-encryption><python-sockets>","1","","0","2019-03-27 02:38:44","","0","0","","","","2019-03-27 02:38:44",""
"57786213","How to generate JSON Web Token for Android from PBKDF2?","I can generate the SecretKey for PBEKeySpec in my code which looks like this:
public SecretKey generateKey(char[] passphraseOrPin) throws NoSuchAlgorithmException, InvalidKeySpecException {
        // Number of PBKDF2 hardening rounds to use. Larger values increase
        // computation time. You should select a value that causes computation
        // to take >100ms.
        final int iterations = 5000;

        // Generate a 256-bit key
        final int outputKeyLength = 256;
        SecureRandom secureRandom = new SecureRandom();
        SecretKeyFactory secretKeyFactory = SecretKeyFactory.getInstance(""PBKDF2WithHmacSHA1"");
        KeySpec keySpec = new PBEKeySpec(passphraseOrPin, secureRandom.generateSeed(1), iterations, outputKeyLength);
        SecretKey secretKey = secretKeyFactory.generateSecret(keySpec);

        return secretKey;
    }

But after that I was trying to build JSON web token using JJWT. But I couldn't find any existing algorithm in the library to do this for encrypted PBKDF2.
Am I missing something here? Or is there is any other way around to this issue.
","","45","<java><android><jwt><public-key-encryption><pbkdf2>","0","","0","2019-09-04 10:13:34","","0","","1000551","","2019-09-04 10:13:34","2019-09-04 10:10:32",""
"56213927","How this encryption works?","I have this swf file and I found this code. I want to know how it works. Any help will be highly appreciated.
public function encrypt(param1:String, param2:String) : String
      {
         var _loc8_:Number = NaN;
         var _loc9_:Number = NaN;
         var _loc12_:* = NaN;
         var _loc3_:Array = Convert.strToLongs(param1);
         var _loc4_:Array = Convert.strToLongs(param2);
         var _loc5_:Number = _loc3_.length;
         if(_loc5_ == 0)
         {
            return """";
         }
         if(_loc5_ == 1)
         {
            _loc3_[_loc5_++] = 0;
         }
         var _loc6_:Number = _loc3_[_loc5_ - 1];
         var _loc7_:Number = _loc3_[0];
         var _loc10_:Number = Math.floor(6 + 52 / _loc5_);
         var _loc11_:* = 0;
         while(_loc10_-- > 0)
         {
            _loc11_ = Number(_loc11_ + this.delta);
            _loc9_ = _loc11_ >>> 2 & 3;
            _loc12_ = 0;
            while(_loc12_ < _loc5_ - 1)
            {
               _loc7_ = _loc3_[_loc12_ + 1];
               _loc8_ = (_loc6_ >>> 5 ^ _loc7_ << 2) + (_loc7_ >>> 3 ^ _loc6_ << 4) ^ (_loc11_ ^ _loc7_) + (_loc4_[_loc12_ & 3 ^ _loc9_] ^ _loc6_);
               _loc6_ = _loc3_[_loc12_] = _loc3_[_loc12_] + _loc8_;
               _loc12_++;
            }
            _loc7_ = _loc3_[0];
            _loc8_ = (_loc6_ >>> 5 ^ _loc7_ << 2) + (_loc7_ >>> 3 ^ _loc6_ << 4) ^ (_loc11_ ^ _loc7_) + (_loc4_[_loc12_ & 3 ^ _loc9_] ^ _loc6_);
            _loc6_ = _loc3_[_loc5_ - 1] = _loc3_[_loc5_ - 1] + _loc8_;
         }
         return Convert.longsToHex(_loc3_);
      }

Actually I want to decrypt this hash 

c80cebe419dbcdf34f05c5a41023160eda5e0be9e146dcb5c15fabc1ec0b9128

therefore I am learning a little but about encryption.
I know hash are one way encryption but I don't think that this hash is one way encryption because there is a decrypt function available just below this function.
      public function decrypt(param1:String, param2:String) : String
  {
     var _loc8_:Number = NaN;
     var _loc9_:Number = NaN;
     var _loc12_:Number = NaN;
     var _loc3_:Array = Convert.hexToLongs(param1);
     var _loc4_:Array = Convert.strToLongs(param2);
     var _loc5_:Number = _loc3_.length;
     if(_loc5_ == 0)
     {
        return """";
     }
     var _loc6_:Number = _loc3_[_loc5_ - 1];
     var _loc7_:Number = _loc3_[0];
     var _loc10_:Number = Math.floor(6 + 52 / _loc5_);
     var _loc11_:Number = _loc10_ * this.delta;
     while(_loc11_ != 0)
     {
        _loc9_ = _loc11_ >>> 2 & 3;
        _loc12_ = _loc5_ - 1;
        while(_loc12_ > 0)
        {
           _loc6_ = _loc3_[_loc12_ - 1];
           _loc8_ = (_loc6_ >>> 5 ^ _loc7_ << 2) + (_loc7_ >>> 3 ^ _loc6_ << 4) ^ (_loc11_ ^ _loc7_) + (_loc4_[_loc12_ & 3 ^ _loc9_] ^ _loc6_);
           _loc7_ = _loc3_[_loc12_] = _loc3_[_loc12_] - _loc8_;
           _loc12_--;
        }
        _loc6_ = _loc3_[_loc5_ - 1];
        _loc8_ = (_loc6_ >>> 5 ^ _loc7_ << 2) + (_loc7_ >>> 3 ^ _loc6_ << 4) ^ (_loc11_ ^ _loc7_) + (_loc4_[_loc12_ & 3 ^ _loc9_] ^ _loc6_);
        _loc7_ = _loc3_[0] = _loc3_[0] - _loc8_;
        _loc11_ = _loc11_ - this.delta;
     }
     return Convert.longsToStr(_loc3_);
  }

","","45","<encryption><public-key-encryption><password-encryption>","0","","0","2019-05-20 09:23:10","","3","","8513084","","2019-05-20 09:23:10","2019-05-20 03:21:47",""
"58595346","How should I encrypt passwords for API access without showing off the algorithm to the client?","I have a REST API (.net) which for the initial login requires the password to be encrypted (RSA with OAEP).  The reason was to obscure the users passwords from local logs.
Performing this encryption with javascript is complicated and I would need to let the client know the public key.  The end user would be able to reverse engineer the encryption method then could use it to brute-force (or worse) access.  So why bother, right (it is SSL Secure).
Thing is, I still need that password to be encrypted.  Should I have some sort of encryption service at the server side that gives me the password to throw at the token endpoint?  Why not have the service just log in for me then return the token.  How should I proceed?
Thanks ^_^
","This seems like a general authentication question. You can solve it like you would solve user authentication. Think of it this way:
When a user signs-in into your app, they provide their data on the client, and then it is validated on the server. In order for them to stay logged in, they get some sort of token, either via a Cookie session, JWT or whatever. Which is then saved on the client and sent on each request to the server in order to verify they are authenticated. 
The above is how websites can show ""registered users only"" content. By validating a previously given token on each new request.
Now, applying this method to your REST Api. A user needs to request a token (which should not be your master password, but a uniquely generated one, in a per-user basis), and then save it locally for X amount of time. Every time the user makes a request to the API they send that token, which is validated. 
This is also how normal APIs do it. You will need a token or some sort either way. If it's really sensitive information you're showing, the token should update every now and then (from minutes to days depending on how sensitive). You keep a record of valid tokens in your server. That way, if any token is ""stolen"", then it will only be valid for a small amount of time.
","45","<javascript><reactjs><public-key-encryption>","0","1","1","2019-10-29 09:20:32","58595516","4","","84237","","2019-10-29 09:20:32","2019-10-28 17:05:19",""
"57863506","How to store a keypair and use it in other classes for decryption?","I'm trying to encrypt String values that are getting send to @PostMapping method in @RestController via postman and store them in the database.
This is my code for encrypting the Strings
        KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance(""RSA"");

        keyPairGenerator.initialize(1024);

        keyPair = keyPairGenerator.generateKeyPair();           

        Cipher cipher = Cipher.getInstance(""RSA/ECB/PKCS1Padding"");


        cipher.init(Cipher.ENCRYPT_MODE, keyPair.getPublic());

        encrypted = cipher.doFinal(this.toBeEncrypted.getBytes(""UTF-8""));

and then i store this encrypted variable to the database.
I have another class that decrypts the string that is stored in the database, but it doesn't decrypt the encrypted value, and I know that is because it doesn't have the right key to do it.
I tried making the KeyPair a static variable so both of my custom classes, StringEncryptor and StringDecryptor use the same object of keypair but that stops working properly when the server restarts, so I believe when the server restarts, the static KeyPair object which I used to encrypt/decrypt gets reinitialized so that's not the key which locked the String variable.
I'm not sure but I kind of think I should store the key that I locked the String objects with, so I can use it again later in other classes to unlock the encrypted Strings.
most of the tutorials on the internet are about cipher algorithm and others decrypt the encrypt the file in the same method which is totally useless in real-world projects and that's not what I'm looking for.
I need to know how to store and where to store and how to retrieve these keys back again for decrypting. 
Thanks in advance.
","Key management is a whole topic onto itself. You've already discovered, I hope, that keeping keys in RAM is not an option.
Commonly you would try and put the key in a key store. This key store may be backed by hardware. In that case the actual private key operations also need to take place in hardware, or you'd have to take out the key. In the simplest form the key can simply be retrieved from a password protected key store (which would mean a PKCS#12 compatible file for latest versions of Java). Now you can store keys, but the problem is that you'd have to enter the password on restarts. 
Furthermore, generally Java KeyStore implementations also require a certificate to be present with the private key, so you'd have to generate or request a certificate for your private key. There are many tutorials on how to create a self signed certificate from a key pair. This is because Java relies heavily on PKIX, the public key infrastructure according to the US ANS(I) standards, which all start with the letter X (such as X.509 which defines what common TLS / CMS certificates look like).
OK, so now you know what direction you should look at, I'm afraid that you'll have to do some research from here on on how to manage your keys.
","45","<java><encryption><public-key-encryption><key-pair>","0","1","1","2019-09-10 16:48:11","57874514","2","","2145769","","2019-09-10 16:48:11","2019-09-10 03:07:00",""
"56769712","Confused with the length of ECC public key","I am trying to find the lenghth of the ECC public key. I read that the public key of ECC is about 64 bytes. I tried to test this my self but the result is different than the common one. Provided that I am using this specification (secp256k1). The code which I used to calculate the length of the public key is given below. 
byte publicKeyLength [] =pk.getEncoded();
System.out.println(""The Length of PK is  "" +publicKeyLength.length); // it prints 311 byes?
As I read in this forum it should be 64 bytes. But Why when I tested it, it gives 311 bytes?
","If you refer to rfc5480 you will see that the bytes that you got from PublicKey::getEncoded method is actually DER encoded SubjectPublicKeyInfo :
SubjectPublicKeyInfo  ::=  SEQUENCE  {
       algorithm         AlgorithmIdentifier,
       subjectPublicKey  BIT STRING
}

And the subjectPublicKey will be DER OCTET String encoded ECPublicKey and this key consists of first byte which is the on that determines that key is compressed or not and then the X, Y coordinates of the public key EC point. 
And the length of X, Y fields depends on which curve the point is defined. For your curve it will be 32 bytes for each coordinate. Therefore in uncompressed form the raw key will have 65 bytes (1 + 32 + 32). The difference between compressed and uncompressed forms has been explained in this SO question.
","45","<java><key><public-key-encryption>","0","1","1","2019-06-26 14:59:26","56770115","2","","","","","2019-06-26 09:42:16",""
"57726474","Rsa implementation with BigInteger doesn't work for big numbers","I'm trying to have a simple RSA encryption/decryption, using BigInteger. It works fine for smaller numbers, but not for bigger numbers:
BigInteger messageToInt = 111098; 
BigInteger enc = BigInteger.ModPow(messageToInt, publicKey, n);
BigInteger dec = BigInteger.ModPow(enc, privateKey, n); // should be same as messageToInt
Console.WriteLine(dec);

Keys are from Wiki example - privateKey = 413, publicKey = 17, n = 3233. 

for messageToInt = 1500: dec = 1500 (which is fine). 
for messageToInt = 15000: dec = 2068. (what?!).

","Actually, it worked perfectly:
15000 mod 3233 = 2068.

Since RSA relies on modular arithmetic, you are restricted to plain texts that are smaller than n. There is no way to distinguish whether the plain text was 2068, 2068 + n, 2068 + 2n, and so on.
The solution is here to either split the plain text into parts that are smaller than n, or increase n until the plain text fits in there.
","44","<c#><rsa><biginteger><public-key-encryption>","2","3","1","2019-08-30 13:33:31","57726928","1","0","8528014","","2019-08-30 13:33:31","2019-08-30 12:07:53",""
"50775348","Digital signature when only one person has public/private key","Hello I have a scenarios where a client and a bank must communicate in a secure way and they must use electronic signature but only the bank has public/private key. How will the communication occur? Meaning how will they authenticate each other who will give the key to who how will the encryption occur?
","It can't. The bank must have a pair of key (private and public) representing the bank, and the client must also have a pair of keys representing the client. If only the bank has a pair of key only the banks identity can be verified. Example: the bank sends a public message to all clients and signs it with its private key. All the clients can by using the banks public key indeed verify that the message comes from the bank.
 However a client can also send an encrypted message to the bank using the banks public key, and only the bank can indeed read this message by using its private key, but the bank can not determine the identity of the client.
The clients identity can of course be determined by other means for instance by a login credentials.
","43","<encryption><public-key-encryption><digital-certificate><electronic-signature>","0","0","1","2018-06-09 15:14:32","","0","","9168783","","2018-06-09 14:52:59","2018-06-09 14:33:40",""
"57993807","Got java.security.InvalidKeyException: IOException: ObjectIdentifier() -- data isn't an object ID (tag = -96)","Note: String cert is sent over REST API as a HashMap, Not sure what is wrong here.
HashMap<String, Object> extraParams = //API brings this HashMap here.
String cert = (String) extraParams.get(""certificate"");
cert = cert.replaceAll(""-----BEGIN CERTIFICATE-----"", """").
                replaceAll(""-----END CERTIFICATE-----"", """").replaceAll(""\r"", """").replaceAll(""\n"", """");
byte[] decodedBytes = Base64.decodeBase64(cert.getBytes(""UTF-8""));
X509EncodedKeySpec publicKeySpec = new X509EncodedKeySpec(decodedBytes);
KeyFactory kf = KeyFactory.getInstance(""RSA"");
PublicKey pk = kf.generatePublic(publicKeySpec);

My Certificate String from originated Server and what I received over API is same but still getting this error not sure why?
java.security.spec.InvalidKeySpecException: java.security.InvalidKeyException: IOException: ObjectIdentifier() -- data isn't an object ID (tag = -96)

","As I mentioned in the question itself that my String Cert have traveled over REST HTTP, I was suspecting that UTF-8 encoding might be an issue. That's what I was missing. Below code worked like charm for me. partially copied from https://stackoverflow.com/a/34549537/1665592
String cert = ""..."";
byte[] encodedCert = cert.getBytes(""UTF-8"");
byte[] decodedCert = Base64.decodeBase64(encodedCert);
CertificateFactory certFactory = CertificateFactory.getInstance(""X.509"");
InputStream in = new ByteArrayInputStream(decodedCert);
X509Certificate certificate = (X509Certificate)certFactory.generateCertificate(in);
PublicKey publicKey = ((RSAPublicKey)certificate.getPublicKey());

","43","<java><rsa><public-key-encryption><x509>","0","0","1","2019-09-19 11:17:39","","2","","1665592","","2019-09-19 11:11:34","2019-09-18 13:22:01",""
"47875088","Playing with public/private keys on the command line","I want to play with public/private keys just for fun.
I want to use shorter strings, just to see the magic in front of my eyes.
Example:
""Text_merry_X-mas"" + small_key1 -> ""any_small_unreadable_string""
""any_small_unreadable_string"" + key2 -> ""Text_merry_X-mas""
I do not care if the algorithm is RSA or anything else.
I just want to give this inputs and get outputs on the command line.
I do not want to encrypt files and let RSA calculate that long keys,
because again it is just for fun.
And i would like to be able to define key1, as we do for passwords.
Than let key2 be calculated from key1.
Can you guys give me some tips?
Thx a los!
","Broadly:
For Asymmetric encryption you must first generate your private key and extract the public key.
openssl genrsa -aes256 -out private.key 8912
openssl rsa -in private.key -pubout -out public.key

To encrypt:
openssl rsautl -encrypt -pubin -inkey public.key -in plaintext.txt -out encrypted.txt

To decrypt:
openssl rsautl -decrypt -inkey private.key -in encrypted.txt -out plaintext.txt

This and more nicely summarized here: https://gist.github.com/dreikanter/c7e85598664901afae03fedff308736b
","43","<public-key-encryption><private-key>","-4","0","1","2017-12-20 13:37:35","","2","","","","","2017-12-18 19:22:54",""
"23420140","Securely verifying 2 messages from a source - which algorithm?","I am working on a project where:

The sender sends a single 256-bit public key to multiple clients
The sender then sends a second message (of any size) over another medium to these clients
Clients will have sufficient details to pretend that they are the sender, except for the private key from the first public key
The first 256-bit public key must have a huge scope for randomness, as we will be SHA2'ing it and using it for passwords

I need to verify that the second message is from the sender, and not from a malicious client.
What is the type of encryption algorithm I am looking for? I want to embed a verifying key in this second message, so that non-malicious clients can verify that the sender (or someone with the private key) sent both messages, and not another client.
","The cryptographic primitive you are looking for are public key signatures. They do exactly what you have described, but I'll add few remarks to your points:

Re 1: The first channel you use has to be secure in some sense so no attacker can not pretend to be the server in the first step already. An example for such a secure connection would carrying it via usb stick by yourself if the other side knows you as a person. Or if they are all software installations of your code you can embed the public key in the source code (assuming the software arrives at the client in a secure fashion). Regarding the key size: 256bit keys are very short for most public key signature schemes. For elliptic curve schemes 256bit is lower minimum, for RSA you now need keys with 2048bit.
Re 4: The public key will have a lot of entropy (the technical term for ""huge scope for randomness""), but non the less it is bad practice to reuse keys for several applications. Why don't you just transmit the (independently generated) passwords in the first step already?

","43","<encryption><public-key-encryption><password-encryption>","1","1","1","2014-05-02 06:54:02","23422452","0","","3505046","","2014-05-02 04:34:40","2014-05-02 03:08:00",""
"56276381","Python JSON encryption got error and psycopg2 converts JSON data to single-quote","I am  trying to encrypt JSON data that is stored in a database. I have a public key which is used for the encryption and is also stored in a table in database . This is my code:
import psycopg2
import . . . .
.
.
#get json data from database
def getJson():
    sql = '''
    SELECT  json_data from table1;
    '''
    cursor.execute(sql)
    result = [row[0] for row in cursor.fetchall()]

    return result

# get public key to encrypt
def getPubKey():
    sql = '''
    select public_key from table2 
    where col1 = 'xxx'
    and col2 = 'yyy'
    limit 20;
    '''
    cursor.execute(sql)
    rsa_pub = cursor.fetchone()[0]
    return rsa_pub

def encrypt_rsa(_rsa_pub, plaintext):
    key_txt = _rsa_pub.encode()
    public_key = serialization.load_pem_public_key(key_txt, default_backend())

    # encrypt plaintext
    pad = padding.OAEP(mgf=padding.MGF1(algorithm=hashes.SHA256()),
                   algorithm=hashes.SHA256(),
                   label=None)
    return public_key.encrypt(plaintext, pad)


def run():
    message = getJson()
    pk = getPubKey()
    for x in message:
        json.dumps(x)
        enc = encrypt_rsa(pk , x)
        enc = base64.b64encode(enc).decode()
        print(enc)

I adapted encrypt_rsa() function from Google document. And I got this error:
TypeError: initializer for ctype 'unsigned char *' must be a cdata pointer, not dict

So I tried printing the json data that I queried, which turned out to be single-quoted like this: {'data':'abc'}, which is weird because JSON format should use double quotes. So I tried query in pSQL and got double-quoted data {""data"":""abc""}. I am not sure that is the reason for the error or not.
My question here is

It seems like psycopg2 converts my JSON result to single-quoted text instead of the default double quote. So, how can I force a double quote like normal? 
If it becomes double-quoted and the error still occurs, how can I encrypt a JSON database with what I have tried on my code?

Traceback:
Traceback (most recent call last):
  File ""encrypt.py"", line 78, in <module>
   run()
  File ""encrypt.py"", line 70, in run
   enc = encrypt_rsa(pk , x)
 File ""encrypt.py"", line 56, in encrypt_rsa
   return public_key.encrypt(plaintext, pad)
 File ""/usr/lib/python3/dist-packages/cryptography/hazmat/backends/openssl/rsa.py"", line 446, in encrypt
   return _enc_dec_rsa(self._backend, self, plaintext, padding)
 File ""/usr/lib/python3/dist-packages/cryptography/hazmat/backends/openssl/rsa.py"", line 68, in _enc_dec_rsa
   return _enc_dec_rsa_pkey_ctx(backend, key, data, padding_enum, padding)
 File ""/usr/lib/python3/dist-packages/cryptography/hazmat/backends/openssl/rsa.py"", line 123, in _enc_dec_rsa_pkey_ctx
   res = crypt(pkey_ctx, buf, outlen, data, len(data))
TypeError: initializer for ctype 'unsigned char *' must be a cdata pointer, not dict

","","43","<python><json><psycopg2><public-key-encryption>","0","","0","2019-05-23 14:10:22","","8","","6714341","","2019-05-23 14:10:22","2019-05-23 13:29:28",""
"54106586","GPG tools validate publickey before import (public key string)","I'm using GPG tools on my machine, now I would need a script to validate some provided publickeys (as string) to check if these are valid public keys. Is there some way, using GPG command line to validate the provided string (check if it's a valid public key)?
I only want to import valid public keys, not importing private keys.
Running version:
gpg (GnuPG) 2.2.4
","","42","<encryption><public-key-encryption><pgp>","0","","0","2019-01-09 09:11:52","","0","","","","","2019-01-09 09:11:52",""
"51724442","Why am I not getting the decrypted data when my input text size is less than 16 bytes using openssl EVP_OpenInit() api function?","I am trying to encrypt and Decrypt file using EVP apis. I am getting correct result when size is greater or equal to 16 bytes only. Here is my codes for the above stated problem.
 #include <stdio.h>

    #include <stdlib.h>

    #include <openssl/evp.h>
    #include <openssl/pem.h>
    #include <openssl/rsa.h>
    #include <openssl/err.h>

    #include <arpa/inet.h> 

    #if 1
    int do_evp_seal(FILE *rsa_pkey_file, FILE *in_file, FILE *out_file)
    {
        int retval = 0;
        RSA *rsa_pkey = NULL;
        EVP_PKEY *pkey = EVP_PKEY_new();
        EVP_CIPHER_CTX *ctx;
        ctx = EVP_CIPHER_CTX_new();
        unsigned char buffer[4096];
        unsigned char buffer_out[4096 + EVP_MAX_IV_LENGTH];
        //size_t len;
        int len_out;
        unsigned char *ek = NULL;
        int eklen=0;
        uint32_t eklen_n=0;
        unsigned char iv[EVP_MAX_IV_LENGTH];

        if (!PEM_read_RSA_PUBKEY(rsa_pkey_file, &rsa_pkey, NULL, NULL))
        {
            fprintf(stderr, ""Error loading RSA Public Key File.\n"");
            ERR_print_errors_fp(stderr);
            retval = 2;
            goto out;
        }

        if (!EVP_PKEY_assign_RSA(pkey, rsa_pkey))
        {
            fprintf(stderr, ""EVP_PKEY_assign_RSA: failed.\n"");
            retval = 3;
            goto out;
        }

        EVP_CIPHER_CTX_init(ctx);
        ek = malloc(EVP_PKEY_size(pkey));

        if (!EVP_SealInit(ctx, EVP_aes_128_cbc(), &ek, &eklen, iv, &pkey, 1))
        {
            fprintf(stderr, ""EVP_SealInit: failed.\n"");
            retval = 3;
            goto out_free;
        }

        /* First we write out the encrypted key length, then the encrypted key,
         * then the iv (the IV length is fixed by the cipher we have chosen).
         */

        eklen_n = htonl(eklen);
        if (fwrite(&eklen_n, sizeof eklen_n, 1, out_file) != 1)
        {
            perror(""output file"");
            retval = 5;
            goto out_free;
        }
        if (fwrite(ek, eklen, 1, out_file) != 1)
        {
            perror(""output file"");
            retval = 5;
            goto out_free;
        }
        if (fwrite(iv, EVP_CIPHER_iv_length(EVP_aes_128_cbc()), 1, out_file) != 1)
        {
            perror(""output file"");
            retval = 5;
            goto out_free;
        }

        /* Now we process the input file and write the encrypted data to the
         * output file. */

        while (1)
        {
            int numlen = fread(buffer, 1, sizeof buffer, in_file);
            if (!EVP_SealUpdate(ctx, buffer_out, &len_out, buffer, numlen))
            {
                fprintf(stderr, ""EVP_SealUpdate: failed.\n"");
                retval = 3;
                goto out_free;
            }

            if (fwrite(buffer_out, len_out, 1, out_file) != 1)
            {
                perror(""output file"");
                retval = 5;
                goto out_free;
            }
            if (numlen < sizeof(buffer)) { // EOF
                break;
            }
        }

        if (ferror(in_file))
        {
            perror(""input file"");
            retval = 4;
            goto out_free;
        }

        if (!EVP_SealFinal(ctx, buffer_out, &len_out))
        {
            fprintf(stderr, ""EVP_SealFinal: failed.\n"");
            retval = 3;
            goto out_free;
        }

        if (fwrite(buffer_out, len_out, 1, out_file) != 1)
        {
            perror(""output file"");
            retval = 5;
            goto out_free;
        }

        out_free:
        EVP_PKEY_free(pkey);
        EVP_CIPHER_CTX_cleanup(ctx);
        free(ek);

        out:
        return retval;
    }
    #endif
    int main(int argc, char *argv[])
    {
        FILE *rsa_pkey_file,*ifp,*ofp;
        int rv;

        if (argc < 2)
        {
            fprintf(stderr, ""Usage: %s <PEM RSA Public Key File>\n"", argv[0]);
            exit(1);
        }

        rsa_pkey_file = fopen(argv[1], ""rb"");
        ifp = fopen(argv[2], ""rb"");
        ofp = fopen(argv[3], ""wb"");
        if (!rsa_pkey_file)
        {
            perror(argv[1]);
            fprintf(stderr, ""Error loading PEM RSA Public Key File.\n"");
            exit(2);
        }
        if (!ifp)
        {
            perror(argv[1]);
            fprintf(stderr, ""Error loading input file.\n"");
            exit(2);
        }
        if (!ofp)
        {
            perror(argv[1]);
            fprintf(stderr, ""Error loading output file.\n"");
            exit(2);
        }

        rv = do_evp_seal(rsa_pkey_file, ifp, ofp);

        fclose(rsa_pkey_file);
        fclose(ifp);
        fclose(ofp);
        return rv;
    }

Here is my code for decryption for the above stated problem. For size less than 16 bytes the decrypted file is empty. Although the code seems to be logically correct.
#include <stdio.h>
#include <stdlib.h>

#include <openssl/evp.h>
#include <openssl/pem.h>
#include <openssl/rsa.h>
#include <openssl/err.h>

#include <arpa/inet.h> /* For htonl() */


#if 1
int do_evp_unseal(FILE *rsa_pkey_file, FILE *in_file, FILE *out_file)
{
    int retval = 0;
    RSA *rsa_pkey = NULL;
    EVP_PKEY *pkey = EVP_PKEY_new();
    EVP_CIPHER_CTX *ctx;
    ctx = EVP_CIPHER_CTX_new();
    unsigned char buffer[4096];
    unsigned char buffer_out[4096 + EVP_MAX_IV_LENGTH];
    //size_t len;
    int len_out;
    unsigned char *ek;
    unsigned int eklen=0;
    uint32_t eklen_n=0;
    unsigned char iv[EVP_MAX_IV_LENGTH];

    if (!PEM_read_RSAPrivateKey(rsa_pkey_file, &rsa_pkey, NULL, NULL))
    {
        fprintf(stderr, ""Error loading RSA Private Key File.\n"");
        ERR_print_errors_fp(stderr);
        retval = 2;
        goto out;
    }

    if (!EVP_PKEY_assign_RSA(pkey, rsa_pkey))
    {
        fprintf(stderr, ""EVP_PKEY_assign_RSA: failed.\n"");
        retval = 3;
        goto out;
    }

    EVP_CIPHER_CTX_init(ctx);
    ek = malloc(EVP_PKEY_size(pkey));

    /* First need to fetch the encrypted key length, encrypted key and IV */

    if (fread(&eklen_n, sizeof eklen_n, 1, in_file) != 1)
    {
        perror(""input file"");
        retval = 4;
        goto out_free;
    }
    eklen = ntohl(eklen_n);
    if (eklen > EVP_PKEY_size(pkey))
    {
        fprintf(stderr, ""Bad encrypted key length (%u > %d)\n"", eklen,
            EVP_PKEY_size(pkey));
        retval = 4;
        goto out_free;
    }
    if (fread(ek, eklen, 1, in_file) != 1)
    {
        perror(""input file"");
        retval = 4;
        goto out_free;
    }
    if (fread(iv, EVP_CIPHER_iv_length(EVP_aes_128_cbc()), 1, in_file) != 1)
    {
        perror(""input file"");
        retval = 4;
        goto out_free;
    }

    if (!EVP_OpenInit(ctx, EVP_aes_128_cbc(), ek, eklen, iv, pkey))
    {
        fprintf(stderr, ""EVP_OpenInit: failed.\n"");
        retval = 3;
        goto out_free;
    }

    while (1)
    {
        int numlen = fread(buffer, 1, sizeof buffer, in_file);
        if (!EVP_OpenUpdate(ctx, buffer_out, &len_out, buffer, numlen))
        {
            fprintf(stderr, ""EVP_OpenUpdate: failed.\n"");
            retval = 3;
            goto out_free;
        }

        if (fwrite(buffer_out, len_out, 1, out_file) != 1)
        {
            perror(""output file"");
            retval = 5;
            goto out_free;
        }
        if (numlen < sizeof(buffer)) { // EOF
            break;
        }
    }

    if (ferror(in_file))
    {
        perror(""input file"");
        retval = 4;
        goto out_free;
    }

    if (!EVP_OpenFinal(ctx, buffer_out, &len_out))
    {
        fprintf(stderr, ""EVP_SealFinal: failed.\n"");
        retval = 3;
        goto out_free;
    }

    if (fwrite(buffer_out, len_out, 1, out_file) != 1)
    {
        perror(""output file"");
        retval = 5;
        goto out_free;
    }

    out_free:
    EVP_PKEY_free(pkey);
    EVP_CIPHER_CTX_cleanup(ctx);
    free(ek);

    out:
    return retval;
}
#endif
int main(int argc, char *argv[])
{
    FILE *rsa_pkey_file,*ifp,*ofp;
    int rv;

    if (argc < 2)
    {
        fprintf(stderr, ""Usage: %s <PEM RSA Private Key File>\n"", argv[0]);
        exit(1);
    }

    rsa_pkey_file = fopen(argv[1], ""rb"");
    ifp = fopen(argv[2], ""rb"");
    ofp = fopen(argv[3], ""wb"");
    if (!rsa_pkey_file)
    {
        perror(argv[1]);
        fprintf(stderr, ""Error loading PEM RSA Private Key File.\n"");
        exit(2);
    }

    rv = do_evp_unseal(rsa_pkey_file, ifp, ofp);

    fclose(rsa_pkey_file);
    fclose(ifp);
    fclose(ofp);
    return rv;
}

","","42","<linux><openssl><public-key-encryption><encryption-asymmetric><openssl-engine>","0","","0","2018-08-09 08:52:25","","2","1","472495","","2018-08-09 08:52:25","2018-08-07 10:23:15",""
"20911747","Integrity of gpg communication after sending the private key by email","My collegue has sent me by email his gpg private key generated by:
gpg --export-secret-keys --armor <id> > private_key.asc

instead of his gpg public key as (I supposed) recoverable by:
gpg --armor --output public_key.gpg --export

Is now his gpg key ""corrupted"", in the sense that having sent it by email its integrity is no more trusted?
Should he revoke that key?
","The worst case assumption is that someone listened to the mail and is right now trying to guess the passphrase chosen by your colleague. The safest (and imho correct) thing to do is to revoke the key and generate a new one.
","42","<public-key-encryption><private-key><gnupg>","-1","1","1","2014-01-04 13:45:02","","0","","","","","2014-01-03 20:00:39",""
"51286377","Exchanging publicKeys of RSA encryption method in an android chat application","I want to use RSA in a android chat application which works through WIFI-Direct.
I should exchange public keys between server phone and client phone at the beginning of chat session. how should I do that?
any framework or Library is greatly appreciated.
","","42","<android><rsa><chat><public-key-encryption><wifi-direct>","0","","0","2018-07-11 13:11:37","","2","","","","","2018-07-11 13:11:37",""
"57577271","How to use eccrypto to encrypt a message with Bitcoin public key","I am trying unsuccesfully to encrypt a string with bitcoin public key generated from a mnemonic with this website - https://iancoleman.io/bip39/.
I have tryied to set up a nodejs project. Used code I fount there on stack overflow.
code i am using:
var eccrypto = require(""eccrypto"");

/* not using this
var privateKeyA = crypto.randomBytes(32);
var publicKeyA = eccrypto.getPublic(privateKeyA);
 */

// my public key - 0202666ea1c33fc02e75a2748f1829f62ce0071d85570aef6cbd2b2b2e5fb4b999
// my private key - KyDCjoRRn5rPusszHF1DiPYfZCZE2CKjZwi6jDYuGPR9rcqMtqPc

// Encrypting the message
eccrypto.encrypt(Buffer.from('0202666ea1c33fc02e75a2748f1829f62ce0071d85570aef6cbd2b2b2e5fb4b999', 'hex'), Buffer(""msg to b"")).then(function(encrypted) {
  // decrypting the message.
  eccrypto.decrypt(Buffer.from('KyDCjoRRn5rPusszHF1DiPYfZCZE2CKjZwi6jDYuGPR9rcqMtqPc', 'base64'), encrypted).then(function(plaintext) {
    console.log(""Message to part B:"", plaintext.toString());
  });
});

The output in the console is always the same - UnhandledPromiseRejectionWarning: Error: Bad private key
I have no idea how the private key is bad and in which format I should provide the library the key with. The private key I am getting seems to be base64 - it is derived from the BIP32 Extended Key and it is derivation path m/44'/0'/0'/0/0 (although not sure what does that exactly mean).
","","41","<javascript><node.js><public-key-encryption><bitcoin>","0","","0","2019-08-20 15:56:44","","0","","4308360","","2019-08-20 15:56:44","2019-08-20 15:44:35",""
"58755669","How to get an elliptic curve public key from a private key","So, I need to get a public key from a corresponding 256 bit number using ECC spec256k1. 
So, lets say I get a private key using a sha256 from any passphrase, like this:
>>> import hashlib
>>> private_key = hashlib.sha3_256(b""Led Zeppelin - No Quarter"").hexdigest()
>>> private_key
'c0b279f18074de51d075b152c8ce78b7bddb284e8cfde19896162abec0a0acce'

How do I get a public key from that private key? I need to print the public key as a string. 
","pip install fastecdsa

from fastecdsa import keys, curve,ecdsa
priv_key, pub_key = keys.gen_keypair(curve.secp256k1) 

print(pub_key)

yield
X: 0xcc228e1a4c8e187a0deeabcd6e43bc8f7b6bdd91b8f823912f2de188fba054e6
Y: 0x7995a9d3866a8fa11a9af933c76216a908995ec5cec6ed7d3056b787fa7d39d7

Supported Primitives
Curves over Prime Fields - Source
Name                      Class

P192 / secp192r1          fastecdsa.curve.P192  
P224 / secp224r1          fastecdsa.curve.P224  
P256 / secp256r1          fastecdsa.curve.P256  
P384 / secp384r1          fastecdsa.curve.P384  
P521 / secp521r1          fastecdsa.curve.P521 
secp192k1                 fastecdsa.curve.secp192k1     
secp224k1                 fastecdsa.curve.secp224k1     
secp256k1 (bitcoin curve) fastecdsa.curve.secp256k1     
brainpoolP160r1           fastecdsa.curve.brainpoolP160r1   
brainpoolP192r1           fastecdsa.curve.brainpoolP192r1   
brainpoolP224r1           fastecdsa.curve.brainpoolP224r1   
brainpoolP256r1           fastecdsa.curve.brainpoolP256r1   
brainpoolP320r1           fastecdsa.curve.brainpoolP320r1   
brainpoolP384r1           fastecdsa.curve.brainpoolP384r1
brainpoolP512r1           fastecdsa.curve.brainpoolP512r1

","41","<python><public-key-encryption><elliptic-curve><ecdsa>","1","3","1","2019-11-08 17:31:24","58756097","3","1","1968","","2019-11-07 20:11:41","2019-11-07 19:27:43",""
"53580136","Why does this function not benefit from multithreading?","does someone know why function 1 takes longer to finish than function 2 even though function 1 is multithreaded and should use the system resources better than function 2?
I really have no idea if and where I made a mistake while implementing multiprocessing.
Function 1:
def encrypt(message, keyname=""publicKey.rsa""):
""""""
Encrypts or decrypts a hex message.
:param message: Must be a hexadecimal number. Example: 3e40f3ad, not: 0x3e40f3ad
:param keyname: Must be the name of the keyfile in the RSA-420 path.
:return: Returns encrypted or decrypted hexadecimal string (Example: ""4723d8ea"") with spaces as block splitters.
""""""
crypted = """"
key = readkey(keyname)
exp, mod = format(int(key[0], 16), ""x""), format(int(key[1], 16), ""x"")
blocklength = len(mod) - 1
blockcount = int(math.ceil(len(message)/blocklength))
results = []
pool = tp(processes=6)
for i in range(blockcount-1):
    results.append(None)
for i in range(blockcount-1):
    part = message[i*blocklength:((i+1)*blocklength)]
    res = pool.apply_async(crypt, args=(int(part, 16), int(exp, 16), int(mod, 16)))
    results[i] = res.get()
for i in range(len(results)):
    crypted += format(results[i], ""x"") + "" ""
i = blockcount-1
part = message[i*blocklength:((i+1)*blocklength)]
lastlen = len(part)
crypted += format(pow(int(part, 16), int(exp, 16), int(mod, 16)), ""x"") + "" ""
return crypted + str(blocklength) + "" "" + str(lastlen)

Function 2:
def encryptold(message, keyname=""publicKey.rsa""):
""""""
Encrypts or decrypts a hex message.
:param message: Must be a hexadecimal number. Example: 3e40f3ad, not: 0x3e40f3ad
:param keyname: Must be the name of the keyfile in the RSA-420 path.
:return: Returns encrypted or decrypted hexadecimal string (Example: ""4723d8ea"") with spaces as block splitters.
""""""
crypted = """"
key = readkey(keyname)
exp, mod = format(int(key[0], 16), ""x""), format(int(key[1], 16), ""x"")
blocklength = len(mod) - 1
blockcount = math.ceil(len(message)/blocklength)
for i in range(blockcount-1):
    part = message[i*blocklength:((i+1)*blocklength)]
    crypted += format(pow(int(part, 16), int(exp, 16), int(mod, 16)), ""x"") + "" ""
i = blockcount-1
part = message[i*blocklength:((i+1)*blocklength)]
lastlen = len(part)
crypted += format(pow(int(part, 16), int(exp, 16), int(mod, 16)), ""x"") + "" ""
return crypted + str(blocklength) + "" "" + str(lastlen)

I tested encrypting a 206kB file with both codes and the multithreaded one is always a good 3% slower even though it should be closer to 600% faster due to my system having 6 physical cores.
Thanks for helping in advance!
","","41","<python><multithreading><multiprocessing><python-multithreading><public-key-encryption>","1","","0","2018-12-02 12:15:55","","4","","","","","2018-12-02 12:15:55",""
"54692681","Encryption error after upgrading mule from 3.8 to 3.9","Have anyone got below error, Please help.  
java.lang.RuntimeException: org.mule.security.encryption.MuleEncryptionException: Could not encrypt the data

This never got while using mule version 3.8,
but started getting after upgrading to mule 3.9.
","This issue was resolved by using new encryption connector configuration.
","41","<exception><encryption><mule><runtime><public-key-encryption>","0","0","1","2019-08-07 20:22:00","57401817","1","","","","","2019-02-14 14:24:49",""
"49591238","Authenticating without a database in nodejs","I am making a databaseless website on aws lambda. A user will be able to post a message. And if he has the right password (which will be a url like example.com/pageid/edit/passwordkey/) he will be able to edit the page too. I want to be able to authenticate a user without a database. I'm using s3 but data on s3 will be public so I cannot store the password in s3.
This is my solution at the moment: 
function save(pageid,data){
    s3.putObject({Key:pageid,Body:data});
    password = sha256(pageid + ""SALTPHRASE"");
    print({password:password});
}
function authenticate(pageid,password,newdata){
    if(sha256(pageid+""SALTPHRASE"") == password){
        s3.putObject({Key:pageid,Body:newdata});
    }
}

Problem with this approach is if at any future date someone learn the saltphrase. They can access every data on the website because pageid's are public. 
I am not good at encryption subject, I have some basic understanding only so I'm not sure if this can work. And how can I make it on nodejs. To be more specific I want to generate public and private keys using SSL like encryption. So that I'm not dependent on one single salt that I cannot change in future.

I generate a public and private key
I save the public key with the file, give private key to the user
When I am authenticating I simply encrypt a message with public key on the file and decrypt it with user provided private key. If message is the same I authenticate the user.

I do not know which libraries can do this (more specifically in nodejs). Which method of encryption is the best or if this method has it's own weaknesses. 
Thank you. 
","When sticking to AWS, for authentication you may want to have a look at the Cognito service. It's effectively a complete identity management (managing users, groups,..)  with federation options and social network logins.  For public access it has generous free tier and reasonable pricing.  (you will need to learn about OAuth and chew through Cognito documentation) 

want to be able to authenticate a user without a database

Now you are using S3 as a database (datastore). As you found you need to store your data somewhere. 
From your use case I assumed you want to validate a secret (password?) to authorize an action.  If you want to go completely serverless without any database, you may want to use the lambda environment variables to store some secret ( e.g. salt, password hash,. .). 
IMHO it may be still feasible to send a secret along the request to authorize an action (that's done  with API key or basic auth) , but I won't advice putting it into url. It could be in payload, header, anything that is not directly cached or logged.  

I do not know which libraries can do this

For symmetric encryption and hashing I use crypto-js, however this library doesn't support RSA or PBKDF. 

I am not good at encryption subject, I have some  understanding only so I'm not sure if this can work. And how can I make it on nodejs

Unfortunately cryptography is broad topic and it's easy to shoot yourself in the leg.
For each topic I'd advice to search the net, try it out and then create a new specific question when you have a problem
","41","<javascript><node.js><encryption><passwords><public-key-encryption>","0","0","2","2018-04-01 07:21:19","","1","","1602301","","2018-03-31 21:28:43","2018-03-31 18:46:45",""
"49591238","Authenticating without a database in nodejs","I am making a databaseless website on aws lambda. A user will be able to post a message. And if he has the right password (which will be a url like example.com/pageid/edit/passwordkey/) he will be able to edit the page too. I want to be able to authenticate a user without a database. I'm using s3 but data on s3 will be public so I cannot store the password in s3.
This is my solution at the moment: 
function save(pageid,data){
    s3.putObject({Key:pageid,Body:data});
    password = sha256(pageid + ""SALTPHRASE"");
    print({password:password});
}
function authenticate(pageid,password,newdata){
    if(sha256(pageid+""SALTPHRASE"") == password){
        s3.putObject({Key:pageid,Body:newdata});
    }
}

Problem with this approach is if at any future date someone learn the saltphrase. They can access every data on the website because pageid's are public. 
I am not good at encryption subject, I have some basic understanding only so I'm not sure if this can work. And how can I make it on nodejs. To be more specific I want to generate public and private keys using SSL like encryption. So that I'm not dependent on one single salt that I cannot change in future.

I generate a public and private key
I save the public key with the file, give private key to the user
When I am authenticating I simply encrypt a message with public key on the file and decrypt it with user provided private key. If message is the same I authenticate the user.

I do not know which libraries can do this (more specifically in nodejs). Which method of encryption is the best or if this method has it's own weaknesses. 
Thank you. 
","If you want to authenticate the user without a database, have a look at AWS cognito service.
To authenticate from S3, you can store user data as a file in JSON or CSV and query S3 data using AWS Athena.
","41","<javascript><node.js><encryption><passwords><public-key-encryption>","0","0","2","2018-04-01 07:21:19","","1","","1602301","","2018-03-31 21:28:43","2018-03-31 18:46:45",""
"53499724","How to make an dictionary attack to a .p12 with password (educative pruposes)","Which programme or command do you use to extract the public key from a p12 protected with a password? I am trying with the command hydrabut i think it only works along networks
","You can use openssl to check, convert etc. a p12 file.
E.g.:
openssl pkcs12 -info -in example.p12

or
openssl pkcs12 -in example.p12 -out example.pem -nodes

etc.
You can make openssl read the password from a file or stdin. E.g.:
openssl [...] -pass stdin

See man page for openssl for more ideas.
","40","<security><encryption><public-key-encryption><dictionary-attack>","-1","0","1","2018-11-27 17:56:09","","1","","","","","2018-11-27 12:29:01",""
"27730312","Encrypt other person's public key to reduce overall needed key size, viable?","I need to use RSA encryption in a environment where byte size of the keys are important. 
I don't want to risk security breaking, so I wondered if you could have one person transmit his key first using (2048 bit) and then have the other transmit his key of size (256bit) encrypted with the other guy's key. And if this would still provide a secure scheme?
PS: I realize 256 bit would increase from the encryption and you can ignore the man-in-middle problem.
TL;DR: Does keeping public key secret allow for a smaller key size?
","Typically one would use RSA and other asymmetric algorithms specifically for the purpose of exchanging keys.  The security of RSA has to do with factoring large primes, which is why their key sizes are typically so much longer than symmetric keys for algorithms such as AES.  What you don't want to do is reduce the RSA key size in your scheme.  So if what you're doing is creating a 256 bit AES key and then using AES thereafter for encryption I think the security scheme will work.  Public key cryptography is much slower than symmetric encryption therefore for performance and other reasons you don't want to use RSA.
As to your question regarding keeping the public key secret, I think that goes against what RSA is meant for.  A public key is meant to be public.
The implementation can have failings as well, for example SSL 3 was found to have a padding oracle vulnerability in 2014.  I would suggest you use a standard implementation like TLS rather than trying to make your own protocol.  Secure protocols are typically the most difficult problems in cryptography.
","40","<encryption><rsa><public-key-encryption><memory-efficient>","1","0","1","2015-01-02 03:44:38","","0","1","","","","2015-01-01 11:23:43",""
"53408888","Java private/public encrypt exception data must not be greater than 256 bytes","I have this code below for encrypting objects, which does a job.
But I have an object containing a list of another object. When I encrypt the object I have the error that data must be greater than 256 bytes. When I remove the list, the encryption is managed without error.
public class A {
     private List<B> b = new ArrayList<>(); 
    //getter setter

}


try {
    Cipher cipher = Cipher.getInstance(""RSA"");
    cipher.init(Cipher.ENCRYPT_MODE, publicKey);
    encryptedBytes = cipher.doFinal(message.getBytes());
} catch (NoSuchPaddingException | NoSuchAlgorithmException | BadPaddingException
           | IllegalBlockSizeException | InvalidKeySpecException | InvalidKeyException e) {
       e.printStackTrace();
}

","RSA is not suitable for encrypting more than limited amounts of data. The conventional solution is hybrid encryption where the data is encrypted with a symmetric cipher with a nonce key and RSA is used to encrypt (only) the key. See for examples PKCS7/CMS/SMIME, PGP, XMLenc, JWE, SSL/TLS, and SSH.
Dupes here and cross-Stack:
Encrypting large files using a public key
How to encrypt a large file in openssl using public key
https://crypto.stackexchange.com/questions/14/how-can-i-use-asymmetric-encryption-such-as-rsa-to-encrypt-an-arbitrary-length
https://crypto.stackexchange.com/questions/3608/why-is-padding-used-for-rsa-encryption-given-that-it-is-not-a-block-cipher
https://crypto.stackexchange.com/questions/5782/why-is-asymmetric-cryptography-bad-for-huge-data
https://crypto.stackexchange.com/questions/10685/hybrid-encryption-with-rsa-and-aes-versus-spliting-into-multiple-rsa-messages
https://crypto.stackexchange.com/questions/25899/using-ecb-as-rsa-encryption-mode-when-encrypted-messages-are-unique
https://security.stackexchange.com/questions/37581/why-does-pgp-use-symmetric-encryption-and-rsa 
","40","<java><public-key-encryption>","0","0","1","2018-11-21 11:54:32","","0","","436560","","2018-11-21 11:40:08","2018-11-21 09:27:42",""
"45424000","My EC2 instance generates a keypair but unable to download into my downloads folder","I have launched ec2 instance successfully and created a new keypair. However, it is not in my downloads folder I only get to see the old keypair for the previous downloaded. I'm new to the ssh business side of things. it is driving me nuts.
any help is appreciated thanks in advance.
Omar 
","","40","<amazon-web-services><amazon-ec2><ssh><public-key-encryption>","0","","0","2017-07-31 19:36:48","","2","","","","","2017-07-31 19:36:48",""
"56475439","How to set Public and private key as a String RSA Encyption","Iam using RSA for encyption and decription for my data, It working fine. Now the primary and public keys are auto generated, But i want to use String as a Public and Private keys.
my code:
public class EncryptHelper {


    private KeyPairGenerator kpg;
    private KeyPair kp;
    private PublicKey publicKey;
    private PrivateKey privateKey;
    private byte [] encryptedBytes,decryptedBytes;
    private Cipher cipher,cipher1;
    private String encrypted,decrypted;


    public String RSAEncrypt (final String plain) throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException, IllegalBlockSizeException, BadPaddingException
    {
        kpg = KeyPairGenerator.getInstance(""RSA"");
        kpg.initialize(1024);
        kp = kpg.genKeyPair();
        publicKey = kp.getPublic();
        privateKey = kp.getPrivate();
        cipher = Cipher.getInstance(""RSA"");
        cipher.init(Cipher.ENCRYPT_MODE, publicKey);
        encryptedBytes = cipher.doFinal(plain.getBytes());
        //encrypted = new String(encryptedBytes);
        encrypted = bytesToString(encryptedBytes);
        System.out.println(""EEncrypted?????""+encrypted);
        return encrypted;

    }

    public String RSADecrypt (final String result) throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException, IllegalBlockSizeException, BadPaddingException
    {

        cipher1=Cipher.getInstance(""RSA"");
        cipher1.init(Cipher.DECRYPT_MODE, privateKey);
        decryptedBytes = cipher1.doFinal(stringToBytes(result));
        decrypted = new String(decryptedBytes);
        System.out.println(""DDecrypted?????""+decrypted);
        return decrypted;

    }

    private   String bytesToString(byte[] b) {
        byte[] b2 = new byte[b.length + 1];
        b2[0] = 1;
        System.arraycopy(b, 0, b2, 1, b.length);
        return new BigInteger(b2).toString(36);
    }

    private   byte[] stringToBytes(String s) {
        byte[] b2 = new BigInteger(s, 36).toByteArray();
        return Arrays.copyOfRange(b2, 1, b2.length);
    }

}

I want to know how to use String in Private and Public keys.
","","40","<java><android><encryption><rsa><public-key-encryption>","0","","0","2019-06-06 10:18:21","","1","","","","","2019-06-06 10:12:37",""
"57641471","Asymetric encryption algorithm which allows to use public and private key for both encryption and decryption","I have the following working asymetric encryption implementation:
private static RSAParameters privateKey;
private static RSAParameters publicKey;

private static void RSA()
{
  var rsa = new RSACryptoServiceProvider();
  privateKey = rsa.ExportParameters(true);
  publicKey = rsa.ExportParameters(false);

  byte[] originalMessage = GenerateRandomData();
  byte[] encryptedMessage = Using(publicKey).Encrypt(originalMessage, false);
  byte[] decryptedMessage = Using(privateKey).Decrypt(encryptedMessage, false);
  Debug.Assert(originalMessage.SequenceEqual(decryptedMessage));
}

private static RSACryptoServiceProvider Using(RSAParameters parameters)
{
  RSACryptoServiceProvider encryptor = new RSACryptoServiceProvider();
  encryptor.ImportParameters(parameters);
  return encryptor;
}

private static byte[] GenerateRandomData()
{
  Random rnd = new Random();
  byte[] originalData = new byte[10];
  rnd.NextBytes(originalData);
  return originalData;
}

I use this to encrypt data with the recipient's public key [Using(publicKey).Encrypt(originalData)] so that the receiver only can decrypt the data [Using(privateKey).Decrypt(encryptedData)].
Now I want to reuse asymetric encryption for the following use case: The recipient publishes data and everyone who knows the recipient's public key (which is basically everyone in the system, but nobody outside the system e.g. a protection against leaking readable data to the public) can read it. The publisher uses his private key to encrypt and his public key would be used to decrypt:
byte[] originalData = GenerateRandomData();
byte[] publishedData = Using(privateKey).Encrypt(originalData, false);
byte[] retrievedData = Using(publicKey).Decrypt(publishedData, false);
Debug.Assert(originalData.SequenceEqual(retrievedData));

However this yields a
System.Security.Cryptography.CryptographicException
  HResult=0x8009000D
  Message=Keyset does not exist.

I do not want to use a different public-private-key-pair for data publishing part, especially in this scenario it means making public a private key. It already sound awkward when typing...
EDIT: Is there an asymetric encryption contained in .NET framework which allows me to use both keys (public and private) in both directions where if one key is used for encryption only the other one can be used to decrypt?
","RSA signing is not the same as encrypting with the private key.
PKCS#1 v1.5 signature:

Hash the content with a chosen algorithm.
Create a DigestInfo value to represent the hash.
Apply padding to make a message almost, but not quite, the size of the modulus (details omitted here).
Apply the RSA primitive with the private key

Note that last step doesn’t say “encrypt”.
The RSA classes in .NET do the padding and such for you, so they expose Sign/Verify and Encrypt/Decrypt. You can’t use them for cross purposes, and you can’t use these classes for the RSA primitive (aka “raw RSA”).
","39","<c#><encryption><public-key-encryption><public-key>","0","1","1","2019-08-24 22:58:04","","5","","249988","","2019-08-24 22:58:04","2019-08-24 20:54:28",""
"37252906","Card encryption","I want to encrypt card number. I have tried using this code
string public_key = ""<RSAKeyValue><Modulus>"" + modulus + ""</Modulus><Exponent>"" + exponent + ""</Exponent></RSAKeyValue>"";

        RSACryptoServiceProvider cipher = null;
        cipher = new RSACryptoServiceProvider();
        cipher.FromXmlString(public_key);
        byte[] data = Encoding.UTF8.GetBytes(cardnumber);
        byte[] cipherText = cipher.Encrypt(data, false);
        return Convert.ToBase64String(cipherText);

Here is my modulus and exponent
{
  ""modulus"": ""24130287975021244042702223805688721202041521798556826651085672609155097623636349771918006235309701436638877260677191655500886975872679820355397440672922966114867081224266610192869324297514124544273216940817802300465149818663693299511097403105193694390420041695022375597863889602539348837984499566822859405785094021038882988619692110445776031330831112388738257159574572412058904373392173474311363017975036752132291687352767767085957596076340458420658040735725435536120045045686926201660857778184633632435163609220055250478625974096455522280609375267155256216043291335838965519403970406995613301546002859220118001163241"",
  ""exponent"": ""415029"",
  ""prefix"": ""00008099""
}
At this step it is throwing an exception.
cipher.FromXmlString(public_key);

invalid length for a base-64 char array or string. How can i get out of this exception?
","","39","<c#><public-key-encryption>","0","","0","2016-05-16 11:31:37","","2","","","","","2016-05-16 11:31:37",""
"56010252","Can't get KeyPairGenerator to generate random keys","I'm trying to generate public/private RSA key pairs like so on Android to use for signing:
val keyPairGenerator = KeyPairGenerator.getInstance(""RSA"", ""AndroidKeyStore"")

val certStart = Calendar.getInstance()
val certEnd = Calendar.getInstance()
certEnd.add(Calendar.YEAR, 30)

val spec = KeyPairGeneratorSpec.Builder(context)
     .setAlias(""MyKeyAlias"")
     .setKeySize(1024)
     .setSubject(X500Principal(""CN=CryptoIsHard""))
     .setSerialNumber(BigInteger.ONE)
     .setStartDate(certStart.time)
     .setEndDate(certEnd.time)
     .build()

 keyPairGenerator.initialize(spec, SecureRandom.getInstance(""SHA1PRNG""))
 keyPairGenerator.generateKeyPair()

This works fine, and if I get the public key and convert it to hex it looks something like this:
30819F300D06092A864886F70D010101050003818D00308...

The problem is that when I'm testing this using android instrumentation tests running on AVDs, the key is always the same, which I didn't expect because I'm using something called SecureRandom as a source (I would have thought that would use something like the current time to help generate entropy?). I've tried wiping the data on the AVDs, using different AVDs, changing the alias, I always get the same key, suggesting it's using a static seed (this doesn't make any sense to me - the name of the class is SecureRandom, and it doesn't seem to be at all secure?)
There are a couple of similar questions which don't help:

This one: The suggestion here is to not specify a provider when getting the KeyPairGenerator instance. This doesn't seem to make any difference.
This one: Apparently adding something called spongycastle as a provider solved the problem - I don't really want to add a 3rd party library to do this, especially one that looks like it's pretty ancient and no longer maintained

PS If I delete the key pair:
val keyStore: KeyStore = KeyStore.getInstance(""AndroidKeyStore"")
keyStore.load(null)
keyStore.deleteEntry(""MyKeyAlias"")

And generate another key, I get a new and different key. But this obviously doesn't help - the first key is always the same.
What am I doing wrong? I suspect the SecureRandom.getInstance(""SHA1PRNG"") but is crucial, but I don't know what to try. Thanks!
","","39","<android><rsa><sha1><public-key-encryption><android-keystore>","1","","0","2019-05-06 18:02:38","","4","","","","","2019-05-06 18:02:38",""
"46404641","SSH to other servers in cluster","I had an user account set up by my collegue weeks ago, to access our server(rhel). Now Im asked to copy my key so I can login to other servers in the cluster.
My first approach was to copy my /home/user/.ssh folder from the (already set-up) server to the new one. This one obviously fails, I found out with ls -a , that in my .ssh directory is only one file - known_hosts.
Im bit confused from my search results, is it necessary to create a new private-public key pair (I dont have any log about creating in before for the first server, so it was probably already setup for me), or is it sufficient to copy files from the first server and setup owners and permissions? 
","What you're probably looking for is file ~/.ssh/authorized_keys on the server. If you have your key set up, your public key should be stored there. If there is no such file, than you don't have your keys set up(do you have private keys files on your desktop?).
Please note that for usually ssh will require strict access permissions(rwx for user only) for your ~/.ssh directory and authorized_keys file.
Also you can use as many and as few keys as you wish, depending on your security needs. So using single key pair for multiple servers is possible.
","39","<ssh><public-key-encryption><rhel>","-1","0","1","2017-09-25 12:05:34","46404823","0","","","","","2017-09-25 11:55:45",""
"51308324","Java RSA encryption faild","I am trying to encrypt some data using a string public key 
and its failing with the error : java.security.spec.InvalidKeySpecException: java.security.InvalidKeyException: invalid key format
my code is:
public class Encryptor {
    public static void main(String[] args) {
        String pk = ""<here goes my public key>"";
        String data = encryptData(""Israel"", pk);
        System.out.println(data);
    }

    public static String encryptData(String rawData, String publicKey){
        String encryptedString = null;
        try {
            System.out.println(""Start of encryptData with data length:"" + rawData.length());
            System.out.println(""Public Key: "" + publicKey);
            X509EncodedKeySpec spec = new X509EncodedKeySpec(publicKey.getBytes());
            KeyFactory factory= KeyFactory.getInstance(""RSA"");
            Cipher cipher = Cipher.getInstance(""RSA/ECB/OAEPWITHSHA-256ANDMGF1PADDING"");
            RSAPublicKey pubKey = (RSAPublicKey)factory.generatePublic(spec);        
            cipher.init(Cipher.ENCRYPT_MODE, pubKey);
            byte[] encryptedByteData =  cipher.doFinal(rawData.getBytes(""UTF-8""));
            encryptedString = Base64.getEncoder().encodeToString(encryptedByteData);
            encryptedString = encryptedString.replaceAll(""\\s"", """");
        } catch (Throwable e) {
            System.out.println(""Exception in encryptData."" + e);
        }finally{
            System.out.println(""End of encryptData with result length:"" + (encryptedString==null?""null"":encryptedString.length()));
        }
        return encryptedString;  
    }     
}

Can some one help with this?
","","39","<java><security><encryption><rsa><public-key-encryption>","0","","0","2018-07-12 14:32:23","","3","","","","","2018-07-12 14:32:23",""
"53769371","Libsodium crypto box seal android implementation","I am trying to use Sodium.crypto_box_seal from Libsodium library to encrypt video (approximately 100mb) files that will decrypted server side. I however have no idea how to use it on android. Anyone who can point me to the right direction on how to do this?
","","38","<android><public-key-encryption><libsodium>","0","","0","2018-12-13 20:10:40","","0","","","","","2018-12-13 20:10:40",""
"50799837","Pass XML string from c# console app to 3rd party API with AES encryption, open SSL TCP Socket and get response back and create parser to encrypt XML","I am trying to pass XML message from my C# console application to 3rd party API with using AES (Advance Encryption Security) Encryption encoding and get response back with authentication with help of key and IV and then do decryption and decode that string and then need to create parser that encrypts each section of the message, so that my console application and do back end forth with that 3rd party API.
I have written my code below, but I do not know that which flow i can write the code and also i am confused that how can i open SSL TCP socket and send request message to API!
I have written some code here, but I could use some help.
Thanks!
                using System;
                using System.Collections.Generic;
                using System.Linq;
                using System.Net;
                using System.Net.Http;
               using System.Text;
                using System.Threading.Tasks;
              using System.Security.Cryptography;

           namespace ConsoleApp
               {
              public class Program
                {   
                public static void Main()
                  {
                 try
                  {
                   const string xmlString =
           @""< Message >
                   < Request >
                    < Detail >
                  < TranType > Credit </ TranType >
                      < TranAction > Sale </ TranAction >
                      < Amount > 15.67 </ Amount >
                      < CurrencyCode > 840 </ CurrencyCode >
                    </ Detail >
                    < IndustryData >
                      < Industry > CardNotPresent </ Industry >
                      < Eci > 7 </ Eci >
                      < MarketSpecificId > B </ MarketSpecificId >
                    </ IndustryData >
                    < Account >
                      < Pan > 4111111111111111 </ Pan >
                      < Expiration > 1117 </ Expiration >
                      < Postal > 197222234 </ Postal >
                      < Address > 123 Fake Street</Address>
                    </Account>
                    <Authentication>
                    <Client>ABC</Client>
                    <Source>xyz</Source>
                    </Authentication>
                  </Request>
            </Message>"";

            // Create a new instance of the Aes class. This generates a new key and initialization vector (IV). 
            using (Aes myAes = Aes.Create())
            {

                // Encrypt the string to an array of bytes.
                var algoKey = ConvertHexStringToByteArray(""8FDFC56F3F87C9BD53A58C34BEBE27CABC4944BF26A711E5539F03742033F270"");
                var algoIv = ConvertHexStringToByteArray(""B751B5FCAC067336D2E7CEEBF9CF590D"");

                byte[] myAes.Key = algoKey;
                byte[] myAes.IV = algoIv;

                byte[] encrypted = EncryptStringToBytes_Aes(xmlString, myAes.Key, myAes.IV);
                string base64 = Convert.ToBase64String(encrypted);

                 XDocument message = new XDocument(
                        new XElement(""Message"",
                        new XElement(""Request"", base64),
                        new XElement(""Authentication"",
                        new XElement(""Client"", ""ABC""),
                        new XElement(""Source"", ""XYZ"")))
            );
        //transmit to api


        var t = new Task(HTTPS_POST);
        t.Start();
        t.Start();
        Console.Write(message);
        Console.ReadKey();

                // Decrypt the bytes to a string.
                string roundtrip = DecryptStringFromBytes_Aes(encrypted, myAes.Key, myAes.IV);

                //Display the original data and the decrypted data.
                Console.WriteLine(""Round Trip: {0}"", roundtrip);
                console.ReadLine();
            }

        }
        catch (Exception e)
        {
            Console.WriteLine(""Error: {0}"", e.Message);
        }
    }

    private static async void HTTPS_POST()
    {
        const string apiUrl = ""https://10.7.6.70"";

        var handler = new HttpClientHandler
        {
            Proxy = new WebProxy(""http://127.0.0.1:8888""),
            UseProxy = false
        };

        // force tls 1.2
        ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;
        ServicePointManager.ServerCertificateValidationCallback = ((send, certificate, chain, sslPolicyErrors) => true);


        Console.WriteLine(""Posting a credit transaction to: "" + apiUrl);

        var client = new HttpClient(handler);
        var response = await client.PostAsync(apiUrl, new StringContent(message));

        var content = response.Content;

        Console.WriteLine(""Response Status Code: "" + (int)response.StatusCode);

        var result = await content.ReadAsStringAsync();

        if (result.Length > 50)
        {
            Console.WriteLine(""Response: "" + result);

            // TODO Decryption logic
        }
    }


    private static byte[] EncryptStringToBytes_Aes(string plainText, byte[] Key, byte[] IV)
    {
        // Check arguments.
        if (plainText == null || plainText.Length <= 0)
            throw new ArgumentNullException(""plainText"");
        if (Key == null || Key.Length <= 0)
            throw new ArgumentNullException(""Key"");
        if (IV == null || IV.Length <= 0)
            throw new ArgumentNullException(""IV"");
        byte[] encrypted;
        // Create an Aes object with the specified key and IV.
        using (Aes aesAlg = Aes.Create())
        {
            aesAlg.Key = Key;
            aesAlg.IV = IV;


            // Create a decrytor to perform the stream transform.
            ICryptoTransform encryptor = aesAlg.CreateEncryptor(aesAlg.Key, aesAlg.IV);

            // Create the streams used for encryption.
            using (MemoryStream msEncrypt = new MemoryStream())
            {
                using (CryptoStream csEncrypt = new CryptoStream(msEncrypt, encryptor, CryptoStreamMode.Write))
                {
                    using (StreamWriter swEncrypt = new StreamWriter(csEncrypt))
                    {

                        //Write all data to the stream.
                        swEncrypt.Write(plainText);
                    }
                    encrypted = msEncrypt.ToArray();
                }
            }
        }


        // Return the encrypted bytes from the memory stream.
        return encrypted;

    }

    private static byte[] ConvertHexStringToByteArray(string sHex)
    {
        byte[] yKey;

        try
        {
            // set byte length
            yKey = new byte[sHex.Length / 2];

            for (int i = 0, j = 0; j < yKey.Length; i += 2, j++)
            {
                yKey[j] = Convert.ToByte(sHex.Substring(i, 2), 16);
            }

        }
        catch (Exception e)
        {
            throw new Exception(e.Message, e);
        }

        return yKey;
    }

}

private static string DecryptStringFromBytes_Aes(byte[] cipherText, byte[] Key, byte[] IV)
    {
        // Check arguments.
        if (cipherText == null || cipherText.Length <= 0)
            throw new ArgumentNullException(""cipherText"");
        if (Key == null || Key.Length <= 0)
            throw new ArgumentNullException(""Key"");
        if (IV == null || IV.Length <= 0)
            throw new ArgumentNullException(""IV"");

        // Declare the string used to hold
        // the decrypted text.
        string roundtrip = null;

        // Create an Aes object
        // with the specified key and IV.
        using (Aes aesAlg = Aes.Create())
        {
            aesAlg.Key = Key;
            aesAlg.IV = IV;

            // Create a decrytor to perform the stream transform.
            ICryptoTransform decryptor = aesAlg.CreateDecryptor(aesAlg.Key, aesAlg.IV);

            // Create the streams used for decryption.
            using (MemoryStream msDecrypt = new MemoryStream(cipherText))
            {
                using (CryptoStream csDecrypt = new CryptoStream(msDecrypt, decryptor, CryptoStreamMode.Read))
                {
                    using (StreamReader srDecrypt = new StreamReader(csDecrypt))
                    {

                        // Read the decrypted bytes from the decrypting stream
                        // and place them in a string.
                        roundtrip = srDecrypt.ReadToEnd();
                    }
                }
            }
        }

        return roundtrip;
    }
  }

","","38","<c#><xml><xml-parsing><openssl><public-key-encryption>","0","","0","2018-06-11 14:31:57","","2","","475329","","2018-06-11 14:31:57","2018-06-11 14:14:27",""
"40138348","How does sending my public key to GitHub allow them to verify who I am?","When connecting to GitHub using HTTPS they will obviously want to verify me by asking for my password.  I enter my password, it checks out, and then they allow me to write to my repo.  
With SSH keys setup, I create a public_key and a private_key pair.  The way I understand it, the public_key I use to encrypt and the private_key I used to decrypt.  
I then keep the private_key on my machine and share it with no one.  I then go to GitHub and paste in my public_key.  
How do they then authorize me?  Do they use my public_key to encrypt a message and then wait for me to send back the decrypted messsage?  If they get back the message decrypted properly, then they know its me?
","
Do they use my public_key to encrypt a message and then wait for me to send back the decrypted message?

Rather the other way around. You (your local SSH client) encrypt something using your private key. And if they are able to decrypt it using the public key you gave them, it must be you.
Obviously this is a very simplified explanation.
For details, see 

How does asymmetric encryption work?
How does ssh public key authentication work?

","38","<github><public-key-encryption><ssh-keys>","1","2","1","2016-10-22 12:27:08","40139260","0","2","1591669","","2016-10-22 12:27:08","2016-10-19 17:51:27",""
"37783936","Dual Signature - Information Security","I have written simple java class for creating dual signature and verify it by merchant side.When I tried to run the java class I am getting an exception on a point of decryption.
javax.crypto.IllegalBlockSizeException: Data must not be longer than 256 bytes
    at com.sun.crypto.provider.RSACipher.doFinal(RSACipher.java:344)
    at com.sun.crypto.provider.RSACipher.engineDoFinal(RSACipher.java:389)
    at javax.crypto.Cipher.doFinal(Cipher.java:2165)
    at com.ucsc.raji.DualSignatureSample.convert(DualSignatureSample.java:43)
    at com.ucsc.raji.DualSignatureSample.decrypt(DualSignatureSample.java:31)
    at com.ucsc.raji.DualSignatureSample.verifyDualByMerchant(DualSignatureSample.java:128)
    at com.ucsc.raji.DualSignatureSample.main(DualSignatureSample.java:175)
java.lang.NullPointerException
    at java.lang.String.<init>(String.java:566)
    at com.ucsc.raji.DualSignatureSample.verifyDualByMerchant(DualSignatureSample.java:129)
    at com.ucsc.raji.DualSignatureSample.main(DualSignatureSample.java:175)

Please note that I have created a key store using Java key tool by the command-line 
Java key tool basic commands 
Here below java code 
package com.ucsc.raji;

import java.io.File;
import java.io.FileInputStream;
import java.security.Key;
import java.security.KeyPair;
import java.security.KeyStore;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.cert.Certificate;
import java.util.Base64;

import javax.crypto.Cipher;
import javax.crypto.NoSuchPaddingException;

public class DualSignatureSample {

    public static byte[] encrypt(String original, Key privateKey) {
        if (original != null && privateKey != null) {
            byte[] bs = original.getBytes();
            byte[] encData = convert(bs, privateKey, Cipher.ENCRYPT_MODE);
            return encData;
        }
        return null;
    }

    public static byte[] decrypt(byte[] encrypted, Key publicKey) {
        if (encrypted != null && publicKey != null) {
            byte[] decData = convert(encrypted, publicKey, Cipher.DECRYPT_MODE);
            return decData;
        }
        return null;
    }

    private static byte[] convert(byte[] data, Key key, int mode) {
        try {
            //Cipher cipher = Cipher.getInstance(""RSA"");
            Cipher cipher = Cipher.getInstance(""RSA/ECB/PKCS1Padding"");

            cipher.init(mode, key);
            byte[] newData = cipher.doFinal(data);
            byte[] datax = org.apache.commons.codec.binary.Base64.encodeBase64(newData);
            return datax;
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }

    public static KeyPair getPrivateKey() throws Exception {
        FileInputStream is = new FileInputStream(""C:"" + File.separator
                + ""Users"" + File.separator + ""rsatkunam"" + File.separator
                + ""Documents"" + File.separator + ""Rajeenthini"" + File.separator
                + ""MCS"" + File.separator + ""keystore.jks"");

        KeyStore keystore = KeyStore.getInstance(KeyStore.getDefaultType());
        keystore.load(is, ""password"".toCharArray());
        PublicKey publicKey = null;
        String alias = ""rajeenthini"";

        Key key = keystore.getKey(alias, ""2015mcs070"".toCharArray());
        if (key instanceof PrivateKey) {
            // Get certificate of public key
            Certificate cert = keystore.getCertificate(alias);

            // Get public key
            publicKey = cert.getPublicKey();

            // Return a key pair

        }
        return new KeyPair(publicKey, (PrivateKey) key);
    }

    public static PublicKey getPublicKey() throws Exception {
        FileInputStream is = new FileInputStream(""C:"" + File.separator
                + ""Users"" + File.separator + ""rsatkunam"" + File.separator
                + ""Documents"" + File.separator + ""Rajeenthini"" + File.separator
                + ""MCS"" + File.separator + ""keystore.jks"");

        KeyStore keystore = KeyStore.getInstance(KeyStore.getDefaultType());
        keystore.load(is, ""password"".toCharArray());
        PublicKey publicKey = null;
        String alias = ""rajeenthini"";

        Key key = keystore.getKey(alias, ""password"".toCharArray());
        // Get certificate of public key
        Certificate cert = keystore.getCertificate(alias);
        // Get public key
        publicKey = cert.getPublicKey();
        return publicKey;
    }

    public static String getSha1(String input) throws NoSuchAlgorithmException {
        MessageDigest mDigest = MessageDigest.getInstance(""SHA1"");
        byte[] result = mDigest.digest(input.getBytes());
        StringBuffer sb = new StringBuffer();
        for (int i = 0; i < result.length; i++) {
            sb.append(Integer.toString((result[i] & 0xff) + 0x100, 16).substring(1));
        }

        return sb.toString();
    }

    public static byte[] fromHexString(String s) {
        int len = s.length();
        byte[] data = new byte[len / 2];
        for (int i = 0; i < len; i += 2) {
            data[i / 2] = (byte) ((Character.digit(s.charAt(i), 16) << 4)
                                 + Character.digit(s.charAt(i+1), 16));
        }
        return data;
    }
    public static boolean verifyDualByMerchant(String ds, String oi, String hpi, PublicKey pubKey) throws NoSuchAlgorithmException{
        boolean isVerified = false;
        // String hOI = hash(oi);
        // String hoihpi = hoi + hpi;

        // String originalHash = decrypt(ds, pubKey);

        // if (hoihpi.equals(originalHash)) {
        //  isVerified = true;
        // }
        System.out.println(ds.length());

        byte[] ostr = decrypt(ds.getBytes(), pubKey);
        System.out.println(new String(ostr).toString());

        String xtr = new String(ostr);
        System.out.println(xtr);

        String x = getSha1(oi);
        String cx = x + hpi;

        String cxx = getSha1(cx);
        System.out.println(cxx);


        return isVerified;
    }
    public static void main(String args[]) {
        String OI = ""One Laptop Computer"";
        String PI = ""4465-5342-2344-1009"";

        try {
            /*System.out.println(""---------1""+getPrivateKey().getPrivate());
            byte[] cipherTxt = encrypt(OI, getPrivateKey().getPrivate());
            System.out.println(""---------2""+cipherTxt.toString());

            System.out.println(""---------3""+getPublicKey());
            byte[] plainTxt = decrypt(cipherTxt, getPublicKey());
            String s = new String(plainTxt);
            System.out.println(""---------4""+s);*/

            String hashOI = getSha1(OI);
            System.out.println(""---------""+hashOI);

            String hashPI = getSha1(PI);
            System.out.println(""---------""+hashPI);


            String concatOIPI = hashOI + hashPI;
            System.out.println(""---------""+concatOIPI);

            String hashconcatOIPI = getSha1(concatOIPI);
            System.out.println(""---------""+hashconcatOIPI);


            byte[] dualSignature = encrypt(hashconcatOIPI, getPrivateKey().getPrivate());
            String s = new String(dualSignature);   

            PublicKey pubKey = getPublicKey();
            verifyDualByMerchant(s, OI, hashPI, pubKey);

        } catch (Exception e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }

    }

}

I am getting public key and private key fro key store file saved in local folder on my PC.
Can anyone help me to resolve this exception?
","","37","<java><encryption><public-key-encryption><keytool>","0","","0","2016-06-13 07:29:27","","3","2","3788176","","2016-06-13 07:29:27","2016-06-13 07:26:38","2016-06-13 07:28:35"
"57075597","how to set public key parameter in makeSOCKcluster function?","I need to set up a SNOW cluster in Windows env. 
I set up OpenSSH server at slave node and OpenSSH client at master. Added client path to master PATH var.
system(""ssh... command from master R session ran well. 
But makeSOCKcluster cannot run because i don`t know, how to set -i parameter for ssh client in R.
system(""ssh -i C:\\Users\\mrodkin\\.ssh\\mrodkin_cf.pem mrodkin@windocker.eftr.local dir"")

Volume in drive C has no label.
 Volume Serial Number is 1CFE-79CF
...
library(""snow"")
winOptions <-
    list(host='windocker.eftr.local',
         port = 22,
         user='mrodkin',
#         rscript=""c:\Program Files\R\R-3.5.3patched\bin\x64"",
#         snowlib=""c:\Program Files\R\R-3.5.3patched\library\snow"")
         rscript=""c:/Program Files/R/R-3.5.3patched/bin/x64"",
         snowlib=""c:/Program Files/R/R-3.5.3patched/library/snow"")
cl <- makeSOCKcluster(winOptions )#, manual=TRUE
showConnections()
stopCluster(cl)


Error: '\m' is an unrecognized escape in character string starting """"ssh -l me -i C:\Users\m"".  


socketConnection(port = port, server = TRUE, blocking = TRUE, open = ""a+b"").  
newSOCKnode(names[[i]], options = options, rank = i)
makeSOCKcluster(winOptions)

Definitely, R doesn`t know about a public key and try to use login/password
","","37","<r><ssh><public-key-encryption><snow>","0","","0","2019-07-17 13:47:44","","0","","6550949","","2019-07-17 13:47:44","2019-07-17 12:14:48",""
"55106613","Create public key Certificate from public key only","As I understand Certificates are signed public key of a user by CA. 
I don't have CSR from user, I only have his public Key, and I want to certify it.
How can i certify this public key with OpenSSL (command line) or .net (with C# programming)?
EDIT: To be more exact I need to sign users public key, with CA private key, then build X509 text file and convert it somehow to .PEM or .DER file
","You can verify that the certificate is correctly signed with openssl but it depends on the format of the certificate.  If I ""assume"" the certificate is in PEM format.
e.g.
openssl x509 -in cert.pem -noout -text

will dump information stored in the certificate.  If anythning is incorrect it will ""error"" out.
You can check if the certificate is expired with:
openssl x509 -enddate -checkend 0 -noout -in cert.pem
This will display the end date (in utc) and if the certificate has expired.
You can also check that the certificate ""chain"" is correct using the verify openssl command.
e.g.
openssl verify cert.pem

although you may need to include intermediate certificates and a calist if required.
e.g. This is an example of veriying a GoDady signed certificate chain:
openssl verify -CAfile .\gdroot-g2.crt -untrusted .\gdig2.crt.pem -show_chain .\server.pem
.\server.pem: OK
Chain:
depth=0: OU = Domain Control Validated, CN = *.XXXX.XXX (untrusted)
depth=1: C = US, ST = Arizona, L = Scottsdale, O = ""GoDaddy.com, Inc."", OU = http://certs.godaddy.com/repository/, CN = Go Daddy Secure Certificate Authority - G2 (untrusted)
depth=2: C = US, ST = Arizona, L = Scottsdale, O = ""GoDaddy.com, Inc."", CN = Go Daddy Root Certificate Authority - G2

Most of this is done for you when you establish a SslStream connection.
As for trying to do all this is code (e.g. C#) you will have to be a lot more specific about what you want to do.  If you just want to know if C# can ""load"" a certificate, you can use the X509Certificate2Collection Import method to import a PFX formatted certificate chain.
Once imported you can pull out any attributes you wish to look at.
You can verify the chain using the X509Certificate2 Verify mathod.
","37","<.net><openssl><certificate><public-key-encryption>","0","0","1","2019-03-11 19:33:07","","0","","11131301","","2019-03-11 19:33:07","2019-03-11 16:46:21",""
"44063909","How does certificate authority initially authenticate public keys?","So when initially a client wishes to register his public key to a CA, he will need the public key of the CA, in order to send his own public key to the CA for registration. How does the client get the key?
And eventually when the client does manage to send his public key for registration, can a Man in the Middle attack not masquarade himself as the client and send his own public key instead of the clients?
I have a basic idea of how CAs work but do not understand how the initial registration of public keys can happen without any sniffing or spoofing.
","A Certification (or Certificate) Signing Request is signed by the requestor's private key. This prevents MITM tampering, but not MITM tamper + replace public key + re-sign.
The mitigating factor is that the request is usually then transmitted over TLS, providing tamper-proof delivery of the payload (and gives the sender a way of validating that the CA is the expected CA).
The TLS server auth certificate will eventually chain up to a certificate which was built into the OS / browser / other-client-trust-list.
","36","<authentication><encryption><public-key-encryption><client-certificates><digital-certificate>","0","1","1","2017-05-19 13:35:05","","2","","","","","2017-05-19 07:23:21",""
"30773137","Original Base64 value is edited but still it is giving same normal string","I am encrypting the plain text using RSA and converting that value to base64 string.But while decrypting the I altered the base64 string and try to decrypt it...it given me same original text return.
Is there any thing wrong ?
Original Plain Text :007189562312
Output Base64 string : VfZN7WXwVz7Rrxb+W08u9F0N9Yt52DUnfCOrF6eltK3tzUUYw7KgvY3C8c+XER5nk6yfQFI9qChAes/czWOjKzIRMUTgGPjPPBfAwUjCv4Acodg7F0+EwPkdnV7Pu7jmQtp4IMgGaNpZpt33DgV5AJYj3Uze0A3w7wSQ6/tIgL4=
Altered Base64 String : VfZN7WXwVz7Rrxb+W08u9F0N9Yt52DUnfCOrF6eltK3tzUUYw7KgvY3C8c+XER5nk6yfQFI9qChAes/czWOjKzIRMUTgGPjPPBfAwUjCv4Acodg7F0+EwPkdnV7Pu7jmQtp4IMgGaNpZpt33DgV5AJYj3Uze0A3w7wSQ6/tIgL4=55
Please explain. Thank you.
","I'm assuming you're asking whether the altered ciphertext should have thrown an error when decrypting. It looks like the altered string only adds two characters to the end and is otherwise the same string.
Your Base 64 library probably makes some reasonable assumptions when parsing Base 64 data. Base 64 works by encoding 3 bytes into 4 characters. If at the end the data length is not a multiple of 3 it must be padded. That is signalized by the = at the end of the encoded string. 
This also means that during parsing, the library knows that padding characters are at the end and stops parsing there. If the alteration appeared at the end of the string then the encoded ciphertext didn't effectively change.
","36","<encryption><base64><public-key-encryption>","0","1","1","2015-06-11 10:49:10","","0","","","","","2015-06-11 06:23:14",""
"22418300","Logging in linux server with ssh keys","I have two servers A and B.
Is it possible to do password less logins to B without chnaging anything on B.
I mean i want to configure A with whatever setting so that i can login to B like copying private/public keys etc.
Currently i am adding A public key to B 's authorized_keys.
Is there any other way of doing without editing file on B
","
Currently i am adding A public key to B 's authorized_keys

This is problematic because anyone - friend of foe - who has access to A's private key, implicitly has access to B.
What I suggest involves a simple setup with a single key pair

You have your own key pair
You copy your public key - and only that - to every server you want to access
On your box you add this to .ssh/config:
Host A
  ForwardAgent yes

You run ssh-add

At this point you can connect to A. Big woop, so what ? Well, if from A you connect to B, it will just work. This is very secure and there is a single key you have to worry about: your own.
Read more about SSH agent forwarding at github.
","36","<linux><ssh><key><public-key-encryption><private-key>","-1","1","2","2014-03-15 02:35:25","22418375","0","","","","","2014-03-15 01:05:39",""
"22418300","Logging in linux server with ssh keys","I have two servers A and B.
Is it possible to do password less logins to B without chnaging anything on B.
I mean i want to configure A with whatever setting so that i can login to B like copying private/public keys etc.
Currently i am adding A public key to B 's authorized_keys.
Is there any other way of doing without editing file on B
","On A & B you firstly must already have generated your pubkeys with (assume you already have):
sudo ssh-keygen

Then use the command from machine A:
ssh-copy-id user@machineB -p <port #>

If you have generated a password for host B's private key you will have to enter that once and machine A's id_pub.rsa contents will be copied into machine B's authorized_keys. 
","36","<linux><ssh><key><public-key-encryption><private-key>","-1","0","2","2014-03-15 02:35:25","22418375","0","","","","","2014-03-15 01:05:39",""
"58687932","How to create public/private key encryption- node js","Hi I'd like to generate a public/private keypair in node-js, and use the public key to encrypt message and the private key to decrypt the message.
I need to encode user's secretKey because I use them for individually validation. And then I should decode it. I guess I can use public/private key encryption for this. I know window.crypto.subtle.generateKey and here is a lot of examples about encryption algorithms https://github.com/diafygi/webcrypto-examples/#aes-gcm . 
But I guess for using them I need to import window-crypto. And I'm confused about which one I should use and how.
Is there any source, an example or a suggestion for me to do this using node-js?
","There must be different approaches and plugins available. I did quick exploration and jsencrypt can be used for your case.
git hub link - https://github.com/travist/jsencrypt
Also, you can refer to https://medium.com/sharenowtech/high-speed-public-key-cryptography-in-javascript-part-1-3eefb6f91f77
","36","<javascript><node.js><encryption><public-key-encryption>","0","1","1","2019-11-04 06:02:16","58687980","0","","2541560","","2019-11-04 05:57:32","2019-11-04 05:56:48",""
"50292250","Where to save client's public key and retrieve to encrypt data","I have a public key of customer that I need to use to encrypt credentials and send to the customer to obtain an auth token that I will be using for all further communication with the customer services.
For testing purpose, I saved the public key into a file and I am able to successfully obtain the auth token.
Now, the question is, where do I need to store this key safely. Options that I can think of are web.config as it is not browsable, or keep it in a file. Both seems to be unsafe.
If I keep it in a file, can I save it into windows trusted store? If yes, how can I save it and since in the trusted store, I will have multiple such keys, how I will retrieve this particular key to encrypt the credentials next time when I need to encrypt.
I am using windows machine for production server and .NET to encrypt, just in case it makes difference.
","I think you can encrypt this certificate with another rsa key pair. Save key and encrypted data in different platform. For example save encrypted data in db and save rsa key in file system in protected folder. Protected folder can be user directory which has application user. Encrypt certificate out of the platform with separate tool. Don't save your rsa private key in application system.
","36","<rsa><keystore><public-key-encryption><public-key><encryption-asymmetric>","0","0","1","2018-05-13 14:37:14","","3","","","","","2018-05-11 12:20:28",""
"36375290","My simple RSA encryptor/decrypted wont work with values over 3?","So I have a problem, I just learned this morning how to make an RSA encryptor/decrypted with the following variables:
p = 5, 
q = 11, 
n = 55, 
PHI = 40, 
e = 11, 
d = 11

And when I enter it into this (BTW this is JAVA):
public void draw() {

    int p = 5, q = 11, n = 55, PHI = 40, e = 11, d = 11;
    Scanner in = new Scanner(System.in);
    message = in.nextInt();

    println(' ');
    ecripted_message = Math.pow(message, e);// m^3
    ecripted_message %= n;

    println(""This is the ecripted message "" + ecripted_message);

    println(' ');
    message = Math.pow(ecripted_message, d);
    message %= n;

    println(' ');
    println(""This is the origanal message "" + message);
}

but when I enter anything three and above I get this in my console:
1

This is the ecripted message 1.0

This is the origanal message 1.0

2

This is the ecripted message 13.0

This is the origanal message 2.0

3

This is the ecripted message 47.0

This is the origanal message 24.0

Keep i mind that I am a very un-expiranced coder and I am relatively new. 
","","35","<java><encryption><rsa><public-key-encryption>","0","","0","2016-04-02 15:41:16","","5","","","","","2016-04-02 15:41:16",""
"54276701","Extra data manipulation with end to end encryption","Would it be possible to store some data as tables in a system, where users talk with each other through a server using end to end encryption. Figuratively, let's say end points A and B talk to each other through a server using end to end encryption. This basically means all of the messages flowing from A to B or vice versa are only decryptable between these two end points. So I want to create a schema, say a webserver, where I would create a table as follows:
From   To         Content               HasMessageBeenSend
 A      B    encrypted text                    0
 B      A    some other encrypted text         1

Would it be possible to create such a schema above in the server? For example, A writes into database this encrypted text as well as the receiver the sender sides, but because messages are encrypted, except of this content area, all other information is public and can be readable by the server.
","","35","<encryption><public-key-encryption><end-to-end>","0","","0","2019-01-20 13:04:01","","3","","3001761","","2019-01-20 13:04:01","2019-01-20 13:00:09",""
"53229641","How can I tell if given data is encrypted with a public key","I'm going to re-phrase my question completely so it makes more general sense (and correct my blunder with AES/RSA).
Alice has a large block of data to send to Bob via a local mailbox that isn't secure.  To keep her data from prying eyes, she does this:

She generates a random 256-bit key
She uses AES-256 encryption to encrypt the data using the key
She uses Bob's public key to encrypt the key she's used
She puts the encrypted data and the encrypted key in the mailbox addressed to Bob

Mike the mailman picks up the mail from the mailbox.  However, he doesn't want to lug the data all the way across the internet to Bob's place if bob isn't going to be able to decrypt it.
The question is, how can Mike ascertain whether the key has actually been encrypted using Bob's public key?
In my application I need to transport sensitive data to a data centre.  To achieve this, I have an upload process that accepts files (that have already been AES-encrypted with a key, then the key is encrypted with the recipient's public key) and sends them to the data centre.  The corresponding private key is held at the data centre and used to decrypt the files on receipt.  This is currently in the design stage so there is some flexibility on the public/private key technology to be used but it's likely to be a C# application that's doing the work.
I would like to protect against uploading files that have NOT been encrypted using the public key (because I may waste significant bandwidth and the receiving application at the datacentre will fail to decrypt them).
So, what I want to know is how can I tell at the sending end whether a file has been encrypted using a given public key?
In a nutshell, I have an encrypted file and a public key.  Has the file been encrypted with that key?
Thanks in advance etc.!
","","34","<encryption><public-key-encryption><private-key><public-key>","0","","0","2018-12-20 08:49:23","","3","0","3208573","","2018-12-20 08:49:23","2018-11-09 16:27:35",""
"53189951","HTTPS communication security","I have an ambiguity about HTTPS communication and my question had may be asked but I didn't find and clear response:
In HTTPS communication, the server is sharing it's public key with ""everyone""
If this key is shared with public, than doesn't anyone can decrypt the communication from the server?
","No. You use the public key to encrypt the data and it's not possible to decrypt it by using the same public key.
The only way to decrypt the data is by using the correspondent private key.
This wiki article explains the core.
","34","<encryption><https><public-key-encryption>","0","0","1","2018-11-07 13:14:54","","1","","","","","2018-11-07 12:59:50",""
"44457946","How exactly SSL works with asymmetric algorithm?","As I was reading about this and got confused about the keys while trying to understand using the following scenario.
Let say:
-A server S1
-And 3 Clients, C1, C2, C3
Let say C1 want to communicate with server.
How server will authenticate C1 ?
Similarly all the the clients want to communicate with the server
Will there be only one public key for all the clients to encrypt the data ?
How a client possess a private key ?
Is it sent by the server ? or self generated ?
","I am not very sure whether the OP is asking about SSL in general or the client authentication in SSL. (Note that @zaph is wrong. Client authentication is an optional part of TLS. [2])
In client authentication, client generates its own public and private key pair locally. The client then sends the CSR to a certificate authority to obtain a certificate. This certificate is sent to the server when the server requests it. The server verifies the certificate in the usual way (similar as how browsers verify server certificates). If the client cert is valid, the server can use the identification info present in the cert to determine whether to allow the client or not.
[2] https://tools.ietf.org/html/rfc5246#section-7.4.6
","33","<authentication><ssl><https><client-server><public-key-encryption>","0","1","2","2017-06-09 14:10:56","","1","1","","","","2017-06-09 12:31:38",""
"44457946","How exactly SSL works with asymmetric algorithm?","As I was reading about this and got confused about the keys while trying to understand using the following scenario.
Let say:
-A server S1
-And 3 Clients, C1, C2, C3
Let say C1 want to communicate with server.
How server will authenticate C1 ?
Similarly all the the clients want to communicate with the server
Will there be only one public key for all the clients to encrypt the data ?
How a client possess a private key ?
Is it sent by the server ? or self generated ?
","
How server will authenticate C1 ?

C1 will authenticate the server with the help of the servers certificate and by using public key cryptography based on the public key contained in the servers certificate in the CA certificates which signed directly or indirectly the servers certificate.

Will there be only one public key for all the clients to encrypt the data ?

The data will not be encrypted with the public key. Instead each of the client is doing a key exchange with the server which will results in keys for symmetric encryption (and HMAC) specific to the connection between client and server.
For way more details I recommend that you study How does SSL/TLS work? over at security.stackexchange.com which is also the more suitable site to ask such question.
","33","<authentication><ssl><https><client-server><public-key-encryption>","0","1","2","2017-06-09 14:10:56","","1","1","","","","2017-06-09 12:31:38",""
"57859621","Secure Communication Between Tomcat Servers","Note: this question was sort of asked here, but not answered.
I need to communicate securely between two Tomcat servers running in two different environments. I have control of both servers.
I would like to do this through a simple REST call from Server-B to Server-A.
On the server I am communicating to, Server-A, I can easily set up HTTPS with a self-signed certificate. If I import this certificate into the Java Keystore on Server-B, I can make a trusted HTTPS Rest call from my Java code on Server-B.
Good instructions for doing this can be found here:
https://blog.10pines.com/2017/09/25/how-to-communicate-via-https-between-two-tomcat-servers-using-a-self-signed-certificate/ 
I would also like to add a confirmation that the Rest call to Server-A is certainly coming from Server-B and the message has integrity.
My plan is to generate a self-signed certificate on Server-B and  import this certificate into the Java Keystore on Server-A. Then for any REST call from Server-B I will first generate an SHA-512 hash of the message and sign the hash with the private key associated with the Server-B certificate. When Server-A receives the message, the SHA-512 hash will be recalculated and checked for accuracy of the hash (no message tampering). I will then check the signature of the Hash against the public key of the certificate from Server-B.
For a little bit of extra paranoia I may encrypt the REST message with the public key of the certificate from Server-A; for short messages this should be fine (no need for Symmetric encryption).
Does this seem like a good plan? Does Tomcat have a simpler mechanism for doing this?
The Java Messaging API seems a little ""heavy"" for this use case.
","","33","<java><tomcat><encryption><public-key-encryption><sha>","2","","0","2019-09-09 18:54:35","","1","","3001761","","2019-09-09 18:54:35","2019-09-09 18:44:03",""
"16857075","Can a user apply for another public key based on its pseudonym and use the obtained public key in DH key exchange?","I have a scenario in which there are three parties: one user,one content provider and a proxy. The data is to be transferred between user and content provider anonymously though the proxy.  I have two questions.
1. If the user has a pseudonym based on its public key, can it apply for another public key?
2. For data confidentiality between user and content provider such that proxy cannot read the transferred contents, Diffie-Hellman key exchange can be used. But can I use the public key obtained in part 1 to get the encrypted data between user and content provider?
Best Regards
Alexandera
","Diffie-Hellman is a method for establishing a shared secret between two entities.
So, that's a part of secret key cryptography.
No number of public keys, unless you manage to generate the current shared secret, will get you the information shared between two parties using secret key crypto.  A public key should be matched to, and used with, a private key.  That's public key cryptography.
For part 1, I guess I don't understand what you want to do with the public key other than generate a pseudonym with it, I don't see why not.
Maybe I'm misunderstanding your question but I believe the answer for part 2 is no.
","33","<public-key-encryption><diffie-hellman>","0","0","1","2013-05-31 12:30:13","","0","","","","","2013-05-31 12:17:42",""
"20332424","What does the public key encryption provide?","This is about a test I did, but I'm asking because I'd like to understand these concepts, I am a little confused about them.
Maria encrypts her document with her private key.
Maria sends the document to John
John decrypt the received document using Maria's public key.

I'd like to know whether this process provides:
1) authenticity
2) integrity
3) non-repudiation
4) confidentiality.

I would also like to know which of these 4 items are provided by certificates, and by digital-signature.
Thanks!
","
Authenticity You can use public-private key pairs for authentication in there own right, if I'm not mistake ssh does something similar. In fact you can setup servers in such away you do not need to enter a login password based on this principal. 
Integrity
I don't believe that the public -private key on its own accounts for this on its own.
Non-repudiation
Cannot be acchieved on its own without have a certifying body saying that the owner of the private key to which you encrypted your public key is the origin you expect it to be. For more
click here
Confidentiality 
the way it works is that you have public-private key pairs the 'public' have access to a key which they used to encrypt data but only one person has the private key to decrypt it. Therefore it brings about confidentiality only the intended person can read the data.

","33","<encryption><certificate><digital-signature><public-key-encryption>","0","0","1","2013-12-02 16:30:32","","1","","","","","2013-12-02 15:58:14",""
"41088655","How to encrypt keys in Android application","My app uses keys to authenticate and communicate with server, we need way to encrypt the keys or hide the keys to prevent it get access when we de-compile the APK.
I used the pro-guard to encrypt, but it did not work as expected. Here is the way i used pro-guard, 
in proguard-android.txt i updated below content.
-dontwarn com.serveraccess.**
-dontwarn weborb.**
-keep class weborb.** {*;}
-keep class com.serveraccess.** {*;}

This is not working, please help me
","","32","<android><encryption><public-key-encryption><android-proguard>","1","","0","2016-12-11 16:56:20","","0","","","","","2016-12-11 16:56:20","2016-12-11 17:09:05"
"55095287","Cannot exactly decrypt RGB image using Elgamal cryptosystem","I am trying to do image encryption and decryption using Elgamal cryptosystem in python. But I am not able to obtain the encrypted image and also the image after decryption is not exactly the same. Can someone please help?
It takes too much time for both encryption and decryption. How can I solve that?
This is the code that  I have done
import numpy
from PIL import Image
import elgamal
import matplotlib.image
import json

img = Image.open('output.jpg')
#Displays the image
img.show('output.jpg')
imgar = cv2.imread('output.jpg')
print(imgar)
#print(type(imgar))

imgstr = json.dumps(imgar.tolist())
#print(type(imgstr))

keyDict = elgamal.generate_keys()
cipher = elgamal.encrypt(keyDict['publicKey'],imgstr)
print('Encrypted value',cipher)
print(type(cipher))


decryptedImgar =  elgamal.decrypt(keyDict['privateKey'],cipher)
print('decrypted value')
print(decryptedImgar)
print(type(decryptedImgar))

im = numpy.array(json.loads(decryptedImgar))
print(im)
print(type(im))
img = Image.fromarray(im.astype('uint8'))

img.save('decimg.png')
img.show('decimg.png')

I have used the following image as input
Input
After decryption I obtain the following image:
Output
","","32","<python><encryption><public-key-encryption><elgamal>","0","","0","2019-03-12 03:37:24","","0","","11123259","","2019-03-12 03:37:24","2019-03-11 04:36:42",""
"52291007","inneficiency creating public and private keys","this code is simply to create a public and private key pair (and use it on a single character) but if i use prime numbers greater than about 1500 then it takes far to long, to create these keys and encrypt/decrypt a single character.
my code is:
from math import gcd
import random

prime_numbers=[1223, 1033]

def phi_function(x):
    x=(p-1)*(q-1)
    return(x)

def is_coprime(x, y):
    z=gcd(x, y)
    if z==1:
        return True
    if z!=1:
        return False

def encryption_key_generator(x, y):
    list_p=[]
    for i in range(1, x):
        i2 = i+1
        if is_coprime(i2, y)==True:
            if is_coprime(i2, phi)==True:
                list_p.append(i+1)
    z=(list_p[len(list_p)-(random.randint(1, len(list_p)))], y)
    return z

def decryption_key_generator(x, y, z):
    list_p=[]
    for i in range(z):
        i2=i+1
        if (x*i2)%y == 1:
            list_p.append(i2)
    q=(list_p[len(list_p)-1], z)
    return (q)

p=prime_numbers[0]
q=prime_numbers[1]
n=p*q
phi=phi_function(n)
encryption_key=encryption_key_generator(phi, n)
decryption_key=decryption_key_generator(encryption_key[0], phi, n)
#print('encryption_key = '+str(encryption_key))
#print('decryption_key = '+str(decryption_key))

x=input('text:   ')

x1=ord(x)
y=(x1**(encryption_key[0]))%(encryption_key[1])
y=chr(y)

y1=ord(y)
z=(y1**(decryption_key[0]))%(decryption_key[1])
print(chr(z))

my question is, are there any methods or built in functions i can use here to make it run faster.
(if it makes any difference to the solution, its going to be used for a secure messaging app i'm in the process of building)
","","31","<python><performance><runtime><rsa><public-key-encryption>","1","","0","2018-09-12 08:43:19","","5","","","","","2018-09-12 08:43:19",""
"51770643","PGP File Encryption","Using Bouncy Castle to encrypt a file, I am having trouble generating the private/public keys. The public key needs to be in the OpenSSH or RFC4716 format the problem is when I use ssh-keygen to create the keys they cannot be used to encrypt the file. Why is this? I even used ssh-keygen to export the keys into the RFC4716 format and still i was unable to use it to  encrypt the file.
","As Robert commented, these formats are not compatible. For PGP file encryption I will use the normally generated keys. Thanks again Robert.
","31","<encryption><bouncycastle><public-key-encryption><encryption-asymmetric>","1","0","1","2018-08-10 19:07:42","","1","","5998036","","2018-08-09 15:24:07","2018-08-09 15:18:09",""
"58214670","RSA encryption post request JAVA","I have to do an Integration with a platform. The platform provided me a Public Key to encrypt the data to call their API. While sending the request I need to consider following:

The request is HTTPS/POST request.
The request must be like :

{ 
    Base64Encode(
        RSA_Encrypt( 
            { ""a"" : ""111111"", ""b"" : ""12234"", ""c"" : ""2342342"", ""d"" : ""612413726581"" }
        )
    )
}

I am putting the parameters like below:
Map<String, String> parameters = new HashMap<String, String>();
parameters.put(""a"", ""112227"");
parameters.put(""b"", ""5411"");
parameters.put(""c"", ""12345678"");
parameters.put(""d"", ""123456"");

Encrypting like below:
StringBuilder sb = new StringBuilder();
sb.append(""{"");
for (String parameterName : parameters.keySet()) { 
    sb.append(""\""""+parameterName+""\"""").append(':').append(""\""""+parameters.get(parameterName)+""\"""").append(',');
}

String s=sb.toString();
s=s.replaceAll("",\\Z"", """");
s=s+""}"";

byte[] cleartext = s.getBytes(""UTF-8"");
String path=""Path to certificate file\\rsa_apikey.cer"";

FileInputStream fin = new FileInputStream(filename);
CertificateFactory f;
PublicKey pk;
try {
    f = CertificateFactory.getInstance(""X.509"");
    X509Certificate certificate = (X509Certificate)f.generateCertificate(fin);
    pk = certificate.getPublicKey();

} catch (CertificateException e) {

    e.printStackTrace();
}
Cipher cipher = Cipher.getInstance(""RSA/ECB/OAEPWithSHA1AndMGF1Padding"");   
cipher.init(Cipher.ENCRYPT_MODE, pk);  
byte[] ciphertext=cipher.doFinal(cleartext);
String securePayload = Base64.getEncoder().encodeToString(ciphertext);

After that, I am sending the POST request. The request is still showing 400 bad request error. I don't know whether I am doing it properly. 
Questiong 1) Please suggest what is the best way to do it?
Question 2) I am getting Base64 String ""securePayload"" different everytime. Can it be the reason for bad request? 
","My padding was wrong and because of that I was getting error. I updated to PKCS1 and now it is working fine. Thanks.
PublicKey publicKey=readPublicKey(path);

        Cipher cipher = Cipher.getInstance(""RSA/ECB/PKCS1Padding"");   
        cipher.init(Cipher.PUBLIC_KEY, publicKey);  
        byte[] ciphertext=cipher.doFinal(cleartext);

","31","<java><post><rsa><public-key-encryption>","0","0","1","2019-10-03 11:30:15","","1","","5137497","","2019-10-03 08:59:20","2019-10-03 07:53:38",""
"27359817","Access file locally?","I create a online system (HTML+Javascript+PHP) where users can encrypt and decrypt messages, using opengpg.js.
I don't want to store the private key on the server. Do you know if it's possible in any way to store data on the local machine? So that the HTML page can access the file and get the key?
About 15 people will use the site, so I can myself configure the clients if it's needed.
For example - but this doesn't work:
HTML Page (on Internet):
<script src=""file:///Users/kristoffer/Documents/key.js""></script>
<script>yourkey = key;</script>

Local file (key.js)
key = ""the-private-key"";

","you cannot use the script tag to reference a local file on the browser, that's a security breach.
You can use cookies or local storage to store the keys. Though both are horrible ideas in my opinion. You seem to imply this is a small local app on your intranet, so using local storage maybe ok in this case, but I want to make sure anybody else reading this answer understands that this is not a good day to do this.
","31","<javascript><public-key-encryption>","0","1","1","2014-12-08 14:18:57","","1","0","","","","2014-12-08 14:10:16",""
"47381318","PHP Remote GPG Server How To?","I want to setup a dedicated gpg server to host keys so that the keys I'm storing are removed from the encrypted data I'm storing. I see I have some options for gpg available to me:
https://github.com/singpolyma/openpgp-php
https://secure.php.net/manual/en/book.gnupg.php
I have setup my gpg server which is now listening on a port but none of these shows me how I can connect to a remote gpg server and I can't find any examples online. How can I use these libs with a remote gpg server?
","GPG keyservers only store public keys. Their purpose is to distribute public keys and to help establish the web of trust. Are you also looking to centrally store private keys to allow for decryption and signing?
If you just want to run a keyserver like https://keyserver.ubuntu.com then you’re looking for something called the SKS keyserver. It’s hosted here: https://bitbucket.org/skskeyserver/sks-keyserver/wiki/Home Please note however, that this software looks to be very rough around the ages and non-trivial to deploy. The documentation is also not very good.
If you’re looking to centralize storage of your keyrings (ie your public and private keys) somehow, I’d recommend this as an alternative: https://superuser.com/questions/466396/how-to-manage-gpg-keys-across-multiple-systems It’s probably not exactly what you want, but it’s probably safest.
Suppose you have 3 servers, A, B and C, that all need access to private key K. Rather than copy private key K to all 3 servers, you could set up said key with 3 separate subkeys, one dedicated to each server, and then distribute the keys such that only the subkeys assigned to a specific server are on that server. That way, all servers can use the primary key, but through the use of their own dedicated subkey only, and if any of the servers get compromised, you can (in theory) just revoke the affected subkey, instead of having to revoke the entire key... I think... I may be wrong on this one, though.
Having said this, you might as well just create separate (primary) keys for each server and then use a master key to sign them to manage trust and revoke compromised keys, if necessary... the downside to this method is that each server would then have its own user id and a different key id, whereas with the subkey method, all servers would use the same key id and user id.
This page describes how to create a personal key with subkeys, and how to store the primary key securely:
https://alexcabal.com/creating-the-perfect-gpg-keypair/
I’d use this same principle to create sets of subkeys for each of your servers. Thus far I wasn’t able to find a guide to do this for multiple servers, or exact instructions on how to revoke a subkey without revoking the entire master key, so this scheme, while it sounds appealing in theory, may not be supported or very common... but it should work, though.
","31","<php><encryption><public-key-encryption><gnupg>","-1","0","1","2017-12-02 17:55:44","47610808","3","","","","","2017-11-19 19:52:24",""
"46617719","How to Decrypt Encrypted UPD Client Data?","I am building a UPD Server and I've already hooked the game client up to it and im now receiving data. The only problem is that the client data I'm receiving looks encrypted (I found the game has a public key and needs it). I am just wondering what would I need to do to decrypt this data, since its UPD Im not sure about TLS/SSL. Any help is appreciated Thanks.
","","30","<sockets><server><client><protocols><public-key-encryption>","0","","0","2017-10-07 07:16:23","","3","","","","","2017-10-07 07:16:23",""
"57212361","While creating keyztore instance getting error as pkcs11 not found","I am trying to create and initialize the IBMPKCS11 provider using config file on java 1.8 64 bit on Linux environment:
While creating the instance of Keystore, getting an error as pkcs11
not  found.
pkcs11.cfg file details are as follows:
name = nCipher   
library=/opt/nfast/toolkits/pkcs11/libcknfast.so   
slotListIndex=1    
attributes=compatibility

Code:
private PrivateKey privateKey;
private static com.ibm.crypto.pkcs11impl.provider.IBMPKCS11Impl 
provider;
provider = new com.ibm.crypto.pkcs11impl.provider.IBMPKCS11Impl(pkcs11.cfg);
Security.addProvider (provider);
privateKey =getPrivateKey(trans.decode(CARDSET_PASSPHRASE).toCharArray(),trans.decode(KEY_ALIAS));

public PrivateKey getPrivateKey(char[] passPhrase, String alias)
throws KeyStoreException, NoSuchAlgorithmException,         
{
    System.out.println (""Inside getPrivateKey method"");
    PrivateKey pk = null;
    try{
        KeyStore ks = KeyStore.getInstance(""PKCS11"", _provider.getName());    
        ks.load(null, passPhrase);   
        pk= (PrivateKey ) ks.getKey(alias, passPhrase);
    }catch(Exception e){
        e.printStackTrace();
    }
    return pk;
}

","","30","<java><public-key-encryption><pkcs#11><encryption-symmetric>","0","","0","2019-07-26 05:13:10","","3","","207421","","2019-07-26 05:13:10","2019-07-26 02:24:14",""
"57034319","Decryption issue with private key and passphrase","can you people please help with below problem.
I am new t encryption and decryption things in python.
I was provided both pgp private.key and public.key files to do a simple encryption and decryption on a text file.
import gnupg as g
import os
from datetime import datetime

#Home directory
gpg = g.GPG('/key/')
date1 =datetime.today().strftime('%Y%m%d')
file1_combined_faia_csv='test_file.txt'
file1_combined_faia='test_encry.pgp'
key_data = None

print 'pen the public key file.'

with open('priv.key','rb') as f:
    Key_data = f.read()

print 'Importing Key data from the keydata'

key = gpg.import_keys(Key_data)

#List the Keys from the data 

pub_key = gpg.list_keys()

key_data = pub_key[2]

with open(file1_combined_faia_csv,'rb') as file:
    file_data= file.read()

data = gpg.encrypt(file_data,key_data[""keyid""])

with open(file1_combined_faia,'w+') as dec:
    dec.write(str(data))

print 'for PIC Encryption done!!!'

print 'OK: ' + str(data.ok)
print 'Msg: ' + str(data.status)
print 'Error: ' + str(data.stderr) 

Blow is my original string.
Hi this is tharun from data team.

And it encrypted successfully.
Please look below of my decryption code. I was provided passphrase also by my client.
import gnupg as g
import os
from datetime import datetime

#Home directory
gpg = g.GPG('/key/')
date1 =datetime.today().strftime('%Y%m%d')
file1_combined_faia_csv='test_encry.pgp'
file1_combined_faia='test_decryped.txt'
key_data = None

print 'pen the private key file.'

with open('priv.key','rb') as f:
    Key_data = f.read()

key = gpg.import_keys(Key_data)

pub_key = gpg.list_keys(True)
key_data = pub_key[0]

file_data = None


print 'for FAIA Encrypting.........'
with open(file1_combined_faia_csv,'rb') as file:
    file_data= file.read()


data = gpg.decrypt(str(file_data),passphrase=""*************""
with open(file1_combined_faia,'w+') as dec:
    dec.write(str(data))

print 'for PIC Decryption done!!!'

print 'OK: ' + str(data.ok)
print 'Msg: ' + str(data.status)
print 'Error: ' + str(data.stderr) 

Below is the error message
[GNUPG:] NO_SECKEY D43DA661974C8582
[GNUPG:] BEGIN_DECRYPTION
[GNUPG:] DECRYPTION_FAILED
gpg: decryption failed: No secret key
[GNUPG:] END_DECRYPTION

I am doing above things based on some sample tutorials. I think i am missng some thing while decrypting. I may use both private key and passphrase but not sure how.
can you please help me on the decryption part.
Please let me know if any further info needed.
Thanks
","","30","<python><python-2.7><public-key-encryption><gnupg><private-key>","1","","0","2019-07-15 06:34:28","","1","","","","","2019-07-15 06:34:28",""
"30466356","'gpg --symmetric' is corrupting my binaries. How do I prevent this?","When I run:
 gpg --batch --yes -o test_bin.jpg.aes.gpg --symmetric --cipher-algo AES256 --passphrase-file=pass.txt  test_bin.jpg

and then decrypt with:
 gpg --batch --yes -o test_bin.aes.out.jpg  --symmetric --cipher-algo AES256 --passphrase-file=pass.txt  test_bin.jpg.aes.gpg

I get corrupted data.
Is there another version of the command that I could use instead?
","","29","<unix><encryption><public-key-encryption><gnupg>","1","","0","2015-05-26 18:38:36","","0","1","","","","2015-05-26 18:38:36",""
"54461495","Public Key Encryption - Using Java","I'm trying to write a asymmetric key encryption using Java (without open source libraries like Apache CXF). 
I'm able to do with Apache CXF, but without open source library - I hit the error ""given final block not properly padded"".
I need help with a Java sample code on how this can be achieved, using the below algo's:

data encryption algo: 
http://www.w3.org/2001/04/xmlenc#aes128-cbc
Key Wrap algo:
http://www.w3.org/2001/04/xmlenc#rsa-1_5

I'm trying to encrypt the soap-header --> usernametoken.
","","29","<java><aes><rsa><public-key-encryption><encryption-asymmetric>","0","","0","2019-01-31 13:17:28","","2","","","","","2019-01-31 13:17:28",""
"50024926","My firebase chat app is not coming in the messaging app list of choices to send","I have made a firebase chat app for android platform. I have another have app to encrypt the text and send it using the other or third party apps by using intents. But when I click on the send button in the latter app, a list of apps appear to choose with which app I want to send the encrypted text, but in that list my firebase chat app is not coming as a choice. Can anyone help me with that ?
Manifest file:
<?xml version=""1.0"" encoding=""utf-8""?>
<manifest xmlns:android=""http://schemas.android.com/apk/res/android""
    package=""com.google.firebase.udacity.friendlychat"">
<uses-permission android:name=""android.permission.INTERNET""/>
    <application
        android:allowBackup=""true""
        android:icon=""@mipmap/ic_launcher""
        android:label=""@string/app_name""
        android:supportsRtl=""true""
        android:theme=""@style/AppTheme"">
        <activity android:name=""com.google.firebase.udacity.friendlychat.MainActivity"">
            <intent-filter>
                <action android:name=""android.intent.action.MAIN"" />

                <category android:name=""android.intent.category.LAUNCHER"" />
            </intent-filter>
        </activity>

    </application>

</manifest>

","In order to have your app listed in the menu, you need to have an activity with an intent filter to catch the action SEND. In your manifest you have only a launcher activity.
","29","<android><firebase><android-intent><chat><public-key-encryption>","0","0","1","2018-05-17 20:31:31","50400072","2","","9077750","","2018-05-17 10:40:13","2018-04-25 14:31:43",""
"55720057","What's the difference between signing a file and decrypting a file?","What the difference between generating a RSA digital signature VS RSA decryption ???
If I have a hash of a message how can I generate a digital signature of that message ???
","Encryption Decryption Vs Digital Signature

In Encryption complete document or content is encrypted, transmitted and decrypted back by receiver.  In below image, for encryption, the public key (the green key) is used to encrypt, the private key (the red key) to decrypt.
In digital signing, hash of content is signed (hash encrypted using private key) so that receiver can decrypt using public key and verify hash by recalculating hash of content.  (unlike encryption and decryption, Hash can't give back content, its one way process.)

This process makes sure that
a. Author is one who claims it and 
b. Content or document has not changed since signing. (Changing a single char of content will change the hash!!)

","29","<certificate><rsa><public-key-encryption><sign>","0","0","1","2019-05-06 16:06:49","","1","","11357783","","2019-04-17 05:18:42","2019-04-17 04:44:49",""
"34684295","Is it possible to generate a private key with one file in de- and encrypted version?","Is it possible to generate a private key out of a decrypted file and a encrypted file. For example, if I have an encrypted image and I have the original one, can I generate the private key out of them?
","No, this is not possible with RSA. It's called a known plain text attack. 
It's important to use proper (OAEP) padding with RSA, or an attacker might be able to trick you into decrypting a message. But, this takes millions of attempts, and it only decrypts one message, it doesn't recover the key.
","29","<encryption><rsa><public-key-encryption><private-key><pgp>","0","1","1","2016-01-08 19:18:04","34684361","1","","15754","","2016-01-08 19:12:25","2016-01-08 19:07:51","2016-01-08 20:22:19"
"51858681","Use /dev/input/mice to generate a RSA key in Python3","Here's my code so far. What I want to do is generate an RSA key based on the user's mouse movements.
from Crypto.PublicKey import RSA

def rand(leng):
    data = open(""/dev/input/mice"",""rb"").read(leng)
    return data

key = RSA.generate(1024,rand)
print(key.exportKey())

The issue I'm having is that the program just freezes. The error seems to be in reading /dev/input/mice from inside a function. If I try reading it in python from anywhere else, it works as expected.
","","29","<python><python-3.x><public-key-encryption>","0","","0","2018-08-15 12:30:45","","2","","6260170","","2018-08-15 12:30:45","2018-08-15 12:27:12",""
"51996669","I can’t login to the server as the user I’ve created","I got “Permission denied (publickey)"" using:
ssh $USERNAME@my-ip

Things I’ve done:

Using Public/Private Key authentication, I can login to the server as root.
I created a user in the sudo group
I confirmed that my created user has sudo priveleges as I viewed auth.log successfully (sudo cat /var/log/auth.log)

I thought it was possibly because my server was unable to identify which key to use, as I have created multiple keys, so I specified which key to use:
ssh -i /path/to/key/id_rsa $USERNAME@my-ip

I got ""Permission denied (publickey)"" again.
","I figured it out! Turns out I was missing an 's' in 'ssh' at the beginning of my authorized_keys file in my user. :) I also matched the permissions between the root and user authorized_keys files, though not sure if this helped truly.
","28","<server><public-key-encryption>","-1","0","1","2018-08-24 04:51:45","51997667","3","","5270951","","2018-08-24 03:02:09","2018-08-24 02:28:22",""
"52175358","Encrypting with 2 public keys","Is it possible to encrypt a secret with 2 public keys such that either of the 2 private keys can decrypt the secret? I've seen it said that this can be done with GPG but I need to find a library that can do it and so far find no leads.
I'm not set on a language or framework but considering (in order) Java, Go, Ruby, or Lua.
","","28","<public-key-encryption>","0","","0","2018-09-04 23:59:38","","2","","","","","2018-09-04 23:59:38",""
"32576745","how to prevent a malicious attack from an unknown person when he knows the public key of my asymmetric key encryption architectural system?","I am using asymmetric encryption algorithm in my web application. The loophole is if some unauthorized person comes to know my public key , then he could make a malicious WebService call. How can I prevent this?
","The public key in an asymmetric algorithm is expected to be exactly that - public and therefore expected to be known by everyone. If you are trying to implement authentication by only distributing the public key to ""authorized"" users then your mechanism is fundamentally flawed.
A more usual way to do this would be to have your clients each generate their own asymmetric key-pair and provide you with the public key, whilst keeping the private key secure. The clients can then authenticate themselves by signing a message with their private key, which you would validate with their public key.
This being said I would strongly suggest using something like TLS with client certificate authentication to implement secrecy, integrity and authentication at the transport level rather than attempting to roll your own cryptosystem at the application level. It's likely to be far more secure than anything you'd implement yourself as well as being far easier for your clients to implement.
","28","<security><encryption><public-key-encryption><encryption-asymmetric>","0","2","1","2015-09-15 03:26:41","","0","","","","","2015-09-15 02:25:11",""
"57840166","Why there are some random bytes from the openssh server while responding kex-neogitation?","I am writing a simple ssh-client in python following the specs specified here. While parsing the list of preferred kex_algorithms there are some random bytes at the start of the list, which should not be there?
I am following the structure defined over here for parsing the server response.
Here is the python code for the client which I am discussing.
import os
import socket
import io
import struct

HOST = 'localhost'
PORT = 22

MSG_KEXINIT = 20

_preferred_ciphers = (
    ""aes128-ctr-random-str"",
    ""aes192-ctr-random-str"",
    ""aes256-ctr-random-str"",
    ""aes128-cbc-random-str"",
    ""aes192-cbc-random-str"",
    ""aes256-cbc-random-str"",
    ""blowfish-cbc-random-str"",
    ""3des-cbc-random-str"",
)


_preferred_macs = (
    ""hmac-sha2-256"",
    ""hmac-sha2-512"",
    ""hmac-sha1"",
    ""hmac-md5"",
    ""hmac-sha1-96"",
    ""hmac-md5-96"",
)

_preferred_keys = (
    ""ssh-ed25519"",
    ""ecdsa-sha2-nistp256"",
    ""ecdsa-sha2-nistp384"",
    ""ecdsa-sha2-nistp521"",
    ""ssh-rsa"",
    ""ssh-dss"",
)
_preferred_kex = (
    ""ecdh-sha2-nistp256"",
    ""ecdh-sha2-nistp384"",
    ""ecdh-sha2-nistp521"",
    ""diffie-hellman-group-exchange-sha256"",
    ""diffie-hellman-group-exchange-sha1"",
    ""diffie-hellman-group14-sha1"",
    ""diffie-hellman-group1-sha1"",
)

_preferred_compression = (""none"",)


def to_name_list(namelist):
    namelist_bytes = "","".join(namelist).encode('utf-8')
    namelist_size = struct.pack("">I"", len(namelist_bytes))
    return namelist_size + namelist_bytes


sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
sock.connect((HOST, PORT))

# Version exchange
local_version = b'SSH-2.0-MYSSH\r\n'
sock.sendall(local_version)
print(""SENT      : {}"".format(local_version))

data = sock.recv(1024)
print(""RECEIVED  : {}"".format(data))
print(""-""*20)

# Key negotiation
kex_msg = io.BytesIO()

kex_msg.write(struct.pack(""B"", MSG_KEXINIT))
kex_msg.write(os.urandom(16))
kex_msg.write(to_name_list(_preferred_kex))
kex_msg.write(to_name_list(_preferred_keys))
kex_msg.write(to_name_list(_preferred_ciphers))
kex_msg.write(to_name_list(_preferred_ciphers))
kex_msg.write(to_name_list(_preferred_macs))
kex_msg.write(to_name_list(_preferred_macs))
kex_msg.write(to_name_list(_preferred_compression))
kex_msg.write(to_name_list(_preferred_compression))
kex_msg.write(bytes())
kex_msg.write(bytes())
kex_msg.write(struct.pack(""B"", 0))
kex_msg.write(struct.pack("">I"", 0))

sock.sendall(kex_msg.getvalue())
print(""SENT      : {}"".format(kex_msg.getvalue()))

data = sock.recv(1024*4)
print(""RECEIVED  : {}"".format(data))
server_kex_bytes = io.BytesIO(data)

print(""Parsing server response"")

flag = struct.unpack("">B"", server_kex_bytes.read(1))[0]
print(""flag : {}"".format(flag))

cookie = server_kex_bytes.read(16)
print(""cookie : {}"".format(cookie))

kex_algo_list_len = struct.unpack("">I"", server_kex_bytes.read(4))[0]
print(""length of kex algo list: {}"".format(kex_algo_list_len))

kex_algo_list = server_kex_bytes.read(kex_algo_list_len)
print(""kex_algo_list: {}"".format(kex_algo_list))

The code mentioned above generates the following output.
SENT      : b'SSH-2.0-MYSSH\r\n'
RECEIVED  : b'SSH-2.0-OpenSSH_8.0\r\n'
--------------------
SENT      : b'\x14\xc6\xff\x10r/W2c+\xf3\x15w\x93`\x92\xf5\x00\x00\x00\xb7ecdh-sha2-nistp256,ecdh-sha2-nistp384,ecdh-sha2-nistp521,diffie-hellman-group-exchange-sha256,diffie-hellman-group-exchange-sha1,diffie-hellman-group14-sha1,diffie-hellman-group1-sha1\x00\x00\x00Wssh-ed25519,ecdsa-sha2-nistp256,ecdsa-sha2-nistp384,ecdsa-sha2-nistp521,ssh-rsa,ssh-dss\x00\x00\x00\xafaes128-ctr-random-str,aes192-ctr-random-str,aes256-ctr-random-str,aes128-cbc-random-str,aes192-cbc-random-str,aes256-cbc-random-str,blowfish-cbc-random-str,3des-cbc-random-str\x00\x00\x00\xafaes128-ctr-random-str,aes192-ctr-random-str,aes256-ctr-random-str,aes128-cbc-random-str,aes192-cbc-random-str,aes256-cbc-random-str,blowfish-cbc-random-str,3des-cbc-random-str\x00\x00\x00Ghmac-sha2-256,hmac-sha2-512,hmac-sha1,hmac-md5,hmac-sha1-96,hmac-md5-96\x00\x00\x00Ghmac-sha2-256,hmac-sha2-512,hmac-sha1,hmac-md5,hmac-sha1-96,hmac-md5-96\x00\x00\x00\x04none\x00\x00\x00\x04none\x00\x00\x00\x00\x00'
RECEIVED  : b'\x00\x00\x044\x06\x14\x18!\xfa\xea\xc4Vv\xd2\xe6\xe5pg\xbc\x08\x8a\xa3\x00\x00\x01\x02curve25519-sha256,curve25519-sha256@libssh.org,ecdh-sha2-nistp256,ecdh-sha2-nistp384,ecdh-sha2-nistp521,diffie-hellman-group-exchange-sha256,diffie-hellman-group16-sha512,diffie-hellman-group18-sha512,diffie-hellman-group14-sha256,diffie-hellman-group14-sha1\x00\x00\x00Arsa-sha2-512,rsa-sha2-256,ssh-rsa,ecdsa-sha2-nistp256,ssh-ed25519\x00\x00\x00lchacha20-poly1305@openssh.com,aes128-ctr,aes192-ctr,aes256-ctr,aes128-gcm@openssh.com,aes256-gcm@openssh.com\x00\x00\x00lchacha20-poly1305@openssh.com,aes128-ctr,aes192-ctr,aes256-ctr,aes128-gcm@openssh.com,aes256-gcm@openssh.com\x00\x00\x00\xd5umac-64-etm@openssh.com,umac-128-etm@openssh.com,hmac-sha2-256-etm@openssh.com,hmac-sha2-512-etm@openssh.com,hmac-sha1-etm@openssh.com,umac-64@openssh.com,umac-128@openssh.com,hmac-sha2-256,hmac-sha2-512,hmac-sha1\x00\x00\x00\xd5umac-64-etm@openssh.com,umac-128-etm@openssh.com,hmac-sha2-256-etm@openssh.com,hmac-sha2-512-etm@openssh.com,hmac-sha1-etm@openssh.com,umac-64@openssh.com,umac-128@openssh.com,hmac-sha2-256,hmac-sha2-512,hmac-sha1\x00\x00\x00\x15none,zlib@openssh.com\x00\x00\x00\x15none,zlib@openssh.com\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Parsing server response
flag : 0
cookie : b'\x00\x044\x06\x14\x18!\xfa\xea\xc4Vv\xd2\xe6\xe5p'
length of kex algo list: 1740376202
kex_algo_list: b'\xa3\x00\x00\x01\x02curve25519-sha256,curve25519-sha256@libssh.org,ecdh-sha2-nistp256,ecdh-sha2-nistp384,ecdh-sha2-nistp521,diffie-hellman-group-exchange-sha256,diffie-hellman-group16-sha512,diffie-hellman-group18-sha512,diffie-hellman-group14-sha256,diffie-hellman-group14-sha1\x00\x00\x00Arsa-sha2-512,rsa-sha2-256,ssh-rsa,ecdsa-sha2-nistp256,ssh-ed25519\x00\x00\x00lchacha20-poly1305@openssh.com,aes128-ctr,aes192-ctr,aes256-ctr,aes128-gcm@openssh.com,aes256-gcm@openssh.com\x00\x00\x00lchacha20-poly1305@openssh.com,aes128-ctr,aes192-ctr,aes256-ctr,aes128-gcm@openssh.com,aes256-gcm@openssh.com\x00\x00\x00\xd5umac-64-etm@openssh.com,umac-128-etm@openssh.com,hmac-sha2-256-etm@openssh.com,hmac-sha2-512-etm@openssh.com,hmac-sha1-etm@openssh.com,umac-64@openssh.com,umac-128@openssh.com,hmac-sha2-256,hmac-sha2-512,hmac-sha1\x00\x00\x00\xd5umac-64-etm@openssh.com,umac-128-etm@openssh.com,hmac-sha2-256-etm@openssh.com,hmac-sha2-512-etm@openssh.com,hmac-sha1-etm@openssh.com,umac-64@openssh.com,umac-128@openssh.com,hmac-sha2-256,hmac-sha2-512,hmac-sha1\x00\x00\x00\x15none,zlib@openssh.com\x00\x00\x00\x15none,zlib@openssh.com\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'

Why there are some extra bytes \xa3\x00\x00\x01\x02 at the beginning of the kex-list?
Is server leaking those extra bytes or I have made a mistake to understand the protocol?
","It looks like this parsing has skipped some of the fields and reordered others.
\x00\x044\x06 looks like the binary packet fields:
  uint32    packet_length
  byte      padding_length

(I think sequences like \00\x044 make this a pretty difficult representation to count bytes in.)
The cookie contents end up with this and the kex message number which I think is \x14 where they should be the 16 bytes after the message type right up to the name-lists that included \xa3\x00\x00\x01\x02. Also the size as parsed looks impossibly high.
","28","<python><sockets><ssh><public-key-encryption><openssh>","1","1","1","2019-09-08 14:05:33","57842651","0","","","","","2019-09-08 08:04:44",""
"58055094","Proof of RSA Public-Key Encryption Theorem","Un, for any positive integer n, is the multiplicative group modulo n, consisting of
these positive integers that are relatively prime to n (equivalently, they have multiplicative inverses
modulo n).
Prove that if n = pq for two distinct primes p and q, then the order of Un is ((p-1)(q-1))
","","28","<rsa><public-key-encryption>","0","","0","2019-09-23 02:53:10","","3","","","","","2019-09-23 02:53:10",""
"41108585","Sharing public key certificate","I'm working on a piece of software in Visual Studio. I created a PKCS#12 archive in Visual Studio to strong name sign my assemblies. I then extracted the public key from the archive using OpenSSL.
I realise that I must remove the PKCS#12 archive from the VS solution before making it publicly available but what do I do with the public key?
Should I bundle it with my solution or make it available for download online where my solution is hosted?
How would a user verify my assemblies with the public key?
If I remove the archive from the solution then Visual Studio will complain because it is still configured to strong name sign the solution. A third party who has obtained the source code will receive such an error when they attempt to compile it with whatever modifications they have made. Should I expect them to plug in their own key or disable it?
","","27","<visual-studio><.net-assembly><code-signing><public-key-encryption><strongname>","1","","0","2016-12-12 19:59:34","","0","","","","","2016-12-12 19:59:34",""
"55386389","How can I check if the public key inputted is valid?","I'm trying to check if the public key provided (in the entry field) is a valid pgp public key. If it's not a valid pgp key, an error message should be returned else it should be saved in the database
Please help
public function EditProfile(Request $request){
      if ($request->pgp) {
        if (false === gnupg_import(gnupg_init(), $request->pgp)) {
          session()->flash('successmessage','PGP key is not valid.');
          return redirect()->back();
        }
      }

","","27","<encryption><public-key-encryption><gnupg><pgp><gpgme>","0","","0","2019-03-27 21:01:39","","0","","","","","2019-03-27 21:01:39",""
"58501634","Encrypt text file using RSA public key","I have been given a Public Key (key.pub file) and with the use of the same, I want to encrypt XML file using my C# application.
The file is having structure as below:

-----BEGIN PUBLIC KEY----- 
xxxxxxxxxxxxxxxxxxxxyyyyyyyyyyyyyyyyyyyyyyxxxxxxxxxxxxxxxxxxxxxx
  aaaaaaaaaaaaaaabbbbbbbbbbbbbbzzzzzzzzzzzzzzzzbbbbbbbbbbbbbbbbbbb
  yyyyyyyyyyyyyyyyyyyyyyyyzzzzzzzzzzzzzzuuuuuuuuuuuuuuuuaaaaaaauuu
  pppppppppppppppaao==
-----END PUBLIC KEY-----

","","27","<c#><.net><rsa><public-key-encryption><public-key>","0","","0","2019-10-22 11:13:05","","2","","10216583","","2019-10-22 11:13:05","2019-10-22 09:55:33",""
"23776495","Clarification on public key decryption","I have a key pair and I use private key to encrypt the data, public key for decryption. Is it possible to provide confidentiality in this setup ?
","No, it's not. You must encrypt data using recipient's public key to have confidentiality. Now all you have are integrity and authenticity (you've got a variation of digital signature, actually)
","27","<public-key-encryption><private-key>","0","3","2","2015-05-16 02:50:52","","2","","207421","","2015-05-16 01:18:06","2014-05-21 07:18:46",""
"23776495","Clarification on public key decryption","I have a key pair and I use private key to encrypt the data, public key for decryption. Is it possible to provide confidentiality in this setup ?
","In the setup that you're asking about, anyone who had access to the recipient's public key (which could be a lot of people if it's truly public) could then decrypt the message, so no, there is no real confidentiality.
If you want to provide both authenticity and confidentiality, you might try encrypting the data with the recipient's public key in order to provide confidentiality, then encrypting (or signing) that with your private key. The recipient would then decrypt (or verify) that data by decrypting it with your public key, thus indicating that the data really came from you, and then decrypting that data using their private key thus helping to ensure confidentiality.
","27","<public-key-encryption><private-key>","0","0","2","2015-05-16 02:50:52","","2","","207421","","2015-05-16 01:18:06","2014-05-21 07:18:46",""
"58071393","How to reproduce successful openssl_verify","My web app has an endpoint that receives a POST from a webhook, and the service that sends the payload also signs it using openssl_sign.
As you'd expect, I know the service's public key, so I use openssl_verify and check whether the ""signature"" sent to my endpoint matches the ""payload"" (""payload"" and ""signature"" are the parameter names).
It all works fine.
What I want to do now is write a functional test of my endpoint's controller. I want to prove that it properly handles when ""payload"" and ""signature"" are verified vs when ""payload"" and ""signature"" are invalid.
Since I do NOT have the service's private key, I can't generate my own values for the test case.
So I've used logging to see real-world values of ""payload"" and ""signature"".
But then when I use those values for my test, it fails!
I think the problem has something to do with line-break characters or whatever might not be captured 100% accurately by Laravel logging.
How can I capture EXACTLY what the production ""payload"" and ""signature"" are?
P.S. I also did this:
$payload = $request->input(self::PARAM_PAYLOAD);
Log::debug(sha1($payload));
Log::debug($payload);

And then when I look in the log for the $payload value and run sha1 on it, the hash is not the same as the logged hash of the original $payload.
","json_encode didn't help and serialize didn't help. What finally worked was:
$payload = $request->input(self::PARAM_PAYLOAD);
Log::debug(encrypt($payload));

Whether the corruption was happening because of linebreaks, single quotes, double quotes, or other special characters, apparently the encrypt function made it a non-issue.
So then I copied the encrypted payload value out of my log and pasted it into a const in my test.
And then I decrypted the payload prior to running the test. Pass!
I still don't understand the root cause of the problem, but at least this workaround helped.
","27","<ssl><encryption><openssl><public-key-encryption>","0","0","1","2019-09-24 13:08:09","","0","","470749","","2019-09-24 01:11:25","2019-09-23 23:47:02",""
"42536782","Verifyable logfile at customer site","We want to create a logfile at customer site where 

the customer is able to read the log (plain text)
we can verify at our site that the log file isn't manipulated

A few hundred bytes of unreadable data is okay. But some customers do not send us files where they can't verify that they do not contain sensible data.
The only reasonable option I see so far is to append a cryptographic checksum (e.g. SHA256(SECRET_VALUE + ""logtext"")). The SECRET_VALUE would be something hardcoded which is plain ""security through obscurity"". Is there any better way? 
We use the DotNet-library and I do not want to implement any crypto algorithm by hand if that matters.
","You can use standard HMAC algorithm with a secret key to perform the checksum. 
Using a secret key prevents in a simple way that the checksum can be regenerated directly. A hardcoded key could be extracted from code, but for your use case I think is enough
The result is a binary hash. To insert it into the text file encode the value as hexadecimal or base64, and ensure you are able to revert the process in server side so you can calculate the hash again with the original file. 
You could use also a detached hash file to avoid modifying the log file
","26","<digital-signature><public-key-encryption><sign>","0","1","2","2017-03-03 11:36:34","","0","","","","","2017-03-01 16:17:38",""
"42536782","Verifyable logfile at customer site","We want to create a logfile at customer site where 

the customer is able to read the log (plain text)
we can verify at our site that the log file isn't manipulated

A few hundred bytes of unreadable data is okay. But some customers do not send us files where they can't verify that they do not contain sensible data.
The only reasonable option I see so far is to append a cryptographic checksum (e.g. SHA256(SECRET_VALUE + ""logtext"")). The SECRET_VALUE would be something hardcoded which is plain ""security through obscurity"". Is there any better way? 
We use the DotNet-library and I do not want to implement any crypto algorithm by hand if that matters.
","Target

customer readable logfiles
verifyable by our side
minimum of binary data 
must work offline

Options

Public-Private-key-things... (RSA, ...)


would be secure
but only binary data

Add a signature


We are not the first ones with that idea ( https://en.wikipedia.org/wiki/Hash-based_message_authentication_code )
DotNet supports that ( System.Security.Cryptography.HMACSHA256 )
Key must be stored somewhere ... in source
Even with obfuscation: not possible to do so securely


Trusted Timestamping

again: we are not first ( https://en.wikipedia.org/wiki/Trusted_timestamping )
needs connection to ""trusted third party"" (means: a web service)
Build Hash + TimeStamp -> send to third party -> sign the data (public-private-key stuff) -> send back

Best option so far

Add a signature with HMAC
Store the key in native code (not THAT easy to extract)
Get code obfuscation running and build some extra loops in C#
Every once in a while (5min?) put a signature into log AND into windows application log
application log is at least basically secured against modification (read only)
and it's collected by the our error report
easy to oversee by customer (evil grin)

","26","<digital-signature><public-key-encryption><sign>","0","0","2","2017-03-03 11:36:34","","0","","","","","2017-03-01 16:17:38",""
"56022990","Unable the verify the signature signed by Nano ledger S","I'm using Nano Ledger S to generate a Stellar keypair, then use the private key to sign a random string(e.g. ""test""), and wish to retrieve the public key and validate the signature using stellar SDK
I'm using the Nodejs SDK provided by nano ledger(https://github.com/LedgerHQ/ledgerjs/tree/master/packages/hw-app-str) to generate keypair, sign the string using signTransaction function.
But in the end I've tried to verify the signature using the public key, it just keep returning false :(
const Transport = require(""@ledgerhq/hw-transport-node-hid"");
const Str = require(""@ledgerhq/hw-app-str"");
const StellarSdk = require(""stellar-sdk""); 

// retrieve the public key from the nano ledger
const getStrPublicKey = async(path) => {
  try {
    const transport = await Transport.default.open();
    const str = new Str.default(transport);
    const result = await str.getPublicKey(path);
    transport.close()
    return result.publicKey;

  } catch (error) {
    console.log(error)
  }
}

// sign the raw string using the keypair we created(using path to specify which address to sign)
const signStrTransaction = async (path, raw) => {
  try{
    console.log(""signing message: ""+raw)
  const transport = await Transport.default.open();
  const str = new Str.default(transport);

  let buf = new Buffer(raw);

  const result = await str.signTransaction(path, buf);
  transport.close()

    return result

  } catch (error){
    console.log(error)
  }
}

// entry point
async function main(){

  let publicKey;
  let raw = ""test""  // raw message waited to be signed
  const path = ""44'/148'/1'""  // the BIP 32 path of the stellar address

  getStrPublicKey(path).then(pk => {
      console.log(pk);
      publicKey = pk;
      signStrTransaction(path, raw).then(result =>{ 

        // load the public key retrieved from nano ledger to the keypair 
        const keypair = StellarSdk.Keypair.fromPublicKey(publicKey)
        let buf = new Buffer(raw);
        // verify the signature is correct
        const valid = keypair.verify(buf, result.signature)
        //expected to be true, but got false
        console.log(valid)
      });
  });

}

Expected output should be true since I use the correct signature & public key to verify, but it just keep showing false.
Will it be related to the buffer encoding?(I didn't specify any encoding when creating buffer)
Thank you so much for seeing my question, any suggestions and opinions are welcomed!
","","26","<public-key-encryption><signature><stellar><ledger-nano-s>","0","","0","2019-05-07 17:40:38","","0","","3155593","","2019-05-07 17:40:38","2019-05-07 12:48:20",""
"58120526","Is it illegal to encrypt data using a public key which has a use only for non commerical use comment on top","CONTEXT: We have a business customer to whom we need to send an encrypted file. 
The business customer has send us a public key file that has a usage statement ""Non commercial usage only"". Our software is legit to encrypt stuff.
QUESTION: would it be illegal for us to encrypt stuff using client's public key 
","Best consult a lawyer. But a lot of those legal sounding notices are completely unenforceable, they're just there to scare people. In general, once someone sends something without a prior agreement, the receiver owns it entirely, as long as the sender has ownership of it. That is regardless of whether the sender changes their mind after the fact. Post conditions, which you can only read after receiving something even if they are sent at the same time, are not a prior agreement (you need the option to decline) before the transaction).
The important part is what rights the sender has. It's possible the sender doesn't have the rights to ask you to use the key as they asked you to. Again, a lawyer can clarify, I don't think you would be liable for that infraction, but the notice might be enough to mean you ""should have known"", and might have some liability.
Even better, ask your customer for clarification. I'm surprised you didn't do that in the first place. If they offer to indemnify you - that is, take responsibility for all liability you might incur by violating that notice - you should be in the clear, providing a lawyer agrees.
I'll say ""lawyer"" again, because the legal system takes about ten years full time study for a lawyer to just get started knowing it well enough to start practicing, and decades longer to get good at it. You can't expect anyone with a casual opinion about it to know enough.
","26","<public-key-encryption>","0","0","1","2019-09-26 16:09:47","","1","","","","","2019-09-26 15:51:25",""
"58132827","Options for many-to-many message encryption","I have a group of (approximately) 20,000 users who need to receive encrypted messages from the public.  What kind of encryption regimen should I use?
If I use PKI, I would need to share the private key with each of the 20,000 members, which is obviously a huge security risk.  What other options are there?
","","26","<encryption><public-key-encryption>","0","","0","2019-09-27 10:35:08","","2","","","","","2019-09-27 10:35:08",""
"52352233","Asymmetric decryption fails over tcp connection seemingly because of encoding issues","I am trying to exchange public keys over a tcp connection. It is easier for me if I can do this while storing these keys in a packet class, serializing the packet object, converting it to a byte array and then sending it over the tcp connection.
The problem I run into is that MOST of the time the decryption fails when a encrypted message is returned via this method. I can't be sure why this is but from what I understand using the Encoding.Unicode library can introduce corruption if you're sending keys. What I am looking for is a way for me to send these keys (preferrably as in a JSON format) over a tcp connection without them being corrupted.
I've also read that Convert.FromBase64String() is a source for corruption free encoding but it doesn't seem to always be able to convert JSON strings as they aren't of the correct formatting.
//Sets up a tcp conncetion and encrypts a packet
void EncryptAndSend()
{
    //Recieve a string with the public key of the other side with this packet method except I don't encrypt that packet
    //The key is in the format given by rsa.ToXmlString
    string pub_key = ""public_key_xml_format"";

    RSACryptoServiceProvider rsa = new RSACryptoServiceProvider();
    rsa.FromXmlString(pub_key);
    string plaintext = ""Some plaintext"";
    string password = ""pass"";
    Packet packet = new Packet(PacketType.ENCRYPTED_MESSAGE, plaintext, 0, 1);

    string encrypted_plain = SymmetricEncrypt(plaintext, password);
    packet.payload = encrypted_plain;

    packet.password = Encoding.Unicode.GetString(rsa.Encrypt(Encoding.Unicode.GetBytes(password), false));

    string serialized_packet = new JavaScriptSerializer().Serialize(packet);
    byte[] bytes = Encoding.Unicode.GetBytes(serialized_packet);

    var client = new TcpClient(""127.0.0.1"", 5300);
    client.GetStream().Write(bytes, 0, bytes.Length);
}

//Sets up a tcp connection and decrypts a packet
void RecieveAndDecrypt()
{
    var listener = new TcpListener(IPAddress.Loopback, 5300);
    listener.Start();
    TcpClient client = listener.AcceptTcpClient();

    var stream = client.GetStream();
    byte[] buffer = new byte[client.ReceiveBufferSize];

    while (client.Connected)
    {
        try
        {
            Array.Clear(buffer, 0, buffer.Length);
            int bytesRead = stream.Read(buffer, 0, client.ReceiveBufferSize);
            Decrypt(buffer);
        }
        catch
        {
            Console.WriteLine(""Client disconnected"");
        }
    }
}

//Decrypts and prints the packet payload
void Decrypt(byte[] buffer)
{
    string pub_key = ""lol"";
    string strbuf = Encoding.Unicode.GetString(buffer);
    Packet packet = new JavaScriptSerializer().Deserialize<Packet>(strbuf);
    RSACryptoServiceProvider rsa = new RSACryptoServiceProvider();
    rsa.FromXmlString(pub_key);
    byte[] decrypt_pass = rsa.Decrypt(Encoding.Unicode.GetBytes(packet.password), false);
    string decrypted_payload = SymmetricDecrypt(packet.payload, Encoding.Unicode.GetString(decrypt_pass));
    Console.WriteLine(decrypted_payload);
}

I run the encryptor in one thread and the decryptor in another. Before these are run I send over the public key from the decryption side in the form of an xml string. I left out this code because I figured my mockup was already long enough and I don't want to overwhelm anyone. If you want the original project source code then I'll gladly dump it.
I forgot to add: I've done a console print right before I decrypt and encrypt the packet to look at what the public and private keys are for encrypting and decrypting a certain packet. As far as I could see the prints are identical, but it seems possible that some bit would be different because of encoding and I don't see it.
The exception that is thrown when I attempt to decrypt is: The parameter is incorrect.
","","26","<c#><encoding><public-key-encryption>","0","","0","2018-09-16 09:22:54","","6","","4093630","","2018-09-16 09:22:54","2018-09-16 08:11:44",""
"44510941","Message Length Encryption Failure using Perl Crypt::PK::DH","Why does a change in Message Length Cause the decryption to fail in the Below Snippet? 
I Receive the following Error ""FATAL: dh_encrypt_key failed: Invalid hash specified. at C:/Perl/perl/site/lib/Crypt/PK/DH.pm line 225."" 
Occurs on Perl (v5.14.2) built for MSWin32-x86-multi-thread,  Win10 
use Crypt::PK::DH;

my $pub = Crypt::PK::DH->new('bob_pub_key.gpg');

print ""encrypting secret message... \n"";

my $ct = $pub->encrypt(""1-2-3-4-5-6-7-8-9-10"");  # This Works

# my $ct = $pub->encrypt(""1-2-3-4-5-6-7-8-9-10-""); # Why Does This Not Work???

my $priv = Crypt::PK::DH->new('bob_priv_key.gpg');

print ""decrypting secret message \n"";

my $pt = $priv->decrypt($ct);

print ""$pt\n"";

","","26","<perl><public-key-encryption>","0","","0","2017-06-13 02:41:02","","3","","100754","","2017-06-13 02:41:02","2017-06-13 01:20:34",""
"51825535","How do password managers encrpty passwords that are shared with a group?","There are password managers that encrypt passwords and data on the client side before storing it on the server.
I understand the Symmetric and Asymmetric Encryptions on a basic level. With Asymmetric Encryption, it requires the Public key of the other user to encrypt it so only him/her can decrypt it with the Private key.
I don't understand how that would happen for a group or even a single user where both the encryptor and decrypter need the data/password.
Thanks for the help.
","Typically you encrypt the data itself (the password) with a random symmetric key. You then encrypt that key with each public key you want to provide access. Since passwords are small, in principle you could just encrypt the key directly with the public key, but it's pretty common practice to do the two-step process. Asymmetric encryption is very slow, and not convenient for use on large pieces of data. And if you have a large number of public keys, it's much better to just have a small piece of data (a symmetric key) encrypted multiple times rather than the whole data set.
If it's just a single user, there's no reason for asymmetric encryption. You'd just use symmetric encryption with a single key.
","25","<security><encryption><public-key-encryption><password-encryption>","0","1","1","2018-08-13 15:32:27","51825871","0","","10156179","","2018-08-13 15:19:26","2018-08-13 15:15:06",""
"53273178","Is it required to encrypt data while transferring over SFTP","We are sending some date from one system to another system (outside network). The data will be transferred over SFTP. Some the data is sensitive.
I was told that since we are sending it over SFTP, we don't need to encrypt the data. As per my understanding even if we are sending data over SFTP, we should encrypt it.
I want to know if it's true that we don't need to encrypt data if we are sending over SFTP?
","SFTP uses SSH as the underlying protocol.  SSH handles encryption for you.  Provided the SSH connection is secured well (e.g. using a private key) and you trust the system you are communicating with, you don't need to implement any further encryption.
","25","<encryption><sftp><public-key-encryption>","-1","2","1","2018-11-13 03:08:03","53273198","2","1","","","","2018-11-13 03:04:05",""
"57460252","How extract from openssl_decrypt text and secret key ? - PHP","I'm trying to encrypt a word with a key and i found out openssl_encrypt.
Now (maybe) i'm able to do it but i can't to extract from it initial word and secret key.
 $text = ""message"";
 $method = ""aes-128-gcm"";
 $ivlen = openssl_cipher_iv_length($method);
 $iv = openssl_random_pseudo_bytes($ivlen);
 $secretKey= ""god"";


if (in_array($method, openssl_get_cipher_methods())){       
  $encrypted = openssl_encrypt($text, $method, $secretKey, $options=0, $iv);
  $decrypted = openssl_decrypt($encrypted, $method, $secretKey, $options=0, $iv);

  print_r($encrypted);

  print_r($decrypted);  
}

Besides when decryption is correct output is FALSE or TRUE ?
","It's because you're using gcm, change $method to ""aes-128-cbc""
","24","<php><encryption><openssl><public-key-encryption><encryption-symmetric>","0","0","1","2019-08-12 11:40:26","","4","","3162975","","2019-08-12 11:27:16","2019-08-12 11:22:35",""
"58174895","How does an encryption algorithm actually encrypt data","What I want to know, is not how encryption works, what are keys etc <- I kinda got that, like how DH works, and I did learn asymmetric keys a while back, but I'll probably need to refresh on that.
What I want to know is how does the key turn some plaintext like ""HELLO"" into ciphertext such as ""MQPCT""
What actually happens to the string during the process, does each character get turned into a number somehow? That sort of thing
Hopefully my question makes sense
","To answer your question about what happens to the string during the process - the string is decoded into bits, then the bits are encrypted.  
Most modern encryption protocols ultimately use AES symmetric encryption to encrypt the message, using a secret key shared by both the sender of the message and the recipient.  The message is broken up into blocks of 128 bits (and usually padded), then the AES algorithm is used to encrypt these bits.  For information on how AES does this, see https://en.wikipedia.org/wiki/Advanced_Encryption_Standard.
","24","<encryption><public-key-encryption><encryption-symmetric><encryption-asymmetric>","0","1","1","2019-09-30 21:44:07","","2","","","","","2019-09-30 20:28:02","2019-09-30 21:47:05"
"35351009","Can we store sensitive client information with the admins without them(admins) identifying it?","I am trying to design a pairing application for my university this valentine.  How is it supposed to work, you ask?? The clients will submit preferences to the server and after some days if any two clients have the same preferences, they will be notified -- not in any other case. A fool-proof framework design needs to be built for this purpose. What I am willing to do is to ensure my clients that even though they will be submitting their favourite responses to me via my website, I will still not be able to see those as if I would, this application will have issues of privacy. I am trying to match the user preferences with each other, they will obviously be encrypted and there is no way I can match any two unless I decrypt them at some point in my server locally -- assuming the fact that RSA encryption mechanism has a very little probability of collision of hashed values and I definitely cannot match them :) . The bottleneck here then is >> never ever decrypt the client preferences locally on the admin's machine/server. One approach which is currently on my mind is to introduce a salt while encrypting which will stay safe in the hands of the client, but still decryption needs to be done at some point in time to match these hashes. Can there be some alternative approach for this type of design, I think I might be missing something.
","Turn things around. Design a mailbox-like system and use pseudonyms. Instead of getting an email once a match has been found, make people request it. That way you can leave the preferences unencrypted. Just the actual user has to be hidden from public. Start with an initial population of fake users to hide your early adaptors and you will be done.
I.e.: In order to post preferences, I'll leave a public key to contact me. The server searches matches and posts encrypted messages to a public site. Everyone can see these messages (or not, if you design properly) but I am the only one that can read them.
","23","<encryption><rsa><public-key-encryption><salt>","0","2","1","2016-02-11 23:23:26","35351222","0","0","5107319","","2016-02-11 23:23:26","2016-02-11 22:06:17",""
"52963800","signing email with digital certificate from another email account same domain thunderbird","I created a digital certificate for an email address with the purpose of being able to sign emails, encrypt emails etc from that specific address.
But I use thunderbird with enigmail add-on. And in thunderbird, I also have another email account, same domain, but its my wife email.
I realized that my wife email address is now also capable of digitally signing and encrypt emails using the digital certificate I created for my email. 
Is this ok? I mean, I though thunderbird would only allow me to sign a message if such specific sender email had its own digital certificate, and not using the digital certificate of another email address even if from same domain.
Or maybe something is not configured as it should?
Hope I was clear.
Thanks in advance for any clarification I tried to find an answer but could not find anything so im really confused.
","","23","<email><certificate><public-key-encryption><thunderbird>","1","","0","2018-10-24 08:02:53","","0","","","","","2018-10-24 08:02:53",""
"50301177","how to find a and b in this function of the form f(p) = (a.p + b) mod 2, knowing that plain text + cipher text are given (Brute Force)","this is the question 
Breaking code Brute force is an important, and basic, algorithmic paradigm. In a brute-force algorithm, a problem is solved in the most straightforward manner based on the statement of the problem and the deﬁnitions of terms. Brute-force algorithms are designed to solve problems without regard to the computing resources required, where in some you examine every possible solution until you ﬁnd one that works. Break the key (ﬁnd a and b) used for encryption using brute force, where you know plaintext and ciphertext. Assume that it has been encrypted using aﬃne ciphers  f(p) = (a.p + b).
and this is my code for, is there any other way of doing it ?
public static int[] findKeys(String plaintext, String ciphertext){
    int[] keys = new int[2];
    int temp, a = 0, b = 0;
    char p, c;

    for (int i = 0; i < plaintext.length(); i++) {
        p = plaintext.charAt(i);
        c = ciphertext.charAt(i);

        for (int x = 0; x <= 9; x++) {
            a = a + x;

            for (int y = 0; y <= 9; y++) {
                b = b + y;
                temp = (int) p - 65; //convert to int
                temp = Math.floorMod((a * temp + b), 26);
                p = (char) (temp + 65); //convert to char

                if (p == c) {
                    keys[0] = a;
                    keys[1] = b;
                }
            }
        }
    }

    return keys;
}

","","23","<java><encryption><key><public-key-encryption><discrete-mathematics>","0","","0","2018-05-11 22:50:31","","4","","7294647","","2018-05-11 22:50:31","2018-05-11 22:44:36",""
"53452614","How to extract the fields (Country, State, ... E-mail) from a p12 file without password","I have a file.p12 which contains the private key protected  with a password (that i have not) and the public certificate.
I have tried the following commands in the cmd of windows:
pkcs12 -in file.p12 -clcerts -nokeys -out publicCert.pe

But it require the private passwords.
","Generally speaking, you can't.
While a PFX supports many different configurations, the default is to encrypt the private keys with 3DES-CBC and the certificates with RC2/40-CBC; each encrypted segment uses the password as input into a formula to produce a different cryptographic key.
So your two easiest options are to know the password, or to try to crack the RC2 payloads.
","21","<security><certificate><key><public-key-encryption><private-key>","0","0","1","2018-11-24 16:07:10","","0","","","","","2018-11-23 20:28:49",""
"47593410","Which key is used for encryption of already sent and stored encrypted e-mails?","I would like to understand how e-mail encryption works. 
If I want to store my already sent encrypted e-mails, are they encrypted by my public key or private key? And which key is used to sign those messages?
","You are talking about Public-key cryptography, it does not depend on where you use it: email or files and etc.
Public key is used for encrypt messages. Private for decrypt and sign messages. 
","21","<email><encryption><public-key-encryption>","0","0","1","2017-12-01 15:48:01","47595636","2","","","","","2017-12-01 12:27:41",""
"54552767","PHPSECLIB trouble","I'm trying to implement RSA by using PHPSECLIB (http://phpseclib.sourceforge.net/)
The PHP page I've realised works very well, it generates a public and a private key and it encryptes and decryptes plaintext really well.
The point is that the $ciphertex is made of strange symbols which cannot be properly saved into a varchar column inside my MYSQL database.
Here is the code
<?php
include 'Crypt/RSA.php';
include 'Crypt/Rijndael.php';
$rsa = new Crypt_RSA();
$keys = $rsa->createKey(2048);
$rsa = new Crypt_RSA();
$rsa->loadKey($keys['publickey']); // public key
echo $keys['publickey'];
echo ""\n -----\n"";
echo $keys['privatekey'];
echo ""\n -----\n"";
$plaintext = 'My text';
echo $plaintext;
$ciphertext = $rsa->encrypt($plaintext);
echo $ciphertext;
$rsa = new Crypt_RSA();
$rsa->loadKey($keys['privatekey']); // private key
echo ""\n -----\n"";
echo $rsa->decrypt($ciphertext); ?>

This is an example of my private key
-----BEGIN RSA PRIVATE KEY----- MIIEpAIBAAKCAQEA0z6+jhrOkoxwuHL8KtieekjKytpk/ZGck47bX4qB79v0Hhvw o1080mWYzrtSmeB4+Od6CktUxAwuNTUL2rGck577A6nVYtasdJgzf8zCf+KGocOX qjB8sdryGbKgUmFTDu1KPKQh9msyXsEpCFcVeDZQcfTEcJ/9kSRjgLD8GJZc7HLS br8+uJ8wyyC1E76taMYeBFcVAr4mo/Zyv4hML6oPYMDMaouFFQKB30KfPwRsI4iw CXP/RsgxIN2a8xmB5XAt36GOJNyuCPEzUA/NBYcGmiil1B4HzG3f7MKhg0q4bzrV dp03RJZ5OOkt4n49Tjz1IOWXVPkQRngC9+/UIQIDAQABAoIBAFDGmU71aTAYi7G8 JjisBE12MDVJNXzQhTLXWYM7D1yMmtg4jteo+2zodHn4nyk/8IIc4Um2bH9auQCX fCTv7ZN1Iz7PXk0hEWi0Gl0wCt+j2x9YD1KAn+3SbujsqOlXVc9LZSuzB1mWu/gH nI0X35nMCw7ILaVzSB6L75ByHLO5eXMxRwWS5yGtk57QfF+QDAzBs2enVV4MWM/f 9cddzDT/ScUaPF5+RUnl891gJaNzQLMLrxsrAHxizOJOM0KtTXfsQ4iXCSJeFjTp Y/qDz0RpkPURJJ+QIJ+sS8x4gVzps7niIUKS2p9liinD+P84/EVs/uDhk3IVkF8X G4WYMwECgYEA4KpmCUOwoquJLNYTN/c100R4sW9rIqoS8S69CQSThYdMb3Jm+rIL c4QR6iKOvooBx7P1py/XR+xSGY0RnIr8wziFQk3ECfWKKzMDTgvuhVrl+C8rgONC C+zsVwOFTP/NTcPHlb5a3T3TEKhGY4+zhLyqhC1EC1c/v4ARCZEq3YkCgYEA8LUr xwOlgWc4XfjaDUWYteOZoUefsBhVp9QEHLZiSlO+7fkt4Ksxc9ZfOpQq4LYQSec2 0/yHEByahyjzxv0rvVr4xycwfUPNVg+r2oU5qARFjW5G9uxQ41Esq4NolY0kk4kw Xd5h2A//F4CDtQBvUWiTF4bPosEycjGBtkyJ89kCgYEA0Ad4a+OtzzKe1lFzgkL6 KCIiz8mnnnV1DLaGe68tGltpv1hjWoc6a0BDhlVxb6VCeLR+Jsz5vrNoYhhp0lYw LmRLoFV5zO77fXzC9qW9uuWsQ98JnVLReVFsljXAXMgQRo2eZV3ZrTruEWJ/qvkI 9UPtcG6prwafFKd1HzK4SmECgYEAx7UouxeVa4WeSKk9EKHbj51kS2FHZizqdDH9 r2zKo+xTjtGcdLjUcM09eTaRVJr5bLd+z+bGkGGK+/TIPSKz9YjSuzkSi/uDE5Iw /T5nlbTll/AUxK1QdylULID8dogB/r5l+JuXBlJPTMp9e+D+esaOs4hQITK1jfTx L7TVCBECgYASnGph38ECN9s2gRZQfwOWGk7X3XOxOk6cZTu5FMeqFXc+BaJCtO4K vOgFvLV9lYFOLSFf3gHZOFpoBgwKLRc3k8IEMlhcKvyZ5mlV3rX3b+IXRQBLoe2q 4OjGtC1UpHGrdifZQ0kWk2KKR5HjVkmdKzJIEaW1LI6kGu70r8R3Sg== -----END RSA PRIVATE KEY-----

This is an example of public key
-----BEGIN PUBLIC KEY----- MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA0z6+jhrOkoxwuHL8Ktie ekjKytpk/ZGck47bX4qB79v0Hhvwo1080mWYzrtSmeB4+Od6CktUxAwuNTUL2rGc k577A6nVYtasdJgzf8zCf+KGocOXqjB8sdryGbKgUmFTDu1KPKQh9msyXsEpCFcV eDZQcfTEcJ/9kSRjgLD8GJZc7HLSbr8+uJ8wyyC1E76taMYeBFcVAr4mo/Zyv4hM L6oPYMDMaouFFQKB30KfPwRsI4iwCXP/RsgxIN2a8xmB5XAt36GOJNyuCPEzUA/N BYcGmiil1B4HzG3f7MKhg0q4bzrVdp03RJZ5OOkt4n49Tjz1IOWXVPkQRngC9+/U IQIDAQAB -----END PUBLIC KEY----- 

This is an example of the ciperhtext 
)�y�?���d�CE�ʙ/H�""�8��p#�0�$UI��hb� �x���q��Ck,�a�%�1���cX��Y��r��i""�iG�)�ćv��ӕȝu��0��܈ ��=��N}���bU�T��c*����:�,;�l'����   �!�W�;]B�K�A)�?�/{�'���s#�7�bC�1K䥯��X]H0Y�����٪�U�����a�,��.���0v$ _��YS���3��\

","","21","<php><mysql><openssl><public-key-encryption><phpseclib>","0","","0","2019-02-06 13:48:48","","1","","569976","","2019-02-06 13:33:25","2019-02-06 11:36:58","2019-02-06 13:48:24"
"58014432","Extract public key from a weak client","Let's say we have a client that uses asymmetric cryptography to communicate with a server. This could be SSL or just a custom encryption. 
Now if we assume that the client's source code is easy to disassemble, can we extract the public key and hence send bogus messages to the server?
Anyway to avoid this? Consider that it is really hard to keep the client's source code safe. 
","","20","<ssl><public-key-encryption><encryption-asymmetric>","0","","0","2019-09-19 15:29:08","","5","","","","","2019-09-19 15:29:08",""
"36846056","How I would Add the Int in this Variable to each int in this list","I need to add the int in Offset to each number in Code
This is How i made the Offset
num1 = (randint(33,126))
num2 = (randint(33,126))
num3 = (randint(33,126))
num4 = (randint(33,126))
num5 = (randint(33,126))
num6 = (randint(33,126))
num7 = (randint(33,126))
num8 = (randint(33,126))
key1 = chr(num1)
key2 = chr(num2)
key3 = chr(num3)
key4 = chr(num4)
key5 = chr(num5)
key6 = chr(num6)
key7 = chr(num7)
key8 = chr(num8)
characterkey = (key1 + key2 + key3 + key4 + key5 + key6 + key7 + key8)
Label(window2, text = characterkey, font = font, bg = ""Dim grey"", fg = ""cyan"").place(x = 130, y = 300)
offset = int(num1+num2+num3+num4+num5+num6+num7+num8)
offset = int(offset/8)
offset = int(offset - 32)
print(offset)

I have converted a text file into its ASCII Code here
Code ="" "".join(str(ord(char))for char in readFile)

But i need to add the Offset to each Converted Ascii Code in Code and after the offset is added if it equals more then 126 it will minus 94
","I am not entirely sure what you want to do, but here is my guess:
If you want to be able to quickly see what it does:
Code = "" "".join(map(str, [char + offset - 94 if char + offset > 126 else char + offset for i in map(ord, readFile)]))

Or when you care for speed (because char + offset gets calculated twice in the above example):
Code = "" "".join(map(str, [(lambda x: x if x <= 126 else x - 94)(char + Offset)) for char in map(ord, readFile)]))

","20","<python-3.x><encryption><int><ascii><public-key-encryption>","0","0","1","2016-04-25 17:46:31","","1","","5687894","","2016-04-25 17:46:31","2016-04-25 16:26:11",""
"53477938","How to create PEM formatted key from email and password?","I am using Hybrid-Crypto.js for playing around with public/private key encryption. 
This function creates a random PEM-formatted RSA keypair
// Generate 2048 bit RSA key pair
rsa.generateKeypair(function(keypair) {
 // Callback function receives new 2048 bit keypair as an argument
 var publicKey = keypair.publicKey;
 var privateKey = keypair.privateKey;
 }, 2048);  // Key size

However, I would like to create a keypair derived from email and password like being known from openpgp.js 
var options = {
  userIds: [{ name: 'Alicee', email:     'alice@example.com' }],
  numBits: 2048,
  passphrase: 'secretttoo'
};

var publicKeyAlice;
var privateKeyAlice;

openpgp.generateKey(options).then(key => {
  privateKeyAlice = key.privateKeyArmored;
  publicKeyAlice = key.publicKeyArmored;
  console.log('Key generated');
});

Is there a way to create PEM/RSA keypairs like PGP-keys from fixed sources such that every time the same keypair gets created when the same inputs (email/password) is entered?
","","20","<rsa><public-key-encryption><pgp><openpgp.js>","1","","0","2018-11-26 09:18:59","","0","","","","","2018-11-26 09:18:59",""
"53553836","Encryption a message which was generated in .NET Core 2.1 under linux adds leading bytes","If have the follwoing situation:

A Client app runs on Raspian with .NETCore 2.1 (Linux)
It encrypts a message with a public cert (RSA)
Sends this encrypted message to a windows server
This server decrypts the message
Now the data has 2 more bytes at the beginning of the text!

Example: Encrypting ""Hallo welt"" under linux leads to ""\u0004\nHallo welt"" in windows.
For me it seems that there is a bug in the linux implementation of the .NETCore encryption, or (maybe padding-problem)?
Encryption is done with

public static byte[] Encrypt(byte[] plainData, X509Certificate2 certificate) {
  var message = new EnvelopedCms(new ContentInfo(plainData));
  message.Encrypt(new CmsRecipient(SubjectIdentifierType.IssuerAndSerialNumber,  certificate));
  return message.Encode();
}

Decryptiong with:

public static byte[] Decrypt(byte[] encryptedData, X509Certificate2 certificate) {
  var message = new EnvelopedCms();
  message.Decode(encryptedData);
  message.Decrypt(new X509Certificate2Collection {certificate} );
  return message.ContentInfo.Content;
}

I can also provide an very simple example project if needed...
","This is a known bug in .NET Core and will be fixed in 3.0...
See: https://github.com/dotnet/corefx/issues/32978
","19","<encryption><.net-core><public-key-encryption><.net-standard>","0","0","1","2018-12-17 19:43:12","53821995","1","","","","","2018-11-30 08:27:59",""
"58375691","Can we keep public key common for every private/public key pair generated using Portable.licensing","I'm generating license using portable.licensing library by dnauck https://github.com/dnauck/Portable.Licensing, This library generates a private/public key pair that is every-time i generate the private and public key are unique as a pair
But is it possible to keep public key unique so that I can use common public key and for every validation.
Is it possible?
            var keyGenerator = Portable.Licensing.Security.Cryptography.KeyGenerator.Create();
            var keyPair = keyGenerator.GenerateKeyPair();
            var privateKey = keyPair.ToEncryptedPrivateKeyString(passPhrase);
            var publicKey = keyPair.ToPublicKeyString();
            Console.WriteLine(publicKey);```

","","19","<c#><public-key-encryption>","0","","0","2019-10-15 16:34:26","","1","","2370483","","2019-10-15 16:34:26","2019-10-14 11:19:28",""
"56746905","Retrofitting encryption to .NET rich client application with SOAP messages to back end server","We have an old .NET rich client application connecting to back end services via SOAP using SSL encryption. Simulating an attack,  I have installed Burpsuite on the local machine and intercepted the traffic, modified it and sent it on to the end point (even though it is encrypted with SSL). What is the best way (quickest / cheapest!) to secure the application against this sort of vulnerability?
","I think you can intercept the unencrypted traffic because Burp does a SSL MITM...if someone can use burp on a machine this means they have high privileges...so it's not a question of application security but system security: low level privilege of the users that are using the client.
You can add another layer of encryption in your rich client, but you need to store the encryption key somewhere in the client and also in the server side. Storing the encryption key in the rich client is not so much secure because it's easy to decompile .NET code or execute it in a debug env to catch the key. Also with an obfuscation layer. 
You can evaluate to use asymmetric encryption: a key pair with a public and private keys. You can encrypt secrets with the public key in the rich client and only the server will be able to decrypt them with the private key. But it depends on secrets you want to protect.
Because the asymmetric encryption is slower than the symmetric one, you can encrypt a session symmetric key and share with the server.
But if someone can decompile your rich client they can rewrite your code and do what they wants! 
","18","<.net><soap><public-key-encryption>","0","0","1","2019-06-25 06:34:50","56748098","0","","","","","2019-06-25 04:36:21",""
"53323409","Securing a Client Talking to an AWS Server Instance","We have an AWS server instance running Ubuntu 18.04, and acting as host for a RESTful API (written in Python).  The API interfaces with an RDS instance (mySQL) and basically performs database tasks; but this is not important.
We are looking at how to secure the connection between the AWS server and remote clients.  The clients are Ubuntu work stations running 16.04 or 18.04, and scattered across various sites.  
Looking for any advice on best practices to secure the connection / data between the clients and server.
Thank you,
Dan.
","This is a detailed topic but some key steps:

If the API will be accessed by a limited set of clients (other servers), you can restrict access to those specific IP addresses for your EC2
Use ssl certificates (Letsencrypt is one example) to remove the danger of MITM attacks. Follow this or search for nginx example (if you are using nginx)

This is quite a vast topic and I really recommend you follow AWS recommendations alongwith getting a professional to do it if data is really important
","18","<amazon-web-services><security><ubuntu><amazon-ec2><public-key-encryption>","0","0","1","2018-11-15 16:45:29","","0","","","","","2018-11-15 16:04:59",""
"52607231","Signing Xml from ""es-staging.crt"" certicate before sending via httpClient to service provider","I have got es-staging.crt file from service provider whose service I am using.
I need to send signed xml with this es-staging.crt certificate. I do not know how to achieve it.
How to solve this in java language?
I have read certificate information by java code, given below.
String cerPath = ""E:/configDirectory/es-staging.crt"";
fileInputStream = new FileInputStream(new File(cerPath));
CertificateFactory certificateFactory = CertificateFactory.getInstance(""X.509"");
x509Certificate = (X509Certificate) certificateFactory.generateCertificate(fileInputStream);
publicKey = x509Certificate.getPublicKey();
expiryDate = x509Certificate.getNotAfter();

System.out.println(""public key : ""+publicKey);
System.out.println(""expiryDate : ""+expiryDate);

System.out.println(""--> Subject: "" + x509Certificate.getSubjectDN().getName());

System.out.println(""--> Issuer: "" + x509Certificate.getIssuerDN().getName());

I have only this es-staging.crt certificate.
","You cannot sign a document with an X509 Public Key. You require access to the Private Key.
","18","<java><algorithm><public-key-encryption><private-key><sign>","0","1","1","2018-10-02 16:06:28","","0","","4420967","","2018-10-02 16:06:28","2018-10-02 11:14:48",""
"54608355","Why does SSL architecture have two distinct functions?","On a high level, it seems to me that SSL has two distinct functions:

To bind a domain name to a specific organization
To send out a public key for encryption

These functions seem very different to me. What is missing from my understanding of the model?
Update for clarity: I base my question on findings from searches. For example, one source says, “SSL Certificates bind together: A domain name, server name or hostname. An organizational identity (i.e. company name) and location.” And, other sources discuss encryption.
","SSL has none of the functions to describe. What you describe are only parts of how the actual functionality is achieved. The real function of SSL is to protect the data in transit. 
The certificate with subject and key is needed within this function (at least) to authenticate the server in order to make sure that the client talks to the expected server and not to some man in the middle. This is achieved by making sure that a) the certificate is issued by a trusted party (the certificate authority) and that it is issued to the expected domain, i.e. the same one which is included in the visited URL.
Note that SSL does not make any claims about how trustworthy the site or the party behind the certificate is. It also does not make any claims if the organization you expect is really the one which owns the visited domain. The latter part is done by the certificate authority for some kind of certificates, i.e. the EV certificates. But for most certificates it is only checked that the current owner of the domain requested the certificate and not who the owner actually is.
","17","<ssl><public-key-encryption>","0","2","1","2019-02-10 19:43:12","54608644","0","","1867246","","2019-02-10 19:43:12","2019-02-09 16:46:01",""
"58431949","c# creating shared secret from public and private keys using ecdh","I'm trying to generate secrete key using private and public keys.  
var ecdh = new ECDiffieHellmanCng(CngKey.Import(privateKey, CngKeyBlobFormat.EccPrivateBlob));

thority.GetPublicKey();

try
{
    var ecdh2 = new ECDiffieHellmanCng(CngKey.Import(publicKey, CngKeyBlobFormat.EccPublicBlob));
}
catch (Exception exc)
{
    //log error  
}

var Secret = ecdh.DeriveKeyMaterial(ecdh2.PublicKey);

I get error while generating ecdh2 getting error

error System.Security.Cryptography.CryptographicException: The
  parameter is incorrect.

I've checked my public key, it looks ok, size is 65 bytes. Is that correct ? 
Any ides what can be wrong ?
","","17","<c#><public-key-encryption><ecdh><shared-secret>","0","","0","2019-10-17 11:58:46","","0","","678855","","2019-10-17 11:58:46","2019-10-17 11:48:57",""
"58459374","How many public/private key pairs needed on server & best way to generate these in Express.js?","I'm just getting started in researching the topic of assymetric encryption and public/private key pairs, etc. and my head is spinning so apologies in advance if the related questions below are very basic. 
By way of background, I've been following along with an excellent tutorial https://blog.angular-university.io/angular-jwt-authentication/ on encryption and setting up JWT's. The sample code largely applies to third-party-hosted authentication, but before I try that I'd like to try handling the authentication on my own Express back-end first. So my questions below are related solely to authentication in my own Express back-end.
My understanding of the authentication process is that we sign the JWT on the back-end using the RSA_PRIVATE_KEY, pass the JWT to the front-end as a json response to the authentication POST, and then for subsequent requests, the server validates the incoming JWT using the RSA_PUBLIC_KEY. With this in mind, I have three questions as below:   

The first thing that's not clear to me relates to how many key pairs are needed. For example, let's assume our app has many thousands of users, each with multiple sessions per day. My preliminary understanding is that the server only needs ONE private/public key pair to sign and verify all the JWTs -- for all user sessions for time-immemorial -- but I'd like to make sure my understanding is correct, and if not, is a separate public/private key pair needed per user? or even per session?  
Regardless of how many key pairs are needed, what's the best way (or some options) to do this within Express? When I do a web search, I don't see anything specific related to Express. I see a number of CLI solutions, such as openssl, and I see several packages for Node.js, such as crypto (but most of the posts for those are quite old). A more recent posting is this one: How to generate Public/Private key pairs using openssl in nodejs?, but that solution still uses the command line to generate the key pairs. I raise this question because I assume the key pairs should be rotated periodically, and I'd think it wouldn't make sense to have to manually re-generate pairs at the command line on a periodic basis, so wouldn't it make sense to automate the key pair generation in the back-end itself?  
A final bonus question is: since both the PRIVATE and PUBLIC keys remain on the server at all times in the authentication deployment I've outlined above, is it fair to say that the PUBLIC key is not really ""PUBLIC"" in this case? (or am I misunderstanding something?).

Many thanks in advance for shedding light on these issues, and helping a beginner come up to speed with this topic!! 
","","16","<express><rsa><public-key-encryption>","0","","0","2019-10-19 14:34:27","","0","","10238279","","2019-10-19 14:34:27","2019-10-18 23:53:49",""
"58696139","Can you manually add a comment to a PGP public key block and not break it?","Pretend that the following is a valid PGP PUBLIC KEY BLOCK:
-----BEGIN PGP PUBLIC KEY BLOCK-----

UBStcXNLrrB3CTV429OmCB35xiYZNCckQZ8LQ+RkcIetcWUTY5n4oYn+3WGGTvv6
ALCiRIKQgCjV9wFawAUAIPn4Otq+amdvmQYbCTgvWxxpZLHNu2Ixc2z0XsUnKRF3
7Ar3BK0Y72430x4XNtgxePKSeM6yChXyJ5NMGLf7zYBs3al+dpa8HxiWZwyaslRF
moZ3GljtkcRYiVTvDdROwItP
=G3b9

-----END PGP PUBLIC KEY BLOCK-----

Can I manually add a comment as illustrated below -- say, with vim -- and it still be valid?
I know I can rerun the gpg(1) command to do this, but I don't have it handy.
-----BEGIN PGP PUBLIC KEY BLOCK-----

Comment: Hello, World!

UBStcXNLrrB3CTV429OmCB35xiYZNCckQZ8LQ+RkcIetcWUTY5n4oYn+3WGGTvv6
ALCiRIKQgCjV9wFawAUAIPn4Otq+amdvmQYbCTgvWxxpZLHNu2Ixc2z0XsUnKRF3
7Ar3BK0Y72430x4XNtgxePKSeM6yChXyJ5NMGLf7zYBs3al+dpa8HxiWZwyaslRF
moZ3GljtkcRYiVTvDdROwItP
=G3b9

-----END PGP PUBLIC KEY BLOCK-----

Thank you.
","Yes that's valid,
-----BEGIN PGP PUBLIC KEY BLOCK-----
Version: SKS 1.1.6+
Comment: Hostname: pgp.key-server.io

As above, both comment and version tags are regularly used, including others, as per RFC4880, allowed Armor Header Keys include:
 - ""Version"", which states the OpenPGP implementation and version
   used to encode the message.

 - ""Comment"", a user-defined comment.  OpenPGP defines all text to
   be in UTF-8.  A comment may be any UTF-8 string.  However, the
   whole point of armoring is to provide seven-bit-clean data.
   Consequently, if a comment has characters that are outside the
   US-ASCII range of UTF, they may very well not survive transport.

 - ""MessageID"", a 32-character string of printable characters.  The
   string must be the same for all parts of a multi-part message
   that uses the ""PART X"" Armor Header.  MessageID strings should be
   unique enough that the recipient of the mail can associate all
   the parts of a message with each other.  A good checksum or
   cryptographic hash function is sufficient.

   The MessageID SHOULD NOT appear unless it is in a multi-part
   message.  If it appears at all, it MUST be computed from the
   finished (encrypted, signed, etc.) message in a deterministic
   fashion, rather than contain a purely random value.  This is to
   allow the legitimate recipient to determine that the MessageID
   cannot serve as a covert means of leaking cryptographic key
   information.

 - ""Hash"", a comma-separated list of hash algorithms used in this
   message.  This is used only in cleartext signed messages.

 - ""Charset"", a description of the character set that the plaintext
   is in.  Please note that OpenPGP defines text to be in UTF-8.  An
   implementation will get best results by translating into and out
   of UTF-8.  However, there are many instances where this is easier
   said than done.  Also, there are communities of users who have no
   need for UTF-8 because they are all happy with a character set
   like ISO Latin-5 or a Japanese character set.  In such instances,
   an implementation MAY override the UTF-8 default by using this
   header key.  An implementation MAY implement this key and any
   translations it cares to; an implementation MAY ignore it and
   assume all text is UTF-8.

","15","<email><encryption><public-key-encryption><pgp><openpgp>","1","1","1","2019-11-04 15:39:27","58696634","0","","","","","2019-11-04 15:08:37",""
"58724060","How to generate Public and private keys for encryption using ATECC608A in C","I am implementing encryption and decryption of data using the ATECC608A chip. I need to know how to generate public and private keys using C programming. I am working on Keil. Are there any drivers available for this? I need to implement it using I2C interfacing.
Thank you
","","14","<encryption><public-key-encryption><i2c><encryption-asymmetric><data-security>","0","","0","2019-11-06 06:11:30","","3","","","","","2019-11-06 06:11:30",""
"57130705","develop firefox addon for decrypting email using public key cryptography?","For my research,i am planning to secure the OTP(One time password) using public key cryptography.So for an example if you generate your OTP code from your banking side for your recent transaction in online banking then the OTP code is encrypted in the banking side and send to your email.Then i planned to develop a Firefox add on which could decry-pt the mail from the web mail.So if anyone have any suggestion about how to do this please let me know!.
for the key management i have planned to keep them locally on your machine and you can publish your public key to bank when u need.
","","13","<public-key-encryption>","0","","0","2019-07-21 05:58:01","","0","","","","","2019-07-21 05:58:01",""
"58782078","How to sign some data using public/private RSA key?","I have a RSA public/private key xml file. And I want to use it to sign some data, with the following classes and here is how I use the class:
$processor = new RSAProcessor(""certificate.xml"", RSAKeyType:: XMLFile);
$data =  $processor->sign($data); 
print(base64_encode($data));

but I get the error: WARNING: str_repeat(): Second argument has to be greater than or equal to 0 in RSA.php on line 81. How to fix it? I guess something is outdated for php 7.2? I appreciate your help what changes should I do in my class to avoid this error?
Rsa class:
define(""BCCOMP_LARGER"", 1);
class RSA {
 static function rsa_encrypt($message, $public_key, $modulus, $keylength) {
  $padded = RSA::add_PKCS1_padding($message, true, $keylength / 8);
  $number = RSA::binary_to_number($padded);
  $encrypted = RSA::pow_mod($number, $public_key, $modulus);
  $result = RSA::number_to_binary($encrypted, $keylength / 8);
  return $result;
 }
 static function rsa_decrypt($message, $private_key, $modulus, $keylength) {
  $number = RSA::binary_to_number($message);
  $decrypted = RSA::pow_mod($number, $private_key, $modulus);
  $result = RSA::number_to_binary($decrypted, $keylength / 8);
  return RSA::remove_PKCS1_padding($result, $keylength / 8);
 }
 static function rsa_sign($message, $private_key, $modulus, $keylength) {
  $padded = RSA::add_PKCS1_padding($message, false, $keylength / 8);
  $number = RSA::binary_to_number($padded);
  $signed = RSA::pow_mod($number, $private_key, $modulus);
  $result = RSA::number_to_binary($signed, $keylength / 8);
  return $result;
 }
 static function rsa_verify($message, $public_key, $modulus, $keylength) {
  return RSA::rsa_decrypt($message, $public_key, $modulus, $keylength);
 }
 static function rsa_kyp_verify($message, $public_key, $modulus, $keylength) {
  $number = RSA::binary_to_number($message);
  $decrypted = RSA::pow_mod($number, $public_key, $modulus);
  $result = RSA::number_to_binary($decrypted, $keylength / 8);
  return RSA::remove_KYP_padding($result, $keylength / 8);
 }
 static function pow_mod($p, $q, $r) {
  $factors = array();
  $div = $q;
  $power_of_two = 0;
while(bccomp($div, ""0"") == BCCOMP_LARGER)  {
   $rem = bcmod($div, 2);
   $div = bcdiv($div, 2);
   if($rem) array_push($factors, $power_of_two);
   $power_of_two++;
  }
  $partial_results = array();
  $part_res = $p;
  $idx = 0;
  foreach($factors as $factor)  {
   while($idx < $factor)
   {
    $part_res = bcpow($part_res, ""2"");
    $part_res = bcmod($part_res, $r);
    $idx++;
   }
   array_push($partial_results, $part_res);
  }
  $result = ""1"";
  foreach($partial_results as $part_res)
  {
   $result = bcmul($result, $part_res);
   $result = bcmod($result, $r);
  }
  return $result;
 }
 static  function add_PKCS1_padding($data, $isPublicKey, $blocksize)
 {
  $pad_length = $blocksize - 3 - strlen($data);
  if($isPublicKey)
  {
   $block_type = ""\x02"";
   $padding = """";
   for($i = 0; $i < $pad_length; $i++)
   {
    $rnd = mt_rand(1, 255);
    $padding .= chr($rnd);
   }
  }
  else
  {
   $block_type = ""\x01"";
   $padding = str_repeat(""\xFF"", $pad_length);
  }
  return ""\x00"" . $block_type . $padding . ""\x00"" . $data;
 }
  static function remove_PKCS1_padding($data, $blocksize)
 {
  assert(strlen($data) == $blocksize);
  $data = substr($data, 1);
  if($data{0} == '\0')
  die(""Block type 0 not implemented."");
  assert(($data{0} == ""\x01"") || ($data{0} == ""\x02""));
  $offset = strpos($data, ""\0"", 1);
  return substr($data, $offset + 1);
 }
  static function remove_KYP_padding($data, $blocksize)
 {
  assert(strlen($data) == $blocksize);
  $offset = strpos($data, ""\0"");
  return substr($data, 0, $offset);
 }
 static function binary_to_number($data)
 {
  $base = ""256"";
  $radix = ""1"";
  $result = ""0"";
  for($i = strlen($data) - 1; $i >= 0; $i--)
  {
   $digit = ord($data{$i});
   $part_res = bcmul($digit, $radix);
   $result = bcadd($result, $part_res);
   $radix = bcmul($radix, $base);
  }
  return $result;
  }
 static  function number_to_binary($number, $blocksize)
 {
  $base = ""256"";
  $result = """";
  $div = $number;
  while($div > 0)
  {
   $mod = bcmod($div, $base);
   $div = bcdiv($div, $base);
   $result = chr($mod) . $result;
  }
  return str_pad($result, $blocksize, ""\x00"", STR_PAD_LEFT);
 }
}

RSAProcessor class:
class RSAProcessor
{
 private $public_key = null;
 private $private_key = null;
 private $modulus = null;
 private $key_length = ""1024"";
 public function __construct($xmlRsakey=null,$type=null)
 {
         $xmlObj = null;
         if ($xmlRsakey==null) {
             $xmlObj = simplexml_load_file(""xmlfile/RSAKey.xml"");
          } elseif ($type==RSAKeyType::XMLFile) {
             $xmlObj = simplexml_load_file($xmlRsakey);
          } else {
             $xmlObj = simplexml_load_string($xmlRsakey);
          }
         $this->modulus = RSA::binary_to_number(base64_decode($xmlObj->Modulus));
         $this->public_key = RSA::binary_to_number(base64_decode($xmlObj->Exponent));
         $this->private_key = RSA::binary_to_number(base64_decode($xmlObj->D));
         $this->key_length = strlen(base64_decode($xmlObj->Modulus))*8;
 }
 public function getPublicKey() {
  return $this->public_key;
 }
 public function getPrivateKey() {
  return $this->private_key;
 }
 public function getKeyLength() {
  return $this->key_length;
 }
 public function getModulus() {
  return $this->modulus;
 }
 public function encrypt($data) {
  return base64_encode(RSA::rsa_encrypt($data,$this->public_key,$this->modulus,$this->key_length));
 }
  public function dencrypt($data) {
  return RSA::rsa_decrypt($data,$this->private_key,$this->modulus,$this->key_length);
 }
  public function sign($data) {
  return RSA::rsa_sign($data,$this->private_key,$this->modulus,$this->key_length);
 }
  public function verify($data) {
  return RSA::rsa_verify($data,$this->public_key,$this->modulus,$this->key_length);
 }
}


class RSAKeyType{
 const XMLFile = 0;
 const XMLString = 1;
}

certificate.xml:
<RSAKeyValue>
<Modulus>tCZiqDS5BVQQZDBUYbyeoP4rENN4mX5FZJjjMNfGbyzfzH45RY2/YsMaY0yI1jMCOpukvkUyl153tcn0LXhMCDdsEhhZPoKbPUGMniKtFGjs18rv/b5FFUUW1utgwoL8+WJqjOqhQGgvbja63X9+WMFP0nM3d8yudn9C/X55KyM=</Modulus>
    <Exponent>AQAB</Exponent>
    <P>5HXvmU4IfqUG2jFLSqi/BMEQ3x1NsUDvx3zN5O1p9yLLspJ4sqAt4RUkxzcGodYgBSdXsR9IGcPwjQfbx3a7nQ==</P>
    <Q>yd2hDCF/5Zqtz9DXjY1NRYGvBjTS4AQn83ERR46Y5eBSnLjpVjv6gPfARuhsUP44nikrQPvwPnjxQcOhJaOlvw==</Q>
    <DP>ztuqUplBP8qU5cN0dOlN7DQT3rFdw30Unv/2Pa5qIAc1gT72YmZ+pCrM3kSIkMicvY3d7NZyJkIv8MKI0ZZEUQ==</DP>
    <DQ>QFLJ5YarLWubZPQEK4vSCornTY/5ff51CIKH4ghTOjS/vkbBu4PDL+NCNpYLJcfMHMG7kap2BEIfhjgjGk5KGw==</DQ>
    <InverseQ>WE6TqpcexQJwt9Mnp1FbeLtarBcFkXVdBauouFKHcbHCfQjA3IjUrGTxgSO74O/4QSKqaF2gnlL6GI7gKuGbzQ==</InverseQ>  <D>czYtWDfHsFGv3fNOs+cGaB3E+xDTiw7HYGuquJz2qjk/s69x/zqFEKuIH8Ndq+eZYFQUCx+EGGxxENDkmYPa0z8wbfFI6JEHpxaLmQfpkkbSL1BJIp9Z5BNM2gy6jJqgbWwQPcN/4jpiMefHZWAqhMKqenUu1KIq1ZX6Bz5xKYk=</D>
</RSAKeyValue>

I appreciate your help what changes should I do in my class to avoid this error?
","","13","<php><encryption><rsa><public-key-encryption><private-key>","0","","0","2019-11-09 18:04:06","","3","","","","","2019-11-09 18:04:06",""
"58708473","Best practice for uploading HMAC secretKey and RSA/ECDSA public key in a RESTful web application","Imagine a web application with RESTful endpoint accepting HMAC secret keys / RSA or ECDSA public keys (for storage).
What would be the best user experience to submit such a key ?
Presumably the request body attribute is a String, so it can be convenient for using through curl for instance
I guess for HMAC it would be Base64#encode(keyBytes).
For RSA/ECDSA I'm kinda confused.
https://www.cryptosys.net/pki/rsakeyformats.html
Specifies that RSA public key may be either X.509, XML or PKCS#1.
So, is base64 a good choice here as well ? or it should be some kind of US_ASCCI / iso-8859-1 string ?

The assumption is that the user may come later and GET the keys, so it would be nice if he see the same values he submitted earlier (avoiding any string alteration due different text encoding)
","","12","<rest><rsa><submit><public-key-encryption><ecdsa>","0","","0","2019-11-05 09:41:10","","1","","","","","2019-11-05 09:41:10",""
"54466295","How can I identify the type of Encryption used for this Key","Hey this is a Public Key for Verification of a signature.
PTVW1ReUO1MoUwC71q2hHaZi4lbsYcaKcxPZikImYYN9gBJtnyy7phnkDOcoib_kSU3M98OZ_CmXINBc0FmYEBcecp-FS2ACcTIUnz2IdPcC5KRNoQrqxsExgbikmLXT
It's 96 bytes long with the first four bytes being
61

53

86

213

And this is the function to turn it back to an Array Buffer.
thing = thing.replace(/-/g, '+').replace(/_/g, '/');
// base64 to Uint8Array
var str = window.atob(thing);
var bytes = new Uint8Array(str.length);
for (var i = 0; i < str.length; i++) {
    bytes[i] = str.charCodeAt(i);
}
thing = bytes;

Does anyone know a good way to determine what method of encryption was used to form the key.
It comes from a U2F Fido... thingy
{
        'status':'ok',
        'errorMessage':'',
        'challenge':'eJVGU35uQVHxcOVTypKh8xbPMHcKgC3JVvI9BHWALdpZkaIkIFhnXsADpRUmKzyyniQVJyj3TXm4_iycqKNyyw',
        'timeout':60000,
        'allowCredentials':[
                        {'id':'PTVW1ReUO1MoUwC71q2hHaZi4lbsYcaKcxPZikImYYN9gBJtnyy7phnkDOcoib_kSU3M98OZ_CmXINBc0FmYEBcecp-FS2ACcTIUnz2IdPcC5KRNoQrqxsExgbikmLXT','type':'public-key'},

        ]
    }

","","11","<public-key-encryption><encryption-asymmetric><fido-u2f>","0","","0","2019-01-31 17:38:03","","0","","","","","2019-01-31 17:38:03",""
"58785369","eth_keys how to get a string public key so that I can put it into JSON","I have a private - public key signature that works correctly:
print(signature.verify_msg(bytes(transaction_hash.hexdigest().encode('utf-8')), first_wallet['public_key']))


verify_signature:
  0xf9671943931afb93e1613eb5d73a77ed961653f70562884709d45ffa774fa7f756b7e8b8a4bd11ffe71448eedddfc10e7dbcd4b069477c7665e6a978347b6e42
True

But I need to json serialize the public key so that the node can do the verifying, I have tryied many things. The first error is:

TypeError: Object of type 'PublicKey' is not JSON serializable

Then, if I serialize it with first_wallet['public_key'].to_hex(), when the node uses that public key to verify the message I get:

eth_keys.exceptions.ValidationError: Unexpected uncompressed public
  key length: Expected 64, but got 130 bytes

","Can you serialize it to bytes, it might be reading the length of the hex:
In [587]: bytes.fromhex(hex(first_wallet['public_key'])[2:])                                                                                                  
Out[587]: b'\xf9g\x19C\x93\x1a\xfb\x93\xe1a>\xb5\xd7:w\xed\x96\x16S\xf7\x05b\x88G\t\xd4_\xfawO\xa7\xf7V\xb7\xe8\xb8\xa4\xbd\x11\xff\xe7\x14H\xee\xdd\xdf\xc1\x0e}\xbc\xd4\xb0iG|ve\xe6\xa9x4{nB'




In [572]: len('0xf9671943931afb93e1613eb5d73a77ed961653f70562884709d45ffa774fa7f756b7e8b8a4bd11ffe71448eedddfc10e7dbcd4b069477c7665e6a978347b6e42')           
Out[572]: 130

In [573]: len(b'\xf9g\x19C\x93\x1a\xfb\x93\xe1a>\xb5\xd7:w\xed\x96\x16S\xf7\x05b\x88G\t\xd4_\xfawO\xa7\xf7V\xb7\xe8\xb8\xa4\xbd\x11\xff\xe7\x14H\xee\xdd\xdf\xc1\x0e}\xbc\xd4\xb0iG|ve\xe6\xa9x4{nB')                                                                                                                 
Out[573]: 64

","11","<python><public-key-encryption><eth-keys>","0","0","1","2019-11-10 05:52:57","","1","","","","","2019-11-10 02:56:12",""
"57469104","Is public key and privately key determined by their respective intrinsic values?","When it comes to public keys and private keys, are they determined by their respective intrinsic values, or by who (the public vs myself) holds it? In other words, if I switch the two before their first use, will the system still work?
From what I've read, it seems to me that the two are exchangeable, until you give one to the public and remain one for yourself privately. I wonder if it matters which key you give out.
Thanks.
","","10","<public-key-encryption>","0","","0","2019-08-12 22:39:03","","2","","","","","2019-08-12 22:39:03",""
"58401096","Witch Certificate I should choose for the TPID or for the token","Windows 10 Certificates, I want to activate my windows and I'm working offline so they asked me to give the the public key and more stuff
so I wanted to calculating the TPID (Trust Point Identifier), witch I wanted to use the (certmgr.msc) and take the public key certificate from their... the problem is I don't know witch certificate
I just want to know witch one I should choose
","","8","<windows><certificate><access-token><public-key-encryption><publickeytoken>","0","","0","2019-10-15 19:00:04","","0","","","","","2019-10-15 19:00:04",""
"58026979","PGP import key can be used by different users in the same Windows machine?","Can different users in the Windows server access the imported key which has been imported by another user.
When I imported gpg public key of my vendor, encryption worked well as by default the home for gpg is set to : c:\users\\appdata\roaming\gnupg
But can this be accessed by different user from batch script and run encryption?
","","8","<public-key-encryption><gnupg><pgp>","0","","0","2019-09-20 10:52:00","","0","","","","","2019-09-20 10:52:00",""
