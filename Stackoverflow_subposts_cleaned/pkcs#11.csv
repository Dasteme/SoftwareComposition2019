post_link,title,body_question,body_answer,viewcount,tags,score,score_answer,answercount,LastActivityDate,AcceptedAnswerId,CommentCount,FavoriteCount,LastEditorUserId,LastEditorDisplayName,LastEditDate,CreationDate,ClosedDate
"6157550","What is the difference between a PKCS12 keystore and a PKCS11 keystore?","I'm interested in Java-NSS libraries, and I'm reading the Sun's P11 Guide. I am confused on the following:

What is the difference between using a PKCS12 keystore and a PKCS11 keystore?

A keystore is just a keystore, right? Are there some differences? Can they be used interchangeably in any aspect?
","PKCS#12 is a file format (often called .p12 or .pfx) where you can store a private key and certificates. It's used for converting/transporting keys and certificates, mainly. If you export a private key + certificate from your browser, it's likely going to be in that format.
PKCS#11 is an interface, usually used to talk to hardware cryptographic tokens (often smart-cards or USB-tokens, which effectively are smart-cards embedded in a reader). This interface has a number of operations to make use of the keys and certificates. Some tokens are able to sign using the private key they contain, without the key being able to leave the device.
The point of this interface is to treat what handles the keys and certificates as a separate entity, without having to do the cryptographic operations that PKCS#11 offer (more specifically, the ones related to the private key).
When you use PKCS#11 with NSS, you're effectively using NSS as a black-box wrapped behind the PKCS#11 layer (it's effectively a software provider for what a PKCS#11 hardware token would be). There is a slight difference in the way Java uses NSS via PKCS#11 in that it doesn't require a PKCS#11 shared library (compared to other PKCS#11 libraries), so as such, it's not PKCS#11 strictly speaking, although it's very similar.
In Java, you may be able to get an RSAPrivateKey instance from a PKCS#11 store, use it to sign and decipher, without ever being able to get anything from its modulus. The security provider handling it will do the signing/deciphering via the library (and thus via the token, if that library is supported by a hardware token).
Coming back to the KeyStore in Java, it's an API that can allow you to load and use keys and certificates from files (you get various files formats such as JKS, PKCS#12, PEM, depending on your security provider) or from other underlying APIs (such as PKCS#11, more or less merged with NSS in the Sun provider, or the KeychainStore if you're on OSX and want to use the KeyChain as a KeyStore).
","35993","<java><security><pkcs#11><nss><pkcs12>","34","49","2","2018-02-16 08:56:38","6157716","3","15","608639","","2016-11-02 22:10:00","2011-05-27 20:49:27",""
"6157550","What is the difference between a PKCS12 keystore and a PKCS11 keystore?","I'm interested in Java-NSS libraries, and I'm reading the Sun's P11 Guide. I am confused on the following:

What is the difference between using a PKCS12 keystore and a PKCS11 keystore?

A keystore is just a keystore, right? Are there some differences? Can they be used interchangeably in any aspect?
","From Different types of keystore in Java -- Overview, the differences between PKCS12 and PKCS11 can be described as following

PKCS12, this is a standard keystore type which can be used in Java and
  other languages. You can find this keystore implementation at
  sun.security.pkcs12.PKCS12KeyStore. It usually has an extension of p12
  or pfx. You can store private keys, secret keys and certificates on
  this type. Unlike JKS, the private keys on PKCS12 keystore can be
  extracted in Java. This type is portable and can be operated with
  other libraries written in other languages such as C, C++ or C#.
Currently the default keystore type in Java is JKS, i.e the keystore
  format will be JKS if you don't specify the -storetype while creating
  keystore with keytool. However, the default keystore type will be
  changed to PKCS12 in Java 9 because its enhanced compatibility
  compared to JKS. You can check the default keystore type at
  $JRE/lib/security/java.security file:
PKCS11, this is a hardware keystore type. It provides an interface for
  the Java library to connect with hardware keystore devices such as
  SafeNet's Luna, nCipher or Smart cards. You can find this
  implementation at sun.security.pkcs11.P11KeyStore. When you load the
  keystore, you no need to create a specific provider with specific
  configuration. This keystore can store private keys, secret keys and
  certificates. When loading the keystore, the entries will be retrieved
  from the keystore and then converted into software entries.

","35993","<java><security><pkcs#11><nss><pkcs12>","34","3","2","2018-02-16 08:56:38","6157716","3","15","608639","","2016-11-02 22:10:00","2011-05-27 20:49:27",""
"4833989","Java Access Token PKCS11 Not found Provider","Hello I'm trying to access the keystore from my smartcard in Java. And I'm using the following code..
I'm using the Pkcs11 implementation of OpenSc http://www.opensc-project.org/opensc
File windows.cnf =   
name=dnie
library=C:\WINDOWS\system32\opensc-pkcs11.dll

Java Code =
String configName = ""windows.cnf""
 String PIN = ""####"";
 Provider p = new sun.security.pkcs11.SunPKCS11(configName);
 Security.addProvider(p);
 KeyStore keyStore = KeyStore.getInstance(""PKCS11"", ""SunPKCS11-dnie"");  =)(= 
 char[] pin = PIN.toCharArray();
 keyStore.load(null, pin);

When the execution goes by the line with =)(=  throws me the following exception 
java.security.KeyStoreException: PKCS11 not found

    at java.security.KeyStore.getInstance(KeyStore.java:635)
    at ObtenerDatos.LeerDatos(ObtenerDatos.java:52)
    at ObtenerDatos.obtenerNombre(ObtenerDatos.java:19)
    at main.main(main.java:27)
Caused by: java.security.NoSuchAlgorithmException: no such algorithm: PKCS11 for provider SunPKCS11-dnie
        at sun.security.jca.GetInstance.getService(GetInstance.java:70)
        at sun.security.jca.GetInstance.getInstance(GetInstance.java:190)
        at java.security.Security.getImpl(Security.java:662)
        at java.security.KeyStore.getInstance(KeyStore.java:632)

I think the problem is ""SunPKCS11-dnie"", but I don't know to put there. I had tried with a lot of combinations...
Anyone can help me... 
","Why don't you just pass the Provider directly as the second argument to KeyStore.getInstance(String, Provider). In your code you'd just do:
KeyStore keyStore = KeyStore.getInstance(""PKCS11"", p);

","27223","<java><security><digital-signature><pkcs#11>","7","3","4","2018-10-16 07:04:55","4834087","0","1","424559","","2011-01-30 20:03:35","2011-01-28 23:23:45",""
"4833989","Java Access Token PKCS11 Not found Provider","Hello I'm trying to access the keystore from my smartcard in Java. And I'm using the following code..
I'm using the Pkcs11 implementation of OpenSc http://www.opensc-project.org/opensc
File windows.cnf =   
name=dnie
library=C:\WINDOWS\system32\opensc-pkcs11.dll

Java Code =
String configName = ""windows.cnf""
 String PIN = ""####"";
 Provider p = new sun.security.pkcs11.SunPKCS11(configName);
 Security.addProvider(p);
 KeyStore keyStore = KeyStore.getInstance(""PKCS11"", ""SunPKCS11-dnie"");  =)(= 
 char[] pin = PIN.toCharArray();
 keyStore.load(null, pin);

When the execution goes by the line with =)(=  throws me the following exception 
java.security.KeyStoreException: PKCS11 not found

    at java.security.KeyStore.getInstance(KeyStore.java:635)
    at ObtenerDatos.LeerDatos(ObtenerDatos.java:52)
    at ObtenerDatos.obtenerNombre(ObtenerDatos.java:19)
    at main.main(main.java:27)
Caused by: java.security.NoSuchAlgorithmException: no such algorithm: PKCS11 for provider SunPKCS11-dnie
        at sun.security.jca.GetInstance.getService(GetInstance.java:70)
        at sun.security.jca.GetInstance.getInstance(GetInstance.java:190)
        at java.security.Security.getImpl(Security.java:662)
        at java.security.KeyStore.getInstance(KeyStore.java:632)

I think the problem is ""SunPKCS11-dnie"", but I don't know to put there. I had tried with a lot of combinations...
Anyone can help me... 
","I am not sure the problem is the name. It looks correct. ColinD's suggestion to pass the Provider instance should rule it out as a problem.
I am guessing that the problem is with the PKCS11 support. Like, you don't have a card in your reader, or the native code cannot access the reader. Have you tried using this driver in conjunction with some ""known good"" software, like Firefox or Thunderbird's security modules?
","27223","<java><security><digital-signature><pkcs#11>","7","4","4","2018-10-16 07:04:55","4834087","0","1","424559","","2011-01-30 20:03:35","2011-01-28 23:23:45",""
"4833989","Java Access Token PKCS11 Not found Provider","Hello I'm trying to access the keystore from my smartcard in Java. And I'm using the following code..
I'm using the Pkcs11 implementation of OpenSc http://www.opensc-project.org/opensc
File windows.cnf =   
name=dnie
library=C:\WINDOWS\system32\opensc-pkcs11.dll

Java Code =
String configName = ""windows.cnf""
 String PIN = ""####"";
 Provider p = new sun.security.pkcs11.SunPKCS11(configName);
 Security.addProvider(p);
 KeyStore keyStore = KeyStore.getInstance(""PKCS11"", ""SunPKCS11-dnie"");  =)(= 
 char[] pin = PIN.toCharArray();
 keyStore.load(null, pin);

When the execution goes by the line with =)(=  throws me the following exception 
java.security.KeyStoreException: PKCS11 not found

    at java.security.KeyStore.getInstance(KeyStore.java:635)
    at ObtenerDatos.LeerDatos(ObtenerDatos.java:52)
    at ObtenerDatos.obtenerNombre(ObtenerDatos.java:19)
    at main.main(main.java:27)
Caused by: java.security.NoSuchAlgorithmException: no such algorithm: PKCS11 for provider SunPKCS11-dnie
        at sun.security.jca.GetInstance.getService(GetInstance.java:70)
        at sun.security.jca.GetInstance.getInstance(GetInstance.java:190)
        at java.security.Security.getImpl(Security.java:662)
        at java.security.KeyStore.getInstance(KeyStore.java:632)

I think the problem is ""SunPKCS11-dnie"", but I don't know to put there. I had tried with a lot of combinations...
Anyone can help me... 
","I was also getting the error as below:
Caused by: java.security.NoSuchAlgorithmException: no such algorithm: PKCS11 for provider SunPKCS11
I am running the application from a jar through bat file.
I bat file I replaced the code : java - jar sign.jar 
with code:  java -Djava.security.debug=sunpkcs11,pkcs11 -jar SigningUtility.jar
And it solved the issue.
","27223","<java><security><digital-signature><pkcs#11>","7","7","4","2018-10-16 07:04:55","4834087","0","1","424559","","2011-01-30 20:03:35","2011-01-28 23:23:45",""
"4833989","Java Access Token PKCS11 Not found Provider","Hello I'm trying to access the keystore from my smartcard in Java. And I'm using the following code..
I'm using the Pkcs11 implementation of OpenSc http://www.opensc-project.org/opensc
File windows.cnf =   
name=dnie
library=C:\WINDOWS\system32\opensc-pkcs11.dll

Java Code =
String configName = ""windows.cnf""
 String PIN = ""####"";
 Provider p = new sun.security.pkcs11.SunPKCS11(configName);
 Security.addProvider(p);
 KeyStore keyStore = KeyStore.getInstance(""PKCS11"", ""SunPKCS11-dnie"");  =)(= 
 char[] pin = PIN.toCharArray();
 keyStore.load(null, pin);

When the execution goes by the line with =)(=  throws me the following exception 
java.security.KeyStoreException: PKCS11 not found

    at java.security.KeyStore.getInstance(KeyStore.java:635)
    at ObtenerDatos.LeerDatos(ObtenerDatos.java:52)
    at ObtenerDatos.obtenerNombre(ObtenerDatos.java:19)
    at main.main(main.java:27)
Caused by: java.security.NoSuchAlgorithmException: no such algorithm: PKCS11 for provider SunPKCS11-dnie
        at sun.security.jca.GetInstance.getService(GetInstance.java:70)
        at sun.security.jca.GetInstance.getInstance(GetInstance.java:190)
        at java.security.Security.getImpl(Security.java:662)
        at java.security.KeyStore.getInstance(KeyStore.java:632)

I think the problem is ""SunPKCS11-dnie"", but I don't know to put there. I had tried with a lot of combinations...
Anyone can help me... 
","Try the below code:
// Create instance of SunPKCS11 provider
String pkcs11Config = ""name=eToken\nlibrary=C:\\Windows\\System32\\eps2003csp11.dll"";
java.io.ByteArrayInputStream pkcs11ConfigStream = new java.io.ByteArrayInputStream(pkcs11Config.getBytes());
sun.security.pkcs11.SunPKCS11 providerPKCS11 = new sun.security.pkcs11.SunPKCS11(pkcs11ConfigStream);
java.security.Security.addProvider(providerPKCS11);

// Get provider KeyStore and login with PIN
String pin = ""12345678"";
java.security.KeyStore keyStore = java.security.KeyStore.getInstance(""PKCS11"", providerPKCS11);
keyStore.load(null, pin.toCharArray());

it is working fine for me.
","27223","<java><security><digital-signature><pkcs#11>","7","-1","4","2018-10-16 07:04:55","4834087","0","1","424559","","2011-01-30 20:03:35","2011-01-28 23:23:45",""
"5172069","Access restriction on sun.security.pkcs11.SunPKCS11","I'm trying to setup a PKCS11 provider for accessing a smartcard.
I installed a PKCS11 library on my system and followed the instructions in the Java PKCS#11 Reference Guide.
In the reference they simply create an instance of sun.security.pkcs11.SunPKCS11 and pass the name of the configuration file to the constructor.
When I try to compile the following code
Provider p = new sun.security.pkcs11.SunPKCS11(""pkcs11.cfg"");
Security.addProvider(p);

I get the following error.  

Access restriction: The constructor SunPKCS11(String) is not accessible due to restriction on required library /usr/lib/jvm/java-6-sun-1.6.0.24/jre/lib/ext/sunpkcs11.jar

What am I doing wrong?
I use Eclipse 3.5 with Java SE 1.6 under Ubuntu x86.
Best regards. 
","The reason for that error is certain classes are only suppose to be used by the Sun JVM and with newer versions of Eclipse a warning check was put in to warn the developer of improper/illegal use of classes.
Another stackoverflow thread recommends using the Bouncy Castle implementation.
Weird problem using sun.security.pkcs11.SunPKCS11: The specified procedure could not be found?
","27203","<java><security><provider><smartcard><pkcs#11>","15","4","5","2013-05-17 06:45:16","5172170","0","2","1139398","","2012-10-23 11:59:23","2011-03-02 19:02:38",""
"5172069","Access restriction on sun.security.pkcs11.SunPKCS11","I'm trying to setup a PKCS11 provider for accessing a smartcard.
I installed a PKCS11 library on my system and followed the instructions in the Java PKCS#11 Reference Guide.
In the reference they simply create an instance of sun.security.pkcs11.SunPKCS11 and pass the name of the configuration file to the constructor.
When I try to compile the following code
Provider p = new sun.security.pkcs11.SunPKCS11(""pkcs11.cfg"");
Security.addProvider(p);

I get the following error.  

Access restriction: The constructor SunPKCS11(String) is not accessible due to restriction on required library /usr/lib/jvm/java-6-sun-1.6.0.24/jre/lib/ext/sunpkcs11.jar

What am I doing wrong?
I use Eclipse 3.5 with Java SE 1.6 under Ubuntu x86.
Best regards. 
","Look into the projects's properties and open the Libraries tab. I assume you have set the JRE System Library to an execution environment. Change it to the workspace JRE or select a specific JRE manually. 
Background:
By selecting an execution environment you say that you want to write an app that is compliant to the Java API. The class sun.security.pkcs11.SunPKCS11 is located in the sun package which marks it as proprietary to Sun Java implementation and is not part of the standard Java API.
","27203","<java><security><provider><smartcard><pkcs#11>","15","21","5","2013-05-17 06:45:16","5172170","0","2","1139398","","2012-10-23 11:59:23","2011-03-02 19:02:38",""
"5172069","Access restriction on sun.security.pkcs11.SunPKCS11","I'm trying to setup a PKCS11 provider for accessing a smartcard.
I installed a PKCS11 library on my system and followed the instructions in the Java PKCS#11 Reference Guide.
In the reference they simply create an instance of sun.security.pkcs11.SunPKCS11 and pass the name of the configuration file to the constructor.
When I try to compile the following code
Provider p = new sun.security.pkcs11.SunPKCS11(""pkcs11.cfg"");
Security.addProvider(p);

I get the following error.  

Access restriction: The constructor SunPKCS11(String) is not accessible due to restriction on required library /usr/lib/jvm/java-6-sun-1.6.0.24/jre/lib/ext/sunpkcs11.jar

What am I doing wrong?
I use Eclipse 3.5 with Java SE 1.6 under Ubuntu x86.
Best regards. 
","As far as I have come to understand, there are two ways of using PKCS#11 tokens in Java: using the Sun APIs, and using some proprietary implementation. Each has its advantages and disadvantages.
Sun'API main advantage is that it maps PKCS#11 tokens onto regular KeyStores. BouncyCastle can thus access the private keys in the token without actually figuring out that it is interacting with an hardware device. Moreover any native dependency is already bundled with Sun's JVM, and you don't have to worry about porting or supporting native code on different platforms. The main disadvantage is that it is non standard, so you are not guaranteed to find it on any JVM.
The commercial APIs (see IAIK's PKCS11 wrapper) are good, and even open sourced, but they have two disadvantages: they are made to work with another API (which you have to pay for...), so they do not expose the token as a KeyStore and you cannot use BouncyCastle transparently, and they have a native component which you have to maintain and distribute. If you have to work with PKCS#11 in a browser, you know what a pain that is...
","27203","<java><security><provider><smartcard><pkcs#11>","15","3","5","2013-05-17 06:45:16","5172170","0","2","1139398","","2012-10-23 11:59:23","2011-03-02 19:02:38",""
"5172069","Access restriction on sun.security.pkcs11.SunPKCS11","I'm trying to setup a PKCS11 provider for accessing a smartcard.
I installed a PKCS11 library on my system and followed the instructions in the Java PKCS#11 Reference Guide.
In the reference they simply create an instance of sun.security.pkcs11.SunPKCS11 and pass the name of the configuration file to the constructor.
When I try to compile the following code
Provider p = new sun.security.pkcs11.SunPKCS11(""pkcs11.cfg"");
Security.addProvider(p);

I get the following error.  

Access restriction: The constructor SunPKCS11(String) is not accessible due to restriction on required library /usr/lib/jvm/java-6-sun-1.6.0.24/jre/lib/ext/sunpkcs11.jar

What am I doing wrong?
I use Eclipse 3.5 with Java SE 1.6 under Ubuntu x86.
Best regards. 
","Go to your project properties, Java Build Path pane, and expand the JRE System Library entry.  Click Access rules and click the Edit... button.  Add an Access Rule that makes Accessible the Rule Pattern sun/security/pkcs11/**.  This will make Eclipse stop whining.  
","27203","<java><security><provider><smartcard><pkcs#11>","15","6","5","2013-05-17 06:45:16","5172170","0","2","1139398","","2012-10-23 11:59:23","2011-03-02 19:02:38",""
"5172069","Access restriction on sun.security.pkcs11.SunPKCS11","I'm trying to setup a PKCS11 provider for accessing a smartcard.
I installed a PKCS11 library on my system and followed the instructions in the Java PKCS#11 Reference Guide.
In the reference they simply create an instance of sun.security.pkcs11.SunPKCS11 and pass the name of the configuration file to the constructor.
When I try to compile the following code
Provider p = new sun.security.pkcs11.SunPKCS11(""pkcs11.cfg"");
Security.addProvider(p);

I get the following error.  

Access restriction: The constructor SunPKCS11(String) is not accessible due to restriction on required library /usr/lib/jvm/java-6-sun-1.6.0.24/jre/lib/ext/sunpkcs11.jar

What am I doing wrong?
I use Eclipse 3.5 with Java SE 1.6 under Ubuntu x86.
Best regards. 
","There is one other cause if you use a 64 bit runtime on Windows. In that case, the necessary classes are simply not present.
Solution: Use a 32 bit runtime.
http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6880559
","27203","<java><security><provider><smartcard><pkcs#11>","15","6","5","2013-05-17 06:45:16","5172170","0","2","1139398","","2012-10-23 11:59:23","2011-03-02 19:02:38",""
"10553377","How to make a digital signature in a web application (JavaScript) using a smartcard?","We have written a document management system and would like to digitally sign documents using the web client. Our Java client application is already able to apply and check digital signature, but we would like to make signature even with our web client. This is written in GWT and so, when run on the client side, it is a JavaScript application.
We not want to create a Java applet and download it on the client and execute it. We would like to use the browser security device or the browser API in order to sign a document. We would also like to keep the complete document server side, and move to the client only the document hash.
We feel this should be possible using NSS  or npapi/npruntime, but we did not find any information about this. (By the way, is npruntime available also in IE? Should we use ActiveX for achieving the same result with IE?)
Do you have any hints?
","After some more googling I found the answer. Mozilla export part of its NSS module via window.crypto object. A more standard way of doing such operation is probably via DOMCrypt, that is currently discusses in W3C.
Google Chrome developer will wait W3C to standardize DOMCrypt, while Microsoft require the use of an ActiveX object as explained here (this works even with Firefox/Chrome/Opera on Windows).
","23614","<digital-signature><npapi><pkcs#11>","8","9","5","2019-04-18 16:29:11","10561313","1","9","472495","","2016-05-24 18:33:32","2012-05-11 14:31:46",""
"10553377","How to make a digital signature in a web application (JavaScript) using a smartcard?","We have written a document management system and would like to digitally sign documents using the web client. Our Java client application is already able to apply and check digital signature, but we would like to make signature even with our web client. This is written in GWT and so, when run on the client side, it is a JavaScript application.
We not want to create a Java applet and download it on the client and execute it. We would like to use the browser security device or the browser API in order to sign a document. We would also like to keep the complete document server side, and move to the client only the document hash.
We feel this should be possible using NSS  or npapi/npruntime, but we did not find any information about this. (By the way, is npruntime available also in IE? Should we use ActiveX for achieving the same result with IE?)
Do you have any hints?
","In Win/IE you can still use CAPICOM http://en.wikipedia.org/wiki/CAPICOM without any third party ActiveX or external libraries. This works anywhere IE is installed.  This is being retired however.
Below is what I am using to sign in IE. I call this with e.g:   var signature = signDigest(stringToBeSigned);
function signDigest(text) {
if (window.event)
    window.event.cancelBubble = true;

var dest = sign(text); //TODO  

return dest;
}

// CAPICOM constants  

var CAPICOM_STORE_OPEN_READ_ONLY = 0;
var CAPICOM_CURRENT_USER_STORE = 2;
var CAPICOM_CERTIFICATE_FIND_SHA1_HASH = 0;
var CAPICOM_CERTIFICATE_FIND_EXTENDED_PROPERTY = 6;
var CAPICOM_CERTIFICATE_FIND_TIME_VALID = 9;
var CAPICOM_CERTIFICATE_FIND_KEY_USAGE = 12;
var CAPICOM_DIGITAL_SIGNATURE_KEY_USAGE = 0x00000080;
var CAPICOM_AUTHENTICATED_ATTRIBUTE_SIGNING_TIME = 0;
var CAPICOM_INFO_SUBJECT_SIMPLE_NAME = 0;
var CAPICOM_ENCODE_BASE64 = 0;
var CAPICOM_E_CANCELLED = -2138568446;
var CERT_KEY_SPEC_PROP_ID = 6;

function IsCAPICOMInstalled() {
    if (typeof (oCAPICOM) == ""object"") {
        if ((oCAPICOM.object != null)) {
            // We found CAPICOM!  
            return true;
        }
    }
}

function FindCertificateByHash() {

    try {
        // instantiate the CAPICOM objects  
        var MyStore = new ActiveXObject(""CAPICOM.Store"");
        // open the current users personal certificate store  
        MyStore.Open(CAPICOM_CURRENT_USER_STORE, ""My"", CAPICOM_STORE_OPEN_READ_ONLY);

        // find all of the certificates that have the specified hash  
        var FilteredCertificates = MyStore.Certificates.Find(CAPICOM_CERTIFICATE_FIND_SHA1_HASH, strUserCertigicateThumbprint);

        var Signer = new ActiveXObject(""CAPICOM.Signer"");
        Signer.Certificate = FilteredCertificates.Item(1);
        return Signer;

        // Clean Up  
        MyStore = null;
        FilteredCertificates = null;
    }
    catch (e) {
        if (e.number != CAPICOM_E_CANCELLED) {
            return new ActiveXObject(""CAPICOM.Signer"");
        }
    }
}

function sign(src) {
    if (window.crypto && window.crypto.signText)
        return sign_NS(src);
    else

        return sign_IE(src);
}

function sign_NS(src) {
    var s = crypto.signText(src, ""ask"");
    return s;
}

function sign_IE(src) {
    try {
        // instantiate the CAPICOM objects  
        var SignedData = new ActiveXObject(""CAPICOM.SignedData"");
        var TimeAttribute = new ActiveXObject(""CAPICOM.Attribute"");

        // Set the data that we want to sign  
        SignedData.Content = src;
        var Signer = FindCertificateByHash();


        // Set the time in which we are applying the signature  
        var Today = new Date();
        TimeAttribute.Name = CAPICOM_AUTHENTICATED_ATTRIBUTE_SIGNING_TIME;
        TimeAttribute.Value = Today.getVarDate();
        Today = null;
        Signer.AuthenticatedAttributes.Add(TimeAttribute);

        // Do the Sign operation  
        var szSignature = SignedData.Sign(Signer, true, CAPICOM_ENCODE_BASE64);
        return szSignature;
    }
    catch (e) {
        if (e.number != CAPICOM_E_CANCELLED) {
            alert(""An error occurred when attempting to sign the content, the error was: "" + e.description);
        }
    }
    return """";
}  

I had some issues with encoding,etc, so I have included my controller (.net) as well
        byte[] decbuff = Convert.FromBase64String(signature);


    //CAPICOM USES 16 BIT ENCODING
    Encoding utf16Enc = Encoding.GetEncoding(""UTF-16LE"");


    byte[] utf16Data = utf16Enc.GetBytes(getContent);


    ContentInfo content = new ContentInfo(utf16Data);

    System.Security.Cryptography.Pkcs.SignedCms cms = new System.Security.Cryptography.Pkcs.SignedCms(content,true);
    cms.Decode(decbuff);

    int length = decbuff.Length;         

    X509Certificate2 cert = cms.SignerInfos[0].Certificate;


    X509Chain chain = new X509Chain();
    bool theVal = chain.Build(cert);
    cms.CheckHash();       
    cms.CheckSignature(false);

","23614","<digital-signature><npapi><pkcs#11>","8","0","5","2019-04-18 16:29:11","10561313","1","9","472495","","2016-05-24 18:33:32","2012-05-11 14:31:46",""
"10553377","How to make a digital signature in a web application (JavaScript) using a smartcard?","We have written a document management system and would like to digitally sign documents using the web client. Our Java client application is already able to apply and check digital signature, but we would like to make signature even with our web client. This is written in GWT and so, when run on the client side, it is a JavaScript application.
We not want to create a Java applet and download it on the client and execute it. We would like to use the browser security device or the browser API in order to sign a document. We would also like to keep the complete document server side, and move to the client only the document hash.
We feel this should be possible using NSS  or npapi/npruntime, but we did not find any information about this. (By the way, is npruntime available also in IE? Should we use ActiveX for achieving the same result with IE?)
Do you have any hints?
","Now you can do that. Web application based on PKCS#11 smart cards or tokens can be implemented by using the Silverlight version of NCryptoki. See http://www.ncryptoki.com
You have two chanches:
1) using the Silverlight version of NCryptoki and develop your own Silverlight User Control that implements your logic, a Digital Signature in your case, using PKCS#11 functions supplied by the smart card
2) using the JQuery plugin based on the above Silverlight version and implement your application in JavaScript by calling the PKCS#11 functions in JavaScript
Also, you can use the Silverlight version of NDigitSign (see again http://www.ncryptoki.com) that does all you need and can be implemented in any web browser.
","23614","<digital-signature><npapi><pkcs#11>","8","-1","5","2019-04-18 16:29:11","10561313","1","9","472495","","2016-05-24 18:33:32","2012-05-11 14:31:46",""
"10553377","How to make a digital signature in a web application (JavaScript) using a smartcard?","We have written a document management system and would like to digitally sign documents using the web client. Our Java client application is already able to apply and check digital signature, but we would like to make signature even with our web client. This is written in GWT and so, when run on the client side, it is a JavaScript application.
We not want to create a Java applet and download it on the client and execute it. We would like to use the browser security device or the browser API in order to sign a document. We would also like to keep the complete document server side, and move to the client only the document hash.
We feel this should be possible using NSS  or npapi/npruntime, but we did not find any information about this. (By the way, is npruntime available also in IE? Should we use ActiveX for achieving the same result with IE?)
Do you have any hints?
","Currently (may 2016) it is not possible. 
Chrome has dropped Java support. 'Windows edge' will not have. IE11 support is bad, and Oracle has decided to discontinue the java plugin. It would only be possible with Firefox, older versions of IE and the Java plugin.
The new WebCryptographyApi standard provides digital signature support for browsers, but it does not have pcks#11 support
Real e-goverment solution to solve this:
1) Install a local Java application on the user's PC. The application listens on a port as, for example 5678
2) In your page, javascript detects whether there is support for applets
3) If there is no support, connects to the application in the form http://127.0.01:5678/sign and sends the data to sign.
4) The application is local and has no trouble using the operating system keystore, which includes drivers PKCS # 11. Make digital signature and prepares the result
5) page javascript periodically query the result and retrieves it when ready
","23614","<digital-signature><npapi><pkcs#11>","8","4","5","2019-04-18 16:29:11","10561313","1","9","472495","","2016-05-24 18:33:32","2012-05-11 14:31:46",""
"10553377","How to make a digital signature in a web application (JavaScript) using a smartcard?","We have written a document management system and would like to digitally sign documents using the web client. Our Java client application is already able to apply and check digital signature, but we would like to make signature even with our web client. This is written in GWT and so, when run on the client side, it is a JavaScript application.
We not want to create a Java applet and download it on the client and execute it. We would like to use the browser security device or the browser API in order to sign a document. We would also like to keep the complete document server side, and move to the client only the document hash.
We feel this should be possible using NSS  or npapi/npruntime, but we did not find any information about this. (By the way, is npruntime available also in IE? Should we use ActiveX for achieving the same result with IE?)
Do you have any hints?
","One project that I have been involved with did this with Chrome and Native Messaging:
https://github.com/CACBridge/ChromeCAC
This requires the installation of the chrome plugin, but otherwise works great. Ideal for e.g. Intranet/Group environments where you know you will need to do this ahead of time.
","23614","<digital-signature><npapi><pkcs#11>","8","0","5","2019-04-18 16:29:11","10561313","1","9","472495","","2016-05-24 18:33:32","2012-05-11 14:31:46",""
"8792899","Website PKSC #11 smart card authentication and SSL client certificates","We are creating a three-factor authentication for a website due to a legal requirements in one Scandinavian country. The customer is using NetID branded browser plug-ins to do a PKCS #11 certificate authentication in the browser. The smartcards are supplied centrally by a partner on the customer.
This subject does not have much on-line resources or tutorials available. Would someone have any pointers to example implementations or tutorials how to do PKCS11 authentication in a web browser?
EDIT: Found about SSL client certificates

Looks like the authentication method is SSL Client Certificate
How do we manage relationship between users and their smartcards? 
Do users deliver us their public keys and we authenticate against them?
Do we need to sign / provision each user individually using our own certicate?
Do all user smartcards contain a ""generic"" key which we test against a provider certificate?

http://www.garex.net/apache/
http://www.impetus.us/~rjmooney/projects/misc/clientcertauth.html 
https://en.wikipedia.org/wiki/PKCS11
https://service.secmaker.com/examples/plugin.aspx 
","Don't do it with JavaScript. JavaScript cryptography has a number of problems, and I don't think many browsers will let you access the PKCS#11 directly from JavaScript (running from within the page) easily.
A number of browsers support PKCS#11 for HTTPS authentication, that is, using PKCS#11 for client-certificate authentication as part of the SSL/TLS connection (as part of HTTPS).
Assuming you already have a PKCS#11 library available (let's say OpenSC in /usr/lib/opensc.so), you can configure Firefox to use it:

Preferences -> Advanced -> Encryption, go in ""Security Devices""
Click on 'Load'
Choose a module name (for your own reference in the list) and point to the /usr/lib/opensc.so file (or whatever the appropriate PKCS#11 module is in your case).

Then, when you connect to a website that requests a client certificate, the browser should offer you to choose a certificate from the PKCS#11-enabled device.
The PKCS#11 configuration mechanism will vary from one browser to another, but it's usually a matter of setting the path of the PKCS#11 module.
As far as I know, Internet Explorer doesn't use PKCS#11 (at least not without extra support), but should rely on MS CryptoAPI and InfoCards instead.
On the server side, you will need to configure the requirement for client-certificate authentication. Nothing specific to PKCS#11 there.

Following your edit, you should read about Certification Authorities (CAs) and Public Key Infrastructures (PKIs). You could deploy your own internal PKI, but it sounds like your requirements are to integrate with an existing PKI. This is an administrative problem mainly, so check with those making this requirement to see on which CA they want to rely (probably theirs).
When using client-certificate authentication, the client will present its certificate (which contains the user's public key and other attributes, including an identifier: the Subject Distinguished Name) and the SSL/TLS handshake will ensure that the client has the private key for this public key certificate. Then, the server verifies this certificate against CAs it trusts (that's also an SSL setting on the server side).
Once you've configured which CAs you want to trust, the mapping is usually done using the certificate's Subject DN to an internal user name if needed. There is no hard rule for this, since it depends on your internal user naming scheme. This being said, it's often sensible to use the full Subject DN as the user name.
","17836","<http><authentication><ssl><smartcard><pkcs#11>","14","8","3","2019-04-19 02:01:51","8793057","0","10","315168","","2012-01-09 18:03:26","2012-01-09 17:55:13",""
"8792899","Website PKSC #11 smart card authentication and SSL client certificates","We are creating a three-factor authentication for a website due to a legal requirements in one Scandinavian country. The customer is using NetID branded browser plug-ins to do a PKCS #11 certificate authentication in the browser. The smartcards are supplied centrally by a partner on the customer.
This subject does not have much on-line resources or tutorials available. Would someone have any pointers to example implementations or tutorials how to do PKCS11 authentication in a web browser?
EDIT: Found about SSL client certificates

Looks like the authentication method is SSL Client Certificate
How do we manage relationship between users and their smartcards? 
Do users deliver us their public keys and we authenticate against them?
Do we need to sign / provision each user individually using our own certicate?
Do all user smartcards contain a ""generic"" key which we test against a provider certificate?

http://www.garex.net/apache/
http://www.impetus.us/~rjmooney/projects/misc/clientcertauth.html 
https://en.wikipedia.org/wiki/PKCS11
https://service.secmaker.com/examples/plugin.aspx 
","Now you can do that. Web authentication using PKCS#11 smart cards or tokens can be implemented by using the Silverlight version of NCryptoki. See http://www.ncryptoki.com
You have two chanches:
1) using the Silverlight version of NCryptoki and develop your own Silverlight User Control that implements your authentication protocol using PKCS#11 functions supplied by the smart card
2) using the JQuery plugin based on the above Silverlight version and implement the authentication protocol in JavaScript by calling the PKCS#11 functions in JavaScript 
","17836","<http><authentication><ssl><smartcard><pkcs#11>","14","2","3","2019-04-19 02:01:51","8793057","0","10","315168","","2012-01-09 18:03:26","2012-01-09 17:55:13",""
"8792899","Website PKSC #11 smart card authentication and SSL client certificates","We are creating a three-factor authentication for a website due to a legal requirements in one Scandinavian country. The customer is using NetID branded browser plug-ins to do a PKCS #11 certificate authentication in the browser. The smartcards are supplied centrally by a partner on the customer.
This subject does not have much on-line resources or tutorials available. Would someone have any pointers to example implementations or tutorials how to do PKCS11 authentication in a web browser?
EDIT: Found about SSL client certificates

Looks like the authentication method is SSL Client Certificate
How do we manage relationship between users and their smartcards? 
Do users deliver us their public keys and we authenticate against them?
Do we need to sign / provision each user individually using our own certicate?
Do all user smartcards contain a ""generic"" key which we test against a provider certificate?

http://www.garex.net/apache/
http://www.impetus.us/~rjmooney/projects/misc/clientcertauth.html 
https://en.wikipedia.org/wiki/PKCS11
https://service.secmaker.com/examples/plugin.aspx 
","Currently you can't do PKCS#11 inside browser process. All suitable native technology is either dying (NPAPI) or not implemented through all browsers. You need to do it outside browser and create some interconnecting communication.
","17836","<http><authentication><ssl><smartcard><pkcs#11>","14","3","3","2019-04-19 02:01:51","8793057","0","10","315168","","2012-01-09 18:03:26","2012-01-09 17:55:13",""
"8247115","java keytool with opensc pkcs#11 provider only works with debug option enabled","I have the latest opensc 0.12.2 running on ubuntu 11.10 with OpenJDK ( java version ""1.6.0_22"")
I can read my smartcard (a Feitian ePass PKI) with
pkcs15-tool --dump

Now i try to use my smartcard with keytool:
keytool 
   -providerClass sun.security.pkcs11.SunPKCS11 \
   -providerArg /etc/opensc/opensc-java.cfg \
   -keystore NONE -storetype PKCS11 -list 

which results in an error:
keytool error: java.security.KeyStoreException: PKCS11 not found
java.security.KeyStoreException: PKCS11 not found
    at java.security.KeyStore.getInstance(KeyStore.java:603)
    at sun.security.tools.KeyTool.doCommands(KeyTool.java:621)
    at sun.security.tools.KeyTool.run(KeyTool.java:194)
    at sun.security.tools.KeyTool.main(KeyTool.java:188)
Caused by: java.security.NoSuchAlgorithmException: PKCS11 KeyStore not available
    at sun.security.jca.GetInstance.getInstance(GetInstance.java:159)
    at java.security.Security.getImpl(Security.java:696)
    at java.security.KeyStore.getInstance(KeyStore.java:600)
    ... 3 more

When i run the same command with debug options enabled like this:
keytool 
   -providerClass sun.security.pkcs11.SunPKCS11 \
   -providerArg /etc/opensc/opensc-java.cfg \
   -keystore NONE -storetype PKCS11 -list \
   -J-Djava.security.debug=sunpkcs11

it suddenly works:
... debug infos ...
Enter keystore password:  
sunpkcs11: login succeeded

Keystore type: PKCS11
Keystore provider: SunPKCS11-OpenSC

Your keystore contains 2 entries
...
Certificate fingerprint (MD5): ...
...
Certificate fingerprint (MD5): ...

The same behaviour when i configure it statically:
$ grep opensc /usr/lib/jvm/java-6-openjdk/jre/lib/security/java.security
security.provider.7=sun.security.pkcs11.SunPKCS11 /etc/opensc/opensc-java.cfg

and my config
$ cat /etc/opensc/opensc-java.cfg
name = OpenSC
description = SunPKCS11 w/ OpenSC Smart card Framework
library = /usr/lib/opensc-pkcs11.so

My guess it, it has something to do with openjdk or internal package sun.security which might usually not be used because it is an internal package. Activating Debug options might activate this internal package?
","I can confirm this behavior using java JDK 1.6.0_20 
Even a simple java program only works with -Djava.security.debug=sunpkcs11 set.
String configName = ""/etc/pkcs11_java.cfg"";
Provider p = new sun.security.pkcs11.SunPKCS11(configName);
keyStore = KeyStore.getInstance(""PKCS11"", p);

with /etc/pkcs11_java.cfg
name=OpenSC
description = SunPKCS11 via OpenSC
library=/usr/local/lib/opensc-pkcs11.so

","17000","<java><smartcard><keytool><pkcs#11>","11","2","3","2014-01-07 21:47:20","16776155","0","8","","","","2011-11-23 18:14:51",""
"8247115","java keytool with opensc pkcs#11 provider only works with debug option enabled","I have the latest opensc 0.12.2 running on ubuntu 11.10 with OpenJDK ( java version ""1.6.0_22"")
I can read my smartcard (a Feitian ePass PKI) with
pkcs15-tool --dump

Now i try to use my smartcard with keytool:
keytool 
   -providerClass sun.security.pkcs11.SunPKCS11 \
   -providerArg /etc/opensc/opensc-java.cfg \
   -keystore NONE -storetype PKCS11 -list 

which results in an error:
keytool error: java.security.KeyStoreException: PKCS11 not found
java.security.KeyStoreException: PKCS11 not found
    at java.security.KeyStore.getInstance(KeyStore.java:603)
    at sun.security.tools.KeyTool.doCommands(KeyTool.java:621)
    at sun.security.tools.KeyTool.run(KeyTool.java:194)
    at sun.security.tools.KeyTool.main(KeyTool.java:188)
Caused by: java.security.NoSuchAlgorithmException: PKCS11 KeyStore not available
    at sun.security.jca.GetInstance.getInstance(GetInstance.java:159)
    at java.security.Security.getImpl(Security.java:696)
    at java.security.KeyStore.getInstance(KeyStore.java:600)
    ... 3 more

When i run the same command with debug options enabled like this:
keytool 
   -providerClass sun.security.pkcs11.SunPKCS11 \
   -providerArg /etc/opensc/opensc-java.cfg \
   -keystore NONE -storetype PKCS11 -list \
   -J-Djava.security.debug=sunpkcs11

it suddenly works:
... debug infos ...
Enter keystore password:  
sunpkcs11: login succeeded

Keystore type: PKCS11
Keystore provider: SunPKCS11-OpenSC

Your keystore contains 2 entries
...
Certificate fingerprint (MD5): ...
...
Certificate fingerprint (MD5): ...

The same behaviour when i configure it statically:
$ grep opensc /usr/lib/jvm/java-6-openjdk/jre/lib/security/java.security
security.provider.7=sun.security.pkcs11.SunPKCS11 /etc/opensc/opensc-java.cfg

and my config
$ cat /etc/opensc/opensc-java.cfg
name = OpenSC
description = SunPKCS11 w/ OpenSC Smart card Framework
library = /usr/lib/opensc-pkcs11.so

My guess it, it has something to do with openjdk or internal package sun.security which might usually not be used because it is an internal package. Activating Debug options might activate this internal package?
","I got the same problem today and I digged onto the java sources until I found the source of the problem. I know this question is quite old and already have an accepted answer, but that one is not a real answer.
Basically, the SunPKCS11 provider does list all available slots, then, get the slot you specified in your config, and give the error (since you do not specified any slot and fot its default value).
When in debug, after listing all available slots, it does list all slots with a smartcard inserted. After having print all these information about the slot list, it does initialise its slotid variable overwriting what you wrote (or forget to write) in your config. The new value is a correct one since it is read from the opensc defaults.
This is the relevant code from SunPKCS11.java from openjdk project:
    long slotID = config.getSlotID();
    // ....
        if ((slotID < 0) || showInfo) {
            long[] slots = p11.C_GetSlotList(false);
            if (showInfo) {
                System.out.println(""All slots: "" + toString(slots));
                slots = p11.C_GetSlotList(true);
                System.out.println(""Slots with tokens: "" + toString(slots));
            }
            if (slotID < 0) {
                if ((slotListIndex < 0) || (slotListIndex >= slots.length)) {
                    throw new ProviderException(""slotListIndex is "" + slotListIndex
                        + "" but token only has "" + slots.length + "" slots"");
                }
                slotID = slots[slotListIndex];
            }
        }
        this.slotID = slotID;

So, a workaround is to always include in your config a negative value like slot = -1, so that the provider will always look for the right one.
","17000","<java><smartcard><keytool><pkcs#11>","11","10","3","2014-01-07 21:47:20","16776155","0","8","","","","2011-11-23 18:14:51",""
"8247115","java keytool with opensc pkcs#11 provider only works with debug option enabled","I have the latest opensc 0.12.2 running on ubuntu 11.10 with OpenJDK ( java version ""1.6.0_22"")
I can read my smartcard (a Feitian ePass PKI) with
pkcs15-tool --dump

Now i try to use my smartcard with keytool:
keytool 
   -providerClass sun.security.pkcs11.SunPKCS11 \
   -providerArg /etc/opensc/opensc-java.cfg \
   -keystore NONE -storetype PKCS11 -list 

which results in an error:
keytool error: java.security.KeyStoreException: PKCS11 not found
java.security.KeyStoreException: PKCS11 not found
    at java.security.KeyStore.getInstance(KeyStore.java:603)
    at sun.security.tools.KeyTool.doCommands(KeyTool.java:621)
    at sun.security.tools.KeyTool.run(KeyTool.java:194)
    at sun.security.tools.KeyTool.main(KeyTool.java:188)
Caused by: java.security.NoSuchAlgorithmException: PKCS11 KeyStore not available
    at sun.security.jca.GetInstance.getInstance(GetInstance.java:159)
    at java.security.Security.getImpl(Security.java:696)
    at java.security.KeyStore.getInstance(KeyStore.java:600)
    ... 3 more

When i run the same command with debug options enabled like this:
keytool 
   -providerClass sun.security.pkcs11.SunPKCS11 \
   -providerArg /etc/opensc/opensc-java.cfg \
   -keystore NONE -storetype PKCS11 -list \
   -J-Djava.security.debug=sunpkcs11

it suddenly works:
... debug infos ...
Enter keystore password:  
sunpkcs11: login succeeded

Keystore type: PKCS11
Keystore provider: SunPKCS11-OpenSC

Your keystore contains 2 entries
...
Certificate fingerprint (MD5): ...
...
Certificate fingerprint (MD5): ...

The same behaviour when i configure it statically:
$ grep opensc /usr/lib/jvm/java-6-openjdk/jre/lib/security/java.security
security.provider.7=sun.security.pkcs11.SunPKCS11 /etc/opensc/opensc-java.cfg

and my config
$ cat /etc/opensc/opensc-java.cfg
name = OpenSC
description = SunPKCS11 w/ OpenSC Smart card Framework
library = /usr/lib/opensc-pkcs11.so

My guess it, it has something to do with openjdk or internal package sun.security which might usually not be used because it is an internal package. Activating Debug options might activate this internal package?
","Adding the debug flag to the command line worked for me:
keytool -providerClass sun.security.pkcs11.SunPKCS11 \
  -providerArg /home/hans/Desktop/smartcards/opensc-java.cfg \
  -providerName SunPKCS11-OpenSC -keystore NONE -storetype PKCS11 \
  -list \
  -J-Djava.security.debug=sunpkcs11

Or manually specifying the slot in the cfg file:
name = OpenSC
description = SunPKCS11 w/ OpenSC Smart card Framework
library = /usr/lib/x86_64-linux-gnu/opensc-pkcs11.so
slot = 2

","17000","<java><smartcard><keytool><pkcs#11>","11","3","3","2014-01-07 21:47:20","16776155","0","8","","","","2011-11-23 18:14:51",""
"21167927","Getting certificates from PKCS11 Smartcard without PIN/password","Abstract: when using JCA over PKCS11 over OpenSC, the PIN is requested when extracting certificates.
I have got an application that needs to sign using a smartcard. The smartcard is supported by OpenSC, so I am using the Java-built-in pkcs11 wrapper provider to use it. For functional reasons, I need to obtain the certificates in the card without a PIN requested. If the user finally signs, then, of course, the PIN is needed.
I see I can do it from command line without providing a PIN:
pkcs11-tool --module C:\WINDOWS\system32\opensc-pkcs11.dll -r -a 50-MDS_Signature -y cert -o p.cer
Using slot 1 with a present token (0x1)

So far, so good.
The documentation from Oracle clearly says ""The builder will prompt for a password as needed using the previously configured callback handler"" (http://docs.oracle.com/javase/6/docs/technotes/guides/security/p11guide.html#Login). However, my code does always request the pin as son as I call KeyStore ks0 = ksbuilder0.getKeyStore(); even while only extracting public info (such as certificates).
Follows an extract of the code:
private static final String PKCS11_LIB = ""C:\\WINDOWS\\system32\\opensc-pkcs11.dll"";
private static final String NAME = ""OpenSCpkcs11"";
private static final String SLOT = ""1"";
private static final String PIN = ""11111111"";
private static final String ALIAS = ""myCert"";

[...]

private static CallbackHandler myCallbackHandler = new CallbackHandler() {
    @Override
    public void handle(Callback[] callbacks) throws IOException,
            UnsupportedCallbackException {
        for (Callback callback : callbacks) {
            if (callback instanceof PasswordCallback) {
                PasswordCallback passwordCallback = (PasswordCallback) callback;
                System.out.println(passwordCallback.getPrompt() + PIN);
                passwordCallback.setPassword(PIN.toCharArray());
            }
        }
    }
};

[...]

String configString = ""name = ""
  + NAME.replace(' ', '_')
  + ""\n""
  + ""library = ""
  + PKCS11_LIB
  + ""\n slot = ""
  + SLOT
  + "" ""
  + ""\n attributes = compatibility \n""
  + ""attributes(*,*,*)=\n{\nCKA_TOKEN=true\nCKA_LOCAL=true\n}"";
ByteArrayInputStream configStream = new ByteArrayInputStream(
    configString.getBytes());
SunPKCS11 pkcs11Provider0 = new SunPKCS11(configStream);
pkcs11Provider0.login(null, myCallbackHandler);
Security.addProvider(pkcs11Provider0);
KeyStore.CallbackHandlerProtection chp = new KeyStore.CallbackHandlerProtection(
    myCallbackHandler);
KeyStore.Builder ksbuilder0 = KeyStore.Builder.newInstance(
    ""PKCS11"", pkcs11Provider0, chp);
KeyStore ks0 = ksbuilder0.getKeyStore();
X509Certificate cert0 = (X509Certificate) ks0.getCertificate(ALIAS);
// System.out.println(""Cert "" + cert0.toString());
Principal p = cert0.getSubjectDN();
System.out.println(""I am: "" + cert0.getSubjectDN().getName());

It results on:
Contraseña de la tarjeta de claves PKCS11 [SunPKCS11-OpenSCpkcs11]: 11111111
2014-01-16 17:48:11.275 cannot lock memory, sensitive data may be paged to disk
I am: CN=pepe perez, SURNAME=pepe, L=qwerty

As you can see, the password is requested before the certificate is got. By means of debugging I can see that the password is requested in the line KeyStore ks0 = ksbuilder0.getKeyStore();
Any idea? Is there no way to configure it as I want? Any further idea or test?
Furthermore: do you know of any other way to access smartcards, for example directly through a JAVA2OpenSC wrapper or the like?
Thanks,
","Well, what i've once done was something like
    Provider prov = new sun.security.pkcs11.SunPKCS11(""pkcs.cfg"");
    Security.addProvider(prov);
    KeyStore cc = null;
    try {
        cc = KeyStore.getInstance(""PKCS11"");
        cc.load(null, null);
        cc.getCertificate(""CITIZEN AUTHENTICATION CERTIFICATE"")
    } catch (Exception ex) {
        ex.printStackTrace();
    }

The pkcs.cfg is a file pointing to the ""libpteidpkcs11.so"" library, and you should be able to adapt it to your code. Mine reads:
name = SmartCard
library = /usr/local/lib/libpteidpkcs11.so

","15801","<java><pkcs#11>","9","0","4","2016-12-02 08:54:12","24902450","0","7","624211","","2014-01-28 09:14:38","2014-01-16 16:53:16",""
"21167927","Getting certificates from PKCS11 Smartcard without PIN/password","Abstract: when using JCA over PKCS11 over OpenSC, the PIN is requested when extracting certificates.
I have got an application that needs to sign using a smartcard. The smartcard is supported by OpenSC, so I am using the Java-built-in pkcs11 wrapper provider to use it. For functional reasons, I need to obtain the certificates in the card without a PIN requested. If the user finally signs, then, of course, the PIN is needed.
I see I can do it from command line without providing a PIN:
pkcs11-tool --module C:\WINDOWS\system32\opensc-pkcs11.dll -r -a 50-MDS_Signature -y cert -o p.cer
Using slot 1 with a present token (0x1)

So far, so good.
The documentation from Oracle clearly says ""The builder will prompt for a password as needed using the previously configured callback handler"" (http://docs.oracle.com/javase/6/docs/technotes/guides/security/p11guide.html#Login). However, my code does always request the pin as son as I call KeyStore ks0 = ksbuilder0.getKeyStore(); even while only extracting public info (such as certificates).
Follows an extract of the code:
private static final String PKCS11_LIB = ""C:\\WINDOWS\\system32\\opensc-pkcs11.dll"";
private static final String NAME = ""OpenSCpkcs11"";
private static final String SLOT = ""1"";
private static final String PIN = ""11111111"";
private static final String ALIAS = ""myCert"";

[...]

private static CallbackHandler myCallbackHandler = new CallbackHandler() {
    @Override
    public void handle(Callback[] callbacks) throws IOException,
            UnsupportedCallbackException {
        for (Callback callback : callbacks) {
            if (callback instanceof PasswordCallback) {
                PasswordCallback passwordCallback = (PasswordCallback) callback;
                System.out.println(passwordCallback.getPrompt() + PIN);
                passwordCallback.setPassword(PIN.toCharArray());
            }
        }
    }
};

[...]

String configString = ""name = ""
  + NAME.replace(' ', '_')
  + ""\n""
  + ""library = ""
  + PKCS11_LIB
  + ""\n slot = ""
  + SLOT
  + "" ""
  + ""\n attributes = compatibility \n""
  + ""attributes(*,*,*)=\n{\nCKA_TOKEN=true\nCKA_LOCAL=true\n}"";
ByteArrayInputStream configStream = new ByteArrayInputStream(
    configString.getBytes());
SunPKCS11 pkcs11Provider0 = new SunPKCS11(configStream);
pkcs11Provider0.login(null, myCallbackHandler);
Security.addProvider(pkcs11Provider0);
KeyStore.CallbackHandlerProtection chp = new KeyStore.CallbackHandlerProtection(
    myCallbackHandler);
KeyStore.Builder ksbuilder0 = KeyStore.Builder.newInstance(
    ""PKCS11"", pkcs11Provider0, chp);
KeyStore ks0 = ksbuilder0.getKeyStore();
X509Certificate cert0 = (X509Certificate) ks0.getCertificate(ALIAS);
// System.out.println(""Cert "" + cert0.toString());
Principal p = cert0.getSubjectDN();
System.out.println(""I am: "" + cert0.getSubjectDN().getName());

It results on:
Contraseña de la tarjeta de claves PKCS11 [SunPKCS11-OpenSCpkcs11]: 11111111
2014-01-16 17:48:11.275 cannot lock memory, sensitive data may be paged to disk
I am: CN=pepe perez, SURNAME=pepe, L=qwerty

As you can see, the password is requested before the certificate is got. By means of debugging I can see that the password is requested in the line KeyStore ks0 = ksbuilder0.getKeyStore();
Any idea? Is there no way to configure it as I want? Any further idea or test?
Furthermore: do you know of any other way to access smartcards, for example directly through a JAVA2OpenSC wrapper or the like?
Thanks,
","Finally, there was no solution using JCA. The final solution was to directly attack the PKCS11 driver. I have used jacknji11 (https://github.com/joelhockey/jacknji11) and the PKCS11 spec (http://www.emc.com/emc-plus/rsa-labs/standards-initiatives/pkcs-11-cryptographic-token-interface-standard.htm).
","15801","<java><pkcs#11>","9","0","4","2016-12-02 08:54:12","24902450","0","7","624211","","2014-01-28 09:14:38","2014-01-16 16:53:16",""
"21167927","Getting certificates from PKCS11 Smartcard without PIN/password","Abstract: when using JCA over PKCS11 over OpenSC, the PIN is requested when extracting certificates.
I have got an application that needs to sign using a smartcard. The smartcard is supported by OpenSC, so I am using the Java-built-in pkcs11 wrapper provider to use it. For functional reasons, I need to obtain the certificates in the card without a PIN requested. If the user finally signs, then, of course, the PIN is needed.
I see I can do it from command line without providing a PIN:
pkcs11-tool --module C:\WINDOWS\system32\opensc-pkcs11.dll -r -a 50-MDS_Signature -y cert -o p.cer
Using slot 1 with a present token (0x1)

So far, so good.
The documentation from Oracle clearly says ""The builder will prompt for a password as needed using the previously configured callback handler"" (http://docs.oracle.com/javase/6/docs/technotes/guides/security/p11guide.html#Login). However, my code does always request the pin as son as I call KeyStore ks0 = ksbuilder0.getKeyStore(); even while only extracting public info (such as certificates).
Follows an extract of the code:
private static final String PKCS11_LIB = ""C:\\WINDOWS\\system32\\opensc-pkcs11.dll"";
private static final String NAME = ""OpenSCpkcs11"";
private static final String SLOT = ""1"";
private static final String PIN = ""11111111"";
private static final String ALIAS = ""myCert"";

[...]

private static CallbackHandler myCallbackHandler = new CallbackHandler() {
    @Override
    public void handle(Callback[] callbacks) throws IOException,
            UnsupportedCallbackException {
        for (Callback callback : callbacks) {
            if (callback instanceof PasswordCallback) {
                PasswordCallback passwordCallback = (PasswordCallback) callback;
                System.out.println(passwordCallback.getPrompt() + PIN);
                passwordCallback.setPassword(PIN.toCharArray());
            }
        }
    }
};

[...]

String configString = ""name = ""
  + NAME.replace(' ', '_')
  + ""\n""
  + ""library = ""
  + PKCS11_LIB
  + ""\n slot = ""
  + SLOT
  + "" ""
  + ""\n attributes = compatibility \n""
  + ""attributes(*,*,*)=\n{\nCKA_TOKEN=true\nCKA_LOCAL=true\n}"";
ByteArrayInputStream configStream = new ByteArrayInputStream(
    configString.getBytes());
SunPKCS11 pkcs11Provider0 = new SunPKCS11(configStream);
pkcs11Provider0.login(null, myCallbackHandler);
Security.addProvider(pkcs11Provider0);
KeyStore.CallbackHandlerProtection chp = new KeyStore.CallbackHandlerProtection(
    myCallbackHandler);
KeyStore.Builder ksbuilder0 = KeyStore.Builder.newInstance(
    ""PKCS11"", pkcs11Provider0, chp);
KeyStore ks0 = ksbuilder0.getKeyStore();
X509Certificate cert0 = (X509Certificate) ks0.getCertificate(ALIAS);
// System.out.println(""Cert "" + cert0.toString());
Principal p = cert0.getSubjectDN();
System.out.println(""I am: "" + cert0.getSubjectDN().getName());

It results on:
Contraseña de la tarjeta de claves PKCS11 [SunPKCS11-OpenSCpkcs11]: 11111111
2014-01-16 17:48:11.275 cannot lock memory, sensitive data may be paged to disk
I am: CN=pepe perez, SURNAME=pepe, L=qwerty

As you can see, the password is requested before the certificate is got. By means of debugging I can see that the password is requested in the line KeyStore ks0 = ksbuilder0.getKeyStore();
Any idea? Is there no way to configure it as I want? Any further idea or test?
Furthermore: do you know of any other way to access smartcards, for example directly through a JAVA2OpenSC wrapper or the like?
Thanks,
","SOLVED
I have found a way to get the public certificate from the smart card.
    String pkcs11Config = ""name = SmartCard\nlibrary = /path/to/libraby.so"";
    ByteArrayInputStream confStream = new ByteArrayInputStream(pkcs11Config.getBytes());
    Provider prov = new sun.security.pkcs11.SunPKCS11(confStream);
    Security.addProvider(prov);
    KeyStore cc = null;
    String pin = """";
    try {
        cc = KeyStore.getInstance(""PKCS11"",prov);
        KeyStore.PasswordProtection pp = new KeyStore.PasswordProtection(pin.toCharArray());
        cc.load(null ,  pp.getPassword() );
        Enumeration aliases = cc.aliases();
        while (aliases.hasMoreElements()) {
            Object alias = aliases.nextElement();
            try {
                X509Certificate cert0 = (X509Certificate) cc.getCertificate(alias.toString());
                System.out.println(""I am: "" + cert0.getSubjectDN().getName());
            } catch (Exception e) {
                continue;
            }
        }
    } catch (Exception e) {
        e.printStackTrace();
    }

The KeyStore.load() should be provided with PaswordProtection object with empty pin.
This allows me to read the public certificate and extract the data from it.
I have tested this with 3 different types of smart cards and it is working on all of them
","15801","<java><pkcs#11>","9","7","4","2016-12-02 08:54:12","24902450","0","7","624211","","2014-01-28 09:14:38","2014-01-16 16:53:16",""
"21167927","Getting certificates from PKCS11 Smartcard without PIN/password","Abstract: when using JCA over PKCS11 over OpenSC, the PIN is requested when extracting certificates.
I have got an application that needs to sign using a smartcard. The smartcard is supported by OpenSC, so I am using the Java-built-in pkcs11 wrapper provider to use it. For functional reasons, I need to obtain the certificates in the card without a PIN requested. If the user finally signs, then, of course, the PIN is needed.
I see I can do it from command line without providing a PIN:
pkcs11-tool --module C:\WINDOWS\system32\opensc-pkcs11.dll -r -a 50-MDS_Signature -y cert -o p.cer
Using slot 1 with a present token (0x1)

So far, so good.
The documentation from Oracle clearly says ""The builder will prompt for a password as needed using the previously configured callback handler"" (http://docs.oracle.com/javase/6/docs/technotes/guides/security/p11guide.html#Login). However, my code does always request the pin as son as I call KeyStore ks0 = ksbuilder0.getKeyStore(); even while only extracting public info (such as certificates).
Follows an extract of the code:
private static final String PKCS11_LIB = ""C:\\WINDOWS\\system32\\opensc-pkcs11.dll"";
private static final String NAME = ""OpenSCpkcs11"";
private static final String SLOT = ""1"";
private static final String PIN = ""11111111"";
private static final String ALIAS = ""myCert"";

[...]

private static CallbackHandler myCallbackHandler = new CallbackHandler() {
    @Override
    public void handle(Callback[] callbacks) throws IOException,
            UnsupportedCallbackException {
        for (Callback callback : callbacks) {
            if (callback instanceof PasswordCallback) {
                PasswordCallback passwordCallback = (PasswordCallback) callback;
                System.out.println(passwordCallback.getPrompt() + PIN);
                passwordCallback.setPassword(PIN.toCharArray());
            }
        }
    }
};

[...]

String configString = ""name = ""
  + NAME.replace(' ', '_')
  + ""\n""
  + ""library = ""
  + PKCS11_LIB
  + ""\n slot = ""
  + SLOT
  + "" ""
  + ""\n attributes = compatibility \n""
  + ""attributes(*,*,*)=\n{\nCKA_TOKEN=true\nCKA_LOCAL=true\n}"";
ByteArrayInputStream configStream = new ByteArrayInputStream(
    configString.getBytes());
SunPKCS11 pkcs11Provider0 = new SunPKCS11(configStream);
pkcs11Provider0.login(null, myCallbackHandler);
Security.addProvider(pkcs11Provider0);
KeyStore.CallbackHandlerProtection chp = new KeyStore.CallbackHandlerProtection(
    myCallbackHandler);
KeyStore.Builder ksbuilder0 = KeyStore.Builder.newInstance(
    ""PKCS11"", pkcs11Provider0, chp);
KeyStore ks0 = ksbuilder0.getKeyStore();
X509Certificate cert0 = (X509Certificate) ks0.getCertificate(ALIAS);
// System.out.println(""Cert "" + cert0.toString());
Principal p = cert0.getSubjectDN();
System.out.println(""I am: "" + cert0.getSubjectDN().getName());

It results on:
Contraseña de la tarjeta de claves PKCS11 [SunPKCS11-OpenSCpkcs11]: 11111111
2014-01-16 17:48:11.275 cannot lock memory, sensitive data may be paged to disk
I am: CN=pepe perez, SURNAME=pepe, L=qwerty

As you can see, the password is requested before the certificate is got. By means of debugging I can see that the password is requested in the line KeyStore ks0 = ksbuilder0.getKeyStore();
Any idea? Is there no way to configure it as I want? Any further idea or test?
Furthermore: do you know of any other way to access smartcards, for example directly through a JAVA2OpenSC wrapper or the like?
Thanks,
","Another way is use IAIK PKCS#11 Wrapper. JavaDoc here. Example code below.
/**
 * list certificates
 * 
 * @param module - PKCS#11 (.dll or .so) module path
 * for example: ""C:\Program Files (x86)\ENCARD\enigmap11.dll""
 * 
 * @throws Exception
 */
public void listCertificates(String module) throws Exception {
    Module pkcs11Module = Module.getInstance(module);
    pkcs11Module.initialize(null);

    Slot[] slotsWithToken = pkcs11Module.getSlotList(Module.SlotRequirement.TOKEN_PRESENT);
    CertificateFactory certFactory = CertificateFactory.getInstance(""X.509"");

    for(Slot s: slotsWithToken) {
        Session session = s.getToken().openSession(Token.SessionType.SERIAL_SESSION, Token.SessionReadWriteBehavior.RO_SESSION, null, null);
        session.findObjectsInit(new X509PublicKeyCertificate());
        Object[] objects = null;
        while((objects = session.findObjects(1)).length > 0) {
            for(Object c: objects) {
                X509PublicKeyCertificate cert = (X509PublicKeyCertificate) c;
                byte[] certValue = cert.getValue().getByteArrayValue();
                Certificate cc = certFactory.generateCertificate(new ByteArrayInputStream(certValue));
                if(cc instanceof X509Certificate) {
                    X509Certificate x509 = (X509Certificate) cc;
                    log.info(x509.getNotBefore() + "" - "" + x509.getNotAfter());
                }                       
            }
        }
        session.findObjectsFinal();
    }           
    pkcs11Module.finalize(null);
}

","15801","<java><pkcs#11>","9","0","4","2016-12-02 08:54:12","24902450","0","7","624211","","2014-01-28 09:14:38","2014-01-16 16:53:16",""
"13710647","compile error after upgrading to Java 7: package sun.security.pkcs11 does not exist","I just upgraded from Java 6 to Java 7 SDK and am now getting the following error in my ant build:
        error: package sun.security.pkcs11 does not exist
        Provider p = new sun.security.pkcs11.SunPKCS11(is);
I'm running Windows 7 64-bit. I can compile fine if I switch back to Java 6, but that is not an option any longer.  I haven't had much luck finding a solution online.  Anybody knows how to resolve this issue?
","You will have to convert your application to use APIs which are not restricted. The compiler will warn you quite strictly when you have done such a thing -- this is the consequence of proceeding in the face of those warnings.
See Why Developers Should Not Write Programs That Call 'sun' Packages
","11280","<java><security><pkcs#11>","7","4","5","2014-06-17 07:15:03","","2","1","","","","2012-12-04 19:43:39",""
"13710647","compile error after upgrading to Java 7: package sun.security.pkcs11 does not exist","I just upgraded from Java 6 to Java 7 SDK and am now getting the following error in my ant build:
        error: package sun.security.pkcs11 does not exist
        Provider p = new sun.security.pkcs11.SunPKCS11(is);
I'm running Windows 7 64-bit. I can compile fine if I switch back to Java 6, but that is not an option any longer.  I haven't had much luck finding a solution online.  Anybody knows how to resolve this issue?
","I have faced the same problem and i solve it by installing the 32-bit JDK insteade of 64-bit and sure it will work .
","11280","<java><security><pkcs#11>","7","3","5","2014-06-17 07:15:03","","2","1","","","","2012-12-04 19:43:39",""
"13710647","compile error after upgrading to Java 7: package sun.security.pkcs11 does not exist","I just upgraded from Java 6 to Java 7 SDK and am now getting the following error in my ant build:
        error: package sun.security.pkcs11 does not exist
        Provider p = new sun.security.pkcs11.SunPKCS11(is);
I'm running Windows 7 64-bit. I can compile fine if I switch back to Java 6, but that is not an option any longer.  I haven't had much luck finding a solution online.  Anybody knows how to resolve this issue?
","The API has not been released by oracle oracle bug and the answers by tom and yassering are both corect.
","11280","<java><security><pkcs#11>","7","3","5","2014-06-17 07:15:03","","2","1","","","","2012-12-04 19:43:39",""
"13710647","compile error after upgrading to Java 7: package sun.security.pkcs11 does not exist","I just upgraded from Java 6 to Java 7 SDK and am now getting the following error in my ant build:
        error: package sun.security.pkcs11 does not exist
        Provider p = new sun.security.pkcs11.SunPKCS11(is);
I'm running Windows 7 64-bit. I can compile fine if I switch back to Java 6, but that is not an option any longer.  I haven't had much luck finding a solution online.  Anybody knows how to resolve this issue?
","Since sunPKCS11 support is not there in Windows 64 bit, i am assuming that you are using windows 64 bit just for build environment and your runtime might be a linux or other supported environments.
If the above is true, then inorder to make the build work, copy the sunpkcs11.jar from a 32 bit jdk and copy to a 64 bit jdk under jre\lib\ext. This worked for me.
Or, alternatively wait for jdk8 where its fixed.
","11280","<java><security><pkcs#11>","7","1","5","2014-06-17 07:15:03","","2","1","","","","2012-12-04 19:43:39",""
"13710647","compile error after upgrading to Java 7: package sun.security.pkcs11 does not exist","I just upgraded from Java 6 to Java 7 SDK and am now getting the following error in my ant build:
        error: package sun.security.pkcs11 does not exist
        Provider p = new sun.security.pkcs11.SunPKCS11(is);
I'm running Windows 7 64-bit. I can compile fine if I switch back to Java 6, but that is not an option any longer.  I haven't had much luck finding a solution online.  Anybody knows how to resolve this issue?
","I'm having the same error. 
Only a type can be imported. sun.security.pkcs11.wrapper.CK_AES_CTR_PARAMS resolves to a package

I have windows 7 x64 with jdk 7x64 installed then replaced with jdk 7x32. I also made sure that my JAVA_HOME was set to the new jdk installation. I get the same problem when I run my application.  
","11280","<java><security><pkcs#11>","7","-2","5","2014-06-17 07:15:03","","2","1","","","","2012-12-04 19:43:39",""
"5263156","RSA keypair generation and storing to keystore","I am tryng to generate RSA keypair and to store it on the HSM keystore. The code i have right now looks like this:
String configName = ""C:\\eTokenConfig.cfg"";
    Provider p = new sun.security.pkcs11.SunPKCS11(configName);
    Security.addProvider(p);
    // Read the keystore form the smart card
    char[] pin = { 'p', '4', 's', 's', 'w', '0', 'r', 'd' };
    KeyStore keyStore = KeyStore.getInstance(""PKCS11"",p);
    keyStore.load(null, pin);
    //generate keys
    KeyPairGenerator kpg = KeyPairGenerator.getInstance(""RSA"",p);
    kpg.initialize(512);
    KeyPair pair = kpg.generateKeyPair();

    PrivateKey privateKey = pair.getPrivate();
    PublicKey publicKey = pair.getPublic();
    // Save Keys How ???

I tried to use the keyStore.setEntry method but the problem is it requires a Certificate chain and I don't know how to get this certificate ??
","You should not be able to read the private key if you generate the key inside the token.
you'll need to create a dummy certificate (for example self-signed) and store it with an alias, the keystore model depends on certificates to be usable.
","8957","<java><keystore><pkcs#11>","7","-1","2","2012-10-26 11:39:29","","0","4","","","","2011-03-10 17:06:13",""
"5263156","RSA keypair generation and storing to keystore","I am tryng to generate RSA keypair and to store it on the HSM keystore. The code i have right now looks like this:
String configName = ""C:\\eTokenConfig.cfg"";
    Provider p = new sun.security.pkcs11.SunPKCS11(configName);
    Security.addProvider(p);
    // Read the keystore form the smart card
    char[] pin = { 'p', '4', 's', 's', 'w', '0', 'r', 'd' };
    KeyStore keyStore = KeyStore.getInstance(""PKCS11"",p);
    keyStore.load(null, pin);
    //generate keys
    KeyPairGenerator kpg = KeyPairGenerator.getInstance(""RSA"",p);
    kpg.initialize(512);
    KeyPair pair = kpg.generateKeyPair();

    PrivateKey privateKey = pair.getPrivate();
    PublicKey publicKey = pair.getPublic();
    // Save Keys How ???

I tried to use the keyStore.setEntry method but the problem is it requires a Certificate chain and I don't know how to get this certificate ??
","See http://docs.oracle.com/javase/tutorial/security/apisign/vstep2.html
Save Public Key:
    X509EncodedKeySpec x509ks = new X509EncodedKeySpec(
            publicKey.getEncoded());
    FileOutputStream fos = new FileOutputStream(strPathFilePubKey);
    fos.write(x509ks.getEncoded());

Load Public Key:
    byte[] encodedKey = IOUtils.toByteArray(new FileInputStream(strPathFilePubKey));
    KeyFactory keyFactory = KeyFactory.getInstance(""RSA"", p);
    X509EncodedKeySpec pkSpec = new X509EncodedKeySpec(
            encodedKey);
    PublicKey publicKey = keyFactory.generatePublic(pkSpec);

Save Private Key:
    PKCS8EncodedKeySpec pkcsKeySpec = new PKCS8EncodedKeySpec(
            privateKey.getEncoded());
    FileOutputStream fos = new FileOutputStream(strPathFilePrivbKey);
    fos.write(pkcsKeySpec.getEncoded());

Load Private Key:
    byte[] encodedKey = IOUtils.toByteArray(new FileInputStream(strPathFilePrivKey));
    KeyFactory keyFactory = KeyFactory.getInstance(""RSA"", p);
    PKCS8EncodedKeySpec privKeySpec = new PKCS8EncodedKeySpec(
            encodedKey);
    PrivateKey privateKey = keyFactory.generatePrivate(privKeySpec);

","8957","<java><keystore><pkcs#11>","7","1","2","2012-10-26 11:39:29","","0","4","","","","2011-03-10 17:06:13",""
"34557624","Mac OS X El Capitan Smart Card Services PKCS#11 Tokend compilation and installation","I would like to install PKCS#11 Tokend to my Mac OS X El Capitan (10.11.2) so I can access PKCS#11 enabled devices from Safari.
I downloaded and install Smart Card Services for El Capitan from https://smartcardservices.macosforge.org/trac/wiki/installers.
Now I have Tokend installed in /Library/Security/tokend but there is no PKCS11.tokend, there are the following:

BELPIC.tokend
CAC.tokend
CACNG.tokend
JPKI.tokend
PIV.tokend

So I read on the following site that it should be included, or it can be built and copied to tokend directory to access PKCS#11 libraries stored in /usr/lib/pkcs11 or /usr/local/lib/pkcs11: http://ludovicrousseau.blogspot.cz/2010/04/free-software-tokend-above-pkcs11-for.html.
But I am not even able to successfully install darwinbuild.
Also I don't want to build the whole Smart Card Services solution, I would like to build just PKCS#11.tokend and use it with KeyChain.
The building steps are not very clear for me.
How to do it for El Capitan?
Or is there any version that is already built and can be used?
","El Capitan is tricky because Apple has implemented SIP (System Integrity Protection) which prevents write access to various system folders... (\system\library\security\ , \library\security, etc)
If you want to move forward with installing SCS or if you want to try manually adding/removing tokend files... you'll have to disable SIP first.

Reboot into Recovery Mode (hold down Command+R)
Open Utilites > Terminal
Type 'csrutil disable' and hit enter
Reboot, and you'll be able to edit system files and/or install SCS.

Some extra advice regarding PKCS...
If you know what type of card you have, contact the manufacturer to get the appropriate PKCS tokend file. One size does not fit all unfortunately.
If you want to determine what type of card you have, plug in your reader, plug in the card, open Terminal and type pcsctest. When it asks for reader number type 01 and hit enter.
On that page, you'll find an ATR code. Grab that code and paste it here:
You should then have a manufacturer result. Search specifically for that smartcard manufacturer's PKCS libraries online (typically a .tokend file) 
Good luck!!
","8883","<keychain><smartcard><osx-elcapitan><pkcs#11><tokend>","3","1","2","2016-06-30 16:34:08","","0","1","","","","2016-01-01 15:56:15",""
"34557624","Mac OS X El Capitan Smart Card Services PKCS#11 Tokend compilation and installation","I would like to install PKCS#11 Tokend to my Mac OS X El Capitan (10.11.2) so I can access PKCS#11 enabled devices from Safari.
I downloaded and install Smart Card Services for El Capitan from https://smartcardservices.macosforge.org/trac/wiki/installers.
Now I have Tokend installed in /Library/Security/tokend but there is no PKCS11.tokend, there are the following:

BELPIC.tokend
CAC.tokend
CACNG.tokend
JPKI.tokend
PIV.tokend

So I read on the following site that it should be included, or it can be built and copied to tokend directory to access PKCS#11 libraries stored in /usr/lib/pkcs11 or /usr/local/lib/pkcs11: http://ludovicrousseau.blogspot.cz/2010/04/free-software-tokend-above-pkcs11-for.html.
But I am not even able to successfully install darwinbuild.
Also I don't want to build the whole Smart Card Services solution, I would like to build just PKCS#11.tokend and use it with KeyChain.
The building steps are not very clear for me.
How to do it for El Capitan?
Or is there any version that is already built and can be used?
","In my experience, you'd be better off using OpenSC with tokend fork. It builds OK on Mac OS X 10.10 and 10.11, and supports RSA and ECC tokens (and SHA-2).
","8883","<keychain><smartcard><osx-elcapitan><pkcs#11><tokend>","3","0","2","2016-06-30 16:34:08","","0","1","","","","2016-01-01 15:56:15",""
"8881536","PKCS#11 PKCS11 dll","We are trying here to implement a java standalone application that can connect to a https website and authenticate with a PKI Smartcard and we are running through all sorts of problems.
I have to mention that we are able to run this kind of application if we use an applet (then the browser's keystore and trustore will be used), everything works perfectly fine, we enter the card pin number and we get access to the webpage.
I have two questions. First regarding my code, does someone sees something wrong with it. I include the runtime error we have while running it:
public class TestPKCS11 {

/**
 * @param args the command line arguments
 */
public static void main(String[] args) {

    // Set keyStore and trustStore
    System.setProperty(""javax.net.ssl.trustStoreType"", ""PKCS11"");
    System.setProperty(""javax.net.ssl.trustStore"", ""NONE"");
    System.setProperty(""javax.net.ssl.trustStorePassword"", ""changeit"");
    System.setProperty(""javax.net.ssl.trustStoreProvider"", ""SunPKCS11-mycard"");
    String trustStore = System.getProperty(""javax.net.ssl.trustStore"");
    if (trustStore == null) {
        System.out.println(""javax.net.ssl.trustStore is not defined"");
    } else {
        System.out.println(""javax.net.ssl.trustStore = "" + trustStore);
    }

    System.setProperty(""javax.net.ssl.keyStoreType"", ""PKCS11"");
    System.setProperty(""javax.net.ssl.keyStore"", ""NONE"");
    System.setProperty(""javax.net.ssl.keyStorePassword"", ""changeit"");
    System.setProperty(""javax.net.ssl.keyStoreProvider"", ""SunPKCS11-mycard"");
    String keyStore = System.getProperty(""javax.net.ssl.keyStore"");
    if (keyStore == null) {
        System.out.println(""javax.net.ssl.keyStore is not defined"");
    } else {
        System.out.println(""javax.net.ssl.keyStore = "" + keyStore);
    }

    System.setProperty(""javax.net.debug"", ""ssl""); // dynamic conf of PKCS#11

    String configName = ""C:\\confDirectory\\pkcs11.cfg"";

    sun.security.pkcs11.SunPKCS11 sunPKCS11 = new sun.security.pkcs11.SunPKCS11(configName);
    Provider p = sunPKCS11;
    Security.addProvider(p);


    SSLSocketFactory sslFact = (SSLSocketFactory) SSLSocketFactory.getDefault();

    try{
        SSLSocket sock = (SSLSocket)sslFact.createSocket(""myserver"", 8081);

        sock.startHandshake();

    } catch (SSLHandshakeException ex) {
        Logger.getLogger(TestPKCS11.class.getName()).log(Level.SEVERE, null, ex);
        System.out.println(ex.getMessage());
    } 
    catch (IOException ex) {
        Logger.getLogger(TestPKCS11.class.getName()).log(Level.SEVERE, null, ex);
    }
}

Execute ERROR:
Exception in thread ""main"" java.security.ProviderException: Initialization failed
    at sun.security.pkcs11.SunPKCS11.<init>(SunPKCS11.java:340)
    at sun.security.pkcs11.SunPKCS11.<init>(SunPKCS11.java:86)
    at TestPKCS11.main(TestPKCS11.java:95)
Caused by: java.io.IOException: The specified procedure could not be found.
    at sun.security.pkcs11.wrapper.PKCS11.connect(Native Method)
    at sun.security.pkcs11.wrapper.PKCS11.<init>(PKCS11.java:141)
    at sun.security.pkcs11.wrapper.PKCS11.getInstance(PKCS11.java:154)
    at sun.security.pkcs11.SunPKCS11.<init>(SunPKCS11.java:281)
    ... 2 more

My second question is regarding the dll to use for pkcs11. Currently i'm using on that is included in IBM's Rational's installation (jpkcs11.dll) but i'm really not sure that it's the good one. I do read about OpenSC but can't find the OpenSC-pkcs11.dll file. I only get to see opensc.dll.
I'm running on Windows7 with Java 1.6 27
Thank you
","OpenSC PKCS#11 is named ""opensc-pkcs11.dll"" and it is put to system32. But you need to make sure that your smart card is supported by OpenSC. As a general rule: you need to use the PKCS#11 provider that comes with your card (usually closed source) or supports your card (like OpenSC)
","8360","<java><smartcard><pki><pkcs#11>","0","2","2","2012-07-14 06:15:56","","0","","729881","","2012-01-16 19:31:28","2012-01-16 14:40:52",""
"8881536","PKCS#11 PKCS11 dll","We are trying here to implement a java standalone application that can connect to a https website and authenticate with a PKI Smartcard and we are running through all sorts of problems.
I have to mention that we are able to run this kind of application if we use an applet (then the browser's keystore and trustore will be used), everything works perfectly fine, we enter the card pin number and we get access to the webpage.
I have two questions. First regarding my code, does someone sees something wrong with it. I include the runtime error we have while running it:
public class TestPKCS11 {

/**
 * @param args the command line arguments
 */
public static void main(String[] args) {

    // Set keyStore and trustStore
    System.setProperty(""javax.net.ssl.trustStoreType"", ""PKCS11"");
    System.setProperty(""javax.net.ssl.trustStore"", ""NONE"");
    System.setProperty(""javax.net.ssl.trustStorePassword"", ""changeit"");
    System.setProperty(""javax.net.ssl.trustStoreProvider"", ""SunPKCS11-mycard"");
    String trustStore = System.getProperty(""javax.net.ssl.trustStore"");
    if (trustStore == null) {
        System.out.println(""javax.net.ssl.trustStore is not defined"");
    } else {
        System.out.println(""javax.net.ssl.trustStore = "" + trustStore);
    }

    System.setProperty(""javax.net.ssl.keyStoreType"", ""PKCS11"");
    System.setProperty(""javax.net.ssl.keyStore"", ""NONE"");
    System.setProperty(""javax.net.ssl.keyStorePassword"", ""changeit"");
    System.setProperty(""javax.net.ssl.keyStoreProvider"", ""SunPKCS11-mycard"");
    String keyStore = System.getProperty(""javax.net.ssl.keyStore"");
    if (keyStore == null) {
        System.out.println(""javax.net.ssl.keyStore is not defined"");
    } else {
        System.out.println(""javax.net.ssl.keyStore = "" + keyStore);
    }

    System.setProperty(""javax.net.debug"", ""ssl""); // dynamic conf of PKCS#11

    String configName = ""C:\\confDirectory\\pkcs11.cfg"";

    sun.security.pkcs11.SunPKCS11 sunPKCS11 = new sun.security.pkcs11.SunPKCS11(configName);
    Provider p = sunPKCS11;
    Security.addProvider(p);


    SSLSocketFactory sslFact = (SSLSocketFactory) SSLSocketFactory.getDefault();

    try{
        SSLSocket sock = (SSLSocket)sslFact.createSocket(""myserver"", 8081);

        sock.startHandshake();

    } catch (SSLHandshakeException ex) {
        Logger.getLogger(TestPKCS11.class.getName()).log(Level.SEVERE, null, ex);
        System.out.println(ex.getMessage());
    } 
    catch (IOException ex) {
        Logger.getLogger(TestPKCS11.class.getName()).log(Level.SEVERE, null, ex);
    }
}

Execute ERROR:
Exception in thread ""main"" java.security.ProviderException: Initialization failed
    at sun.security.pkcs11.SunPKCS11.<init>(SunPKCS11.java:340)
    at sun.security.pkcs11.SunPKCS11.<init>(SunPKCS11.java:86)
    at TestPKCS11.main(TestPKCS11.java:95)
Caused by: java.io.IOException: The specified procedure could not be found.
    at sun.security.pkcs11.wrapper.PKCS11.connect(Native Method)
    at sun.security.pkcs11.wrapper.PKCS11.<init>(PKCS11.java:141)
    at sun.security.pkcs11.wrapper.PKCS11.getInstance(PKCS11.java:154)
    at sun.security.pkcs11.SunPKCS11.<init>(SunPKCS11.java:281)
    ... 2 more

My second question is regarding the dll to use for pkcs11. Currently i'm using on that is included in IBM's Rational's installation (jpkcs11.dll) but i'm really not sure that it's the good one. I do read about OpenSC but can't find the OpenSC-pkcs11.dll file. I only get to see opensc.dll.
I'm running on Windows7 with Java 1.6 27
Thank you
","Instead of putting DLL to system32, you could load it dynamically from users home directory. But it depends on your application, how you are going to install it. 
","8360","<java><smartcard><pki><pkcs#11>","0","0","2","2012-07-14 06:15:56","","0","","729881","","2012-01-16 19:31:28","2012-01-16 14:40:52",""
"812894","How to interface with PKCS #11 compliant HSM device in .Net?","I am supposed to write a client application in C# that communicates with Thales WebSentry and I need a few hints at how to start.
Device comes with Java SDK but I need to do my programming in .NET. Are there any libraries in .NET that I can use, or will I have to do it all low-level (directly to socket).
Any hints or pointers on how and where to start?
Thanks!
","If the module is PKCS#11-compliant, there should be a .dll somewhere in the development kit that implements the PKCS#11 API. A Google search seems to indicate that it is called wspkcs11d.dll.
You should be able to P/Invoke to the PKCS#11 library. If Thales have not supplies documentation for the library, you can find the documentation here (but note that they most probably only support a subset of the full standard).
","8201","<c#><security><encryption><pkcs#11><hsm>","0","2","2","2010-09-07 17:25:20","813163","2","","","","","2009-05-01 19:33:28","2012-12-13 01:20:51"
"812894","How to interface with PKCS #11 compliant HSM device in .Net?","I am supposed to write a client application in C# that communicates with Thales WebSentry and I need a few hints at how to start.
Device comes with Java SDK but I need to do my programming in .NET. Are there any libraries in .NET that I can use, or will I have to do it all low-level (directly to socket).
Any hints or pointers on how and where to start?
Thanks!
","There is a CAPI provider for PKCS#11, it's called csp11 though it does not support private objects ( you cant login to tokens ).
The easiest way will be to p-invoke into the pkcs11 library from c#, Call C_GetFunctionList to get pointers to the other functions the library exposes. then call C_Initialize, you can use this with the other new PKCS#11 stuff from thales-ncipher too,
","8201","<c#><security><encryption><pkcs#11><hsm>","0","0","2","2010-09-07 17:25:20","813163","2","","","","","2009-05-01 19:33:28","2012-12-13 01:20:51"
"22550440","How to check that smart card is working on linux?","I've a PKCS-11 supported smartcard? I just want to check that my the smartcard is working fine or not. How can check it on Ubuntu? Please guide me. what software I can use? how what steps should I follow?
","It is important to understand that PKCS#11 standard just defines the C language API to access smartcards and other types of cryptographic hardware (or even software). It is usually hardware vendor who provides software library (.dll for windows, .so for unix etc.) that implements PKCS#11 API and is able to access the hardware (smartcard in your case). Your application usually loads PKCS#11 library and uses PKCS#11 API functions it provides.
In most cases it is the best to use PKCS#11 library provided by your smartcard vendor but there are also many independent software vendors such as A.E.T. or Aloaha who provide smartcard middleware (software package that usually contains PKCS#11 library) that can access a bunch of widely used smartcards. You can also take a look at OpenSC project which provides an open source PKCS#11 library that supports many popular smartcards and USB tokens.
Now let's get back to your questions:

Do I have a PKCS-11 supported smartcard?

You have to check whether there exists a library (open source or commercial) that implements PKCS#11 API and supports your smartcard. If you can find such a library then the answer is yes.

How can I check it on Ubuntu?

If you already have PKCS#11 library then you can install ""opensc"" package which provides command line application called ""pkcs11-tool"". You can use following command to list readers and cards accessible via your PKCS#11 library:
pkcs11-tool --module your_pkcs11_library.so --list-slots

If you want to use PKCS#11 library provided by OpenSC project then just replace ""your_pkcs11_library.so"" with ""opensc-pkcs11.so"".

What software I can use?

PKCS#11 is widely supported standard so this question is hard to answer. I guess you would like to use open source applications with your smartcard because you have mentioned Ubuntu so here is the short list of well known applications that support PKCS#11:

Mozilla Firefox - supports digital signature and client authentication
Mozilla Thunderbird - supports digital signing of e-mails
LibreOffice - supports digital signing of documents
TrueCrypt - supports disk encryption
OpenVPN - supports client authentication
OpenSSH - supports client authentication

","8190","<linux><smartcard><pkcs#11>","2","6","2","2019-02-16 20:45:40","22571642","0","0","","","","2014-03-21 04:52:05",""
"22550440","How to check that smart card is working on linux?","I've a PKCS-11 supported smartcard? I just want to check that my the smartcard is working fine or not. How can check it on Ubuntu? Please guide me. what software I can use? how what steps should I follow?
","To verify Ubuntu sees your smartcard reader and identity card:

Install libusb-1.0-0-dev pcsc-lite pcscd pcsc-tools

The following tools will be installed:

pcscd - systemctl status pcscd  -  sometimes the card reader crashes this daemon, so you may need to restart it.
opensc-explorer - it searches and displays smartcard readers attached
opensc-tool - Options will provide detailed information about your smartcard reader.
pcsc_scan - will show you smartcard reader and its status.  It should show your identity card inserted, as well as when you take it out.  If it displays waiting on reader - restart the pcscd service and try again.

The following link describes this more in detail and setting up firefox/chrome for certificates 
https://cubiclenate.com/linux/applications/utilities/dod-cac-ubuntu-linuxmint/
","8190","<linux><smartcard><pkcs#11>","2","1","2","2019-02-16 20:45:40","22571642","0","0","","","","2014-03-21 04:52:05",""
"15052171","PKCS#11 engine does not work in openssl on centos 6","I want to add a PKCS#11 engine to OpenSSL and I use CentOS 6.2. I actually load engine with no problem as you can see below:
[root@localhost 05:06:18  openssl-1.0.1e]$ openssl engine -t dynamic -pre SO_PATH:/usr/lib/openssl/engines/engine_pkcs11.so -pre ID:pkcs11 -pre LIST_ADD:1 -pre LOAD -pre MODULE_PATH:/usr/local/lib/libsst.so
(dynamic) Dynamic engine loading support
[Success]: SO_PATH:/usr/lib/openssl/engines/engine_pkcs11.so
[Success]: ID:pkcs11
[Success]: LIST_ADD:1
[Success]: LOAD
[Success]: MODULE_PATH:/usr/local/lib/libsst.so
Loaded: (pkcs11) pkcs11 engine
    [ available ]

but when I use OpenSSL option to see the loaded engine, the pkcs11 engine isn't in the list:
[root@localhost 05:19:58  openssl-1.0.1e]$ openssl engine -v -t 
(aesni) Intel AES-NI engine (no-aesni)
     [ available ]
(dynamic) Dynamic engine loading support
     [ unavailable ]
     SO_PATH, NO_VCHECK, ID, LIST_ADD, DIR_LOAD, DIR_ADD, LOAD

and when I want to use the engine, I see this error:
[root@localhost 05:20:04  openssl-1.0.1e]$ openssl genrsa -engine pkcs11 -out priv.key 1024
invalid engine ""pkcs11""
3078776556:error:25066067:DSO support routines:DLFCN_LOAD:could not load the shared library:dso_dlfcn.c:185:filename(/usr/lib/openssl/engines/libpkcs11.so):   /usr/lib/openssl/engines/libpkcs11.so: cannot open shared object file: No such file or   directory
3078776556:error:25070067:DSO support routines:DSO_load:could not load the shared library:dso_lib.c:244:
3078776556:error:260B6084:engine routines:DYNAMIC_LOAD:dso not found:eng_dyn.c:450:
3078776556:error:2606A074:engine routines:ENGINE_by_id:no such engine:eng_list.c:417:id=pkcs11
3078776556:error:25066067:DSO support routines:DLFCN_LOAD:could not load the shared library:dso_dlfcn.c:185:filename(libpkcs11.so): libpkcs11.so: cannot open shared object file: No such file or directory
3078776556:error:25070067:DSO support routines:DSO_load:could not load the shared library:dso_lib.c:244:
3078776556:error:260B6084:engine routines:DYNAMIC_LOAD:dso not found:eng_dyn.c:450:
Generating RSA private key, 1024 bit long modulus
.......++++++
.......++++++
e is 65537 (0x10001)

I can't figure out what the problem could be...
","This problem is because OpenSSL load the library just for one time and after that it does not keep the state, so if we want to keep the state we must use the following commands:
[root@localhost 04:58:25  home]$ openssl
OpenSSL> engine -t dynamic -pre SO_PATH:/usr/lib/openssl/engines/engine_pkcs11.so -pre ID:pkcs11 -pre LIST_ADD:1 -pre LOAD -pre MODULE_PATH:/usr/local/lib/libsst.so
 (dynamic) Dynamic engine loading support
 [Success]: SO_PATH:/usr/lib/openssl/engines/engine_pkcs11.so
 [Success]: ID:pkcs11
 [Success]: LIST_ADD:1
 [Success]: LOAD
 [Success]: MODULE_PATH:/usr/local/lib/libsst.so
 Loaded: (pkcs11) pkcs11 engine
      [ available ]
OpenSSL> engine
 (aesni) Intel AES-NI engine (no-aesni)
 (dynamic) Dynamic engine loading support
 (pkcs11) pkcs11 engine
OpenSSL> 

","7899","<openssl><centos><pkcs#11><centos6>","5","6","2","2017-05-15 18:05:52","15185961","1","1","1563422","","2013-03-28 17:09:02","2013-02-24 13:27:04",""
"15052171","PKCS#11 engine does not work in openssl on centos 6","I want to add a PKCS#11 engine to OpenSSL and I use CentOS 6.2. I actually load engine with no problem as you can see below:
[root@localhost 05:06:18  openssl-1.0.1e]$ openssl engine -t dynamic -pre SO_PATH:/usr/lib/openssl/engines/engine_pkcs11.so -pre ID:pkcs11 -pre LIST_ADD:1 -pre LOAD -pre MODULE_PATH:/usr/local/lib/libsst.so
(dynamic) Dynamic engine loading support
[Success]: SO_PATH:/usr/lib/openssl/engines/engine_pkcs11.so
[Success]: ID:pkcs11
[Success]: LIST_ADD:1
[Success]: LOAD
[Success]: MODULE_PATH:/usr/local/lib/libsst.so
Loaded: (pkcs11) pkcs11 engine
    [ available ]

but when I use OpenSSL option to see the loaded engine, the pkcs11 engine isn't in the list:
[root@localhost 05:19:58  openssl-1.0.1e]$ openssl engine -v -t 
(aesni) Intel AES-NI engine (no-aesni)
     [ available ]
(dynamic) Dynamic engine loading support
     [ unavailable ]
     SO_PATH, NO_VCHECK, ID, LIST_ADD, DIR_LOAD, DIR_ADD, LOAD

and when I want to use the engine, I see this error:
[root@localhost 05:20:04  openssl-1.0.1e]$ openssl genrsa -engine pkcs11 -out priv.key 1024
invalid engine ""pkcs11""
3078776556:error:25066067:DSO support routines:DLFCN_LOAD:could not load the shared library:dso_dlfcn.c:185:filename(/usr/lib/openssl/engines/libpkcs11.so):   /usr/lib/openssl/engines/libpkcs11.so: cannot open shared object file: No such file or   directory
3078776556:error:25070067:DSO support routines:DSO_load:could not load the shared library:dso_lib.c:244:
3078776556:error:260B6084:engine routines:DYNAMIC_LOAD:dso not found:eng_dyn.c:450:
3078776556:error:2606A074:engine routines:ENGINE_by_id:no such engine:eng_list.c:417:id=pkcs11
3078776556:error:25066067:DSO support routines:DLFCN_LOAD:could not load the shared library:dso_dlfcn.c:185:filename(libpkcs11.so): libpkcs11.so: cannot open shared object file: No such file or directory
3078776556:error:25070067:DSO support routines:DSO_load:could not load the shared library:dso_lib.c:244:
3078776556:error:260B6084:engine routines:DYNAMIC_LOAD:dso not found:eng_dyn.c:450:
Generating RSA private key, 1024 bit long modulus
.......++++++
.......++++++
e is 65537 (0x10001)

I can't figure out what the problem could be...
","Indeed, as mentioned in one of the comments above, for repeated use it's more convenient to include the engine's parameters in the respective OpenSSL config file. For the given example, you would add the line 
openssl_conf  = openssl_def

before the first section (which starts with a '[' character at line begin)
and add a section marked [openssl_def], for simplicity at the end of the file:
[openssl_def]
engines = engine_section

[engine_section]
pkcs11 = pkcs11_section

[pkcs11_section] 
engine_id = pkcs11
dynamic_path = /usr/lib/openssl/engines/engine_pkcs11.so
MODULE_PATH = /usr/local/lib/libsst.so
init = 0
# adapt as desired:  PIN = 1234 

","7899","<openssl><centos><pkcs#11><centos6>","5","0","2","2017-05-15 18:05:52","15185961","1","1","1563422","","2013-03-28 17:09:02","2013-02-24 13:27:04",""
"8056818","Accessing Hardware PKCS11 Token on a 64 Bit Machine","So here's what I'm trying to do. I have a hardware token with some certs on it and I'm writing a Java application to try and access those certs. I have used the SunPKCS11 library in jre6 for a windows 32 bit machine. This is a small sample of how I access the certs:
String configName = ""pkcs.cnf""
String PIN = ""123456"";
Provider p = new sun.security.pkcs11.SunPKCS11(configName);
Security.addProvider(p);
KeyStore keyStore = KeyStore.getInstance(""PKCS11"");
char[] pin = PIN.toCharArray();
keyStore.load(null, pin);

It works great, I'm able to get the certs and everything. Now I'm trying to do the same on a 64 bit machine. However I am trying to use the 64 bit jre6 library and that is missing the SunPKCS11 jar file (located in {java.home}/lib/ext. Because of that I cannot create a SunPKCS11 object. My question to you is, what do I do now? How can I access the certs on a token using 64 bit java libraries? Has someone written a 64 bit wrapper for such a task?
","Assuming your {java.home} points to jre6, sunpkcs11.jar is in the {java.home}/lib/ext;
If your {java.home} points to jdk1.6, sunpkcs11.jar is in the {java.home}/jre/lib/ext;
I've tested it against the newly installed jdk and jre.
Please verify your installation.
EDITED (summarising the comments)
In java 64-bit version pkcs11 is not available.
","7878","<java><certificate><32bit-64bit><pkcs#11>","8","1","2","2013-03-25 12:33:16","15615068","1","1","","","","2011-11-08 20:41:48",""
"8056818","Accessing Hardware PKCS11 Token on a 64 Bit Machine","So here's what I'm trying to do. I have a hardware token with some certs on it and I'm writing a Java application to try and access those certs. I have used the SunPKCS11 library in jre6 for a windows 32 bit machine. This is a small sample of how I access the certs:
String configName = ""pkcs.cnf""
String PIN = ""123456"";
Provider p = new sun.security.pkcs11.SunPKCS11(configName);
Security.addProvider(p);
KeyStore keyStore = KeyStore.getInstance(""PKCS11"");
char[] pin = PIN.toCharArray();
keyStore.load(null, pin);

It works great, I'm able to get the certs and everything. Now I'm trying to do the same on a 64 bit machine. However I am trying to use the 64 bit jre6 library and that is missing the SunPKCS11 jar file (located in {java.home}/lib/ext. Because of that I cannot create a SunPKCS11 object. My question to you is, what do I do now? How can I access the certs on a token using 64 bit java libraries? Has someone written a 64 bit wrapper for such a task?
","PKCS11 Support was not implemented because there was no way to test that library (somehow, whatever).
This has changed in Java 8, though. Since J8b49 a 64 bit Version is included. 
See:
http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6880559
","7878","<java><certificate><32bit-64bit><pkcs#11>","8","4","2","2013-03-25 12:33:16","15615068","1","1","","","","2011-11-08 20:41:48",""
"12937138","How does JCA/JCE and PKCS#11 work (together)?","I want to use a HSM (hardware security module) to create a signature of a XML file. I did a bit of research and am now a bit confused, though.
Can you please clarify those questions:

What is meant with a key handle in JCE? I have read about it, that it is just a handle and the key is stored somewhere else. How can that be? From my understanding I either load the key into memory and use it, or the signing is done completely by a HSM and I only get the result, right?
Does the PKCS#11 standard define a way so that the signature is generated in the HSM? I've read about tokens, but I am not sure about signing.
The featurelist of my HSM states JCE and PKCS#11 separately. What does that mean? 
I thought PKCS#11 is  a standard, and JCE defines classes to use that standard. Does JCE specify its own protocols?

","
What is meant with a key handle in JCE?
A key handle (in JCE, PKCS#11, or most other cryptographic APIs) is simply a reference that enables you to use a key without seeing its actual value. That is good: you can have the key permanently stored in a secure place (e.g. an HSM) with the assurance that nobody will be able to copy it and run away with it - as it may happen if the key is the application space. Unlike a physical safe though, you can still perform cryptographic operation without running any security risk of key leakage.
Does the PKCS#11 standard define a way so that the signature is generated in the HSM?
PKCS#11 is a C API for cryptographic tokens. A token is a PKCS#11 abstraction for any device or program that offers services described by such API. The API defines which operations you can perform using the objects inside the PKCS#11 token: some objects are non sensitive, and can be extracted (e.g. public keys); some others are sensitive and can only be used, via handles.
If you have a handle to an object that supports signing, you can use the C function C_Sign to ask the token to authenticate some data provided by your application. The key does not leave the HSM.
The featurelist of my HSM states JCE and PKCS#11 separately. What does that mean?
Your HSM supports JCE in the sense that it comes with a native library that qualifies as a   Cryptographic Service Provider.
It supports PKCS#11 in the sense that it comes with a native library that offers a C PKCS#11 API.
I thought PKCS#11 is a standard, and JCE defines classes to use that standard. Does JCE specify its own protocols?
Indeed PKCS#11 is a standard; but it is not directly usable by languages other than C. You need a mapping layer that translates it into something compatible to your language. A PKCS#11 library (and the physical tokens that it abstracts) can be mapped to a JCE provider.

However, a JCE provider may have nothing to do with PKCS#11.
","7579","<java><jce><pkcs#11>","11","22","1","2013-10-28 15:54:27","12940627","0","3","1602587","","2012-10-22 12:34:04","2012-10-17 14:52:32",""
"23844694","Bad Padding Exception - RSA/ECB/OAEPWITHSHA-256ANDMGF1PADDING in pkcs11","My application is accessing e-Token for decrypting the response coming from the server
The session key from the server is encrypted using :-

RSA/ECB/OAEPWITHSHA-256ANDMGF1PADDING

I am using SunPKCS11 Provider for implementing the access to crypto token.
Whenever i try to decrypt this using the above mechanishm i.e. with RSA/ECB/OAEPWITHSHA-256ANDMGF1PADDING i am getting :-
**javax.crypto.BadPaddingException: doFinal() failed  
    at sun.security.pkcs11.P11RSACipher.implDoFinal(P11RSACipher.java:328)  
    at sun.security.pkcs11.P11RSACipher.engineDoFinal(P11RSACipher.java:353)  
    at javax.crypto.Cipher.doFinal(DashoA13*..)

The following is my code :-
private static final String TRANSFORMATION = ""RSA/ECB/OAEPWITHSHA-256ANDMGF1PADDING"";
private static final String SECURITY_PROVIDER = ""BC"";
private static final String DIGEST_ALGORITHM = ""SHA-256"";
private static final String MASKING_FUNCTION = ""MGF1"";

The code snippet where the error is coming is as follows :-
private byte[] decryptSecretKeyData(byte[] encryptedSecretKey, byte[] iv, PrivateKey privateKey) throws Exception {

        try {
            Cipher rsaCipher = Cipher.getInstance(TRANSFORMATION, SECURITY_PROVIDER);

            System.out.println(""Cipher block initialized""); - **Printed**
            PSource pSrc = (new PSource.PSpecified(iv));
            System.out.println(""PSource inisitialized""); - **Printed**


            rsaCipher.init(Cipher.DECRYPT_MODE, privateKey,
                    new OAEPParameterSpec(DIGEST_ALGORITHM, MASKING_FUNCTION,
                            MGF1ParameterSpec.SHA256, pSrc));


            System.out.println(""Here after cipher initilaization"");  - **Not Printed***

            return rsaCipher.doFinal(encryptedSecretKey);
        } catch (GeneralSecurityException e) {
            System.out.println(""GeneralSecurityException is ""+e.getMessage());
            throw new Exception(""Failed to decrypt AES secret key using RSA."", e);
        }
    }

I am Stuck in here and unable to decrypt the OAEP Transformation.
","You obtain a non-extractable private key P11Key.P11PrivateKey from the dongle. It cannot be used outside PKCS11 provider, thus, SunPKCS11 provider should be used for operations with that key.
Unfortunately SunPKCS11 provider doesn't support OAEP padding, making it more difficult.
Encryption still can be done with BouncyCastle, but decryption can be done with no padding and SunPKCS11 provider. keyLength parameter is RSA key modulus length in bits (1024,2048 etc).
private void testEncryption(byte[] plainText, PrivateKey privateKey, PublicKey publicKey, int keyLength) throws GeneralSecurityException {

    System.out.println(""Plain text: "" + DatatypeConverter.printHexBinary(plainText));

    Provider bcProvider = new BouncyCastleProvider();
    Cipher rsaCipher = Cipher.getInstance(""RSA/ECB/OAEPWITHSHA-256ANDMGF1PADDING"", bcProvider);
    rsaCipher.init(Cipher.ENCRYPT_MODE, publicKey);
    byte[] cipherText = rsaCipher.doFinal(plainText);

    System.out.println(""Cipher text: "" + DatatypeConverter.printHexBinary(cipherText));

    Provider pkcs11provider = new SunPKCS11(""C:\\Users\\manishs525\\pkcs11.cfg"");
    Cipher rsaCipher2 = Cipher.getInstance(""RSA/ECB/NoPadding"", pkcs11provider);
    rsaCipher2.init(Cipher.DECRYPT_MODE, privateKey);
    byte[] paddedPlainText = rsaCipher2.doFinal(cipherText);

    /* Ensure leading zeros not stripped */
    if (paddedPlainText.length < keyLength / 8) {
        byte[] tmp = new byte[keyLength / 8];
        System.arraycopy(paddedPlainText, 0, tmp, tmp.length - paddedPlainText.length, paddedPlainText.length);
        System.out.println(""Zero padding to "" + (keyLength / 8));
        paddedPlainText = tmp;
    }           

    System.out.println(""OAEP padded plain text: "" + DatatypeConverter.printHexBinary(paddedPlainText));

    OAEPParameterSpec paramSpec = new OAEPParameterSpec(""SHA-256"", ""MGF1"", MGF1ParameterSpec.SHA1,
            PSource.PSpecified.DEFAULT);
    RSAPadding padding = RSAPadding.getInstance(RSAPadding.PAD_OAEP_MGF1, keyLength / 8, new SecureRandom(), paramSpec);
    byte[] plainText2 = padding.unpad(paddedPlainText);

    System.out.println(""Unpadded plain text: "" + DatatypeConverter.printHexBinary(plainText2));
}

Notes:

RSA/ECB/NoPadding is not implemented for SunPKCS11 before JDK1.7.
This example was tested with BouncyCastle 1.50 and JDK 1.7

","7019","<java><encryption><bouncycastle><smartcard><pkcs#11>","2","6","2","2016-06-02 09:56:55","23853610","4","5","439916","","2014-05-30 17:54:43","2014-05-24 11:52:45",""
"23844694","Bad Padding Exception - RSA/ECB/OAEPWITHSHA-256ANDMGF1PADDING in pkcs11","My application is accessing e-Token for decrypting the response coming from the server
The session key from the server is encrypted using :-

RSA/ECB/OAEPWITHSHA-256ANDMGF1PADDING

I am using SunPKCS11 Provider for implementing the access to crypto token.
Whenever i try to decrypt this using the above mechanishm i.e. with RSA/ECB/OAEPWITHSHA-256ANDMGF1PADDING i am getting :-
**javax.crypto.BadPaddingException: doFinal() failed  
    at sun.security.pkcs11.P11RSACipher.implDoFinal(P11RSACipher.java:328)  
    at sun.security.pkcs11.P11RSACipher.engineDoFinal(P11RSACipher.java:353)  
    at javax.crypto.Cipher.doFinal(DashoA13*..)

The following is my code :-
private static final String TRANSFORMATION = ""RSA/ECB/OAEPWITHSHA-256ANDMGF1PADDING"";
private static final String SECURITY_PROVIDER = ""BC"";
private static final String DIGEST_ALGORITHM = ""SHA-256"";
private static final String MASKING_FUNCTION = ""MGF1"";

The code snippet where the error is coming is as follows :-
private byte[] decryptSecretKeyData(byte[] encryptedSecretKey, byte[] iv, PrivateKey privateKey) throws Exception {

        try {
            Cipher rsaCipher = Cipher.getInstance(TRANSFORMATION, SECURITY_PROVIDER);

            System.out.println(""Cipher block initialized""); - **Printed**
            PSource pSrc = (new PSource.PSpecified(iv));
            System.out.println(""PSource inisitialized""); - **Printed**


            rsaCipher.init(Cipher.DECRYPT_MODE, privateKey,
                    new OAEPParameterSpec(DIGEST_ALGORITHM, MASKING_FUNCTION,
                            MGF1ParameterSpec.SHA256, pSrc));


            System.out.println(""Here after cipher initilaization"");  - **Not Printed***

            return rsaCipher.doFinal(encryptedSecretKey);
        } catch (GeneralSecurityException e) {
            System.out.println(""GeneralSecurityException is ""+e.getMessage());
            throw new Exception(""Failed to decrypt AES secret key using RSA."", e);
        }
    }

I am Stuck in here and unable to decrypt the OAEP Transformation.
","I have found the issue is that the implementation of SunJCE's Cipher ""RSA/ECB/OAEPWITHSHA-256ANDMGF1PADDING"" is not compatible with other implementations (BouncyCastle/IAIK/PKCS11)
When setting AlgorithmParameters (with OAEPParameterSpec) an exception is thrown (javax.crypto.BadPaddingException)
Refer : 
Problems with Cipher ""RSA/ECB/OAEPWITHSHA-256ANDMGF1PADDING"" Bug Details
","7019","<java><encryption><bouncycastle><smartcard><pkcs#11>","2","0","2","2016-06-02 09:56:55","23853610","4","5","439916","","2014-05-30 17:54:43","2014-05-24 11:52:45",""
"14212143","Unable to load PKCS11 driver using IAIK PKCS11 Wrapper","I'm using the following:

Windows 7 64bit
JDK 7 64bit
JRE 7 64bit

The new funny JRE 7 64bit doesn't support Sun PKCS11 anymore (which is inside package 'sun.security.pkcs11'). And the big problem is that the end-users of the product by our company may have installed whatever version of JRE.
So I have to swap up the existing to code in 'Sun PKCS11' to 'IAIK PKCS11 Wrapper'. The wrapper by IAIK works simply this way:
(iaik-wrapper.jar)->(iaik-pkcs11-jni.dll)->(pki-token-driver.dll)

The PKI token driver dynamic link library is provided by the manufacturer of PKI USB token, it has the actual name of 'ca2-v34.dll'. The method to load this native driver is described in programmer's manual as below:
import iaik.pkcs.pkcs11.*;
...

Module pkcs11Driver;
try {
  pkcs11Driver = Module.getInstance(""ca2-v34.dll""); //<--exception!
  pkcs11Driver.initialize(null);

  //test
  System.out.println(pkcs11Driver.getInfo());
}
catch (Exception ex) {
  System.out.println(ex);
}

The exception is raised at the line marked in the code above, with this detail: java.io.IOException: %1 is not a valid Win32 application.
ca2-v34.dll
This exception surely means the IAIK library has found the .dll file, but it is not compatible somehow. I'm being stuck at this bottleneck.
","As noted by EJP in the comments right below the question, ca2-v34.dll is a 32bit dll. The sample usb token manager from the manufacturer is a 32bit-throughout software, so it can load this dll file on both Windows 32 and Windows 64.
The scenario of JRE is different:

In case the client computer has JRE 32bit installed, the Java application (.jar file) can run well because the process of JVM is a 32bit process.
The other case is that the client computer has JRE 64bit installed, the Java application can not run normally because JVM in this case is a 64bit process, it can load the Java application (.jar file) but fails to load the file 'ca2-v34.dll' due to a reason that this dll file is 32bit dll.

","6009","<java><java-native-interface><pki><pkcs#11><iaik-jce>","1","1","1","2013-01-09 04:39:50","14228367","4","1","995926","","2013-01-08 17:02:49","2013-01-08 09:45:22",""
"7009931","Connecting to SoftHSM java","Code:
String pkcs11cfg = ""pkcs11.cfg"";
Provider p = new SunPKCS11(pkcs11cfg);
Security.addProvider(p);

KeyStore ks = KeyStore.getInstance(""PKCS11"", p);
ks.load(null, pin);

System.out.println(ks.size()); // prints 0

cfg:
name = pkcs11Test
library = /usr/local/lib/libsofthsm.so
slot = 1

The problem is that I have some key pairs, I added them with pkcs11-tool. 
The version of softhsm is 1.2.1 
Why there aren't any aliases in the KeyStore? How to fix this? 
","We will release SoftHSM 1.3.0 soon. It has support for certificates and is tested with Java.
SoftHSM.java:
import java.io.*;
import java.math.*;
import java.util.*;

import java.security.*;
import java.security.interfaces.*;
import java.security.cert.*;
import sun.security.pkcs11.*;
import org.bouncycastle.x509.*;

import javax.security.auth.x500.X500Principal;

import org.bouncycastle.asn1.x509.BasicConstraints;
import org.bouncycastle.asn1.x509.ExtendedKeyUsage;
import org.bouncycastle.asn1.x509.GeneralName;
import org.bouncycastle.asn1.x509.GeneralNames;
import org.bouncycastle.asn1.x509.KeyPurposeId;
import org.bouncycastle.asn1.x509.KeyUsage;
import org.bouncycastle.asn1.x509.X509Extensions;
import org.bouncycastle.x509.X509V3CertificateGenerator;

class SoftHSM
{
    public static void main(String args[]) throws Exception {
        // Set up the Sun PKCS 11 provider
        String configName = ""softhsm.cfg"";
        Provider p = new SunPKCS11(configName);

        if (-1 == Security.addProvider(p)) {
            throw new RuntimeException(""could not add security provider"");
        }

        // Load the key store
        char[] pin = ""1234"".toCharArray();
        KeyStore ks = KeyStore.getInstance(""PKCS11"", p);
        ks.load(null, pin);

        // Generate the key
        SecureRandom sr = new SecureRandom();
        KeyPairGenerator keyGen = KeyPairGenerator.getInstance(""RSA"", p);
        keyGen.initialize(1024, sr);
        KeyPair keyPair = keyGen.generateKeyPair();
        PrivateKey pk = keyPair.getPrivate();

        // Java API requires a certificate chain
        X509Certificate[] chain = generateV3Certificate(keyPair);

        ks.setKeyEntry(""ALIAS-GOES-HERE"", pk, ""1234"".toCharArray(), chain);

        ks.store(null);

        System.out.println(""OK"");
    }


    public static X509Certificate[] generateV3Certificate(KeyPair pair) throws InvalidKeyException, NoSuchProviderException, SignatureException {
        Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());

        X509V3CertificateGenerator certGen = new X509V3CertificateGenerator();

        certGen.setSerialNumber(BigInteger.valueOf(System.currentTimeMillis()));
        certGen.setIssuerDN(new X500Principal(""CN=Test Certificate""));
        certGen.setNotBefore(new Date(System.currentTimeMillis() - 10000));
        certGen.setNotAfter(new Date(System.currentTimeMillis() + 10000));
        certGen.setSubjectDN(new X500Principal(""CN=Test Certificate""));
        certGen.setPublicKey(pair.getPublic());
        certGen.setSignatureAlgorithm(""SHA256WithRSA"");

        certGen.addExtension(X509Extensions.BasicConstraints, true, new BasicConstraints(false));
        certGen.addExtension(X509Extensions.KeyUsage, true, new KeyUsage(KeyUsage.digitalSignature | KeyUsage.keyEncipherment));
        certGen.addExtension(X509Extensions.ExtendedKeyUsage, true, new ExtendedKeyUsage(KeyPurposeId.id_kp_serverAuth));

        certGen.addExtension(X509Extensions.SubjectAlternativeName, false, new GeneralNames(new GeneralName(GeneralName.rfc822Name, ""test@test.test"")));

        X509Certificate[] chain = new X509Certificate[1];
        chain[0] = certGen.generateX509Certificate(pair.getPrivate(), ""SunPKCS11-SoftHSM"");

        return chain;
    }
}

softhsm.cfg:
name = SoftHSM
library = /usr/local/lib/libsofthsm.so
slot = 2
attributes(generate, *, *) = {
   CKA_TOKEN = true
}
attributes(generate, CKO_CERTIFICATE, *) = {
   CKA_PRIVATE = false
}
attributes(generate, CKO_PUBLIC_KEY, *) = {
   CKA_PRIVATE = false
}

","5917","<java><keystore><pkcs#11><softhsm>","8","14","1","2016-10-04 12:37:35","7036614","0","4","2315473","","2016-10-04 12:37:35","2011-08-10 11:20:06",""
"8422617","Access certificate and private key from pkcs#11 token or smart-card","I am making an application, in C#4, that has to sign a XML file. I'd no great problems, until I bumped into this: accessing a smart-card/token to get its certificates and private keys.
Nothing really out of the box, just get the certificate and key, based in a password.  
Does anyone know how to do it without any paid framework?
","The Microsoft Crypto API's support the ability to interact with hardware devices out of the box.  This will require that your card have a driver provided by the manufacture though.  Depending on the card and OS the driver may have already downloaded for you.  The following .NET article should help you at least get started and see if you can use some of the MSoft API's out of the box.  http://msdn.microsoft.com/en-us/library/ms229931.aspx.
If you have additional information about the type of card you are utilizing you may be able to use PC/SC and specific APDU commands to ask the card to sign or encrypt information for you.  It is common for card applets to not permit retrieval of a certificates private key for security reasons.
Good Luck.  Add a comment if you have some more questions about this.
","5866","<c#><c#-4.0><smartcard><pkcs#11>","2","5","1","2012-09-13 10:39:45","","0","","254882","","2012-09-13 10:39:45","2011-12-07 21:11:52",""
"3231293","How to interface with PKCS#11 compliant HSM device in PHP","How can I use key material from a PKCS#11 compliant HSM (for example a SafeNet iKey 2032 [USB] or a Aladdin eToken PRO [USB]) in PHP application running on a Linux server?
","i am assuming you are asking about users using their tokens to generate signatures.  the signatures are generated on the client side, i.e. in the browser.  the fact that your solution is on linux/php does not matter.
you have to add a software component called a signer, which will read the certificate and generate the signature.
existing open source signers are written in java, with the reason that a java applet is still the most available client side technology.
","5629","<php><linux><usb><pkcs#11><hsm>","6","0","3","2012-04-28 09:49:43","","0","3","","","","2010-07-12 18:50:43",""
"3231293","How to interface with PKCS#11 compliant HSM device in PHP","How can I use key material from a PKCS#11 compliant HSM (for example a SafeNet iKey 2032 [USB] or a Aladdin eToken PRO [USB]) in PHP application running on a Linux server?
","I have not seen, and a cursory search has not found, a PCKS#11 glue library for PHP.  Probably not the answer you're looking for. (:  If you have better search fu than I, do update this thread.
I think your best bet would be to write a C program that calls PKCS#11 and accesses the HSM, and call that from your PHP app as an external binary.  Even if a PKCS#11 wrapper emerges for PHP, this approach will give you the full API available to the C code rather than having to make do with whatever the author of the wrapper needed to satisfy their own requirements.  PKCS#11 is a large API, and wrapper implementations are often less than complete.
","5629","<php><linux><usb><pkcs#11><hsm>","6","3","3","2012-04-28 09:49:43","","0","3","","","","2010-07-12 18:50:43",""
"3231293","How to interface with PKCS#11 compliant HSM device in PHP","How can I use key material from a PKCS#11 compliant HSM (for example a SafeNet iKey 2032 [USB] or a Aladdin eToken PRO [USB]) in PHP application running on a Linux server?
","You need to look at the pkcs11-helper from OpenSC project. It will be a hard way if you will try to access the PKCS#11 module directly from PHP.
","5629","<php><linux><usb><pkcs#11><hsm>","6","2","3","2012-04-28 09:49:43","","0","3","","","","2010-07-12 18:50:43",""
"16550442","Using Java PKCS#11 to read DoD Common Access Card","I have researched on how to use Sun PKCS#11 api to access a DoD CAC and possibly use the CAC to access (read-only) Active Directory. My problem has been, what I have found in most cases will make a reference to some code, but never shows the referenced code. I have found the following code, but gives an error. Does anyone know of any code examples or clear documentation for using PKCS11 for CACs? Or an API solution which might work?
import java.io.*;
import java.util.*;
import java.security.cert.CertificateException;
import java.security.KeyStoreException;
import java.security.cert.X509Certificate;
import java.security.KeyStore;
import java.security.Provider;
import java.security.Security;


public class SmartCard {
    public static void main(String[] args) throws Exception {
        try {
            String configName = ""pkcs11.properties"";
            Provider p = new sun.security.pkcs11.SunPKCS11(configName);
            Security.addProvider(p);
            Console c = System.console();
            char[] pin = c.readPassword(""Enter your PIN: "");
            KeyStore cac = null;
            cac = KeyStore.getInstance(""PKCS11"");
            cac.load(null, pin);
            showInfoAboutCAC(cac);
        }
        catch(Exception ex) {
            ex.printStackTrace();
            System.exit(0);
        }
    }
    public static void showInfoAboutCAC(KeyStore ks) throws KeyStoreException, CertificateException {
        Enumeration<String> aliases = ks.aliases();
        while(aliases.hasMoreElements()) {
            String alias = aliases.nextElement();
            X509Certificate[] cchain = (X509Certificate[]) ks.getCertificateChain(alias);
            System.out.println(""Certificate Chain for "" + alias);
            for(int i = 0; i < cchain.length; i++) {
                System.out.println("" -SubjectDN: "" + cchain[i].getSubjectDN());
                System.out.println("" -IssuerDN: "" + cchain[i].getIssuerDN());
            }
        }
    }
}

java.security.ProviderException: Initialization failed
        at sun.security.pkcs11.SunPKCS11.<init>(SunPKCS11.java:374)
        at sun.security.pkcs11.SunPKCS11.<init>(SunPKCS11.java:103)
        at smartcard.SmartCard.main(SmartCard.java:21)
Caused by: java.io.IOException: The specified procedure could not be found.

        at sun.security.pkcs11.wrapper.PKCS11.connect(Native Method)
        at sun.security.pkcs11.wrapper.PKCS11.<init>(PKCS11.java:137)
        at sun.security.pkcs11.wrapper.PKCS11.getInstance(PKCS11.java:150)
        at sun.security.pkcs11.SunPKCS11.<init>(SunPKCS11.java:312)
        ... 2 more

","In the following code, configName is supposed to be a file path to some configuration file.  It does not exist, or java is unable to read it, so an IOException is being thrown.  Figure out what the file is supposed to be and create it, or otherwise ensure java has access to the file, and the code will run.
String configName = ""pkcs11.properties"";
Provider p = new sun.security.pkcs11.SunPKCS11(configName);

Reading the manual may help: 
http://docs.oracle.com/javase/8/docs/technotes/guides/security/p11guide.html#Config
","5624","<java><pkcs#11><cac>","5","2","2","2014-04-07 18:52:37","","0","2","2047056","","2013-05-14 18:48:31","2013-05-14 18:40:27",""
"16550442","Using Java PKCS#11 to read DoD Common Access Card","I have researched on how to use Sun PKCS#11 api to access a DoD CAC and possibly use the CAC to access (read-only) Active Directory. My problem has been, what I have found in most cases will make a reference to some code, but never shows the referenced code. I have found the following code, but gives an error. Does anyone know of any code examples or clear documentation for using PKCS11 for CACs? Or an API solution which might work?
import java.io.*;
import java.util.*;
import java.security.cert.CertificateException;
import java.security.KeyStoreException;
import java.security.cert.X509Certificate;
import java.security.KeyStore;
import java.security.Provider;
import java.security.Security;


public class SmartCard {
    public static void main(String[] args) throws Exception {
        try {
            String configName = ""pkcs11.properties"";
            Provider p = new sun.security.pkcs11.SunPKCS11(configName);
            Security.addProvider(p);
            Console c = System.console();
            char[] pin = c.readPassword(""Enter your PIN: "");
            KeyStore cac = null;
            cac = KeyStore.getInstance(""PKCS11"");
            cac.load(null, pin);
            showInfoAboutCAC(cac);
        }
        catch(Exception ex) {
            ex.printStackTrace();
            System.exit(0);
        }
    }
    public static void showInfoAboutCAC(KeyStore ks) throws KeyStoreException, CertificateException {
        Enumeration<String> aliases = ks.aliases();
        while(aliases.hasMoreElements()) {
            String alias = aliases.nextElement();
            X509Certificate[] cchain = (X509Certificate[]) ks.getCertificateChain(alias);
            System.out.println(""Certificate Chain for "" + alias);
            for(int i = 0; i < cchain.length; i++) {
                System.out.println("" -SubjectDN: "" + cchain[i].getSubjectDN());
                System.out.println("" -IssuerDN: "" + cchain[i].getIssuerDN());
            }
        }
    }
}

java.security.ProviderException: Initialization failed
        at sun.security.pkcs11.SunPKCS11.<init>(SunPKCS11.java:374)
        at sun.security.pkcs11.SunPKCS11.<init>(SunPKCS11.java:103)
        at smartcard.SmartCard.main(SmartCard.java:21)
Caused by: java.io.IOException: The specified procedure could not be found.

        at sun.security.pkcs11.wrapper.PKCS11.connect(Native Method)
        at sun.security.pkcs11.wrapper.PKCS11.<init>(PKCS11.java:137)
        at sun.security.pkcs11.wrapper.PKCS11.getInstance(PKCS11.java:150)
        at sun.security.pkcs11.SunPKCS11.<init>(SunPKCS11.java:312)
        ... 2 more

","The properties file does exist, and is in the same directory as the application. And as far as I can tell, Java has access to the file.
If it helps, here's the contents of the file:
name=SmartCard
library=C:/Program Files/Java/jre7/bin/j2pkcs11.dll

","5624","<java><pkcs#11><cac>","5","1","2","2014-04-07 18:52:37","","0","2","2047056","","2013-05-14 18:48:31","2013-05-14 18:40:27",""
"19456555","Openssl, engine_pkcs11, libp11/OpenSC","Friends, I have a smart card, which I want to integrate OpenSSL. Plan to do this through a system of ""ENGINE"" in OpenSSL. However, I have a problem with understanding. The fact that there are such things as engine_pkcs11, opensc, libp11, pkcs11-helper. Can anyone explain the relationship? What is and what to compile in the first place?
Is it enough to write me a library with external PKCS # 11 functions to connect it to openssl? I have to take the source code of the library engine_pkcs11 and modify it to fit my card?
Do I need this opensc, libp11, pkcs11-helper? Why, then, need these libraries?
Also, I should note that the smart card does not support RSA-algorithm, it will be a different algorithm!!!!
Really looking forward to your answers! 
","The openssl engine for pkcs#11 by OpenSC is needed to make interaction between openssl and smartcard by pkcs#11 possible.
The engine is built on top of libp11 by OpenSC, an abstraction/wrapper layer/interface, built on pkcs#11 standard API for utility purpose.
From top to bottom we have:

openssl (by Openssl)
openssl pkcs#11 engine (by OpenSC)
libp11 (by OpenSC)
pkcs#11 standard api (by RSA Laboratories)
pkcs#11 module (by Smartcard vendor)

So in an optimum case you have only to write the pkcs#11 module for you specific smartcard hardware and then load it using pkcs#11 engine.
The problem here is that pkcs#11 engine, at the moment, support only CKM_RSA_PKCS, so, probably, you have also to extend the current pkcs#11 openssl engine.
More info at https://github.com/OpenSC/OpenSC/wiki
","5474","<openssl><pkcs#11><opensc>","3","7","3","2019-10-08 13:59:18","","0","2","3102264","","2015-06-11 21:13:51","2013-10-18 18:23:48",""
"19456555","Openssl, engine_pkcs11, libp11/OpenSC","Friends, I have a smart card, which I want to integrate OpenSSL. Plan to do this through a system of ""ENGINE"" in OpenSSL. However, I have a problem with understanding. The fact that there are such things as engine_pkcs11, opensc, libp11, pkcs11-helper. Can anyone explain the relationship? What is and what to compile in the first place?
Is it enough to write me a library with external PKCS # 11 functions to connect it to openssl? I have to take the source code of the library engine_pkcs11 and modify it to fit my card?
Do I need this opensc, libp11, pkcs11-helper? Why, then, need these libraries?
Also, I should note that the smart card does not support RSA-algorithm, it will be a different algorithm!!!!
Really looking forward to your answers! 
","I add some recent information that can help for users that fall into this question.

opensc-pkcs11.so is the OpenSC module to implement the PKCS#11 API. It is inked with libopensc.so and other OpenSC libs.
libp11 is a helper library designed to make it easier to use PKCS#11 in applications without having to program to the PKCS#11 API. It will dlopen a pkcs#11 module.
engine_pkcs11 was an OpenSSL engine module that used libp11 it was so dependent on the versions of OpenSSL and libp11, that it is now included in libp11 as the libp11 can be uses as the engine too.
pkcs11-helper (Which I have never used) is another library to make using PKCS#11 ""easier"" to use.
pkcs11-spy is a PKCS#11 API module that traces all calls and returns of another PKCS#11 module that pkcs11-spy dlopens.

For more information
","5474","<openssl><pkcs#11><opensc>","3","1","3","2019-10-08 13:59:18","","0","2","3102264","","2015-06-11 21:13:51","2013-10-18 18:23:48",""
"19456555","Openssl, engine_pkcs11, libp11/OpenSC","Friends, I have a smart card, which I want to integrate OpenSSL. Plan to do this through a system of ""ENGINE"" in OpenSSL. However, I have a problem with understanding. The fact that there are such things as engine_pkcs11, opensc, libp11, pkcs11-helper. Can anyone explain the relationship? What is and what to compile in the first place?
Is it enough to write me a library with external PKCS # 11 functions to connect it to openssl? I have to take the source code of the library engine_pkcs11 and modify it to fit my card?
Do I need this opensc, libp11, pkcs11-helper? Why, then, need these libraries?
Also, I should note that the smart card does not support RSA-algorithm, it will be a different algorithm!!!!
Really looking forward to your answers! 
","And in addition:
Here a description for windows users
On windows it is needed to compile the engine_pkcs11.dll by yourself. It will not be delivered by the OpenSC installer anymore.
Instructions here:
https://github.com/OpenSC/libp11/blob/master/INSTALL.md
Make sure you installed OpenSSL 64bit edition to C:\OpenSSL-Win64
download latest release from - https://github.com/OpenSC/libp11/releases) 
compile with x64 native command prompt for visual studio with
nmake -f Makefile.mak OPENSSL_DIR=C:\OpenSSL-Win64 BUILD_FOR=WIN64

Then you got the pkcs11.dll. Copy that and the opensc-pkcs11.dll to a directory (without blanks in the names)
And now OpenSSL is able to load the dlls.
engine dynamic -pre ID:pkcs11 -pre SO_PATH:C:\Tools\pkcs11\pkcs11.dll -pre LIST_ADD:1 -pre LOAD -pre MODULE_PATH:C:\Tools\pkcs11\opensc-pkcs11.dll

Now you can use your OpenSC device.
","5474","<openssl><pkcs#11><opensc>","3","0","3","2019-10-08 13:59:18","","0","2","3102264","","2015-06-11 21:13:51","2013-10-18 18:23:48",""
"12412802","Sun.security cannot be found after upgrading Java","I have an application created with Play 2.0. I implemented scribe-java library to use some OAuth services. Until today everything was fine but when I upgrade jdk and reboot the server I couldn't use scribe-java library. It seems it uses some classes like sun/security/pkcs11/P11Key and sun/security/pkcs11/Length in sun.security package but couldn't find it.
""java -version"" returns this:

java version ""1.7.0_03""
OpenJDK Runtime Environment (IcedTea7 2.1.1pre) (7~u3-2.1.1~pre1-1ubuntu3)
OpenJDK 64-Bit Server VM (build 22.0-b10, mixed mode)

Play 2.0 stacktrace:
! @6bk5o8md2 - Internal server error, for request [GET /user/service/google/oauth_callback/?code=[SECRET]] ->

play.core.ActionInvoker$$anonfun$receive$1$$anon$1: Execution exception [[NoClassDefFoundError: sun/security/pkcs11/P11Key]]
        at play.core.ActionInvoker$$anonfun$receive$1.apply(Invoker.scala:134) [play_2.9.1.jar:2.0.2]
        at play.core.ActionInvoker$$anonfun$receive$1.apply(Invoker.scala:115) [play_2.9.1.jar:2.0.2]
        at akka.actor.Actor$class.apply(Actor.scala:318) [akka-actor.jar:2.0.2]
        at play.core.ActionInvoker.apply(Invoker.scala:113) [play_2.9.1.jar:2.0.2]
        at akka.actor.ActorCell.invoke(ActorCell.scala:626) [akka-actor.jar:2.0.2]
        at akka.dispatch.Mailbox.processMailbox(Mailbox.scala:197) [akka-actor.jar:2.0.2]
Caused by: java.lang.NoClassDefFoundError: sun/security/pkcs11/P11Key
        at sun.security.pkcs11.P11ECKeyFactory.generatePublic(P11ECKeyFactory.java:234) ~[sunpkcs11.jar:na]
        at sun.security.pkcs11.P11ECKeyFactory.implTranslatePublicKey(P11ECKeyFactory.java:103) ~[sunpkcs11.jar:na]
        at sun.security.pkcs11.P11ECKeyFactory.engineGeneratePublic(P11ECKeyFactory.java:152) ~[sunpkcs11.jar:na]
        at java.security.KeyFactory.generatePublic(KeyFactory.java:334) ~[na:1.7.0_03]
        at sun.security.x509.X509Key.buildX509Key(X509Key.java:223) ~[na:1.7.0_03]
        at sun.security.x509.X509Key.parse(X509Key.java:170) ~[na:1.7.0_03]

","After another update && upgrade, jdk upgraded from 2.1.1pre to 2.3.2 and the problem fixed. What happened is that Oracle wasted my 2 hours, sucks. :(
","5416","<java><playframework><java-7><scribe><pkcs#11>","3","2","1","2018-11-06 09:37:50","12414827","5","","1479414","","2018-11-06 09:37:50","2012-09-13 18:47:06",""
"6458516","How Sign a PDF File using a Ceritificate PKCS11, SmartCard-eToken and itextsharp in .NET?","Sorry, but I don't speak english, and I will do my best.
I tried to sign a PDF document with a digital certificate from PKCS # 11 type in C #. NET 4.0. As you know such a certificate requires a private key, in my case is stored on an Aladdin eToken, and then make a signature using itextsharp.
I tried with CAPICOM, System.Security.Cryptography, BouncyCastle, Chilkat, Net.Pkcs11, etc. But no works.
PdfSignatureAppearance has the method SetCrypto(key, cert, ..., ...) , where the first parameter is the key of the certificate and the second parameter is the same certificate, but I can't get the private key of the eToken. Hey read and think this is impossible.
I'm using C # native, using cryptography. NET in a few lines of code:
X509Certificate2 x509 = (Certificate from X509Certificate2Collection);
CspParameters cspParams = new CspParameters(1"",eToken Base Cryptographic Provider"", ""Default"")
cspParams.Flags = CspProviderFlags.UseMachineKeyStore;
using (RSACryptoServiceProvider rsa = new RSACryptoServiceProvider(cspParams))
{
byte[] signature = rsa.SignData(x509.RawData, ""SHA1"");
//I don't know how join it with itextsharp
rsa.PersistKeyInCsp = false;
rsa.Clear();
}

I think I can use the method SignData(), but I'm a little confused. How I can relate itextsharp.
I found much documentation but nothing specific, such as java applets do not work because I have Windows 7 64 bits, and codes. NET does not work. I would, if possible, use the same core. NET or free libraries with support for Windows 7 64 bits. Someone did a real solution?
Also I would like to know how to delete the eToken PIN cache since it only asks me for the password once and then stays in memory.
Please I need your help.
Thank you.
","I've found this great framework to work with tokens: pkcs11.net
found in here: http://sourceforge.net/projects/pkcs11net/
The thing is:
with the rsa private key and certificate you got from the token, you it with use IText to sign. With the key, is the plain signing you are shown in IText's web site.
You see, pdf signing is different from pkcs7 signing, and that is different from xml signing.
Post a comment if you need more info
","5398","<itextsharp><digital-signature><x509certificate><smartcard><pkcs#11>","2","1","1","2013-05-15 08:32:08","","1","","812797","","2011-06-23 18:43:48","2011-06-23 17:56:41",""
"22663457","PKCS11 key wrapping using openssl","I'm tring to perform key wrapping operation on a smart card hardware using C_WrapKey() with a public key loaded by CreateObject. I get back an encrypted byte array as a result. Is it possible to perform the same operation using openssl?
I tried using opensal as follows:
openssl rsautl -encrypt -in symkey.data -out symkey.enc -pubin rsaPub.der -keyform DER -pkcs

symkey.data: 192 bits DES3 key 
rsaPub.der : 128 bit RSA Public key in DER format

The resulting symkey.enc file is 128 bytes in size, but the result from my hardware is always 256 bytes. I suppose it's about padding but not sure.
","To answer your specific case:
RFC3447 says that RSAES-PKCS1-v1_5 encryption scheme can operate on messages of length up to k - 11 octets (k is the octet length of the RSA modulus) so there is no way you can use 128bit RSA key to encrypt 192bit DES3 key. OpenSSL would end up with the following error:
openssl rsautl -encrypt -in symkey.data -out symkey.enc -pubin -inkey rsaPub.der -keyform DER -pkcs
RSA operation error
7240:error:0406D06D:rsa routines:RSA_padding_add_PKCS1_type_2:data too large for key size:.\crypto\rsa\rsa_pk1.c:151:

Are you sure that you have provided correct information in your question?
To answer key wrapping with OpenSSL in general:
Yes it is possible to wrap/unwrap DES3 key with the RSA key using OpenSSL. Mechanism CKM_RSA_PKCS you are using with your PKCS#11 library identifies RSAES-PKCS1-v1_5 encryption scheme (RSA encryption with PKCS#1 v1.5 padding) which is fully supported by OpenSSL.
You can easily check out that my answer is correct with the command line OpenSSL tool and a few lines of code that use PKCS#11 library:

Generate RSA key pair:
openssl genrsa -out private.key 2048

Extract RSA public key from generated RSA key pair:
openssl rsa -in private.key -pubout -out public.key

Extract modulus and exponent from RSA public key:
openssl rsa -in public.key -pubin -text

Import RSA public key into your PKCS#11 token, generate DES3 key, wrap DES3 key with RSA public key and save results (code is written in C#):
using (Pkcs11 pkcs11 = new Pkcs11(""siecap11.dll"", false))
{
    // Find first slot with token present
    Slot slot = pkcs11.GetSlotList(true)[0];

    // Open RW session
    using (Session session = slot.OpenSession(false))
    {
        // Login as normal user
        session.Login(CKU.CKU_USER, ""11111111"");

        // Define attributes of RSA public key
        List<ObjectAttribute> publicKeyAttributes = new List<ObjectAttribute>();
        publicKeyAttributes.Add(new ObjectAttribute(CKA.CKA_CLASS, CKO.CKO_PUBLIC_KEY));
        publicKeyAttributes.Add(new ObjectAttribute(CKA.CKA_KEY_TYPE, CKK.CKK_RSA));
        publicKeyAttributes.Add(new ObjectAttribute(CKA.CKA_TOKEN, true));
        publicKeyAttributes.Add(new ObjectAttribute(CKA.CKA_PRIVATE, false));
        publicKeyAttributes.Add(new ObjectAttribute(CKA.CKA_LABEL, ""WrapTest""));
        publicKeyAttributes.Add(new ObjectAttribute(CKA.CKA_ID, ConvertUtils.HexStringToBytes(""00010203040506070809"")));
        publicKeyAttributes.Add(new ObjectAttribute(CKA.CKA_ENCRYPT, true));
        publicKeyAttributes.Add(new ObjectAttribute(CKA.CKA_VERIFY, true));
        publicKeyAttributes.Add(new ObjectAttribute(CKA.CKA_VERIFY_RECOVER, true));
        publicKeyAttributes.Add(new ObjectAttribute(CKA.CKA_WRAP, true));
        // Use modulus extracted from RSA public key
        publicKeyAttributes.Add(new ObjectAttribute(CKA.CKA_MODULUS, ConvertUtils.HexStringToBytes(""c3968577a4f007485e77cdf20beca6a4dd200a3d9e478e14db66a4e40534b530c08b1f0604e7dc44e4171b85d84a550b189f94751d7cb048040a66440698f33d8f4634a3e5623a6e69b98563e622df187429738ea4c5e697f236d2d80792803cfc783670ce9697b380cf3603efca098b0db2eac3b48ff80161ea3dd00c7657f7366fc2bafa4ef617ee1a927eff71dcc3037df5ed09bd82dd976be3fd0d192b7d18aac71ff3d7b760946963786558584b597fce913cd586da5e854b8264e708f0e52de82e37f838d7106c876b9750946af38d44ee4ff8f984e168557a83814fa4c2acaca413a7cbc0249bf0b76a2ce1ff2ab9a43463c3be8ede6a4579a6d4168f"")));
        // Use exponent extracted from RSA public key
        publicKeyAttributes.Add(new ObjectAttribute(CKA.CKA_PUBLIC_EXPONENT, ConvertUtils.HexStringToBytes(""010001"")));

        // Import public key
        ObjectHandle pubKey = session.CreateObject(publicKeyAttributes);

        // Define attributes of DES key
        List<ObjectAttribute> desKeyAttributes = new List<ObjectAttribute>();
        desKeyAttributes.Add(new ObjectAttribute(CKA.CKA_CLASS, CKO.CKO_SECRET_KEY));
        desKeyAttributes.Add(new ObjectAttribute(CKA.CKA_KEY_TYPE, CKK.CKK_DES3));
        desKeyAttributes.Add(new ObjectAttribute(CKA.CKA_ENCRYPT, true));
        desKeyAttributes.Add(new ObjectAttribute(CKA.CKA_DECRYPT, true));
        desKeyAttributes.Add(new ObjectAttribute(CKA.CKA_DERIVE, true));
        desKeyAttributes.Add(new ObjectAttribute(CKA.CKA_EXTRACTABLE, true));

        // Generate DES key
        ObjectHandle desKey = session.GenerateKey(new Mechanism(CKM.CKM_DES3_KEY_GEN), desKeyAttributes);

        // Read value of DES key
        desKeyAttributes = session.GetAttributeValue(desKey, new List<CKA>() { CKA.CKA_VALUE });
        byte[] desKeyValue = desKeyAttributes[0].GetValueAsByteArray();
        System.IO.File.WriteAllBytes(@""des.key"", desKeyValue);

        // Wrap key
        byte[] wrappedKey = session.WrapKey(new Mechanism(CKM.CKM_RSA_PKCS), pubKey, desKey);
        System.IO.File.WriteAllBytes(@""wrapped.key"", wrappedKey);

        session.DestroyObject(pubKey);
        session.DestroyObject(desKey);
        session.Logout();
    }
}

Unwrap DES3 key with RSA private key:
openssl rsautl -decrypt -pkcs -inkey private.key -in wrapped.key -out unwrapped.key

There is exactly same content/key stored in ""des.key"" and ""unwrapped.key"" files. This indicates successful unwrapping.
Alternatively use OpenSSL to wrap DES3 key with RSA public key:
openssl rsautl -encrypt -pkcs -pubin -inkey public.key -in unwrapped.key -out wrapped2.key


","5181","<encryption><openssl><pkcs#11>","2","2","1","2017-03-13 14:27:01","22676178","3","0","2196426","","2017-03-13 14:27:01","2014-03-26 14:04:37",""
"39825759","java.security.KeyStoreException: PKCS11 not found","My goal is to read information from a CAC card and use pkcs11 to extract information from it and sign my document. I couldn't find the right dll for my hardware, so I installed openSC on my machine and used opensc-pkcs11.dll in the following code:
String configName = ""pkcs.cnf""; //my config file that points to opensc-pkcs11.dll
String PIN = ""123456"";
Provider p = new sun.security.pkcs11.SunPKCS11(configName);
Security.addProvider(p);
KeyStore keyStore = KeyStore.getInstance(""PKCS11"");
char[] pin = PIN.toCharArray();
keyStore.load(null, pin);

But I'm getting an error at the following location   
 KeyStore keyStore = KeyStore.getInstance(""PKCS11"");

with the Error stacktrace:
java.security.KeyStoreException: PKCS11 not found
    at java.security.KeyStore.getInstance(Unknown Source)
    Caused by: java.security.NoSuchAlgorithmException: no such algorithm: PKCS11 for provider SunPKCS11-FooAccelerator
    at sun.security.jca.GetInstance.getService(Unknown Source)
    at sun.security.jca.GetInstance.getInstance(Unknown Source)
    at java.security.Security.getImpl(Unknown Source)
    ... 2 more

Help!
","First create a config.cfg as shown below:
name=name of your CAC card
slot=1
library=C:\Windows\System32\eps2003csp11.dll 
\\This is the dll file for etoken like this when you are installing driver, a separate dll file would be generated for your CAC card.

Then provide the config file path in the program, as shown below:
Provider p = new sun.security.pkcs11.SunPKCS11(configFilepath);
Security.addProvider(p);

","4871","<java><keystore><pkcs#11><cac>","0","0","1","2016-12-04 09:53:49","","3","","5260008","","2016-12-04 09:22:08","2016-10-03 06:37:50",""
"15787245","sun.security.pkcs11 on javafx","I try to develop a javafx aplication that access a smartcard.
I have a simple proof of concept, like this:
package javafxapplication7;

import java.net.URL;
import java.util.ResourceBundle;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.control.Label;
import sun.security.pkcs11.SunPKCS11;


public class SampleController implements Initializable {

   @FXML
   private Label label;

   @FXML
   private void handleButtonAction(ActionEvent event) {
      SunPKCS11 a = new SunPKCS11();
   }

   @Override
   public void initialize(URL url, ResourceBundle rb) {
       // TODO
   }    
}

and the exepcion is:
Caused by: java.lang.NoClassDefFoundError: sun/security/pkcs11/SunPKCS11
at javafxapplication7.SampleController.handleButtonAction(SampleController.java:26)

","Regardless of why you get this specific issue, don't use sun.* classes. They are not designed for public use.
You probably want to be using the SunPKCS11 JCE provider to work with your smart card. Take a look at this guide to help get you started: http://docs.oracle.com/javase/1.5.0/docs/guide/security/p11guide.html.
","4861","<java><pkcs#11>","3","0","2","2013-04-03 12:27:08","15787369","2","","","","","2013-04-03 12:21:23",""
"15787245","sun.security.pkcs11 on javafx","I try to develop a javafx aplication that access a smartcard.
I have a simple proof of concept, like this:
package javafxapplication7;

import java.net.URL;
import java.util.ResourceBundle;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.control.Label;
import sun.security.pkcs11.SunPKCS11;


public class SampleController implements Initializable {

   @FXML
   private Label label;

   @FXML
   private void handleButtonAction(ActionEvent event) {
      SunPKCS11 a = new SunPKCS11();
   }

   @Override
   public void initialize(URL url, ResourceBundle rb) {
       // TODO
   }    
}

and the exepcion is:
Caused by: java.lang.NoClassDefFoundError: sun/security/pkcs11/SunPKCS11
at javafxapplication7.SampleController.handleButtonAction(SampleController.java:26)

","Just install a 32bit JDK along side (or instead) of your 64 bit JDK, and make sure you compile and sign the JAR/COD file with the 32 bit version.
Actually it is a bug in the 64 bit version.. http://bugs.sun.com/bugdatabase/view_bug.do;jsessionid=f1279f413fd19e3a247022d6dcca9?bug_id=7105065
I found it in the following discussions :- 
http://www.java.net/node/703858
http://tai-dev.blog.co.uk/2009/11/11/are-you-seeing-the-java-lang-noclassdeffounderror-sun-security-pkcs11-sunpkcs11-error-when-signing-your-rim-blackberry-j2me-apps-7352729/
http://community.igniterealtime.org/thread/30821
","4861","<java><pkcs#11>","3","3","2","2013-04-03 12:27:08","15787369","2","","","","","2013-04-03 12:21:23",""
"19591470","How to make initialisation of usb Token (epass2003) for OpenSC undone?","To use it with OpenSC for some testing, I reinitialized the smartcard usb token (epass2003/storepass) with the opensc tools:  
pkcs15-init.exe –E  
pkcs15-init.exe --create-pkcs15 --profile pkcs15+onepin --use-default-transport-key --pin 12345678 --puk 1234567890 --label ""Tori""

The Token works fine with opensc software with the opensc-pkcs11.dll .
But now the Card is not found under java PKCS#11 with both dll's the vendors and the opensc dll. (I use Windows 7 64Bit)
But the big problem is that the token not found anymore by the Feitian software, and so the formatting-tool does not work...
Is there a Way to turn the token back to it's condition on delivery?
","If someone run into the same problem, here is the solution:
You need the ""Format tool for ePass2003"", ask the support for the initialize tool which is able to format the token from PKCS#15 to Feitian file system. It is named like another tool but it is different.
After launching the tool and clicking on initialize, the Token is found by the Feitian tools again.
","4772","<smartcard><pkcs#11>","1","3","1","2013-10-29 10:11:17","19655174","2","","589259","","2013-10-27 12:38:14","2013-10-25 13:39:40",""
"9012214","trying to enable FIPS mode using SunPKCS11 with NSS in Java","I'm working on a project requiring FIPS 140-2 validated cryptography, and I'm trying to use NSS with the SunPKCS11 token interface, and I've gotten it working up until turning on FIPS mode in NSS.  I get an error, CKR_USER_NOT_LOGGED_IN, that I just don't have any idea what to do with.  Any suggestions as to what I should do?
I'm new to the security world, so this code is cobbled together from the examples in the Oracle Java Tutorials, the SunPKCS11 reference page, and suggestions for using NSS in FIPS mode on the web.
Here's the code I'm using:
String ksName = ""my.pfx"";
char[] spass = {'m', 'y', 'p', 'w' };
String alias = ""testalias"";
try {
    KeyStore ks = KeyStore.getInstance(""PKCS12"");
    FileInputStream ksfis = new FileInputStream(ksName); 
    BufferedInputStream ksbufin = new BufferedInputStream(ksfis);
    ks.load(ksbufin, spass);
    PrivateKey priv = (PrivateKey) ks.getKey(alias, spass);

    System.out.println("" Initialize the signing."");
    Signature sig = Signature.getInstance(""SHA1withRSA"", ""SunPKCS11-NSS-FIPS"");
    sig.initSign(priv);

    System.out.println("" Open the digital object to sign."");
    FileInputStream fis = new FileInputStream( ""digitalRecipes2.txt"" );
    BufferedInputStream bufin = new BufferedInputStream(fis);
    byte[] buffer = new byte[1024];
    int len;
    while ((len = bufin.read(buffer)) >= 0) {
        sig.update(buffer, 0, len);
    }
    bufin.close();

    byte[] realSig = sig.sign();

    FileOutputStream sigfos = new FileOutputStream(""digitalRecipes2.txt.sig"");
    sigfos.write(realSig);
    sigfos.close();

    java.security.cert.Certificate cert = ks.getCertificate(alias);
    byte[] encodedCert = cert.getEncoded();

    FileOutputStream certfos = new FileOutputStream(""mykey.cert"");
    certfos.write(encodedCert);
    certfos.close();    
} catch (Exception e) {
    System.err.println( ""Caught exception "" + e.toString() );
    e.printStackTrace();
}

and here's the config I'm using for nss.
name = NSS-FIPS
nssLibraryDirectory = /opt/local/lib/nss
nssSecmodDirectory = /Users/xxxx/work/workspace/learnin/XXXX
nssDbMode = readWrite 
nssModule = fips

When I run this code, I get the the following stacktrace.
Initialize the signing.
Caught exception java.security.InvalidKeyException: Could not create RSA private key
java.security.InvalidKeyException: Could not create RSA private key
    at     sun.security.pkcs11.P11RSAKeyFactory.implTranslatePrivateKey(P11RSAKeyFactory.java:88)
    at sun.security.pkcs11.P11KeyFactory.engineTranslateKey(P11KeyFactory.java:115)
    at sun.security.pkcs11.P11KeyFactory.convertKey(P11KeyFactory.java:48)
    at sun.security.pkcs11.P11Signature.engineInitSign(P11Signature.java:374)
    at java.security.Signature$Delegate.engineInitSign(Signature.java:1095)
    at java.security.Signature.initSign(Signature.java:480)
    at     com.xxxxxxxx.digitalSigning.SignMeUpSunPKCS11NSS.main(SignMeUpSunPKCS11NSS.java:43)
Caused by: sun.security.pkcs11.wrapper.PKCS11Exception: CKR_USER_NOT_LOGGED_IN
    at sun.security.pkcs11.wrapper.PKCS11.C_CreateObject(Native Method)
    at sun.security.pkcs11.P11RSAKeyFactory.generatePrivate(P11RSAKeyFactory.java:238)
    at     sun.security.pkcs11.P11RSAKeyFactory.implTranslatePrivateKey(P11RSAKeyFactory.java:62)
    ... 6 more

and it's the CKR_USER_NOT_LOGGED_IN error that I have no idea what to do with.
If I change the NSS configuration to not use FIPS mode, then the program runs fine and signs the file, gives the signature, and gives the public key.
I created the NSS databases using the following commands while in the appropriate directory listed in the NSS config file.
modutil -create -dbdir .
modutil -fips true -dbdir .
modutil -changepw ""NSS FIPS 140-2 Certificate DB"" -dbdir .

","You should login on security token first. You can use AuthProvider:
AuthProvider aprov = Security.getProvider(""SunPKCS11-NSS-FIPS"");
aprov.login(subject, new MyCallbackHandler());

In accordance with:
http://docs.oracle.com/javase/6/docs/technotes/guides/security/p11guide.html#Login
","4755","<java><security><fips><nss><pkcs#11>","3","0","1","2014-02-15 16:13:07","","0","","608639","","2014-02-15 16:13:07","2012-01-25 23:56:53",""
"47436011","Error: Alias name [null] does not identify a key entry during implementing SSL in Tomcat","I am trying to implement SSL in tomcat 8 first time.
I have third party signed X.509 certificate in the form of .pem file.
However after configuration when I try to start tomcat, it is giving me following error:

22-Nov-2017 18:48:01.735 INFO [main]
  org.apache.coyote.AbstractProtocol.init Initializing ProtocolHandler
  [""https-jsse-nio-8443""] 22-Nov-2017 18:48:01.897 SEVERE [main]
  org.apache.coyote.AbstractProtocol.init Failed to initialize end point
  associated with ProtocolHandler [""https-jsse-nio-8443""] 
  java.lang.IllegalArgumentException: java.io.IOException: Alias name
  [null] does not identify a key entry
          at ...

Following are the steps I have followed:

Renamed certificate.pem to certificate.p7b.
Applied following command to inport certificate into keystore:

D:\keytest2>keytool -import -alias tomcat -trustcacerts -file certificate.p7b -keystore keystore.kdb 
Enter keystore password: test
Re-enter new password: test 
...
...
Certificate was added to keystore

Checked imported certificate:

D:\keytest2>keytool -list -v -keystore keystore.kd
Which gives me following outout:
Keystore type: JKS
Keystore provider: SUN
Your keystore contains 1 entry
Alias name: tomcat
Creation date: Nov 22, 2017
Entry type: trustedCertEntry
...
...
Tomcat Configuration:
<Connector port=""8443"" protocol=""HTTP/1.1""
               maxThreads=""150"" SSLEnabled=""true"" scheme=""https"" secure=""true"" 
               keystoreFile=""file:///D:/keytest2/keystore.kdb"" keystorePass=""test""
           clientAuth=""false"" sslProtocol=""TLS"">

Please guide me where I am doing wrong.
","The issue was due to missing parameter ""keyAlias"" in tomcat configuration.
However putting alias didnot solve my problem. It started throwing same error with the alias name instead of null :).
As per the comment of @dev_thompson_085, I came to know that I was missing the key file for this process. So I tried same with self-signed X.509 certificate as per the url: https://www.ibm.com/support/knowledgecenter/en/SSWHYP_4.0.0/com.ibm.apimgmt.cmc.doc/task_apionprem_gernerate_self_signed_openSSL.html
And it worked very well with both files.
","4742","<java><tomcat><ssl><x509><pkcs#11>","1","2","1","2017-12-04 14:25:54","","3","","2801200","","2017-11-22 18:52:04","2017-11-22 13:30:44",""
"41119744","PKCS#11 engine for openSSL","I'm trying to setup openSSL under Windows 7 to use a vendor specific security module.
From the vendor I got a PKCS#11 API dll (lets say vendor.dll).
The PKCS#11 engine has been created according to https://github.com/OpenSC/libp11
As described in the link, for testing, I start

openssl engine pkcs11 -t

but get:
D:\Gateway\openSSL\Win32\Release>openssl engine pkcs11 -t
11020:error:25078067:DSO support routines:WIN32_LOAD:could not load the shared library:.\crypto\dso\dso_win32.c:179:filename(\usr\local\ssl\lib\engines\pkcs11.dll)
11020:error:25070067:DSO support routines:DSO_load:could not load the shared library:.\crypto\dso\dso_lib.c:233:
11020:error:260B6084:engine routines:DYNAMIC_LOAD:dso not found:.\crypto\engine\eng_dyn.c:467:
11020:error:2606A074:engine routines:ENGINE_by_id:no such engine:.\crypto\engine\eng_list.c:390:id=pkcs11

The  configuration file is:
[engine_section]
pkcs11 = pkcs11_section

[pkcs11_section]
engine_id = pkcs11
dynamic_path = D:\Gateway\libp11\libp11-master\src\pkcs11.dll
MODULE_PATH = D:\Gateway\driver\smgw\Win32\vendor.dll
init = 0

It tries to find the dll in a unix directory \usr\local...
It seems, that the content of dynamic path is not evaluated at all, because I can specify whatever there, I get alwys the error message above.
What am I doing wrong?
","Before the other entries in the config file, you need:
[openssl_def]
engines = engine_section

On the other hand, the following lines are not needed:
engine_id = pkcs11
init = 0

Also check (using, e.g., ldd) that the libraries you reference can actually be loaded. If a lib they depend on cannot be found, the dynamic loader will fail on them and then try to use default library paths such as 
/usr/local/ssl/lib/engines/<engine-id>.dll

","4742","<openssl><pkcs#11><hardware-security-module>","1","4","1","2018-10-08 06:14:51","","0","2","","","","2016-12-13 11:16:02",""
"7847202","PKCS # 11 library in C#","I need to write PKCS11 library for some smart-card. I am C# developer and I do not want to use other languages. I use platform invoke to comunicate with cards API (it is no PKCS11).
How can I write library with PKCS11 interface in C# that will be available not only for .Net. What technologies i must use, what i must know (I have never done this things before)?
I hope, I will be enough some keywords in this subject for start. In what direction i must dig?
Thank you.
","I've not worked extensively with security, but many people would probably recommend Bouncy Castle for .NET for dealing with security.
","4645","<c#><dll><pkcs#11>","1","-1","5","2017-06-30 14:01:01","7848016","2","1","","","","2011-10-21 09:02:53",""
"7847202","PKCS # 11 library in C#","I need to write PKCS11 library for some smart-card. I am C# developer and I do not want to use other languages. I use platform invoke to comunicate with cards API (it is no PKCS11).
How can I write library with PKCS11 interface in C# that will be available not only for .Net. What technologies i must use, what i must know (I have never done this things before)?
I hope, I will be enough some keywords in this subject for start. In what direction i must dig?
Thank you.
","Search for ""how to create an unmanaged DLL in C#"". Yet I should say that the idea to create a PKCS#11 driver DLL in C# is far from ideal due to a number of reasons which you will find in articles found using the above search link. 
","4645","<c#><dll><pkcs#11>","1","2","5","2017-06-30 14:01:01","7848016","2","1","","","","2011-10-21 09:02:53",""
"7847202","PKCS # 11 library in C#","I need to write PKCS11 library for some smart-card. I am C# developer and I do not want to use other languages. I use platform invoke to comunicate with cards API (it is no PKCS11).
How can I write library with PKCS11 interface in C# that will be available not only for .Net. What technologies i must use, what i must know (I have never done this things before)?
I hope, I will be enough some keywords in this subject for start. In what direction i must dig?
Thank you.
","I don't understand why you want to do this, yet PKCS#11 is not a windows things, CSP is, though some apps use PKCS#11 like Mozilla but I really recommend if you wanna do a PKCS#11, do it in C or C++ just for the code to be portable to other platforms, this might need tweaking (#if #else) of course but the main logic code will stay the same and really PKCS#11 is linux/unix/bsd/macosx thing .. also  C# can't generate a stdlib , I assume it generates a COM/COM+ object which is totally different than a C library for PKCS#11 .. 
","4645","<c#><dll><pkcs#11>","1","1","5","2017-06-30 14:01:01","7848016","2","1","","","","2011-10-21 09:02:53",""
"7847202","PKCS # 11 library in C#","I need to write PKCS11 library for some smart-card. I am C# developer and I do not want to use other languages. I use platform invoke to comunicate with cards API (it is no PKCS11).
How can I write library with PKCS11 interface in C# that will be available not only for .Net. What technologies i must use, what i must know (I have never done this things before)?
I hope, I will be enough some keywords in this subject for start. In what direction i must dig?
Thank you.
","You can use NCryptoki, a C# interface to PKCS#11 unmanaged dll.
See this: http://www.ncryptoki.com
PKCS#11 can be used not only for PKI functions (keys and certificates) but also for storing and reading data in the smart card. This is why PKCS#11 is needed also on Windows.
","4645","<c#><dll><pkcs#11>","1","0","5","2017-06-30 14:01:01","7848016","2","1","","","","2011-10-21 09:02:53",""
"7847202","PKCS # 11 library in C#","I need to write PKCS11 library for some smart-card. I am C# developer and I do not want to use other languages. I use platform invoke to comunicate with cards API (it is no PKCS11).
How can I write library with PKCS11 interface in C# that will be available not only for .Net. What technologies i must use, what i must know (I have never done this things before)?
I hope, I will be enough some keywords in this subject for start. In what direction i must dig?
Thank you.
","You can use this library: pkcs11.net

Pkcs11 wrapper for .Net, written in C#. Supported Methods: TokeInfo/SlotInfo, Open/Close Session, Login/Logout, Find Objects, Digest, Sign/Verify, Encrypt/Decrypt

","4645","<c#><dll><pkcs#11>","1","1","5","2017-06-30 14:01:01","7848016","2","1","","","","2011-10-21 09:02:53",""
"15503514","SSL Client Authentication with smart card works in Java 6 but fails in Java 7","the following code creates a client authenticated SSL context using PKCS#11 device (smart card). It all works great with Java 6:
// Configure the SunPkcs11 provider
String pkcs11config;
pkcs11config = ""name = Cryptoki"";
pkcs11config += ""\nlibrary = /SCDriver/libbit4ipki.dylib"";
InputStream confStream = new ByteArrayInputStream(pkcs11config.getBytes());
SunPKCS11 sunpkcs11 = new SunPKCS11(confStream);
Security.addProvider(sunpkcs11);

// Specify keystore builder parameters for PKCS#11 keystores
Builder scBuilder = Builder.newInstance(""PKCS11"", sunpkcs11, new KeyStore.CallbackHandlerProtection(new PasswordRetriever()));

// Create and init KeyManagerFactory
KeyManagerFactory factory = KeyManagerFactory.getInstance(""NewSunX509"");
factory.init(new KeyStoreBuilderParameters(scBuilder));

// create and init ssl context
m_ssl_context = SSLContext.getInstance(""TLS"");
m_ssl_context.init(factory.getKeyManagers(), new TrustManager[] {new PkTrustManager()}, null);      
SSLContext.setDefault(m_ssl_context);

The PkTrustManager is simply and 'empty' class, taking any server/client certificate for good, and PasswordRetriever just asks for password through a dialog box
(By request I post source code for these).
On Java 7 instead I get the following exception during SSL handshake of the ssl context:
java.security.InvalidKeyException: Class does not represent an RSA key: sun.security.pkcs11.P11Key$P11PrivateKey
    at iaik.pkcs.pkcs1.RSACipher.engineInit(Unknown Source)
    at iaik.pkcs.pkcs1.RSACipher.engineInit(Unknown Source)
    at iaik.security.rsa.RSA.init(Unknown Source)
    at iaik.security.rsa.RawRSASignature.engineInitSign(Unknown Source)
    at java.security.SignatureSpi.engineInitSign(SignatureSpi.java:103)
    at java.security.Signature.initSign(Signature.java:529)
    at sun.security.ssl.RSASignature.engineInitSign(RSASignature.java:125)
    at java.security.Signature$Delegate.engineInitSign(Signature.java:1136)
    at java.security.Signature.initSign(Signature.java:529)
    at sun.security.ssl.HandshakeMessage$CertificateVerify.<init>(HandshakeMessage.java:1556)
    at sun.security.ssl.ClientHandshaker.serverHelloDone(ClientHandshaker.java:982)
    ... 14 more

In the best case, I'd say something has changed in Java internals, but checking the Oracle documentation, I didn't find any supposed changes on the NewSunX509 key manager, or other components. I double checked the code and it seems compliant to the specifications (through there's for sure something I missed!).
I tried to add the configuration flags:
System.setProperty(""javax.net.ssl.keyStoreType"", ""pkcs11"");
System.setProperty(""javax.net.ssl.keyStore"", ""NONE"");
System.setProperty(""javax.net.ssl.trustStoreType"", ""pkcs11"");
System.setProperty(""javax.net.ssl.trustStore"", ""NONE"");
System.setProperty(""javax.net.ssl.keyStoreProvider"", sunpkcs11.getName() );
JCEMapper.setProviderId(sunpkcs11.getName());

But no change, same error... and they are not required in Java 6 where all works.
Thanks in advance anyone can help or has any ideas!
PS: By request from @owlstead added -Djava.security.debug=sunpkcs11 and got the following output:
SunPKCS11 loading ---DummyConfig-1---
sunpkcs11: Initializing PKCS#11 library /SCDriver/libbit4ipki.dylib
Information for provider SunPKCS11-Cryptoki
Library info:
  cryptokiVersion: 2.20
  manufacturerID: bit4id srl                      
  flags: 0
  libraryDescription: bit4id PKCS#11                  
  libraryVersion: 1.02
All slots: 0
Slots with tokens: 0
Slot info for slot 0:
  slotDescription: bit4id miniLector-U38 00 00                                     
  manufacturerID: unknown                         
  flags: CKF_TOKEN_PRESENT | CKF_REMOVABLE_DEVICE | CKF_HW_SLOT
  hardwareVersion: 0.00
  firmwareVersion: 0.00
Token info for token in slot 0:
  label: CNS                             
  manufacturerID: ST Incard                       
  model: CNS (LB)        
  serialNumber: 7420057800291590
  flags: CKF_RNG | CKF_LOGIN_REQUIRED | CKF_USER_PIN_INITIALIZED | CKF_TOKEN_INITIALIZED
  ulMaxSessionCount: CK_EFFECTIVELY_INFINITE
  ulSessionCount: 0
  ulMaxRwSessionCount: CK_EFFECTIVELY_INFINITE
  ulRwSessionCount: CK_UNAVAILABLE_INFORMATION
  ulMaxPinLen: 8
  ulMinPinLen: 5
  ulTotalPublicMemory: 31988
  ulFreePublicMemory: CK_UNAVAILABLE_INFORMATION
  ulTotalPrivateMemory: 780
  ulFreePrivateMemory: CK_UNAVAILABLE_INFORMATION
  hardwareVersion: 0.00
  firmwareVersion: 0.00
  utcTime: 0000000000000000
Mechanism CKM_RSA_PKCS:
  ulMinKeySize: 1024
  ulMaxKeySize: 1024
  flags: 2561 = CKF_HW | CKF_DECRYPT | CKF_SIGN
Mechanism CKM_RSA_PKCS_KEY_PAIR_GEN:
  ulMinKeySize: 1024
  ulMaxKeySize: 1024
  flags: 65537 = CKF_HW | CKF_GENERATE_KEY_PAIR
Mechanism CKM_SHA1_RSA_PKCS:
  ulMinKeySize: 1024
  ulMaxKeySize: 1024
  flags: 2049 = CKF_HW | CKF_SIGN
Mechanism CKM_SHA_1:
  ulMinKeySize: 0
  ulMaxKeySize: 0
  flags: 1024 = CKF_DIGEST
Mechanism CKM_SHA256:
  ulMinKeySize: 0
  ulMaxKeySize: 0
  flags: 1024 = CKF_DIGEST
Mechanism CKM_SHA256_RSA_PKCS:
  ulMinKeySize: 1024
  ulMaxKeySize: 1024
  flags: 2049 = CKF_HW | CKF_SIGN
Mechanism CKM_SHA384:
  ulMinKeySize: 0
  ulMaxKeySize: 0
  flags: 1024 = CKF_DIGEST
Mechanism CKM_SHA384_RSA_PKCS:
  ulMinKeySize: 1024
  ulMaxKeySize: 1024
  flags: 2049 = CKF_HW | CKF_SIGN
Mechanism CKM_SHA512:
  ulMinKeySize: 0
  ulMaxKeySize: 0
  flags: 1024 = CKF_DIGEST
Mechanism CKM_SHA512_RSA_PKCS:
  ulMinKeySize: 1024
  ulMaxKeySize: 1024
  flags: 2049 = CKF_HW | CKF_SIGN
Mechanism CKM_RSA_X_509:
  ulMinKeySize: 1024
  ulMaxKeySize: 1024
  flags: 2561 = CKF_HW | CKF_DECRYPT | CKF_SIGN
Password per token PKCS11 [SunPKCS11-Cryptoki]: sunpkcs11: login succeeded
sunpkcs11: user already logged in
javax.net.ssl.SSLHandshakeException: Error signing certificate verify
    at sun.security.ssl.Alerts.getSSLException(Alerts.java:192)
    at sun.security.ssl.SSLSocketImpl.fatal(SSLSocketImpl.java:1886)
    *....... (continues with the exception as described above)*

Note: With the last update of Java 6, my code stops working on Java 6 as well :(
","Solved by adding the line of code:
Security.removeProvider(""IAIK"");

before the line:
Security.addProvider(sunpkcs11);

This works correctly with all versions of java6 and java7 (hoping they won't screw again something in java8... :)
Looks like the IAIK provider inserts itself as a PKCS11 provider but then makes calls to the private key using it as a software key... because it's actually a software provider.
","4636","<ssl><java-7><smartcard><pkcs#11><authentication>","7","7","1","2015-10-19 08:30:56","15703794","5","10","2187037","","2013-03-27 08:50:43","2013-03-19 15:22:51",""
"5006691","Do client authentication with PKCS11 token (Smartcard)","I have to call a script on a server (php, jsp - what ever). But this server is protected by a client authentication. Now it is possible for me to do it with a P12-Keystore. The code for this:
    private void installSSLContextP12() throws Exception {
    KeyStore tks = KeyStore.getInstance(KeyStore.getDefaultType());
    tks.load(new FileInputStream(""/home/dan/Dokumente/Zertifikate/store""), ""xxx"".toCharArray());                   // load truststore

    KeyStore iks = KeyStore.getInstance(""PKCS12"");
    iks.load(new FileInputStream(""/home/dan/Dokumente/Zertifikate/danmocz_zert.p12""), ""yyy"".toCharArray());     // load private keystore

    TrustManagerFactory tmf = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());            // init truststore
    tmf.init(tks);

    KeyManagerFactory kmf = KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());
    kmf.init(iks, ""yyy"".toCharArray());                                                                                    // load priv. key's pw
    KeyManager[] kms = kmf.getKeyManagers();


    SSLContext ctx = SSLContext.getInstance(""TLS"");
    ctx.init(kmf.getKeyManagers(), tmf.getTrustManagers(), null);                                                          // trust/keystore
    SSLContext.setDefault(ctx);  //That is enough to authenticate at the server
}

This works fine.
But now i have a Smartcard(PKCS11) and i need to authenticate with this. I use the opensc-cryptocard provider to read the card. the sample code for this comes here (see line comments !):
private void installSSLContextPKCS11() throws Exception {
    PKCS11Provider provider = new PKCS11Provider(""/usr/lib/opensc-pkcs11.so.BAK"");
    Security.addProvider(provider);

    System.out.println(""loading truststore"");
    KeyStore tks = KeyStore.getInstance(KeyStore.getDefaultType());
    tks.load(new FileInputStream(""/home/dan/Dokumente/Zertifikate/store""), ""xxx"".toCharArray());                   // load truststore

    System.out.println(""loading keystore"");
    KeyStore iks = KeyStore.getInstance(""PKCS11"", provider);  //works fine. he asks for a right pin - cancels when pin is wrong
    iks.load(null, ""zzz"".toCharArray());                                                                                                         // load private keystore

    System.out.println(""init truststore"");
    TrustManagerFactory tmf = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());            // init truststore
    tmf.init(tks);

    KeyManagerFactory kmf = KeyManagerFactory.getInstance(""SunX509"");  // here is the problem. It seems that the pin is ignored. and if i overgive the provider (like KeyStore.getInstance-Method)i get an NoSuchAlgorithmException (for stacktrace see below)
    kmf.init(null, ""834950"".toCharArray());  //The debugger shows in kmf.getKeyManagers()-Array no priv. Key or anything. It contains nothing but an empty hashmap (or something like this) with p12 it contains the priv. key and the certificate from the smart card

    System.out.println(""setting sslcontext"");
    SSLContext ctx = SSLContext.getInstance(""TLS"");
    ctx.init(kmf.getKeyManagers(), tmf.getTrustManagers(), null);
    SSLContext.setDefault(ctx);

    System.out.println(""doing handshake"");
    final SSLSocketFactory factory = ctx.getSocketFactory();
    final SSLSocket socket = (SSLSocket) factory.createSocket(""download.uv.ruhr-uni-bochum.de"", 443);
    socket.setUseClientMode(true);
    socket.startHandshake();   // here i try to do the handshake. it works with a p12-keystore... like ahead. with pkcs11 i get an SSLHandshakeException (Received fatal alert: handshake_failure)
    System.out.println(""done"");
}

The NoSuchAlgorythmException: 
Exception in thread ""main"" java.security.NoSuchAlgorithmException: no such algorithm: SunX509 for provider OpenSC-PKCS11
    at sun.security.jca.GetInstance.getService(GetInstance.java:100)
    at sun.security.jca.GetInstance.getInstance(GetInstance.java:218)
    at javax.net.ssl.KeyManagerFactory.getInstance(KeyManagerFactory.java:217)
    at clientauthtest.Main.installSSLContextPKCS11(Main.java:130)
    at clientauthtest.Main.main(Main.java:54)

Hope you see the problem. 
Thanks in advance... daniel
","Builder builder = Builder.newInstance(""PKCS11"", provider, new KeyStore.CallbackHandlerProtection(/*PIN callback handler instance*/));
KeyManagerFactory kmf = KeyManagerFactory.getInstance(""X509"");
kmf.init(new KeyStoreBuilderParameters(builder));

This should work fine.
","4631","<java><authentication><ssl><smartcard><pkcs#11>","3","1","1","2012-05-31 07:46:56","","1","4","5000","","2011-06-20 10:32:52","2011-02-15 16:50:50",""
"9220265","Android SSL with a Smart Card through PKCS#11","The reason that this question was born is that I am totally lost, so please forgive the trivial and senseless parts.
I have an Android app, a web-service, a MicroSD smart card (mobile security card). I need to know how can I use the card with ssl to securely communicate with the web-service. Rebuilding and flashing the OS is not an option.
What I know:

The API used to communicate with the MSC
How to write/deploy applets to the MSC
How to call a web-service

What I don't know:

SSL
Too much about certificates and cryptography (only shady academic stuff from the university)
How things come together and what should I use to accomplish this

seek-for-android has an OpenSC tutorial and library, but the OS needs to be patched for that. Is there a way to avoid that and still use the solution?
I know I could be much further into this with a little research, but my deadline is quite close (a few days), so I need help, much help, and very soon.. Thank you in advance!
EDIT:
More specifically:
I have a Smart Card SD card from Giesecke & Devrient, with Java Card OS and fine applets and dev tools. I also recieved an android service to communicate with the card (the applets) with APDUs. This is quite low-level, it acceps byte codes as commands and data.
I need to call a web-service via SSL authentication. Now I know that SSL uses (can use) hardware tokens with PKCS#11 interfaces.
There is a project called seek-for-android with a guide to patch the OS and have a standard PKCS#11 interface over the smart card (I believe this would be OpenSC). I CAN'T patch the OS.
So the questions again:

Can the Android SSL implementation use (custom) PKCS#11 interfaces in some way, if yes, how? (e.g. possibly with some security providers)
Can I use OpenSC (and other stuff mentioned in the linked guide) without patching the OS (e.g. extract the libs and include it in my application)?
Overall, how should I link the gap between the low-level smart card and the high level SSL? I kindly ask you for any material regarding this.

","If you can access your card without patching the ROM, you can roll your own (requires knowledge of cryptography) SSL implementation on top of it.
If not, then AFAIK you need to patch Android to get access to the extra hardware. And the built-in SSL library has no support whatsoever for client-side ""hardware tokens"" AFAIK.
","4526","<android><ssl><smartcard><pkcs#11>","1","0","3","2012-07-26 08:21:56","","0","2","318511","","2012-02-17 10:21:34","2012-02-09 22:59:36",""
"9220265","Android SSL with a Smart Card through PKCS#11","The reason that this question was born is that I am totally lost, so please forgive the trivial and senseless parts.
I have an Android app, a web-service, a MicroSD smart card (mobile security card). I need to know how can I use the card with ssl to securely communicate with the web-service. Rebuilding and flashing the OS is not an option.
What I know:

The API used to communicate with the MSC
How to write/deploy applets to the MSC
How to call a web-service

What I don't know:

SSL
Too much about certificates and cryptography (only shady academic stuff from the university)
How things come together and what should I use to accomplish this

seek-for-android has an OpenSC tutorial and library, but the OS needs to be patched for that. Is there a way to avoid that and still use the solution?
I know I could be much further into this with a little research, but my deadline is quite close (a few days), so I need help, much help, and very soon.. Thank you in advance!
EDIT:
More specifically:
I have a Smart Card SD card from Giesecke & Devrient, with Java Card OS and fine applets and dev tools. I also recieved an android service to communicate with the card (the applets) with APDUs. This is quite low-level, it acceps byte codes as commands and data.
I need to call a web-service via SSL authentication. Now I know that SSL uses (can use) hardware tokens with PKCS#11 interfaces.
There is a project called seek-for-android with a guide to patch the OS and have a standard PKCS#11 interface over the smart card (I believe this would be OpenSC). I CAN'T patch the OS.
So the questions again:

Can the Android SSL implementation use (custom) PKCS#11 interfaces in some way, if yes, how? (e.g. possibly with some security providers)
Can I use OpenSC (and other stuff mentioned in the linked guide) without patching the OS (e.g. extract the libs and include it in my application)?
Overall, how should I link the gap between the low-level smart card and the high level SSL? I kindly ask you for any material regarding this.

","As this is a special form of a Smart-Card encapsulated inside a microSD-card I assume that the API bases on special SD-Card read and write operations. Such operation may or may not be usable on Android without root access.
That depends on the certain implementation of the API. Usually such a microSD card already comes with Android libraries (as it is the most open relevant mobile platform) from the vendor. You should ask there for getting more information.
","4526","<android><ssl><smartcard><pkcs#11>","1","1","3","2012-07-26 08:21:56","","0","2","318511","","2012-02-17 10:21:34","2012-02-09 22:59:36",""
"9220265","Android SSL with a Smart Card through PKCS#11","The reason that this question was born is that I am totally lost, so please forgive the trivial and senseless parts.
I have an Android app, a web-service, a MicroSD smart card (mobile security card). I need to know how can I use the card with ssl to securely communicate with the web-service. Rebuilding and flashing the OS is not an option.
What I know:

The API used to communicate with the MSC
How to write/deploy applets to the MSC
How to call a web-service

What I don't know:

SSL
Too much about certificates and cryptography (only shady academic stuff from the university)
How things come together and what should I use to accomplish this

seek-for-android has an OpenSC tutorial and library, but the OS needs to be patched for that. Is there a way to avoid that and still use the solution?
I know I could be much further into this with a little research, but my deadline is quite close (a few days), so I need help, much help, and very soon.. Thank you in advance!
EDIT:
More specifically:
I have a Smart Card SD card from Giesecke & Devrient, with Java Card OS and fine applets and dev tools. I also recieved an android service to communicate with the card (the applets) with APDUs. This is quite low-level, it acceps byte codes as commands and data.
I need to call a web-service via SSL authentication. Now I know that SSL uses (can use) hardware tokens with PKCS#11 interfaces.
There is a project called seek-for-android with a guide to patch the OS and have a standard PKCS#11 interface over the smart card (I believe this would be OpenSC). I CAN'T patch the OS.
So the questions again:

Can the Android SSL implementation use (custom) PKCS#11 interfaces in some way, if yes, how? (e.g. possibly with some security providers)
Can I use OpenSC (and other stuff mentioned in the linked guide) without patching the OS (e.g. extract the libs and include it in my application)?
Overall, how should I link the gap between the low-level smart card and the high level SSL? I kindly ask you for any material regarding this.

","Use Bouncycastle (Spongycastle is the fork for Android) and implement your own Security Provider which uses the SmartCard instead of a file for stored certificates.
","4526","<android><ssl><smartcard><pkcs#11>","1","0","3","2012-07-26 08:21:56","","0","2","318511","","2012-02-17 10:21:34","2012-02-09 22:59:36",""
"46521791","SunPKCS11 provider in Java 9","Up to Java 8 the SunPKCS11 provider was loaded like this:
Provider provider = new sun.security.pkcs11.SunPKCS11 (new ByteArrayInputStream (configFile.getBytes ()));
Security.addProvider (provider);

configFile is a String with the configuration parameters. So, if the application needed to work with several connected smart cards it could create multiple providers. To access each provider the name used was ""SunPKCS11-"" followed by the name we indicated in the configuration.
In Java 8, the sun.security.pkcs11.SunPKCS11 class was removed in the JDK. So, I had to program the previous call by reflection.
The operation of the PKCS#11 provider in Java 9 seems very different:

The SunPKCS11 constructor has been changed to an empty one. The configuration is loaded by the ""configure"" method, so it is mandatory that it is in a file on disk and I can no longer load it through a stream to a string.
If we try to use the reflection the following warnings appear:


WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by PruebaTarjeta (file:/C:/temp/pkcs11java9/classes/) to constructor
sun.security.pkcs11.SunPKCS11()
WARNING: Please consider reporting this to the maintainers of PruebaTarjeta
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release



In Java 9, a SunPKCS11 provider is automatically generated and is in the list of cryptographic providers. It can be obtained from the list and configured. The problem is that you can only have one PKCS#11 provider loaded in the list. The Java 9 documentation indicates that we can get the PKCS#11 provider with ""SunPKCS11-"" followed by the name we indicated in the configuration, but it's not true. If we look at the list of providers the only one is ""SunPKCS11"" so I can not have one provider per smart card.

Do this also happen to someone else? Any solution?
","I noticed looking at the javadoc for configure:

Apply the supplied configuration argument to this provider instance and return the configured provider. Note that if this provider cannot be configured in-place, a new provider will be created and returned. Therefore, callers should always use the returned provider.

This indicates to me that the prototype pattern is being used here, and that the new control flow for creating multiple providers would be something like:
Provider prototype = Security.getProvider(""SunPKCS11"");
Provider provider1 = prototype.configure(...);
Provider provider2 = prototype.configure(...);
...


As for using arguments directly instead of a filename, I did some digging into the source code and found this in sun.security.pkcs11.Config:
Config(String fn) throws IOException {
    this.filename = fn;
    if (filename.startsWith(""--"")) {
        // inline config
        String config = filename.substring(2).replace(""\\n"", ""\n"");
        reader = new StringReader(config);

Note the line with filename.startsWith(""--""), this filename comes directly from the argument to configure. So you should be able to pass in the configuration arguments as a string as long as you start the string with --, and then delimiting your key=value pairs with \n. (I am not currently able to test this though).
However, I can't find this fact publicly documented anywhere, so it might be subject to change, as well as it working differently for different providers, i.e. use at own risk!.
","4267","<java><java-9><pkcs#11><sunpkcs11>","19","15","2","2018-04-20 09:34:21","46524444","3","7","474189","","2018-04-20 09:34:21","2017-10-02 08:14:42",""
"46521791","SunPKCS11 provider in Java 9","Up to Java 8 the SunPKCS11 provider was loaded like this:
Provider provider = new sun.security.pkcs11.SunPKCS11 (new ByteArrayInputStream (configFile.getBytes ()));
Security.addProvider (provider);

configFile is a String with the configuration parameters. So, if the application needed to work with several connected smart cards it could create multiple providers. To access each provider the name used was ""SunPKCS11-"" followed by the name we indicated in the configuration.
In Java 8, the sun.security.pkcs11.SunPKCS11 class was removed in the JDK. So, I had to program the previous call by reflection.
The operation of the PKCS#11 provider in Java 9 seems very different:

The SunPKCS11 constructor has been changed to an empty one. The configuration is loaded by the ""configure"" method, so it is mandatory that it is in a file on disk and I can no longer load it through a stream to a string.
If we try to use the reflection the following warnings appear:


WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by PruebaTarjeta (file:/C:/temp/pkcs11java9/classes/) to constructor
sun.security.pkcs11.SunPKCS11()
WARNING: Please consider reporting this to the maintainers of PruebaTarjeta
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release



In Java 9, a SunPKCS11 provider is automatically generated and is in the list of cryptographic providers. It can be obtained from the list and configured. The problem is that you can only have one PKCS#11 provider loaded in the list. The Java 9 documentation indicates that we can get the PKCS#11 provider with ""SunPKCS11-"" followed by the name we indicated in the configuration, but it's not true. If we look at the list of providers the only one is ""SunPKCS11"" so I can not have one provider per smart card.

Do this also happen to someone else? Any solution?
","
The problem is that you can only have one PKCS#11 provider loaded in
  the list.

You problem's solution seems to be defined in the doc linked itself.
To use more than one slot per PKCS#11 implementation, or to use more than one PKCS#11 implementation, simply repeat the installation for each with the appropriate configuration file. This will result in a Sun PKCS#11 provider instance for each slot of each PKCS#11 implementation.
Sample configuration following the format attribute=value would be:
name = FooAccelerator
library = /opt/foo/lib/libpkcs11.so
slot = 1

You can further make use of Attributes in the PKCS#11 Provider Configuration File in the same link to configure more than one provider with different slot Id and listIndex and different atributes.
","4267","<java><java-9><pkcs#11><sunpkcs11>","19","0","2","2018-04-20 09:34:21","46524444","3","7","474189","","2018-04-20 09:34:21","2017-10-02 08:14:42",""
"44115505","How to register PKCS11 library in Google Chrome on Windows?","How can I register the PKCS11 library in Google Chrome when I use a Gemalto smardcard reader? 
","Chrome does not provide a mechanism to specify a PKCS#11 provider, only Firefox does.
You can do client authentication but only with soft certs or smart cards on Windows via CryptoAPI and minidrivers/csps.
Here is a link on using soft certs: https://support.quovadisglobal.com/kb/a422/how-do-i-set-up-client-authentication-for-google-chrome-on-linux.aspx
","4221","<google-chrome-extension><smartcard><pkcs#11><chrome-native-messaging><gemalto>","1","1","1","2017-05-25 13:40:57","","1","","5277820","","2017-05-25 13:40:57","2017-05-22 14:28:35",""
"7727371","List all smartcard slots in Java","How can I search through all available slots in the machine so I can get each keystore for each slot, in Java?    
","Write JNI code in C++ and call it from java.
","4051","<java><smartcard><pkcs#11>","1","1","3","2011-10-20 09:48:35","7728487","3","","44289","","2011-10-12 07:33:43","2011-10-11 14:07:39",""
"7727371","List all smartcard slots in Java","How can I search through all available slots in the machine so I can get each keystore for each slot, in Java?    
","As I've found, there is this a way:    
PKCS11 p11 = PKCS11.getInstance(""/usr/local/lib/libsiecap11.so"", ""C_GetFunctionList"", null, false); 
long[] slots = p11.C_GetSlotList(true);  

thanks to this question
","4051","<java><smartcard><pkcs#11>","1","9","3","2011-10-20 09:48:35","7728487","3","","44289","","2011-10-12 07:33:43","2011-10-11 14:07:39",""
"7727371","List all smartcard slots in Java","How can I search through all available slots in the machine so I can get each keystore for each slot, in Java?    
","This is not a very precise question.
If you are not precise, then the ""most probable"" solution is 
http://download.oracle.com/javase/6/docs/jre/api/security/smartcardio/spec/javax/smartcardio/CardTerminals.html
But you seem to be talking about PKCS#11 (which is NOT the direct mapping of a smart card hardware ""slot"")
","4051","<java><smartcard><pkcs#11>","1","1","3","2011-10-20 09:48:35","7728487","3","","44289","","2011-10-12 07:33:43","2011-10-11 14:07:39",""
"28640506","Using j2pkcs11.dll with java 8 (64-bit) on windows 7 (64-bit)","I trying to use the j2pkcs11.dll (packaged with jdk1.8.0 - 64bit) to access certificates stored on a smartcard but not unable to make it work. 
--- sample code to add the SunPKCS11 provider dynamically ---
    String pkcs11ConfigSettings = ""name = "" + ""TestSmartCard"" + ""\n"" + ""library = "" + ""C:/jdk1.8.0_11/jre/bin/j2pkcs11.dll"";
    byte[] pkcs11ConfigBytes = pkcs11ConfigSettings.getBytes();
    ByteArrayInputStream confStream = new ByteArrayInputStream(pkcs11ConfigBytes);            
    Provider p = new sun.security.pkcs11.SunPKCS11(confStream);

---- the exception I get ---
java.security.ProviderException: Initialization failed
    at sun.security.pkcs11.SunPKCS11.<init>(SunPKCS11.java:376)
    at sun.security.pkcs11.SunPKCS11.<init>(SunPKCS11.java:103)
    at scpoc.SmartCard.main(SmartCard.java:28)

Caused by: java.io.IOException: The specified procedure could not be found.
    at sun.security.pkcs11.wrapper.PKCS11.connect(Native Method)
    at sun.security.pkcs11.wrapper.PKCS11.<init>(PKCS11.java:138)
    at sun.security.pkcs11.wrapper.PKCS11.getInstance(PKCS11.java:151)
    at sun.security.pkcs11.SunPKCS11.<init>(SunPKCS11.java:313)


JEP 131 claims to have PKCS11 support in Java 8 (http://openjdk.java.net/jeps/131) but I have not been able to get it to work on windows 7 using the java8 64-bit. Note: I also tried the java 8 32-bit on windows 7 - but no luck either.
Has anyone had any success using the SunPKCS11 provider with java 8 (Windows 7)?
","SunPKCS11 provider is present only in 32-bit Windows version of JRE up until JRE7. Since JRE8 it is present also in 64-bit Windows version of JRE. This is the information you see in JEP131.
If you need to use PKCS#11 API in 64-bit Windows version of JRE older than JRE8 then you will have to use one of alternative 3rd party implementations - such as IAIK-JCE.
I have also noticed in your code sample that you are trying to directly use ""j2pkcs11.dll"" as a PKCS#11 library which is wrong because it is just a JNI wrapper sitting between JRE and the library implementing PKCS#11 interface. Instead of loading ""j2pkcs11.dll"" you need to load PKCS#11 library provided by your smartcard or HSM vendor.
","4007","<pkcs#11>","4","4","1","2015-02-23 20:40:55","28643362","0","3","","","","2015-02-21 00:23:25",""
"23319281","Java keytool / KeyStore shows no entries for eToken","Edit: This page covers eTokens start to finish. I wish I had found this before posting (I found the section on udev was unneeded) 
Direct: https://r3blog.nl/index.php/etoken-pro-72k/ 
Wayback Machine: https://web.archive.org/web/20140427063731/https://r3blog.nl/index.php/etoken-pro-72k/
Original Question:
I recently initialized a Safenet (Aladdin) eToken using pkcs11-tool and generated a keypair for it. I can see the keypair when using pkcs11-tool, but Java refuses to see it either via keytool or using the KeyStore API.
$pkcs11 --module /lib64/libeToken.so.8 --login -O
Using slot 0 with a present token (0x0)
Logging in to ""one"".
Please enter User PIN:
Private Key Object; RSA
  label:      onekey
  Usage:      decrypt, sign, unwrap
Public Key Object; RSA 2048 bits
  label:      onekey
  Usage:      encrypt, verify, wrap

however, using KeyTool:
$ cat ../../../config
description = PKCS11TestProvider - libeToken 8
name = PKCS11TestProvider
library = /lib64/libeToken.so.8
$
$ keytool -keystore NONE -storetype PKCS11 -providerClass sun.security.pkcs11.SunPKCS11 -providerArg ../../../config -list
Enter keystore password:

Keystore type: PKCS11
Keystore provider: SunPKCS11-PKCS11TestProvider

Your keystore contains 0 entries

Similar results when running a short java program
$ java -cp . com.test.pkcs11tester
PKCS11 Token [SunPKCS11-PKCS11TestProvider] Password:
$
$
$cat com/test/pkcs11tester.java
package com.test;

import com.sun.security.auth.callback.TextCallbackHandler;
import sun.security.pkcs11.SunPKCS11;

import java.security.KeyStore;
import java.security.Security;
import java.util.Arrays;
import java.util.Enumeration;

public class pkcs11tester {


  public static void main(String[] args) throws Exception {
    SunPKCS11 provider = new SunPKCS11ProviderFactory()
        .withDescription(""PKCS11TestProvider - libeToken 8"")
        .withName(""PKCS11TestProvider"")
        .withLibrary(""/lib64/libeToken.so.8"").build();
    Security.addProvider(provider);
    KeyStore.CallbackHandlerProtection pinHandler = new KeyStore.CallbackHandlerProtection(new TextCallbackHandler());
    KeyStore keyStore = KeyStore.Builder.newInstance(""PKCS11"",provider,pinHandler).getKeyStore();
    Enumeration<String> keyAliases = keyStore.aliases();


    while(keyAliases.hasMoreElements()){
      String alias = keyAliases.nextElement();
      System.out.println(keyStore.getEntry(alias, pinHandler));
    }

  }
}


Edit: I have Safenet Authentication Client 8 (SAC) installed, per  eToken java keytool certificates . This is where libeToken.so.8 is from.

Incorporating Jariq's answer.
I removed the keypair and generated a new set with ID's associated. I then installed libengine-pkcs11-openssl to get OpenSSL's PKCS11 engine and followed the configuration in /usr/share/doc/libengine-pkcs11-openssl/html/wiki/QuickStart.html to alter openssl.conf to include the required engine configuration. 
The token now looks like:
$ pkcs11 -O
Using slot 0 with a present token (0x0)
Logging in to ""one"".
Please enter User PIN:
Private Key Object; RSA
  label:      onekey
  ID:         01
  Usage:      decrypt, sign, unwrap
Public Key Object; RSA 2048 bits
  label:      onekey
  ID:         01
  Usage:      encrypt, verify, wrap
Certificate Object, type = X.509 cert
  label:      onekey
  ID:         01

Using Keytool:
$ keytool -storetype PKCS11 -providerClass sun.security.pkcs11.SunPKCS11 -providerArg ../../../config -list
Enter keystore password:

Keystore type: PKCS11
Keystore provider: SunPKCS11-PKCS11TestProvider

Your keystore contains 1 entry

onekey, PrivateKeyEntry,
Certificate fingerprint (SHA1): 0C:C8:3A:75:A0:6E:81:5A:02:A6:66:D3:A5:6C:00:99:9E:42:43:6F

Using the PKCS11 Java API:
$ java -cp . com.test.pkcs11tester
PKCS11 Token [SunPKCS11-PKCS11TestProvider] Password:
Private key entry and certificate chain with 1 elements:
[
[
  Version: V3
  Subject: CN=onesubject, O=Xxxx, ST=Xxxx, C=XX
  Signature Algorithm: SHA1withRSA, OID = 1.2.840.113549.1.1.5

  Key:  Sun RSA public key, 2048 bits
  modulus: 26467622671895747481285413975858433115065665951434681243689781936333527077589805685892716465819686680860527529496518157567899175649301749737471071408469304030637573833391644617231073872248736072965457767707383869848723754396731752444718339694909306900106909176774550510520886393209261362045036756359368697310430517069617032600529596434583578525109794104732402757033686193461186802710090516889219602199917424253492694843488263111936554190197705320777470234748624936043043343926632866860126842173018340103570303871731056989311270666387633092607719192995343286538611357386974098721988288022991330371700733023697501180691
  public exponent: 65537
  Validity: [From: Sun Apr 27 06:13:13 UTC 2014,
               To: Tue May 27 06:13:13 UTC 2014]
  Issuer: CN=onesubject, O=Xxxx, ST=Xxxx, C=XX
  SerialNumber: [    a0876773 4f936f42]

]
  Algorithm: [SHA1withRSA]
  Signature:
0000: 36 CD 58 98 17 71 E3 B6   49 D9 0D 72 E9 51 79 B9  6.X..q..I..r.Qy.
0010: E4 12 FA AD 6D 5D 4B 91   1E DE D4 B3 24 F0 E9 03  ....m]K.....$...
0020: 58 FE EE AE 32 5F A7 25   4A A2 7F A6 13 C8 D0 97  X...2_.%J.......
0030: 97 C9 4B B0 E2 4C 83 8D   DD 6B B0 D6 15 3E 64 E8  ..K..L...k...>d.
0040: B6 FB EC 8B 70 27 9A E8   E7 A6 60 7F 33 92 11 42  ....p'....`.3..B
0050: 30 5D 8C C0 F3 01 DB F7   0D F2 B9 BD 46 7B C9 B1  0]..........F...
0060: FF BE D5 1B 94 92 64 CC   6A A2 B7 61 9F 9C 73 0D  ......d.j..a..s.
0070: 01 16 4B 98 D0 9F 3C DB   9C 58 80 22 80 53 46 6C  ..K...<..X."".SFl
0080: 6F 49 74 42 99 48 D2 BA   3C E3 98 DE D8 4C BF B9  oItB.H..<....L..
0090: 40 5E 79 26 A5 6C C7 E8   56 53 56 23 03 27 47 16  @^y&.l..VSV#.'G.
00A0: 6B B2 5D 3D 76 11 EA F1   F0 8C EE 5E BD CD 6B 3D  k.]=v......^..k=
00B0: BC 66 F9 74 59 E3 FB 4D   9F 37 50 95 15 A4 37 63  .f.tY..M.7P...7c
00C0: B0 9B 4A BE 1C CA F7 88   EE 3F 07 D4 F7 5D D0 FD  ..J......?...]..
00D0: B2 C1 20 5B C8 11 67 07   81 B9 74 8E F3 20 8D B8  .. [..g...t.. ..
00E0: 45 DC 4D 03 F3 D0 F1 53   72 5A AE EA 3B EB 27 20  E.M....SrZ..;.'
00F0: 4A C5 47 2F 42 10 91 CF   76 C2 44 CE A0 89 60 78  J.G/B...v.D...`x

]

","According to my observations SunPKCS11 provider enumerates only keys that are associated with the X.509 certificate. So you would need to generate at least a self-signed certificate and import it to the token. If you want to verify that my answer is correct take a look at ""Appendix B: Sun PKCS#11 provider's KeyStore Requirements"" section ""Read-Only Access"" step ""5"".
","3980","<java><pkcs#11><e-token>","2","2","1","2014-04-27 06:41:36","23319677","4","2","-1","","2017-05-23 11:54:23","2014-04-27 04:07:48",""
"2366636","CAC Client Application Authentication in Python","I am building a python application to pull data from a website. The application has to authenticate(HTTPS/SSL) with a CAC card and pin in order to make requests.
Am I correct in my assumptions that you can't retrieve the private key from a CAC card, and am therefore stuck using a PKCS #11 Wrapper like PyKCS?
Any tips or resources for going about this?
","You are correct.  That's the whole purpose of the smart card to keep the private keys safe.   If your application is running in Windows you can try using WININET.DLL for your connectivity, with the correct middleware installed it should handle authentication to the CAC enabled site automatically.
","3936","<python><smartcard><pkcs#11><cac>","5","0","3","2010-09-01 19:31:49","2369168","0","3","237091","","2010-09-01 19:31:49","2010-03-02 20:50:46",""
"2366636","CAC Client Application Authentication in Python","I am building a python application to pull data from a website. The application has to authenticate(HTTPS/SSL) with a CAC card and pin in order to make requests.
Am I correct in my assumptions that you can't retrieve the private key from a CAC card, and am therefore stuck using a PKCS #11 Wrapper like PyKCS?
Any tips or resources for going about this?
","Authentication and signature keys are usually generated on the card and are not extractable, unlike encryption keys which can/should be escrowed somewhere.
See Need help using M2Crypto.Engine to access USB Token for an example with M2Crypto that explains how to use a smart card via PKCS#11 for website access in python.
","3936","<python><smartcard><pkcs#11><cac>","5","4","3","2010-09-01 19:31:49","2369168","0","3","237091","","2010-09-01 19:31:49","2010-03-02 20:50:46",""
"2366636","CAC Client Application Authentication in Python","I am building a python application to pull data from a website. The application has to authenticate(HTTPS/SSL) with a CAC card and pin in order to make requests.
Am I correct in my assumptions that you can't retrieve the private key from a CAC card, and am therefore stuck using a PKCS #11 Wrapper like PyKCS?
Any tips or resources for going about this?
","I would attempt to find out if an ECA cert is a suitable substitute.  For example, there sites that accept CAC and ECA certs.  For more info: http://iase.disa.mil/pki/eca/certificate.html
","3936","<python><smartcard><pkcs#11><cac>","5","0","3","2010-09-01 19:31:49","2369168","0","3","237091","","2010-09-01 19:31:49","2010-03-02 20:50:46",""
"18072356","Implementing Digital Signing in a Java Applet","I am trying to sign some data (a POST form) in a web based application using a Java Applet. The user's x509 certificate would be in a cryptoken/smart card. The signature needs to be in attached pkcs#7 format.
I am using this tutorial/code as a starting point in building the applet - http://www.developer.com/java/other/article.php/3587361/Java-Applet-for-Signing-with-a-Smart-Card.htm
The biggest problem for me here seems to be the fact that the applet asks the user for location of the pkcs#11 implementation library. This is a big no-no for me because my typical user is not going to know the location of his pkcs#11 library.
From Oracle's Java documentation - http://docs.oracle.com/javase/6/docs/technotes/guides/security/p11guide.html it seems that Java doesn't come with it's own implementation.
Is there a way to do this signing without asking the user for this location. I am OK with a solution which only works with just IE and Firefox on Windows.
With a few smartcards/cryptokens I have used, I have noticed that the moment I insert it, I can see the certificate in IE & Firefox's personal tab of certificates. This probably means that the crypto token registers all the certificates it contains with OS when you insert the card and deregisters it when you remove it. So it must probably be exposing some interface to the OS/Browser when it does it - can this not be used for signing?
","We did the thing you are trying to do now (distributed signing with client-side modules) within Distributed Cryptography add-on for our SecureBlackox product and we offer ActiveX control for IE and Java applet for other browsers. 
Unfortunately PKCS#11 DLLs are not registered anywhere so you can't avoid asking the user about location of this DLL. 
Most hardware devices support both PKCS#11 and CryptoAPI interfaces. Within CryptoAPI interface the CSP DLL exposes hardware-based certificates to CryptoAPI engine and thus to applications. In this case you can use Java classes that work with Windows CryptoAPI.
PKCS#11 is an interface, implemented by hardware vendors, so Java can't implement it's own - JVM is not a hardware and doesn't contain certificates (even if it did, that would not solve your problem). I need to notice, that Firefox has built-in PKCS#11 driver via which Firefox accesses its own certificates.  This was done for uniform support for software- and hardware-stored certificates. 
","3917","<java><digital-signature><jce><pkcs#7><pkcs#11>","5","3","2","2019-06-22 06:24:06","","0","1","922712","","2013-08-06 06:46:27","2013-08-06 05:25:17",""
"18072356","Implementing Digital Signing in a Java Applet","I am trying to sign some data (a POST form) in a web based application using a Java Applet. The user's x509 certificate would be in a cryptoken/smart card. The signature needs to be in attached pkcs#7 format.
I am using this tutorial/code as a starting point in building the applet - http://www.developer.com/java/other/article.php/3587361/Java-Applet-for-Signing-with-a-Smart-Card.htm
The biggest problem for me here seems to be the fact that the applet asks the user for location of the pkcs#11 implementation library. This is a big no-no for me because my typical user is not going to know the location of his pkcs#11 library.
From Oracle's Java documentation - http://docs.oracle.com/javase/6/docs/technotes/guides/security/p11guide.html it seems that Java doesn't come with it's own implementation.
Is there a way to do this signing without asking the user for this location. I am OK with a solution which only works with just IE and Firefox on Windows.
With a few smartcards/cryptokens I have used, I have noticed that the moment I insert it, I can see the certificate in IE & Firefox's personal tab of certificates. This probably means that the crypto token registers all the certificates it contains with OS when you insert the card and deregisters it when you remove it. So it must probably be exposing some interface to the OS/Browser when it does it - can this not be used for signing?
","Smartcard or Token driver (PKCS#11) library has an additional layer called CSP (Crypto Service Provider) which acts like bridge between the device driver and OS Crypto services.  Token driver, once installed also adds this CSP and thus plunging the token or smartcard makes Certificates in it available (which acts as handle to private key stored securely on the crypto device).
For signing from Browser as client, applets are no more supported by modern browsers. You may use Browser Extension for the purposes which has a native application running behind the browser to access Certificate Store and provide signing function through JavaScript in the browser. Signer Digital Browser Extension offers various type of signing form browser using JavaScript. Refer to 3 different SO answer links on the page Digitally Signing From Browser for various operations to be achieved using the Web Browser Extension. 
","3917","<java><digital-signature><jce><pkcs#7><pkcs#11>","5","0","2","2019-06-22 06:24:06","","0","1","922712","","2013-08-06 06:46:27","2013-08-06 05:25:17",""
"37868757","How to finalize SunPKCS11 Provider after it is initialized?","I have initialized the SunPKCS11 provider by:
Provider provider = new sun.security.pkcs11.SunPKCS11(""path_to_pkcs11.cfg"");
Security.addProvider(provider);

And then I'm using this provider to initialize a KeyStore to use a key for cipher operations.
KeyStore ks = KeyStore.getInstance(""PKCS11"", provider);
ks.load(null, ""password"".toCharArray());

Once I'm done with the cipher operations, how should I finalize the session with the PKCS11 token?
I have tried removing the Provider, but it didn't work.
Security.removeProvider(""sunPCKS11ProviderName"");

The next time I try to communicate with the Token, I get this exception thrown from the token CKR_CRYPTOKI_ALREADY_INITIALIZED
UPDATE:
I have tried
sun.security.pkcs11.SunPKCS11.logout();

but it didn't work either.
I have a use case where I have to use both the PKCS#11 Wrapper and Provider. To be able to use the wrapper, I have to finalize the provider, or else the token throws CKR_CRYPTOKI_ALREADY_INITIALIZED  error when the wrapper is trying to communicate with the token.
UPDATE WITH CODE:
I'm using Sun's PKCS#11 Provider and IAIK's PKCS#11 Wrapper.
public static void providerAndWrapperIssue() throws Exception
{
    final String name = ""ANY_NAME"";
    final String library = ""LOCATION OF THE TOKENS DLL/SO"";
    final String slot = ""SLOT NUMBER"";

    // SUN PKCS#11 Provider -------------------------------------------

    StringBuilder builder = new StringBuilder();
    builder.append(""name="" + name);
    builder.append(System.getProperty(""line.separator""));
    builder.append(""library=\"""" + library + ""\"""");
    builder.append(System.getProperty(""line.separator""));
    builder.append(""slot="" + slot);

    ByteArrayInputStream bais = new ByteArrayInputStream(builder.toString().getBytes());
    Provider provider = new sun.security.pkcs11.SunPKCS11(bais);
    Security.addProvider(provider);

    KeyStore ks = KeyStore.getInstance(""PKCS11"");
    ks.load(null, null);

    Enumeration<String> aliases = ks.aliases();
    while (aliases.hasMoreElements())
        System.out.println(aliases.nextElement());

    // IAIK PKCS#11 Wrapper -------------------------------------------

    Module pkcs11Module = Module.getInstance(library, false);
    pkcs11Module.initialize(null); <-- Exception here.

    Slot[] slots = pkcs11Module.getSlotList(true);

    Session session = slots[0].getToken().openSession(true, true, null, null);
    session.login(Session.UserType.USER, """".toCharArray());

    session.logout();
    session.closeSession();

    slots[0].getToken().closeAllSessions();

    pkcs11Module.finalize(null);
}

Since the Sun's provider is not logging out and closing sessions, IAIK is not able to access the token. And the Java's Keystore api doesn't have a method to logout.
","Finally was able to find a solution. The Sun's Provider uses the Wrapper underneath. So the trick is to use the Sun's PKCS#11 Wrapper to get the current instance, and finalize it. Obviously this finalizing of the session feature is not exposed in the Provider. But there is a workaround, and it looks like this:
public static void providerAndWrapperIssue() throws Exception
{
    final String name = ""ANY_NAME"";
    final String library = ""LOCATION OF THE TOKENS DLL/SO"";
    final String slot = ""SLOT NUMBER"";

    // SUN PKCS#11 Provider -------------------------------------------

    StringBuilder builder = new StringBuilder();
    builder.append(""name="" + name);
    builder.append(System.getProperty(""line.separator""));
    builder.append(""library=\"""" + library + ""\"""");
    builder.append(System.getProperty(""line.separator""));
    builder.append(""slot="" + slot);

    ByteArrayInputStream bais = new ByteArrayInputStream(builder.toString().getBytes());
    Provider provider = new sun.security.pkcs11.SunPKCS11(bais);
    provider.setProperty(""pkcs11LibraryPath"", library);
    Security.addProvider(provider);

    KeyStore ks = KeyStore.getInstance(""PKCS11"");
    ks.load(null, null);

    Enumeration<String> aliases = ks.aliases();
    while (aliases.hasMoreElements())
        System.out.println(aliases.nextElement());

    // ====================================
    // Solved it using the SUN PKCS#11 Wrapper

    PKCS11 pkcs11 = PKCS11.getInstance(((sun.security.pkcs11.SunPKCS11) provider).getProperty(""pkcs11LibraryPath""), null, null, true);
    pkcs11.C_Finalize(PKCS11Constants.NULL_PTR);

    // ====================================

    // IAIK PKCS#11 Wrapper -------------------------------------------

    Module pkcs11Module = Module.getInstance(library, false);
    pkcs11Module.initialize(null);

    Slot[] slots = pkcs11Module.getSlotList(true);

    Session session = slots[0].getToken().openSession(true, true, null, null);
    session.login(Session.UserType.USER, """".toCharArray());

    session.logout();
    session.closeSession();

    slots[0].getToken().closeAllSessions();

    pkcs11Module.finalize(null);
}

","3852","<java><pkcs#11><hsm>","10","4","2","2016-11-24 08:10:05","40663171","2","3","3957736","","2016-11-17 18:41:45","2016-06-16 20:26:29",""
"37868757","How to finalize SunPKCS11 Provider after it is initialized?","I have initialized the SunPKCS11 provider by:
Provider provider = new sun.security.pkcs11.SunPKCS11(""path_to_pkcs11.cfg"");
Security.addProvider(provider);

And then I'm using this provider to initialize a KeyStore to use a key for cipher operations.
KeyStore ks = KeyStore.getInstance(""PKCS11"", provider);
ks.load(null, ""password"".toCharArray());

Once I'm done with the cipher operations, how should I finalize the session with the PKCS11 token?
I have tried removing the Provider, but it didn't work.
Security.removeProvider(""sunPCKS11ProviderName"");

The next time I try to communicate with the Token, I get this exception thrown from the token CKR_CRYPTOKI_ALREADY_INITIALIZED
UPDATE:
I have tried
sun.security.pkcs11.SunPKCS11.logout();

but it didn't work either.
I have a use case where I have to use both the PKCS#11 Wrapper and Provider. To be able to use the wrapper, I have to finalize the provider, or else the token throws CKR_CRYPTOKI_ALREADY_INITIALIZED  error when the wrapper is trying to communicate with the token.
UPDATE WITH CODE:
I'm using Sun's PKCS#11 Provider and IAIK's PKCS#11 Wrapper.
public static void providerAndWrapperIssue() throws Exception
{
    final String name = ""ANY_NAME"";
    final String library = ""LOCATION OF THE TOKENS DLL/SO"";
    final String slot = ""SLOT NUMBER"";

    // SUN PKCS#11 Provider -------------------------------------------

    StringBuilder builder = new StringBuilder();
    builder.append(""name="" + name);
    builder.append(System.getProperty(""line.separator""));
    builder.append(""library=\"""" + library + ""\"""");
    builder.append(System.getProperty(""line.separator""));
    builder.append(""slot="" + slot);

    ByteArrayInputStream bais = new ByteArrayInputStream(builder.toString().getBytes());
    Provider provider = new sun.security.pkcs11.SunPKCS11(bais);
    Security.addProvider(provider);

    KeyStore ks = KeyStore.getInstance(""PKCS11"");
    ks.load(null, null);

    Enumeration<String> aliases = ks.aliases();
    while (aliases.hasMoreElements())
        System.out.println(aliases.nextElement());

    // IAIK PKCS#11 Wrapper -------------------------------------------

    Module pkcs11Module = Module.getInstance(library, false);
    pkcs11Module.initialize(null); <-- Exception here.

    Slot[] slots = pkcs11Module.getSlotList(true);

    Session session = slots[0].getToken().openSession(true, true, null, null);
    session.login(Session.UserType.USER, """".toCharArray());

    session.logout();
    session.closeSession();

    slots[0].getToken().closeAllSessions();

    pkcs11Module.finalize(null);
}

Since the Sun's provider is not logging out and closing sessions, IAIK is not able to access the token. And the Java's Keystore api doesn't have a method to logout.
","Your are getting this exception because once the program get executed for the first time the values get retained with the process id in java.So to resolve this make it as a jar file and run as batch file
","3852","<java><pkcs#11><hsm>","10","0","2","2016-11-24 08:10:05","40663171","2","3","3957736","","2016-11-17 18:41:45","2016-06-16 20:26:29",""
"6996246","PKCS#11 driver prompts for PIN for each key","I am using CardOS API driver from Siemens as PKCS#11 driver to load certificates from a PKI card as follows:
char[] pin = ""123456"".toCharArray();
KeyStore.PasswordProtection pp = new KeyStore.PasswordProtection(pin);
KeyStore keyStore = KeyStore.Builder.newInstance(""PKCS11"", Security.getProvider(""SunPKCS11-verinice""), pp).getKeyStore();
keyStore.load(null,pin);
keyStore.getKey(""key 1"", pin);
keyStore.getKey(""key 2"", pin);

The driver prompts for a PIN for each key although i pass it as a parameter. Is there any other way to pass the PIN by API? Is there any ""PIN cache"" i can activate? 
","You can use a custom CallbackHandler capable of handling a PasswordCallback, as described in section 3.1 of the Java PKCS#11 guide. Caching passwords should be done with appropriate caution, of course.
","3761","<java><pki><pkcs#11>","4","5","3","2011-09-09 14:12:53","7362982","0","1","113252","","2011-08-10 10:16:48","2011-08-09 12:34:09",""
"6996246","PKCS#11 driver prompts for PIN for each key","I am using CardOS API driver from Siemens as PKCS#11 driver to load certificates from a PKI card as follows:
char[] pin = ""123456"".toCharArray();
KeyStore.PasswordProtection pp = new KeyStore.PasswordProtection(pin);
KeyStore keyStore = KeyStore.Builder.newInstance(""PKCS11"", Security.getProvider(""SunPKCS11-verinice""), pp).getKeyStore();
keyStore.load(null,pin);
keyStore.getKey(""key 1"", pin);
keyStore.getKey(""key 2"", pin);

The driver prompts for a PIN for each key although i pass it as a parameter. Is there any other way to pass the PIN by API? Is there any ""PIN cache"" i can activate? 
","You should ask this from your PKCS#11 vendor, in this case Siemens. There's probably nothing you can do from Java.
","3761","<java><pki><pkcs#11>","4","2","3","2011-09-09 14:12:53","7362982","0","1","113252","","2011-08-10 10:16:48","2011-08-09 12:34:09",""
"6996246","PKCS#11 driver prompts for PIN for each key","I am using CardOS API driver from Siemens as PKCS#11 driver to load certificates from a PKI card as follows:
char[] pin = ""123456"".toCharArray();
KeyStore.PasswordProtection pp = new KeyStore.PasswordProtection(pin);
KeyStore keyStore = KeyStore.Builder.newInstance(""PKCS11"", Security.getProvider(""SunPKCS11-verinice""), pp).getKeyStore();
keyStore.load(null,pin);
keyStore.getKey(""key 1"", pin);
keyStore.getKey(""key 2"", pin);

The driver prompts for a PIN for each key although i pass it as a parameter. Is there any other way to pass the PIN by API? Is there any ""PIN cache"" i can activate? 
","I'm also working with CardOS and Siemens cards.
There are two PINs on a card.

Card PIN. Used to unlock the card and read the certificates. You can handle this PIN with your own callback. PIN is only needed once.
Signature PIN. Used to access the qualified signature certificate. This PIN must be entered for each signature. The PIN dialog is from the Siemens middleware and you cannot dismiss it.

In most cases both PINs are the same (else the users gets confused). 
I also have a card without signature PIN. With this I can sign without another PIN entry. Maybe you can remove the signature PIN or get a card without signature PIN.
","3761","<java><pki><pkcs#11>","4","2","3","2011-09-09 14:12:53","7362982","0","1","113252","","2011-08-10 10:16:48","2011-08-09 12:34:09",""
"804676","Using a hardware token for login","I am new to the topic of cryptography and am studying PKI and PKCS etc. I understand the basic concept of PKI and how it is used for encryption/decryption. I am confused however about how a hardware token like a USB token or a smartcard is used for secure login to your computer. Here are steps as I understand them and the part I am confused by (sorry in advance for the question length):
Scenario: Computer xyz on the network contains data that only users who belong to the group SECRET can access. Users Bob and Joe are in this group and have been issued USB tokens that they can use to provide credentials that will enable them to access these resources. The USB token employs two-factor authentication and requires a pin to be input. The token is PKCS11 compliant.

Bob inserts the USB token into Linux machine
A PAM-PKCS11 module recognizes this event and prompts Bob to enter his pin.
Once Bob correctly enters his 4-digit PIN, the module checks for the validity of the certificate on Bob's token by (this varies, but what is minimum?):


Locating the root certificate to check for a trusted CA
Checking certificate validity dates and revocation lists
Matching ID on token against user file (where?, missing a step) or directory (LDAP, etc.)

If all looks good, module informs PAM of the successful result.
This line is labeled sufficient so PAM accepts authentication and Bob is logged in and can view information restricted to users from the SECRET group.

The part I am missing is where is the information stored about whether or not Bob can access this machine and how exactly he is tied to Bob the network (or even desktop) user. I understand that other identifying data about Bob will be stored on the USB including an ID (e.g., email address). However, how is this strong security? Where is crypto being employed during the login process, if at all (or is that not the real purpose of these tokens)? If someone gets hold of the USB and knows the 4-digit pin, that appears to be all that is needed, right? Moreover, is it essentially the trust in the CA that allows is to trust that another user can't get a new USB token and use a trusted CA to get a new certificate but specify all identifying data to be the same as Bob's? I know there is some critical part I am missing .. but after reading dozens of articles, explanation of this area seems glossed over.  Is it a good idea to use a hardware token as a sufficient means for authentication to login to a machine containing sensitive data?  Or is the purpose of such tokens primarily to securely store key pairs that are used in other applications?Thanks for your help!
","PAM (as the name suggests) only handles Authentication.  Authentication is about proving who the user is, i.e. ""Prove to me who are who you say you are.""  This is seperate from Authorization which is, i.e. ""Do you have access to this resource?"".
There are three aspects to Authentication:
1. I Know
2. I Have
3. I Am
A typical username/password combination fits into 1.  While a token, or other PKCS device, fits into 2, and biometrics such as iris recognition or fingerprint reading fits into number three.
The more of these aspects you have in your security the better/tighter the security is.  In this case the login fits into 1 and 2 so is more secure than just a user name and passowrd.  If someone was to get his pin out of him and steal his device then yes it won't proove that it is bob using it.  But then neither would it if Bob gave his username and password to someone either.
The point of the token is to introduce the second factor of ""having"" something, the fact that you also need a PIN means that ""knowing"" something is also required.  So the system can then have more confidence that the person is who they claim to be.
The missing part you are referring to is Authorization this as stated is a seperate process to Authentication and happens only after the user has authenticated themselves.  In this case PAM has Authenticated Bob and provided confirmation to the OS that Bob is indeed using the system.  However, the OS would then have to perform some other check in step 5 to confirm that Bob had access to the resource.  
","3664","<linux><pam><pkcs#11>","3","5","1","2009-04-30 22:29:49","804839","0","","","","","2009-04-29 23:02:50",""
"7618301","Can I get public/private key pair from a key container in smartcard?","Can I get the public/private key pair from a key container inside a smartcard using PKCS #11 or CryptoAPI?
","I'm no expert in this, but I think the whole point of a smartcard is that you can't extract the private key.  You send the data to the card instead, and let it do the crypto operations on its own processor.
","3583","<c++><smartcard><cryptoapi><private-key><pkcs#11>","3","6","2","2011-10-20 13:36:43","","0","1","220643","","2011-10-20 13:36:43","2011-10-01 05:03:49",""
"7618301","Can I get public/private key pair from a key container in smartcard?","Can I get the public/private key pair from a key container inside a smartcard using PKCS #11 or CryptoAPI?
","It depends. Both CryptoAPI (well the CSP for the smart card) and PKCS#11 allows you to have exportable key pairs. However it's common to use non exportable private keys to use the smart card strength to its full potential.
So if you're writing an application it becomes your choice. Otherwise someone else already made that choice for you ;-)
","3583","<c++><smartcard><cryptoapi><private-key><pkcs#11>","3","5","2","2011-10-20 13:36:43","","0","1","220643","","2011-10-20 13:36:43","2011-10-01 05:03:49",""
"23633458","CKR_DEVICE_ERROR using iaik for digital signature","I'm try to develop a Java Application that is able to do the digital signature on a file with smart card.
I set the PKCS#11 provider in this way:
Security.addProvider(new IAIK());
Properties providerProperties = new Properties();
providerProperties.put(""PKCS11_NATIVE_MODULE"",""path\\asepkcs.dll"");
IAIKPkcs11 pkcs11Provider = new IAIKPkcs11(providerProperties);
Security.addProvider(pkcs11Provider);
 Module module = Module.getInstance(""path\\asepkcs.dll"");

After I read the KeyStore that I load in to smart card before, but when I try to use the method for create the digital sign the application catch the follow exception:
java.security.SignatureException: iaik.pkcs.pkcs11.wrapper.PKCS11Exception: CKR_DEVICE_ERROR                      
at iaik.pkcs.pkcs11.provider.signatures.ExternalHashSignature.pkcs11Sign(ExternalHashSignature.java:294)
at iaik.pkcs.pkcs11.provider.signatures.PKCS11Signature.engineSign(PKCS11Signature.java:638)
at java.security.Signature$Delegate.engineSign(Unknown Source)
at java.security.Signature.sign(Unknown Source)
at sii.tesi.firma.provasc.FirmaScK.main(FirmaScK.java:288)

I'm not be able to understand how I could resolve the CKR_DEVICE_ERROR.
I use for the sign the follow methods:
Signature signAlg = Signature.getInstance(""SHA1withRSA""); 
signAlg.initSign(privateKey); 
signAlg.update(toBeEncrypted); 
byte[] signatureValue = signAlg.sign(); 

","DId you use the Pkcs11Wrapper as well? If so, did you specify the java.library.path? The Wrapper version should match the Provider version, or check the readme for more details.
Regarding your code, specify the IAIK provider:
Signature.getInstance(""SHA1withRSA"", iaikProvider)

and try to add the provider like this:
IAIK.addAsProvider(false);

If that doesn't help check the error log generated by the pkcs11 module.
","3493","<java><digital-signature><pkcs#11><iaik-jce>","1","0","2","2016-09-30 11:14:36","","0","1","1816580","","2015-06-18 13:08:30","2014-05-13 14:02:25",""
"23633458","CKR_DEVICE_ERROR using iaik for digital signature","I'm try to develop a Java Application that is able to do the digital signature on a file with smart card.
I set the PKCS#11 provider in this way:
Security.addProvider(new IAIK());
Properties providerProperties = new Properties();
providerProperties.put(""PKCS11_NATIVE_MODULE"",""path\\asepkcs.dll"");
IAIKPkcs11 pkcs11Provider = new IAIKPkcs11(providerProperties);
Security.addProvider(pkcs11Provider);
 Module module = Module.getInstance(""path\\asepkcs.dll"");

After I read the KeyStore that I load in to smart card before, but when I try to use the method for create the digital sign the application catch the follow exception:
java.security.SignatureException: iaik.pkcs.pkcs11.wrapper.PKCS11Exception: CKR_DEVICE_ERROR                      
at iaik.pkcs.pkcs11.provider.signatures.ExternalHashSignature.pkcs11Sign(ExternalHashSignature.java:294)
at iaik.pkcs.pkcs11.provider.signatures.PKCS11Signature.engineSign(PKCS11Signature.java:638)
at java.security.Signature$Delegate.engineSign(Unknown Source)
at java.security.Signature.sign(Unknown Source)
at sii.tesi.firma.provasc.FirmaScK.main(FirmaScK.java:288)

I'm not be able to understand how I could resolve the CKR_DEVICE_ERROR.
I use for the sign the follow methods:
Signature signAlg = Signature.getInstance(""SHA1withRSA""); 
signAlg.initSign(privateKey); 
signAlg.update(toBeEncrypted); 
byte[] signatureValue = signAlg.sign(); 

","I fixed CKR_DEVICE_ERROR. The problem was simply that the smartcard was making a bad connection (Omnikey 6121 are badly build)
a paperclip to jam the chip tighter on the board fixed this problem for me.
","3493","<java><digital-signature><pkcs#11><iaik-jce>","1","0","2","2016-09-30 11:14:36","","0","1","1816580","","2015-06-18 13:08:30","2014-05-13 14:02:25",""
"10796485","Interfacing with a Hardware Security Module on Linux","I have to work with an HSM device for security requirements in my project. I am confused about how HSM is interfaced with C on a Linux machine. 
How does a user access HSM internal memory for performing different operations with it?
","The HSM vendor should have provided you a library. You can use this library to interact with your HSM via PKCS#11 interface. You will need the PKCS#11 header files in you project in order to do that.
Check out this site http://www.calsoftlabs.com/whitepapers/public-key-cryptography.html to get a introduction
","3485","<c><openssl><pkcs#11><hsm>","4","2","3","2013-05-12 05:35:08","","0","1","474189","","2012-10-25 18:43:00","2012-05-29 09:33:32",""
"10796485","Interfacing with a Hardware Security Module on Linux","I have to work with an HSM device for security requirements in my project. I am confused about how HSM is interfaced with C on a Linux machine. 
How does a user access HSM internal memory for performing different operations with it?
","Every HSM vendor supports at least one cryptographic API. PKCS#11 is a particularly common choice, but there are many other options. OpenSSL, for example, supports HSMs through an engine interface.
Often the vendor will expose a proprietary API in addition to the ""standard"" APIs it implements. The proprietary API typically offers a greater degree of control over key security properties and key usage than is possible to express in the standard APIs.
When using an HSM, one typically issues a command to load a key from a secure store and retrieve a handle to the key object. This handle is the layer of abstraction that allows the HSM to perform the key operations securely without exposing the key material.
With regards to your project, it is important that you don't simply ""shove"" the HSM somewhere in your solution to make it appear secure. Instead, think long and hard about the security properties of your system and how cryptography may help you defend against attacks. Once you've identified your attack vectors (and your associated cryptographic defences), then consider which cryptographic API can support your use cases. Only then should you select the best vendor from those who support that API.
In my experience, the standard APIs only suffice for simple security systems. For complex projects, it's almost always necessary to work with the proprietary API of a particular vendor. In such cases, lean heavily on the vendor for support and proof-of-concepts before settling on a product that truly meets your needs.
","3485","<c><openssl><pkcs#11><hsm>","4","6","3","2013-05-12 05:35:08","","0","1","474189","","2012-10-25 18:43:00","2012-05-29 09:33:32",""
"10796485","Interfacing with a Hardware Security Module on Linux","I have to work with an HSM device for security requirements in my project. I am confused about how HSM is interfaced with C on a Linux machine. 
How does a user access HSM internal memory for performing different operations with it?
","I know this is a year old, but in case someone else runs across it, there is a more detailed discussion at this link:
Digital Signing using certificate and key from USB token
Including some long-form working code that I added.  You are also welcome to get my code directly at this link:  https://github.com/tkil/openssl-pkcs11-samples
Good luck!
","3485","<c><openssl><pkcs#11><hsm>","4","2","3","2013-05-12 05:35:08","","0","1","474189","","2012-10-25 18:43:00","2012-05-29 09:33:32",""
"43317044","PKCS11Exception: CKR_TOKEN_NOT_RECOGNIZED","I installed Softhsm v 2.2 and Started working with PkCS#11 Java API that on 
Operations:

1.Slot Creation


Token Creation
Key Generation
Encryption
Signing
Key Retrieving


I am getting below exception :
    Exception in thread ""main"" java.security.ProviderException: Initialization failed
        at sun.security.pkcs11.SunPKCS11.<init>(SunPKCS11.java:376)
        at sun.security.pkcs11.SunPKCS11.<init>(SunPKCS11.java:103)
        at SoftHSM.main(SoftHSM.java:47)
    Caused by: sun.security.pkcs11.wrapper.PKCS11Exception: CKR_TOKEN_NOT_RECOGNIZED
        at sun.security.pkcs11.wrapper.PKCS11.C_OpenSession(Native Method)
        at sun.security.pkcs11.SessionManager.openSession(SessionManager.java:215)
        at sun.security.pkcs11.SessionManager.getOpSession(SessionManager.java:150)
        at sun.security.pkcs11.Token.<init>(Token.java:151)
        at sun.security.pkcs11.SunPKCS11.initToken(SunPKCS11.java:858)
        at sun.security.pkcs11.SunPKCS11.<init>(SunPKCS11.java:367)
        ... 2 more

My softhsm.cfg
    name = SoftHSM
    library = Z:\SOFTHSM_INSTALL\lib\softhsm2-x64.dll

    slot= 0

    attributes(generate, *, *) = {
       CKA_TOKEN = true
    }
    attributes(generate, CKO_CERTIFICATE, *) = {
       CKA_PRIVATE = false
    }
    attributes(generate, CKO_PUBLIC_KEY, *) = {
       CKA_PRIVATE = false
    }

After I tried another after restart of PC: 
    C:\SoftHSM2\bin>softhsm2-util.exe --show-slots
    Available slots:
    Slot 0
        Slot info:
            Description:      SoftHSM slot ID 0x0
            Manufacturer ID:  SoftHSM project
            Hardware version: 2.2
            Firmware version: 2.2
            Token present:    yes
        Token info:
            Manufacturer ID:  SoftHSM project
            Model:            SoftHSM v2
            Hardware version: 2.2
            Firmware version: 2.2
            Serial number:
            Initialized:      no
            User PIN init.:   no
            Label:

    C:\SoftHSM2\bin> softhsm2-util.exe --init-token --slot 1 --label ""A token""
    === SO PIN (4-255 characters) ===
    Please enter SO PIN: ******
    Please reenter SO PIN: ******
    === User PIN (4-255 characters) ===
    Please enter user PIN: ****
    Please reenter user PIN: ****
    CKR_SLOT_ID_INVALID: Slot 1 does not exist.

    C:\SoftHSM2\bin> softhsm2-util.exe --init-token --slot 0 --label ""0 token""
    === SO PIN (4-255 characters) ===
    Please enter SO PIN: ******
    Please reenter SO PIN: ******
    === User PIN (4-255 characters) ===
    Please enter user PIN: ****
    Please reenter user PIN: ****
    The token has been initialized.

    C:\SoftHSM2\bin>softhsm2-util.exe --show-slots
    Available slots:
    Slot 1526831955
        Slot info:
            Description:      SoftHSM slot ID 0x5b019b53
            Manufacturer ID:  SoftHSM project
            Hardware version: 2.2
            Firmware version: 2.2
            Token present:    yes
        Token info:
            Manufacturer ID:  SoftHSM project
            Model:            SoftHSM v2
            Hardware version: 2.2
            Firmware version: 2.2
            Serial number:    cafa9efc5b019b53
            Initialized:      yes
            User PIN init.:   yes
            Label:            0 token
    Slot 1
        Slot info:
            Description:      SoftHSM slot ID 0x1
            Manufacturer ID:  SoftHSM project
            Hardware version: 2.2
            Firmware version: 2.2
            Token present:    yes
        Token info:
            Manufacturer ID:  SoftHSM project
            Model:            SoftHSM v2
            Hardware version: 2.2
            Firmware version: 2.2
            Serial number:
            Initialized:      no
            User PIN init.:   no
            Label:

    C:\SoftHSM2\bin> softhsm2-util.exe --init-token --slot 0 --label ""B token""
    === SO PIN (4-255 characters) ===
    Please enter SO PIN: ******
    Please reenter SO PIN: ******
    === User PIN (4-255 characters) ===
    Please enter user PIN: ****
    Please reenter user PIN: ****
    CKR_SLOT_ID_INVALID: Slot 0 does not exist.

    C:\SoftHSM2\bin> softhsm2-util.exe --init-token --slot 5 --label ""s5 token""
    === SO PIN (4-255 characters) ===
    Please enter SO PIN: ******
    Please reenter SO PIN: ******
    === User PIN (4-255 characters) ===
    Please enter user PIN: ****
    Please reenter user PIN: ****
    CKR_SLOT_ID_INVALID: Slot 5 does not exist.

    C:\SoftHSM2\bin> softhsm2-util.exe --init-token --slot 0 --label ""1 token""
    === SO PIN (4-255 characters) ===
    Please enter SO PIN: ******
    Please reenter SO PIN: ******
    === User PIN (4-255 characters) ===
    Please enter user PIN: ****
    Please reenter user PIN: ****
    CKR_SLOT_ID_INVALID: Slot 0 does not exist.

    C:\SoftHSM2\bin>

But Now it says its initialized, but still I dont know what slot id i have to provide . I tried with slot=1, slot=1526831955 but I am getting
  sun.security.pkcs11.wrapper.PKCS11Exception: CKR_SLOT_ID_INVALID

","","3386","<java><pkcs#11><hsm><softhsm>","0","","0","2017-04-11 06:25:40","","3","1","6897779","","2017-04-11 06:25:40","2017-04-10 07:21:06",""
"14445460","PKCS11 deriveKey() and encrypt() returning different results for 3DES","I am working on a key derivation problem using an HSM and PKCS11 and currently I can't understand why I see completely different results depending on whether I use the deriveKey() method as opposed to using the encrypt() method.  In both cases I'm attempting to use DESede/ECB/NoPadding algorithm for the result and yet depending on which method (deriveKey vs. encrypt) I use to generate the result, I see different outcomes.
Stepping back for a moment to give a high level overview... I am using a specific key derivation methodology used by Global Platform to diversify the master key for use on a smart card.  The method starts with a master key and 8 bytes of data (diversification data) that are used to derive the new key.  The div data bytes are literally just encrypted with the master key using DESede/ECB/NoPadding and the result is used as part of the new derived 3DES key.  (In actuality, there are multiple encryptions performed and the results are concatenated together to form the new key, but that is not the issue here.)
I've verified the master key in both cases, verified that the diversification data is the same in both cases, verified that I'm using the same algorithm with the same padding.  I've also tried changing the derived key template to DES, 2DES, 3DES.  All yield similar results that only differ in length.
Currently I've implemented my test case using IAIK wrapper (a pkcs11 wrapper written in Java), which I will post here.  The key is just a test key and the div data is sample div data, so there is no sensitive information here.  I'm first creating a base key in the HSM, then attempt to derive a new key by calling session.deriveKey() using the diversification data.  The derived key bytes are printed in hex (the key value is incorrect, based on my currently working implementation that derives the key in memory instead of within the HSM).  Next, I simply initialize the session to perform an encryption using the master key and then encrypt the diversification data.  This yields the expected value (again, checked against a working implementation).
What I'm looking for is any insight into why these operations are yielding different results, when I'm using the same base key, the same div data and the same encryption algorithm.  I don't understand what deriveKey() is doing under the surface and I'm unable to find any documentation or source code to shed any light on this.  I must be able to use the deriveKey() method since the derived key will not be available outside the HSM.
Any insight appreciated.
Mechanism keyGenerationMechanism = Mechanism.get(PKCS11Constants.CKM_DES3_KEY_GEN);

List supportedMechanisms = Arrays.asList(token.getMechanismList());
if (!supportedMechanisms.contains(Mechanism.get(PKCS11Constants.CKM_DES3_KEY_GEN))) {
    output_.println(""Mechanism not supported: DES3_KEY_GEN"");
    return;
}

// This is the master key that I want to diversify
DES3SecretKey baseKeyTemplate = new DES3SecretKey();
baseKeyTemplate.getValue().setByteArrayValue(new byte[] {0x3d, 0x20, 0x5b, 0x29, (byte) 0xfd, 0x04, (byte) 0xd9, (byte) 0x89, (byte) 0xd0, (byte) 0xfd, (byte) 0x85, (byte) 0xd5, (byte) 0xf7, (byte) 0xb3, 0x31, (byte) 0xd3,
        0x3d, 0x20, 0x5b, 0x29, (byte) 0xfd, 0x04, (byte) 0xd9, (byte) 0x89});
baseKeyTemplate.getDerive().setBooleanValue(Boolean.TRUE);
baseKeyTemplate.getToken().setBooleanValue(Boolean.TRUE);
baseKeyTemplate.getPrivate().setBooleanValue(Boolean.TRUE);
baseKeyTemplate.getSensitive().setBooleanValue(Boolean.FALSE);
baseKeyTemplate.getExtractable().setBooleanValue(Boolean.TRUE);
baseKeyTemplate.getLabel().setCharArrayValue(""GP-3des-aba"".toCharArray());
baseKeyTemplate.getObjectClass().setLongValue(PKCS11Constants.CKO_SECRET_KEY);
baseKeyTemplate.getKeyType().setLongValue(PKCS11Constants.CKK_DES3);
baseKeyTemplate.getEncrypt().setBooleanValue(Boolean.TRUE);
baseKeyTemplate.getDecrypt().setBooleanValue(Boolean.TRUE);
baseKeyTemplate.getWrap().setBooleanValue(Boolean.TRUE);
baseKeyTemplate.getUnwrap().setBooleanValue(Boolean.TRUE);


output_.println(""baseKeyTemplate: "" + baseKeyTemplate.toString());

SecretKey baseKey = (SecretKey) session.createObject(baseKeyTemplate);

System.out.println(""Base key: "");
System.out.println(baseKey.toString());

output_
        .println(""################################################################################"");
output_.println(""derive key"");

//DES3 Key Template
DESSecretKey derived3DESKeyTemplate = new DESSecretKey();
SecretKey derivedKeyTemplate = derived3DESKeyTemplate;

derivedKeyTemplate.getSensitive().setBooleanValue(Boolean.FALSE);
derivedKeyTemplate.getToken().setBooleanValue(Boolean.TRUE);
derivedKeyTemplate.getExtractable().setBooleanValue(Boolean.TRUE);
derivedKeyTemplate.getPrivate().setBooleanValue(Boolean.FALSE);
derivedKeyTemplate.getKeyType().setLongValue(PKCS11Constants.CKK_DES);

// This represents the diversification data (.ie div bytes from some smart card)
byte[] data = new byte[] {0x00, (byte) 0x84, 0x30, (byte) 0x95, 0x35, 0x05,(byte)  0xf0, 0x01};

KeyDerivationStringDataParameters param = new KeyDerivationStringDataParameters(data);
Mechanism mechanism = Mechanism.get(PKCS11Constants.CKM_DES3_ECB);

if (!supportedMechanisms.contains(Mechanism
        .get(PKCS11Constants.CKM_DES3_ECB))) {
    output_.println(""Mechanism not supported: CKM_DES3_ECB"");
    return;
}

mechanism.setParameters(param);

System.out.println(""Derivation Mechanism: "");
output_.println(mechanism.toString());
output_
        .println(""--------------------------------------------------------------------------------"");

Key derivedKey = session.deriveKey(mechanism, baseKey, derivedKeyTemplate);

if (derivedKey == null) {
    output_.println(""Found NO key that can be used for encryption."");
    output_.flush();
    System.exit(0);
}
System.out.println(""Derived key: "");
output_.println(derivedKey.toString());

output_
        .println(""################################################################################"");
output_.println(""finished"");

// initialize for encryption
Mechanism encryptionMechanism = Mechanism.get(PKCS11Constants.CKM_DES3_ECB);
session.encryptInit(encryptionMechanism, baseKey);
byte[] encryptedData = session.encrypt(data);

System.out.println(""Encrypted data: "" + new String(Hex.encodeHex(encryptedData)));

// This is the second part of the derived key, let's not worry about this yet since the first part isn't
// working.
//        data = new byte[] {0x00, (byte) 0x84, 0x30, (byte) 0x95, 0x35, 0x05,(byte)  0x0f, 0x01,
//                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
//
//        session.encryptInit(encryptionMechanism, baseKey);
//        encryptedData = session.encrypt(data);
//        System.out.println(""Encrypted data: "" + new String(Hex.encodeHex(encryptedData)));

session.closeSession();
pkcs11Module.finalize(null);

Here's the relevant output when I run the above code:
Base key:  
  Object Class: Secret Key  
  Token: true  
  Private: true  
  Modifiable: true  
  Label: GP-3des-aba  
  Key Type: DES3  
  ID: <NULL_PTR>  
  Start Date: 00.00.0000 (DD.MM.YYYY)  
  End Date: 00.00.0000 (DD.MM.YYYY)  
  Derive: true  
  Local: false  
  Key Generation Mechanism: <Information unavailable>  
  Allowed Mechanisms: <NULL_PTR>  
  Sensitive: false  
  Encrypt: true  
  Decrypt: true  
  Sign: false  
  Verify: false  
  Wrap: true  
  Unwrap: true  
  Extractable: true  
  Always Sensitive: false  
  Never Extractable: false  
  Check Value: <Attribute not present>  
  Wrap With Trusted: <Attribute not present>  
  Trusted: <Attribute not present>  
  Wrap Template: <Attribute not present>  
  Unwrap Template: <Attribute not present>  
  Value (hex): 3d205b29fd04d989d0fd85d5f7b331d33d205b29fd04d989  
################################################################################
derive key  
Derivation Mechanism:   
  Mechanism: CKM_DES3_ECB  
  Parameters:   
  String data (hex): 008430953505f001  
--------------------------------------------------------------------------------  
01/18/13 14:12:10   CALL: entering (in Java_iaik_pkcs_pkcs11_wrapper_PKCS11Implementation_C_1DeriveKey)  

[snip]  

Derived key:   
  Object Class: Secret Key  
  Token: true  
  Private: false  
  Modifiable: true  
  Label: <NULL_PTR>  
  Key Type: DES  
  ID: <NULL_PTR>  
  Start Date: 00.00.0000 (DD.MM.YYYY)  
  End Date: 00.00.0000 (DD.MM.YYYY)  
  Derive: false  
  Local: false  
  Key Generation Mechanism: CKM_DES3_ECB  
  Allowed Mechanisms: <NULL_PTR>  
  Sensitive: false  
  Encrypt: false  
  Decrypt: false  
  Sign: false  
  Verify: false  
  Wrap: false  
  Unwrap: false  
  Extractable: true  
  Always Sensitive: false  
  Never Extractable: false  
  Check Value: <Attribute not present>  
  Wrap With Trusted: <Attribute not present>  
  Trusted: <Attribute not present>  
  Wrap Template: <Attribute not present>  
  Unwrap Template: <Attribute not present>  
  Value (hex): 3efe0eab6d3db397      <--- call to deriveKey() value incorrect  
################################################################################  
finished  
01/18/13 14:12:12   CALL: entering (in Java_iaik_pkcs_pkcs11_wrapper_PKCS11Implementation_C_1EncryptInit)  
01/18/13 14:12:12   CALL: exiting  (in Java_iaik_pkcs_pkcs11_wrapper_PKCS11Implementation_C_1EncryptInit)  
01/18/13 14:12:12   CALL: entering (in Java_iaik_pkcs_pkcs11_wrapper_PKCS11Implementation_C_1Encrypt)  
01/18/13 14:12:12   CALL: exiting  (in Java_iaik_pkcs_pkcs11_wrapper_PKCS11Implementation_C_1Encrypt)  
Encrypted data: 3fff0faa6c3cb297    <--- call to encrypt() returns the expected value 

","Turns out that the key generated in the HSM using DeriveKey and the key bytes I generated using session.encrypt() are essentially the same if one considers how DES parity works.
The least significant bit of each byte in a DES key is the parity bit, which is ignored in many implementations and is not used as part of the key, thus if I properly set the parity bits on my encrypt result then both results match.
0x3efe0eab6d3db397  <--- HSM generated value with correct odd parity
00111110 11111110 00001110 10101011 01101101 00111101 10110011 10010111
0x3fff0faa6c3cb297  <--- encryption result without parity bits set properly
00111111 11111111 00001111 10101010 01101100 00111100 10110010 10010111
","3361","<java><3des><pkcs#11><hsm>","4","8","1","2015-06-29 21:45:08","14469943","0","6","3102264","","2015-06-29 21:45:08","2013-01-21 19:04:47",""
"3300346","How to access a smartcard in Java on Linux?","I'm trying to access a smartcard on a linux system on a VM. The USB device is mapped to the VM and can be listed via lsusb (ID 076b:3021 OmniKey AG CardMan 3121). I can access the smartcard via pkcs11-tool and pkcs15-tool. Also firefox can access the token via the /usr/lib/opensc-pkcs11.so library. 
But when I try to access the smartcard from Java, an empty keystore is returned. I'm using the following configuration for the sun.security.pkcs11.SunPKCS11 provider. 
name = PKCS11Test
library = /usr/lib/opensc-pkcs11.so
slot = 0

When using a different slot (I tried slot 0-15), I get CKR_PIN_INCORRECT errors or ""PKCS11 not found"". In my tests I'm loading the keystore like this:
char[] pin = ""123456"".toCharArray();
KeyStore ks = KeyStore.getInstance(""PKCS11"", p);
ks.load(null, pin);

On the other hand the pkcs11-tool returned for slot 0:

Slot 0           CCID Compatible
token model:   PKCS#15 emulated

As Java seems to access the card on slot 0 (at least no error is returned), I'm probably doing something else wrong in accessing the keystore. How can I access the private key?
","Okay, I found the solution.
Why ever, the slot 0 seems to be empty at all. Slot 1 and 2 have private keys, but were protected with different (local) PINs. With the netkey-tool I was able to set the local PIN to the global PIN. Afterwards accessing the card worked without a flaw. 
","3347","<java><linux><pkcs#11>","5","1","1","2011-06-20 10:31:54","","0","1","5000","","2011-06-20 10:31:54","2010-07-21 14:31:29",""
"12794008","How can I find the implementation and configuration file of PKCS#11","I'm trying to make a program that reads and displays certificate info from the token (Safenet) 
but the problem that I face is :
Exception in thread ""main"" java.security.ProviderException: Error parsing configuration

so I think the problem is in the Configuration file.
How can I make the configration file and also the implementation file so it works correctly.
Thanks
","you can able to resolve the error by correcting nss.cfg in %AS_HOME%\domains\nssdomain\config\
you can follow the instructions in the section ""Configure Glassfish to Use the NSS Stores"" on this page.
Either follow this link also. 
","3331","<java><pkcs#11>","1","0","2","2014-06-18 10:32:22","","2","","741249","","2012-10-09 06:32:19","2012-10-09 06:25:34",""
"12794008","How can I find the implementation and configuration file of PKCS#11","I'm trying to make a program that reads and displays certificate info from the token (Safenet) 
but the problem that I face is :
Exception in thread ""main"" java.security.ProviderException: Error parsing configuration

so I think the problem is in the Configuration file.
How can I make the configration file and also the implementation file so it works correctly.
Thanks
","In order to work with PKCS#11 in java you need to provide a config file where you at least specify library and name parameter. In this parameters you must specify the path to native library for the token and a arbitrary identifier. Additionally you can add more parameters but they are optional, you can take a look on java pkcs#11 reference guide. I give you a code sample to instantiate a PKCS#11:
// create configuration
String pkcs11nativeLibrary = ""/path_to_native_library/library.so"";
String pkcs11ConfigSettings = ""name = mySmartCard\n"" + ""library = "" + pkcs11nativeLibrary;
byte[] pkcs11ConfigBytes = pkcs11ConfigSettings.getBytes();
final ByteArrayInputStream confStream = new ByteArrayInputStream(pkcs11ConfigBytes);

// instantiate the provider with your config
SunPKCS11 pkcs11Provider = new SunPKCS11(confStream);
Security.addProvider(pkcs11Provider);

// get the keystore
Char[] pkcs11Password = ""your_password"".toCharArray();
KeyStore myPKCS11KS = KeyStore.getInstance(""PKCS11"", pkcs11Provider );
myPKCS11KS.load(null, pkcs11Password);

In the sample I put the pkcs11 password directly, however when you try to load a PKCS#11 from some client you have to get the password dinamically in order to do so you can change you key store instance for something like:
// YourCallbackHandler must implements javax.security.auth.callback.CallbackHandler
KeyStore.CallbackHandlerProtection cbhp = new KeyStore.CallbackHandlerProtection(new YourCallbackHandler());
KeyStore.Builder builder = KeyStore.Builder.newInstance(""PKCS11"", pkcs11Provider, cbhp);
KeyStore myPKCS11KS = builder.getKeyStore();

Hope this helps,
","3331","<java><pkcs#11>","1","0","2","2014-06-18 10:32:22","","2","","741249","","2012-10-09 06:32:19","2012-10-09 06:25:34",""
"17445687","gnome keyring pkcs11 warning","I get a gnome-keyring warning when I try to do many different things from the command line, like svn. Example:
$ lp README.txt 
WARNING: gnome-keyring:: couldn't connect to: /run/user/dargaud/keyring-kAKdPw/pkcs11: No such file or directory
request id is lpsc0204pnb-366 (1 file(s))

/run/user/dargaud/keyring-kAKdPw/pkcs11 doesn't exist (there's only a 'control' socket in there).
I'm using Kubuntu, so why is anything trying to use the gnome keyring instead of kwallet in the first place ?
Thanks
","You can run it as startup job:
 /usr/bin/gnome-keyring-daemon --start --components=pkcs11

","3177","<key><gnome><pkcs#11>","3","6","1","2013-10-18 19:45:58","","0","1","","","","2013-07-03 10:32:33",""
"1867136","Has anyone got a tutorial up on getting your own smartcard and getting pkcs#11 working on it?","Has anyone got a tutorial up on getting your own smartcard and getting pkcs#11 working on it? In Linux? (Windows would be fine too).
Most of the vendors seem to assume you'll be wanting enough for your whole company, not one or two.
","This heavily depends on the driver and application you use. We use OpenSC/OpenCT for all non-Enterprise Smartcard uses. They have decent documentation.
","3169","<security><encryption><smartcard><pkcs#11>","4","6","2","2017-05-07 00:59:15","1867718","0","1","36330","","2009-12-08 14:19:34","2009-12-08 13:57:34",""
"1867136","Has anyone got a tutorial up on getting your own smartcard and getting pkcs#11 working on it?","Has anyone got a tutorial up on getting your own smartcard and getting pkcs#11 working on it? In Linux? (Windows would be fine too).
Most of the vendors seem to assume you'll be wanting enough for your whole company, not one or two.
","Yes, check out what OpenSC supports.
Make sure that you know what you want - USB tokens or full-size smart cards. There are pros and cons with both solutions - USB tokens require drivers, often by the manufacturer, to use on some platforms (eg Windows7 or OSX can be troublesome). But they are easy to use once set up and sometimes offer better performance than ISO smartcards. Casual smart cards on the other hand have also contactless interfaces and can be used with pinpad readers which provide higher security than USB tokens.
If you're into fancier features and may want to extend your card infra further than just pkcs#11 crypto, javacards might be useful (OpenSC can not work with JavaCards directly but certain applets are supported, like Muscle) Otherwise look for a supported card operating system.
","3169","<security><encryption><smartcard><pkcs#11>","4","1","2","2017-05-07 00:59:15","1867718","0","1","36330","","2009-12-08 14:19:34","2009-12-08 13:57:34",""
"16288407","How can I sign a file with PKCS11 in Python?","How can I sign a file with PKCS11 in Python?
I'm looking for a way to sign a .txt file using a ""Cryptographic Token Interface"", but I haven't found a solution.
My first idea was to use pycrypto, but the documentation has no mention of this.
","pycrypto is a low-level module that gives you all the pieces you need to build a cryptosystem, not a complete cryptosystem implementation.
Also, pycrypto doesn't have PKCS#11 support. And neither do the major alternatives. Even if you use one of the OpenSSL wrappers, normal builds of OpenSSL themselves don't have PKCS#11 support compiled in. You need to specify a .dll/.so/.dylib implementing PKCS#11 for your specific hardware (or multiple such libs) at configure time and build OpenSSL.
On top of that, if you're doing PKCS#11, one of the pieces you probably need is a way to interface with smartcards and other hardware token, and pycrypto doesn't do that part at all.
You may want to use a higher-level library, with hardware support built in, like pykcs11. This wraps a C library that knows how to do both Windows built-in PKCS#11 and cross-platform PKCS#11, with a variety of different hardware from different vendors. Hopefully you can just use the high-level API; you may need to use the low-level API (or even combine two libraries—e.g., you might want to use pykcs11 to generate a keypair, and then use pycrypto to sign something with the private key).
","3108","<python><django><token><digital-signature><pkcs#11>","1","3","2","2018-05-04 14:30:14","16288571","1","","1167234","","2013-04-29 21:22:57","2013-04-29 21:17:14",""
"16288407","How can I sign a file with PKCS11 in Python?","How can I sign a file with PKCS11 in Python?
I'm looking for a way to sign a .txt file using a ""Cryptographic Token Interface"", but I haven't found a solution.
My first idea was to use pycrypto, but the documentation has no mention of this.
","python-pkcs11 is what you want to use. There's documentation on signing and verifying.
","3108","<python><django><token><digital-signature><pkcs#11>","1","0","2","2018-05-04 14:30:14","16288571","1","","1167234","","2013-04-29 21:22:57","2013-04-29 21:17:14",""
"31921939","Caused by: sun.security.pkcs11.wrapper.PKCS11Exception: CKR_DATA_INVALID","I'm having problems with my application that generates xml signed, but just happen it on Windows, I don't have the problem on Linux, proves with jre 7 and jre 8 thanks advance.
    java.security.ProviderException: sun.security.pkcs11.wrapper.PKCS11Exception: E

    at sun.security.pkcs11.P11Signature.engineSign(P11Signature.java:547)
    at java.security.Signature$Delegate.engineSign(Unknown Source)
    at java.security.Signature.sign(Unknown Source)
    at org.apache.xml.security.algorithms.implementations.SignatureBaseRSA.engineSign(SignatureBaseRSA.java:130)
    at org.apache.xml.security.algorithms.SignatureAlgorithm.sign(SignatureAlgorithm.java:173)
    at org.apache.xml.security.signature.XMLSignature.sign(XMLSignature.java:614)
    at bo.accl.clientelynx.Signer.firmar(Signer.java:283)
    at bo.accl.clientelynx.Signer.sign(Signer.java:168)
    at bo.accl.clientelynx.Signer.apply(Signer.java:350)
    at bo.accl.clientelynx.Signer.apply(Signer.java:61)
    at com.google.common.collect.Iterators$8.transform(Iterators.java:860)
    at com.google.common.collect.TransformedIterator.next(TransformedIterator.java:48)
    at bo.accl.clientelynx.App$17.doInBackground(App.java:1130)
    at bo.accl.clientelynx.App$17.doInBackground(App.java:1095)
    at javax.swing.SwingWorker$1.call(Unknown Source)
    at java.util.concurrent.FutureTask$Sync.innerRun(Unknown Source)
    at java.util.concurrent.FutureTask.run(Unknown Source)
    at javax.swing.SwingWorker.run(Unknown Source)
    at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
    at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
    at java.lang.Thread.run(Unknown Source)
Caused by: sun.security.pkcs11.wrapper.PKCS11Exception: CKR_DATA_INVALID
    at sun.security.pkcs11.wrapper.PKCS11.C_Sign(Native Method)
    at sun.security.pkcs11.P11Signature.engineSign(P11Signature.java:538)

","After searching on CKR_DATA_INVALID I found that the error is:

The plaintext input data to a cryptographic operation is invalid.
  This return value has lower priority than CKR_DATA_LEN_RANGE.

See: http://www.cryptsoft.com/pkcs11doc/v220/pkcs11__all_8h.html#aCKR_DATA_INVALID
My guest is you have an encoding problem with your data between windows and Linux. Check your data file to find invalid windows characters.
","3020","<java><pkcs#11>","0","0","2","2017-12-21 10:33:09","","2","","","","","2015-08-10 14:14:57",""
"31921939","Caused by: sun.security.pkcs11.wrapper.PKCS11Exception: CKR_DATA_INVALID","I'm having problems with my application that generates xml signed, but just happen it on Windows, I don't have the problem on Linux, proves with jre 7 and jre 8 thanks advance.
    java.security.ProviderException: sun.security.pkcs11.wrapper.PKCS11Exception: E

    at sun.security.pkcs11.P11Signature.engineSign(P11Signature.java:547)
    at java.security.Signature$Delegate.engineSign(Unknown Source)
    at java.security.Signature.sign(Unknown Source)
    at org.apache.xml.security.algorithms.implementations.SignatureBaseRSA.engineSign(SignatureBaseRSA.java:130)
    at org.apache.xml.security.algorithms.SignatureAlgorithm.sign(SignatureAlgorithm.java:173)
    at org.apache.xml.security.signature.XMLSignature.sign(XMLSignature.java:614)
    at bo.accl.clientelynx.Signer.firmar(Signer.java:283)
    at bo.accl.clientelynx.Signer.sign(Signer.java:168)
    at bo.accl.clientelynx.Signer.apply(Signer.java:350)
    at bo.accl.clientelynx.Signer.apply(Signer.java:61)
    at com.google.common.collect.Iterators$8.transform(Iterators.java:860)
    at com.google.common.collect.TransformedIterator.next(TransformedIterator.java:48)
    at bo.accl.clientelynx.App$17.doInBackground(App.java:1130)
    at bo.accl.clientelynx.App$17.doInBackground(App.java:1095)
    at javax.swing.SwingWorker$1.call(Unknown Source)
    at java.util.concurrent.FutureTask$Sync.innerRun(Unknown Source)
    at java.util.concurrent.FutureTask.run(Unknown Source)
    at javax.swing.SwingWorker.run(Unknown Source)
    at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
    at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
    at java.lang.Thread.run(Unknown Source)
Caused by: sun.security.pkcs11.wrapper.PKCS11Exception: CKR_DATA_INVALID
    at sun.security.pkcs11.wrapper.PKCS11.C_Sign(Native Method)
    at sun.security.pkcs11.P11Signature.engineSign(P11Signature.java:538)

","I experienced a similar problem while I was working with an older version of the p11-capi library. In my case I wanted to use a new signature algorithm (SHA256withRSA instead of SHA1withRSA) and received the same Java exception. The exception is not very helpful, so it took quite long until I found out that the problem has been fixed in the recent library version: https://risacher.org/p11-capi/
","3020","<java><pkcs#11>","0","0","2","2017-12-21 10:33:09","","2","","","","","2015-08-10 14:14:57",""
"20226366","iaik pkcs#11 wrapper and java.lang.NoSuchMethodError","I am trying to run a simple sample code from iaik pkcs#11 wrapper (version 1.3, the latest atm) but get NoSuchMethodError on pkcs11Module.initialize call.
Module pkcs11Module = Module.getInstance(""siecap11"");
pkcs11Module.initialize(null); 
Slot[] slots = pkcs11Module.getSlotList(Module.SlotRequirement.TOKEN_PRESENT);
for (Slot s: slots) {
    System.out.println(s.getSlotID());
}
pkcs11Module.finalize(null);

Exception stack trace is as following
java.lang.NoSuchMethodError:     iaik.pkcs.pkcs11.wrapper.PKCS11.C_Initialize(Ljava/lang/Object;Z)V
at iaik.pkcs.pkcs11.Module.initialize(Module.java:308)
at test.pkcs11.Pkcs11Service.listSlotsWithTokens(Pkcs11Service.java:98)
at test.pkcs11.TestPkcs11Service.testListSlots(TestPkcs11Service.java:35)

A similar code works fine on Linux, so i am guessing there is something wrong with pkcs11wrapper.dll.
pkcs11wrapper.dll and siecap11.dll are in c\windows\system32 directory and both are 32bit modules.
I have tried a different pkcs#11 provider, debug and release versions of pkcs11wrapper but the result was the same.
The debug version of the pkcs11wrapper.dll generates the following output:
11/26/13 21:30:50   CALL: entering (in Java_iaik_pkcs_pkcs11_wrapper_PKCS11Implementation_initializeLibrary)
11/26/13 21:30:50   CALL: exiting  (in Java_iaik_pkcs_pkcs11_wrapper_PKCS11Implementation_initializeLibrary)
11/26/13 21:30:50   CALL: entering (in Java_iaik_pkcs_pkcs11_wrapper_PKCS11Implementation_connect)
11/26/13 21:30:50   INFO: connect to PKCS#11 module: siecap11 ...  (in Java_iaik_pkcs_pkcs11_wrapper_PKCS11Implementation_connect)
11/26/13 21:30:50   CALL: exiting  (in Java_iaik_pkcs_pkcs11_wrapper_PKCS11Implementation_connect)

The utility applications that came with the smart cards work fine, so is opensc pkcs11-tool.
EDIT:
Using version 1.2.17 of pkcs11 wrapper library and its accompanying dll, the code above works without a problem. But the original question remains unresolved.
EDIT2:
Following code, suggested by SubOptimal generates the following output.
@Test
public void testFindLibrary() {
    String lineSeparator = System.getProperty(""path.separator"");
    String libraryPath = System.getProperty(""java.library.path"");
    for (String dir : libraryPath.split(lineSeparator)) {
        File f = new File(dir + ""/"" + ""pkcs11wrapper.dll""); 
        if (f.exists()) {
            System.out.println(""found in: "" + f.getAbsolutePath());
        }
    }
}

output:
found in: C:\Windows\system32\pkcs11wrapper.dll
found in: C:\Windows\system32\pkcs11wrapper.dll
found in: C:\Windows\system32\pkcs11wrapper.dll

","the exception
 java.lang.NoSuchMethodError:     iaik.pkcs.pkcs11.wrapper.PKCS11.C_Initialize(Ljava/lang/Object;Z)V

states that a method with the signature void C_Initialize(Object o, boolean b) should be called and doesn't exist. And you're right with your guess so i am guessing there is something wrong with pkcs11wrapper.dll. Based on the Javadoc this method signature has been changed
PKCS#11 Wrapper version 1.3 and PKCS#11 Wrapper version 1.2.15 (could not find one for 1.2.17).
So your DDL pkcs11wrapper.dll is for an older version. You can check the version in the file properties menu under Windows.
edit
Seems the dll from version 1.2.17 is somewhere in the java.library.path. I did following tests with the GetInfo.java from iaikPkcs11Wrapper archive.
dll      jar      result
1.2.17   1.2.17   work successful
1.2.17   1.3      java.lang.UnsatisfiedLinkError: iaik.pkcs.pkcs11.wrapper.PKCS11Implementation.C_Initialize(Ljava/lang/Object;Z)V
1.3      1.3      work successful
1.3      1.2.17   java.lang.UnsatisfiedLinkError: iaik.pkcs.pkcs11.wrapper.PKCS11Implementation.C_Initialize(Ljava/lang/Object;)V  

The combination dll-1.2.17 and jar-1.3 produces your exception.
You could run following code to find the dll in an unexpected location
import java.io.File;
class Scratch {
    public static void main(String[] args) {
        String lineSeparator = System.getProperty(""path.separator"");
        String libraryPath = System.getProperty(""java.library.path"");
        for (String dir : libraryPath.split(lineSeparator)) {
            if (new File(dir + ""/"" + ""pkcs11wrapper.dll"").exists()) {
                System.out.println(""found in: "" + dir);
            }
        }
    }
}

}
edit 2 the exception of the poster java.lang.NoSuchMethodError is not related to mixed DLL and JAR version, as this produces an java.lang.UnsatisfiedLinkError
another try to get the error reason
PKCS11Test.java
import iaik.pkcs.pkcs11.Module;
import iaik.pkcs.pkcs11.Info;
import iaik.pkcs.pkcs11.Slot;

public class PKCS11Test {
    public static void main(String[] args) throws Exception {
        Module pkcs11Module = Module.getInstance(args[0]);
        pkcs11Module.initialize(null);
        pkcs11Module.finalize(null);
    }
}

PKCS11Test.cmd
set CLASS=PKCS11Test
set JAR=iaikPkcs11Wrapper.1.3.jar
set PKCS11_DLL=%~dp0\opensc_pkcs11.dll
rem cp PKCS11Wrapper.1.3.dll pkcs11wrapper.dll
javac -cp %JAR% %CLASS%.java || pause && exit
java -cp %JAR%;. -Djava.library.path=%~dp0 %CLASS% %PKCS11_DLL%


replace the name of the DLL in the PKCS11_DLL variable with the name of your DLL
the test expect all files in the same directory

","3014","<java><nosuchmethoderror><pkcs#11><iaik-jce>","1","3","3","2014-08-29 06:19:36","25562673","0","","1732176","","2013-12-02 12:53:55","2013-11-26 19:36:56",""
"20226366","iaik pkcs#11 wrapper and java.lang.NoSuchMethodError","I am trying to run a simple sample code from iaik pkcs#11 wrapper (version 1.3, the latest atm) but get NoSuchMethodError on pkcs11Module.initialize call.
Module pkcs11Module = Module.getInstance(""siecap11"");
pkcs11Module.initialize(null); 
Slot[] slots = pkcs11Module.getSlotList(Module.SlotRequirement.TOKEN_PRESENT);
for (Slot s: slots) {
    System.out.println(s.getSlotID());
}
pkcs11Module.finalize(null);

Exception stack trace is as following
java.lang.NoSuchMethodError:     iaik.pkcs.pkcs11.wrapper.PKCS11.C_Initialize(Ljava/lang/Object;Z)V
at iaik.pkcs.pkcs11.Module.initialize(Module.java:308)
at test.pkcs11.Pkcs11Service.listSlotsWithTokens(Pkcs11Service.java:98)
at test.pkcs11.TestPkcs11Service.testListSlots(TestPkcs11Service.java:35)

A similar code works fine on Linux, so i am guessing there is something wrong with pkcs11wrapper.dll.
pkcs11wrapper.dll and siecap11.dll are in c\windows\system32 directory and both are 32bit modules.
I have tried a different pkcs#11 provider, debug and release versions of pkcs11wrapper but the result was the same.
The debug version of the pkcs11wrapper.dll generates the following output:
11/26/13 21:30:50   CALL: entering (in Java_iaik_pkcs_pkcs11_wrapper_PKCS11Implementation_initializeLibrary)
11/26/13 21:30:50   CALL: exiting  (in Java_iaik_pkcs_pkcs11_wrapper_PKCS11Implementation_initializeLibrary)
11/26/13 21:30:50   CALL: entering (in Java_iaik_pkcs_pkcs11_wrapper_PKCS11Implementation_connect)
11/26/13 21:30:50   INFO: connect to PKCS#11 module: siecap11 ...  (in Java_iaik_pkcs_pkcs11_wrapper_PKCS11Implementation_connect)
11/26/13 21:30:50   CALL: exiting  (in Java_iaik_pkcs_pkcs11_wrapper_PKCS11Implementation_connect)

The utility applications that came with the smart cards work fine, so is opensc pkcs11-tool.
EDIT:
Using version 1.2.17 of pkcs11 wrapper library and its accompanying dll, the code above works without a problem. But the original question remains unresolved.
EDIT2:
Following code, suggested by SubOptimal generates the following output.
@Test
public void testFindLibrary() {
    String lineSeparator = System.getProperty(""path.separator"");
    String libraryPath = System.getProperty(""java.library.path"");
    for (String dir : libraryPath.split(lineSeparator)) {
        File f = new File(dir + ""/"" + ""pkcs11wrapper.dll""); 
        if (f.exists()) {
            System.out.println(""found in: "" + f.getAbsolutePath());
        }
    }
}

output:
found in: C:\Windows\system32\pkcs11wrapper.dll
found in: C:\Windows\system32\pkcs11wrapper.dll
found in: C:\Windows\system32\pkcs11wrapper.dll

","Not directly related to your original question, but the suns bug 6880559 and its duplicates indicate that there is some issue with pkcs11 implementation in Windows 64 bit.
","3014","<java><nosuchmethoderror><pkcs#11><iaik-jce>","1","1","3","2014-08-29 06:19:36","25562673","0","","1732176","","2013-12-02 12:53:55","2013-11-26 19:36:56",""
"20226366","iaik pkcs#11 wrapper and java.lang.NoSuchMethodError","I am trying to run a simple sample code from iaik pkcs#11 wrapper (version 1.3, the latest atm) but get NoSuchMethodError on pkcs11Module.initialize call.
Module pkcs11Module = Module.getInstance(""siecap11"");
pkcs11Module.initialize(null); 
Slot[] slots = pkcs11Module.getSlotList(Module.SlotRequirement.TOKEN_PRESENT);
for (Slot s: slots) {
    System.out.println(s.getSlotID());
}
pkcs11Module.finalize(null);

Exception stack trace is as following
java.lang.NoSuchMethodError:     iaik.pkcs.pkcs11.wrapper.PKCS11.C_Initialize(Ljava/lang/Object;Z)V
at iaik.pkcs.pkcs11.Module.initialize(Module.java:308)
at test.pkcs11.Pkcs11Service.listSlotsWithTokens(Pkcs11Service.java:98)
at test.pkcs11.TestPkcs11Service.testListSlots(TestPkcs11Service.java:35)

A similar code works fine on Linux, so i am guessing there is something wrong with pkcs11wrapper.dll.
pkcs11wrapper.dll and siecap11.dll are in c\windows\system32 directory and both are 32bit modules.
I have tried a different pkcs#11 provider, debug and release versions of pkcs11wrapper but the result was the same.
The debug version of the pkcs11wrapper.dll generates the following output:
11/26/13 21:30:50   CALL: entering (in Java_iaik_pkcs_pkcs11_wrapper_PKCS11Implementation_initializeLibrary)
11/26/13 21:30:50   CALL: exiting  (in Java_iaik_pkcs_pkcs11_wrapper_PKCS11Implementation_initializeLibrary)
11/26/13 21:30:50   CALL: entering (in Java_iaik_pkcs_pkcs11_wrapper_PKCS11Implementation_connect)
11/26/13 21:30:50   INFO: connect to PKCS#11 module: siecap11 ...  (in Java_iaik_pkcs_pkcs11_wrapper_PKCS11Implementation_connect)
11/26/13 21:30:50   CALL: exiting  (in Java_iaik_pkcs_pkcs11_wrapper_PKCS11Implementation_connect)

The utility applications that came with the smart cards work fine, so is opensc pkcs11-tool.
EDIT:
Using version 1.2.17 of pkcs11 wrapper library and its accompanying dll, the code above works without a problem. But the original question remains unresolved.
EDIT2:
Following code, suggested by SubOptimal generates the following output.
@Test
public void testFindLibrary() {
    String lineSeparator = System.getProperty(""path.separator"");
    String libraryPath = System.getProperty(""java.library.path"");
    for (String dir : libraryPath.split(lineSeparator)) {
        File f = new File(dir + ""/"" + ""pkcs11wrapper.dll""); 
        if (f.exists()) {
            System.out.println(""found in: "" + f.getAbsolutePath());
        }
    }
}

output:
found in: C:\Windows\system32\pkcs11wrapper.dll
found in: C:\Windows\system32\pkcs11wrapper.dll
found in: C:\Windows\system32\pkcs11wrapper.dll

","After moving to a new computer the problem vanished. There was possibly another version of DLL somewhere in the java library / system path.
","3014","<java><nosuchmethoderror><pkcs#11><iaik-jce>","1","0","3","2014-08-29 06:19:36","25562673","0","","1732176","","2013-12-02 12:53:55","2013-11-26 19:36:56",""
"21891330","PKCS11 Import Encrypted PKCS1 RSA Private Key","I have a simple straight question: Can an encrypted PKCS1 RSAPrivateKey be imported into a PKCS11 compatible security module without exposing the private key in the client's memory?
I know that PKCS11 explicitly mentions PKCS8's PrivateKeyInfo as the required private key format in order to import it in through the C_UnwrapKey function.
Any help please! 
","Whether private key is exposed in the host memory during the unwrapping fully depends on the implementation of your PKCS#11 module.
RSA keys are usually wrapped with symmetric keys (i.e. AES) and sadly many PKCS#11 modules shipped with common smartcards implement symmetric encryption algorithms in software. Unwrapping in such cases consists of two steps:

software based decryption of key material which is stored in the host memory
import of decrypted key material into the device

However there are also PKCS#11 implementations (and devices) that implement symmetric encryption algorithms in hardware and these are capable of performing unwrapping of RSA keys without exposing private key into the host memory.
You can use C_GetMechanismInfo() function to find out whether your PKCS#11 module performs specific algorithm in hardware or not. Just examine the ""flags"" member of returned CK_MECHANISM_INFO structure for the presence of CKF_HW flag.
Edit: PKCS#1 to PKCS#8 conversion
As far as I know PKCS#11 does not specify any standard method for PKCS#1 key unwrapping or conversion. Also the last time I have worked with Luna SA HSM there was a statement in the documentation that it expects imported key material to be in PKCS#8 format.
You can try to convert PKCS#1 key to PKCS#8 in software, but I am afraid it won't be possible without decryption of private key into the host memory. It is rather easy to convert unencrypted PKCS#1 key to the PKCS#8 one - you just insert PKCS#1 RSAPrivateKey sequence into the PKCS#8 PrivateKeyInfo sequence, specify version, privateKeyAlgorithm and you are done. But to convert encrypted PKCS#1 key (whole RSAPrivateKey sequence is encrypted) you first need to decrypt it, convert it to PKCS#8 PrivateKeyInfo sequence, then encrypt PKCS#8 PrivateKeyInfo sequence, insert encrypted PrivateKeyInfo into EncryptedPrivateKeyInfo sequence and specify encryptionAlgorithm.
","2987","<pkcs#11><hsm>","0","1","2","2015-06-25 13:07:47","21892998","0","","","","","2014-02-19 20:10:55",""
"21891330","PKCS11 Import Encrypted PKCS1 RSA Private Key","I have a simple straight question: Can an encrypted PKCS1 RSAPrivateKey be imported into a PKCS11 compatible security module without exposing the private key in the client's memory?
I know that PKCS11 explicitly mentions PKCS8's PrivateKeyInfo as the required private key format in order to import it in through the C_UnwrapKey function.
Any help please! 
","Yes, you can! Use the pkcs11-tools --keypairgen option to do so. 

e.g.
  pkcs11-tool --module /usr/local/lib/opensc-pkcs11.so -l --pin 648219 --keypairgen --key-type rsa:1024 --id 10

See 
http://linux.die.net/man/1/pkcs11-tool
https://github.com/OpenSC/OpenSC/wiki/SmartCardHSM
for more details
","2987","<pkcs#11><hsm>","0","0","2","2015-06-25 13:07:47","21892998","0","","","","","2014-02-19 20:10:55",""
"17207967","java.io.IOException: %1 is not a valid Win32 application","I'm trying to digitally sign XML documents. For that I have 2 options. There's a library for programmers created by Estonian Certifying Centre and there is a script, that runs a Java code, made by a bank. If using the official (Certifying Centre) library then everything works like a charm with a little bit of tweaking, but when it comes to the bank script then it goes berserk resulting in errors:
java.io.IOException: %1 is not a valid Win32 application.
esteid-pkcs11
        at iaik.pkcs.pkcs11.wrapper.PKCS11Implementation.connect(Native Method)
        at iaik.pkcs.pkcs11.wrapper.PKCS11Implementation.<init>(PKCS11Implementation.java:166)
        at iaik.pkcs.pkcs11.wrapper.PKCS11Connector.connectToPKCS11Module(PKCS11Connector.java:75)
        at iaik.pkcs.pkcs11.Module.getInstance(Module.java:202)
        at client.smartcard.SmartcardHelper.initializePKCS11Module(SmartcardHelper.java:46)
        at client.smartcard.SmartcardHelper.initialize(SmartcardHelper.java:29)
        at client.smartcard.SmartcardHelper.initialize(SmartcardHelper.java:21)
        at client.Signer.main(Signer.java:36)
10:03:31 ERROR - Signing failed: PKCS11 initialization failed
java.lang.RuntimeException: PKCS11 initialization failed
        at client.smartcard.SmartcardHelper.initializePKCS11Module(SmartcardHelper.java:52)
        at client.smartcard.SmartcardHelper.initialize(SmartcardHelper.java:29)
        at client.smartcard.SmartcardHelper.initialize(SmartcardHelper.java:21)
        at client.Signer.main(Signer.java:36)
Caused by: java.io.IOException: %1 is not a valid Win32 application.
esteid-pkcs11
        at iaik.pkcs.pkcs11.wrapper.PKCS11Implementation.connect(Native Method)
        at iaik.pkcs.pkcs11.wrapper.PKCS11Implementation.<init>(PKCS11Implementation.java:166)
        at iaik.pkcs.pkcs11.wrapper.PKCS11Connector.connectToPKCS11Module(PKCS11Connector.java:75)
        at iaik.pkcs.pkcs11.Module.getInstance(Module.java:202)
        at client.smartcard.SmartcardHelper.initializePKCS11Module(SmartcardHelper.java:46)
        ... 3 more

Esteid-pkcs11 file is a country-specific dll-file. I have read lot of responses on google to problems that resulted with the same error, but none of the replies seem to do the trick. I have installed JDK(64-bit) and JRE(32-bit). I thought that maybe the .dll file I tried opening is 32-bit and so I changed JAVA_HOME path to point to 32-bit JRE, but then it said something like 

cannot load IA 32-bit .dll on a amd 64-bit platform.

So I figured that it isn't a problem with bits. After messing around with environment variables for few hours I figured that it might be a problem with the bank-made script. Can that be the case? If not what else is there that can cause this error?
Edit: Apparently I tried using C-library for signing and it works, but when using Java-library, it gives me an error.
java.io.IOException: %1 is not a valid Win32 application. 
opensc-pkcs11.dll
I am 100% sure that opensc-pkcs11.dll is a 64-bit dll, but I was wondering if maybe console don't have access to system32 folder. Can that be the case? 
","The error
Caused by: java.io.IOException: %1 is not a valid Win32 application.
is what I got when I tried to use a 32-bit PKCS#11 DLL, via the Sun PKCS#11 Provider, from a 64-bit Java environment.
When I switched to a 64-bit PKCS#11 DLL the error stopped occurring.
I think your 'esteid-pkcs11' file is a 32-bit DLL.
","2982","<java><pkcs#11>","0","1","1","2018-02-16 10:07:14","","3","","1243839","","2013-06-21 06:23:48","2013-06-20 07:43:54",""
"13717084","C_Login fails in PKCS11 in C","Simple issue, but i don't know how to unlock USB Token(epass2003) ,I have try to read PKCS 11 but have no idea how to implement C_Login function for execution in c ,when i am using command line tool (Linux)to do that token is working perfectly fine but with c its not working I have used user type as CKU_USER, Can anyone have knowledge about this, please help 
","you have to check the return values from the PKCS functions to see if there has been any errors. Try this way and see what happen. If the return code from C_login() is CKR_PIN_LOCKED, then it is clear that you should unlock your card.
CK_RV ret;

ret = C_OpenSession(slot, CKF_SERIAL_SESSION, NULL_PTR, NULL_PTR, &session); 

if (ret  != CKR_OK){
   error_message(ret);
   return;
}

readPIN(""Intro PIN: "", pin, 4); 
ret = (f_C_Login)(hSession,CKU_USER, (unsigned char *) pin,strlen(pin));
if (ret != CKR_OK){
   closeSessions(slot);
   error_message(ret);
   return;
} 

","2845","<c><linux><pkcs#11>","0","0","2","2014-07-28 08:52:45","","1","","","","","2012-12-05 05:47:49",""
"13717084","C_Login fails in PKCS11 in C","Simple issue, but i don't know how to unlock USB Token(epass2003) ,I have try to read PKCS 11 but have no idea how to implement C_Login function for execution in c ,when i am using command line tool (Linux)to do that token is working perfectly fine but with c its not working I have used user type as CKU_USER, Can anyone have knowledge about this, please help 
","A token can get locked due to a certain number of failed login (for TrustKey it is 10). There are provider specific utilities to unlock tokens. You could check Feitian site. There is some pointer to this kind of problem in Gooze forum (though not exactly). Your problem looks quite like a token lock problem.
","2845","<c><linux><pkcs#11>","0","0","2","2014-07-28 08:52:45","","1","","","","","2012-12-05 05:47:49",""
"19574135","IAIK PKCS#11 wrapper fails to initialize","I am using code from web :
import iaik.pkcs.pkcs11.Module;
import iaik.pkcs.pkcs11.Info;

public class PKCS11Test {

public static void main(String[] args) {
    if (args.length == 1) {
        try {
            Module pkcs11Module = Module.getInstance(args[0], ""C:/Temp/pkcs11wrapper.dll"");
            pkcs11Module.initialize(null);
            Info info = pkcs11Module.getInfo();
            System.out.println(info);
            pkcs11Module.finalize(null);
        } catch (Throwable ex) {
            ex.printStackTrace();
        }
    } else {
        printUsage();
        System.exit(1);
    }
}

protected static void printUsage() {
    System.out.println(""ModuleInfo <PKCS#11 module name>"");
    System.out.println(""e.g.: ModuleInfo pk2priv.dll"");
}

}

with parameter: pkcs11wrapper.dll and VM param -Djava.library.path=C:/Temp.
""C:/Temp/pkcs11wrapper.dll"" in code is not necessary...
What I get is :
java.io.IOException: The specified procedure could not be found.

at iaik.pkcs.pkcs11.wrapper.PKCS11Implementation.connect(Native Method)
at iaik.pkcs.pkcs11.wrapper.PKCS11Implementation.<init>(PKCS11Implementation.java:183)
at iaik.pkcs.pkcs11.wrapper.PKCS11Connector.connectToPKCS11Module(PKCS11Connector.java:92)
at iaik.pkcs.pkcs11.Module.getInstance(Module.java:223)
at PKCS11Test.main(PKCS11Test.java:11)

My JRE is 64 bit, dll is 64 bit as well (replacing it with 32 bit version gives well defined error about wrong dll version)
JRE is v1.7.0.21, iaik wrapper v1.2.18.
If I use 32 bit JRE and 32 bit dll, error is the same.
What could be wrong here ?
I got source code for iaikPkcs11Wrapper v1.3 and when running in DEBUG mode I get to line : PKCS11Connector.connectToPKCS11Module(String, String) line: 92
where return new PKCS11Implementation(pkcs11ModulePath, pkcs11WrapperPath); gets invoked. Although PKCS11Implementation class exists among sources, debugger does not want to jump in constructor code:
ClassNotFoundException(Throwable).<init>(String, Throwable) line: 286   
ClassNotFoundException(Exception).<init>(String, Throwable) line: not available 
ClassNotFoundException(ReflectiveOperationException).<init>(String, Throwable) line: not available  
ClassNotFoundException.<init>(String) line: not available   
URLClassLoader$1.run() line: not available  
URLClassLoader$1.run() line: not available  
AccessController.doPrivileged(PrivilegedExceptionAction<T>, AccessControlContext) line: not available [native method]   
Launcher$ExtClassLoader(URLClassLoader).findClass(String) line: not available   
Launcher$ExtClassLoader(ClassLoader).loadClass(String, boolean) line: not available 
Launcher$AppClassLoader(ClassLoader).loadClass(String, boolean) line: not available 
Launcher$AppClassLoader.loadClass(String, boolean) line: not available  
Launcher$AppClassLoader(ClassLoader).loadClass(String) line: not available  
PKCS11Connector.connectToPKCS11Module(String, String) line: 92  

These results where achieved when a project containing only IAIK sources and a test class was run.
","the exception
java.io.IOException: The specified procedure could not be found.
at iaik.pkcs.pkcs11.wrapper.PKCS11Implementation.connect(Native Method)

means in the DLL pk2priv.dll (or a DLL dynamicly liked by it), the wrapper method cannot find the expected native function to connect. What driver and Hardware are you using?
","2804","<java><pkcs#11><iaik-jce>","0","3","1","2015-10-30 11:38:08","20327600","0","","1913203","","2013-10-26 11:31:54","2013-10-24 18:49:55",""
"19741927","set and get DES key in java.security.KeyStore PKCS11","I'm trying to encrypt using the loaded des key from KeyStore and I get:
Exception in thread ""main"" java.security.InvalidKeyException: No installed provider supports this key: sun.security.pkcs11.P11Key$P11SecretKey
    at javax.crypto.Cipher.chooseProvider(Cipher.java:878)
    at javax.crypto.Cipher.init(Cipher.java:1213)
    at javax.crypto.Cipher.init(Cipher.java:1153)

and this is my code:
public static void main(String[] args) throws KeyStoreException, NoSuchAlgorithmException, UnrecoverableKeyException, IllegalBlockSizeException, InvalidKeyException, BadPaddingException, NoSuchPaddingException, IOException, CertificateException {
        Provider provider = new sun.security.pkcs11.SunPKCS11(DesSaveLoad.class.getClassLoader().getResourceAsStream(""pkcs11.cfg""));
        Security.removeProvider(provider.getName());
        Security.insertProviderAt(provider, 1);
        KeyStore keyStore = KeyStore.getInstance(""PKCS11"", provider);
        keyStore.load(null, null);
        SecretKey desKey = desGenerateKey();
        keyStore.setKeyEntry(""t1"", desKey, null, null);
        SecretKey t1 = (SecretKey) keyStore.getKey(""t1"", null);
        byte[] messageBytes = ""message"".getBytes();
        desEncrypt(messageBytes, 0, messageBytes.length, desKey);
        desEncrypt(messageBytes, 0, messageBytes.length, t1);  //Exception is thrown here
    }

    public static SecretKey desGenerateKey() throws NoSuchAlgorithmException {
        KeyGenerator keygenerator = null;
        keygenerator = KeyGenerator.getInstance(""DES"");
        return keygenerator.generateKey();
    }

    public static byte[] desEncrypt(byte[] plainText, int offset, int size, SecretKey key) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException, BadPaddingException, IllegalBlockSizeException {
        Cipher cipher;
        if (size % 8 != 0) {
            cipher = Cipher.getInstance(""DES/ECB/PKCS5Padding"");
        } else {
            cipher = Cipher.getInstance(""DES/ECB/NoPadding"");
        }
        cipher.init(Cipher.ENCRYPT_MODE, key);
        return cipher.doFinal(plainText, offset, size);
    }

As you can see there is no exception thrown when encrypting using generated des key.
","See if this post helps 
Either the key is incorrect (more likely) or the given key is not supported by the provider.
KeyStore.getInstance(""PKCS11"", provider);

PS: Are you using a custom provider?
","2739","<java><get><keystore><des><pkcs#11>","1","-1","2","2013-11-03 13:39:16","19753478","3","2","","","","2013-11-02 12:32:01",""
"19741927","set and get DES key in java.security.KeyStore PKCS11","I'm trying to encrypt using the loaded des key from KeyStore and I get:
Exception in thread ""main"" java.security.InvalidKeyException: No installed provider supports this key: sun.security.pkcs11.P11Key$P11SecretKey
    at javax.crypto.Cipher.chooseProvider(Cipher.java:878)
    at javax.crypto.Cipher.init(Cipher.java:1213)
    at javax.crypto.Cipher.init(Cipher.java:1153)

and this is my code:
public static void main(String[] args) throws KeyStoreException, NoSuchAlgorithmException, UnrecoverableKeyException, IllegalBlockSizeException, InvalidKeyException, BadPaddingException, NoSuchPaddingException, IOException, CertificateException {
        Provider provider = new sun.security.pkcs11.SunPKCS11(DesSaveLoad.class.getClassLoader().getResourceAsStream(""pkcs11.cfg""));
        Security.removeProvider(provider.getName());
        Security.insertProviderAt(provider, 1);
        KeyStore keyStore = KeyStore.getInstance(""PKCS11"", provider);
        keyStore.load(null, null);
        SecretKey desKey = desGenerateKey();
        keyStore.setKeyEntry(""t1"", desKey, null, null);
        SecretKey t1 = (SecretKey) keyStore.getKey(""t1"", null);
        byte[] messageBytes = ""message"".getBytes();
        desEncrypt(messageBytes, 0, messageBytes.length, desKey);
        desEncrypt(messageBytes, 0, messageBytes.length, t1);  //Exception is thrown here
    }

    public static SecretKey desGenerateKey() throws NoSuchAlgorithmException {
        KeyGenerator keygenerator = null;
        keygenerator = KeyGenerator.getInstance(""DES"");
        return keygenerator.generateKey();
    }

    public static byte[] desEncrypt(byte[] plainText, int offset, int size, SecretKey key) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException, BadPaddingException, IllegalBlockSizeException {
        Cipher cipher;
        if (size % 8 != 0) {
            cipher = Cipher.getInstance(""DES/ECB/PKCS5Padding"");
        } else {
            cipher = Cipher.getInstance(""DES/ECB/NoPadding"");
        }
        cipher.init(Cipher.ENCRYPT_MODE, key);
        return cipher.doFinal(plainText, offset, size);
    }

As you can see there is no exception thrown when encrypting using generated des key.
","If you perform encryption using a HSM then the encryption procedure is performed within the HSM, not in the software. Cipher does not implement the encryption procedure itself. The underlying CipherSpi of the PKCS#11 provider for Cipher is chosen using delayed provider selection depending on the key given during the call to init(). So although the desEncrypt() function seems to perform the same operations, in reality the functionality depends on the provider, and in your case, on the PKCS#11 wrapper, library and of course HSM.
Now PKCS#11 is an interface specification; not all mechanisms in PKCS#11 will be implemented in every token. It is likely that some encryption algorithms are too obscure or too unsafe. The latter is probably the case for DES ECB as that algorithm is extremely insecure. That does not mean that DES keys cannot be used in general - they could still play a role in e.g. MAC calculations. So please check the documentation of your HSM if DES ECB is supported (in the current setting).
You can get more information about the PKCS#11 method calls by adding -Djava.security.debug=sunpkcs11 to your call to the Java interpreter (java or javaw). If DES does not work, try the much safer and more common ""AES/CBC/PKCS5Padding"" or triple DES mechanism.
","2739","<java><get><keystore><des><pkcs#11>","1","2","2","2013-11-03 13:39:16","19753478","3","2","","","","2013-11-02 12:32:01",""
"441194","Does Microsoft Provides a PKCS #11 provider that connects to its own MS CryptoAPI?","I'm looking to run some tests using the PKCS #11 interface and was wondering if Microsoft provided a software based implementation the provides PKCS #11 functionality?
Rather then waiting for a HSM to arrive and be properly configured I'd rather get started on testing interaction with the interface now.
","Microsoft does not. Microsoft has rejected PKCS11 in favor of the smart card minidriver/base smart card CSP. However, you can get smart cards with PKCS11 support from many vendors that will allow you to test code. Some even have ""softtokens"" that emulate a smart card. Note that most smartcards are quite limited as to what they support relative to a full HSM.
","2714","<cryptoapi><pkcs#11><mscapi>","5","7","2","2019-07-30 12:05:53","1878463","0","","608639","","2015-06-09 03:10:25","2009-01-13 22:55:01",""
"441194","Does Microsoft Provides a PKCS #11 provider that connects to its own MS CryptoAPI?","I'm looking to run some tests using the PKCS #11 interface and was wondering if Microsoft provided a software based implementation the provides PKCS #11 functionality?
Rather then waiting for a HSM to arrive and be properly configured I'd rather get started on testing interaction with the interface now.
","It´s not provided by Microsoft but you can use third parties implementations, for example:

p11-capi
pvpkcs11

","2714","<cryptoapi><pkcs#11><mscapi>","5","0","2","2019-07-30 12:05:53","1878463","0","","608639","","2015-06-09 03:10:25","2009-01-13 22:55:01",""
"23319887","sun.security.pkcs11.wrapper.PKCS11Exception: CKR_WRAPPED_KEY_INVALID","I want to decrypt a CMSEnvelopedDatausing BouncyCastleand PKCS11libraries in java.
Everything was going well until I encountered this problem:
I can successfully retrieve recipient information:

CMSEnvelopedData cmsEnvelopedData = new CMSEnvelopedData(signedAndEncryptedMessage);

        Collection recip = cmsEnvelopedData.getRecipientInfos().getRecipients();
        KeyTransRecipientInformation rinfo = (KeyTransRecipientInformation)recip.iterator().next();


Now, when I want to decrypt this data using recipient private key:
if (rinfo != null) {
            LOGGER.debug(""Decrypting..."");

            byte[] receivedData = rinfo.getContent(
                    new JceKeyTransEnvelopedRecipient(
                            recipientPrivateKey
                            // PKCS11
                    ).setProvider(SUN_PKCS11_PROVIDER).setContentProvider(BOUNCY_CASTLE_PROVIDER).setContentProvider(SUN_PKCS11_PROVIDER)
                    // MSCAPI
//                   ).setProvider(SUN_MSCAPI_PROVIDER)
            );
            LOGGER.debug(""Done decrypting..."");

I've got this exception:
org.bouncycastle.cms.CMSException: exception unwrapping key: bad padding: doFinal() failed
    at org.bouncycastle.cms.jcajce.JceKeyTransRecipient.extractSecretKey(Unknown Source)
    at org.bouncycastle.cms.jcajce.JceKeyTransEnvelopedRecipient.getRecipientOperator(Unknown Source)
    at org.bouncycastle.cms.KeyTransRecipientInformation.getRecipientOperator(Unknown Source)
    at org.bouncycastle.cms.RecipientInformation.getContentStream(Unknown Source)
    at org.bouncycastle.cms.RecipientInformation.getContent(Unknown Source)
    at ir.dpi.pki.namad.cms.Main.decryptAndVerify(Main.java:283)
    at ir.dpi.pki.namad.cms.Main.main(Main.java:92)
    at ir.dpi.pki.namad.cms.MainTest.mainTest_DecryptAndVerify(MainTest.java:31)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
    at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
    at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
    at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)
    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)
    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)
    at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)
    at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)
    at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)
    at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)
    at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)
    at org.junit.runners.ParentRunner.run(ParentRunner.java:309)
    at org.junit.runner.JUnitCore.run(JUnitCore.java:160)
    at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:74)
    at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:211)
    at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:67)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
    at com.intellij.rt.execution.application.AppMain.main(AppMain.java:120)
Caused by: org.bouncycastle.operator.OperatorException: bad padding: doFinal() failed
    at org.bouncycastle.operator.jcajce.JceAsymmetricKeyUnwrapper.generateUnwrappedKey(Unknown Source)
    ... 34 more
Caused by: javax.crypto.BadPaddingException: doFinal() failed
    at sun.security.pkcs11.P11RSACipher.implDoFinal(P11RSACipher.java:362)
    at sun.security.pkcs11.P11RSACipher.engineDoFinal(P11RSACipher.java:387)
    at javax.crypto.Cipher.doFinal(Cipher.java:2087)
    ... 35 more
Caused by: sun.security.pkcs11.wrapper.PKCS11Exception: CKR_WRAPPED_KEY_INVALID
    at sun.security.pkcs11.wrapper.PKCS11.C_Decrypt(Native Method)
    at sun.security.pkcs11.P11RSACipher.implDoFinal(P11RSACipher.java:341)
    ... 37 more

I can not figure out the problem. I am using a Nexus smart card reader (smart token) which consists of my private key and a valid certificate. 
","I found the problem, I hope this post will help those who may encounter this kind of exception.
In my code I encrypted the message with a RecipientCertificate which is not the same as my Decryption Certificate in Recipient's Smart Token! I made this mistake and it takes me the whole three days to resolve it. Anyway, BadPaddingException made me think about cipher mode or padding.  
","2661","<java><encryption><bouncycastle><pkcs#11>","2","1","1","2014-05-06 06:50:47","23487781","3","1","3325704","","2014-04-27 06:01:05","2014-04-27 05:48:48",""
"29363645","Reading objects from PKCS11 token","I have a PKCS11 token with an object that were created by an application. I'm trying to write another application that reads the object. I've managed to find the objects using C_FindObjectsInit() and C_FindObjects(). I then call C_GetObjectSize() to make sure the object size is as expected. It is. Next, I call C_GetAttributeValue() to read the object. The returned template has the correct ulValueLen, but the pValue is 0. What am I doing wrong? The code to read the object is as follows:
CK_ATTRIBUTE dataTemplate[] = {
    {CKA_VALUE, NULL_PTR, 0}
};

ret = C_GetObjectSize(hSession, hObject, &ulSize);  
if(ret != CKR_OK) {
    LOGE(""C_GetObjectSize exception! Return value was %x"", (int)ret);
    return -1;
}
LOGD(""Size of object is %d"", ulSize);
ret = C_GetAttributeValue(hSession, hObject, dataTemplate, sizeof(dataTemplate)/sizeof(CK_ATTRIBUTE));
if(ret != CKR_OK)
{
    LOGE(""C_GetAttributeValue error! Return value was %d"", (int)ret);
    return -1;
}

","You need to provide a valid buffer where the value gets copied. I.e.:
CK_BYTE valueBuffer[128];
CK_ATTRIBUTE dataTemplate[] = {
    {CKA_VALUE, valueBuffer, sizeof(valueBuffer)}
};

Citing pkcs11: 

For each (type, pValue, ulValueLen) triple in the template,
  C_GetAttributeValue performs the following algorithm: If the specified
  attribute (i.e., the attribute specified by the type field) for the
  object cannot be revealed because the object is sensitive or
  unextractable, then the ulValueLen field in that triple is modified to
  hold the value -1 (i.e., when it is cast to a CK_LONG, it holds -1). 
Otherwise, if the specified attribute for the object is invalid (the
  object does not possess such an attribute), then the ulValueLen field
  in that triple is modified to hold the value -1. 
Otherwise, if the pValue field has the value NULL_PTR, then the
  ulValueLen field is modified to hold the exact length of the specified
  attribute for the object. 
Otherwise, if the length specified in ulValueLen is large enough to
  hold the value of the specified attribute for the object, then that
  attribute is copied into the buffer located at pValue, and the
  ulValueLen field is modified to hold the exact length of the
  attribute. 
Otherwise, the ulValueLen field is modified to hold the value -1.

","2647","<c><pkcs#11>","1","2","2","2015-07-21 09:30:29","","0","","3102264","","2015-06-29 21:38:37","2015-03-31 08:07:39",""
"29363645","Reading objects from PKCS11 token","I have a PKCS11 token with an object that were created by an application. I'm trying to write another application that reads the object. I've managed to find the objects using C_FindObjectsInit() and C_FindObjects(). I then call C_GetObjectSize() to make sure the object size is as expected. It is. Next, I call C_GetAttributeValue() to read the object. The returned template has the correct ulValueLen, but the pValue is 0. What am I doing wrong? The code to read the object is as follows:
CK_ATTRIBUTE dataTemplate[] = {
    {CKA_VALUE, NULL_PTR, 0}
};

ret = C_GetObjectSize(hSession, hObject, &ulSize);  
if(ret != CKR_OK) {
    LOGE(""C_GetObjectSize exception! Return value was %x"", (int)ret);
    return -1;
}
LOGD(""Size of object is %d"", ulSize);
ret = C_GetAttributeValue(hSession, hObject, dataTemplate, sizeof(dataTemplate)/sizeof(CK_ATTRIBUTE));
if(ret != CKR_OK)
{
    LOGE(""C_GetAttributeValue error! Return value was %d"", (int)ret);
    return -1;
}

","You no need call C_GetObjectSize to get value's lenght of object, can use only C_GetAttributeValue if you have handle of object before.
This code i often use to get object's value inside PKCS#11 Token. Hope this help.
CK_ATTRIBUTE dataTemplate[] = {
    {CKA_VALUE, NULL_PTR, 0}
};

//use to get len of value
ret = C_GetAttributeValue(hSession, hObject, dataTemplate, 1);

if(ret != CKR_OK) {
 return;
}

dataTemplate[0].value = new char[dataTemplate[0].ulValueLen];

ret = C_GetAttributeValue(hSession, hObject, dataTemplate, 1);

if(ret != CKR_OK) {
 delete[] dataTemplate[0].pValue;
 return;
}

//Now we have value of object, can show or do something
show_or_do_smth(dataTemplate[0].pValue)

","2647","<c><pkcs#11>","1","1","2","2015-07-21 09:30:29","","0","","3102264","","2015-06-29 21:38:37","2015-03-31 08:07:39",""
"16231046","How to read details of the X.509 certificate stored on usb token?","I am using SafeNet's iKey usb token for my application. 
My application is in C++ (win32 app) and I am accessing token's functionality through PKCS interface (pkcs11.h) from its SDK.
So far, I've been able to successfully do the following: generate public/private key pair, encrypt/decrypt, sign/verify, read attributes of objects stored inside the token.
But the main problem is: after importing X.509 certificate into the token (using iKey Token Utility), I can't read certificate details in my C++ application, as I need these to know which user is using my application, i.e user identity. However, with the ""iKey Token Utility"", which comes with the token driver, it is possible to view the certificate details. I couldn't find source code of that utility anywhere, also pkcs11.h library doesn't have any functions related to reading certificate details. For me, it would be just helpful to read public key value (not its handle) of the certificate.
I tried to read attributes of the certificate object inside the token using PKCS, but seems it gives me values encoded in some format.
I thoroughly looked through the SDK documentation, and over the Internet, but I couldn't find answer to my question:

How to read X509 certificate details from usb security token using PKCS in C++?

I would appreciate any hints to solve this problem, thanks...
","According to the PKCS#11, X509 certificates are some kind of stored objects that their data class (CKA_CLASS attribute) equals to CKO_CERTIFICATE.
If you want to retrieve a certificate object from your token, all you need is to use C_GetAttributeValue function.
Before doing this you may want find all x.509 certificates stored on your token:
CK_BBOOL _true = CK_TRUE;
CK_OBJECT_CLASS certClass = CKO_CERTIFICATE;
CK_CERTIFICATE_TYPE certType = CKC_X_509_ATTR_CERT;
CK_ATTRIBUTE certificateSearchTemplate[] = {
    {CKA_CLASS, &certClass, sizeof(dataClass)},
    {CKA_CERTIFICATE_TYPE, &certType, sizeof(certType)},
    {CKA_TOKEN, &_true, sizeof(_true)}
};

CK_OBJECT_HANDLE hObject;
CK_ULONG ulObjectCount;
CK_RV rv = C_FindObjectsInit(hSession, certificateSearchTemplate, 3);
assert(rv == CKR_OK);
while (1) {
   rv = C_FindObjects(hSession, &hObject, 1, &ulObjectCount);
   if (rv != CKR_OK || ulObjectCount == 0)
      break;
   //hObject is handle of a x.509 certificate, so you can fetch your desired attributes from it using C_GetAttributeValue
  getCertificateAttributes(hObject);
}
rv = C_FindObjectsFinal(hSession);
assert(rv == CKR_OK);

and in getCertificateAttributes function you can get desired certificate attributes:
void getCertificateAttributes(CK_OBJECT_HANDLE hCert)
{
   CK_ATTRIBUTE pTemplate[] = {
      //List your desired attributes here
   };
   ...
   CK_RV rv = C_GetAttributeValue(hSession, hCert, &pTemplate, pTemplateLen);
   if (rv == CKR_OK) {
      //here you have your desired certificate attributes
   }
}

","2645","<c++><x509certificate><pkcs#11>","2","2","2","2013-04-27 20:12:29","16251101","0","3","","","","2013-04-26 07:33:32",""
"16231046","How to read details of the X.509 certificate stored on usb token?","I am using SafeNet's iKey usb token for my application. 
My application is in C++ (win32 app) and I am accessing token's functionality through PKCS interface (pkcs11.h) from its SDK.
So far, I've been able to successfully do the following: generate public/private key pair, encrypt/decrypt, sign/verify, read attributes of objects stored inside the token.
But the main problem is: after importing X.509 certificate into the token (using iKey Token Utility), I can't read certificate details in my C++ application, as I need these to know which user is using my application, i.e user identity. However, with the ""iKey Token Utility"", which comes with the token driver, it is possible to view the certificate details. I couldn't find source code of that utility anywhere, also pkcs11.h library doesn't have any functions related to reading certificate details. For me, it would be just helpful to read public key value (not its handle) of the certificate.
I tried to read attributes of the certificate object inside the token using PKCS, but seems it gives me values encoded in some format.
I thoroughly looked through the SDK documentation, and over the Internet, but I couldn't find answer to my question:

How to read X509 certificate details from usb security token using PKCS in C++?

I would appreciate any hints to solve this problem, thanks...
","Apart from PKCS#11 library, Microsoft CryptoAPI(mscapi.dll) can also be used for retrieving certificate details. However, MSCAPI also uses PKCS internally to interact with the usb token. So, there should be some way to solve the problem using PKCS library alone and without MSCAPI.
","2645","<c++><x509certificate><pkcs#11>","2","0","2","2013-04-27 20:12:29","16251101","0","3","","","","2013-04-26 07:33:32",""
"19130717","IAIK PCKS11Provider VS IAIK PKCS11Wrapper key generation","I would like to understand the difference between generating RSA 2048 bit keys through IAIK PKCS11Wrapper, where I am using the example class named GenerateKeyPair.java, and IAIK PKCS11Provider which also uses IAIK PKCS11Wrapper and generate key pair through example class named KeyPairGeneratorDemo.java.
I am using the above libraries and classes with USB token ACS CryptoMate64.
When I use PKCS11Wrapper and load my pkcs11.dll everything works fine. Key pair is generated.
But when I am trying to do the same through IAIK PKCS11Provider class, it is throwing an exception when trying to generate key pair keyPair_ = keyPairGenerator.generateKeyPair();:
Exception in thread ""main"" iaik.pkcs.pkcs11.provider.IAIKPkcs11Exception: iaik.pkcs.pkcs11.wrapper.PKCS11Exception: CKR_ATTRIBUTE_VALUE_INVALID
        at iaik.pkcs.pkcs11.provider.keypairgenerators.PKCS11KeyPairGenerator.generateKeyPair(Unknown Source)
        at java.security.KeyPairGenerator$Delegate.generateKeyPair(KeyPairGenerator.java:650)
        at KeyPairGenerationDemo.generateKeyPairSimple(KeyPairGenerationDemo.java:114)
        at KeyPairGenerationDemo.main(KeyPairGenerationDemo.java:91)

What's the difference between these two approaches? And why is key pair generation through IAIK PKCS11Provider throwing CKR_ATTRIBUTE_VALUE_INVALID? I know what that constant mean in PKCS11 standard but I don't fully understand why it is thrown when IAIK PKCS11Wrapper was successfull with that...
I am also attaching two classes that I'm using.
GenerateKeyPair.java
// Copyright (c) 2002 Graz University of Technology. All rights reserved.
// 
// Redistribution and use in source and binary forms, with or without modification,
// are permitted provided that the following conditions are met:
// 
// 1. Redistributions of source code must retain the above copyright notice, this
//    list of conditions and the following disclaimer.
// 
// 2. Redistributions in binary form must reproduce the above copyright notice,
//    this list of conditions and the following disclaimer in the documentation
//    and/or other materials provided with the distribution.
// 
// 3. The end-user documentation included with the redistribution, if any, must
//    include the following acknowledgment:
// 
//    ""This product includes software developed by IAIK of Graz University of
//     Technology.""
// 
//    Alternately, this acknowledgment may appear in the software itself, if and
//    wherever such third-party acknowledgments normally appear.
// 
// 4. The names ""Graz University of Technology"" and ""IAIK of Graz University of
//    Technology"" must not be used to endorse or promote products derived from this
//    software without prior written permission.
// 
// 5. Products derived from this software may not be called ""IAIK PKCS Wrapper"",
//    nor may ""IAIK"" appear in their name, without prior written permission of
//    Graz University of Technology.
// 
// THIS SOFTWARE IS PROVIDED ""AS IS"" AND ANY EXPRESSED OR IMPLIED
// WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE LICENSOR BE
// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,
// OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
// OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
// ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
// OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
// OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGE.


import iaik.pkcs.pkcs11.Mechanism;
import iaik.pkcs.pkcs11.MechanismInfo;
import iaik.pkcs.pkcs11.Module;
import iaik.pkcs.pkcs11.Session;
import iaik.pkcs.pkcs11.Slot;
import iaik.pkcs.pkcs11.Token;
import iaik.pkcs.pkcs11.TokenException;
import iaik.pkcs.pkcs11.TokenInfo;
import iaik.pkcs.pkcs11.objects.KeyPair;
import iaik.pkcs.pkcs11.objects.Object;
import iaik.pkcs.pkcs11.objects.RSAPrivateKey;
import iaik.pkcs.pkcs11.objects.RSAPublicKey;
import iaik.pkcs.pkcs11.wrapper.Functions;
import iaik.pkcs.pkcs11.wrapper.PKCS11Constants;

import java.io.BufferedReader;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.math.BigInteger;
import java.security.KeyFactory;
import java.security.NoSuchAlgorithmException;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.RSAPublicKeySpec;
import java.security.spec.X509EncodedKeySpec;
import java.util.Arrays;
import java.util.HashSet;
import java.util.Random;

/**
 * This demo program generates a 2048 bit RSA key-pair on the token and writes
 * the public key to a file.
 */
public class GenerateKeyPair {

    static BufferedReader input_;

    static PrintWriter output_;

    static {
        try {
            //output_ = new PrintWriter(new FileWriter(""SignAndVerify_output.txt""), true);
            output_ = new PrintWriter(System.out, true);
            input_ = new BufferedReader(new InputStreamReader(System.in));
        } catch (Throwable thr) {
            thr.printStackTrace();
            output_ = new PrintWriter(System.out, true);
            input_ = new BufferedReader(new InputStreamReader(System.in));
        }
    }

    public static void main(String[] args)
        throws IOException, TokenException, NoSuchAlgorithmException,
        InvalidKeySpecException
    {
        if (args.length < 2) {
            printUsage();
            throw new IOException(""Missing argument!"");
        }

        Module pkcs11Module = Module.getInstance(args[0]);
        pkcs11Module.initialize(null);

        Slot[] slots = pkcs11Module.getSlotList(Module.SlotRequirement.TOKEN_PRESENT);

        if (slots.length == 0) {
            output_.println(""No slot with present token found!"");
            throw new TokenException(""No token found!"");
        }

        Slot selectedSlot;
        if (2 < args.length) selectedSlot = slots[Integer.parseInt(args[2])];
        else selectedSlot = slots[0];
        Token token = selectedSlot.getToken();
        TokenInfo tokenInfo = token.getTokenInfo();

        output_
            .println(""################################################################################"");
        output_.println(""Information of Token:"");
        output_.println(tokenInfo);
        output_
            .println(""################################################################################"");

        Session session;
        if (3 < args.length) session = Util.openAuthorizedSession(token,
            Token.SessionReadWriteBehavior.RW_SESSION, output_, input_, args[3]);
        else session = Util.openAuthorizedSession(token,
            Token.SessionReadWriteBehavior.RW_SESSION, output_, input_, null);

        output_
            .println(""################################################################################"");
        output_.print(""Generating new 2048 bit RSA key-pair... "");
        output_.flush();

        // first check out what attributes of the keys we may set
        HashSet supportedMechanisms = new HashSet(Arrays.asList(token.getMechanismList()));

        MechanismInfo signatureMechanismInfo;
        if (supportedMechanisms.contains(Mechanism.get(PKCS11Constants.CKM_RSA_PKCS))) {
            signatureMechanismInfo = token.getMechanismInfo(Mechanism
                .get(PKCS11Constants.CKM_RSA_PKCS));
        } else if (supportedMechanisms.contains(Mechanism.get(PKCS11Constants.CKM_RSA_X_509))) {
            signatureMechanismInfo = token.getMechanismInfo(Mechanism
                .get(PKCS11Constants.CKM_RSA_X_509));
        } else if (supportedMechanisms.contains(Mechanism.get(PKCS11Constants.CKM_RSA_9796))) {
            signatureMechanismInfo = token.getMechanismInfo(Mechanism
                .get(PKCS11Constants.CKM_RSA_9796));
        } else if (supportedMechanisms.contains(Mechanism
            .get(PKCS11Constants.CKM_RSA_PKCS_OAEP))) {
            signatureMechanismInfo = token.getMechanismInfo(Mechanism
                .get(PKCS11Constants.CKM_RSA_PKCS_OAEP));
        } else {
            signatureMechanismInfo = null;
        }

        Mechanism keyPairGenerationMechanism = Mechanism
            .get(PKCS11Constants.CKM_RSA_PKCS_KEY_PAIR_GEN);
        RSAPublicKey rsaPublicKeyTemplate = new RSAPublicKey();
        RSAPrivateKey rsaPrivateKeyTemplate = new RSAPrivateKey();

        // set the general attributes for the public key
        rsaPublicKeyTemplate.getModulusBits().setLongValue(new Long(2048));
        byte[] publicExponentBytes = { 0x01, 0x00, 0x01 }; // 2^16 + 1
        rsaPublicKeyTemplate.getPublicExponent().setByteArrayValue(publicExponentBytes);
        rsaPublicKeyTemplate.getToken().setBooleanValue(Boolean.TRUE);
        byte[] id = new byte[20];
        new Random().nextBytes(id);
        rsaPublicKeyTemplate.getId().setByteArrayValue(id);
        //rsaPublicKeyTemplate.getLabel().setCharArrayValue(args[2].toCharArray());

        rsaPrivateKeyTemplate.getSensitive().setBooleanValue(Boolean.TRUE);
        rsaPrivateKeyTemplate.getToken().setBooleanValue(Boolean.TRUE);
        rsaPrivateKeyTemplate.getPrivate().setBooleanValue(Boolean.TRUE);
        rsaPrivateKeyTemplate.getId().setByteArrayValue(id);
        //byte[] subject = args[1].getBytes();
        //rsaPrivateKeyTemplate.getSubject().setByteArrayValue(subject);
        //rsaPrivateKeyTemplate.getLabel().setCharArrayValue(args[2].toCharArray());

        // set the attributes in a way netscape does, this should work with most tokens
        if (signatureMechanismInfo != null) {
            rsaPublicKeyTemplate.getVerify().setBooleanValue(
                new Boolean(signatureMechanismInfo.isVerify()));
            rsaPublicKeyTemplate.getVerifyRecover().setBooleanValue(
                new Boolean(signatureMechanismInfo.isVerifyRecover()));
            rsaPublicKeyTemplate.getEncrypt().setBooleanValue(
                new Boolean(signatureMechanismInfo.isEncrypt()));
            rsaPublicKeyTemplate.getDerive().setBooleanValue(
                new Boolean(signatureMechanismInfo.isDerive()));
            rsaPublicKeyTemplate.getWrap().setBooleanValue(
                new Boolean(signatureMechanismInfo.isWrap()));

            rsaPrivateKeyTemplate.getSign().setBooleanValue(
                new Boolean(signatureMechanismInfo.isSign()));
            rsaPrivateKeyTemplate.getSignRecover().setBooleanValue(
                new Boolean(signatureMechanismInfo.isSignRecover()));
            rsaPrivateKeyTemplate.getDecrypt().setBooleanValue(
                new Boolean(signatureMechanismInfo.isDecrypt()));
            rsaPrivateKeyTemplate.getDerive().setBooleanValue(
                new Boolean(signatureMechanismInfo.isDerive()));
            rsaPrivateKeyTemplate.getUnwrap().setBooleanValue(
                new Boolean(signatureMechanismInfo.isUnwrap()));
        } else {
            // if we have no information we assume these attributes
            rsaPrivateKeyTemplate.getSign().setBooleanValue(Boolean.TRUE);
            rsaPrivateKeyTemplate.getDecrypt().setBooleanValue(Boolean.TRUE);

            rsaPublicKeyTemplate.getVerify().setBooleanValue(Boolean.TRUE);
            rsaPublicKeyTemplate.getEncrypt().setBooleanValue(Boolean.TRUE);
        }

        // netscape does not set these attribute, so we do no either
        rsaPublicKeyTemplate.getKeyType().setPresent(false);
        rsaPublicKeyTemplate.getObjectClass().setPresent(false);

        rsaPrivateKeyTemplate.getKeyType().setPresent(false);
        rsaPrivateKeyTemplate.getObjectClass().setPresent(false);

        KeyPair generatedKeyPair = session.generateKeyPair(keyPairGenerationMechanism,
            rsaPublicKeyTemplate, rsaPrivateKeyTemplate);
        RSAPublicKey generatedRSAPublicKey = (RSAPublicKey) generatedKeyPair.getPublicKey();
        RSAPrivateKey generatedRSAPrivateKey = (RSAPrivateKey) generatedKeyPair
            .getPrivateKey();
        // no we may work with the keys...

        output_.println(""Success"");
        output_.println(""The public key is"");
        output_
            .println(""_______________________________________________________________________________"");
        output_.println(generatedRSAPublicKey);
        output_
            .println(""_______________________________________________________________________________"");
        output_.println(""The private key is"");
        output_
            .println(""_______________________________________________________________________________"");
        output_.println(generatedRSAPrivateKey);
        output_
            .println(""_______________________________________________________________________________"");

        // write the public key to file
        output_
            .println(""################################################################################"");
        output_.println(""Writing the public key of the generated key-pair to file: ""
            + args[1]);
        RSAPublicKey exportableRsaPublicKey = generatedRSAPublicKey;
        BigInteger modulus = new BigInteger(1, exportableRsaPublicKey.getModulus()
            .getByteArrayValue());
        BigInteger publicExponent = new BigInteger(1, exportableRsaPublicKey
            .getPublicExponent().getByteArrayValue());
        RSAPublicKeySpec rsaPublicKeySpec = new RSAPublicKeySpec(modulus, publicExponent);
        KeyFactory keyFactory = KeyFactory.getInstance(""RSA"");
        java.security.interfaces.RSAPublicKey javaRsaPublicKey = (java.security.interfaces.RSAPublicKey) keyFactory
            .generatePublic(rsaPublicKeySpec);
        X509EncodedKeySpec x509EncodedPublicKey = (X509EncodedKeySpec) keyFactory.getKeySpec(
            javaRsaPublicKey, X509EncodedKeySpec.class);

        FileOutputStream publicKeyFileStream = new FileOutputStream(args[1]);
        publicKeyFileStream.write(x509EncodedPublicKey.getEncoded());
        publicKeyFileStream.flush();
        publicKeyFileStream.close();

        output_
            .println(""################################################################################"");

        // now we try to search for the generated keys
        output_
            .println(""################################################################################"");
        output_
            .println(""Trying to search for the public key of the generated key-pair by ID: ""
                + Functions.toHexString(id));
        // set the search template for the public key
        RSAPublicKey exportRsaPublicKeyTemplate = new RSAPublicKey();
        exportRsaPublicKeyTemplate.getId().setByteArrayValue(id);

        session.findObjectsInit(exportRsaPublicKeyTemplate);
        Object[] foundPublicKeys = session.findObjects(1);
        session.findObjectsFinal();

        if (foundPublicKeys.length != 1) {
            output_.println(""Error: Cannot find the public key under the given ID!"");
        } else {
            output_.println(""Found public key!"");
            output_
                .println(""_______________________________________________________________________________"");
            output_.println(foundPublicKeys[0]);
            output_
                .println(""_______________________________________________________________________________"");
        }

        output_
            .println(""################################################################################"");

        session.closeSession();
        pkcs11Module.finalize(null);
    }

    public static void printUsage() {
        output_
            .println(""Usage: GenerateKeyPair <PKCS#11 module> <X.509 encoded public key file> [<slot>] [<pin>]"");
        output_.println("" e.g.: GenerateKeyPair pk2priv.dll publicKey.xpk"");
        output_.println(""The given DLL must be in the search path of the system."");
    }

}

KeyPairGeneratorDemo.java
// Copyright (C) 2002 IAIK
// http://jce.iaik.at
//
// Copyright (C) 2003 - 2013 Stiftung Secure Information and
//                           Communication Technologies SIC
// http://www.sic.st
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
// ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
// FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
// OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
// HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
// LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
// OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
// SUCH DAMAGE.


// class and interface imports
import iaik.pkcs.pkcs11.Mechanism;
import iaik.pkcs.pkcs11.TokenException;
import iaik.pkcs.pkcs11.Version;
import iaik.pkcs.pkcs11.objects.Attribute;
import iaik.pkcs.pkcs11.objects.BooleanAttribute;
import iaik.pkcs.pkcs11.objects.GenericTemplate;
import iaik.pkcs.pkcs11.objects.PrivateKey;
import iaik.pkcs.pkcs11.objects.PublicKey;
import iaik.pkcs.pkcs11.objects.RSAPublicKey;
import iaik.pkcs.pkcs11.provider.IAIKPkcs11;
import iaik.pkcs.pkcs11.provider.keypairgenerators.PKCS11KeyPairGenerationSpec;
import iaik.pkcs.pkcs11.wrapper.PKCS11Constants;

import java.math.BigInteger;
import java.security.AlgorithmParameterGenerator;
import java.security.AlgorithmParameters;
import java.security.GeneralSecurityException;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.Security;
import java.security.spec.AlgorithmParameterSpec;
import java.security.spec.DSAParameterSpec;

import javax.crypto.spec.DHParameterSpec;

/**
 * This class shows a short demonstration of how to use this provider
 * implementation for a key-pair generation.
 */
public class KeyPairGenerationDemo {

    /**
     * The PKCS#11 JCE provider.
     */
    protected IAIKPkcs11 pkcs11Provider_;

    /**
     * The new key-pair.
     */
    protected KeyPair keyPair_;

    /**
     * This empty constructor registers the new provider to the Java
     * security system.
     */
    public KeyPairGenerationDemo() {
        DemoUtils.addSoftwareProvider();
        pkcs11Provider_ = new IAIKPkcs11();
        Security.addProvider(pkcs11Provider_);
    }

    public static void main(String[] args)
        throws GeneralSecurityException
    {
        KeyPairGenerationDemo demo = new KeyPairGenerationDemo();

        String algorithm = (args.length > 0) ? args[0] : ""RSA""; // specify the required asymmetric algorithm, e.g. DSA, ECDSA, ...

        demo.generateKeyPairSimple(algorithm);
        demo.generateKeyPairMultipleProvider(algorithm);
        demo.generateKeyPairDetailed(algorithm);
        demo.printKeyPair(algorithm);

        System.out.flush();
        System.err.flush();
    }

    /**
     * This method generates a key-pair on a simple and not flexible way.
     * On some tokens this method creates permanent keys although not needed
     * or the other way round (the default settings of the token are used).
     * It stores the key-pair in the member variable <code>keyPair_</code>.
     * 
     * @exception GeneralSecurityException
     *            If anything with the provider fails.
     */
    public void generateKeyPairSimple(String algorithm)
        throws GeneralSecurityException
    {
        KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance(algorithm,
            pkcs11Provider_.getName());
        keyPair_ = keyPairGenerator.generateKeyPair();

    }

    /**
     * This method generates a key-pair for a specific instance of IAIK PKCS#11
     * provider, if multiple instances are used in parallel.
     * On some tokens this method creates permanent keys although not needed
     * or the other way round (the default settings of the token are used).
     * It stores the key-pair in the member variable <code>keyPair_</code>.
     * 
     * @exception GeneralSecurityException
     *            If anything with the provider fails.
     */
    public void generateKeyPairMultipleProvider(String algorithm)
        throws GeneralSecurityException
    {
        KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance(algorithm,
            pkcs11Provider_.getName());
        // get a default template
        iaik.pkcs.pkcs11.objects.KeyPair template = IAIKPkcs11.getGlobalKeyHandler()
            .getKeyPairGeneratorTemplate(algorithm, -1);
        keyPairGenerator
            .initialize((PKCS11KeyPairGenerationSpec) new PKCS11KeyPairGenerationSpec(
                template.getPublicKey(), template.getPrivateKey()).setUseUserRole(true));
        keyPair_ = keyPairGenerator.generateKeyPair();

    }

    /**
     * This method generates a key-pair by specifying the required attributes.
     * It stores the key-pair in the member variable <code>keyPair_</code>.
     * 
     * @exception GeneralSecurityException
     *            If anything with the provider fails.
     */
    public void generateKeyPairDetailed(String algorithm)
        throws GeneralSecurityException
    {
        //get private key template with attributes sign, private and sensitive set to true and attribute token set to false
        PrivateKey privateKeyTemplate = KeyTemplateDemo
            .getSignaturePrivateKeyTemplate(algorithm);
        //get public key template with attribute verify set to true and attribute token set to false
        PublicKey publicKeyTemplate = KeyTemplateDemo
            .getSignaturePublicKeyTemplate(algorithm);
        //additionally a label can be set for the keys
        privateKeyTemplate.getLabel().setCharArrayValue(""demoPrivateKey"".toCharArray());
        publicKeyTemplate.getLabel().setCharArrayValue(""demoPublicKey"".toCharArray());

        //since PKCS#11 standard version 2.20 you can use these attributes
        //example for RSA
        if (algorithm.equalsIgnoreCase(""RSA"")) {
            try {
                Version cryptokiVersion = IAIKPkcs11.getModule().getInfo().getCryptokiVersion();
                if ((cryptokiVersion.getMajor() >= 2) && (cryptokiVersion.getMinor() >= 20)) {
                    GenericTemplate wrapTemplate = new GenericTemplate();
                    BooleanAttribute encrypt = new BooleanAttribute(Attribute.ENCRYPT);
                    encrypt.setBooleanValue(Boolean.TRUE);
                    wrapTemplate.addAttribute(encrypt);
                    BooleanAttribute decrypt = new BooleanAttribute(Attribute.DECRYPT);
                    decrypt.setBooleanValue(Boolean.TRUE);
                    wrapTemplate.addAttribute(decrypt);
                    //only keys matching the template can be wrapped
                    publicKeyTemplate.getWrapTemplate().setAttributeArrayValue(wrapTemplate);
                    publicKeyTemplate.getWrap().setBooleanValue(Boolean.TRUE);

                    Mechanism[] allowedMechanisms = new Mechanism[2];
                    Mechanism mechanism1 = new Mechanism(PKCS11Constants.CKM_RSA_PKCS);
                    allowedMechanisms[0] = mechanism1;
                    Mechanism mechanism2 = new Mechanism(PKCS11Constants.CKM_SHA1_RSA_PKCS);
                    allowedMechanisms[1] = mechanism2;
                    //the key can only be used with the specified mechanisms (example for RSA)
                    publicKeyTemplate.getAllowedMechanisms().setMechanismAttributeArrayValue(
                        allowedMechanisms);
                }
            } catch (TokenException te) {
                //ignore
            }
        }

        AlgorithmParameterSpec keyPairGenerationSpec;
        if (algorithm.equalsIgnoreCase(""DSA"")) {
            AlgorithmParameterGenerator parameterGenerator = AlgorithmParameterGenerator
                .getInstance(""DSA"", ""IAIK"");
            parameterGenerator.init(1024);
            AlgorithmParameters parameters = parameterGenerator.generateParameters();
            DSAParameterSpec parameterSpec = (DSAParameterSpec) parameters
                .getParameterSpec(DSAParameterSpec.class);

            keyPairGenerationSpec = (AlgorithmParameterSpec) new PKCS11KeyPairGenerationSpec(
                parameterSpec, publicKeyTemplate, privateKeyTemplate)
                .setUseUserRole(false);
        } else if (algorithm.equalsIgnoreCase(""DH"")) {
            // for DH a derivation key template is needed
            privateKeyTemplate.getSign().setPresent(false);
            publicKeyTemplate.getVerify().setPresent(false);
            privateKeyTemplate.getDerive().setBooleanValue(Boolean.TRUE);
            publicKeyTemplate.getDerive().setBooleanValue(Boolean.TRUE);

            BigInteger p = new BigInteger(
                ""12589626212164087648142963156054693968143531724127210882720574876034885248674417543636718639332350307931351997411747275642172788678286702755019900752157141"");
            BigInteger g = new BigInteger(
                ""798714029407796779983910943217886294189424826995758502398002980609131374451706837327391684051692474365177068254749526220588451409333567287210386365320453"");
            AlgorithmParameterSpec parameterSpec = new DHParameterSpec(p, g);
            keyPairGenerationSpec = (AlgorithmParameterSpec) new PKCS11KeyPairGenerationSpec(
                parameterSpec, publicKeyTemplate, privateKeyTemplate)
                .setUseUserRole(false);
        } else {
            // for RSA key length has to be specified
            if (algorithm.equalsIgnoreCase(""RSA"")) {
                ((RSAPublicKey) publicKeyTemplate).getModulusBits().setLongValue(new Long(1024));
            }
            keyPairGenerationSpec = (AlgorithmParameterSpec) new PKCS11KeyPairGenerationSpec(
                publicKeyTemplate, privateKeyTemplate).setUseUserRole(false);
        }

        KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance(algorithm,
            pkcs11Provider_.getName());

        keyPairGenerator.initialize(keyPairGenerationSpec);

        keyPair_ = keyPairGenerator.generateKeyPair();

        System.out.println("" finished"");
    }

    /**
     * This method prints the generated key-pair (<code>keyPair_</code>).
     */
    public void printKeyPair(String algorithm) {
        System.out
            .println(""################################################################################"");
        System.out.println(""The generated "" + algorithm + "" key-pair is:"");
        if (keyPair_ == null) {
            System.out.println(""null"");
        } else {
            System.out
                .println(""________________________________________________________________________________"");
            System.out.println(""Public key:"");
            System.out.println(keyPair_.getPublic());
            System.out
                .println(""________________________________________________________________________________"");
            System.out.println(""Private key:"");
            System.out.println(keyPair_.getPrivate());
        }
        System.out
            .println(""################################################################################"");
    }

}

","I had the same problem using a ACOS5, I solved this:
adjusting the required fields for the certificate ...: D
i'm sorrry i don't speak english


Mechanism keyPairGenerationMechanism = Mechanism.RSA_PKCS_KEY_PAIR_GEN;  
            RSAPublicKey rsaPublicKeyTemplate = new RSAPublicKey();
            RSAPrivateKey rsaPrivateKeyTemplate = new RSAPrivateKey();
            rsaPublicKeyTemplate.getObjectClass().setPresent(true);
            rsaPublicKeyTemplate.getToken().setBooleanValue(Boolean.TRUE);
            rsaPublicKeyTemplate.getPrivate().setBooleanValue(Boolean.FALSE);
            rsaPublicKeyTemplate.getModifiable().setBooleanValue(Boolean.TRUE);
            rsaPublicKeyTemplate.getKeyType().setPresent(true);
            byte[] id = new byte[5];
            new Random().nextBytes(id);
            rsaPublicKeyTemplate.getId().setByteArrayValue(id);
            rsaPublicKeyTemplate.getLocal().setBooleanValue(Boolean.TRUE);
            rsaPublicKeyTemplate.getKeyGenMechanism().setMechanism(keyPairGenerationMechanism);
            rsaPublicKeyTemplate.getEncrypt().setBooleanValue(Boolean.TRUE);
            rsaPublicKeyTemplate.getVerify().setBooleanValue(Boolean.TRUE);
            rsaPublicKeyTemplate.getVerifyRecover().setBooleanValue(Boolean.TRUE);
            rsaPublicKeyTemplate.getWrap().setBooleanValue(Boolean.TRUE);
            byte[] mod = new byte[256];
            new Random().nextBytes(mod);
            rsaPublicKeyTemplate.getModulus().setByteArrayValue(mod);
            rsaPublicKeyTemplate.getModulusBits().setLongValue(new Long(2048));
            byte[] publicExponentBytes = { 0x01,0x00,0x01 }; // 2^16 + 1
            rsaPublicKeyTemplate.getPublicExponent().setByteArrayValue(publicExponentBytes);
            
            rsaPrivateKeyTemplate.getObjectClass().setPresent(true);
            rsaPrivateKeyTemplate.getToken().setBooleanValue(Boolean.TRUE);
            rsaPrivateKeyTemplate.getPrivate().setBooleanValue(Boolean.TRUE);
            rsaPrivateKeyTemplate.getModifiable().setBooleanValue(Boolean.TRUE);
            rsaPrivateKeyTemplate.getKeyType().setPresent(true);
            rsaPrivateKeyTemplate.getId().setByteArrayValue(id);
            rsaPrivateKeyTemplate.getLocal().setBooleanValue(Boolean.TRUE);
            rsaPrivateKeyTemplate.getKeyGenMechanism().setMechanism(keyPairGenerationMechanism);
            rsaPrivateKeyTemplate.getSensitive().setBooleanValue(Boolean.TRUE);
            rsaPrivateKeyTemplate.getDecrypt().setBooleanValue(Boolean.TRUE);
            rsaPrivateKeyTemplate.getSign().setBooleanValue(Boolean.TRUE);
            rsaPrivateKeyTemplate.getSignRecover().setBooleanValue(Boolean.TRUE);
            rsaPrivateKeyTemplate.getUnwrap().setBooleanValue(Boolean.TRUE);
            rsaPrivateKeyTemplate.getExtractable().setBooleanValue(Boolean.FALSE);
            rsaPrivateKeyTemplate.getAlwaysSensitive().setBooleanValue(Boolean.TRUE);
            rsaPrivateKeyTemplate.getNeverExtractable().setBooleanValue(Boolean.TRUE);
            rsaPrivateKeyTemplate.getModulus().setByteArrayValue(mod);      
            rsaPrivateKeyTemplate.getPublicExponent().setByteArrayValue(publicExponentBytes);



the complete code for key pair geneation is


/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package generatekeypair;

import iaik.pkcs.pkcs11.Mechanism;
import iaik.pkcs.pkcs11.MechanismInfo;
import iaik.pkcs.pkcs11.Module;
import iaik.pkcs.pkcs11.Session;
import iaik.pkcs.pkcs11.Slot;
import iaik.pkcs.pkcs11.Token;
import iaik.pkcs.pkcs11.TokenException;
import iaik.pkcs.pkcs11.TokenInfo;
import iaik.pkcs.pkcs11.objects.KeyPair;
import iaik.pkcs.pkcs11.objects.Object;
import iaik.pkcs.pkcs11.objects.RSAPrivateKey;
import iaik.pkcs.pkcs11.objects.RSAPublicKey;
import iaik.pkcs.pkcs11.wrapper.Functions;
import iaik.pkcs.pkcs11.wrapper.PKCS11Constants;

import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Date;
import java.util.HashSet;
import java.util.Random;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author Administrador
 */
public class CrearCertiPar {
    
    private Module pkcs11Module;  
   public CrearCertiPar(String librarayPath) throws TokenException {  
     try {  
       pkcs11Module = Module.getInstance(librarayPath);  
       pkcs11Module.initialize(null);
       generarParcerti();
     } catch (IOException ex) {
       Logger.getLogger(CrearCertiPar.class.getName()).log(Level.SEVERE, null, ex);  
     } 
   }
   
   public void generarParcerti() throws TokenException {
       Scanner teclado = new Scanner (System.in);
       Slot[] slots = pkcs11Module.getSlotList(Module.SlotRequirement.TOKEN_PRESENT);
        if (slots.length == 0) { //No tokens connected  
       System.out.println(""Sorry, Couldn't find any token"");  
        } else {  
            //Let's get the first slot  
            Slot selectedSlot = slots[0];  
            //Let's get the connected token  
            Token token = selectedSlot.getToken();  
            //Get the token infos  
            TokenInfo tokenInfo = token.getTokenInfo();  
            //System.out.println(tokenInfo);
            Session session = token.openSession(Token.SessionType.SERIAL_SESSION, Token.SessionReadWriteBehavior.RW_SESSION, null, null);
            //System.out.println(session);
            if (tokenInfo.isLoginRequired()) {
          if (tokenInfo.isProtectedAuthenticationPath()) {
            session.login(Session.UserType.USER, null); // the token prompts the PIN by other means; e.g. PIN-pad
          } else {
            System.out.print(""Enter user-PIN or press [return] to list just public objects: "");
            System.out.flush();
            //String userPINString = teclado.next();
            String userPINString = ""12345678"";
            System.out.println();
            System.out.print(""listing all"" + ((userPINString.length() > 0) ? """" : "" public"") + "" objects on token"");
            if (userPINString.length() > 0) {
              // login user
              session.login(Session.UserType.USER, userPINString.toCharArray());
            }
          }
        }
            
            
            
            
            System.out.println(""############################# Generating new 1024 bit RSA key-pair ########################################"");
            HashSet supportedMechanisms = new HashSet(Arrays.asList(token.getMechanismList()));
            MechanismInfo signatureMechanismInfo;
            System.out.println(""supportedMechanisms\n""+supportedMechanisms);
                if (supportedMechanisms.contains(Mechanism.RSA_PKCS_KEY_PAIR_GEN)) {
                    signatureMechanismInfo = token.getMechanismInfo(Mechanism.RSA_PKCS_KEY_PAIR_GEN);
                  } else if (supportedMechanisms.contains(Mechanism.RSA_X_509)) {
                    signatureMechanismInfo = token.getMechanismInfo(Mechanism.RSA_X_509);
                  } else if (supportedMechanisms.contains(Mechanism.RSA_9796)) {
                    signatureMechanismInfo = token.getMechanismInfo(Mechanism.RSA_9796);
                  } else if (supportedMechanisms.contains(Mechanism.RSA_PKCS_OAEP)) {
                    signatureMechanismInfo = token.getMechanismInfo(Mechanism.RSA_PKCS_OAEP);
                  } else {
                    signatureMechanismInfo = null;
                  }
           // System.out.println(""signatureMechanismInfo\n""+signatureMechanismInfo);
            Mechanism keyPairGenerationMechanism = Mechanism.RSA_PKCS_KEY_PAIR_GEN;  
            RSAPublicKey rsaPublicKeyTemplate = new RSAPublicKey();
            RSAPrivateKey rsaPrivateKeyTemplate = new RSAPrivateKey();
            rsaPublicKeyTemplate.getObjectClass().setPresent(true);
            rsaPublicKeyTemplate.getToken().setBooleanValue(Boolean.TRUE);
            rsaPublicKeyTemplate.getPrivate().setBooleanValue(Boolean.FALSE);
            rsaPublicKeyTemplate.getModifiable().setBooleanValue(Boolean.TRUE);
            rsaPublicKeyTemplate.getKeyType().setPresent(true);
            byte[] id = new byte[5];
            new Random().nextBytes(id);
            rsaPublicKeyTemplate.getId().setByteArrayValue(id);
            rsaPublicKeyTemplate.getLocal().setBooleanValue(Boolean.TRUE);
            rsaPublicKeyTemplate.getKeyGenMechanism().setMechanism(keyPairGenerationMechanism);
            rsaPublicKeyTemplate.getEncrypt().setBooleanValue(Boolean.TRUE);
            rsaPublicKeyTemplate.getVerify().setBooleanValue(Boolean.TRUE);
            rsaPublicKeyTemplate.getVerifyRecover().setBooleanValue(Boolean.TRUE);
            rsaPublicKeyTemplate.getWrap().setBooleanValue(Boolean.TRUE);
            byte[] mod = new byte[256];
            new Random().nextBytes(mod);
            rsaPublicKeyTemplate.getModulus().setByteArrayValue(mod);
            rsaPublicKeyTemplate.getModulusBits().setLongValue(new Long(2048));
            byte[] publicExponentBytes = { 0x01,0x00,0x01 }; // 2^16 + 1
            rsaPublicKeyTemplate.getPublicExponent().setByteArrayValue(publicExponentBytes);
            
            rsaPrivateKeyTemplate.getObjectClass().setPresent(true);
            rsaPrivateKeyTemplate.getToken().setBooleanValue(Boolean.TRUE);
            rsaPrivateKeyTemplate.getPrivate().setBooleanValue(Boolean.TRUE);
            rsaPrivateKeyTemplate.getModifiable().setBooleanValue(Boolean.TRUE);
            rsaPrivateKeyTemplate.getKeyType().setPresent(true);
            rsaPrivateKeyTemplate.getId().setByteArrayValue(id);
            rsaPrivateKeyTemplate.getLocal().setBooleanValue(Boolean.TRUE);
            rsaPrivateKeyTemplate.getKeyGenMechanism().setMechanism(keyPairGenerationMechanism);
            rsaPrivateKeyTemplate.getSensitive().setBooleanValue(Boolean.TRUE);
            rsaPrivateKeyTemplate.getDecrypt().setBooleanValue(Boolean.TRUE);
            rsaPrivateKeyTemplate.getSign().setBooleanValue(Boolean.TRUE);
            rsaPrivateKeyTemplate.getSignRecover().setBooleanValue(Boolean.TRUE);
            rsaPrivateKeyTemplate.getUnwrap().setBooleanValue(Boolean.TRUE);
            rsaPrivateKeyTemplate.getExtractable().setBooleanValue(Boolean.FALSE);
            rsaPrivateKeyTemplate.getAlwaysSensitive().setBooleanValue(Boolean.TRUE);
            rsaPrivateKeyTemplate.getNeverExtractable().setBooleanValue(Boolean.TRUE);
            rsaPrivateKeyTemplate.getModulus().setByteArrayValue(mod);      
            rsaPrivateKeyTemplate.getPublicExponent().setByteArrayValue(publicExponentBytes);
               
                    

System.out.println(""*********************************\n""+rsaPublicKeyTemplate);
            System.out.println(""*********************************\n"");
            System.out.println(""*********************************\n""+rsaPrivateKeyTemplate);
            System.out.println(""*********************************\n"");

            
            
            KeyPair generatedKeyPair = session.generateKeyPair(keyPairGenerationMechanism,
                rsaPublicKeyTemplate, rsaPrivateKeyTemplate);
//            RSAPublicKey generatedRSAPublicKey = (RSAPublicKey) generatedKeyPair.getPublicKey();
//            RSAPrivateKey generatedRSAPrivateKey = (RSAPrivateKey) generatedKeyPair
//                .getPrivateKey();
//            System.out.println(""Success"");
//            System.out.println(""The public key is"");
//            System.out.println(""_______________________________________________________________________________"");
//            System.out.println(generatedRSAPublicKey);
//            System.out.println(""_______________________________________________________________________________"");
//            System.out.println(""The private key is"");
//            System.out.println(""_______________________________________________________________________________"");
//            System.out.println(generatedRSAPrivateKey);
//            System.out.println(""_______________________________________________________________________________"");
//            
            }
        
   }
}



bye... good luck
note: This product includes software developed by IAIK of Graz University of Technology.""
","2625","<java><token><pkcs#11><key-pair><iaik-jce>","1","0","1","2015-07-04 12:44:41","","1","1","","","","2013-10-02 05:49:50",""
"22630044","How can I load a PKCS#11 device in Firefox through a code/script?","I'm trying to automate authentication with smart cards for a web app for which I'm required to use Selenium. When I create a new driver for Firefox, the browser doesn't have the PKCS#11 dll loaded for the smart card I'm using. Is there any way I can add this through a program/script of some sort? I've found a script for the same at http://support.gemalto.com/index.php?id=how_can_register_the_pkcs11, but it's for an older version of Firefox and is not supported anymore.

P.S: I'm using C# as well as PowerShell.
","Have a look at modutil.
Mozilla used to have a JS API, but its going to be removed on next releases.
","2620","<javascript><firefox><smartcard><pkcs#11>","2","1","3","2015-08-26 09:56:33","24507144","0","1","2216769","","2014-03-25 09:26:55","2014-03-25 09:19:32",""
"22630044","How can I load a PKCS#11 device in Firefox through a code/script?","I'm trying to automate authentication with smart cards for a web app for which I'm required to use Selenium. When I create a new driver for Firefox, the browser doesn't have the PKCS#11 dll loaded for the smart card I'm using. Is there any way I can add this through a program/script of some sort? I've found a script for the same at http://support.gemalto.com/index.php?id=how_can_register_the_pkcs11, but it's for an older version of Firefox and is not supported anymore.

P.S: I'm using C# as well as PowerShell.
","U can use modutil functions in your code and add to secmod.db database.
U can use function as
NSS_Initialize(moduleSpec, """", """", NULL , 0);
where modulespec is path to your secmod.db database.
and then use SECMOD_AddNewModule function to add to database.
","2620","<javascript><firefox><smartcard><pkcs#11>","2","1","3","2015-08-26 09:56:33","24507144","0","1","2216769","","2014-03-25 09:26:55","2014-03-25 09:19:32",""
"22630044","How can I load a PKCS#11 device in Firefox through a code/script?","I'm trying to automate authentication with smart cards for a web app for which I'm required to use Selenium. When I create a new driver for Firefox, the browser doesn't have the PKCS#11 dll loaded for the smart card I'm using. Is there any way I can add this through a program/script of some sort? I've found a script for the same at http://support.gemalto.com/index.php?id=how_can_register_the_pkcs11, but it's for an older version of Firefox and is not supported anymore.

P.S: I'm using C# as well as PowerShell.
","There's also https://github.com/open-eid/firefox-pkcs11-loader but this is also among endangered species, because of the removal of the used API-s.
","2620","<javascript><firefox><smartcard><pkcs#11>","2","0","3","2015-08-26 09:56:33","24507144","0","1","2216769","","2014-03-25 09:26:55","2014-03-25 09:19:32",""
"18585268","How to initialize provider for pkcs11?","I want to use nss as a provider for pkcs11 and I'm coding in java, on oracle JRE and ubuntu 64bit. I tried 2 different wrappers, iaik and SunPKCS11 but in both I had the same problem. For my provider, I first tried to use libnss3.so and each time I got IOException in instancing module. Then I use libsoftokn3.so and I succeeded instancing a module. But now I face this exception on initializing: ""CKR_ARGUMENTS_BAD""
Here is my codes, first using iaik and the second one using SunPKCS11
iaiak:
        Module pkcs11Module = Module.getInstance(""libsoftokn.so"");
        pkcs11Module.initialize(null);      //Here Throws the Excption:""iaik.pkcs.pkcs11.wrapper.PKCS11Exception: CKR_ARGUMENTS_BAD""
        Info info = pkcs11Module.getInfo();
        System.out.println(info);
        pkcs11Module.finalize(null);

SunPKCS11:
    String configName = ""cfg"";
    Provider p = new sun.security.pkcs11.SunPKCS11(configName);  //Here Throws the Excption:""sun.security.pkcs11.wrapper.PKCS11Exception: CKR_ARGUMENTS_BAD""
    Security.addProvider(p);

and the file ""cfg"":
name = nss
library = /usr/lib/libsoftokn3.so

","Instead of specifying the library, you can specify the directory like this.
Properties props = new Properties();
 props.put(""name"", ""nss"");
 props.put(""nssLibraryDirectory"", libDir);
 props.put(""nssSecmodDirectory"", dbDir);
 props.put(""nssModule"", ""fips"");
 props.put(""nssDbMode"", ""readWrite"");

 ByteArrayOutputStream out = new ByteArrayOutputStream();
 props.store(out, null);
 ByteArrayInputStream in = new ByteArrayInputStream(out.toByteArray());

 Provider ret = new sun.security.pkcs11.SunPKCS11(in);

","2553","<java><pkcs#11><nss><iaik-jce>","2","2","1","2013-12-04 18:48:43","20383428","0","","","","","2013-09-03 06:09:10",""
"28190858","what is deference between ""RSA/ECB/OAEPWITHSHA256ANDMGF1PADDING"" and ""RSA/ECB/OAEPWITHSHA-256ANDMGF1PADDING""","As per my knowledge both are same but one is working on one PC while same code says:
javax.crypto.NoSuchPaddingException: OAEPWITHSHA-256ANDMGF1PADDING unavailable with RSA on another machine.
When I am removing dash - from the name (OAEPWITHSHA256ANDMGF1PADDING) it starts running on another machine but leads error to some other line bad padding exception.
What could be the reason?
Sample code for Hint
I am using jdk1.7.0_71 32bit:
private byte[] decryptSecretKeyData(byte[] encryptedSecretKey, byte[] iv, PrivateKey privateKey) throws Exception 
{
    try {

        Provider provider= new sun.security.pkcs11.SunPKCS11(keyStoreFile1);
        Security.addProvider(provider);

        LOG.info(""**************Inside decryptSecretKeyData***********************"");
        Cipher rsaCipher = Cipher.getInstance(""RSA/ECB/OAEPWITHSHA-256ANDMGF1PADDING"", provider);

        // decrypting the session key with rsa no padding.
        rsaCipher.init(Cipher.DECRYPT_MODE, privateKey); 

        /* The reason is RSA OAEP SHA256 is not supported in HSM. */
        byte[] decKey = rsaCipher.doFinal(encryptedSecretKey);

        OAEPEncoding encode = new OAEPEncoding(new RSAEngine(), new SHA256Digest(), iv);
        LOG.info(""******************RSAPublicKey rsaPublickey = (*****************************"");

        java.security.interfaces.RSAPublicKey rsaPublickey = (java.security.interfaces.RSAPublicKey) publicKeyFile;
        RSAKeyParameters keyParams = new RSAKeyParameters(false, rsaPublickey.getModulus(), EXPONENT);
        encode.init(false, keyParams);

        LOG.info(""******************encode.processBlock(decKey, 0, decKey.length);************************"");
        byte decryptedSecKey[] = encode.processBlock(decKey, 0, decKey.length);

        return decryptedSecKey;
    } catch (InvalidCipherTextException e) {
        LOG.info(""*******************Failed to decrypt AES secret key using RSA :**********************"");
        throw new Exception(""Failed to decrypt AES secret key using RSA :"" + e.toString());
    }

}

","RSA/ECB/OAEPWITHSHA256ANDMGF1PADDING and RSA/ECB/OAEPWITHSHA-256ANDMGF1PADDING are different alias but both refers to the same algorithms, so in this sense there is not difference at all.
The thing is that you're using a PKCS#11 (cryptographic token interface) to cipher your data. According to java PKCS#11 reference:

The Sun PKCS#11 provider, in contrast to most other providers, does not implement cryptographic algorithms itself.
  Instead, it acts as a bridge between the Java JCA and JCE APIs and the
  native PKCS#11 cryptographic API, translating the calls and
  conventions between the two. This means that Java applications calling
  standard JCA and JCE APIs can, without modification, take advantage of
  algorithms offered by the underlying PKCS#11 implementations, such as,
  for example,
Cryptographic Smartcards, Hardware cryptographic accelerators, and
  High performance software implementations. Note that Java SE only
  facilitates accessing native PKCS#11 implementations, it does not
  itself include a native PKCS#11 implementation. However, cryptographic
  devices such as Smartcards and hardware accelerators often come with
  software that includes a PKCS#11 implementation, which you need to
  install and configure according to manufacturer's instructions.

Summarized, if you're using a PKCS#11, the use of the algorithms depends on vendors native implementation (.dll on windows, .so on linux ...) and some times on specific program connector so: check if in the both PCs you're using the same drivers/program version for your PKCS#11 token and the both are correctly installed because probably there is an error in one of them which doesn't allows you to use RSA/ECB/OAEPWITHSHA-256ANDMGF1PADDING correctly.
Hope this helps,
","2533","<java><encryption><bouncycastle><pkcs#11>","1","2","2","2016-05-13 05:59:29","","1","5","1218618","","2015-02-22 22:30:09","2015-01-28 11:16:29",""
"28190858","what is deference between ""RSA/ECB/OAEPWITHSHA256ANDMGF1PADDING"" and ""RSA/ECB/OAEPWITHSHA-256ANDMGF1PADDING""","As per my knowledge both are same but one is working on one PC while same code says:
javax.crypto.NoSuchPaddingException: OAEPWITHSHA-256ANDMGF1PADDING unavailable with RSA on another machine.
When I am removing dash - from the name (OAEPWITHSHA256ANDMGF1PADDING) it starts running on another machine but leads error to some other line bad padding exception.
What could be the reason?
Sample code for Hint
I am using jdk1.7.0_71 32bit:
private byte[] decryptSecretKeyData(byte[] encryptedSecretKey, byte[] iv, PrivateKey privateKey) throws Exception 
{
    try {

        Provider provider= new sun.security.pkcs11.SunPKCS11(keyStoreFile1);
        Security.addProvider(provider);

        LOG.info(""**************Inside decryptSecretKeyData***********************"");
        Cipher rsaCipher = Cipher.getInstance(""RSA/ECB/OAEPWITHSHA-256ANDMGF1PADDING"", provider);

        // decrypting the session key with rsa no padding.
        rsaCipher.init(Cipher.DECRYPT_MODE, privateKey); 

        /* The reason is RSA OAEP SHA256 is not supported in HSM. */
        byte[] decKey = rsaCipher.doFinal(encryptedSecretKey);

        OAEPEncoding encode = new OAEPEncoding(new RSAEngine(), new SHA256Digest(), iv);
        LOG.info(""******************RSAPublicKey rsaPublickey = (*****************************"");

        java.security.interfaces.RSAPublicKey rsaPublickey = (java.security.interfaces.RSAPublicKey) publicKeyFile;
        RSAKeyParameters keyParams = new RSAKeyParameters(false, rsaPublickey.getModulus(), EXPONENT);
        encode.init(false, keyParams);

        LOG.info(""******************encode.processBlock(decKey, 0, decKey.length);************************"");
        byte decryptedSecKey[] = encode.processBlock(decKey, 0, decKey.length);

        return decryptedSecKey;
    } catch (InvalidCipherTextException e) {
        LOG.info(""*******************Failed to decrypt AES secret key using RSA :**********************"");
        throw new Exception(""Failed to decrypt AES secret key using RSA :"" + e.toString());
    }

}

","Both algorithms are provided by the different security provider. The 

RSA/ECB/OAEPWITHSHA256ANDMGF1PADDING 

is provided by the Bouncy Castle provider while 

RSA/ECB/OAEPWITHSHA-256ANDMGF1PADDING

is provided by the SUN JCE provider. In our case, we are able to successfully use Bouncy Castle provider algorithm but if I replace that with SUN JCE algorithm then it gives following error:
Exception in thread ""main"" javax.crypto.BadPaddingException: lHash mismatch
at sun.security.rsa.RSAPadding.unpadOAEP(RSAPadding.java:425)
at sun.security.rsa.RSAPadding.unpad(RSAPadding.java:274)
at com.sun.crypto.provider.RSACipher.doFinal(RSACipher.java:356)
at com.sun.crypto.provider.RSACipher.engineDoFinal(RSACipher.java:382)

","2533","<java><encryption><bouncycastle><pkcs#11>","1","1","2","2016-05-13 05:59:29","","1","5","1218618","","2015-02-22 22:30:09","2015-01-28 11:16:29",""
"12246498","What does CKA_SENSITIVE attribute in PKCS 11 means?","I'm reading PKCS 11 documentation, and I can not understand cleary, what does CKA_SENSITIVE attribute of a key means.
And more common: where can I read attributes description?
","I found out that if CKA_SENSITIVE = FALSE, then the clear value of the key (for secret keys) can be retrieved by the C_GetAttributeValue function, while you cannot retrieve the value itself if CKA_SENSITIVE = TRUE.
","2519","<pkcs#11>","5","6","2","2013-03-12 23:40:28","14933297","0","3","","","","2012-09-03 10:58:37",""
"12246498","What does CKA_SENSITIVE attribute in PKCS 11 means?","I'm reading PKCS 11 documentation, and I can not understand cleary, what does CKA_SENSITIVE attribute of a key means.
And more common: where can I read attributes description?
","Quote from PKCS#11 spec v2.20:

If the CKA_SENSITIVEattribute is CK_TRUE, or if the CKA_EXTRACTABLE
  attribute is CK_FALSE, then certain attributesof the secret key cannot be revealed in 
  plaintext outside the token. Which attributes these are is specified for each type of secret 
  key in the attribute table in the section describing that type of key

In general this means that the actual value of the secret key is not exposed. It depends on the key which attributes make up the value. For secret keys it is generally CKA_VALUE, for private RSA keys this would be CKA_PRIVATE_EXPONENT and the Chinese Remainder Theorem parameters - if those are part of the key.
","2519","<pkcs#11>","5","7","2","2013-03-12 23:40:28","14933297","0","3","","","","2012-09-03 10:58:37",""
"18438537","java SunPKCS11 multiple etokens(smartcards) same time , provider not found error","I am using SSL connection with X509 certificates provided from smartcards.
I have 2 identical tokens from athena . I initialise the keystores after I am reading the certificates, but when I am trying to to do the actual connection for the second token I am getting no provider found for my Private key.Connecting using the first token it's not affected, it works.
I tried adding different SunPCKS11 provider by specifing the slotIndexList to 1 , the number for the second token given by ""slots = p11.C_GetSlotList(true)"", but still the same error.
When I am listing the providers: I see the second provider, but java doesn't use it (I don't know why).
Provider _etpkcs11;
slots = p11.C_GetSlotList(true);

if(slot ==0) 
{
String pkcs11config = ""name=Athena\nlibrary=C:\WINDOWS\system32\asepkcs.dll"";
byte[] pkcs11configBytes =pkcs11config.getBytes();
 ByteArrayInputStream configStream = new ByteArrayInputStream(pkcs11configBytes);
etpkcs11 = new SunPKCS11(configStream);
Security.addProvider(etpkcs11);

}

the above works
the following doesn't work
if(slot ==1) 
{
String pkcs11config1 = ""name=Athenaslot1\nlibrary=C:\WINDOWS\system32\asepkcs.dll"";
byte[] pkcs11configBytes1 =pkcs11config1.getBytes();
ByteArrayInputStream configStream1 = new ByteArrayInputStream(pkcs11configBytes1);
etpkcs11 = new SunPKCS11(configStream1);
Security.addProvider(etpkcs11);
}

the following 
for(int j=0;j<Security.getProviders().length;j++)
        {
            System.out.println(Security.getProviders()[j].getName());   
        }

returns:
SunPKCS11-Athena
SunPKCS11-Athenaslot1
SUN
SunRsaSign
SunEC
SunJSSE
SunJCE
SunJGSS
SunSASL
XMLDSig
SunPCSC

and the error when using the second the second token:
 No installed provider supports this key: sun.security.pkcs11.P11Key$P11PrivateKey

Thanks
PS: I need the both tokens on same machine
","After having a look at these docs it is saying that the instantiation of the SunPKCS11 can take a slot in the configuration.
So maybe you could try 
String pkcs11config1 = ""name=Athenaslot1\nslot=1\nlibrary=C:\WINDOWS\system32\asepkcs.dll"";

","2447","<java><ssl><keystore><smartcard><pkcs#11>","1","0","2","2016-11-10 19:49:20","","0","","2452417","","2016-11-10 19:49:20","2013-08-26 07:10:28",""
"18438537","java SunPKCS11 multiple etokens(smartcards) same time , provider not found error","I am using SSL connection with X509 certificates provided from smartcards.
I have 2 identical tokens from athena . I initialise the keystores after I am reading the certificates, but when I am trying to to do the actual connection for the second token I am getting no provider found for my Private key.Connecting using the first token it's not affected, it works.
I tried adding different SunPCKS11 provider by specifing the slotIndexList to 1 , the number for the second token given by ""slots = p11.C_GetSlotList(true)"", but still the same error.
When I am listing the providers: I see the second provider, but java doesn't use it (I don't know why).
Provider _etpkcs11;
slots = p11.C_GetSlotList(true);

if(slot ==0) 
{
String pkcs11config = ""name=Athena\nlibrary=C:\WINDOWS\system32\asepkcs.dll"";
byte[] pkcs11configBytes =pkcs11config.getBytes();
 ByteArrayInputStream configStream = new ByteArrayInputStream(pkcs11configBytes);
etpkcs11 = new SunPKCS11(configStream);
Security.addProvider(etpkcs11);

}

the above works
the following doesn't work
if(slot ==1) 
{
String pkcs11config1 = ""name=Athenaslot1\nlibrary=C:\WINDOWS\system32\asepkcs.dll"";
byte[] pkcs11configBytes1 =pkcs11config1.getBytes();
ByteArrayInputStream configStream1 = new ByteArrayInputStream(pkcs11configBytes1);
etpkcs11 = new SunPKCS11(configStream1);
Security.addProvider(etpkcs11);
}

the following 
for(int j=0;j<Security.getProviders().length;j++)
        {
            System.out.println(Security.getProviders()[j].getName());   
        }

returns:
SunPKCS11-Athena
SunPKCS11-Athenaslot1
SUN
SunRsaSign
SunEC
SunJSSE
SunJCE
SunJGSS
SunSASL
XMLDSig
SunPCSC

and the error when using the second the second token:
 No installed provider supports this key: sun.security.pkcs11.P11Key$P11PrivateKey

Thanks
PS: I need the both tokens on same machine
","Even though you add 2 providers to the list of providers, the SunPKCS11 class caches the first instance. It seems like it always uses this instance all the time. That's the reason your second provider is not picked up/identified.
You might have to write some sneaky code to approach your use case. Right before you use your second provider, you have to clear the cached instance. You can refer to this post here. It is unanswered, but the code you should be looking for is
Field moduleMapField = PKCS11.class.getDeclaredField(""moduleMap"");  
moduleMapField.setAccessible(true);  
Map<?, ?> moduleMap = (Map<?, ?>) moduleMapField.get(<YOUR_FIRST_PROVIDER_INSTANCE>);  
moduleMap.clear(); // force re-execution of C_Initialize next time  

What this basically does is clearing the cached instance. And now you can proceed to add your second provider instance to interact with your second token.
","2447","<java><ssl><keystore><smartcard><pkcs#11>","1","0","2","2016-11-10 19:49:20","","0","","2452417","","2016-11-10 19:49:20","2013-08-26 07:10:28",""
"15244318","What is a ""mechanism"" in PKCS11?","What does mechanism mean in PKCS11? For example: CKM_RSA_PKCS.
What is the difference between a mechanism (CKM_RSA_PKCS) and a signature algorithm (NoneWithRSA)?
","A mechanism is a constant value that describes a cryptographic operation. For example, CKM_RSA_PKCS is defined in the PKCS #11 manual as:

The PKCS #1 v1.5 RSA mechanism, denoted CKM_RSA_PKCS, is a multi-purpose 
  mechanism based on the RSA public-key cryptosystem and the block formats initially 
  defined in PKCS #1 v1.5. It supports single-part encryption and decryption; single-part 
  signatures and verification with and without message recovery; key wrapping; and key 
  unwrapping. This mechanism corresponds only to the part of PKCS #1 v1.5 that 
  involves RSA; it does not compute a message digest or a DigestInfo encoding as 
  specified for the  md2withRSAEncryption and md5withRSAEncryption
  algorithms in PKCS #1 v1.5.

Note the ""multi-purpose"" clause - this single mechanism can be used with encryption/decryption as well as signing/verifying.
The Java mechanism NoneWithRSA is defined as:

The RSA signature algorithm which does not use a digesting algorithm (e.g. MD5/SHA1) before performing the RSA operation. For more information about the RSA Signature algorithms, please see PKCS1.

The Java mechanism is only for signatures.
From the descriptions, it appears a signature computed with NoneWithRSA in Java would be equivalent to a signature computed in PKCS #11 with CKM_RSA_PKCS.
","2442","<security><rsa><digital-signature><pkcs#11>","3","7","1","2013-03-06 20:30:45","15252861","0","2","474189","","2013-03-06 20:30:45","2013-03-06 10:08:25",""
"11564862","iText digitally signing PDF without inputting PIN twice","I am attempting to digitally sign PDFs using a smart card and iText. I read through the documentation on how to use iText to sign a document and tried to use some of their code myself. Below is the code I am using:
String pkcs11ConfigSettings =
  ""name = SmartCard\nlibrary = C:\\Program Files\\ActivIdentity\\ActivClient\\acpkcs201-ns.dll"";
AuthProvider p =
  new SunPKCS11(new ByteArrayInputStream(pkcs11ConfigSettings.getBytes()));
Security.addProvider(p);
KeyStore.PasswordProtection pp =
  new KeyStore.PasswordProtection(""012345"".toCharArray());
KeyStore.Builder builder =
  KeyStore.Builder.newInstance(""PKCS11"",p ,pp);
KeyStore ks = builder.getKeyStore();
Certificate[] cc = ks.getCertificateChain(""Digital Signature Key"");
PrivateKey pk = (PrivateKey)ks.getKey(""Digital Signature Key"", null);
OutputStream fos = new FileOutputStream(""c:\\2.pdf"");
PdfReader reader = new PdfReader(new FileInputStream(new File(""C:\\1.pdf"")));
PdfStamper stamper = PdfStamper.createSignature(reader, fos, '\0');
PdfSignatureAppearance appearance = stamper.getSignatureAppearance();
appearance.setCrypto(pk, cc, null,PdfSignatureAppearance.SELF_SIGNED);
appearance.setVisibleSignature(new Rectangle(0, 0, 100, 100), 1,null);
stamper.close();

The problem with this method is when iText closes the PDFStamper it does a call to C_Sign() which invokes the driver's prompt for a PIN.
So if this were an application it would require me to enter my PIN prior to signing, in order to obtain the KeyStore and PrivateKey, as well as when the driver's PIN input prompt comes up. Is there anyway around asking for the PIN twice? I'm kind of new to this stuff, am I going about this the wrong way?
","It seems if I follow the example with authenticated attributes I can get the PIN dialog to only pop up once for each time signing a document. This is the final code that I ended up using, hopefully it will be helpfully for someone else.
for(int i=0;i<2;i++) {
    String pkcs11ConfigSettings =
                ""name = AuthProvider\nlibrary = C:\\Program Files\\ActivIdentity\\ActivClient\\acpkcs201-ns.dll"";
    AuthProvider p = (SunPKCS11)Security.getProvider(""SunPKCS11-AuthProvider"");
    if(p==null) {
        p = new SunPKCS11(new ByteArrayInputStream(pkcs11ConfigSettings.getBytes()));
        p.setCallbackHandler(new CallbackHandler() {    
            @Override
            public void handle(Callback[] callbacks) throws IOException,
                    UnsupportedCallbackException {
                for(Callback c : callbacks)
                    if(c instanceof PasswordCallback) {
                        //HACK. if we set password to null it will bring up the drivers PIN dialog.
                        ((PasswordCallback) c).setPassword(null);
                    }
            }
        });
        Security.addProvider(p);
    }
    KeyStore ks = KeyStore.getInstance(""PKCS11"",p); 
    ks.load(null, null);
    Certificate[] cc = ks.getCertificateChain(""Digital Signature Key"");
    PrivateKey pk = (PrivateKey)ks.getKey(""Digital Signature Key"", null);
    OutputStream fos = new FileOutputStream(""c:\\doc"" + i + "".pdf""); ;
    PdfReader reader = new PdfReader(new FileInputStream(new File(""C:\\1.pdf"")));
    PdfStamper stamper = PdfStamper.createSignature(reader, fos, '\0');
    PdfSignatureAppearance sap = stamper.getSignatureAppearance();
    sap.setVisibleSignature(new Rectangle(100, 100, 200, 200), 1, null);
    Calendar cal = Calendar.getInstance();
    PdfSignature dic = new PdfSignature(PdfName.ADOBE_PPKLITE, PdfName.ADBE_PKCS7_DETACHED);
    dic.setDate(new PdfDate(cal));
    dic.setName(PdfPKCS7.getSubjectFields((X509Certificate)cc[0]).getField(""CN""));
    sap.setCryptoDictionary(dic);
    sap.setLayer2Text(""Digitally signed by ""+ dic.get(PdfName.NAME) +""\n\nDate: "" + cal.getTime().toString());
    HashMap<PdfName,Object> exc = new HashMap<PdfName,Object>();
    exc.put(PdfName.CONTENTS, new Integer(0x2502));
    sap.preClose(exc);
    PdfPKCS7 pk7 = new PdfPKCS7(pk, cc, null, ""SHA1"", ""SunPKCS11-AuthProvider"", false);
    MessageDigest messageDigest = MessageDigest.getInstance(""SHA1"");
    byte buf[] = new byte[8192];
    int n;
    InputStream inp = sap.getRangeStream();
    while ((n = inp.read(buf)) > 0) {
        messageDigest.update(buf, 0, n);
    }
    byte hash[] = messageDigest.digest();
    byte sh[] = pk7.getAuthenticatedAttributeBytes(hash, cal, null);
    pk7.update(sh, 0, sh.length);
    PdfDictionary dic2 = new PdfDictionary();
    byte sg[] = pk7.getEncodedPKCS7(hash, cal);
    byte out[] = new byte[0x2500 / 2];
    System.arraycopy(sg, 0, out, 0, sg.length);
    dic2.put(PdfName.CONTENTS, new PdfString(out).setHexWriting(true));
    sap.close(dic2);
}

","2441","<java><itext><pkcs#11>","0","2","1","2012-07-23 17:04:52","11617107","0","4","597419","","2012-07-19 16:16:37","2012-07-19 16:06:16",""
"8080629","Java - PKCS11 and MSKeyStore","I'm trying to sign a string with different certs from MS-KeyStore.
But, I know there are imported keys from a token in MS-Keystore.
So, my problem is - if I go through the Keystore and try to sign with a cert which has a reference to pkcs11 I get a pop up to enter the pkcs11 password.
How can I check if the cert is from my token?
Thanks in advance!!!
This is my code for now: 
  String alias;
    byte[] data = ""test"".getBytes();
    char[] pin = ""pass"".toCharArray();

    try {


        KeyStore ks = KeyStore.getInstance(""Windows-MY"");
        ks.load(null, pin);
        System.out.println(""Provider: ""+ks.getProvider());
        System.out.println(""KS size: "" + ks.size());

        Enumeration enumeration = ks.aliases();

        while (enumeration.hasMoreElements()) {
            alias = (String) enumeration.nextElement();

            PrivateKey privateKey = (PrivateKey) ks.getKey(alias, null);
            Certificate certificate = ks.getCertificate(alias);

            Provider provider = ks.getProvider();
            Signature signature = Signature.getInstance(""SHA1withRSA"", provider);
            try {
                signature.initSign(privateKey);
                signature.update(data);

                byte[] signedSignature = signature.sign();
                System.out.println(""\tGenerated signature for "" + alias);

                signature.initVerify(certificate);
                signature.update(data);
                if (signature.verify(signedSignature)) {
                    System.out.println(""\tSignature verifified for "" + alias);
                } else {
                    System.out.println(""\tCould not verify signature for "" + alias);
                }
            } catch (Exception ex) {
                System.out.println(""\tError for "" + alias);
            }

        }

    } catch (KeyStoreException e) {
        e.printStackTrace();  //To change body of catch statement use File | Settings | File Templates.
    } catch (CertificateException e) {
        e.printStackTrace();  //To change body of catch statement use File | Settings | File Templates.
    } catch (NoSuchAlgorithmException e) {
        e.printStackTrace();  //To change body of catch statement use File | Settings | File Templates.
    } catch (FileNotFoundException e) {
        e.printStackTrace();  //To change body of catch statement use File | Settings | File Templates.
    } catch (IOException e) {
        e.printStackTrace();  //To change body of catch statement use File | Settings | File Templates.
    } catch (UnrecoverableKeyException e) {
        e.printStackTrace();  //To change body of catch statement use File | Settings | File Templates.
    }

","I'm afraid you can't reliably tell the source of the certificate, at least not on the Java level for the MS CAPI provider. But that's part of the design - MS CAPI more or less intends to encapsulate and hide the origin of certificates/keys.
A safe way to tell that your key/certificate comes from a PKCS#11 device would be using the SUN PKCS#11 provider. This, however, has the disadvantage that you would need to specify the path to your native PKCS#11 library either statically (in the java.security file where you can statically configure providers) or dynamically request it as user input.
If using the PKCS#11 provider is too much trouble in your situation, I would suggest implementing a certificate choice dialog that filters for suitable certificates. There is no immediate gain in security by restricting MSCAPI to PKCS#11-originating certificates - there might be a good reason that your user has other certificates/keys installed (often in the form of PKCS#12 files). You should only check (and to help the user already filter certificates reagrding this criterion) that the certificate/key that was finally chosen meets your criteria: correct key usage (e.g. digital signature), sound extended key usage, acceptable or known policies present in the certificates etc. 
In the EU we are slowly evolving towards the notion of ""Qualified certificates on a secure signature creation device"". This implies that certificates that are shipped on such a device (e.g. smart card) will contain a special policy, CAs are forbidden to use these policies for any other certificates, for example software certificates. So this would effectively allow you to ensure that a certificate originates from a secure hardware device. You might check if the certificates that are involved support this feature. This ETSI document lists the corresponding OIDs that you would have to look for.
","2434","<java><security><keystore><pkcs#11>","2","0","2","2011-11-30 01:25:47","","1","1","902115","","2011-11-11 07:13:40","2011-11-10 13:59:15",""
"8080629","Java - PKCS11 and MSKeyStore","I'm trying to sign a string with different certs from MS-KeyStore.
But, I know there are imported keys from a token in MS-Keystore.
So, my problem is - if I go through the Keystore and try to sign with a cert which has a reference to pkcs11 I get a pop up to enter the pkcs11 password.
How can I check if the cert is from my token?
Thanks in advance!!!
This is my code for now: 
  String alias;
    byte[] data = ""test"".getBytes();
    char[] pin = ""pass"".toCharArray();

    try {


        KeyStore ks = KeyStore.getInstance(""Windows-MY"");
        ks.load(null, pin);
        System.out.println(""Provider: ""+ks.getProvider());
        System.out.println(""KS size: "" + ks.size());

        Enumeration enumeration = ks.aliases();

        while (enumeration.hasMoreElements()) {
            alias = (String) enumeration.nextElement();

            PrivateKey privateKey = (PrivateKey) ks.getKey(alias, null);
            Certificate certificate = ks.getCertificate(alias);

            Provider provider = ks.getProvider();
            Signature signature = Signature.getInstance(""SHA1withRSA"", provider);
            try {
                signature.initSign(privateKey);
                signature.update(data);

                byte[] signedSignature = signature.sign();
                System.out.println(""\tGenerated signature for "" + alias);

                signature.initVerify(certificate);
                signature.update(data);
                if (signature.verify(signedSignature)) {
                    System.out.println(""\tSignature verifified for "" + alias);
                } else {
                    System.out.println(""\tCould not verify signature for "" + alias);
                }
            } catch (Exception ex) {
                System.out.println(""\tError for "" + alias);
            }

        }

    } catch (KeyStoreException e) {
        e.printStackTrace();  //To change body of catch statement use File | Settings | File Templates.
    } catch (CertificateException e) {
        e.printStackTrace();  //To change body of catch statement use File | Settings | File Templates.
    } catch (NoSuchAlgorithmException e) {
        e.printStackTrace();  //To change body of catch statement use File | Settings | File Templates.
    } catch (FileNotFoundException e) {
        e.printStackTrace();  //To change body of catch statement use File | Settings | File Templates.
    } catch (IOException e) {
        e.printStackTrace();  //To change body of catch statement use File | Settings | File Templates.
    } catch (UnrecoverableKeyException e) {
        e.printStackTrace();  //To change body of catch statement use File | Settings | File Templates.
    }

","In Java key stores, the alias of the key and certificate should be linked. Basically, a private key entry is a private key + certificate chain. So the certificate should always have come from the key store. If the certificate came from the actual token is up to the implementation of the key store of course. The only way of checking if they were actually from the token is to retrieve them using a different method (e.g. reading the bytes of the certificate directly from the token). There is no link back to the storage device for certificates, if that is what you are after.
Of course, it does make sense to check the full chain of certificates up to the root certificate. If the root certificate does not change often, you might consider storing the certificate or a hash over the root certificate in a resource delivered with your application, or distributing it in the standard Java key store.
","2434","<java><security><keystore><pkcs#11>","2","0","2","2011-11-30 01:25:47","","1","1","902115","","2011-11-11 07:13:40","2011-11-10 13:59:15",""
"28692034","Sign certificate in PKCS#11","To sign certificate in OpenSSL I use X509_sign() function by feeding it with a request (as X509_REQ*), a signing key and a digest. 
Now I have my signing key stored in HSM, so I can't extract it to sign the certificate. Unfortunately PKCS#11 does not provide an equivalent to X509_sign(). All it has is C_Sign() / C_SignUpdate() / C_SignFinal() family of functions which operate on raw data, not on certificates. 
Can someone help me with sample C/C++ code how to use PKCS#11 to sign a certificate created with OpenSSL?
","The code below signs the given X509* structure within HSM. Error handling is omitted for the sake of clarity.
void signCertInHsm(X509* x509, unsigned long pkcs11SigningAlgo, CK_FUNCTION_LIST_PTR p11, CK_SESSION_HANDLE p11session, CK_OBJECT_HANDLE pkcs11PrivKeyHandle)
{
    x509->cert_info->enc.modified = 1;

    // set signature algorithm in the certificate
    if (x509->cert_info->signature)
    {
        const int signingAlgoNid = pkcs11SignatureAlgorithmToNid(pkcs11SigningAlgo);
        X509_ALGOR_set0(x509->cert_info->signature, OBJ_nid2obj(signingAlgoNid), V_ASN1_NULL, NULL);
    }
    if (x509->sig_alg)
    {
        const int signingAlgoNid = pkcs11SignatureAlgorithmToNid(pkcs11SigningAlgo);
        X509_ALGOR_set0(x509->sig_alg, OBJ_nid2obj(signingAlgoNid), V_ASN1_NULL, NULL);
    }

    // DER-encode certificate
    unsigned char *certDerBuf = NULL;
    const size_t certDerLen = ASN1_item_i2d((ASN1_VALUE*)x509->cert_info, &certDerBuf, ASN1_ITEM_rptr(X509_CINF));

    CK_MECHANISM mechanism = { pkcs11SigningAlgo, NULL_PTR, 0 };
    p11->C_SignInit(p11session, &mechanism, pkcs11PrivKeyHandle);

    // determine signature size
    CK_ULONG signatureSize = 0;
    p11->C_Sign(p11session, certDerBuf, certDerLen, NULL, &signatureSize);

    // sign
    if (x509->signature->data)
        OPENSSL_free(x509->signature->data);
    x509->signature->data = (unsigned char*)OPENSSL_malloc(signatureSize);
    x509->signature->length = signatureSize;
    p11->C_Sign(p11session, certDerBuf, certDerLen, x509->signature->data, &signatureSize);

    x509->signature->flags&= ~(ASN1_STRING_FLAG_BITS_LEFT|0x07);
    x509->signature->flags|=ASN1_STRING_FLAG_BITS_LEFT;

    OPENSSL_free(certDerBuf);
}

int pkcs11SignatureAlgorithmToNid(unsigned long algo)
{
    switch(algo)
    {
    case CKM_SHA1_RSA_PKCS: return NID_sha1WithRSAEncryption;
    case CKM_SHA256_RSA_PKCS: return NID_sha256WithRSAEncryption;
    //... add more mappings that your app supports
    default: throw std::invalid_argument(""Not supported signature algorithm"");
    }
}

","2418","<openssl><certificate><sign><csr><pkcs#11>","6","6","1","2015-06-19 15:16:42","28759901","0","3","3102264","","2015-06-19 15:16:42","2015-02-24 09:23:09",""
"22814275","opensc-pkcs11 not getting any token","I am writing a sample program using opensc-pkcs11.so in redhat linux. This is for pure software implementation of AES encryption/decryption. I am not using for any card.
My program intilizes the cryptoki successfully but giving CKR_TOKEN_NOT_PRESENT error. 
code snippet is given.
CK_FUNCTION_LIST_PTR pFunctionList; 
CK_C_Initialize pC_Initialize; 
CK_RV rv; 

rv = C_GetFunctionList(&pFunctionList); 
if(rv == CKR_OK)
pC_Initialize = pFunctionList -> C_Initialize; 

rv = (*pC_Initialize)(NULL_PTR);

    CK_ULONG ulSlotCount;
    CK_SLOT_ID_PTR pSlotList;

    CK_C_GetSlotList pC_GetSlotList;
    pC_GetSlotList = pFunctionList -> C_GetSlotList; 
    rv = (*pC_GetSlotList)(CK_FALSE, NULL_PTR, &ulSlotCount);

    /* Get list of all slots */
    //rv = C_GetSlotList(FALSE, NULL_PTR, &ulSlotCount);

    if (rv == CKR_OK) 
    {
        cout<<""ulSlotCount=""<<ulSlotCount<<endl;
        pSlotList =
        (CK_SLOT_ID_PTR)
        malloc(ulSlotCount*sizeof(CK_SLOT_ID));
        //rv = C_GetSlotList(FALSE, pSlotList, &ulSlotCount);
        rv = (*pC_GetSlotList)(CK_FALSE, pSlotList, &ulSlotCount);
        if (rv == CKR_OK) 
        {
        /* Now use that list of all slots */
            l_lSlotId = pSlotList[0];
        cerr<<""lSlotId=""<<l_lSlotId<<endl;


        }

        CK_SLOT_INFO slotInfo;
        CK_TOKEN_INFO tokenInfo;
        CK_C_GetSlotInfo pC_GetSlotInfo;
        pC_GetSlotInfo = pFunctionList -> C_GetSlotInfo;

        /* Get slot information for first slot */
        rv = (*pC_GetSlotInfo)(pSlotList[0], &slotInfo);
        fprintf(stderr, ""pC_GetSlotInfo: rv = 0x%.8X\n"", rv);
        if(rv == CKR_OK)
                   {
        /* Get token information for first slot */
            cerr<<""pC_GetSlotInfo OK""<<endl;

            CK_C_GetTokenInfo pC_GetTokenInfo;
            pC_GetTokenInfo = pFunctionList -> C_GetTokenInfo;
            rv = (*pC_GetTokenInfo)(pSlotList[0], &tokenInfo);
        }
        fprintf(stderr, ""pC_GetTokenInfo: rv = 0x%.8X\n"", rv);
        if (rv == CKR_TOKEN_NOT_PRESENT) 
        {
            cerr<<""CKR_TOKEN_NOT_PRESENT""<<endl;
        }

        free(pSlotList);
    }

Can anybody give idea about what is happening? I believe opensc-pkcs11 can be used for just software implementation also.
Thanks in advance.
","PKCS#11 library shipped with OpenSC acts ""only as a driver"" for a bunch of generally available cryptographic smart cards so unless you have a physical card reader connected to your computer it won't find any slots. If you are looking for a pure software PKCS#11 implementation then I believe you should pick one from my answer to your previous question. If none of them suits your need then maybe you could use some general purpose cryptographic library such as OpenSSL, GnuTLS or Botan.
","2349","<pkcs#11><opensc>","0","0","1","2014-07-30 14:36:57","22820299","0","","3325704","","2014-07-30 14:36:57","2014-04-02 14:14:49",""
"15615001","PKCS#11 C_getfunctionlist in a dll","I'm trying to write a dll which will eventually connect to a virtual token. I tried to make an exportable C_getfunctionlist function which will contain pointer adressess to functions suported by PCKS#11 standard but i can't figure out why i can't access those functions in the program that uses the dll. I tried to load just the C_Initializefunction.
extern ""C"" __declspec(dllexport)
CK_RV C_GetFunctionList(CK_FUNCTION_LIST_PTR_PTR ppFunctionList) {
    CK_FUNCTION_LIST_PTR function_list;
    function_list=new CK_FUNCTION_LIST;
    function_list->C_Initialize=&C_Initialize;
    ppFunctionList=&function_list;
return CKR_OK;

 }

","If you want to use a pkcs#11 implementation's functions in your code you have to load the dll which implements the standard and then use functions provided by the dll. Here comes the code I use on Linux system. I hope it helps.

static char const * PKCS11_SO_NAME = ""/usr/lib/pkcs11/PKCS11_API.so"";

static void * pkcs11_so;
//list of all pkcs#11 functions
static CK_FUNCTION_LIST_PTR pkcs11;

CK_RV load_pkcs11() {
  CK_RV rv = CKR_OK;
  CK_RV (*C_GetFunctionList) (CK_FUNCTION_LIST_PTR_PTR) = 0;

  pkcs11_so = dlopen(PKCS11_SO_NAME, RTLD_NOW);
  if (!pkcs11_so) {
    fprintf(stderr, ""Error loading pkcs#11 so: %s\n"", dlerror());
    return CKR_GENERAL_ERROR;
  }

  rv = load_symbol((void **)&C_GetFunctionList, ""C_GetFunctionList"");
  if (CKR_OK != rv) {
    return rv;
  }

  rv = C_GetFunctionList(&pkcs11);
  if (CKR_OK != rv) {
    fprintf(stderr, ""C_GetFunctionList call failed: 0x%.8lX"", rv);
    return rv;
  }

  return CKR_OK;
} 
","2315","<pkcs#11>","1","1","1","2013-04-21 14:55:03","","0","","1350209","","2013-03-28 01:01:13","2013-03-25 12:30:20",""
"21433062","Generate AES key through IAIK PKCS#11 wrapper and show its value","I would like to use PKCS#11 compatible cryptographic USB token to generate AES key and show its value on screen.
For that purpose I want to use IAIK PKCS#11 wrapper.
I tried to generate the key by the example provided with IAIK package but with no success. The key is generated but I can't see any value of key. What should I do to see the key value in order to show it on screen?
Here is my code:
Module pkcs11Module = null;
pkcs11Module = Module.getInstance(""pkcs11.dll"");

Session session = null;
pkcs11Module.initialize(null);

Slot[] slots = pkcs11Module.getSlotList(Module.SlotRequirement.TOKEN_PRESENT);

if (slots.length == 0) {
    output_.println(""No slot with present token found!"");
    throw new TokenException(""No token found!"");
}

Slot selectedSlot;
// slot 0
selectedSlot = slots[0];

Token token = selectedSlot.getToken();

session = token.openSession(Token.SessionType.SERIAL_SESSION, Token.SessionReadWriteBehavior.RW_SESSION, null, null);

session.login(Session.UserType.USER, ""12345678"".toCharArray());

Mechanism keyGenerationMechanism = Mechanism.get(PKCS11Constants.CKM_AES_KEY_GEN);

AESSecretKey aesKey = new AESSecretKey();
aesKey.getValueLen().setLongValue(new Long(32));

AESSecretKey aesKeyNew = (AESSecretKey) session.generateKey(keyGenerationMechanism, aesKey);
output_.println(""the AES Key is: "");
output_.println(aesKeyNew.toString());

session.closeSession();
pkcs11Module.finalize(null);

The results is as follows:
the AES Key is: 
  Object Class: Secret Key
  Token: false
  Private: false
  Modifiable: true
  Label: <NULL_PTR>
  Key Type: AES
  ID: <NULL_PTR>
  Start Date: <NULL_PTR>
  End Date: <NULL_PTR>
  Derive: true
  Local: true
  Key Generation Mechanism: CKM_AES_KEY_GEN
  Allowed Mechanisms: <Attribute not present>
  Sensitive: false
  Encrypt: true
  Decrypt: true
  Sign: false
  Verify: false
  Wrap: true
  Unwrap: true
  Extractable: true
  Always Sensitive: false
  Never Extractable: true
  Check Value: <Attribute not present>
  Wrap With Trusted: <Attribute not present>
  Trusted: <Attribute not present>
  Wrap Template: <Attribute not present>
  Unwrap Template: <Attribute not present>
  Value (hex): <NULL_PTR>
  Value Length (dec): 0

There is Value (hex):  that I want to see and show on screen.
Is it about a specific configuration of cryptographic tokens? When I use different token then I see this value.
","According to what you show us the PKCS#11 attribute CKA_SENSITIVE set to false indicates that you should be able to view the value. It is however likely that the token does not allow you to extract the value. Most of these kind of tokens do not fully implement PKCS#11 and only allow certain operations to take place. If this is true then it should not be possible to set CKA_SENSITIVE to false, but that's IT for you...
I would track down the manufacturer (or, if possible, the developer) of the token and ask for the specific functionality implemented by the token.
","2287","<java><aes><wrapper><pkcs#11><iaik-jce>","1","0","1","2014-01-29 20:03:31","21441437","0","","474189","","2014-01-29 16:40:04","2014-01-29 13:51:18",""
"22883775","Identification of private key in Pkcs11Interop.PDF library","I am trying to setup up an example application with the Pkcs11Interop.PDF extension. I am unfortunately getting a System.ArgumentNullException setting the ckaId. What would work here? I tried different numbers here which all gave me a System.ArgumentOutOfRangeException.
The setup is using the VirtualCryptoki-64-1.0.6.7.exe application to simulate a Smartcard.
The troubling call is:
pkcs11RsaSignature = new Pkcs11RsaSignature(libraryPath, tokenSerial, tokenLabel, pin, ckaLabel, ckaId, hashAlgorithm);

The hash algorithm I use is:
HashAlgorithm hashAlgorithm = HashAlgorithm.SHA256;

Update after using the pkcs11-tool:
The content of the virtual card is:
    C:\Program Files\OpenSC Project\OpenSC\tools>pkcs11-tool.exe --module ""C:\windows\System32\vcki.dll"" --list-slots --list-objects --login --pin 1234
Available slots:
Slot 0 (0xd47db04d): Virtual Smart Card Reader
  token label:   Virtual SC-A0101010101
  token manuf:   Cryptware
  token model:   VirtualSmartCard
  token flags:   rng, login required, PIN initialized, token initialized, other flags=0x200
  serial num  :
Using slot 0 with a present token (0xd47db04d)
Certificate Object, type = X.509 cert
  label:      ibisit
  ID:         4a656e73204b6175666d616e6e
Public Key Object; RSA 1024 bits
  label:      ibisit
  ID:         4a656e73204b6175666d616e6e
  Usage:      encrypt, verify
Private Key Object; RSA
  label:      ibisit
  ID:         4a656e73204b6175666d616e6e
  Usage:      decrypt, sign
warning: PKCS11 function C_GetAttributeValue(ALWAYS_AUTHENTICATE) failed: rv = CKR_ATTRIBUTE_TYPE_INVALID (0x12)

Public Key Object; RSA 1024 bits
  label:      ibisit
  ID:         4a656e73204b6175666d616e6e
  Usage:      encrypt, verify
Private Key Object; RSA
  label:      ibisit
  ID:         4a656e73204b6175666d616e6e
  Usage:      decrypt, sign
warning: PKCS11 function C_GetAttributeValue(ALWAYS_AUTHENTICATE) failed: rv = CKR_ATTRIBUTE_TYPE_INVALID (0x12)

The parameters I use are:
string libraryPath = @""C:\Windows\System32\vcki.dll"";
string tokenSerial = null;
string tokenLabel = @""Virtual SC-A0101010101"";
string pin = @""1234"";
string ckaLabel = @""ibisit"";
string ckaId = ""4a656e73204b6175666d616e6e"";
HashAlgorithm hashAlgorithm = HashAlgorithm.SHA256;

I am unfortunatly getting a Net.Pkcs11Interop.PDF.ObjectNotFoundException setting the ckaId. Changing the pin gives me a different exception so I am definetely accessing the right device here.
Update after switching to SoftHSM:
jariq stated that too many objects with the same id were there problem here. Unfortunately the Virtual Key Explorer would not let me delete any object so I switched to SoftHSM (which I was using at the beginning). I am getting ""Certificate with label ""ibis-it key"" and id ""A1B2"" was not found"". I suppose the problem here is that this virtual card only holds a RSA keypair not a certificate.
The output of the pkcs11-tool is: 
C:\Program Files (x86)\OpenSC Project\OpenSC\tools>pkcs11-tool.exe --module ""C:\SoftHSM\lib\libsofthsm.dll"" --list-slots --list-objects --login --pin smart
Available slots:
Slot 0 (0x0): SoftHSM
  token label:   SoftHSM
  token manuf:   SoftHSM
  token model:   SoftHSM
  token flags:   rng, login required, PIN initialized, token initialized, other flags=0x40
  serial num  :  1
Using slot 0 with a present token (0x0)
Public Key Object; RSA 2048 bits
  label:      ibis-it key
  ID:         a1b2
  Usage:      verify
Private Key Object; RSA
  label:      ibis-it key
  ID:         a1b2
  Usage:      sign

The Problem is that SoftHSM only imports PKCS#8 (RSA) key pairs, so there will never be a certificate here. I suppose you have been using it with RSA key pairs but not with certificates.
","Parameters passed to the constructor of Net.Pkcs11Interop.PDF.Pkcs11RsaSignature class identify following things:

which PKCS#11 library should be used (libraryPath)
which token/smartcard stores the private key (tokenSerial and/or tokenLabel)
which private key should be used for signing (ckaLabel and/or ckaId)
which hash algorithm should be used during signature creation (hashAlgorithm)

If you know which PKCS#11 library should be used to access the smartcard then you can determine correct values for the rest of the parameters i.e. by running pkcs11-tool utility which is bundled with OpenSC middleware. Please find below the exact command and the output generated for my testing card (important parts are highlighted with bold text):
C:\Program Files (x86)\OpenSC Project\OpenSC\tools>pkcs11-tool.exe --module cardos11.dll --list-slots --list-objects --login --pin 11111111
Available slots:
Slot 0 (0x1): SCM Microsystems Inc. SCR33x USB Smart Card Reader 0
  token label        : Pkcs11Interop
  token manufacturer : www.atos.net/cardos
  token model        : CardOS V4.3B
  token flags        : rng, login required, PIN initialized, token initialized, other flags=0x800
  hardware version   : 102.63
  firmware version   : 200.8
  serial num         : 7BFF2737350B262C
Using slot 0 with a present token (0x1)
Private Key Object; RSA
  label:      John Doe
  ID:         ec5e50a889b888d600c6e13cb0fdf0c1
  Usage:      sign
Certificate Object, type = X.509 cert
  label:      John Doe
  ID:         ec5e50a889b888d600c6e13cb0fdf0c1
Based on this output these are the correct values of individual parameters for this card:

libraryPath=""cardos11.dll""
tokenSerial=""7BFF2737350B262C"" and/or tokenLabel=""Pkcs11Interop""
ckaLabel=""John Doe"" and/or ckaId=""ec5e50a889b888d600c6e13cb0fdf0c1""

Hope this helps.
Update for ObjectNotFoundException:
You are getting ObjectNotFoundException because there are two private keys with the exactly same label and ID stored in your token and therefore Pkcs11RsaSignature class cannot be sure which one should be used for signature creation. Just delete or rename one of them and it should be working.
Update for SoftHSM:
You can import PKCS#8 private key to SoftHSM with softhsm.exe tool:
C:\SoftHSM\bin>softhsm.exe --import doe.key --slot 0 --label ""John Doe"" --pin 11111111 --id ""ec5e50a889b888d600c6e13cb0fdf0c1""
The key pair has been imported to the token in slot 0.

You can import DER encoded X.509 certificate to SoftHSM with pkcs11-tool.exe tool:
C:\SoftHSM\bin>""c:\Program Files (x86)\OpenSC Project\OpenSC\tools\pkcs11-tool.exe"" --module libsofthsm.dll --login --pin 11111111 --write-object doe.der --type cert --label ""John Doe"" --id ""ec5e50a889b888d600c6e13cb0fdf0c1""
Using slot 0 with a present token (0x0)
Created certificate:
Certificate Object, type = X.509 cert
  label:      John Doe
  ID:         ec5e50a889b888d600c6e13cb0fdf0c1

Just make sure you will import the certificate with the same ID as the ID of private key.
","2260","<c#><pdf><itext><pkcs#11><pkcs11interop>","2","2","1","2017-07-01 19:30:14","22884872","0","1","3325704","","2017-07-01 19:30:14","2014-04-05 16:47:17",""
"3047176","pkcs#11 capable Smart Card and Reader","Does anyone have a suggestion about which smart cards and USB readers are affordable, suitable for a VPN and for which there is PKCS#11 supoprt?
","Maybe reading the FAQ on OpenSC project website helps to clarify the relation between cards, readers and PKCS#11
","2210","<smartcard><pkcs#11><smartcard-reader>","2","2","2","2012-08-28 20:46:55","","0","3","140328","","2011-08-18 15:34:08","2010-06-15 16:36:17",""
"3047176","pkcs#11 capable Smart Card and Reader","Does anyone have a suggestion about which smart cards and USB readers are affordable, suitable for a VPN and for which there is PKCS#11 supoprt?
","Smart card vendors usually provides a PKCS#11 libraries. Many cards are supported by open-source libraries such as OpenSC.
Reader requirements are library-dependent. Usually it is PCSC-compatible reader.
","2210","<smartcard><pkcs#11><smartcard-reader>","2","0","2","2012-08-28 20:46:55","","0","3","140328","","2011-08-18 15:34:08","2010-06-15 16:36:17",""
"48064019","Copying a certificate from a smart card to computer","Is it possible to copy a certificate from a smart card to the computer and
use it to login to a certain site.
On mac, those certificates appear in Keychain and they can be saved to disk, but I'm not sure how to force a site to prompt a dialog screen to choose the certificate. When the smart card is connected, the prompt somehow appears and asks to choose a certificate.
","The smartcard contains a key pair composed by a private key and a public key wrapped into a X509 certificate. 
It is possible to export the certificate and copy to your laptop but to identify, sign or decrypt it is necessary to use the private key. The private key is usually generated on the smartcard and is not extractable. This is part of the security that the card provides: All operations are performed inside the card
","2157","<certificate><smartcard><pkcs#11>","2","3","1","2018-05-18 15:51:01","","0","","","","","2018-01-02 15:58:01",""
"43673782","SoftHSM2 java not working","I am trying to do POC on SoftHSM 2 , but some how I am getting below issue .
        Exception in thread ""main"" java.security.ProviderException: Initialization failed
            at sun.security.pkcs11.SunPKCS11.<init>(SunPKCS11.java:376)
            at sun.security.pkcs11.SunPKCS11.<init>(SunPKCS11.java:103)
            at SoftHSM.main(SoftHSM.java:50)
        Caused by: sun.security.pkcs11.wrapper.PKCS11Exception: CKR_SLOT_ID_INVALID
            at sun.security.pkcs11.wrapper.PKCS11.C_GetSlotInfo(Native Method)
            at sun.security.pkcs11.SunPKCS11.<init>(SunPKCS11.java:365)
            ... 2 more

HSM Config File :
    # SoftHSM v2 configuration file
    name= SoftHSM2
    library = C:\SoftHSM2\lib\softhsm2-x64.dll
    slot=1

If I comment slot=1 , then I am getting 
        Exception in thread ""main"" java.security.ProviderException: Initialization failed
            at sun.security.pkcs11.SunPKCS11.<init>(SunPKCS11.java:376)
            at sun.security.pkcs11.SunPKCS11.<init>(SunPKCS11.java:103)
            at SoftHSM.main(SoftHSM.java:50)
        Caused by: sun.security.pkcs11.wrapper.PKCS11Exception: CKR_TOKEN_NOT_RECOGNIZED
            at sun.security.pkcs11.wrapper.PKCS11.C_OpenSession(Native Method)
            at sun.security.pkcs11.SessionManager.openSession(SessionManager.java:215)
            at sun.security.pkcs11.SessionManager.getOpSession(SessionManager.java:150)
            at sun.security.pkcs11.Token.<init>(Token.java:151)
            at sun.security.pkcs11.SunPKCS11.initToken(SunPKCS11.java:858)
            at sun.security.pkcs11.SunPKCS11.<init>(SunPKCS11.java:367)
            ... 2 more

due to some reason it is not getting intizlized. Does anybody can help me on get it running with Java .
My PC Details :
Winn 10: 64 bit
I have added VC++ distributaable as per requirement from softHSM.
I am attaching my java Source file 
    import java.security.Key;
    import java.security.KeyStore;
    import java.security.Provider;
    import java.security.Security;

    import javax.crypto.spec.SecretKeySpec;

    import sun.security.pkcs11.SunPKCS11;

    public class TestClass {


         public static void main(String[] args) throws Exception {
                // Set up the Sun PKCS 11 provider
               // String configName = ""Z:\\SOFTHSM_INSTALL\\etc\\softhsm2.conf"";

             String configName = ""softhsm2.cfg"";

                Provider p = new SunPKCS11(configName);

                if (-1 == Security.addProvider(p)) {
                    throw new RuntimeException(""could not add security provider"");
                }

                // Load the key store
                char[] pin = ""mypin"".toCharArray();
                KeyStore keyStore = KeyStore.getInstance(""PKCS11"", p);
                keyStore.load(null, pin);

                // AES key
                SecretKeySpec secretKeySpec = new SecretKeySpec(""0123456789ABCDEF"".getBytes(), ""AES"");
                Key key = new SecretKeySpec(secretKeySpec.getEncoded(), ""AES"");

                keyStore.setKeyEntry(""AA"", key, ""1234"".toCharArray(), null);
                keyStore.store(null); //this gives me the exception.

         }

    }

Please help me guys.
Seems to be I dont have any slots with token initialized. So trying to initialize the token. but getting below error. Can someone help me to identify mistake I did.
    C:\SoftHSM2\bin>softhsm2-util.exe --show-slots
    Available slots:
    Slot 0
        Slot info:
            Description:      SoftHSM slot ID 0x0
            Manufacturer ID:  SoftHSM project
            Hardware version: 2.2
            Firmware version: 2.2
            Token present:    yes
        Token info:
            Manufacturer ID:  SoftHSM project
            Model:            SoftHSM v2
            Hardware version: 2.2
            Firmware version: 2.2
            Serial number:
            Initialized:      no
            User PIN init.:   no
            Label:

    C:\SoftHSM2\bin>softhsm2-util.exe --init-token --slot 0 --label Kumar
    === SO PIN (4-255 characters) ===
    Please enter SO PIN: ****
    Please reenter SO PIN: ****
    === User PIN (4-255 characters) ===
    Please enter user PIN: ****
    Please reenter user PIN: ****
    ERROR 30: Could not initialize the token.

Solution:
I verified Windows Event Log as per Jariq, it says application corrupted.
I did re-install the app for windows  ""softhsm2.msi"".
and executed script is below here for Reference to people like me .
    Microsoft Windows [Version 10.0.14393]
    (c) 2016 Microsoft Corporation. All rights reserved.

    C:\WINDOWS\system32>cd\

    C:\>cd SoftHSM2

    C:\SoftHSM2>cd bin

    C:\SoftHSM2\bin>softhsm2-util.exe --init-token --slot 0 --label ""My token 1""
    === SO PIN (4-255 characters) ===
    Please enter SO PIN:
    ERROR: The length of the PIN is out of range.
    === SO PIN (4-255 characters) ===
    ^C
    C:\SoftHSM2\bin>softhsm2-util.exe --init-token --slot 0 --label ""My token 1""
    === SO PIN (4-255 characters) ===
    Please enter SO PIN: ****
    Please reenter SO PIN: ****
    === User PIN (4-255 characters) ===
    Please enter user PIN: ****
    Please reenter user PIN: ****
    CKR_SLOT_ID_INVALID: Slot 0 does not exist.

    C:\SoftHSM2\bin>softhsm2-util.exe --show-slots
    Available slots:
    Slot 1526831955
        Slot info:
            Description:      SoftHSM slot ID 0x5b019b53
            Manufacturer ID:  SoftHSM project
            Hardware version: 2.2
            Firmware version: 2.2
            Token present:    yes
        Token info:
            Manufacturer ID:  SoftHSM project
            Model:            SoftHSM v2
            Hardware version: 2.2
            Firmware version: 2.2
            Serial number:    cafa9efc5b019b53
            Initialized:      yes
            User PIN init.:   yes
            Label:            0 token
    Slot 1
        Slot info:
            Description:      SoftHSM slot ID 0x1
            Manufacturer ID:  SoftHSM project
            Hardware version: 2.2
            Firmware version: 2.2
            Token present:    yes
        Token info:
            Manufacturer ID:  SoftHSM project
            Model:            SoftHSM v2
            Hardware version: 2.2
            Firmware version: 2.2
            Serial number:
            Initialized:      no
            User PIN init.:   no
            Label:

    C:\SoftHSM2\bin>softhsm2-util.exe --init-token --slot 1 --label ""My token 1""
    === SO PIN (4-255 characters) ===
    Please enter SO PIN: ****
    Please reenter SO PIN: ****
    === User PIN (4-255 characters) ===
    Please enter user PIN: ****
    Please reenter user PIN: ****
    The token has been initialized.

    C:\SoftHSM2\bin>softhsm2-util.exe --show-slots
    Available slots:
    Slot 1242738572
        Slot info:
            Description:      SoftHSM slot ID 0x4a12af8c
            Manufacturer ID:  SoftHSM project
            Hardware version: 2.2
            Firmware version: 2.2
            Token present:    yes
        Token info:
            Manufacturer ID:  SoftHSM project
            Model:            SoftHSM v2
            Hardware version: 2.2
            Firmware version: 2.2
            Serial number:    00fbfb20ca12af8c
            Initialized:      yes
            User PIN init.:   yes
            Label:            My token 1
    Slot 1526831955
        Slot info:
            Description:      SoftHSM slot ID 0x5b019b53
            Manufacturer ID:  SoftHSM project
            Hardware version: 2.2
            Firmware version: 2.2
            Token present:    yes
        Token info:
            Manufacturer ID:  SoftHSM project
            Model:            SoftHSM v2
            Hardware version: 2.2
            Firmware version: 2.2
            Serial number:    cafa9efc5b019b53
            Initialized:      yes
            User PIN init.:   yes
            Label:            0 token
    Slot 2
        Slot info:
            Description:      SoftHSM slot ID 0x2
            Manufacturer ID:  SoftHSM project
            Hardware version: 2.2
            Firmware version: 2.2
            Token present:    yes
        Token info:
            Manufacturer ID:  SoftHSM project
            Model:            SoftHSM v2
            Hardware version: 2.2
            Firmware version: 2.2
            Serial number:
            Initialized:      no
            User PIN init.:   no
            Label:

    C:\SoftHSM2\bin>softhsm2-util.exe --init-token --slot 2 --label ""My token 2""
    === SO PIN (4-255 characters) ===
    Please enter SO PIN: ****
    Please reenter SO PIN: ****
    === User PIN (4-255 characters) ===
    Please enter user PIN: ****
    Please reenter user PIN: ****
    The token has been initialized.

    C:\SoftHSM2\bin>

After this I have more than one token initialized . Thanks you verymuch Jariq.
","As documented in JDK 8 PKCS#11 Reference Guide you need to use slotListIndex attribute instead of slot attribute in the Sun PKCS#11 Provider configuration file.
Following configuration file is working fine for me with the test application you have provided:
# Sun PKCS#11 provider configuration file for SoftHSMv2
name = SoftHSM2
library = d:\SoftHSM2\lib\softhsm2-x64.dll 
slotListIndex = 0

SoftHSMv2 always returns all initialized slots/tokens...

...plus one additional which is not initialized and which returns CKR_TOKEN_NOT_RECOGNIZED error for almost every PKCS#11 call...

...and by using slotListIndex = 0 you are instructing Sun PKCS#11 Provider to use only the first returned slot/token.
","2059","<java><pkcs#11><hsm><softhsm>","1","2","1","2017-05-05 05:45:12","43770013","4","3","6897779","","2017-05-05 05:45:12","2017-04-28 06:50:16",""
"20410567","Using Key object handle in PKCS#11","I am trying to interact with HSM using PKCS#11 functions given by vendor.
I use below series of function to generate secret key, encrypt and decrypt data.
Below sequence works good.

C_Initialize
C_OpenSession
C_Login
C_GenerateKey //3DES KEY
C_EncryptInit
C_Encrypt
C_DecryptInit
C_Decrypt
C_Logout
C_CloseSession

My Questions:

After using C_Logout & C_CloseSession is there a way to reuse same KEY(generated earlier) again by logging back and opening session again with same login credentials?
When I use C_CreateObject does it create session object and destroy it on using C_CloseSession?

","
Question: After using C_Logout & C_CloseSession is there a way to reuse same KEY(generated earlier) again by logging back and opening session again with same login credentials?

Yes, just set CKA_TOKEN to CK_TRUE and provide a label using CKA_LABEL to search for it using C_FindObjects. 


Question: When I use C_CreateObject does it create session object and destroy it on using C_CloseSession?

Well, yes, according to the PKCS#11 specifications (v2.20, 10.4, Table 21):

CKA_TOKEN is CK_TRUE if object is a token object; CK_FALSE if object is a session
  object. Default is CK_FALSE.


Note that your token may not allow all possible attributes or attribute combinations to be set, and may have memory and other limitations.
","2044","<c><encryption><pkcs#11><hsm>","1","3","1","2016-08-05 22:51:03","20460388","4","","589259","","2013-12-08 23:11:12","2013-12-05 20:59:27",""
"28603628","remove and insert smartcard using sunpkcs#11 and tomcat","I have a web application running on Tomcat. My application uses a web service which signs (via smartcard) and sends email. The web service itself adds the sunpkcs#11 provider automatically during the first call and before sending email, then can sign in and send emails if smartcard is not removed and inserted. If removed and inserted, in order to send email I must restart the tomcat server or it will give several errors depending on my code: 
result= api.signAndSend(to, cc, bcc, subject, content, smartCardPin); 

After removing and inserting smart card this code gives below exception message: 

Token has been removed

These are my tryings:

I tried removing the sunpkcs#11 provider just after sending email and creating a new sunpkcs#11 provider and adding it.it gives and error like: 


java.security.InvalidKeyException: No installed provider supports this
  key: sun.security.pkcs11.P11Key$P11PrivateKey or
  java.security.InvalidKeyException: No installed provider supports this
  key: null


I did not remove sunpkcs#11 provider after each api.signAndSend(...) call, 

rather :
  result= api.signAndSend(to, cc, bcc, subject, content, smartCardPin);  
  SunPKCS11 sunPKCS11=(SunPKCS11)getLastProvider();  
  sunPKCS11.logout();  
  sunPKCS11.setCallbackHandler(new MyCallbackHandler());  
  KeyStore.CallbackHandlerProtection cpprotection = new KeyStore.CallbackHandlerProtection(  
  new MyCallbackHandler());  
  KeyStore.Builder builder = KeyStore.Builder.newInstance(  
  ""PKCS11"", sunPKCS11, cpprotection);  
  KeyStore ks = builder.getKeyStore();  

//finalize PKCS#11  
Field moduleMapField = PKCS11.class.getDeclaredField(""moduleMap"");  
  moduleMapField.setAccessible(true);  
  Map<?, ?> moduleMap = (Map<?, ?>) moduleMapField.get(null);  
  moduleMap.clear(); // force re-execution of C_Initialize next time  

//load PKCS#11(i expect this code to load pkcs#11 again but i am not sure)  
Method getInstanceMethod = PKCS11.class.getMethod(""getInstance"",  
  String.class, String.class, CK_C_INITIALIZE_ARGS.class,  
  Boolean.TYPE);  
  CK_C_INITIALIZE_ARGS ck_c_initialize_args = new CK_C_INITIALIZE_ARGS();  
  PKCS11 pkcs11 = (PKCS11) getInstanceMethod.invoke(null, pkcs11Path,  
  ""C_GetFunctionList"", ck_c_initialize_args, false);  

this code gives:

java.security.ProviderException: Initialization failed
        at sun.security.pkcs11.P11Signature.initialize(P11Signature.java:319)
        at sun.security.pkcs11.P11Signature.engineInitSign(P11Signature.java:432)
        at java.security.Signature$Delegate.init(Signature.java:1127)
        at java.security.Signature$Delegate.chooseProvider(Signature.java:1087)
        at java.security.Signature$Delegate.engineInitSign(Signature.java:1151)
        at java.security.Signature.initSign(Signature.java:512)
        at org.esign.bouncycastle.operator.jcajce.JcaContentSignerBuilder.build(Unknown Source)
      .
      .
      .
      Caused by: sun.security.pkcs11.wrapper.PKCS11Exception: CKR_KEY_HANDLE_INVALID
        at sun.security.pkcs11.wrapper.PKCS11.C_SignInit(Native Method)
        at sun.security.pkcs11.wrapper.PKCS11$SynchronizedPKCS11.C_SignInit(PKCS11.java:1721)
        at sun.security.pkcs11.P11Signature.initialize(P11Signature.java:311)

java: 1.8.0.31
edit:
i remove and add SunPkcs#11 like this:
//the code below adds sunpkcss provider automatically after first call
result= api.signAndSend(to, cc, bcc, subject, content, smartCardPin);

//after each signAndSend i remove sunpkcs and add a new one
String sunpkcs11Name=getLastProvider().getName();
Security.removeProvider(sunpkcs11Name);

String cfg = MessageFormat.format(
                ""name = Starcos-SunPkcs11  library = c:/windows/system32/aetpkss1.dll slot = 52481 "");
        InputStream is=new ByteArrayInputStream(cfg.getBytes());

SunPKCS11 newSunPkcs11Provider = new SunPKCS11(is);
Security.addProvider(newSunPkcs11Provider);

after i add a new SunPkcs11, while api.signAndSend(...) it gives:

java.security.InvalidKeyException: No installed provider supports this key: >sun.security.pkcs11.P11Key$P11PrivateKey

This exception is not because of absence of SunPkcs11 because i see the SunPkcs11 that i added, in the providers list.
","It is hard to find exact solution in this kind of problem because it is hard to reproduce it so according to my reading PKCS#11 is already cover this Smartcards being inserted and removed scenario according to its documentation, 

This is fine for an application that treats PKCS#11 tokens as static
  keystores. For an application that wants to accommodate PKCS#11 tokens
  more dynamically, such as Smartcards being inserted and removed, you
  can use the new KeyStore.Builder class. Here is an example of how to
  initialize the builder for a PKCS#11 keystore with a callback handler.

You already mention that remove and add provider is not working for you but according to this post they solve it via this way. 
","2035","<java><tomcat><smartcard><pkcs#11>","5","3","1","2015-02-25 09:51:44","","7","0","1457980","","2015-02-20 07:35:56","2015-02-19 10:11:48",""
"14584903","Error signing file pkcs#7 and bouncycastle java","I'm getting the following error when trying to sign a file.
Exception in thread ""main"" org.bouncycastle.operator.OperatorCreationException: exception on setup: java.security.NoSuchAlgorithmException: no such algorithm: 1.3.14.3.2.26 for provider SunPKCS11-eToken
    at org.bouncycastle.operator.jcajce.JcaDigestCalculatorProviderBuilder$1.get(Unknown Source)
    at org.bouncycastle.cms.SignerInfoGenerator.(Unknown Source)
    at org.bouncycastle.cms.SignerInfoGenerator.(Unknown Source)
    at org.bouncycastle.cms.SignerInfoGeneratorBuilder.createGenerator(Unknown Source)
    at org.bouncycastle.cms.SignerInfoGeneratorBuilder.build(Unknown Source)
    at org.bouncycastle.cms.jcajce.JcaSignerInfoGeneratorBuilder.build(Unknown Source)
    at org.bouncycastle.cms.jcajce.JcaSignerInfoGeneratorBuilder.build(Unknown Source)
    at testapp.Testapp.setUpProvider(Testapp.java:111)
    at testapp.Testapp.main(Testapp.java:74)
Caused by: java.security.NoSuchAlgorithmException: no such algorithm: 1.3.14.3.2.26 for provider SunPKCS11-eToken
    at sun.security.jca.GetInstance.getService(GetInstance.java:83)
    at sun.security.jca.GetInstance.getInstance(GetInstance.java:202)
    at java.security.Security.getImpl(Security.java:688)
    at java.security.MessageDigest.getInstance(MessageDigest.java:233)
    at org.bouncycastle.jcajce.ProviderJcaJceHelper.createDigest(Unknown Source)
    at org.bouncycastle.operator.jcajce.OperatorHelper.createDigest(Unknown Source)
    ... 9 more
Java Result: 1
Here is the code:
    InputStream cnfStream = new ByteArrayInputStream(pkcs11config.getBytes());
    Provider p = new sun.security.pkcs11.SunPKCS11(cnfStream);
    Security.addProvider(p);
    KeyStore ks = KeyStore.getInstance(""PKCS11"", p);
    ks.load(null, PASSWORD);
    byte[] signedData = sign(data, ks, p);

public static byte[] sign(byte[] data, KeyStore ks, Provider p) throws Exception {

    String alias = ks.aliases().nextElement();

    List certList = new ArrayList();
    CMSTypedData msg = new CMSProcessableByteArray(data); //Data to sign

    X509Certificate cert = (X509Certificate) ks.getCertificate(alias);
    certList.add(cert); //Adding the X509 Certificate

    Store certs = new JcaCertStore(certList);

    CMSSignedDataGenerator gen = new CMSSignedDataGenerator();
    //Initializing the the BC's Signer
    ContentSigner sha1Signer = new JcaContentSignerBuilder(""SHA1withRSA"").setProvider(p).build((PrivateKey)ks.getKey(alias, PASSWORD));

    gen.addSignerInfoGenerator(
            new JcaSignerInfoGeneratorBuilder(
            new JcaDigestCalculatorProviderBuilder().setProvider(p).build())
            .build(sha1Signer, cert));
    //adding the certificate
    gen.addCertificates(certs);
    //Getting the signed data
    CMSSignedData sigData = gen.generate(msg, false);
    return sigData.getEncoded();
}

Any idea?
Thanks in advance
","Ok, I ended up solving this on my own.Here is the working code:
    private void findProvider() {
        String driver;
        byte[] pkcs11config;
        for (int i = indiceDrivers; i < largoDrivers; i++) {
            driver = DRIVERS[i];
            File f = new File(REPO + driver);
            if (!f.exists()) {
                continue;
            }
            pkcs11config = String
                    .format(""name = eToken\n library = %s%s"", REPO, driver)
                    .getBytes();
            try {
                InputStream cnfStream = new ByteArrayInputStream(pkcs11config);
                provider = new sun.security.pkcs11.SunPKCS11(cnfStream);
                keyStore = KeyStore.getInstance(""PKCS11"", this.provider);
                Security.addProvider(provider);
                keyStore.load(null, password);
                System.out.println(""OK: "" + driver);
                break;
            } catch (Exception e) {
                //Solo con fines de prueba
                System.out.println(""ERROR: "" + driver);
            }
        }
        if (provider == null) {
            throw new RuntimeException(""Los drivers del token no estan instalados."");
        } else if (provider != null && keyStore == null) {
            throw new RuntimeException(""El token no esta conectado."");
        }
    }

 public void sign(File input, File output) throws Exception {
        String alias = keyStore.aliases().nextElement();
        List certList = new ArrayList();
        CMSTypedData msg = new CMSProcessableFile(input);
        X509Certificate cert = (X509Certificate) keyStore.getCertificate(alias);
        certList.add(cert);
        Store certs = new JcaCertStore(certList);
        CMSSignedDataGenerator gen = new CMSSignedDataGenerator();
        ContentSigner sha1Signer = new JcaContentSignerBuilder(""SHA1withRSA"").setProvider(provider).build((PrivateKey) keyStore.getKey(alias, password));
        Security.addProvider(new BouncyCastleProvider());
        gen.addSignerInfoGenerator(
                new JcaSignerInfoGeneratorBuilder(
                new JcaDigestCalculatorProviderBuilder().setProvider(""BC"").build())
                .build(sha1Signer, cert));
        gen.addCertificates(certs);
        CMSSignedData sigData = gen.generate(msg, true);

        FileOutputStream fileOuputStream = new FileOutputStream(output);
        fileOuputStream.write(sigData.getEncoded());
        fileOuputStream.flush();
        fileOuputStream.close();
    }

","2033","<java><bouncycastle><pkcs#7><pkcs#11>","0","0","1","2015-09-10 11:21:39","","0","2","","","","2013-01-29 14:11:44",""
"28607384","How to properly reload a PKCS11 KeyStore","I would like to test my keys in the PKCS11 keystore. But it seems my keystore is not updated when an external process is adding or deleting keys in the store.
The second time I print the aliases does not include new aliases which are inserted in between.
How can I properly reload the keystore?
public class KeyStoreTest {

 public static void main(String[] args) throws KeyStoreException,
            NoSuchAlgorithmException, CertificateException, IOException, LoginException{

        // initialize keystore
        InputStream is = CheckUploadScript.class.getResourceAsStream(""pkcs11-hsm.config"");
        AuthProvider provider = new sun.security.pkcs11.SunPKCS11(is);
        KeyStore ks = KeyStore.getInstance(""PKCS11"", provider);
        ks.load(null, ""0000"".toCharArray());

        // print all aliases
        Enumeration<String> aliases = ks.aliases();
        for (String key : Collections.list(aliases))
            System.out.println(""alias: "" + key);

        // upload or delete keys with external tool here


        // print all aliases again (does not change)
        ks.load(null, ""0000"".toCharArray());
        aliases = ks.aliases();
        for (String key : Collections.list(aliases))
            System.out.println(""alias: "" + key);
    }
}

EDIT:
I followed the instructions from the PKCS11 reference:
http://docs.oracle.com/javase/7/docs/technotes/guides/security/p11guide.html
char[] pin = ...; 
KeyStore ks = KeyStore.getInstance(""PKCS11"");
ks.load(null, pin);

For my understanding, when using a PKCS11 keystore the security provider handles storing and loading of keys. Therefore I don't have to specify an InputStream when I load the keystore.
","try loading it explicit
KeyStore keyStore = KeyStore.getInstance(""PKCS11"", provider);
keyStore.load(trustStore, trustStorePassword);
trustStore.close();
","1984","<java><keystore><pkcs#11>","1","0","2","2016-02-26 23:04:37","","2","1","606496","","2015-02-26 13:55:29","2015-02-19 13:15:09",""
"28607384","How to properly reload a PKCS11 KeyStore","I would like to test my keys in the PKCS11 keystore. But it seems my keystore is not updated when an external process is adding or deleting keys in the store.
The second time I print the aliases does not include new aliases which are inserted in between.
How can I properly reload the keystore?
public class KeyStoreTest {

 public static void main(String[] args) throws KeyStoreException,
            NoSuchAlgorithmException, CertificateException, IOException, LoginException{

        // initialize keystore
        InputStream is = CheckUploadScript.class.getResourceAsStream(""pkcs11-hsm.config"");
        AuthProvider provider = new sun.security.pkcs11.SunPKCS11(is);
        KeyStore ks = KeyStore.getInstance(""PKCS11"", provider);
        ks.load(null, ""0000"".toCharArray());

        // print all aliases
        Enumeration<String> aliases = ks.aliases();
        for (String key : Collections.list(aliases))
            System.out.println(""alias: "" + key);

        // upload or delete keys with external tool here


        // print all aliases again (does not change)
        ks.load(null, ""0000"".toCharArray());
        aliases = ks.aliases();
        for (String key : Collections.list(aliases))
            System.out.println(""alias: "" + key);
    }
}

EDIT:
I followed the instructions from the PKCS11 reference:
http://docs.oracle.com/javase/7/docs/technotes/guides/security/p11guide.html
char[] pin = ...; 
KeyStore ks = KeyStore.getInstance(""PKCS11"");
ks.load(null, pin);

For my understanding, when using a PKCS11 keystore the security provider handles storing and loading of keys. Therefore I don't have to specify an InputStream when I load the keystore.
","For PKCS11 truststores, the InputStream argument to KeyStore.getInstance must (perhaps should) be null. It is not used, so there is no file to close.
","1984","<java><keystore><pkcs#11>","1","0","2","2016-02-26 23:04:37","","2","1","606496","","2015-02-26 13:55:29","2015-02-19 13:15:09",""
"21669350","How can I use pkcs11 in mac os(10.9) native programs?","First, I can't communicate in english very well.
I will develop PKI.
I can control token in firefox, thunderbird but can't control mac native program(ex. safari, mail).
How can I control the token in os x 10.9(mavericks) native program (ex. safari, mail) ?
I heard use tokend but, also heard now tokend is deprecated.
Is that right?
and, I saw macosforge.org. but I didn't know.
frankly speaking, I'm a Windows developer. so, I don't know much about mac development environments.
Hope you can help.
","TokenD is technically deprecated (as is the entire CDSA subsystem it sits upon) since at OSX 10.7.
It sounds like you want a PKCS#11 module to work with native components, you may want to take a look at Gemalto's PKCS#11 -> TokenD bridge: https://smartcardservices.macosforge.org/trac/browser/trunk/Tokend/PKCS11
Note that TokenD -> PKCS#11 usage is tricky in that updates to the contents of the PKCS#11 device may or may not show up until you remove/insert the token.
If you are unfamiliar with Mac OSX build environments, you will likely want to hire/contract out with someone familiar with legacy Mac OSX security (I say legacy since the ""new"" environment does not yet interact with external security devices).
","1963","<osx-mavericks><pki><pkcs#11>","0","0","1","2014-05-07 19:22:57","","0","","325521","","2014-02-10 04:59:41","2014-02-10 04:54:23",""
"18244081","how do I use a smart card as KeyStore for client authentication during SSL/TLS?","have been attempting to use a PKCS#11 token (Smart card) as a KeyStore (not the TrustStore) on the client side for client authentication of a TLS connection. However, the SSL handshake fails with a SSLException with the message: 

Unexpectedly, privatekey is not an RSA private key.

This cannot be true because the private key/certificate pairs on the smart card are RSA keys. Am I missing some configuration to use a smart card as a KeyStore for JSSE? 
Here are my configuration details:
Firstly, configured the Sun PKCS#11 Provider to work with an 'ActivCard' dll that interfaces with the smart card. The Sun PKCS#11 Provider configuration file just contains the 'name' and 'library' attributes.
The instantiation of the SunPKCS#11 provider looks like this:
java.security.AuthProvider provider = 
    new sun.security.pkcs11.SunPKCS11.SunPKCS11(<Configuration file>);

Then, the instantiation of a java.security.KeyStore object from the smart card is done using this code below:
KeyStore.ProtectionParameter thePasswordProtection = 
    new KeyStore.PasswordProtection( null );

KeyStore.Builder theBuilder = 
    KeyStore.Builder.newInstance( ""PKCS11"", provider, thePasswordProtection );

java.security.KeyStore theKeyStore = theBuilder.getKeyStore();

Moreover, this instantiated KeyStore is used to make a KeyManagerFactory to be used by JSSE using the code below:
KeyManagerFactory kmf = javax.net.ssl.KeyManagerFactory.
    getInstance( ""SunX509"", ""SunJSSE"" );

kmf.init( theKeyStore, <smart card pin> );

This KeyManagerFactory is used to then initialize an SSLContext which is then used to instantiate an SSLSocket.
As per instructions in Oracle's JSSERefGuide for Java 6, this is all I need to do for it to work. Although it is not required to set the below system properties while using the keystores programmatically, I also tried adding the system properties: 

javax.net.ssl.keyStoreType to PKCS11, 
javax.net.ssl.keyStore to NONE and 
javax.net.ssl.keyStoreProvider to the name specified for the Sun PKCS#11 provider in its configuration file.

Any ideas what I am doing wrong here? Any pointers or thoughts would be much appreciated.
","","1863","<authentication><ssl><client><pkcs#11>","1","","0","2016-10-14 13:40:55","","4","1","4537090","","2016-10-14 13:40:55","2013-08-14 23:36:39",""
"943678","Detect PKCS#11 token to be inserted/removed in JAVA","I'm using a PKCS#11 usb device to create a SSLContext.
The project is migrating from an IAIK jce implementation to sun's, iaik provide a tokenmanager to detect when the token is removed, inserted, could not find a way to do this with sun implementation.
Any ideas?
","Sun PKCS#11 provider creates a TokenPoller which tries to detect the token addition and removal removal.You can do the same. You can get a reference to the PKCS11 object using the PKCS11.getInstance() method passing in the library path that you used to create the provider. Be careful though, since the library path case has to be the same (its non canoncalized). Call C_GetSlotList on it passing a null. An exception indicates token removal. Reinsertion is however not reflected in this.
","1851","<java><ssl><pkcs#11>","1","2","1","2010-05-29 16:00:07","","0","","","","","2009-06-03 08:38:59",""
"18978204","What APIs can be used to read certificates from Gemplus smartcard (PKCS11)","I need API, that is able to get PKCS#11 certificates from smartcard on Java 7 both 32 and 64 versions.
SunPKCS11 is not providing solution for 64 bit Java 7.
EDIT > Arjun Sol proposed to take a look at Open SC. Seems quite versatile API set, but now when I stumbled upon fact that my card is Gemplus and is not supported by this API, I am editing also description.
So - Open SC cannot take care of all cards.
","You may want to look at: https://www.opensc-project.org/opensc/wiki/Java
Smart card access itself can be handled natively:
http://docs.oracle.com/javase/6/docs/jre/api/security/smartcardio/spec/javax/smartcardio/package-summary.html
An example from the java doc (edited for readability):
// show the list of available terminals
TerminalFactory factory = TerminalFactory.getDefault();
List<CardTerminal> terminals = factory.terminals().list();
System.out.println(""Terminals: "" + terminals);

// get the first terminal
CardTerminal terminal = terminals.get(0);

// establish a connection with the card
Card card = terminal.connect(""T=0"");
System.out.println(""card: "" + card);
CardChannel channel = card.getBasicChannel();
ResponseAPDU r = channel.transmit(new CommandAPDU(c1));
System.out.println(""response: "" + toString(r.getBytes()));

// disconnect
card.disconnect(false);

","1829","<java><pkcs#11>","1","0","1","2013-09-26 14:22:43","18978237","1","","1913203","","2013-09-26 14:22:43","2013-09-24 09:49:44",""
"13011949","Can I use PKCS#11 to create a signature in a HSM?","Can I configure XAdES4J to delegate the signature creation to a hardware-security-module (HSM) using a PKCS#11 infrastructure? If yes - how?
Infos on these sites let me assume, that only a key-transfer using PKCS#11 is possible:

https://code.google.com/p/xades4j/wiki/DefiningKeyingData (the terms keying-data, -provider)
http://code.google.com/p/xades4j/wiki/QeA (discussion of onur)
http://xades4j.googlecode.com/svn/release/1.3.0/javadoc/reference/xades4j/providers/impl/KeyStoreKeyingDataProvider.html (Step 3: ""Return the entry's private key"")

","Simple browsing brought me to: 
https://code.google.com/p/xades4j/wiki/DefiningKeyingData 
There's a section about PKCS#11 there. Does that not work for you?
","1808","<java><pkcs#11><xades4j>","3","1","2","2012-10-23 20:50:18","13039013","2","","15541","","2012-10-23 11:30:39","2012-10-22 12:56:35",""
"13011949","Can I use PKCS#11 to create a signature in a HSM?","Can I configure XAdES4J to delegate the signature creation to a hardware-security-module (HSM) using a PKCS#11 infrastructure? If yes - how?
Infos on these sites let me assume, that only a key-transfer using PKCS#11 is possible:

https://code.google.com/p/xades4j/wiki/DefiningKeyingData (the terms keying-data, -provider)
http://code.google.com/p/xades4j/wiki/QeA (discussion of onur)
http://xades4j.googlecode.com/svn/release/1.3.0/javadoc/reference/xades4j/providers/impl/KeyStoreKeyingDataProvider.html (Step 3: ""Return the entry's private key"")

","As previously stated, you can use PKCS#11 keying data by using PKCS11KeyingDataProvider. You just need to configure it with the native PKCS#11 lib of your HSM.
The PrivateKey interface is just a marker interface for opaque key representations. When your using the PKCS#11 provider, returned PrivateKey instances are just handles (representatives) of the key, since the key material doesn't actually leave the HSM. The signature engine will be selected using delayed provider selection, accordingly to the PrivateKey provider, since this provider is the one that knows how to handle that specific PrivateKey. In this case, both the key and the signature value calculation are fully handled by the HSM.
XAdES4j's PKCS11KeyingDataProvider is just a wrapper around a Java KeyStore created from a specific PKCS#11 provider instance which is configured with the supplied native lib path.
","1808","<java><pkcs#11><xades4j>","3","5","2","2012-10-23 20:50:18","13039013","2","","15541","","2012-10-23 11:30:39","2012-10-22 12:56:35",""
"28356275","sun.security.pkcs11.wrapper.PKCS11Exception: CKR_ATTRIBUTE_TYPE_INVALID","I am new to SmartCard and need some help. I try to run a test program (see below), but keep getting this exception, sun.security.pkcs11.wrapper.PKCS11Exception: CKR_ATTRIBUTE_TYPE_INVALID. 
My system is Windows 7 64-bit and java version is 1.8.0_31. 
Thank you for your help in advance!
public static void main(String[] args) throws Exception { 
    final StringBuilder buff = new StringBuilder(); 
    buff.append(""name="").append(""SmartCard"").append(""\n""); 
    buff.append(""library="").append(""C:\\Progra~1\\ActivIdentity\\ActivClient\\acpkcs211.dll"").append(""\n"");
    buff.append(""showInfo=true"").append(""\n""); 
    buff.append(""slotListIndex=0"").append(""\n""); 

    final SunPKCS11 provider = new sun.security.pkcs11.SunPKCS11(new ByteArrayInputStream(buff.toString().getBytes())); 
    Security.addProvider(provider);  

    KeyStore.ProtectionParameter pp = new KeyStore.PasswordProtection(""######"".toCharArray());  
    KeyStore.Builder builder = KeyStore.Builder.newInstance(""PKCS11"", provider, pp);
    KeyStore ks = builder.getKeyStore(); 
    ks.load(null, null); 
} 

Output:
Exception in thread ""main"" java.security.KeyStoreException: KeyStore instantiation failed
    at java.security.KeyStore$Builder$2.getKeyStore(Unknown Source)
    at myTests.P11Test.main(P11Test.java:38)
Caused by: java.io.IOException: load failed
    at sun.security.pkcs11.P11KeyStore.engineLoad(P11KeyStore.java:843)
    at java.security.KeyStore.load(Unknown Source)
    at java.security.KeyStore$Builder$2$1.run(Unknown Source)
    at java.security.KeyStore$Builder$2$1.run(Unknown Source)
    at java.security.AccessController.doPrivileged(Native Method)
    ... 2 more
Caused by: sun.security.pkcs11.wrapper.PKCS11Exception: CKR_ATTRIBUTE_TYPE_INVALID
    at sun.security.pkcs11.wrapper.PKCS11.C_FindObjectsInit(Native Method)
    at sun.security.pkcs11.P11KeyStore.findObjects(P11KeyStore.java:2658)
    at sun.security.pkcs11.P11KeyStore.mapLabels(P11KeyStore.java:2396)
    at sun.security.pkcs11.P11KeyStore.engineLoad(P11KeyStore.java:835)
    ... 6 more

","I believe the CKR_ATTRIBUTE_TYPE_INVALID error indicates that one of the attributes passed (probably showInfo or slotListINdex) is not valid. Try removing them one by one and see if it fixes the error. 
","1788","<java><smartcard><pkcs#11>","2","0","1","2017-12-09 00:32:12","","0","","3187989","","2015-03-26 14:16:59","2015-02-05 23:55:49",""
"14823045","How to wrap Microsoft RSA key blob in HSM","I have a requirement to wrap an RSAPrivateKey in an HSM, such that it can be sent off to a Microsoft CA for key archival and I'm not sure what approach to take.
The issue is that the Microsoft RSA key format is proprietary and doesn't seem to be supported by either pkcs11 or the nCipher HSM my company uses.
http://msdn.microsoft.com/en-us/library/cc250013.aspx
If this were just an RSAPrivateKey it would be straightforward to generate the key pair in the HSM, load the wrapping key in the HSM, wrap the RSAPrivateKey and extract the wrapped key bytes.  Obviously since this key blob format isn't supported I need to take a different approach.
My first thought was to extend RSAPrivateKey and override getEncoded() method to return this proprietary key format.  I'm using the IAIK pkcs11 wrapper that provides a high-level API to pkcs11 in Java and there is some support for creating vendor-defined key types.  However, the interface for vendor-defined keys seems to exist only as a convenience to extend the built-in key types in client code and doesn't actually allow one to modify the key encoding within the HSM.
The second idea was to use a pkcs11 data object and simply treat that as the key blob and then encrypt that with the wrapping key.  The same problem here is that in order to copy the private key bytes into the data object, it seems that I need to extract the private key bytes into the application code and then create the data object from there, which defeats the entire point of having the keys in the HSM.
I'm looking for alternatives to these approaches or perhaps there's some feature in pkcs11 I've overlooked that would allow me to do this?  Any insight would be appreciated.
","I agree this looks like a data format not supported by the nShield HSMs (might be worth double-checking that with the support team, though).
Assuming this is the case, there is only one way to do this securely - one has to use a much lower-level API to load the private key and pass it to some bespoke code running within the HSM (making use of the CodeSafe technology), which would expose the key material, translate it into the necessary format and wrap it with the wrapping key.
Any other approach will result in key exposure on the host. Plus, if you've generated your key with sensible (default) permissions, you can't expose the key anyway without writing bespoke code that utilises your Administrator Card Set.
I would suggest you contact the support team about the issue. You might even get through to some friendly consultants, cough, who could help you with this.
","1783","<rsa><pkcs#11><hsm><nshield>","3","2","3","2013-06-06 19:50:32","","0","","474189","","2013-02-12 08:25:32","2013-02-11 23:43:29",""
"14823045","How to wrap Microsoft RSA key blob in HSM","I have a requirement to wrap an RSAPrivateKey in an HSM, such that it can be sent off to a Microsoft CA for key archival and I'm not sure what approach to take.
The issue is that the Microsoft RSA key format is proprietary and doesn't seem to be supported by either pkcs11 or the nCipher HSM my company uses.
http://msdn.microsoft.com/en-us/library/cc250013.aspx
If this were just an RSAPrivateKey it would be straightforward to generate the key pair in the HSM, load the wrapping key in the HSM, wrap the RSAPrivateKey and extract the wrapped key bytes.  Obviously since this key blob format isn't supported I need to take a different approach.
My first thought was to extend RSAPrivateKey and override getEncoded() method to return this proprietary key format.  I'm using the IAIK pkcs11 wrapper that provides a high-level API to pkcs11 in Java and there is some support for creating vendor-defined key types.  However, the interface for vendor-defined keys seems to exist only as a convenience to extend the built-in key types in client code and doesn't actually allow one to modify the key encoding within the HSM.
The second idea was to use a pkcs11 data object and simply treat that as the key blob and then encrypt that with the wrapping key.  The same problem here is that in order to copy the private key bytes into the data object, it seems that I need to extract the private key bytes into the application code and then create the data object from there, which defeats the entire point of having the keys in the HSM.
I'm looking for alternatives to these approaches or perhaps there's some feature in pkcs11 I've overlooked that would allow me to do this?  Any insight would be appreciated.
","What you probably want to do is using a PKCS#11 wrapper. I am a little confused wheter you are interacting with the HSM from within Java (since you mention IAIK or .Net since you want to export to a Microsoft RSAPrivateKey). Anyway a PKCS11 wrapper (IAIK for Java, NCryptoki for .Net) will allow you to communicate with the HSM using PKCS#11 v2.30, make sure to check supported version in your wrapper and HSM specifications as there might be incompatibilities between versions.
PKCS#11 allows you to generate an RSA key pair within your HSM using the C_GenerateKeyPair function. You will have to specify a Mechanism (RSA_PKCS_KEY_PAIR_GEN) and provide two templates, one for the private key and one for the public key. Make sure that the CKA_WRAP attribute for the private key is set to true.
To load the wrapping key in the HSM the function C_CreateObject can be used in combination with a template.
You could then used the C_WrapKey function to wrap the Private RSA key with the key you imported into the HSM. First use the C_FindObjectsInit, C_FindObjects and C_FindObjectsFinal to retrieve handles to the key to be wrapped and the wrapping key. Then call the C_WrapKey function with the appropriate Mechanism and the two handles.
","1783","<rsa><pkcs#11><hsm><nshield>","3","0","3","2013-06-06 19:50:32","","0","","474189","","2013-02-12 08:25:32","2013-02-11 23:43:29",""
"14823045","How to wrap Microsoft RSA key blob in HSM","I have a requirement to wrap an RSAPrivateKey in an HSM, such that it can be sent off to a Microsoft CA for key archival and I'm not sure what approach to take.
The issue is that the Microsoft RSA key format is proprietary and doesn't seem to be supported by either pkcs11 or the nCipher HSM my company uses.
http://msdn.microsoft.com/en-us/library/cc250013.aspx
If this were just an RSAPrivateKey it would be straightforward to generate the key pair in the HSM, load the wrapping key in the HSM, wrap the RSAPrivateKey and extract the wrapped key bytes.  Obviously since this key blob format isn't supported I need to take a different approach.
My first thought was to extend RSAPrivateKey and override getEncoded() method to return this proprietary key format.  I'm using the IAIK pkcs11 wrapper that provides a high-level API to pkcs11 in Java and there is some support for creating vendor-defined key types.  However, the interface for vendor-defined keys seems to exist only as a convenience to extend the built-in key types in client code and doesn't actually allow one to modify the key encoding within the HSM.
The second idea was to use a pkcs11 data object and simply treat that as the key blob and then encrypt that with the wrapping key.  The same problem here is that in order to copy the private key bytes into the data object, it seems that I need to extract the private key bytes into the application code and then create the data object from there, which defeats the entire point of having the keys in the HSM.
I'm looking for alternatives to these approaches or perhaps there's some feature in pkcs11 I've overlooked that would allow me to do this?  Any insight would be appreciated.
","If this is an unsupported proprietary format you may have to run proprietary code within the HSM to accomplish this. Many HSM's allow you to run proprietary code, but you will need support from the HSM provider to be able to load the code in the first place. Furthermore, running your own code in a HSM could break security certification (FIPS or Common Criteria).
Otherwise you will have to retrieve the private key from the HSM, put it into the correct format within a secured environment, and wrap it using the normal encryption facilities of the HSM. This will of course expose the private key outside the HSM.
You could also ask Microsoft if they have a preferred solution.
","1783","<rsa><pkcs#11><hsm><nshield>","3","0","3","2013-06-06 19:50:32","","0","","474189","","2013-02-12 08:25:32","2013-02-11 23:43:29",""
"17066191","Java applet can't access Firefox certificate storage","First of all, I'm relatively new to Java (and not really advanced in programming in general either), so if I missed something obvious, I apologize in advance for wasting your time.
I'm trying to create an applet that would access Firefox' certificate store.
What's messed up is that I would swear that this code worked when I wrote it and first tested it; Then I hibernated the PC and upon restart it didn't work anymore and ever since.
It always fails at the very beginning - at KeyStore ks = KeyStore.getInstance(""PKCS11""); with 
java.security.KeyStoreException: PKCS11 not found
at java.security.KeyStore.getInstance(Unknown Source)

and
Caused by: java.security.NoSuchAlgorithmException: PKCS11 KeyStore not available
at sun.security.jca.GetInstance.getInstance(Unknown Source)

I don't think there's anything that's relevant in the code, but still, here's the function that fails:
/* Process PDF with Firefox */
private static byte[] processFirefox() throws GeneralSecurityException, IOException, DocumentException {
    KeyStore ks = KeyStore.getInstance(""PKCS11"");
    ks.load(null, ""myPassword"".toCharArray());
    String alias = (String) ks.aliases().nextElement();
    PrivateKey pk = (PrivateKey) ks.getKey(alias,  null);
    Certificate[] chain = ks.getCertificateChain(alias);
    @SuppressWarnings(""unused"")
    TSAClient tsaClient = null;
    for (int i = 0; i < chain.length; i++) {
        X509Certificate cert = (X509Certificate)chain[i];
        String tsaUrl = CertificateUtil.getTSAURL(cert);
        if (tsaUrl != null) {
            tsaClient = new TSAClientBouncyCastle(tsaUrl);
            break;
        }
    }
    List<CrlClient> crlList = new ArrayList<CrlClient>();
    crlList.add(new CrlClientOnline(chain));
    return SignPDF.sign(chain, pk, DigestAlgorithms.SHA256, ""PKCS11"", CryptoStandard.CMS, ""A Reason"", ""A Location"", null, null, null, 0);
}

At first I thought it's because I didn't specify a provider. Then I did and nothing changed. 
What's ""interesting"" is that I also tried running the same applet in Chrome and it gave me the exact same error. So I'm guessing that either the applet cannot access/read Firefox' certificate store or there's something else entirely going on.
The same code, works perfectly if I substitute PKCS11 for ""Windows-MY"", ""SunMSCAPI"" and the password entry for null, so I think it's a problem specific to PKCS11/Firefox.
So there, I could really use some help with this. I've read literally every Google hit on the first couple of pages of search results, but either I'm too green for them to help or they really weren't helpful enough.
If I forgot to add any important piece of info that would help you to help me, please let me know.
Thanks!
Ben
","Maybe your security setup has changed?
Check out these links: 

http://docs.oracle.com/javase/tutorial/deployment/applet/security.html
http://docs.oracle.com/javase/6/docs/technotes/guides/plugin/developer_guide/security.html

Can you access the store location using a simple FileReader?
","1727","<java><firefox><applet><pkcs#11>","3","0","1","2013-06-12 18:19:42","","0","1","2444412","","2013-06-12 13:06:32","2013-06-12 13:00:51",""
"23091859","Always ask for the pin KeyStore PKCS11","I have an applet for digital signature. My problem is that initialize the keystore, but it remains open until you close the browser. How do I ask the pin every time I want to sign?
This is the initialization code:
/* Se obtiene el proveedor del contenedor de claves */
pkcs11config = ""name=Athena\nlibrary=C:\\Windows\\system32\\asepkcs.dll"";
byte[] pkcs11configBytes1 = pkcs11config.getBytes();
ByteArrayInputStream configStream1 = new ByteArrayInputStream(pkcs11configBytes1);
BouncyCastleProvider providerBC = new BouncyCastleProvider();

Security.addProvider(providerBC);
//Cargo el proveedor de la CIPE
providerPKCS11 = new SunPKCS11(configStream1);
Security.addProvider(providerPKCS11);
ks = KeyStore.getInstance(""PKCS11"", providerPKCS11);
ks.load(null, null); 

Can anyone tell me how to fix it? Thank you.
","The PKCS#11 provider only will ask for PIN when it is required. And it is only required per operation if the CKA_ALWAYS_AUTHENTICATE flag is set for the token key that is being used. To allow for a user PIN to be entered, a callback handler has to be implemented according to the PKCS#11 provider documentation.
","1724","<java><passwords><keystore><smartcard><pkcs#11>","4","2","2","2016-01-14 14:08:49","","1","0","4237237","","2016-01-14 14:08:49","2014-04-15 18:43:05",""
"23091859","Always ask for the pin KeyStore PKCS11","I have an applet for digital signature. My problem is that initialize the keystore, but it remains open until you close the browser. How do I ask the pin every time I want to sign?
This is the initialization code:
/* Se obtiene el proveedor del contenedor de claves */
pkcs11config = ""name=Athena\nlibrary=C:\\Windows\\system32\\asepkcs.dll"";
byte[] pkcs11configBytes1 = pkcs11config.getBytes();
ByteArrayInputStream configStream1 = new ByteArrayInputStream(pkcs11configBytes1);
BouncyCastleProvider providerBC = new BouncyCastleProvider();

Security.addProvider(providerBC);
//Cargo el proveedor de la CIPE
providerPKCS11 = new SunPKCS11(configStream1);
Security.addProvider(providerPKCS11);
ks = KeyStore.getInstance(""PKCS11"", providerPKCS11);
ks.load(null, null); 

Can anyone tell me how to fix it? Thank you.
","PKCS#11 shares the login state between all sessions so it should be enough for you to call providerPKCS11.logout(); and you should be logged out from all PKCS#11 sessions - signing operations should fail. Reloading KeyStore with correct PIN should log you in again in all sessions - signing operations should succeed. Displaying the GUI to the user and asking him to enter the PIN before every signing operation is up to you.
","1724","<java><passwords><keystore><smartcard><pkcs#11>","4","1","2","2016-01-14 14:08:49","","1","0","4237237","","2016-01-14 14:08:49","2014-04-15 18:43:05",""
"23868828","applet with SunMSCapi not working in linux","We have created a new site for our web where we let the users to sign a pdf document using an applet we have designed. The issue is that this applet works fine only in Windows OS and we would like to extend it to linux OS.
When we run the applet in linux we get this error message:

[opensc-pkcs11] reader-pcsc.c:896:pcsc_detect_readers:
  SCardListReaders failed: 0x8010002e [opensc-pkcs11]
  reader-pcsc.c:1015:pcsc_detect_readers: returning with: No readers
  found [opensc-pkcs11] reader-pcsc.c:896:pcsc_detect_readers:
  SCardListReaders failed: 0x8010002e [opensc-pkcs11]
  reader-pcsc.c:1015:pcsc_detect_readers: returning with: No readers
  found java.security.NoSuchProviderException: no such provider:
  SunMSCAPI  at sun.security.jca.GetInstance.getService(Unknown Source) 
  at sun.security.jca.GetInstance.getInstance(Unknown Source)

I think the problem comes when we try to read the certificated stored in the Windows OS with this call in our code:
 KeyStore keystore = KeyStore.getInstance(""Windows-MY"", ""SunMSCAPI""); 
            keystore.load(null, null); 
            return keystore;

This is te function we use to obtain the list of certificates.
public KeyStore  obtenerCertificados() throws Exception {

            String osNombre = System.getProperty(""os.name"");
            String osArquitectura = System.getProperty(""os.arch"");
            String providerConfig = null;
            String configuracionPKCS11 = null;

            // LINUX
            if(osNombre.contains(new StringBuffer(""Linux"")))
                providerConfig = ""name = OpenSC\nlibrary = /usr/lib/opensc-pkcs11.so\n"";
            // WINDOWS
            else if(osNombre.contains(new StringBuffer(""Windows"")))
                if(!osArquitectura.toLowerCase().contains(""x86"")){
                    System.out.println(""Estamos en toLowerCase().contains x86"");
                    providerConfig = ""name = NSS""+""\n""+
                    ""nssLibraryDirectory = ""+""C:/Archivos de programa/Mozilla Firefox""+""\n""+
                    ""nssSecmodDirectory = ""+""C:/Users/SM/AppData/Local/Mozilla/Firefox/Profiles/plmk3eh9.default""+""\n""+
                    ""nssDbMode = readOnly"" + ""\n"" +
                    ""nssModule = keystore"" + ""\n"" + 
                    ""\r"";

                }
                else{
                    System.out.println(""Estamos en NO toLowerCase().contains x86"");
                    providerConfig = ""name = NSS""+""\n""+
                    ""nssLibraryDirectory = ""+""C:/Program Files (x86)/Mozilla Firefox""+""\n""+
                    ""nssLibrary = ""+""C:/Program Files (x86)/Mozilla Firefox/softokn3.dll""+""\n""+
                    ""nssSecmodDirectory = ""+""C:/Users/SM/AppData/Roaming/Mozilla/Firefox/Profiles/plmk3eh9.default""+""\n""+
                    ""nssDbMode = readOnly"" + ""\n"" +
                    ""nssModule = keystore"" + ""\n"" + 
                    ""\r"";

                }
            // MAC OS
            else {providerConfig = ""name = OpenSC\nlibrary = /Library/OpenSC/lib/opensc-pkcs11.so\n"";}

            ByteArrayInputStream localByteArrayInputStream = new ByteArrayInputStream(providerConfig.getBytes());
            SunPKCS11 _pk11provider = null;
            try {
            _pk11provider = new SunPKCS11(localByteArrayInputStream);
            Security.addProvider(_pk11provider); 
//          _pk11provider.login(new Subject(), new DialogCallbackHandler());
            }catch(Throwable e){
            System.out.println(e.getMessage());
            }
            KeyStore keystore = KeyStore.getInstance(""Windows-MY"", ""SunMSCAPI""); 
            keystore.load(null, null); 
            return keystore;


            }

Any ideas about how to extend this use to linux and MAC???
Thanks a lot for your help!!
","You can not use SunMSCAPI provider in Linux or MAC OS X, this provider is Windows specific which deals with Windows keystore. If you want to use a Smart Card or Firefox keystore in Linux or MAC OS X through SunPKCS11 provider you must get an instance of java.security.KeyStore passing SunPKCS11 as provider, like you are doing with SunMSCAPI i.e:
        ByteArrayInputStream confStream = ...// your configuration
        SunPKCS11 pkcs11 = new SunPKCS11(confStream);
        Security.addProvider(pkcs11);
        KeyStore ks = KeyStore.getInstance(""PKCS11"", pkcs11);
        ks.load(null, ""your_pin"".toCharArray());

With this code you load on the Keystore ks the keys from your configured PKCS11.
There is another way to do it if you want that your PKCS11 pin will be introduced by a third party later. To do so you can initialize your keystore with a java.security.KeyStore.CallbackHandlerProtection parameter like follows:
        ByteArrayInputStream confStream = ...// your configuration
        SunPKCS11 pkcs11 = new SunPKCS11(confStream);
        Security.addProvider(pkcs11);
        KeyStore.CallbackHandlerProtection cbhp = new KeyStore.CallbackHandlerProtection(new PinInputHandler(msg));
        KeyStore.Builder builder = KeyStore.Builder.newInstance(""PKCS11"", pkcs11, cbhp);
        builder.getKeyStore();

Note that PinInputHandler in this second sample must implements: javax.security.auth.callback.CallbackHandler.
Additionally in your code seems that you never loads the PKCS11 keys through SunPKCS11 provider (even in Windows case) because you are not instantiating a keystore with SunPKCS11 you are only adding it as a provider with Security.addProvider method and always you are instantiating only a keystore with SunMSCAPI, however probably in Windows you are getting some of your Smart cards keys because if you install Windows drivers for you smart card you can get their keys through Windows keystore.
Hope this helps,
","1719","<java><certificate><keystore><pkcs#11>","1","4","1","2014-08-21 06:56:26","","0","2","1218618","","2014-08-20 10:46:20","2014-05-26 11:14:03",""
"27523779","Sign multiple pdf with itextsharp and token prompts for pin every time","Hi I am trying to prevent multiple pin prompts for every pdf that needs to be signed.
I am using code from this example : 
Pin is required when this part of code get process :
MakeSignature.SignDetached(appearance, pks, chain, crlList, ocspClient, tsaClient, estimatedSize,
subfilter);

Is there any way to memorize token pin and sing rest of pdfs without prompting for pin? 
","Finally I found solution, this code does the trick :
...
RSACryptoServiceProvider rsa = (RSACryptoServiceProvider)pk.PrivateKey;

CspParameters cspp = new CspParameters();
cspp.KeyContainerName = rsa.CspKeyContainerInfo.KeyContainerName;
cspp.ProviderName = rsa.CspKeyContainerInfo.ProviderName;
// cspp.ProviderName = ""Microsoft Smart Card Key Storage Provider"";

cspp.ProviderType = rsa.CspKeyContainerInfo.ProviderType;

cspp.Flags = CspProviderFlags.NoPrompt;

RSACryptoServiceProvider rsa2 = new RSACryptoServiceProvider(cspp);

rsa.PersistKeyInCsp = true;
...
MakeSignature.SignDetached(...);

Creating CspParameters before signing, remebers the pin code. There is official documentacion on msdn .
","1700","<c#><pdf><itextsharp><smartcard><pkcs#11>","2","4","1","2015-01-11 04:12:36","27554674","0","3","","","","2014-12-17 10:47:04",""
"17853649","communication between native PKCS11 implementation and Smart card","I am digitally signing a file by using Smart card on java platform.
Syntactically, I am getting the flow of code and other things too.
But my problem is how native PKCS11 implementation is communicating with smart card or vice versa(That thing I don't know).
I want to know internal flow. I have googled it alot but did not get internal communication flow (I am getting code only).
Can anyone give me some link or reference or some class diagram.
","PKCS#11 is an API definition in C to use cryptographic tokens. It explicitly does not specify any implementation details of these cryptographic tokens. In principle any security and software module may be represented by a PKCS#11 interface. So it depends completely on the PKCS#11 middleware on how the smart card is accessed. The same goes for things as logging by the PKCS#11 module - PKCS#11 does not specify how logging is performed.
Now most smart cards that are used for signature generation are compatible with at least ISO 7816-4 (which defines which APDU's may be used to read/write to the card and how some cryptographic APDU's may be used). Futhermore, they may implement ISO 7816-15 (a slightly different version of PKCS#15), which is a quite complex standard to find files and objects (such as keys) on the card. Normally these cards are accessed through PCSC, so it is best to try and get a log of the PCSC or smart card reader driver API calls.
With Java you can also directly use the card through javax.smartcardio which implements ISO 7816-4 compatible transport over PCSC. In that case you will have to implement the entire application level interface to the smart card though.
This is unfortunately a long text to say that this all depends on the implementation of the PKCS#11 library and the smart card. 
","1664","<java><smartcard><pkcs#11>","0","3","2","2013-07-31 04:28:23","17961627","2","","","","","2013-07-25 09:08:32",""
"17853649","communication between native PKCS11 implementation and Smart card","I am digitally signing a file by using Smart card on java platform.
Syntactically, I am getting the flow of code and other things too.
But my problem is how native PKCS11 implementation is communicating with smart card or vice versa(That thing I don't know).
I want to know internal flow. I have googled it alot but did not get internal communication flow (I am getting code only).
Can anyone give me some link or reference or some class diagram.
","I got some brief idea by going through this PDF
ftp://ftp.rsasecurity.com/pub/pkcs/pkcs-11/v2-30/TUT-M51_Griffin_PKCS11.pdf
But still i did not get the whole flow .For this, I think i need to go deeper and deeper in the sea of PKCS#11 ;)
","1664","<java><smartcard><pkcs#11>","0","-1","2","2013-07-31 04:28:23","17961627","2","","","","","2013-07-25 09:08:32",""
"25577933","iText: using java to digitally sign PDF doc and observing java.security.NoSuchAlgorithmException error","I have a SafeNet eToken 5100 USB Token with PDF Digital Signing Certificate on it. I configured a windows and mac system to use it and I succeeded in manually signing PDF files with its certificate on both machines. Thus the certificate works as intended. 
I shipped the token to my web host company and they placed it on my Linux (CentOS) server. I installed SafeNet Authentication Client on the server.
Now I'm attempting to use iText to apply the signature. I'm following code sample 4.2 from this excellent book: http://itextpdf.com/book/digitalsignatures. My code is:
    String config = ""name = eToken5100_20130805\n"" +
               ""library = /usr/lib64/libeTPkcs11.so\n"" +
               ""slot = 0"";  // create a dynamic conf file
    ByteArrayInputStream bais = new ByteArrayInputStream(config.getBytes());
    Provider providerPKCS11 = new SunPKCS11(bais);
    Security.addProvider(providerPKCS11);
    System.out.println(providerPKCS11.getName());
    BouncyCastleProvider providerBC = new BouncyCastleProvider();
    Security.addProvider(providerBC);

    KeyStore ks = KeyStore.getInstance(""PKCS11"", providerPKCS11);
    ks.load(null, K.PASS_TOKEN);
    String alias = (String)ks.aliases().nextElement();
    PrivateKey pk = (PrivateKey)ks.getKey(alias, K.PASS_TOKEN);
    Certificate[] chain = ks.getCertificateChain(alias);
    OcspClient ocspClient = new OcspClientBouncyCastle();
    TSAClient tsaClient = null;
    for (int i = 0; i < chain.length; i++) {
        X509Certificate cert = (X509Certificate)chain[i];
        String tsaUrl = CertificateUtil.getTSAURL(cert);
        if (tsaUrl != null) {
            tsaClient = new TSAClientBouncyCastle(tsaUrl);
            break;
        }
    }
    List<CrlClient> crlList = new ArrayList<CrlClient>();
    crlList.add(new CrlClientOnline(chain));
    sign(userFile, userFile_signed, chain, pk, DigestAlgorithms.SHA256, providerPKCS11.getName(),
                 CryptoStandard.CMS, ""Test"", ""Ghent"", crlList, ocspClient, tsaClient, 0);

when I run this code, it generates the following runtime error:
stack trace: java.security.KeyStoreException: PKCS11 not found
Caused by: java.security.NoSuchAlgorithmException: no such algorithm: 
  PKCS11 for provider SunPKCS11-eToken5100_20130805

This link indicates that the wrong keystore type might generate this error. I checked my ~glassfish/java/jdk7u25/jdk1.7.0_25/jre/lib/security/java.security file and it uses a keystore of jks. However, changing it to PKCS11 causes my GlassFish server not to restart. So I kept it as jks. 
QUESTION 1: Could this cause the problem? If so, how to resolve?
QUESTION 2: I just made up the name eToken5100_20130805 in the java code above... but does this name need to match some other name somewhere? (the Java code above is the only place I entered this name).
QUESTION 3: I know the library is correct, but how do I determine the slot number? I have manually entered slots 0 through 6 (just guessing) and they each produced the same error shown above. Further, if I enter slot numbers 7 through 10, a PKCS11Exception CKR_SLOT_ID_INVALID is thrown each time.
I don't know much about this topic, but I tried to determine the slot number various ways:
(A) I'm not sure if the following syntax is correct:
# keytool -v -list -keystore NONE -storetype PKCS11 -providername SunPKCS11-eToken5100_20130805 -J-Djava.security.debug=sunpkcs11,pkcs11

but it returns this output:
keytool error: java.security.NoSuchProviderException: no such provider: SunPKCS11-eToken5100_20130805
java.security.NoSuchProviderException: no such provider: SunPKCS11-eToken5100_20130805
at sun.security.jca.GetInstance.getService(GetInstance.java:83)
at sun.security.jca.GetInstance.getInstance(GetInstance.java:206)
at java.security.Security.getImpl(Security.java:698)
at java.security.KeyStore.getInstance(KeyStore.java:661)
at sun.security.tools.KeyTool.doCommands(KeyTool.java:765)
at sun.security.tools.KeyTool.run(KeyTool.java:340)
at sun.security.tools.KeyTool.main(KeyTool.java:333) 

(B) I also tried to use modutil to find the slot number:
# modutil -list -dbdir $HOME/.mozilla/firefox/*.default

but I'm not sure what it means when it returns the following:
winscard_clnt.c:420:SCardEstablishContextTH() Your pcscd is too old and does not support CMD_VERSION
winscard_clnt.c:420:SCardEstablishContextTH() Your pcscd is too old and does not support CMD_VERSION

  Listing of PKCS #11 Modules
  -----------------------------------------------------------
  1. NSS Internal PKCS #11 Module
slots: 2 slots attached
status: loaded

 slot: NSS Internal Cryptographic Services
token: NSS Generic Crypto Services

 slot: NSS User Private Key and Certificate Services
token: NSS Certificate DB

2. eToken
library name: libeTPkcs11.so
 slots: 6 slots attached
 status: loaded

 slot: 
 token: 

 slot: 
 token: 

 slot: 
 token: 

 slot: 
 token: 

 slot: 
 token: 

 slot: 
 token: 

(C) Lastly, I tried to run
# pkcs11-tool --module /usr/lib64/libeTPkcs11.so --list-slots 

but this requires to first install openSC to obtain the pkcs11-tool. When I attempt to install using: # yum install opensc.x86_64, it gives the following error: 
Transaction Check Error: 
file /usr/lib64/libpcsclite.so.1.0.0 from install of pcsc-lite-libs-1.5.2-13.el6_4.x86_64
conflicts with file from package libpcsclite1-1.4.0-9.el6.x86_64`

and I can't figure out how to overcome this error. 
I could use some help navigating these unfamiliar errors, to understand what the problem is, then how to resolve it. Does it appear the slot number is indeed incorrect (can slot numbers be large, like, 31310? So far I'm assuming they're single digit...), or something else?
---------- UPDATE ----------
My linux machine had a package installed for libpcsclite1 that caused the error described above. I uninstalled SafeNet Auth Client (SAC), removed this package, installed pcsc-lite (using yum), and re-installed the standard SAC. I also installed opensc using yum so I can use pkcs11-tool. I can now see the slot using:
# pkcs11-tool --module /usr/lib64/libeToken.so -L
Available slots:
Slot 0 (0x0): AKS xxxx 00 00
 token label:   my label
 token manuf:   SafeNet, Inc.
 token model:   eToken
 token flags:   rng, login required, PIN initialized, token initialized, other flags=0x200
 serial num  :  xxxxxxx
Slot 1 (0x1): 
  (empty)
Slot 2 (0x2): 
  (empty)
Slot 3 (0x3): 
  (empty)
Slot 4 (0x4): 
  (empty)
Slot 5 (0x5): 
  (empty)

Now I can run everything without generating runtime errors. However, the resulting PDF file displays ""At least one signature is invalid"". [update: my mistake, I was looking at the wrong file. The signed PDF file shows a valid signature.]
","SlotID (in your case specified by slot variable) is unsigned long integer and it is up to the PKCS#11 library creator to choose what exact value will be used so it may be very hard to just guess the correct value. I am no java expert but by looking at the documentation of Sun PKCS#11 Provider I would say you should rather use slotListIndex variable which specifies the position in the list of available slots/tokens returned by PKCS#11 library.
","1649","<java><pdf><itext><keystore><pkcs#11>","1","0","2","2014-09-02 17:45:18","25580467","2","1","3895917","","2014-09-02 17:45:18","2014-08-30 00:41:05",""
"25577933","iText: using java to digitally sign PDF doc and observing java.security.NoSuchAlgorithmException error","I have a SafeNet eToken 5100 USB Token with PDF Digital Signing Certificate on it. I configured a windows and mac system to use it and I succeeded in manually signing PDF files with its certificate on both machines. Thus the certificate works as intended. 
I shipped the token to my web host company and they placed it on my Linux (CentOS) server. I installed SafeNet Authentication Client on the server.
Now I'm attempting to use iText to apply the signature. I'm following code sample 4.2 from this excellent book: http://itextpdf.com/book/digitalsignatures. My code is:
    String config = ""name = eToken5100_20130805\n"" +
               ""library = /usr/lib64/libeTPkcs11.so\n"" +
               ""slot = 0"";  // create a dynamic conf file
    ByteArrayInputStream bais = new ByteArrayInputStream(config.getBytes());
    Provider providerPKCS11 = new SunPKCS11(bais);
    Security.addProvider(providerPKCS11);
    System.out.println(providerPKCS11.getName());
    BouncyCastleProvider providerBC = new BouncyCastleProvider();
    Security.addProvider(providerBC);

    KeyStore ks = KeyStore.getInstance(""PKCS11"", providerPKCS11);
    ks.load(null, K.PASS_TOKEN);
    String alias = (String)ks.aliases().nextElement();
    PrivateKey pk = (PrivateKey)ks.getKey(alias, K.PASS_TOKEN);
    Certificate[] chain = ks.getCertificateChain(alias);
    OcspClient ocspClient = new OcspClientBouncyCastle();
    TSAClient tsaClient = null;
    for (int i = 0; i < chain.length; i++) {
        X509Certificate cert = (X509Certificate)chain[i];
        String tsaUrl = CertificateUtil.getTSAURL(cert);
        if (tsaUrl != null) {
            tsaClient = new TSAClientBouncyCastle(tsaUrl);
            break;
        }
    }
    List<CrlClient> crlList = new ArrayList<CrlClient>();
    crlList.add(new CrlClientOnline(chain));
    sign(userFile, userFile_signed, chain, pk, DigestAlgorithms.SHA256, providerPKCS11.getName(),
                 CryptoStandard.CMS, ""Test"", ""Ghent"", crlList, ocspClient, tsaClient, 0);

when I run this code, it generates the following runtime error:
stack trace: java.security.KeyStoreException: PKCS11 not found
Caused by: java.security.NoSuchAlgorithmException: no such algorithm: 
  PKCS11 for provider SunPKCS11-eToken5100_20130805

This link indicates that the wrong keystore type might generate this error. I checked my ~glassfish/java/jdk7u25/jdk1.7.0_25/jre/lib/security/java.security file and it uses a keystore of jks. However, changing it to PKCS11 causes my GlassFish server not to restart. So I kept it as jks. 
QUESTION 1: Could this cause the problem? If so, how to resolve?
QUESTION 2: I just made up the name eToken5100_20130805 in the java code above... but does this name need to match some other name somewhere? (the Java code above is the only place I entered this name).
QUESTION 3: I know the library is correct, but how do I determine the slot number? I have manually entered slots 0 through 6 (just guessing) and they each produced the same error shown above. Further, if I enter slot numbers 7 through 10, a PKCS11Exception CKR_SLOT_ID_INVALID is thrown each time.
I don't know much about this topic, but I tried to determine the slot number various ways:
(A) I'm not sure if the following syntax is correct:
# keytool -v -list -keystore NONE -storetype PKCS11 -providername SunPKCS11-eToken5100_20130805 -J-Djava.security.debug=sunpkcs11,pkcs11

but it returns this output:
keytool error: java.security.NoSuchProviderException: no such provider: SunPKCS11-eToken5100_20130805
java.security.NoSuchProviderException: no such provider: SunPKCS11-eToken5100_20130805
at sun.security.jca.GetInstance.getService(GetInstance.java:83)
at sun.security.jca.GetInstance.getInstance(GetInstance.java:206)
at java.security.Security.getImpl(Security.java:698)
at java.security.KeyStore.getInstance(KeyStore.java:661)
at sun.security.tools.KeyTool.doCommands(KeyTool.java:765)
at sun.security.tools.KeyTool.run(KeyTool.java:340)
at sun.security.tools.KeyTool.main(KeyTool.java:333) 

(B) I also tried to use modutil to find the slot number:
# modutil -list -dbdir $HOME/.mozilla/firefox/*.default

but I'm not sure what it means when it returns the following:
winscard_clnt.c:420:SCardEstablishContextTH() Your pcscd is too old and does not support CMD_VERSION
winscard_clnt.c:420:SCardEstablishContextTH() Your pcscd is too old and does not support CMD_VERSION

  Listing of PKCS #11 Modules
  -----------------------------------------------------------
  1. NSS Internal PKCS #11 Module
slots: 2 slots attached
status: loaded

 slot: NSS Internal Cryptographic Services
token: NSS Generic Crypto Services

 slot: NSS User Private Key and Certificate Services
token: NSS Certificate DB

2. eToken
library name: libeTPkcs11.so
 slots: 6 slots attached
 status: loaded

 slot: 
 token: 

 slot: 
 token: 

 slot: 
 token: 

 slot: 
 token: 

 slot: 
 token: 

 slot: 
 token: 

(C) Lastly, I tried to run
# pkcs11-tool --module /usr/lib64/libeTPkcs11.so --list-slots 

but this requires to first install openSC to obtain the pkcs11-tool. When I attempt to install using: # yum install opensc.x86_64, it gives the following error: 
Transaction Check Error: 
file /usr/lib64/libpcsclite.so.1.0.0 from install of pcsc-lite-libs-1.5.2-13.el6_4.x86_64
conflicts with file from package libpcsclite1-1.4.0-9.el6.x86_64`

and I can't figure out how to overcome this error. 
I could use some help navigating these unfamiliar errors, to understand what the problem is, then how to resolve it. Does it appear the slot number is indeed incorrect (can slot numbers be large, like, 31310? So far I'm assuming they're single digit...), or something else?
---------- UPDATE ----------
My linux machine had a package installed for libpcsclite1 that caused the error described above. I uninstalled SafeNet Auth Client (SAC), removed this package, installed pcsc-lite (using yum), and re-installed the standard SAC. I also installed opensc using yum so I can use pkcs11-tool. I can now see the slot using:
# pkcs11-tool --module /usr/lib64/libeToken.so -L
Available slots:
Slot 0 (0x0): AKS xxxx 00 00
 token label:   my label
 token manuf:   SafeNet, Inc.
 token model:   eToken
 token flags:   rng, login required, PIN initialized, token initialized, other flags=0x200
 serial num  :  xxxxxxx
Slot 1 (0x1): 
  (empty)
Slot 2 (0x2): 
  (empty)
Slot 3 (0x3): 
  (empty)
Slot 4 (0x4): 
  (empty)
Slot 5 (0x5): 
  (empty)

Now I can run everything without generating runtime errors. However, the resulting PDF file displays ""At least one signature is invalid"". [update: my mistake, I was looking at the wrong file. The signed PDF file shows a valid signature.]
","The keystore used by your JVM is irrelevant in your case. Your keys are stored on your eToken. It's that keystore that you are trying to load when you use these lines:
KeyStore ks = KeyStore.getInstance(""PKCS11"", providerPKCS11);
ks.load(null, K.PASS_TOKEN);

Hence your question 1 is irrelevant. By the way: when I create the instance of the KeyStore, I don't pass the provider. What happens if you remove providerPKCS11? It should find the provider as you're adding it to the Security instance.
In your config file, you chose the name eToken5100_20130805 and that's fine. You can use any name you want. This answers your question 2.
As for your question 3, there's an example on how to find the slot you need in section 4.1.2 if the book you refer to (and if which I'm the author), but if you need a more simple example, please read the answers to this question on StackOverflow: java keytool with opensc pkcs#11 provider only works with debug option enabled
Note that you have established that the provider works. Your config file is read correctly, otherwise you wouldn't see the name you chose in the exception (SunPKCS11-eToken5100_20130805). The problem is that you can't load the keystore. I've found this post about this problem. I'm not sure if it helps.
In any case: your attempt (A) can never work because keytool is unaware of the config file and thus unaware of the name you chose. Your attempt (C) fails because of a conflict between tools on Linux. I don't know the modutil tool you mention in (B), but if I see the output, I would assume that the library to access the token is loaded correctly, and that there are 6 USB slots in the server, but that there is no USB token in any of these slots. Maybe it's as simple as that: maybe your USB token isn't inserted in an USB slot of your server, or maybe it is inserted, but it isn't seen because of a hardware driver problem.
I would check with the hosting company first.
","1649","<java><pdf><itext><keystore><pkcs#11>","1","1","2","2014-09-02 17:45:18","25580467","2","1","3895917","","2014-09-02 17:45:18","2014-08-30 00:41:05",""
"15879938","Storing certificates in pkcs11 keystore","I am generating an RSA keypair in pkcs11 keystore, it was storing into smartcard and i am generating pkcs10 request. when i download the equivalent certificate how can i store it into smartcard(without privatekey since the key is already stored into smartcard) since i dont have access to the private key in the pkcs11 keystore.
    String wdtokenpath = ""path to dll file"";
    String pkcs11ConfigSettings = ""name = SmartCard\n"" + ""library ="" + wdtokenpath;
    byte[] pkcs11ConfigBytes = pkcs11ConfigSettings.getBytes();
    ByteArrayInputStream confStream = new ByteArrayInputStream(pkcs11ConfigBytes);
    Provider pkcs11Provider = null;

    Class sunPkcs11Class = Class.forName(""sun.security.pkcs11.SunPKCS11"");
    Constructor pkcs11Constr = sunPkcs11Class.getConstructor(
            java.io.InputStream.class);
    pkcs11Provider = (Provider) pkcs11Constr.newInstance(confStream);
    CallbackHandler call = new TextCallbackHandler();
    Subject token = new Subject();
    AuthProvider aprov = (AuthProvider) pkcs11Provider;
    aprov.login(token, call);

    System.out.println(""Login successfully"");
    KeyPairGenerator keyGen1 = KeyPairGenerator.getInstance(""RSA"", aprov);
    keyGen1.initialize(2048);
    KeyPair pair1 = keyGen1.generateKeyPair();
    PublicKey publicKey1 = pair1.getPublic();

    String sigAlg = ""SHA1withRSA"";
    PKCS10 pkcs10 = new PKCS10(publicKey1);
    Signature signature = Signature.getInstance(""SHA1withRSA"", pkcs11Provider);
    signature.initSign(pair1.getPrivate());

","It depends on what kind of smart card you have, or what kind of PKCS#11 device you have. The implementation may differ.
When you are using SunPKCS11, you can do it like this:
public boolean uploadCertificate(X509Certificate cert, String label, String id) {
        CK_ATTRIBUTE[] certificate = new CK_ATTRIBUTE[9];

        certificate[0] = new CK_ATTRIBUTE(PKCS11Constants.CKA_CLASS, PKCS11Constants.CKO_CERTIFICATE);
        certificate[1] = new CK_ATTRIBUTE(PKCS11Constants.CKA_TOKEN, true);
        certificate[2] = new CK_ATTRIBUTE(PKCS11Constants.CKA_PRIVATE, false);
        certificate[3] = new CK_ATTRIBUTE(PKCS11Constants.CKA_LABEL, label.toCharArray());
        certificate[4] = new CK_ATTRIBUTE(PKCS11Constants.CKA_SUBJECT, cert.getSubjectX500Principal().getEncoded());
        certificate[5] = new CK_ATTRIBUTE(PKCS11Constants.CKA_ID, HexUtils.hexStringToByteArray(id));
        certificate[6] = new CK_ATTRIBUTE(PKCS11Constants.CKA_ISSUER, cert.getIssuerX500Principal().getEncoded());
        certificate[7] = new CK_ATTRIBUTE(PKCS11Constants.CKA_SERIAL_NUMBER, cert.getSerialNumber().toByteArray());

        try {
            certificate[8] = new CK_ATTRIBUTE(PKCS11Constants.CKA_VALUE, cert.getEncoded());
            p11.C_CreateObject(hSession, certificate);
        } catch (Exception e) {
            logger.log(Level.SEVERE, ""Upload Certificate Exception"", e);
            return false;
        }

        return true;
    }

Or with IAIK PKCS#11 Wrapper:
// create certificate object template
        X509PublicKeyCertificate pkcs11X509PublicKeyCertificate = new X509PublicKeyCertificate();

        pkcs11X509PublicKeyCertificate.getToken().setBooleanValue(Boolean.TRUE);
        pkcs11X509PublicKeyCertificate.getPrivate().setBooleanValue(Boolean.FALSE);
        pkcs11X509PublicKeyCertificate.getLabel().setCharArrayValue(""test"".toCharArray());
        pkcs11X509PublicKeyCertificate.getSubject().setByteArrayValue(cert.getSubjectX500Principal().getEncoded());
        pkcs11X509PublicKeyCertificate.getId().setByteArrayValue(objectId);
        pkcs11X509PublicKeyCertificate.getIssuer().setByteArrayValue(cert.getIssuerX500Principal().getEncoded());
        // serial number should be an DER encoded ASN.1 integer
        /*
         INTEGER asn1Integer = new INTEGER(userCertificate.getSerialNumber());
         ByteArrayOutputStream buffer = new ByteArrayOutputStream();
         DerCoder.encodeTo(asn1Integer, buffer);
         pkcs11X509PublicKeyCertificate.getSerialNumber().setByteArrayValue(buffer.toByteArray());
         */
        // Netscape deviates from the standard here, for use with Netscape rather use
        pkcs11X509PublicKeyCertificate.getSerialNumber().setByteArrayValue(cert.getSerialNumber().toByteArray());
        pkcs11X509PublicKeyCertificate.getValue().setByteArrayValue(cert.getEncoded());

        session.createObject(pkcs11X509PublicKeyCertificate);

The ID of the certificate object should be the same as the ID of generated keys.
","1594","<rsa><smartcard><private-key><pkcs#11><key-pair>","1","2","1","2018-02-07 08:49:01","","0","","2201899","","2013-04-09 07:01:08","2013-04-08 13:10:01",""
"18712537","Digitally sign a hash value of a file directly instead of file","My ques is -- Is it possible to digitally sign a hash value of a file directly instead of file.
I have to digitally sign a xml file in web environment through e-token. So I have to download the file from server to client and then get certificate from e-token usb at client machine and sign the file and upload it on server.
But the problem is, if size of the file is too huge, then it will take too much time to download at client side (depend upon internet speed) and some leakage in the security of the file too.
So instead of sending file to client machine, send only file hash value (internally hash value of files are signed not files as general flow of digitally signature process).
Or is there any other alternatives solution ?
","Well, it is of course possible to pass the hash to the client and sign it there, but the devil is in details -- in case of such distributed signing you need to design a really secure way to pass the hash and the signature and to sign it securely on the client side. Also you need to have the code on the server that will let you calculate the hash, pass it to the client and then embed the signature to the signing format of your choice. 
Our company has developed a Distributed Cryptography add-on to our SecureBlackbox product that addresses all of the above problems. For details you are welcome to check this answer on StackOverflow.
","1574","<java><hash><digital-signature><pkcs#11><e-token>","2","0","2","2013-09-11 00:05:43","","7","","","","","2013-09-10 07:03:06",""
"18712537","Digitally sign a hash value of a file directly instead of file","My ques is -- Is it possible to digitally sign a hash value of a file directly instead of file.
I have to digitally sign a xml file in web environment through e-token. So I have to download the file from server to client and then get certificate from e-token usb at client machine and sign the file and upload it on server.
But the problem is, if size of the file is too huge, then it will take too much time to download at client side (depend upon internet speed) and some leakage in the security of the file too.
So instead of sending file to client machine, send only file hash value (internally hash value of files are signed not files as general flow of digitally signature process).
Or is there any other alternatives solution ?
","@Eugene brings up some valid points about the details of securely passing the hash.
Since you have an eToken, you could use it to establish a 2-way SSL session between the client and server.  This session could be used to transfer the hash to the client, and the resulting signature back to the server.
For signing a hash on the client side in Java, you could use a Signature algorithm like NONEwithRSA instead of one like SHA256withRSA.
""NONE"" specifies that the raw data (in this case the hash) will be signed and not hashed again by the algorithm.
","1574","<java><hash><digital-signature><pkcs#11><e-token>","2","1","2","2013-09-11 00:05:43","","7","","","","","2013-09-10 07:03:06",""
"30919335","Error in digital signature","I'm using itext 5.5.6 to sign a PDF document, using the: 
 Code sample 4.1: Signing a document using PKCS#11
of the book: Digital Signatures for PDF documents
But I have the following error when validating adobe reader: 
Error during signature verification. 
Error encountered while validating:
Internal cryptographic library error. 
Error Code: 0x2726
I have not found the solution to the error, 
attached the document signed: firmado.pdf
I appreciate your comments, 
Regards.
","A first tentative analysis results in the observations that

the signature is correctly embedded,
the messageDigest signed attribute contains the correct hash of the signed byte ranges of the PDF, but
the signature bytes do not constitute a signature of the signed attributes with the private key associated with the given certificate.

This means essentially that the signature you retrieved via P11 is incorrect while iText seems to operate correctly. This may be due to

the fact that the Code sample 4.1 was originally made for a SafeNet Luna while you use a Thales nShield Edge and some adaptions are required, or
a mixup in the installation of your Thales client or the Thales Edge itself.

Unfortunately I'm not deep into HSMs and therefore cannot tell the exact problem.
","1565","<pdf><itext><digital-signature><pkcs#11><hsm>","0","1","1","2015-06-18 21:55:37","","4","0","3587281","","2015-06-18 18:24:01","2015-06-18 15:15:01",""
"33983479","PKCS11 Verifying signature error: Signature encoding error Caused Sequence tag error","I'm trying to verify the signature of a document, but I am getting the following error:

Exception in thread ""main"" java.security.SignatureException: Signature
  encoding error    at
  sun.security.rsa.RSASignature.engineVerify(RSASignature.java:204)     at
  java.security.Signature$Delegate.engineVerify(Signature.java:1219)    at
  java.security.Signature.verify(Signature.java:652)    at
  VerSign.VerSign.main(VerSign.java:78)
      Caused by: java.io.IOException: Sequence tag error    at sun.security.util.DerInputStream.getSequence(DerInputStream.java:297)
    at
  sun.security.rsa.RSASignature.decodeSignature(RSASignature.java:229)
    at sun.security.rsa.RSASignature.engineVerify(RSASignature.java:195)
    ... 3 more

I'm using a smartcard with SUNPKCS11 provider.
-- Sign --
String configName = ""/media/sf_Share_SI_Mint/conf"";
Provider p = new sun.security.pkcs11.SunPKCS11(configName);
Security.addProvider(p); 
KeyStore ks = KeyStore.getInstance(""PKCS11"",p);  
ks.load(null,null);
String assinaturaCertifLabel = ""CITIZEN SIGNATURE CERTIFICATE"";
PrivateKey pk = (PrivateKey) ks.getKey(assinaturaCertifLabel, null);
Certificate cert = ks.getCertificate(assinaturaCertifLabel);

byte[] sig = signDocument((PrivateKey)pk,p);

FileOutputStream sigfos = new FileOutputStream(""sig"");
sigfos.write(sig);
sigfos.close();

byte[] certificado = cert.getEncoded();
FileOutputStream fos = new FileOutputStream(""cert"");
fos.write(certificado);
fos.close();

private static byte[] signDocument(PrivateKey privateKey, Provider p) throws GeneralSecurityException, FileNotFoundException, IOException {

            Signature signatureAlgorithm = Signature.getInstance(""SHA256withRSA"", p);
            signatureAlgorithm.initSign(privateKey);
            FileInputStream fich = new FileInputStream(""Documento"");
            byte[] doc = new byte[fich.available()];
            fich.read(doc); 
            signatureAlgorithm.update(doc);           
            byte[] digitalSignature = signatureAlgorithm.sign();

            return digitalSignature;


}

-- Verify --
CertificateFactory cf = CertificateFactory.getInstance(""X.509"");
FileInputStream certfis = new FileInputStream(args[0]);
X509Certificate cert = (X509Certificate)cf.generateCertificate(certfis);
certfis.close();

PublicKey pubKey = cert.getPublicKey();

FileInputStream sigfis = new FileInputStream(args[1]);
byte[] sigToVerify = new byte[sigfis.available()]; 
sigfis.read(sigToVerify);
sigfis.close();

Signature sig = Signature.getInstance(""SHA256withRSA"");
sig.initVerify(pubKey);

FileInputStream datafis = new FileInputStream(args[2]);
byte[] doc = new byte[datafis.available()];
datafis.read(doc);
sig.update(doc);
datafis.close();

boolean verifies = sig.verify(sigToVerify);
System.out.println(""signature verifies: "" + verifies);

","","1537","<java><security><smartcard><pkcs#11>","0","","0","2015-12-01 15:19:27","","3","1","909742","","2015-12-01 15:19:27","2015-11-29 13:45:08",""
"6042811","CKR_DATA_LEN_RANGE = 0x00000021","I tried to pinvoke a PKCS#11 function in C#. I have a CKR_DATA_LEN_RANGE error in this C# code:
[DllImport(""D:/Program Files/Eracom/ProtectToolkit C SDK/bin/sw/cryptoki.dll"",
           SetLastError = true)]
private static extern UInt32 C_Encrypt(CK_SESSION_HANDLE hSession,
                                       IntPtr pData, CK_ULONG ulDataLen,
                                       out IntPtr pEncryptedData,out CK_ULONG pulEncryptedData);

/* ...Main... */
CK_BYTE[] text = new CK_BYTE[] {1,2,3,4,5,6,7,8};

System.UInt32 t, tt = (System.UInt32)text.Length;
IntPtr pdata = Marshal.AllocHGlobal(text[0]*text.Length);
Marshal.Copy(text, 0, pdata, text.Length);

IntPtr chif = IntPtr.Zero;
tt = (System.UInt32)Marshal.SizeOf(pdata);
rv = C_Encrypt(h, pdata, tt,out chif,out t);

What could be causing this error?
","I resolved the problem by my self. The C_Encrypt function takes byte arrays as arguments, not pointers to integers; this made my size computations wrong.
    [DllImport(""D:/Program Files/Eracom/ProtectToolkit C SDK/bin/sw/cryptoki.dll"",
               SetLastError = true)]
    private static extern UInt32 C_Encrypt(CK_SESSION_HANDLE hSession,
                                           CK_BYTE[] pData, CK_ULONG ulDataLen,
                                           CK_BYTE[] pEncryptedData, ref CK_ULONG pulEncryptedData);

","1518","<c#><pinvoke><pkcs#11>","1","2","1","2014-05-13 12:14:05","","0","","387076","","2012-03-02 13:48:55","2011-05-18 09:52:20",""
"12138477","charismathics pkcs11 dll (cmp11.dll) error","I have a Charismathics cssi middleware, and I want to use it with my smartcards. When I want to add its pkcs11 dll (cmp11.dll) file to my Security Devices, It gives an error ""Unable to add module"".
Does Anybody use Charismathics pkcs11 dll successfully?
Thanks in advance.
","","1513","<dll><smartcard><pkcs#11>","1","","0","2012-08-27 08:20:34","","5","","","","","2012-08-27 08:20:34",""
"30106966","Smartcard PKCS11 AES Key Gen Failure","I am attempting to create an AES 256 key on an ACOS5-64 smartcard and OMNIKEY 3121 card reader, using PKCS11 in python (using the PyKCS11 library).  So far, all the ""standard"" operations seem to work with regards to asymmetric crypto.  I have run plenty of code samples and pkcs11-tool commands, to initialize the token, set/change PINs, create RSA keypairs, etc.  So, the drivers are all functional (pcscd, CCID, PKCS11 middleware).
The following code is causing a problem:
from PyKCS11 import *
import getpass
libacospkcs = '/usr/lib/libacospkcs11.so'

def createTokenAES256(lbl):
   pkcs11 = PyKCS11Lib()
   pkcs11.load(libacospkcs)
   theOnlySlot = pkcs11.getSlotList()[0]
   session = pkcs11.openSession(theOnlySlot, CKF_SERIAL_SESSION | CKF_RW_SESSION)
   PIN = getpass.getpass('Enter User PIN to login:')
   session.login(PIN)

   t = pkcs11.getTokenInfo(theOnlySlot)
   print t.label
   print t.model
   print t.serialNumber

   template = (
      (CKA_CLASS, CKO_SECRET_KEY),
      (CKA_KEY_TYPE, CKK_AES),
      (CKA_VALUE_LEN, 32),
      (CKA_LABEL, ""A""),
      (CKA_PRIVATE, True),
      (CKA_SENSITIVE, True),
      (CKA_ENCRYPT, True),
      (CKA_DECRYPT, True),
      (CKA_TOKEN, True),
      (CKA_WRAP, True),
      (CKA_UNWRAP, True),
      (CKA_EXTRACTABLE, False))
   ckattr = session._template2ckattrlist(template)
   m = LowLevel.CK_MECHANISM()
   m.mechanism = LowLevel.CKM_AES_KEY_GEN

   key = LowLevel.CK_OBJECT_HANDLE()
   returnValue = pkcs11.lib.C_GenerateKey( session.session, m, ckattr, key)

   if returnValue != CKR_OK:
      raise PyKCS11Error(returnValue)

# Now run the method to create the key
createTokenAES256('TestAESKey')

However, I get an error when running it:
~/projects/smartcard $ python testpkcs11again.py 
Enter User PIN to login:
Token #A                        
ACOS5-64        
30A740C8704A
Traceback (most recent call last):
  File ""testcreateaes.py"", line 43, in <module>
    createTokenAES256('TestAESKey')
  File ""testcreateaes.py"", line 40, in createTokenAES256
    raise PyKCS11Error(returnValue)
PyKCS11.PyKCS11Error: CKR_ATTRIBUTE_VALUE_INVALID (0x00000013)

The thing is that if I switch the CKA_TOKEN line to False, then it ""works"".  Of course, by setting that to false, it makes the key a session object instead of a token object (i.e. after I logout, the key is wiped).  Using pkcs11-tool with --list-objects, the key is not there.  I can use the ACSCMU (GUI tool for token admin), I can create an AES key in the ""Secret Key Manager"" and it does create a persistent key.  But I have no way to see what the ACSCMU is doing to make it persistent (it may not be using PKCS11 at all).
If I had to guess the problem, I'd guess that it has to do with the session.  If CKA_TOKEN=True is invalid, then it seems the token is not actually in RW mode (as suggested by the CKF_RW_SESSION in the 9th line).  So far, I'm not sure what else to try or how to debug this.
","IMO there is nothing you can do about it but contact the producer of libacospkcs11.so and ask for an explanation. You will most likely be directed to the documentation which will state that symmetric keys can be created only as a session objects and all operations with such keys are performed in SW (not in the card) - this is rather a common practice with most of the commercially available cards and middleware suites.
BTW you can also try to call C_GetMechanismInfo for CKM_AES_KEY_GEN mechanism (and also other AES mechanisms you are planning to use) and check whether the CKF_HW flag is set in the response. This flag indicates whether the mechanism is performed by the device or in the software.
","1503","<python><aes><smartcard><pkcs#11>","4","0","2","2015-05-08 13:49:11","30111731","0","0","","","","2015-05-07 16:37:41",""
"30106966","Smartcard PKCS11 AES Key Gen Failure","I am attempting to create an AES 256 key on an ACOS5-64 smartcard and OMNIKEY 3121 card reader, using PKCS11 in python (using the PyKCS11 library).  So far, all the ""standard"" operations seem to work with regards to asymmetric crypto.  I have run plenty of code samples and pkcs11-tool commands, to initialize the token, set/change PINs, create RSA keypairs, etc.  So, the drivers are all functional (pcscd, CCID, PKCS11 middleware).
The following code is causing a problem:
from PyKCS11 import *
import getpass
libacospkcs = '/usr/lib/libacospkcs11.so'

def createTokenAES256(lbl):
   pkcs11 = PyKCS11Lib()
   pkcs11.load(libacospkcs)
   theOnlySlot = pkcs11.getSlotList()[0]
   session = pkcs11.openSession(theOnlySlot, CKF_SERIAL_SESSION | CKF_RW_SESSION)
   PIN = getpass.getpass('Enter User PIN to login:')
   session.login(PIN)

   t = pkcs11.getTokenInfo(theOnlySlot)
   print t.label
   print t.model
   print t.serialNumber

   template = (
      (CKA_CLASS, CKO_SECRET_KEY),
      (CKA_KEY_TYPE, CKK_AES),
      (CKA_VALUE_LEN, 32),
      (CKA_LABEL, ""A""),
      (CKA_PRIVATE, True),
      (CKA_SENSITIVE, True),
      (CKA_ENCRYPT, True),
      (CKA_DECRYPT, True),
      (CKA_TOKEN, True),
      (CKA_WRAP, True),
      (CKA_UNWRAP, True),
      (CKA_EXTRACTABLE, False))
   ckattr = session._template2ckattrlist(template)
   m = LowLevel.CK_MECHANISM()
   m.mechanism = LowLevel.CKM_AES_KEY_GEN

   key = LowLevel.CK_OBJECT_HANDLE()
   returnValue = pkcs11.lib.C_GenerateKey( session.session, m, ckattr, key)

   if returnValue != CKR_OK:
      raise PyKCS11Error(returnValue)

# Now run the method to create the key
createTokenAES256('TestAESKey')

However, I get an error when running it:
~/projects/smartcard $ python testpkcs11again.py 
Enter User PIN to login:
Token #A                        
ACOS5-64        
30A740C8704A
Traceback (most recent call last):
  File ""testcreateaes.py"", line 43, in <module>
    createTokenAES256('TestAESKey')
  File ""testcreateaes.py"", line 40, in createTokenAES256
    raise PyKCS11Error(returnValue)
PyKCS11.PyKCS11Error: CKR_ATTRIBUTE_VALUE_INVALID (0x00000013)

The thing is that if I switch the CKA_TOKEN line to False, then it ""works"".  Of course, by setting that to false, it makes the key a session object instead of a token object (i.e. after I logout, the key is wiped).  Using pkcs11-tool with --list-objects, the key is not there.  I can use the ACSCMU (GUI tool for token admin), I can create an AES key in the ""Secret Key Manager"" and it does create a persistent key.  But I have no way to see what the ACSCMU is doing to make it persistent (it may not be using PKCS11 at all).
If I had to guess the problem, I'd guess that it has to do with the session.  If CKA_TOKEN=True is invalid, then it seems the token is not actually in RW mode (as suggested by the CKF_RW_SESSION in the 9th line).  So far, I'm not sure what else to try or how to debug this.
","Figured it out on my own after a ton of digging through tons of examples:  CKA_ID is a required attribute if you are going to make a persistent (CKA_TOKEN=True) object.  Not sure how I was supposed to know that (never saw it in any documentation), but indeed it works beautifully after I've added that.
This code should work if you have you drivers setup properly:
from PyKCS11 import *
import getpass
libacospkcs = '/usr/lib/libacospkcs11.so'

def createTokenAES256(label):
   pkcs11 = PyKCS11Lib()
   pkcs11.load(libacospkcs)
   theOnlySlot = pkcs11.getSlotList()[0]
   session = pkcs11.openSession(theOnlySlot, CKF_SERIAL_SESSION | CKF_RW_SESSION)
   PIN = getpass.getpass('Enter User PIN to login:')
   session.login(PIN)

   print pkcs11.getTokenInfo(theOnlySlot)

   template = (
      (CKA_CLASS, CKO_SECRET_KEY),
      (CKA_KEY_TYPE, CKK_AES),
      (CKA_VALUE_LEN, 32),
      (CKA_LABEL, label),
      (CKA_ID, ""1244""),
      (CKA_PRIVATE, True),
      (CKA_SENSITIVE, True),
      (CKA_ENCRYPT, True),
      (CKA_DECRYPT, True),
      (CKA_TOKEN, True),
      (CKA_WRAP, True),
      (CKA_UNWRAP, True),
      (CKA_EXTRACTABLE, False))
   ckattr = session._template2ckattrlist(template)
   m = LowLevel.CK_MECHANISM()
   m.mechanism = LowLevel.CKM_AES_KEY_GEN

   key = LowLevel.CK_OBJECT_HANDLE()
   returnValue = pkcs11.lib.C_GenerateKey( session.session, m, ckattr, key)

   if returnValue != CKR_OK:
      raise PyKCS11Error(returnValue)

# Now execute the above to create AES256 key
createTokenAES256('TestKey')

After this, I can logout of the card and see the new object using pkcs11-tool:
$ pkcs11-tool --module=/usr/lib/libacospkcs11.so --list-objects
Using slot 0 with a present token (0x0)
Secret Key Object; unknown key algorithm 31
  label:      TestKey
  ID:         31323434
  Usage:      encrypt, decrypt, wrap, unwrap, derive

","1503","<python><aes><smartcard><pkcs#11>","4","6","2","2015-05-08 13:49:11","30111731","0","0","","","","2015-05-07 16:37:41",""
"5183812","PKCS#11 Java - Invalid access to memory location","
I'm getting trouble with my PKCS#11 provider. Here's my code:
String pkcs11ConfigFile = ""C:\\pkcs11.cfg"";  
Provider pkcs11Provider = new sun.security.pkcs11.SunPKCS11(pkcs11ConfigFile);  
Security.addProvider(pkcs11Provider);

pkcs11.cfg file:  
name = SmartCard
library = C:\Program Files\CryptoTech\CryptoCard\CCPkiP11.dll
slot = 3

After running the code, I've got the exception:  

java.security.ProviderException: Initialization failed
        at sun.security.pkcs11.SunPKCS11.(SunPKCS11.java:340)
        at sun.security.pkcs11.SunPKCS11.(SunPKCS11.java:86)
        at signature.NewClass.main(NewClass.java:15)  
Caused by: java.io.IOException: Invalid access to memory location.
C:\Program Files\CryptoTech\CryptoCard\CCPkiP11.dll

PS. Card reader is connected, card is inserted, slot has proper value..
Thanks for any help!
","Sounds like a faulty PKCS#11 module?
Try to use it through PKCS#11 spy http://www.opensc-project.org/opensc/wiki/UsingOpensc
","1484","<java><security><pkcs#11>","0","0","1","2011-03-04 08:28:04","5189994","2","","40342","","2011-03-04 08:28:04","2011-03-03 16:50:12",""
"40500224","How do I sign a PDF document using a LUNA HSM?","I use a java with Itext for make a digital sign PDF document using a LUNA HSM.
My objective is sign a document with PKCS11 and assemble the certificates chain from the HSM.  I dont want to install certificates into the server.
I try to use a sample program called C4_01_SignWithPKCS11HSM.java from the iText.
I take this from:
http://developers.itextpdf.com/examples/security/digital-signatures-white-paper/digital-signatures-chapter-4
When I compiled  program, it show me the follow warning:

[luna@sumCentosHsm pdf]$ javac -Xlint signPdf.java signPdf.java:93:
  warning: [deprecation] OcspClientBouncyCastle() in
  OcspClientBouncyCastle has been deprecated
          OcspClient ocspClient = new OcspClientBouncyCastle();

Also, how to build the configuration file and parameters.
I would like to know if someone had the same problem
Thank you.
","Perhaps you have a special circumstance where you want to use HSM keys to sign documents. Most of the time, document signing is done with 'person-entity' PKI certificates. In this scenario, your local Certificate Authority (Windows Server), has been configured to store the CA's private key on the SafeNet HSM. Then the local CA would issue personal PKI certificates to users of that domain (Bob Smith). Then a user, Bob, could use his certificate that is local to his machine to sign documents. This would provide integrity and nonrepudiation, and the certificate would signed by that individual.
In your implementation, any signed document would simply display the subject name of the HSM certificate, which in most implementations would be a domain's CA name, etc.
","1478","<java><pkcs#11><hsm>","1","-1","2","2017-06-20 06:57:06","","0","2","709671","","2016-11-11 09:26:54","2016-11-09 04:34:18",""
"40500224","How do I sign a PDF document using a LUNA HSM?","I use a java with Itext for make a digital sign PDF document using a LUNA HSM.
My objective is sign a document with PKCS11 and assemble the certificates chain from the HSM.  I dont want to install certificates into the server.
I try to use a sample program called C4_01_SignWithPKCS11HSM.java from the iText.
I take this from:
http://developers.itextpdf.com/examples/security/digital-signatures-white-paper/digital-signatures-chapter-4
When I compiled  program, it show me the follow warning:

[luna@sumCentosHsm pdf]$ javac -Xlint signPdf.java signPdf.java:93:
  warning: [deprecation] OcspClientBouncyCastle() in
  OcspClientBouncyCastle has been deprecated
          OcspClient ocspClient = new OcspClientBouncyCastle();

Also, how to build the configuration file and parameters.
I would like to know if someone had the same problem
Thank you.
","import java.security.*;
import java.security.KeyStore.*;
import java.security.cert.X509Certificate;
import java.security.cert.Certificate;
import com.safenetinc.luna.*;
import java.io.*;
import com.itextpdf.text.*;
import com.itextpdf.text.pdf.*;
import com.itextpdf.text.pdf.security.*;

public class SignPdfUsingLuna{
    private static String keyAlias = null;
    private static String slotPin = null;
    private static int slotId;
    private static String inputFile = null;
    private static String outputFile = null;
    private static KeyStore ks = null;
    private static PrivateKeyEntry prKE = null;

    private static void usage(){
        System.out.println(""Command usage :-"");
        System.out.println(""java SignPdfUsingLuna <SlotNumber> <SlotPassword> <KeyAlias> <InputFile>"");
    }

    public static void main(String args[]){
        try{
            slotId = Integer.parseInt(args[0]);
            slotPin = args[1];
            keyAlias = args[2];
            inputFile = args[3];
            ks = KeyStore.getInstance(""Luna"");
            ks.load(new ByteArrayInputStream((""slot:""+slotId).getBytes()),slotPin.toCharArray());
            ProtectionParameter param = new PasswordProtection(""abcd"".toCharArray());
            prKE = (PrivateKeyEntry)ks.getEntry(keyAlias,param);
            X509Certificate cert = (X509Certificate)ks.getCertificate(keyAlias);
            Certificate[] certchain =  (Certificate[]) ks.getCertificateChain(keyAlias);

            PdfReader readPdf = new PdfReader(inputFile);
            FileOutputStream outFile = new FileOutputStream(""Signed""+inputFile);
            PdfStamper stamp = PdfStamper.createSignature(readPdf, outFile, '\0');
            PdfSignatureAppearance psa = stamp.getSignatureAppearance();
            psa.setReason(""Signed by :- Sam Paul"");
            psa.setLocation(""India"");
            Image img = Image.getInstance(""Logo.jpg"");
            psa.setImage(img);
            psa.setVisibleSignature(new Rectangle(100, 100, 300, 200), 1, ""Signature"");
            ExternalDigest dgst = new BouncyCastleDigest();
            Provider prod = ks.getProvider();
            PrivateKey pk = prKE.getPrivateKey();
            ExternalSignature sign = new PrivateKeySignature(pk,DigestAlgorithms.SHA256,prod.getName());
            MakeSignature.signDetached(psa, dgst, sign, certchain, null, null, null, 0, MakeSignature.CryptoStandard.CMS);
            stamp.close();
    }catch(ArrayIndexOutOfBoundsException aio){
            usage();
    }catch(NumberFormatException nfe){
            System.out.println(""Please enter a valid slot number"");
            usage();
    }catch(Exception e){
            e.printStackTrace();
    }
}

Hope this helps.
Sam.
","1478","<java><pkcs#11><hsm>","1","1","2","2017-06-20 06:57:06","","0","2","709671","","2016-11-11 09:26:54","2016-11-09 04:34:18",""
"47412758","SunPKCS11 provider not found with keytool","I am running the following command with java 9 : 

keytool -keystore NONE -storetype PKCS11 -providerClass
     sun.security.pkcs11.SunPKCS11 -providerArg pkcs11conf -list


and get the flowing error :

keytool error: java.lang.Exception: Provider
  ""sun.security.pkcs11.SunPKCS11"" not found

In Java 8 it works.
How does one use keytool with SunPKCS11 provider?
","The problem was with my pkcs11conf file. Java don't like the single backslash in my DLL path :  

""C:\Path\to\my\pkcs11lib\mypkcs11lib.dll"" : Wrong
""C:\\Path\\to\my\\pkcs11lib\\mypkcs11lib.dll"" : OK

The different between Java 8 and Java 9 is the error message.
Java 9 : 
keytool error: java.lang.Exception: Provider ""sun.security.pkcs11.SunPKCS11"" not found

Java 8 :
keytool error: java.lang.reflect.InvocationTargetException

I realized that when I added -v to the command.
Java 9 :
java.lang.Exception: Provider ""sun.security.pkcs11.SunPKCS11"" not found
        at java.base/sun.security.tools.keytool.Main.doCommands(Main.java:798)
        at java.base/sun.security.tools.keytool.Main.run(Main.java:397)
        at java.base/sun.security.tools.keytool.Main.main(Main.java:390)
Caused by: sun.security.pkcs11.ConfigurationException: Absolute path required for library value: xxx.dll
        at jdk.crypto.cryptoki/sun.security.pkcs11.Config.parseLibrary(Config.java:682)
        at jdk.crypto.cryptoki/sun.security.pkcs11.Config.parse(Config.java:392)
        at jdk.crypto.cryptoki/sun.security.pkcs11.Config.<init>(Config.java:210)
        at jdk.crypto.cryptoki/sun.security.pkcs11.SunPKCS11$1.run(SunPKCS11.java:113)
        at jdk.crypto.cryptoki/sun.security.pkcs11.SunPKCS11$1.run(SunPKCS11.java:110)
        at java.base/java.security.AccessController.doPrivileged(Native Method)
        at jdk.crypto.cryptoki/sun.security.pkcs11.SunPKCS11.configure(SunPKCS11.java:110)
        at java.base/sun.security.tools.KeyStoreUtil.loadProviderByName(KeyStoreUtil.java:285)
        at java.base/sun.security.tools.KeyStoreUtil.loadProviderByClass(KeyStoreUtil.java:309)
        at java.base/sun.security.tools.keytool.Main.doCommands(Main.java:788)
        ... 2 more

Java 8:
java.lang.reflect.InvocationTargetException
        at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
        at sun.reflect.NativeConstructorAccessorImpl.newInstance(Unknown Source)
        at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(Unknown Source)
        at java.lang.reflect.Constructor.newInstance(Unknown Source)
        at sun.security.tools.keytool.Main.doCommands(Unknown Source)
        at sun.security.tools.keytool.Main.run(Unknown Source)
        at sun.security.tools.keytool.Main.main(Unknown Source)
Caused by: java.security.ProviderException: Error parsing configuration
        at sun.security.pkcs11.Config.getConfig(Config.java:88)
        at sun.security.pkcs11.SunPKCS11.<init>(SunPKCS11.java:129)
        at sun.security.pkcs11.SunPKCS11.<init>(SunPKCS11.java:103)
        ... 7 more
Caused by: sun.security.pkcs11.ConfigurationException: Absolute path required for library value: xxx.dll
        at sun.security.pkcs11.Config.parseLibrary(Config.java:690)
        at sun.security.pkcs11.Config.parse(Config.java:398)
        at sun.security.pkcs11.Config.<init>(Config.java:220)

","1475","<java><keytool><java-9><pkcs#11><java-security>","2","0","1","2017-11-22 08:13:36","47429719","5","1","1746118","","2017-11-22 03:53:31","2017-11-21 12:06:35",""
"36751102","Inserting Multiple digital signatures into PDF using iTextSharp","I am using iTextSharp & pkcs11RsaSignature to insert digital signature on every page of PDF document. following is my code:
        PdfReader pdfSource = new PdfReader(...);
        NumberOfPages = pdfSource.NumberOfPages;
        pdfSource.Close();
        CurrentPage = 1;

        while (CurrentPage <= NumberOfPages)
        {
            Temp3PDF = Temp1PDF;
            Temp1PDF = Temp2PDF;
            Temp2PDF = Temp3PDF;

            PdfReader pdfSrc = new PdfReader(Temp1PDF);
            FileStream pdfDes = new FileStream(Temp2PDF, FileMode.Create);
            PdfStamper pdfStamper = PdfStamper.CreateSignature(pdfSrc, pdfDes, '\0', Path.GetTempFileName(), true);                
            PdfSignatureAppearance pdfSignAppearance = pdfStamper.SignatureAppearance;
            pdfSignAppearance.Acro6Layers = false;
            pdfSignAppearance.SetVisibleSignature(new iTextSharp.text.Rectangle(100, 100, 250, 150), CurrentPage, null);
            MakeSignature.SignDetached(pdfSignAppearance, pkcs11RsaSignature, certPath, null, null, null, 0, CryptoStandard.CADES);
            pdfStamper.Close();
            pdfDes.Close();
            pdfSrc.Close();
            CurrentPage++;
        }

As can be seen, this is NOT a very elegant way of programming as file is read and written as many times as number of pages. Is there any other way of inserting digital signature on every page of PDF document.
What is actually wanted to do here is that - in case the PDF document is split into pages (in future), since the contents haven't changed, so technically digital signature should be valid for the pages it is signed. But I realize the signature will get invalidated. (Rephrasing the question - Is there any way of digitally signing only one page of pdf and not entire document?)
To Bruno Lowagie (you are expert) : Except that it is not provided in PDF specification, it is possible to partially sign a PDF file by signing the hash computed only on selected components. Do you think it is possible to upgrade PDF specifications to accommodate such requirement. Thank you for your help.
","
What is actually wanted to do here is that - in case the PDF document is split into pages (in future), since the contents haven't changed, so technically digital signature should be valid for the pages it is signed.

This train of thought is based on a misconception. Yes, you have the visualization of the signature on one specific page, but cryptographically the signature signs the whole PDF with the sole exception of the embedded CMS signature container itself.
But you found out about this yourself. Thus, let's consider your rephrased question:

But I realize the signature will get invalidated. (Rephrasing the question - Is there any way of digitally signing only one page of pdf and not entire document?)

In the past there had been two ways which might have allowed to sign single pages:

using an object digest focusing on the page in question;
using a byte range digest only consisting of byte ranges covering objects related to the page in question.

Nowadays, though, these techniques are not usable options anymore because

object digests have been deprecated a long time ago, the ISO PDF specification does not even mention them anymore;
even though ISO 32000-1 still allows byte range digests to cover such a collection of fragments of the PDF, PDF processors (in particular Adobe Reader) require the byte ranges to cover the whole PDF file with the sole exception of the embedded signature container; newer specifications (e.g. the ETSI PAdES specifications and the ISO 32000-2 drafts) also require this.

Thus, no, there is no way of digitally signing only one page of pdf and not entire document, at least not in an interoperable manner.

An option for achieving something similar as page-wise signatures in a multi-page PDF would be to

split the PDF into multiple PDFs, each containing a single page only;
signing each of these single page PDFs; and
putting all these single-page PDFs into a PDF portable collection (aka portfolio) and arranging it to display the individual contained PDFs one after the other in the correct order.

","1463","<pdf><itext><digital-signature><pkcs#11>","1","2","1","2016-04-22 08:53:50","36788933","6","0","6231640","","2016-04-21 08:15:58","2016-04-20 17:31:25",""
"3449153","What's the difference between CAC cards and a 'generic' smart card?","We're trying to enable our rich client C++ Windows application to utilise DoD CAC cards.
We're using a third party library to secure our client/server communication using SSL, and it recognises/handles generic smart cards, but only if the certificate was created by its own, bundled application.
Why? Isn't a certificate a certificate? How do they vary?
Specifically, can anyone point me to condensed, technical documentation that explains what is mandated by the relevant standards and what remains implementation defined? I've tried looking at the actual specs, but they are too detailed, and I've found very vague articles, that don't answer my questions. I'm looking for something in between.
","
A certificate is a certificate. Certificates are usually ""created"" by a CA, not by the smart card vendor personalization software. Access to keys is what matters when using smart cards.
Think of smart cards as CD-s. They all look the same but you need to know the format on the disk. Yes, there's a ""generic"" format that can be read by most computers but some special software can write special stuff on the disk, others can't read.

Last but not least, if your software makes use of PKCS#11 then as long as you have a PKCS#11 provider for your card (there are several CAC modules and ""generic"" vendor cards usually come with one as well) you don't need to care about the actual card, because PKCS#11 abstracts the details away.
","1461","<security><smartcard><pkcs#11><cac>","4","0","2","2012-03-16 09:41:02","3809871","1","2","21234","","2012-03-16 09:41:02","2010-08-10 13:00:25",""
"3449153","What's the difference between CAC cards and a 'generic' smart card?","We're trying to enable our rich client C++ Windows application to utilise DoD CAC cards.
We're using a third party library to secure our client/server communication using SSL, and it recognises/handles generic smart cards, but only if the certificate was created by its own, bundled application.
Why? Isn't a certificate a certificate? How do they vary?
Specifically, can anyone point me to condensed, technical documentation that explains what is mandated by the relevant standards and what remains implementation defined? I've tried looking at the actual specs, but they are too detailed, and I've found very vague articles, that don't answer my questions. I'm looking for something in between.
","I don't have enough points to comment, but I wanted to agree with @Jay.  You probably need to configure this third-party library to trust the DoD root certs, so that when a CAC user presents his client cert, your app can trust it.
The DoD root certs are publicly available:
http://dodpki.c3pki.chamb.disa.mil/rootca.html
Also if the behavior you are observing is that the client isn't even getting prompted to choose a client cert, or you are not observing a client cert being sent in the packet trace, then this may also be because your server does not trust the DoD CA.  When when a well behaved server requests a client cert, it also advertises the distinguished names(dn) of the CA's that it trusts.  A well behaved client will then inspect that list, and compare those names the the issuers of the cleint certs that it has available.  If there is no match then the client will send a ""null"" cert.  I know IIS/Apache and Firefox/IE/Chrome behave this way.  Opera, however, does not seem to discriminate based on the advertised issuers, and will send any cert that client has lying around.
","1461","<security><smartcard><pkcs#11><cac>","4","2","2","2012-03-16 09:41:02","3809871","1","2","21234","","2012-03-16 09:41:02","2010-08-10 13:00:25",""
"34260735","How to load a pkcs#11 library module from different path instead of loading from /usr/local/lib/","Lets say we installed our PKCS#11 project in one system successfully and library saved in '/usr/local/lib/'. 
Also it's working fine(able to load pkcs#11 lib module in applications). 
Now how can we load the module in other system with the same library...!  
","Have taken the shared library of pkcs#11 module and also dependent library.
Checked the dependencies of shared library using command - 'ldd'
Based on result of 'ldd libpkcsmod.so', have installed required packages and copied dependent library to /usr/local/lib/.
Finally run the 'ldconfig' in order to create, update, and remove the necessary links and cache (for use by the run-time linker, ld.so) to the most recent shared libraries found in the directories specified on the command line, in the file /etc/ld.so.conf, and in the trusted directories (/usr/lib, /lib64 and /lib).
Finally able to load the pkcs#11 module in the applications like- Thunderbird, firefox e.t.c..
","1453","<linux><pkcs#11>","0","1","1","2015-12-16 07:08:45","34305890","9","1","","","","2015-12-14 06:06:24",""
"54802323","PKCS#11 library not found on 64bit Windows","In my job I have a requirement to sign XML file with certfifcate from SmartCard. Everything works fine but on 32bit Windows 7 VM.
The problems occur when I try to use the same code on 64bit Windows 10. I get error that ""PKCS#11 not found"" and ""no such algorithm"".
I use xades4j package. I've tried probably all solutions found in the web i.e. 

Used different .dll libraries (pkcs11.dll, opensc-spy.dll, CPPkiP.dll, esp2003csp11.dll) in both 32 and 64 bits versions.
Placed .dll in both System32 and SysWOW64 directories.
Updated drivers for my reader (IDBridge CT30).
Changed jre to 32bit.
Used solutions from PKCS11 Reference Guide (without xades4j) - it also worked only on 32 bit.

Nothing helps and always the same exceptions occur. If someone have any ideas what else I could do, I will be really thankful for tips.
Best regards.
Caused by: java.security.KeyStoreException: PKCS11 not found
at java.security.KeyStore.getInstance(Unknown Source)
at java.security.KeyStore$Builder$2$1.run(Unknown Source)
at java.security.KeyStore$Builder$2$1.run(Unknown Source)
at java.security.AccessController.doPrivileged(Native Method)
... 7 more
Caused by: java.security.NoSuchAlgorithmException: no such algorithm: PKCS11 for provider SunPKCS11-SmartCard
at sun.security.jca.GetInstance.getService(Unknown Source)
at sun.security.jca.GetInstance.getInstance(Unknown Source)
at java.security.Security.getImpl(Unknown Source)
... 11 more

","I found library which solved my problem. It's https://github.com/esig/dss. I used JavaSE11(jdk-11.0.2), pkcs11.dll placed in C:/Windows/System32 directory.
Before run application it is necessary to add VM argument -Djava.security.debug=sunpkcs11,pkcs11 
","1443","<java><xml><smartcard><pkcs#11><xades4j>","1","0","1","2019-03-20 14:50:49","55263695","2","1","","","","2019-02-21 08:22:02",""
"8218566","Java Sun PKCS#11 provider, HSM token LOGIN REQUIRED flag not set and empty list of aliases","I'm Pavel and I'm mainly a Java developer. Here is my problem:
I'm trying to list aliases in HSM slot using Java Sun PKCS#11 provider and I'm getting an empty list. I have tried it with Java 6 and 7 on Windows XP/Server platforms.
I downloaded Sun PKCS#11 sources and examined them, switched on debugging, did other tricks so finally I discovered that the aliases map is empty because the token has LOGIN_REQUIRED flag not set. In Sun PKCS#11 implementation there is one IF construct so when this flag is not set even the PIN bytes are provided to the keystore there is no C_Login call!
I find it is strange! Can someone explain me if it is a bug in Sun implementation of PKCS#11 provider or there is a general idea behind it?
Anyway when I ""hack"" the original sources so if there is a PIN provided It makes a login op to token no matter if the LOGIN_REQUIRED flag is set or not and I got the aliases from the token!
","That's correct, the Sun PKCS#11 provider tries to look for all the private keys that are visible publicly (without logging in) when finding aliases. After that, it will try and find a viable certificate chain for the private keys (first by PKCS#11 ID, then by X509 issuer).
I haven't got a clue why, but it seems to me that the PKCS#11 provider came to live at the same time that the Sparc T1 processor (Niagara) was introduced, which contains a cryptographic processor. There has never been any compatability data provided by Sun/Oracle - I presume their main focus was getting the T1 working within Java - this is however a guess. The only way to know for sure it to ask.
If you want to have a better provider, you can take a look at the IAIK software (whose lower level, open source, implementation is used by Sun/Oracle). They do provide support and compatability statements. This is, however, a commercial product.
Or you can get your patch accepted, I would certainly be interested in an option to login before the available private keys are looked up using PKCS#11 FindObjects. If you file a bug report I will certainly vote for it.
","1438","<java><pkcs#11><aliases><hsm>","0","0","1","2011-11-21 21:23:29","","0","","","","","2011-11-21 21:10:00",""
"9430343","RSA - Encryption with negative exponent","Well guys I am trying to encrypt (actually sign) data using Public and Private exponent and modulus, It is in C#.NET and I can't use RSACryptoServiceProvider because it needs also both prime numbers and other CRT stuff.
So I am trying to do following:
private Byte[] signData()
{
  BigInteger biPrivEx = new BigInteger(this.privEx); // Those are byte[]
  BigInteger biPubEx = new BigInteger(this.pubEx);
  BigInteger biMod = new BigInteger(this.mod);          

  BigInteger cyph = BigInteger.ModPow(new BigInteger(pkcs11), biPrivEx, biMod); // This raise exception

  return cyph.ToByteArray();;
}

But the problem is I am getting Out Of Range Exception because my private exponent is negative number.
What am I doing wrong? Or is possible to easily recovery CRT from this? Or maybe is there any better way how to do it?
In different program I am able to this with data I am using, so I have got reference to verify it.
","The problem is that you got a negative private exponent in the first place. Depending on how you got this broken exponent try:

Adding n to it
Concating a 00 byte to the array, to make it parse correctly.

You should also be careful about endianness issues. .net's BigInteger uses little endian, other binary formats might use big endian.

Try:
BigInteger ParseBinaryLE(byte[] raw)
{
   return new BigInteger(raw.Concat(new byte[]{0}).ToArray());
}

BigInteger ParseBinaryBE(byte[] raw)
{
   return new BigInteger(raw.Reverse().Concat(new byte[]{0}).ToArray());
}


AFAIK it is also possible to recover P and Q (and from those the rest of the parameters) when you know e, d and n.
","1433","<c#><.net><algorithm><rsa><pkcs#11>","1","1","1","2012-02-24 12:18:31","9430464","0","","","","","2012-02-24 11:56:37",""
"33956916","PKCS11# get certificate private key","I would like to sign HttpWebRequest (c #) using a certificate stored on a smart card. Access to the private key only after the administration have PIN. 
I tried at the outset to connect using:
PKCS11-tool.exe --module enigmap11.dll --list-slots --list-objects --show-info --login --pin 1111 
Unfortunately it receives only identifier of the private key. 
Is using PKCS11-tool can somehow retrieve the private key and save the file * .der so as to attach the file to the HttpWebRequest c #? 
Or maybe you know some other method to download the private key but c #? I join the library enigmap11.dll maybe someone knows how to draw from it the method - it seems like pkcs11.dll.
enigmap11.dll
","Most devices won't let the key out of the device for security purposes, so you are out of luck here. If you need to use PKCS#11 in HTTPS, it's possible with the components offered by our SecureBlackbox (free licenses are available). With them you can use the certificate stored in the PKCS#11 device for client-side authentication of the TLS or HTTPS client. 
","1431","<pkcs#11>","0","0","2","2016-02-21 11:54:26","","0","2","","","","2015-11-27 11:57:21",""
"33956916","PKCS11# get certificate private key","I would like to sign HttpWebRequest (c #) using a certificate stored on a smart card. Access to the private key only after the administration have PIN. 
I tried at the outset to connect using:
PKCS11-tool.exe --module enigmap11.dll --list-slots --list-objects --show-info --login --pin 1111 
Unfortunately it receives only identifier of the private key. 
Is using PKCS11-tool can somehow retrieve the private key and save the file * .der so as to attach the file to the HttpWebRequest c #? 
Or maybe you know some other method to download the private key but c #? I join the library enigmap11.dll maybe someone knows how to draw from it the method - it seems like pkcs11.dll.
enigmap11.dll
","The sole purpose of a smart card is to prevent you from doing what you are trying to do. 
You can never extract a private key from a smart card. Otherwise it wouldn't be a smart card.
Why are you trying to do this? 
","1431","<pkcs#11>","0","1","2","2016-02-21 11:54:26","","0","2","","","","2015-11-27 11:57:21",""
"26270086","OpenSSL interface with a specific PKCS11 engine binary","I have a PKCS11 library from a HSM and I would like to use the OpenSSL to interface with the PKCS11 library to generate keys and certificates. 
How do I do that without needing to install external third party software other than the HSM, PKCS11 binary provided by the HSM and the OpenSSL.
","Depending on what exactly your library includes, how it's compiled, and how compliant it is with OpenSSL, I believe you just need to use the openssl engine command, although I've never used it before to add an engine.
This seems like a pretty good source of information.  It talks about some third-party software, but I think that's just for testing/troubleshooting (unless you consider EVP, an OpenSSL API, third-party software).  Starting on page 26, it seems to have some comprehensive documentation on how to add the PKCS11 engine to OpenSSL.  
http://www.dnssec.cz/files/nic/doc/hsm.pdf
","1408","<openssl><pkcs#11><hsm>","2","1","1","2014-10-12 06:35:14","","0","2","","","","2014-10-09 03:58:43",""
"40130877","PKCS#11 Smartcard getting error: javax.net.ssl.SSLHandshakeException due to java.security.InvalidKeyException: The RSA asymmetric cipher","Situation
I am working on a project where we must get Smartcard to work in Linux. The card is by manufacturer Izenpe. I get an javax.net.ssl.SSLHandshakeException every time when I am doing SSL handshake with the server.
I load the Izenpe driver with these code:
private final static String config_path3 = ""name=IZENPE\nlibrary=/usr/lib/libbit4ipki.so"";

...

String config = config_path3;
Provider provider = new SunPKCS11(new ByteArrayInputStream(config.getBytes()));
Security.removeProvider(""IAIK"");
Security.insertProviderAt(provider, 1);
try {
    keystore = KeyStore.getInstance(""PKCS11"", provider);
} catch (KeyStoreException e) {
    throw e;
}
KeyStore.Builder builder = KeyStore.Builder.newInstance(""PKCS11"", provider, 
        new KeyStore.CallbackHandlerProtection(new UtilTarjetas(). new callback()));
keystore = builder.getKeyStore();

It loads the certificates to show in a table, and I can proceed to the part to obtain the OutputStream from the response of server, where it fails when we do SSL handshake (signing the challenge). Full stacktraces below:
javax.net.ssl.SSLHandshakeException: Error signing certificate verify
    at sun.security.ssl.Alerts.getSSLException(Alerts.java:192)
    at sun.security.ssl.SSLSocketImpl.fatal(SSLSocketImpl.java:1904)
    at sun.security.ssl.Handshaker.fatalSE(Handshaker.java:279)
    at sun.security.ssl.ClientHandshaker.serverHelloDone(ClientHandshaker.java:1054)
    at sun.security.ssl.ClientHandshaker.processMessage(ClientHandshaker.java:341)
    at sun.security.ssl.Handshaker.processLoop(Handshaker.java:901)
    at sun.security.ssl.Handshaker.process_record(Handshaker.java:837)
    at sun.security.ssl.SSLSocketImpl.readRecord(SSLSocketImpl.java:1023)
    at sun.security.ssl.SSLSocketImpl.performInitialHandshake(SSLSocketImpl.java:1332)
    at sun.security.ssl.SSLSocketImpl.startHandshake(SSLSocketImpl.java:1359)
    at sun.security.ssl.SSLSocketImpl.startHandshake(SSLSocketImpl.java:1343)
    at sun.net.www.protocol.https.HttpsClient.afterConnect(HttpsClient.java:563)
    at sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection.connect(AbstractDelegateHttpsURLConnection.java:185)
    at sun.net.www.protocol.http.HttpURLConnection.getOutputStream(HttpURLConnection.java:1092)
    at sun.net.www.protocol.https.HttpsURLConnectionImpl.getOutputStream(HttpsURLConnectionImpl.java:250)
    at gestores.comunicacion.gisscide.HTTPS_TGSS.doHTTP_Get(HTTPS_TGSS.java:470)
    at gestores.comunicacion.Gestor_Comunicaciones$RecibeMensajesSSL.descargaMsgHTTPS(Gestor_Comunicaciones.java:1284)
    at gestores.comunicacion.Gestor_Comunicaciones$RecibeMensajesSSL.run(Gestor_Comunicaciones.java:1852)
    at java.lang.Thread.run(Thread.java:745)
Caused by: java.security.InvalidKeyException: The RSA asymmetric cipher only operates with RSA keys; unsupported key found (sun.security.pkcs11.P11Key$P11PrivateKey)
    at com.entrust.toolkit.security.provider.RSA.a(Unknown Source)
    at com.entrust.toolkit.security.provider.RSA.engineGetKeySize(Unknown Source)
    at javax.crypto.Cipher.passCryptoPermCheck(Cipher.java:1052)
    at javax.crypto.Cipher.checkCryptoPerm(Cipher.java:1010)
    at javax.crypto.Cipher.init(Cipher.java:1209)
    at java.security.Signature$CipherAdapter.engineInitSign(Signature.java:1254)
    at java.security.Signature$Delegate.init(Signature.java:1128)
    at java.security.Signature$Delegate.chooseProvider(Signature.java:1085)
    at java.security.Signature$Delegate.engineInitSign(Signature.java:1158)
    at java.security.Signature.initSign(Signature.java:529)
    at sun.security.ssl.RSASignature.engineInitSign(RSASignature.java:125)
    at java.security.Signature$Delegate.engineInitSign(Signature.java:1156)
    at java.security.Signature.initSign(Signature.java:529)
    at sun.security.ssl.HandshakeMessage$CertificateVerify.<init>(HandshakeMessage.java:1556)
    at sun.security.ssl.ClientHandshaker.serverHelloDone(ClientHandshaker.java:1049)
    ... 15 more

It seems that when getting the unextractable private key in the card for signing the challenge in SSL handshake, it fail because PKCS#11 private key is not supported/recognized as valid. 
By adding this line into my code I get many lines of logs about SSL.
Properties systemProps = System.getProperties();
systemProps.put(""javax.net.debug"", ""all"");          
System.setProperties(systemProps);

At the end I can see this:
SESSION KEYGEN:
PreMaster Secret:
0000: A5 F7 9C 89 A4 B5 B4 66   D4 DC CC 40 45 C8 41 07  .......f...@E.A.
0010: 0E F1 E9 5C 99 36 C8 84   06 B0 6B 95              ...\.6....k.
CONNECTION KEYGEN:
Client Nonce:
0000: 58 07 74 02 CD 8B 65 BB   E0 03 8D 53 95 C4 87 8C  X.t...e....S....
0010: EE 95 B2 92 C1 DF E8 CA   B0 7D E4 AD 16 B7 31 D2  ..............1.
Server Nonce:
0000: 4A 41 AA 83 DD 1D 9C DE   84 4A 56 40 A3 32 F7 53  JA.......JV@.2.S
0010: 18 48 32 BD 7A E2 3A 1D   19 AD 67 6E DD E1 3B 20  .H2.z.:...gn..; 
Master Secret:
0000: 72 58 C0 3D 90 67 2E 3B   B2 AE D4 54 15 AB 18 AA  rX.=.g.;...T....
0010: 95 73 91 9A DA AE EF 3D   77 A1 CD 7A 68 8B 37 56  .s.....=w..zh.7V
0020: 0F 05 64 EB DD 93 AF 6C   C4 C2 8A 75 A7 C2 CA 06  ..d....l...u....
Client MAC write Secret:
0000: 30 2C D3 A0 4C 2D 3F 67   ED B9 64 B8 3B 81 47 0E  0,..L-?g..d.;.G.
0010: D1 7B 75 A9                                        ..u.
Server MAC write Secret:
0000: 4B 22 25 8E 81 D1 55 6D   B9 40 0F 2A A2 26 49 F5  K""%...Um.@.*.&I.
0010: 66 6A 91 AE                                        fj..
Client write key:
0000: 72 BD C0 56 3C 1A E5 61   90 2C A6 AE AA FE B9 71  r..V<..a.,.....q
Server write key:
0000: C6 CE F4 C6 CE A4 E3 55   F6 2D 29 D6 2E 4C CA 7A  .......U.-)..L.z
Client write IV:
0000: 7D DB C8 17 F4 18 72 33   A1 DC 03 D6 2F 87 65 F1  ......r3..../.e.
Server write IV:
0000: 58 B1 4E BE 1A 90 0C B3   0D AE 5C 5B CD 36 74 4D  X.N.......\[.6tM
%% Invalidated:  [Session-3, TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA]
Thread-7, SEND TLSv1 ALERT:  fatal, description = handshake_failure
Thread-7, WRITE: TLSv1 Alert, length = 2
[Raw write]: length = 7
0000: 15 03 01 00 02 02 28                               ......(
Thread-7, called closeSocket()
Thread-7, handling exception: javax.net.ssl.SSLHandshakeException: Error signing certificate verify
Finalizer, called close()
Finalizer, called closeInternal(true)

I don't know if it's relevant, but when testing my server site in www.ssllabs.com, I found TLSv1.2 is supported but TLSv1.1 is not. And the algorithm which is picked here in the log is not listed in the preferred list of the server:

So, what can be the reason?

I have changed the $JAVA_HOME/jre/lib/security/java.security, disabling the TLSv1.2 and SSLv3 in the option jdk.tls.disabledAlgorithms=SSLv3, TLSv1.1, leaving only TLSv1.1 because it's the server's choice, to no avail.
The driver I used to load the Provider is from Izenpe website. From what I got in the Console of Eclipse, it's working.

My thought about it:

What fails maybe the Provider SunPKCS11. I say this because the original code works in Windows when we use SunMSCAPI. Some internal mechanism of SunMSCAPI did the work for us to sign the challenge. But now as we must adapt the project to be multi-platformed, in Linux we have no choice but SunPKCS11. The JAR sunpkcs11.jar of Java 6 and Java 8 both failed. (In Java 7 it's not present.)
The original intention is to make (almost) all smart cards available for authentication in my APP, but at the moment we only want Izenpe and DNIe(Spanish electronic ID card, supported by OpenSC) to work. 


","while I'm not too versed in PKCS#11 (nor in SSL when I think about it) from your description and log files the following items caught my attention and have me thinking:
Considering the InvalidKeyException thrown above and the highlighted algorithm (TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA), I'm inclined to believe that the key is an elliptic curve key, not RSA (in the screenshot, it states that security provided by TLS_ECDHE equals the one you get by using RSA with 2048 bits). 
Consequentially, somewhere along the way the wrong Signature Provider (RSA instead of ECDSA) is selected, either programmatically or by a malformed certificate.
Hope that helps.
","1407","<smartcard><pkcs#11><sslhandshakeexception>","2","0","2","2016-11-04 15:29:30","40426407","0","1","4537090","","2016-11-03 08:39:08","2016-10-19 12:01:44",""
"40130877","PKCS#11 Smartcard getting error: javax.net.ssl.SSLHandshakeException due to java.security.InvalidKeyException: The RSA asymmetric cipher","Situation
I am working on a project where we must get Smartcard to work in Linux. The card is by manufacturer Izenpe. I get an javax.net.ssl.SSLHandshakeException every time when I am doing SSL handshake with the server.
I load the Izenpe driver with these code:
private final static String config_path3 = ""name=IZENPE\nlibrary=/usr/lib/libbit4ipki.so"";

...

String config = config_path3;
Provider provider = new SunPKCS11(new ByteArrayInputStream(config.getBytes()));
Security.removeProvider(""IAIK"");
Security.insertProviderAt(provider, 1);
try {
    keystore = KeyStore.getInstance(""PKCS11"", provider);
} catch (KeyStoreException e) {
    throw e;
}
KeyStore.Builder builder = KeyStore.Builder.newInstance(""PKCS11"", provider, 
        new KeyStore.CallbackHandlerProtection(new UtilTarjetas(). new callback()));
keystore = builder.getKeyStore();

It loads the certificates to show in a table, and I can proceed to the part to obtain the OutputStream from the response of server, where it fails when we do SSL handshake (signing the challenge). Full stacktraces below:
javax.net.ssl.SSLHandshakeException: Error signing certificate verify
    at sun.security.ssl.Alerts.getSSLException(Alerts.java:192)
    at sun.security.ssl.SSLSocketImpl.fatal(SSLSocketImpl.java:1904)
    at sun.security.ssl.Handshaker.fatalSE(Handshaker.java:279)
    at sun.security.ssl.ClientHandshaker.serverHelloDone(ClientHandshaker.java:1054)
    at sun.security.ssl.ClientHandshaker.processMessage(ClientHandshaker.java:341)
    at sun.security.ssl.Handshaker.processLoop(Handshaker.java:901)
    at sun.security.ssl.Handshaker.process_record(Handshaker.java:837)
    at sun.security.ssl.SSLSocketImpl.readRecord(SSLSocketImpl.java:1023)
    at sun.security.ssl.SSLSocketImpl.performInitialHandshake(SSLSocketImpl.java:1332)
    at sun.security.ssl.SSLSocketImpl.startHandshake(SSLSocketImpl.java:1359)
    at sun.security.ssl.SSLSocketImpl.startHandshake(SSLSocketImpl.java:1343)
    at sun.net.www.protocol.https.HttpsClient.afterConnect(HttpsClient.java:563)
    at sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection.connect(AbstractDelegateHttpsURLConnection.java:185)
    at sun.net.www.protocol.http.HttpURLConnection.getOutputStream(HttpURLConnection.java:1092)
    at sun.net.www.protocol.https.HttpsURLConnectionImpl.getOutputStream(HttpsURLConnectionImpl.java:250)
    at gestores.comunicacion.gisscide.HTTPS_TGSS.doHTTP_Get(HTTPS_TGSS.java:470)
    at gestores.comunicacion.Gestor_Comunicaciones$RecibeMensajesSSL.descargaMsgHTTPS(Gestor_Comunicaciones.java:1284)
    at gestores.comunicacion.Gestor_Comunicaciones$RecibeMensajesSSL.run(Gestor_Comunicaciones.java:1852)
    at java.lang.Thread.run(Thread.java:745)
Caused by: java.security.InvalidKeyException: The RSA asymmetric cipher only operates with RSA keys; unsupported key found (sun.security.pkcs11.P11Key$P11PrivateKey)
    at com.entrust.toolkit.security.provider.RSA.a(Unknown Source)
    at com.entrust.toolkit.security.provider.RSA.engineGetKeySize(Unknown Source)
    at javax.crypto.Cipher.passCryptoPermCheck(Cipher.java:1052)
    at javax.crypto.Cipher.checkCryptoPerm(Cipher.java:1010)
    at javax.crypto.Cipher.init(Cipher.java:1209)
    at java.security.Signature$CipherAdapter.engineInitSign(Signature.java:1254)
    at java.security.Signature$Delegate.init(Signature.java:1128)
    at java.security.Signature$Delegate.chooseProvider(Signature.java:1085)
    at java.security.Signature$Delegate.engineInitSign(Signature.java:1158)
    at java.security.Signature.initSign(Signature.java:529)
    at sun.security.ssl.RSASignature.engineInitSign(RSASignature.java:125)
    at java.security.Signature$Delegate.engineInitSign(Signature.java:1156)
    at java.security.Signature.initSign(Signature.java:529)
    at sun.security.ssl.HandshakeMessage$CertificateVerify.<init>(HandshakeMessage.java:1556)
    at sun.security.ssl.ClientHandshaker.serverHelloDone(ClientHandshaker.java:1049)
    ... 15 more

It seems that when getting the unextractable private key in the card for signing the challenge in SSL handshake, it fail because PKCS#11 private key is not supported/recognized as valid. 
By adding this line into my code I get many lines of logs about SSL.
Properties systemProps = System.getProperties();
systemProps.put(""javax.net.debug"", ""all"");          
System.setProperties(systemProps);

At the end I can see this:
SESSION KEYGEN:
PreMaster Secret:
0000: A5 F7 9C 89 A4 B5 B4 66   D4 DC CC 40 45 C8 41 07  .......f...@E.A.
0010: 0E F1 E9 5C 99 36 C8 84   06 B0 6B 95              ...\.6....k.
CONNECTION KEYGEN:
Client Nonce:
0000: 58 07 74 02 CD 8B 65 BB   E0 03 8D 53 95 C4 87 8C  X.t...e....S....
0010: EE 95 B2 92 C1 DF E8 CA   B0 7D E4 AD 16 B7 31 D2  ..............1.
Server Nonce:
0000: 4A 41 AA 83 DD 1D 9C DE   84 4A 56 40 A3 32 F7 53  JA.......JV@.2.S
0010: 18 48 32 BD 7A E2 3A 1D   19 AD 67 6E DD E1 3B 20  .H2.z.:...gn..; 
Master Secret:
0000: 72 58 C0 3D 90 67 2E 3B   B2 AE D4 54 15 AB 18 AA  rX.=.g.;...T....
0010: 95 73 91 9A DA AE EF 3D   77 A1 CD 7A 68 8B 37 56  .s.....=w..zh.7V
0020: 0F 05 64 EB DD 93 AF 6C   C4 C2 8A 75 A7 C2 CA 06  ..d....l...u....
Client MAC write Secret:
0000: 30 2C D3 A0 4C 2D 3F 67   ED B9 64 B8 3B 81 47 0E  0,..L-?g..d.;.G.
0010: D1 7B 75 A9                                        ..u.
Server MAC write Secret:
0000: 4B 22 25 8E 81 D1 55 6D   B9 40 0F 2A A2 26 49 F5  K""%...Um.@.*.&I.
0010: 66 6A 91 AE                                        fj..
Client write key:
0000: 72 BD C0 56 3C 1A E5 61   90 2C A6 AE AA FE B9 71  r..V<..a.,.....q
Server write key:
0000: C6 CE F4 C6 CE A4 E3 55   F6 2D 29 D6 2E 4C CA 7A  .......U.-)..L.z
Client write IV:
0000: 7D DB C8 17 F4 18 72 33   A1 DC 03 D6 2F 87 65 F1  ......r3..../.e.
Server write IV:
0000: 58 B1 4E BE 1A 90 0C B3   0D AE 5C 5B CD 36 74 4D  X.N.......\[.6tM
%% Invalidated:  [Session-3, TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA]
Thread-7, SEND TLSv1 ALERT:  fatal, description = handshake_failure
Thread-7, WRITE: TLSv1 Alert, length = 2
[Raw write]: length = 7
0000: 15 03 01 00 02 02 28                               ......(
Thread-7, called closeSocket()
Thread-7, handling exception: javax.net.ssl.SSLHandshakeException: Error signing certificate verify
Finalizer, called close()
Finalizer, called closeInternal(true)

I don't know if it's relevant, but when testing my server site in www.ssllabs.com, I found TLSv1.2 is supported but TLSv1.1 is not. And the algorithm which is picked here in the log is not listed in the preferred list of the server:

So, what can be the reason?

I have changed the $JAVA_HOME/jre/lib/security/java.security, disabling the TLSv1.2 and SSLv3 in the option jdk.tls.disabledAlgorithms=SSLv3, TLSv1.1, leaving only TLSv1.1 because it's the server's choice, to no avail.
The driver I used to load the Provider is from Izenpe website. From what I got in the Console of Eclipse, it's working.

My thought about it:

What fails maybe the Provider SunPKCS11. I say this because the original code works in Windows when we use SunMSCAPI. Some internal mechanism of SunMSCAPI did the work for us to sign the challenge. But now as we must adapt the project to be multi-platformed, in Linux we have no choice but SunPKCS11. The JAR sunpkcs11.jar of Java 6 and Java 8 both failed. (In Java 7 it's not present.)
The original intention is to make (almost) all smart cards available for authentication in my APP, but at the moment we only want Izenpe and DNIe(Spanish electronic ID card, supported by OpenSC) to work. 


","Looks like for the SSL connection by the Java JCE, Entrust Provider is being used.
If you look in the stacktrace:

Caused by: java.security.InvalidKeyException: The RSA asymmetric
  cipher only operates with RSA keys; unsupported key found
  (sun.security.pkcs11.P11Key$P11PrivateKey)
      at com.entrust.toolkit.security.provider.RSA.a(Unknown Source)
      at com.entrust.toolkit.security.provider.RSA.engineGetKeySize(Unknown
  Source)
  at javax.crypto.Cipher.passCryptoPermCheck(Cipher.java:1052)

This error is being thrown by the Entrust JCE Provider. It may be expecting only Java's RSA keys but it is being sent a PKCS11 Key which it may not be able to handle.
So, try removing the 'Entrust' Provider as well.
If that doesn't work, try to pass the SunPKCS11 provider instance to the SSLContext whereever you are using it to initiate your secured connection.
","1407","<smartcard><pkcs#11><sslhandshakeexception>","2","1","2","2016-11-04 15:29:30","40426407","0","1","4537090","","2016-11-03 08:39:08","2016-10-19 12:01:44",""
"29776372","PKCS11Exception: CKR_HOST_MEMORY","I'm having problems with an application that generates SOAP messages and does some signing using the XMLSignature class from the JDK.
I get this exception:
Caused by: java.security.ProviderException: sun.security.pkcs11.wrapper.PKCS11Exception: CKR_HOST_MEMORY
at sun.security.pkcs11.P11Signature.engineSign(P11Signature.java:547)
at java.security.Signature$Delegate.engineSign(Signature.java:1160)
at java.security.Signature.sign(Signature.java:553)
at org.jcp.xml.dsig.internal.dom.DOMSignatureMethod.sign(DOMSignatureMethod.java:298)
at org.jcp.xml.dsig.internal.dom.DOMXMLSignature.sign(DOMXMLSignature.java:397)
at uz.mm.ehealth.client.sts.HolderOfKeySOAPHandler.handleMessage(HolderOfKeySOAPHandler.java:156)
at uz.mm.ehealth.client.sts.HolderOfKeySOAPHandler.handleMessage(HolderOfKeySOAPHandler.java:85)
at com.sun.xml.internal.ws.handler.HandlerProcessor.callHandleMessage(HandlerProcessor.java:282)
at com.sun.xml.internal.ws.handler.HandlerProcessor.callHandlersRequest(HandlerProcessor.java:123)
at com.sun.xml.internal.ws.handler.ClientSOAPHandlerTube.callHandlersOnRequest(ClientSOAPHandlerTube.java:127)
... 31 more
Caused by: sun.security.pkcs11.wrapper.PKCS11Exception: CKR_HOST_MEMORY
at sun.security.pkcs11.wrapper.PKCS11.C_Sign(Native Method)
at sun.security.pkcs11.P11Signature.engineSign(P11Signature.java:538)
... 40 more

Googling this did not reveal anything, though. Does anyone know what this could mean or how I could debug this further?
Any pointers would be greatly appreciated!
","CKR_HOST_MEMORY error is most likely returned by the PKCS#11 library your JRE is using as a ""plugin"" which performs cryptographic operations (digital signature creation in your case). PKCS#11 libraries are usually provided by the vendors of specialized cryptographic hardware such as smartcards or HSMs and these libraries provide standardized API which can be used by other applications to access such devices in an easy and convenient way.
When you look at PKCS#11 v2.20 specification you will find this description of the error you are getting:

CKR_HOST_MEMORY: The computer that  the Cryptoki library is running on
  has  insufficient memory to perform the requested function.

I believe you should contact the vendor of the PKCS#11 library you are using. He should be able to diagnose and resolve your problem.
","1406","<java><pkcs#11>","0","0","1","2015-04-22 18:14:40","","0","1","","","","2015-04-21 15:17:02",""
"37300693","How to use OpenSC to decrypt a message with a private key from a smartcard","We've recently updated to OpenSC 0.15.0 and for some reason we can no longer use it to decrypt a message with the private key from a smartcard.
Apparently the same happens whether we use the pkcs11-tool (providaded with OpenSC) and the OpenSSL Engine.
Below is an example of what we did:
pkcs11-tool:
% pkcs11-tool --module /usr/local/lib/opensc-pkcs11.so --decrypt -v -l --input-file encrypted.bin --id 9352
Using slot 1 with a present token (0x1)
Logging in to ""OpenSC Card"".
Please enter User PIN: 
Using decrypt algorithm RSA-PKCS
error: PKCS11 function C_Decrypt failed: rv = CKR_DATA_LEN_RANGE (0x21)

Aborting.

Or by using the OpenSSL engine, here is a small sample program:
#include <iostream>
#include <openssl/engine.h>
#include <openssl/evp.h>
#include <openssl/rsa.h>
#include <openssl/crypto.h>

using namespace std;

int main()
{
    OpenSSL_add_all_algorithms();
    ENGINE_load_dynamic();

    // Setup OpenSSL engine
    ENGINE* engine = ENGINE_by_id(""dynamic"");
    string enginePath = ""/usr/local/lib/engines/pkcs11.so"";
    string modulePath = ""/usr/local/lib/opensc-pkcs11.so"";

    ENGINE_ctrl_cmd_string(engine, ""SO_PATH"", enginePath.c_str(), 0);
    ENGINE_ctrl_cmd_string(engine, ""LIST_ADD"", ""1"", 0);
    ENGINE_ctrl_cmd_string(engine, ""LOAD"", NULL, 0);
    ENGINE_ctrl_cmd_string(engine, ""MODULE_PATH"", modulePath.c_str(), 0);

    string pin = ""123456"";
    ENGINE_ctrl_cmd_string(engine, ""PIN"", pin.c_str(), 0);
    ENGINE_ctrl_cmd_string(engine, ""VERBOSE"", NULL, 0);
    ENGINE_init(engine);
    ENGINE_set_default(engine, ENGINE_METHOD_ALL);

    string keyName = ""id_9352"";
    EVP_PKEY *evp = ENGINE_load_private_key(engine, keyName.c_str(), NULL, NULL);

    // Read encrypted file
    long unsigned int length = 128;
    unsigned char buf[length];
    FILE* f = fopen(""encrypted.bin"", ""r"");
    fread(buf, 1, length, f);
    fclose(f);

    // Try to decrypt
    unsigned char output[length];
    unsigned char* p = output;
    RSA *rsa = EVP_PKEY_get1_RSA(evp);
    int outputLen = RSA_private_decrypt(length, buf, p, rsa, RSA_PKCS1_PADDING);
    if (outputLen == -1) {
        long err = ERR_get_error();
        cout << ""Error decrypting: "" << ERR_error_string(err, NULL) << endl;
        return 1;
    }

    cout << output << endl;
    return 0;
}

But when I run it:
% ./sc-decrypt
PKCS#11: Initializing the engine
Found 2 slots
Loading private key ""slot_1-id_9352""
Looking in slot 1 for key: 9352
[18446744073709551615] Virtual hotplug slot       no tok          
[1] Gemalto PC Twin Reader 00  login             (OpenSC Card)
Found slot:  Gemalto PC Twin Reader 00 00
Found token: OpenSC Card
Found 0 certificate:
Found 1 private key:
   1 P  Private Key
Error decrypting: error:80008021:Vendor defined:PKCS11_rsa_decrypt:Data len range

Apparently, it's the same error in both cases, something about ""Data len range""
What is even more strange, is that when using pkcs11-tool to do a signing operation (which also uses the private key) works fine:
% echo ""test signing"" > input.txt
% pkcs11-tool --module /usr/local/lib/opensc-pkcs11.so --sign -v --input-file input.txt --output-file out.sign --id 9352 -l
Using slot 1 with a present token (0x1)
Logging in to ""OpenSC Card"".
Please enter User PIN: 
Using signature algorithm RSA-PKCS
% ls -l out.sign 
-rw-------  1 user  user  128 May 18 10:08 out.sign

So, if anyone could point out what I'm doing wrong, I'd be very thankful
","I know this comes quite late (3 years after the question) but it might help someone.
I have encountered the same problem. But when I list all mechanisms supported by OpenSC, I can see the minimum keysize for RSA_PKCS is 512. Actually, this is the modulus size. The corresponding key size is 4096 . So just make sure your key pair generated is at least 4096 bits long.
In my case, it worked (using the pkcs11-tool command. I haven't yet implemented the C code fr that).
","1405","<openssl><smartcard><pkcs#11><opensc>","2","1","1","2019-04-26 10:44:23","","0","1","","","","2016-05-18 13:12:16",""
"40548669","pkcs11-tool: why do I need to specify a module to load?","When I run pkcs11-tool I always need to specify a module:
pkcs11-tool --module=/usr/lib/x86_64-linux-gnu/opensc-pkcs11.so -L

What is this module for and how pkcs11-tool use it? Which are the other possible modules I can use? What is the difference between them?
I tried to use another one (""/usr/lib/x86_64-linux-gnu/nss/libnssckbi.so""), but I always get an empty slot, so I suppose there is a difference in the purpose of the modules ?
","The modules are used as middleware to the actual device like smart cards, USB tokens and hardware security modules (HSMs) or even software emulations for PKCS#11.
You can think of it as a hardware driver mapping PKCS#11 to the concrete device, with some modules offering vendor-specific algorithms, login mechanisms etc. 
Some known modules are listed here:
http://wiki.ncryptoki.com/Known-PKCS-11-modules.ashx
Using OpenSC, you already have support for a lot of different devices:
https://github.com/OpenSC/OpenSC/wiki/Supported-hardware-(smart-cards-and-USB-tokens)
So given you stick to those devices listed there and don't use any special function not supported by OpenSC, you should use OpenSC. 
","1389","<pkcs#11>","1","4","1","2016-11-15 23:48:23","40621743","0","1","","","","2016-11-11 13:05:04",""
"24991111","OpenSC Program Crash with c0000005 on Windows","All, I am trying to access opensc dll(latest version) on windows 7 64 bit. I am trying to access a ePass2003 token. The opensc-tool is able to detect the token and can get name and other information. So the token is found by OpenSC. Then I am loading the opensc dll from another program and call standard PKCS#11 functions. C_GetSlotList is returning slot 0 ID as -1 and slot 1 ID as 1. The C_GetFunctionList is returning me pointers to functions. The problem is when I call C_GetMechanismList I am getting a crash with c0000005 error.
I also have accessed the token through the ePass dll provided with the token, it works perfectly.
I am unable to track this problem as it is looking like through the opensc dll, opensc is unable to interface with the card but then opensc-tool also should have the same problem but it does not.
If someone can help it would be great.

TRACE : pkcs11-tool
Trace #1:
C:\Program Files\OpenSC Project\OpenSC\tools>pkcs11-tool.exe --module opensc-pkcs11.dll -I
Cryptoki version 2.20
Manufacturer     OpenSC (www.opensc-project.org)
Library          Smart card PKCS#11 API (ver 0.0)
Using slot 1 with a present token (0x1)

Trace #2:
C:\Program Files\OpenSC Project\OpenSC\tools>pkcs11-tool.exe --module opensc-pkcs11.dll -L
Available slots:
Slot 0 (0xffffffff): Virtual hotplug slot
  (empty)
Slot 1 (0x1): FS USB Token 0
  token state:   uninitialized

Trace #3:
C:\Program Files\OpenSC Project\OpenSC\tools>pkcs11-tool.exe --module opensc-pkcs11.dll -T
Available slots:
No slots.

Trace #4:
C:\Program Files\OpenSC Project\OpenSC\tools>pkcs11-tool.exe --module opensc-pkcs11.dll -M
Using slot 1 with a present token (0x1)

Same result crash with c0000005
","OpenSC PKCS#11 library sees your token as ""uninitialized"". If I remember correctly ePass token initialized with Feitian middleware cannot be used with OpenSC, and vice versa. So if you want to use ePass with opensc-pkcs11.dll then you will need to use pkcs15-init.exe application shipped with OpenSC to initialize your token.
Documentation references:
OpenSC wiki mentions requirement for reinitialization on ePass3000 page but not on ePass2003 page. European distributor gooze.eu also states that reinitialization is required:

The reason is that the ePass2003 is pre-initialized to be recognised
  under Windows7 by Feitian priprietary software. To be usable, the
  ePass2003 need to be initialized by OpenSC.

Practical examples:
I have initialized my ePass2003 token with Feitian middleware and tested with proprietary eps2003csp11.dll library - it was working fine:
C:\Program Files (x86)\OpenSC Project\OpenSC\tools>pkcs11-tool.exe --module eps2003csp11.dll -M
Using slot 0 with a present token (0x1)
Supported mechanisms:
  RSA-PKCS-KEY-PAIR-GEN, keySize={1024,2048}, hw, encrypt, decrypt, sign, verify, generate_key_pair
  RSA-PKCS, keySize={512,2048}, hw, encrypt, decrypt, sign, sign_recover, verify, verify_recover, wrap, unwrap
  RSA-X-509, keySize={512,2048}, encrypt, decrypt, sign, sign_recover, verify, verify_recover, wrap, unwrap
  MD2-RSA-PKCS, keySize={512,2048}, sign, verify
  MD5-RSA-PKCS, keySize={512,2048}, sign, verify
  SHA1-RSA-PKCS, keySize={512,2048}, hw, sign, verify
  DH-PKCS-KEY-PAIR-GEN, keySize={128,2048}, generate_key_pair
  DH-PKCS-DERIVE, keySize={128,2048}, derive
  SHA256-RSA-PKCS, keySize={512,2048}, hw, sign, verify
  SHA384-RSA-PKCS, keySize={512,2048}, sign, verify
  SHA512-RSA-PKCS, keySize={1024,2048}, sign, verify
  mechtype-70, keySize={512,2048}, sign, verify
  RC2-KEY-GEN, keySize={8,1024}, generate
  RC2-ECB, keySize={8,1024}, encrypt, decrypt
  RC2-CBC, keySize={8,1024}, encrypt, decrypt
  RC2-CBC-PAD, keySize={8,1024}, encrypt, decrypt
  RC4-KEY-GEN, keySize={8,2048}, generate
  RC4, keySize={8,2048}, encrypt, decrypt
  DES-KEY-GEN, keySize={56,56}, generate
  DES-ECB, keySize={64,64}, hw, encrypt, decrypt
  DES-CBC, keySize={64,64}, hw, encrypt, decrypt
  DES-CBC-PAD, keySize={64,64}, encrypt, decrypt
  DES3-KEY-GEN, keySize={112,112}, generate
  DES3-ECB, keySize={128,192}, hw, encrypt, decrypt
  DES3-CBC, keySize={128,192}, hw, encrypt, decrypt
  DES3-CBC-PAD, keySize={128,192}, encrypt, decrypt
  MD2, digest
  MD5, digest
  SHA-1, keySize={512,512}, hw, digest, sign, verify
  SHA-1-HMAC, keySize={8,2048}, sign, verify
  SHA256, keySize={512,512}, hw, digest, sign, verify
  mechtype-597, digest
  SHA384, digest
  SHA512, digest
  GENERIC-SECRET-KEY-GEN, keySize={8,2048}, generate
  AES-KEY-GEN, keySize={128,256}, generate
  AES-ECB, keySize={128,256}, hw, encrypt, decrypt
  AES-CBC, keySize={128,256}, hw, encrypt, decrypt
  AES-CBC-PAD, keySize={128,256}, encrypt, decrypt

Then I have tested with opensc-pkcs11.dll and got the same crash you are describing:
C:\Program Files (x86)\OpenSC Project\OpenSC\tools>pkcs11-tool.exe --module opensc-pkcs11.dll -M
Using slot 1 with a present token (0x1)


So I have erased the card..
C:\Program Files (x86)\OpenSC Project\OpenSC\tools>pkcs15-init.exe --erase-card
Using reader with a card: FS USB Token 0

..initialized with OpenSC pkcs15-init application..
C:\Program Files (x86)\OpenSC Project\OpenSC\tools>pkcs15-init.exe --create-pkcs15 --profile pkcs15+onepin --use-default-transport-key --pin 0000 --puk 111111 --label ""ePass2003""
Using reader with a card: FS USB Token 0
2014-07-29 22:35:08.208 cannot lock memory, sensitive data may be paged to disk
2014-07-29 22:35:08.442 cannot lock memory, sensitive data may be paged to disk
2014-07-29 22:35:08.882 cannot lock memory, sensitive data may be paged to disk
2014-07-29 22:35:10.059 cannot lock memory, sensitive data may be paged to disk
2014-07-29 22:35:10.497 cannot lock memory, sensitive data may be paged to disk

..and then opensc-pkcs11.dll started working:
C:\Program Files (x86)\OpenSC Project\OpenSC\tools>pkcs11-tool.exe --module opensc-pkcs11.dll -M
Using slot 1 with a present token (0x1)
Supported mechanisms:
  SHA-1, digest
  SHA256, digest
  SHA384, digest
  SHA512, digest
  MD5, digest
  RIPEMD160, digest
  GOSTR3411, digest
  RSA-X-509, keySize={512,2048}, hw, decrypt, sign, verify
  RSA-PKCS, keySize={512,2048}, hw, decrypt, sign, verify
  SHA1-RSA-PKCS, keySize={512,2048}, sign, verify
  SHA256-RSA-PKCS, keySize={512,2048}, sign, verify
  MD5-RSA-PKCS, keySize={512,2048}, sign, verify
  RIPEMD160-RSA-PKCS, keySize={512,2048}, sign, verify
  RSA-PKCS-KEY-PAIR-GEN, keySize={512,2048}, generate_key_pair

However eps2003csp11.dll distributed by Feitian stopped working as expected:
C:\Program Files (x86)\OpenSC Project\OpenSC\tools>pkcs11-tool.exe --module eps2003csp11.dll -M
No slot with a token was found.

","1357","<pkcs#11><opensc>","2","0","1","2014-07-30 13:24:39","25001570","3","0","3325704","","2014-07-30 13:24:39","2014-07-28 08:23:42",""
"31188663","Disabling PKCS11 solaris implementation","I am performance testing an application which performs poorly when SunPKCS11-Solaris is enabled. The app is deployed in WebLogic which runs on Solaris. I have found that disabling SunPKCS11 by sun.security.pkcs11.enable-solaris=false fixed our problem but I am not sure what the other impacts of that switch are. Does anybody know what sun.security.pkcs11.enable-solaris switch does? 
The other thing that puzzles me is we do use PKCS11 in our certificates but they work fine after disabling SunPKCS-Solaris with the switch above, so I am wondering if there are other providers available to the VM.
","Farzad -
Java can use any number of providers to accomplish the same task, and is highly configurable. You can disable entire providers or just certain algorithms in that provider.  I believe they are listed in the configuration file in preference order.
Depending on what tasks you're trying to do, the ucrypto provider on Solaris should be faster (but it is not as complete as the PKCS#11 provider, so may not have the algorithms, etc, that you need).
Depending on which JDK, OS and hardware platform you're on, the PKCS#11 provider may be faster than JavaNative. In other cases, JavaNative will be faster.  Please note that Java's configuration file has to work across multiple Solaris OS versions, for example, Solaris 10u11, Solaris 11.2 and Solaris 11.3, and on multiple hardware platforms that vary in crypto capabilities. As it is a generic file, it is not always perfectly tuned for your specific scenario.
If you are trying to utilize a hardware keystore installed on Solaris, like nCipher or SCA6000, you would likely need to go through PKCS#11.
Hope that helps,
Valerie
","1353","<java><security><weblogic><solaris><pkcs#11>","0","2","1","2015-07-14 17:21:09","31393846","5","","","","","2015-07-02 15:23:35",""
"25536592","iText: how to locate/obtain Linux shared-library to implement PDF Digital signatures with USB Token?","I'm trying to follow the instructions documented on page 96 of the (excellent) book ""Digital Signatures in PDF Documents"" section 4.1.2 titled ""Signing a document using a USB token (part 2: PKCS#11)"".
Specifically, Code Sample 4.2 starts with the following line:
public static final String DLL = ""c:/windows/system32/dkck201.dll"";

This code example is for a Windows machine. If I'm using Linux (CentOS 64 bit) with a USB Token (such as the example's iKey 4000), what file would I use and where does it come from (e.g. the token manufacturer, the PDF Digital Certificate provider, the CentOS operating system, Java, etc...)?
The text states: Make you have the correct path to the CRYPTOKI (PKCS#11) DLL. If you want to make this work on Linux, you’ll need a path to a .so-file such as libCryptoki2_64.so, libpkcs11.so… 
I don't know much about this topic. I searched but those two .so files listed above for Linux do not appear to be on my machine. However, the following files ARE on the machine -- but I'm not sure if one might be a suitable substitute:
/usr/lib64/pkcs11
/usr/lib64/libCrypto.so
/usr/lib64/libeTPkcs11.so
~/jre/lib/amd64/libj2pkcs11.so
~/jre/lib/ext/sunpkcs11.jar

Can someone advise me how to obtain (or locate) an .so file that could be used with a USB Token on Linux 64b? Or at least describe in general terms what this file is, where is comes from, etc.?
Any help much appreciated!
","It is almost always the best to get PKCS#11 library from your token/card vendor. I believe that one of my older answers to similar question should give you a little more insight into the topic.
","1337","<itext><pkcs#11>","0","1","1","2014-08-27 21:22:48","25537134","0","0","3895917","","2014-08-27 21:22:48","2014-08-27 20:43:37",""
"24220416","Can you expose the Windows Certificate Store to Mozilla Firefox through PKCS#11?","I found this dll from the Network Identity Manager of secure endpoints and tried it with a current version of firefox using those instruction with no success. The idea is to expose the central windows cert store to firefox and thunderbird thus being share certificates also with IE and chrome. Any ideas?
","Did you try PKCS#11 module p11-capi written by Stef Walter?
","1324","<windows><firefox><ssl-certificate><pkcs#11>","1","2","2","2018-04-24 10:42:18","25710916","2","0","","","","2014-06-14 13:26:29",""
"24220416","Can you expose the Windows Certificate Store to Mozilla Firefox through PKCS#11?","I found this dll from the Network Identity Manager of secure endpoints and tried it with a current version of firefox using those instruction with no success. The idea is to expose the central windows cert store to firefox and thunderbird thus being share certificates also with IE and chrome. Any ideas?
","There's a ms-capi bridge by keyon.ch which also works with signing mails in Thunderbird right off the bat, but alas, the free demo is very demo and they have no public pricing information available.
","1324","<windows><firefox><ssl-certificate><pkcs#11>","1","0","2","2018-04-24 10:42:18","25710916","2","0","","","","2014-06-14 13:26:29",""
"33827512","How to verify signed data with PyKCS11 Library","I wrote a simple Python script which makes a digital signature using my smart card (Rutoken ECP SC), PKCS#11 library (implemented by my vendor) and PyKCS11 wrapper for Python.
I already generated the private/public key pair using this card and created a signature using pkcs11 but I don't know how to verify this signed data.
The problem is that my pkcs11 library (implemented in c++)  has verification methods but PyKCS11 wrapper don't. And now I don't know how to solve this problem. I will be appreciated if anybody could tell me how to fix this problem.
That's my script:
import PyKCS11
import getopt
import sys
import platform

red = blue = magenta = normal = """"
if sys.stdout.isatty() and platform.system().lower() != 'windows':
    red = ""\x1b[01;31m""
    blue = ""\x1b[34m""
    magenta = ""\x1b[35m""
    normal = ""\x1b[0m""

format_long = magenta + ""  %s:"" + blue + "" %s (%s)"" + normal
format_binary = magenta + ""  %s:"" + blue + "" %d bytes"" + normal
format_normal = magenta + ""  %s:"" + blue + "" %s"" + normal

pkcs11 = PyKCS11.PyKCS11Lib()
lib_path = ""/usr/lib/pkcs11-arm/rtpkcs11ecp/librtpkcs11ecp.so""
pkcs11.load(lib_path)
info = pkcs11.getInfo()
print ""Library manufacturerID: "" + info.manufacturerID

slots = pkcs11.getSlotList()
print ""Available Slots:"", len(slots)

# As I understand we need only first slot
if len(slots) > 0:
    slot = slots[0]
    slotInfo = pkcs11.getSlotInfo(slot)
    tokenInfo = pkcs11.getTokenInfo(slot)

    flags = PyKCS11.CKF_RW_SESSION
    session = pkcs11.openSession(slot, flags)
    print ""Opened session 0x%08X"" % session.session.value()
    pin = ""12345678""
    session.login(pin)
    objects = session.findObjects()                
    all_attributes = PyKCS11.CKA.keys()             # all keys supported by SC

    print ""Defining KEY_GENERATION mechanism""
    mech = PyKCS11.Mechanism(PyKCS11.CKM_RSA_PKCS_KEY_PAIR_GEN, None)


    print ""Generating key""
    public_template = [
        (PyKCS11.CKA_CLASS, PyKCS11.CKO_PUBLIC_KEY),
        (PyKCS11.CKA_PRIVATE, PyKCS11.CK_FALSE),
        (PyKCS11.CKA_TOKEN, PyKCS11.CK_TRUE),
        (PyKCS11.CKA_ENCRYPT, PyKCS11.CK_TRUE),
        (PyKCS11.CKA_VERIFY, PyKCS11.CK_TRUE),
        (PyKCS11.CKA_WRAP, PyKCS11.CK_TRUE),
        (PyKCS11.CKA_KEY_TYPE, PyKCS11.CKK_RSA),
        (PyKCS11.CKA_VERIFY_RECOVER, PyKCS11.CK_TRUE),
        (PyKCS11.CKA_MODULUS_BITS, 2048),
    ]

    private_template = [
        (PyKCS11.CKA_CLASS, PyKCS11.CKO_PRIVATE_KEY),
        (PyKCS11.CKA_PRIVATE, PyKCS11.CK_TRUE),
        (PyKCS11.CKA_TOKEN, PyKCS11.CK_TRUE),
        (PyKCS11.CKA_DECRYPT, PyKCS11.CK_TRUE),
        (PyKCS11.CKA_SIGN, PyKCS11.CK_TRUE),
        (PyKCS11.CKA_UNWRAP, PyKCS11.CK_TRUE)
        ]

    (pub, priv) = session.generateKeyPair(public_template, private_template, mech)

    # ==================================================
    # Signing data
    sourceText = ""Hello World""
    binaryData = ' '.join(format(ord(x), 'b') for x in sourceText)

    signMechanism = PyKCS11.Mechanism(PyKCS11.CKM_RSA_PKCS, None)
    signedData = session.sign(priv, binaryData, signMechanism)
    print signedData


    #====================================================
    # now we have to verify signedData using the private key



    session.logout()
    session.closeSession()
    print ""Close session 0x%08X"" % session.session.value()

This is the output of the sign method:
[83L, 29L, 52L, 93L, 228L, 220L, 13L, 187L, 224L, 212L, 112L, 204L, 198L, 91L, 207L, 6L, 215L, 38L, 233L, 194L, 252L, 140L, 106L, 62L, 69L, 94L, 252L, 89L, 194L, 18L, 58L, 240L, 174L, 2L, 26L, 212L, 152L, 134L, 40L, 67L, 163L, 53L, 226L, 74L, 15L, 47L, 200L, 131L, 58L, 199L, 22L, 103L, 145L, 235L, 196L, 117L, 196L, 78L, 160L, 223L, 118L, 0L, 147L, 91L, 9L, 146L, 218L, 142L, 1L, 47L, 192L, 20L, 96L, 230L, 77L, 242L, 124L, 232L, 77L, 130L, 207L, 226L, 165L, 108L, 241L, 198L, 33L, 9L, 79L, 238L, 35L, 53L, 127L, 31L, 118L, 167L, 4L, 84L, 158L, 98L, 171L, 37L, 221L, 208L, 80L, 17L, 142L, 61L, 207L, 204L, 17L, 94L, 38L, 136L, 44L, 161L, 191L, 131L, 237L, 213L, 108L, 175L, 14L, 31L, 61L, 2L, 85L, 6L, 104L, 226L, 201L, 71L, 141L, 243L, 72L, 2L, 142L, 83L, 87L, 140L, 1L, 83L, 26L, 93L, 96L, 96L, 207L, 217L, 222L, 168L, 78L, 221L, 158L, 199L, 213L, 82L, 212L, 45L, 62L, 14L, 22L, 128L, 68L, 76L, 205L, 247L, 124L, 23L, 69L, 123L, 68L, 116L, 239L, 49L, 130L, 207L, 43L, 194L, 9L, 4L, 55L, 35L, 51L, 21L, 233L, 198L, 121L, 212L, 61L, 244L, 117L, 98L, 174L, 173L, 209L, 252L, 218L, 51L, 63L, 217L, 160L, 18L, 45L, 167L, 161L, 79L, 10L, 130L, 80L, 63L, 234L, 48L, 155L, 66L, 84L, 116L, 186L, 42L, 119L, 250L, 177L, 206L, 90L, 117L, 159L, 98L, 165L, 70L, 141L, 39L, 108L, 212L, 33L, 20L, 163L, 181L, 113L, 177L, 201L, 129L, 108L, 182L, 94L, 14L, 200L, 213L, 22L, 29L, 182L, 45L, 16L, 242L, 227L, 242L, 192L, 42L]

","This code works for me (beware, the public exponent is assumed to be 3 bytes long):
import PyKCS11
import getopt
import sys
import platform
import hashlib
from M2Crypto import RSA

pkcs11 = PyKCS11.PyKCS11Lib()
lib_path = ""/opt/safenet/protecttoolkit5/ptk/lib/libcryptoki.so""
pkcs11.load(lib_path)
info = pkcs11.getInfo()
slots = pkcs11.getSlotList()
if len(slots) > 0:
    session = pkcs11.openSession(slots[0], PyKCS11.CKF_RW_SESSION)
    session.login(""12345678"")
    mech = PyKCS11.Mechanism(PyKCS11.CKM_RSA_PKCS_KEY_PAIR_GEN, None)
    public_template = [
        (PyKCS11.CKA_CLASS, PyKCS11.CKO_PUBLIC_KEY),
        (PyKCS11.CKA_PRIVATE, PyKCS11.CK_FALSE),
        (PyKCS11.CKA_TOKEN, PyKCS11.CK_TRUE),
        (PyKCS11.CKA_ENCRYPT, PyKCS11.CK_TRUE),
        (PyKCS11.CKA_VERIFY, PyKCS11.CK_TRUE),
        (PyKCS11.CKA_WRAP, PyKCS11.CK_TRUE),
        (PyKCS11.CKA_KEY_TYPE, PyKCS11.CKK_RSA),
        (PyKCS11.CKA_VERIFY_RECOVER, PyKCS11.CK_TRUE),
        (PyKCS11.CKA_MODULUS_BITS, 2048),
    ]
    private_template = [
        (PyKCS11.CKA_CLASS, PyKCS11.CKO_PRIVATE_KEY),
        (PyKCS11.CKA_PRIVATE, PyKCS11.CK_TRUE),
        (PyKCS11.CKA_TOKEN, PyKCS11.CK_TRUE),
        (PyKCS11.CKA_DECRYPT, PyKCS11.CK_TRUE),
        (PyKCS11.CKA_SIGN, PyKCS11.CK_TRUE),
        (PyKCS11.CKA_UNWRAP, PyKCS11.CK_TRUE)
        ]
    (pub, priv) = session.generateKeyPair(public_template, private_template, mech)
    (pubExp,pubModulus) = session.getAttributeValue(pub,[PyKCS11.CKA_PUBLIC_EXPONENT,PyKCS11.CKA_MODULUS], True)
    # ==================================================
    # Signing data
    binaryData = ""Hello world""
    # Generate SHA1
    sha1 = hashlib.sha1()
    sha1.update(str(bytearray(binaryData)))
    digest=sha1.digest()
    # Indicate SHA1 is used
    binaryData2='\x30\x21\x30\x09\x06\x05\x2b\x0e\x03\x02\x1a\x05\x00\x04\x14'+digest
    signMechanism = PyKCS11.Mechanism(PyKCS11.CKM_RSA_PKCS, None)
    signedData = session.sign(priv, binaryData2, signMechanism)
    session.logout()
    session.closeSession()
    # ==================================================
    # Verify
    pubkey = RSA.new_pub_key(('\x00\x00\x00\x03' + str(bytearray(pubExp)), '\x00\x00\x01\x01\x00'+str(bytearray(pubModulus))))
    result=pubkey.verify(str(bytearray(digest)), str(bytearray(signedData)), 'sha1')
    print ""VERIFY:"" + str(result)

I am not into python, so please take it as a proof of concept and not as a solution. For the interesting parts:

as your PKCS#11 driver does not support RSA signature with a hash it is needed to calculate the hash and build the DigestInfo ASN.1 part manually (the result is in the binaryData2 variable)
as RSA.new_pub_key() accepts a tuple in openssl's format for BN_mpi2bn (which it uses internally), it was needed to prefix the modulus with one additional \x00 to ensure it is interpreted as a positive number (the '\x00\x00\x01\x01\x00' part)
given the function verify() uses openssl's RSA_verify which takes as an argument a digest of signed data (and not the data itself) it was needed to obey and give it the digest (which is re-used from the signature generation part and you would have to generate a fresh one if you plan to have a separate verify function)


Note: For e.g. SHA256, you would need to use the appropriate digestInfo magic ASN.1 string prefix (see here for usable values) + appropriate digest object from the hashlib + correct 3rd verify call argument.
Good luck!
","1298","<python><c++><smartcard><pkcs#11>","2","3","1","2015-12-02 01:43:54","34032788","11","2","1179843","","2015-11-20 15:51:15","2015-11-20 13:08:22",""
"50470338","Java nssdb connection: Could not initialize NSS","I'm trying to pull certificate data from an nss db using Java. Here is my code:
try {
        char[] password = new char[0];
        Provider nss = new sun.security.pkcs11.SunPKCS11(""C:\\ntdps_temp\\proj\\NSSdb\\scripts\\pkcs11.cfg"");
        Security.addProvider(nss);
        KeyStore ks = KeyStore.getInstance(""PKCS11"", nss);
        ks.load(null, password);
        for (Enumeration<String> aliases = ks.aliases(); aliases.hasMoreElements();) {
            System.out.println(aliases.nextElement());
        }
    } catch (Exception e) {
        e.printStackTrace();
    }
}

Here is pkcs11.cfg:
name = NSSdb
nssModule = keystore
nssDbMode = readWrite
nssLibraryDirectory = C:\ntdps_temp\proj\NSSdb\lib
nssSecmodDirectory = C:\ntdps_temp\proj\NSSdb

Here is my stack trace:
java.security.ProviderException: Could not initialize NSS
        at sun.security.pkcs11.SunPKCS11.<init>(SunPKCS11.java:212)
        at sun.security.pkcs11.SunPKCS11.<init>(SunPKCS11.java:103)
        at exportnssdb.ExportNssDb.main(ExportNssDb.java:30)
Caused by: java.io.IOException: The specified module could not be found.

        at sun.security.pkcs11.Secmod.nssLoadLibrary(Native Method)
        at sun.security.pkcs11.Secmod.initialize(Secmod.java:210)
        at sun.security.pkcs11.SunPKCS11.<init>(SunPKCS11.java:207)
        ... 2 more

Note line 30 refers to line Provider nss = new sun.security.pkcs11.SunPKCS11(""C:\\ntdps_temp\\proj\\NSSdb\\scripts\\pkcs11.cfg""); here
I am running 32 bit Java for this particular program. Thanks in advance for any help
","","1297","<java><keystore><pkcs#11><nss>","0","","0","2018-05-22 14:33:04","","4","0","","","","2018-05-22 14:33:04",""
"13238070","Java smart card access using middleware","I am working on migration of an old project to Java, and I am having some issues regarding smart card access. Due to lack of documentation I am forced to find my own way through this one, so I hoped you people can help me.
I have a smart card and a dll library (middleware) that was used to gain access to cards functions. Using dependency walker I managed to get a list of functions that dll library holds, and that list sums up to Microsoft Smart Card Api functions. I was wondering if there is some native wrapper that enables me to call that functions from Java? 
Regarding the nature of smart card, it should contain cryptography functions (PKCS#11), but I wasn't able to instantiate a sun.security.pkcs11.SunPKCS11 provider because of this error:
Caused by: java.io.IOException: The specified procedure could not be found.
     at sun.security.pkcs11.wrapper.PKCS11.connect(Native Method)

Any guideline will be appreciated.
Thanks in advance 
UPDATE:
For anyone having this problem as well, it turns out that my smart card doesn't support PKCS11 and I don't have appropriate PKCS11 dll.
","Well, I recently worked in a project which used to have Smart Card access for PKI Certificates and there we had the help from these two frameworks:

The Legion of BouncyCastle Java API (for PKI method abstractions) http://www.bouncycastle.org/java.html
IAIK JCE PKCS11 Wrapper (for generic .dll smart card access) http://jce.iaik.tugraz.at/sic/Products/Core-Crypto-Toolkits/PKCS_11_Wrapper

I think that the second option shall be something that might help you too.
","1295","<java><smartcard><jce><pkcs#11>","5","0","1","2013-02-18 21:43:05","","4","","885490","","2012-12-25 11:32:18","2012-11-05 18:25:35",""
"33820636","Java applet to implement Digital signature using smart card","How to sign a post(any document or text) in browser using smart card. 
What I have investigated so far:
ActiveX - IE only
Silverlight - no access to certificates at all and as a plugin faces the same limitations as Java
Browser specific extensions; For example Firefox up until version 33 used to have window.crypto.signText but not anymore
local applications installed on the client - not easy to install, support, develop and update for several OS and their different versions.
Web Cryptography - ""only basic cryptographic functions"", no certificates support
I ran out of ideas. 
All suggestions are welcome and appreciated.
i tried a java applet the code is here below.                                            main class: Smartcard applet.java    public class SmartCardSignerApplet extends Applet {
private static final String FILE_NAME_FIELD_PARAM = ""fileNameField"";
private static final String CERT_CHAIN_FIELD_PARAM = ""certificationChainField"";
private static final String SIGNATURE_FIELD_PARAM = ""signatureField"";
private static final String SIGN_BUTTON_CAPTION_PARAM = ""signButtonCaption"";

private static final String PKCS11_KEYSTORE_TYPE = ""PKCS11"";
private static final String X509_CERTIFICATE_TYPE = ""X.509"";
private static final String CERTIFICATION_CHAIN_ENCODING = ""PkiPath"";
private static final String DIGITAL_SIGNATURE_ALGORITHM_NAME = ""SHA1withRSA"";
private static final String SUN_PKCS11_PROVIDER_CLASS = ""sun.security.pkcs11.SunPKCS11"";

private Button mSignButton;   //initialises applet public void init() {
    String signButtonCaption = this.getParameter(SIGN_BUTTON_CAPTION_PARAM);
    mSignButton = new Button(signButtonCaption);
    mSignButton.setLocation(0, 0);
    Dimension appletSize = this.getSize();
    mSignButton.setSize(appletSize);
    mSignButton.addActionListener(new ActionListener(){
        public void actionPerformed(ActionEvent e) {
            signSelectedFile();
        }
    });
    this.setLayout(null);
    this.add(mSignButton);
}    \\   signing the file private void signSelectedFile() {
    try {
        // Get the file name to be signed from the form in the HTML document
        JSObject browserWindow = JSObject.getWindow(this);
        JSObject mainForm = (JSObject) browserWindow.eval(""document.forms[0]"");
        String fileNameFieldName = this.getParameter(FILE_NAME_FIELD_PARAM);
        JSObject fileNameField = (JSObject) mainForm.getMember(fileNameFieldName);
        String fileName = (String) fileNameField.getMember(""value"");

        // Perform the actual file signing
        CertificationChainAndSignatureBase64 signingResult = signFile(fileName);
        if (signingResult != null) {
            // Document  signed. Fill the certificate and signature fields
            String certChainFieldName = this.getParameter(CERT_CHAIN_FIELD_PARAM);
            JSObject certChainField = (JSObject) mainForm.getMember(certChainFieldName);
            certChainField.setMember(""value"", signingResult.mCertificationChain);
            String signatureFieldName = this.getParameter(SIGNATURE_FIELD_PARAM);
            JSObject signatureField = (JSObject) mainForm.getMember(signatureFieldName);
            signatureField.setMember(""value"", signingResult.mSignature);
        } else {
            // User canceled signing
        }
    }
    catch (DocumentSignException dse) {
        // Document signing failed. Display error message
        String errorMessage = dse.getMessage();
        JOptionPane.showMessageDialog(this, errorMessage);
    }
    catch (SecurityException se) {
        se.printStackTrace();
        JOptionPane.showMessageDialog(this,
            ""Unable to access the local file system.\n"" +
            ""This applet should be started with full security permissions.\n"" +
            ""Please accept to trust this applet when the Java Plug-In ask you."");
    }
    catch (JSException jse) {
        jse.printStackTrace();
        JOptionPane.showMessageDialog(this,
            ""Unable to access some of the fields of the\n"" +
            ""HTML form. Please check the applet parameters."");
    }
    catch (Exception e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, ""Unexpected error: "" + e.getMessage());
    }
}

private CertificationChainAndSignatureBase64 signFile(String aFileName)
    throws DocumentSignException {
    // Load the file for signing
    byte[] documentToSign = null;
    try {
        documentToSign = readFileInByteArray(aFileName);
    } catch (IOException ioex) {
        String errorMessage = ""Can not read the file for signing "" + aFileName + ""."";
        throw new DocumentSignException(errorMessage, ioex);
    }

    // Show a dialog for choosing PKCS#11 implementation library and smart card PIN
    PKCS11LibraryFileAndPINCodeDialog pkcs11Dialog =
        new PKCS11LibraryFileAndPINCodeDialog();
    boolean dialogConfirmed;
    try {
        dialogConfirmed = pkcs11Dialog.run();
    } finally {
        pkcs11Dialog.dispose();
    }

    if (dialogConfirmed) {
        String oldButtonLabel = mSignButton.getLabel();
        mSignButton.setLabel(""Working..."");
        mSignButton.setEnabled(false);
        try {
            String pkcs11LibraryFileName = pkcs11Dialog.getLibraryFileName();
            String pinCode = pkcs11Dialog.getSmartCardPINCode();

            // Do the actual signing of the document with the smart card
            CertificationChainAndSignatureBase64 signingResult =
                signDocument(documentToSign, pkcs11LibraryFileName, pinCode);
            return signingResult;
        } finally {
            mSignButton.setLabel(oldButtonLabel);
            mSignButton.setEnabled(true);
        }
    }
    else {
        return null;
    }
}

private CertificationChainAndSignatureBase64 signDocument(
    byte[] aDocumentToSign, String aPkcs11LibraryFileName, String aPinCode)
throws DocumentSignException {
    if (aPkcs11LibraryFileName.length() == 0) {
        String errorMessage = ""It is mandatory to choose a PCKS#11 native "" +
            ""implementation library for for smart card (.dll or .so file)!"";
        throw new DocumentSignException(errorMessage);
    }

    // Load the keystore from the smart card using the specified PIN code
    KeyStore userKeyStore = null;
    try {
        userKeyStore = loadKeyStoreFromSmartCard(aPkcs11LibraryFileName, aPinCode);
    } catch (Exception ex) {
        String errorMessage = ""Can not read the keystore from the smart card.\n"" +
            ""Possible reasons:\n"" +
            "" - The smart card reader in not connected.\n"" +
            "" - The smart card is not inserted.\n"" +
            "" - The PKCS#11 implementation library is invalid.\n"" +
            "" - The PIN for the smart card is incorrect.\n"" +
            ""Problem details: "" + ex.getMessage();
        throw new DocumentSignException(errorMessage, ex);
    }

    // Get the private key and its certification chain from the keystore
    PrivateKeyAndCertChain privateKeyAndCertChain = null;
    try {
        privateKeyAndCertChain =
            getPrivateKeyAndCertChain(userKeyStore);
    } catch (GeneralSecurityException gsex) {
        String errorMessage = ""Can not extract the private key and "" +
            ""certificate from the smart card. Reason: "" + gsex.getMessage();
        throw new DocumentSignException(errorMessage, gsex);
    }

    // Check if the private key is available
    PrivateKey privateKey = privateKeyAndCertChain.mPrivateKey;
    if (privateKey == null) {
        String errorMessage = ""Can not find the private key on the smart card."";
        throw new DocumentSignException(errorMessage);
    }

    // Check if X.509 certification chain is available
    Certificate[] certChain = privateKeyAndCertChain.mCertificationChain;
    if (certChain == null) {
        String errorMessage = ""Can not find the certificate on the smart card."";
        throw new DocumentSignException(errorMessage);
    }

    // Create the result object
    CertificationChainAndSignatureBase64 signingResult =
        new CertificationChainAndSignatureBase64();

    // Save X.509 certification chain in the result encoded in Base64
    try {
        signingResult.mCertificationChain = encodeX509CertChainToBase64(certChain);
    }
    catch (CertificateException cee) {
        String errorMessage = ""Invalid certificate on the smart card."";
        throw new DocumentSignException(errorMessage);
    }

    // Calculate the digital signature of the file,
    // encode it in Base64 and save it in the result
    try {
        byte[] digitalSignature = signDocument(aDocumentToSign, privateKey);
        signingResult.mSignature = Base64Utils.base64Encode(digitalSignature);
    } catch (GeneralSecurityException gsex) {
        String errorMessage = ""File signing failed.\n"" +
            ""Problem details: "" + gsex.getMessage();
        throw new DocumentSignException(errorMessage, gsex);
    }

    return signingResult;
}

/**
 * Loads the keystore from the smart card using its PKCS#11 implementation
 * library and the Sun PKCS#11 security provider. The PIN code for accessing
 * the smart card is required.
 */
private KeyStore loadKeyStoreFromSmartCard(String aPKCS11LibraryFileName,
    String aSmartCardPIN)
throws GeneralSecurityException, IOException {
    // First configure the Sun PKCS#11 provider. It requires a stream (or file)
    // containing the configuration parameters - ""name"" and ""library"".
    String pkcs11ConfigSettings =
        ""name = SmartCard\n"" + ""library = "" + aPKCS11LibraryFileName;
    byte[] pkcs11ConfigBytes = pkcs11ConfigSettings.getBytes();
    ByteArrayInputStream confStream = new ByteArrayInputStream(pkcs11ConfigBytes);

    // Instantiate the provider dynamically with Java reflection
    try {
        Class sunPkcs11Class = Class.forName(SUN_PKCS11_PROVIDER_CLASS);
        Constructor pkcs11Constr = sunPkcs11Class.getConstructor(
            java.io.InputStream.class);
        Provider pkcs11Provider = (Provider) pkcs11Constr.newInstance(confStream);
        Security.addProvider(pkcs11Provider);
    } catch (Exception e) {
        throw new KeyStoreException(""Can initialize Sun PKCS#11 security "" +
            ""provider. Reason: "" + e.getCause().getMessage());
    }

    // Read the keystore form the smart card
    char[] pin = aSmartCardPIN.toCharArray();
    KeyStore keyStore = KeyStore.getInstance(PKCS11_KEYSTORE_TYPE);
    keyStore.load(null, pin);
    return keyStore;
}

/**
 * @return private key and certification chain corresponding to it, extracted from
 * given keystore. The keystore is considered to have only one entry that contains
 * both certification chain and its corresponding private key. If the keystore has
 * no entries, an exception is thrown.
 */
private PrivateKeyAndCertChain getPrivateKeyAndCertChain(
    KeyStore aKeyStore)
throws GeneralSecurityException {
    Enumeration aliasesEnum = aKeyStore.aliases();
    if (aliasesEnum.hasMoreElements()) {
        String alias = (String)aliasesEnum.nextElement();
        Certificate[] certificationChain = aKeyStore.getCertificateChain(alias);
        PrivateKey privateKey = (PrivateKey) aKeyStore.getKey(alias, null);
        PrivateKeyAndCertChain result = new PrivateKeyAndCertChain();
        result.mPrivateKey = privateKey;
        result.mCertificationChain = certificationChain;
        return result;
    } else {
        throw new KeyStoreException(""The keystore is empty!"");
    }
}

/**
 * @return Base64-encoded ASN.1 DER representation of given X.509 certification
 * chain.
 */
private String encodeX509CertChainToBase64(Certificate[] aCertificationChain)
throws CertificateException {
    List certList = Arrays.asList(aCertificationChain);
    CertificateFactory certFactory =
        CertificateFactory.getInstance(X509_CERTIFICATE_TYPE);
    CertPath certPath = certFactory.generateCertPath(certList);
    byte[] certPathEncoded = certPath.getEncoded(CERTIFICATION_CHAIN_ENCODING);
    String base64encodedCertChain = Base64Utils.base64Encode(certPathEncoded);
    return base64encodedCertChain;
}

/**
 * Reads the specified file into a byte array.
 */
private byte[] readFileInByteArray(String aFileName)
throws IOException {
    File file = new File(aFileName);
    FileInputStream fileStream = new FileInputStream(file);
    try {
        int fileSize = (int) file.length();
        byte[] data = new byte[fileSize];
        int bytesRead = 0;
        while (bytesRead < fileSize) {
            bytesRead += fileStream.read(data, bytesRead, fileSize-bytesRead);
        }
        return data;
    }
    finally {
        fileStream.close();
    }
}

/**
 * Signs given document with a given private key.
 */
private byte[] signDocument(byte[] aDocument, PrivateKey aPrivateKey)
throws GeneralSecurityException {
    Signature signatureAlgorithm =
        Signature.getInstance(DIGITAL_SIGNATURE_ALGORITHM_NAME);
    signatureAlgorithm.initSign(aPrivateKey);
    signatureAlgorithm.update(aDocument);
    byte[] digitalSignature = signatureAlgorithm.sign();
    return digitalSignature;
}

/**
 * Data structure that holds a pair of private key and
 * certification chain corresponding to this private key.
 */
static class PrivateKeyAndCertChain {
    public PrivateKey mPrivateKey;
    public Certificate[] mCertificationChain;
}

/**
 * Data structure that holds a pair of Base64-encoded
 * certification chain and digital signature.
 */
static class CertificationChainAndSignatureBase64 {
    public String mCertificationChain = null;
    public String mSignature = null;
}

/**
 * Exception class used for document signing errors.
 */
static class DocumentSignException extends Exception {
    public DocumentSignException(String aMessage) {
        super(aMessage);
    }

    public DocumentSignException(String aMessage, Throwable aCause) {
        super(aMessage, aCause);
    }
}

}   While i run the applet i get a message for ckr operations not found  . any help?                                                
","Older methods like java applets, Active X, etc which are phased out or are being phased out from the new Modern Browser offerings. Recently much is being talked about WebCrypto API but as of now, WebCrypto API does not provide access to (Windows) or any other Key stores or local crypto USB/Smartcard device.
Please refer to my answer to post User Authentication from Browser using Digital Signature Certificate on USB Token or Smart Card 
Above post also has JavaScript code to  sign pdf.
For file or return signing How to Digitally Sign GST Return or eReturn using JavaScript form Browser and USB Token of user? Can I use WebCrypto API? 
","1291","<java><browser><applet><digital-signature><pkcs#11>","1","0","1","2019-04-20 00:51:39","","3","","5184280","","2015-11-20 11:13:14","2015-11-20 06:51:53",""
"17077049","PKCS#11 keystore does not validate password after successful attempt to enter it","I'm using the following code to access the contents of a PKCS#11 smartcard from an Athena smartcard reader.
Provider pkcs11Provider = new SunPKCS11(new ByteArrayInputStream (config.getBytes()));
if (Security.getProvider(pkcs11Provider.getName()) != null) {
    Security.removeProvider(pkcs11Provider.getName());
}

Security.addProvider(pkcs11Provider);

KeyStore myKeyStore = KeyStore.getInstance (""PKCS11"", pkcs11Provider);
myKeyStore.load(null, keystore_password.toCharArray());

return myKeyStore;

The problem is as follows:

I enter wrong password.
Code throws an exception (as expected).
I enter correct password.
Code does not throw an exception (as expected).
I enter wrong password.
Code does not throw an exception (unexpected).

According to http://docs.oracle.com/javase/6/docs/technotes/guides/security/p11guide.html, when the KeyStore.Builder class is used, no password is asked for after the first successful load using the same smartcard. Of course, I'm not using this class in the code above. Does the same thing apply to  KeyStore.getInstance(...) method? Is there any way to make the keystore throw exceptions when wrong passwords are entered, regardless of previous load attempts?
","try this
((SunPKCS11) pkcs11Provider ).logout();
pkcs11Provider.clear();

if this doesn't help then replace the provider with newly created SunPKCS11 object before each login
","1288","<java><keystore><pkcs#11>","3","4","1","2013-06-20 16:50:47","17219333","0","","","","","2013-06-12 23:27:59",""
"47106122","Sign sha256 hash with RSA using pkcs#11 api?","I'm currently using pyPkcs11 to sign files.
The following call works for signing common files with RSA and sha256,
session.sign(privKey, toSign, Mechanism(CKM_SHA256_RSA_PKCS, None)

But some of my files are already hashed (sha256), and the signature needs to give the same output that would be given by this openSSL command:
openssl pkeyutl -sign -pkeyopt digest:sha256 -in <inFilePath> -inkey <keyPath> -out <outFilePath>

I have tried the following call, which does not generate a hash of the file before signature,
session.sign(privKey, toSign, Mechanism(CKM_RSA_PKCS, None)

But the result is not the one i expected, and according to the first answer of this post CKM_RSA_PKCS vs CKM_RSA_X_509 mechanisms in PKCS#11, 

CKM_RSA_PKCS on the other hand also performs the padding as defined in the PKCS#1 standards. This padding is defined within EMSA-PKCS1-v1_5, steps 3, 4 and 5. This means that this mechanism should only accept messages that are 11 bytes shorter than the size of the modulus. To create a valid RSASSA-PKCS1-v1_5 signature, you need to perform steps 1 and 2 of EMSA-PKCS1-v1_5 yourself.

After some research it appears that my file contains the first step of the signature described by the RFC 3447, so the missing part is the second one, where the ASN.1 value is generated.
Can I force this operation with pkcs11 and how ?
The PKCS#11 documentation doesn't seem to contain any information about it.
","I'm afraid, there is no PKCS#11 function, which can do what you want.
The only solution that I am aware of would be, to apply the PKCS#1 v1.5 padding manually to your hash and then sign the block using the CKM_RSA_X_509 (raw or textbook RSA) mechanism.
","1284","<rsa><pkcs#11>","5","2","2","2019-01-07 17:54:03","47106124","0","1","","","","2017-11-03 15:43:53",""
"47106122","Sign sha256 hash with RSA using pkcs#11 api?","I'm currently using pyPkcs11 to sign files.
The following call works for signing common files with RSA and sha256,
session.sign(privKey, toSign, Mechanism(CKM_SHA256_RSA_PKCS, None)

But some of my files are already hashed (sha256), and the signature needs to give the same output that would be given by this openSSL command:
openssl pkeyutl -sign -pkeyopt digest:sha256 -in <inFilePath> -inkey <keyPath> -out <outFilePath>

I have tried the following call, which does not generate a hash of the file before signature,
session.sign(privKey, toSign, Mechanism(CKM_RSA_PKCS, None)

But the result is not the one i expected, and according to the first answer of this post CKM_RSA_PKCS vs CKM_RSA_X_509 mechanisms in PKCS#11, 

CKM_RSA_PKCS on the other hand also performs the padding as defined in the PKCS#1 standards. This padding is defined within EMSA-PKCS1-v1_5, steps 3, 4 and 5. This means that this mechanism should only accept messages that are 11 bytes shorter than the size of the modulus. To create a valid RSASSA-PKCS1-v1_5 signature, you need to perform steps 1 and 2 of EMSA-PKCS1-v1_5 yourself.

After some research it appears that my file contains the first step of the signature described by the RFC 3447, so the missing part is the second one, where the ASN.1 value is generated.
Can I force this operation with pkcs11 and how ?
The PKCS#11 documentation doesn't seem to contain any information about it.
","I see two ways to do this; the appropriate one depends on the token (not all tokens/wrappers do all machanisms).

As explained in this other answer, you could decorate the 32-octet SHA-256 that you start from into a full padded message representative. Basically, as explained in PKCS#1, if the RSA key is k octets (with I assume k≥51+11=62 octets, that is a public modulus at least 8⋅62-7=489 bits, which is a must for security), you

Append on the left the 19-octet string

30 31 30 0d 06 09 60 86 48 01 65 03 04 02 01 05 00 04 20

yielding a 51-octet string, which really is the ASN.1 DER encoding for the hash type and value per


DigestInfo ::= SEQUENCE {
    digestAlgorithm DigestAlgorithm,
    digest OCTET STRING
}

Further append on the left the string of k-51 octets (of which k-51-3 are FF)

00 01 FF FF FF FF..FF FF FF FF 00

yielding a k-octet string
Sign with mechanism CKM_RSA_X_509 (length k octets).

Or, alternatively: perform as in [1.]; skip [2.]; and in [3.] use mechanism CKM_RSA_PKCS (length 51 octets).

Disclaimer: I did not check, and have not used a PKCS#11 device lately.
Note: While there is no known attack against proper implementations of it, use of PKCS#1 v1.5 signature padding is increasingly frowned at; e.g. French authorities recommend

RecomSignAsym-1.    Il est recommandé d’employer des mécanismes de signature asymétrique disposant d’une preuve de sécurité.

Or, in English:

It is recommended to use asymmetric signature mechanisms featuring a security proof

They mention RSA-SSA-PSS (sic). As a bonus, the PKCS#11 implementation of that is mechanism CKM_RSA_PKCS_PSS which accepts a hash, rather than the data to sign, making what's asked trivial.
","1284","<rsa><pkcs#11>","5","8","2","2019-01-07 17:54:03","47106124","0","1","","","","2017-11-03 15:43:53",""
"34922140","Signing PDF document with qualified certificate - smartcard","
I have a problem with my applet for signing PDF documents using smartcard. It works fine for not qualified certificates but won't for qualified. I'm using SunPKCS11 provider. It's CryptoTech card. Here's part of code, where i'm trying to operate on this provider:
String pkcs11config = ""name = "" + PROVIDER + ""\nlibrary = \"""" + value + ""\""""; 
byte[] pkcs11configBytes = pkcs11config.getBytes();
final ByteArrayInputStream configStream = new ByteArrayInputStream(pkcs11configBytes);
pkcs11Provider = new sun.security.pkcs11.SunPKCS11(configStream);
Security.addProvider(pkcs11Provider);

And here is code, when the problem occured:
final KeyStore keyStore = KeyStore.getInstance(TYPE, pkcs11Provider);
        keyStore.load(null, PIN);

And the constants:
public static final String PROVIDER = ""CryptoTech"";
private static final String TYPE = ""PKCS11"";

Here's exception stacktrace:
java.io.IOException: load failed
    at sun.security.pkcs11.P11KeyStore.engineLoad(P11KeyStore.java:763)
    at java.security.KeyStore.load(Unknown Source)
    at pl.emsi.sign.card.CardManager.getKey(CardManager.java:165)
    at pl.emsi.sign.logic.DocumentLogic$1.success(DocumentLogic.java:79)
    at pl.emsi.sign.card.CardManager$1.driverSelected(CardManager.java:92)
    at pl.emsi.sign.card.CardManager$2.driverSelected(CardManager.java:121)
    at pl.emsi.sign.card.CardManager$7.actionPerformed(CardManager.java:414)
    at javax.swing.AbstractButton.fireActionPerformed(Unknown Source)
    at javax.swing.AbstractButton$Handler.actionPerformed(Unknown Source)
    at javax.swing.DefaultButtonModel.fireActionPerformed(Unknown Source)
    at javax.swing.DefaultButtonModel.setPressed(Unknown Source)
    at javax.swing.plaf.basic.BasicButtonListener.mouseReleased(Unknown Source)
    at java.awt.Component.processMouseEvent(Unknown Source)
    at javax.swing.JComponent.processMouseEvent(Unknown Source)
    at java.awt.Component.processEvent(Unknown Source)
    at java.awt.Container.processEvent(Unknown Source)
    at java.awt.Component.dispatchEventImpl(Unknown Source)
    at java.awt.Container.dispatchEventImpl(Unknown Source)
    at java.awt.Component.dispatchEvent(Unknown Source)
    at java.awt.LightweightDispatcher.retargetMouseEvent(Unknown Source)
    at java.awt.LightweightDispatcher.processMouseEvent(Unknown Source)
    at java.awt.LightweightDispatcher.dispatchEvent(Unknown Source)
    at java.awt.Container.dispatchEventImpl(Unknown Source)
    at java.awt.Window.dispatchEventImpl(Unknown Source)
    at java.awt.Component.dispatchEvent(Unknown Source)
    at java.awt.EventQueue.dispatchEventImpl(Unknown Source)
    at java.awt.EventQueue.access$500(Unknown Source)
    at java.awt.EventQueue$3.run(Unknown Source)
    at java.awt.EventQueue$3.run(Unknown Source)
    at java.security.AccessController.doPrivileged(Native Method)
    at java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(Unknown Source)
    at java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(Unknown Source)
    at java.awt.EventQueue$4.run(Unknown Source)
    at java.awt.EventQueue$4.run(Unknown Source)
    at java.security.AccessController.doPrivileged(Native Method)
    at java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(Unknown Source)
    at java.awt.EventQueue.dispatchEvent(Unknown Source)
    at java.awt.EventDispatchThread.pumpOneEventForFilters(Unknown Source)
    at java.awt.EventDispatchThread.pumpEventsForFilter(Unknown Source)
    at java.awt.EventDispatchThread.pumpEventsForFilter(Unknown Source)
    at java.awt.WaitDispatchSupport$2.run(Unknown Source)
    at java.awt.event.InvocationEvent.dispatch(Unknown Source)
    at java.awt.EventQueue.dispatchEventImpl(Unknown Source)
    at java.awt.EventQueue.access$500(Unknown Source)
    at java.awt.EventQueue$3.run(Unknown Source)
    at java.awt.EventQueue$3.run(Unknown Source)
    at java.security.AccessController.doPrivileged(Native Method)
    at java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(Unknown Source)
    at java.awt.EventQueue.dispatchEvent(Unknown Source)
    at java.awt.EventDispatchThread.pumpOneEventForFilters(Unknown Source)
    at java.awt.EventDispatchThread.pumpEventsForFilter(Unknown Source)
    at java.awt.EventDispatchThread.pumpEventsForHierarchy(Unknown Source)
    at java.awt.EventDispatchThread.pumpEvents(Unknown Source)
    at java.awt.EventDispatchThread.pumpEvents(Unknown Source)
    at java.awt.EventDispatchThread.run(Unknown Source)
Caused by: javax.security.auth.login.LoginException
    at sun.security.pkcs11.SunPKCS11.login(SunPKCS11.java:1238)
    at sun.security.pkcs11.P11KeyStore.login(P11KeyStore.java:849)
    at sun.security.pkcs11.P11KeyStore.engineLoad(P11KeyStore.java:753)
    ... 54 more
Caused by: sun.security.pkcs11.wrapper.PKCS11Exception: CKR_PIN_LOCKED
    at sun.security.pkcs11.wrapper.PKCS11.C_Login(Native Method)
    at sun.security.pkcs11.SunPKCS11.login(SunPKCS11.java:1222)
    ... 56 more

I've already checked that the PIN isn't locked, because other application (no need to mention the name of this application) signs the PDF document without any problems. The PIN is 100% correct, also.
If there's some information missing, please, let me know.  
EDIT1: 
By: ""It works fine for not qualified certificates but won't for qualified"" i meant that the not qualified certificates was placed on different smartcards than this qualified certificate.
","Pass null in place of PIN parameter in keyStore.load method(keyStore.load(null, null)) will result in password prompt from respective token driver. You can validate the PIN this way...
","1279","<java><pdf><applet><smartcard><pkcs#11>","0","1","2","2016-02-02 10:42:55","35150763","5","1","5002677","","2016-01-21 15:41:41","2016-01-21 11:08:15",""
"34922140","Signing PDF document with qualified certificate - smartcard","
I have a problem with my applet for signing PDF documents using smartcard. It works fine for not qualified certificates but won't for qualified. I'm using SunPKCS11 provider. It's CryptoTech card. Here's part of code, where i'm trying to operate on this provider:
String pkcs11config = ""name = "" + PROVIDER + ""\nlibrary = \"""" + value + ""\""""; 
byte[] pkcs11configBytes = pkcs11config.getBytes();
final ByteArrayInputStream configStream = new ByteArrayInputStream(pkcs11configBytes);
pkcs11Provider = new sun.security.pkcs11.SunPKCS11(configStream);
Security.addProvider(pkcs11Provider);

And here is code, when the problem occured:
final KeyStore keyStore = KeyStore.getInstance(TYPE, pkcs11Provider);
        keyStore.load(null, PIN);

And the constants:
public static final String PROVIDER = ""CryptoTech"";
private static final String TYPE = ""PKCS11"";

Here's exception stacktrace:
java.io.IOException: load failed
    at sun.security.pkcs11.P11KeyStore.engineLoad(P11KeyStore.java:763)
    at java.security.KeyStore.load(Unknown Source)
    at pl.emsi.sign.card.CardManager.getKey(CardManager.java:165)
    at pl.emsi.sign.logic.DocumentLogic$1.success(DocumentLogic.java:79)
    at pl.emsi.sign.card.CardManager$1.driverSelected(CardManager.java:92)
    at pl.emsi.sign.card.CardManager$2.driverSelected(CardManager.java:121)
    at pl.emsi.sign.card.CardManager$7.actionPerformed(CardManager.java:414)
    at javax.swing.AbstractButton.fireActionPerformed(Unknown Source)
    at javax.swing.AbstractButton$Handler.actionPerformed(Unknown Source)
    at javax.swing.DefaultButtonModel.fireActionPerformed(Unknown Source)
    at javax.swing.DefaultButtonModel.setPressed(Unknown Source)
    at javax.swing.plaf.basic.BasicButtonListener.mouseReleased(Unknown Source)
    at java.awt.Component.processMouseEvent(Unknown Source)
    at javax.swing.JComponent.processMouseEvent(Unknown Source)
    at java.awt.Component.processEvent(Unknown Source)
    at java.awt.Container.processEvent(Unknown Source)
    at java.awt.Component.dispatchEventImpl(Unknown Source)
    at java.awt.Container.dispatchEventImpl(Unknown Source)
    at java.awt.Component.dispatchEvent(Unknown Source)
    at java.awt.LightweightDispatcher.retargetMouseEvent(Unknown Source)
    at java.awt.LightweightDispatcher.processMouseEvent(Unknown Source)
    at java.awt.LightweightDispatcher.dispatchEvent(Unknown Source)
    at java.awt.Container.dispatchEventImpl(Unknown Source)
    at java.awt.Window.dispatchEventImpl(Unknown Source)
    at java.awt.Component.dispatchEvent(Unknown Source)
    at java.awt.EventQueue.dispatchEventImpl(Unknown Source)
    at java.awt.EventQueue.access$500(Unknown Source)
    at java.awt.EventQueue$3.run(Unknown Source)
    at java.awt.EventQueue$3.run(Unknown Source)
    at java.security.AccessController.doPrivileged(Native Method)
    at java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(Unknown Source)
    at java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(Unknown Source)
    at java.awt.EventQueue$4.run(Unknown Source)
    at java.awt.EventQueue$4.run(Unknown Source)
    at java.security.AccessController.doPrivileged(Native Method)
    at java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(Unknown Source)
    at java.awt.EventQueue.dispatchEvent(Unknown Source)
    at java.awt.EventDispatchThread.pumpOneEventForFilters(Unknown Source)
    at java.awt.EventDispatchThread.pumpEventsForFilter(Unknown Source)
    at java.awt.EventDispatchThread.pumpEventsForFilter(Unknown Source)
    at java.awt.WaitDispatchSupport$2.run(Unknown Source)
    at java.awt.event.InvocationEvent.dispatch(Unknown Source)
    at java.awt.EventQueue.dispatchEventImpl(Unknown Source)
    at java.awt.EventQueue.access$500(Unknown Source)
    at java.awt.EventQueue$3.run(Unknown Source)
    at java.awt.EventQueue$3.run(Unknown Source)
    at java.security.AccessController.doPrivileged(Native Method)
    at java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(Unknown Source)
    at java.awt.EventQueue.dispatchEvent(Unknown Source)
    at java.awt.EventDispatchThread.pumpOneEventForFilters(Unknown Source)
    at java.awt.EventDispatchThread.pumpEventsForFilter(Unknown Source)
    at java.awt.EventDispatchThread.pumpEventsForHierarchy(Unknown Source)
    at java.awt.EventDispatchThread.pumpEvents(Unknown Source)
    at java.awt.EventDispatchThread.pumpEvents(Unknown Source)
    at java.awt.EventDispatchThread.run(Unknown Source)
Caused by: javax.security.auth.login.LoginException
    at sun.security.pkcs11.SunPKCS11.login(SunPKCS11.java:1238)
    at sun.security.pkcs11.P11KeyStore.login(P11KeyStore.java:849)
    at sun.security.pkcs11.P11KeyStore.engineLoad(P11KeyStore.java:753)
    ... 54 more
Caused by: sun.security.pkcs11.wrapper.PKCS11Exception: CKR_PIN_LOCKED
    at sun.security.pkcs11.wrapper.PKCS11.C_Login(Native Method)
    at sun.security.pkcs11.SunPKCS11.login(SunPKCS11.java:1222)
    ... 56 more

I've already checked that the PIN isn't locked, because other application (no need to mention the name of this application) signs the PDF document without any problems. The PIN is 100% correct, also.
If there's some information missing, please, let me know.  
EDIT1: 
By: ""It works fine for not qualified certificates but won't for qualified"" i meant that the not qualified certificates was placed on different smartcards than this qualified certificate.
","SOLVED
Okay, I found a solution for my problem.
It turned out that the provider was trying to use card's slot with id 0 by default. Card, at which there was problem, have non qualified certificates on three first slots. Tokens on these slots isn't initialized. The qualified cert I was trying to use is placed on fourth slot. 
I used IAIK PKCS11 Wrapper to get info about Tokens of this card. Here's code sample:
        try {
            Module module = Module.getInstance(value);
            module.initialize(null);
            Slot[] slots = module.getSlotList(true);
            TokenInfo[] infos = new TokenInfo[slots.length];
            for (int i = 0; i < slots.length; i++) {
                infos[i] = slots[i].getToken().getTokenInfo();
            }
            printTokenInfos(infos);
            if (slots.length == 0) {
                System.err.println(""No token available!"");
                return;
            }
        } catch (TokenException | IOException e1) {
            e1.printStackTrace();
        }

        [...]

    private void printTokenInfos(TokenInfo[] infos) {
        int counter = 0;
        for (TokenInfo info : infos) {
            System.out.println(""Token: "" + counter++);
            System.out.println(info);
        }
    }

    //""value"" passed to Module's getInstance method is th path for .dll module 
    //used for one's type of card.

From this place I can determine which slot I should use. It can be accomplished by adding slotListIndex parameter to Provider's configuration input stream. E.g.
    String pkcs11config = ""name = "" + PROVIDER + ""\nlibrary = \"""" + value + ""\""\nslotListIndex = "" + slotIndex;

Helpful sites for this issue:
IAIK JCA/JCE
https://javaczysen.blogspot.com/ - unfortunately, only in polish.
","1279","<java><pdf><applet><smartcard><pkcs#11>","0","1","2","2016-02-02 10:42:55","35150763","5","1","5002677","","2016-01-21 15:41:41","2016-01-21 11:08:15",""
"23329392","Race Condition in Java 8 PKCS11 KeyStore","I've been experimenting with an SafeNet (Aladdin) eToken and Java 8's PKCS11 interface. I noticed that when I was debugging the following code snippet it would work. If I ran it without the debugger I got an exception. I introduced an artificial delay and suddenly it worked without the debugger. This leads me to believe there is a race condition in my code. Is there a better way to be doing this? Or is this specific to my token? Or is this a new bug in Java 8 x64 for debian based systems?
public class CertificteRequestTest {

  public static void main(String[] args) throws Exception{

    KeyStore keyStore = getPKCS11Keys();
    PrivateKey privateKey = (PrivateKey)keyStore.getKey(""onekey"",null);
    PublicKey publicKey = ((KeyStore.PrivateKeyEntry)keyStore.getEntry(""onekey"",null)).getCertificate().getPublicKey();

    X500Principal principal = new X500Principal(""CN=onesubject"");

    PKCS10CertificationRequestBuilder builder
        = new JcaPKCS10CertificationRequestBuilder(principal,publicKey);
    ContentSigner signer
        = new JcaContentSignerBuilder(""SHA256withRSA"").build(privateKey);

    /* Removing this causes the Signer to think the token is not logged in */
    Thread.sleep(1000);

    PKCS10CertificationRequest csr = builder.build(signer);
    PEMWriter writer = new PEMWriter(new PrintWriter(System.out));
    writer.writeObject(csr);
    writer.close();
  }

  public static KeyStore getPKCS11Keys() throws KeyStoreException {
    SunPKCS11 provider = new SunPKCS11ProviderFactory()
        .withDescription(""PKCS11TestProvider - libeToken 8"")
        .withName(""PKCS11TestProvider"")
        .withLibrary(""/lib64/libeToken.so.8"").build();
    Security.addProvider(provider);
    KeyStore.CallbackHandlerProtection pinHandler
        = new KeyStore.CallbackHandlerProtection(new TextCallbackHandler());
    return KeyStore.Builder.newInstance(""PKCS11"",provider,pinHandler).getKeyStore();
  }
}

The exception that is thrown seems to indicate that I've not logged into the token, but I have done so. Entering the wrong PIN results in a failed login attempt. 
$ java ... com.test.CertificteRequestTest
PKCS11 Token [SunPKCS11-PKCS11TestProvider] Password:
Exception in thread ""main"" java.security.ProviderException: sun.security.pkcs11.wrapper.PKCS11Exception: CKR_USER_NOT_LOGGED_IN
        at sun.security.pkcs11.P11Signature.engineSign(P11Signature.java:588)
        at java.security.Signature$Delegate.engineSign(Signature.java:1162)
        at java.security.Signature.sign(Signature.java:554)
        at org.bouncycastle.operator.jcajce.JcaContentSignerBuilder$SignatureOutputStream.getSignature(Unknown Source)
        at org.bouncycastle.operator.jcajce.JcaContentSignerBuilder$1.getSignature(Unknown Source)
        at org.bouncycastle.pkcs.PKCS10CertificationRequestBuilder.build(Unknown Source)
        ...
Caused by: sun.security.pkcs11.wrapper.PKCS11Exception: CKR_USER_NOT_LOGGED_IN
        at sun.security.pkcs11.wrapper.PKCS11.C_Sign(Native Method)
        at sun.security.pkcs11.P11Signature.engineSign(P11Signature.java:579)

With the artificial delay installed this is the result of a successful run:
$ java ... com.test.CertificteRequestTest
PKCS11 Token [SunPKCS11-PKCS11TestProvider] Password:
-----BEGIN CERTIFICATE REQUEST-----
MIICW...
-----END CERTIFICATE REQUEST-----

","","1274","<java><java-8><pkcs#11><e-token>","2","","0","2015-08-11 06:37:13","","2","0","","","","2014-04-27 21:42:48",""
"15003113","PKCS11 Mechanisms difference + JAVA","I'm implementing functions with PKCS11 mechanisms - CKM_RSA_PKCS and CKM_RSA_X_509. I know that both are implemented in Botan C++ library, but I have to find equivalents in Java. Second problem is what's the difference between both of them?
","CKM_RSA_PKCS refers to the PKCS#1 v1.5 standard (see RFC3447) for RSA encryption and digital signatures. In Java JCE, it is typically the default choice for RSA.

For digital signatures, pass ""MD5WithRSA"", ""SHA1WithRSA"", etc to Signature.getInstance()
For encryption, pass ""RSA/None/PKCS1Padding"" to Cipher.getInstance().

CKM_RSA_X_509 refers to the textbook (or raw) RSA algorithm, that is, the one where no padding is defined. In this case, you can simply pass ""RSA/None/NoPadding"" to Cipher.getInstance(). Signature can be done with decryption, wheres verification can be done with encryption (followed by comparison).
I would avoid implementing and using raw RSA though, unless you have specific use cases in mind. PKCS#1v 1.5 signatures are more secure. For enciphering though, I wouldn't actually recommend to use either of them, because they are both unsecure. It's better to rely only on PKCS#1 OAEP (CKM_RSA_PKCS_OAEP); for that, you pass ""RSA/None/OAEPWithSHA1AndMGF1Padding"" to Cipher.getInstance().
","1273","<java><digital-signature><public-key-encryption><pkcs#11>","2","4","1","2013-02-22 18:15:16","","0","","482262","","2013-02-22 18:15:16","2013-02-21 13:11:20",""
"48597667","Using open source PKCS#11 library for a token?","I have been learning about PKCS#11 and now I want to create some applications using it in C. Now I have the following question,
1) I think the shared library for a token comes with vendor of the token, Am I right?
2) Which open source library for PKCS#11 (in C) I can use if I have a token and not the its shared library?
","
1) I think the shared library for a token comes with vendor of the token, Am I right?

Yes in most cases it does.

2) Which open source library for PKCS#11 (in C) I can use if I have a token and not the its shared library?

OpenSC project ships PKCS#11 library which supports several cards and tokens.
","1267","<pkcs#11>","1","1","1","2018-02-03 14:55:16","48598676","0","1","","","","2018-02-03 13:03:32",""
"14575133","Missing resource exception can't find resource for bundle sun.security.util.Resources, key PKCS11 Token[Provider] Password","I trying to load the pkcs11 keystore using sunjava jdk 7 update 11 on windows 2008  64bit machine.the problem iam facing is i was able to get the keystore instance with
Keystore ks = Keystore.getInstance(""PKCS11"", provider);

but when i say 
keystore.load(null, ""pwdstring"".toCharArray[])

at this line iam facing an error saying , Please find the stacktrace
java.util.MissingResourceException: Can't find resource for bundle sun.security.util.Resources, key PKCS11 Token [providerName] Password: 
    at java.util.ResourceBundle.getObject(ResourceBundle.java:393)
    at java.util.ResourceBundle.getString(ResourceBundle.java:353)
    at sun.security.util.ResourcesMgr.getString(ResourcesMgr.java:52)
    at sun.security.pkcs11.SunPKCS11.login(SunPKCS11.java:1084)
    at sun.security.pkcs11.P11KeyStore.login(P11KeyStore.java:874)
    at sun.security.pkcs11.P11KeyStore.engineLoad(P11KeyStore.java:764)
    at java.security.KeyStore.load(KeyStore.java:1214)
    at HSM_TokenSunjava.main(HSM_TokenSunjava.java:37)

And one more thing with same code and same PKCS11 token i was able to run on my machine windows 64bit i dont understand what wrong with windows 2008 machine.
Kindly help me out 
Thanks 
","I had the same problem and verified that the Resource was changed from ""PKCS11 Token [providerName] Password:""  to ""PKCS11.Token.providerName.Password."" so SUNPKCS11 call to ""PKCS11 Token [providerName] Password: ""  must be changed to new value.
Best regards.
","1266","<keystore><pkcs#11>","0","0","2","2014-10-14 06:06:25","","0","1","840566","","2014-06-12 13:25:55","2013-01-29 03:20:54",""
"14575133","Missing resource exception can't find resource for bundle sun.security.util.Resources, key PKCS11 Token[Provider] Password","I trying to load the pkcs11 keystore using sunjava jdk 7 update 11 on windows 2008  64bit machine.the problem iam facing is i was able to get the keystore instance with
Keystore ks = Keystore.getInstance(""PKCS11"", provider);

but when i say 
keystore.load(null, ""pwdstring"".toCharArray[])

at this line iam facing an error saying , Please find the stacktrace
java.util.MissingResourceException: Can't find resource for bundle sun.security.util.Resources, key PKCS11 Token [providerName] Password: 
    at java.util.ResourceBundle.getObject(ResourceBundle.java:393)
    at java.util.ResourceBundle.getString(ResourceBundle.java:353)
    at sun.security.util.ResourcesMgr.getString(ResourcesMgr.java:52)
    at sun.security.pkcs11.SunPKCS11.login(SunPKCS11.java:1084)
    at sun.security.pkcs11.P11KeyStore.login(P11KeyStore.java:874)
    at sun.security.pkcs11.P11KeyStore.engineLoad(P11KeyStore.java:764)
    at java.security.KeyStore.load(KeyStore.java:1214)
    at HSM_TokenSunjava.main(HSM_TokenSunjava.java:37)

And one more thing with same code and same PKCS11 token i was able to run on my machine windows 64bit i dont understand what wrong with windows 2008 machine.
Kindly help me out 
Thanks 
","Changing JDK version to JDK6 solved my problem.
","1266","<keystore><pkcs#11>","0","0","2","2014-10-14 06:06:25","","0","1","840566","","2014-06-12 13:25:55","2013-01-29 03:20:54",""
"11501321","Issuing PKCS11 token from PKCS12 keystore","I'm having trouble issuing certificate to a hard token, What I have is a PKCS12 keystore I have created and want to move it to a hardtoken as a PKCS11.
I can successfully generate keys and certificate and save them in a p12 keystore and can import the p12 file to hardtoken using admin console of this device. 
But when I try to do the final step programatically I have different result.
Imported p12 file using admin tool what I have in device is
-Serial number
  -Signature and key exchange usage
      Certificate
      Private Key
      Public key  
Imported all steps programatically
-Serial number
  -Signing &encryption
      Certificate
      Private Key    
and the final result is that end user can't use the device for signing.
I'm using SunPKCS11.
Edit: Code used for importing the key:
KeyStore.PrivateKeyEntry priEntry = 
    new KeyStore.PrivateKeyEntry(keys.getPrivate(), certificateArray); 
KeyStore.PasswordProtection password = 
    new KeyStore.PasswordProtection(pass.toCharArray()); 
store.setEntry(""Entry"", priEntry, password);

EDIT 2 keytool -list  
The funny thing is that when I use the following command output is the very same
keytool -keystore NONE -storetype pkcs11 -list  
","","1254","<java><security><pkcs#11>","1","","0","2012-07-17 12:51:53","","3","0","1528359","","2012-07-17 12:51:53","2012-07-16 09:16:35",""
"45636631","Client Certificate authentication in Java","I need to login to a website using a smart card. I can successfully obtain the keystore from the smart card, containing user's certificate and a non-exportable private key (it's a regular PrivateKey object, but the ""getEncoded"" method returns null).
This site: https://pst.giustizia.it/PST/authentication/it/pst_ar.wp
has a login link which changes everytime you visit. So, as a user would do, I do the same in my Java app: I visit the page once to obtain that link, and then I perform the SSL Authentication on that link (Kinda like simulating visiting the page and clicking on that link).
This is the code I use:
public class SSLAuth
{
    private static String LOGIN_PAGE = ""https://pst.giustizia.it/PST/authentication/it/pst_ar.wp"";
    private static String USER_AGENT = ""Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:25.0) Gecko/20100101 Firefox/25.0"";

    private TrustStrategy trustStrategy = new TrustStrategy()
    {
        public boolean isTrusted(X509Certificate[] arg0, String arg1) throws CertificateException
        {
            // Temporary work-around. I already know how to fix this
            return true;
        }
    };

    public String authenticate(String pin) throws Exception
    {
        // Request KeyStore from smart card
        KeyStore keyStore = Utility.digitalSigner.loadKeyStorePKCS11();
        SSLContext sslContext = SSLContexts.custom().useProtocol(""TLSv1.2"").loadTrustMaterial(keyStore, trustStrategy).build();

        // Get login token first
        String loginToken = null;
        {
            Document document = Jsoup.connect(LOGIN_PAGE).ignoreContentType(true).userAgent(USER_AGENT).timeout(10000).followRedirects(true).get();
            Elements link = document.select(""div > fieldset > p > a"");
            loginToken = link.get(0).attr(""abs:href"");
        }

        // Try to authenticate
        HttpClient httpClient = HttpClients.custom().setUserAgent(USER_AGENT).setSSLContext(sslContext).build();
        HttpResponse response = httpClient.execute(new HttpGet(loginToken));
        if (response.getStatusLine().getStatusCode() != HttpStatus.SC_OK)
            return null;

        return response.toString();
    }
}

I need only to authenticate the first time, because once logged in, the website checks only a cookie named ""JSESSIONID"" and client's User Agent string. I have already tested this. Once you have these two valid parameters, you can visit the page even from another browser.
Anyway, the ""loadKeyStorePKCS11"" method gives you the keystore mentioned above, which contains the certification chain (99%, maybe 100% are only one certificate, because I tried 26 different smart cards, and they have only one certificate: the user's one), and a non-exportable private key.
I tried to look around the internet for solutions, but they are all about PKCS#12, which I don't need this.
I tried using different protocols (SSL and TLS) and different versions of it, but nothing!
Firefox can do smart card authentication, and I know for sure I'm missing something in the procedure! When I call the ""execute"" method on ""httpClient"" object, it gives me an exception: ""handshake_failure"" (SSLHandshakeException).
If I use ""loadKeyMaterial"" instead of ""loadTrustMaterial"", I get ""unsupported_certificate"".
I don't really know what I have to do at this point!
Do you have any advice?
Thanks in advance!
","Thanks for posting the log, I'll make this an answer since it's too much for a comment.
Short answer: the server is asking for a client certificate and you don't have one or are not configured to provide one that's acceptable.
Search in your log for this:
main, READ: TLSv1 Handshake, length = 11296
*** CertificateRequest
Cert Types: RSA, DSS
Cert Authorities:

This is the server asking you for a client certificate. What follows is a list of acceptable CAs. You must have a certificate in your keystore issued by one of those CAs and client certificates must be enabled for the session on the client side.
The next part of the log then says this:
*** ServerHelloDone
Warning: no suitable certificate found - continuing without client 
authentication

Unfortunately it seems you don't have a certificate acceptable to the server, or are not configured for client certificate mode and that's why it cuts you off and aborts the handshake.
","1239","<java><ssl><smartcard><pkcs#11>","1","1","1","2017-08-13 14:07:20","45661218","4","","3710743","","2017-08-11 13:45:15","2017-08-11 13:38:03",""
"44673695","Load encrypted PKCS1 private key from file","I have a PKCS1 private key in a file and I load it using 
b, err := ioutil.ReadFile(path)
if err != nil {
    return nil, err
}

Then, I try to convert it into private key object
block, _ := pem.Decode(b)
der, err := x509.DecryptPEMBlock(block, []byte(""qwerty""))
if err != nil {
    return nil, err
}

bytes := pem.EncodeToMemory(&pem.Block{Type: ""RSA PRIVATE KEY"", Bytes: der})

return x509.ParsePKCS1PrivateKey(bytes)

But this code throws exception in DecryptPEMBlock 
x509: no DEK-Info header in block

I didn't find any documentation about this in golang
","Go does not have package to decode PKCS files it seems
Checkout this link for more details PKCS
I cant find a package to decode PKCS1 keys 
Use this package to decode the PKCS8 files, there are some packages to decode PKCS8, PKCS10, PKCS12 but not for PKCS1
","1231","<go><rsa><private-key><pkcs#11>","1","0","2","2017-06-24 17:10:05","","1","","7190910","","2017-06-24 17:10:05","2017-06-21 10:34:47",""
"44673695","Load encrypted PKCS1 private key from file","I have a PKCS1 private key in a file and I load it using 
b, err := ioutil.ReadFile(path)
if err != nil {
    return nil, err
}

Then, I try to convert it into private key object
block, _ := pem.Decode(b)
der, err := x509.DecryptPEMBlock(block, []byte(""qwerty""))
if err != nil {
    return nil, err
}

bytes := pem.EncodeToMemory(&pem.Block{Type: ""RSA PRIVATE KEY"", Bytes: der})

return x509.ParsePKCS1PrivateKey(bytes)

But this code throws exception in DecryptPEMBlock 
x509: no DEK-Info header in block

I didn't find any documentation about this in golang
","I made a mistake with my private key file and here is a working code 
func GetPrivateKey(path string) (*rsa.PrivateKey, error) {
    b, err := ioutil.ReadFile(path)
    if err != nil {
        return nil, err
    }

    block, _ := pem.Decode(b)
    der, err := x509.DecryptPEMBlock(block, []byte(*PrivateKeyPassword))
    if err != nil {
        return nil, err
    }

    return x509.ParsePKCS1PrivateKey(der)
}

P.S. Go does have a package to decrypt PKCS1 private keys, but does not have for PKCS8. 
","1231","<go><rsa><private-key><pkcs#11>","1","2","2","2017-06-24 17:10:05","","1","","7190910","","2017-06-24 17:10:05","2017-06-21 10:34:47",""
"11640706","Mutual client authentication with PKCS#11","I am trying to create a browser application that will access a server which requires TLS Mutual Client Authentication. The application needs to be able to supply the client certificate and key via a PKCS#11 interface.
Having looked at various articles on mutual tls for Android, I believe the PKCS#11 requirement rules out using the Android KeyChain/adding the certificates to the default keystore on Android (because the private key cannot be directly accessed).
I have the PKCS#11 interface working so I can use the private key to sign data. 
Is there a way to intercept the calls for Android to sign data with a key so that I can use the PKCS#11 interface instead? Currently it seems that my only option really is to implement my own TLS stack to achieve this.
","It depends :) What platform(s) are you targeting? On Jelly Bean, there is some support for hardware devices in the keystore, so you can write a keymaster module that uses your PKCS#11. That, however is a OS component, so it would require implementing your own ROM. You can also develop your own JCE provider that is backed by the PKCS#11 module. Then, in your browser, make sure the SSL engine uses your provider when doing client auth. 
","1197","<android><ssl><pkcs#11>","0","2","1","2014-04-04 12:32:52","11641912","0","","","","","2012-07-24 23:25:13",""
"14155152","Remember SmartCard PIN using Java Applet for accessing Keystore","I am able to access to a SmartCard with a Java Applet (embedded) using MS CryptoAPI and PKCS#11 (registering the provider with the .dll). I can use both, but right now I'm using the CryptoAPI one for having an easier support for all keyboards/Windows versions:
keystore = KeyStore.getInstance(""Windows-MY"");
keystore.load(null,null);

I'm using Javascript to comunicate with Java to sign some operations in a web application I am developing.
The default use case is just what I need:

I get/load the Keystore
I try to sign something, it ask for the PIN and once introduced it remembers until the end of the session (when I extract the SmartCard or cache timeout).

The problem is: It's an embedded Applet. When I sign something in web page A and then I go to web page B (through a link or redirect, for ex.), the Applet is destroyed/created (just like the JVM) and the session is lost so I have to introduce again the PIN. This does not happen if I do not leave/reload the actual web page, of course.
Questions: Is there some way to reuse the session/Applet/JVM programmatically? or loading the Keystore in a way that can avoid this problem?
Possible workaround solutions I already know:

Free floating Applet. I can't, it has no GUI and I need to comunicate with JS...
Web in a frameset/iframe. Dirty.
Ajaxify the web (just one page + all operations in Ajax + some kind of history JS plugin or PushState). This is the solution I like more but requires some refactoring.

","I ended up doing it in a completely different way: Creating a client desktop app for the signature. This app is installed in all desktop clients (this is ok for me because it's a corporate environment).
This new app listens to a port with a HttpListener. I connect from the web via javascript (jsonp), send the string to be signed, and it returns the js callback with the result signed.

It now remembers the PIN because it does not lose the session.
And, therefore, do not need Java.

","1194","<java><applet><keystore><smartcard><pkcs#11>","1","1","1","2013-03-04 14:45:58","15204201","5","","","","","2013-01-04 10:17:21",""
"36626859","Sign data with SoftHSM","I want to sign (or encrypt) some data using SoftHSMv2 and pkcs11-tool.
So far, I generated a RSA keypair with :
 pkcs11-tool --module=/usr/local/lib/softhsm/libsofthsm2.so -l --pin mypin -k --key-type rsa:1024 --id 01 --label mykey

But when I try to sign something :
 echo ""some text"" > input.txt
 pkcs11-tool --module=/usr/local/lib/softhsm/libsofthsm2.so -l --pin mypin -s -i input.txt

I get the following error message : 
Using slot 0 with a present token (0x0)
error: Sign mechanism not supported
Aborting.

From what I understood reading the documentation, I should be able to sign with SoftHSM, but maybe I'm wrong ?
Is there an option to add during compilation or something else to fix my problem ? If not, is there other SSM products in the market ?
","You seem to have forgotten -m (--mechanism) option. Read more here.
","1184","<sign><pkcs#11><hsm><softhsm>","1","0","1","2017-07-21 04:04:21","","0","1","6204598","","2016-04-15 15:36:51","2016-04-14 14:56:28",""
"32836182","HSM: Error while opening connection to the HSM","Receiving the CKR_GENERAL_ERROR when the application tries to open a connection to the H/W HSM.
The error in detail is:
50004-Crypto API could not be open.
Caused by: xxx.xxx.xxx.cryptoapi.CryptoApiSysException: Error opening session!!
Caused by: iaik.pkcs.pkcs11.wrapper.PKCS11Exception: CKR_GENERAL_ERROR
        at iaik.pkcs.pkcs11.wrapper.PKCS11Implementation.C_Initialize(Native Method) ~[pkcs11Wrapper-1.2.18.jar:1.2.18]
        at iaik.pkcs.pkcs11.Module.initialize(Module.java:307) ~[pkcs11Wrapper-1.2.18.jar:1.2.18]

Could anyone please tell what might be the reason for this error? The application works fine with the software HSM.
H/W HSM details:

ProtectToolkit C Key management utility : 4.2.0 (even tried with 4.3.0)
Manufacturer : Eracom
Hardware version : 66.00
Firmware version : 2.02

","CKR_GENERAL_ERROR is the general error message thrown by most of the PKCS#11 complaint API. Since you have the error while connecting to the HSM hardware Please make sure you do the following things:

You have successfully done the client (you app) to h/w hsm NTL configuration. Here's a link! 
Verify that you have a valid slot number and partition password (PIN) while opening the session and login to the hsm.

Also, you can check HSM logs (usually residing on your hsm client installation directory in your application) to know what is the exact cause for the problem. Here's You can refer to my previous response on finding luna safenet client logs! 
","1166","<pkcs#11><hsm>","3","1","1","2019-08-14 08:54:01","","2","1","989169","","2015-09-30 10:03:17","2015-09-29 05:19:08",""
"23818785","Looking to store encrypted files on PKCS#11 Compliant Hardware Token","My C# .NET4 program has been storing data in encrypted files on the regular Windows file system and one of our customers has requested that we integrate the program with a PKCS#11 token (henceforth known as the 'token').  After a bit of researching, I discovered NCryptoki and I believe that will provide the necessary interface between my program and a compliant token.  
I've got a couple of questions that I can't seem to find answers for that I hope the experienced people here can help me with.  I'm still new with PKCS#11 and cryptography principles in general so some of these questions may seem a little juvenile.

My theory is that the token will be able to be inserted into a computer and, using methods in my program that implemented the NCryptoki library, the encrypted files will be able to be saved directly onto it.  The files would only be able to be accessed through a wizard in my program.  I should be able to continue saving files on the drive as long as the token has space.  Is all of this correct?
I will need at least 64K memory on the token and the token must be a minimum of FIPS 140-2 Level 2, preferably level 3.  I've looked and have only come across the SafeNet iKey 4000.  I KNOW there must be more PKCS#11 compliant tokens that have at least 64K storage.  I've spent hours going through the FIPS 140-1/2 Validated Crypto Modules looking for USB Storage PKCS#11 tokens but haven't had much luck.  Does anyone know of any other companies that sell what I'm looking for?  This could be a USB device or even a Smart Card.  We want to be able to provide multiple options for the customer.
Has anyone had any experience with this sort of implementation before that could provide me with some ""lessons learned"" or things to be aware of?

Also, if this isn't the correct place to put this, please let me know where to repost.  I appreciate all of the help!
","While PKCS#11 supports storing of application data on the devices, the devices themselves (I am talking about USB cryptotokens and smartcards now) are designed for a different purpose. In particular, they are designed to hold small pieces of secret or sensitive data. They are not a data storage. Some vendors provide hybrid tokens, where a USB cryptotoken is combined with a flash disk. But even in this situation these would be two devices in one case. 
It is possible that your scenario can be modified in the following way so that you:

generate a session key (possibly right on the device)
use this key to encrypt your sensitive data.
store the encrypted data elsewhere (on a USB disk part of the hybrid device, for example) and use the USB cryptotoken to encrypt/decrypt the data.

On a side note: almost all cryptotoken devices require their drivers to be installed to the system. Unlike USB disks and flash cards there's no universal driver in the OS that would let you plug the USB cryptotoken and use it immediately without installing the driver. This is a hassle from user's perspective, so take this into account as well. 
","1158","<smartcard><usb-drive><fips><pkcs#11>","2","2","2","2014-05-25 05:57:32","23821818","1","0","","","","2014-05-22 23:35:34",""
"23818785","Looking to store encrypted files on PKCS#11 Compliant Hardware Token","My C# .NET4 program has been storing data in encrypted files on the regular Windows file system and one of our customers has requested that we integrate the program with a PKCS#11 token (henceforth known as the 'token').  After a bit of researching, I discovered NCryptoki and I believe that will provide the necessary interface between my program and a compliant token.  
I've got a couple of questions that I can't seem to find answers for that I hope the experienced people here can help me with.  I'm still new with PKCS#11 and cryptography principles in general so some of these questions may seem a little juvenile.

My theory is that the token will be able to be inserted into a computer and, using methods in my program that implemented the NCryptoki library, the encrypted files will be able to be saved directly onto it.  The files would only be able to be accessed through a wizard in my program.  I should be able to continue saving files on the drive as long as the token has space.  Is all of this correct?
I will need at least 64K memory on the token and the token must be a minimum of FIPS 140-2 Level 2, preferably level 3.  I've looked and have only come across the SafeNet iKey 4000.  I KNOW there must be more PKCS#11 compliant tokens that have at least 64K storage.  I've spent hours going through the FIPS 140-1/2 Validated Crypto Modules looking for USB Storage PKCS#11 tokens but haven't had much luck.  Does anyone know of any other companies that sell what I'm looking for?  This could be a USB device or even a Smart Card.  We want to be able to provide multiple options for the customer.
Has anyone had any experience with this sort of implementation before that could provide me with some ""lessons learned"" or things to be aware of?

Also, if this isn't the correct place to put this, please let me know where to repost.  I appreciate all of the help!
","While NCryptoki is good and you will probably have no issues using it, I would recommend you to look at PKCS11Interop. It is fully unit tested and even the unit test are documented and serve as examples. It is a joy using it :) (Disclaimer: I am not the author of this library. I just happen to know the author and have been using this library a lot.)

It could be possible. As a reference how to save data objects on smartcard please look at this keypass plugin. 
I have worked with Gemalto cards and Siemens cards but I don't know if they had FIPS 140-2 certification. When I searched for that keypas plugin I found Cryptostick. Doesn't say if it has Fips, but it has Common criteria 5 certification so it might be worth looking at.
Look at the keypass plugin I mentioned. It is implemented using PKCS11Interop I mentioned earlier.

","1158","<smartcard><usb-drive><fips><pkcs#11>","2","0","2","2014-05-25 05:57:32","23821818","1","0","","","","2014-05-22 23:35:34",""
"30912139","JVM hangs on exit","I am working on a small app that should sign documents using digital signature and quit.
The signature can be in a PKCS#12 archive (.pfx file) or on a smartcard device.
Working with the pfx file is easy and working fine.
However, sometimes using the smartcard device, the process hangs on Windows 8 PCs.
The document is signed correctly, but the process doesn't terminate. It just hangs.
I'm using the Sun's PKCS#11 provider - sun.security.pkcs11.SunPKCS11
Basically I'm doing this:
SunPKCS11 provider = new SunPKCS11(configuration);
Security.addProvider(provider);

..... some work .....

provider.logout()
Security.removeProvider(provider);

Now... even if I call System.exit(0) or throw an exception at the end of the main method, I can see the stacktrace in the output but the process doesn't terminate. 
I've added a shutdown hook to see if it is executed and it is, i.e. the JVM is trying to stop.
The hang occures rarely, only on Windows 8 PCs. Tried with different smartcards and it happens only with cards that use cmp11.dll (dlls are provided from the vendors of the smartcards).
Using the same dll for communication with the smartcard, however, works fine on Windows 7, XP or some Windows 8 PCs
Running it with Java 8, Update 45, on either x86 or x64 Windows 8
Tried to get a thread dump to see what is hanging:
public static void main(String[] args) {
  // do my job, register provider, sign documents, remove provider ...

  for(int i = 0; i < 20; ++i) {
    System.err.println(""Sleep... "" + i);
    Thread.sleep(2 * 1000);
  }
  System.err.println(""Exiting..."");
}

If I execute jstack -l 3232 > dump.log 2>&1 when Sleep... x is printing, everything looks OK.
However, if I execute jstack -F -l 3232 > dump2.log 2>&1 when Exiting... is printed and the app hangs (using -F because the process hangs), i got the following:
Attaching to process ID 3232, please wait...
Debugger attached successfully.
Server compiler detected.
JVM version is 25.45-b02
Deadlock Detection:

No deadlocks found.

Thread Exception in thread ""main""         
java.lang.reflect.InvocationTargetException
      at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
      at   sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
      at   sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
      at java.lang.reflect.Method.invoke(Method.java:497)
      at sun.tools.jstack.JStack.runJStackTool(JStack.java:140)
      at sun.tools.jstack.JStack.main(JStack.java:106)
Caused by: sun.jvm.hotspot.debugger.DebuggerException: Windbg Error: GetThreadIdBySystemId failed!
      at sun.jvm.hotspot.debugger.windbg.WindbgDebuggerLocal.getThreadIdFromSysId0(Native Method)
      at sun.jvm.hotspot.debugger.windbg.WindbgDebuggerLocal.getThreadIdFromSysId(WindbgDebuggerLocal.java:284)
      at sun.jvm.hotspot.debugger.windbg.amd64.WindbgAMD64Thread.getThreadID(WindbgAMD64Thread.java:88)
      at sun.jvm.hotspot.debugger.windbg.amd64.WindbgAMD64Thread.toString(WindbgAMD64Thread.java:81)
      at java.lang.String.valueOf(String.java:2982)
      at java.io.PrintStream.print(PrintStream.java:683)
      at sun.jvm.hotspot.runtime.win32_amd64.Win32AMD64JavaThreadPDAccess.printThreadIDOn(Win32AMD64JavaThreadPDAccess.java:114)
      at sun.jvm.hotspot.runtime.JavaThread.printThreadIDOn(JavaThread.java:265)
      at sun.jvm.hotspot.tools.StackTrace.run(StackTrace.java:79)
      at sun.jvm.hotspot.tools.StackTrace.run(StackTrace.java:45)
      at sun.jvm.hotspot.tools.JStack.run(JStack.java:66)
      at sun.jvm.hotspot.tools.Tool.startInternal(Tool.java:260)
      at sun.jvm.hotspot.tools.Tool.start(Tool.java:223)
      at sun.jvm.hotspot.tools.Tool.execute(Tool.java:118)
      at sun.jvm.hotspot.tools.JStack.main(JStack.java:92)
      ... 6 more

I can see the process with PID 3232 in the task manager!
Any idea why it is not terminating or why jstack fails?
EDIT

Ok, tried to extract the signing in a separate process, execute it with Runtime.exec and then kill it with Process.destroy but... doesn't seem to help. The child process still stays in the task manager.
Aaaaand... now I have no other choice but to make it kill itself ;(
try {
  String name = java.lang.management.ManagementFactory.getRuntimeMXBean().getName();
  Runtime.getRuntime().exec(""taskkill.exe /F /PID "" + name.split(""@"")[0]);
}
catch(Throwable t) {
  Runtime.getRuntime().exec(""taskkill.exe /F /IM java.exe""); 
}

EDIT 2

Tried with Runtime.halt as well. Still doesn't terminate the process...
I would appreciate any ideas!
","This won't address your root cause, but this method can be used to force the JVM to terminate:
http://docs.oracle.com/javase/7/docs/api/java/lang/Runtime.html#halt(int)
As the Javadoc says, use with extreme caution ;-)
","1156","<java><windows-8><jvm><java-8><pkcs#11>","7","1","2","2015-11-26 15:13:06","","3","2","342483","","2015-06-19 15:59:00","2015-06-18 09:54:35",""
"30912139","JVM hangs on exit","I am working on a small app that should sign documents using digital signature and quit.
The signature can be in a PKCS#12 archive (.pfx file) or on a smartcard device.
Working with the pfx file is easy and working fine.
However, sometimes using the smartcard device, the process hangs on Windows 8 PCs.
The document is signed correctly, but the process doesn't terminate. It just hangs.
I'm using the Sun's PKCS#11 provider - sun.security.pkcs11.SunPKCS11
Basically I'm doing this:
SunPKCS11 provider = new SunPKCS11(configuration);
Security.addProvider(provider);

..... some work .....

provider.logout()
Security.removeProvider(provider);

Now... even if I call System.exit(0) or throw an exception at the end of the main method, I can see the stacktrace in the output but the process doesn't terminate. 
I've added a shutdown hook to see if it is executed and it is, i.e. the JVM is trying to stop.
The hang occures rarely, only on Windows 8 PCs. Tried with different smartcards and it happens only with cards that use cmp11.dll (dlls are provided from the vendors of the smartcards).
Using the same dll for communication with the smartcard, however, works fine on Windows 7, XP or some Windows 8 PCs
Running it with Java 8, Update 45, on either x86 or x64 Windows 8
Tried to get a thread dump to see what is hanging:
public static void main(String[] args) {
  // do my job, register provider, sign documents, remove provider ...

  for(int i = 0; i < 20; ++i) {
    System.err.println(""Sleep... "" + i);
    Thread.sleep(2 * 1000);
  }
  System.err.println(""Exiting..."");
}

If I execute jstack -l 3232 > dump.log 2>&1 when Sleep... x is printing, everything looks OK.
However, if I execute jstack -F -l 3232 > dump2.log 2>&1 when Exiting... is printed and the app hangs (using -F because the process hangs), i got the following:
Attaching to process ID 3232, please wait...
Debugger attached successfully.
Server compiler detected.
JVM version is 25.45-b02
Deadlock Detection:

No deadlocks found.

Thread Exception in thread ""main""         
java.lang.reflect.InvocationTargetException
      at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
      at   sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
      at   sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
      at java.lang.reflect.Method.invoke(Method.java:497)
      at sun.tools.jstack.JStack.runJStackTool(JStack.java:140)
      at sun.tools.jstack.JStack.main(JStack.java:106)
Caused by: sun.jvm.hotspot.debugger.DebuggerException: Windbg Error: GetThreadIdBySystemId failed!
      at sun.jvm.hotspot.debugger.windbg.WindbgDebuggerLocal.getThreadIdFromSysId0(Native Method)
      at sun.jvm.hotspot.debugger.windbg.WindbgDebuggerLocal.getThreadIdFromSysId(WindbgDebuggerLocal.java:284)
      at sun.jvm.hotspot.debugger.windbg.amd64.WindbgAMD64Thread.getThreadID(WindbgAMD64Thread.java:88)
      at sun.jvm.hotspot.debugger.windbg.amd64.WindbgAMD64Thread.toString(WindbgAMD64Thread.java:81)
      at java.lang.String.valueOf(String.java:2982)
      at java.io.PrintStream.print(PrintStream.java:683)
      at sun.jvm.hotspot.runtime.win32_amd64.Win32AMD64JavaThreadPDAccess.printThreadIDOn(Win32AMD64JavaThreadPDAccess.java:114)
      at sun.jvm.hotspot.runtime.JavaThread.printThreadIDOn(JavaThread.java:265)
      at sun.jvm.hotspot.tools.StackTrace.run(StackTrace.java:79)
      at sun.jvm.hotspot.tools.StackTrace.run(StackTrace.java:45)
      at sun.jvm.hotspot.tools.JStack.run(JStack.java:66)
      at sun.jvm.hotspot.tools.Tool.startInternal(Tool.java:260)
      at sun.jvm.hotspot.tools.Tool.start(Tool.java:223)
      at sun.jvm.hotspot.tools.Tool.execute(Tool.java:118)
      at sun.jvm.hotspot.tools.JStack.main(JStack.java:92)
      ... 6 more

I can see the process with PID 3232 in the task manager!
Any idea why it is not terminating or why jstack fails?
EDIT

Ok, tried to extract the signing in a separate process, execute it with Runtime.exec and then kill it with Process.destroy but... doesn't seem to help. The child process still stays in the task manager.
Aaaaand... now I have no other choice but to make it kill itself ;(
try {
  String name = java.lang.management.ManagementFactory.getRuntimeMXBean().getName();
  Runtime.getRuntime().exec(""taskkill.exe /F /PID "" + name.split(""@"")[0]);
}
catch(Throwable t) {
  Runtime.getRuntime().exec(""taskkill.exe /F /IM java.exe""); 
}

EDIT 2

Tried with Runtime.halt as well. Still doesn't terminate the process...
I would appreciate any ideas!
","I have some problem with sun.security.pkcs11.SunPKCS11 on Windows 8 PCs.This is working for me:
Runtime.getRuntime().exec(""taskkill.exe /F /PID "" + name.split(""@"")[0]);
Thread.sleep(500);

","1156","<java><windows-8><jvm><java-8><pkcs#11>","7","1","2","2015-11-26 15:13:06","","3","2","342483","","2015-06-19 15:59:00","2015-06-18 09:54:35",""
"28166678","Private Key Template Inconsistent","I am attempting to generate an RSA key pair inside a SafeNet HSM. I copied the example templates specified in PKCS11 for the private and public keys. When i generate the key pair everything works fine. However, when i specify for the private key the following attribute values, the C_GenerateKeyPair returns CKR_TEMPLATE_INCONSISTENT:

CKA_DECRYPT = false.
CKA_UNWRAP = true.

I can imagine why i get template inconsistent but i just want to verify it. Since the unwrap operation is in it's essence a decrypt operation, then it is not consistent to allow a key to unwrap while it cannot decrypt.
However, shouldn't these two operations be treated separately by PKCS11 implementations?
Thanks in advance.  
","You should not have to set both of them, they are indeed separate. In fact, there exists in recent versions of the Gemalto SafeNet HSMs a partition policy that has to be enabled before so-called ""multi-purpose keys"" are even allowed. I think the inconsistency is not within the private key template, but rather between it and the corresponding public key template. You probably have to set the flags to the opposite values in the public key template.
","1151","<pkcs#11><hsm>","3","0","1","2018-08-17 06:19:40","","0","0","3826310","","2015-01-27 09:36:50","2015-01-27 09:07:00",""
"19983391","Extract CKA_Value from Key or data Object in PKCS11","I would like to read Key value from a KEY/Data object of PKCS11 into a local variable.
I observe that Key is stored in CKA_VALUE of Key object.
Which is the ideal function to be used to get this value to my local variable?
I have used C_GetAttributeValue it but doesn't help.
Please guide me.
Thanks
Harsha
","Private keys of assymmetric algorithms and symmetric keys usually can not be extracted from the hardware device. This is a protection measure. That's why you can't get the value. 
There exist exceptions (some implementations allow you to add the key and explicitly mark it as not protected, in which case the key can be read later) but this reduces security and other user benefits, so this not popular.
","1135","<pkcs#11>","0","0","2","2018-09-02 15:09:27","19988059","0","","","","","2013-11-14 16:44:27",""
"19983391","Extract CKA_Value from Key or data Object in PKCS11","I would like to read Key value from a KEY/Data object of PKCS11 into a local variable.
I observe that Key is stored in CKA_VALUE of Key object.
Which is the ideal function to be used to get this value to my local variable?
I have used C_GetAttributeValue it but doesn't help.
Please guide me.
Thanks
Harsha
","In some implementation, if you set the CKA.CKA_SENSITIVE to false, yes you can read the value.
","1135","<pkcs#11>","0","0","2","2018-09-02 15:09:27","19988059","0","","","","","2013-11-14 16:44:27",""
"26968336","Virtual Smart Card PKCS#11 compliant","I would like to run some tests on a virtual smart card. I would like to know if there exists a virtual smart card PKCS#11 compliant and supported by OpenSC. I'm running on Linux.
Thank you in advance for your valuable help. Best, BEE
","I believe you are looking for a pure software implementation of PKCS#11 interface such as SoftHSM or OpenCryptoki. You can also take a look at Virtual Smart Card project but it will be slightly more complex to setup.
","1123","<c><linux><smartcard><pkcs#11><opensc>","0","3","2","2014-11-17 17:55:34","","0","0","","","","2014-11-17 08:22:56",""
"26968336","Virtual Smart Card PKCS#11 compliant","I would like to run some tests on a virtual smart card. I would like to know if there exists a virtual smart card PKCS#11 compliant and supported by OpenSC. I'm running on Linux.
Thank you in advance for your valuable help. Best, BEE
","Firefox includes the certificate storage accessible via PKCS#11 (note that their PKCS11 needs special form of initialization). 
","1123","<c><linux><smartcard><pkcs#11><opensc>","0","0","2","2014-11-17 17:55:34","","0","0","","","","2014-11-17 08:22:56",""
"33902188","Cryptoki C_Initialize fails with code 0x5","I am working on an application that accesses smart cards using PKCS#11. I am able to obtain the entry points that are present in gclib.dll and call them successfully. (I made a call to C_GetFunctionList and obtained the funtion list)
But a call to C_Initialize(NULL_PTR) returns an error code of 0x5. What are the general reasons why this failure might be occurring? I have not been able to find a definite answer why it might fail here. 
Thank You.
Edit : I checked procmon at the point where C_Initialize was called and it was trying to look for 2 windows registry entries which were not present.
HKLM\SOFTWARE\Wow6432Node\Gemplus\Cryptography\PKCS11\Token
HKLM\SOFTWARE\Wow6432Node\Gemplus\Cryptography\PKCS11\4.0
","From what I could find online Windows XP (and some other windows operating systems) come with GemSafe drivers pre-installed. The registry entries are also present without adding any additional configurations.
https://msdn.microsoft.com/en-us/subscriptions/downloads/cc780058
But this is not so for Windows 7. I was able to fix this issue by installing Gemalto Classic Client 6.1 instead of trying to install GemSafe and that added the registry entries i needed.
http://support.gemalto.com/index.php?id=classic_client
","1117","<smartcard><pkcs#11>","3","2","1","2015-12-03 23:13:07","34078061","2","2","1533083","","2015-11-24 23:12:09","2015-11-24 19:29:35",""
"40026788","nCipher HSM retarget JCE key","Is it possible to ""retarget"" keys generated via the ncipher JCE API to pkcs11? I know that you can retarget via the generatekey command but I don't see how to do it to an existing JCE key. The first prompt is for the ""source application"" and the options don't seem to include JCE. Does it support other options beyond the ones listed there or should I be looking at a different way of retargeting?
The ultimate goal here is to export a couple keys (asymmetric and symmetric) that were generated via nCipher's JCE API (yes, I know that an HSM's job is to secure the keys and exporting is usually not a good idea but it is a requirement here). We are able to export keys that were generated via the PKCS11 interface but not ones that were generated via the JCE so our thinking is that if we can retarget it from JCE to PKCS11 we might be able to export these keys as well. If there is another way to do this we are open to that as well.
Lastly, the JCE keys show up as ""recovery enabled"" when executing the nfkminfo on them. Does that mean that they are exportable or does recovery here mean something else?
","Disclaimer: I work for Thales e-Security but do not speak for the company.  
Yes you can retarget a jcecsp key to pkcs11.  If you have any jcecsp keys in your kmdata/local, /opt/nfast/bin/generatekey will offer jcecsp as a source option.  If you have no keys of that ilk, it will quietly omit that option from the source list.  However, this retarget process may not do what you think it does.  All retargeting does is change the application type and potentially the associated metadata: it doesn't change the fundamental capabilities of the key as those were baked into the protected key blob at generation time and cannot be changed. 
The Security World uses nShield key ACLs to limit the key's capabilities (Sign, Verify, Encrypt, Decrypt, Wrap, Be Wrapped, etc.).  PKCS#11 pulls its parameters (CKA_SIGN, etc.) directly from the key ACLs, and when generating keys through the API, the ACLs saved in the key blob are derived directly from the parameters in the key template.  If you set CKA_SENSITIVE to FALSE, and your Security World allows it, you can generate and save an exportable key. JCE is not that sophisticated: it has no concept of key capabilities at all, so the Provider has to guess at the user's intent with the key and it defaults to a fairly generous set.  However, since as you point out the whole idea of HSMs is to protect key bits and not let you have them, Export is not one of the defaults.  And what's not baked into the key file when you create it, you don't get by retargeting the key.  
One thing you could do if you want to use JCE is to generate the key using a different Provider and then store it in an nCipher.sworld KeyStore using the nCipherKM Provider: this will import the key into the Security World (if your World allows that) and save it as a key_jcecsp_* file.  However this has nothing to do with key security so from an HSM perspective it's not recommended. Another thing you could do is to drop down to the native nCore API, generate the key with the ACL entries you require, and then polymorph it to a JCE Key Object and save it in the HSM-backed KeyStore.  You can shoot yourself in the foot as many times as you want with the ACLs on the key you create.  The polymorphing is very poorly documented: ask Thales Support and they can guide you.  
Finally, the Recovery capability means that in addition to the Working Key blob which may be protected by an Operator Card Set, the key file has a Recovery Blob.  This is in case that Operator Card Set is lost: the Recovery Blob can be opened up by the Administrator Card Set of the Security World using the rocs utility (Replace Operator Card Set), which will write a new key file under a new OCS.  No, this does not mean the key is exportable.  It just means that you are protected against losing the OCS.  Of course losing the ACS is a non-starter as that is your Root of Trust.
","1114","<jce><pkcs#11><hsm>","1","7","1","2016-10-31 20:25:56","40350051","0","","","","","2016-10-13 16:50:37",""
"25360749","Encrypting data using smart card private key","I am trying to use an applet in my web application to encrypt some data using a smart card. 
i am following this link:
http://www.developer.com/java/other/article.php/3587361/Java-Applet-for-Signing-with-a-Smart-Card.htm
I am able to read the certificates stored in the smartcard and encrypt data using the certificates.
But it requires me to pass location of PKCS#11 implementation library file(.dll) and the smart card pin.
My functional requirement is to load the list of certificates from a single(or multiple) smart cards connected to a system without passing any .dll filepath. Ofcourse, when the user selects a certificate for signing he/she will enter the PIN. 
Is it possible to extract certificate details from a smartcard without passing location of PKCS#11 implementation library file(.dll)
Implementation:
PKCS11LibraryFileAndPINCodeDialog localPKCS11LibraryFileAndPINCodeDialog = new PKCS11LibraryFileAndPINCodeDialog();

boolean bool;

try {
  bool = localPKCS11LibraryFileAndPINCodeDialog.run();

}
finally
{
  localPKCS11LibraryFileAndPINCodeDialog.dispose();
}
if (bool)
{
  String str2 = this.mSignButton.getLabel();
  this.mSignButton.setLabel(""Working..."");
  this.mSignButton.setEnabled(false);
  try
  {
    String str3 = localPKCS11LibraryFileAndPINCodeDialog.getLibraryFileName();
    String str4 = localPKCS11LibraryFileAndPINCodeDialog.getSmartCardPINCode();
    SmartCardSignerApplet.CertificationChainAndSignatureBase64 localCertificationChainAndSignatureBase641 = signDocument(arrayOfByte, str3, str4);
  }

","The short answer is ""No.""  When interacting with smart cards, Java simply passes the PKCS#11 requests on to the .dll file that actually interacts with the card, so you need to provide this .dll file to interact with the smart card and read certificates.  
You might be able to do this without the .dll file, but I think it would amount to rewriting the .dll code yourself.  My understanding is that different smart cards have different APIs, and the .dll files used to access them provide a standard PKCS#11 API, so rather than implement all smart card APIs, the Java libraries for smart card access just use the PKCS#11 interface provided by the .dll file.
","1110","<java><dll><certificate><smartcard><pkcs#11>","0","0","1","2015-03-13 14:30:38","","0","0","3619997","","2014-08-19 05:17:55","2014-08-18 10:05:11",""
"18502534","Signing an XML using pkcs11 Wrappers in JAVA","I have written a program to sign XMl file using Digital signature API provided by Java 
(ie., classes from javax.xml.crypto.dsig package). But to sign an xml document , the private key had to be provided, to create a signing context, before specifying a digest like in the below statement .
DOMSignContext dsc = new DOMSignContext(priv_key, doc.getDocumentElement());

I want to sign the xml when i store private key in a secure storage like HSM.
I have wrapper classes to access HSM in JAVA,so I can get a handle for the private key, but do not know how to use it for signing.
Can anyone guide me on how to sign XML in this way...
","Signing is supported by the PKCS#11 provider that is delivered by Oracle. You may currently have a C style handle in the wrapper class, but that is not much use. The handle must be within a JCA provider to be used with the XML signing classes. And the provider must be signed by an Oracle provided code signing certificate.
To use the private key with the PKCS#11 provider, make sure that a certificate with the same ID is present in the PKCS#11 token. That way the combined private key/certificate entry will show up in the ""PKCS11"" KeyStore. You can use that to sign the XML data.
","1109","<xml-signature><pkcs#11><hsm>","2","0","1","2013-08-31 21:09:34","18552856","0","1","993133","","2013-08-30 14:52:20","2013-08-29 04:53:16",""
"12767073","how to read certificate from USB device and send it to browser like firefox","I want to write a c++ dll that read certificate from my USB device and send that to browsers like Firefox.And I should mention that i have built my USB device with an ATMega32A which have 2K EEPROM and i stored a sample certificate on that.
I have read some about PKCS#11 standard but i cant figure out where to start. Could anyone help me on this?
","Step 1: write a dll that can read data from the USB device.  You could use Winusb.  This will require the firmware to support it.
Step 2: write a dll that can add a certificate to Firefox
Step 3:  combine previous steps into one dll
If you get stuck on something specific, write a new question and show us what you have done so far.
","1097","<c++><firefox><dll><certificate><pkcs#11>","0","1","3","2012-10-08 06:24:50","12776323","0","","","","","2012-10-07 07:53:19",""
"12767073","how to read certificate from USB device and send it to browser like firefox","I want to write a c++ dll that read certificate from my USB device and send that to browsers like Firefox.And I should mention that i have built my USB device with an ATMega32A which have 2K EEPROM and i stored a sample certificate on that.
I have read some about PKCS#11 standard but i cant figure out where to start. Could anyone help me on this?
","It sounds like you're creating a PKI hardware device. I think your biggest hurdle will be accessing the ATMega32. It'll be up to you to implement an interface on the ATMega side, be that a RS232-usb bridge, USB Mass Storage, or proprietary with a custom driver. 
A simple solution might be to use a USB Mass Storage interface to present a certificate as file on a pseudo disk.
Taking the custom driver route, Firefox (and other Mozilla products) use libraries that have interfaces for PKI hardware. See NSS and OpenSC.
At a guess it's possible that there's a PKI / PKCS11 driver API for Windows that you can implement. 
","1097","<c++><firefox><dll><certificate><pkcs#11>","0","2","3","2012-10-08 06:24:50","12776323","0","","","","","2012-10-07 07:53:19",""
"12767073","how to read certificate from USB device and send it to browser like firefox","I want to write a c++ dll that read certificate from my USB device and send that to browsers like Firefox.And I should mention that i have built my USB device with an ATMega32A which have 2K EEPROM and i stored a sample certificate on that.
I have read some about PKCS#11 standard but i cant figure out where to start. Could anyone help me on this?
","You can not ""add to Firefox"" but you can expose your data to firefox and make them available for use. To do this you need to implement PKCS#11 API and create so-called PKCS#11 driver (the user-mode DLL which implements those 70 or so functions defined in PKCS#11 API). Those functions would talk to the hardware device in order to perform certain operations. Then you plug this PKCS#11 DLL to Firefox and Firefox can use certificates on your device. 
","1097","<c++><firefox><dll><certificate><pkcs#11>","0","1","3","2012-10-08 06:24:50","12776323","0","","","","","2012-10-07 07:53:19",""
"46440422","How can I convert the private key stored in HSM to SignedXml.SigningKey in C#","I'm trying to implement some demo of XML signing with a certificate which stored in the HSM.
I found some interesting example from this link:
Sign XML Document with X509Certificate2 and modified it to using certificate and key inside the HSM with PKCS11Interop wrapper.
But anyone could give me a suggestion or example to convert ObjectHandle privateKey from HSM to SignedXML.SigningKey
private static void SignXmlWithCertificate(XmlDocument xmlDoc, X509Certificate2 cert, Session session, String alias)
        {
            SignedXml signedXml = new SignedXml(xmlDoc);

            List<ObjectAttribute> template = new List<ObjectAttribute>();
            template.Add(new ObjectAttribute(CKA.CKA_CLASS, CKO.CKO_PRIVATE_KEY));
            template.Add(new ObjectAttribute(CKA.CKA_KEY_TYPE, CKK.CKK_RSA));
            template.Add(new ObjectAttribute(CKA.CKA_LABEL, alias));
            List<ObjectHandle> foundObjects = session.FindAllObjects(template);
            ObjectHandle privateKey = foundObjects[0];

            signedXml.SigningKey = privateKey; //Here is where I stuck.

In the example from above external link. They using a certificate which combined private key. Then they can use like this.
signedXml.SigningKey = cert.PrivateKey;

But the certificate that I'm using haven't content of private key inside. Please give me some suggestion.
","You need to implement custom class inherited from System.Security.Cryptography.RSA class, use Pkcs11Interop in its implementation and then use instance of your custom class as a SigningKey.
You can implement it yourself or you can use Pkcs11Interop.X509Store library which provides easy to use PKCS#11 based X.509 certificate store and contains Pkcs11RsaProvider class inherited from System.Security.Cryptography.RSA class. There's also a code sample available which demonstrates its usage with SignedXml class.
","1089","<c#><private-key><pkcs#11><xml-signature><pkcs11interop>","2","1","2","2019-01-08 13:24:54","","0","1","3360744","","2017-10-20 10:09:49","2017-09-27 05:55:27",""
"46440422","How can I convert the private key stored in HSM to SignedXml.SigningKey in C#","I'm trying to implement some demo of XML signing with a certificate which stored in the HSM.
I found some interesting example from this link:
Sign XML Document with X509Certificate2 and modified it to using certificate and key inside the HSM with PKCS11Interop wrapper.
But anyone could give me a suggestion or example to convert ObjectHandle privateKey from HSM to SignedXML.SigningKey
private static void SignXmlWithCertificate(XmlDocument xmlDoc, X509Certificate2 cert, Session session, String alias)
        {
            SignedXml signedXml = new SignedXml(xmlDoc);

            List<ObjectAttribute> template = new List<ObjectAttribute>();
            template.Add(new ObjectAttribute(CKA.CKA_CLASS, CKO.CKO_PRIVATE_KEY));
            template.Add(new ObjectAttribute(CKA.CKA_KEY_TYPE, CKK.CKK_RSA));
            template.Add(new ObjectAttribute(CKA.CKA_LABEL, alias));
            List<ObjectHandle> foundObjects = session.FindAllObjects(template);
            ObjectHandle privateKey = foundObjects[0];

            signedXml.SigningKey = privateKey; //Here is where I stuck.

In the example from above external link. They using a certificate which combined private key. Then they can use like this.
signedXml.SigningKey = cert.PrivateKey;

But the certificate that I'm using haven't content of private key inside. Please give me some suggestion.
","You need to implement custom class inherited from System.Security.Cryptography.Xml.SignedXml like this
public class CustomSignedXml: SignedXml
    {
    public CustomSignedXml(XmlDocument xmlDoc):base(xmlDoc)
    {
    }
    internal void ComputeSignature(ISignerProvider signerProvider)
    {
        var methodInfo = typeof (SignedXml).GetMethod(""BuildDigestedReferences"",
            BindingFlags.Instance | BindingFlags.NonPublic);
        methodInfo.Invoke(this, null);
        SignedInfo.SignatureMethod = XmlDsigRSASHA1Url;
        // See if there is a signature description class defined in the Config file
        SignatureDescription signatureDescription =
            CryptoConfig.CreateFromName(SignedInfo.SignatureMethod) as SignatureDescription;
        if (signatureDescription == null)
            throw new CryptographicException(""Cryptography_Xml_SignatureDescriptionNotCreated"");

        var hashAlg = signatureDescription.CreateDigest();
        if (hashAlg == null)
            throw new CryptographicException(""Cryptography_Xml_CreateHashAlgorithmFailed"");
        var methodInfo2 = typeof (SignedXml).GetMethod(""GetC14NDigest"", BindingFlags.Instance | BindingFlags.NonPublic);
        var hashvalue = (byte[]) methodInfo2.Invoke(this, new object[] {hashAlg});

        m_signature.SignatureValue = signerProvider.Sign(hashvalue);
    }
}

and then you need to create interface like this
public interface ISignerProvider
{
    byte[] Sign(byte[] data);
}

then implement it by Pkcs11Interop like this
    public class Pkcs11SignerProvider : ISignerProvider
{
    private string _thumbprint;
    public string DllPath { get; set; }
    public string TokenSerial { get; set; }
    public string TokenPin { get; set; }
    public string PrivateKeyLabel { get; set; }

    public Pkcs11SignerProvider(string dllPath, string tokenSerial, string tokenPin, string privateKeyLabel)
    {
        DllPath = dllPath;
        TokenSerial = tokenSerial;
        TokenPin = tokenPin;
        PrivateKeyLabel = privateKeyLabel;
    }

    public byte[] Sign(byte[] data)
    {
        using (var pkcs11 = new Pkcs11(DllPath, AppType.SingleThreaded))
        {

            var slots = pkcs11.GetSlotList(SlotsType.WithTokenPresent);
            var slot = slots.FirstOrDefault(slot1 => slot1.GetTokenInfo().SerialNumber == TokenSerial);
            if (slot == null)
                throw new Exception(""there is no token with serial "" + TokenSerial);
            using (var session = slot.OpenSession(SessionType.ReadOnly))
            {
                session.Login(CKU.CKU_USER, TokenPin);

                var searchTemplate = new List<ObjectAttribute>
                {
                    new ObjectAttribute(CKA.CKA_CLASS, CKO.CKO_PRIVATE_KEY),
                    new ObjectAttribute(CKA.CKA_KEY_TYPE, CKK.CKK_RSA)
                };
                if (!string.IsNullOrEmpty(PrivateKeyLabel))
                    searchTemplate.Add(new ObjectAttribute(CKA.CKA_LABEL, PrivateKeyLabel));

                var foundObjects = session.FindAllObjects(searchTemplate);
                var privateKey = foundObjects.FirstOrDefault();

                using (var mechanism = new Mechanism(CKM.CKM_RSA_PKCS))
                {
                    return session.Sign(mechanism, privateKey, data);
                }

            }

        }
    }

}

then call this method to sign xml
public static void Sign(XmlDocument xmlDoc, ISignerProvider signerProvider)
    {
        if (xmlDoc == null)
            throw new ArgumentException(""xmlDoc"");
        if (xmlDoc.DocumentElement == null)
            throw new ArgumentException(""xmlDoc.DocumentElement"");
        var signedXml = new CustomSignedXml(xmlDoc);
        var reference = new Reference { Uri = """" };
        var env = new XmlDsigEnvelopedSignatureTransform();
        reference.AddTransform(env);
        signedXml.AddReference(reference);
        signedXml.ComputeSignature(signerProvider);
        var xmlDigitalSignature = signedXml.GetXml();
        xmlDoc.DocumentElement.AppendChild(xmlDoc.ImportNode(xmlDigitalSignature, true));
    }

and this code to verify
        public static bool Verify(XmlDocument document, X509Certificate2 certificate)
    {
        // Check arguments.
        if (document == null)
            throw new ArgumentException(""Doc"");
        if (certificate == null)
            throw new ArgumentException(""Key"");

        // Create a new SignedXml object and pass it
        // the XML document class.
        var signedXml = new SignedXml(document);

        // Find the ""Signature"" node and create a new
        // XmlNodeList object.
        var nodeList = document.GetElementsByTagName(""Signature"");

        // Throw an exception if no signature was found.
        if (nodeList.Count <= 0)
        {
            throw new CryptographicException(""Verification failed: No Signature was found in the document."");
        }

        // This example only supports one signature for
        // the entire XML document.  Throw an exception 
        // if more than one signature was found.
        if (nodeList.Count >= 2)
        {
            throw new CryptographicException(""Verification failed: More that one signature was found for the document."");
        }

        // Load the first <signature> node.  
        signedXml.LoadXml((XmlElement)nodeList[0]);

        return signedXml.CheckSignature(certificate, true);
    }

","1089","<c#><private-key><pkcs#11><xml-signature><pkcs11interop>","2","4","2","2019-01-08 13:24:54","","0","1","3360744","","2017-10-20 10:09:49","2017-09-27 05:55:27",""
"29362724","Java 8 cannot load its cacerts in FIPS. Exception ""no such provider: SunEC""","My server was using java 7 and is running fine in FIPS mode. Now we are upgrading to jre8 and the following exception is coming during the startup while loading cacerts.
java.lang.RuntimeException: java.security.NoSuchProviderException: no such provider: SunEC
   at sun.security.util.ECUtil.getKeyFactory(ECUtil.java:96)
   at sun.security.util.ECUtil.decodeX509ECPublicKey(ECUtil.java:102)
   at sun.security.pkcs11.P11ECKeyFactory.engineGeneratePublic(P11ECKeyFactory.java:170)
   at java.security.KeyFactory.generatePublic(KeyFactory.java:334)
   at sun.security.x509.X509Key.buildX509Key(X509Key.java:223)
   at sun.security.x509.X509Key.parse(X509Key.java:170)
   at sun.security.x509.CertificateX509Key.<init>(CertificateX509Key.java:75)
   at sun.security.x509.X509CertInfo.parse(X509CertInfo.java:667)
   at sun.security.x509.X509CertInfo.<init>(X509CertInfo.java:167)
   at sun.security.x509.X509CertImpl.parse(X509CertImpl.java:1806)
   at sun.security.x509.X509CertImpl.<init>(X509CertImpl.java:195)
   at sun.security.provider.X509Factory.engineGenerateCertificate(X509Factory.java:99)
   at java.security.cert.CertificateFactory.generateCertificate(CertificateFactory.java:339)
   at sun.security.provider.JavaKeyStore.engineLoad(JavaKeyStore.java:747)
   at sun.security.provider.JavaKeyStore$JKS.engineLoad(JavaKeyStore.java:55)
   at java.security.KeyStore.load(KeyStore.java:1433)
   at org.apache.commons.ssl.KeyStoreBuilder.tryJKS(KeyStoreBuilder.java:476)
   at org.apache.commons.ssl.KeyStoreBuilder.parse(KeyStoreBuilder.java:383)
   at org.apache.commons.ssl.TrustMaterial.<init>(TrustMaterial.java:212)
   at org.apache.commons.ssl.TrustMaterial.<init>(TrustMaterial.java:165)
   at org.apache.commons.ssl.TrustMaterial.<init>(TrustMaterial.java:170)
   at org.apache.commons.ssl.TrustMaterial.<init>(TrustMaterial.java:175)
   at org.apache.commons.ssl.TrustMaterial.<clinit>(TrustMaterial.java:88)
   at org.opensaml.xml.security.x509.X509Util.decodeCertificate(X509Util.java:317)
Caused by: java.security.NoSuchProviderException: no such provider: SunEC
        at sun.security.jca.GetInstance.getService(GetInstance.java:83)
        at sun.security.jca.GetInstance.getInstance(GetInstance.java:206)
        at java.security.KeyFactory.getInstance(KeyFactory.java:211)
        at sun.security.util.ECUtil.getKeyFactory(ECUtil.java:94)

The only modification i made is to add TLSv1.2 to jdk.tls.disabledAlgorithms=SSLv3,TLSv1.2 since NSS is not supporting TLSv1.2.
I was able to load the same in jre7u72 builds and i see that the sunpkcs11.jar is modified in java 8. It shouldnt be a cacerts issue since i copied the java7 cacerts to java8 and the problem still remains.
Has anyone seen this issue before? Should it be a java bug?
=== EDIT ===
Opened a java 8 bug. I wrote a tool which ran against jre7 with success and failed with jre8.
 import java.io.ByteArrayInputStream;
    import java.io.ByteArrayOutputStream;
    import java.io.FileInputStream;
    import java.io.IOException;
    import java.security.KeyStore;
    import java.security.Provider;
    import java.security.Security;
    import java.util.ArrayList;
    import java.util.Enumeration;
    import java.util.List;
    import java.util.Map;
    import java.util.Properties;
    import java.util.logging.Level;
    import java.util.logging.Logger;

    import sun.security.provider.Sun;
    import sun.security.rsa.SunRsaSign;

/**
 * Before running the tool run the following in your Linux box.
 * 
    1. export LD_LIBRARY_PATH=/usr/lib64
    2. mkdir /tmp/fips/nssdb
    3. modutil -create -dbdir /tmp/fips/nssdb/
    4. modutil -fips true -dbdir /tmp/fips/nssdb
    5. modutil -changepw ""NSS FIPS 140-2 Certificate DB"" -dbdir /tmp/fips/nssdb
      (Give a strong password like password1!)

 * @author atulsm@gmail.com
 *
 */
    public class TestKeyStoreFIPS {

        public static final String NSS_LIB_DIR_PROP = ""nss.lib"";
        public static final String NSS_DB_DIR_PROP = ""nss.db"";
        public static final String SUN_JSSE = ""SunJSSE"";
        public static List<String> disabledAlgs = new ArrayList<String>();

        private static final Logger logger = Logger.getLogger(TestKeyStoreFIPS.class.getName());

        /**
         * @param args
         */
        public static void main(String[] args) throws Exception{
            if(args.length != 2){
                System.out.println(""Usage eg: java -Dnss.lib=/usr/lib64 -Dnss.db=/tmp/fips/nssdb  -Djavax.net.ssl.keyStorePassword=password1! TestKeyStoreFIPS /tmp/jre8/lib/security/cacerts changeit"");
                System.exit(1);
            }

            enablePkcs11Jsse(System.getProperty(NSS_LIB_DIR_PROP), System.getProperty(NSS_DB_DIR_PROP));
            testFips();

            String file = args[0];
            char[] keystorePassword = args[1].toCharArray();
            FileInputStream keystoreStream = new FileInputStream(file);

            KeyStore keyStore = KeyStore.getInstance(""JKS"");
            keyStore.load(keystoreStream, keystorePassword);

            Enumeration<String> aliases = keyStore.aliases();

            while(aliases.hasMoreElements()){
                String alias = aliases.nextElement();
                System.out.println(alias + "" : "" + keyStore.getCertificate(alias).getType());

            }

        }

        private static void testFips(){
            String keyPass = System.getProperty(""javax.net.ssl.keyStorePassword"");      
            KeyStore store;

            try {
                store = KeyStore.getInstance(""PKCS11"");
                if (keyPass != null) {
                    store.load(null, keyPass.toCharArray());
                } else {
                    store.load(null, null);
                }
                System.out.println(""FIPS test success"");
            } catch (Throwable e) {
                e.printStackTrace();
                store = null;
                System.out.println(""FIPS test failed"");
            }                       
        }


        public static void enablePkcs11Jsse( String libDir, String dbDir) throws Exception {
            removeAllProviders();

            Provider nss = getNSSFIPSProvider( libDir, dbDir);
            removeDisabledAlgos(nss);       
            Security.insertProviderAt(nss, 1);

            Provider sunJsse = new com.sun.net.ssl.internal.ssl.Provider(nss);
            removeDisabledAlgos(sunJsse);
            Security.insertProviderAt(sunJsse,2);

            Sun sun = new Sun();
            removeDisabledAlgos(sun);       
            Security.insertProviderAt(sun,3);

            SunRsaSign sunrsa = new SunRsaSign();
            removeDisabledAlgos(sunrsa);
            Security.insertProviderAt(sunrsa,4);
        }   


       private static Provider getNSSFIPSProvider( String libDir, String dbDir) throws Exception {

           if(libDir == null || dbDir == null) {
               throw new Exception(NSS_LIB_DIR_PROP + "" or "" + NSS_DB_DIR_PROP + "" not set."");
           }

           Properties props = new Properties();
           props.put(""name"", ""NSSfips"");
           props.put(""nssLibraryDirectory"", libDir);
           props.put(""nssSecmodDirectory"", dbDir);
           props.put(""nssModule"", ""fips"");
           props.put(""nssDbMode"", ""readWrite"");

           return createProvider(props);
       }

       private static Provider createProvider(Properties props) throws IOException {
           ByteArrayOutputStream out = new ByteArrayOutputStream();
           props.store(out, null);
           ByteArrayInputStream in = new ByteArrayInputStream(out.toByteArray());

           Provider ret = new sun.security.pkcs11.SunPKCS11(in);
           if (logger.isLoggable(Level.FINE)) {
               // Log all of the registered services
               for (Map.Entry<Object, Object> entry : ret.entrySet()) {
                   logger.log(Level.FINE, ""{0} = {1}"", new Object[]{entry.getKey(), entry.getValue()});
               }
           }
           return ret;
       }

       private static void removeAllProviders(){    
        Provider[] providers = Security.getProviders();
        for(Provider prov : providers){
            Security.removeProvider(prov.getName());
        }
       }

        private static void removeDisabledAlgos(Provider provider){     
            for(String alg : disabledAlgs){
                if(provider.getProperty(alg) != null){
                    logger.info(""Removing algorithm "" + alg + "" from provider "" + provider);
                    provider.remove(alg);
                }
            }
        }   

    }

","While i explore other options, one approach which worked is to copy one of my truststores as jre/lib/security/jssecacerts. I see that the code is giving precedence to jssecacerts than cacerts and its working fine for now.
","1083","<java><java-8><fips><pkcs#11><nss>","4","0","1","2015-04-01 12:44:09","","0","1","760854","","2015-04-01 12:44:09","2015-03-31 07:13:16",""
"42378394","Hot to use mechanisms CKM_ECDH1_DERIVE with pkcs11interop","I bought a NitroKey HSM and wanted to derive a secret with EC.
Previosly question
For this, I want to use the CKM_ECDH1_DERIVE mechanisms. Which is supported by this HSM, see:

Referring to the PKCS#11 specification this must be considered:

The mechanism CKM_ECDH1_DERIVE must be used with the function Derive (Page 188)
The mechanism CKM_ECDH1_DERIVE expects parameter CK_ECDH1_DERIVE_PARAMS (Page 222) with this arguments:


kdf: Key derivation function used on the shared secret value (CKD)
sharedData: Some data shared between the two parties
publicData: Other party's EC public key value

The function DeriveKey expects these arguments:


Mechanism CKM.CKM_ECDH1_DERIVE
ObjectHandle PrivateKey
ObjectAttributes (Page 338)


CKA.CKA_CLASS -> CKO.CKO_SECRET_KEY
CKA.CKA_KEY_TYPE -> CKK.CKK_GENERIC_SECRET
But ""However, since these facts are all implicit in the mechanism, there is no need to specify any of them"" so these can be null?



Problem
So with this information, I tried to implement a method.
But I get this Error:

Net.Pkcs11Interop.Common.Pkcs11Exception : Method C_DeriveKey returned CKR_TEMPLATE_INCOMPLETE

at Session.DeriveKey.
Explanation of CKR_TEMPLATE_INCOMPLETE (Page 64):

If the attribute values in the supplied template, together with any default attribute
  values and any attribute values contributed to the object by the object-creation
  function itself, are insufficient to fully specify the object to create, then the attempt
  should fail with the error code CKR_TEMPLATE_INCOMPLETE.

and here (Page 98)

CKR_TEMPLATE_INCOMPLETE: The template specified for creating an object is
  incomplete, and lacks some necessary attributes. See Section 10.1 for more
  information.

But I used the nesseary attributes:

CKA.CKA_CLASS -> CKO.CKO_SECRET_KEY
CKA.CKA_KEY_TYPE -> CKK.CKK_GENERIC_SECRET

Ideas?
Code
private const string LibraryPath = @""C:\Windows\System32\opensc-pkcs11.dll"";

public static byte[] Derive(string privateEc, string publicEc)
{
    Func<string, Session, CKO, ObjectHandle> getObjectHandle = (label, session, keyType) =>
    {
        var objectAttributes = new List<ObjectAttribute>
        {
            new ObjectAttribute(CKA.CKA_CLASS, keyType),
            new ObjectAttribute(CKA.CKA_LABEL, label),
            new ObjectAttribute(CKA.CKA_TOKEN, true)
        };

        return session.FindAllObjects(objectAttributes).First();
    };

    Func<ObjectHandle, Session, CKA, byte[]> getDataFromObject = (handle, session, type) =>
    {
        var attributes = new List<ulong> {(ulong) type};
        var requiredAttributes = session.GetAttributeValue(handle, attributes);
        return requiredAttributes[0].GetValueAsByteArray();
    };

    using (Pkcs11 pk = new Pkcs11(LibraryPath, false))
    {
        var slot = pk.GetSlotList(false).First();

        using (Session session = slot.OpenSession(false))
        {
            session.Login(CKU.CKU_USER, UserPin);

            var objectPrivate = getObjectHandle(privateEc, session, CKO.CKO_PRIVATE_KEY);
            var objectPublic = getObjectHandle(publicEc, session, CKO.CKO_PUBLIC_KEY);

            var publicKey = getDataFromObject(objectPublic, session, CKA.CKA_VALUE);

            byte[] data = session.GenerateRandom(32);
            var mechanism = new Mechanism(CKM.CKM_ECDH1_DERIVE, new CkEcdh1DeriveParams(1000, data, publicKey));

            var deriveAttributes = new List<ObjectAttribute>
            {
                new ObjectAttribute(CKA.CKA_CLASS, CKO.CKO_SECRET_KEY),
                new ObjectAttribute(CKA.CKA_KEY_TYPE, CKK.CKK_GENERIC_SECRET),
            };

            var derivedKey = session.DeriveKey(mechanism, objectPrivate, deriveAttributes);

            var derivedSecret = getDataFromObject(derivedKey, session, CKA.CKA_VALUE);

            Console.Out.WriteLine(Convert.ToBase64String(derivedSecret));

            return derivedSecret;
        }
    }
}

See also the gist (same code) https://gist.github.com/dhcgn/4ea235cdb20155ec5ea9dc9bbf3c9887
Update
Now with updated List of ObjectAttributes (thx to the answer) I get the exception Net.Pkcs11Interop.Common.Pkcs11Exception : Method C_DeriveKey returned CKR_DATA_LEN_RANGE.

CKR_DATA_LEN_RANGE: The plaintext input data to a cryptographic operation
  has a bad length.  Depending on the operation’s mechanism, this could mean that the plaintext data is too short, too long, or is not a multiple of some particular blocksize. 
  This return value has higher priority than CKR_DATA_INVALID.

For CKA.CKA_VALUE_LEN I tried different values with no success:
CKA_VALUE_LEN
-------------
24 (192)
40 (320)
48 (384)

I stumble upon the public key, I not sure if I extract the public key the right way. Because it has a length of 664 Bit.
CKA.CKA_VALUE of CKO.CKO_PUBLIC_KEY (664 Bit):
BFEEelKE3TrpE3e3f5nJATxEZrU0UeauhV/dFZXeXz5gqgZjuCtkJaUTainC/Mh357x3FyO7sGoPhzokD34oj5PJs0ItvATIKYtzvwaUkdZlDc0=

Extracted with the pkcs15-tool (864 Bit)
pkcs15-tool.exe --read-public-key 20
-----BEGIN PUBLIC KEY-----
MGowFAYHKoZIzj0CAQYJKyQDAwIIAQEJA1IABHpShN066RN3t3+ZyQE8RGa1NFHm
roVf3RWV3l8+YKoGY7grZCWlE2opwvzId+e8dxcju7BqD4c6JA9+KI+TybNCLbwE
yCmLc78GlJHWZQ3N
-----END PUBLIC KEY-----


Why is the public key different between pkcs15-tool and CKO.CKO_PUBLIC_KEY?
Which format does CkEcdh1DeriveParams expect for publicData? 
Do I extract the publicData the right way? Or what is the right way?
Must the value for CKA.CKA_VALUE_LEN equal to the lenght of my EC (320 Bit)?

","That's a very nice and complete description of a problem.
CKR_TEMPLATE_INCOMPLETE is always very painful to deal with because almost every library vendor expect different set of attributes to be provided and this error does not reveal which exact attributes are missing.
After a quick look at OpenSC source code I would try with following template:
var deriveAttributes = new List<ObjectAttribute>
{
    new ObjectAttribute(CKA.CKA_TOKEN, false),
    new ObjectAttribute(CKA.CKA_CLASS, CKO.CKO_SECRET_KEY),
    new ObjectAttribute(CKA.CKA_KEY_TYPE, CKK.CKK_GENERIC_SECRET),
    new ObjectAttribute(CKA.CKA_SENSITIVE, false),
    new ObjectAttribute(CKA.CKA_EXTRACTABLE, true),
    new ObjectAttribute(CKA.CKA_ENCRYPT, true),
    new ObjectAttribute(CKA.CKA_DECRYPT, true),
    new ObjectAttribute(CKA.CKA_WRAP, true),
    new ObjectAttribute(CKA.CKA_UNWRAP, true),
    new ObjectAttribute(CKA.CKA_VALUE_LEN, ???)
};

However I am not sure what is the correct value of CKA_VALUE_LEN attribute.
","1070","<pkcs#11><elliptic-curve><opensc><pkcs11interop><nitrokey>","3","4","1","2017-06-29 19:42:08","42378846","0","1","3325704","","2017-06-29 19:42:08","2017-02-21 21:31:14",""
"45385964","How to make a TLS request using a smartcard with python?","I have tried to use python library  ""requests"" to communicate with a website protected by a smartcard. It means a strong authentification in SSL : you must give a client side certificate (cert and private key).
As I am using a smartcard, I cannot read the private key (only the modulus) that is a normal protection. I can read the smartcard with the python library PyKCS11 : all certificate, public key and modulus of private key once given the pin code. 
How to mix both requests and PyKCS11 ?
How to make a SSL request with a client side certificate in a smartcard ? 
EDIT 2017/08/04
On my Mac : 

brew install openssl 
brew install opensc  
brew install engine_pkcs11
openssl


engine dynamic -pre SO_PATH:/usr/local/Cellar/engine_pkcs11/0.1.8/lib/engines/engine_pkcs11.so -pre ID:pkcs11 -pre LIST_ADD:1 -pre LOAD -pre MODULE_PATH:/usr/local/lib/(my specific Pkcs11 lib).dylib


Loaded: (pkcs11) pkcs11 engine

s_client -engine pkcs11 -key '(slot):(id)' -keyform engine -cert 'pem.cer' -connect (host):443 -state -debug


SSL handshake ok



My problem now is that pyOpenSSl do not have a function in the API to select an engine (like pkcs11). So I am stopped. I cannot use python.
","I would try to use:

OpenSSL with PKCS#11 (maybe using pkcs11 engine https://github.com/OpenSC/libp11)
pyOpenSSL

","1066","<python><ssl><python-requests><pkcs#11>","4","0","2","2018-08-21 15:17:04","","2","0","8385081","","2017-08-04 21:57:46","2017-07-29 06:12:44",""
"45385964","How to make a TLS request using a smartcard with python?","I have tried to use python library  ""requests"" to communicate with a website protected by a smartcard. It means a strong authentification in SSL : you must give a client side certificate (cert and private key).
As I am using a smartcard, I cannot read the private key (only the modulus) that is a normal protection. I can read the smartcard with the python library PyKCS11 : all certificate, public key and modulus of private key once given the pin code. 
How to mix both requests and PyKCS11 ?
How to make a SSL request with a client side certificate in a smartcard ? 
EDIT 2017/08/04
On my Mac : 

brew install openssl 
brew install opensc  
brew install engine_pkcs11
openssl


engine dynamic -pre SO_PATH:/usr/local/Cellar/engine_pkcs11/0.1.8/lib/engines/engine_pkcs11.so -pre ID:pkcs11 -pre LIST_ADD:1 -pre LOAD -pre MODULE_PATH:/usr/local/lib/(my specific Pkcs11 lib).dylib


Loaded: (pkcs11) pkcs11 engine

s_client -engine pkcs11 -key '(slot):(id)' -keyform engine -cert 'pem.cer' -connect (host):443 -state -debug


SSL handshake ok



My problem now is that pyOpenSSl do not have a function in the API to select an engine (like pkcs11). So I am stopped. I cannot use python.
","It works with M2Crypto:
def InitPKCS11Engine(id, dllPath):
    Engine.load_dynamic()
    e = Engine.Engine('dynamic')
    e.ctrl_cmd_string('SO_PATH', dllPath)
    e.ctrl_cmd_string('ID', id)
    e.ctrl_cmd_string('LIST_ADD', '1')
    e.ctrl_cmd_string('LOAD', None)
    return e

Afterwards you can add your specific pkcs11 library and add the pin. 
","1066","<python><ssl><python-requests><pkcs#11>","4","0","2","2018-08-21 15:17:04","","2","0","8385081","","2017-08-04 21:57:46","2017-07-29 06:12:44",""
"48285322","Java : PKCS11 SafeNet eToken 5110 : Slow; and How to code for EBICS signature mechanism A006?","Information :

There are two signature mechanisms for EBICS, A005 and A006. EBICS specification > 2017-03-29-EBICS V 3.0-FinalVersion.pdf
For EBICS A005, we have been using SHA256withRSA signature algorithm. It is working.
SafeNet eToken 5110 is used to sign data files. It is based on PKCS11 standard. Its driver/software is called ""SafeNet Authentication Client"".

Problem and questions :

SafeNet eToken 5110 is very slow with SHA256withRSA algorithm at the code signer.update(data);. No problem if we change the algorithm to SHA512withRSA. No problem with other version of eToken ""3SKey basic token (eToken PRO)"". Do you know if other persons have met this same problem? or only just us? What is the solution?
Because we cannot find solution at the moment, we are looking at EBICS A006 hoping that it will be faster. However, haven't found a way to develop Java code for it. Don't know the algorithm name to use. I have tried IAIK but it couldn't connect with native library libeTPkcs11.so or eTPKCS11.dll. BouncyCastle doesn't work with PKCS11. Do you have any advices? Thank you.

Code with SunPKCS11 (works but slow at .update(...))
String pkcs11config;
pkcs11config = ....
ByteArrayInputStream confStream = new ByteArrayInputStream(pkcs11config.getBytes());
SunPKCS11 provider = new SunPKCS11(confStream);
Security.addProvider(provider);
char[] password = ""...."".toCharArray();
String alias = ""..."";
PrivateKey privateKey = (PrivateKey) keystore.getKey(alias, password);
Signature signer = Signature.getInstance(""SHA256withRSA"", keystore.getProvider());
signer.initSign(privateKey);
String data = ""Hello world......"";
signer.update(data.getBytes());  // SLOW HERE! THE BIGGER THE DATA, THE SLOWER IT IS.
byte[] signedData = signer.sign();

Code tried with IAIK:
String pwd = System.getProperty(""user.dir"");
String dllFile = pwd + ""/libeTPkcs11.so"";
Module m = Module.getInstance(dllFile);

=> error : Exception in thread ""main"" java.lang.UnsatisfiedLinkError: no pkcs11wrapper in java.library.path

","","1064","<java><pkcs#11>","0","","0","2018-01-16 16:02:17","","4","","","","","2018-01-16 16:02:17",""
"50160296","Keytool list command shows incorrect keystore format","I'm creating a keystore in the pkcs12 format using command:
> openssl pkcs12 -export -in <cert> -inkey <key> -out mycert.p12 -name <name> -caname <caname>

Once created I' checking the created keystore:
> keytool -list -keystore mycert.p12 
Enter keystore password:  

Keystore type: JKS
Keystore provider: SUN
...

It's shows the type JKS. 
When I specify the type of the keystore explicitly the output seems correct:
> keytool -list -keystore mycert.p12 -storetype pkcs12
Enter keystore password:  

Keystore type: PKCS12
Keystore provider: SunJSSE

Why does keytool incorrectly show the type of the keystore when the storetype is not specified? This behaviour seems incorrect for me, the command should either fail or do not show the keystore type if the tool can't figure it out.   
","You 've may used a older keytool version than shipped with Java 8u192.
There was a bug JDK-8193171 reportet with the same issue.
I had the same problem with my installed jdk 1.8.0_161 - after using (the current) version 8u201 the keystore-type was displayed correctly.
","1062","<openssl><keytool><pkcs#11><pkcs#12><jks>","4","2","1","2019-02-26 10:30:12","54883397","0","","","","","2018-05-03 16:57:08",""
"31333282","File size increases after adding digital signature","I am signing the pdfs using the usb e-token, using the PKCS11 module in my java code. The size of the document increases from 50kb to 2mb. As i understand this is happening because of the CRL (Certificate Revocation List) that is added to the document when signing. Is there any way i can avoid adding this list or avoid the size of my file increasing.
","CRLs are added not always,  this depends on signing format (if you use PAdES or not). Another possibility of the observed behaviour is that the library inserts empty placeholder for the data but does not write the data itself.  Check both of these cases in your code. 
","1058","<java><digital-ocean><pkcs#11><e-token>","0","0","2","2016-05-25 12:23:27","","1","","","","","2015-07-10 05:42:36",""
"31333282","File size increases after adding digital signature","I am signing the pdfs using the usb e-token, using the PKCS11 module in my java code. The size of the document increases from 50kb to 2mb. As i understand this is happening because of the CRL (Certificate Revocation List) that is added to the document when signing. Is there any way i can avoid adding this list or avoid the size of my file increasing.
","Most of the professionals and stakeholders are facing a problem of increasing PDF file size at the time of filing MCA & LLP form such as AOC-4, LLP Form 11 etc.  Mos of us have faced problem of increasing PDF file size after signing with Digital signature. In the case of LLP return filing, we may have to affix 4 DSC ie two partner, one designated partner and one professional DSC. each time when we affix Digital signature file size is getting increased which generally cross the size of the file prescribed by MCA for form upload.
Main reason for increasing the file size is the certificate revocation list(CRL) gets embedded with the signature each time when we affix signature.
To overcome above problem one has to follow below step

Open any PDF file
  go to Edit -> Preferences- > Security
  click on Advanced Preferences, then select the ‘Creation’ tab.
  De-select ‘Include signature’s revocation status when signing

","1058","<java><digital-ocean><pkcs#11><e-token>","0","-1","2","2016-05-25 12:23:27","","1","","","","","2015-07-10 05:42:36",""
"46571064","What is the best pkcs11 installation for Ubuntu?","I am working on incorporating pkcs11 on my Ubuntu 16.04 workstation. I noticed a few installs available - opensc, libengine and so on. 
Can anyone please suggest me what the best pkcs11 install is ? I need to do the bare minimum stuff with it , nothing too fancy. 
The instructions to download would be very helpful as well and if there are any code examples available that would be a great help. 
Thanks
","What is it you want to accomplish?
PKCS#11 is really just a standard API middleware exposes for accessing their capabilities. You can, for example, call into an HSM using the associated PKCS#11 library without opensc or other middleware.
Think of OpenSC as a set of tools for working with smart cards, one of the tools being a PKCS#11 library that can talk to numerous smart cards. For example, ones that implement the PIV card-edge/protocol.
On Linux, in general, you will probably need to use OpenSC to work with the most common cards as many rely on it for Linux support.
libengine, on the other hand, is a plug-in model for OpenSSL that allows you to load a PKCS#11 library in OpenSSL. This allows you to take an application designed for OpenSSL and get it to work with an HSM or smart card (in some cases).
It is turtles all the way down.
","1051","<ubuntu-16.04><pkcs#11>","0","0","1","2017-10-12 19:33:27","","0","","","","","2017-10-04 17:46:00",""
"44359815","Exception ""CKR_FUNCTION_NOT_SUPPORTED"", PKCS11Interop with OpenSC","I am trying to use PKCS11Interop Library with latest version (0.16) of OpenSC (opensc-pkcs11.dll). I have tried USB tokens from three vendors which are Yubico 4, NitroKey Pro/Start, Fetian ePass2003 but unable to use most of the functions from PKCS11Interop Library. I receive Net.Pkcs11Interop.Common.Pkcs11Exception: 'Method C_SignRecoverInit returned CKR_FUNCTION_NOT_SUPPORTED' for most of functions provided by the library. The functions that throw this exception are C_GetOperationState, C_SetOperationState, C_GenerateKey, C_GenerateKeyPair, Encrypt/Decrypt functions, Sign/Verify functions etc.
The strange thing is functions like GetSlotInfo, GetMechanisms, Login, Session works fine.
I have spent a lot of time trying to find a solution here. Would appreciate if anyone can help on this.
","C_SignRecoverInit functions are not implemented in most of the drivers in OpenSC. The other functions should be fine and if not, read what to do and how to report the bugs in the OpenSC wiki.
","1030","<pkcs#11><opensc><pkcs11interop>","1","0","2","2017-06-26 20:36:07","44367081","0","0","3325704","","2017-06-26 20:36:07","2017-06-04 23:28:23",""
"44359815","Exception ""CKR_FUNCTION_NOT_SUPPORTED"", PKCS11Interop with OpenSC","I am trying to use PKCS11Interop Library with latest version (0.16) of OpenSC (opensc-pkcs11.dll). I have tried USB tokens from three vendors which are Yubico 4, NitroKey Pro/Start, Fetian ePass2003 but unable to use most of the functions from PKCS11Interop Library. I receive Net.Pkcs11Interop.Common.Pkcs11Exception: 'Method C_SignRecoverInit returned CKR_FUNCTION_NOT_SUPPORTED' for most of functions provided by the library. The functions that throw this exception are C_GetOperationState, C_SetOperationState, C_GenerateKey, C_GenerateKeyPair, Encrypt/Decrypt functions, Sign/Verify functions etc.
The strange thing is functions like GetSlotInfo, GetMechanisms, Login, Session works fine.
I have spent a lot of time trying to find a solution here. Would appreciate if anyone can help on this.
","Net.Pkcs11Interop.Common.Pkcs11Exception always indicates error returned by the underlying unmanaged PKCS#11 library which is usually provided by the device vendor.
Error you are receiving - CKR_FUNCTION_NOT_SUPPORTED - indicates that unmanaged PKCS#11 library does not support/implement particular function defined in PKCS#11 specification.
OpenSC source code confirms your finding that it does not support C_SignRecoverInit and also a few other functions.
BTW this is normal and pretty common behavior. You will hardly find PKCS#11 library that supports all PKCS#11 functions. If PKCS#11 library provided by OpenSC does not provide some function you really need then I suggest you check other solutions provided by commercial vendors.
","1030","<pkcs#11><opensc><pkcs11interop>","1","1","2","2017-06-26 20:36:07","44367081","0","0","3325704","","2017-06-26 20:36:07","2017-06-04 23:28:23",""
"40676726","java.security.InvalidKeyException: Private keys must be instance of RSAPrivate(Crt)Key or have PKCS#8 encoding","I have created a sample web service to digitally sign a document using etoken. It is creating the Signature file for the first time.But when I am trying to run the web service again it throwing me the following error.Can anyone update regarding this?

java.security.InvalidKeyException: Private keys must be instance of
  RSAPrivate(Crt)Key or have PKCS#8 encoding    at
  sun.security.rsa.RSAKeyFactory.translatePrivateKey(RSAKeyFactory.java:288)
    at
  sun.security.rsa.RSAKeyFactory.engineTranslateKey(RSAKeyFactory.java:191)
    at sun.security.rsa.RSAKeyFactory.toRSAKey(RSAKeyFactory.java:111)
    at
  sun.security.rsa.RSASignature.engineInitSign(RSASignature.java:106)
    at sun.security.rsa.RSASignature.engineInitSign(RSASignature.java:99)
    at java.security.Signature$Delegate.init(Signature.java:1152)

","","1025","<rsa><digital-signature><private-key><pkcs#11><e-token>","0","","0","2016-11-18 13:22:00","","2","","5729579","","2016-11-18 13:22:00","2016-11-18 12:05:31",""
"40790910","Oracle Java 7 keytool cannot import pkcs11 keystore into JKS: not PKCS 8 encoded","I have followed the Oracle guide to try to import my PKCS#11 keystore in my smartcard into a JKS keystore in my filesystem, in Ubuntu 16.04. I have Oracle JDK 7 installed, and the driver file of my Izenpe card.
http://docs.oracle.com/javase/7/docs/technotes/guides/security/p11guide.html
And I have encountered this bug with Open JDK 7:
java keytool with opensc pkcs#11 provider only works with debug option enabled
stating that with Open JDK the implementation has a bug and you should get around it. The post doesn't solve my problem and I switch to Oracle JDK 7 and I can list the private key entry in my card:
keytool -keystore NONE -storetype PKCS11 \
        -providerClass sun.security.pkcs11.SunPKCS11 \
            -providerArg $JAVA_HOME/config.ini \
        -v -list

where the config.ini is:
name=Izenpe-static
library=/usr/lib/libbit4ipki.so
showInfo=true

So, I get:
easternfox@easternfox-Ubuntu:~/下载/electronic-wechat-production$ keytool -keystore NONE -storetype PKCS11 -providerClass sun.security.pkcs11.SunPKCS11 -providerArg /home/easternfox/文档/config.ini -v -list 

Information for provider SunPKCS11-Izenpe-static
Library info:
  cryptokiVersion: 2.20
  manufacturerID: bit4id srl                      
  flags: 0
  libraryDescription: bit4id PKCS#11                  
  libraryVersion: 1.02
All slots: 0
Slots with tokens: 0
Slot info for slot 0:
  slotDescription: Cherry GmbH SmartBoard XX44 [Smart Card Reader USB] 00 00       
  manufacturerID: unknown                         
  flags: CKF_TOKEN_PRESENT | CKF_REMOVABLE_DEVICE | CKF_HW_SLOT
  hardwareVersion: 0.00
  firmwareVersion: 0.00
Token info for token in slot 0:
  label: IZENPE                          
  manufacturerID: Oberthur Technologies           
  model: Cosmo ID ONE (L)
  serialNumber: 1550001000002654
  flags: CKF_RNG | CKF_LOGIN_REQUIRED | CKF_USER_PIN_INITIALIZED | CKF_TOKEN_INITIALIZED
  ulMaxSessionCount: CK_EFFECTIVELY_INFINITE
  ulSessionCount: 0
  ulMaxRwSessionCount: CK_EFFECTIVELY_INFINITE
  ulRwSessionCount: CK_UNAVAILABLE_INFORMATION
  ......

Enter keystore password:  

Keystore type: PKCS11
Keystore provider: SunPKCS11-Izenpe-static

Your keystore contains 1 entry

Alias name: CIUDADANO FICTICIO ACTIVO
Entry type: PrivateKeyEntry
Certificate chain length: 1
Certificate[1]:
Owner: SERIALNUMBER=92920000T, SURNAME=FICTICIO, GIVENNAME=CIUDADANO, CN=CIUDADANO FICTICIO ACTIVO, DNQ=-dni 92920000T, OU=Condiciones de uso en www.izenpe.com nola erabili jakiteko, OU=Herritar ziurtagiria - Certificado de ciudadano, OU=Ziurtagiri onartua - Certificado reconocido, C=ES
Issuer: CN=Herritar eta Erakundeen CA - CA de Ciudadanos y Entidades (4), OU=NZZ Ziurtagiri publikoa - Certificado publico SCI, O=IZENPE S.A., C=ES
......

#10: ObjectId: 2.5.29.14 Criticality=false
SubjectKeyIdentifier [
KeyIdentifier [
0000: 00 DE A8 79 08 14 F9 FA   05 2C BF 8B 65 99 69 91  ...y.....,..e.i.
0010: EA 5D 70 45                                        .]pE
]
]

*******************************************
*******************************************

And, when I try keytool -importkeystore, I have several errors:
Running keytool -importkeystore --help gives me a lot of useful information:
keytool -importkeystore [OPTION]...

Imports one or all entries from another keystore

Options:

 -srckeystore <srckeystore>            source keystore name
 -destkeystore <destkeystore>          destination keystore name
 -srcstoretype <srcstoretype>          source keystore type
 -deststoretype <deststoretype>        destination keystore type
 -srcstorepass <arg>                   source keystore password
 -deststorepass <arg>                  destination keystore password
 -srcprotected                         source keystore password protected
 -srcprovidername <srcprovidername>    source keystore provider name
 -destprovidername <destprovidername>  destination keystore provider name
 -srcalias <srcalias>                  source alias
 -destalias <destalias>                destination alias
 -srckeypass <arg>                     source key password
 -destkeypass <arg>                    destination key password
 -noprompt                             do not prompt
 -providerclass <providerclass>        provider class name
 -providerarg <arg>                    provider argument
 -providerpath <pathlist>              provider classpath
 -v                                    verbose output

Use ""keytool -help"" for all available commands

If I omit srckeypass/destkeypass, I have:
easternfox@easternfox-Ubuntu:$ keytool -srckeystore NONE -srcstoretype PKCS11 \
    -destkeystore /home/easternfox/my.new.jks -deststoretype jks -deststorepass qwerqwer \
    -providerClass sun.security.pkcs11.SunPKCS11 \
         -providerArg $JAVA_HOME/config.ini 
    -v -importkeystore


Information for provider SunPKCS11-Izenpe-static
Library info:
  cryptokiVersion: 2.20
  manufacturerID: bit4id srl                      
  flags: 0
  libraryDescription: bit4id PKCS#11                  
  libraryVersion: 1.02
All slots: 0
Slots with tokens: 0
Slot info for slot 0:
  slotDescription: Cherry GmbH SmartBoard XX44 [Smart Card Reader USB] 00 00       
  manufacturerID: unknown                         
  flags: CKF_TOKEN_PRESENT | CKF_REMOVABLE_DEVICE | CKF_HW_SLOT
  hardwareVersion: 0.00
  firmwareVersion: 0.00
Token info for token in slot 0:
  label: IZENPE                          
  manufacturerID: Oberthur Technologies           
  model: Cosmo ID ONE (L)
  serialNumber: 1550001000002654
  flags: CKF_RNG | CKF_LOGIN_REQUIRED | CKF_USER_PIN_INITIALIZED | CKF_TOKEN_INITIALIZED
  ulMaxSessionCount: CK_EFFECTIVELY_INFINITE
  ulSessionCount: 0
  ulMaxRwSessionCount: CK_EFFECTIVELY_INFINITE
  ulRwSessionCount: CK_UNAVAILABLE_INFORMATION
  ulMaxPinLen: 8
  ulMinPinLen: 4
  ulTotalPublicMemory: 65535
  ....
Enter source keystore password:  
Problem importing entry for alias CIUDADANO FICTICIO ACTIVO: java.security.KeyStoreException: non-null password required to create PrivateKeyEntry.
Entry for alias CIUDADANO FICTICIO ACTIVO not imported.
Do you want to quit the import process? [no]:  n
Import command completed:  0 entries successfully imported, 1 entries failed or cancelled
[Storing /home/easternfox/my.new.jks]

So, I see the non-null password required error, and I try to specify the srckeypass and destkeypass, and get another error:
keytool error: java.lang.Exception: if alias not specified, destalias, srckeypass, and destkeypass must not be specified
java.lang.Exception: if alias not specified, destalias, srckeypass, and destkeypass must not be specified
    at sun.security.tools.KeyTool.doImportKeyStore(KeyTool.java:1864)
    at sun.security.tools.KeyTool.doCommands(KeyTool.java:1024)
    at sun.security.tools.KeyTool.run(KeyTool.java:340)
    at sun.security.tools.KeyTool.main(KeyTool.java:333)

So, I must add srcalias. So I do it, and:
Problem importing entry for alias CIUDADANO FICTICIO ACTIVO: java.security.KeyStoreException: Cannot get key bytes, not PKCS#8 encoded.
Entry for alias CIUDADANO FICTICIO ACTIVO not imported.
[Storing /home/easternfox/my.new.jks]

Another error has occurred, suggesting that the private key in the card is not PKCS#8 encoded. 
How to solve this? Is this a bug? Or just manufacturer-related issue?

What I have tried:

I tried to specifying the argument -providerpath to change to another sunpkcs11.jar, of Oracle JDK 8, to no avail.
I changed the driver coming with the card to another version. Not working.

EDIT：
I have tried to code a little and get the same error, with some stacktraces:
java.security.KeyStoreException: Cannot get key bytes, not PKCS#8 encoded
    at sun.security.provider.KeyProtector.protect(KeyProtector.java:174)
    at sun.security.provider.JavaKeyStore.engineSetKeyEntry(JavaKeyStore.java:259)
    at sun.security.provider.JavaKeyStore$JKS.engineSetKeyEntry(JavaKeyStore.java:55)
    at java.security.KeyStore.setKeyEntry(KeyStore.java:909)
    at com.JSILTRA.logic.PKCS11KeyStoreConstuctor.constructJKSKeyStore(PKCS11KeyStoreConstuctor.java:66)
    at com.JSILTRA.logic.PKCS11KeyStoreConstuctor.main(PKCS11KeyStoreConstuctor.java:22)

","","998","<java><keystore><keytool><pkcs#11><keystore-access>","1","","0","2016-11-24 17:35:28","","4","","-1","","2017-05-23 11:59:57","2016-11-24 16:16:18",""
"27539928","Using PKCS11 with NSS for Java encryption: java.security.ProviderException: Initialization failed","I am trying to set up Java to use NSS for doing some various encryption routines. I understand the JCE necessary to offload these routines to NSS is PKCS11. I have compiled all the NSS binaries, and moved each of the resulting shared objects to /usr/lib/nss:
$ ls /usr/lib/nss/
libfreebl3.so  libnss3.so     libnssdbm3.so     libnssutil3.so  libplds4.so   libsoftokn3.so
libnspr4.so    libnssckbi.so  libnsssysinit.so  libplc4.so      libsmime3.so  libsqlite3.so

the nss.cfg file I am using is as follows:
name=NSS
nssLibraryDirectory=/usr/lib/nss
nssDbMode=noDb
attributes=compatibility

However, when running the application, this is the output:
java.security.ProviderException: Initialization failed
    at sun.security.pkcs11.SunPKCS11.<init>(SunPKCS11.java:376)
    at sun.security.pkcs11.SunPKCS11.<init>(SunPKCS11.java:103)
    ...
Caused by: java.io.IOException: libsqlite3.so: cannot open shared object file: No such file or directory/usr/lib/nss/libsoftokn3.so
    at sun.security.pkcs11.wrapper.PKCS11.connect(Native Method)
    at sun.security.pkcs11.wrapper.PKCS11.<init>(PKCS11.java:138)
    at sun.security.pkcs11.wrapper.PKCS11.getInstance(PKCS11.java:151)
    at sun.security.pkcs11.SunPKCS11.<init>(SunPKCS11.java:313)
    ... 5 more

Any ideas???
","","995","<java><ioexception><pkcs#11><nss>","0","","0","2014-12-18 05:42:40","","2","","","","","2014-12-18 05:42:40",""
"28129130","How to generate a pkcs7 signature envelope using pkcs11interop","To prevent the token password dialog, I usually use pkcs11interop to login to the usbkey and do data signature use capi or some COM+ control in C#.
But now I have a new usbkey. When I do signature the first time it still display the login dialog. This key's pkcs11 dll does not implement function C_SignUpdate, so when I try to do signature use SunPkcs11 and BouncyCastle in Java it throw a exception:
    public static void main(String args[]) throws Exception {
        String configName = ""d:\\javakey_My.cfg"";
        String PIN = ""123456"";
        Provider prv = new SunPKCS11(configName);
        Security.addProvider(prv);
        KeyStore credentials = KeyStore.getInstance(""PKCS11"");
        char[] pin = PIN.toCharArray();
        credentials.load(null, pin);

        Key key = (PrivateKey) credentials.getKey(""My Cert ID"", null);
        Certificate[] chain = credentials
                .getCertificateChain(""My Cert ID"");
        X509Certificate cert = (X509Certificate) chain[0];
        Store certs = new JcaCertStore(Arrays.asList(chain));
        // set up the generator
        CMSSignedDataGenerator gen = new CMSSignedDataGenerator();
        gen.addSignerInfoGenerator(new JcaSimpleSignerInfoGeneratorBuilder()
                .setProvider(""SunPKCS11-MyKey"").build(""SHA1withRSA"",
                        (PrivateKey) key, cert));
        gen.addCertificates(certs);
        // create the signed-data object
        CMSTypedData data = new CMSProcessableByteArray(
                ""Hello World!"".getBytes());
        CMSSignedData signed = gen.generate(data, false);
    }



Exception in thread ""main"" java.security.ProviderException: sun.security.pkcs11.wrapper.PKCS11Exception: CKR_FUNCTION_NOT_SUPPORTED
	at sun.security.pkcs11.P11Signature.engineUpdate(P11Signature.java:436)
	at java.security.Signature$Delegate.engineUpdate(Unknown Source)
	at java.security.Signature.update(Unknown Source)
	at java.security.Signature.update(Unknown Source)
	at org.bouncycastle.operator.jcajce.JcaContentSignerBuilder$SignatureOutputStream.write(Unknown Source)
	at org.bouncycastle.cms.SignerInfoGenerator.generate(Unknown Source)
	at org.bouncycastle.cms.CMSSignedDataGenerator.generate(Unknown Source)
	at Tryit.main(Tryit.java:108)
Caused by: sun.security.pkcs11.wrapper.PKCS11Exception: CKR_FUNCTION_NOT_SUPPORTED
	at sun.security.pkcs11.wrapper.PKCS11.C_SignUpdate(Native Method)
	at sun.security.pkcs11.P11Signature.engineUpdate(P11Signature.java:430)
	... 7 more



Is there any way to do a P7 signature use this key? by .Net or Java, without login dialog.
","","962","<signature><pkcs#7><pkcs#11><envelope>","1","","0","2015-01-24 19:04:51","","1","0","4490380","","2015-01-24 19:04:51","2015-01-24 18:59:02",""
"27129142","How to use private key on a PKCS#11 module instead of perivate key file for mutual-authentication in OpenSSL?","I've a simple SSL client that uses OpenSSL library. My server requires client authentication & so I've to set client's private key stored in a password protected PEM file. I use the following code for this purpose:
/* set the private key from KeyFile */
if (SSL_CTX_use_PrivateKey_file(ctx, KeyFile, SSL_FILETYPE_PEM) <= 0)
{
    ERR_print_errors_fp(stderr);
    abort();
}

/* verify private key */
if ( !SSL_CTX_check_private_key(ctx) )
{
    fprintf(stderr, ""Private key does not match the public certificate\n"");
    abort();
}

Now I want to know how can I establish a SSL connection using private key stored on a security token (with PKCS#11 interface) instead of reading it from a file?
","Answer is a little bit complicated. 
First You need to load Engine of your PKCS#11:
ENGINE_load_builtin_engines();
{
    if (!(e = ENGINE_by_id(""dynamic"")))
        goto err;
    if (!ENGINE_ctrl_cmd_string(e, ""SO_PATH"", ""dstu"", 0))
        goto err;
    if (!ENGINE_ctrl_cmd_string(e, ""LIST_ADD"", ""2"", 0))
        goto err;
    if (!ENGINE_ctrl_cmd_string(e, ""LOAD"", NULL, 0))
        goto err;
    e = ENGINE_by_id(""pkcs11_engine"");
    if (!e)
      return error;

res = ENGINE_init(e);
if (!ENGINE_set_default(e, ENGINE_METHOD_ALL))
    goto err;

}
then you need load EVP_PKEY* from engine
EVP_PKEY* key = ENGINE_load_private_key(e, ""SecureToken"", NULL, &cb_data);
and pass it to SSL:
int SSL_CTX_use_PrivateKey(SSL_CTX *ctx, EVP_PKEY *pkey);
strings SecureToken and pkcs11_engine you should found in documentation to your engine pkcs11 module
","962","<passwords><openssl><private-key><pkcs#11><mutual-authentication>","1","2","1","2014-11-25 14:49:37","27129759","0","1","","","","2014-11-25 14:20:58",""
"55470311","Encode Private Key getting Error: asn1: structure error: tags don't match","When i try to parses the encode private key with
sample private key
-----BEGIN OPENSSH PRIVATE KEY-----
b3BlbnNzaC1rZXktdjEAAAAABG5vbmUAAAAEbm9uZQAAAAAAAAABAAABFwAAAAdzc2gtcn
NhAAAAAwEAAQAAAQEA4if4vmEnNh2Ijlfrhsb02Exh+LXjkYySOiILtj8rg1ZGWFz1vtPe
DiKbbWLo9xcjDp7UQ2gHnhUZno/gFxcokzTYTkexpb/s4mzU4CH0XaS7IV/xRz1Of1+dwC
2MvsclD0NKceyNu0glocGUu6w2MMsWdevr8YqjPABZYwPmANg5wns61FoI5uQi4e6pcNkr
gGnbf1Sh8DChuM22aLksmOW9UapEKovaUxA4DxEd58zJpmg7UN1ZduUrwCVz1tg1BF+EW5
knMd037olDWdgZtEzMxbmSRlqF6t5dcybnp7LQsdPrbXDubY3mjqgCg25xMk4of3mdDc5b
VcRuNSbDmwAAA+AnwUz5J8FM+QAAAAdzc2gtcnNhAAABAQDiJ/i+YSc2HYiOV+uGxvTYTG
H4teORjJI6Igu2PyuDVkZYXPW+094OIpttYuj3FyMOntRDaAeeFRmej+AXFyiTNNhOR7Gl
v+zibNTgIfRdpLshX/FHPU5/X53ALYy+xyUPQ0px7I27SCWhwZS7rDYwyxZ16+vxiqM8AF
ljA+YA2DnCezrUWgjm5CLh7qlw2SuAadt/VKHwMKG4zbZouSyY5b1RqkQqi9pTEDgPER3n
zMmmaDtQ3Vl25SvAJXPW2DUEX4RbmScx3TfuiUNZ2Bm0TMzFuZJGWoXq3l1zJuenstCx0+
ttcO5tjeaOqAKDbnEyTih/eZ0NzltVxG41JsObAAAAAwEAAQAAAQBUyVuONGo49ZWOmBOq
8cg1l11bmwV4OdVQihcN+lzb3mp9EkzngBLOBddziROCH2B7SLyXkNbaQ1rZgWMoBPynQ7
acknBdjbjHormkVdaBjRLDDm8soCVfx38i33DWzV5tfHLahy8TuZayMBsMySF/5YPELfDF
G47bHd5lKr7+LV3T4kvZ1g1UpDgUGlwpVMpu+ybfhMhCOO2w5Vz/Fl7ptYJQnx8rDARgYu
GDf1yKpRCt7Rx4U+lla5HMnoxh4/g5dXDb8vBDfC/QXj+DPY2/Ju5c3zifryfkB2Cvppq2
EULxDO41iwXgzRpmv9hv6adSp2Qqob72XDu7mWdz/u9BAAAAgFDu2TKaU71igLIMd4sheb
wzjsB2ZW8x5CO+N95OKddkC6lkJiBFrAiF98SVs0AFbqDlw46V3xrBqCVL6ByfW4Zro3Qw
C9GRhjfW/koyuJbplf0uiNaa1ApM7nRoRiOcE5kXkLOObxojPuur29rbI1JGozSn6YhxwA
Q3WthgQipmAAAAgQD7RXYeHQ1P0gpdpWfMXspIbkzODWQDH3VkvQHFFl87+QpsFIWGd8zX
jMMo2bELCgr9cnzRffd8UUCzWJy/mfj+PWjsCr9EaojlnDWYEComa5PYkJKKOxmN+rLg7P
F3Xd/KV4XVBP5wqobTU1sxLnhJkVJMCqHOdDzv9mYr75sXqwAAAIEA5mmDj/4mvkNTNZKw
aaD/8sOz7JjD90jqQCchLETVcwJ1sCgPl5qVAa/S99g9QJXuW3TlXbj4jw01s5APpKq6eY
H91+vJcS8ZmzARXMt4jVB3oWsrhFXw5BEaKYjyKx5gYdSGETbcGz1WxQF4i5E/A43ow73n
RftprflPg+CUU9EAAAAkc3VtaXR0aGFrdXJAU3VtaXRzLU1hY0Jvb2stQWlyLmxvY2FsAQ
IDBAUGBw==
-----END OPENSSH PRIVATE KEY-----

 x509.ParsePKCS1PrivateKey(block.Bytes)

it will giving me error 
Explain: 
case ""OPENSSH PRIVATE KEY"":
        log.Println(""Here at OPENSSH Private Key:"")
        rsa, err := x509.ParsePKCS1PrivateKey(block.Bytes)
        log.Println(""Rsa and Error:"", rsa, err)
        if err != nil {
            return nil, err
        }
        rawkey = rsa

key
-----BEGIN OPENSSH PRIVATE KEY-----
key
-----END OPENSSH PRIVATE KEY-----

Getting Error: 
asn1: structure error: tags don't match (16 vs {class:1 tag:15 length:112 isCompound:true}) {optional:false explicit:false application:false private:false defaultValue:<nil> tag:<nil> stringType:0 timeType:0 set:false omitEmpty:false} pkcs1PrivateKey @2
2019/04/02 13:57:52 Signer: <nil>

and I will also try with 
 x509.ParsePKCS8PrivateKey(block.Bytes)

But same Error getting. 
","I post the test private key and the code which I used
Sample private key:
-----BEGIN OPENSSH PRIVATE KEY-----
b3BlbnNzaC1rZXktdjEAAAAABG5vbmUAAAAEbm9uZQAAAAAAAAABAAABFwAAAAdzc2gtcn
NhAAAAAwEAAQAAAQEA4if4vmEnNh2Ijlfrhsb02Exh+LXjkYySOiILtj8rg1ZGWFz1vtPe
DiKbbWLo9xcjDp7UQ2gHnhUZno/gFxcokzTYTkexpb/s4mzU4CH0XaS7IV/xRz1Of1+dwC
2MvsclD0NKceyNu0glocGUu6w2MMsWdevr8YqjPABZYwPmANg5wns61FoI5uQi4e6pcNkr
gGnbf1Sh8DChuM22aLksmOW9UapEKovaUxA4DxEd58zJpmg7UN1ZduUrwCVz1tg1BF+EW5
knMd037olDWdgZtEzMxbmSRlqF6t5dcybnp7LQsdPrbXDubY3mjqgCg25xMk4of3mdDc5b
VcRuNSbDmwAAA+AnwUz5J8FM+QAAAAdzc2gtcnNhAAABAQDiJ/i+YSc2HYiOV+uGxvTYTG
H4teORjJI6Igu2PyuDVkZYXPW+094OIpttYuj3FyMOntRDaAeeFRmej+AXFyiTNNhOR7Gl
v+zibNTgIfRdpLshX/FHPU5/X53ALYy+xyUPQ0px7I27SCWhwZS7rDYwyxZ16+vxiqM8AF
ljA+YA2DnCezrUWgjm5CLh7qlw2SuAadt/VKHwMKG4zbZouSyY5b1RqkQqi9pTEDgPER3n
zMmmaDtQ3Vl25SvAJXPW2DUEX4RbmScx3TfuiUNZ2Bm0TMzFuZJGWoXq3l1zJuenstCx0+
ttcO5tjeaOqAKDbnEyTih/eZ0NzltVxG41JsObAAAAAwEAAQAAAQBUyVuONGo49ZWOmBOq
8cg1l11bmwV4OdVQihcN+lzb3mp9EkzngBLOBddziROCH2B7SLyXkNbaQ1rZgWMoBPynQ7
acknBdjbjHormkVdaBjRLDDm8soCVfx38i33DWzV5tfHLahy8TuZayMBsMySF/5YPELfDF
G47bHd5lKr7+LV3T4kvZ1g1UpDgUGlwpVMpu+ybfhMhCOO2w5Vz/Fl7ptYJQnx8rDARgYu
GDf1yKpRCt7Rx4U+lla5HMnoxh4/g5dXDb8vBDfC/QXj+DPY2/Ju5c3zifryfkB2Cvppq2
EULxDO41iwXgzRpmv9hv6adSp2Qqob72XDu7mWdz/u9BAAAAgFDu2TKaU71igLIMd4sheb
wzjsB2ZW8x5CO+N95OKddkC6lkJiBFrAiF98SVs0AFbqDlw46V3xrBqCVL6ByfW4Zro3Qw
C9GRhjfW/koyuJbplf0uiNaa1ApM7nRoRiOcE5kXkLOObxojPuur29rbI1JGozSn6YhxwA
Q3WthgQipmAAAAgQD7RXYeHQ1P0gpdpWfMXspIbkzODWQDH3VkvQHFFl87+QpsFIWGd8zX
jMMo2bELCgr9cnzRffd8UUCzWJy/mfj+PWjsCr9EaojlnDWYEComa5PYkJKKOxmN+rLg7P
F3Xd/KV4XVBP5wqobTU1sxLnhJkVJMCqHOdDzv9mYr75sXqwAAAIEA5mmDj/4mvkNTNZKw
aaD/8sOz7JjD90jqQCchLETVcwJ1sCgPl5qVAa/S99g9QJXuW3TlXbj4jw01s5APpKq6eY
H91+vJcS8ZmzARXMt4jVB3oWsrhFXw5BEaKYjyKx5gYdSGETbcGz1WxQF4i5E/A43ow73n
RftprflPg+CUU9EAAAAkc3VtaXR0aGFrdXJAU3VtaXRzLU1hY0Jvb2stQWlyLmxvY2FsAQ
IDBAUGBw==
-----END OPENSSH PRIVATE KEY-----

Signed the constructed json string with business private key
func SignatureWithPrivateKey(data string) string {
    signer, err := loadPrivateKey(""/Users/sumitthakur/test"")
    log.Println(""Signer:"", signer)
    if err != nil {
        fmt.Errorf(""signer is damaged: %v"", err)
    }

    toSign := data

    signed, err := signer.Sign([]byte(toSign))
    if err != nil {
        fmt.Errorf(""could not sign request: %v"", err)
    }
    return base64.StdEncoding.EncodeToString(signed)

}

loadPrivateKey loads an parses a PEM encoded private key file.
func loadPrivateKey(path string) (Signer, error) {
    data, err := ioutil.ReadFile(path)
    if err != nil {
        return nil, err
    }
    log.Println(""Data and Error pem:"", data, err)
    return parsePrivateKey(data)
}

parses an encoded private key.
func parsePrivateKey(pemBytes []byte) (Signer, error) {
    block, err := pem.Decode(pemBytes)
    if block == nil {
        return nil, errors.New(""ssh: no key found"")
    }

    log.Println(""Block and Error: "", block, err)

    var rawkey interface{}
    switch block.Type {
    case ""OPENSSH PRIVATE KEY"":
        log.Println(""Here at OPENSSH Private Key:"")
        rsa, err := ssh.ParseRawPrivateKey(block.Bytes)
        log.Println(""Rsa and Error:"", rsa, err)
        if err != nil {
            return nil, err
        }
        rawkey = rsa
    default:
        log.Println(""Here at default"")
        return nil, fmt.Errorf(""ssh: unsupported key type %q"", block.Type)
    }
    return newSignerFromKey(rawkey)
}


","953","<go><x509><pkcs#11>","0","0","1","2019-04-03 07:46:15","","10","1","7918749","","2019-04-03 07:46:15","2019-04-02 08:36:19",""
"8649408","OpenSC vs openCryptoKI","Which library is more popular for Linux and Mac OS operating systems and what advantages and disadvantages there are for supporting PKCS#11 standard for smart cards?
Is there any tutorial about adding PKCS#11 support for smart cards?
","OpenSC is a software stack for smart cards. And it includes a PKCS#11 module. OpenCryptoki is ""just"" a PKCS#11 module (meaning software-only-module, except for some IBM PCI cards, apparently) that has nothing to do with (most) smart cards.
Your card probably comes with a PKCS#11 module for at least Windows. PKCS#11 is just a software interface, much like a PAM module. What happens below the API is a different story.
You might start with OpenSC wiki and mailing list, if your aim is smart cards.
","952","<c><smartcard><pkcs#11><opensc>","2","1","1","2015-06-11 21:15:36","","0","1","3102264","","2015-06-11 21:15:36","2011-12-27 21:20:12",""
"12354137","Is Sun PKCS#11 provider supported on Android?","Is Sun PKCS#11 provider supported on Android? Or can it be moved to Android somehow? 
Thank you.
","No. Sun==Oracle => copying bad :)
Seriously though, it is not available in Android and there is not standard PKCS#11 support either (although JB does use a proprietary PKCS#11 provider for some things). Not sure if the code is in OpenJDK, but if it is, you can try to port it. However, since it is unlikely that you actually need to use the full PKCS#11 API, it will be much easier to write JNI wrappers only for the functions you need (sighing, verifying, hashing, etc.). 
","941","<java><android><security><pkcs#11>","4","4","1","2012-09-11 03:07:21","12362190","0","","","","","2012-09-10 14:48:03",""
"48159921","dlopen() fails loading opensc-pkcs11.so","While trying to dlopen the /usr/lib/x86_64-gnu-linux/opensc-pkcs11.so from within an application, I get a ""Cannot open shared object file: no such file or directory"" for the library. 
dlopen(""/usr/lib/x86_64-linux-gnu/opensc-pkcs11.so"", RTLD_NOW | RTLD_LOCAL);

I followed the instructions on the Wiki
https://github.com/OpenSC/OpenSC/wiki/Compiling-and-Installing-on-Unix-flavors
and also did a sudo apt-get install opensc-pkcs11.so. 
The file exists in /usr/lib/x86_64-gnu-linux and that is the library search path. 
Is there anything else that needs to be done ? Do any env variables need to be set ? The same works for dlopen of the SoftHSM library.
Wanted to point out that when running the pkcs11-tool command line, it works
$ pkcs11-tool --module /usr/lib/x86_64-linux-gnu/opensc-pkcs11.so -I
Cryptoki version 2.20
Manufacturer     OpenSC (www.opensc-project.org)
Library          Smart card PKCS#11 API (ver 0.0)
No slot with a token was found.

So it appears to be when I try the same dlopen within my application, that it fails. Any ideas ?
","
when I try the same dlopen within my application, that it fails

The most likely reason for no such file is that the opensc-pkcs11.so itself has a dependency on some other library, and that library isn't found.
You can confirm or disprove this with ldd /usr/lib/x86_64-linux-gnu/opensc-pkcs11.so.
","920","<dlopen><pkcs#11><opensc>","0","2","1","2018-01-09 07:34:06","48161159","0","","50617","","2018-01-09 03:45:07","2018-01-09 00:27:47",""
"43091131","how C_CreateObject , C_GenerateKey and C_GenerateKeyPair are different ?","Our PKCS#11 library miss the implementation of C_CreateObject. Before jumping into its implementation, i want to know the instances where C_CreateObject should be used instead of C_GenerateKey/C_GenerateKeyPair .
","C_CreateObjectimports existing data objects, certificates and/or keys generated externally into the device. C_GenerateKey generates new symmetric key (DES/AES/...) inside the device. C_GenerateKeyPair generates new asymmetric key pair (RSA/ECC/...) inside the device.
","917","<pkcs#11>","1","4","2","2017-03-29 14:00:21","","1","","","","","2017-03-29 10:35:17",""
"43091131","how C_CreateObject , C_GenerateKey and C_GenerateKeyPair are different ?","Our PKCS#11 library miss the implementation of C_CreateObject. Before jumping into its implementation, i want to know the instances where C_CreateObject should be used instead of C_GenerateKey/C_GenerateKeyPair .
","The PKCS#11 treats the Key Pairs (Public Key and Private Key), Certificates and Secret Keys as objects on the token. And there is also a Data Object which just holds some data.
The C_GenerateKey would create a Secret Key Object.
The C_GenerateKeyPair would create a Public Key and a Private Key Object (both the public key and private key combined would constitute the key pair).
When you say C_GenerateKey the PKCS#11 knows that it has to generate a Secret Key Object and expects a Secret Key Object Template. And similarly the C_GenerateKeyPair, it knows that it has to create a Public Key Object and a Private Key Object and expects their respective object templates.
But when you sayC_CreateObject, you have to specify which type of object you want to create, and pass in the right Object Template as well. Consider this like an abstract version of the C_GenerateXXX method.
","917","<pkcs#11>","1","1","2","2017-03-29 14:00:21","","1","","","","","2017-03-29 10:35:17",""
"28817166","Firefox Addon PKCS#11 API","I want to access the currenly connected cryptography modules via an Firefox Addon.
I found some interfaces that look like i can access the module, the slot and the token (1 → 2 → 3 → 4) but how can i access the public key of an certificate stored on such a token?
Is there an such an API even available to an Addon?
","nsIX509CertDB.idl provides the means to access all stored certificates, therefore also the ones accessed through crypto modules. To filter the certificates using the tokenName property should work.
Here is a snippet to enumerate all certs:
var certDB = chrome.Cc[""@mozilla.org/security/x509certdb;1""].getService(chrome.Ci.nsIX509CertDB);

var certs = certDB.getCerts();

var enumerator = certs.getEnumerator();

var s = """";
while (enumerator.hasMoreElements()) {
  var cert = enumerator.getNext().QueryInterface(chrome.Ci.nsIX509Cert);

  if (cert.tokenName.equals(""Your-token-name""))   
  s += cert.tokenName + "" # "";
}

The name of the token can be found through the module name by using: nsIPKCS11ModuleDB.listModules() → nsIPKCS11Module.listSlots() → nsIPKCS11Slot.getToken() → nsIPK11Token.tokenName
","908","<javascript><firefox-addon><firefox-addon-sdk><pkcs#11>","2","0","1","2015-12-03 16:11:04","28836473","1","1","441907","","2015-03-03 16:10:51","2015-03-02 18:45:44",""
"14502407","Unblock PIN of SmartCard via Java (SunPKCS11)","i try to unblock or change a pin on smartcard tokens via java. Writing and reading smartcard-certificates via SunPKCS11-Wrapper is no big deal but i cannot see any C_setPIN or C_initPIN-methods in the PKCS11-wrapper-class.
So is there a way to unblock a smartcards pin with the SunPKCS11-Wrapper?
","The PKCS#11 provider of Sun is not really suitable for that. But it has been implemented on top of the open source wrapper from IAIK, which may contain what you are looking for, see the link to Session.setPIN(). Note that linking directly to the sun.* package is heavily frowned upon, although the Session class is pretty likely to be hidden in there somewhere.
","907","<java><smartcard><sun><pkcs#11>","4","1","1","2013-01-24 21:06:47","","0","","","","","2013-01-24 13:24:37",""
"47572335","How to use pkcs11 modules in firefox","There is the ""Security Devices"" button in Firefox 51 (Preferenced/Advanced/Certificates), that opens Device Manager, where we can load PKCS11 modules.
The question is how to work with them:

Can I access them from a page script?
or only from WebExtensions? I saw in documentation: * Extensions can programmatically manage PKCS11 modules using the nsIPKCS11 programming interface*. Can they do something more?
or there must be some kind of server-side support to make browser work with USB crypto token device (for example) using pkcs11 module?

","
No, you can't. It was possible before Firefox 3.5.
nsIPKCS11 programming interface is not exposed to WebExtensions. It was exposed to legacy addons which stopped working in Firefox 57. The closest API you get is the WebExtensions API pkcs11: https://developer.mozilla.org/en-US/Add-ons/WebExtensions/API/pkcs11 (available since Firefox 58)
No idea, I'm sorry.

","902","<firefox><firefox-webextensions><pkcs#11>","0","1","1","2017-11-30 11:41:15","47572537","0","","","","","2017-11-30 11:26:12",""
"26493439","Retrieve private key from token using applet","I have an applet who reads the Certificate and for consequence the public and private keys from usb Token.
I can read get access to PrivateKey whenever the token is plugged, but I have a cryptographed environment where I need to post the certificate and keys to a servlet, and this servlet will sign the selected files on my application. It was working fine, till I got this token with a non exportable PrivateKey.
PrivateKey privateKey = (PrivateKey) keyStore.getKey(alias, PIN.toCharArray());

Then I use a decoder to convert the bytes array to BASE64 and post it.
sun.misc.BASE64Encoder encoder = new sun.misc.BASE64Encoder();
String base64encoded = encoder.encode(privateKey.getEncoded());

However, using this particular token, the method getEncoded(), used on privateKey.getEncoded(), returns always null. So I didn't find a way to get the bytes array from PrivateKey object. 
Is there a possible way to do it? 
","You can't get the private key from a PKCS11 token, PKCS11 are used to have the key material inside the secure device and can't be extracted, when you want to sign with this kind of devices (HSM, smart-cards and so on)  the signature is performed inside it.
If you want to perform a signature with a client PKCS11 usb token and a applet, you have to perform the signature in the applet executed in the client machine instead of make the signature in the server side passing the key because this option it's not possible.
Hope this helps, 
","898","<servlets><applet><certificate><private-key><pkcs#11>","1","2","2","2019-08-27 05:18:06","26515937","1","0","1218618","","2014-10-22 19:55:05","2014-10-21 18:14:13",""
"26493439","Retrieve private key from token using applet","I have an applet who reads the Certificate and for consequence the public and private keys from usb Token.
I can read get access to PrivateKey whenever the token is plugged, but I have a cryptographed environment where I need to post the certificate and keys to a servlet, and this servlet will sign the selected files on my application. It was working fine, till I got this token with a non exportable PrivateKey.
PrivateKey privateKey = (PrivateKey) keyStore.getKey(alias, PIN.toCharArray());

Then I use a decoder to convert the bytes array to BASE64 and post it.
sun.misc.BASE64Encoder encoder = new sun.misc.BASE64Encoder();
String base64encoded = encoder.encode(privateKey.getEncoded());

However, using this particular token, the method getEncoded(), used on privateKey.getEncoded(), returns always null. So I didn't find a way to get the bytes array from PrivateKey object. 
Is there a possible way to do it? 
","Using applet is no more supported by modern browsers. Thus you need to use Browser Extension which accesses Host service running below the browser to access Certificate Store on Local machine which has handle to private key on the usb cryptographic token or smart card using CSP (Crypto Service Provider on Windows). Thus signing of hash would be done inside the token and signed content (Signature) would be returned by host application to browser which in turn sends it to server to complete signing operation.
More explanation, Working Example and source code explained
","898","<servlets><applet><certificate><private-key><pkcs#11>","1","0","2","2019-08-27 05:18:06","26515937","1","0","1218618","","2014-10-22 19:55:05","2014-10-21 18:14:13",""
"18505636","Error on sign csr by ecdsa algorithm","when I verify CSR by openssl this errors happened

verify failure 2912:error:0D07207B:asn1 encoding
  routines:ASN1_get_object:header too long:.\cry
  pto\asn1\asn1_lib.c:150:
2912:error:0D068066:asn1 encoding routines:ASN1_CHECK_TLEN:bad object
  header:.\c rypto\asn1\tasn_dec.c:1306:
2912:error:0D07803A:asn1 encoding routines:ASN1_ITEM_EX_D2I:nested
  asn1 error:.\ crypto\asn1\tasn_dec.c:381:Type=ECDSA_SIG
2912:error:0D0C5006:asn1 encoding routines:ASN1_item_verify:EVP
  lib:.\crypto\asn 1\a_verify.c:221:
Certificate Request:
      Data:
          Version: 3 (0x3)
          Subject: C=IR, O=f, OU=f, CN=f
          Subject Public Key Info:
              Public Key Algorithm: id-ecPublicKey
                  Public-Key: (192 bit)
                  pub:
                      04:59:a4:e9:91:53:0d:32:95:cc:46:4b:93:b0:43:
                      79:95:37:95:8b:07:3e:89:a9:04:f0:34:c0:07:49:
                      aa:01:1b:fd:ef:df:7f:3c:f8:c0:34:4c:ed:ea:c6:
                      44:10:66:ae
                  ASN1 OID: prime192v1
          Attributes:
              a0:00
      Signature Algorithm: ecdsa-with-SHA1
           d8:bb:cb:6b:85:94:22:f4:29:98:21:18:0e:8b:c5:c0:bd:17:
           c8:24:ac:ac:00:bb:52:8b:a5:fc:c0:47:a7:de:65:b2:27:02:
           80:e6:5d:b6:5d:66:e7:e2:5b:79:5c:f1
  -----BEGIN CERTIFICATE REQUEST----- MIHEMIGDAgEDMDExCzAJBgNVBAYTAklSMQowCAYDVQQKEwFmMQowCAYDVQQLEwFm
  MQowCAYDVQQDEwFmMEkwEwYHKoZIzj0CAQYIKoZIzj0DAQEDMgAEWaTpkVMNMpXM
  RkuTsEN5lTeViwc+iakE8DTAB0mqARv9799/PPjANEzt6sZEEGauoAAwCQYHKoZI
  zj0EAQMxANi7y2uFlCL0KZghGA6LxcC9F8gkrKwAu1KLpfzAR6feZbInAoDmXbZd
  ZufiW3lc8Q==
  -----END CERTIFICATE REQUEST-----

","","888","<openssl><pkcs#11>","0","","0","2013-08-31 03:49:10","","2","","2579035","","2013-08-31 03:49:10","2013-08-29 08:18:58",""
"1863130","Sending Complete Chain from Common Access Card (CAC)?","I'm attempting to enable SSL communication from a web service client (Axis2) using the certificate on the user's CAC card.  Works like a charm....UNTIL the web server is CAC enabled.  At that point the SSL connection is rejected with the error message that the other certificates in the chain were not included.
I have ensured that the provider is available, either by adding it to the security.properties file or creating it programatically.
My current approach is to simply set the system properties:
    System.setProperty(""javax.net.ssl.keyStore"", ""NONE"");
    System.setProperty(""javax.net.ssl.keyStoreType"", ""PKCS11"");
I understand from this question/answer that this approach only sends the ""end entity"" certificate.  Apparently I need to implement my own X509KeyManager.  This is new ground for me, can anyone suggest a good reference or provide samples of how to do so?
Appreciate the assistance.
","The best key manager implementation depends on the issuer of the certificates you expect to be using.
If the certificate on the user's CAC will always be issued by a specific CA, simply store that issuer's certificate and any intermediate certificates further up the chain in a PKCS #7 file. In the getCertificateChain() method, this collection can be appended blindly to the user's certificate and returned.
If things aren't quite that simple, but a complete list of possible issuers can be enumerated, obtain all of their certificates, and their issuer's certificates, and so on, up to the root certificates.
Add all of the root certificates to a key store as trusted entries. Bundle the intermediate certificates in a PKCS-#7–format file.
Implement X509KeyManager (or extend X509ExtendedKeyManager if you're working with SSLEngine). Specifically, in the getCertificateChain() method, you'll use a CertPathBuilder to create a valid chain from the user's certificate to a trusted root. The target is the certificate that you load from the user's CAC with the alias parameter. The trusted roots are the certificates in trust store that you created; the intermediate certificates can be loaded from the PKCS #7 file and added to the builder parameters. Once the chain is built, get the certificate path and convert it to an array. This is the result of the getCertificateChain() method.
If you can't predict who will be issuing the user's certificate, you might be able to obtain the intermediate certificates at runtime from an LDAP directory or other repository. That's a whole new level of difficulty.
","888","<security><jaas><webservice-client><pkcs#11><cac>","1","1","1","2010-09-01 18:45:17","1863518","1","","-1","","2017-05-23 11:55:41","2009-12-07 21:44:56",""
"6535681","Get a byte array from gtop11dotnet.dll in c#","I have a gtop11dotnet.dll. It is .NET PKCS#11 Library for Windows v2.2.0.9 from Gemalto website. DLL is containing C_GetCardProperty method which can be used to retrieve Smart card's serial number or GUID. According to PKCS#11 User's Guide and .NET Integration Guide it is ""byte[] GetCardProperty(byte property, byte flags)"". It receives two bytes as parameters and retrieves e.g. serial number or GUID in form of bytes array. 
My question is how to get serial number and store it into managed bytes array?
Here is my try:
[DllImport(""gtop11dotnet.dll"")]
public static extern byte[] C_GetCardProperty(byte property, byte flags);
public static void Main()
{
    byte[] bytes = new byte[12];
    bytes = C_GetCardProperty(0x06, 0x00) //Error at this line -> Cannot marshal 'return value': Invalid managed/unmanaged type combination.
}

Thanks for any help.
","What is "".NET PKCS#11""? PKCS#11 v2.20 nor v2.30 draft do not contain ""C_GetCardProperty"" method. You are probably facing with some proprietary Gemalto/.NET thing that has nothing to do with PCKS#11 as known by the rest of the world and Gemalto does a ""good"" thing by prefixing arbitrary functions with ""C_"" and calling the result cryptoki. PKCS#11 is a C interface and has nothing to do with managed/unmanaged code or .NET.
","876","<.net><smartcard><pkcs#11>","0","0","2","2013-02-28 11:10:44","","0","","806501","","2011-07-01 06:36:22","2011-06-30 13:41:14",""
"6535681","Get a byte array from gtop11dotnet.dll in c#","I have a gtop11dotnet.dll. It is .NET PKCS#11 Library for Windows v2.2.0.9 from Gemalto website. DLL is containing C_GetCardProperty method which can be used to retrieve Smart card's serial number or GUID. According to PKCS#11 User's Guide and .NET Integration Guide it is ""byte[] GetCardProperty(byte property, byte flags)"". It receives two bytes as parameters and retrieves e.g. serial number or GUID in form of bytes array. 
My question is how to get serial number and store it into managed bytes array?
Here is my try:
[DllImport(""gtop11dotnet.dll"")]
public static extern byte[] C_GetCardProperty(byte property, byte flags);
public static void Main()
{
    byte[] bytes = new byte[12];
    bytes = C_GetCardProperty(0x06, 0x00) //Error at this line -> Cannot marshal 'return value': Invalid managed/unmanaged type combination.
}

Thanks for any help.
","Try this.
public static extern uint C_GetCardProperty(uint slotID, byte property, byte flags, byte[] blob, ref byte length);
","876","<.net><smartcard><pkcs#11>","0","0","2","2013-02-28 11:10:44","","0","","806501","","2011-07-01 06:36:22","2011-06-30 13:41:14",""
"44715797","Threadsafe usage of PKCS11Interop library in C#","I am using PKCS11Interop to perform Key Management operations inside an HSM. The HSM I am using is Thales PCI Express. Below is the class that wraps all operations being performed in HSM:
public sealed class KeyStoreOperations
    {
        private KeyStoreContext m_keyStoreContext;

        private static Pkcs11 m_Pkcs11;
        private static readonly object _syncLockPkcs11 = new object();
        private static readonly object _syncLockHSMLogin = new object();

        public KeyStoreOperations(KeyStoreContext keyStoreContext)
        {
            m_keyStoreContext = keyStoreContext;
            InitializePkcs11Object();
        }

        /// <summary>
        /// Generates key in the key store
        /// </summary>
        /// <param name=""keyName""></param>
        /// <returns></returns>
        public void GenerateKey(string keyName)
        {
            HSMTransactionHandler((Session session) =>
            {
                Mechanism mechanism = new Mechanism(CKM.CKM_RSA_PKCS_KEY_PAIR_GEN);
                ObjectHandle publicKeyHandle = null;
                ObjectHandle privateKeyHandle = null;
                byte[] ckaId = session.GenerateRandom(20);
                List<ObjectAttribute> publicKeyAttributes = CreatePublicKeyTemplate(keyName, ckaId);
                List<ObjectAttribute> privateKeyAttributes = CreatePrivateKeyTemplate(keyName, ckaId);
                session.GenerateKeyPair(mechanism, publicKeyAttributes, privateKeyAttributes, out publicKeyHandle, out privateKeyHandle);
            });
        }

        /// <summary>
        /// Destroys key in the key store
        /// </summary>
        /// <param name=""keyLabel""></param>
        /// <returns></returns>
        public void DestroyKey(string keyName)
        {
            HSMTransactionHandler((Session session) =>
            {
                var publicKeyHandle = GetPublicKey(keyName, session);
                var privateKeyHandle = GetPrivateKey(keyName, session);
                if (publicKeyHandle != null && privateKeyHandle != null)
                {
                    session.DestroyObject(publicKeyHandle);
                    session.DestroyObject(privateKeyHandle);
                }
            });
        }

        /// <summary>
        /// Encrypts a message using the key in the key store
        /// </summary>
        /// <param name=""keyName""></param>
        /// <param name=""message""></param>
        /// <returns></returns>
        public string Encrypt(string keyName, string message)
        {
            ValidateInputs(message, ""Message"");
            var encryptedMessage = string.Empty;
            HSMTransactionHandler((Session session) =>
            {
                Mechanism mechanism = new Mechanism(CKM.CKM_RSA_PKCS);
                var publicKey = GetPublicKey(keyName, session);
                if (publicKey == null)
                    throw new HSMException(ErrorConstant.HSM_ENCRYPTION_KEY_NOT_FOUND);
                var originalKeyBytes = EncryptionHelper.Decode(message);
                var encryptedKeyBytes = session.Encrypt(mechanism, publicKey, originalKeyBytes);
                encryptedMessage = EncryptionHelper.Encode(encryptedKeyBytes);
            });
            return encryptedMessage;
        }

        /// <summary>
        /// Decrypts a key using the key in the key store
        /// </summary>
        /// <param name=""keyName""></param>
        /// <param name=""cipher""></param>
        /// <returns></returns>
        public string Decrypt(string keyName, string cipher)
        {
            ValidateInputs(cipher, ""Cipher"");
            var decryptedMessage = string.Empty;
            HSMTransactionHandler((Session session) =>
            {
                Mechanism mechanism = new Mechanism(CKM.CKM_RSA_PKCS);
                var privateKey = GetPrivateKey(keyName, session);
                if (privateKey == null)
                    throw new HSMException(ErrorConstant.HSM_ENCRYPTION_KEY_NOT_FOUND);
                var encryptedSymmetricKeyBytes = EncryptionHelper.Decode(cipher);
                var decryptedSymmetricKeyBytes = session.Decrypt(mechanism, privateKey, encryptedSymmetricKeyBytes);
                decryptedMessage = EncryptionHelper.Encode(decryptedSymmetricKeyBytes);
            });
            return decryptedMessage;
        }

        #region Private methods  

        #region Validations

        private void ValidateInputs(string input, string name)
        {
            if (string.IsNullOrEmpty(input))
                throw new ArgumentNullException(name);
        }

        #endregion Validations

        private void HSMTransactionHandler(Action<Session> action)
        {
            Slot hsmSlot = null;
            Session hsmSession = null;
            try
            {
                hsmSlot = GetSlot(m_keyStoreContext.ModuleToken);
                hsmSession = hsmSlot.OpenSession(false);
                lock (_syncLockHSMLogin)
                {
                    hsmSession.Login(CKU.CKU_USER, m_keyStoreContext.SecurityPin);
                    action(hsmSession);
                    hsmSession.Logout();
                }
            }
            catch (Pkcs11Exception ex)
            {
                HandleHSMErrors(ex);
            }
            finally
            {
                if (!(hsmSession == null))
                    hsmSession.CloseSession();
            }
        }

        private ObjectHandle GetPrivateKey(string keyName, Session session)
        {
            ObjectHandle privateKey = null;
            List<ObjectHandle> foundObjects = null;
            List<ObjectAttribute> objectAttributes = new List<ObjectAttribute>();
            objectAttributes.Add(new ObjectAttribute(CKA.CKA_LABEL, keyName));
            objectAttributes.Add(new ObjectAttribute(CKA.CKA_PRIVATE, true));

            foundObjects = session.FindAllObjects(objectAttributes);
            if (foundObjects != null && foundObjects.Count > 0)
            {
                privateKey = foundObjects[0];
            }
            return privateKey;
        }

        private ObjectHandle GetPublicKey(string keyName, Session session)
        {
            ObjectHandle publicKey = null;
            List<ObjectHandle> foundObjects = null;
            List<ObjectAttribute> objectAttributes = new List<ObjectAttribute>();
            objectAttributes.Add(new ObjectAttribute(CKA.CKA_LABEL, keyName));
            objectAttributes.Add(new ObjectAttribute(CKA.CKA_PRIVATE, false));

            foundObjects = session.FindAllObjects(objectAttributes);
            if (foundObjects != null && foundObjects.Count > 0)
            {
                publicKey = foundObjects[0];
            }
            return publicKey;
        }

        private List<ObjectAttribute> CreatePublicKeyTemplate(string keyName, byte[] ckaId)
        {
            List<ObjectAttribute> publicKeyAttributes = new List<ObjectAttribute>();
            publicKeyAttributes.Add(new ObjectAttribute(CKA.CKA_TOKEN, true));
            publicKeyAttributes.Add(new ObjectAttribute(CKA.CKA_PRIVATE, false));
            publicKeyAttributes.Add(new ObjectAttribute(CKA.CKA_LABEL, keyName));
            publicKeyAttributes.Add(new ObjectAttribute(CKA.CKA_ID, ckaId));
            publicKeyAttributes.Add(new ObjectAttribute(CKA.CKA_ENCRYPT, true));
            publicKeyAttributes.Add(new ObjectAttribute(CKA.CKA_VERIFY, true));
            publicKeyAttributes.Add(new ObjectAttribute(CKA.CKA_VERIFY_RECOVER, true));
            publicKeyAttributes.Add(new ObjectAttribute(CKA.CKA_WRAP, true));
            publicKeyAttributes.Add(new ObjectAttribute(CKA.CKA_MODULUS_BITS, Convert.ToUInt64(m_keyStoreContext.KeySize)));
            publicKeyAttributes.Add(new ObjectAttribute(CKA.CKA_PUBLIC_EXPONENT, new byte[] { 0x01, 0x00, 0x01 }));

            return publicKeyAttributes;
        }

        private List<ObjectAttribute> CreatePrivateKeyTemplate(string keyName, byte[] ckaId)
        {
            List<ObjectAttribute> privateKeyAttributes = new List<ObjectAttribute>();
            privateKeyAttributes.Add(new ObjectAttribute(CKA.CKA_TOKEN, true));
            privateKeyAttributes.Add(new ObjectAttribute(CKA.CKA_PRIVATE, true));
            privateKeyAttributes.Add(new ObjectAttribute(CKA.CKA_LABEL, keyName));
            privateKeyAttributes.Add(new ObjectAttribute(CKA.CKA_ID, ckaId));
            privateKeyAttributes.Add(new ObjectAttribute(CKA.CKA_SENSITIVE, true));
            privateKeyAttributes.Add(new ObjectAttribute(CKA.CKA_DECRYPT, true));
            privateKeyAttributes.Add(new ObjectAttribute(CKA.CKA_SIGN, true));
            privateKeyAttributes.Add(new ObjectAttribute(CKA.CKA_SIGN_RECOVER, true));
            privateKeyAttributes.Add(new ObjectAttribute(CKA.CKA_UNWRAP, true));

            return privateKeyAttributes;
        }

        private Slot GetSlot(string tokenLabel)
        {
            Slot matchingSlot = null;
            List<Slot> slots = m_Pkcs11.GetSlotList(true);
            matchingSlot = slots[0];
            if (tokenLabel != null)
            {
                matchingSlot = null;
                foreach (Slot slot in slots)
                {
                    TokenInfo tokenInfo = null;
                    try
                    {
                        tokenInfo = slot.GetTokenInfo();
                    }
                    catch (Pkcs11Exception ex)
                    {
                        if (ex.RV != CKR.CKR_TOKEN_NOT_RECOGNIZED && ex.RV != CKR.CKR_TOKEN_NOT_PRESENT)
                            throw;
                    }

                    if (tokenInfo == null)
                        continue;

                    if (!string.IsNullOrEmpty(m_keyStoreContext.ModuleToken))
                        if (0 != string.Compare(m_keyStoreContext.ModuleToken, tokenInfo.Label, StringComparison.Ordinal))
                            continue;

                    matchingSlot = slot;
                    break;
                }

                if (matchingSlot == null)
                    throw new HSMException(string.Format(ErrorConstant.HSM_CONFIGURATION_ERROR_INCORRECT_SLOT, tokenLabel));
            }
            return matchingSlot;
        }

        private void InitializePkcs11Object()
        {
            if (m_Pkcs11 == null)
            {
                lock (_syncLockPkcs11)
                {
                    m_Pkcs11 = new Pkcs11(m_keyStoreContext.PKCS11LibraryPath, true);
                }
            }
        }

        private void HandleHSMErrors(Pkcs11Exception ex)
        {
            if (ex.RV == CKR.CKR_PIN_INCORRECT)
            {
                throw new HSMException(ErrorConstant.HSM_CONFIGURATION_ERROR_PIN_INCORRECT, ex);
            }
            else
            {
                throw new HSMException(ErrorConstant.HSM_CONFIGURATION_ERROR_GENERIC, ex);
            }
        }

        #endregion
    }

If you notice I am making use of two objects to apply locks. Object _syncLockPkcs11 is being used to implement singleton on m_Pkcs11 and _syncLockHSMLogin  is used to synchronize Login to HSM . Earlier when I did not have these locks in place, I used to get the following errors from HSM,  CKU_USER_ALREADY_LOGGED_IN and CKR_FUNCTION_FAILED. I implemented this changes based on the information provided in this link and in the section 6.7.7 Example of use of sessions of this document i.e. 
With my current Implementation I do not get any of these errors but would like to know expert opinion here.
Some of the questions that I have are:
Is it OK to use m_Pkcs11 in this fashion i.e. not disposing it through out the process life cycle?
Is it Ok to apply lock over the HSM login method? I am asking because I did not find any online reference suggesting this.
Is there a way of achieving this in a better manner?
","The answers to all your questions are ""hidden"" in PKCS#11 v2.20 specificiation.
See Chapter 6.6 for more info on not disposing m_Pkcs11 through out the process life cycle:

An application becomes a ""Cryptoki application"" by calling the
  Cryptoki function C_Initialize (see Section 11.4) from one of its
  threads; after this call is made, the application can call other
  Cryptoki functions. When the application is done using Cryptoki, it
  calls the Cryptoki function C_Finalize (see Section 11.4) and ceases
  to be a Cryptoki application.

In other words you need to create instance of Pkcs11 class only once and then all your threads can access PKCS#11 functions. I've seen apps that do use single instance of Pkcs11 class and do not dispose it for months. It is a perfectly valid usage.
See chapter 6.7.4 for more info on login state:

In Cryptoki, all sessions that an application has with a token must
  have the same login/logout status (i.e., for a given application and
  token, one of the following holds: all sessions are public sessions;
  all sessions are SO sessions; or all sessions are user sessions). When
  an application's session logs into a token, all of that application's
  sessions with that token become logged in, and when an application's
  session logs out of a token, all of that application’s sessions with
  that token become logged out.

In other words once you login into one session, you are also logged in all existing sessions, and also in all sessions opened in the future. That is the main reason why you were getting CKU_USER_ALREADY_LOGGED_IN error.  I've seen apps that login into a single session and keep it open for months. BTW you can use Session::GetSessionInfo() method to check whether your session is already logged in or not.
For a real world example of class similar to yours please take a look at Pkcs11RsaSignature class from Pkcs11Interop.PDF project.
","876","<c#><pkcs#11><hsm><pkcs11interop>","2","2","1","2017-06-29 22:41:27","44764769","5","1","3325704","","2017-06-26 21:00:12","2017-06-23 07:43:09","2017-06-26 17:27:11"
"27619914","How to check version of libpkcs11 on Solaris","As stated in subject. How to check in terminal which version of pkcs11 I've got on SunOS 5.11?
How is it possible to update this library? It is causing me some issues to my Java standalone application.
Thanks!
","The libpkcs11 library is part of the Solaris 11 system/library package. You query the package and its version with this command:
$ pkg search -l /usr/lib/libpkcs11.so
INDEX      ACTION VALUE                PACKAGE
path       link   usr/lib/libpkcs11.so pkg:/system/library@0.5.11-0.175.2.0.0.42.2

Should you want to update it, you need to update Solaris 11 itself to a newer version (eg: 11.2 or a newer SRU)
","872","<solaris><pkcs#11><sunos>","1","3","1","2014-12-24 10:02:38","27634925","0","","","","","2014-12-23 11:57:43",""
"11168110","Java PKCS11 with iaik","I created an applet using the iaik libraries it works perfectly in my applet viewer but in my web browser I get this:  trusted loader attempted to load sandboxed resource any idea ? 
Amm ok so I got it to work but I would like to also know why ... I am using netbeans ... after I set the option for self signed I compiled and in my dist folder it created a jar file with my classes...after that I copied my jar file, libs ...etc. to the folder with my applet ... and ran it ... so what does the sandbox ment and how come I do not get it anymore... I also copied that PKCS11Wrapper to my jdk/bin folder....
","The problems is appear because your applet tried to access to native library and your applet has to be signed, BUT you've written that you sign it, so, if you place the code in the jre/lib/ext directory, signing the code is not required, try to create console application from applet and try to start it. I think you will see that all is work , and your IDE signature is not working. How to start applet from main method
","853","<java><applet><smartcard><pkcs#11>","1","2","1","2012-06-23 11:57:51","11168339","0","","1181443","","2012-06-23 11:57:51","2012-06-23 08:46:34",""
"39346577","PyKCS11 get token certificates","I am using PyKCS11 library to read read the certificates from a token device.
This is the code I am using right now, the problem is that the attributes are binary.
pkcs11 = PyKCS11Lib()
pkcs11.load(""C:\Windows\System32\eTPKCS11.dll"")
slot = pkcs11.getSlotList()[2]
session = pkcs11.openSession(slot, PyKCS11.CKF_SERIAL_SESSION)
objects = session.findObjects([(PyKCS11.CKA_CLASS, PyKCS11.CKO_CERTIFICATE)])
all_attributes = [PyKCS11.CKA_SUBJECT, PyKCS11.CKA_VALUE, PyKCS11.CKA_ISSUER, PyKCS11.CKA_CERTIFICATE_CATEGORY, PyKCS11.CKA_END_DATE]

for object in objects:
    try:
        attributes = session.getAttributeValue(object, all_attributes)
    except PyKCS11.PyKCS11Error as e:
        continue

    attrDict = dict(list(zip(all_attributes, attributes)))

    if attrDict[PyKCS11.CKA_CERTIFICATE_CATEGORY] == (0x2, 0x0, 0x0, 0x0):
        continue

    print attrDict[PyKCS11.CKA_SUBJECT]
    print attrDict[PyKCS11.CKA_VALUE]

session.closeSession()

What it prints is a tuple, something like: (48L, 130L, 5L, 192L, 48L, 130L, 4L, 168L).
How can I extract the subject name and the x509 certificate ?4
EDIT
I managed to solve it in the end. Just in case someone else is struggling this is the way to to get the certificate:
    pkcs11 = PyKCS11Lib()
    pkcs11.load(""C:\Windows\System32\eTPKCS11.dll"")
    slot = pkcs11.getSlotList()[2]
    session = pkcs11.openSession(slot, PyKCS11.CKF_SERIAL_SESSION)
    objects = session.findObjects([(PyKCS11.CKA_CLASS, PyKCS11.CKO_CERTIFICATE)])
    all_attributes = [PyKCS11.CKA_SUBJECT, PyKCS11.CKA_VALUE, PyKCS11.CKA_ISSUER, PyKCS11.CKA_CERTIFICATE_CATEGORY, PyKCS11.CKA_END_DATE]

    for object in objects:
        try:
            attributes = session.getAttributeValue(object, all_attributes)
        except PyKCS11.PyKCS11Error as e:
            continue

        attrDict = dict(list(zip(all_attributes, attributes)))

        if attrDict[PyKCS11.CKA_CERTIFICATE_CATEGORY] == (0x2, 0x0, 0x0, 0x0):
            continue

        x509 = OpenSSL.crypto.load_certificate(OpenSSL.crypto.FILETYPE_ASN1,
                                                   str(bytearray(attrDict[PyKCS11.CKA_VALUE])))

    session.closeSession()

","","849","<python><openssl><ssl-certificate><pkcs#11>","2","","0","2016-09-08 06:48:12","","4","1","1532642","","2016-09-08 06:48:12","2016-09-06 10:20:07",""
"19537012","Alladin eToken failure with importing RSA key","I am using SafeNet's (Alladin) eToken with PKCS11 interface to C#.
I need to import a RSA key created without the eToken into the eToken.
The creation of the RSA key is done through:
RSACryptoServiceProvider RSA = new RSACryptoServiceProvider();
RSAParameters publicKey = RSA.ExportParameters(false);
RSAParameters privateKey = RSA.ExportParameters(true);
eTokenHelper.WritePrivateKeyToToken(session, privateKey, ""private"");

and the implementation of the WritePrivateKeyToToken above is:
public static void WritePrivateKeyToToken(PKCS11.Session session, System.Security.Cryptography.RSAParameters publicParams, string label)
    {

        List<PKCS11.Attribute> attList = new List<PKCS11.Attribute>{};


        attList.Add(new PKCS11.Attribute(PKCS11.CKA_CLASS, PKCS11.CKO_PRIVATE_KEY));
        attList.Add(new PKCS11.Attribute(PKCS11.CKA_KEY_TYPE, PKCS11.CKK_RSA));
        attList.Add(new PKCS11.Attribute(PKCS11.CKA_PRIVATE, true));
        //attList.Add(new PKCS11.Attribute(PKCS11.CKA_SUBJECT, cert.SubjectName.RawData));
        attList.Add(new PKCS11.Attribute(PKCS11.CKA_ID, 0xa1));
        attList.Add(new PKCS11.Attribute(PKCS11.CKA_LABEL, label));
        attList.Add(new PKCS11.Attribute(PKCS11.CKA_TOKEN, true));
        attList.Add(new PKCS11.Attribute(PKCS11.CKA_MODULUS, publicParams.Modulus));
        attList.Add(new PKCS11.Attribute(PKCS11.CKA_PUBLIC_EXPONENT, publicParams.Exponent));
        attList.Add(new PKCS11.Attribute(PKCS11.CKA_PRIVATE_EXPONENT, publicParams.D));
        // attList.Add(new ObjectAttribute(PKCS11.CKH_CLOCK, true));
        attList.Add(new PKCS11.Attribute(PKCS11.CKA_MODIFIABLE, true));
        attList.Add(new PKCS11.Attribute(PKCS11.CKA_LOCAL, true));
        attList.Add(new PKCS11.Attribute(PKCS11.CKA_EXTRACTABLE, false));
        attList.Add(new PKCS11.Attribute(PKCS11.CKA_NEVER_EXTRACTABLE, true));
        attList.Add(new PKCS11.Attribute(PKCS11.CKA_SENSITIVE, true));
        attList.Add(new PKCS11.Attribute(PKCS11.CKA_ALWAYS_SENSITIVE, true));
        attList.Add(new PKCS11.Attribute(PKCS11.CKA_DERIVE, false));
        attList.Add(new PKCS11.Attribute(PKCS11.CKA_LOCAL, false));
        attList.Add(new PKCS11.Attribute(PKCS11.CKA_DECRYPT, true));
        attList.Add(new PKCS11.Attribute(PKCS11.CKA_SIGN, true));
        attList.Add(new PKCS11.Attribute(PKCS11.CKA_SIGN_RECOVER, false));
        attList.Add(new PKCS11.Attribute(PKCS11.CKA_UNWRAP, false));

        PKCS11.Object.Create(session, attList.ToArray());
    }

when I run this code, I get the exception with code
public const int CKR_TEMPLATE_INCONSISTENT = 0x000000D1;

(the exception appears on the last line: Create()).
I will appreciate any assistance in understandin what am I doing wrong.
Thanks,
Ronen
","I have some problem. By the way, you set atribut PKCS11.CKA_LOCAL twice in the code. It is not corect.  Do not set attribute PKCS11.CKA_LOCAL - it is set automatically. If is set PKCS11.SENSITIVE, it is not possible to set CKA_EXTRACTABLE, CKA_NEVER_EXTRACTABLE and CKA_ALWAYS_SENSITIVE.
This code should work:
   List<PKCS11.Attribute> attList = new List<PKCS11.Attribute>{};

    attList.Add(new PKCS11.Attribute(PKCS11.CKA_CLASS, PKCS11.CKO_PRIVATE_KEY));
    attList.Add(new PKCS11.Attribute(PKCS11.CKA_KEY_TYPE, PKCS11.CKK_RSA));
    attList.Add(new PKCS11.Attribute(PKCS11.CKA_PRIVATE, true));
    //attList.Add(new PKCS11.Attribute(PKCS11.CKA_SUBJECT, cert.SubjectName.RawData));
    attList.Add(new PKCS11.Attribute(PKCS11.CKA_ID, 0xa1));
    attList.Add(new PKCS11.Attribute(PKCS11.CKA_LABEL, label));
    attList.Add(new PKCS11.Attribute(PKCS11.CKA_TOKEN, true));
    attList.Add(new PKCS11.Attribute(PKCS11.CKA_MODULUS, publicParams.Modulus));
    attList.Add(new PKCS11.Attribute(PKCS11.CKA_PUBLIC_EXPONENT, publicParams.Exponent));
    attList.Add(new PKCS11.Attribute(PKCS11.CKA_PRIVATE_EXPONENT, publicParams.D));
    // attList.Add(new ObjectAttribute(PKCS11.CKH_CLOCK, true));
    attList.Add(new PKCS11.Attribute(PKCS11.CKA_MODIFIABLE, true));
    attList.Add(new PKCS11.Attribute(PKCS11.CKA_SENSITIVE, true));
    attList.Add(new PKCS11.Attribute(PKCS11.CKA_DERIVE, false));
    attList.Add(new PKCS11.Attribute(PKCS11.CKA_DECRYPT, true));
    attList.Add(new PKCS11.Attribute(PKCS11.CKA_SIGN, true));
    attList.Add(new PKCS11.Attribute(PKCS11.CKA_SIGN_RECOVER, false));
    attList.Add(new PKCS11.Attribute(PKCS11.CKA_UNWRAP, false));

    PKCS11.Object.Create(session, attList.ToArray());

","843","<c#><rsa><pkcs#11><e-token>","3","3","1","2014-07-07 09:09:54","","0","0","","","","2013-10-23 08:47:04",""
"24720585","PKCS11: export insensitive and extractable key","I generate a derived key that is extractable and insensitive. I want to export it out of  the token and see byes of it. how can I do that?
","You should read the value of the CKA_VALUE attribute of the key object using the C_GetAttributeValue() function.
","837","<key><token><pkcs#11><hsm>","1","3","1","2014-07-16 23:07:00","24720807","0","0","","","","2014-07-13 07:48:15",""
"49214347","PKCS11 Windows invalid engine YubiHSM2","it's me again.
I am working with a YubiHSM2 HSM Module and I am trying to set it up for the use of pkcs11 engine which will allow me to use OpenSSL with the HSM.
I am implementing this on Windows, which brings me a lot of trouble.
I HAVE installed OpenSSL 32,64, OpenSC,YubiHSM2 drivers as well as libp11 (built with MSYS2).
The interesting part of my OpenSSL.cnf looks like this:
openssl_conf = openssl_init

[openssl_init]
engines = engine_section

[engine_section]
pkcs11 = pkcs11_section

[pkcs11_section]
engine_id = pkcs11
dynamic_path = ""C:\Windows\System32\opensc-pkcs11.dll""
MODULE_path = ""C:\Users\myUser\Desktop\SecureTemial\yubihsm2-sdk\bin\yubihsm_pkcs11.dll""
PIN = ""0001password""
init = 0

When I try:
 C:\OpenSSL-Win64\bin\openssl.exe req -new -x509 -days 365 -sha256 -config C:\Users\myUser\Desktop\SecureTemial\openssl.cnf -engine pkcs11 -keyform engine -key slot_0-label_my_key -out cert.pem

I receive the following:
C:\OpenSSL-Win64\bin\openssl.exe : invalid engine ""pkcs11""
In Zeile:1 Zeichen:2
+  C:\OpenSSL-Win64\bin\openssl.exe req -new -x509 -days 365 -sha256 -c ...
+  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : NotSpecified: (invalid engine ""pkcs11"":String) [], RemoteException
    + FullyQualifiedErrorId : NativeCommandError

16056:error:25078067:DSO support routines:win32_load:could not load the shared 
library:crypto\dso\dso_win32.c:106:filename(C:\Program Files\OpenSSL\lib\engines-1_1\pkcs11.dll)
16056:error:25070067:DSO support routines:DSO_load:could not load the shared library:crypto\dso\dso_lib.c:161:
16056:error:260B6084:engine routines:dynamic_load:dso not found:crypto\engine\eng_dyn.c:414:
16056:error:2606A074:engine routines:ENGINE_by_id:no such engine:crypto\engine\eng_list.c:339:id=pkcs11
16056:error:25078067:DSO support routines:win32_load:could not load the shared 
library:crypto\dso\dso_win32.c:106:filename(pkcs11.dll)
16056:error:25070067:DSO support routines:DSO_load:could not load the shared library:crypto\dso\dso_lib.c:161:
16056:error:260B6084:engine routines:dynamic_load:dso not found:crypto\engine\eng_dyn.c:414:
Error configuring OpenSSL modules
16056:error:25078067:DSO support routines:win32_load:could not load the shared 
library:crypto\dso\dso_win32.c:106:filename(C:WindowsSystem32opensc-pkcs11.dll)
16056:error:25070067:DSO support routines:DSO_load:could not load the shared library:crypto\dso\dso_lib.c:161:
16056:error:260B6084:engine routines:dynamic_load:dso not found:crypto\engine\eng_dyn.c:414:
16056:error:260BC066:engine routines:int_engine_configure:engine configuration 
error:crypto\engine\eng_cnf.c:141:section=pkcs11_section, name=dynamic_path, value=C:WindowsSystem32opensc-pkcs11.dll
16056:error:0E07606D:configuration file routines:module_run:module initialization 
error:crypto\conf\conf_mod.c:173:module=engines, value=engine_section, retcode=-1   

I have already checked if the dll's are locked and ran as admin etc.
If you have any clue what's  responsable for the trouble here please let me know!
Thank you very much!
","This question was one of the first that appeared in my search results when doing some research on a similar topic. As it doesn't have an answer yet, I'll outline the results of my solution:
For using libp11's PKCS#11 engine with OpenSSL, it must be compiled as dynamic engine that is statically linked against the OpenSSL version you are using. As you are using the binaries from Shining Light Productions (a good guess based on the install directory you mentioned in your question), using a MSYS2 version obtained from a third-party resource might not work, neither does using the PKCS#11 library that ships with the OpenSC projects' Windows installers.
Fortunately, the Shining Light Productions' OpenSSL version comes with all required libraries, so you can easily compile libp11 yourself, e.g. by using NMAKE (follow the link to see how to obtain it and how to properly setup your command line for its use):

Download the OpenSSL binaries that meet your requirements (x86 or x64) and install them to the proposed standard destinations (e.g., C:\OpenSSL-Win32 or C:\OpenSSL-Win64). - The makefile of libp11 expects these folders for its bindings.
Download and extract, or clone the libp11 projects' source code.
Open your Windows command-line with NMAKE environment variables set and change to the location of the previously downloaded libp11 files.
When building for the 64 bit version of OpenSSL, you have to set the BUILD_FOR environment variable accordingly. Run
set BUILD_FOR=WIN64

on your command-line.
Now compile the libraries by running
NMAKE /F Makefile.mak

If everything went well, you then have two new libraries within libp11's src folder: libp11.dll and pkcs11.dll. The latter is the PKCS#11 engine to use with your OpenSSL. Copy it to e.g., the Windows libraries folder (System32 for the 32 bit version, SysWOW64 for the x64 version).
Adapt your openssl.cnf file accordingly. Copy
openssl_conf = openssl_init

to the beginning of the file, and the rest to its end:
[openssl_init]
engines = engine_section

[engine_section]
pkcs11 = pkcs11_section

[pkcs11_section]
dynamic_path = ""C:\\Windows\\SysWOW64\\pkcs11.dll""
module_path = ""C:\\Users\\myUser\\Desktop\\SecureTemial\\yubihsm2-sdk\\bin\\yubihsm_pkcs11.dll""
PIN = ""0001password""


Some final notes:

Make sure, that the adapted openssl.cnf file really is picked up by OpenSSL. The OpenSSL installation comes with several example files. By default, the location of the config files for above binaries is C:\Program Files\Common Files\SSL\openssl.cnf for the x64 version and C:\Program Files (x86)\Common Files\SSL\openssl.cnf for the x86 version. But other OpenSSL installations on your system (e.g., from OpenVPN, MingW, MSYS2, and alike that ship with bundled OpenSSL) might interfere with the settings file location. You can ensure the right settings file is used by setting the OPENSSL_CONF environment variable accordingly.
When using double quotes for the Windows paths, make sure to escape the backslashes correctly by using \\ instead of \.
You can safely omit the engine_id and init part of your openssl.cnf's [pkcs11_section].
While libp11's dynamic PKCS#11 engine needs to be compiled against the same architecture (x86 or x64) and libraries as OpenSSL, the module library might be required as 32 bit version (even when running the 64 bit build of OpenSSL). - At least that is what happened within the scenario of our systems (we use Gemalto Safenet e-Tokens, so the Aladdin module libraries that ship with the Safenet Authentication Client).

","834","<dll><openssl><pkcs#11><opensc><yubico>","1","1","1","2018-10-08 06:09:59","","1","2","","","","2018-03-10 21:47:00",""
"13368775","Certification chain contains only one position - Java & PKCS11","I'm trying to sign my files with my smart card. I initialize my keystore like this:
String pkcs11config = ""name = CertumSmartCard \n"" + ""library = ""
            + new File(""."").getAbsolutePath() + ""/cryptoCertum3PKCS.dll"";
Provider pkcs11Provider = new SunPKCS11(new ByteArrayInputStream(
                pkcs11config.getBytes()));
Security.addProvider(pkcs11Provider);
KeyStore keyStore = KeyStore.getInstance(""PKCS11"", pkcs11Provider);
keyStore.load(null, pin.toCharArray());

and then I try to read certificate chain using:
Enumeration<String> aliasesEnum = keyStore.aliases();
String alias = null;
while (aliasesEnum.hasMoreElements()) {
alias = aliasesEnum.nextElement();
Certificate[] certChain = keyStore.getCertificateChain(alias);
(...)
}

but unfortunately I get only one certificate in my chain (certificate of the owner of this card). I don't have any trusted root certificates so during validation I get an error that file was signed using untrusted certicicate. 
Do you have any idea? Should I use SunPKSC11 class? It doesn't work with java 7 (I use java 6), looks like it's deprecated. Are there any other libraries to get into the card's guts?
","I think Your problem was inside the while loop :
while (aliasesEnum.hasMoreElements()) {
alias = aliasesEnum.nextElement();
**Certificate[] certChain = keyStore.getCertificateChain(alias);**
(...)
}

in this case you will get only one certificate with the last alias .
so , I sugget you to change the code to be like this :
Certificate[] certChain = new Certificate[NumnberOfYourCertificates];
int count = 0 ;
while (aliasesEnum.hasMoreElements()) {
alias = aliasesEnum.nextElement();
certChain[count++] = keyStore.getCertificateChain(alias);
(...)
}

I think it will work .
","828","<java><certificate><pkcs#11>","2","-1","2","2013-11-26 16:43:44","20222920","0","","","","","2012-11-13 21:06:03",""
"13368775","Certification chain contains only one position - Java & PKCS11","I'm trying to sign my files with my smart card. I initialize my keystore like this:
String pkcs11config = ""name = CertumSmartCard \n"" + ""library = ""
            + new File(""."").getAbsolutePath() + ""/cryptoCertum3PKCS.dll"";
Provider pkcs11Provider = new SunPKCS11(new ByteArrayInputStream(
                pkcs11config.getBytes()));
Security.addProvider(pkcs11Provider);
KeyStore keyStore = KeyStore.getInstance(""PKCS11"", pkcs11Provider);
keyStore.load(null, pin.toCharArray());

and then I try to read certificate chain using:
Enumeration<String> aliasesEnum = keyStore.aliases();
String alias = null;
while (aliasesEnum.hasMoreElements()) {
alias = aliasesEnum.nextElement();
Certificate[] certChain = keyStore.getCertificateChain(alias);
(...)
}

but unfortunately I get only one certificate in my chain (certificate of the owner of this card). I don't have any trusted root certificates so during validation I get an error that file was signed using untrusted certicicate. 
Do you have any idea? Should I use SunPKSC11 class? It doesn't work with java 7 (I use java 6), looks like it's deprecated. Are there any other libraries to get into the card's guts?
","Actually this card contained only one certificate so my code worked properly. I added missing certificates manually and connected them into chain. With that chain I could sign my file. I got missing certificates by saving them from another application (proCertum Smart Card) oficially used for singning file with this type of certificate.
","828","<java><certificate><pkcs#11>","2","0","2","2013-11-26 16:43:44","20222920","0","","","","","2012-11-13 21:06:03",""
"39795787","Create 3DES key with pkcs11Interop and output key value, or proivde key value for creation","I was wondering whether it is possible using pkcs11interop to create a 3DES key and specify the key value for creation, or otherwise create a key and output the generated key value. Basically I need the secret key to be exported to another device. 
I've tried using the CKA_VALUE attribute and passing the key as a byte[] array but with no success.
Is such thing possible please? Can someone assist me please? 
EDIT:
Here is the code I have with no luck so far:
public ObjectHandle generate3DESKey(string keyLabel)
{
ObjectHandle key = null;
// Generate symetric key 

// Prepare attribute template of new key
List<ObjectAttribute> objectAttributes = new List<ObjectAttribute>();
objectAttributes.Add(new ObjectAttribute(CKA.CKA_TOKEN, true));
objectAttributes.Add(new ObjectAttribute(CKA.CKA_CLASS, CKO.CKO_SECRET_KEY));
objectAttributes.Add(new ObjectAttribute(CKA.CKA_KEY_TYPE, CKK.CKK_DES3));
objectAttributes.Add(new ObjectAttribute(CKA.CKA_ENCRYPT, true));
objectAttributes.Add(new ObjectAttribute(CKA.CKA_EXTRACTABLE, true));

objectAttributes.Add(new ObjectAttribute(CKA.CKA_LABEL, keyLabel));


// Specify key generation mechanism
Mechanism mechanism = new Mechanism(CKM.CKM_DES3_KEY_GEN);

// Generate key
key = _session.GenerateKey(mechanism, objectAttributes);

List<CKA> retrieveTemplate = new List<CKA>();
retrieveTemplate.Add(CKA.CKA_VALUE);

var test = _session.GetAttributeValue(key, retrieveTemplate);
var testval = test[0].GetValueAsString();
return key;
}

So what I'm trying with this code is to create a 3DES key and then get it's value using the GetAttributeValue as instructed below. I've tried the GetValueAsByteArray and GetValueAsString but all without success. What I've noticed is that the the cannotread properties on the retrieved attribute is set to true even though I've set the extractable attribute on creation. 
Apart from this I also contemplated passing the key value on generating the 3DES key however what puzzled me is the fact that documentation says that the key value used with the CKA.CKA_VALUE should be a byte array of length 24. In my case the key that I need to create is 16 length long and not 24. I want to create a key similar to this which is represented in hex over here: 1616161616161616 1010101010101010 
","Secret key can be imported with Session::CreateObject() method. You will need to specify correct object attributes as defined in PKCS#11 specification.
Plain form of secret key can be exported with Session::GetAttributeValue() method. Key object will need to have correct attributes specified to allow you to read its plain value.
Please read at least ""Chapter 10 - Objects"" and ""Chapter 12.15.3 - DES3 secret key objects"" of PKCS#11 v2.20 specification and then post your code may you still be unable to solve your issue.
Following code sample works for me like a charm with SoftHSM 2.1.0:
using Net.Pkcs11Interop.Common;
using Net.Pkcs11Interop.HighLevelAPI;
using System;
using System.Collections.Generic;

namespace ExportTest
{
    class Program
    {
        static void Main(string[] args)
        {
            using (Pkcs11 pkcs11 = new Pkcs11(@""D:\SoftHSM2\lib\softhsm2.dll"", false))
            {
                Slot slot = pkcs11.GetSlotList(true)[0];

                using (Session session = slot.OpenSession(false))
                {
                    session.Login(CKU.CKU_USER, ""11111111"");

                    // Generate exportable key
                    List<ObjectAttribute> objectAttributes = new List<ObjectAttribute>();
                    objectAttributes.Add(new ObjectAttribute(CKA.CKA_LABEL, ""Generated key""));
                    objectAttributes.Add(new ObjectAttribute(CKA.CKA_CLASS, CKO.CKO_SECRET_KEY));
                    objectAttributes.Add(new ObjectAttribute(CKA.CKA_KEY_TYPE, CKK.CKK_DES3));
                    objectAttributes.Add(new ObjectAttribute(CKA.CKA_TOKEN, true));
                    objectAttributes.Add(new ObjectAttribute(CKA.CKA_ENCRYPT, true));
                    objectAttributes.Add(new ObjectAttribute(CKA.CKA_DECRYPT, true));
                    objectAttributes.Add(new ObjectAttribute(CKA.CKA_EXTRACTABLE, true));

                    ObjectHandle generatedKey = null;
                    using (Mechanism mechanism = new Mechanism(CKM.CKM_DES3_KEY_GEN))
                        generatedKey = session.GenerateKey(mechanism, objectAttributes);

                    // Export the key
                    byte[] plainKeyValue = null;
                    List<ObjectAttribute> readAttrs = session.GetAttributeValue(generatedKey, new List<CKA>() { CKA.CKA_VALUE });
                    if (readAttrs[0].CannotBeRead)
                        throw new Exception(""Key cannot be exported"");
                    else
                        plainKeyValue = readAttrs[0].GetValueAsByteArray();

                    // Import the key
                    objectAttributes = new List<ObjectAttribute>();
                    objectAttributes.Add(new ObjectAttribute(CKA.CKA_LABEL, ""Imported key""));
                    objectAttributes.Add(new ObjectAttribute(CKA.CKA_CLASS, CKO.CKO_SECRET_KEY));
                    objectAttributes.Add(new ObjectAttribute(CKA.CKA_KEY_TYPE, CKK.CKK_DES3));
                    objectAttributes.Add(new ObjectAttribute(CKA.CKA_TOKEN, true));
                    objectAttributes.Add(new ObjectAttribute(CKA.CKA_ENCRYPT, true));
                    objectAttributes.Add(new ObjectAttribute(CKA.CKA_DECRYPT, true));
                    objectAttributes.Add(new ObjectAttribute(CKA.CKA_VALUE, plainKeyValue));

                    ObjectHandle importedKey = session.CreateObject(objectAttributes);

                    // Test encryption with generated key and decryption with imported key
                    using (Mechanism mechanism = new Mechanism(CKM.CKM_DES3_CBC, session.GenerateRandom(8)))
                    {
                        byte[] sourceData = ConvertUtils.Utf8StringToBytes(""Our new password"");
                        byte[] encryptedData = session.Encrypt(mechanism, generatedKey, sourceData);
                        byte[] decryptedData = session.Decrypt(mechanism, importedKey, encryptedData);
                        if (Convert.ToBase64String(sourceData) != Convert.ToBase64String(decryptedData))
                            throw new Exception(""Encryption test failed"");
                    }

                    session.Logout();
                }
            }
        }
    }
}

","828","<c#><pkcs#11><pkcs11interop>","1","1","1","2017-06-29 19:45:33","","1","0","3325704","","2017-06-29 19:45:33","2016-09-30 16:11:28",""
"41735839","What is the mechanism of private key for decryption in PKCS11","Here is some part of my code
I already encrypt some text from another app VB.net via RSACryptoProvider
But I stuck at the step to decrypt in C.
Here is my code.
static CK_RV usePrivateKeytoDecrypt(CK_SESSION_HANDLE hSession, CK_OBJECT_HANDLE hObject) {
CK_RV rv = CKR_OK;
CK_MECHANISM mechanism = {
    {CKM_RSA_PKCS_OAEP}
};

rv = C_DecryptInit(hSession, &mechanism, hObject);

return rv;

}
The code is not completed. I try to debug and got the error CKR_MECHANISM_PARAM_INVALID
Please help. Thanks
","It depends on the algorithm of the Key Pair.
If the Key Pair's algorithm is RSA, it could be CKM_RSA_PKCS / CKM_RSA_PKCS_OAEP / CKM_RSA_X_509.
If the Key Pair's algorithm is EC, it could be CKM_ECDSA.
Provided, the Private Key has the attribute CKA_DECRYPT set to true.
You can refer to this documentation here.
","827","<encryption><rsa><private-key><pkcs#11>","0","0","2","2017-01-21 23:36:46","","2","","","","","2017-01-19 07:13:16",""
"41735839","What is the mechanism of private key for decryption in PKCS11","Here is some part of my code
I already encrypt some text from another app VB.net via RSACryptoProvider
But I stuck at the step to decrypt in C.
Here is my code.
static CK_RV usePrivateKeytoDecrypt(CK_SESSION_HANDLE hSession, CK_OBJECT_HANDLE hObject) {
CK_RV rv = CKR_OK;
CK_MECHANISM mechanism = {
    {CKM_RSA_PKCS_OAEP}
};

rv = C_DecryptInit(hSession, &mechanism, hObject);

return rv;

}
The code is not completed. I try to debug and got the error CKR_MECHANISM_PARAM_INVALID
Please help. Thanks
","You are not correctly initializing your mechanism structure. The CK_MECHANISM is a structure that requires 3 parameters to be defined:
typedef struct CK_MECHANISM {
  CK_MECHANISM_TYPE mechanism;
  CK_VOID_PTR       pParameter;
  CK_ULONG          ulParameterLen;  /* in bytes */
} CK_MECHANISM;

You need to initialize your mechanism as follow:
CK_MECHANISM  mechanism = { CKM_RSA_PKCS_OAEP, NULL_PTR, 0 };

If you generated your private-public key-pair as RSA key-pair (using CKM_RSA_PKCS_KEY_PAIR_GEN mechanism) e.g.
CK_MECHANISM  GenMechanism = { CKM_RSA_PKCS_KEY_PAIR_GEN, NULL_PTR, 0 };

Then you need to initialize your mechanism for decryption as follow:
CK_MECHANISM  mechanism   = { CKM_RSA_PKCS, NULL_PTR, 0};

I presume you are already logged in with your hsession and the hObject is the located private key to be used for decryption? 
","827","<encryption><rsa><private-key><pkcs#11>","0","0","2","2017-01-21 23:36:46","","2","","","","","2017-01-19 07:13:16",""
"25743379","Using PKCS 11 token for SSL Handshake","I try to establish a SSL Client authentication with a PKCS#11 Card under Android. I can read the Certificate fine, but sadly i can't extract the private key, so i can't use it to create my KeyStore. Since i don't get any Lib from the vendor and can't use the SUN implementation of PKCS11, since that is not supported by android, i guess i have to override the SSLContext to change the way it handles the signing process, so i can encrypt and decrypt the Handshake via the card?
Also i can't use the full PKCS11 API i got following methods:

CK_RV C_GenerateKeyPair
CK_RV C_GenerateRandom
CK_RV C_Decrypt
CK_RV C_Sign
CK_RV C_Encrypt

The login to the Card is handled beforehand by a different Software, so i already have access.
So basically two questions:

Is there an easy way to handle the authentification without access
to the private key?
What or Where do i have to override to handle the SSL signing via the card?

","
Is there an easy way to handle the authentification without access to the private key?

There is no way to handle the authentication without access to the private key.

What or Where do i have to override to handle the SSL signing via the card?

Android must provide some form of PKCS#11 handler surely? If not, there is a free one by IAIK you can build yourself, I did it years ago for AIX.
","827","<java><android><security><ssl><pkcs#11>","2","0","1","2014-09-09 22:29:17","","8","","3602047","","2014-09-09 11:35:14","2014-09-09 11:22:32",""
"44010018","Signing PDF from Pkcs11Interop for CKM_ECDSA_SHA256 using SoftHSM 2.2.0 (ECDSA with SHA256) C# .net","I am trying to sign Pdf documents using Pkcs11Interop .net library.
I need to use ECDSA encryption algorithm with SHA256 hash algorithm.
And I am using SoftHSM 2.2.0 for storing private keys.
I found an CKM enum, CKM_ECDSA_SHA256, which I am passing while creating an object of class mechanism for calling the Sign method of Session.
I am getting the response from the ""Signdata"" method, however, on opening the Pdf files generated after signing give an error ""Signature Invalid"".
Here is the code snippet for Signdata method call. 
I don't get any error or exception in the code, however, the pdf as I have mentioned are showing signature invalid.
private Pkcs11 _pkcs11;
private Slot _slot;
private Session _session;

try
{
   _pkcs11 = new Pkcs11(hsmCryptoApi, true);
}
catch (Pkcs11Exception ex)
{
   if (ex.RV == CKR.CKR_CANT_LOCK)
      _pkcs11 = new Pkcs11(hsmCryptoApi, false);
   else
       throw ex;
}

_slot = FindSlot(_pkcs11, _certificateInformation.TokenLabel);
_session = _slot.OpenSession(true);

using (Mechanism mechanism = new Mechanism(CKM.CKM_ECDSA_SHA256))
{
  _session.Login(CKU.CKU_USER, passowrd);
  byte[] signedHash = _session.Sign(mechanism, GetPrivateKeyHandle(), message);
  _session.Logout();
  return signedHash;
}

private ObjectHandle GetPrivateKeyHandle()
{
  string keyLabel = _certificateInformation.KeyLabel;
  List<ObjectAttribute> searchTemplate = new List<ObjectAttribute>();
  searchTemplate.Add(new ObjectAttribute(CKA.CKA_CLASS, CKO.CKO_PRIVATE_KEY));
  searchTemplate.Add(new ObjectAttribute(CKA.CKA_LABEL, keyLabel));
  List<ObjectHandle> foundObjects = _session.FindAllObjects(searchTemplate);
  return foundObjects[0]; 
}


Please tell me if SoftHSM 2.2.0 supports ECDSA_P256 with SHA256 or not ?? 
If not, then is there any way to enable the support ?? 
If it does support, please help me how to fix this ??
It looks like it want me to pass ECDSA_Param, does anybody have any code snippet for passing the ECDSA_Param

","I think you need to construct ECDSA-Sig-Value structure and fill it with the data from your signedHash variable.
PKCS#11 v2.20 chapter 12.3.1:

For the purposes of these mechanisms, an ECDSA signature is an octet
  string of even length which is at most two times nLen octets, where
  nLen is the length in octets of the base point order n. The signature
  octets correspond to the concatenation of the ECDSA values r and s,
  both represented as an octet string of equal length of at most nLen
  with the most significant byte first. If r and s have different octet
  length, the shorter of both must be padded with leading zero octets
  such that both have the same octet length. Loosely spoken, the first
  half of the signature is r and the second half is s. For signatures
  created by a token, the resulting signature is always of length 2nLen.
  For signatures passed to a token for verification, the signature may
  have a shorter length but must be composed as specified before.

RFC5753 chapter 7.2:

When using ECDSA with SignedData, ECDSA signatures are encoded using
  the type:
ECDSA-Sig-Value ::= SEQUENCE {
    r INTEGER,
    s INTEGER }

ECDSA-Sig-Value is specified in [PKI-ALG].  Within CMS,
  ECDSA-Sig-Value is DER-encoded and placed within a signature field of
  SignedData.

Following method uses BouncyCastle library to constructs DER-encoded ECDSA-Sig-Value structure:
public static byte[] ConstructEcdsaSigValue(byte[] rs)
{
    if (rs == null)
        throw new ArgumentNullException(nameof(rs));

    if (rs.Length < 2 || rs.Length % 2 != 0)
        throw new ArgumentException(""Invalid length"", nameof(rs));

    int halfLen = rs.Length / 2;

    byte[] half1 = new byte[halfLen];
    Array.Copy(rs, 0, half1, 0, halfLen);
    var r = new Org.BouncyCastle.Math.BigInteger(1, half1);

    byte[] half2 = new byte[halfLen];
    Array.Copy(rs, halfLen, half2, 0, halfLen);
    var s = new Org.BouncyCastle.Math.BigInteger(1, half2);

    var derSequence = new Org.BouncyCastle.Asn1.DerSequence(
        new Org.BouncyCastle.Asn1.DerInteger(r),
        new Org.BouncyCastle.Asn1.DerInteger(s));

    return derSequence.GetDerEncoded();
}

","825","<c#><pkcs#11><ecdsa><softhsm><pkcs11interop>","3","2","2","2017-06-26 21:00:43","44018124","1","2","3325704","","2017-06-26 21:00:43","2017-05-16 19:28:42",""
"44010018","Signing PDF from Pkcs11Interop for CKM_ECDSA_SHA256 using SoftHSM 2.2.0 (ECDSA with SHA256) C# .net","I am trying to sign Pdf documents using Pkcs11Interop .net library.
I need to use ECDSA encryption algorithm with SHA256 hash algorithm.
And I am using SoftHSM 2.2.0 for storing private keys.
I found an CKM enum, CKM_ECDSA_SHA256, which I am passing while creating an object of class mechanism for calling the Sign method of Session.
I am getting the response from the ""Signdata"" method, however, on opening the Pdf files generated after signing give an error ""Signature Invalid"".
Here is the code snippet for Signdata method call. 
I don't get any error or exception in the code, however, the pdf as I have mentioned are showing signature invalid.
private Pkcs11 _pkcs11;
private Slot _slot;
private Session _session;

try
{
   _pkcs11 = new Pkcs11(hsmCryptoApi, true);
}
catch (Pkcs11Exception ex)
{
   if (ex.RV == CKR.CKR_CANT_LOCK)
      _pkcs11 = new Pkcs11(hsmCryptoApi, false);
   else
       throw ex;
}

_slot = FindSlot(_pkcs11, _certificateInformation.TokenLabel);
_session = _slot.OpenSession(true);

using (Mechanism mechanism = new Mechanism(CKM.CKM_ECDSA_SHA256))
{
  _session.Login(CKU.CKU_USER, passowrd);
  byte[] signedHash = _session.Sign(mechanism, GetPrivateKeyHandle(), message);
  _session.Logout();
  return signedHash;
}

private ObjectHandle GetPrivateKeyHandle()
{
  string keyLabel = _certificateInformation.KeyLabel;
  List<ObjectAttribute> searchTemplate = new List<ObjectAttribute>();
  searchTemplate.Add(new ObjectAttribute(CKA.CKA_CLASS, CKO.CKO_PRIVATE_KEY));
  searchTemplate.Add(new ObjectAttribute(CKA.CKA_LABEL, keyLabel));
  List<ObjectHandle> foundObjects = _session.FindAllObjects(searchTemplate);
  return foundObjects[0]; 
}


Please tell me if SoftHSM 2.2.0 supports ECDSA_P256 with SHA256 or not ?? 
If not, then is there any way to enable the support ?? 
If it does support, please help me how to fix this ??
It looks like it want me to pass ECDSA_Param, does anybody have any code snippet for passing the ECDSA_Param

","Just thought of sharing the solution which worked for me. In the above mentioned code snippet I added the below things:
   using (Mechanism mechanism = new Mechanism(CKM.CKM_ECDSA))
        {
          _session.Login(CKU.CKU_USER, passowrd);
          byte[] signedHash = _session.Sign(mechanism, GetPrivateKeyHandle(), GetMessageDigest(message));
          _session.Logout();
          return ConstructEcdsaSigValue(signedHash);
        }

    private byte[] GetMessageDigest(byte[] message)
    {
       using (Mechanism mechanism = new Mechanism(CKM_SHA256))
       {
         return _session.Digest(mechanism, message);
        }
    }

    public static byte[] ConstructEcdsaSigValue(byte[] rs)
    {
        if (rs == null)
            throw new ArgumentNullException(nameof(rs));

        if (rs.Length < 2 || rs.Length % 2 != 0)
            throw new ArgumentException(""Invalid length"", nameof(rs));

        int halfLen = rs.Length / 2;

        byte[] half1 = new byte[halfLen];
        Array.Copy(rs, 0, half1, 0, halfLen);
        var r = new Org.BouncyCastle.Math.BigInteger(1, half1);

        byte[] half2 = new byte[halfLen];
        Array.Copy(rs, halfLen, half2, 0, halfLen);
        var s = new Org.BouncyCastle.Math.BigInteger(1, half2);

        var derSequence = new Org.BouncyCastle.Asn1.DerSequence(
            new Org.BouncyCastle.Asn1.DerInteger(r),
            new Org.BouncyCastle.Asn1.DerInteger(s));

        return derSequence.GetDerEncoded();
    }

","825","<c#><pkcs#11><ecdsa><softhsm><pkcs11interop>","3","0","2","2017-06-26 21:00:43","44018124","1","2","3325704","","2017-06-26 21:00:43","2017-05-16 19:28:42",""
"23079100","j2pkcs11.dll 64-bit version","Here is my problem:
I want to use j2pkcs11.dll in my java application. I downloaded dll from here and move it to system32 directory. When I run my code I have got :
java.lang.UnsatisfiedLinkError: C:\Windows\System32\j2pkcs11.dll: Can't load IA 32-bit .dll on a AMD 64-bit platform

My OS is windows 7 64-bit and my jre is 64-bit too. Obviously I need to get 64-bit version of j2pkcs11.dll but when I searched the web I could not find it anywhere. Any clue?
","Ok, for those who may encounter this problem, it seems that there is no support for j2pkcs11 in jre-64bit. So I install 32-bit jre and select this jre as my runtime jre in Intellij.
","803","<java><dll><32bit-64bit><pkcs#11>","0","0","1","2015-05-13 16:00:10","23080184","0","","","","","2014-04-15 09:04:14",""
"8187674","Accessing Mozilla Certificates from Delphi","I would like to access certificates stored in Mozilla products (Firefox and Thunderbird) from a Delphi (XE) applicaiton. For start I would like to list them, next it would be nice to be able to manage them (import, export, delete) and use them (sign). The software token would be sufficient although using all tokens supported by mozilla would be great.
So far I tried using XPCOM with http://d-gecko.svn.sourceforge.net/viewvc/d-gecko/trunk/ delphi binding. However there is not much documentation around and I am kinda confused with all the terminology and concepts. The best I could manage was:
    var ns:nsIX509CertDB;
      servMgr:nsIServiceManager;
      p:Pchar;
    begin
      GRE_Startup;
      NS_GetServiceManager(servmgr);
      servMgr.GetServiceByContractID('@mozilla.org/security/x509certdb;1',NS_IX509CERTDB_IID,ns);
      ns.FindCertNicknames(nil,1,count,p);
      GRE_Shutdown;
    end;

Using this code I did get instance of certdb object and I was able to ask it for certificates. However it seems to be completely empty (count from FindCertNicknames is 0) and it also does not react on changing OCSP (IsOcspOn always returns true). I am thinking that I did either create new certstore or that I need to activate default user profile somehow.
I also tried accessing softokn.dll as a PKCS#11 library. As this seem to have some sort of PKCS#11 API, it is not responding well. I.e. CKR_BAD_ARGUMENTS on C_Inititialize.
The last and really bad way would be accessing certificate files directly as it should be ""standard"" NSS but I realy do not like this way.
","Our SecureBlackbox works with softtokn.dll via PKCS#11 and you can use interfaces provided by SecureBlackbox for handy certificate management. 
","794","<delphi><mozilla><x509certificate><xpcom><pkcs#11>","6","1","2","2011-11-19 03:11:41","8191590","0","1","","","","2011-11-18 18:59:54",""
"8187674","Accessing Mozilla Certificates from Delphi","I would like to access certificates stored in Mozilla products (Firefox and Thunderbird) from a Delphi (XE) applicaiton. For start I would like to list them, next it would be nice to be able to manage them (import, export, delete) and use them (sign). The software token would be sufficient although using all tokens supported by mozilla would be great.
So far I tried using XPCOM with http://d-gecko.svn.sourceforge.net/viewvc/d-gecko/trunk/ delphi binding. However there is not much documentation around and I am kinda confused with all the terminology and concepts. The best I could manage was:
    var ns:nsIX509CertDB;
      servMgr:nsIServiceManager;
      p:Pchar;
    begin
      GRE_Startup;
      NS_GetServiceManager(servmgr);
      servMgr.GetServiceByContractID('@mozilla.org/security/x509certdb;1',NS_IX509CERTDB_IID,ns);
      ns.FindCertNicknames(nil,1,count,p);
      GRE_Shutdown;
    end;

Using this code I did get instance of certdb object and I was able to ask it for certificates. However it seems to be completely empty (count from FindCertNicknames is 0) and it also does not react on changing OCSP (IsOcspOn always returns true). I am thinking that I did either create new certstore or that I need to activate default user profile somehow.
I also tried accessing softokn.dll as a PKCS#11 library. As this seem to have some sort of PKCS#11 API, it is not responding well. I.e. CKR_BAD_ARGUMENTS on C_Inititialize.
The last and really bad way would be accessing certificate files directly as it should be ""standard"" NSS but I realy do not like this way.
","I explored the PKCS#11 way a little more and I actually got it to do something. The softokn.dll library is ""almost"" standard PKCS#11 library, see https://developer.mozilla.org/en/PKCS11_Module_Specs . The key thing is that you need to initialize it with special arguments (the structure is described in the linked URL).
Its also handy to check the NSS erorr return values: see CKR_NETSCAPE_... at http://people.mozilla.com/~chofmann/l10n/tree/mozilla/security/nss/cmd/pk11mode/pk11mode.c .
The last key thing is that you need to specify the tokens by hand as the documentation is unclear about using secmod.db - there is a missing word, probably ""supported"", in ""The MOD DB function is not through standard PKCS #11 interfaces"". 
All this is rather low-level coding and will still need a lot of work so it may be better to use SecureBalackbox as suggested by Eugene if you are starting from scratch.
","794","<delphi><mozilla><x509certificate><xpcom><pkcs#11>","6","0","2","2011-11-19 03:11:41","8191590","0","1","","","","2011-11-18 18:59:54",""
"43203573","Multi-threaded Signature Generation C#","I am using PKCS11 Compliant Crypto Device which secures my Private Key. The Crypto Device is capable of generating 500 RSA-2048 Bit Signings per second. I have written an application in C#.NET interfaced with PKCS11Interop Wrapper. Here is my code:
#region Initialization 
Pkcs11 pkcs11 = new Pkcs11(pkcsLibraryPath, true);

Slot slot = pkcs11.GetSlotList(true)[slotIndex]; 

Session session = slot.OpenSession(false); 

session.Login(CKU.CKU_USER, hsmPIN); 

List<ObjectAttribute> searchObject = new List<ObjectAttribute>(2);

searchObject.Add(new ObjectAttribute(CKA.CKA_CLASS,(uint)CKO.CKO_PRIVATE_KEY));

searchObject.Add(new ObjectAttribute(CKA.CKA_LABEL, keyLabelName));

ObjectHandle privateKeyHandle = session.FindAllObjects(searchObject)[0];

byte[] dataToBeSigned = new byte[500];

byte[] signature = new byte[dataToBeSigned.Length];
#endregion Initialization 

#region SEQUENTIAL Signing Loop 
for(int i = 0; i<500;i++)
{

signature[i] = session.Sign(new Mechanism(CKM.CKM_SHA256_RSA_PKCS_PSS) , privateKeyHandle , dataToBeSigned[i]);

}
#endregion SEQUENTIAL Signing Loop 

#region UNMANAGED Parallel Loop 
Parallel.For(0, dataToBeSigned.Length, index =>
{

signature[index] = session.Sign(new Mechanism(CKM.CKM_SHA256_RSA_PKCS_PSS) , privateKeyHandle , dataToBeSigned[index]);

});
#endregion UNMANAGED Parallel Loop 

#region MANAGED Parallel Loop  
Parallel.For(0, dataToBeSigned.Length, index =>
{

lock(session)
{

signature[index] = session.Sign(new Mechanism(CKM.CKM_SHA256_RSA_PKCS_PSS) , privateKeyHandle , dataToBeSigned[index]);
}

});
#endregion MANAGED Parallel Loop  

Here you go!!

With the Sequential Signing Loop region, I can achieve just 250-280 Signings, but never the speed of 500signings as specified by my Crypto OEM. At least I need 440~480 signings per second. How can I achieve this using a Sequential 'for' loop? 
Why does my UNMANAGED Parallel loop throw an exception always? Even if I handle those exception, 40% of signings are getting failed (session.Sign() function returns null). Why is it so?
With ""MANAGED Parallel Loop"" code, I can achieve max speed of 280, as I got with Sequential Signing Loop. Why my MANAGED Parallel loop is slow? Is it because of 'lock'? If I remove the lock, it becomes UNMANAGED PARALLEL LOOP. How can I handle this? 
If you feel, my multithreading coding (and entire PKCS11 programming and operations) is wrong, please suggest me some method to achieve maximum speed. 
If you feel, there could be a problem with PCKS11Interop Wrapper which is not letting me to achieve the speed, please suggest some other wrappers. I used NCryptoki, Pkcs11.Net Wrappers, but I could not achieve max speed. 
I am 100% confident that my PKCS11 Compliant device is capable of generating 500Signings. I confirmed this with my OEM. Only, when I operate the device through programmatically (either C# or Java), my speed goes down. 

I request experts of this forum to clarify me on above 6 points.
Many Thanks.
Karthick
","You need to create new Session for each signing operation.
Please read ""Chapter 6 - General overview"" of PKCS#11 v2.20 specification. All basic concepts of PKCS#11 API (including thread/operation isolation provided by sessions) are explained there.
After you finish this mandatory reading, you can take a look at Pkcs11RsaSignature class in Pkcs11Interop.PDF project for a working code sample.
","793","<pkcs#11><pkcs11interop>","2","3","1","2017-06-26 21:01:59","","0","","3325704","","2017-06-26 21:01:59","2017-04-04 09:17:21",""
"28475263","Is there a way to extract a certificate from an etoken","Is there a way to extract a certificate from an etoken programmatically using java?
If so, can it be converted to a Java KeyStore(.jks) file?
This is my code
    String alias;
    SunPKCS11 sunpkcs11;
    Key privateKey;


    String cfgFile = ""D:\\cfgFile.cfg"";

    sunpkcs11 = new SunPKCS11(cfgFile);

    Security.addProvider(sunpkcs11);
    alias = ""myAlias"";
KeyStore.Builder builderRunning = KeyStore.Builder.newInstance(""PKCS11"", sunpkcs11,new KeyStore.CallbackHandlerProtection(new CallbackHandler() {
        public void handle(Callback[] callbacks) throws IOException, UnsupportedCallbackException {

          }}));

KeyStore keyStore = builder.getKeyStore();
        // get my private key

            KeyStore.PrivateKeyEntry pkEntry = (KeyStore.PrivateKeyEntry) keyStore.getEntry(alias,
                    new KeyStore.PasswordProtection(""password"".toCharArray()));
            privateKey = pkEntry.getPrivateKey();

It returns a null pointer Exception.
I am new to this and don't know how to proceed further.
","Do you need a certificate or a private key? Certificates are extractable, private keys in most cases are not. That's why you get an exception. 
","793","<java><jks><pkcs#11><e-token><x509securitytokenmanager>","0","0","1","2016-11-14 10:10:50","28498340","0","","3901974","","2015-02-13 04:31:38","2015-02-12 10:37:59",""
"15847070","include PKCS11 library in Java","I have PCKS11 dll and so files for my token.and i want to use [jacknji11][1] library.
my problem is how can i import the dll OR so files to my project.
i use System.loadLibrary(""parskey11""); to import my library but i get below Error :
Exception in thread ""main"" java.lang.UnsatisfiedLinkError: org.pkcs11.jacknji11.jna.JNANative.C_InitToken(Lcom/sun/jna/NativeLong;[BLcom/sun/jna/NativeLong;[B)I
at org.pkcs11.jacknji11.jna.JNANative.C_InitToken(Native Method)
at org.pkcs11.jacknji11.jna.JNA.C_InitToken(JNA.java:119)
at org.pkcs11.jacknji11.C.InitToken(C.java:235)
at org.pkcs11.jacknji11.CE.InitToken(CE.java:272)
at com.mmdt.Main.main(Main.java:13)

i just copy my libparskey11.so file to jni folder in project and use below code :
    private static final long INITSLOT = 0;

public static void main(String[] args) {

    CE.InitToken(INITSLOT, ""pincode"".getBytes(), ""TEST"".getBytes());
    long session = CE.OpenSession(INITSLOT, CKS.RW_PUBLIC_SESSION, null,
            null);
    CE.Login(session, CKU.SO, ""pincode"".getBytes());
    CE.InitPIN(session, ""pincode2"".getBytes());
    CE.Logout(session);
    CE.Login(session, CKU.USER, ""pincode"".getBytes());
    byte[] somenewpin = ""somenewpin"".getBytes();
    CE.SetPIN(session, ""pincode2"".getBytes(), somenewpin);
    CE.SetPIN(session, somenewpin, ""pincode2"".getBytes());

}

","","792","<java><dll><java-native-interface><pkcs#11>","0","","0","2013-04-06 04:41:05","","3","2","","","","2013-04-06 04:41:05",""
"27053407","Exception while file signing using HSM and SUNPKCS11","We are using the HSM(Hardware Security Module) for the signing and encryption from our java application. 
We have plugged the HSM to our JVM using the java.security property file using the following entry
security.provider.11=sun.security.pkcs11.SunPKCS11 D:/security/safenet.cfg

It was working fine all these days and suddenly we encountered a error as follows.
java.security.SignatureException: RSASignature::engineSign sun.security.pkcs11.P11Key$P11PrivateKey cannot be cast to java.security.interfaces.RSAPrivateKey

We did the enough searching on google but not able to identify the root cause. 
Appreciate any help
Thanks 
","We also encountered the same issue. Specify the provider name when getting the Signing instance. When code to sign using HSM is called, there may some other piece of code in your application adding another provider [Security.insertProvider] which implements the same signing algorithm.
When your sign, you pass a parameter of Private Key handler for PKCS11 but the provider is expecting different Key handler of RSA.
Resolution:
When you get the HSM signing instance, specify the Security provider along with the signing algorithm.
","789","<java><jce><pkcs#11><hsm>","0","1","1","2015-04-17 06:06:58","29691549","0","0","","","","2014-11-21 02:58:55",""
"32148768","Sign PDF in Webapp with PKCS #11","I need a way to sign a pdf document on a webapp using a private key stored on a Smart Card (PKCS#11). 
Until now this kind of problem was solved using a Java Applet, but as chrome phasing out Java this is not a viable solution.
I'm trying to use a pdf viewer plugin to do this (Adobe Acrobat DC should do the work), but I'm not finding anywhere on how to load the pdf and post the signed document.
The process should include loading the signature algorithm and enter the card's PIN.
Does anyone know how can I solve this?
","I have the same issue which I haven't found a holistic solution to the problem. There is a github project which host a chrome plugin for supporting signing to PDF documents. For Firefox and IE check here. In addition they have implemented an JS API which you can use.  
","789","<javascript><html5><pdf><pkcs#11>","2","1","1","2016-08-25 13:14:15","","0","1","","","","2015-08-21 20:27:22",""
"29270737","Reading and writing PKCS#11 objects","I'm trying to convert some PCSC code to PKCS#11 calls in C. In PCSC, to access an EF, I have to first select it, then read or write it. I'm looking at the PKCS#11 documentation, but I don't see corresponding object management functions. The closest seem to be C_GetAttributeValue and C_SetAttributeValue, but I'm not sure how to use them, even after looking at some example code. For example, how do I select the data object to access? Also, how do I set the template? Some example C code would be helpful.
Thanks!
Edit: After some research it seems to be that SelectFile() roughly maps to C_FindObjectsInit() and C_FindObjects(), which returns a CK_OBJECT_HANDLE, and ReadFile() roughly maps to C_GetAttributeValue(). I'm trying to use this model, but my first call to C_FindObjectsInit() returns CKR_ARGUMENTS_BAD. Here's my source:
unsigned char *tokenLabel;
CK_ATTRIBUTE labelTemplate[] = {
    {CKA_LABEL, NULL_PTR, 0}
};
tokenLabel = (unsigned char *) malloc(labelLen);
// Sets the tokenLabel here
labelTemplate[0].pValue = tokenLabel;
labelTemplate[0].ulValueLen = labelLen;
ret = C_FindObjectsInit(hSession, labelTemplate, 1);
if(ret != CKR_OK)
{
    return -1;
}

What am I doing wrong? I'm simply trying to find an object that matches a particular label.
","","784","<pkcs#11>","0","","0","2015-03-26 09:48:19","","3","","1118764","","2015-03-26 09:48:19","2015-03-26 03:43:39",""
"49049403","There is a log-in error using ""cryptoki.dll"" using the Pkcs11 library","    static Module pkcs11Module = Module.getInstance(@""C:\Program Files (x86)\SafeNet\Protect Toolkit 5\Protect Toolkit C SDK\bin\sw\cryptoki.dll"");
    public HsmManager()
    {
        try
        {              
            pkcs11Module.initialize(null);
            Slot[] terminals = pkcs11Module.getSlotList(true);
            Slot s;
            Token token = terminals[0].Token;
            Session session = token.openSession(false, false, null, null);
            char[] pass = new char[] { '1', '2', '3', '4' };
            session.login(true, pass);}}

I do the sealing process with the hsm device in c # with the pkcs11 library (without using any other library).
The error message is Message =""CKR_USER_PIN_NOT_INITIALIZED ""
What's wrong?
Thanks
","I don't know nothing about cryptoki, but I'll try to answer:
Take a look at PKCS#11 standard.
CKR_USER_PIN_NOT_INITIALIZED: 
This value can only be returned by C_Login. 
It indicates that the normal user’s PIN has not yet been initialized with C_InitPIN.
In other words, your token has no PIN.
Try to initialize the PIN or try sending a null PIN in login call (maybe ""there is some way for a user to be authenticated to the token without having the application send a PIN through the Cryptoki library"")
","781","<c#><.net><pkcs#11><hsm><cryptoki>","1","1","1","2018-03-02 11:40:18","","2","3","","","","2018-03-01 12:05:48",""
"36996292","How to suppress PIN Error Dialog from Keystore.load when Keystore is a USB cryptotoken","Hi I am using SUN PKCS11 implementation to perform operations with PKI certificates in USB cryptotokens
I created a provider object for the particular USB token and then call
Keystore ks =  KeyStore.getInstance(PKCS11_KEYSTORE_TYPE,prov);

Then I load it with 
keyStore.load(null, PIN.toCharArray())

PIN is the user entered PIN for the particular certificate
Now different cryptotokens behave differently when the load fails because of a Wrong PIN. Keystore::load throws an IOException when PIN is wrong however,
For eg.

Watchdata USB token first throws a dialog box with a message ""PIN is
wrong. X attempts left"" & then throws the IOException.
Gemalto & Fietian don't throw a dialog box but only throw an
IOException

I want to show an PIN error message for all USB types, but if I add my own dialog, then on WatchData I end up getting 2 dialogs (1 from Watchdata & 1 of my own).
Is there a way to figure out whether the error message has already been shown? Or alternately is there a way to suppress the error dialog on dongles which show their own?
","The behavior is token-specific because the standard doesn't specify, how exactly the drivers must behave. So showing the window is beyond your control. The best you can do is contact the vendor of the specific device and ask them for assistance. 
","778","<java><security><usb><pkcs#11>","7","2","2","2016-05-15 11:12:06","","6","","2293534","","2016-05-07 17:20:22","2016-05-03 05:30:44",""
"36996292","How to suppress PIN Error Dialog from Keystore.load when Keystore is a USB cryptotoken","Hi I am using SUN PKCS11 implementation to perform operations with PKI certificates in USB cryptotokens
I created a provider object for the particular USB token and then call
Keystore ks =  KeyStore.getInstance(PKCS11_KEYSTORE_TYPE,prov);

Then I load it with 
keyStore.load(null, PIN.toCharArray())

PIN is the user entered PIN for the particular certificate
Now different cryptotokens behave differently when the load fails because of a Wrong PIN. Keystore::load throws an IOException when PIN is wrong however,
For eg.

Watchdata USB token first throws a dialog box with a message ""PIN is
wrong. X attempts left"" & then throws the IOException.
Gemalto & Fietian don't throw a dialog box but only throw an
IOException

I want to show an PIN error message for all USB types, but if I add my own dialog, then on WatchData I end up getting 2 dialogs (1 from Watchdata & 1 of my own).
Is there a way to figure out whether the error message has already been shown? Or alternately is there a way to suppress the error dialog on dongles which show their own?
","EDIT:
Watchdata seems to have 2 PKCS#11 modules:

WDICP_P11_CCID_v34.dll: Vanilla PKCS#11 impl
WDPKCS.dll: PKCS#11 + custom functions (ICP CSP v1.0). And here is
what, obviously seems to be the configuation file:
C:\Windows\SysWOW64\WatchData\Watchdata ICP CSP v1.0\WatchSafe.ini

Possible solution to avoid the ""PIN Error Dialog"": switch from WDPKCS.dll to WDICP_P11_CCID_v34.dll
References:
ProxKey User Manual
and
WatchKey USB Token Tools

The error dialog you want to suppress, how does it look like? Native? or Java/Swing-like? 
There are many ""layers"" involved in the process.

LayersLet's break the process in 4 layers:1-PKCS#11(native); 2-Wrappers[IAIK, SUN, Vendors]; 3-Providers[IAIK, SUN]; 4-JCA/JCE
So your ""error-dialog"" is coming from one of these layers.
From Layer-1: you have less control and you can just contact the vendors, just like @Eugene wrote. 
From Layer-2 to Layer-4, your control increases, so you might do something about it, if you implement the right callbacks.
Providers and wrappers Sun:
-sun.security.pkcs11.SunPKCS11
-sun.security.pkcs11.wrapper
IAIK:
-iaik.pkcs.pkcs11.provider
-iaik.pkcs.pkcs11.wrapper
Control:With java.security.AuthProvider or iaik.pkcs.pkcs11.provider.DefaultLoginManager, you can probably take control, if it's from the provider. If it's not enough, try the wrappers or both.
Code tested:With java.security.AuthProvider, i still see the CKR_PIN_INCORRECT from the device, but now i can catch the LoginException from the login. 
public static void main(String[] args) {
    /*
        Properties config = new Properties();
        config.put(""library"", ""/path/someVendor_pkcs11.dll"");
        config.put(""name"", ""Token1"");
    */      
    try {

        SunPKCS11 result = new SunPKCS11(""res/pkcs11.cfg"");
        if (result.getService(""KeyStore"", ""PKCS11"") == null) {
            throw new RuntimeException(""No PKCS#11 Service available. Probably Security Token (Smartcard) not inserted"");
        }

        // Register the Provider 
        if (Security.getProvider(result.getName()) != null) {
            Security.removeProvider(result.getName());
        }

        Security.addProvider(result);
        //throw new RuntimeException(""Failed to install SUN PKCS#11 Provider"",e);

        AuthProvider pkcs11Prov = result; 
        //Provider pkcs11Prov = result; //no possibility of explicit login
        pkcs11Prov.login(new Subject(), new SwingPasswordCallbackHandler()); //explicit login

        CallbackHandlerProtection pwCallbackProt = new CallbackHandlerProtection( new SwingPasswordCallbackHandler() );         
        KeyStore.Builder builder = KeyStore.Builder.newInstance(""PKCS11"", pkcs11Prov, pwCallbackProt);
        KeyStore ks = builder.getKeyStore();        

        for(Enumeration<String> aliases = ks.aliases(); aliases.hasMoreElements(); ) {
            String alias = aliases.nextElement();
            System.out.println(alias);

            // print certifcate
            Certificate cert = ks.getCertificate(alias);
            if (cert != null) {
                System.out.print("" Certificate found. type=""+cert.getType());

                if (cert instanceof X509Certificate){
                    System.out.print("" SubjectDN=""+((X509Certificate)cert).getSubjectDN());
                }
                System.out.println();
            }

            // private key is accessed without password 
            Key pk = ks.getKey(alias, null);
            if (pk != null) {
                System.out.println("" Private key found. algorithm=""+pk.getAlgorithm());
            }

            System.out.println();
        }

    } catch (KeyStoreException e) {
        throw new RuntimeException(""Failed to load PKCS#11 Keystore"",e);            
    } catch (LoginException e) {
        System.out.println(""LoginException: Here, you can SWING!!!"");
        e.printStackTrace();
    } catch (UnrecoverableKeyException e) {
        e.printStackTrace();
    } catch (NoSuchAlgorithmException e) {
        e.printStackTrace();
    }
}


","778","<java><security><usb><pkcs#11>","7","1","2","2016-05-15 11:12:06","","6","","2293534","","2016-05-07 17:20:22","2016-05-03 05:30:44",""
"22347996","OpenSSL PKCS#11 signing multi process","I'm debugging a segmentation fault in a php module written by someone for an application (so changing the workflow and other time consuming operations are out of the question).
I have the following code:
...
...some code...
int marker=0;
ENGINE_load_dynamic();
ENGINE *e=ENGINE_by_id(""dynamic"");
if (e==NULL) return NULL;
...some more code to set some parameters using ENGINE_ctrl_cmd_string(...)
marker++; // gets about 10 or something
e=ENGINE_by_id(""pkcs11"");
if (e==NULL) return NULL;
Here comes the fun part - SIGSEGV:
marker++; //11
if (!ENGINE_init(e)){
std::cout<<""..error.."";
ENGINE_finish(e);
ENGINE_free(e);
ENGINE_cleanup();
return null;
}
...code using pkcs#11 token that does work....

The problem appears in a random manner, sort of. The snippet is part of a php module. The script is called from a PostgreSQL script which in turn is called by another php application residing on another server (don't blame me for this design, I'm here to debug). The SIGSEGV appears when I refresh the main php application page quickly, which I assume it calls the above scripts multiple times concurrently, therefore attempting to use the token from separate processes at the same time. 
Are my assumptions correct? can calls to ENGINE_init/finish/free from separate processes using the same token collide and cause a segmentation fault? 
The segmentation fault is captured using my handler that picks up the marker value and prints it before exit, it's the simplest method I could come up for sigsegv debug. If this method might yield wrong results I'd appreciate the notification.
Any thoughts?  
","There's a README.ENGINE that provides a discussion of engines. I'm not sure how useful it will be since it makes some tall claims. For example, ""... the source code is reasonably well self-documenting, but some summaries and usage instructions are needed"".
But here's something on the dynamic:

The new ""dynamic"" ENGINE provides a low-overhead way to support
  ENGINE   implementations that aren't pre-compiled and linked into
  OpenSSL-based   applications. This could be because existing
  compiled-in implementations   have known problems and you wish to use
  a newer version with an existing   application. It could equally be
  because the application (or OpenSSL   library) you are using simply
  doesn't have support for the ENGINE you   wish to use, and the ENGINE
  provider (eg. hardware vendor) is providing   you with a
  self-contained implementation in the form of a shared-library.   The
  other use-case for ""dynamic"" is with applications that wish to
  maintain the smallest foot-print possible and so do not link in
  various   ENGINE implementations from OpenSSL, but instead leaves you
  to provide   them, if you want them, in the form of ""dynamic""-loadable
  shared-libraries. It should be possible for hardware vendors to
  provide   their own shared-libraries to support arbitrary hardware to
  work with   applications based on OpenSSL 0.9.7 or later. If you're
  using an   application based on 0.9.7 (or later) and the support you
  desire is only   announced for versions later than the one you need,
  ask the vendor to   backport their ENGINE to the version you need.
How does ""dynamic"" work?
The dynamic ENGINE has a special flag in its implementation such that
every time application code asks for the 'dynamic' ENGINE, it in fact
gets its own copy of it. As such, multi-threaded code (or code that
multiplexes multiple uses of 'dynamic' in a single application in any
way at all) does not get confused by 'dynamic' being used to do many
independent things. Other ENGINEs typically don't do this so there is
only ever 1 ENGINE structure of its type (and reference counts are used
to keep order). The dynamic ENGINE itself provides absolutely no
cryptographic functionality, and any attempt to ""initialise"" the ENGINE
automatically fails. All it does provide are a few ""control commands""
that can be used to control how it will load an external ENGINE
implementation from a shared-library. To see these control commands,
use the command-line;

   openssl engine -vvvv dynamic

The ""SO_PATH"" control command should be used to identify the
shared-library that contains the ENGINE implementation, and ""NO_VCHECK""
might possibly be useful if there is a minor version conflict and you
(or a vendor helpdesk) is convinced you can safely ignore it.
""ID"" is probably only needed if a shared-library implements
multiple ENGINEs, but if you know the engine id you expect to be using,
it doesn't hurt to specify it (and this provides a sanity check if
nothing else). ""LIST_ADD"" is only required if you actually wish the
loaded ENGINE to be discoverable by application code later on using the
ENGINE's ""id"". For most applications, this isn't necessary - but some
application authors may have nifty reasons for using it. The ""LOAD""
command is the only one that takes no parameters and is the command
that uses the settings from any previous commands to actually *load*
the shared-library ENGINE implementation. If this command succeeds, the
(copy of the) 'dynamic' ENGINE will magically morph into the ENGINE
that has been loaded from the shared-library. As such, any control
commands supported by the loaded ENGINE could then be executed as per
normal. Eg. if ENGINE ""foo"" is implemented in the shared-library
""libfoo.so"" and it supports some special control command ""CMD_FOO"", the
following code would load and use it (NB: obviously this code has no
error checking);

   ENGINE *e = ENGINE_by_id(""dynamic"");
   ENGINE_ctrl_cmd_string(e, ""SO_PATH"", ""/lib/libfoo.so"", 0);
   ENGINE_ctrl_cmd_string(e, ""ID"", ""foo"", 0);
   ENGINE_ctrl_cmd_string(e, ""LOAD"", NULL, 0);
   ENGINE_ctrl_cmd_string(e, ""CMD_FOO"", ""some input data"", 0);

For testing, the ""openssl engine"" utility can be useful for this sort
of thing. For example the above code excerpt would achieve much the
same result as;

   openssl engine dynamic \
             -pre SO_PATH:/lib/libfoo.so \
             -pre ID:foo \
             -pre LOAD \
             -pre ""CMD_FOO:some input data""

Or to simply see the list of commands supported by the ""foo"" ENGINE;

   openssl engine -vvvv dynamic \
             -pre SO_PATH:/lib/libfoo.so \
             -pre ID:foo \
             -pre LOAD

Applications that support the ENGINE API and more specifically, the
""control commands"" mechanism, will provide some way for you to pass
such commands through to ENGINEs. As such, you would select ""dynamic""
as the ENGINE to use, and the parameters/commands you pass would
control the *actual* ENGINE used. Each command is actually a name-value
pair and the value can sometimes be omitted (eg. the ""LOAD"" command).
Whilst the syntax demonstrated in ""openssl engine"" uses a colon to
separate the command name from the value, applications may provide
their own syntax for making that separation (eg. a win32 registry
key-value pair may be used by some applications). The reason for the
""-pre"" syntax in the ""openssl engine"" utility is that some commands
might be issued to an ENGINE *after* it has been initialised for use.
Eg. if an ENGINE implementation requires a smart-card to be inserted
during initialisation (or a PIN to be typed, or whatever), there may be
a control command you can issue afterwards to ""forget"" the smart-card
so that additional initialisation is no longer possible. In
applications such as web-servers, where potentially volatile code may
run on the same host system, this may provide some arguable security
value. In such a case, the command would be passed to the ENGINE after
it has been initialised for use, and so the ""-post"" switch would be
used instead. Applications may provide a different syntax for
supporting this distinction, and some may simply not provide it at all
(""-pre"" is almost always what you're after, in reality).


","772","<c++><openssl><segmentation-fault><pkcs#11>","0","0","1","2014-03-12 22:21:21","","1","","","","","2014-03-12 10:05:49",""
"7953090","Renew security token on Java after failed try","I have developed code to check if a certain security token is found in the PC prior to a certain operation. The code I am using right now to get the keystore is:
    private KeyStore getKeyStore() {
            try {
                    KeyStore keyStore = KeyStore.getInstance(""PKCS11"",getProvider()); //$NON-NLS-1$
                    char [] pin = ""mypin"".toCharArray();
                    keyStore.load(null, pin);

                    return keyStore;
            } catch (Exception e) {
                    e.printStackTrace();
            } 
            return null;
    }

    private Provider getProvider() throws ClassNotFoundException, 
        NoSuchMethodException, SecurityException, InstantiationException,
        IllegalAccessException, IllegalArgumentException, InvocationTargetException {
        Class<?> lclass = ClassLoader.getSystemClassLoader().getParent().loadClass(""sun.security.pkcs11.SunPKCS11""); //$NON-NLS-1$
            @SuppressWarnings(""rawtypes"")
            Constructor constructor = lclass.getConstructor(String.class);
            return (Provider) constructor.newInstance(configName);
    }

If the security token (a USB smartcard) is present the first time the application tries to access the keystore, it runs smoothly without error; but when the smart card is not present the first time the applications tries to get the token, the KeyStore.getInstance raises this exception:
java.security.KeyStoreException: PKCS11 not found
at java.security.KeyStore.getInstance(Unknown Source)
at es.giro.girlabel.token.Token.getKeyStore(Token.java:120)
at es.giro.girlabel.token.Token.getCertificate(Token.java:156)
at es.giro.girlabel.token.Token.hasToken(Token.java:150)
at es.giro.girlabel.jobs.JobList.getInstance(JobList.java:73)
at es.giro.girlabel.editor.view.LabelListView$10.run(LabelListView.java:499)
at org.eclipse.jface.action.Action.runWithEvent(Action.java:498)
at org.eclipse.jface.action.ActionContributionItem.handleWidgetSelection(ActionContributionItem.java:584)
at org.eclipse.jface.action.ActionContributionItem.access$2(ActionContributionItem.java:501)
at org.eclipse.jface.action.ActionContributionItem$5.handleEvent(ActionContributionItem.java:411)
at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:84)
at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1053)
at org.eclipse.swt.widgets.Display.runDeferredEvents(Display.java:4066)
at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3657)
at org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:2640)
at org.eclipse.ui.internal.Workbench.runUI(Workbench.java:2604)
at org.eclipse.ui.internal.Workbench.access$4(Workbench.java:2438)
at org.eclipse.ui.internal.Workbench$7.run(Workbench.java:671)
at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)
at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:664)
at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:149)
at es.giro.girlabel.Application.start(Application.java:39)
at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:196)
at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:110)
at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:79)
at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:369)
at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:179)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
at java.lang.reflect.Method.invoke(Unknown Source)
at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:620)
at org.eclipse.equinox.launcher.Main.basicRun(Main.java:575)
at org.eclipse.equinox.launcher.Main.run(Main.java:1408)
at org.eclipse.equinox.launcher.Main.main(Main.java:1384)


Caused by: java.security.NoSuchAlgorithmException: no such algorithm: PKCS11 for provider       SunPKCS11-eToken
at sun.security.jca.GetInstance.getService(Unknown Source)
at sun.security.jca.GetInstance.getInstance(Unknown Source)
at java.security.Security.getImpl(Unknown Source)
... 35 more

After this first try, if I plug back the security token, and retry the operation, I get exactly the same error.
Is the SunPKCS11 class caching some data? If so, is there any way to clear this cache?
Thanks for your attention, and please forgive my spelling. English is not my native language.
EDIT:
The complete stack trace:
java.security.KeyStore.getInstance(Unknown Source)
es.giro.girlabel.token.Token.getKeyStore(Token.java:119)
es.giro.girlabel.token.Token.getCertificate(Token.java:160)
es.giro.girlabel.token.Token.hasToken(Token.java:154)
es.giro.girlabel.jobs.JobList.getInstance(JobList.java:73)
es.giro.girlabel.editor.view.LabelListView$10.run(LabelListView.java:499)
org.eclipse.jface.action.Action.runWithEvent(Action.java:498)
org.eclipse.jface.action.ActionContributionItem.handleWidgetSelection(ActionContributionItem.java:584)
org.eclipse.jface.action.ActionContributionItem.access$2(ActionContributionItem.java:501)
org.eclipse.jface.action.ActionContributionItem$5.handleEvent(ActionContributionItem.java:411)
org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:84)
org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1053)
org.eclipse.swt.widgets.Display.runDeferredEvents(Display.java:4066)
org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3657)
org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:2640)
org.eclipse.ui.internal.Workbench.runUI(Workbench.java:2604)
org.eclipse.ui.internal.Workbench.access$4(Workbench.java:2438)
org.eclipse.ui.internal.Workbench$7.run(Workbench.java:671)
org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)
org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:664)
org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:149)
es.giro.girlabel.Application.start(Application.java:39)
org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:196)
org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:110)
org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:79)
org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:369)
org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:179)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
java.lang.reflect.Method.invoke(Unknown Source)
org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:620)
org.eclipse.equinox.launcher.Main.basicRun(Main.java:575)
org.eclipse.equinox.launcher.Main.run(Main.java:1408)
org.eclipse.equinox.launcher.Main.main(Main.java:1384)

","","769","<java><security><token><keystore><pkcs#11>","1","","0","2011-10-31 16:04:58","","7","","20394","","2011-10-31 16:04:58","2011-10-31 11:30:28",""
"45051750","Pkcs11Interop CKR_ENCRYPTED_DATA_INVALID exception cause high CPU usage","We are using Pkcs11Interop library for cryptography and we customize&implement Pkcs11Interop code samples for our project where Pkcs11Interop documents in Github. In production, not everyday but we have to restart server after CPU usage reach maximum when we get a consecutive(4 or 5 times) CKR_ENCRYPTED_DATA_INVALID exception. What cause this ? How can we fix this problem ? Any ideas will be appreciated. If anyone want I can share our code sample. Thanks for helping.

2017-07-11 10:45:07,580 ERROR HSM | 11.07.2017 10:45:07 | HSM Decrypt
  error occured Net.Pkcs11Interop.Common.Pkcs11Exception: Method
  C_Decrypt returned CKR_ENCRYPTED_DATA_INVALID at
  Net.Pkcs11Interop.HighLevelAPI41.Session.Decrypt(Mechanism mechanism,
  ObjectHandle keyHandle, Byte[] encryptedData)    at
  Pkcs11HsmHost.DecryptInSession(Session session, String value, Int32 keyIndex, Int32 retryCount) in Security\Pkcs11HsmHost.cs:line 164

","You are most likely not using your PKCS#11 library correctly in miltithreaded environment. See this answer for more info.
","767","<c#><pkcs#11><hsm><pkcs11interop>","2","0","1","2018-05-21 13:58:26","","0","0","4869467","","2018-05-21 13:58:26","2017-07-12 07:58:40",""
"35977268","Java SSL client not selecting a smartcard key","I'm trying to use an Estonian ID card for SSL client authentication in a java program.  This works in Chrome/Firefox against both banking sites and test servers (nginx or openssl s_server).
However my Java client (okhttp) works fine for a local keystore and fails when trying to use the ID card.  I've boiled it down to this test case which reproduces the problem I see in a debugger and with logging (-Djavax.net.debug=ssl:handshake).
I can communicate with the card, e.g. I can print out the certificates for the same key. I'm piggybacking on the DigiDoc3 Client on Mac OSX.
I can see the exception that seems to cause the key to be ignored
sun.security.pkcs11.wrapper.PKCS11Exception: CKR_ATTRIBUTE_TYPE_INVALID
    at sun.security.pkcs11.wrapper.PKCS11.C_GetAttributeValue(Native Method)
    at sun.security.pkcs11.P11Key.getAttributes(P11Key.java:275)
    at sun.security.pkcs11.P11Key.privateKey(P11Key.java:330)
    at sun.security.pkcs11.P11KeyStore.loadPkey(P11KeyStore.java:1311)
    at sun.security.pkcs11.P11KeyStore.engineGetEntry(P11KeyStore.java:943)
    at java.security.KeyStore.getEntry(KeyStore.java:1521)
    at sun.security.ssl.X509KeyManagerImpl.getEntry(X509KeyManagerImpl.java:276)
    at sun.security.ssl.X509KeyManagerImpl.getCertificateChain(X509KeyManagerImpl.java:107)
    at com.baulsupp.oksocial.TestMain.main(TestMain.java:37)

Test program output
1.0.Authentication
ssl: KeyMgr: choosing key: Authentication (verified: OK)
null
null

Test code
package com.baulsupp.oksocial;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.security.KeyStore;
import java.security.KeyStoreException;
import java.security.NoSuchAlgorithmException;
import java.security.PrivateKey;
import java.security.Provider;
import java.security.Security;
import java.security.UnrecoverableKeyException;
import java.security.cert.Certificate;
import java.security.cert.CertificateException;
import java.security.cert.X509Certificate;
import java.util.Enumeration;
import java.util.Set;
import javax.net.ssl.KeyManager;
import javax.net.ssl.KeyManagerFactory;
import javax.net.ssl.X509ExtendedKeyManager;

public class TestMain {
  public static void main(String[] args)
      throws UnrecoverableKeyException, CertificateException, NoSuchAlgorithmException,
      KeyStoreException, IOException {
    System.setProperty(""javax.net.debug"", ""all"");

    char[] password =
        System.getenv().get(""PW"").toCharArray();//System.console().readPassword(""PW: "");

    X509ExtendedKeyManager km = (X509ExtendedKeyManager) getKeyManagers(password, 0)[0];

    String alias = km.chooseClientAlias(new String[] {""RSA""}, null, null);

    System.out.println(alias);

    X509Certificate[] chain = km.getCertificateChain(alias);
    System.out.println(chain);

    PrivateKey key = km.getPrivateKey(alias);
    System.out.println(key);
  }

  public static KeyManager[] getKeyManagers(char[] password, int slot)
      throws KeyStoreException, IOException, NoSuchAlgorithmException, CertificateException,
      UnrecoverableKeyException {
    //Security.removeProvider(""IAIK"");

    //Provider provider = new org.bouncycastle.jce.provider.BouncyCastleProvider();
    //Security.addProvider(provider);

    String config =
        ""name=OpenSC\nlibrary=/Applications/qdigidocclient.app/Contents/MacOS/esteid-pkcs11.so\nslotListIndex=""
            + slot;

    sun.security.pkcs11.SunPKCS11 pkcs11 =
        new sun.security.pkcs11.SunPKCS11(new ByteArrayInputStream(config.getBytes()));

    Security.addProvider(pkcs11);

    //debugProviders();

    KeyStore keystore = KeyStore.getInstance(""PKCS11"", pkcs11);

    keystore.load(null, password);

    //debugKeys(keystore);

    KeyManagerFactory kmf = KeyManagerFactory.getInstance(""NewSunX509"");
    kmf.init(keystore, null);

    return kmf.getKeyManagers();
  }

  public static void debugKeys(KeyStore keystore) throws KeyStoreException {
    Enumeration<String> aliases = keystore.aliases();

    while (aliases.hasMoreElements()) {
      String s = aliases.nextElement();

      Certificate k = keystore.getCertificate(s);

      System.out.println(k);
    }
  }

  public static void debugProviders() {
    Provider[] providers = Security.getProviders();
    for (Provider p : providers) {
      System.out.println(""\n\n"" + p.getName());
      Set<Provider.Service> services = p.getServices();

      for (Provider.Service s : services) {
        System.out.println(s.getType() + "" "" + s.getAlgorithm());
      }
    }
  }
}

In the mean time I've put in a support request as well.
","AFAIK the attributes only matter if you create objects in the PKCS#11 module, which is not the case with the smart card. Try to see with pkcs11-spy from OpenSC what kind of attributes are asked for and not implemented by the module.
Another option is to use the lower-layer PKCS#11 methods (C_*), which gives better control of PKCS#11 details.
","759","<java><ssl><pkcs#11>","2","1","2","2016-03-19 18:10:22","36105155","1","4","1542667","","2016-03-19 17:21:15","2016-03-13 23:34:27",""
"35977268","Java SSL client not selecting a smartcard key","I'm trying to use an Estonian ID card for SSL client authentication in a java program.  This works in Chrome/Firefox against both banking sites and test servers (nginx or openssl s_server).
However my Java client (okhttp) works fine for a local keystore and fails when trying to use the ID card.  I've boiled it down to this test case which reproduces the problem I see in a debugger and with logging (-Djavax.net.debug=ssl:handshake).
I can communicate with the card, e.g. I can print out the certificates for the same key. I'm piggybacking on the DigiDoc3 Client on Mac OSX.
I can see the exception that seems to cause the key to be ignored
sun.security.pkcs11.wrapper.PKCS11Exception: CKR_ATTRIBUTE_TYPE_INVALID
    at sun.security.pkcs11.wrapper.PKCS11.C_GetAttributeValue(Native Method)
    at sun.security.pkcs11.P11Key.getAttributes(P11Key.java:275)
    at sun.security.pkcs11.P11Key.privateKey(P11Key.java:330)
    at sun.security.pkcs11.P11KeyStore.loadPkey(P11KeyStore.java:1311)
    at sun.security.pkcs11.P11KeyStore.engineGetEntry(P11KeyStore.java:943)
    at java.security.KeyStore.getEntry(KeyStore.java:1521)
    at sun.security.ssl.X509KeyManagerImpl.getEntry(X509KeyManagerImpl.java:276)
    at sun.security.ssl.X509KeyManagerImpl.getCertificateChain(X509KeyManagerImpl.java:107)
    at com.baulsupp.oksocial.TestMain.main(TestMain.java:37)

Test program output
1.0.Authentication
ssl: KeyMgr: choosing key: Authentication (verified: OK)
null
null

Test code
package com.baulsupp.oksocial;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.security.KeyStore;
import java.security.KeyStoreException;
import java.security.NoSuchAlgorithmException;
import java.security.PrivateKey;
import java.security.Provider;
import java.security.Security;
import java.security.UnrecoverableKeyException;
import java.security.cert.Certificate;
import java.security.cert.CertificateException;
import java.security.cert.X509Certificate;
import java.util.Enumeration;
import java.util.Set;
import javax.net.ssl.KeyManager;
import javax.net.ssl.KeyManagerFactory;
import javax.net.ssl.X509ExtendedKeyManager;

public class TestMain {
  public static void main(String[] args)
      throws UnrecoverableKeyException, CertificateException, NoSuchAlgorithmException,
      KeyStoreException, IOException {
    System.setProperty(""javax.net.debug"", ""all"");

    char[] password =
        System.getenv().get(""PW"").toCharArray();//System.console().readPassword(""PW: "");

    X509ExtendedKeyManager km = (X509ExtendedKeyManager) getKeyManagers(password, 0)[0];

    String alias = km.chooseClientAlias(new String[] {""RSA""}, null, null);

    System.out.println(alias);

    X509Certificate[] chain = km.getCertificateChain(alias);
    System.out.println(chain);

    PrivateKey key = km.getPrivateKey(alias);
    System.out.println(key);
  }

  public static KeyManager[] getKeyManagers(char[] password, int slot)
      throws KeyStoreException, IOException, NoSuchAlgorithmException, CertificateException,
      UnrecoverableKeyException {
    //Security.removeProvider(""IAIK"");

    //Provider provider = new org.bouncycastle.jce.provider.BouncyCastleProvider();
    //Security.addProvider(provider);

    String config =
        ""name=OpenSC\nlibrary=/Applications/qdigidocclient.app/Contents/MacOS/esteid-pkcs11.so\nslotListIndex=""
            + slot;

    sun.security.pkcs11.SunPKCS11 pkcs11 =
        new sun.security.pkcs11.SunPKCS11(new ByteArrayInputStream(config.getBytes()));

    Security.addProvider(pkcs11);

    //debugProviders();

    KeyStore keystore = KeyStore.getInstance(""PKCS11"", pkcs11);

    keystore.load(null, password);

    //debugKeys(keystore);

    KeyManagerFactory kmf = KeyManagerFactory.getInstance(""NewSunX509"");
    kmf.init(keystore, null);

    return kmf.getKeyManagers();
  }

  public static void debugKeys(KeyStore keystore) throws KeyStoreException {
    Enumeration<String> aliases = keystore.aliases();

    while (aliases.hasMoreElements()) {
      String s = aliases.nextElement();

      Certificate k = keystore.getCertificate(s);

      System.out.println(k);
    }
  }

  public static void debugProviders() {
    Provider[] providers = Security.getProviders();
    for (Provider p : providers) {
      System.out.println(""\n\n"" + p.getName());
      Set<Provider.Service> services = p.getServices();

      for (Provider.Service s : services) {
        System.out.println(s.getType() + "" "" + s.getAlgorithm());
      }
    }
  }
}

In the mean time I've put in a support request as well.
","Based solely on Martin's answer, building https://github.com/OpenSC/OpenSC from source and installing OpenSC-0.15.0.dmg gave an alternative driver that worked first time. I didn't use the pkcs11-spy because it just worked first time.
String config =
    ""name=OpenSC\n"" +
        ""library=/Library/OpenSC/lib/opensc-pkcs11.so\n"";

I was able to test against openssl
$ openssl s_server -verify 20 -key key.pem -cert cert.pem -accept 44330   -no_ssl3 -dhparam dhparam.pem -www 

Which responded with
---
Client certificate
Certificate:
    Data:
        Version: 3 (0x2)
        Serial Number:
            xxxxxxxxx
        Signature Algorithm: sha256WithRSAEncryption
        Issuer: C=EE, O=AS Sertifitseerimiskeskus, CN=ESTEID-SK 2011/emailAddress=pki@sk.ee
        Validity
            Not Before: Jul 15 09:51:27 20xx GMT
            Not After : Jul 13 20:59:59 20xx GMT
        Subject: C=EE, O=ESTEID, OU=authentication, CN=SCHIMKE,YURI,xxxxxxxx, SN=SCHIMKE, GN=YURI/serialNumber=xxxxxxxx

","759","<java><ssl><pkcs#11>","2","0","2","2016-03-19 18:10:22","36105155","1","4","1542667","","2016-03-19 17:21:15","2016-03-13 23:34:27",""
"27070131","Opensc in android","Softwares(such as Mozilla Firefox, Thunderbird) can load opensc module(opensc-pkcs11.so on linux and opensc-pkcs11.dll on windows)and use all smart cards supported by OpenSC for authentication, signing and decryption. My question is how can we do the same thing in android(where to store opensc module, how to access an external token etc.). For example how can an application use opensc module to access a smartcard token with nfc and/or bluetooth interface.
I dont like to flash my android like in seek for android. 
I request for any suggestions or examples. Thanks in advance.
","","753","<android><smartcard><android-bluetooth><pkcs#11><opensc>","4","","0","2014-11-21 20:56:44","","1","3","4280039","","2014-11-21 20:56:44","2014-11-21 20:51:01",""
"41958819","Signing document with qualified certificate - smart card","Code below works correctly for 2 different cryptografic smart-card libraries (certum cryptoCertum3PKCS.dll and cencert enigmap11.dll ), but it's crashing for kir(szafir) lib - ccpkip11.dll, after providing pin, which is for 100% correct
Anyone has an idea what I'm doing wrong?  
  KeyingDataProvider kp = new PKCS11KeyStoreKeyingDataProvider(
                settings.getDriverPath(),
                settings.getProviderName(),
                settings.getSlot(),
                new CertificateSelector(),
                new KeyStorePasswordProvider(), null, false); 

        Document src = getDocumentBuilder().parse(new File(filename));
        Document dest = getDocumentBuilder().newDocument();
        Node objContent = dest.importNode(src.getDocumentElement(), true);

        XadesSigner signer = new XadesBesSigningProfile(kp).newSigner();

        DataObjectDesc obj = new EnvelopedXmlObject(objContent, ""text/xml"", null);
        signer.sign(new SignedDataObjects(obj), dest);

        Transformer transformer = TransformerFactory.newInstance().newTransformer();
        Result output = new StreamResult(new File(signed));
        Source input = new DOMSource(dest);

        transformer.transform(input, output);

I have CKR_PIN_LEN_RANGE error at line signer.sign(new SignedDataObjects(obj), dest);
full stacktrace:
 xades4j.verification.UnexpectedJCAException: The keystore couldn't be initialized
        at xades4j.providers.impl.KeyStoreKeyingDataProvider.ensureInitialized(KeyStoreKeyingDataProvider.java:179)
        at xades4j.providers.impl.KeyStoreKeyingDataProvider.getSigningCertificateChain(KeyStoreKeyingDataProvider.java:189)
        at xades4j.production.SignerBES.sign(SignerBES.java:151)
        at xades4j.production.SignerBES.sign(SignerBES.java:122)
        at com.riv.jpk.security.XadesHelper.sign(XadesHelper.java:127)
        at com.riv.jpk.RaportGenerators.BaseGen.signXml(BaseGen.java:192)
        at com.riv.jpk.ui.views.GenerateJPK.JpkGeneratorVM.signXml(JpkGeneratorVM.java:417)
        at com.riv.jpk.ui.views.GenerateJPK.JpkGeneratorVM.lambda$validateMetaXML$44(JpkGeneratorVM.java:403)
        at com.riv.jpk.ui.views.GenerateJPK.JpkGeneratorVM$$Lambda$361/32216595.handle(Unknown Source)
        at com.sun.javafx.event.CompositeEventHandler$NormalEventHandlerRecord.handleBubblingEvent(CompositeEventHandler.java:218)
        at com.sun.javafx.event.CompositeEventHandler.dispatchBubblingEvent(CompositeEventHandler.java:80)
        at com.sun.javafx.event.EventHandlerManager.dispatchBubblingEvent(EventHandlerManager.java:238)
        at com.sun.javafx.event.EventHandlerManager.dispatchBubblingEvent(EventHandlerManager.java:191)
        at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:58)
        at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114)
        at com.sun.javafx.event.EventUtil.fireEventImpl(EventUtil.java:74)
        at com.sun.javafx.event.EventUtil.fireEvent(EventUtil.java:54)
        at javafx.event.Event.fireEvent(Event.java:198)
        at javafx.concurrent.EventHelper.fireEvent(EventHelper.java:219)
        at javafx.concurrent.Task.fireEvent(Task.java:1356)
        at javafx.concurrent.Task.setState(Task.java:723)
        at javafx.concurrent.Task$TaskCallable.lambda$call$496(Task.java:1434)
        at javafx.concurrent.Task$TaskCallable$$Lambda$347/3131345.run(Unknown Source)
        at com.sun.javafx.application.PlatformImpl.lambda$null$170(PlatformImpl.java:295)
        at com.sun.javafx.application.PlatformImpl$$Lambda$51/6271097.run(Unknown Source)
        at java.security.AccessController.doPrivileged(Native Method)
        at com.sun.javafx.application.PlatformImpl.lambda$runLater$171(PlatformImpl.java:294)
        at com.sun.javafx.application.PlatformImpl$$Lambda$49/19468568.run(Unknown Source)
        at com.sun.glass.ui.InvokeLaterDispatcher$Future.run(InvokeLaterDispatcher.java:95)
        at com.sun.glass.ui.win.WinApplication._runLoop(Native Method)
        at com.sun.glass.ui.win.WinApplication.lambda$null$145(WinApplication.java:101)
        at com.sun.glass.ui.win.WinApplication$$Lambda$39/443957.run(Unknown Source)
        at java.lang.Thread.run(Thread.java:745) Caused by: java.security.KeyStoreException: KeyStore instantiation failed
        at java.security.KeyStore$Builder$2.getKeyStore(KeyStore.java:1967)
        at xades4j.providers.impl.KeyStoreKeyingDataProvider.ensureInitialized(KeyStoreKeyingDataProvider.java:175)
        ... 32 more 
Caused by: java.io.IOException: load failed
        at sun.security.pkcs11.P11KeyStore.engineLoad(P11KeyStore.java:843)
        at java.security.KeyStore.load(KeyStore.java:1479)
        at java.security.KeyStore$Builder$2$1.run(KeyStore.java:1937)
        at java.security.KeyStore$Builder$2$1.run(KeyStore.java:1918)
        at java.security.AccessController.doPrivileged(Native Method)
        at java.security.KeyStore$Builder$2.getKeyStore(KeyStore.java:1964)
        ... 33 more
Caused by: javax.security.auth.login.LoginException
        at sun.security.pkcs11.SunPKCS11.login(SunPKCS11.java:1238)
        at sun.security.pkcs11.P11KeyStore.login(P11KeyStore.java:849)
        at sun.security.pkcs11.P11KeyStore.engineLoad(P11KeyStore.java:834)
        ... 38 more
Caused by: sun.security.pkcs11.wrapper.PKCS11Exception: CKR_PIN_LEN_RANGE
        at sun.security.pkcs11.wrapper.PKCS11.C_Login(Native Method)
        at sun.security.pkcs11.SunPKCS11.login(SunPKCS11.java:1222)
        ... 40 more

","I've found it! Solution was to run C_GetSlotList before creating KeyingDataProvider.
PKCS11 p11 = PKCS11.getInstance(settings.getDriverPath(), ""C_GetFunctionList"", null, false);
long[] slots = p11.C_GetSlotList(true);

I'm not sure what was the case. In this smart card, qualified certificate was on slot 3, and it looks like java pksc#11 implementation has a problem to get this slot before running C_GetSlotList.
","752","<java><smartcard><pkcs#11><xades4j>","0","2","1","2017-02-03 12:22:56","42024240","0","","1694387","","2017-01-31 22:32:02","2017-01-31 13:27:01",""
"49008004","Extractig public key value via PKCS#11","I am using Pkcs11 library to retreive key from device:

I am able to retreive ObjectHandle of public key. I try to extract public key value:
var publicKeyHandle = GetPublicKeyByLabel(Session, ""KEY1_QAL_PUB"");
var objectAttribute = Session.GetAttributeValue(publicKeyHandle, new List<CKA> { CKA.CKA_VALUE }).Single();
var keyVal =  objectAttribute.GetValueAsByteArray();

Unfortunately, objectAttribute has CannotBeRead set to true and value cannot be read. Even when I am  logged as user or SO.
I understand the case, when the key is private - due to security reasons I cannot get value outside HSM device. But why I cannot extract public key value?
","CKA_VALUE is not a valid attribute for RSA public key objects. If you want to extract RSA public key value then you need to read CKA_PUBLIC_EXPONENT and CKA_MODULUS attributes. See PKCS#11 v2.20 for more details.
","750","<c#><pkcs#11><pkcs11interop><softhsm>","3","3","1","2018-02-27 16:48:38","49013840","0","0","5417374","","2018-02-27 12:01:59","2018-02-27 11:50:02",""
"39410475","PDF Signing With Pkcs11Interop","I try to use Pkcs11Interop library for our institutional project. But problem is, when i try to get value from token card, ""attempted to read or write protected memory. This is often an indication that other memory is corrupt"" error is getting from Pkcs11Interop. I couldn't find any solution. Please help me, thank you in advance.
Project is windows form application which is written with .Net Framework 4.5
Error: system.accessviolationexception {""Attempted to read or write protected memory. This is often an indication that other memory is corrupt.""}
Error Stack Trace: 
 at Net.Pkcs11Interop.HighLevelAPI40.Session.GetAttributeValue(ObjectHandle objectHandle, List`1 attributes)
   at Net.Pkcs11Interop.HighLevelAPI40.Session.GetAttributeValue(ObjectHandle objectHandle, List`1 attributes)
   at EFinImza.Program.Main() in c:\HttpRoot\EFinImza\EFinImza\Program.cs:line 56
   at System.AppDomain._nExecuteAssembly(RuntimeAssembly assembly, String[] args)
   at Microsoft.VisualStudio.HostingProcess.HostProc.RunUsersAssembly()
   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)
   at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)
   at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state)
   at System.Threading.ThreadHelper.ThreadStart()

Code is like this:
static void Main()
    {
        try
        {
            string pkcs11Library = @""C:\Windows\System32\akisp11.dll"";
            using (var pkcs11 = new Net.Pkcs11Interop.HighLevelAPI40.Pkcs11(pkcs11Library, false, false))
            {
                LibraryInfo info = pkcs11.GetInfo();
                foreach (Slot slot in pkcs11.GetSlotList(false))
                {
                    SlotInfo slotInfo = slot.GetSlotInfo();
                    if (slotInfo.SlotFlags.TokenPresent)
                    {
                        TokenInfo tokenInfo = slot.GetTokenInfo();

                        Session session = slot.OpenSession(false);
                        String pin = ""*****"";
                        session.Login(CKU.CKU_USER, pin);

                        // get all objects using empty ObjectAttributes list
                        List<ObjectHandle> handles = session.FindAllObjects(new List<ObjectAttribute>());
                        List<CKA> attrs = new List<CKA>();
                        attrs.Add(CKA.CKA_LABEL);

                        foreach (ObjectHandle handle in handles)
                        {
                            List<ObjectAttribute> oAttrs = session.GetAttributeValue(handle, attrs);   **//Error is getting here**
                        }

                        session.CloseSession();
                    }
                }

                pkcs11.Dispose();
            }

            Application.EnableVisualStyles();
            Application.SetCompatibleTextRenderingDefault(false);
        }
        catch (Exception ex)
        {
            throw ex;
        }

    }

","As recommended in official documentation before you start using Pkcs11Interop you should get familiar at least with ""Chapter 2 - Scope"", ""Chapter 6 - General overview"" and ""Chapter 10 - Objects"" of PKCS#11 v2.20 specification.
Your code is first finding all objects regardless of their type (keys, certificates etc.) and then tries to read CKA_VALUE attribute of each individual object. CKA_VALUE is not valid attribute for all object types and I guess this might be causing your problems. Of course well behaving unmanaged PKCS#11 library would return CKR_ATTRIBUTE_TYPE_INVALID error instead of segfaulting but there are many poor quality PKCS#11 libraries out there that do not handle such corner cases well.
I recommend you to first read mentioned chapters of specification and then change the search template passed to FindAllObjects() method to search only for specific object types you are really interested in.
","737","<c#><pdf><digital-signature><pkcs#11><pkcs11interop>","0","0","1","2017-06-29 19:46:24","","0","","3325704","","2017-06-29 19:46:24","2016-09-09 11:23:36",""
"20690368","Scope of session objects in PKCS#11","Assume we have 2 tokens: T1 and T2. S1 - session open with T1, S2 - session open with T2. All sessions logged in as user. S1 creates session object O1.
Can we access session object O1 via S2? That is can we access the session object created by session linked to different token then the token operating session linked to?

The question has raised from following place in cryptoki document: ""...That is, if a single application has multiple sessions open with a token, and it uses one of
them to create a session object, then that session object is visible through any of THAT
application’s sessions..."" THAT == multiple sessions open with a token ?
","I don' think you can access O1 (object that resides inside Token1) via S2 (session open with Token2).
For instance, let's assume an application connects to 2 different tokens and then creates 2 objects:

An AES encryption key on Token 1
A wrappable RSA private key on Token 2

Then, the application commands (on either session) to have the RSA key wrapped by AES key.
That's hardly possible because the two tokens are not aware of each other at all and won't allow that operation.
","733","<pkcs#11>","1","1","1","2013-12-20 11:18:46","","1","","1544015","","2013-12-19 20:02:23","2013-12-19 19:46:09",""
"47392882","Pkcs#11 Session.encrypt CKR_OPERATION_NOT_INITIALIZED using NCryptoki","I'm using Pkcs#11 with the NCryptoki dll to use our HSM and manage the keys.
Why is this code giving me, sometimes, the error 145 (CKR_OPERATION_NOT_INITIALIZED)? I'm trying to avoid it, but I am still missing something... This error happens randomly when calling the session.Encrypt().
static public byte[] Crypto(Key key, byte[] input, bool encrypt, Mechanism mech, string command)
{
    //Session session = openSession();
    var tupla = openSessionTupla();
    var session = tupla.Item1;
    try
    {

        Utility.Logger(""Crypto encrypt "" + encrypt.ToSafeString() + "" mech "" + mech.ToSafeString(), command);

        if (encrypt)
        {
            session.EncryptInit(mech, key);
            byte[] enc = session.Encrypt(input);
            session.EncryptFinal();
            session.Logout();
            session.Close();
            tupla.Item2.Finalize(IntPtr.Zero);
            return enc;
        }
        else
        {
            session.DecryptInit(mech, key);
            byte[] decriptata = session.Decrypt(input);
            session.DecryptFinal();
            session.Logout();
            session.Close();
            tupla.Item2.Finalize(IntPtr.Zero);
            return decriptata;
        }
    }
    catch (Exception e)
    {
        session.Logout();
        session.Close();
        tupla.Item2.Finalize(IntPtr.Zero);
        Utility.Logger(""Crypto "" + e.ToSafeString(), command);
        return null;
    }

}

Where openSessionTupla is
public static Tuple<Session, Cryptoki> openSessionTupla()
{
    Cryptoki.Licensee = Settings.LICENSEE;
    Cryptoki.ProductKey = Settings.PRODUCTKEY;
    Cryptoki cryptoki = new Cryptoki(Settings.PATH);
    //Console.WriteLine(Settings.PATH);
    //Console.WriteLine(Settings.SessionKey);
    cryptoki.Initialize();
    SlotList slots = cryptoki.Slots;
    if (slots.Count == 0)
    {
        //Console.WriteLine(""No slot available"");
        return null;
    }
    // Gets the first slot available
    Slot slot = slots[0];
    if (!slot.IsTokenPresent)
    {
        //Console.WriteLine(""No token inserted in the slot: "" + slots[0].Info.Description);
        return null;
    }
    Token token = slot.Token;
    var flags = token.Info.Flags;
    //token.Info.Flags = 1609;
    Session session = token.OpenSession(Session.CKF_SERIAL_SESSION | Session.CKF_RW_SESSION,
                            null,
                            null);

    int nRes = session.Login(Session.CKU_USER, Settings.SessionKey);

    return new Tuple<Session, Cryptoki>(session, cryptoki);
}

","Maybe the call to session.EncryptInit(mech, key) returns an error.
this is why the subsequent call to Encrypt returns CKR_OPERATION_NOT_INITIALIZED
You should write:
long nRes = session.EncryptInit(mech, key);
if(nRer != 0) {
// manage the error
}
else {
    byte[] enc = session.Encrypt(input);
    session.EncryptFinal();
}

","732","<encryption><pkcs#11><hsm><ncryptoki><cryptoki>","0","0","1","2018-10-03 11:52:51","","10","","","","","2017-11-20 13:12:14",""
"21721231","JavaFX Application : cannot find SunPKCS11 class","I am developing a JavaFX application used to sign pdf using eToken Pro. The sign methods run perfectly in a normal Java project. While when run in the JavaFX application, it keeps encountering exceptions like this:
Exception in Application start method
java.lang.reflect.InvocationTargetException
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    at java.lang.reflect.Method.invoke(Method.java:606)
    at com.javafx.main.Main.launchApp(Main.java:698)
    at com.javafx.main.Main.main(Main.java:871)
Caused by: java.lang.RuntimeException: Exception in Application start method
    at com.sun.javafx.application.LauncherImpl.launchApplication1(LauncherImpl.java:403)
    at com.sun.javafx.application.LauncherImpl.access$000(LauncherImpl.java:47)
    at com.sun.javafx.application.LauncherImpl$1.run(LauncherImpl.java:115)
    at java.lang.Thread.run(Thread.java:744)
Caused by: java.lang.NoClassDefFoundError: sun/security/pkcs11/SunPKCS11
    at javafxapplication3.JavaFXApplication3.start(JavaFXApplication3.java:21)
    at com.sun.javafx.application.LauncherImpl$5.run(LauncherImpl.java:319)
    at com.sun.javafx.application.PlatformImpl$5.run(PlatformImpl.java:216)
    at com.sun.javafx.application.PlatformImpl$4$1.run(PlatformImpl.java:179)
    at com.sun.javafx.application.PlatformImpl$4$1.run(PlatformImpl.java:176)
    at java.security.AccessController.doPrivileged(Native Method)
    at com.sun.javafx.application.PlatformImpl$4.run(PlatformImpl.java:176)
    at com.sun.glass.ui.InvokeLaterDispatcher$Future.run(InvokeLaterDispatcher.java:76)
    at com.sun.glass.ui.win.WinApplication._runLoop(Native Method)
    at com.sun.glass.ui.win.WinApplication.access$100(WinApplication.java:17)
    at com.sun.glass.ui.win.WinApplication$3$1.run(WinApplication.java:67)
    ... 1 more
Caused by: java.lang.ClassNotFoundException: sun.security.pkcs11.SunPKCS11
    at java.net.URLClassLoader$1.run(URLClassLoader.java:366)
    at java.net.URLClassLoader$1.run(URLClassLoader.java:355)
    at java.security.AccessController.doPrivileged(Native Method)
    at java.net.URLClassLoader.findClass(URLClassLoader.java:354)
    at java.lang.ClassLoader.loadClass(ClassLoader.java:425)
    at java.lang.ClassLoader.loadClass(ClassLoader.java:358)
    ... 12 more
Java Result: 1

the codes I used to sign pdf are as follows:
@Override
    public void start(Stage primaryStage) {
        Signer signer = new Signer(new File(""C:/Users/Adam/Desktop/pdf/hello.pdf""));
        signer.signWithToken(true);
    }

the codes of class Signer are as follows:
public class Signer {

// define the file to be signed
private final File file;
private static String smartcardDllPath;
private static int level;
private static String reason;
private static String src;
private static String dest;
private static String location;
private static Collection<CrlClient> crlList;
private static OcspClient ocspClient;
private static TSAClient tsaClient;
private static final String DLL = ""C:/Windows/System32/eTPKCS11.dll"";

public Signer(File theFile) {
    location = ""HK SAR"";
    smartcardDllPath = null;
    file = theFile;
}


public void signWithToken(boolean certified) {
    try {
        String config = ""name=eToken\nlibrary="" + DLL + ""\nslotListIndex="" + getSlotsWithTokens(DLL)[0];
        ByteArrayInputStream bais = new ByteArrayInputStream(config.getBytes());
        Provider providerPKCS11 = new SunPKCS11(bais);
        Security.addProvider(providerPKCS11);
        configureParameters(certified);

        // create PdfSignatureAppearance
        PdfSignatureAppearance appearance = getPdfSigAppearance();
        // configure the keystore, alias, private key and certificate chain
        char[] pin = ""love4Sakura"".toCharArray();
        KeyStore ks = KeyStore.getInstance(""PKCS11"");
        ks.load(null, pin);
        String alias = (String) ks.aliases().nextElement();
        PrivateKey pk = (PrivateKey) ks.getKey(alias, null);
        Certificate[] chain = ks.getCertificateChain(alias);

        printChainInfo(chain);
        // configure the CRL, OCSP and TSA
        configCrlOcspTsa(chain);
        // create the signature
        ExternalSignature pks = new PrivateKeySignature(pk, DigestAlgorithms.SHA256, ""SunPKCS11-eToken"");
        ExternalDigest digest = new BouncyCastleDigest();
        MakeSignature.signDetached(appearance, digest, pks, chain, crlList, ocspClient,
                tsaClient, 0, MakeSignature.CryptoStandard.CMS);

    } catch (IOException | DocumentException | GeneralSecurityException ex) {
        Logger.getLogger(Signer.class.getName()).log(Level.SEVERE, null, ex);
    }
}

private static long[] getSlotsWithTokens(String libraryPath) {
    CK_C_INITIALIZE_ARGS initArgs = new CK_C_INITIALIZE_ARGS();
    String functionList = ""C_GetFunctionList"";
    initArgs.flags = 0;
    PKCS11 tmpPKCS11 = null;
    long[] slotList = null;
    try {
        try {
            tmpPKCS11 = PKCS11.getInstance(libraryPath, functionList, initArgs, false);
            System.out.println(tmpPKCS11.toString());
        } catch (IOException ex) {
            try {
                throw ex;
            } catch (IOException ex1) {
                Logger.getLogger(Signer.class.getName()).log(Level.SEVERE, null, ex1);
            }
        }
    } catch (PKCS11Exception e) {
        try {
            initArgs = null;
            tmpPKCS11 = PKCS11.getInstance(libraryPath, functionList, initArgs, true);
        } catch (IOException | PKCS11Exception ex) {
        }
    }
    try {
        slotList = tmpPKCS11.C_GetSlotList(true);
        for (long slot : slotList) {
            CK_TOKEN_INFO tokenInfo = tmpPKCS11.C_GetTokenInfo(slot);
            System.out.println(""slot: "" + slot + ""\nmanufacturerID: ""
                    + String.valueOf(tokenInfo.manufacturerID) + ""\nmodel: ""
                    + String.valueOf(tokenInfo.model));
        }
    } catch (PKCS11Exception ex) {
        Logger.getLogger(Signer.class.getName()).log(Level.SEVERE, null, ex);
    }
    return slotList;
}

Before you guys answer: I want to emphasize that I reference the Signer class in a normal Java Project perfectly. So I donn't think it's a 32-bit or 64-bit problem. Plus, I am using the 32-bit JDK 1.7
","This issue can be because unsupported version of java.Do one thing download particular jar file for that and include it on your project it'll work for you.
You can download the jar from this link -
http://www.docjar.com/jar/sunpkcs11.jar
","719","<javafx><noclassdeffounderror><classnotfoundexception><sun><pkcs#11>","0","0","1","2016-12-29 06:53:17","","3","","","","","2014-02-12 07:21:56",""
"2447641","SunPKCS11 glassfish","I have a application that running ok over tomcat 6.20, I use in my app a token A3 smart card reader. Everthing looks fine. Now, I want migrate my application to Glassfish v2.1, then, my nightmare begins! Can I use de same code to load the Provider? In Tomcat works good, but not luck with glassfish v2.
String configName = ""C:\\pkcs11.config"";
Provider provider = new SunPKCS11(configName);

configName is a file in with this content:
name = Safesign
library = C:\windows\system32\aetpkss1.dll

I use this to get KeySotore
char[] pin = { '1', '2', '3', '4' };
   String configName = ""C:\\pkcs11.config"";
   Provider p = new SunPKCS11(configName);
   KeyStore.Builder builder = KeyStore.Builder.newInstance(""pkcs11"",
     p, new KeyStore.PasswordProtection(pin));
   ks = builder.getKeyStore();

Its seems like glassfish is not loading the DLL, and don't find the slots of my usb card reader.
Please, someone know how can I fix my problem?
Help!!!
*sorry for the ""Tarzan English"".
","Reuse your instance of SunPKCS11, and don't forget to call Security.addProvider 
","716","<java><glassfish><pkcs#11>","1","0","1","2011-06-20 10:30:11","","0","","5000","","2011-06-20 10:30:11","2010-03-15 14:00:28",""
"36628108","PKCS#11 access from the browser","I am trying to write a web client that communicates with a web service to electronically sign documents. The web client must also communicate with a PKCS#11 card for cryptographic operations (sign the digest, ...).
Is there any up-to-date project/technology that allows me to communicate with the smart card from any browser ?
Note: the reader is of type: Gemalto IDBridge CT30
Thanks !
","For now Java applets remain the only more or less widespread technology. As browsers started to block Java, it is possible to run Java applets as standalone processes using Java Web Start. In our Distributed Cryptography add-on for SecureBlackbox, described in this StackOverflow answer, we are currently doing exactly this - launch the applet via WebStart. BTW I welcome you to check our solution, as it already does what you are trying to implement. 
","714","<browser><pkcs#11>","0","0","1","2016-04-15 09:51:10","","0","3","","","","2016-04-14 15:52:33",""
"44697661","Java encrypting with USB certificates (smart cards)","I'm writing a Java program which is encrypting and signing with USB certificates (smart cards). I have a shared library (.dll on Windows, .so on Linux) which implements PKCS11 for the hardware.
I was searching for existing solutions and found the following guide http://docs.oracle.com/javase/7/docs/technotes/guides/security/p11guide.html The guide suggests to use sun.security.pkcs11.SunPKCS11 provider.
However, I have major problems with sun.security.pkcs11 package. I managed to make signature working, but I cannot make encryption / decryption. I was searching and found that developers should not use 'sun' packages http://www.oracle.com/technetwork/java/faq-sun-packages-142232.html
Now, I'm wondering what should I use instead of sun.security.pkcs11?
I have a working C++ code (which is using NSS library to work with the hardware). I found, that NSS library is using C_WrapKey and C_UnwrapKey for encrption.
The following code should probably use C_WrapKey and C_UnwrapKey for encrption, but I can see in the logs of the .so library that the java code calls C_DecryptInit which for some reason fails (C_DecryptInit() Init operation failed.).
Note: Both (Cipher.PUBLIC_KEY/Cipher.PRIVATE_KEY and Cipher.WRAP_MODE/Cipher.UNWRAP_MODE works fine with soft certificates). The code works with hard certificates only with Java 1.7 (32-bit Java on Windows machine).
Stack trace:
Exception in thread ""main"" java.security.InvalidKeyException: init() failed
        at sun.security.pkcs11.P11RSACipher.implInit(P11RSACipher.java:239)
        at sun.security.pkcs11.P11RSACipher.engineUnwrap(P11RSACipher.java:479)
        at javax.crypto.Cipher.unwrap(Cipher.java:2510)
        at gem_test.Test.decryptDocument(Test.java:129)
        at gem_test.Test.main(Test.java:81)
Caused by: sun.security.pkcs11.wrapper.PKCS11Exception: CKR_KEY_FUNCTION_NOT_PERMITTED
        at sun.security.pkcs11.wrapper.PKCS11.C_DecryptInit(Native Method)
        at sun.security.pkcs11.P11RSACipher.initialize(P11RSACipher.java:304)
        at sun.security.pkcs11.P11RSACipher.implInit(P11RSACipher.java:237)
        ... 4 more

Code:
package gem_test;

import java.io.ByteArrayInputStream;
import java.io.FileInputStream;
import java.security.KeyStore;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.Security;
import java.security.Signature;
import java.security.cert.X509Certificate;
import java.util.Enumeration;

import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;

import sun.security.pkcs11.SunPKCS11;

public class Test {
    private static final String ALGORITHM = ""RSA"";

    static int hard_soft = 1; // 1 - smart card, 2 - soft certificate
    static int sign_encrypt = 2; // 1- sign, 2 - encryption


    public static void main(String[] args) throws Exception {
        PrivateKey privateKey;
        PublicKey pubKey;
        if (hard_soft == 1) {
            String pkcsConf = (
                ""name = Personal\n"" +
                ""library = /usr/local/lib/personal/libP11.so\n"" +
//                    ""library = c:\\perso\\bin\\personal.dll\n"" +
                ""slot = 0\n""
            );

            char[] pin = ""123456"".toCharArray();
            String useCertAlias = ""Digital Signature"";
//                String useCertAlias = ""Non Repudiation"";

            SunPKCS11 provider = new SunPKCS11(new ByteArrayInputStream(pkcsConf.getBytes()));
            String providerName = provider.getName();
            Security.addProvider(provider);

            KeyStore keyStore = KeyStore.getInstance(""PKCS11"", providerName);
            keyStore.load(null, pin);

            privateKey = (PrivateKey) keyStore.getKey(useCertAlias, pin);
            X509Certificate certificate = (X509Certificate) keyStore.getCertificate(useCertAlias);
            pubKey = certificate.getPublicKey();
        } else if (hard_soft == 2) {
            /*
             mkdir /tmp/softkey
             cd /tmp/softkey

             openssl genrsa 2048 > softkey.key
             chmod 400 softkey.key
             openssl req -new -x509 -nodes -sha1 -days 365 -key softkey.key -out softkey.crt
             openssl pkcs12 -export -in softkey.crt -inkey softkey.key -out softkey.pfx
             rm -f softkey.key softkey.crt
             */
            String pfx = ""/tmp/softkey/softkey.pfx"";
            String useCertAlias = ""1"";

            KeyStore keyStore1 = KeyStore.getInstance(""PKCS12"");
            keyStore1.load(new FileInputStream(pfx), new char[]{});

            privateKey = (PrivateKey) keyStore1.getKey(useCertAlias, new char[]{});
            X509Certificate certificate = (X509Certificate) keyStore1.getCertificate(useCertAlias);
            pubKey = certificate.getPublicKey();
        } else {
            throw new IllegalStateException();
        }

        if (sign_encrypt == 1) {
            byte[] sig = signDocument(""msg content"".getBytes(), privateKey);
            boolean result = verifyDocument(""msg content"".getBytes(), sig, pubKey);
            System.out.println(""RESULT "" + result);
        } else if (sign_encrypt == 2) {
            byte[] encrypted = encryptDocument(""msg content"".getBytes(), pubKey);
            byte[] decryptedDocument = decryptDocument(encrypted, privateKey);
            System.out.println(""RESULT "" + new String(decryptedDocument));
        } else {
            throw new IllegalStateException();
        }
    }

    private static byte[] signDocument(byte[] aDocument, PrivateKey aPrivateKey) throws Exception {
        Signature signatureAlgorithm = Signature.getInstance(""SHA1withRSA"");
        signatureAlgorithm.initSign(aPrivateKey);
        signatureAlgorithm.update(aDocument);
        byte[] digitalSignature = signatureAlgorithm.sign();
        return digitalSignature;
    }

    private static boolean verifyDocument(byte[] aDocument, byte[] sig, PublicKey pubKey) throws Exception {
        Signature signatureAlgorithm = Signature.getInstance(""SHA1withRSA"");
        signatureAlgorithm.initVerify(pubKey);
        signatureAlgorithm.update(aDocument);
        return signatureAlgorithm.verify(sig);
    }


    private static byte[] encryptDocument(byte[] aDocument, PublicKey pubKey) throws Exception {
        int encrypt_wrap = 2;
        if (encrypt_wrap == 1) {
            Cipher cipher = Cipher.getInstance(ALGORITHM);
            cipher.init(Cipher.PUBLIC_KEY, pubKey);
            return cipher.doFinal(aDocument);
        } else if (encrypt_wrap == 2) {
            SecretKey data = new SecretKeySpec(aDocument, 0, aDocument.length, ""AES"");
            Cipher cipher = Cipher.getInstance(ALGORITHM);
            cipher.init(Cipher.WRAP_MODE, pubKey);
            return cipher.wrap(data);
        } else {
            throw new IllegalStateException();
        }
    }

    public static byte[] decryptDocument(byte[] encryptedDocument, PrivateKey aPrivateKey) throws Exception {
        int encrypt_wrap = 2;
        if (encrypt_wrap == 1) {
            Cipher cipher = Cipher.getInstance(ALGORITHM);
            cipher.init(Cipher.PRIVATE_KEY, aPrivateKey);
            return cipher.doFinal(encryptedDocument);
        } else if (encrypt_wrap == 2) {
            Cipher cipher = Cipher.getInstance(ALGORITHM);
            cipher.init(Cipher.UNWRAP_MODE, aPrivateKey);
            SecretKey res = (SecretKey) cipher.unwrap(encryptedDocument, ""AES"", Cipher.SECRET_KEY);
            return res.getEncoded();
        } else {
            throw new IllegalStateException();
        }
    }
}

","I think the solution is simply to use ENCRYPT instead of WRAP and DECRYPT instead of UNWRAP.
To understand why, it is important to see what WRAP and UNWRAP do.  Basically they perform simply ENCRYPT and DECRYPT but they simply return a key. Now if you do this in software then there is no difference except for the fact that you don't need to use a SecretKeySpec or SecretKeyFactory to regenerate a key from the decrypted data.
However if you perform it on hardware then generally the resulting key will be kept on the hardware device (or Token). This is of course fine if you possess a HSM: it can just generate a (session specific) key and return a handle. But on smart cards this is generally not possible. And even if it was: you don't want to send all of the message to the smart card to let it encrypt.
Furthermore, if you use Java you don't directly have control over the PKCS#11 input parameters to the wrapping or unwrapping calls.

So try ENCRYPT and DECRYPT and then regenerate the key in software.
Alternatively you could replicate the PKCS#11 wrap and unwrap calls using the Open Source IAIK wrapper library; mimicking the C functionality. But that would not be compatible with calls that require the Cipher class.

Note that RSA in Sun providers in all likelihood means RSA/ECB/PKCS1Padding. If you need a different RSA algorithm then you should experiment with the algorithm string; this could also be the problem that you are facing: that you use the wrong algorithm.
","707","<java><encryption><smartcard><pkcs#11>","1","0","2","2017-09-07 07:57:09","","9","3","","","","2017-06-22 11:09:42",""
"44697661","Java encrypting with USB certificates (smart cards)","I'm writing a Java program which is encrypting and signing with USB certificates (smart cards). I have a shared library (.dll on Windows, .so on Linux) which implements PKCS11 for the hardware.
I was searching for existing solutions and found the following guide http://docs.oracle.com/javase/7/docs/technotes/guides/security/p11guide.html The guide suggests to use sun.security.pkcs11.SunPKCS11 provider.
However, I have major problems with sun.security.pkcs11 package. I managed to make signature working, but I cannot make encryption / decryption. I was searching and found that developers should not use 'sun' packages http://www.oracle.com/technetwork/java/faq-sun-packages-142232.html
Now, I'm wondering what should I use instead of sun.security.pkcs11?
I have a working C++ code (which is using NSS library to work with the hardware). I found, that NSS library is using C_WrapKey and C_UnwrapKey for encrption.
The following code should probably use C_WrapKey and C_UnwrapKey for encrption, but I can see in the logs of the .so library that the java code calls C_DecryptInit which for some reason fails (C_DecryptInit() Init operation failed.).
Note: Both (Cipher.PUBLIC_KEY/Cipher.PRIVATE_KEY and Cipher.WRAP_MODE/Cipher.UNWRAP_MODE works fine with soft certificates). The code works with hard certificates only with Java 1.7 (32-bit Java on Windows machine).
Stack trace:
Exception in thread ""main"" java.security.InvalidKeyException: init() failed
        at sun.security.pkcs11.P11RSACipher.implInit(P11RSACipher.java:239)
        at sun.security.pkcs11.P11RSACipher.engineUnwrap(P11RSACipher.java:479)
        at javax.crypto.Cipher.unwrap(Cipher.java:2510)
        at gem_test.Test.decryptDocument(Test.java:129)
        at gem_test.Test.main(Test.java:81)
Caused by: sun.security.pkcs11.wrapper.PKCS11Exception: CKR_KEY_FUNCTION_NOT_PERMITTED
        at sun.security.pkcs11.wrapper.PKCS11.C_DecryptInit(Native Method)
        at sun.security.pkcs11.P11RSACipher.initialize(P11RSACipher.java:304)
        at sun.security.pkcs11.P11RSACipher.implInit(P11RSACipher.java:237)
        ... 4 more

Code:
package gem_test;

import java.io.ByteArrayInputStream;
import java.io.FileInputStream;
import java.security.KeyStore;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.Security;
import java.security.Signature;
import java.security.cert.X509Certificate;
import java.util.Enumeration;

import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;

import sun.security.pkcs11.SunPKCS11;

public class Test {
    private static final String ALGORITHM = ""RSA"";

    static int hard_soft = 1; // 1 - smart card, 2 - soft certificate
    static int sign_encrypt = 2; // 1- sign, 2 - encryption


    public static void main(String[] args) throws Exception {
        PrivateKey privateKey;
        PublicKey pubKey;
        if (hard_soft == 1) {
            String pkcsConf = (
                ""name = Personal\n"" +
                ""library = /usr/local/lib/personal/libP11.so\n"" +
//                    ""library = c:\\perso\\bin\\personal.dll\n"" +
                ""slot = 0\n""
            );

            char[] pin = ""123456"".toCharArray();
            String useCertAlias = ""Digital Signature"";
//                String useCertAlias = ""Non Repudiation"";

            SunPKCS11 provider = new SunPKCS11(new ByteArrayInputStream(pkcsConf.getBytes()));
            String providerName = provider.getName();
            Security.addProvider(provider);

            KeyStore keyStore = KeyStore.getInstance(""PKCS11"", providerName);
            keyStore.load(null, pin);

            privateKey = (PrivateKey) keyStore.getKey(useCertAlias, pin);
            X509Certificate certificate = (X509Certificate) keyStore.getCertificate(useCertAlias);
            pubKey = certificate.getPublicKey();
        } else if (hard_soft == 2) {
            /*
             mkdir /tmp/softkey
             cd /tmp/softkey

             openssl genrsa 2048 > softkey.key
             chmod 400 softkey.key
             openssl req -new -x509 -nodes -sha1 -days 365 -key softkey.key -out softkey.crt
             openssl pkcs12 -export -in softkey.crt -inkey softkey.key -out softkey.pfx
             rm -f softkey.key softkey.crt
             */
            String pfx = ""/tmp/softkey/softkey.pfx"";
            String useCertAlias = ""1"";

            KeyStore keyStore1 = KeyStore.getInstance(""PKCS12"");
            keyStore1.load(new FileInputStream(pfx), new char[]{});

            privateKey = (PrivateKey) keyStore1.getKey(useCertAlias, new char[]{});
            X509Certificate certificate = (X509Certificate) keyStore1.getCertificate(useCertAlias);
            pubKey = certificate.getPublicKey();
        } else {
            throw new IllegalStateException();
        }

        if (sign_encrypt == 1) {
            byte[] sig = signDocument(""msg content"".getBytes(), privateKey);
            boolean result = verifyDocument(""msg content"".getBytes(), sig, pubKey);
            System.out.println(""RESULT "" + result);
        } else if (sign_encrypt == 2) {
            byte[] encrypted = encryptDocument(""msg content"".getBytes(), pubKey);
            byte[] decryptedDocument = decryptDocument(encrypted, privateKey);
            System.out.println(""RESULT "" + new String(decryptedDocument));
        } else {
            throw new IllegalStateException();
        }
    }

    private static byte[] signDocument(byte[] aDocument, PrivateKey aPrivateKey) throws Exception {
        Signature signatureAlgorithm = Signature.getInstance(""SHA1withRSA"");
        signatureAlgorithm.initSign(aPrivateKey);
        signatureAlgorithm.update(aDocument);
        byte[] digitalSignature = signatureAlgorithm.sign();
        return digitalSignature;
    }

    private static boolean verifyDocument(byte[] aDocument, byte[] sig, PublicKey pubKey) throws Exception {
        Signature signatureAlgorithm = Signature.getInstance(""SHA1withRSA"");
        signatureAlgorithm.initVerify(pubKey);
        signatureAlgorithm.update(aDocument);
        return signatureAlgorithm.verify(sig);
    }


    private static byte[] encryptDocument(byte[] aDocument, PublicKey pubKey) throws Exception {
        int encrypt_wrap = 2;
        if (encrypt_wrap == 1) {
            Cipher cipher = Cipher.getInstance(ALGORITHM);
            cipher.init(Cipher.PUBLIC_KEY, pubKey);
            return cipher.doFinal(aDocument);
        } else if (encrypt_wrap == 2) {
            SecretKey data = new SecretKeySpec(aDocument, 0, aDocument.length, ""AES"");
            Cipher cipher = Cipher.getInstance(ALGORITHM);
            cipher.init(Cipher.WRAP_MODE, pubKey);
            return cipher.wrap(data);
        } else {
            throw new IllegalStateException();
        }
    }

    public static byte[] decryptDocument(byte[] encryptedDocument, PrivateKey aPrivateKey) throws Exception {
        int encrypt_wrap = 2;
        if (encrypt_wrap == 1) {
            Cipher cipher = Cipher.getInstance(ALGORITHM);
            cipher.init(Cipher.PRIVATE_KEY, aPrivateKey);
            return cipher.doFinal(encryptedDocument);
        } else if (encrypt_wrap == 2) {
            Cipher cipher = Cipher.getInstance(ALGORITHM);
            cipher.init(Cipher.UNWRAP_MODE, aPrivateKey);
            SecretKey res = (SecretKey) cipher.unwrap(encryptedDocument, ""AES"", Cipher.SECRET_KEY);
            return res.getEncoded();
        } else {
            throw new IllegalStateException();
        }
    }
}

","In the end we used this solution for the problem of making / verifying signatures and encryption / decryption from Java 8 with smart cards. It works on both Linux and Windows using 64 bit Java.
We haven't managed to fix the Wrap / Unwrap part. I believe that it would be possible to fix the bug with java.lang.instrument, but instead we decided to replace all smartcards so that they support ""Data Encipherement"".
The code to monkey patch the JDK 8 SunPKCS11 provider bug:
String pkcsConf = (
    ""name = \""Personal\""\n"" +
    String.format(""library = \""%s\""\n"", hardCertLib) +
    String.format(""slot = %d\n"", slotId)
);

SunPKCS11 provider = new SunPKCS11(new ByteArrayInputStream(pkcsConf.getBytes()));
tryFixingPKCS11ProviderBug(provider);

....


/**
 * This a fix for PKCS11 bug in JDK8. This method prefetches the mech info from the driver.
 * @param provider
 */
public static void tryFixingPKCS11ProviderBug(SunPKCS11 provider) {
    try {
        Field tokenField = SunPKCS11.class.getDeclaredField(""token"");
        tokenField.setAccessible(true);
        Object token = tokenField.get(provider);

        Field mechInfoMapField = token.getClass().getDeclaredField(""mechInfoMap"");
        mechInfoMapField.setAccessible(true);
        @SuppressWarnings(""unchecked"")
        Map<Long, CK_MECHANISM_INFO> mechInfoMap = (Map<Long, CK_MECHANISM_INFO>) mechInfoMapField.get(token);
        mechInfoMap.put(PKCS11Constants.CKM_SHA1_RSA_PKCS, new CK_MECHANISM_INFO(1024, 2048, 0));
    } catch(Exception e) {
        logger.info(String.format(""Method tryFixingPKCS11ProviderBug failed with '%s'"", e.getMessage()));
    }
}

","707","<java><encryption><smartcard><pkcs#11>","1","0","2","2017-09-07 07:57:09","","9","3","","","","2017-06-22 11:09:42",""
"43274386","PKCS#11 driver for Trusted Platform Module (TPM) chip version 1.2","I'm building an application can interact with tpm chip via PKCS#11, generate private key (stored in tpm), import certificate which according the private key, sign data,... I want to use tpm chip like a hsm. 
So, someone can help me! What's name of PKCS#11 driver can help me interact with tpm? 
OR What's I must do to make the PKCS#11 driver? I have build OpenCryptoki and Trousers on Centos 6.5 but after build successful I don't know what's file in OpenCrptoki or Trousers is PKCS11 driver!
Thanks!
","Opencryptoki should support TPM via TrouSerS (see e.g. here, here, here).
There is a simple-tpm-pk11 project which takes a straighter approach and might be interesting for you -- see this interesting article on author's blog.
Disclaimer: I have never used TPM for doing crypto so please do validate my thoughts.
PS: I forgot to say that opencryptoki PKCS#11 driver usually resides in /usr/lib/opencryptoki/libopencryptoki.so.
","705","<linux><ssl><digital-signature><pkcs#11><tpm>","2","0","1","2017-04-07 13:32:13","","3","0","","","","2017-04-07 09:20:44",""
"24867933","javax.crypto.BadPaddingException: java.security.DigestException: Length must be at least 32 for SHA-256digests","I am getting below exception after decrypting using ""RSA/ECB/NoPadding"" algorithm and removing OAEP padding using the approach given by divanov.
Caused by: javax.crypto.BadPaddingException: java.security.DigestException: Length must be at least 32 for SHA-256digests
    at sun.security.rsa.RSAPadding.mgf1(Unknown Source)
    at sun.security.rsa.RSAPadding.unpadOAEP(Unknown Source)
    at sun.security.rsa.RSAPadding.unpad(Unknown Source)

Used the same code but it didn't work for me.
The only change I made in the code is following :
Provider pkcs11provider = new SunPKCS11(""C:\\Users\\manishs525\\pkcs11.cfg"");
Cipher rsaCipher2 = Cipher.getInstance(""RSA/ECB/NoPadding"", pkcs11provider);
rsaCipher2.init(Cipher.DECRYPT_MODE, privateKey);
byte[] paddedPlainText = rsaCipher2.doFinal(cipherText);

/* Ensure leading zeros not stripped */
if (paddedPlainText.length < keyLength / 8) {
    byte[] tmp = new byte[keyLength / 8];
    System.arraycopy(paddedPlainText, 0, tmp, tmp.length - paddedPlainText.length, paddedPlainText.length);
    System.out.println(""Zero padding to "" + (keyLength / 8));
    paddedPlainText = tmp;
}           

System.out.println(""OAEP padded plain text: "" + DatatypeConverter.printHexBinary(paddedPlainText));
// === changed the next line ===
PSource pSrc = (new PSource.PSpecified(iv));
// === changed the last two parameters to MGF1ParameterSpec.SHA256 and pSrc ===
OAEPParameterSpec paramSpec = new OAEPParameterSpec(""SHA-256"", ""MGF1"", MGF1ParameterSpec.SHA256, pSrc);   // where iv is byte array of length 32
RSAPadding padding = RSAPadding.getInstance(RSAPadding.PAD_OAEP_MGF1, keyLength / 8, new SecureRandom(), paramSpec);
byte[] plainText2 = padding.unpad(paddedPlainText);

","There seems to be no reason to specify any PSource. In the standards, it seems always empty, allowing for ""future extension"".
Are you sure that not just the outside hash is SHA-256? There is no particular security reason to replace the default MGF... 
","700","<java><encryption><bouncycastle><smartcard><pkcs#11>","0","0","1","2014-07-21 20:31:21","","2","4","-1","","2017-05-23 11:43:48","2014-07-21 14:41:30",""
"40418104","Where to find my FireFox profile? NSS cannot find external installed module/token in secmod.db","NOTE: I have found the answer to this question so I would close it. It's due to that the method returning the FireFox profile folder is not working, it just locates the directory where all profiles are located, but does not enter my profile folder. And under this folder (for example, /home/myUserName/.mozilla/firefox/, there are also key3.db, cert8.db and secmod.db, but it does not contain any user-specific settings, and I guess they serve as the base for creating all profiles the moment they are created. That's why they are not containing my added modules. Under this folder, I have 5yasix1g.default-1475600224376 where my profile is located, and that's where my key3.db, cert8.db and secmod.db are located.
I leave the question here and change the title to warn people who like me may have difficulties finding where their FF profiles are.

I managed to get NSS/JSS to work in my Ubuntu 16.04, but it only finds one module, the default NSS internal one. 
I have these modules installed:

What I must load, is that one of Izenpe and DNIe. But when I debug, it only loads the first one.
With modutil shipped with NSS/NSPR, I have found the same. A checking of 
modutil -list -dbdir /home/myUserName/.mozilla/firefox

only shows one module.
(Another thing is that -dbdir's value should end with the directory where secmod.db is located, not the file itself, or modutil throws confusing error message, complaining: 
modutil: function failed: SEC_ERROR_LEGACY_DATABASE: The certificate/key database is in an old, unsupported format.

)
I know I can add them and I am doing it, but it's weird that it's listed in FireFox but not in secmod.db. Isn't this file the database for all the installed modules that FF uses?
Also, after adding it, I cannot get access to external module. modutil -dbdir ""/some/dir/properly/quoted"" -list shows me this:
easternfox@easternfox-Ubuntu:~$ modutil -dbdir /home/easternfox/.mozilla/firefox -list
Listing of PKCS #11 Modules
-----------------------------------------------------------
  1. NSS Internal PKCS #11 Module
     slots: 2 slots attached
    status: loaded

     slot: NSS Internal Cryptographic Services
    token: NSS Generic Crypto Services

     slot: NSS User Private Key and Certificate Services
    token: NSS Certificate DB

  2. Izenpe PKCS#11
    library name: /usr/lib/libbit4ipki.so
     slots: 1 slot attached
    status: loaded

     slot: Cherry GmbH SmartBoard XX44 [Smart Card Reader USB] 00 00
    token: Izenpe 0

I use this code to load the PKCS#11 Provider:
if (OSUtil.isLinux()) {
    String config = ""library=/usr/lib/i386-linux-gnu/nss/libsoftokn3.so\n""
    + ""name=NSSCrypto-Firma\n""
    + ""attributes=compatibility\n""
    + ""slot=2\n""
    + ""showInfo=true\n""
    + ""allowSingleThreadedModules=true\n""
    + ""nssArgs=\""configdir='"" + NSS_JSS_Utils.getFireFoxProfilePath() + ""' certPrefix='' keyPrefix='' secmod='secmod.db' + flags='readOnly'\"" "";

    Provider provider = new SunPKCS11(new ByteArrayInputStream(config.getBytes()));
    Security.removeProvider(""IAIK"");
    //Security.addProvider(provider);
    Security.insertProviderAt(provider, 1);
    KeyStore.Builder builder = null;
    prevTryFailes = true;
    try {
        if (tries < 3 && prevTryFailes) {
            keystore = KeyStore.getInstance(""PKCS11"", provider);
            builder = KeyStore.Builder.newInstance(""PKCS11"", provider, new KeyStore.CallbackHandlerProtection(new UtilTarjetas(). new callback()));
            keystore = builder.getKeyStore();
            prevTryFailes = false;
        } 

        if (tries >= 3) {
            throw new KeyStoreException(""Have entered 3 times password and not correct. "");
        }

    } catch (Exception e) {
        Traza.error(e);
        tries ++;
    }
}

Assuming from an exception thrown when specifying more then once the name property in the config, I suppose that I can load only one module in the Provider. 
And, with these code I initialize the CryptoManager:
try {
    InitializationValues iv = new InitializationValues(NSS_JSS_Utils.getFireFoxProfilePath());
    iv.installJSSProvider = false;
    CryptoManager.initialize(iv);
    cm = CryptoManager.getInstance();
} catch (KeyDatabaseException | CertDatabaseException | GeneralSecurityException | NotInitializedException e) {
    e.printStackTrace();
} catch (AlreadyInitializedException e) {
    cm = CryptoManager.getInstance();
}
CustomPasswordCallback pcb = new CustomPasswordCallback();
cm.setPasswordCallback(pcb);

Enumeration< ? > emModules = cm.getModules();

When it reaches the final line, it only loads the internal module, not mine external ones.
Any help is appreciated. Thanks!
","I have found the answer to this question.
It's due to that the method returning the FireFox profile folder is not working, it just locates the directory where all profiles are located, but does not enter my profile folder. And under this folder (for example, /home/myUserName/.mozilla/firefox/, there are also key3.db, cert8.db and secmod.db, but they does not contain any user-specific settings, and I guess they serve as the base for creating all profiles the moment they are created. That's why they are not containing my added modules. 
Under this folder, I have 5yasix1g.default-1475600224376 where my profile is located, and that's where my key3.db, cert8.db and secmod.db are located.
Edit
To easily find your profile folder:
Firefox Help - Troubleshooting information..., here you see ""Profile directory"", click Open directory.
Or, just type in the direction bar:
about:support

","690","<firefox><pkcs#11><nss>","0","0","1","2016-11-23 07:50:31","40460391","0","1","4537090","","2016-11-07 07:56:54","2016-11-04 08:24:51",""
"22500755","Applet pcks11 security error","I want to applet implementations with digital signing. But, I'm getting an error when accessing the usb token. I think the reason for the error due to Java's security is blocking access.
Error log: 
basic: exception: java.lang.reflect.InvocationTargetException.
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
    at com.sun.deploy.uitoolkit.impl.awt.AWTAppletAdapter.runOnEDTAndWait(Unknown Source)
    at com.sun.deploy.uitoolkit.impl.awt.AWTAppletAdapter.instantiateApplet(Unknown Source)
    at sun.plugin2.applet.Plugin2Manager.initAppletAdapter(Unknown Source)
    at sun.plugin2.applet.Plugin2Manager$AppletExecutionRunnable.run(Unknown Source)
    at java.lang.Thread.run(Unknown Source)
Caused by: java.lang.reflect.InvocationTargetException
    at com.sun.deploy.uitoolkit.impl.awt.OldPluginAWTUtil.invokeAndWait(Unknown Source)
    ... 5 more
Caused by: java.security.AccessControlException: access denied (""java.lang.RuntimePermission"" ""accessClassInPackage.sun.security.pkcs11"")
    at java.security.AccessControlContext.checkPermission(Unknown Source)
    at java.security.AccessController.checkPermission(Unknown Source)
    at java.lang.SecurityManager.checkPermission(Unknown Source)
    at java.lang.SecurityManager.checkPackageAccess(Unknown Source)
    at sun.plugin2.applet.SecurityManagerHelper.checkPackageAccessHelper(Unknown Source)
    at sun.plugin2.applet.AWTAppletSecurityManager.checkPackageAccess(Unknown Source)
    at sun.misc.Launcher$AppClassLoader.loadClass(Unknown Source)
    at java.lang.ClassLoader.loadClass(Unknown Source)
    at sun.plugin2.applet.Plugin2ClassLoader.loadClass0(Unknown Source)
    at sun.plugin2.applet.Plugin2ClassLoader.loadClass(Unknown Source)
    at sun.plugin2.applet.Plugin2ClassLoader.loadClass0(Unknown Source)
    at sun.plugin2.applet.Plugin2ClassLoader.loadClass(Unknown Source)
    at sun.plugin2.applet.Plugin2ClassLoader.loadClass(Unknown Source)
    at java.lang.ClassLoader.loadClass(Unknown Source)
    at com.fit.signer.tokenserver.controller.TokenController.init(TokenController.java:37)
    at com.fit.applet.SignApplet.<init>(SignApplet.java:26)
    at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
    at sun.reflect.NativeConstructorAccessorImpl.newInstance(Unknown Source)
    at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(Unknown Source)
    at java.lang.reflect.Constructor.newInstance(Unknown Source)
    at java.lang.Class.newInstance(Unknown Source)
    at com.sun.deploy.uitoolkit.impl.awt.AWTAppletAdapter$1.run(Unknown Source)
    at java.awt.event.InvocationEvent.dispatch(Unknown Source)
    at java.awt.EventQueue.dispatchEventImpl(Unknown Source)
    at java.awt.EventQueue.access$200(Unknown Source)
    at java.awt.EventQueue$3.run(Unknown Source)
    at java.awt.EventQueue$3.run(Unknown Source)
    at java.security.AccessController.doPrivileged(Native Method)
    at java.security.ProtectionDomain$1.doIntersectionPrivilege(Unknown Source)
    at java.security.ProtectionDomain$1.doIntersectionPrivilege(Unknown Source)
    at java.awt.EventQueue$4.run(Unknown Source)
    at java.awt.EventQueue$4.run(Unknown Source)
    at java.security.AccessController.doPrivileged(Native Method)
    at java.security.ProtectionDomain$1.doIntersectionPrivilege(Unknown Source)
    at java.awt.EventQueue.dispatchEvent(Unknown Source)
    at java.awt.EventDispatchThread.pumpOneEventForFilters(Unknown Source)
    at java.awt.EventDispatchThread.pumpEventsForFilter(Unknown Source)
    at java.awt.EventDispatchThread.pumpEventsForHierarchy(Unknown Source)
    at java.awt.EventDispatchThread.pumpEvents(Unknown Source)
    at java.awt.EventDispatchThread.pumpEvents(Unknown Source)
    at java.awt.EventDispatchThread.run(Unknown Source)
Ignored exception: java.lang.RuntimeException: java.lang.reflect.InvocationTargetException

What do I need to do solve the problem?
","Solution:
I signed Jar file.

jarsigner -keystore E:\cloudsignerstore E:\CloudSigner.jar
  cloudsigner

","685","<java><applet><digital-signature><pkcs#11><electronic-signature>","0","0","1","2014-03-22 20:59:06","22583519","1","0","","","","2014-03-19 09:03:27",""
"53741823","Import a private key using PKCS#11","We're trying to import an RSA key pair using C# and PKCS#11 into our HSM. Importing the private key using: 
    var privateKeyAttributes = new List<ObjectAttribute>();
    privateKeyAttributes.Add(new ObjectAttribute(CKA.CKA_ID, ckaId));
    privateKeyAttributes.Add(new ObjectAttribute(CKA.CKA_LABEL, ckaId));
    privateKeyAttributes.Add(new ObjectAttribute(CKA.CKA_CLASS, CKO.CKO_PRIVATE_KEY));
    privateKeyAttributes.Add(new ObjectAttribute(CKA.CKA_KEY_TYPE, CKK.CKK_RSA));
    privateKeyAttributes.Add(new ObjectAttribute(CKA.CKA_TOKEN, true));
    privateKeyAttributes.Add(new ObjectAttribute(CKA.CKA_PRIVATE, true));
    privateKeyAttributes.Add(new ObjectAttribute(CKA.CKA_SENSITIVE, true));
    privateKeyAttributes.Add(new ObjectAttribute(CKA.CKA_DECRYPT, true));
    privateKeyAttributes.Add(new ObjectAttribute(CKA.CKA_SIGN, true));
    privateKeyAttributes.Add(new ObjectAttribute(CKA.CKA_SIGN_RECOVER, true));
    privateKeyAttributes.Add(new ObjectAttribute(CKA.CKA_UNWRAP, true));
    privateKeyAttributes.Add(new ObjectAttribute(CKA.CKA_MODULUS, privateKeyParams.Modulus));
    privateKeyAttributes.Add(new ObjectAttribute(CKA.CKA_PRIVATE_EXPONENT, privateKeyParams.D));
    var privateKeyHandle = session.CreateObject(privateKeyAttributes);

Fails with the error code CKR_TEMPLATE_INCONSISTENT. Unfortunately, it doesn't say what is inconsistent. I tried various other combinations of attributes and it always fails :-(
How to properly import the private key via PKCS#11?

Note: Importing the public key using very similar code works:
    var publicKeyAttributes = new List<ObjectAttribute>();
    publicKeyAttributes.Add(new ObjectAttribute(CKA.CKA_ID, ckaId));
    publicKeyAttributes.Add(new ObjectAttribute(CKA.CKA_LABEL, ckaId));
    publicKeyAttributes.Add(new ObjectAttribute(CKA.CKA_CLASS, CKO.CKO_PUBLIC_KEY));
    publicKeyAttributes.Add(new ObjectAttribute(CKA.CKA_KEY_TYPE, CKK.CKK_RSA));
    publicKeyAttributes.Add(new ObjectAttribute(CKA.CKA_TOKEN, true));
    publicKeyAttributes.Add(new ObjectAttribute(CKA.CKA_PRIVATE, true));
    publicKeyAttributes.Add(new ObjectAttribute(CKA.CKA_ENCRYPT, true));
    publicKeyAttributes.Add(new ObjectAttribute(CKA.CKA_VERIFY, true));
    publicKeyAttributes.Add(new ObjectAttribute(CKA.CKA_VERIFY_RECOVER, true));
    publicKeyAttributes.Add(new ObjectAttribute(CKA.CKA_WRAP, true));
    publicKeyAttributes.Add(new ObjectAttribute(CKA.CKA_MODULUS, publicKeyParams.Modulus));
    publicKeyAttributes.Add(new ObjectAttribute(CKA.CKA_PUBLIC_EXPONENT, publicKeyParams.Exponent));
    var publicKeyHandle = session.CreateObject(publicKeyAttributes);

","Unfortunately PKCS#11 API does not provide details which exact attribute from supplied template caused the error but many PKCS#11 libraries support some kind of internal logging mechanism which may reveal the real cause of error. Exact steps needed to enable logging should be present in the documentation provided by the PKCS#11 library vendor.
My guess is that you're receiving CKR_TEMPLATE_INCONSISTENT because you are setting CKA_SENSITIVE to true. Private key imported in plain form has already lost its ""sensitivity"" because it was exposed to an external environment. I'm successfully using following template in Pkcs11Interop.X509Store project:
var privateKeyAttributes = new List<ObjectAttribute>()
{
    new ObjectAttribute(CKA.CKA_CLASS, CKO.CKO_PRIVATE_KEY),
    new ObjectAttribute(CKA.CKA_TOKEN, true),
    new ObjectAttribute(CKA.CKA_PRIVATE, true),
    new ObjectAttribute(CKA.CKA_MODIFIABLE, true),
    new ObjectAttribute(CKA.CKA_LABEL, ...),
    new ObjectAttribute(CKA.CKA_ID, ...),
    new ObjectAttribute(CKA.CKA_KEY_TYPE, CKK.CKK_RSA),
    new ObjectAttribute(CKA.CKA_MODULUS, rsaPrivKeyParams.Modulus.ToByteArrayUnsigned()),
    new ObjectAttribute(CKA.CKA_PUBLIC_EXPONENT, rsaPrivKeyParams.PublicExponent.ToByteArrayUnsigned()),
    new ObjectAttribute(CKA.CKA_PRIVATE_EXPONENT, rsaPrivKeyParams.Exponent.ToByteArrayUnsigned()),
    new ObjectAttribute(CKA.CKA_PRIME_1, rsaPrivKeyParams.P.ToByteArrayUnsigned()),
    new ObjectAttribute(CKA.CKA_PRIME_2, rsaPrivKeyParams.Q.ToByteArrayUnsigned()),
    new ObjectAttribute(CKA.CKA_EXPONENT_1, rsaPrivKeyParams.DP.ToByteArrayUnsigned()),
    new ObjectAttribute(CKA.CKA_EXPONENT_2, rsaPrivKeyParams.DQ.ToByteArrayUnsigned()),
    new ObjectAttribute(CKA.CKA_COEFFICIENT, rsaPrivKeyParams.QInv.ToByteArrayUnsigned())
};

","682","<c#><rsa><pkcs#11><pkcs11interop>","0","0","2","2018-12-13 11:42:52","53761092","5","0","1400869","","2018-12-12 14:20:43","2018-12-12 11:14:24",""
"53741823","Import a private key using PKCS#11","We're trying to import an RSA key pair using C# and PKCS#11 into our HSM. Importing the private key using: 
    var privateKeyAttributes = new List<ObjectAttribute>();
    privateKeyAttributes.Add(new ObjectAttribute(CKA.CKA_ID, ckaId));
    privateKeyAttributes.Add(new ObjectAttribute(CKA.CKA_LABEL, ckaId));
    privateKeyAttributes.Add(new ObjectAttribute(CKA.CKA_CLASS, CKO.CKO_PRIVATE_KEY));
    privateKeyAttributes.Add(new ObjectAttribute(CKA.CKA_KEY_TYPE, CKK.CKK_RSA));
    privateKeyAttributes.Add(new ObjectAttribute(CKA.CKA_TOKEN, true));
    privateKeyAttributes.Add(new ObjectAttribute(CKA.CKA_PRIVATE, true));
    privateKeyAttributes.Add(new ObjectAttribute(CKA.CKA_SENSITIVE, true));
    privateKeyAttributes.Add(new ObjectAttribute(CKA.CKA_DECRYPT, true));
    privateKeyAttributes.Add(new ObjectAttribute(CKA.CKA_SIGN, true));
    privateKeyAttributes.Add(new ObjectAttribute(CKA.CKA_SIGN_RECOVER, true));
    privateKeyAttributes.Add(new ObjectAttribute(CKA.CKA_UNWRAP, true));
    privateKeyAttributes.Add(new ObjectAttribute(CKA.CKA_MODULUS, privateKeyParams.Modulus));
    privateKeyAttributes.Add(new ObjectAttribute(CKA.CKA_PRIVATE_EXPONENT, privateKeyParams.D));
    var privateKeyHandle = session.CreateObject(privateKeyAttributes);

Fails with the error code CKR_TEMPLATE_INCONSISTENT. Unfortunately, it doesn't say what is inconsistent. I tried various other combinations of attributes and it always fails :-(
How to properly import the private key via PKCS#11?

Note: Importing the public key using very similar code works:
    var publicKeyAttributes = new List<ObjectAttribute>();
    publicKeyAttributes.Add(new ObjectAttribute(CKA.CKA_ID, ckaId));
    publicKeyAttributes.Add(new ObjectAttribute(CKA.CKA_LABEL, ckaId));
    publicKeyAttributes.Add(new ObjectAttribute(CKA.CKA_CLASS, CKO.CKO_PUBLIC_KEY));
    publicKeyAttributes.Add(new ObjectAttribute(CKA.CKA_KEY_TYPE, CKK.CKK_RSA));
    publicKeyAttributes.Add(new ObjectAttribute(CKA.CKA_TOKEN, true));
    publicKeyAttributes.Add(new ObjectAttribute(CKA.CKA_PRIVATE, true));
    publicKeyAttributes.Add(new ObjectAttribute(CKA.CKA_ENCRYPT, true));
    publicKeyAttributes.Add(new ObjectAttribute(CKA.CKA_VERIFY, true));
    publicKeyAttributes.Add(new ObjectAttribute(CKA.CKA_VERIFY_RECOVER, true));
    publicKeyAttributes.Add(new ObjectAttribute(CKA.CKA_WRAP, true));
    publicKeyAttributes.Add(new ObjectAttribute(CKA.CKA_MODULUS, publicKeyParams.Modulus));
    publicKeyAttributes.Add(new ObjectAttribute(CKA.CKA_PUBLIC_EXPONENT, publicKeyParams.Exponent));
    var publicKeyHandle = session.CreateObject(publicKeyAttributes);

","The answer is: you can't directly import a private key into a SafeNet Luna HSM. You have to first encrypt (wrap) the private key and can only then transfer it to the HSM. See PKCS#11 unwrap private key to HSM for an answer on how to do this.
","682","<c#><rsa><pkcs#11><pkcs11interop>","0","1","2","2018-12-13 11:42:52","53761092","5","0","1400869","","2018-12-12 14:20:43","2018-12-12 11:14:24",""
"34234786","Java code for nShield Connect","I am looking for a sample java code for connecting nShield Connect HSM by using PKCS11 library. RSA key is created on token slot 1 and soft token slot 2. Imported Certificate is on slot 1. I like to connect to HSM, read the slot 1 and find the certificate and sign the XML document.
","I know I am late but here goes for those who have the same problem:
You can use Sun PKCS#11 Provider or IAIK to connect Java programs to the PKCS#11 libraries.
This tutorial explains how to use JCE for cryptographic operations e.g. encrypt, sign, etc.
","682","<java><pkcs#11><nshield>","0","0","1","2018-12-26 07:29:46","","2","1","","","","2015-12-12 00:33:40",""
"47230371","SunPKCS11 provider in MacOS for Firefox","I managed to get the SunPKCS11 to work with Firefox ESR 52.0 under Windows, but I am unable to get it to load in MacOS. I've already tried several different configuration and directly loading it via PKCS11 but nothing worked, can anyone give me some pointer?
pkcs11.cfg configuration as follow:
name = FirefoxKeyStore
library = ""/Applications/Firefox.app/Contents/MacOS/fixed-for-java-runtime/libsoftokn3.dylib""
attributes = compatibility
nssArgs = ""configdir='/Users/helloworld/Library/Application Support/Firefox/Profiles/wasdwasd.default-1453211557245' certPrefix='' keyPrefix='' secmod='secmod.db' flags='readOnly' ""
slot = 2

Then in Java, I've tried to load it like this:
FileInputStream fis = new FileInputStream(""pkcs11.cfg"");
Provider provider = new SunPKCS11(fis);
Security.addProvider(provider);

However this immediately gives me the following error:
sunpkcs11: Initializing PKCS#11 library /Applications/Firefox.app/Contents/MacOS/fixed-for-java-runtime/libsoftokn3.dylib
sunpkcs11: Multi-threaded initialization failed: sun.security.pkcs11.wrapper.PKCS11Exception: CKR_DEVICE_ERROR
Exception in thread ""main"" java.security.ProviderException: Initialization failed
at sun.security.pkcs11.SunPKCS11.<init>(SunPKCS11.java:376)
at sun.security.pkcs11.SunPKCS11.<init>(SunPKCS11.java:107)

You maybe asking why do I load the .dylib from the weird folder, that's because I used install_name_tool in MacOS to change the @executable_path to @loader_path in order to get the library dependency to work (since I'm trying to run this in Eclipse rather than from Firefox itself).
I also tried to use the solution suggested here: How to finalize SunPKCS11 Provider after it is initialized? and it was a no-go either... I get the same error.
As well as trying various different configuration settings mentioned here: https://developer.mozilla.org/en-US/docs/Mozilla/Projects/NSS/PKCS11/Module_Specs#Softoken_Specific_Parameters
EDIT1
I tried the method mentioned by @FaithReaper but it still throw the same error. I tried changing the slot value to 0, 1 or -1 and result the same. It looks like there are problem loading the underlaying PKCS11 object.
Caused by: sun.security.pkcs11.wrapper.PKCS11Exception: CKR_DEVICE_ERROR
at sun.security.pkcs11.wrapper.PKCS11.C_Initialize(Native Method)
at sun.security.pkcs11.wrapper.PKCS11$SynchronizedPKCS11.C_Initialize(PKCS11.java:1545)
at sun.security.pkcs11.wrapper.PKCS11.getInstance(PKCS11.java:157)
at sun.security.pkcs11.SunPKCS11.<init>(SunPKCS11.java:330)

I dunno if this would help, but I ran the modutil on the FireFox profile and is dumping this info:
modutil -dbdir ""/Users/eto/Library/Application Support/Firefox/Profiles/ew2g332o.default-1453211557245"" -rawlist

library= name=""NSS Internal PKCS #11 Module"" 
parameters=""configdir=/Users/eto/Library/Application Support/Firefox/Profiles/ew2g332o.default-1453211557245 certPrefix= keyPrefix= secmod=secmod.db flags=readOnly "" 
NSS=""Flags=internal,critical trustOrder=75 cipherOrder=100 slotParams=(1={slotFlags=[RSA,DSA,DH,RC2,RC4,DES,RANDOM,SHA1,MD5,MD2,SSL,TLS,AES,Camellia,SEED,SHA256,SHA512] askpw=any timeout=30})""


Listing of PKCS #11 Modules

NSS Internal PKCS #11 Module
   uri: pkcs11:library-manufacturer=Mozilla%20Foundation;library-description=NSS%20Internal%20Crypto%20Services;library-version=3.33
  slots: 2 slots attached    status: loaded
slot: NSS Internal Cryptographic Services  token: NSS Generic Crypto
  Services    uri:
  pkcs11:token=NSS%20Generic%20Crypto%20Services;manufacturer=Mozilla%20Foundation;serial=0000000000000000;model=NSS%203
slot: NSS User Private Key and Certificate Services    token: NSS
  Certificate DB      uri:
  pkcs11:token=NSS%20Certificate%20DB;manufacturer=Mozilla%20Foundation;serial=0000000000000000;model=NSS%203


","First of all, I have noticed the different way you insert/add Provider with me. Can you try to add the Provider this way? (it may be irrelavent)
Provider p = new SunPKCS11(new ByteArrayInputStream(config.getBytes()));
Security.insertProviderAt(p, 1);
KeyStore.Builder builder = null;
builder = KeyStore.Builder.newInstance(""PKCS11"", p, 
    new KeyStore.CallbackHandlerProtection(new UtilTarjetas().new CustomCallbackHandler()));
cardKeyStore = builder.getKeyStore();

Then, maybe you can try the approach here:
https://github.com/avocado-framework/avocado/issues/1112
That is:

apahim commented on 7 Apr 2016
@will-Do, nss folks were able to track this issue down and seems like they are going to consider a change in NSS_InitContext(), which should include a SECMOD_RestartModules(PR_FALSE) after a fork(). Anyway, they also provided a better workaround than the one I provided you. If you set the environment variable NSS_STRICT_NOFORK to DISABLED then the code is expected to work. It worked for me and I'd like to check if it works for you as well. Looking forward to see your results.

Also, some sources suggests that it may be a token or slot problem. You can try to change slot index to 0, or -1.
","660","<java><macos><firefox><pkcs#11>","0","0","2","2017-11-20 14:12:36","","0","","1009046","","2017-11-16 20:06:07","2017-11-10 20:08:27",""
"47230371","SunPKCS11 provider in MacOS for Firefox","I managed to get the SunPKCS11 to work with Firefox ESR 52.0 under Windows, but I am unable to get it to load in MacOS. I've already tried several different configuration and directly loading it via PKCS11 but nothing worked, can anyone give me some pointer?
pkcs11.cfg configuration as follow:
name = FirefoxKeyStore
library = ""/Applications/Firefox.app/Contents/MacOS/fixed-for-java-runtime/libsoftokn3.dylib""
attributes = compatibility
nssArgs = ""configdir='/Users/helloworld/Library/Application Support/Firefox/Profiles/wasdwasd.default-1453211557245' certPrefix='' keyPrefix='' secmod='secmod.db' flags='readOnly' ""
slot = 2

Then in Java, I've tried to load it like this:
FileInputStream fis = new FileInputStream(""pkcs11.cfg"");
Provider provider = new SunPKCS11(fis);
Security.addProvider(provider);

However this immediately gives me the following error:
sunpkcs11: Initializing PKCS#11 library /Applications/Firefox.app/Contents/MacOS/fixed-for-java-runtime/libsoftokn3.dylib
sunpkcs11: Multi-threaded initialization failed: sun.security.pkcs11.wrapper.PKCS11Exception: CKR_DEVICE_ERROR
Exception in thread ""main"" java.security.ProviderException: Initialization failed
at sun.security.pkcs11.SunPKCS11.<init>(SunPKCS11.java:376)
at sun.security.pkcs11.SunPKCS11.<init>(SunPKCS11.java:107)

You maybe asking why do I load the .dylib from the weird folder, that's because I used install_name_tool in MacOS to change the @executable_path to @loader_path in order to get the library dependency to work (since I'm trying to run this in Eclipse rather than from Firefox itself).
I also tried to use the solution suggested here: How to finalize SunPKCS11 Provider after it is initialized? and it was a no-go either... I get the same error.
As well as trying various different configuration settings mentioned here: https://developer.mozilla.org/en-US/docs/Mozilla/Projects/NSS/PKCS11/Module_Specs#Softoken_Specific_Parameters
EDIT1
I tried the method mentioned by @FaithReaper but it still throw the same error. I tried changing the slot value to 0, 1 or -1 and result the same. It looks like there are problem loading the underlaying PKCS11 object.
Caused by: sun.security.pkcs11.wrapper.PKCS11Exception: CKR_DEVICE_ERROR
at sun.security.pkcs11.wrapper.PKCS11.C_Initialize(Native Method)
at sun.security.pkcs11.wrapper.PKCS11$SynchronizedPKCS11.C_Initialize(PKCS11.java:1545)
at sun.security.pkcs11.wrapper.PKCS11.getInstance(PKCS11.java:157)
at sun.security.pkcs11.SunPKCS11.<init>(SunPKCS11.java:330)

I dunno if this would help, but I ran the modutil on the FireFox profile and is dumping this info:
modutil -dbdir ""/Users/eto/Library/Application Support/Firefox/Profiles/ew2g332o.default-1453211557245"" -rawlist

library= name=""NSS Internal PKCS #11 Module"" 
parameters=""configdir=/Users/eto/Library/Application Support/Firefox/Profiles/ew2g332o.default-1453211557245 certPrefix= keyPrefix= secmod=secmod.db flags=readOnly "" 
NSS=""Flags=internal,critical trustOrder=75 cipherOrder=100 slotParams=(1={slotFlags=[RSA,DSA,DH,RC2,RC4,DES,RANDOM,SHA1,MD5,MD2,SSL,TLS,AES,Camellia,SEED,SHA256,SHA512] askpw=any timeout=30})""


Listing of PKCS #11 Modules

NSS Internal PKCS #11 Module
   uri: pkcs11:library-manufacturer=Mozilla%20Foundation;library-description=NSS%20Internal%20Crypto%20Services;library-version=3.33
  slots: 2 slots attached    status: loaded
slot: NSS Internal Cryptographic Services  token: NSS Generic Crypto
  Services    uri:
  pkcs11:token=NSS%20Generic%20Crypto%20Services;manufacturer=Mozilla%20Foundation;serial=0000000000000000;model=NSS%203
slot: NSS User Private Key and Certificate Services    token: NSS
  Certificate DB      uri:
  pkcs11:token=NSS%20Certificate%20DB;manufacturer=Mozilla%20Foundation;serial=0000000000000000;model=NSS%203


","The libraries provided by Firefox in Mac OS X might actually be completely broken or non-functional if execute outside of FireFox.
After trying many different combination of configuration and ways, I finally got it working by NOT using the libraries from Firefox...
Here is the step by step ways to get it to work:

Install homebrew in your Mac 
Run brew install nss
Run brew install nspr
You may need to manually link them with brew link nss and brew link nspr
In the configuration file, you need to point it to your homebrew libsoftokn3.dylib, like so library = /usr/local/opt/nss/lib/libsoftokn3.dylib

Then your Java code should be able to load the Firefox keystore under Mac OS X... I've filed a bug here. The ticket contains a working sample code on how to instantiate the PKCS11, load the Firefox keystore and list the aliases from the store.
This was definitely a nightmare working with Firefox... but at least I got it working... Who would've thought the libraries they provided doesn't work (but it worked in Windows!)? :P
For completeness, I've included the sample code directly in this post as well:
import java.io.ByteArrayInputStream;
import java.security.KeyStore;
import java.security.Provider;
import java.security.Security;
import java.util.Collections;

public class Sample {

    private KeyStore load(String lib, String profile) throws Exception
    {
        String config = ""library = "" + lib + ""\n"" + 
                ""name = FirefoxKeyStore\n"" + 
                ""attributes = compatibility\n"" + 
                ""nssArgs = \""configDir='"" + profile + ""' certPrefix='' keyPrefix='' secmod='secmod.db' flags='readOnly,forceOpen,optimizeSpace' \""\n"" + 
                ""slot = 2\n"";

        ByteArrayInputStream bais = new ByteArrayInputStream(config.getBytes());
        Provider provider = new sun.security.pkcs11.SunPKCS11(bais);
        Security.addProvider(provider);

        return KeyStore.getInstance(""PKCS11"");
    }

    public static void main(String[] args) throws Exception {

        Sample s = new Sample();

        String profile = ""/Users/blah/Library/Application Support/Firefox/Profiles/yougottachangethis"";
        String[] libs = { 
            //""/Applications/Firefox.app/Contents/MacOS/libsoftokn3.dylib"",
            ""/usr/local/opt/nss/lib/libsoftokn3.dylib""
        };

        for (String lib : libs) {
            System.out.println(""TRYING >>> "" + lib);
            try {
                KeyStore ks1 = s.load(lib, profile);

                ks1.load(null, null);
                for (String alias : Collections.list(ks1.aliases())) {
                    System.out.println(alias);  
                }
            }
            catch (Exception e)
            {
                e.printStackTrace();
            }
        }
    }
}

Here is the output of the otool from Mac (included for FaithReaper's comments):
otool -L libsoftokn3.dylib
libsoftokn3.dylib:
/usr/local/opt/nss/lib/libsoftokn3.dylib (compatibility version 1.0.0, current version 1.0.0)
/usr/lib/libsqlite3.dylib (compatibility version 9.0.0, current version 253.0.0)
/usr/local/Cellar/nss/3.34/lib/libnssutil3.dylib (compatibility version 1.0.0, current version 1.0.0)
/usr/local/opt/nspr/lib/libplc4.dylib (compatibility version 1.0.0, current version 1.0.0)
/usr/local/opt/nspr/lib/libplds4.dylib (compatibility version 1.0.0, current version 1.0.0)
/usr/local/opt/nspr/lib/libnspr4.dylib (compatibility version 1.0.0, current version 1.0.0)
/usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1238.0.0)

","660","<java><macos><firefox><pkcs#11>","0","0","2","2017-11-20 14:12:36","","0","","1009046","","2017-11-16 20:06:07","2017-11-10 20:08:27",""
"35628599","Read text file from smart card with pkcs#11","I have a blank smart card (SLE66CX322P, Cardos 4.3b) and a card reader/writer (Gemalto CT 40). Using a software I can initialize the card, generate keys, certificates etc. I also can create a simple ASCII file with some text which will be stored on the smart card. My qustion is, how can I read out the content of this ASCII file in C/C++ using the pkcs#11 API?
Here comes what I have tried so far (using also Qt):
---------- cardreader.h ------------
#ifndef CARDREADER_H
#define CARDREADER_H

#include ""cm-pkcs11.h""
#include <QCoreApplication>
#include <QObject>
#include <QtDebug>

class CardReader: public QObject
{
    Q_OBJECT

private:

    CK_RV rv;
    CK_ULONG slotCount;
    CK_SLOT_ID slotIds[10];
    CK_SLOT_ID slotId;
    CK_SESSION_HANDLE session;
    CK_TOKEN_INFO_PTR info;

    void readCard();

public:

    explicit CardReader(QObject *parent = 0);
};

#endif // CARDREADER_H

------- cardreader.cpp ----------
#include ""cardreader.h""

CardReader::CardReader(QObject *parent) : QObject(parent)
{
    readCard();
}

/***********************************************************************/

void CardReader::readCard()
{
    rv = C_Initialize(NULL_PTR);

    slotCount = 10;
    rv = C_GetSlotList(CK_TRUE, slotIds, &slotCount);
    qWarning() << ""Found"" << slotCount << ""slots"";

    if (rv != CKR_OK || slotCount < 1)
    {
        qWarning() << ""No slots found -> exit"";
        return;
    }

    slotId = slotIds[0];

    rv = C_OpenSession(slotId, CKF_SERIAL_SESSION|CKF_RW_SESSION, NULL_PTR, NULL_PTR, &session);

    if (rv != CKR_OK)
    {
        qWarning() << ""Sessions could not be opened -> exit"";
        qWarning() << ""RV (as hex value) = "" << QString(""%1"").arg(rv, 0, 16);
        return;
    }

    /*********************************************************************/

    CK_OBJECT_CLASS dataClass = CKO_DATA;
    CK_OBJECT_HANDLE handleObject;
    CK_UTF8CHAR label[] = {""MyLabel""};
    CK_ULONG ulCount = 4ul;
    CK_CHAR application[] = {""TestApplication""};
    CK_BYTE dataValue[] = {""MyData""};
    CK_BBOOL valid = CK_TRUE;
    CK_ATTRIBUTE dataTemp[] =
    {
        {CKA_CLASS, &dataClass, sizeof(dataClass)},
        {CKA_VALUE, dataValue, sizeof(dataValue)},
        {CKA_LABEL, label, sizeof(label)-1},
        //{CKA_APPLICATION, application, sizeof(application)}
        {CKA_TOKEN, &valid, sizeof(true)}
    };

    rv = C_FindObjectsInit(session, dataTemp, 0);
    if (rv != CKR_OK)
    {
        qWarning() << ""C_FindObjectsInit Error -> exit"";
        qWarning() << ""C_FindObjectsInit Error"" << QString(""%1"").arg(rv, 0, 16);
        return;
    }


    while (1)
    {
        rv = C_FindObjects(session, &handleObject, 1, &ulCount);
        qWarning() << ""C_FindObjects Result ="" << QString(""%1"").arg(rv, 0, 16) << "", count ="" << ulCount;
        if (rv != CKR_OK || ulCount == 0)
            break;

        rv = C_GetAttributeValue(session, handleObject, dataTemp, ulCount);

        if (rv != CKR_OK)
        {
            qWarning() << ""C_GetAttributeValue error -> exit"";
            qWarning() << ""RV (as hex value) = "" << QString(""%1"").arg(rv, 0, 16) << "", count = "" << ulCount;
            return;
        }

        qWarning() << (const char *) dataTemp[0].pValue;
        qWarning() << (const char *) dataTemp[1].pValue;
        qWarning() << (const char *) dataTemp[2].pValue;
        qWarning() << (const char *) dataTemp[3].pValue;
    }
}

---------- main.cpp ----------
#include ""cardreader.h""

int main(int argc, char *argv[])
{
    QCoreApplication a(argc, argv);
    CardReader c;

    return a.exec();
}

The result is that the block
        qWarning() << (const char *) dataTemp[0].pValue;
        qWarning() << (const char *) dataTemp[1].pValue;
        qWarning() << (const char *) dataTemp[2].pValue;
        qWarning() << (const char *) dataTemp[3].pValue;

is printed four times in the console but always with MyLabel and MyData as result which I have specified at the beginning of CardReader::readCard(). The content of the text file on the smart card is different of course, but is not shown in the output unfortunately.
I'd like also to mention that I was also able to use the C_CreateObject() function. This generated a second ASCII file on the smart card. But this second file I could not read out either with my code.
","The most probable cause:

Your ulCount variable gets overwritten by C_FindObjects() to 1.
You need to re-assign it to 4 again before calling the C_GetAttributeValue.
This way your code reads only the first attribute in the template.


Some additional (random) notes:

As you do not call C_Login(), you can view/access only public objects (objects with set CKA_PRIVATE are hidden for you).
Zero ulCount argument for C_FindObjectsInit() causes that your code enumerates all token objects -- you probably wanted the CKA_CLASS and CKA_LABEL filter to be effective.
I would recommend not to use the same template for C_FindObjectsInit() and C_GetAttributeValue()
Your dataValue buffer is quite small -- are you sure that the value will fit?

Good luck!
","647","<c++><security><smartcard><pkcs#11>","1","1","1","2016-02-28 22:36:12","35676154","0","1","4117203","","2016-02-25 13:33:08","2016-02-25 13:25:47",""
"12175352","NSS not working with Java 7 update 6","I was using jre6 with NSS (version 3.4.12) in my project and it was working fine.
I recently updated to jre7 update 6 (Released 2012 Aug 14th), and suddenly the application stopped working giving following exception.
java.lang.UnsatisfiedLinkError: sun.security.pkcs11.wrapper.PKCS11.C_GetOperationState(J)[B
    at sun.security.pkcs11.wrapper.PKCS11.C_GetOperationState(Native Method)
    at sun.security.pkcs11.P11Digest.clone(P11Digest.java:308)
    at java.security.MessageDigest$Delegate.clone(Unknown Source)
    at sun.security.ssl.HandshakeHash.cloneDigest(Unknown Source)
    at sun.security.ssl.HandshakeHash.getMD5Clone(Unknown Source)
    at sun.security.ssl.HandshakeMessage$Finished.getFinished(Unknown Source)
    at sun.security.ssl.HandshakeMessage$Finished.<init>(Unknown Source)
    at sun.security.ssl.ClientHandshaker.sendChangeCipherAndFinish(Unknown Source)
    at sun.security.ssl.ClientHandshaker.serverHelloDone(Unknown Source)
    at sun.security.ssl.ClientHandshaker.processMessage(Unknown Source)
    at sun.security.ssl.Handshaker.processLoop(Unknown Source)
    at sun.security.ssl.Handshaker.process_record(Unknown Source)
    at sun.security.ssl.SSLSocketImpl.readRecord(Unknown Source)
    at sun.security.ssl.SSLSocketImpl.performInitialHandshake(Unknown Source)
    at sun.security.ssl.SSLSocketImpl.startHandshake(Unknown Source)
    at sun.security.ssl.SSLSocketImpl.startHandshake(Unknown Source)

If i use jre 7 update 5, and its working fine !!!  I went through the release notes of update 6 http://www.oracle.com/technetwork/java/javase/7u6-relnotes-1729681.html and i cant find anything that might have caused.. 
Any help is appreciated.
","There were changes in SunPKCS11 for RSA in Java 7. But I am not sure that above behaviour is happening because of that. 
","643","<java><nss><pkcs#11>","0","0","3","2012-09-18 14:05:02","12478644","1","","","","","2012-08-29 09:59:25",""
"12175352","NSS not working with Java 7 update 6","I was using jre6 with NSS (version 3.4.12) in my project and it was working fine.
I recently updated to jre7 update 6 (Released 2012 Aug 14th), and suddenly the application stopped working giving following exception.
java.lang.UnsatisfiedLinkError: sun.security.pkcs11.wrapper.PKCS11.C_GetOperationState(J)[B
    at sun.security.pkcs11.wrapper.PKCS11.C_GetOperationState(Native Method)
    at sun.security.pkcs11.P11Digest.clone(P11Digest.java:308)
    at java.security.MessageDigest$Delegate.clone(Unknown Source)
    at sun.security.ssl.HandshakeHash.cloneDigest(Unknown Source)
    at sun.security.ssl.HandshakeHash.getMD5Clone(Unknown Source)
    at sun.security.ssl.HandshakeMessage$Finished.getFinished(Unknown Source)
    at sun.security.ssl.HandshakeMessage$Finished.<init>(Unknown Source)
    at sun.security.ssl.ClientHandshaker.sendChangeCipherAndFinish(Unknown Source)
    at sun.security.ssl.ClientHandshaker.serverHelloDone(Unknown Source)
    at sun.security.ssl.ClientHandshaker.processMessage(Unknown Source)
    at sun.security.ssl.Handshaker.processLoop(Unknown Source)
    at sun.security.ssl.Handshaker.process_record(Unknown Source)
    at sun.security.ssl.SSLSocketImpl.readRecord(Unknown Source)
    at sun.security.ssl.SSLSocketImpl.performInitialHandshake(Unknown Source)
    at sun.security.ssl.SSLSocketImpl.startHandshake(Unknown Source)
    at sun.security.ssl.SSLSocketImpl.startHandshake(Unknown Source)

If i use jre 7 update 5, and its working fine !!!  I went through the release notes of update 6 http://www.oracle.com/technetwork/java/javase/7u6-relnotes-1729681.html and i cant find anything that might have caused.. 
Any help is appreciated.
","Bug http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=7195931 opened on jre.
","643","<java><nss><pkcs#11>","0","0","3","2012-09-18 14:05:02","12478644","1","","","","","2012-08-29 09:59:25",""
"12175352","NSS not working with Java 7 update 6","I was using jre6 with NSS (version 3.4.12) in my project and it was working fine.
I recently updated to jre7 update 6 (Released 2012 Aug 14th), and suddenly the application stopped working giving following exception.
java.lang.UnsatisfiedLinkError: sun.security.pkcs11.wrapper.PKCS11.C_GetOperationState(J)[B
    at sun.security.pkcs11.wrapper.PKCS11.C_GetOperationState(Native Method)
    at sun.security.pkcs11.P11Digest.clone(P11Digest.java:308)
    at java.security.MessageDigest$Delegate.clone(Unknown Source)
    at sun.security.ssl.HandshakeHash.cloneDigest(Unknown Source)
    at sun.security.ssl.HandshakeHash.getMD5Clone(Unknown Source)
    at sun.security.ssl.HandshakeMessage$Finished.getFinished(Unknown Source)
    at sun.security.ssl.HandshakeMessage$Finished.<init>(Unknown Source)
    at sun.security.ssl.ClientHandshaker.sendChangeCipherAndFinish(Unknown Source)
    at sun.security.ssl.ClientHandshaker.serverHelloDone(Unknown Source)
    at sun.security.ssl.ClientHandshaker.processMessage(Unknown Source)
    at sun.security.ssl.Handshaker.processLoop(Unknown Source)
    at sun.security.ssl.Handshaker.process_record(Unknown Source)
    at sun.security.ssl.SSLSocketImpl.readRecord(Unknown Source)
    at sun.security.ssl.SSLSocketImpl.performInitialHandshake(Unknown Source)
    at sun.security.ssl.SSLSocketImpl.startHandshake(Unknown Source)
    at sun.security.ssl.SSLSocketImpl.startHandshake(Unknown Source)

If i use jre 7 update 5, and its working fine !!!  I went through the release notes of update 6 http://www.oracle.com/technetwork/java/javase/7u6-relnotes-1729681.html and i cant find anything that might have caused.. 
Any help is appreciated.
","Sun has fixed this issue. 
Its scheduled for jre7 u9. http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=7195931
","643","<java><nss><pkcs#11>","0","0","3","2012-09-18 14:05:02","12478644","1","","","","","2012-08-29 09:59:25",""
"53745019","PKCS#11 unwrap private key to HSM","I've learned that I cannot simply transfer a private key to my HSM via PKCS#11, I need to wrap it first and then unwrap it on the HSM. So I temporarily create a DES3 key on our HSM, then I'd like to wrap (encrypt) my RSA private key with it, then I want to unwrap it on the HSM.
My code looks like this:
    // Create temporary DES3 key for wrapping/unwrapping
    var tempKeyAttributes = new List<ObjectAttribute>();
    tempKeyAttributes.Add(new ObjectAttribute(CKA.CKA_CLASS, CKO.CKO_SECRET_KEY));
    tempKeyAttributes.Add(new ObjectAttribute(CKA.CKA_KEY_TYPE, CKK.CKK_DES3));
    tempKeyAttributes.Add(new ObjectAttribute(CKA.CKA_ENCRYPT, true));
    tempKeyAttributes.Add(new ObjectAttribute(CKA.CKA_UNWRAP, true));
    var tempKey = session.GenerateKey(new Mechanism(CKM.CKM_DES3_KEY_GEN), tempKeyAttributes);

    // Encrypt (wrap) the RSA private key
    var encryptedPrivateKeyParamsD = session.Encrypt(new Mechanism(CKM.CKM_DES3_ECB), tempKey, privateKeyParams.D);

    // Define how the new RSA private key should look like on the HSM
    var privateKeyAttributes = new List<ObjectAttribute>();
    privateKeyAttributes.Add(new ObjectAttribute(CKA.CKA_CLASS, CKO.CKO_PRIVATE_KEY));
    privateKeyAttributes.Add(new ObjectAttribute(CKA.CKA_KEY_TYPE, CKK.CKK_RSA));
    [...]

    // Unwrap the private key onto the HSM
    var privateKeyHandle = session.UnwrapKey(new Mechanism(CKM.CKM_DES3_ECB), tempKey, encryptedPrivateKeyParamsD, privateKeyAttributes);

This doesn't work, it fails with CKR_INVALID_MECHANISM.
I'm pretty sure the problem is encryptedPrivateKeyParamsD, I should somehow encrypt the whole key instead. But how to? What is the correct format? I can't find anything in the docs about it :-(
Any ideas how to fix this? I simply want to put an existing RSA private key programmatically onto our HSM using PKCS#11.
","I've found the answer: the format which must be used on SafeNet Luna HSM is PKCS#8 in binary DER encoding. I used BouncyCastle to bring my input data into the correct format:
var unencryptedPrivateKey = PrivateKeyInfoFactory.CreatePrivateKeyInfo(
        new RsaPrivateCrtKeyParameters(
            new BigInteger(1, privateKeyParams.Modulus),
            new BigInteger(1, privateKeyParams.Exponent),
            new BigInteger(1, privateKeyParams.D),
            new BigInteger(1, privateKeyParams.P),
            new BigInteger(1, privateKeyParams.Q),
            new BigInteger(1, privateKeyParams.DP),
            new BigInteger(1, privateKeyParams.DQ),
            new BigInteger(1, privateKeyParams.InverseQ))).GetEncoded();

var result = new MemoryStream();
session.Encrypt(new Mechanism(CKM.CKM_DES3_CBC_PAD, iv), tempKey, new MemoryStream(unencryptedPrivateKey), result);
var encryptedPrivateKey = result.ToArray();

[...]

var privateKeyHandle = session.UnwrapKey(new Mechanism(CKM.CKM_DES3_CBC_PAD, iv), tempKey, encryptedPrivateKey, privateKeyAttributes);

","638","<pkcs#11><pkcs11interop>","1","1","1","2018-12-13 11:41:43","53761064","2","1","","","","2018-12-12 14:17:10",""
"35812730","A virtual smart card implementation","I'm currently trying to write an application that should fool an OS into believing there's a PKCS#11 compliant smartcard plugged in, and then forward PKCS#11 requests to a server.
I stumbled upon this project https://frankmorgner.github.io/vsmartcard/virtualsmartcard/README.html which looks promising, but i was wondering if there was an easier solution to do so ?
Thanks a lot for your help.
","(Transcript of discussion in comments)
You do not need a virtual smart card to implement a PKCS#11 provider.
All you need is to develop a library implementing the PKCS#11 API which leverages your server.
The clients then can use this library as any other PKCS#11 provider.
Good luck!
","635","<smartcard><pkcs#11>","2","2","2","2016-03-28 20:37:56","","4","1","","","","2016-03-05 10:04:04",""
"35812730","A virtual smart card implementation","I'm currently trying to write an application that should fool an OS into believing there's a PKCS#11 compliant smartcard plugged in, and then forward PKCS#11 requests to a server.
I stumbled upon this project https://frankmorgner.github.io/vsmartcard/virtualsmartcard/README.html which looks promising, but i was wondering if there was an easier solution to do so ?
Thanks a lot for your help.
","There are several PKCS#11 proxies: https://github.com/ANSSI-FR/caml-crush for example or have a look here: https://github.com/PeculiarVentures/graphene#related
And repeating the mantra: there's no such thing as ""PKCS#11 compatible smart card"" the same way there is no ""PC/SC compatible smart card reader"". Both are host-side software API-s that have no relation to the hardware implementation.
","635","<smartcard><pkcs#11>","2","0","2","2016-03-28 20:37:56","","4","1","","","","2016-03-05 10:04:04",""
"39233560","Verify ECDSA signature from PyKCS11","I have a python program which uses PyKCS11, a python wrapper for pkcs11 interface. I can sign data with a ECC private key (Mechanism CKM_ECDSA) that is stored on a HSM and that is accessed by PyKCS11.
What I now want is to verify with openssl the ECDSA signature by the corresponding public key. This public key is contained in a x509 (NewCert.pem) which was created out of the private key in the HSM.
I tested many ways to verify the signature properly, but I didn't succeed.
openssl dgst -ecdsa-with-SHA1 -verify <(openssl x509 -noout -pubkey -in NewCert.pem) -signature <(cat sign | base64 -d) file

The file 'signature' contains the base64 encoded signature. And the file 'file' the plain data.
Thank you
","Finally I found a solution for my problem.
I)
The signature output of PyKCS11 is the concatenation of the r and s value of the ECDSA signature. It is not formatted in ASN1 style. This was the first problem why verification with openssl is not possible, because the latter requires this format.
II)
So I wrote a function that formats the PyKCS11 output to ASN1 conformity and saves the binary signature output to a file.
III)
In order to use hashing functions you first have to hash the data or the file to be signed. This can be done in Python with the command digest() of hashlib. After this you give this binary hash of the data as input to PyKCS11 and create the signature.
IV)
Verification of the hashed ECDSA signature can be done with the following command in openssl:
openssl dgst -sha384 -verify pubkey -signature file.sign file

Make sure that pubkey is the EC public key from the corresponding x509 certificate (not the x509 itself). And file.sign means to be the binary file which contains the ECDSA signature that represents the binary hash of the original data (see step III).
Hope this helps for somebody else.
","635","<pkcs#11><pyopenssl><ecdsa>","0","1","1","2016-09-06 14:32:22","39351631","1","1","608639","","2016-08-31 01:00:44","2016-08-30 17:22:43",""
"8491947","NSS PKCS11 not working well as jsse provider","I'm using Network Security Services as my Sun PKCS#11 provider for my Java application and I'm experiencing some undesired behavior. 
reinserting the same trusted certificate into the Keystore will delete the trust attributes that were successfully set when the certificate was initially inserted.
Here is some incomplete code to demonstrate the essence of the problem:
Provider p = new SunPKCS11(pkcs11ConFile);

Security.addProvider(p);

KeyStore keystore = KeyStore.getInstance(""PKCS11"");

keystore.load(null, pwd);

pkcs11Keystore.setCertificateEntry(alias, cert);

//at this point, when I use certutil.exe to list the keystore certificate I can see 
//the certificate listed with attributes ""CT,C,C"" for SSL,S/MIME,JAR/XPI respectively.

keystore.deleteEntry(alias);

keystore.setCertificateEntry(alias, cert);

//now when I run the same certutil.exe command I see empty trust attributes i.e. "",,"".

I'm still able to reload the same keystore (and certificate) and SSL authentication works flawlessly however, when the app is restarted and the keystore is reloaded again, the certificate is unavailable in the list of trusted aliases. 
Why things fail to work only when the app is restarted is also a mystery to me.
I read something that seems to be related on http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6298106 however it doesn't seem to apply 100% and I don't understand the internals of nss to make complete sense of it.
Does anyone understand this behavior?  
thanks, Mike
","","626","<java><security><fips><nss><pkcs#11>","1","","0","2012-05-16 23:01:03","","1","","411902","","2012-05-16 23:01:03","2011-12-13 15:43:22",""
"46883464","Delphi, Indy, OpenSSL, cryptografic card - Access violation in libeay32.dll","I am writing an application in Delphi 2007 that sends data to web service, I use Indy 10 and OpenSSL. It works great when I use certificates in .p12 files. Now I want to use certificates stored on Gemalto (IDPrimePKCS11.dll, IDPrimePKCS1164.dll) and Athena (asepkcs32.dll, asepkcs64.dll) cryptographic cards.
I built in Visual Studio, openssl and engine pkcs11 from OpenSC project.
When I connect to a web service, there is a problem, the log of making a connection below:
SSL status: ""before/connect initialization""
SSL status: ""SSLv3 write client hello A""
SSL status: ""SSLv3 read server hello A""
AOk = False
/C=US/O=GeoTrust Inc./CN=GeoTrust Global CA
/C=US/O=GeoTrust Inc./CN=GeoTrust SSL CA - G3
2022-05-20 23:36:50
AOk = True
/C=US/O=GeoTrust Inc./CN=GeoTrust SSL CA - G3
/C=PL/ST=mazowieckie/L=Warszawa/O=Ministerstwo Spraw Wewnetrznych/OU=IT/CN=*.obywatel.gov.pl
2017-12-25 01:59:59
SSL status: ""SSLv3 read server certificate A""
SSL status: ""SSLv3 read server certificate request A""
SSL status: ""SSLv3 read server done A""
Access violation at address 6865A57C in module 'libeay32.dll'. Read of address 37313032
EAccessViolation

I know that I should look for errors in my own code. 
I do not know what I should do next, so I ask You for help explaining the error.
I use openssl function in the following order:
ENGINE_load_builtin_engines
ENGINE_by_id returns pointer to engine
ENGINE_register_complete returns 1
ENGINE_get_id returns pkcs11 (engine id)
ENGINE_get_name returns pkcs11 engine (engine name)
ENGINE_ctrl_cmd_string  (MODULE_PATH) returns 1
ENGINE_ctrl_cmd_string  (PIN) returns 1
ENGINE_init returns 1
ENGINE_load_private_key returns PEVP_PKEY <> nil
SSL_CTX_use_certificate returns 1
SSL_CTX_use_PrivateKey returns 1
SSL_CTX_check_private_key returns 1
I tried to use ENGINE_load_ssl_client_cert, but I can not.
As I noticed, in struct ENGINE, field load_ssl_client_cert is nil.
I do not know if this is normal.
I have 2 cards and in all there is the same effect.
I read the certificate from the attributes of the card.
If anyone has an idea for a solution, please help.
Here's the code
// changes in IdSSLOpenSSLHeaders

type
  PENGINE_CMD_DEFN = ^ENGINE_CMD_DEFN;                                          
  ENGINE_CMD_DEFN = record                                                      
    cmd_num: TIdC_UINT;
    cmd_name: PAnsiChar;
    cmd_desc: PAnsiChar;
    cmd_flags: TIdC_UINT;
  end;

  ENGINE = record                                                             
    id: PIdAnsiChar;
    name: PIdAnsiChar;
    rsa_meth: PRSA_METHOD;
    dsa_meth: Pointer;
    dh_meth: Pointer;
    ecdh_meth: Pointer;
    ecdsa_meth: Pointer;
    rand_meth: Pointer;
    store_meth: Pointer;
    ciphers: ENGINE_CIPHERS_PTR;
    digests: ENGINE_DIGESTS_PTR;
    pkey_meths: ENGINE_PKEY_METHS_PTR;
    pkey_asn1_meths: ENGINE_PKEY_ASN1_METHS_PTR;
    _destroy: ENGINE_GEN_INT_FUNC_PTR;
    init: ENGINE_GEN_INT_FUNC_PTR;
    finish: ENGINE_GEN_INT_FUNC_PTR;
    ctrl: ENGINE_CTRL_FUNC_PTR;
    load_privkey: ENGINE_LOAD_KEY_PTR;
    load_pubkey: ENGINE_LOAD_KEY_PTR;
    load_ssl_client_cert: ENGINE_SSL_CLIENT_CERT_PTR;
    cmd_defns: PENGINE_CMD_DEFN;
    flags: TIdC_INT;
    struct_ref: TIdC_INT;
    funct_ref: TIdC_INT;
    ex_data: CRYPTO_EX_DATA;
    prev: PENGINE;
    next: PENGINE;
  end;

var
  {$EXTERNALSYM OPENSSL_load_builtin_modules}
  OPENSSL_load_builtin_modules: procedure; cdecl = nil;
  {$EXTERNALSYM ENGINE_get_first}
  ENGINE_get_first : function : PEngine cdecl = nil;
  {$EXTERNALSYM ENGINE_get_last}
  ENGINE_get_last : function : PEngine cdecl = nil;
  {$EXTERNALSYM ENGINE_get_next}
  ENGINE_get_next : function(e: PEngine) : PEngine cdecl = nil;
  {$EXTERNALSYM ENGINE_get_prev}
  ENGINE_get_prev : function(e: PEngine) : PEngine cdecl = nil;
  {$EXTERNALSYM ENGINE_by_id}
  ENGINE_by_id : function(id: PAnsiChar) : PEngine cdecl = nil;
  {$EXTERNALSYM ENGINE_load_dynamic}
  ENGINE_load_dynamic : procedure cdecl = nil;
  {$EXTERNALSYM ENGINE_load_builtin_engines}
  ENGINE_load_builtin_engines : procedure cdecl = nil;
  {$EXTERNALSYM ENGINE_load_capi}
  ENGINE_load_capi : procedure cdecl = nil;
  {$EXTERNALSYM ENGINE_cleanup}
  ENGINE_cleanup : procedure cdecl = nil;
  {$EXTERNALSYM ENGINE_register_complete}
  ENGINE_register_complete : function(e: PEngine) : Integer cdecl = nil;
  {$EXTERNALSYM ENGINE_register_all_complete}
  ENGINE_register_all_complete : function : Integer cdecl = nil;
  int ENGINE_register_all_complete(void);
  {$EXTERNALSYM ENGINE_ctrl_cmd_string}
  ENGINE_ctrl_cmd_string : function(e: PEngine; const cmd_name: PAnsiChar; const arg: PIdAnsiChar; cmd_optional: Integer) : TIdC_Int cdecl = nil;
  {$EXTERNALSYM ENGINE_free}
  ENGINE_free : function(e: PEngine) : Integer cdecl = nil;
  {$EXTERNALSYM ENGINE_get_id}
  ENGINE_get_id : function(const e: PEngine) : PAnsiChar cdecl = nil;
  {$EXTERNALSYM ENGINE_get_name}
  ENGINE_get_name : function(const e: PEngine) : PAnsiChar cdecl = nil;
  {$EXTERNALSYM ENGINE_init}
  ENGINE_init : function(e: PEngine) : Integer cdecl = nil;
  {$EXTERNALSYM ENGINE_finish}
  ENGINE_finish : function(e: PEngine) : Integer cdecl = nil;
  {$EXTERNALSYM ERR_load_ENGINE_strings}
  ERR_load_ENGINE_strings : procedure cdecl = nil;
  {$EXTERNALSYM ENGINE_load_private_key}
  ENGINE_load_private_key : function(e: PEngine; const key_id: PIdAnsiChar;
                                     ui_method: PUI_METHOD; callback_data : Pointer) : PEVP_PKEY cdecl = nil;
  {$EXTERNALSYM ENGINE_load_public_key}

  ENGINE_load_public_key : function(e: PEngine; const key_id: PIdAnsiChar;
                                    ui_method: PUI_METHOD; callback_data : Pointer) : PEVP_PKEY cdecl = nil;
  {$EXTERNALSYM ENGINE_load_ssl_client_cert}

  ENGINE_load_ssl_client_cert : function(e: PEngine; s: PSSL;
                                         ca_dn: PSTACK_OF_X509_NAME; var pcert : PPX509;
                                         var ppkey : PPEVP_PKEY; var pother : PPSTACK_OF_X509;
                                         ui_method: PUI_METHOD; callback_data : Pointer) : TIdC_Int cdecl = nil;
  {$EXTERNALSYM ENGINE_set_default}
  ENGINE_set_default : function(e: PEngine; flags: Cardinal) : Integer cdecl = nil;
  {$EXTERNALSYM UI_OpenSSL}
  UI_OpenSSL : function : PUI_METHOD cdecl = nil;
  {$EXTERNALSYM ERR_load_UI_strings}
  ERR_load_UI_strings : procedure cdecl = nil;
  {$EXTERNALSYM ASN1_TIME_to_generalizedtime}
  ASN1_TIME_to_generalizedtime: function(t: PASN1_TIME; _out: PPASN1_GENERALIZEDTIME): PASN1_GENERALIZEDTIME cdecl = nil;
  {$EXTERNALSYM CONF_modules_load_file}
  CONF_modules_load_file: function(const  _filename: PIdAnsiChar; const  _appname: PIdAnsiChar;  s: TIdC_LONG): TIdC_Int; cdecl = nil;

// changes in IdSSLOpenSSL
  TIdSSLOptions = class(TPersistent)
  protected
    ...
    fPrivateKey : PEVP_PKEY;                                                   
    fCertificate : PX509;                      
    fEngine : PEngine;                           
    ...
  public
    ...
    property PrivateKey: PEVP_PKEY read fPrivateKey write fPrivateKey;   
    property Certificate: PX509 read fCertificate write fCertificate;    
    property Engine: PEngine read fEngine write fEngine;                 
  end
  TIdSSLContext = class(TObject)
  protected
    ...
    fPrivateKey : PEVP_PKEY;              
    fCertificate : PX509;          
    fEngine : PEngine; 
    ...       
  public
    ...
    property PrivateKey: PEVP_PKEY read fPrivateKey write fPrivateKey;    
    property Certificate: PX509 read fCertificate write fCertificate; 
    property Engine: PEngine read fEngine write fEngine;  
  end;
function IndySSL_CTX_use_PrivateKey_Engine(ctx: PSSL_CTX; const AEVP_PrivateKey: PEVP_PKEY): TIdC_INT;
begin
  Result := 0;
  if not Assigned(AEVP_PrivateKey) then begin
      SSLerr(SSL_F_SSL_CTX_USE_PRIVATEKEY, ERR_R_ENGINE_LIB);
      Exit;
  end;
  Result := SSL_CTX_use_PrivateKey(ctx, AEVP_PrivateKey);
end;
function IndySSL_CTX_use_certificate_Engine(ctx: PSSL_CTX; const APX509: PX509): TIdC_INT;
begin
  Result := 0;
  if not Assigned(APX509) then begin
      SSLerr(SSL_F_SSL_CTX_USE_CERTIFICATE, ERR_R_ENGINE_LIB);
      Exit;
  end;
  Result := SSL_CTX_use_certificate(ctx, APX509);
end;
function LoadOpenSSLLibrary: Boolean;
begin
  ...
    ENGINE_load_builtin_engines;
    ENGINE_register_all_complete;
    SSLIsLoaded.Value := True;
  ...
end;
procedure TIdSSLOptions.AssignTo(Destination: TPersistent);
var
  LDest: TIdSSLOptions;
begin
  if Destination is TIdSSLOptions then begin
    ...
    LDest.PrivateKey := PrivateKey;  
    LDest.Certificate := Certificate;   
    LDest.Engine := Engine;  
  end else begin
    inherited AssignTo(Destination);
  end;
end;
procedure TIdServerIOHandlerSSLOpenSSL.Init;
begin
  ...
  fSSLContext.PrivateKey := SSLOptions.PrivateKey;   
  fSSLContext.Certificate := SSLOptions.Certificate; 
  fSSLContext.Engine := SSLOptions.Engine;     
  fSSLContext.InitContext(sslCtxServer);
end;
procedure TIdSSLIOHandlerSocketOpenSSL.Init;
begin
    ...
    fSSLContext.PrivateKey := SSLOptions.PrivateKey;   
    fSSLContext.Certificate := SSLOptions.Certificate; 
    fSSLContext.Engine := SSLOptions.Engine;    
    fSSLContext.InitContext(sslCtxClient);
  end;
end;

function TIdSSLContext.LoadCert: Boolean;
begin
  if PosInStrArray(ExtractFileExt(CertFile), ['.p12', '.pfx'], False) <> -1 then begin 
    Result := IndySSL_CTX_use_certificate_file_PKCS12(fContext, CertFile) > 0;
  end
  else if PosInStrArray(ExtractFileExt(CertFile), ['.pem'], False) <> -1 then begin
    //OpenSSL 1.0.2 has a new function, SSL_CTX_use_certificate_chain_file
    //that handles a chain of certificates in a PEM file.  That is prefered.
    if Assigned(SSL_CTX_use_certificate_chain_file) then begin
       Result := IndySSL_CTX_use_certificate_chain_file(fContext, CertFile) > 0;
    end else begin
      Result := IndySSL_CTX_use_certificate_file(fContext, CertFile, SSL_FILETYPE_PEM) > 0;
    end;
  end
  else begin
    Result := IndySSL_CTX_use_certificate_Engine(fContext, fCertificate) > 0;
  end;                                                                                     
end;

function TIdSSLContext.LoadKey: Boolean;
begin
  if PosInStrArray(ExtractFileExt(KeyFile), ['.p12', '.pfx'], False) <> -1 then begin
    Result := IndySSL_CTX_use_PrivateKey_file_PKCS12(fContext, KeyFile) > 0;
  end
  else if PosInStrArray(ExtractFileExt(KeyFile), ['.pem'], False) <> -1 then begin
    Result := IndySSL_CTX_use_PrivateKey_file(fContext, KeyFile, SSL_FILETYPE_PEM) > 0;
  end
  else begin
    Result := IndySSL_CTX_use_PrivateKey_Engine(fContext, fPrivateKey) > 0;
  end; 

  if Result then begin
    Result := SSL_CTX_check_private_key(fContext) > 0;
  end;
end;

function TIdSSLContext.Clone: TIdSSLContext;
begin
  ...
  Result.PrivateKey := PrivateKey;  
  Result.Certificate := Certificate;
  Result.Engine := Engine;  
end;

This is a log fragment from procedure SslLockingCallback.
I put this log because I wanted to see what was going on inside openssl.
SSL_CTX_load_verify_location 1, c:\test\dane\rootcert.pem c:\test
9 1 .\crypto\err\err.c 452
10 1 .\crypto\err\err.c 462
5 1 .\crypto\err\err.c 499
6 1 .\crypto\err\err.c 501
9 1 .\crypto\err\err.c 473
10 1 .\crypto\err\err.c 473
9 30 .\crypto\engine\eng_table.c 259
10 30 .\crypto\engine\eng_table.c 330
9 1 .\crypto\err\err.c 452
10 1 .\crypto\err\err.c 462
5 1 .\crypto\err\err.c 499
6 1 .\crypto\err\err.c 501
9 1 .\crypto\err\err.c 473
10 1 .\crypto\err\err.c 473
9 2 .\crypto\ex_data.c 318
10 2 .\crypto\ex_data.c 338
5 2 .\crypto\ex_data.c 426
6 2 .\crypto\ex_data.c 436
9 10 .\crypto\asn1\x_pubkey.c 163
10 10 .\crypto\asn1\x_pubkey.c 170
9 10 .\crypto\asn1\x_pubkey.c 172
10 10 .\crypto\asn1\x_pubkey.c 172
9 10 .\crypto\evp\p_lib.c 391
10 10 .\crypto\evp\p_lib.c 391
9 3 .\ssl\ssl_rsa.c 445
10 3 .\ssl\ssl_rsa.c 445
SSL_CTX_use_certificate 1
9 10 .\crypto\asn1\x_pubkey.c 135
10 10 .\crypto\asn1\x_pubkey.c 135
9 1 .\crypto\err\err.c 452
10 1 .\crypto\err\err.c 462
5 1 .\crypto\err\err.c 499
6 1 .\crypto\err\err.c 501
9 1 .\crypto\err\err.c 473
10 1 .\crypto\err\err.c 473
9 10 .\crypto\evp\p_lib.c 391
10 10 .\crypto\evp\p_lib.c 391
9 1 .\crypto\err\err.c 452
10 1 .\crypto\err\err.c 462
5 1 .\crypto\err\err.c 499
6 1 .\crypto\err\err.c 501
9 1 .\crypto\err\err.c 473
10 1 .\crypto\err\err.c 473
9 10 .\crypto\asn1\x_pubkey.c 135
10 10 .\crypto\asn1\x_pubkey.c 135
9 10 .\crypto\evp\p_lib.c 391
10 10 .\crypto\evp\p_lib.c 391
9 10 .\ssl\ssl_rsa.c 232
10 10 .\ssl\ssl_rsa.c 232
SSL_CTX_use_PrivateKey 1
9 10 .\crypto\asn1\x_pubkey.c 135
10 10 .\crypto\asn1\x_pubkey.c 135
9 10 .\crypto\evp\p_lib.c 391
10 10 .\crypto\evp\p_lib.c 391
9 30 .\crypto\engine\tb_asnmth.c 236
10 30 .\crypto\engine\tb_asnmth.c 244
9 30 .\crypto\engine\tb_asnmth.c 236
10 30 .\crypto\engine\tb_asnmth.c 244
9 2 .\crypto\ex_data.c 318
10 2 .\crypto\ex_data.c 338
5 2 .\crypto\ex_data.c 426
6 2 .\crypto\ex_data.c 436
9 2 .\crypto\ex_data.c 318
10 2 .\crypto\ex_data.c 338
5 2 .\crypto\ex_data.c 426
6 2 .\crypto\ex_data.c 436
9 1 .\crypto\err\err.c 452
10 1 .\crypto\err\err.c 462
5 1 .\crypto\err\err.c 499
6 1 .\crypto\err\err.c 501
9 1 .\crypto\err\err.c 473
10 1 .\crypto\err\err.c 473
9 1 .\crypto\err\err.c 452
10 1 .\crypto\err\err.c 462
5 1 .\crypto\err\err.c 499
6 1 .\crypto\err\err.c 501
9 1 .\crypto\err\err.c 473
10 1 .\crypto\err\err.c 473
9 1 .\crypto\err\err.c 452
10 1 .\crypto\err\err.c 462
5 1 .\crypto\err\err.c 499
6 1 .\crypto\err\err.c 501
9 1 .\crypto\err\err.c 473
10 1 .\crypto\err\err.c 473
9 21 .\crypto\bio\bio_lib.c 114
10 21 .\crypto\bio\bio_lib.c 114
9 2 .\crypto\ex_data.c 318
10 2 .\crypto\ex_data.c 338
5 2 .\crypto\ex_data.c 507
6 2 .\crypto\ex_data.c 517
9 3 .\crypto\asn1\tasn_utl.c 118
10 3 .\crypto\asn1\tasn_utl.c 118
9 2 .\crypto\ex_data.c 318
10 2 .\crypto\ex_data.c 338
5 2 .\crypto\ex_data.c 507
6 2 .\crypto\ex_data.c 517
9 1 .\crypto\err\err.c 452
10 1 .\crypto\err\err.c 462
5 1 .\crypto\err\err.c 499
6 1 .\crypto\err\err.c 501
9 1 .\crypto\err\err.c 473
10 1 .\crypto\err\err.c 473
9 3 .\ssl\ssl_cert.c 295
10 3 .\ssl\ssl_cert.c 295
9 10 .\ssl\ssl_cert.c 300
10 10 .\ssl\ssl_cert.c 300
9 12 .\ssl\ssl_lib.c 362
10 12 .\ssl\ssl_lib.c 362
9 12 .\ssl\ssl_lib.c 374
10 12 .\ssl\ssl_lib.c 374
9 2 .\crypto\ex_data.c 318
10 2 .\crypto\ex_data.c 338
5 2 .\crypto\ex_data.c 426
6 2 .\crypto\ex_data.c 436
9 2 .\crypto\ex_data.c 318
10 2 .\crypto\ex_data.c 338
5 2 .\crypto\ex_data.c 426
6 2 .\crypto\ex_data.c 436
9 18 .\crypto\rand\md_rand.c 230
10 18 .\crypto\rand\md_rand.c 262
9 18 .\crypto\rand\md_rand.c 311
10 18 .\crypto\rand\md_rand.c 324
9 1 .\crypto\err\err.c 452
10 1 .\crypto\err\err.c 462
5 1 .\crypto\err\err.c 499
6 1 .\crypto\err\err.c 501
9 1 .\crypto\err\err.c 473
10 1 .\crypto\err\err.c 473
9 12 .\ssl\s3_both.c 614
10 12 .\ssl\s3_both.c 624
9 12 .\ssl\s3_both.c 614
10 12 .\ssl\s3_both.c 624
9 2 .\crypto\ex_data.c 318
10 2 .\crypto\ex_data.c 338
5 2 .\crypto\ex_data.c 426
6 2 .\crypto\ex_data.c 436
9 2 .\crypto\ex_data.c 318
10 2 .\crypto\ex_data.c 338
5 2 .\crypto\ex_data.c 426
6 2 .\crypto\ex_data.c 436
9 2 .\crypto\ex_data.c 318
10 2 .\crypto\ex_data.c 338
5 2 .\crypto\ex_data.c 426
6 2 .\crypto\ex_data.c 436
9 18 .\crypto\rand\md_rand.c 386
9 19 .\crypto\rand\md_rand.c 389
10 19 .\crypto\rand\md_rand.c 391
10 18 .\crypto\rand\md_rand.c 466
9 18 .\crypto\rand\md_rand.c 515
10 18 .\crypto\rand\md_rand.c 519
9 2 .\crypto\ex_data.c 318
10 2 .\crypto\ex_data.c 338
5 2 .\crypto\ex_data.c 426
6 2 .\crypto\ex_data.c 436
9 2 .\crypto\ex_data.c 318
10 2 .\crypto\ex_data.c 338
5 2 .\crypto\ex_data.c 426
6 2 .\crypto\ex_data.c 436
9 2 .\crypto\ex_data.c 318
10 2 .\crypto\ex_data.c 338
5 2 .\crypto\ex_data.c 426
6 2 .\crypto\ex_data.c 436
9 3 .\crypto\x509\x509_vfy.c 228
10 3 .\crypto\x509\x509_vfy.c 228
9 3 .\crypto\x509v3\v3_purp.c 132
10 3 .\crypto\x509v3\v3_purp.c 134
9 3 .\crypto\x509\x509_vfy.c 284
10 3 .\crypto\x509\x509_vfy.c 284
9 11 .\crypto\x509\x509_lu.c 305
10 11 .\crypto\x509\x509_lu.c 307
9 11 .\crypto\x509\by_dir.c 380
10 11 .\crypto\x509\by_dir.c 386
9 11 .\crypto\x509\by_dir.c 380
10 11 .\crypto\x509\by_dir.c 386
9 11 .\crypto\x509\x509_lu.c 305
10 11 .\crypto\x509\x509_lu.c 307
9 11 .\crypto\x509\by_dir.c 380
10 11 .\crypto\x509\by_dir.c 386
9 11 .\crypto\x509\by_dir.c 380
10 11 .\crypto\x509\by_dir.c 386
9 1 .\crypto\err\err.c 452
10 1 .\crypto\err\err.c 462
5 1 .\crypto\err\err.c 499
6 1 .\crypto\err\err.c 501
9 1 .\crypto\err\err.c 473
10 1 .\crypto\err\err.c 473
9 30 .\crypto\engine\eng_table.c 259
10 30 .\crypto\engine\eng_table.c 330
9 1 .\crypto\err\err.c 452
10 1 .\crypto\err\err.c 462
5 1 .\crypto\err\err.c 499
6 1 .\crypto\err\err.c 501
9 1 .\crypto\err\err.c 473
10 1 .\crypto\err\err.c 473
9 2 .\crypto\ex_data.c 318
10 2 .\crypto\ex_data.c 338
5 2 .\crypto\ex_data.c 426
6 2 .\crypto\ex_data.c 436
9 10 .\crypto\asn1\x_pubkey.c 163
10 10 .\crypto\asn1\x_pubkey.c 170
9 10 .\crypto\asn1\x_pubkey.c 172
10 10 .\crypto\asn1\x_pubkey.c 172
9 10 .\crypto\evp\p_lib.c 391
10 10 .\crypto\evp\p_lib.c 391
9 1 .\crypto\err\err.c 452
10 1 .\crypto\err\err.c 462
5 1 .\crypto\err\err.c 499
6 1 .\crypto\err\err.c 501
9 1 .\crypto\err\err.c 473
10 1 .\crypto\err\err.c 473
9 30 .\crypto\engine\eng_table.c 259
10 30 .\crypto\engine\eng_table.c 330
9 1 .\crypto\err\err.c 452
10 1 .\crypto\err\err.c 462
5 1 .\crypto\err\err.c 499
6 1 .\crypto\err\err.c 501
9 1 .\crypto\err\err.c 473
10 1 .\crypto\err\err.c 473
9 2 .\crypto\ex_data.c 318
10 2 .\crypto\ex_data.c 338
5 2 .\crypto\ex_data.c 426
6 2 .\crypto\ex_data.c 436
9 10 .\crypto\asn1\x_pubkey.c 163
10 10 .\crypto\asn1\x_pubkey.c 170
9 10 .\crypto\asn1\x_pubkey.c 172
10 10 .\crypto\asn1\x_pubkey.c 172
9 10 .\crypto\evp\pmeth_lib.c 186
10 10 .\crypto\evp\pmeth_lib.c 186
9 10 .\crypto\evp\pmeth_lib.c 302
10 10 .\crypto\evp\pmeth_lib.c 302
9 10 .\crypto\evp\p_lib.c 391
10 10 .\crypto\evp\p_lib.c 391
5 9 .\crypto\bn\bn_mont.c 527
6 9 .\crypto\bn\bn_mont.c 529
9 9 .\crypto\bn\bn_mont.c 550
10 9 .\crypto\bn\bn_mont.c 556
9 10 .\crypto\evp\p_lib.c 391
10 10 .\crypto\evp\p_lib.c 391
9 10 .\crypto\evp\p_lib.c 391
10 10 .\crypto\evp\p_lib.c 391
9 3 .\crypto\asn1\tasn_utl.c 118
10 3 .\crypto\asn1\tasn_utl.c 118
9 3 .\crypto\asn1\tasn_utl.c 118
10 3 .\crypto\asn1\tasn_utl.c 118
9 2 .\crypto\ex_data.c 318
10 2 .\crypto\ex_data.c 338
5 2 .\crypto\ex_data.c 507
6 2 .\crypto\ex_data.c 517
9 1 .\crypto\err\err.c 452
10 1 .\crypto\err\err.c 462
5 1 .\crypto\err\err.c 499
6 1 .\crypto\err\err.c 501
9 1 .\crypto\err\err.c 473
10 1 .\crypto\err\err.c 473
9 10 .\crypto\asn1\x_pubkey.c 135
10 10 .\crypto\asn1\x_pubkey.c 135
9 3 .\ssl\s3_clnt.c 1331
10 3 .\ssl\s3_clnt.c 1331
9 3 .\ssl\s3_clnt.c 1343
10 3 .\ssl\s3_clnt.c 1343
9 10 .\crypto\evp\p_lib.c 391
10 10 .\crypto\evp\p_lib.c 391
9 10 .\crypto\asn1\x_pubkey.c 135
10 10 .\crypto\asn1\x_pubkey.c 135
9 10 .\crypto\evp\p_lib.c 391
10 10 .\crypto\evp\p_lib.c 391
9 2 .\crypto\ex_data.c 318
10 2 .\crypto\ex_data.c 338
5 2 .\crypto\ex_data.c 426
6 2 .\crypto\ex_data.c 436
9 3 .\crypto\x509\x509_vfy.c 228
10 3 .\crypto\x509\x509_vfy.c 228
9 3 .\crypto\x509v3\v3_purp.c 132
9 1 .\crypto\err\err.c 452
10 1 .\crypto\err\err.c 462
5 1 .\crypto\err\err.c 499
6 1 .\crypto\err\err.c 501
9 1 .\crypto\err\err.c 473
10 1 .\crypto\err\err.c 473
9 16 .\ssl\ssl_lib.c 569
10 16 .\ssl\ssl_lib.c 569
9 2 .\crypto\ex_data.c 318
10 2 .\crypto\ex_data.c 338
5 2 .\crypto\ex_data.c 507
6 2 .\crypto\ex_data.c 517
9 21 .\crypto\bio\bio_lib.c 114
10 21 .\crypto\bio\bio_lib.c 114
9 2 .\crypto\ex_data.c 318
10 2 .\crypto\ex_data.c 338
5 2 .\crypto\ex_data.c 507
6 2 .\crypto\ex_data.c 517
9 21 .\crypto\bio\bio_lib.c 114
10 21 .\crypto\bio\bio_lib.c 114
9 2 .\crypto\ex_data.c 318
10 2 .\crypto\ex_data.c 338
5 2 .\crypto\ex_data.c 507
6 2 .\crypto\ex_data.c 517
9 14 .\ssl\ssl_sess.c 856
10 14 .\ssl\ssl_sess.c 856
9 2 .\crypto\ex_data.c 318
10 2 .\crypto\ex_data.c 338
5 2 .\crypto\ex_data.c 507
6 2 .\crypto\ex_data.c 517
9 15 .\ssl\ssl_cert.c 658
10 15 .\ssl\ssl_cert.c 658
9 3 .\crypto\asn1\tasn_utl.c 118
10 3 .\crypto\asn1\tasn_utl.c 118
9 3 .\crypto\asn1\tasn_utl.c 118
10 3 .\crypto\asn1\tasn_utl.c 118
9 10 .\crypto\evp\p_lib.c 391
10 10 .\crypto\evp\p_lib.c 391
9 9 .\crypto\rsa\rsa_lib.c 216
10 9 .\crypto\rsa\rsa_lib.c 216
9 30 .\crypto\engine\eng_init.c 149
10 30 .\crypto\engine\eng_init.c 151
9 2 .\crypto\ex_data.c 318
10 2 .\crypto\ex_data.c 338
5 2 .\crypto\ex_data.c 507
6 2 .\crypto\ex_data.c 517
9 2 .\crypto\ex_data.c 318
10 2 .\crypto\ex_data.c 338
5 2 .\crypto\ex_data.c 507
6 2 .\crypto\ex_data.c 517
9 3 .\crypto\asn1\tasn_utl.c 118
10 3 .\crypto\asn1\tasn_utl.c 118
9 3 .\crypto\asn1\tasn_utl.c 118
10 3 .\crypto\asn1\tasn_utl.c 118
9 10 .\crypto\evp\p_lib.c 391
10 10 .\crypto\evp\p_lib.c 391
9 9 .\crypto\rsa\rsa_lib.c 216
10 9 .\crypto\rsa\rsa_lib.c 216
9 30 .\crypto\engine\eng_init.c 149
10 30 .\crypto\engine\eng_init.c 151
9 2 .\crypto\ex_data.c 318
10 2 .\crypto\ex_data.c 338
5 2 .\crypto\ex_data.c 507
6 2 .\crypto\ex_data.c 517
9 2 .\crypto\ex_data.c 318
10 2 .\crypto\ex_data.c 338
5 2 .\crypto\ex_data.c 507
6 2 .\crypto\ex_data.c 517
9 13 .\ssl\ssl_cert.c 459
10 13 .\ssl\ssl_cert.c 459
9 3 .\crypto\asn1\tasn_utl.c 118
10 3 .\crypto\asn1\tasn_utl.c 118
9 10 .\crypto\evp\p_lib.c 391
10 10 .\crypto\evp\p_lib.c 391
9 12 .\ssl\ssl_lib.c 2106
10 12 .\ssl\ssl_lib.c 2106
9 12 .\ssl\s3_both.c 635
10 12 .\ssl\s3_both.c 648
9 12 .\ssl\s3_both.c 635
10 12 .\ssl\s3_both.c 648
9 21 .\crypto\bio\bio_lib.c 114
10 21 .\crypto\bio\bio_lib.c 114
9 2 .\crypto\ex_data.c 318
10 2 .\crypto\ex_data.c 338
5 2 .\crypto\ex_data.c 507
6 2 .\crypto\ex_data.c 517
9 12 .\ssl\ssl_lib.c 2106
10 12 .\ssl\ssl_lib.c 2106
9 12 .\ssl\ssl_lib.c 2106
10 12 .\ssl\ssl_lib.c 2106
9 12 .\ssl\ssl_sess.c 1125
10 12 .\ssl\ssl_sess.c 1131
9 2 .\crypto\ex_data.c 318
10 2 .\crypto\ex_data.c 338
5 2 .\crypto\ex_data.c 507
6 2 .\crypto\ex_data.c 517
9 11 .\crypto\x509\x509_lu.c 241
10 11 .\crypto\x509\x509_lu.c 241
9 3 .\crypto\asn1\tasn_utl.c 118
10 3 .\crypto\asn1\tasn_utl.c 118
9 2 .\crypto\ex_data.c 318
10 2 .\crypto\ex_data.c 338
5 2 .\crypto\ex_data.c 507
6 2 .\crypto\ex_data.c 517
9 2 .\crypto\ex_data.c 318
10 2 .\crypto\ex_data.c 338
5 2 .\crypto\ex_data.c 507
6 2 .\crypto\ex_data.c 517
9 13 .\ssl\ssl_cert.c 459
10 13 .\ssl\ssl_cert.c 459
9 3 .\crypto\asn1\tasn_utl.c 118
10 3 .\crypto\asn1\tasn_utl.c 118
9 10 .\crypto\evp\p_lib.c 391
10 10 .\crypto\evp\p_lib.c 391
9 10 .\crypto\evp\p_lib.c 391
10 10 .\crypto\evp\p_lib.c 391
9 30 .\crypto\engine\eng_init.c 149
10 30 .\crypto\engine\eng_init.c 151
9 30 .\crypto\engine\eng_lib.c 116
10 30 .\crypto\engine\eng_lib.c 116

AV occurs while calling SSL_connect.
As the log shows, 
SSL status: ""before/connect initialization""
SSL status: ""SSLv3 write client hello A""
SSL status: ""SSLv3 read server hello A""
SSL status: ""SSLv3 read server certificate A""
SSL status: ""SSLv3 read server certificate request A""
SSL status: ""SSLv3 read server done A""

the next step should be:
SSL status: ""SSLv3 write client certificate A""


supplement
So far, to read the certificate from the card, I read the CKA_VALUE attribute for the CKO_CERTIFICATE object. I used the d2i_X509 function, that returned the PX509 variable I passed to SSL_CTX_use_certificate.
I decided to save the certificate to a .pem file and use this file to establish an SSL connection.
The log of the connection is as follows:
SSL status: ""before/connect initialization""
SSL status: ""before/connect initialization""
SSL status: ""SSLv3 write client hello A""
SSL status: ""SSLv3 read server hello A""
SSL status: ""SSLv3 read server certificate A""
SSL status: ""SSLv3 read server certificate request A""
SSL status: ""SSLv3 read server done A""
SSL status: ""SSLv3 write client certificate A""
SSL status: ""SSLv3 write client key exchange A""
SSL status: ""SSLv3 write certificate verify A""
SSL status: ""SSLv3 write change cipher spec A""
SSL status: ""SSLv3 write finished A""
SSL status: ""SSLv3 flush data""
SSL status: ""SSLv3 read finished A""
SSL status: ""SSL negotiation finished successfully""
Type: Handshake Done
Msg:  SSL negotiation finished successfully
SSL status: ""SSL negotiation finished successfully""
Type: Connect Exit
Msg:  SSL negotiation finished successfully
Cipher: name = AES256-GCM-SHA384; description = AES256-GCM-SHA384       TLSv1.2 Kx=RSA      Au=RSA  Enc=AESGCM(256) Mac=AEAD
; bits = 256; version = TLSv1/SSLv3;
SSL status: ""SSL negotiation finished successfully""
Type: warning Read Alert
Msg:  close notify

Negotiations have been successful (""SSL negotiation finished successfully""), but the server returned a fault
EIdHTTPProtocolException
HTTP/1.0 500 Internal Server Error
<env:Envelope xmlns:env=""http://schemas.xmlsoap.org/soap/envelope/"">
  <env:Body>
    <env:Fault>
      <faultcode>env:Server</faultcode>
      <faultstring>Internal Error (from server)</faultstring>
    </env:Fault>
  </env:Body>
</env:Envelope>

","","617","<delphi><openssl><indy><pkcs#11>","0","","0","2017-11-03 10:40:31","","5","","4260291","","2017-11-03 10:40:31","2017-10-23 06:52:34",""
"40239260","How to reuse existing private key to generate a digital signature using smartcard and PKCS#11","I want to create a digital signature using pkcs11 standard. 
Lets suppose that I already has a public and private key pair that is stored on my smart card. 
This keys was generated by using next code:
byte[] ckaId = session.GenerateRandom(20);

// Prepare attribute template of new public key
var publicKeyAttributes = new List<ObjectAttribute>();
publicKeyAttributes.Add(new ObjectAttribute(CKA.CKA_TOKEN, true));
publicKeyAttributes.Add(new ObjectAttribute(CKA.CKA_PRIVATE, false));
publicKeyAttributes.Add(new ObjectAttribute(CKA.CKA_LABEL, PKCS11Settings.ApplicationName));
publicKeyAttributes.Add(new ObjectAttribute(CKA.CKA_ID, ckaId));
publicKeyAttributes.Add(new ObjectAttribute(CKA.CKA_ENCRYPT, true));
publicKeyAttributes.Add(new ObjectAttribute(CKA.CKA_VERIFY, true));
publicKeyAttributes.Add(new ObjectAttribute(CKA.CKA_VERIFY_RECOVER, true));
publicKeyAttributes.Add(new ObjectAttribute(CKA.CKA_WRAP, true));
publicKeyAttributes.Add(new ObjectAttribute(CKA.CKA_MODULUS_BITS, 1024));
publicKeyAttributes.Add(new ObjectAttribute(CKA.CKA_PUBLIC_EXPONENT, new byte[] { 0x01, 0x00, 0x01 }));

// Prepare attribute template of new private key
var privateKeyAttributes = new List<ObjectAttribute>();
privateKeyAttributes.Add(new ObjectAttribute(CKA.CKA_TOKEN, true));
privateKeyAttributes.Add(new ObjectAttribute(CKA.CKA_PRIVATE, true));
privateKeyAttributes.Add(new ObjectAttribute(CKA.CKA_LABEL, PKCS11Settings.ApplicationName));
privateKeyAttributes.Add(new ObjectAttribute(CKA.CKA_ID, ckaId));
privateKeyAttributes.Add(new ObjectAttribute(CKA.CKA_SENSITIVE, true));
privateKeyAttributes.Add(new ObjectAttribute(CKA.CKA_DECRYPT, true));
privateKeyAttributes.Add(new ObjectAttribute(CKA.CKA_SIGN, true));
privateKeyAttributes.Add(new ObjectAttribute(CKA.CKA_SIGN_RECOVER, true));
privateKeyAttributes.Add(new ObjectAttribute(CKA.CKA_UNWRAP, true));

// Specify key generation mechanism
Mechanism mechanism = new Mechanism(CKM.CKM_RSA_PKCS_KEY_PAIR_GEN);

// Generate key pair
session.GenerateKeyPair(mechanism, publicKeyAttributes, privateKeyAttributes, out publicKeyHandle, out privateKeyHandle);

Now I can use these keys to sign some data. For example: 
var mechanism = new Mechanism(CKM.CKM_RSA_PKCS);
byte[] byteContent = (ConvertUtils.Utf8StringToBytes(""Hello World!!!""));
byte[] signature = session.Sign(mechanism, derivedKey, byteContent);

This code works perfect when you want to create keys and then use it in C_sign method
But how to get an access to the already existing keys to do the similar operation? 
As I understand I should derive a private key from existing one by using the C_Derrive() method and than use it in C_Sign() method. 
For this purpose I wrote next code: 
// Prepare attribute template of new key
List<ObjectAttribute> objectAttributes = new List<ObjectAttribute>();
objectAttributes.Add(new ObjectAttribute(CKA.CKA_CLASS, CKO.CKO_SECRET_KEY));
objectAttributes.Add(new ObjectAttribute(CKA.CKA_KEY_TYPE, CKK.CKK_DES3));
objectAttributes.Add(new ObjectAttribute(CKA.CKA_ENCRYPT, true));
objectAttributes.Add(new ObjectAttribute(CKA.CKA_DECRYPT, true));
objectAttributes.Add(new ObjectAttribute(CKA.CKA_DERIVE, true));
objectAttributes.Add(new ObjectAttribute(CKA.CKA_EXTRACTABLE, true));

// Specify key generation mechanism
Mechanism mechanism = new Mechanism(CKM.CKM_RSA_PKCS);

// Generate key
ObjectHandle baseKey = session.GenerateKey(mechanism, objectAttributes);

byte[] dt = session.GenerateRandom(24);

// Specify mechanism parameters
var mechanismParams = new CkKeyDerivationStringData(dt);

// Specify derivation mechanism with parameters
Mechanism mech = new Mechanism(CKM.CKM_RSA_PKCS, mechanismParams);

// Derive key
ObjectHandle derivedKey = session.DeriveKey(mech, baseKey, null);


byte[] byteContent = (ConvertUtils.Utf8StringToBytes(""Hello World!""));
byte[] signature = session.Sign(mech, derivedKey, byteContent);

But when I run this code it will throw the next error:

Method C_GenerateKey returned CKR_MECHANISM_INVALID

Could anybody tell me what I'm doing wrong and how to solve this problem ? 
","If you want to acquire ObjectHandle for an existing key you need to find the key by its attributes such as label etc. Key derivation is completely different cryptographic operation.
Following code sample searches for the keys you have generated by the code present in your question:
// Prepare attribute template that defines search criteria for public key
List<ObjectAttribute> publicKeyAttributes = new List<ObjectAttribute>();
publicKeyAttributes.Add(new ObjectAttribute(CKA.CKA_CLASS, CKO.CKO_PUBLIC_KEY));
publicKeyAttributes.Add(new ObjectAttribute(CKA.CKA_KEY_TYPE, CKK.CKK_RSA));
publicKeyAttributes.Add(new ObjectAttribute(CKA.CKA_LABEL, PKCS11Settings.ApplicationName));

// Find all objects that match provided attributes
List<ObjectHandle> foundPublicKeys = session.FindAllObjects(publicKeyAttributes);
if (foundPublicKeys == null || foundPublicKeys.Count != 1)
    throw new Exception(""Unable to find public key"");

// Prepare attribute template that defines search criteria for private key
List<ObjectAttribute> privateKeyAttributes = new List<ObjectAttribute>();
privateKeyAttributes.Add(new ObjectAttribute(CKA.CKA_CLASS, CKO.CKO_PRIVATE_KEY));
privateKeyAttributes.Add(new ObjectAttribute(CKA.CKA_KEY_TYPE, CKK.CKK_RSA));
privateKeyAttributes.Add(new ObjectAttribute(CKA.CKA_LABEL, PKCS11Settings.ApplicationName));

// Find all objects that match provided attributes
List<ObjectHandle> foundPrivateKeys = session.FindAllObjects(publicKeyAttributes);
if (foundPrivateKeys == null || foundPrivateKeys.Count != 1)
    throw new Exception(""Unable to find private key"");

// Use found object handles
ObjectHandle publicKeyHandle = foundPublicKeys[0];
ObjectHandle privateKeyHandle = foundPrivateKeys[0];

","617","<rsa><digital-signature><smartcard><pkcs#11><pkcs11interop>","2","4","2","2017-06-29 19:44:30","40250577","0","1","3325704","","2017-06-29 19:44:30","2016-10-25 11:54:03",""
"40239260","How to reuse existing private key to generate a digital signature using smartcard and PKCS#11","I want to create a digital signature using pkcs11 standard. 
Lets suppose that I already has a public and private key pair that is stored on my smart card. 
This keys was generated by using next code:
byte[] ckaId = session.GenerateRandom(20);

// Prepare attribute template of new public key
var publicKeyAttributes = new List<ObjectAttribute>();
publicKeyAttributes.Add(new ObjectAttribute(CKA.CKA_TOKEN, true));
publicKeyAttributes.Add(new ObjectAttribute(CKA.CKA_PRIVATE, false));
publicKeyAttributes.Add(new ObjectAttribute(CKA.CKA_LABEL, PKCS11Settings.ApplicationName));
publicKeyAttributes.Add(new ObjectAttribute(CKA.CKA_ID, ckaId));
publicKeyAttributes.Add(new ObjectAttribute(CKA.CKA_ENCRYPT, true));
publicKeyAttributes.Add(new ObjectAttribute(CKA.CKA_VERIFY, true));
publicKeyAttributes.Add(new ObjectAttribute(CKA.CKA_VERIFY_RECOVER, true));
publicKeyAttributes.Add(new ObjectAttribute(CKA.CKA_WRAP, true));
publicKeyAttributes.Add(new ObjectAttribute(CKA.CKA_MODULUS_BITS, 1024));
publicKeyAttributes.Add(new ObjectAttribute(CKA.CKA_PUBLIC_EXPONENT, new byte[] { 0x01, 0x00, 0x01 }));

// Prepare attribute template of new private key
var privateKeyAttributes = new List<ObjectAttribute>();
privateKeyAttributes.Add(new ObjectAttribute(CKA.CKA_TOKEN, true));
privateKeyAttributes.Add(new ObjectAttribute(CKA.CKA_PRIVATE, true));
privateKeyAttributes.Add(new ObjectAttribute(CKA.CKA_LABEL, PKCS11Settings.ApplicationName));
privateKeyAttributes.Add(new ObjectAttribute(CKA.CKA_ID, ckaId));
privateKeyAttributes.Add(new ObjectAttribute(CKA.CKA_SENSITIVE, true));
privateKeyAttributes.Add(new ObjectAttribute(CKA.CKA_DECRYPT, true));
privateKeyAttributes.Add(new ObjectAttribute(CKA.CKA_SIGN, true));
privateKeyAttributes.Add(new ObjectAttribute(CKA.CKA_SIGN_RECOVER, true));
privateKeyAttributes.Add(new ObjectAttribute(CKA.CKA_UNWRAP, true));

// Specify key generation mechanism
Mechanism mechanism = new Mechanism(CKM.CKM_RSA_PKCS_KEY_PAIR_GEN);

// Generate key pair
session.GenerateKeyPair(mechanism, publicKeyAttributes, privateKeyAttributes, out publicKeyHandle, out privateKeyHandle);

Now I can use these keys to sign some data. For example: 
var mechanism = new Mechanism(CKM.CKM_RSA_PKCS);
byte[] byteContent = (ConvertUtils.Utf8StringToBytes(""Hello World!!!""));
byte[] signature = session.Sign(mechanism, derivedKey, byteContent);

This code works perfect when you want to create keys and then use it in C_sign method
But how to get an access to the already existing keys to do the similar operation? 
As I understand I should derive a private key from existing one by using the C_Derrive() method and than use it in C_Sign() method. 
For this purpose I wrote next code: 
// Prepare attribute template of new key
List<ObjectAttribute> objectAttributes = new List<ObjectAttribute>();
objectAttributes.Add(new ObjectAttribute(CKA.CKA_CLASS, CKO.CKO_SECRET_KEY));
objectAttributes.Add(new ObjectAttribute(CKA.CKA_KEY_TYPE, CKK.CKK_DES3));
objectAttributes.Add(new ObjectAttribute(CKA.CKA_ENCRYPT, true));
objectAttributes.Add(new ObjectAttribute(CKA.CKA_DECRYPT, true));
objectAttributes.Add(new ObjectAttribute(CKA.CKA_DERIVE, true));
objectAttributes.Add(new ObjectAttribute(CKA.CKA_EXTRACTABLE, true));

// Specify key generation mechanism
Mechanism mechanism = new Mechanism(CKM.CKM_RSA_PKCS);

// Generate key
ObjectHandle baseKey = session.GenerateKey(mechanism, objectAttributes);

byte[] dt = session.GenerateRandom(24);

// Specify mechanism parameters
var mechanismParams = new CkKeyDerivationStringData(dt);

// Specify derivation mechanism with parameters
Mechanism mech = new Mechanism(CKM.CKM_RSA_PKCS, mechanismParams);

// Derive key
ObjectHandle derivedKey = session.DeriveKey(mech, baseKey, null);


byte[] byteContent = (ConvertUtils.Utf8StringToBytes(""Hello World!""));
byte[] signature = session.Sign(mech, derivedKey, byteContent);

But when I run this code it will throw the next error:

Method C_GenerateKey returned CKR_MECHANISM_INVALID

Could anybody tell me what I'm doing wrong and how to solve this problem ? 
","First, I think I'll be referencing pkcs-11v2-20.pdf a few times, so grab it if don't already have a copy (it comes with helpful examples, too).
Second, I'm not a C# programmer, so anything below is unfortunately only pseudo code.
Let's first address the CKR_MECHANISM_INVALID issue:
According to the standard, CKM.CKM_RSA_PKCS can't be used for C_DeriveKey (Chp. 12, Table 34).
And now the problem at hand:
You already have a key pair on your smart card (and opened a session and logged in as required), you have to search what you need using 
C_FindObjectsInit, C_FindObjects and C_FindObjectsFinal (pg. 136 and following, also gives some example), 
where you provide C_FindObjectsInit with an attribute template of what kind of key you are looking for, e.g. 
// look for key allowing signing and decrypting
var searchCriteria = new List<ObjectAttribute>();
searchCriteria.Add(new ObjectAttribute(CKA.CKA_DECRYPT, true));
searchCriteria.Add(new ObjectAttribute(CKA.CKA_SIGN, true));

// initialize the search. The number is actually the number of search attributes.
session.FindObjectsInit(searchCriteria, 2);
...
session.FindObjects(out privateKeyHandle, ...);
... 
session.FindObjectsFinal();

// we found the requested private key, now sign the message
session.Sign(..., privateKeyHandle,...);

The key derivation you tried in the last snippet is meant for scenarios where the smart card and the application need to derive one or two shared secret key(s) (e.g. for secure messaging) by means of asymmetric cryptography.
Hope that helped.
","617","<rsa><digital-signature><smartcard><pkcs#11><pkcs11interop>","2","0","2","2017-06-29 19:44:30","40250577","0","1","3325704","","2017-06-29 19:44:30","2016-10-25 11:54:03",""
"37545493","lHash mismatch error in decryption with HSM stored key","In decryption of encrypted key i receive lhash mismatch error. The key is encrypt with RSA/ECB/OAEPWithSHA-1AndMGF1Padding . I used PKCS#11 provider .  this is my code. Please provide solution for this ..
public class DataDecryptorNew {
private static final int PUBLIC_KEY_SIZE = 294;
private static final int EID_SIZE = 32;
private static final int SECRET_KEY_SIZE = 256;
private static final String TRANSFORMATION2 = ""RSA/ECB/OAEPWithSHA-1AndMGF1Padding"";
private static final String TRANSFORMATION3 = ""RSA/ECB/OAEPWithSHA-256AndMGF1Padding"";
private static final String SECURITY_PROVIDER = ""BC"";
private static SunPKCS11 providerPKCS11;
private static String provider;
private static final String DIGEST_ALGORITHM = ""SHA-256"";
private static final String MASKING_FUNCTION = ""MGF1"";
private static final int VECTOR_SIZE = 16;
private static final int HMAC_SIZE = 32;
private static final int BLOCK_SIZE = 128;
private static final byte[] HEADER_DATA = ""VERSION_1.0"".getBytes();
private static final String SIGNATURE_TAG = ""Signature"";
private static final String MEC_TYPE = ""DOM"";

public static final String DLL = ""C:\\pkcs11\\cknfast.dll"";
public static String alias = """";
public static int keyLength = 2048;

private static final String password = """";
public static final String storeType = ""PKCS11-nCipher"";

private PrivateKey privateKey;
private PublicKey publicKey;
private KeyStore.PrivateKeyEntry keyEntry;
private KeyStore keyEntry1;

static {
    Security.addProvider(new BouncyCastleProvider());
}
public byte[] decrypt(byte[] data) throws IllegalBlockSizeException, BadPaddingException, InvalidKeyException,
        NoSuchAlgorithmException, NoSuchProviderException, NoSuchPaddingException, IOException, CertificateException, Exception {
    if (data == null || data.length == 0) {
        throw new Exception(""byte array data can not be null or blank array."");
    }
    PrivateKey key = getPrivateKey();
    ByteArraySpliter arrSpliter = new ByteArraySpliter(data);
    byte[] secretKey = decryptSecretKeyData(arrSpliter.getEncryptedSecretKey(), arrSpliter.getIv(), key);
    byte[] plainData = decryptData(arrSpliter.getEncryptedData(), arrSpliter.getIv(), secretKey);
    boolean result = validateHash(plainData);
    if (!result) {
        throw new Exception(""Integrity Validation Failed : ""
                + ""The original data at client side and the decrypted data at server side is not identical"");
    }
    return trimHMAC(plainData);
}
private KeyStore.PrivateKeyEntry getKeyFromFile(String keyStoreFile, char[] keyStorePassword) {

    try {
        // Load the KeyStore and get the signing key and certificate.
        KeyStore ks = KeyStore.getInstance(""PKCS12"");
        FileInputStream keyFileStream = new FileInputStream(keyStoreFile);
        ks.load(keyFileStream, keyStorePassword);
        String alias = ks.aliases().nextElement();

        KeyStore.PrivateKeyEntry entry = (KeyStore.PrivateKeyEntry) ks.getEntry(alias, new KeyStore.PasswordProtection(keyStorePassword));

        if (entry == null) {
            throw new Exception(""Key not found for the given alias."");
        }

        keyFileStream.close();

        return entry;
    } catch (Exception e) {
        e.printStackTrace();
    }
    return null;
}


private static PrivateKey getPrivateKey() throws Exception {
    String config = ""name=nCipher\n""
            + ""library="" + DLL + ""\n""
            + ""slotListIndex = 0 "";

    ByteArrayInputStream bais = new ByteArrayInputStream(config.getBytes());
    Provider p = new SunPKCS11(bais);

    Security.addProvider(p);
    KeyStore ks = KeyStore.getInstance(""PKCS11"", p);
    ks.load(null, """".toCharArray());
    System.out.println(""Keystore size : "" + ks.size());

    String alias = ""ncipher-cert/cn=(n)code solutions ca 2014,2.5.4.51=#13133330312c20474e464320496e666f746f776572,street=bodakdev\\, s g road\\, ahmedabad,st=gujarat,2.5.4.17=#1306333830303534,ou=certifying authority,o=gujarat narmada valley fertilizers and chemicals limited,c=in/1396768448"";

    KeyStore.ProtectionParameter protParam = new KeyStore.PasswordProtection(password.toCharArray());
    KeyStore.PrivateKeyEntry pkEntry = (KeyStore.PrivateKeyEntry) ks.getEntry(alias, protParam);
    // get my private key
    PrivateKey key = pkEntry.getPrivateKey();
    if (key instanceof PrivateKey) {
        // Get certificate of public key
        Certificate cert = ks.getCertificate(alias);
        System.out.println("">>>>>>>>>"" + ((X509Certificate) cert).getSerialNumber().toString(16));

        // Get public key
        PublicKey publicKey = cert.getPublicKey();

        //Get Private Key
        Key privatekey = (PrivateKey) key;
        System.out.println(""privatekey="" + privatekey);
    }

    return (PrivateKey) key;
}

private byte[] decryptSecretKeyData(byte[] encryptedSecretKey, byte[] iv) throws IllegalBlockSizeException, BadPaddingException, InvalidKeyException,
        NoSuchAlgorithmException, NoSuchProviderException, NoSuchPaddingException, IOException, CertificateException, Exception {
    try {

        PrivateKey key = (PrivateKey) getPrivateKey();
        System.out.println(""Private Key:"" + getPrivateKey().getFormat());
        Cipher decCipher = Cipher.getInstance(""RSA/ECB/NoPadding"");
        decCipher.init(Cipher.DECRYPT_MODE, key);

        byte[] decipheredText = null;
        decipheredText = decCipher.doFinal(encryptedSecretKey);
        System.out.println(""OAEP padded plain text: "" + Arrays.toString(decipheredText));
        if (decipheredText.length < keyLength / 8) {
            byte[] tmp = new byte[(keyLength / 8) - 42];
            System.arraycopy(decipheredText, 0, tmp, tmp.length - decipheredText.length, decipheredText.length);
            System.out.println(""Zero padding to "" + (keyLength / 8));
            decipheredText = tmp;
        }
        PSource pSrc = (new PSource.PSpecified(new byte[256]));
        OAEPParameterSpec paramSpec = new OAEPParameterSpec(""SHA-256"", ""MGF1"", MGF1ParameterSpec.SHA1, pSrc);
        RSAPadding padding = RSAPadding.getInstance(RSAPadding.PAD_OAEP_MGF1, keyLength / 8, new SecureRandom(), paramSpec);
        System.out.println(""PaddedPlainText length: "" + decipheredText.length); //256
        byte[] plainText2 = padding.unpad(decipheredText, 0, decipheredText.length);
        System.out.println(""Unpadded plain text: "" + DatatypeConverter.printHexBinary(plainText2));
        System.out.println(""Decrypted Value:"" + new String(plainText2));
        return plainText2;
    } catch (GeneralSecurityException e) {
        e.printStackTrace();
        throw new Exception(""Failed to decrypt AES secret key using RSA."", e);
    }
}


private static class ByteArraySpliter {

    private final byte[] headerVersion;
    private final byte[] iv;
    private final byte[] encryptedSecretKey;
    private final byte[] encryptedData;
    private final byte[] publicKeyData;

    public ByteArraySpliter(byte[] data) throws Exception {
        int offset = 0;
        headerVersion = new byte[HEADER_DATA.length];
        copyByteArray(data, 0, headerVersion.length, headerVersion);
        offset = offset + HEADER_DATA.length;
        publicKeyData = new byte[PUBLIC_KEY_SIZE];
        copyByteArray(data, offset, publicKeyData.length, publicKeyData);
        offset = offset + PUBLIC_KEY_SIZE;
        iv = new byte[EID_SIZE];
        copyByteArray(data, offset, iv.length, iv);
        offset = offset + EID_SIZE;
        encryptedSecretKey = new byte[SECRET_KEY_SIZE];
        copyByteArray(data, offset, encryptedSecretKey.length, encryptedSecretKey);
        offset = offset + SECRET_KEY_SIZE;
        encryptedData = new byte[data.length - offset];
        copyByteArray(data, offset, encryptedData.length, encryptedData);
    }

    public byte[] getIv() {
        return iv;
    }

    public byte[] getEncryptedSecretKey() {
        return encryptedSecretKey;
    }

    public byte[] getEncryptedData() {
        return encryptedData;
    }

    private void copyByteArray(byte[] src, int offset, int length, byte[] dest) throws Exception {
        try {
            System.arraycopy(src, offset, dest, 0, length);
        } catch (Exception e) {

            throw new Exception(""Decryption failed, Corrupted packet "", e);
        }
    }
}

private byte[][] split(byte[] src, int n) {
    byte[] l, r;
    if (src == null || src.length <= n) {
        l = src;
        r = new byte[0];
    } else {
        l = new byte[n];
        r = new byte[src.length - n];
        System.arraycopy(src, 0, l, 0, n);
        System.arraycopy(src, n, r, 0, r.length);
    }
    return new byte[][]{l, r};
}

public byte[] generateHash(byte[] message) throws Exception {
    byte[] hash = null;
    try {
        MessageDigest digest = MessageDigest.getInstance(DIGEST_ALGORITHM, SECURITY_PROVIDER);
        digest.reset();
        hash = digest.digest(message);
    } catch (GeneralSecurityException e) {
        throw new Exception(""SHA-256 Hashing algorithm not available"");
    }
    return hash;
}


public static void main(String[] args) throws Exception {
    String var = ""VkVSU0lPTl8xLjAwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCOjRCuZHdC64W9UA2r9S66140tyyw60ONQi1wXVIhvF8pGlM1ej/xQVgDAsdKoe5T6CyFwDM4wIjrYBaH9VyYK1hb4YeKeCFmmji7RnY+AgWmJdJ6cECMhVPXw7hSdIq8GvPSE8RmQ7/mRf3a9B3kNcqIzM2mMF/irRpBAyK3xopb5up6xBEvXDAgdR2hcaUepWDK0x7Kp4sh16PGi/yTZ1LqIZPcmx1dXEkLQ5coJv9CJWJdzodVNy1F8n0cYHqppes78rfud+bx6B2ncLXP/Gm7gkl4oj4kEb1axnivZqjYWqRpxBaxwEICV9JOOA8ldHHW+xDGgoyDKJZ0zVCtlAgMBAAH02gm2Dh2C4UbjkO6ubFxZs9qdLWVNpmSCswqm+MoZrGhLuNEyaD0tMpy7OD9lJb9dJrbGuDFVM6Nw094Ex5lgxBwJLTB3khSdLdmMpXNH3vahalJe7qB3pnifoOvpBGyYAxFfqPb87yeHJQbGIHicA7F5FG8HkBKuJABgTCnPpNgS6wykwUuGFNdstZJvF6YcCQN7OcW4X8cwmapUw6Xn8H9kVAbtF8OIq1ZRkzBmby7d5f8ptAeQZma026osQvIzQLbnyy6WOrD9yGpak3GxQUW+TX7B4bPLqJ4ETkUNpRGa3NThXu25ZQy3Wo53zGNPPhAuJ/jxjaIceWcHXHxyh+HeCxoUmwtIMODRXKNTZSCYIulJAT9UEpt4IP22ua1cZ84r0Qi/sqd9SUVfLQ/ZMPH4zwY6wpZW8b7vGv1/fyhImJc4oTtN8tXRcFdO8R+Iy2Et+rbxw1R/MHdUfSOGTnMkWBvZ4q2rCqB+58y7DXbJ2SRP5YZ9C/0BiC92H6itxlUZymkrVbXx+X2A0wdtDV9TZrk2Kvim3FnDkW1GNO5iQiDeidaPQdElI7LMeoaMxdpkVDhI6qdl4TAox/Q6M90wZlFwr5P59ckfeqOdOBR/rCJy/BBRU6sNvZHHukhsQhX+SPjX2k097ZhD59l76ihjz1ryzSAO+UhxzWpSrSfS0B0hZx2IH2rCSqovLH3+s9U+NPMzoKvfPrCw2jfIVymN8QbSqwk7YZz1dOtCHooxbQKSFKLlEEN9UHU/TtsTrdgAiSUKUd/84Z3KuoSfZ22654pAMlIDE/jyEp4JuBtO00rTB1hd7bM9uWcbViMfH666ZYvqd532SuDOf5KxA7TMRGluYJD4n5czKDVjsHF+IZe9cLcmBwidWbNMv0a//b/EM8oEvWwLvn7qpefqhL6c7XE/c6cnSKo5hv4B02Ln9KIhe6Ov26Uqy/4EFkPd00z1S+ALRai62meHz29tXx1cvGaynwalKSZer0ydFn6impBJuYpzlqNEm6WorpQ2gNOR18Un9FCF87bRXhJKZygBCeRymdAQceyPuow1u66y+h+WgQSzlpszgidln6dwWYpCcCF/Cv2K85FUEslTJqN967WGvj/6RWdeSoWxF1CARdo2nihbm04i1usYBm1vwfldbnHrPq9YfjlL1lThx2s8r4E6+yP/WEWHfmhfH3nHJ7mkjW1EFbIuYx5DTeEE5313PIhQvggbp75b2hDaRVo3kctb5gmRimKVBf8sTYF/Df7zy97HAhKFEWcU9lEaT2UVcCHqWkCaopJG+Z3BXGTDUTGGM/cA5PrkRg5Jpycu81ufi8EQL3iHCwfBO5AyGLhF8joFNCwmcBaz1z251Xu96O9MDbWF25PMYNbVHjTVkD1ZroU9NPeQcMvlTYMwbs9BpxrjOPQkJoaHNWNvv7EfbH2zd8LabxTa0HSS1i8s2+jfRLOPJlJgGWAjcbWWoBFMeFgytui7YeenWqqhSjqiTo0BwqK1qUuD9NA5qmJD9wwat8s6WSUpm466p+W0EcYFSOwZvPXc2F3mxLAPmhUBUy/+OJiblvZENtPgZjgdCLhEy3enCSdQRs+CtcCblQeoJXlJ47WlhyHg9Y3CAHMEwqow2TM/qUv85rP84VjVbbQLXI8Md8jG1lC2RYPlOEffiozSocUkMJNBat3qb2GTj08LDwdvdLNVT0xL9RqLLrWTQLoO6/NfpDf+fKruLyObZTAWUbOcznhNSmqJwdFoDwwczR+GqlIM2stg00YdexP2Skm03YHqZE1ojKBqsrzG5MKDYN9Iz2wcbcKEwABiCcX3Ykst5bcq0HQWqjVDqC6eeZB+x9hogpGuXxT4s+81WXXd2x4Af3pOLPHcxyGt9I7A79n+TsFfNZ/7uS2UzstQd6JveryCzqedz40Y90Fj7H79hOSCzncqJoZXmXLoiuAcszgCjoEdcq2sBeUz80blFnhoce6UKMnDCugbVTaJKTO22Lu2tHRjat2zcylSNHvLNLMz8r5s5hRwE0q71Yw4RZ9t26iy51R2Ahp6QsnaxjlLynP0c6eZhSryYsCPNGSWhKnamhJ+KsUXB7VLpROLRgkYSJ3Q6EPVXfmMs1RGSRSg67CzfIYwWfjimQr5DyxRMUvq8BQmuOUTjDwTG0JGipixX5wbSNgKxfT/ScAunm5/IuzFjyniQ+CIlu5DVAfmGAIC8Uunn/Cnu6Wjl6zIVYcE7ALs4+sZx3ETreXPVszWBICtrpgtaXM8rO+QzueL/fUyNxVpH0HElcdybo2PXr4yW5lvzuRAAw54JtrFUd0pA78c9ZXRd/fGNIS/P5NnxpWn83dNori1KBlh4B7jf0cOeF0+IqQpZVYVw4GQcqZZaLy1FNCjRubT7y+7MozDVFO9yr2Jl+TWrwGxb+3lnuY+22hXcaaxIA/qpj1a5qonVJ7p+Kvqb+/slV6YEypve68aJEQyoy+gfgdYHGAku0TDG5Q6U4Au9T3yBbPDecF1gHZ9LAkeKxbNFZQ0q8L2VBl1sKRs19Ok3hwkJSnRtS5DodprnZKPp69ZW9GmZT6w1J/lMYGO2MPfIQXypi1F1HhXI4XLzrWC2nOSDnQl2Yw1rgHL/cDM3AzUbtDuMv6RVf+zHEVCsa3JxGh9SPS+GtGHw2nrmTFy+bKuLLLpbe14MtC6y7wmuG5NKWSGfPhmiTzIetaBzbfj3NgSupB4fiZhGiUNWAX9J3svvHtZREmpguO54OAJKhlOfiaSDWTiQ5VXnf6xYVSEba2tpk5YuiqcqsU/MxtVbCHzrEd92TgANFnd0yRV7soLQ8KuSJeX2nuIXyp3HgPBOS+/agvsE7H8Ch6ydBHqffxGJT8YcVNuMRQxC2NNEIZn0M5OA+9Y4Wow0HmUBH+kbDElCVDXH1Ai2eFPtq2mepaOONVj3p9Q2i3pI+Wi3NP0c4VbROwMDv6tJh0amy7Zn8eok/bKU3c4qszRyuZXZWEVO8yjCx+v9Z1wjfbiheMBGyrpYeb7WXzB8fkCctbPS8FEigNliKPJo2aD6EAewu+q5UIC1A2/rVNKJP1kyF7lUOnuqKNH1/o9THWSv7ShKm9beAfbk/1lm5MXB4itxOML9bBY6YeNRjQtJSwgoUQaCLz1tN3nT6Qo/k0H+BEtLcy0PDUGFvkx0J+0XMXPG+cDcabqQtDf8EPiQmnSmEPvjAQxSiAhqjBm9ZnX/X0ewtil976BO1GvCLKLsCT5PFsiLqm9jPrSiaTpX69dwEShgI8Wwfrp6V8OfdO3BwDxn0hXRYCT1Y68wcmswKNIKaeXwM0Ux30lhdxcAbdI1W4F1qhJ+rFpnqufhfqIK6JTyfFrdr6X5hlgj0ko7Qh+wPIPDrAHdnb1tMyUAd3zY6vyJO4AbJNXumbryXQUmU4+5zbvkK2np1BIMUy+6kX9x5+3XLZVejXucECa5MsTLiVszBfnBZrv1n2I6mvgSKBnK50I0Kv+phbGfhdNjggB/1zbXRs1OHVBYrCtyMkqnfr5szYNCJqCp4IfbnojqViagxhbcru7oONv9iZrpR87eq1vuV5DmHwcgRCDOKvAYt+++XR0CyVilmb2MzT9mUfp4xYN05qfS+GoKt4l9l0mmOEeYWCGl0Pmsc7gO39LR8kyEbUwO4h/elgxIprAuLiy0rSjpgareDpmOyzNu8mKz4BKxoY0DEPdSpkqBsW0KFUBI487RUglFOLwLZNLAWmvEYW67gSHfrcSP+192VIo7K+zZF4Fmde95Dimf5ho06CmEpR5YPEFB8LYNlmvLTaQfry7SfZIvlfmc/RT5MO3J2SoJMr8lJrSNAKmbwd+lUQy8mGGdD+GMRbsRF6iybl0UWzq2qzN9zMi3/wN2CEdXUExrvfxzQhiuk8crFRPyiuwl0tN0T2XCUIpifMDfZwJLIs6zRP7QK6zXbrOQgh5gHtZM8N6uM9MlE5KBF3meSci1SZqk3r1KPx2DH0GcKwxO3yjUgTNNZcy1biTqD6MFd7GrSIoAWxKF+7Rte6Z3cI77Bo7L+HnEe/t1VHxPjdsZbMM8h+1ut4kSDu85GTplMx7oDbF0Bm/tkhdx9DoORwIEFMLlPmAL+s2y6E0vi6fcURLArlF9epqrdHIwZGqQHqfdb8M/FPFNBnw0SFZZQyRgIzZij0aUOPZqBbZnEsWcTO2Zh6KTdLbFJweDMZ3zkIzNwidlD0WXLKWXOu6yGQgo64CheX1vkd+9P5c3Mo54AeSiWbk6cCEiDV7QE+oHWAGHKmz5BuztEQD6TQ4TbVAjJTFfzbQ67EgwoESxywJ/6Gb05QyAeW5T9EUxbhjhwD5qpQna3qun43zQ9b44ab2oQ0m6eohkCO2AG7Qqw3ucPzAQ9uYDVWmJ0Gp6JmpZG0IbswSSyudoa+zO7qi1sbVLU1Nm6xt9rI5D06UonbCvFrslYDvpsWkafKUo5WNWTZhJghp/KVV/v+EgG+7kOu4l44tzw4R43BWG464m7PDzQ4msEHXy6rjr8A5I6EDVkNUBiMeec0h73LwT+Ph8b0yzcou7ML4pqf/GVNb7U5enDGlCELHXaQQGSkhaX24IUrADnRc0DK1kUChSb60/7TEOFN33U6IhcTITIj0e88Nny21s3efFyyKBus0qWqAKK3WO2VKHPOPWBWFdT2dpH6vROlXS1Wn7Bu5BIFzAArvndBA/soUu0Lxcg2zWbD6YcWHzrUMLCBTBH4G5p62s1dK/adtSylUX/KXAZ2nzDFnKBK4GxpJxVePQwB4jxIkEsveaTAI24HDtKZd7BNijcTeMkgIpOwK+7llkKUo1rHWYf9ldNJ7qKR15VGMQtqeu57tePMcBfR3eS0PjXj7exY9inWtrriLQAuLSxdh6sAIDyeacpwHMzUycDQz6mxh31ewFsdrkt2O0SOHNdJE6cChcvIFBf3pnTNew8dZBkbllOH/uB96C59dCE06KcJXQt+Cc8JuhWIhVqPcBUVtrpJsfvQNPOam9nMBKbXdZO8Noovj2YI99edIlHRmgYK0OZs3ctEWgP4QudRmCIo01VIEL8y9EaQ7Vf7jhbNZzlftNrtNafVml5xJYcUqFlQ3yMuiI0elUxCS/yQZ8B9NQM8oE7krfqadjvJ3LUDRZ09wgCnSN6GINsQStZZEIoSGIyHYof3fd2558qZSAoTz9X5OdRKk8ULqxqozCToziy9/JRXBcMqyi5swTlRpO+EyRqMTc+dqFaB0iRK/A3hCDgtVCRVpf53kXCbJL86Bke2CQqbBLqnLWFa9Q6hvOm2lqwwbngF5tpF12RJbdBPPFdh/toamyvmG2O1SNfnUfa1+i7LHWNbLruwnU27dQj7aS7dBgZmam5Kw82ld/XyhPqYPxJKQCyAugeq+8xGWsQhy+r/6djTkxl4WtDSVl4ALmpFzdQJNMOk1pLMDaxJXn0VQqpr9S6FSiZfFXKNi3/FLqpH0rbOeYgd4engG7Que/ON+AZ2sMSqZSM9ld2xsKIcSxh+JVpve70Wxzz1fLAZteLYxab2i66hJN86Fjrd4DMxTooYdzQu5tONXfgGKCO5HawG0faO240ZvApugxD6l6vIL4C8CIfZakX44TXiSgNXSyT8IIDEJW2TCxk/C/emDdeydBRJ7SmmcU4H2Mhoksv3zjzdM0sEVh2ApyzxWE3otoMDqs8Rq+WRf2esHRHr1twKi9jj2hK+ysyfKPDCuF6KqVeCLpPwBQf6A8jfw1pLLdYUnw0RTAo+vWXaiAh7HE8nAWViccWQop9hxDIs6qCnLcjtUvNGZxOnW2z7MRRlQ9Zq9X+Se24YzhhZ/e/M0op0JPOQ5UKbrZRUh5i3QcezP9x2IU5YtYBV2QOcy37uVHgYX5WBoXc6aK4KAMwfiRoTox0HNu5Dng3b3EM6MOIbzwuhYXaTAgWzdCRLKklxwNx0iMcGCYmukVqaG7QtbXyfbZp1xDN8nxH2j5hkPWOZWNIxO4R+/MwK3O/rBajkK4RmRr/a2JDZYZIkrn7/tvPNhYx1EYeEQmHOxenf5wgmN0SSks7PS5pu9I/Qyu+rMIuTJfbpGvFh6mRq4RQq1jWo/w3Qxh/5szZawE74A3AlmbiDfxGb3whXYztrpDeLhjCC1q/OnpRjMKwMPDePmZxGWe6vZxjVoX5iBHMiBIKm1wq8BpUoFIqobPNQXhyF/IzvDbiD+91IyLTc0iYHsU5w162X6Y+qVrEuuQ8gwsIEbyZ7UtpUvirM5wZu9KQa5ObRwQkytP6fPYIvqf7IxlwmPfYjQ3PIqCyCulTm5bnLLNzPTppDxRtF5jAXyqfNt/9lQE4oRqQiuNIYQNH8rVkKugJzv7D01F9bqDgAUudpzgQSLQChgSqUr7iXwz/oWRG2zXikX4hUJKKT+qfyRneUlE7+qNjLBMAUXRyjzGkA8CYqyP5TPgGdvmcngfTIU2vKajK7oDUd8OauNtNx15pECHxXHpMf7QEQXPfL386YanBrTxGDNC1pSs6vSKqV6yi/E4m2pYQesdIWtLAyvEwc/GqHuy/bCvSGbNgxF2FTApahX39N3Mlx+RVOVHHOyxhnQ2xYAGgl9vQOqwTjmv9PXHIJvAJOMMnWIzaqvwWCyb8BcPtTZ3gPNmTGOc2eDuxPHL8hS7zP5iWa2HC8CrqQ+opn8wGpU9ALlnBB3jhNrEXkCJ3cDtAr1oBwDqflk2dkeT+EoL7xlBG/PZN24gcrtoq462Kv/CAiiX92Ih4XHNz/sAmqOzQkb3YalziyLoPSeAy/NC4wAQau8DTHEflMNctW8loSpX0Ryhshn0C9ZpZniS3WJ4FAsZWsP144bcbxW+BrpY3uD8j+DY0fJaMQeMkRWfxxgVJ/BwpcJyX9+NRuessgJW38NV0OZK+hZI365OR/3qWFo9A2I02bz+5YgoHAnjlMyS/wIJHaFGZUTFm0Vj6YwC85z8HlvJzijG3/I6kH2RI4n8cIV2mft2cgVpoA8XpQ/zZdv616LBdNilGvn/mbc9iNS5nRLm3j6CKdVqyswu1gDdmr0PIglyibL8LWYOGcnIGvl0IALC59nPw2ruYf5hfW9ENIXMPklnZ7JmnM/XS+rc4iazxCn0d2sZt31UFlRFPTGKEVaB5hsriO/Z8HI8Z6xcwF9I/zvl6Al7SS9LvX42THXIbDo8SXPSVOTy5+50dhgodvS5TMRH8uFMAPv4Ozo3kzYZtU8zShn8sqNA9nGPl2WY2xi6IrmBVC+jmNJ+CTtS8PBeIrw9bY0CPZRgVtBz9Gl508f45yuo5rxZM1o7mPwod13ZW+pyiNdhwNFTTWO+Ooul7tIDmDeGy6i3N47QR6DDwJuzG7dJ/Wd5mrR5KTFPtZW4nXgNy/ueGebeohonFqOOZRKxLTW9/o5YFed49OHrBWh0HJBd0xb/evCSyR0B57dQYbypHkMd0LtbdAAx8MgpZhzsSV52fzr7leHV6H18Y4LYdRnxetBx66jge3JFDk5a9anFDF9Wz5le7pPDezuV1jk83PxtWeRhM2Tp1OQH1b4BUQcGBPCjkm48zvYLN46/XIcTthVWi+m0mVOzYVCln96b0jrOvFKkgi6k4Ctifkz3TmMt2o2gpZGZuyQ2d3vNLb1qvi5n1/b3aDtwJsjO979OFPPpMQyg/daSJsR+F1I4lruNLOHsMqkqGeTlL5SWxFJ6VlmN1QVHLaitHHZAIgq0qdhfidC+HAQa2+BOda13Oo6pR0azBextV93k5ixu8K1Rt9NFV6VQTcm9R3IZjXxkBMk3jmbvyteu8VeVhbQiB57DAjO3z/kcHNvhv6nPuIXF7gswbxaGfPM0g7aODS4358OS1Dx7cFSw0m8JpEuWAuiFPn1xVJ6lDlNxP83V04RHZd8fWe2+3N+Tnv19gozLzZ+ELOe9EvuSlqUtfhWpcrxFbiV/wPUf/ezjL4pFVVjTfEih6CB+PegtlelxzsGmleYuNfiE82a2NOttnWpv74ZotWQXfrBGv1ZkrpBmyxSJZa7c8PswYo+57OMPVWzO5XGX7tYb3gDdEt5s0nvNH2GeZAtb0F+m6PPCJm/ou13hljuctYv7AiWN/37321kEkd3i6o8eGAoJS0rmUcbJrrO7q6VbtKhgKiv2PVuHXjdc5l3K+M8MKpjfTXN8ytaTp0F5jzAv2xTcJzr4BNSXdNHWdfFdYLWTwQ13M8HLDV6NJL3HceoIHsNQS/37Gkop+Tpa+oPHyw3Yqk9hr6H43RBfocjwFy4p+L+NRKUGQpY91GrIBa6DFU46eIZTqsJIRH5yxtivC0VreHGP6uZYtOd+n882iWvaND6FsL/Ad8MdoN0mVkCzRGYq4Tf9Jy/YbdqY9waUxsloST9wFThXMt6d/ZWR88M2QbN7Gy7Dbn+GLI5gz3ttR1wb1EBNEiFANFZgAe1sE24N9XEyxfXMIb0Fm1KaDVu1bwtcb/CjLZjT8ub0MjywA+vtl+0t/ltimB6NbvoYqNPDlgUIwr1Sbutx6dc+8PGPKLdcshIf2fgpWOm5mBdOn7VBF4w5o5s8wvhCoDGNlmBuGwKqmKjOYMjUouQB1knqQiNeDvTpvjyAGPerXnIACBxKJoQl+JGldefqZVe196LZ+3LpMS39YQXJx5ck4b/3CGKxYLSZxfh99HSU3jKspFBUj7X4VqRHHuLVkekRXvUA5Xk3t3u8wMJ0EfNrPG8hXCxOTx5Uc9UpQoGO34sH4DbnSDyd1mZSFP9k1psFymKPkPdz3YuRYKCbyHfWUG6xCjumk0Y5SCvTWIg0Hhk0LNKQDqsz8aPa2fehQx5IklMZ9DXQ1iUDLe2iwfQ8TgGBBovTJI3Hme90AL5sH5L+BewkN7daSlzvGCwD6UQ1lJoAwr0Y6RLc8Fn7B39Oth8/jROrx2ShEVbMzQNr2ss8dSy4S0Y/Fh9acfFQDZQsvEb8lb4coyD0Bhhy+t1M+HEm4LPiE3PxWDM1uO6QwPtDbB6/sSEPkJIAbCEF+/ccSUK4pTUszj85JF5qAor/ZoRdu+eVGBdpurvhiVMY4qjo/6HVLL6T3pn9/DBQUgVRPMLNw+W4pUMFuFDzMtiMHzYumBEtl1WAs5OxsGrgCiXF9PSngC+oSMTLFupZIc5vL5Z1ofMzUT64SDzhbpfocrIYVApUEzbutWzIJXmO3VDIZFS96K7qXebqsOIsvBsQfpAbuIyLnHawP7m/+zegg5Hx7TgqzToMkuc5O6sRSDa3gMsrmpSf69SxW0X5oS7u4DQSLg70uEVx9d6TspUKT7HoJ7K229Ig/ABqPUB3qnM/95HlO46niEtI18lI+kjokgjoj8kPpZMSI9I2RPJKiGML8yGuBByRL0HLSOdJ7j9KYWo7aigQAlSzMK1n3m9FoHZBxkakHLqXq8Hg477cdkP7lo/C0py40jjUWVVSlpBbUG2otOu2Zo6eajD1RaS0aiqk7aiAv4/lNi1eK/gTqb2Kgcg/SJIuHzmcxnr0ZJs8iDVsy+rsZpSTDp3Xm6Wr1GN5CS5Err7vBirRH7R+Q6//a3aRNFIvoV026cPS4BKsj9MhxWSMOdnGXhBZycd5lVZfORjDaSyr+Vr2bYqef6AFmAxjTLZ2Kaj2JxyKp5RwAu7wNsCZLChT+XvMLdA0Fes9caxyMCA7TqseTKMST05Vh2Iow8VPSTZGmZU32y8hXiWkQHqlPwAgSHJnvxqpTVPLSBrA7ILWjR7OEuYzcG6etmTQ8UAZ0YqhjGkj90ZNaJe/M7+/ssF7pRC+HcwAxDR/T/bkkFXj0Ko9/yVk7Fs2sk1KKbSck4r3xaHd3Wn/a/tGxiHU6T8ML+dDCQwKQKlQr1Cj5wSoVDnQclx4UizO+VCbh5rmEBOnUqK7aou6DAID3hsQyfkIpPgWjhnYncy7yLBH8zCBetMJol+lrzQ/w7N/w57WYZyxJLjYh1toQyy399AvuDGGo3lSmKgm9lErA2Uu3+D31ctZCpmMbr8o/7kkScnUjLY0dLIK7SO3yHj59rIsUipyJKnI5cKMFg6sKzBafgrzRM/Yhi3/bTs3uB0WF0hEb9Lj/Cwgkc7h44O1Vk/HFdk5fRKBaK5S5+zYvS0Vmu6uz1R7wPQU7jMnPzAAF3ylx/xbbAdm31OuDmGt5lhQSTnfOlQ+svt6KZM5200mmtoKbrzXSFQxTDJt7vfVXzWVW11zW10em0gny4emN7GhCjMPPD60NOynDauRBs28yXpCitOFVz6bt+1kE7fsttw9O/pKsov2L57SViee26DzbD6NNgs3/EfQFluc+LEbbcdVQLw5QHAko2j4TNkCahhoBvF1gHQEbEzE2xLjsSwprnzS96hf5GrG1oPsWnxgALA7ho0HfAoViZV4UuS1IXOxgkd4fqqEVi40VTojzoXTvKF2cJvG3V8AgJUOOzoyHWEppeSh+ATjz61cTQ9XT3N1NUXD0DPhAfAfv7LsMz0G06QCcS2WGIH/fDMS/CJxqVb7iiStCAKeEnjwi7OKfGBaduHVO3Yy8RbYZB+Yk8lvh+KvYOsogyfbBzeBhNcVeAW0ZmQtpdij5E1myLKABKRCKwPgu6ss3xzlGYqePJvx+p255QSzN3xkD75SrLkZIAOOiRQl6+HHkJqCtN1Sq/CJxFGCavkWeBIS3wAyW77tQQeo33T+q7pBXrLIMwTIM19MGodCI4U6cASVLvHob+rpnDDR6SIrgh6ExV1MqakZeGoivrSIKwZcDrot4P8mEp1ku/xpSqZh9qTzUWxRvIqB5elChqzdhPHwM/YynrQlxIj16LswXiCVimWBMf2TtNWo8DYf0gskDiK4vJ0ebSiC13PdnrbObPuzYKnXU5okQ1Ac82PhuYGcl2p1COX0nL2YlJvViBqs6wfnl85KxAT0FPhklYKvrdPGqJ30lnyKZHDYnJqF4o4jMnqTJ6Xo5hBri6rTdtwAchgH2mgUfVV+GR30LqNl8+Q1JVxBsZJV7PJqHa2zExL3pGKGIvFuTXRsG9CVW5IVmEL21CyITWj08MsCBnwwL+UI2mxhIW+/v6w4pUZiixHoWzr9lGxPPT8fqj5nXhlATi8/gd0AzkUqW92skRT2aRa9/GOllyKKD3OEBNtiMKpf175majfRddEaMTnrg05Zb5ywP/Tk7xG7HhQ774C8nITTks+8sJRwbsWurN7rnxWMfF/o7tOE6rAJSqthcnpVcyat4sxEpWMZpJBGo9Eyr2SYBtKDFhznOlA15MBC2vT99hsg4X+zytWzfNdw0WiTPdCBMi1O/5X92dR3Myri3LRZwUBRk9n10uJkBPBn9WDBIy+KAoeq1nK8jpfFKRGOaktv99rRNTQ7ynX/55BM209bXCltZG/60HkCynFIQXss6J0TTNzjJjt/1Hodq19ksjBGt75eG9PLTHSqiLi6mngYg8YqXyAF543ACX7mzEVQl0ldR7EZsIE/3jh8fyII4HJLpcomU/NtxtRjioxsWWSneamqBUbLk2KRGXr9rB+G0iD/9i9EVuudOOuVvN3aF0q1ITFjJqd2CMhEk5MIcQ6XcinGkPaDWBd9IMc/znLTz6zcnBNZyzwGExkA/x6WHxi1RE5jln6WyvLpH4oRLDUOGkvcndHIQyLZLJgCxfPxawl8g8ZdSuyDPj/SrP2RM+NFYGeCq96X+DKj3Fw8JkkKqzyqOQcrsgGO8A7yEVHkMrPUMsuJh3kkUeuxU3ZAnBCbp3R1mLg/j6ckTqsxSiqZUAtPN9nUajBHFwX7oGS2Oi0wMzIEzSohz0R/55sx3OTGSU5cYUYrV6peEva/NHqt905PhoL+kWP5QP6Tl7yY0sU6ElqNrTikM/GiiYMDs4GuOnoyPy6d6tf3PXvHvjN3svV8aM+0X7oeZcaz0X8sENpXtjhnihngdstRUggGmOm0N8B9w+gMlHDtGKEAFaCh4MShb4pT6vWdAl0C3EZgA0tp3QpURYUzsCf8WJ6lNHYbS5/YoS4ihFS/KROLg9CSF5qx/EnVyTmShVnDd2Q/DizgZsvPY1v0MbP9vryptQjVQIeSTiCE7l9xIwxwPcerBwjOXuhXoOixE33fKTAwSox8y+0xyHeAxHKzgPQgeGgbnkIhc91ZhIzvG5xpnzIG/R7ZrsrWolvU40ewzbEfF0wBqyCmHFbbMJvFhTBKAvugkphlzH+SYYKYT9LfByKJmP4HuqA9bvWJrshg7NPDq4i51ma+NsQipj1tKEVuhRYeK0DjhbjHdloDNKBAdVQpz4Vxq3nDl+wHafGUIj1/ahf38BDoxhjsPcmUy9jrwguKV4KE5I+XvYxGss7A5xwm9XGsaVUkuMlQT8FSx6jJgyhA4WWGhGdLthVLZif190mW3QgWbITtNBvmF8K4IUtlkMBVmqK9c2g1ofS0GLnu9MiJInOULhYMK5OolzmFh4/s+HIAobC6b1wzhyICZ9PmfhjaoVY5XbZfu4XKIFK8LGJL8BqUl37NDIc227QlC0O/WuZv1N2Y3A1CtV+Y/2EcJuyf+cphpG635VwevDVIEhOdSTRIG37IRmiAAT06Zkp8S9hFy9mgt+IUFJgj8KhIpEgGZ0OAJxIrVjZJIjdJQ1YeMKjo+6udR9Z/USKfFlm+WUE0w6jOVD1RVtE5ZnLAZEX00StUcGx0A/2A1jNm4nfUFIYfmPv/NQvg41NzryCUpjiiZVv6aWkODb1K3auXbyaxklNRwS9AlTIwc2cGIbAyt8VABPjBEHS4ugH94MrfnZXM20oMS5uP/KSkg7yZN09Ue8efF1AFnFSctlmPDxMEN4SF2ArjPqsVK1BCvhZ87LqRmpi1QKilKiNCKvCoD778jVg4e4aWLJOt9jzw4cpDP4cZrKTIMfPpKvIWBR+KdleGsaKlCgNLUFptv1VAKIRV/zbxmuV2fLQBcDW8QeNYf380XLJMFBTktKQSEBOSj9kNxx4puMowO6BmaX/++xPz+yF7Iifj9g4aRxBwiH8Wwlgqd9Ap8wXFLBHJ23e1kRZ5yza/+FGhUPARGbOmifZPaC1fSBPyTiBsffXhjmnPsNnn3iwWf5bQk9Azqxfe040UtsfHth1nudmUy0U66o12VREWIfu1bYTEdcomDXm4QPLK46Y+2a78g1evyJmZwLBHmPd1l6QyGNywUDPpUOxh4x9Id36p/OsJJpo9NY/u3krDGPOKmZrY7y9cV+XBNGRWH+yD79wXDbNNbPd8geCcfOwc6K5KjFqeOxjQzFUfCVvmtK5oIKLQ0AIDcl5QA3mNrQNTXC7/8Fn1zwrXw2RlpMYsXO94UAnJKMetxSZyNZysriliyIAUVhH/wEVAhqAgatG/AZW2sNNyNuH93HpcC8ZSj5+zdUfxivchSEN8MYibzSJlnAM0u6aQs8bNjq7gGUfr1t+sZNefL/J8uZoN7geCJ6Le5Mr84PCKSCE9tchpYAmkk0xiHxh7le9c3lGTfZj4+yaoYtfKXw0C8+62WAbaPL/+iVuauu5OukLe4bwuNjpWMe5VE72TtkunIA+A5z9fPhMi+aekkeui3nj3djyGiV6Cpmk6q4kYBYxXpaXUFykxHqPlbg9x/gtuA1I2HfUkCuJEYlRnVq3vWCwvP3KTStC2zf4ZaelKMakgtGhBK8XKKCqSuGprkzXlCx5rlya/h3m7AzIGr9GTfG5QFdFEsN/FWzv8tWfBGjBHyZ7r3toQpC1LxiQ1cW4f4sjUCW3fV0YomafMWqDEouSuv1Vbk5VBmqOc+sIURwrL6I+DwgMdFwnlTMsxNO4XmCeA5ykC0DAPgyPQ70oJtmkGnk5mRtLTlK4ARL0U6M5xTH8WbEXcmSOI4D671AQC46tEwPNPnCp30/959mRfUYVEb/f/gIvz7xRBCMSKibmWMGXCg0fEKKFs9zNfMDwX0w70ZaIaL1uNDthr5TCbD0ZUODtAQ11sE4MYyTFHV+QvO7Wd3m7fSt46gbcDkp7PKQbWQYmmT81cx94bLHGSihkPpAjBQEC5GTn12xElwF43vbl4Kq5YcgG3ySZ6UdxcOtKoa0H2FkbqFLiTTR1jqhKT/vWSIz4LEwCfFDEMS2bVQAJQwzh3WUpqG18HmUu9npqoYiDaGhW2GUUfTd+3mU3y/X62z3T9LuKHCiEBrzj/yXJGH4h5W9K3V33I82Ag+KPhmSk53MlPTDZwMkQ5jJSFUzq3POuXbexrJm5U95vOvPd90A9rCivJ8XH+lCXZgx2vsHPURbmUqh1gYtyFDxd4lPmdrWOM65oTQcmcn6ug+kA7EfcWKFrAImi+5IaQVw8dtcDbitV9n6H0A9bHoyeFUPyq0o65QjUjYtcZBpcgElYyR0FlLdg6MN/G4hqYUod3oblehD9ho68ZxIMUVzzkzB0dtniRWvAIlqHd6T33aZ2Kh6ayLwhzIUt/nspRvql8k3KS698QL4VWaS6SnKNrN6H488JZvbz0Pax6Ml1QJkIB6ZYOSxHaReYKMamcmpGhg3vjSI84oWE4MHIkiKj0/jZ9rjddvvVZ2MGvsRgXzTEE8NOgKKdZzTg9Jh2pTKqSKtc145fKh9zPFUvaE0XAZXhbeilWVkTWbszJalN7zS6fiaTQwXlorfySkCvvW7+vvoXQSnhw6alQBPlh+QJxVRGSsJYJkA9R93fUssvdi5wnLz/+LU6/BFdyQNrxsJgU5IwY1xub0ZjjQn4wSmjgaBV6g+gC1nuaASvJaltENEtKl2l10WhunNlVYttaPVopFQm/LXj0futgtwP91Lh4As0hY4+QuZHooPuKE/oMSkDmpUswCG6xCRdt8gDLVB/zHa0S9zuzKQi9akzznRt0eeUGFK80MCT6ftSAAqmWsjfdeoXcKIxg/jq34q5RUhXe1kEipNvUlOUB1cfGpQ/7ECS6bhfEhPyBws1m7EEd4HfPeVxWJqYffYwNQX5unl+vgcobHLgFfMXgtN3v/X0QXakCySTdlECmnuep4I4HN317R4gFdoueLdXpL0uTt6IDjgBmNENNiBiMPNMYHr4mjZtDSzNkLA7ON5gG9Fi2sffNezckqQyAO6vGYfdi1eOoaI+rd+Ml2KghrS02vrN3nxXCEljt+v7bocrwhADWI9TUFWpFgQkSio9fQYDZ7HU5bi0ucKqvQdlMNtVuqzpACmovGoZpAGBJjMh4movRYNkLpwL/ifDzhO1ONSFUAYB8/uDSwwpLf23L3gHwMg2X89VXF0oqQixhBvNLFiMSXMAR1zLhxsqGZAQWZzgHpQTKeoceiKkF+SjUNAULZ1+DSyhd+h4D679j1ULs7TxZo138Mi1GgmIdJGLYZS5OiXjBNw3FW1g2mn4abVK2uvurzsVIT2wjOP1HQnpNWJEPIIhvZ6jWPC+vAVXUmiIK1W62GHuXQ598RcJD/aoVz33VukTH3saU6t0RGuCgdCW70uW9JhRXtA8y9T/qJbIL3pKoWOwp/lNnG6Oh11kH7XvWCwdokEdKvLMiEmJD6clns2iKzNhMFO5+qjvznQCJ+asMJYf94GydOKsmGVb7DvtYdkDKN1WreMdtdV22i3qzN7uthmOP3ukAOFGzAGXm5CunJ/tioOhsN9jE6xpH6KF+25b0Tgg2G4kyQFM83N6AhYzskTS6RNP+kU1NCN3EMsVSH/mWdLzbd8kqMv9IAVYV111Rr68ttsZTtaFMdfsTGPaLICHV4piZkkvAkuvZUc3Kjv3dwiftd+xGLDSyKhTVjh8zAjAS4NS2U7xYzmRGKvfOmjmRFAyOTRyVg0wBNaYpB2H/LRzs95g4p9rRLWsGxLcwFOEUiDwfPUCDyrtw76OdkTIX14hrqtTj4IXQS51VTPM5+iPGgxjlbaPBbSmix/sgQs2PsmVcRgqIc/JSNp+dJhmwJGkpQE5Y3zHUskqWDJQGW5qe4HHeZ4BHnVcy9MHinTS+brSjBFWVfE3n7Rv8uI31n3stYAqepaytG7JMJANL/z3GBmFBzk7QBFBp5koZ748ecFW/zjMLinhd5QNve9O82sBk89ZGhMYo/kuY0SoogEwenuo1huIuApLB7j3/wF8OAq5bdq0A166Nt330JNhE3vfMXc4pTC1OAlkv6hBIetCWQg5/18AK0WZKWVffJr+ivR51b3ON2TPaQxkdu200P+I+fEmtdS8qDxzY109vAJCWtgqnakVQoQoOeOvCnh5FioMkNFETHlXcvvn/y+VMgP9zw4BxwxEyzWUq5iVlY73C76uT05gErKzduQwncoZA6+6p4YDwK75h1I5L71skVUee9rBdLVFQhIITkQMh8f/MBSINJ0a5Wot+yYM37TirsNl+32tVqhK43IO/jnFk68mTdeiG0QMiCI7ufkK9ayPVxqZ0k16lGIwpDGebS76rwGbLFaMD2gmAjPmI9ZzZ8PGRFKtTw0qPGa/1ArP51J8Gz5tgO0scWbXprYGO/HlrQfFEQ0f0AiGZ26M7HUo+93fRqXOxSMQoaPjxFIkwarRUaUZ+DhkiAoxxKi7PQweMjVCEm6NecvGRd0kBRaeCEAcA2rblyN+PA3oSGl+fV8zrU3Atn9YsqNhlL2tJqPxP44tZlfvhZu0sQeLrfRR2hw8yDuvOaZvoTWBSsgzxbtDE3sf/oRtG1ZuoLdk4LE9UxuO8AHNE9BHsH1NW21EEZiiEQT0hD/QP7ofXDmqj3dyi7B8FhGrNtZk+5z3lc54MaJRyBvd2ZxU0nvjrFgE/ylMrc41Ao1bmw23wNrLP9tOGNfq/sQ/2rbqVFlDKnHykl8rmxczkaeyfg6Kq/R1E/4rQo3ZyEADI+VVr1Jd2PuOEpyrsZ31HXwbwr93pN+HBzLpS3w/faEEJENM89PUSx5UoVQ9izxJgnxF/rejx9BkgvbzrUcmADavmIGvQJj987a4AGH6/HVCHqqi5KFhDW4BtdpbAF7JJwKLmNOjooAMZ8wlEnJi02g39AbiFiJYMQx7CeRn5qcTXtS4/RhU+P4Cyh2dAQWUgPYKaWHLC1Kr/mCqtV2Fdav3NXx9MaaA3DcoylbBDk1op1Cad9s7zVt2O6BB8C7EJozd/f28//wdJ7JoyxNTs9wtIncbjHryYWAy30olkmMVXSdILpm+8WFdWlblftw0J72zmzoEbd6XO4GeNCMyaiLE4+MrdSpR8MNdFgvGMn4m47tyqTHN1yHuPPzCRQvlpFkvjbX8OD80aQZ8xGs+4Jk79N1QEbrF61bMGK7m6XKpE+qI3wv+Elh+g/JbjQpOrKziQlBxcYwB2frVhqO8w4eARw8YYL63ppo2I+13fabXxij8zUDgKZVS4to4Ya3regq8z00igmNgYL4jTuV8F2x9uFsk4vUJKxf1HhshCBcPlDeGVtEnqc/Pl2nF09adl5e5otfKfmEPhO5vfMeHfvcUINnHqq/jzeXNq1zLTZYiGmfDGL0tLEYjk2cmdTr8TF4UX5EiorhXHEUAPtYy6TyRo8dsEs4+JBAolBXRZcu5WcYZoWsT6e8ZKFTqUF9/j6qxu2TQDbjFBm923GUPRqKFcu2JnCVdwiNHl5R6hzsgeudBEEAynjLKNpFmuPQ9nKCbgP9jAoAyvtR9Gv8i9QHWixhLkf2c5HngChYRKPgRVKH+gteayiVomz0gzslUtxKmzNo8MRvWtjJsCqh+D0Cidnby4ZTzURo6NmSt6Y+F0PwwX/zCgFPItEq9d/Nj816ck4Xv1qK4BwrJXwj/0UMS90qZnqlsyQG9drlcAyQIwkMTrNkSN4GEWlDFQDglHzlpuRSj2DeBM8YHToPGBppI1+R1J+MOciBbf9o3Q9WKmLEQ+6JIhoos494HP2WeDQSgQrHuZ2eMCppc//Kb9lwcyaqlmLXR0VqpuZWRGqQk7FCnZzrHrBGqv0kL6+TYscn8ZvxoYs+n1cjzft0MCt+MxQv8Nn6LA/P9NgqdOIVYJX5qn5Fz2RowyYczkwFG7loOBHqVnFFQFdq4zR/um44URMiaFrdmDqwoow/V5szUKELK+j4QpC0i3EEDAubMdKGbnRnCQj15IFHoAFWZ"";
    CustomBase64 base64 = new CustomBase64();
    DataDecryptorNew decryptor = new DataDecryptorNew();
    decryptor.decrypt(Base64.decode(var.getBytes()));
}

}
The error which i received is following.
Exception in thread ""main"" javax.crypto.BadPaddingException: lHash mismatch
    at in.gov.uidai.kyc.client.RSAPadding.unpadOAEP(RSAPadding.java:396)
    at in.gov.uidai.kyc.client.RSAPadding.unpad(RSAPadding.java:244)
    at in.gov.uidai.kyc.client.RSAPadding.unpad(RSAPadding.java:227)
    at in.gov.uidai.kyc.client.AsymmetricEncryptionExample.performEncryptDecrypt(AsymmetricEncryptionExample.java:127)
    at in.gov.uidai.kyc.client.AsymmetricEncryptionExample.main(AsymmetricEncryptionExample.java:68)

","There are 2 things that i have noticed in your piece of code :-
While initializing the PSource don`t initialize ""iv"" parameter it again , instead use the argument value from the method . 
So instead of using 
`PSource pSrc = (new PSource.PSpecified(new byte[256]));`

try using
PSource pSrc = (new PSource.PSpecified(iv));

Also in the you are using SHA-256 , however while initializing OAEPParameterSpec used for OAEP padding , you are using SHA-1 instead of SHA-256 for MGF1ParameterSpec
So instead of using
 OAEPParameterSpec paramSpec = new OAEPParameterSpec(""SHA-256"", ""MGF1"", MGF1ParameterSpec.SHA1, pSrc);

try using :-
OAEPParameterSpec paramSpec = new OAEPParameterSpec(""SHA-256"", ""MGF1"", MGF1ParameterSpec.SHA256, pSrc);

Hope this will work for you...
Cheers!!
","613","<encryption><pkcs#11><hsm>","1","3","1","2016-11-04 23:15:39","37560277","2","4","6326607","","2016-05-31 12:26:49","2016-05-31 12:14:29",""
"40922911","generating java code from wsdl using jaxb that requires pkcs11 auth over https","I have a problem generating wsdl2java code from an endpoint that requires pkcs11 (smatcard) authentication. I have configures jaxb maven plugin like this :
   <plugin>
            <groupId>org.jvnet.jaxb2.maven2</groupId>
            <artifactId>maven-jaxb2-plugin</artifactId>
            <version>0.13.1</version>
            <executions>
                <execution>
                    <goals>
                        <goal>generate</goal>
                    </goals>
                </execution>
            </executions>
            <configuration>
                <schemaLanguage>WSDL</schemaLanguage>
                <generatePackage>hello.wsdl</generatePackage>
                <schemas>
                    <schema>
                        <url>https://mysecuredwsdl.com?wsdl</url>
                    </schema>
                </schemas>
            </configuration>
 </plugin>

When i execute the generate task i get this error :

[ERROR] Error while parsing schema(s).Location [].
  com.sun.istack.SAXParseException2; IOException thrown when processing ""https://...?wsdl"". Exception: javax.net.ssl.SSLHandshakeException: sun.security.validator.ValidatorException: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target.
      at com.sun.tools.xjc.ErrorReceiver.error(ErrorReceiver.java:94)
      at com.sun.tools.xjc.reader.internalizer.DOMForest.parse(DOMForest.java:402)
      at com.sun.tools.xjc.reader.internalizer.DOMForest.parse(DOMForest.java:274)
      at com.sun.tools.xjc.ModelLoader.buildDOMForest(ModelLoader.java:324)
      at com.sun.tools.xjc.ModelLoader.loadWSDL(ModelLoader.java:391)
      at com.sun.tools.xjc.ModelLoader.load(ModelLoader.java:170)
      at com.sun.tools.xjc.ModelLoader.load(ModelLoader.java:119)
      at org.jvnet.mjiip.v_2_2.XJC22Mojo.loadModel(XJC22Mojo.java:50)
      at org.jvnet.mjiip.v_2_2.XJC22Mojo.doExecute(XJC22Mojo.java:40)
      at org.jvnet.mjiip.v_2_2.XJC22Mojo.doExecute(XJC22Mojo.java:28)
      at org.jvnet.jaxb2.maven2.RawXJC2Mojo.doExecute(RawXJC2Mojo.java:505)
      at org.jvnet.jaxb2.maven2.RawXJC2Mojo.execute(RawXJC2Mojo.java:328)
      at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:101)
      at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:209)
      at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:153)
      at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:145)
      at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:84)
      at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:59)
      at org.apache.maven.lifecycle.internal.LifecycleStarter.singleThreadedBuild(LifecycleStarter.java:183)
      at org.apache.maven.lifecycle.internal.LifecycleStarter.execute(LifecycleStarter.java:161)
      at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:320)
      at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:156)
      at org.apache.maven.cli.MavenCli.execute(MavenCli.java:537)
      at org.apache.maven.cli.MavenCli.doMain(MavenCli.java:196)
      at org.apache.maven.cli.MavenCli.main(MavenCli.java:141)
      at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
      at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
      at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
      at java.lang.reflect.Method.invoke(Method.java:498)
      at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:290)
      at org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:230)
      at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:409)
      at org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:352)
      at org.codehaus.classworlds.Launcher.main(Launcher.java:47)
      at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
      at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
      at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
      at java.lang.reflect.Method.invoke(Method.java:498)
      at com.intellij.rt.execution.application.AppMain.main(AppMain.java:147)
  Caused by: javax.net.ssl.SSLHandshakeException: sun.security.validator.ValidatorException: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target
      at sun.security.ssl.Alerts.getSSLException(Alerts.java:192)
      at sun.security.ssl.SSLSocketImpl.fatal(SSLSocketImpl.java:1949)
      at sun.security.ssl.Handshaker.fatalSE(Handshaker.java:302)
      at sun.security.ssl.Handshaker.fatalSE(Handshaker.java:296)
      at sun.security.ssl.ClientHandshaker.serverCertificate(ClientHandshaker.java:1509)
      at sun.security.ssl.ClientHandshaker.processMessage(ClientHandshaker.java:216)
      at sun.security.ssl.Handshaker.processLoop(Handshaker.java:979)
      at sun.security.ssl.Handshaker.process_record(Handshaker.java:914)
      at sun.security.ssl.SSLSocketImpl.readRecord(SSLSocketImpl.java:1062)
      at sun.security.ssl.SSLSocketImpl.performInitialHandshake(SSLSocketImpl.java:1375)
      at sun.security.ssl.SSLSocketImpl.startHandshake(SSLSocketImpl.java:1403)
      at sun.security.ssl.SSLSocketImpl.startHandshake(SSLSocketImpl.java:1387)
      at sun.net.www.protocol.https.HttpsClient.afterConnect(HttpsClient.java:559)
      at sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection.connect(AbstractDelegateHttpsURLConnection.java:185)
      at sun.net.www.protocol.http.HttpURLConnection.getInputStream0(HttpURLConnection.java:1513)
      at sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:1441)
      at sun.net.www.protocol.https.HttpsURLConnectionImpl.getInputStream(HttpsURLConnectionImpl.java:254)
      at com.sun.org.apache.xerces.internal.impl.XMLEntityManager.setupCurrentEntity(XMLEntityManager.java:647)
      at com.sun.org.apache.xerces.internal.impl.XMLVersionDetector.determineDocVersion(XMLVersionDetector.java:148)
      at com.sun.org.apache.xerces.internal.parsers.XML11Configuration.parse(XML11Configuration.java:805)
      at com.sun.org.apache.xerces.internal.parsers.XML11Configuration.parse(XML11Configuration.java:770)
      at com.sun.org.apache.xerces.internal.parsers.XMLParser.parse(XMLParser.java:141)
      at com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser.parse(AbstractSAXParser.java:1213)
      at com.sun.org.apache.xerces.internal.jaxp.SAXParserImpl$JAXPSAXParser.parse(SAXParserImpl.java:643)
      at com.sun.tools.xjc.reader.internalizer.DOMForest.parse(DOMForest.java:394)
      ... 37 more
  Caused by: sun.security.validator.ValidatorException: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target
      at sun.security.validator.PKIXValidator.doBuild(PKIXValidator.java:387)
      at sun.security.validator.PKIXValidator.engineValidate(PKIXValidator.java:292)
      at sun.security.validator.Validator.validate(Validator.java:260)
      at sun.security.ssl.X509TrustManagerImpl.validate(X509TrustManagerImpl.java:324)
      at sun.security.ssl.X509TrustManagerImpl.checkTrusted(X509TrustManagerImpl.java:229)
      at sun.security.ssl.X509TrustManagerImpl.checkServerTrusted(X509TrustManagerImpl.java:124)
      at sun.security.ssl.ClientHandshaker.serverCertificate(ClientHandshaker.java:1491)
      ... 57 more
  Caused by: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target
      at sun.security.provider.certpath.SunCertPathBuilder.build(SunCertPathBuilder.java:141)
      at sun.security.provider.certpath.SunCertPathBuilder.engineBuild(SunCertPathBuilder.java:126)
      at java.security.cert.CertPathBuilder.build(CertPathBuilder.java:280)
      at sun.security.validator.PKIXValidator.doBuild(PKIXValidator.java:382)

Now, i tried running the maven task using this parameters :
-Djavax.net.ssl.keyStore=NONE -Djavax.net.ssl.keyStoreType=PKCS11 -Djavax.net.ssl.keyStorePassword=1111 -Djavax.net.ssl.trustStore=NONE -Djavax.net.ssl.trustStoreType=PKCS11 -Djavax.net.ssl.trustStorePassword=1111 -Djavax.net.ssl.trustStoreProvider=SunPKCS11 -Djavax.net.ssl.keyStoreProvider=SunPKCS11

I got this error :

com.sun.istack.SAXParseException2; IOException thrown when processing ""https://...?wsdl"". Exception: java.net.SocketException: java.security.NoSuchAlgorithmException: Error constructing implementation (algorithm: Default, provider: SunJSSE, class: sun.security.ssl.SSLContextImpl$DefaultSSLContext). 
  Caused by: java.security.NoSuchProviderException: no such provider: SunPKCS11

So after that i tried to eliminate the keyStoreProvider and trustedStoreProvider properties :
-Djavax.net.ssl.keyStore=NONE -Djavax.net.ssl.keyStoreType=PKCS11 -Djavax.net.ssl.keyStorePassword=1111 -Djavax.net.ssl.trustStore=NONE -Djavax.net.ssl.trustStoreType=PKCS11 -Djavax.net.ssl.trustStorePassword=1111

I got this error :

[ERROR] Error while parsing schema(s).Location [].
  com.sun.istack.SAXParseException2; IOException thrown when processing ""https://....?wsdl"". Exception: java.net.SocketException: java.security.NoSuchAlgorithmException: Error constructing implementation (algorithm: Default, provider: SunJSSE, class: sun.security.ssl.SSLContextImpl$DefaultSSLContext).
      at com.sun.tools.xjc.ErrorReceiver.error(ErrorReceiver.java:94)
      at com.sun.tools.xjc.reader.internalizer.DOMForest.parse(DOMForest.java:402)
      at com.sun.tools.xjc.reader.internalizer.DOMForest.parse(DOMForest.java:274)
      at com.sun.tools.xjc.ModelLoader.buildDOMForest(ModelLoader.java:324)
      at com.sun.tools.xjc.ModelLoader.loadWSDL(ModelLoader.java:391)
      at com.sun.tools.xjc.ModelLoader.load(ModelLoader.java:170)
      at com.sun.tools.xjc.ModelLoader.load(ModelLoader.java:119)
      at org.jvnet.mjiip.v_2_2.XJC22Mojo.loadModel(XJC22Mojo.java:50)
      at org.jvnet.mjiip.v_2_2.XJC22Mojo.doExecute(XJC22Mojo.java:40)
      at org.jvnet.mjiip.v_2_2.XJC22Mojo.doExecute(XJC22Mojo.java:28)
      at org.jvnet.jaxb2.maven2.RawXJC2Mojo.doExecute(RawXJC2Mojo.java:505)
      at org.jvnet.jaxb2.maven2.RawXJC2Mojo.execute(RawXJC2Mojo.java:328)
PKCS11 KeyStore not available

I made a connection using apache http to this secured webservice. So i know that i can connect to it. I used this test code :
@Test
public void testCertificate() throws CertificateException, NoSuchAlgorithmException, KeyStoreException, IOException, KeyManagementException, UnrecoverableKeyException {
    // Trust own CA and all self-signed certs
    KeyStore ks = getKeystore();
    ks.load(null, ""1111"".toCharArray());
    SSLContext sslcontext = SSLContexts.custom().loadTrustMaterial(ks,new TrustSelfSignedStrategy()).loadKeyMaterial(ks,""1111"".toCharArray())
            .build();
    // Allow TLSv1 protocol only
    SSLConnectionSocketFactory sslsf = new SSLConnectionSocketFactory(
            sslcontext,
            new String[]{""TLSv1""},
            null,
            SSLConnectionSocketFactory.getDefaultHostnameVerifier());
    CloseableHttpClient httpclient = HttpClients.custom()
            .setSSLSocketFactory(sslsf)
            .build();
    try {

        HttpGet httpget = new HttpGet(""https://...?wsdl"");

        System.out.println(""Executing request "" + httpget.getRequestLine());

        CloseableHttpResponse response = httpclient.execute(httpget);
        try {
            HttpEntity entity = response.getEntity();

            System.out.println(""----------------------------------------"");
            System.out.println(response.getStatusLine());
            EntityUtils.consume(entity);
        } finally {
            response.close();
        }
    } finally {
        httpclient.close();
    }
}




    private KeyStore getKeystore(){
    String pin = ""1111"";
    char[] pin_arr = pin.toCharArray();
    String pkcs11config = ""name = SmartCard\n""  + ""library = c:/windows/system32/eTPKCS11.dll"";
    byte[] pkcs11configBytes = pkcs11config.getBytes();
    ByteArrayInputStream configStream = new ByteArrayInputStream(pkcs11configBytes);
    Provider pkcs11Provider = new sun.security.pkcs11.SunPKCS11(configStream);
    Security.addProvider(pkcs11Provider);

    KeyStore smartCardKeyStore = null;
    try {
        smartCardKeyStore = KeyStore.getInstance(""PKCS11"");
    } catch (KeyStoreException e) {
        e.printStackTrace();
    }
    return smartCardKeyStore;
}

I have no other ideas. Maybe jaxb2 is not the best option. I tried using Apache CXF but the problem remains. I cannot authenticate.
Thx.
","","613","<soap><https><jaxb><wsdl><pkcs#11>","1","","0","2016-12-02 00:41:00","","5","","","","","2016-12-02 00:41:00",""
"26740266","Multiple HSMs through PKCS#11","I have multiple SafeNet HSMs that i wish to connect to all of them at any one time from a single client. I know this cannot be done through PKCS#11 because PKCS#11 has the concept of a single HSM at a time with multiple slots.
So, is it possible to connect to the multiple HSMs at any one time?
","Yes, Safenet's HSM model's support something called High availability mode.
This allows the Application to see a virtual HSM rather than a group of HSMs.
","598","<pkcs#11><hsm>","1","0","2","2017-07-21 13:22:17","","1","","3329664","","2017-07-21 13:22:17","2014-11-04 16:33:04",""
"26740266","Multiple HSMs through PKCS#11","I have multiple SafeNet HSMs that i wish to connect to all of them at any one time from a single client. I know this cannot be done through PKCS#11 because PKCS#11 has the concept of a single HSM at a time with multiple slots.
So, is it possible to connect to the multiple HSMs at any one time?
","I'm not sure whether this question is referring to the ability to connect to separate HSMs for separate functions, or to load-balance and provide failover between the HSMs.
For the first scenario, if you have multiple HSMs registered with the client, they should show up as separate slots and you can use the desired slot in your PKCS #11 code:
Output from ckdemo option 11 (Slot Info):

Slots available:
        slot#1 - LunaNet Slot
        slot#2 - LunaNet Slot

As Raj mentioned, Safenet Luna HSMs do have a High Availability (HA) mode that allows load-balancing and failover.  To expand on that answer, if you configure your HSMs for HA use and create a HA group on your Safenet client using the vtl haAdmin command, you will see a virtual slot in addition to the separate slots for the individual HSMs:
Output from ckdemo option 11 (Slot Info):
Slots available:
        slot#1 - LunaNet Slot
        slot#2 - LunaNet Slot
        slot#3 - HA Virtual Card Slot 

You can now use that Virtual slot in your PKCS #11 code to interface with the HSMs in the HA pool and the Safenet client software will take care of determining how to route the requests between the HSMs.
","598","<pkcs#11><hsm>","1","0","2","2017-07-21 13:22:17","","1","","3329664","","2017-07-21 13:22:17","2014-11-04 16:33:04",""
"52082210","No such algorithm: PKCS11 for provider SunPKCS11-CartaoCidadao","There are my current providers: 

0 - Provider name: SUN
  1 - Provider namer: SunRsaSign
  2 - Provider name: SunEC 
...
9 - Provider name: SunPKCS11-CartaoCidadao

The ninth provider is the one that I'm trying to use, which uses the pkcs11 library. 
Provider prov = Security.getProvider(""SunPKCS11-CartaoCidadao"");
keyStore = KeyStore.getInstance(""PKCS11"", prov );

Using the info method I can see it's using the library: 
System.out.println(prov.getInfo());


SunPKCS11-CartaoCidadao using library /usr/local/lib/libpteidpkcs11.so

Yet, while I'm trying to get a key instance, it tells me  there's no PKCS11 for that provider, which it should.
KeyStore ks = KeyStore.getInstance(""PKCS11"",""SunPKCS11-CartaoCidadao"");
keyStore.load( null, null );


java.security.KeyStoreException: PKCS11 not found
Caused by: java.security.NoSuchAlgorithmException: no such algorithm: PKCS11 for provider SunPKCS11-CartaoCidadao

Anyone have any idea how to solve this issue?
","The second parameter should be of type Provider.
Use the following:
KeyStore ks = KeyStore.getInstance(""PKCS11"",prov);

","597","<java><keystore><pkcs#11><java-security><sunpkcs11>","1","0","1","2018-10-24 07:47:48","","0","","","","","2018-08-29 16:31:44",""
"52115798","PKCS#11 Signature with iText & eTPKCS11.dll & SunPKCS11 Provider","I have problems when trying to make signature using SunPKCS11 Provider linked to eTPKCS11.dll. Even with iText signDetached, also when trying simple Signature, I always get ""Exception in thread ""main"" java.security.ProviderException: sun.security.pkcs11.wrapper.PKCS11Exception: CKR_USER_NOT_LOGGED_IN"".
I succesfully obtain PK, the authentication is done by callback which returns directly password for token. It seems like token needs another auth process for signature?
The device is SafeNet eToken 5110, running on Win7 64bit...
Thanks a lot!
public class Main {

    public static Properties properties = new Properties();

    public static void main(String args[]) throws IOException, GeneralSecurityException, DocumentException
        {
        String userFile = ""E:/plain.pdf"";
        String userFile_signed = ""E:/plain-tsig.pdf"";

        String pkcs11Config = ""name=eToken\nlibrary=C:\\Windows\\System32\\eTPKCS11.dll\nshowInfo=true"";
        java.io.ByteArrayInputStream pkcs11ConfigStream = new java.io.ByteArrayInputStream(pkcs11Config.getBytes());
        sun.security.pkcs11.SunPKCS11 providerPKCS11 = new sun.security.pkcs11.SunPKCS11(pkcs11ConfigStream);

        java.security.Security.addProvider(providerPKCS11);
        String pin = ""PIN-1234"";

        KeyStore.CallbackHandlerProtection chp = new KeyStore.CallbackHandlerProtection(new MyGuiCallbackHandler() {});
        KeyStore.Builder builder = KeyStore.Builder.newInstance(""PKCS11"", null, chp);

        KeyStore keyStore = builder.getKeyStore();
        java.util.Enumeration<String> aliases = keyStore.aliases();
        String alias = null;
        while (aliases.hasMoreElements()) {
            alias = aliases.nextElement();
            System.out.println(alias);
        }
        System.out.println(providerPKCS11.getName());
        PrivateKey pk = (PrivateKey) keyStore.getKey(alias, null);


        Certificate[] chain = keyStore.getCertificateChain(alias);
        OcspClient ocspClient = new OcspClientBouncyCastle();
        TSAClient tsaClient = null;
        for (int i = 0; i < chain.length; i++) {
            X509Certificate cert = (X509Certificate)chain[i];
            String tsaUrl = CertificateUtil.getTSAURL(cert);
            if (tsaUrl != null) {
                tsaClient = new TSAClientBouncyCastle(tsaUrl);
                break;
            }
        }
        List<CrlClient> crlList = new ArrayList<CrlClient>();
        crlList.add(new CrlClientOnline(chain));
        Main t = new Main();
        System.out.println(providerPKCS11.getServices().toString());

        Signature signer = Signature.getInstance(""SHA256withRSA"", keyStore.getProvider());
        signer.initSign(pk);
        String data = ""Hello world......"";
        signer.update(data.getBytes()); 
        byte[] signedData = signer.sign();        
        System.out.println(signedData.toString());

        providerPKCS11.logout();
}

    private static abstract class MyGuiCallbackHandler implements CallbackHandler {

        public MyGuiCallbackHandler() {
            System.out.println(""Sending PIN from callback..."");
        }

        public void handle(Callback[] callbacks) throws IOException, UnsupportedCallbackException {
            for (int i = 0; i < callbacks.length; i++) {
                PasswordCallback pc = (PasswordCallback) callbacks[i];
                String pin = ""PIN-1234"";
                pc.setPassword(pin.toCharArray());
            }
        }
}

}

And the result:
run:
SunPKCS11 loading ---DummyConfig-1---
sunpkcs11: Initializing PKCS#11 library C:\Windows\System32\eTPKCS11.dll
Information for provider SunPKCS11-eToken
Library info:
  cryptokiVersion: 2.20
  manufacturerID: SafeNet, Inc.                   
  flags: 0
  libraryDescription: SafeNet eToken PKCS#11          
  libraryVersion: 10.04
All slots: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13
Slots with tokens: 0
Slot info for slot 0:
  slotDescription: AKS ifdh 0                                                      
  manufacturerID: SafeNet, Inc.                   
  flags: CKF_TOKEN_PRESENT | CKF_REMOVABLE_DEVICE | CKF_HW_SLOT
  hardwareVersion: 1.00
  firmwareVersion: 0.00
Token info for token in slot 0:
  label: ****               
  manufacturerID: Gemalto                         
  model: ID Prime MD     
  serialNumber: ****
  flags: CKF_RNG | CKF_LOGIN_REQUIRED | CKF_USER_PIN_INITIALIZED | CKF_DUAL_CRYPTO_OPERATIONS | CKF_TOKEN_INITIALIZED
  ulMaxSessionCount: CK_EFFECTIVELY_INFINITE
  ulSessionCount: 0
  ulMaxRwSessionCount: CK_EFFECTIVELY_INFINITE
  ulRwSessionCount: 0
  ulMaxPinLen: 16
  ulMinPinLen: 4
  ulTotalPublicMemory: 32768
  ulFreePublicMemory: 25882
  ulTotalPrivateMemory: 32768
  ulFreePrivateMemory: 25882
  hardwareVersion: 16.00
  firmwareVersion: 16.01
...
PKCS#11 Provider ->SunPKCS11-eToken using library C:\Windows\System32\eTPKCS11.dll
Sending PIN from callback
sunpkcs11: login succeeded
iSignum 00000000-000000
...
Exception in thread ""main"" java.security.ProviderException: sun.security.pkcs11.wrapper.PKCS11Exception: CKR_USER_NOT_LOGGED_IN
    at sun.security.pkcs11.P11Signature.engineSign(P11Signature.java:591)
    at java.security.Signature$Delegate.engineSign(Signature.java:1207)
    at java.security.Signature.sign(Signature.java:579)
    at TSTgo.Main.main(Main.java:146)
Caused by: sun.security.pkcs11.wrapper.PKCS11Exception: CKR_USER_NOT_LOGGED_IN
    at sun.security.pkcs11.wrapper.PKCS11.C_SignFinal(Native Method)
    at sun.security.pkcs11.P11Signature.engineSign(P11Signature.java:553)
    ... 3 more

","I believe you missing login bit.
providerPKCS11.login(null, YourCallbackHandler)
","595","<java><authentication><digital-signature><pkcs#11><sunpkcs11>","0","0","1","2018-09-07 11:11:56","","0","","2123044","","2018-08-31 13:38:41","2018-08-31 12:46:55",""
"44083326","Create openssl EC_KEY object based on EC point value","I want to verify ECDSA signature using openssl. The EC point value i retrieve from ECDSA key pair that i generated using PKCS11. Below is the code that currently i have done.
VerifyEccData(int hashAlgo,BYTE *data,int dataLen,BYTE *signature,int 
signatureLen,BYTE* curveType,BYTE* ecPoint,int ecPointLen)
{
  const unsigned char * a = (unsigned char *)ecPoint + 2
  EC_KEY *ec = EC_KEY_new();
  int eccGrpSN = OBJ_txt2nid(""secp112r1"");
  EC_GROUP *ecgroup  = EC_GROUP_new_by_curve_name(eccGrpSN);
  EC_KEY_set_group(ec,ecgroup ); 
  o2i_ECPublicKey(&ec,  &a, ecPointLen-2);
  SHA1(data, dataLen,shaResult);
  ECDSA_verify(0,shaResult, sizeof(shaResult), signature,signatureLen, ec);
}

Above code return 

error:10067066:elliptic curve routines:ec_GFp_simple_oct2point:invalid encoding

I'm not sure what is the the meaning if this error. If anyone can help or point me to the right direction really appreciate.
I found this https://www.mail-archive.com/opensc-devel@lists.opensc-project.org/msg08847.html but when i try it give different error. 

error:0D07209B:asn1 encoding routines:ASN1_get_object:too long

","","592","<c++><openssl><pkcs#11>","4","","0","2017-05-20 16:40:43","","3","","5164178","","2017-05-20 16:40:43","2017-05-20 07:52:03",""
"52220368","Unwrapping RSA encrypted AES key using Safenet HSM and Java leaks the unwrapped key","I am using a Safenet HSM (Hardware Security Module) to store my cryptographic keys, and I am trying to unwrap a secret key (AES/DES) encrypted with RSA using Java APIs and SunPKCS11. I would like to do this securely, so that unwrapped AES/DES key cannot be extracted from the HSM (like the RSA private key value is invisible). However, after unwrapping the value of the unwrapped key is visible in the key object outside the HSM.
Here is my code:
Key privateKey = keyStore.getKey(""MyKeyId"", keyStorePassword);

Cipher cipher = Cipher.getInstance(""RSA"", ""SunPKCS11-Safenet"");
cipher.init(Cipher.UNWRAP_MODE, privateKey);
Key unwrappedKey = cipher.unwrap(wrappedKey, ""AES"", Cipher.SECRET_KEY);
// At this point the unwrapped key is visible in the unwrappedKey object!

How I can tell the code not to reveal the unwrapped key? Do I have to add something in the PKCS11 config file? I've tried adding the options below into the config file, but it doesn't seem to help:
attributes(*,CKO_SECRET_KEY,*) = {
  CKA_SENSITIVE=true
}

I am not sure if revealing keys during unwrapping is expected from the API. If so, how I can import such keys securely into the HSM so that they cannot be extracted from it?
I've tried asking the Safenet support team, but they could not answer why this is happening. So, after lots of trying and searching the Internet, I have asked this question here.
","If you unwrap the key... you get back the key.  ie, unwrapping a key exposes the key.  If you are asking the HSM to unwrap the key, it is doing what you told it to do.
Maybe you want to import the key instead, if the HSM supports this operation.  The assumption on key import is that the HSM understands the format in which the key has been wrapped for security/protection/transport.  
It will then do the unwrap for you, and save the unwrapped key in its database.  Maybe it then hands you back the key as a handle, or as a differently wrapped key (ie, wrapped using its internal master key).
Moving a key between comparable HSMs is export/import or backup/restore, depending on the device and the devices' understanding of those verbs.
Moving a key between different vendor's HSMs or different cryptosystems, without exposing the secrets is an interesting exercise. 
","584","<java><pkcs#11><jce><hsm>","4","0","1","2018-10-20 20:35:45","","12","1","9192148","","2018-09-12 14:47:23","2018-09-07 10:15:13",""
"28850132","Is there a way to convert Keystore of instance PKCS11 to JKS programmatically?","I am using a smart card and the keystore instance is in PKCS11 format.
I wanted to create a .jks file with the Certificate from the smart card.
Is there a way to achieve it programmatically? Thanks.
","You can, (HOWEVER, IT IS NOT ADVISABLE), provided if the hardware token manufacturer supports it and if you have created your PKCS#11 Objects as extractable.
WARNING: What you are trying to do is NOT secure. You are taking away the purpose of what the hardware tokens are meant to do. Once a secret Object is created in a hardware token, it doesn't see the light of the day.
For a PKCS11 Object to be extractable, you have to set the CKA_EXTRACTABLE to true, CKA_NEVER_EXTRACTABLE to false, CKA_SENSITIVE to false and CKA_ALWAYS_SENSITIVE to false.
Most hardware token manufacturer's don't support this. Assuming that you have found a vendor who supports this, and you have created the PKCS11 Objects with the above attributes, you can do it as below.
You can loop through your PKCS11 KeyStore instance entries by calling aliases() and find each entry in it. It can either be a KeyPair (PublicKey and PrivateKey) or a Certificate or a Data Object (if it is PIV SmartCard token). You can have another instance of JKS KeyStore and you can now do jksKS.setEntry(...) or jksKS.setCertificateEntry(...).
If the token doesn't support creation of non-sensitive data, you won't be able to create the PKCS11 Object with the above attributes in the first place.
If the token doesn't support extraction, the PKCS11 token would throw exception saying that sensitive data cannot be extracted.
","574","<java><pkcs#11><jks>","2","0","1","2015-08-01 05:12:57","","1","","","","","2015-03-04 08:53:13",""
"37829194","Creating a Certificate Signing Request using smartcard in C++","I have a smart card and it has own special pkcs11 library. I examine gnutls, openssl but they use own generated private key. How can I generate csr(pkcs10) using smartcard in C++?
","You don't generate a CSR using smartcard -- you generate a keypair, which is then used to create a CSR. I know that our SecureBlackbox product lets one do this. Or you can call PKCS#11 library to generate a key pair, then use PKCS#11 extension to OpenSSL to create a CSR.
","566","<c++><smartcard><pkcs#11><csr>","0","0","1","2016-06-15 14:56:55","","0","1","","","","2016-06-15 07:48:12",""
"40215808","PKCS #11: Is C_Login done per session or not ?","I'm working with PKCS#11 library in multithreaded app. I expected that C_Login must be done for each C_OpenSession to work with sensitive content. But it appears that when one thread has logged in, all following calls to C_Login return ALREADY_LOGGED error.
The app is multithreaded and if one thread has provided the PIN all other threads serving another users may access the hardware content.
Is this by PKCS#11 design and can I rely on this behavior or just poor implementation?
","It is by design that C_Login and C_Logout functions globally change the state of all sessions (even those that are yet to be opened). See chapter 6.7 of PKCS#11 v2.20 specification for more details.
","566","<security><pkcs#11>","1","4","1","2016-10-24 19:18:55","","0","","","","","2016-10-24 10:12:25",""
"37674529","Oracle TDE cannot find new PKCS#11 library","I have previously used an Utimaco HSM with Oracle database, but I want to put pcks#11-spyorpkcs#11-logger` between the hsm. The Utimaco HSM library is working and I used this command:
alter system set encryption key identified by <HSM_passphrase>;

But now I am trying to use a the pkcs11-spy. But Oracle cannot find the new library and returns the following:
alter system set encryption key identified by <HSM_passphrase>;

Error at line 1:
ORA:28376: cannot find PKCS11 library

It is unclear for me how to setup the folders in C:\oracle\extapi\32\hsm\... for the spies.  In the future I want to build my own pkcs11 library and I will have the same problem of not knowing how to setup the pkcs11 library.
","The only solution I found was to reinstall the database with a new PKCS#11 library.
","565","<oracle><pkcs#11><hsm><tde>","0","0","1","2016-10-14 11:56:33","40042607","0","0","","","","2016-06-07 08:42:34",""
"16791748","SunPKCS11 and PKCS11 middleware","I am trying to consume a middleware for calculating Hash values. 
The code is as given below:
    Provider provider = new sun.security.pkcs11.SunPKCS11(""D:\\PKI\\Middleware\\pkcs.cfg"");
    Security.addProvider(provider);

My pkcs.cfg file looks like this:
name=RANDOM
slot=0
library=D:\PKI\Middleware\bin\PKCS11Library.dll.

When I try to run the above code the JVM crashes instantly with the below crash report.
Any help would be appreciated.
","try  putting in a bytearrayinputstream
String pkcs11config1 = ""name=Athenaslot1\nlibrary=C:\WINDOWS\system32\asepkcs.dll"";
byte[] pkcs11configBytes1 =pkcs11config1.getBytes();
ByteArrayInputStream configStream1 = new ByteArrayInputStream(pkcs11configBytes1);
etpkcs11 = new SunPKCS11(configStream1);
Security.addProvider(etpkcs11);

","557","<pkcs#11>","0","1","1","2013-08-26 07:05:55","","0","","104223","","2013-05-28 12:16:47","2013-05-28 12:11:49",""
"37127452","Linking error for a C application using PKCS#11 API","I am trying to compile an example basic code that performs PKCS#11 initialization only but get following error;
gcc pkcs11_example1.c -o pk -L /usr/lib64/pkcs11/opensc-pkcs11.so 
/tmp/cc8Dl0HE.o: In function `initialize':
pkcs11_example1.c:(.text+0x10): undefined reference to `C_GetFunctionList'
pkcs11_example1.c:(.text+0x2b): undefined reference to `assert'
collect2: error: ld returned 1 exit status

the rpm command shows following so paths
rpm -ql opensc
/usr/lib64/libopensc.so.3
/usr/lib64/libopensc.so.3.0.0
/usr/lib64/libsmm-local.so.3
/usr/lib64/libsmm-local.so.3.0.0
/usr/lib64/opensc-pkcs11.so
/usr/lib64/pkcs11
/usr/lib64/pkcs11-spy.so
/usr/lib64/pkcs11/opensc-pkcs11.so
/usr/lib64/pkcs11/pkcs11-spy.so

my code is pasted below
CK_RV  
initialize()
{
    CK_FUNCTION_LIST_PTR pFunctionList;
    CK_C_Initialize pC_Initialize; 
    CK_RV rv;

  /* It’s OK to call C_GetFunctionList before calling
     * C_Initialize */
    rv = C_GetFunctionList(&pFunctionList);
    assert(rv == CKR_OK);
    pC_Initialize = pFunctionList -> C_Initialize; 

    /* Call the C_Initialize function in the library */
    rv = (*pC_Initialize)(NULL_PTR);
    return rv;

}

int    
main(int argc, char **argv)
{
    rv = initialize();
}

but still getting the error
undefined reference to `C_GetFunctionList'

Kindly guide how to resolve this issue
","What include files are you using? 
#include <assert.h> 

probally also need 
#include <pkcs11.h>

In addition, -L is to specify  a path to seatch for a library. -l specifies the library.
so you would need -L/usr/lib64/ -lpkcs11
","551","<smartcard><pkcs#11><hsm><opensc>","0","0","2","2016-05-10 14:55:58","37142147","0","","2786566","","2016-05-10 14:20:10","2016-05-10 00:26:47",""
"37127452","Linking error for a C application using PKCS#11 API","I am trying to compile an example basic code that performs PKCS#11 initialization only but get following error;
gcc pkcs11_example1.c -o pk -L /usr/lib64/pkcs11/opensc-pkcs11.so 
/tmp/cc8Dl0HE.o: In function `initialize':
pkcs11_example1.c:(.text+0x10): undefined reference to `C_GetFunctionList'
pkcs11_example1.c:(.text+0x2b): undefined reference to `assert'
collect2: error: ld returned 1 exit status

the rpm command shows following so paths
rpm -ql opensc
/usr/lib64/libopensc.so.3
/usr/lib64/libopensc.so.3.0.0
/usr/lib64/libsmm-local.so.3
/usr/lib64/libsmm-local.so.3.0.0
/usr/lib64/opensc-pkcs11.so
/usr/lib64/pkcs11
/usr/lib64/pkcs11-spy.so
/usr/lib64/pkcs11/opensc-pkcs11.so
/usr/lib64/pkcs11/pkcs11-spy.so

my code is pasted below
CK_RV  
initialize()
{
    CK_FUNCTION_LIST_PTR pFunctionList;
    CK_C_Initialize pC_Initialize; 
    CK_RV rv;

  /* It’s OK to call C_GetFunctionList before calling
     * C_Initialize */
    rv = C_GetFunctionList(&pFunctionList);
    assert(rv == CKR_OK);
    pC_Initialize = pFunctionList -> C_Initialize; 

    /* Call the C_Initialize function in the library */
    rv = (*pC_Initialize)(NULL_PTR);
    return rv;

}

int    
main(int argc, char **argv)
{
    rv = initialize();
}

but still getting the error
undefined reference to `C_GetFunctionList'

Kindly guide how to resolve this issue
","I think your error stems from the fact that your program has the right headers (functions definitions), but not the implementation of said functions. 
Before you start to use the PKCS#11 functions implemented in your DLL (opensc-pkcs11.so, in your case), you actually have to load it.
I'm no pro on DLL loading in unix systems, but i think this should do the trick. 
On a side note, i'd strongly advise you to always call C_Finalize(...) after a call to C_Initialize.
Good luck !
","551","<smartcard><pkcs#11><hsm><opensc>","0","0","2","2016-05-10 14:55:58","37142147","0","","2786566","","2016-05-10 14:20:10","2016-05-10 00:26:47",""
"32391860","Sign pdf with pkcs#11 using a java application","How to sign pdf file with pkcs#11 using a java application? Is it possible or not.
","It's certainly possible. Since Java 5, the JDK has been shipping with a PKCS#11 Provider. Please bear in mind that PKCS#11 only specifies the API to perform such operations. You still need to plug in an implementation to do the actual signing.
This guide will give you a pretty good description on how it works: http://docs.oracle.com/javase/7/docs/technotes/guides/security/p11guide.html
","547","<java><pdf><pkcs#11>","0","1","1","2015-09-08 09:46:11","32392181","0","1","5276462","","2015-09-08 09:46:11","2015-09-04 06:54:55","2015-09-04 09:31:22"
"35113635","Pkcs11 x509 chain verification","I am currently implementing a secure channel setup with an HSM.
The protocol is proprietary but uses standard crypto mechanisms (rsa sha)
At a securre channel setup we receive a stack of certificates, with the last one 
the remote device personal cert.
This chain must be validated, in high level languages, no problem.
But I could not find any example how this is done with the pkcs11 interface.
I have the impression there is no cert chain verification method in pkcs11?
Must I disect every cert and calculate the signature with the basic pkcs11 
functions? And this is not very secure, you would want to pass the whole stack to a HSM, which reports back: OK or NOT. In case of OK the public key of the (in our case) device cert could be used to crypt a random channel key, etc etc.
So the question is , how is this normally done with pkcs11?
","X.509 certificate chain validation is high level operation which is not directly supported in rather low-level PKCS#11 API (same goes for certificate signing request generation, certificate issuance etc.). You will need to use some other general purpose cryptographic library such as OpenSSL for that.
","543","<x509><verify><pkcs#11><hsm>","0","0","1","2016-01-31 12:47:29","","0","1","","","","2016-01-31 12:05:10",""
"14247807","Authenticate SSL Web Request Using PKCS#11 HSM","I'm trying to make a web request to a site I wrote which requires the client to provide certificates to authenticate.
Specifically, I'm trying to write a C# (or Visual C++) application that can make a web request, but use the certificate and private key on my HSM.
I realize there's one similar question here, but it hasn't received the answer I need.
I can already:

P/Invoke my native pkcs#11 library (a DLL), login, find/create objects on the HSM
Using the pkcs#11 interface I can read find the X509 certificate on the HSM

I cannot:

Export the Private Key from the HSM.  It is not exportable.

So what I need is a way to make a Web Request from my application and say, ""For the handshake, use the X509 and Private Key objects on my HSM.""
Please don't suggest that I ""check out"" things like NCryptoki, Bouncy Castle, etc- I can already use them to make my Windows app. communicate with the HSM.  What I need is how I can I make the Windows app. make a web request under the context of the credentials on the HSM.
","When you get a certificate through the pkcs#11 native calls you have no private key attached. The private key does the decrypting so we need it.To get around this you have two options:

Almost all devices register a Cryptographic Service Provider during installation. You can wrap, for example, a RSACryptoServiceProvider over that provider and assign it to the PrivateKey property of your certificate.
Some device drivers sync the certificates from your HSM with the Personal Certificate Store. If you select the certificate from the Windows store it will automatically have a Cryptographic Service Provider attached. So the missing private key issue is gone. All you need to do is add the certificate to the ClientCertificates collection.

You can imagine I would recommend the second option if available.
","533","<ssl><webrequest><pkcs#11>","2","0","1","2017-08-27 11:23:48","","0","","1694962","","2013-01-09 23:23:09","2013-01-09 22:40:48",""
"38245717","Communicating with HSM python","I'm attempting to establish a connection with a remote machine through this script. The script is being run on the remote machine attempting to open a session, which I believe I'm doing incorrectly. I'm trying to access slot zero in the library opt/PTK/lib/libcryptoki.so which contains a keystore via smart card (i.e. 00000010300000A2) However the Available slots is returning zero.
CORRECT SCRIPT 
#!/usr/bin/python
from PyKCS11.LowLevel import *

a = CPKCS11Lib()
info = CK_INFO()
slotInfo = CK_SLOT_INFO()
lib='/opt/PTK/lib/libcryptoki.so'
slotList = ckintlist()

print(""Load of "" + lib + "": "" + str(a.Load(lib, 1)))
a.C_Initialize()
print(""C_GetInfo:"", hex(a.C_GetInfo(info)))
print(""Library manufacturerID:"", info.GetManufacturerID())

del info

print(""C_GetSlotList(NULL): "" + hex(a.C_GetSlotList(0, slotList)))
print(""\tAvailable Slots: "" + str(len(slotList)))

OUTPUT
ctstat
ProtectToolkit C Status Utility 4.3.0
Copyright (c) Safenet, Inc. 2009-2013
ShowAllSlots:4 slots, 4 with tokens
Slot ID 0
    Description      : ProtectServer K5E:00045
    Manufacturer     : SafeNet Inc.
    Hardware Version : 65.00
    Firmware Version : 3.20
Token for Slot ID 0
    Label            : CKM
    Manufacturer     : SafeNet Inc.
    Model            : K5E:PL25
    Serial Number    : 502152:00045
    Hardware Version : 65.00
    Firmware Version : 3.20

","This works perfectly for me. In terms of the connection. 
import subprocess
proc = subprocess.Popen((""ssh"", ""remoteuser@host"", ""echo"", ""1""), 
stdout=subprocess.PIPE, stderr=subprocess.PIPE)
stdout, stderr = proc.communicate()

","528","<python><smartcard><pkcs#11><hsm>","0","0","1","2016-07-14 14:56:20","38246907","6","2","6386779","","2016-07-14 14:56:20","2016-07-07 12:40:23",""
"24133704","Unable to compile a c application that reads smartcard","I am trying to compile an example c application that is using pkcs#11 to finds all
the private keys on the token, and print their label and id, but getting following errors
/tmp/ccAqQ7UI.o: In function initialize':
pkcs11_example1.c:(.text+0x8e5): undefined reference to C_Initialize'
/tmp/ccAqQ7UI.o: In function `get_slot':

The example is taken from here
compilling by using following command;
 `gcc pkcs11_example1.c -o slots -L /usr/lib/opensc-pkcs11.so`

I am not sure which library i should link after -L. 
Can anyone guide how to compile this and are there some libraries required to link. 
","C_Initialize and other 60+ functions with ""C_"" prefix are cryptoki functions defined in PKCS#11 specification. They are usually implemented in standalone library provided by HSM vendor. Looking at your code samples I would say that you need to directly link also PKCS#11 library or you can modify the code to dynamically load PKCS#11 library in runtime with LoadLibrary or dlopen and then acquire pointers to all cryptoki functions via the C_GetFunctionList call. You can also take a look at pkcs11-logger the source code for an example on how to do that.
","528","<c><smartcard><pkcs#11><hsm><opensc>","-1","2","2","2014-07-30 14:34:36","","3","0","3325704","","2014-07-30 14:34:36","2014-06-10 05:46:23",""
"24133704","Unable to compile a c application that reads smartcard","I am trying to compile an example c application that is using pkcs#11 to finds all
the private keys on the token, and print their label and id, but getting following errors
/tmp/ccAqQ7UI.o: In function initialize':
pkcs11_example1.c:(.text+0x8e5): undefined reference to C_Initialize'
/tmp/ccAqQ7UI.o: In function `get_slot':

The example is taken from here
compilling by using following command;
 `gcc pkcs11_example1.c -o slots -L /usr/lib/opensc-pkcs11.so`

I am not sure which library i should link after -L. 
Can anyone guide how to compile this and are there some libraries required to link. 
","The link command you give, gcc pkcs11_example1.c -o slots -L /usr/lib/opensc-pkcs11.so, is wrong.

-L takes just path, which is added to paths where libs are searched from, but /usr/lib is default so you don't need this switch at all.
You are missing -l, which takes the library name without lib prefix or .so suffix, so looks like you need -lopensc-pkcs11.

So, first make sure your library file really is /usr/lib/libopensc-pkcs11.so (note lib prefix!) possibly with verion numbers following. Then change build options so link command becomes
gcc pkcs11_example1.c -o slots -lopensc-pkcs11

","528","<c><smartcard><pkcs#11><hsm><opensc>","-1","0","2","2014-07-30 14:34:36","","3","0","3325704","","2014-07-30 14:34:36","2014-06-10 05:46:23",""
"10461540","VASCO Digital Certificate","How to read vasco digital certificate. 
I am using in config file following
name=""VASCO DP CertiID PKCS#11 V2.20""
library=""C:\Program Files\VASCO\DIGIPASS CertiID\VdsPKCS1132.dll""

I am getting this error:
java.security.KeyStoreException: KeyStore instantiation failed
    at java.security.KeyStore$Builder$2.getKeyStore(Unknown Source)
    at eTokenApplet.initializeCard(eTokenApplet.java:417)
    at eTokenApplet.getCertificates(eTokenApplet.java:1952)
    at sun.reflect.GeneratedMethodAccessor5.invoke(Unknown Source)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
    at java.lang.reflect.Method.invoke(Unknown Source)
    at sun.plugin.javascript.JSInvoke.invoke(Unknown Source)
    at sun.reflect.GeneratedMethodAccessor3.invoke(Unknown Source)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
    at java.lang.reflect.Method.invoke(Unknown Source)
    at sun.plugin.javascript.JSClassLoader.invoke(Unknown Source)
    at sun.plugin2.liveconnect.JavaClass$MethodInfo.invoke(Unknown Source)
    at sun.plugin2.liveconnect.JavaClass$MemberBundle.invoke(Unknown Source)
    at sun.plugin2.liveconnect.JavaClass.invoke0(Unknown Source)
    at sun.plugin2.liveconnect.JavaClass.invoke(Unknown Source)
    at sun.plugin2.main.client.LiveConnectSupport$PerAppletInfo$DefaultInvocationDelegate.invoke(Unknown Source)
    at sun.plugin2.main.client.LiveConnectSupport$PerAppletInfo$3.run(Unknown Source)
    at java.security.AccessController.doPrivileged(Native Method)
    at sun.plugin2.main.client.LiveConnectSupport$PerAppletInfo.doObjectOp(Unknown Source)
    at sun.plugin2.main.client.LiveConnectSupport$PerAppletInfo$LiveConnectWorker.run(Unknown Source)
    at java.lang.Thread.run(Unknown Source)
Caused by: java.security.KeyStoreException: PKCS11 not found
    at java.security.KeyStore.getInstance(Unknown Source)
    at java.security.KeyStore$Builder$2$1.run(Unknown Source)
    at java.security.AccessController.doPrivileged(Native Method)
    ... 21 more
Caused by: java.security.NoSuchAlgorithmException: no such algorithm: PKCS11 for provider SunPKCS11-VASCO DP CertiID PKCS#11 V2.20
    at sun.security.jca.GetInstance.getService(Unknown Source)
    at sun.security.jca.GetInstance.getInstance(Unknown Source)
    at java.security.Security.getImpl(Unknown Source)

","Are you using the -Djava.library.path= so java can find your dll?
","522","<java><security><certificate><digital-certificate><pkcs#11>","0","0","1","2012-10-19 14:51:22","","1","","559026","","2012-05-08 04:38:44","2012-05-05 11:47:36",""
"48896395","pkcs11-tool generated keys in java are not getting loaded into pkcs11 keystore","I am seeing an null pointer exception when trying to get the private key from java pkcs11 keystore, when the key is generated by pkcs11-tool. This works fine if the key is generate using keytool. I can list the keys from pkcs11-tool as well but not from keytool. What is the correct way to import or generate keys other than keytool so that they are visible to java pkcs11 keystore?
Generate keys:
pkcs11-tool --module /usr/lib/x86_64-linux-gnu/softhsm/libsofthsm2.so -l --pin <pin> --keypairgen --key-type rsa:2048 --label jtest

From java load and access the key(code snippet):
    String configName = ""/tmp/pkcs11.cfg"";
    Provider p = new SunPKCS11(configName);
    Security.addProvider(p);

    char[] pin = ""<pin>"".toCharArray();
    KeyStore keyStore = KeyStore.getInstance(""PKCS11"", p);
    keyStore.load(null, pin);
    PrivateKeyEntry privateKeyEntry =
                    (PrivateKeyEntry)keyStore.getEntry(""jtest"", null);
    PrivateKey privateKey = privateKeyEntry.getPrivateKey(); 

See the exception when trying to get the private key above.
","Keytool automatically generates a self-signed certificate when it generates a key entry, whereas PKCS#11 allows to create a key pair without a corresponding certificate.
The Java keystore API simply ignores key pair entries without a certificate. That's why keytool -list ... does not show the entry when it was created with pkcs11-tool. If you take a look at the Oracle PKCS#11 guide and especially the restrictions, it says:

Once a private key and certificate have been matched (and its certificate chain built), the information is stored in a private key entry with the CKA_LABEL value from end entity certificate as the KeyStore alias.
...
Any private key or certificate object not part of a private key entry or trusted certificate entry is ignored.

Therefore, when you call keyStore.getEntry(""jtest"", null); it does not find a matching key entry, which causes the NPE in the following line.
","516","<java><security><pkcs#11><softhsm>","2","1","1","2019-10-29 09:45:42","48907809","0","","4956907","","2019-10-29 09:45:42","2018-02-21 00:25:47",""
"43965667","How to get Qx and Qy form DER Encoded EC_POINT","I created a brainpool EC on a nitro key hsm and want to use this for crypto operations with the .NET Framework e.g. System.Security.Cryptography.ECDiffieHellman.
I extracted with pkcs11-tool --list-objects the public key but get only one value, the EC_POINT.   
So, how to I get the coordinate of this point?
DER Encoded EC_POINT
Public Key Object; EC  EC_POINT 320 bits
  EC_POINT:   0451040defed7988b095679e5aca422382d949c2e7fd937646def25cf7eb5140d41f12d077ac615773952da53efad266c8642c6877b8b215d091ba687acafd3c33f35ffb5ca6aadaf248ef1a126cd55e0d0598
  EC_PARAMS:  06092b2403030208010109
  label:      Brainpool #1
  ID:         10
  Usage:      verify

Decoded EC_POINT
This EC_POINT is DER encoded, I used this to extract the true value of the EC_POINT. 
040defed7988b095679e5aca422382d949c2e7fd937646def25cf7
eb5140d41f12d077ac615773952da53efad266c8642c6877b8b215
d091ba687acafd3c33f35ffb5ca6aadaf248ef1a126cd55e0d0598

(Or this JS Script https://lapo.it/asn1js/#0451040DEFED7988B095679E5ACA422382D949C2E7FD937646DEF25CF7EB5140D41F12D077AC615773952DA53EFAD266C8642C6877B8B215D091BA687ACAFD3C33F35FFB5CA6AADAF248EF1A126CD55E0D0598)
","040defed7988b095679e5aca422382d949c2e7fd937646def25cf7
eb5140d41f12d077ac615773952da53efad266c8642c6877b8b215
d091ba687acafd3c33f35ffb5ca6aadaf248ef1a126cd55e0d0598

Is your public key.  The first byte indicates that it is an uncompressed key (04), which means that of the remaining bytes, the first half are the X coordinate and the second half are the Y coordinate.
Qx = 0defed7988b095679e5aca422382d949c2e7fd937646def25cf7eb5140d41f12d077ac615773952d
Qy = a53efad266c8642c6877b8b215d091ba687acafd3c33f35ffb5ca6aadaf248ef1a126cd55e0d0598
http://www.secg.org/sec1-v2.pdf, section 2.3.4 (Octet-String-to-Elliptic-Curve-Point Conversion).
(And since the parameters (06092b2403030208010109) is the DER-oid 1.3.36.3.3.2.8.1.1.9 (brainpoolP320r1) everything looks correct, since Qx/Qy are 320-bit values)
","514","<pkcs#11><elliptic-curve><der><pkcs#15><nitrokey>","0","4","1","2017-05-15 15:06:04","43982866","2","0","","","","2017-05-14 15:26:40",""
"43657958","Delphi 2007 Import a Type Library","In Delphi 2007 i'm trying to Import a type library and i get an error message: 

error occured during loading library type/DLL.

I want to import libraries: pkcs11.dll, libp11.dll
The libraries have been prepared in VisualStudio 2017.
I tried to use command-line tool tlibimp, but without effects.

c:\Program Files (x86)\CodeGear\RAD Studio\5.0\Projects\TEST>tlibimp -p pkcs11.dll
Borland TLIBIMP Version 11.0
Copyright (c) 1997-2005 Borland Software Corporation
Error loading type library pkcs11.dll.


Maybe someone knows how to solve this problem?
I tried to do regsvr32 pkcs11.dll but i get the message: DllRegisterServer entry point was not found.
I also tried to find pkcs11.tlb in VS project but it does not exist.
I installed the Dependency Walker ""depends.exe"" and saw that some libraries are missing:

API-MS-WIN-CORE-WINRT-ERROR-L1-1-0.DLL
API-MS-WIN-CORE-WINRT-L1-1-0.DLL
API-MS-WIN-CORE-WINRT-ROBUFFER-L1-1-0.DLL
API-MS-WIN-CORE-WINRT-STRING-L1-1-0.DLL
DCOMP.DLL
IESHIMS.DLL


I have installed Visual Studio 2017 and why are not there ? Where to get them ?

As Eugene explained, PKCS#11 API doesn't export any type libraries and i need to import function. I found 2 tools: 

1. 23991_c_to_pascal_converter_1.0 from Embarcadero
2. GUIHeadConv from Dr. Bob


","","513","<delphi><dllimport><pkcs#11>","1","","0","2017-05-30 06:24:17","","7","","4260291","","2017-05-30 06:24:17","2017-04-27 12:34:41",""
"41170977","Providing SSL Connections in Python using PKCS#11","I have to implement a Python based web server on a Linux based firmware for an embedded system component:
class WebServer(http.server.HTTPServer)
...
...

To enable ssl connections a ssl context is created within the server by
self.ssl_context = ssl.SSLContext(ssl.PROTOCOL_TLSv1_2)
self.ssl_context.load_cert_chain(certfile=cert, keyfile=key)
self.ssl_context.verify_mode = ssl.CERT_REQUIRED
self.ssl_context.load_verify_locations(verifyCert)

Note: cert is a file path to the certificate, keyfile is the path to the private key.
Upon a request the method get_request is called:
def get_request(self):
    request = self.socket.accept()
    if self.ssl_context:
        req_socket, addr = request
        connstream = self.ssl_context.wrap_socket(req_socket, server_side=True)
        return connstream, addr
    else:
        return request

The wrap_socket method is used to wrap the original socket into a ssl socket, which is returned instead. That is all to provide a ssl connection.
Now the question:
The solution is a first implementation and not secure. We are oblidged to use a given hardware security module (HSM) to create and store certificates and private keys. Any private keys are completely hidden and will never leave the module. All cryptographic primitives have to be executed directly within the module. The interface to the HSM is PKCS#11, for which a vendor supplied dynamic middle-ware library exists.
How can I use the module instead of the original ssl for setup of the ssl context under python? I know already, that ssl is based on openSSL, for which a PKCS#11 engine exists (libarary opensc-pkcs11.so). The middleware from the vendor provides the PKCS#11 API. 
Unfortunately, I have no plan how the PKCS#11 engine is to be integrated into python's ssl/openSSL and how to tie all things together. Is it even possible to transparently use PKCS#11 instead of the native implementation, and if yes, how do I activate it from python? Moreover, how would I have to pass the arguments ""certfile"" and ""keyfile"", because both are not available anymore as plain files? In fact I have no access to the private key directly; there are only URL-based references to objects within the HSM used to operate on it.
Can PyKCS11 be a solution instead of ssl?
I just need to know the basic path to solving such problem. I can find all the details on my own.
","","505","<python><sockets><ssl><pkcs#11>","6","","0","2016-12-15 18:28:42","","2","5","","","","2016-12-15 18:28:42",""
"42231321","Two way TLS connection using PKCS11 token with OpenSSL","I'm trying to establish a TLS 1.2 connection to a server. I have to use a certificate and key stored on a PKCS11 token, but I can't seem to find the correct functions in OpenSSL to do so. 
I have implemented something similar with gnuTLS using [1]. Are there corresponding C/C++ functions in OpenSSL? Basically I'm looking for a programmatic way to let me set the object path (PKCS#7 format) and a callback function, since a PIN is required to unlock the token.
Is it even possible to integrate a PKCS#11 token using OpenSSL? 
I have found functions that let me set certificates and keys but only as a file on my local machine [2].
Any help is much appreciated. 
[1] http://www.gnutls.org/manual/html_node/Using-a-PKCS11-token-with-TLS.html
[2] https://www.openssl.org/docs/man1.0.1/ssl/SSL_CTX_use_certificate_file.html
","","500","<c><ssl><openssl><pkcs#11><gnutls>","0","","0","2017-02-14 16:29:12","","2","","","","","2017-02-14 16:29:12",""
"35267448","pkcs11-tool doesn't recognise RSA key","pkcs11-tool fails to import the RSA private key, even though it's parsed correctly by openssl. It fails with:
error: OpenSSL error during RSA private key parsing
Aborting.

The key is already in the DSA format and I'm trying to import it using:
pkcs11-tool --module ... -y privkey --slot ... -w some/path.der -l --id ...

","The RSA private key may be encoded in DER in two ways. Either it has a heading defining what key it is, or it may be just a list of fields (as defined by PKCS#1 RSAPrivateKey sequence). openssl command itself handles both forms transparently in most cases, but d2i_RSAPrivateKey does not. It expects the RSAPrivateKey sequence to be directly available.
The required file can be generated from either DER or PEM format file. It's done using openssl rsa -in ... -outform DER -out ...
The wrapped format looks like this in openssl asn1parse output:
 0:d=0  hl=4 l=2370 cons: SEQUENCE          
 4:d=1  hl=2 l=   1 prim: INTEGER           :00
 7:d=1  hl=2 l=  13 cons: SEQUENCE          
 9:d=2  hl=2 l=   9 prim: OBJECT            :rsaEncryption
20:d=2  hl=2 l=   0 prim: NULL              
22:d=1  hl=4 l=2348 prim: OCTET STRING      [HEX DUMP].....

The unwrapped one looks like this:
  0:d=0  hl=4 l=2344 cons: SEQUENCE          
  4:d=1  hl=2 l=   1 prim: INTEGER           :00
  7:d=1  hl=4 l= 513 prim: INTEGER           :...
524:d=1  hl=2 l=   3 prim: INTEGER           :010001
529:d=1  hl=4 l= 513 prim: INTEGER           :...

","498","<private-key><pkcs#11>","0","0","1","2016-02-08 10:32:11","","0","","","","","2016-02-08 10:32:11",""
"34491447","Can't access all KeyStore aliases on USB Token","I used to access the certificate chain for PDF signing on a USB token with this code:
this._keyStore = KeyStore.getInstance(""PKCS11"");
this._keyStore.load(null, myPassword);
Enumeration<String> aliases = this._keyStore.aliases();
while (aliases.hasMoreElements()) {
    String nextElement = (String) aliases.nextElement();
    System.out.println(""Enumeration element : ""+nextElement);
try
{
    this._privateKey = (PrivateKey) this._keyStore.getKey(nextElement, pass);
    this._certificatesChain = (X509Certificate[]) this._keyStore.getCertificateChain(nextElement);
    if (this._certificatesChain.length == 0) 
    {
        //Let's try another
        continue;
    }
    if (this._certificatesChain[0].getKeyUsage()[1]) 
    {
        //I want to use this
        break;
    }
}
catch (Exception e){continue;}

I have been provided with a new USB token that won't work with this. It seems that using PKCS11 will just read one of the two certificates on the Token, which is not the one I am supposed to use for signing.
The best solution I came up with is using ""Windows-MY"" in the Keystore.getInstance() call, which can access all the certificates (even those that didn't come from the Token, but let's cross fingers). 
The BIG drawback of this is that doing so creates two PIN prompts for the whole signing process : the first time is the prompt I coded to ask the user for the PIN; the second time is when I try to sign - this time, with a Windows-style prompt.
Is there a way to either access all certificates with a PKCS11 Keystore instance, or avoid the Windows prompt?
","I considered removing the post because there was a mistake somewhere else in my code, but I am leaving it here should anyone need it:
the problem was that the dll that I had been using to read the certificates (incryptoki2.dll) didnt work anymore with new keys from the same manufacturer. Switched to bit4ipki.dll and now I can read the certificates.
","497","<java><digital-signature><keystore><signing><pkcs#11>","0","0","1","2015-12-28 17:02:25","34497583","2","","","","","2015-12-28 10:07:52",""
"49779815","How to sign xml file with HSM Device?","I can get certificate from HSM device but it doesn't give me private key for signing. How can I sign xml file and what should I do with it? 
Thanks for helps.
","TEngineer,
Microsoft has a nice article here that will help you:
https://docs.microsoft.com/en-us/dotnet/standard/security/how-to-sign-xml-documents-with-digital-signatures
The key thing you need to understand is that the role of a HSM is to protect the private key, as such, largely, it is not possible to export the private key.
The good news it is not necessary.
What Windows does is give you an abstraction for cryptographic algorithms that can be implemented by hardware devices like an HSM.
There are actually several of those abstractions, that said the article I link to above points at Cryptographic Service Provider (CSP).
The basic concept is that when you go to do the cryptographic operation it is remoted to the device which does the 'math' and returns the ciphertext.
In other platforms a different abstraction is used, it is called PKCS#11, if you were looking to write crossplatform code you would at using a binding to that interface. Also if you needed to do other operations with the HSM you would look at using something like https://pkcs11interop.net/ to call that interface from C#. 
Ryan
","497","<c#><.net><pkcs#11><hsm>","0","1","1","2018-04-20 23:10:50","","2","0","3325704","","2018-04-12 18:59:50","2018-04-11 16:06:55",""
"30507882","Error reading objects from Gemalto smartcard using IAIK pkcs11wrapper","I'm trying to read the public certificate names from a smartcard to display to the user before they sign a file using a gemalto smartcard. 
I've followed the getInfo example from iaikPkcs11Wrapper demos as below :
        Module pkcs11Module = Module.getInstance(settings.getCryptoDll());
        Slot[] slotList;
        try{
            slotList = pkcs11Module.getSlotList(true);
        }catch(TokenException tex){//module is not initialised
            tex.printStackTrace();
            pkcs11Module.initialize(new DefaultInitializeArgs());
            slotList = pkcs11Module.getSlotList(true);
        }
        for (Slot slot : slotList) {
            Token token = slot.getToken();
            iaik.pkcs.pkcs11.Session session = token.openSession(true, SessionReadWriteBehavior.RO_SESSION, null, null);
            session.findObjectsInit(null);
            Object[] objects = new Object[0];
            try {
                objects = session.findObjects(1);

This fails always at the line objects = findObjects(1); with a CKR_TEMPLATE_INCONSISTENT exception. 
As I understand from the documentation session.findObjectsInit(null) should just return all accessible objects on the card and you can then compare them for type. 
I have various smartcards and they all fail like this, I've also tried calling session.findObjectsInit(tempObj) with a GenericTemplate object and a X509PublicKeyCertificate which both return the same exception, and with an X509AttributeCertificate which returns no objects but does not throw the exception.
I'd appreciate any pointers anyone can give. Or do I need to create a matching template object using GenericTemplate? I'm unsure why I'm getting the exception as I thought passing the object into the getObjectInit method filtered for thet object so anything returned should match.
EDIT
I've subsequently tried with other templates and ones for objects not on the card just return an empty array- no exception and ones I think are on the cards just throw the ckr_template_inconsistent exception, any help would be gratefully received.
EDIT2
I've now tried with some new 'V3' cards, which do infact work, all my test cards work using another technique (we currently use capicom via com4J for signing), so maybe there is an issue with the iaik wrapper, or gclib.dll (or me).  
","","496","<java><smartcard><pkcs#11><gemalto>","0","","0","2015-05-29 14:42:36","","2","0","783844","","2015-05-29 14:42:36","2015-05-28 13:24:53",""
"52847522","TLS handshake error from ... tls: client didn't provide a certificate","I have a C# RestFull client trying to connect to a Go server. Once I reach the TLS handshake stage it fails because client didn't provide a certificate.
I have verified that client certificate was associated with RestClient Object before the execution of the request.
// Initializing the client
RestClient client = new RestClient(Config.SERVER_DOMAIN);

// Adding client certificate (exported from a smart card with no private key attributes)
client.ClientCertificates = Global.cpf.getCertCollection();

// defining our request then executing it
var request = new RestRequest(""users"", Method.GET);
var response = await client.ExecuteTaskAsync(request);

It works only if the certificate was read from a .PFX file where the private component is there. But when I switch to smart card certificate (which has no private key attributes because the smart card doesn't want you to have them) the server doesn't receive any certificate from the client.
I understand that TLS needs a private key for the handshake stage, yet the client obj doesn't see any associated private key with the given certificate and therefore doesn't recognize the certificate as a valid one for TLS establishment. 
I know that private keys can't be exported from the smart card, and I know that there has to be a way to tell RestClient object that in order to pass handshake stage, you should communicate with the smart card, however, I gave up!
Can someone point me to the right direction?
","For most of the smartcards there should be minidriver or standalone CSP (Cryptographic Service Provider) available. These components act as a drivers that integrate the card with Windows cryptographic subsystem. They are usually provided by the device vendor and you should be able to get your certificate with reference to correct private key from your Windows Certificate Store once they're set up correctly.
Try to use the following method:
private static X509Certificate2 GetCertificate()
{
    X509Store store = new X509Store(StoreName.My, StoreLocation.CurrentUser);
    store.Open(OpenFlags.ReadOnly);

    try
    {
        // Note: X509Certificate2UI requires reference to System.Security
        X509Certificate2Collection certs = X509Certificate2UI.SelectFromCollection(store.Certificates, null, null, X509SelectionFlag.SingleSelection);
        if (certs != null && certs.Count > 0)
            return certs[0];
    }
    finally
    {
        store.Close();
    }

    return null;
}

","494","<c#><authentication><ssl><smartcard><pkcs#11>","0","0","1","2018-10-18 21:23:26","","2","0","","","","2018-10-17 04:55:11",""
"22818071","Solaris - (httpd) pkcs11_softtoken: Keystore access failed","I'm having a problem with a Solaris server I inherited that has been happening for years. (The release is Solaris 10 5/09 s10x_u7wos_08 X86)
Every few seconds in my /var/adm/messages file I get the following line:
httpd[2910]: [ID 218067 user.debug] pkcs11_softtoken: Keystore access failed

I'm pretty sure this is what is causing my core dumps that are filling up my hard drive causing my database to stop functioning, so I'd love to figure this out.
My apologies if I did not provide enough information, I really have no clue what the error means so I don't know what would be relevant to post. Thanks!
Disclaimer: I am a programmer by profession, not a server administrator... so please be gentle.
","If you do not store certificates in Solaris PKCS11 token, then simply disable/comment SSLCryptoDevice pkcs11 in Apache config. Note that Solaris PKCS11 token do correctly work just with Solaris bundled OpenSSL. On X86 it doesn't bring much performance improvement too, to use this token. On SPARC since T1 it has its meaning, cause there are hardware accelerators on CPU. Refer to man cryptoadm for Solaris token details.
","491","<apache><solaris><keystore><pkcs#11>","0","0","1","2014-04-08 07:55:00","22930911","0","","158766","","2014-04-02 17:22:08","2014-04-02 16:54:13",""
"27636785","Check the driver version of the eID reader and know when it is an old version","I use pkcs11 dll in my wpf project, but i want to know what driver/software version my eID reader has so if it is an old version, we can make a popup with ""update your driver for the eID reader""
part of code:
_pkcs11 = new Pkcs11(""beidpkcs11.dll"", false);
LibraryInfo Lib = _pkcs11.GetInfo();
DllVersion = Lib.CryptokiVersion;

","You seem to be using PKCS#11 API via managed Pkcs11Interop wrapper to access your eID card but IMO this API does not provide information about the version of your smartcard reader driver. Your best shot is to try to examine HardwareVersion and/or FirmwareVersion properties of SlotInfo class which contains information about your smarcard reader (known as slot in PKCS#11) but these fields have slightly different meaning:
using (Pkcs11 pkcs11 = new Pkcs11(""beidpkcs11.dll"", true))
{
    List<Slot> slots = pkcs11.GetSlotList(false);
    foreach (Slot slot in slots)
    {
        SlotInfo slotInfo = slot.GetSlotInfo();
        // Examine slotInfo.HardwareVersion
        // Examine slotInfo.FirmwareVersion
    }
}

You can also try to read SCARD_ATTR_VENDOR_IFD_VERSION reader attribute with SCardGetAttrib() function which is part of PC/SC interface but I am not sure whether the returned value is driver version or device hardware version. Following example reads this attribute with managed pcsc-sharp wrapper:
using System;
using PCSC;

namespace ConsoleApplication
{
    class Program
    {
        static void Main(string[] args)
        {
            var context = new SCardContext();
            context.Establish(SCardScope.System);

            var readerNames = context.GetReaders();
            if (readerNames == null || readerNames.Length < 1)
            {
                Console.WriteLine(""You need at least one reader in order to run this example."");
                Console.ReadKey();
                return;
            }

            foreach (var readerName in readerNames)
            {
                var reader = new SCardReader(context);

                Console.Write(""Trying to connect to reader.. "" + readerName);

                var rc = reader.Connect(readerName, SCardShareMode.Shared, SCardProtocol.Any);
                if (rc != SCardError.Success)
                {
                    Console.WriteLine("" failed. No smart card present? "" + SCardHelper.StringifyError(rc) + ""\n"");
                }
                else
                {
                    Console.WriteLine("" done."");

                    byte[] attribute = null;
                    rc = reader.GetAttrib(SCardAttribute.VendorInterfaceDeviceTypeVersion, out attribute);
                    if (rc != SCardError.Success)
                        Console.WriteLine(""Error by trying to receive attribute. {0}\n"", SCardHelper.StringifyError(rc));
                    else
                        Console.WriteLine(""Attribute value: {0}\n"", BitConverter.ToString(attribute ?? new byte[] { }));

                    reader.Disconnect(SCardReaderDisposition.Leave);
                }
            }

            context.Release();
            Console.ReadKey();
        }
    }
}

Other than that you would need to use some OS specific low level driver APIs but I am not familiar with any of those.
","489","<c#><wpf><driver><pkcs#11><eid>","0","0","1","2014-12-29 12:31:26","27638226","0","0","447156","","2014-12-24 12:13:07","2014-12-24 12:12:56",""
"44041405","Pkcs#11 with SSL in java","How to use pkcs#11 with softhsm2 in java for ssl handshake .
I am facing issues with implementing ssl context factory with keys stored in softhsm2. Please provide sample which i can make use of.
","here is the solution for pkcs#11 for ssl handshake in java .
       System.setProperty(""javax.net.debug"", ""ssl"");
           try {
           String configName = ""softhsm2.cfg"";
           Provider p = new SunPKCS11(configName);
           System.out.println(p.getName());
           Security.addProvider(p);


           // Load the key store
           char[] pin = ""5678"".toCharArray();
           KeyStore ks = KeyStore.getInstance(""PKCS11"", p);
           ks.load(null, pin);
           System.out.println(ks.size());
          Enumeration<String> aliases = ks.aliases();
           for(;aliases.hasMoreElements();)
           {
            System.out.println(aliases.nextElement());
           }
           KeyManagerFactory keyManagerFactory =     KeyManagerFactory.getInstance(""SunX509"");
         //Add to keystore to key manager
           keyManagerFactory.init(ks, pin);  

         //Create the context

           SSLContext context = SSLContext.getInstance(""TLS"");
           context.init(keyManagerFactory.getKeyManagers(), null, new SecureRandom());
            //Create a socket factory
           SSLServerSocketFactory ssf = context.getServerSocketFactory();
            //SSLSocketFactory sf = context.getSocketFactory();
           //Create the socket
            SSLServerSocket s   = (SSLServerSocket) ssf.createServerSocket(8888);
             printServerSocketInfo(s);
             SSLSocket c = (SSLSocket) s.accept();

","483","<java><ssl><pkcs#11><softhsm>","0","1","1","2017-05-18 10:25:51","44041442","0","2","","","","2017-05-18 07:34:57",""
"11845383","pkcs11 support for kona 25 javacard","I have some Kona25 javacard from Tag systems and I want to use them for encryption and signature of my emails (for example in thunderbird).
I have searched Google, and I found that I need a PKCS11 module for my cards. I search more and I found that Charismathics CSSI provide a pkcs11 module for kona25 cards, but I am looking for an open source or free solution. Does anybody have a offer?
OpenSC doesn't support kona25 cards!
","As this is a JavaCard, everything in OpenSC wiki about JavaCard-s applies. If it is a ""blank"" card, you need to get a PKI applet onto it and deal with everything related.
If you already have a PKI applet on the card and/or if you can't load your own applets (often the case with retailed javacards), you need to extend OpenSC to support it.
","476","<javacard><pkcs#11>","1","0","1","2012-08-09 08:46:57","","2","","","","","2012-08-07 11:52:59",""
"43658046","Need to read certificate from smart card x509 oberthur c#","i've got some issue on reading certificates from a new smart card with a BluDrive II card reader. With old smart card no problem, but with the newest no certificate are discovered inside the card. With bit4id software i'm able to read all the cards (with all the information that i need).
            X509SecurityToken securityToken = null;
            var store = new X509Store();

            store.Open(OpenFlags.OpenExistingOnly | OpenFlags.ReadOnly);



            try
            {
                Console.WriteLine(""CERTIFICATI PRESENTI: {0}"",store.Certificates.Count);
                X509Certificate2Collection certs = (X509Certificate2Collection)store.Certificates;

                if (certs.Count > 0)
                {
                    int i = 1;
                    foreach (var cert in certs)
                    {
                        securityToken = new X509SecurityToken(cert);
                        Console.WriteLine(""................................................................."");
                        Console.WriteLine(""CERTIFICATO {0}:\n\n {1}"",i++, securityToken.Certificate);
                    }
                }
                else
                {
                    Console.WriteLine(""NESSUN CERTIFICATO LETTO"");
                    securityToken = null;
                }

            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.ToString());
            }
            finally
            {
                if (store != null)

                    store.Close();
            }

I'm novice of this place, i hope in your help, thanks a lot in advance :-)
Ces@re 
","You are reading the certificates not directly from your smartcard (via a PKCS#11 library) but through your operating system's certificate store (via the X509Store class). So if your OS backend is not configured properly, you won't be able to find your certificate.
","475","<c#><smartcard><x509><pkcs#11>","0","0","1","2017-05-19 11:08:52","","1","","","","","2017-04-27 12:38:20",""
"49383728","ECDH1_DERIVE issues with PCKS11interop and Safenet Network HSM","Been fighting a Gemalto network HSM for a while and its about time i asked for some expert help. I am trying to derive an ECDH1 key from a known public key and a private key stored on the HSM and keep sending the HSM into some sort of panic mode that requires me to reset it before it starts talking again every time i call the derive key function as set out below. Anybody got any pointers?
static string PKCSLibraryPath = @""C:\Program Files (x86)\SafeNet\Protect Toolkit 5\Protect Toolkit C SDK\bin\hsm\cryptoki.dll"";
    static Pkcs11 pkc = new Pkcs11(PKCSLibraryPath, AppType.SingleThreaded);

    public string HSM_Interaction(int SlotNumber, string KeyLabel, string Pubkey, string GUID)
    {

        List<Slot> slots = pkc.GetSlotList(SlotsType.WithTokenPresent);
        string pass = ""1111"";

        //convert putblic key to byte array
        byte[] data = Get_pub_Key(Pubkey);

        //convert password to byte array
        byte[] password = Encoding.ASCII.GetBytes(pass);

        //select correct HSM slot
        Slot S = slots[SlotNumber];

        using (Session Sesh = S.OpenSession(SessionType.ReadWrite))
        {

            Sesh.Login(CKU.CKU_USER, password);
            List<CKM> Mechs = S.GetMechanismList();
            ObjectHandle oPrivKeyObjectHandle;

            //setup search criteria for token
            List<ObjectAttribute> objectAttributes = new List<ObjectAttribute>();
            objectAttributes.Add(new ObjectAttribute(CKA.CKA_CLASS, CKO.CKO_PRIVATE_KEY));
            objectAttributes.Add(new ObjectAttribute(CKA.CKA_KEY_TYPE, CKK.CKK_EC));
            objectAttributes.Add(new ObjectAttribute(CKA.CKA_LABEL, KeyLabel));
            Sesh.FindObjectsInit(objectAttributes);
            List<ObjectHandle> oObjCollection = Sesh.FindObjects(1);
            Sesh.FindObjectsFinal();

            if (oObjCollection.Count > 0)
            {  
                oPrivKeyObjectHandle = oObjCollection[0];

                //set template for generated key
                var shared_secret_template = new List<ObjectAttribute>
                {
                    new ObjectAttribute(CKA.CKA_CLASS, CKO.CKO_SECRET_KEY),
                    new ObjectAttribute(CKA.CKA_KEY_TYPE, CKK.CKK_GENERIC_SECRET),
                    new ObjectAttribute(CKA.CKA_SENSITIVE, false),
                    new ObjectAttribute(CKA.CKA_EXTRACTABLE, true),
                    new ObjectAttribute(CKA.CKA_VALUE_LEN, (ulong)32)
                };


                var deriveAttributes = new List<ObjectAttribute>
                 {
                     new ObjectAttribute(CKA.CKA_TOKEN, false),
                     new ObjectAttribute(CKA.CKA_CLASS, CKO.CKO_SECRET_KEY),
                     new ObjectAttribute(CKA.CKA_KEY_TYPE, CKK.CKK_GENERIC_SECRET),
                     new ObjectAttribute(CKA.CKA_SENSITIVE, false),
                     new ObjectAttribute(CKA.CKA_EXTRACTABLE, true),
                     new ObjectAttribute(CKA.CKA_ENCRYPT, true),
                     new ObjectAttribute(CKA.CKA_DECRYPT, true),
                     new ObjectAttribute(CKA.CKA_WRAP, true),
                     new ObjectAttribute(CKA.CKA_UNWRAP, true),
                     new ObjectAttribute(CKA.CKA_VALUE_LEN, (ulong)32)
                };


                try
                {
                    //generate derived key

                    byte[] sd = null;
                    CkEcdh1DeriveParams par = new CkEcdh1DeriveParams((ulong)CKD.CKD_NULL, sd, data);
                    par.ToMarshalableStructure();
                    Mechanism m = new Mechanism(CKM.CKM_ECDH1_DERIVE, par);
                    Sesh.DeriveKey(m, oPrivKeyObjectHandle, deriveAttributes);
                    ObjectHandle SSOH = new ObjectHandle();

                    Sesh.GetAttributeValue(SSOH,deriveAttributes);

                }
                catch (Exception ex)
                {
                    string error = ex.Message;
                }
                finally
                {
                    Sesh.Logout();
                }

            }
        }
        return """";
    }
    private byte[] Get_SHA256(string text)
    {
        byte[] bytes = Encoding.UTF8.GetBytes(text);
        SHA256Managed hashstring = new SHA256Managed();
        byte[] hash = hashstring.ComputeHash(bytes);
        string hashString = string.Empty;
        foreach (byte x in hash)
        {
            hashString += String.Format(""{0:x2}"", x);
        }

        return hash;

    }

    private byte[] Get_pub_Key(string text)
    {
        byte[] Bytes = new byte[65];
        int startpos = 0;
        for (int i = 0; i < (text.Length / 2); i++)
        {
            byte b = Convert.ToByte(text.Substring(startpos, 2), 16);
            Bytes[i] = b;
            startpos += 2;
        }
        return Bytes;
    }
}

Receiving error:
Net.Pkcs11Interop.Common.Pkcs11Exception: 'Method C_DeriveKey returned 2147484548'

Tail of messages log from the HSM:
Mar 21 07:59:10 hsm1 kernel: ERR:  viper0: _do_smachine: hsm kernel crashed
Mar 21 07:59:10 hsm1 kernel: ERR:  viper0: _do_smachine: device error
Mar 21 07:59:10 hsm1 kernel: NOTE: viper0: HSM is being shut down, discarding pending requests...
Mar 21 07:59:10 hsm1 kernel: NOTE: viper0:    DMA buffers:          0000
Mar 21 07:59:10 hsm1 kernel: NOTE: viper0:    HSM commands:         0001
Mar 21 07:59:10 hsm1 kernel: NOTE: viper0:    Callback requests:    0000
Mar 21 07:59:10 hsm1 etnetserver[990]: MDV2_SendReceiveCmd(): MD_SendReceive() 
error: Internal error - unknown error

","Exception you are getting says that low level PKCS#11 function C_DeriveKey returned vendor specific error 0x80000384 (2147484548 dec) known as CKR_SMS_ERROR. You will need to discuss documentation provided by the device vendor or contact vendor support to get better understanding how to handle or avoid this specific error.
This exact error was also discussed in an older question where it was caused by an incorrect usage of PKCS#11 API in a multithreaded environment.
","475","<pkcs#11><hsm><pkcs11interop>","3","1","1","2018-03-21 16:30:01","49393488","1","","3325704","","2018-03-21 16:30:01","2018-03-20 12:03:48",""
"33659217","create a certificate for microsoft office using pkcs11 library","I have a PKCS#11 library that contacts with the vendor's smart card. The low level details are not provided and I'm not interested in them either.
BTW the smart card has no internal certificate associated with it, its just a dumb smart card with a private key store.
So my question is:

What kind of code should I write to obtain a certificate from the PKCS#11 library, or do I need to write such code? does PKCS#11 supports exporting certificates?(I heard openssl supports using 3rd party PKCS#11 libraries. Can I use that to export a certificate from a smart card?)
If the answer to previous question is yes, in what kind of format is the certificate created? What kind of conversions should I to do in order to convert the raw created certificate into office supported format certificate?
and the last question is how to apply that certificate into microsoft office(2013) in order to digitally sign documents? It looks like that office itself doesn't like internal certificates and it keeps requesting us to get one from verisign (?) what's wrong here and how can I force office to use my own created certificate using the aforementioned method?

","PKCS#11 interface lets you read (""export"") the certificate from the hardware. However you need not just a certificate, but also a private key. Most hardware devices won't let you export a private key. PKCS#11 has a set of functions which let you perform cryptographic operations using private keys stored in the hardware, but not to export those keys. 
The certificate is usually exported in native DER format, which can later be put to the PFX file. However without a private key it doesn't make sense.
Unfortunately I don't know what MS Office expects. I assume that Office in your case accepts only certificates which can be validated up to the trusted root certificate.
","474","<certificate><ms-office><sign><digital-certificate><pkcs#11>","0","1","1","2015-11-12 08:12:16","","0","","","","","2015-11-11 20:26:54",""
"48349002","pkcs#11 CKR_DEVICE_REMOVED error logging in to HSM","I have the SmartCard HSM usb plugged in to my laptop. I can see it when I run a command thru an application using the PKCS#11 API:
Slot 0

    Slot info:
        Description:      Identiv uTrust 3512 SAM slot Token [CCID Interface] (55511725602
        Manufacturer ID:  Identiv                         
        Hardware version: 2.2
        Firmware version: 0.0
        Token present:    yes
    Token info:
        Manufacturer ID:  www.CardContact.de              
        Model:            PKCS#15 emulated
        Hardware version: 24.13
        Firmware version: 2.5
        Serial number:    DECC0300697     
        Initialized:      yes
        User PIN init.:   yes
        Label:            UserPIN (SmartCard-HSM)  

Its been initialized with a SO-PIN and USER-PIN.
When I try to login in to the HSM using C_Login, I get a CKR_DEVICE_REMOVED error back. The usb HSM is still plugged in. I have googled the error but nothing fruitful came up.
login_token -LOGIN user -SLOT 0 -UPIN user-pin

EROR: rv=0x00000032: Could not log in on the token.

How can I login to the HSM ?
","Following text is the description of CKR_DEVICE_REMOVED error from PKCS#11 v2.20 specification:

CKR_DEVICE_REMOVED: The token was removed from its slot during the
  execution of the function.

If you did not attach/detach new reader and did not insert/remove smartcard once the PKCS#11 library was loaded then I don't see any obvious reason why you are receiving this error.
However you are using PKCS#11 library provided by OpenSC project so you can enable its debugging via environment variable or configuration file. You may be able to find the cause of the error by exploring the debug output yourself. If not, then your best bet is to open new OpenSC issue and discuss your problem with OpenSC project members.
","471","<pkcs#11><hsm><opensc>","1","1","1","2018-01-21 09:52:15","","3","0","3325704","","2018-01-21 09:52:15","2018-01-19 20:24:51",""
"48767268","Sun PKCS#11 Wrapper how to debug CKR_TEMPLATE_INCONSISTENT","Is there any way how to debug what is causing Sun PKCS#11 wrapper exception?:
sun.security.pkcs11.wrapper.PKCS11Exception: CKR_TEMPLATE_INCONSISTENT

I would like to know which attribute of PKCS#11 object is inconsistent and fix it.
","You can use a pkcs11 logging wrapper.
For instance: https://github.com/Pkcs11Interop/pkcs11-logger
You'll need some environment variables:

PKCS11_LOGGER_LIBRARY_PATH -> path to the real pkcs11 library
PKCS11_LOGGER_LOG_FILE_PATH -> path to the log file
PKCS11_LOGGER_FLAGS -> flags (take a look at pkcs11-logger README.md

file)
","470","<java><pkcs#11>","0","0","2","2018-02-13 15:05:31","","1","","","","","2018-02-13 12:50:52",""
"48767268","Sun PKCS#11 Wrapper how to debug CKR_TEMPLATE_INCONSISTENT","Is there any way how to debug what is causing Sun PKCS#11 wrapper exception?:
sun.security.pkcs11.wrapper.PKCS11Exception: CKR_TEMPLATE_INCONSISTENT

I would like to know which attribute of PKCS#11 object is inconsistent and fix it.
","It is quite tricky to find exactly what attribute is missing or provided incorrectly. The only way you could fix this is by trial and error. Since this exception is thrown by the token, it wouldn't be logged, which makes it much difficult to solve.
I would recommend first to better understand what type of token you are dealing with. This will give you a better idea of what type of object template it would expect.
For example, if the token only allows you to create sensitive keys, if you set the attribute value as false, the token would complain. So you have to try a combination of attributes and see if it succeeds in creating the object.
Another thing you could do is, if, the token comes with its own sdk or tools, that can interact with the token and create objects, create a test object using their sdk/tool, and then use the PKCS#11 interface to extract the object and see what template it has. You could use this as a base template.
If it doesn't you can try to create an object starting with a minimal template, with required values, like:

Id (some random value)
Label (alias name)
Token (true recommended)
Sensitive (true recommended)
Algorithm/Mechanism (CKM_RSA_PKCS_KEY_PAIR_GEN / CKM_AES_KEY_GEN)
Key Type (CKK_RSA / CKK_AES)
Value Length (optional)
Class (optional)

","470","<java><pkcs#11>","0","1","2","2018-02-13 15:05:31","","1","","","","","2018-02-13 12:50:52",""
"36424909","PKCS11, OBJECT PIN","I'm making pkcs11 module for web app. It's remote storage for certificates and it provides API for signing data. API for signing looks like this:
sign(int CertificateId, char* Password, void* data, int lenght)
In pkcs11 module, the whole storage is represented by one single token. In the C_Initialize section, I authenticate to the server. I find objects with another API call and everything is fine. The problem is, when I call C_SignInit or C_Sign function, I dont know how to get secondary password for my object. 
Can anyone help me?
","In PKCS#11 all objects are protected with a User PIN. They don't have their own PINs. So there's no standard way to ask for a different PIN for the particular object.
","466","<c><pkcs#11>","2","2","4","2016-05-08 11:24:53","36445748","0","1","","","","2016-04-05 11:18:39",""
"36424909","PKCS11, OBJECT PIN","I'm making pkcs11 module for web app. It's remote storage for certificates and it provides API for signing data. API for signing looks like this:
sign(int CertificateId, char* Password, void* data, int lenght)
In pkcs11 module, the whole storage is represented by one single token. In the C_Initialize section, I authenticate to the server. I find objects with another API call and everything is fine. The problem is, when I call C_SignInit or C_Sign function, I dont know how to get secondary password for my object. 
Can anyone help me?
","If you call password that protect private keys in .pfx or .pvk files as   ""secondary password"" you are wrong. Those password is used to protect private keys in those files(.pfx or .pvk ) not the HSM one. There is no another password to protect keys in HSM. If you want to call api functions you have to login with user or admin PIN.
","466","<c><pkcs#11>","2","0","4","2016-05-08 11:24:53","36445748","0","1","","","","2016-04-05 11:18:39",""
"36424909","PKCS11, OBJECT PIN","I'm making pkcs11 module for web app. It's remote storage for certificates and it provides API for signing data. API for signing looks like this:
sign(int CertificateId, char* Password, void* data, int lenght)
In pkcs11 module, the whole storage is represented by one single token. In the C_Initialize section, I authenticate to the server. I find objects with another API call and everything is fine. The problem is, when I call C_SignInit or C_Sign function, I dont know how to get secondary password for my object. 
Can anyone help me?
","As Eugene Mayevski writes there is no such concept as ""object PIN"" in PKCS#11.
You may implement some variant of the following schema to get similar access control model:
Enrolling a key-pair:

Generate a key-pair via C_GenerateKeyPair and ensure the private key is generated as a session-only object (i.e. with CKA_TOKEN==FALSE). An alternative is to import the key pair somehow (not to be discussed here).
Generate a strong password (or use a user supplied one) and run it through some KDF to get ""unlocking key"". Keep this ""unlocking key"" in your application memory.
Generate a new persistent symmetric ""derivation key"" which allows key derivation only (i.e. CKA_TOKEN==TRUE and CKA_DERIVE==TRUE) using e.g. CKM_AES_KEY_GEN.
Derive a new ""wrap key"" session-only key object using e.g. CKM_AES_CBC_ENCRYPT_DATA with the ""unblocking key"" bytes as input diversification data and using the ""derivation key"" as a master key. The new key should be a session-only object and should allow only key wrapping (i.e. CKA_TOKEN==FALSE and CKA_WRAP==TRUE).
Wrap the private key object from step 1 using the ""wrap key"" into ""key blob"".
Store the ""key blob"" (inside token or outside of it).
Delete the private key from step 1 and the ""wrap key"". Nuke password and ""unlocking key"". (Do this step even if some of the previous steps fail)
The private key should not be accessible without knowing the password.

Using a key-pair:

Run the input password through the same KDF to get the ""unlocking key"".
Derive the ""wrap key"" in the same way as during the key enrollment but this time for unwrapping only (i.e. CKA_TOKEN==FALSE and CKA_UNWRAP==TRUE).
Unwrap the ""key blob"" into a new session-only private key object.
Delete the ""wrap key"". Nuke password and ""unlocking key"". (Do this step even if some of the previous steps fail)
Use the key-pair at your will.
Delete the private key. (Do this step even if some of the previous steps fail)

Wiping the key-pair:

Delete the associated ""derivation key"" and ""key blob"".

Some additional (random) notes:

The used AES mechanisms are just examples. You would have to store the used IV together with ""key blob"" if using CKM_AES_CBC_ENCRYPT_DATA.
Pay a lot of attention to all object attribute values (i.e. deny everything what is not needed). If your device supports some vendor defined extensions to control object usage then do use them (e.g. to enforce wrap/unwrap/derive mechanisms allowed).
Remember to wipe/delete passwords and temporary keys from memory/session.
Use vendor specific wrapping mechanisms as they probably provide better protection (if possible).
A convenient way to delete session objects is to close the session.
You may want to protect the integrity of the ""key blob"" if it is not provided by the wrapping mechanism.

Good luck!
Desclaimer: I am no crypto expert, so please do validate my thoughts.
","466","<c><pkcs#11>","2","0","4","2016-05-08 11:24:53","36445748","0","1","","","","2016-04-05 11:18:39",""
"36424909","PKCS11, OBJECT PIN","I'm making pkcs11 module for web app. It's remote storage for certificates and it provides API for signing data. API for signing looks like this:
sign(int CertificateId, char* Password, void* data, int lenght)
In pkcs11 module, the whole storage is represented by one single token. In the C_Initialize section, I authenticate to the server. I find objects with another API call and everything is fine. The problem is, when I call C_SignInit or C_Sign function, I dont know how to get secondary password for my object. 
Can anyone help me?
","The idea of PKCS#11 is to have 1 password (PIN) to protect the whole token. Secondary authentication on keys located on the same token has been completly left out of the protocol. As stated in the 2.01 specification :

Using a private key protected by secondary authentication uses the same process, and call sequence, as using a private key that is only protected by the login PIN. In fact, applications written for Cryptoki Version 2.01 will use secondary authentication without modification.

Which translates into: ""secondary authentication is not our problem. Such mechanisms must be implemented OUTSIDE of our protocol"". 
However, they describe a trick to expose several PINs when the keys are actually located on the same token here
Link to 2.11 specification: here
","466","<c><pkcs#11>","2","1","4","2016-05-08 11:24:53","36445748","0","1","","","","2016-04-05 11:18:39",""
"48664342","IAIK PKCS#11 Wrapper: ECDH KeyAgreement Example","I try to perform some ECDH key agreement, using the IAIK PKCS#11 wrapper (https://jce.iaik.tugraz.at/sic/Products/Core_Crypto_Toolkits/PKCS_11_Wrapper), explizitly NOT using the JCE provider. So far I did not find any example how to do so, especially setting up the key template and mechanism (and mechanism-parameters). 
Do you have some example, how to perform this and verify the result, optimally using BouncyCastle?
thank you!
","In the end, I made it work on my own. 
First be aware, that the IAIK PKCS#11 wrapper does not support all key derivation functions of PKCS#11.
DHKeyDerivationParameters.KeyDerivationFunctionType specifies what it supports and sadly, although you 
provide a long, it checks if the value is known, so you can not simply provide the values defined for other KDF
functions. Still, if your PKCS#11-module supports it, you can use DHKeyDerivationParameters.KeyDerivationFunctionType.NULL
and do the derivation on your own. 
For the following to snippets let session be some iaik.pkcs.pkcs11.Session, which is properly 
authenticated to use the selected ECDH key.
Do the following to derive a key, in this case for AES (2Des and 3DES or other AES lengths are mostly the same):
final long CKA_VALUE_LEN = 0x00000161;

byte[] deriveKey(byte[] publicKey, byte[] salt, long keyDerivationFunction) throws Exception {
    // setting up mechanism:
    EcDH1KeyDerivationParameters params = new EcDH1KeyDerivationParameters(keyDerivationFunction, salt, publicKey);
    Mechanism mechanism = Mechanism.get(PKCS11Constants.CKM_ECDH1_DERIVE );
    mechanism.setParameters(params);

    // setting up keyTemplate, specifying how the derived key looks like:
    Key keyTemplate = new AESSecretKey();
    keyTemplate.putAttribute(CKA_VALUE_LEN, new Long(32));

    AESSecretKey derivedKey = ((AESSecretKey)session.deriveKey(mechanism, key, keyTemplate));
    return derivedKey.getValue().getByteArrayValue();
}

To retrieve the plain ECDH shared secret, proceed as follows:
byte[] getSharedSecret(byte[] publicKey) throws Exception{
    // setting up mechanism:
    EcDH1KeyDerivationParameters params = new EcDH1KeyDerivationParameters(DHKeyDerivationParameters.KeyDerivationFunctionType.NULL, null, publicKey);
    Mechanism mechanism = Mechanism.get(PKCS11Constants.CKM_ECDH1_DERIVE );
    mechanism.setParameters(params);

    // four our PKCS#11 module, using a GenericSecretKey without length returns
    // the complete derived secret:
    Key keyTemplate = new GenericSecretKey();

    GenericSecretKey derivedKey = ((GenericSecretKey)session.deriveKey(mechanism, key, keyTemplate));
    return derivedKey.getValue().getByteArrayValue();
}

To perform the 'other' side and validate, that the derived value is as expected, you can use BouncyCastle and the following code:
void testKeyDerivation(ECPublicKey otherPublic, byte[] salt) throws Exception{
    // create some keypair, which fits to the EC key, IAIK is using:        
    KeyPairGenerator keyGen = KeyPairGenerator.getInstance(""ECDH"", BouncyCastleProvider.PROVIDER_NAME);
    keyGen.initialize(otherPublic.getParams());
    KeyPair testKeyPair = keyGen.generateKeyPair();
    ECPublicKey publicTestKey = (ECPublicKey) testKeyPair.getPublic();

    // convert the JCE Publickey to the required format, using BouncyCastle:
    byte[] encodedPublicTestKey = EC5Util.convertPoint(publicTestKey.getParams(), publicTestKey.getW(),false).getEncoded(false);
    // format is 0x04 X Y where X and Y are byte[], containing the (padded) coordinates of the point, 
    // specifying the public key    


    // in fact, you need to do only one of these, but I want to show, how both works:
    byte[] iaikDerivedKey =  deriveKey(encodedPublicTestKey, salt, DHKeyDerivationParameters.KeyDerivationFunctionType.SHA1_KDF);
    byte[] iaikDerivedSecret =  getSharedSecret(encodedPublicTestKey);


    // verify that both sides indeed agree:
    KeyAgreement ka = KeyAgreement.getInstance(""ECDH"", BouncyCastleProvider.PROVIDER_NAME);
    ka.init(testKeyPair.getPrivate());
    ka.doPhase(otherPublic, true);
    byte [] secret = ka.generateSecret();

    Assert.assertTrue(Arrays.equals(iaikDerivedSecret,  secret));

    Digest digest = new SHA1Digest();
    KDF2BytesGenerator kdf = new KDF2BytesGenerator(digest);
    DerivationParameters derivationParameters = new KDFParameters(secret,salt);

    kdf.init(derivationParameters);
    byte[] derivedKey = new byte[iaikDerivedKey.length];
    kdf.generateBytes(derivedKey, 0, iaikDerivedKey.length);
    Assert.assertTrue(Arrays.equals(iaikDerivedKey,  derivedKey));
}

This does work for me with IAIK PKCS#11 Wrapper Version 1.5 and BouncyCastle Version 1.59, using my companies PKCS#11 Middleware and some Smartcard. I hope it also helps somebody else, trying to do the same.
","465","<java><pkcs#11><iaik-jce><ecdh>","1","1","1","2019-03-14 07:29:03","48686291","0","1","","","","2018-02-07 12:53:52",""
"17771424","How write ecdsa private key on pem format by openssl?","How write ecdsa private key on pem format by openssl?
I need a solution to solve this problem;
EC_KEY_check_key returned error code ::reason(67)
     EVP_PKEY* priveECKey = EVP_PKEY_new();
     EC_KEY  *key =  EC_KEY_new();
     key = EC_KEY_new_by_curve_name(OBJ_sn2nid(strCurvename));
      BIGNUM *prv = BN_bin2bn((unsigned char*)priKeyTemplate[1].pValue, priKeyTemplate[1].ulValueLen, NULL);

     C_KEY_set_private_key(key, prv);
     if (EC_KEY_check_key(key))
     {
       printf(""private key verified OK\n"");
     }

      EVP_PKEY_assign_EC_KEY(priveECKey ,key);
      if (priveECKey == NULL)
      {
       PEM_write_PrivateKey(file, priveECKey, NULL, NULL, 0, 0, NULL );
      }

","","463","<openssl><pkcs#11>","1","","0","2013-07-21 11:09:15","","1","1","2579035","","2013-07-21 11:09:15","2013-07-21 10:36:06",""
"42890583","Jarsigner - alias contains diacritic sign","it's my first post here. I would like to ask for help.
I have a problem with signing .jar application. I don't know how to specify alias in jarsigner command, which contains diacritic sign.
 I have a Code Signing certificate. My alias (Pa Zówka) contains ó letter - Latin Small Letter O with Acute. 
I'm using JDK 8u121.
I've tried many combinantions, but every time I'm getting an error saying:
jarsigner: key associated with <my alias>. not a private key

I've tried to convert my alias to Unicode:
\u0050\u0061 \u007a\u00f3\u0077\u006b\u0061

or replace only this problematic letter:
Pa Z\u00f3wka

I've changed code page for Windows Command Line between 65001, 852 and 1252. Still the same error.
This is my command:
jarsigner -keystore NONE -certchain subca.pem -tsa ""http://server.time.pl"" -storetype PKCS11 -providerClass sun.security.pkcs11.SunPKCS11 -providerArg ""provider.cfg"" ""fileToSign.jar"" ""Pa Z\u00f3wka""

Certificate is stored on smart card, that's why I'm using PKCS11 and -keystore NONE. Provider.cfg contains slot settings for smart card.
I have also the same certificate whitout any diacritic signs, stored on another card and it works correctly.
Any suggestions greatly appreciated.
","","462","<digital-signature><signing><pkcs#11><jarsigner>","1","","0","2017-03-19 18:47:27","","2","","7736209","","2017-03-19 18:47:27","2017-03-19 18:39:27",""
"16495524","PKCS#11 Soft Token for supporting symmetric function","For testing my codes, I need a PKCS#11 soft token which support symmetric functions like AES, DES, ...
Which PKCS#11 soft token support at least one symmetric function?
","I found OpenCryptokey:
http://www.ibm.com/developerworks/linux/library/s-pkcs/
This Soft Token has symmetric functions.
","456","<aes><des><encryption-symmetric><pkcs#11>","0","0","1","2013-05-11 12:54:37","16497306","0","","","","","2013-05-11 09:06:02",""
"43183359","HSM : Storage of Normal user PIN or pass phrase for an unattended start","We are using Ncipher/Thales HSM to store keys.
The Operator card used for this is protected via passphrase.
We are using PKCS11Interop to communicate with the HSM and the PIN  needs to be provided to communicate with HSM.
What is the industry practice to store such security pins / pass phrases for an unattended process?
We need to install our application in multiple boxes , how do we maintain security of the pin.
","We used two different practices to store PIN data and becoming attended or unattended is not different. You have to store PIN Data in protected environment, SQL Server or MainFrame systems that access is safeguarded and highly controlled.
Not only environments but data format is important, you can not store clear PIN data but in encrypted forms. You have to use HSM for encryption-decryption too.

Store PIN Data encrypted under LMK form.
First encrypt clear PIN data with ""Encrypt a Clear PIN"" command(BA) and store output data. To verify PIN , you have to call ""Decrypt an Encrypted PIN"" command(NG). If you want to use those commands you have to enable ""Clear PIN"" commands in Thales HSM so its is highly vulnerable to insider attacks. If an insider who have access to PIN data and HSM, can easily get PIN values.
Offset Method.
You do not store sensitive information that can be used to generate clear PIN but data that can be used for verification purposes only. You store Offset, Decimalisation Table, PIN Validation Data for verification of data that comes from customer(PIN is sent to central servers under ZPK or TPK encrypted from ATM). You can not generate customer PIN from those data so it is more secure. You can use PIN Verification Commands(DA,EA) 

","456","<pkcs#11><hsm><passphrase>","0","0","1","2017-04-04 15:16:30","","0","1","","","","2017-04-03 11:22:51",""
"50744814","CURLINFO_SSL_ENGINES don't list openssl engine","I try to use engine pkcs11 with curl.
Firstly, I add my engine pkcs11 to openssl.
int initEngine()
{
    ENGINE_load_builtin_engines();

    ENGINE *e;
    display_engine_list();
    e = ENGINE_by_id(""dynamic"");
    if(!e)
    {
        return -1;
    }
    if(!ENGINE_ctrl_cmd_string(e, ""SO_PATH"", ENGINE_SO_PATH, 0))
    {
        return -2;
    }
    if(!ENGINE_ctrl_cmd_string(e, ""ID"", ""pkcs11"", 0))
    {
        return -3;
    }
    if(!ENGINE_ctrl_cmd_string(e, ""LIST_ADD"", ""1"", 0))
    {
        return -4;
    }
    if(!ENGINE_ctrl_cmd_string(e, ""LOAD"", NULL, 1))
    {
        return -5;
    }
    if(!ENGINE_ctrl_cmd_string(e, ""MODULE_PATH"", NOM_LIB_CPS_PKCS_V5, 0))
    {
        return -6;
    }
    if(!ENGINE_init(e))
    {
        ENGINE_free(e);
        return -8;
    }
    ENGINE_free(e);

    display_engine_list();
    return 0;
}

This part works: 
engine 0, id = ""rdrand"", name = ""Intel RDRAND engine""
engine 1, id = ""dynamic"", name = ""Dynamic engine loading support""
engine 2, id = ""pkcs11"", name = ""pkcs11 engine""

Then I want configure curl to use this.
int InitSsl(const char *CACertificat, const char *certificat)
{
    CURLcode res = CURLE_OK;

    if ( NULL != curl )
    {
        struct curl_slist *engines = NULL;

        curl_easy_getinfo(curl, CURLINFO_SSL_ENGINES, &engines);

        for ( ; engines; engines = engines->next)
        {
            fprintf (stderr,""  %s\n"", engines->data);
        }
        curl_slist_free_all(engines);


        if ( res == CURLE_OK )
            res = curl_easy_setopt(curl,CURLOPT_SSLVERSION,CURL_SSLVERSION_TLSv1);

        if ( res == CURLE_OK )
            res = curl_easy_setopt(curl,CURLOPT_SSLCERT,certificat);

        if ( res == CURLE_OK )
            res = curl_easy_setopt(curl,CURLOPT_SSLCERTTYPE,""PEM"");    

        if ( res == CURLE_OK )
            res = curl_easy_setopt(curl,CURLOPT_SSLKEY,""xxxxxx"");

        if ( res == CURLE_OK )
            res = curl_easy_setopt(curl,CURLOPT_SSLKEYTYPE,""ENG"");

        if ( res == CURLE_OK )
            res = curl_easy_setopt(curl, CURLOPT_SSLENGINE, ""pkcs11"");

        if ( res == CURLE_OK )
            res = curl_easy_setopt(curl,CURLOPT_CAINFO, CACertificat);

        if ( res == CURLE_OK )
            res = curl_easy_setopt(curl, CURLOPT_SSL_VERIFYPEER, true);

        if ( res == CURLE_OK )
            res = curl_easy_setopt(curl, CURLOPT_SSL_VERIFYHOST, 2);

        if ( res == CURLE_OK )
            res = curl_easy_setopt(curl, CURLOPT_SSLENGINE_DEFAULT, 1);
    }

    return res;
}

No engine is displayed on console. I have the error : 
Erreur num  53 : SSL crypto engine not found

It seems engine isn't list with curl.
When I try on command line, I have :
> curl.exe --version
curl 7.60.0 (i386-pc-win32) libcurl/7.60.0 OpenSSL/1.0.2o WinIDN
Release-Date: 2018-05-16
Protocols: dict file ftp ftps gopher http https imap imaps ldap pop3 pop3s rtsp smb smbs smtp smtps telnet tftp
Features: AsynchDNS IDN IPv6 Largefile SSPI Kerberos SPNEGO NTLM SSL HTTPS-proxy

> curl.exe --engine list
Build-time engines:
  <none>

> openssl engine -t
(rdrand) Intel RDRAND engine
     [ available ]
(dynamic) Dynamic engine loading support
     [ unavailable ]
(pkcs11) pkcs11 engine
     [ available ]

For this test, I have build curl with openssl : 
nmake /f Makefile.vc mode=dll WITH_SSL=dll SSL_PATH=C:\OpenSSL-Win32
If I install curl with openssl support and I set my engine on OPENSSL_CONF file, I have no problem.
My test is under Windows 10.
","I find the solution. By default HAVE_OPENSSL_ENGINE_H isn't defined on config-win32.h. I have edited this file and it works.
","453","<curl><openssl><pkcs#11><openssl-engine>","1","0","1","2018-06-08 09:57:04","50758043","0","1","","","","2018-06-07 15:16:31",""
"43685060","Speed up jarsigner with hardware token?","I formerly signed jar files using a locally installed keystore as part of an automated build. I'm now faced with having to use a hardware-based device, due to recent changes to minimal code signing requirements, and while I've figured out how to do it, I'm seeing extreme slow-downs.
Just as one example, a jar file with 180 classes that I could formerly sign in about half a second is now taking about 30 seconds. As it's going, I see my token device's access light flashing a few times a second, presumably once for each class in the jar file.
Is there any way to speed this up, e.g. some way to reduce the token accesses to a single access for the entire jar file?
","It was not an answer, but it is too long for a comment:
If your supposition of an access to the token for any file is correct, then it would mean the hash of the files is also being calculated in the device, not only the signature.
Does your PKCS11 device have a logging option that could show which pkcs11 calls are the device receiving (hash operations are called C_Digest in PKCS11) to confirm?
Maybe with the option mentioned in java keytool with opensc pkcs#11 provider only works with debug option enabled (I haven't tried it)
Since I don't know if there's any way to tell jarsigner to hash by software and to sign by hardware, if you can't find a better answer, maybe you can write your own provider: ( http://docs.oracle.com/javase/7/docs/technotes/guides/security/crypto/HowToImplAProvider.html ) :

implementing a software hash (MessageDigestSpi, just forwarding the call to the default software java provider) 
and a device signature (SignatureSpi, just forwarding the call to the PKCS11 provider configured in java ). I think it was Signature signature = Signature.getInstance(""SHA1withRSA"", ""SunPKCS11"") and so on. And analog for KeyStoreSpi.

And then call jarsigner with your provider as parameter.
","453","<java><pkcs#11><jarsigner>","4","3","2","2019-03-01 09:40:50","43686315","2","0","","","","2017-04-28 16:37:08",""
"43685060","Speed up jarsigner with hardware token?","I formerly signed jar files using a locally installed keystore as part of an automated build. I'm now faced with having to use a hardware-based device, due to recent changes to minimal code signing requirements, and while I've figured out how to do it, I'm seeing extreme slow-downs.
Just as one example, a jar file with 180 classes that I could formerly sign in about half a second is now taking about 30 seconds. As it's going, I see my token device's access light flashing a few times a second, presumably once for each class in the jar file.
Is there any way to speed this up, e.g. some way to reduce the token accesses to a single access for the entire jar file?
","Try adding -sigalg SHA512withRSA to your jarsigner options.
For further information, check my answer to a related question
","453","<java><pkcs#11><jarsigner>","4","1","2","2019-03-01 09:40:50","43686315","2","0","","","","2017-04-28 16:37:08",""
"35448640","Begin writing a PKCS token on java card","I want to start implementing pkcs on java card. I have searched a lot but I couldn't find where to begin. I know that a standard token should support PKCS#11 functionalities and probably PKCS#15. should I read those two standards and just do my best to implement them on my card? Is there any open source implementation of PKCS on Java Card?
Regards
","I found where the problem is! My card is not compatible with OpenSC, as a result there was a problem connecting to my card and make function.
here you can find the list of compatible hardwares.
","452","<javacard><pkcs#11><hsm>","3","0","2","2016-03-05 14:28:18","35815299","8","","1488274","","2016-02-17 12:42:20","2016-02-17 05:29:51",""
"35448640","Begin writing a PKCS token on java card","I want to start implementing pkcs on java card. I have searched a lot but I couldn't find where to begin. I know that a standard token should support PKCS#11 functionalities and probably PKCS#15. should I read those two standards and just do my best to implement them on my card? Is there any open source implementation of PKCS on Java Card?
Regards
","Have a look at IsoApplet (that does exactly this) https://github.com/philipWendland/IsoApplet
","452","<javacard><pkcs#11><hsm>","3","2","2","2016-03-05 14:28:18","35815299","8","","1488274","","2016-02-17 12:42:20","2016-02-17 05:29:51",""
"47771005","PKCS#7 signature in PHP using PKCS#11 without a CLI call","Is there a way to create a PKCS#7 (S/MIME) signature with a PKCS#11 compliant HSM device (card reader) using pure PHP, i.e. without explicit shell command call, e.g. using PHP OpenSSL library or some other glue?
I can successfully create a PKCS#7 signature using CLI openssl with PKCS#11 engine like so:
putenv('PIN='.$secret_card_pin);
shell_exec(""export PIN; OPENSSL_CONF=openssl.cnf openssl smime -sign -engine pkcs11 -md sha1 -binary -in {$tmpFileIn} -out {$tmpFileOut} -outform der -keyform engine -inkey id_ed0007 -signer pubcert.pem"");

I want to clean this but it seems impossible using pure PHP because as far as I can tell openssl_pkcs7_sign() function can only be used with a private key file without any support for pkcs11-engine provided keys. Am I missing something?
","There is not, while there are PKCS#11 bindings for many languages there is not one for PHP. 
You would need this, then you could then construct a PKCS#7 and sign it using that library. 
Unfortunately absent that you will need to use a CLI.
","451","<php><openssl><pkcs#11><pkcs#7><opensc>","0","1","1","2017-12-19 13:21:27","47843316","0","","1347707","","2017-12-19 13:21:27","2017-12-12 11:01:59",""
"41736941","Creating a self-signed certificate from the keypair on the smartcard","I generated a keypair on the smartcard using pkcs11-tool from OpenSC and the custom PKCS#11 library. This PKCS#11 library is my test object.
Now I want to create a certificate out of this keypair.
So far I found the way to create certificate when I have keypair in PEM format (file), but I want to use keypair on the card.
I am working on Windows 7.
","","450","<openssl><smartcard><pkcs#11><opensc>","0","","0","2017-01-19 08:18:29","","2","1","","","","2017-01-19 08:18:29",""
"32370891","Difference between pkcs#11 and pkcs#12?","What is the difference between pkcs#11 and pkcs#12?
How do they work? How export pkcs#11 from e-token? 
How it use in java 1.4? 
","PKCS#12 is a container for certificates with associated private keys.
PKCS#11 is a protocol to work with hardware (usually). So you can't ""export"" PKCS#11. 
The rest of your question is way to broad to answer - try using Wikipedia as a starting point, then proceed to specifications. 
","448","<pkcs#11><pkcs#12>","-1","0","1","2015-09-04 03:55:01","32389805","0","1","","","","2015-09-03 08:41:47",""
"44161427","gRpc with TLS Client Authentication using SunPKCS11 in netty fails","I have some java 8 application, using gRPC for network communication. To secure that, I use TLS with client authentication. Now, I try to switch from software keys to a smart card, holding the private key and certificate (chain) for the client authentication. My code to make netty inside gRPC's use the sun pkcs#11 provider looks as follows:
static NettyChannelBuilder getChannel(final String host, final int port, 
  final File trustAnchorsFile) throws Exception{
  String configName = ""pkcs11.cfg""; // FIXME


  SunPKCS11 sunpkcs11 = new SunPKCS11(configName);
  Security.addProvider(sunpkcs11);
  KeyStore.Builder scBuilder = KeyStore.Builder.newInstance(""PKCS11"", sunpkcs11,
        new KeyStore.PasswordProtection(""11111111"".toCharArray())); //FIXME

  KeyManagerFactory factory = KeyManagerFactory.getInstance(""NewSunX509"");  
  KeyStoreBuilderParameters param = new KeyStoreBuilderParameters(scBuilder);
  factory.init(param);
  SslContextBuilder builder = GrpcSslContexts.forClient(); 

  builder = builder.trustManager(trustAnchorsFile)
                 .keyManager(factory)
                 .clientAuth(ClientAuth.REQUIRE);

  return NettyChannelBuilder.forAddress(host, port).sslContext(builder.build());
}

testing that code I see, that it authenticates against the smart card (providing some wrong PIN (instead of the ""11111111"") decreases the corresponding retry counter on card. In addition, using a debug version of the pkcs11 dll, being used by the sun pkcs11 provider, I see, that the sun provider authenticates, lists all keys, reads all certificates and so (quite often), but does not try to perform some private key operation. In addition, providing -Djava.security.debug=sunpkcs11
to the JVM does not give any further inside (I stumbled accros that at SSL Client Authentication with smart card works in Java 6 but fails in Java 7). 
Using wireshark to look into the TLS protocol handshake it looks like, the client tries to omit the client authentication part which makes the server closing the connection. This leads then to some exception on the client:

io.grpc.StatusRuntimeException: UNAVAILABLE: Channel closed while
  performing protocol negotiation   at
  io.grpc.stub.ClientCalls.toStatusRuntimeException(ClientCalls.java:227)
    at io.grpc.stub.ClientCalls.getUnchecked(ClientCalls.java:208)  at
  io.grpc.stub.ClientCalls.blockingUnaryCall(ClientCalls.java:141)

providing the very same key and certificates from the smartcard as PEM files to the SslContextBuilder does result in a working connection, so I conclude, that the certificate(s) and the key itself do not form the problem, but maybe/probably some configuration of sunpkcs11?
Does anybody succeeded using gRPC with PKCS#15 smartcards / PKCS#11 tokens? 
Does anybody have further suggestions, how to easily understand, what fails here?
","","447","<netty><smartcard><grpc><pkcs#11><ssl-client-authentication>","1","","0","2017-05-24 14:31:08","","0","","","","","2017-05-24 14:31:08",""
"40763677","What should be in Xades4J compatible PKCS11 native library?","In https://github.com/luisgoncalves/xades4j/wiki/DefiningKeyingData it is said that keys and certificates that are stored in smart card, can be used for signing XML documents. Native library is mentioned in code example:
KeyingDataProvider kp = new PKCS11KeyStoreKeyingDataProvider(
               ""path/to/native/lib"",
               ""name"",
               new FirstCertificateSelector(),
               null, null, false);

But what should be in this native library, is it dll or Java jar, what functions the library should export? I tried to use libraries pkcs11wrapper-1.2.18.jar and pkcs11wrapper.dll from the distributions of digital signature packages of my country but the exceptions were thrown:
Exception in thread ""main"" java.security.ProviderException: java.lang.reflect.InvocationTargetException
    at xades4j.providers.impl.PKCS11KeyStoreKeyingDataProvider.createPkcs11Provider(PKCS11KeyStoreKeyingDataProvider.java:211)
    at xades4j.providers.impl.PKCS11KeyStoreKeyingDataProvider.access$100(PKCS11KeyStoreKeyingDataProvider.java:52)
    at xades4j.providers.impl.PKCS11KeyStoreKeyingDataProvider$1.getBuilder(PKCS11KeyStoreKeyingDataProvider.java:118)
    at xades4j.providers.impl.KeyStoreKeyingDataProvider.ensureInitialized(KeyStoreKeyingDataProvider.java:175)
    at xades4j.providers.impl.KeyStoreKeyingDataProvider.getSigningCertificateChain(KeyStoreKeyingDataProvider.java:189)
    at xades4j.production.SignerBES.sign(SignerBES.java:151)
    at xades4j.production.SignerBES.sign(SignerBES.java:122)
    ...
Caused by: java.lang.reflect.InvocationTargetException
    at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
    at sun.reflect.NativeConstructorAccessorImpl.newInstance(Unknown Source)
    at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(Unknown Source)
    at java.lang.reflect.Constructor.newInstance(Unknown Source)
    at xades4j.providers.impl.PKCS11KeyStoreKeyingDataProvider.createPkcs11Provider(PKCS11KeyStoreKeyingDataProvider.java:198)
    ... 8 more
Caused by: java.security.ProviderException: Error parsing configuration
    at sun.security.pkcs11.Config.getConfig(Config.java:88)
    at sun.security.pkcs11.SunPKCS11.<init>(SunPKCS11.java:129)
    at sun.security.pkcs11.SunPKCS11.<init>(SunPKCS11.java:107)
    ... 13 more
Caused by: sun.security.pkcs11.ConfigurationException: Unexpected value Token['('], line 2
    at sun.security.pkcs11.Config.excToken(Config.java:375)
    at sun.security.pkcs11.Config.parseLine(Config.java:595)
    at sun.security.pkcs11.Config.parseLibrary(Config.java:666)
    at sun.security.pkcs11.Config.parse(Config.java:398)
    at sun.security.pkcs11.Config.<init>(Config.java:220)
    at sun.security.pkcs11.Config.getConfig(Config.java:84)
    ... 15 more

The similar exception trace is generated also in cases when I provide empty path or path to non-existent library file.
What should be in native library to use it from Xades4J? Should this native library support some universally accepted interface. Maybe Xades4J is appropriate only for smart cards that are issued by Spain government?
","That is the driver that comes from the card provider.
To use your smart card, you need to install some software. That software (normally) has some nice interface but it also install drivers, (dll's for windows, so's for unix).

For portuguese cards
For belgian cards

Going back to xades4j:
So, ""path/to/native/lib"" is correct...
In xades4j, see the test classes:
static protected String PTCC_PKCS11_LIB_PATH = ""C:\\Windows\\System32\\pteidpkcs11.dll"";

in this class And it is used here
By the way, not xades4j, but interessing, for the Estonian card, see this: 
signatureToken = new PKCS11SignatureToken(""/usr/local/lib/opensc-pkcs11.so"", ""22975"".toCharArray(), 2);

See also this: Signing a PDF with an eID using PKCS#11 and iText
","445","<java><digital-signature><smartcard><pkcs#11><xades4j>","0","2","2","2016-12-04 19:00:42","","0","","","","","2016-11-23 11:46:45",""
"40763677","What should be in Xades4J compatible PKCS11 native library?","In https://github.com/luisgoncalves/xades4j/wiki/DefiningKeyingData it is said that keys and certificates that are stored in smart card, can be used for signing XML documents. Native library is mentioned in code example:
KeyingDataProvider kp = new PKCS11KeyStoreKeyingDataProvider(
               ""path/to/native/lib"",
               ""name"",
               new FirstCertificateSelector(),
               null, null, false);

But what should be in this native library, is it dll or Java jar, what functions the library should export? I tried to use libraries pkcs11wrapper-1.2.18.jar and pkcs11wrapper.dll from the distributions of digital signature packages of my country but the exceptions were thrown:
Exception in thread ""main"" java.security.ProviderException: java.lang.reflect.InvocationTargetException
    at xades4j.providers.impl.PKCS11KeyStoreKeyingDataProvider.createPkcs11Provider(PKCS11KeyStoreKeyingDataProvider.java:211)
    at xades4j.providers.impl.PKCS11KeyStoreKeyingDataProvider.access$100(PKCS11KeyStoreKeyingDataProvider.java:52)
    at xades4j.providers.impl.PKCS11KeyStoreKeyingDataProvider$1.getBuilder(PKCS11KeyStoreKeyingDataProvider.java:118)
    at xades4j.providers.impl.KeyStoreKeyingDataProvider.ensureInitialized(KeyStoreKeyingDataProvider.java:175)
    at xades4j.providers.impl.KeyStoreKeyingDataProvider.getSigningCertificateChain(KeyStoreKeyingDataProvider.java:189)
    at xades4j.production.SignerBES.sign(SignerBES.java:151)
    at xades4j.production.SignerBES.sign(SignerBES.java:122)
    ...
Caused by: java.lang.reflect.InvocationTargetException
    at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
    at sun.reflect.NativeConstructorAccessorImpl.newInstance(Unknown Source)
    at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(Unknown Source)
    at java.lang.reflect.Constructor.newInstance(Unknown Source)
    at xades4j.providers.impl.PKCS11KeyStoreKeyingDataProvider.createPkcs11Provider(PKCS11KeyStoreKeyingDataProvider.java:198)
    ... 8 more
Caused by: java.security.ProviderException: Error parsing configuration
    at sun.security.pkcs11.Config.getConfig(Config.java:88)
    at sun.security.pkcs11.SunPKCS11.<init>(SunPKCS11.java:129)
    at sun.security.pkcs11.SunPKCS11.<init>(SunPKCS11.java:107)
    ... 13 more
Caused by: sun.security.pkcs11.ConfigurationException: Unexpected value Token['('], line 2
    at sun.security.pkcs11.Config.excToken(Config.java:375)
    at sun.security.pkcs11.Config.parseLine(Config.java:595)
    at sun.security.pkcs11.Config.parseLibrary(Config.java:666)
    at sun.security.pkcs11.Config.parse(Config.java:398)
    at sun.security.pkcs11.Config.<init>(Config.java:220)
    at sun.security.pkcs11.Config.getConfig(Config.java:84)
    ... 15 more

The similar exception trace is generated also in cases when I provide empty path or path to non-existent library file.
What should be in native library to use it from Xades4J? Should this native library support some universally accepted interface. Maybe Xades4J is appropriate only for smart cards that are issued by Spain government?
","You need a so-called PKCS#11 driver for your device. It is a user-mode DLL (on Windows) or .so on Linux, Android and macOS (on iOS there are no shared modules, so PKCS#11 support must be compiled into the application).
","445","<java><digital-signature><smartcard><pkcs#11><xades4j>","0","1","2","2016-12-04 19:00:42","","0","","","","","2016-11-23 11:46:45",""
"18539305","Given an public key of type CKK_EC, is it possible to find the matching private key using C_FindObjects?","I have a serialized EC public key - its CKA_EC_PARAMS and CKA_EC_POINT.  There's a matching private key on my token.  Is there any way to find it?  
With an RSA key, I can do a FindObjects with CKA_KEY_TYPE=CKK_PRIVATE_KEY and CKA_MODULUS=.  Is there a way to do the same thing with EC keys?  According to the PKCS#11 spec, CKA_EC_POINT isn't an attribute for EC Private Keys.
","I have a token with support for EC at hand, and it seems that the only way to associate the private and public key will be through the CKA_ID value. No attribute available to test directly the key value.
Actually, even in the case of RSA that's the basic standard method to associate a private and a public key, they ought to be created with identical CKA_ID (that's what the Netscape browser originally did, and everyone copied on that).
They are even some buggy pkcs#11 implementation that won't allow you to read the CKA_MODULUS value of a RSA private key, with them CKA_ID is the only way even for RSA.
","442","<elliptic-curve><pkcs#11>","1","2","1","2014-03-14 13:35:44","22406531","0","","","","","2013-08-30 18:26:46",""
"42161179","How to use Pkcs11Interop with an NitroKey HSM to derive an shared secret with an EC","I bought a NitroKey HSM and manged to create an EC on it.  
Now I want to derive a shared secret.
I found Pkcs11Interop, which seems to be the right tool for the job, but the handling is unclear.
A code snipplet or link to a working project would be very appreciated.
","You can take a look at Pkcs11Admin application for a real world sample using Pkcs11Interop library.
As far as I remember NitroKey HSM should be used with OpenSC middleware so your unmanaged library implementing PKCS#11 API will be opensc-pkcs11.dll.
I believe these resources might be helpful for you:

Getting started with Pkcs11Interop
Pkcs11Interop code samples which contain also key derivation sample
PKCS#11 specification

","442","<c#><pkcs#11><hsm><pkcs11interop>","2","3","1","2017-06-29 19:42:35","42163186","0","1","3325704","","2017-06-29 19:42:35","2017-02-10 13:58:47",""
"48823697","PKCS11 token, receiving error CKR_ATTRIBUTE_TYPE_INVALID when executing keystore.getKey()","I use java 1.8 and the following code works for many USB pkcs11 devices but this week I found a new model of a token that when I execute ""keystorePkcs11.getKey(alias, pass);"" I receive the error CKR_ATTRIBUTE_TYPE_INVALID. This token has a single certificate
This is the full code source I used to do the test:
package pkcs11test;

import java.io.FileOutputStream;
import java.io.IOException;
import java.io.PrintStream;
import java.security.KeyStore;
import java.security.KeyStoreException;
import java.security.NoSuchAlgorithmException;
import java.security.PrivateKey;
import java.security.UnrecoverableKeyException;
import java.security.cert.Certificate;
import java.security.cert.CertificateException;
import java.util.Enumeration;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.net.ssl.KeyManagerFactory;
import sun.security.pkcs11.SunPKCS11;
import sun.security.pkcs11.wrapper.CK_TOKEN_INFO;
import sun.security.pkcs11.wrapper.PKCS11;
import sun.security.pkcs11.wrapper.PKCS11Exception;

public class PKCS11Test {
    public static void main(String[] args) {
        try {
            char[] pass = ""******"".toCharArray(); // PIN of the token
            String dllFile = ""D:\\temp\\cryptoide_pkcs11.dll""; // DLL file used to acces the token
            String configFile = ""config.cfg""; // config file
            PKCS11 p11 = PKCS11.getInstance(dllFile, ""C_GetFunctionList"", null, false);
            long[] slots = p11.C_GetSlotList(true);
            for (int j = 0; j < slots.length; j++) {
                CK_TOKEN_INFO tokenInfo = p11.C_GetTokenInfo(slots[j]);
                System.err.println(""Token found at position ""+j+
                    "" label ""+new String(tokenInfo.label).toUpperCase().trim()+
                    "" model ""+new String(tokenInfo.model).toUpperCase().trim()+
                    "" manufacturerID ""+new String(tokenInfo.manufacturerID).toUpperCase().trim()+
                    "" utcTime ""+new String(tokenInfo.utcTime).toUpperCase().trim()+
                    "" serial ""+new String(tokenInfo.serialNumber).toUpperCase().trim());

                PrintStream out = new PrintStream(new FileOutputStream(configFile));
                out.print(""name=SmartCard\r\n""+""library=""+dllFile+""\r\nslotListIndex=""+slots[j]+""\r\n"");
                out.close();

                SunPKCS11 tempProv = new sun.security.pkcs11.SunPKCS11(configFile);
                KeyStore keystorePkcs11 = KeyStore.getInstance(""pkcs11"", tempProv);
                keystorePkcs11.load(null, pass);
                KeyManagerFactory kKeyManagerFactory = KeyManagerFactory.getInstance(""sunx509"");
                //kKeyManagerFactory.init(keystorePkcs11, null);

                Enumeration<String> enume = keystorePkcs11.aliases(); // read aliases from token
                while(enume.hasMoreElements()) { // token has a single certificate
                    String alias = (String) enume.nextElement();
                    System.err.println(alias);
                    Certificate cert = keystorePkcs11.getCertificate(alias);
                    System.err.println(""Cert to string ""+cert.toString());
                    **keystorePkcs11.getKey(alias, pass);** // Error is HERE
                    PrivateKey priv = (PrivateKey)(keystorePkcs11.getKey(alias, pass));
                }
            }
        } catch (IOException | PKCS11Exception | KeyStoreException | NoSuchAlgorithmException | CertificateException | UnrecoverableKeyException ex) {
            Logger.getLogger(PKCS11Test.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
}

And the full output and error is:
Token found at position 0 label MTOKEN CRYPTOID model E manufacturerID LONGMAI utcTime  serial AE09D489************
A certificate object
Cert to string [
[
  Version: V3
  Subject: CN=**************, SURNAME=************, GIVENNAME=************, SERIALNUMBER=*************, EMAILADDRESS=**************, OU=OG, O=*****************, L=****, ST=******, C=RO, T=*****
  Signature Algorithm: SHA256withRSA, OID = 1.2.840.113549.1.1.11

  Key:  Sun RSA public key, 2048 bits
  ...............................
]
Exception in thread ""main"" java.security.ProviderException: sun.security.pkcs11.wrapper.PKCS11Exception: CKR_ATTRIBUTE_TYPE_INVALID
    at sun.security.pkcs11.P11KeyStore.engineGetKey(P11KeyStore.java:330)
    at java.security.KeyStore.getKey(KeyStore.java:1023)
    at pkcs11test.PKCS11Test.main(PKCS11Test.java:55)
Caused by: sun.security.pkcs11.wrapper.PKCS11Exception: CKR_ATTRIBUTE_TYPE_INVALID
    at sun.security.pkcs11.wrapper.PKCS11.C_GetAttributeValue(Native Method)
    at sun.security.pkcs11.wrapper.PKCS11$SynchronizedPKCS11.C_GetAttributeValue(PKCS11.java:1623)
    at sun.security.pkcs11.P11KeyStore.loadPkey(P11KeyStore.java:1298)
    at sun.security.pkcs11.P11KeyStore.engineGetKey(P11KeyStore.java:315)
    ... 2 more

Thank you.
","","438","<java><pkcs#11>","1","","0","2018-02-16 09:40:32","","8","","9368779","","2018-02-16 09:40:32","2018-02-16 09:31:34",""
"13873666","pkcs11 sso (using prior windows login with smartcard)","I wish to do the following:

Login or unlock my windows account with a smartcard (I know how). The smartcard prompts for PIN.
Then access a java software inside the account - and I want to use the same smartcard during its operation. However, I don't want it to prompt for PIN, but rather rely on the prior windows authentication.

Question: is this possible?
Thank you.
","If you're allowed to patch your existing login procedures, perhaps its worth it to look at pGina (http://pgina.org/), as it is a modular replacement for the GINA part of Windows.
","438","<java><windows><ssl><pkcs#11>","5","1","2","2013-01-29 11:01:41","","7","","","","","2012-12-14 06:18:56",""
"13873666","pkcs11 sso (using prior windows login with smartcard)","I wish to do the following:

Login or unlock my windows account with a smartcard (I know how). The smartcard prompts for PIN.
Then access a java software inside the account - and I want to use the same smartcard during its operation. However, I don't want it to prompt for PIN, but rather rely on the prior windows authentication.

Question: is this possible?
Thank you.
","coming from Incorparating SSO in addition/instead SSL:

When sign in into Windows with your smartcard, it peforms a pkinit and obtains a Kerberos TGT for you.
When you access a further resource that TGT is used and a Kerberos service ticket is created. No smartcard cert involved.
However, if you want to use the the smartcard in your app, you perform client cert auth and not Kerberos therefore the app must prompt you for your PIN.

","438","<java><windows><ssl><pkcs#11>","5","0","2","2013-01-29 11:01:41","","7","","","","","2012-12-14 06:18:56",""
"33166939","unable to load module /usr/local/lib/libsst.so","I had the problem described here: PKCS#11 engine does not work in openssl on centos 6
So I tried to apply the solution, with my paths:
engine -t dynamic -pre SO_PATH:/usr/lib/engines/engine_pkcs11.so -pre ID:pkcs11 -pre LIST_ADD:1 -pre LOAD -pre MODULE_PATH:/usr/local/lib/libsst.so

But I don't have libsst.so anywhere. Can't figure the right package to install.
So the previous command line ends with:
Loaded: (pkcs11) pkcs11 engine
unable to load module /usr/local/lib/libsst.so
[ unavailable ]

Debian version: 6.0.10
What do I need to install?
","","436","<openssl><debian><pkcs#11>","0","","0","2015-10-16 09:29:26","","3","1","-1","","2017-05-23 12:14:31","2015-10-16 09:29:26",""
"49938492","How to use PKCS#11 CKM_AES_KEY_WRAP mechanism in Java?","I'm working with some PKCS#11 tokens that insist on using CKM_AES_KEY_WRAP for unwrapping AES-encrypted keys. On these tokens, CKM_AES_CBC and friends don't support unwrap.
At the other end of this system, I therefore need to wrap a key using a PKCS#11 token accessed via Java.
SunPKCS11 doesn't appear to support CKM_AES_KEY_WRAP. Neither does IAIK, as far as I can tell. Does anyone have any suggestions for achieving this in Java?
","CKM_AES_KEY_WRAP is rather simple mechanism so you don't need your PKCS#11 wrapper library to provide nice constants or enum members to use it.
You should be fine as long as your PKCS#11 wrapper library allows you to specify wrapping mechanim as ulong and its parameters as byte[]. SunPKCS11 is quite limited so I would try with IAIK first.
Following code sample demonstrates the idea with Pkcs11Interop wrapper for .NET:
// Acquire handle to keys
ObjectHandle wrappingKey = new ObjectHandle();
ObjectHandle toBeWrappedKey = new ObjectHandle();

// Define mechanism yourself
ulong CKM_AES_KEY_WRAP = 0x00002109;
byte[] CKM_AES_KEY_WRAP_PARAM = new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08 };
Mechanism mechanism = new Mechanism(CKM_AES_KEY_WRAP, CKM_AES_KEY_WRAP_PARAM);

// Perform wrapping
byte[] wrappedKey = session.WrapKey(mechanism, wrappingKey, toBeWrappedKey);

","435","<java><pkcs#11><jce><iaik-jce><sunpkcs11>","0","1","1","2018-04-21 13:19:51","","0","","","","","2018-04-20 09:31:37",""
"38450168","Using custom PKCS11 provider with jarsigner","I wrote a custom PKCS11 provider and now i want to user it via jarsigner.
My command : 
jarsigner -verbose -keystore NONE -storetype PKCS11 -providerClass my.provider.class jar_to_sign_on.jar ""key_name""
And i get the following error :
jarsigner error: java.lang.ClassNotFoundException: my.provider.class

This is because jarsinger can't find my provider .jar implementation.
When i put mt .jar in ...\Java\jdk1.8.0_31\jre\lib\ext it works perfectly. 
My question is : There is a way to dynamically set my provider .jar ? (Like -providerPath in keytool)
","jarsigner has -J option that allows to pass its value right to the backing java process. The problem is that it doesn't allow spaces, so you need two such options to pass a classpath. Something like this should work:
jarsigner ... -J-cp -Jmylib.jar
","434","<java><keytool><pkcs#11><jarsigner>","3","2","1","2016-07-19 05:53:08","","0","","5966775","","2016-07-19 05:48:03","2016-07-19 05:26:52",""
"49092431","How to fix 'C_Initialize - This object is not connected to a module.' cryptoki dll error in x64bit Client?","I have a problem when I’m trying to access cryptoki.dll from x64 Client. It worked with x86 Client but it is not working with x64. 
What should I do to work with cryptoki.dll from x64 Client?
signature.addKeyInfo(new ECertificate(cert.getEncoded()));

var c = HsmManager.getInstance().getSigner(""MyPassword"", cert);

static Module pkcs11Module = Module.getInstance(@""C:\Program Files\SafeNet\Protect Toolkit 5\Protect Toolkit C SDK\bin\sw\cryptoki.dll"");

[MethodImpl(MethodImplOptions.Synchronized)]

public static HsmManager getInstance() {

   pkcs11Module.initialize(null);

   Slot[] slots = pkcs11Module.getSlotList(true);  

}

","","432","<c#><.net><pkcs#11><hsm>","4","","0","2018-03-06 07:53:09","","5","3","5483074","","2018-03-06 07:53:09","2018-03-04 05:51:35",""
"22038673","Signing documents in java via smartcard without pkcs11","I have to make application to sign documents with smartcard in jdk7. I found that I have to use java provider to pkcs11 to get certificate and private key from smartcard, but... it does not exists in jdk 7 (i'm using windows 7 64bit and I found info that pkcs11 is not supported in this version). 
And my question - any ideas how to do it in different way?
Sorry for my poor english... ;)
","If you are working on Windows platform and your smartcard comes with Microsoft CSP or Minidriver you can try to use it via sun.security.mscapi.SunMSCAPI provider.
See this question for more info.
","429","<java><smartcard><pkcs#11>","2","0","1","2014-02-26 14:55:43","","0","","2674225","","2014-02-26 11:00:53","2014-02-26 10:33:47",""
"27767497","Exception initializer","I wrote a dynamic web project with Java. I deployed to tomcat.
When I make the first call there is no problem, it runs properly.
On the second call, the error below occurred.
After restarting tomcat it runs properly again.
I want every call to run properly.
How can I solve this problem.
Best regards.     
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.InputStream;
import java.io.StringReader;
import java.io.StringWriter;
import java.util.ArrayList;
import java.util.List;
import java.util.Properties;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.soap.MessageFactory;
import javax.xml.soap.SOAPConnection;
import javax.xml.soap.SOAPConnectionFactory;
import javax.xml.soap.SOAPMessage;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;

import org.apache.ws.security.WSConstants;
import org.apache.ws.security.WSEncryptionPart;
import org.apache.ws.security.components.crypto.Crypto;
import org.apache.ws.security.components.crypto.PKCS11Device;
import org.apache.ws.security.message.WSSecHeader;
import org.apache.ws.security.message.WSSecSignature;
import org.apache.ws.security.message.WSSecTimestamp;
import org.w3c.dom.Document;
import org.xml.sax.InputSource;

public class ESign {

    String pin;
    String alias;
    Crypto crypto;
    Document signedDoc;

    public String getBatchStatus(String par1, String par2, String par3) {
        String sonuc = """";

        String soapReq = ""<?xml version='1.0' encoding='UTF-8'?><soap:Envelope>""
                + ..................
                + ""</soap:Envelope>"";


        sign(soapReq, par1);    
    }

    public void sign(String XML, String par1) {
        try {

            PKCS11Device dv = new PKCS11Device();
            dv.slot = Integer.toString(slot);
            dv.drive = drive


            ClassLoader classLoader = EnvImz_BeratIsl.class.getClassLoader();
            dv.loadProperties(getCryptoProperties(), classLoader);

            crypto = dv;

            signDocument(xmlToDoc(XML));    
            }
        } catch (Exception e) {

        }
    }
    public Document xmlToDoc(String XML) {
        try {
            DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
            dbf.setNamespaceAware(true);
            DocumentBuilder db;
            db = dbf.newDocumentBuilder();
            InputSource is = new InputSource();
            is.setCharacterStream(new StringReader(XML));
            Document doc = db.parse(is);
            return doc;
        } catch (Exception e) {

        }
    }

    public void signDocument(Document doc) {
        try {
            WSSecSignature sig = new WSSecSignature();

            WSSecTimestamp time = new WSSecTimestamp();
            WSSecHeader header = new WSSecHeader();
            signedDoc = null;

            header.setMustUnderstand(true);
            sig.setSigCanonicalization(""http://www.w3.org/2001/10/xml-exc-c14n#"");
            sig.setDigestAlgo(""http://www.w3.org/2001/04/xmlenc#sha256"");
            sig.setSignatureAlgorithm(""http://www.w3.org/2001/04/xmldsig-more#rsa-sha256"");
            sig.setUserInfo(alias, pin);
            sig.setKeyIdentifierType(WSConstants.BST_DIRECT_REFERENCE);
            header.insertSecurityHeader(doc);

            doc = time.build(doc, header);                      

            List<WSEncryptionPart> parts = new ArrayList<WSEncryptionPart>();
            WSEncryptionPart timestampPart = new WSEncryptionPart(""Timestamp"",
                    WSConstants.WSU_NS, """");
            WSEncryptionPart bodyPart = new WSEncryptionPart(
                    WSConstants.ELEM_BODY, WSConstants.URI_SOAP11_ENV, """");
            parts.add(timestampPart);
            parts.add(bodyPart);
            sig.setParts(parts);         

            sig.build(doc, crypto, header);
            signedDoc = doc;

        } catch (Exception e) {

        }
    }        
}

Error:
[ERROR] javax.xml.crypto.dsig.XMLSignatureException: java.security.InvalidKeyException: No installed provider supports this key: sun.security.pkcs11.P11Key$P11PrivateKey
    [ERROR] Exception occurred while trying to invoke service method getBatchStatus
    java.lang.reflect.InvocationTargetException
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
        at java.lang.reflect.Method.invoke(Unknown Source)
        at org.apache.axis2.rpc.receivers.RPCUtil.invokeServiceClass(RPCUtil.java:212)
        at org.apache.axis2.rpc.receivers.RPCMessageReceiver.invokeBusinessLogic(RPCMessageReceiver.java:117)
        at org.apache.axis2.receivers.AbstractInOutMessageReceiver.invokeBusinessLogic(AbstractInOutMessageReceiver.java:40)
        at org.apache.axis2.receivers.AbstractMessageReceiver.receive(AbstractMessageReceiver.java:114)
        at org.apache.axis2.engine.AxisEngine.receive(AxisEngine.java:181)
        at org.apache.axis2.transport.http.HTTPTransportUtils.processHTTPPostRequest(HTTPTransportUtils.java:172)
        at org.apache.axis2.transport.http.AxisServlet.doPost(AxisServlet.java:146)
        at javax.servlet.http.HttpServlet.service(HttpServlet.java:646)
        at javax.servlet.http.HttpServlet.service(HttpServlet.java:727)
        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:303)
        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:208)
        at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:220)
        at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:122)
        at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:501)
        at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:170)
        at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:98)
        at org.apache.catalina.valves.AccessLogValve.invoke(AccessLogValve.java:950)
        at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:116)
        at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:408)
        at org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1040)
        at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:607)
        at org.apache.tomcat.util.net.JIoEndpoint$SocketProcessor.run(JIoEndpoint.java:315)
        at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(Unknown Source)
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
        at java.lang.Thread.run(Unknown Source)
    Caused by: java.lang.ExceptionInInitializerError
        at org.apache.ws.security.message.WSSecSignature.computeSignature(WSSecSignature.java:561)
        at org.apache.ws.security.message.WSSecSignature.computeSignature(WSSecSignature.java:481)
        at org.apache.ws.security.message.WSSecSignature.build(WSSecSignature.java:386)
        at acron.EnvImz_BeratIsl.signDocument(EnvImz_BeratIsl.java:246)
        at acron.EnvImz_BeratIsl.soap_imzala(EnvImz_BeratIsl.java:178)
        at acron.EnvImz_BeratIsl.getBatchStatus(EnvImz_BeratIsl.java:288)
        ... 29 more
    Caused by: java.lang.RuntimeException: Can't find bundle for base name org.apache.ws.security.errors, locale en_US
        at org.apache.ws.security.WSSecurityException.<clinit>(WSSecurityException.java:64)
        ... 35 more
    Caused by: java.util.MissingResourceException: Can't find bundle for base name org.apache.ws.security.errors, locale en_US
        at java.util.ResourceBundle.throwMissingResourceException(Unknown Source)
        at java.util.ResourceBundle.getBundleImpl(Unknown Source)
        at java.util.ResourceBundle.getBundle(Unknown Source)
        at org.apache.ws.security.WSSecurityException.<clinit>(WSSecurityException.java:62)
        ... 35 more

","Can't find bundle for base name org.apache.ws.security.errors, locale en_US your logger says that you have issue with locale in ResourceBundle you have to use 
Locale locale = new Locale(""en_US"");

","422","<java><tomcat><classloader><pkcs#11>","-1","1","2","2015-01-04 19:54:39","","1","","322722","","2015-01-04 19:42:21","2015-01-04 16:10:51",""
"27767497","Exception initializer","I wrote a dynamic web project with Java. I deployed to tomcat.
When I make the first call there is no problem, it runs properly.
On the second call, the error below occurred.
After restarting tomcat it runs properly again.
I want every call to run properly.
How can I solve this problem.
Best regards.     
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.InputStream;
import java.io.StringReader;
import java.io.StringWriter;
import java.util.ArrayList;
import java.util.List;
import java.util.Properties;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.soap.MessageFactory;
import javax.xml.soap.SOAPConnection;
import javax.xml.soap.SOAPConnectionFactory;
import javax.xml.soap.SOAPMessage;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;

import org.apache.ws.security.WSConstants;
import org.apache.ws.security.WSEncryptionPart;
import org.apache.ws.security.components.crypto.Crypto;
import org.apache.ws.security.components.crypto.PKCS11Device;
import org.apache.ws.security.message.WSSecHeader;
import org.apache.ws.security.message.WSSecSignature;
import org.apache.ws.security.message.WSSecTimestamp;
import org.w3c.dom.Document;
import org.xml.sax.InputSource;

public class ESign {

    String pin;
    String alias;
    Crypto crypto;
    Document signedDoc;

    public String getBatchStatus(String par1, String par2, String par3) {
        String sonuc = """";

        String soapReq = ""<?xml version='1.0' encoding='UTF-8'?><soap:Envelope>""
                + ..................
                + ""</soap:Envelope>"";


        sign(soapReq, par1);    
    }

    public void sign(String XML, String par1) {
        try {

            PKCS11Device dv = new PKCS11Device();
            dv.slot = Integer.toString(slot);
            dv.drive = drive


            ClassLoader classLoader = EnvImz_BeratIsl.class.getClassLoader();
            dv.loadProperties(getCryptoProperties(), classLoader);

            crypto = dv;

            signDocument(xmlToDoc(XML));    
            }
        } catch (Exception e) {

        }
    }
    public Document xmlToDoc(String XML) {
        try {
            DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
            dbf.setNamespaceAware(true);
            DocumentBuilder db;
            db = dbf.newDocumentBuilder();
            InputSource is = new InputSource();
            is.setCharacterStream(new StringReader(XML));
            Document doc = db.parse(is);
            return doc;
        } catch (Exception e) {

        }
    }

    public void signDocument(Document doc) {
        try {
            WSSecSignature sig = new WSSecSignature();

            WSSecTimestamp time = new WSSecTimestamp();
            WSSecHeader header = new WSSecHeader();
            signedDoc = null;

            header.setMustUnderstand(true);
            sig.setSigCanonicalization(""http://www.w3.org/2001/10/xml-exc-c14n#"");
            sig.setDigestAlgo(""http://www.w3.org/2001/04/xmlenc#sha256"");
            sig.setSignatureAlgorithm(""http://www.w3.org/2001/04/xmldsig-more#rsa-sha256"");
            sig.setUserInfo(alias, pin);
            sig.setKeyIdentifierType(WSConstants.BST_DIRECT_REFERENCE);
            header.insertSecurityHeader(doc);

            doc = time.build(doc, header);                      

            List<WSEncryptionPart> parts = new ArrayList<WSEncryptionPart>();
            WSEncryptionPart timestampPart = new WSEncryptionPart(""Timestamp"",
                    WSConstants.WSU_NS, """");
            WSEncryptionPart bodyPart = new WSEncryptionPart(
                    WSConstants.ELEM_BODY, WSConstants.URI_SOAP11_ENV, """");
            parts.add(timestampPart);
            parts.add(bodyPart);
            sig.setParts(parts);         

            sig.build(doc, crypto, header);
            signedDoc = doc;

        } catch (Exception e) {

        }
    }        
}

Error:
[ERROR] javax.xml.crypto.dsig.XMLSignatureException: java.security.InvalidKeyException: No installed provider supports this key: sun.security.pkcs11.P11Key$P11PrivateKey
    [ERROR] Exception occurred while trying to invoke service method getBatchStatus
    java.lang.reflect.InvocationTargetException
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
        at java.lang.reflect.Method.invoke(Unknown Source)
        at org.apache.axis2.rpc.receivers.RPCUtil.invokeServiceClass(RPCUtil.java:212)
        at org.apache.axis2.rpc.receivers.RPCMessageReceiver.invokeBusinessLogic(RPCMessageReceiver.java:117)
        at org.apache.axis2.receivers.AbstractInOutMessageReceiver.invokeBusinessLogic(AbstractInOutMessageReceiver.java:40)
        at org.apache.axis2.receivers.AbstractMessageReceiver.receive(AbstractMessageReceiver.java:114)
        at org.apache.axis2.engine.AxisEngine.receive(AxisEngine.java:181)
        at org.apache.axis2.transport.http.HTTPTransportUtils.processHTTPPostRequest(HTTPTransportUtils.java:172)
        at org.apache.axis2.transport.http.AxisServlet.doPost(AxisServlet.java:146)
        at javax.servlet.http.HttpServlet.service(HttpServlet.java:646)
        at javax.servlet.http.HttpServlet.service(HttpServlet.java:727)
        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:303)
        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:208)
        at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:220)
        at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:122)
        at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:501)
        at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:170)
        at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:98)
        at org.apache.catalina.valves.AccessLogValve.invoke(AccessLogValve.java:950)
        at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:116)
        at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:408)
        at org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1040)
        at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:607)
        at org.apache.tomcat.util.net.JIoEndpoint$SocketProcessor.run(JIoEndpoint.java:315)
        at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(Unknown Source)
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
        at java.lang.Thread.run(Unknown Source)
    Caused by: java.lang.ExceptionInInitializerError
        at org.apache.ws.security.message.WSSecSignature.computeSignature(WSSecSignature.java:561)
        at org.apache.ws.security.message.WSSecSignature.computeSignature(WSSecSignature.java:481)
        at org.apache.ws.security.message.WSSecSignature.build(WSSecSignature.java:386)
        at acron.EnvImz_BeratIsl.signDocument(EnvImz_BeratIsl.java:246)
        at acron.EnvImz_BeratIsl.soap_imzala(EnvImz_BeratIsl.java:178)
        at acron.EnvImz_BeratIsl.getBatchStatus(EnvImz_BeratIsl.java:288)
        ... 29 more
    Caused by: java.lang.RuntimeException: Can't find bundle for base name org.apache.ws.security.errors, locale en_US
        at org.apache.ws.security.WSSecurityException.<clinit>(WSSecurityException.java:64)
        ... 35 more
    Caused by: java.util.MissingResourceException: Can't find bundle for base name org.apache.ws.security.errors, locale en_US
        at java.util.ResourceBundle.throwMissingResourceException(Unknown Source)
        at java.util.ResourceBundle.getBundleImpl(Unknown Source)
        at java.util.ResourceBundle.getBundle(Unknown Source)
        at org.apache.ws.security.WSSecurityException.<clinit>(WSSecurityException.java:62)
        ... 35 more

","This one seems to address your problem, comes from the Oracle Support forum.
","422","<java><tomcat><classloader><pkcs#11>","-1","0","2","2015-01-04 19:54:39","","1","","322722","","2015-01-04 19:42:21","2015-01-04 16:10:51",""
"8073753","Python Web Proxy that Supports PKCS#11","Does anyone know of a web proxy written in Python that will support SSL connections and will also support PKCS#11 tokens? I am in need of a proxy that will send SSL web requests using a PKCS#11 smartcard.
I have been looking for projects that are using something like Twisted but have not seen any.
","If Twisted has a proxy, then you can use it with M2Crypto+engine_pkcs11. I had the code, I can see if it is still existing somewhere.
","419","<python><proxy><smartcard><pkcs#11>","1","0","1","2011-11-10 11:55:46","","0","","","","","2011-11-10 00:50:38",""
"43114733","java complains on loading pkcs dll from softhsm","I am trying to use softhsm for my project using java 1.8-64bit.
I am trying with m first sample java class given  here Connecting to SoftHSM java code
I was able to install softhsm softhsm2-windows installer.
And Also able to create token usng softhsm-util.exe tool.
but when I try to run the java code I am getting 
            Exception in thread ""main"" java.security.ProviderException: Initialization failed
                at sun.security.pkcs11.SunPKCS11.<init>(SunPKCS11.java:376)
                at sun.security.pkcs11.SunPKCS11.<init>(SunPKCS11.java:103)
                at SoftHSM.main(SoftHSM.java:44)
            Caused by: java.io.IOException: The specified module could not be found.
            Z:/SOFTHSM_INSTALL/lib/softhsm2-x64.dll
                at sun.security.pkcs11.wrapper.PKCS11.connect(Native Method)
                at sun.security.pkcs11.wrapper.PKCS11.<init>(PKCS11.java:138)
                at sun.security.pkcs11.wrapper.PKCS11.getInstance(PKCS11.java:151)
                at sun.security.pkcs11.SunPKCS11.<init>(SunPKCS11.java:313)
                ... 2 more

Even though the file is available in right location as mentioned in exception.
Please help to solve this issue.
Updated System Visual C++ installed:
Visual C++ in My PC Win 10
","TLDR : If you want to use softhsm2-x64.dll from your JAVA application then you need to install 64-bit version of Visual C++ Redistributable for Visual Studio 2015.

Detailed answer : You did install SoftHSM using SoftHSM2 installer for MS Windows.
All executables and libraries present in that package (including softhsm2-util.exe) are 32-bit expect for softhsm2-x64.dll which is 64-bit.
All executables and libraries present in that package (including softhsm2-util.exe) depend on 32-bit version of Visual C++ Redistributable for Visual Studio 2015 expect for softhsm2-x64.dll which depends on 64-bit version of Visual C++ Redistributable for Visual Studio 2015.
README.md on project website says:

These packages include both 32-bit and 64-bit versions of PKCS#11
  library and require both 32-bit and 64-bit version of Visual C++
  Redistributable for Visual Studio 2015 to be installed on the target
  system.

README.txt displayed after the installation says:

This package includes both 32-bit and 64-bit build of SoftHSM 2.2.0
  statically  linked to OpenSSL 1.1.0d. It requires both 32-bit and
  64-bit version of Visual  C++ Redistributable for Visual Studio 2015
  to be installed on the target  system. These can be downloaded from:
http://www.microsoft.com/en-us/download/details.aspx?id=48145

My advice: install both 32-bit and 64-bit version of Visual C++ Redistributable for Visual Studio 2015.
","416","<java><windows><pkcs#11><softhsm>","1","0","1","2017-04-07 07:00:19","43265583","6","0","-1","","2017-05-23 12:32:19","2017-03-30 10:08:54",""
"47377824","Java IAIK Pkcs11 Wrapper generated key is not persisted","Could anybody help with following problem?
I'm using:

SoftHSM for Windows
IAIK Pkcs11 Java Wrapper (v.1.4) to connect to SoftHSM

My Java application generates AES secret key in following steps:

PKCS11 Session is opened, login performed.
AES key is successfully generated.
Searching for this key - and it is found.
Closing session.

But if I open new session, I cannot find key anymore - it disappears when I close the session, and is not persisted to HSM.
Do I make something wrong?
Code of application is:
import java.io.IOException;

import iaik.pkcs.pkcs11.Mechanism;
import iaik.pkcs.pkcs11.Module;
import iaik.pkcs.pkcs11.Session;
import iaik.pkcs.pkcs11.Slot;
import iaik.pkcs.pkcs11.Token;
import iaik.pkcs.pkcs11.TokenException;
import iaik.pkcs.pkcs11.objects.AESSecretKey;
import iaik.pkcs.pkcs11.objects.Object;
import iaik.pkcs.pkcs11.wrapper.PKCS11Constants;

public class GenerateKeyAes {

    public static void main(String[] args) throws IOException, TokenException {

        // Init module and select slot and token
        Module module = Module.getInstance(""C:\\prog\\SoftHSM2\\lib\\softhsm2.dll"");
        module.initialize(null);
        Slot slot = module.getSlotList(Module.SlotRequirement.TOKEN_PRESENT)[0];
        Token token = slot.getToken();

        // Create session and login
        Session session = token.openSession(Token.SessionType.SERIAL_SESSION, Token.SessionReadWriteBehavior.RW_SESSION,
                null, null);
        session.login(Session.UserType.USER, ""1111"".toCharArray());

        // Prepare key template
        Mechanism keyGenerationMechanism = Mechanism.get(PKCS11Constants.CKM_AES_KEY_GEN);

        AESSecretKey secretKeyTemplate = new AESSecretKey();
        secretKeyTemplate.getValueLen().setLongValue(new Long(32));
        secretKeyTemplate.getLabel().setCharArrayValue(""AES secret 1"".toCharArray());
        secretKeyTemplate.getId().setByteArrayValue(new byte[] { 105 });
        secretKeyTemplate.getSign().setBooleanValue(Boolean.TRUE);
        secretKeyTemplate.getVerify().setBooleanValue(Boolean.TRUE);
        secretKeyTemplate.getToken().setBooleanValue(Boolean.FALSE);

        // Create key
        AESSecretKey secretKey = (AESSecretKey) session.generateKey(keyGenerationMechanism, secretKeyTemplate);

        System.out.println(""Key generated:"");
        System.out.println(secretKey.toString());
        System.out.println();

        // Find all objects to ensure that generated key was really created
        AESSecretKey template = new AESSecretKey();
        session.findObjectsInit(template);
        Object[] obs = session.findObjects(10);
        System.out.println(""Found objects: "" + obs.length);
        System.out.println();

        // Key is found and displayed here!!!
        for (Object ob : obs) {
            System.out.println(""Found object:"");
            System.out.println(ob);
            System.out.println();
        }

        // Close session
        session.findObjectsFinal();
        session.closeSession();

        // If I open new session here and perform same search - no key is found!

        module.finalize(null);
    }
}

","PKCS#11 objects can be classified by their lifetime and visibility as:

Token objects (those with CKA_TOKEN attribute set to true).
They are visible to all applications connected to the token that have sufficient permission, and remain on the token even after the sessions (connections between an application and the token) are closed and the token is removed from its slot.
Session objects (those with CKA_TOKEN attribute set to false)
They are more temporary - whenever a session is closed by any means, all session objects created by that session are automatically destroyed. In addition, session objects are only visible to the application which created them.

I am not familiar with IAIK wrapper but it seems you are creating your key as a session object.
I would try changing:
secretKeyTemplate.getToken().setBooleanValue(Boolean.FALSE);

to 
secretKeyTemplate.getToken().setBooleanValue(Boolean.TRUE);

See PKCS#11 v2.20 specification for more details.
","414","<java><pkcs#11>","1","3","1","2017-11-19 15:00:33","47378285","0","","","","","2017-11-19 14:13:59",""
"2176235","Automatic generation of a website ""token"" for SSL authenticate on user's first visit on an Apache2 server","TLDR: I'm looking for a software based two-factor authentication system.
Summary: I am trying to find a solution equivalent to a SSL client side certificate, except that said certificate would optimally be generated at the first connection of the browser to the server.
Long version:
I want to automatically generate a security token using a PKCS#11 style authetication system so that when a user uses a certain login-code to a website, that computer can always connect to the user's page (without requiring a username).
I also cannot require PKCS#12 style certificates which require 5-10 steps to install in a client's browser, especially as that certificate installation may be locked down. The goal of this request is to explore the ability for a browser to provide authentic two-factor authentication in a seamless fashion. At present, it seems only sun is talking about PKCS#11 and browser support for client side certs is difficult to explain quickly.
As a caveat, talking about a browser-internal PKCS#11 may be incorrect, or may be a function of PKCS#15. I suspect I'm not asking the right question here. Any suggestions would be appreciated.
","You probably mean the KEYGEN tag that generates a key pair on via browser and places the end result in some software store, as you want to generate software certificates on the fly.
Keygen has several problems and shortcomings, like you can't enforce a PIN/password policy and thus have the two-factor properties, and is in fact not a real standard and does not work everywhere.
PKCS#15 is totally out of topic here as it deals with a filesystem format on the smart card that is hidden way below the browser/https/crytpoapi layer.
PKCS#11 only matters with Firefox as IE and Safari both use native platform certificate stores and APIs (CryptoAPI and CDSA/Keychain respectively) internally.
","413","<browser><ssl><apache2><token><pkcs#11>","1","1","1","2010-02-03 04:38:30","","0","","","","","2010-02-01 11:16:50",""
"48989334","What will be the return value of C_CreateObject(in PKCS#11) if token not supported?","I am working on a library which follows PKCS#11 standard.
https://www.cryptsoft.com/pkcs11doc/v220/
The library can generate RSA Keypair in token by the function C_GenerateKeyPair and returns appropriate object handles with return value CKR_OK.
The token(applet) not supports load of private/public key except generate key pair. What will be the appropriate return value of create RSA private/public key using C_CreateObject? 
Now I am returning CKR_GENERAL_ERROR, is it okay?
Allowed return values are 

CKR_ARGUMENTS_BAD, CKR_ATTRIBUTE_READ_ONLY,
  CKR_ATTRIBUTE_TYPE_INVALID, CKR_ATTRIBUTE_VALUE_INVALID,
  CKR_CRYPTOKI_NOT_INITIALIZED, CKR_DEVICE_ERROR, CKR_DEVICE_MEMORY,
  CKR_DEVICE_REMOVED, CKR_DOMAIN_PARAMS_INVALID, CKR_FUNCTION_FAILED,
  CKR_GENERAL_ERROR, CKR_HOST_MEMORY, CKR_OK, CKR_PIN_EXPIRED,
  CKR_SESSION_CLOSED, CKR_SESSION_HANDLE_INVALID, CKR_SESSION_READ_ONLY,
  CKR_TEMPLATE_INCOMPLETE, CKR_TEMPLATE_INCONSISTENT,
  CKR_TOKEN_WRITE_PROTECTED, CKR_USER_NOT_LOGGED_IN.

Thanks for your help
Update
I have two types of applet, one supports load of RSA private/public key to token and another not supports. It can only possible to identify if the token supports load of key is the response of transmitted APDU. So I can't take decision only to check the class attribute of C_CreateObject.
","If your library does not support C_CreateObject at all then the best choice IMO is CKR_FUNCTION_NOT_SUPPORTED.
Chapter 11 in PKCS#11 v2.20 states:

A Cryptoki library need not support every function in the Cryptoki API. However, even an unsupported function must have a ""stub"" in the library which simply returns the value CKR_FUNCTION_NOT_SUPPORTED.

If your library does support C_CreateObject for creation of other object types (e.g. certificates, data objects etc.) then the best choice IMO is CKR_ATTRIBUTE_VALUE_INVALID.
Chapter 10.1.1 in PKCS#11 v2.20 states:

If the supplied template specifies an invalid value for a valid attribute, then the attempt should fail with the error code CKR_ATTRIBUTE_VALUE_INVALID.

UPDATE
Now that you have shared more details about your library in the comments I can add more detailed explanation:
It seems I can call your implementation of C_CreateObject with template containing CKA_CLASS=CKO_CERTIFICATE and it will  create certificate object on this particular token and return CKR_OK. If I call it with template containing CKA_CLASS=CKO_PRIVATE_KEY then your code will decide to return an error right after the evaluation of the supplied value of this attribute. IMO there is no doubt that chapter 10.1.1 of PKCS#11 v2.20 recommends you to return CKR_ATTRIBUTE_VALUE_INVALID in this case.
However if are not willing to follow behavior recommended by the specification and there is no predefined error code you like, you can introduce your own vendor defined code (see my older answer for more details):
#define CKR_TOKEN_OPERATION_NOT_SUPPORTED (CKR_VENDOR_DEFINED|0x0000001)

IMO confusion level for inexperienced developer will be the same regardless of error code you return. In the end he/she will need to consult your documentation or logs produced by your library to find out the real reason why he/she received the error.
","408","<pkcs#11>","1","0","1","2018-03-01 18:22:39","","0","0","4790157","","2018-03-01 18:22:39","2018-02-26 13:10:19",""
"16601749","Mapping PolarSSL x509_cert structure to PKCS#11 X.509 object","I want to write a C++ program to parse a X.509 compatible certificate file with PolarSSL, extract all of it's attributes & map them to a PKCS#11 object template for storing on a cryptographic token. I also need to be able to fetch stored object attributes & re-create original file using them, but I exactly don't know how to map between PolarSSL x509_cert struct fields & PKCS#11 X.509 object attributes.
I know part of this mapping (i.e. crt.valid_from maps to CKA_START_DATE or crt.valid_to maps to CKA_END_DATE) & need these attributes for creating my certificate object on the token (all of these values must be set according to PKCS#11 specs):
CKA_CERTIFICATE_CATEGORY
CKA_CHECK_VALUE
CKA_SUBJECT
CKA_ID
CKA_ISSUER
CKA_SERIAL_NUMBER
CKA_VALUE
CKA_URL
CKA_HASH_OF_SUBJECT_PUBLIC_KEY
CKA_HASH_OF_ISSUER_PUBLIC_KEY
CKA_JAVA_MIDP_SECURITY_DOMAIN

Can anybody help me please?
","You basically need to understand two specs: X509 (RFC 5280) and PKCS#11. A certificate is a cryptographically ""whole"" object, whereas the many optional ""helper attributes"" in PKCS#11 have no cryptographic value. For example, I believe that CKA_JAVA_MIDP_SECURITY_DOMAIN is something that makes close to zero point in real life in 2013. If you take a certificate as a blob, you only need to care about the raw certificate data (AKA CKA_VALUE) and the subject of the certificate (CKA_SUBJECT). Unless you explain why you want ""all the attributes"" my guess is you want to do something you should not actually do.
","407","<c++><mapping><x509certificate><pkcs#11><polarssl>","0","0","1","2013-05-20 10:21:36","","0","","","","","2013-05-17 05:02:46",""
"40615587","Add a pkcs#11 certificate into a keystore object with setCertificateEntry(cert) fails","Note
I don't want to import a certificate into a keystore with keytool. What I want, is to add a java.security.cert.Certificate object into a java.security.KeyStore object.
Scenario
My apps works with FireFox user certificates and those in a smartcard, with NSS + JSS. The APP first loads all user certificates via NSS and stores them into a KeyStore object, and stores their SN, DN, etc. Then, with org.mozilla.jss.CryptoManager I load all external modules, then every token of the modules, at last, with this line, I get a CryptoStore with all certificates of the token:
CryptoStore store = null;
store = token.getCryptoStore();
org.mozilla.jss.crypto.X509Certificate[] certs = store.getCertificates();

Then, I read these certificates and store their SN, DN, etc., along with those data of user certificates, for UI part to show.
When doing an authentication, the user is prompted a dialog with all certificates to choose. This window has a table with rows containing alias of each certificate, users' + card. Then I pick the certificate from the keyStore with the selected alias.
Error
Here comes the problem: the keyStore only has entries of user certificates from FireFox, not those in the card. If I pick one from the card, and do this:
certificate = keyStore.getCertificate(alias);

It returns null. It makes sense because those from the card are stored in CryptoStore. Now, if I do this:
keyStore.setCertificateEntry(alias, cert); //cert is a certificate from card

no exception occurs. Then, when I do this again:
certificate = keyStore.getCertificate(alias);

A NullPointerException from sun.security.pkcs11.p11keyStore.P11KeyStore.getID() happens.
Question

Adding a certificate from a smartcard to a java.security.KeyStore is possible with my approach here?
Why the exception?

","","405","<java><keystore><smartcard><pkcs#11>","3","","0","2016-11-15 19:56:32","","1","","243373","","2016-11-15 19:56:32","2016-11-15 17:01:13",""
"35933258","Strange things happens when creating object C_CreateObject in JNA [PKCS11]","I am making a JNA PKCS11 wrapper, and a strange thing happens when creating objects in the token (tested with CKO_DATA and CKO_CERTIFICATE). The result is CKR_TEMPLATE_INCONSISTENT in most of the time, and the object can be created after several tries. Maybe you know what happens.
The JNA interface and structure,
NativeLong C_CreateObject(final NativeLong hSession, final CK_ATTRIBUTE[] pTemplate, final NativeLong ulCount, final IntByReference phObject);

public class CK_ATTRIBUTE extends Structure {
    public NativeLong type;
    public Pointer pValue;
    public NativeLong ulValueLen;

    public static class ByReference extends CK_ATTRIBUTE implements Structure.ByReference {
    }

    public static class ByValue extends CK_ATTRIBUTE implements Structure.ByValue {
    }

    public CK_ATTRIBUTE() {
        setAlignType(ALIGN_NONE);
    }

    @Override
    protected List<String> getFieldOrder() {
        return Arrays.asList(new String[] { ""type"", ""pValue"", ""ulValueLen"" });
    }
}

The wrapper,
public class Attribute {
    private final CKA cka;
    private final byte[] data;

    public Attribute(final CKA cka, final byte[] data) {
        this.cka = cka;
        this.data = data.clone();
    }

    public CKA getCKA() {
        return cka;
    }

    public byte[] getData() {
        return data;
    }
}

public static CK_ATTRIBUTE[] createNativeAttributes(final List<Attribute> attributes) {
    final CK_ATTRIBUTE[] nativeAttributes = (CK_ATTRIBUTE[]) new CK_ATTRIBUTE().toArray(attributes.size());
    for (int i = 0; i < attributes.size(); i++) {
        final Attribute attribute = attributes.get(i);
        nativeAttributes[i].type = attribute.getCKA().getValue();
        final int len = attribute.getData().length;
        final Pointer pointer = new Memory(len);
        nativeAttributes[i].pValue = pointer;
        pointer.write(0, attribute.getData(), 0, len);
        nativeAttributes[i].ulValueLen = new NativeLong(len);
    }
    return nativeAttributes;
}

public NativeLong createObject(final NativeLong hSession, final CK_ATRIBUTE[] pTemplate) throws CryptokiException {
    if (hSession == null) {
        throw new IllegalArgumentException(""hSession cannot be null"");
    }
    if (pTemplate == null || pTemplate.length == 0) {
       throw new IllegalArgumentException(""pTemplate cannot be empty"");
    }
    final IntByReference phObject = new IntByReference(0);
    generateException(cryptoki.C_CreateObject(hSession, pTemplate, new NativeLong(pTemplate.length), phObject));
    return new NativeLong(phObject.getValue());
}

The test snippet,
// create CKO_DATA
final List<Attribute> attributes = new ArrayList<>();
attributes.add(new Attribute(CKA.CLASS, new byte[] { CKO.DATA.getValue().byteValue() }));
attributes.add(new Attribute(CKA.TOKEN, new byte[] { Cryptoki.CK_TRUE }));
attributes.add(new Attribute(CKA.APPLICATION, ""My Application"".getBytes()));
attributes.add(new Attribute(CKA.VALUE, new byte[] { 0x01, 0x02, 0x03, 0x04 }));
attributes.add(new Attribute(CKA.LABEL, ""Test Label"".getBytes()));
final CK_ATTRIBUTE[] pTemplate = CryptokiWrapper.createNativeAttributes(attributes);
final NativeLong hObject = wrapper.createObject(hSessionRW, pTemplate);

// create CKO_CERTIFICATE
final CertificateFactory certificateFactory = CertificateFactory.getInstance(""X.509"");
try (final InputStream inputStream = new FileInputStream(""src/main/resources/test.cer"")) {
    final X509Certificate x509Certificate = (X509Certificate) certificateFactory.generateCertificate(inputStream);
    final List<Attribute> attributes = new ArrayList<>();
    attributes.add(new Attribute(CKA.CLASS, new byte[] { CKO.CERTIFICATE.getValue().byteValue() }));
    attributes.add(new Attribute(CKA.CERTIFICATE_TYPE, new byte[] { CKC.X_509.getValue().byteValue() }));
    attributes.add(new Attribute(CKA.TOKEN, new byte[] { Cryptoki.CK_TRUE }));
    attributes.add(new Attribute(CKA.LABEL, ""Test Cert"".getBytes()));
    attributes.add(new Attribute(CKA.SUBJECT, x509Certificate.getSubjectDN().getName().getBytes()));
    attributes.add(new Attribute(CKA.ID, new byte[] { 0x01, 0x02 }));
            attributes.add(new Attribute(CKA.VALUE, x509Certificate.getEncoded()));
    final CK_ATTRIBUTE[] pTemplate = CryptokiWrapper.createNativeAttributes(attributes);
    final NativeLong hObject = wrapper.createObject(hSessionRW, pTemplate);
}

The probability of success is much higher if run the application in debug mode and set some breakpoints.
Note, all the codes runs under a single thread.
","Finally I find out the reason of this issue,
 attributes.add(new Attribute(CKA.CLASS, new byte[] {  CKO.DATA.getValue().byteValue() }));

this line is wrong, the value of CKO_DATA is 0x00000000, which means it is a 32bit integer, so the length of it is 4, and the value is an array of byte; and after some test, the value is a little endian sequence.
The reason why sometimes the execution of method is succeeded is, sometimes the sequence is 00 00 00 00 in memory and fit the requires of the method, especially in the debug mode.
","402","<java><swing><jna><pkcs#11>","0","1","1","2016-03-28 02:12:11","36254938","5","1","418556","","2016-03-11 06:08:46","2016-03-11 05:54:46",""
"21461049","XML signature with XMLSignature","We have a web application that needs to sign XML with a token. We installed the drivers and access the certificate from ""Windows-MY"". But every time we call signature.sign(dsc); a window appear asking a password. It's possible to use the method sign and pass the PIN as param to avoid that window?
The method used to sign:
XMLSignature signature = sig.newXMLSignature(si, ki); 
signature.sign(dsc);


","If you access a secure token through SUNMSCAPI with ""Windows-MY"" you are giving the authentication to the specific CSP vendor driver so you can not provide a PIN as method parameter. If you want to provide the PIN programatically you can access secure token directly with PKCS11Provider:
// First configure the Sun PKCS#11 provider. It requires a stream (or file)
// containing the configuration parameters - ""name"" and ""library"".
String smartCardDriverPath = ""...lib\libpkcs11.so"";
String pkcs11ConfigSettings = ""name = SmartCardTest\n"" + ""library = "" + smartCardDriverPath;
byte[] pkcs11ConfigBytes = pkcs11ConfigSettings.getBytes();
final ByteArrayInputStream confStream = new ByteArrayInputStream(pkcs11ConfigBytes);

// instantiate provider
SunPKCS11 pkcs11 = pkcs11 = new SunPKCS11(confStream);
Security.addProvider(pkcs11);   

// generate the keystore and provide the password
char[] pwd = ""your_pass"".toCharArray(); 
KeyStore ks = KeyStore.getInstance(""PKCS11"",pkcs11);
ks.load(null, pwd); 

Then you can extract the Key from the keystore avoiding the password window input an use to achieve your signature.
For more info on PKCS11 in java you can take a look on: PKCS11 JAVA GUIDE.
Hope this helps,
","401","<java><xml><xml-signature><pkcs#11>","0","0","1","2014-08-22 21:06:24","","0","0","1218618","","2014-08-22 21:06:24","2014-01-30 15:48:52",""
"41149962","How do I define a pkcs11 attribute for a RSA private key that can store metadata like IV or date of generation used to the key?","According to the latest PKCS#11 spec the typical attribute structure of a RSA private key is the following:
CK_ATTRIBUTE template[] = {
{CKA_CLASS, &class, sizeof(class)},

{CKA_KEY_TYPE, &keyType, sizeof(keyType)},

{CKA_TOKEN, &true, 1},

{CKA_LABEL, label, sizeof(label)},


{CKA_SUBJECT, subject, sizeof(subject)},

{CKA_ID, id, sizeof(id)},

{CKA_SENSITIVE, &true, 1},

{CKA_DECRYPT, &true, 1},

{CKA_SIGN, &true, 1},

{CKA_MODULUS, modulus, sizeof(modulus)},

{CKA_PUBLIC_EXPONENT, publicExponent, sizeof(publicExponent)},

{CKA_PRIVATE_EXPONENT, privateExponent, sizeof(privateExponent)},

{CKA_PRIME_1, prime1, sizeof(prime1)},

{CKA_PRIME_2, prime2, sizeof(prime2)},

{CKA_EXPONENT_1, exponent1, sizeof(exponent1)},

{CKA_EXPONENT_2, exponent2, sizeof(exponent2)},

{CKA_COEFFICIENT, coefficient, sizeof(coefficient)}

};

However, there is another attribute CK_VALUE that can only be used for creating pkcs 'data objects' and NOT 'key objects'. When I use this field CK_VALUE to create key objects PKCS throws me an invalid attribute error. 
I would like to use a similar field in the which contains a string formatted value that can hold metadata information related to the key (like IV used to wrap the RSA key, date of generation of the key, etc). Is there a way to store these information in the existing pkcs11 template without tinkering with the attribute data structure in the implementation? I am using OpenDNSSec community's SoftHSM n2.0 package for the pkcs implementation.
Any suggestions would be appreciated.
","","394","<c++><pkcs#11><softhsm>","0","","0","2016-12-14 19:36:04","","2","","2430597","","2016-12-14 19:36:04","2016-12-14 18:48:21",""
"33007280","how to use window.crypto.signText?","i want to sign in Mozilla Firefox using a smart card. is there any java script code, running in Mozilla Firefox, where we can use window.crypto.signText to sign some text. 
should we use addon or extension to do this task. i heard that crypto api's and window.crypto.signtext is disabled from Firefox version 33. Is there any alternative for signing done in Mozilla Firefox?
","","392","<javascript><firefox><pkcs#11>","2","","0","2015-11-09 13:40:05","","0","","2514250","","2015-11-09 13:40:05","2015-10-08 05:25:52",""
"10829761","Generating TLS master key with smartcard using PKCS11","I am supposed to generate tls specific keys with smartcard.
I examined for example P11TlsMasterSecretGenerator class but it requires CKM_TLS_MASTER_KEY_DERIVE_DH mechanism that smartcard to have for master key generation.
But my smartcard does not support this mechanism. 
My question is if it possible to use other mechanisms such as CKM_ECDH1_DERIVE for this purpose.
Actually my concern is what CKM_TLS_MASTER_KEY_DERIVE_DH mechanism provides internally more than CKM_ECDH1_DERIVE.
If someone can link me a document or something, I really appreciate that.
Thanks.
","RFC5246 defines masterkey generation like this:
master_secret = PRF(pre_master_secret,""master secret"",ClientHello.random + ServerHello.random)[0..47];
where:
PRF(secret, label, seed) = P_hash(secret, label+seed);
P_hash(secret, seed) = HMAC_hash(secret, A(1)+seed) + HMAC_hash(secret, A(2)+seed) + HMAC_hash(secret, A(3)+seed) + ...
A(0) = seed
A(i) = HMAC_hash(secret, A(i-1));
So one can implement this algorithm by using HMAC on smartcard. But it does not solve my problem where I want master_secret to be generated in card and not extractable out of the smardcard. HMAC functions always outputs a byte array as a result as expected.
","389","<ssl><smartcard><pkcs#11>","2","0","1","2012-06-22 07:24:47","","0","","","","","2012-05-31 08:15:29",""
"35727191","How to use CKO_VENDOR_DEFINED in pkcs#11","Has anyone used CKO_VENDOR_DEFINED to create a key or a data object?
There is hardly any documentation (including the mother load from Oasis) about how to do it, or which attributes are applicable/not-applicable.
Unfortunately, but hopefully understandably, I can not describe exactly what I am trying to do.
But the gist of it is that I need to be able to have a bit more attribute<=>mechanism flexibility with our kind of keys and the ability to modify a key on the token.
I'd really appreciate any pointers or help.
","You can take a look at OpenPGP extension to PKCS #11 where CKC_OPENPGP is defined as:
#define CKC_OPENPGP  (CKC_VENDOR_DEFINED|0x00504750)

I've seen also commercial implementations introducing CK*_VENDOR_DEFINED extensions this way.
","388","<pkcs#11>","1","0","2","2017-04-03 19:51:04","","0","1","3342339","","2016-03-02 19:00:28","2016-03-01 15:43:30",""
"35727191","How to use CKO_VENDOR_DEFINED in pkcs#11","Has anyone used CKO_VENDOR_DEFINED to create a key or a data object?
There is hardly any documentation (including the mother load from Oasis) about how to do it, or which attributes are applicable/not-applicable.
Unfortunately, but hopefully understandably, I can not describe exactly what I am trying to do.
But the gist of it is that I need to be able to have a bit more attribute<=>mechanism flexibility with our kind of keys and the ability to modify a key on the token.
I'd really appreciate any pointers or help.
","(AFAIK) vendor defined object types must be implemented inside the HSM unit firmware (in theory, the host-side cryptoki library could introduce some additional ""virtual"" object types, but this probably would not make any sense as the overall security model would stay the same -- because the host-side cryptoki code runs in an untrusted execution environment).
If you need more control than provided by the vanilla PKCS#11 you have some choices:

Use existing vendor extensions -- some vendors add their own extensions designed to solve common use-cases. Read your documentation or contact your vendor directly.
Implement a custom firmware -- some products allow the end-user to run a custom code inside the HSM device. You can implement your model this way.

SafeNet ProtectServer:

SafeNet ProtectServer HSMs offer a unique level of flexibility for
  application developers to create their own firmware and execute it
  within the secure confines of the HSM. Known as functionality modules,
  the toolkits provide a comprehensive facility to develop and deploy
  custom firmware.

Thales nShield:

Most nShield HSMs also support the unique ability to host critical
  applications within the hardened security boundary, so you can
  establish tamper-resistant business processes in addition to
  protecting cryptographic operations.

Utimaco CryptoServer:

The CryptoServer Software Development Kit (SDK) is the professional
  development environment for all Utimaco Hardware Security Modules. It
  enables integrators and end-users to create specific applications,
  e.g. proprietary algorithms, custom key derivation procedures or
  complex protocols that run in the tamper-proof environment of the
  CryptoServer Hardware Security Module. As the SDK provides full access
  to the Utimaco base firmware, custom firmware modules can be developed
  in a very short time frame.


Use some other technology -- do not use HSMs at all and leverage some other secure device. Specifically smartcards might be a viable alternative as some of them can be programmed (at least Java Card or MULTOS ones). On the other hand the performance and range of supported algorithms is quite limited here (depends on your use-case).

","388","<pkcs#11>","1","0","2","2017-04-03 19:51:04","","0","1","3342339","","2016-03-02 19:00:28","2016-03-01 15:43:30",""
"53356801","PDF Signing: PKCS11_get_private_key returned NULL","In Ubuntu 18.04.1, openssl engine pkcs11 -t -c properly shows
(pkcs11) pkcs11 engine
 [RSA, rsaEncryption, id-ecPublicKey]
     [ available ]

The purpose is to certify PDFs using the Safenet Token (Gemalto 5110) loaded with an AATL chained cert in slot 0:
$ pkcs11-tool --module /usr/lib/libeTPkcs11.so --login -O
Using slot 0 with a present token (0x0)
Logging in to ""pdfsigner"".
Please enter User PIN:
Private Key Object; RSA
  label:
  ID:         hexstringblah
  Usage:      decrypt, sign, unwrap
Certificate Object; type = X.509 cert
  label:      te-123456-123456aa
  ID:         hexstringblah
Certificate Object; type = X.509 cert
  label:
Certificate Object; type = X.509 cert
  label:
Certificate Object; type = X.509 cert
  label:
Certificate Object; type = X.509 cert
  label:

$ pkcs11-tool --module /usr/lib/libeTPkcs11.so --list-slots
Available slots:
Slot 0 (0x0): AKS ifdh [eToken 5110 SC] 00 00
  token label        : pdfsigner
  token manufacturer : SafeNet, Inc.
  token model        : eToken
  token flags        : login required, rng, token initialized, PIN initialized, other flags=0x200
  hardware version   : 16.0
  firmware version   : 16.1
  serial num         : 123456
  pin min/max        : 6/20

When I try to sign with openssl pkeyutl -sign -keyform ENGINE -engine pkcs11 -inkey ""pkcs11:object=te-123456-123456aa;type=cert;pin-value=password"" -in certifyme.pdf -out certifyme.pdf I am getting
engine ""pkcs11"" set.
No private keys found.
PKCS11_get_private_key returned NULL
cannot load Private Key from engine
139808273490368:error:80067065:pkcs11 engine:ctx_load_privkey:object not found:eng_back.c:876:
139808273490368:error:26096080:engine routines:ENGINE_load_private_key:failed loading private key:../crypto/engine/eng_pkey.c:78:
unable to load Private Key
pkeyutl: Error initializing context

There is a private key in the token:
$ pkcs11-dump dump /usr/lib/libeTPkcs11.so 0 password
pkcs11-dump 0.3.4 - PKI Cryptoki token dump
Written by Alon Bar-Lev

Copyright (C) 2005-2006 Alon Bar-Lev.
This is free software; see the source for copying conditions.
There is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

Token Information:
                         label: pdfsigner
                manufacturerID: SafeNet, Inc.
                         model: eToken
                  serialNumber: 123456
                         flags: CKF_RNG,CKF_LOGIN_REQUIRED,CKF_USER_PIN_INITIALIZED,CKF_DUAL_CRYPTO_OPERATIONS,CKF_TOKEN_INITIALIZED
             ulMaxSessionCount: 0
             ulMaxSessionCount: 0
                   ulMaxPinLen: 20
                   ulMinPinLen: 6
           ulTotalPublicMemory: 81920
            ulFreePublicMemory: 32767
          ulTotalPrivateMemory: 81920
           ulFreePrivateMemory: 32767
               hardwareVersion: 016.000
               firmwareVersion: 016.001
                       utcTime: \x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00 Object 0
                   Object size: 65
                     CKA_CLASS: CKO_PRIVATE_KEY
                     CKA_TOKEN: TRUE
                   CKA_PRIVATE: TRUE
                     CKA_LABEL:
                  CKA_KEY_TYPE: CKK_RSA
                   CKA_SUBJECT: ERROR

                        CKA_ID: 7c 14 f6 86 13 6b 31 9e

                 CKA_SENSITIVE: TRUE
                   CKA_DECRYPT: TRUE
                    CKA_UNWRAP: TRUE
                      CKA_SIGN: TRUE
              CKA_SIGN_RECOVER: TRUE
                    CKA_DERIVE: FALSE
                CKA_START_DATE:
                  CKA_END_DATE:
                   CKA_MODULUS:

$ p11tool --provider=/usr/lib/libeTPkcs11.so --list-all
    Object 0:
            URL: pkcs11:model=eToken;manufacturer=MFG.;serial=123456;token=pdfsigner;id=00escapedhex;object=te-123456-123456aa;type=cert
            Type: X.509 Certificate
            Label: te-123456-123456aa
            ID: 00escapedhex

    Object 1:
            URL: pkcs11:model=eToken;manufacturer=MFG.;serial=123456;token=pdfsigner;type=cert
            Type: X.509 Certificate
            Label:
            Flags: CKA_CERTIFICATE_CATEGORY=CA;
            ID:

    Object 2:
            URL: pkcs11:model=eToken;manufacturer=MFG.;serial=123456;token=pdfsigner;type=cert
            Type: X.509 Certificate
            Label:
            Flags: CKA_CERTIFICATE_CATEGORY=CA;
            ID:

    Object 3:
            URL: pkcs11:model=eToken;manufacturer=MFG.;serial=123456;token=pdfsigner;type=cert
            Type: X.509 Certificate
            Label:
            Flags: CKA_CERTIFICATE_CATEGORY=CA;
            ID:

    Object 4:
            URL: pkcs11:model=eToken;manufacturer=MFG.;serial=123456;token=pdfsigner;type=cert
            Type: X.509 Certificate
            Label:
            Flags: CKA_CERTIFICATE_CATEGORY=CA;
            ID:

AFAIK the cmd should not request the PK, but only to have the token sign the request. Do I have an incorrect parameter in pkeyutl?
I was able to use the same token to certify and sign a PDF in Windows. How do I sign the PDF via PKCS#11 and openssl?
","Looks like you have one RSA private key object and multiple certificate objects in your PKCS11 object store.
But you are trying to use your Certificate to sign your ""certifyme.pdf"" file. From your command it shows that the object ""te-123456-123456aa"" (CKA_LABEL) is a certificate.
openssl pkeyutl -sign -keyform ENGINE -engine pkcs11 -inkey ""pkcs11:object=te-123456-123456aa;type=cert;pin-value=password"" -in certifyme.pdf -out certifyme.pdf

Certificate Object; type = X.509 cert
  label:      te-123456-123456aa
  ID:         hexstringblah

Instead you can use your RSA private key id (CKA_ID, as you don't have a label for your private key) to sign your pdf file.
Private Key Object; RSA
  label:
  ID:         hexstringblah
  Usage:      decrypt, sign, unwrap

openssl pkeyutl -sign -keyform ENGINE -engine pkcs11 -inkey ""pkcs11:id=hexstringblah;type=private;pin-value=password"" -in certifyme.pdf -out signed_certifyme.pdf

Also note that in your command input file and ouput files has the same name.
Hope this helps.
","387","<openssl><smartcard><pkcs#11>","1","0","1","2019-01-11 15:40:28","","1","1","139040","","2019-01-03 19:23:09","2018-11-18 00:19:14",""
"40632826","Digital sign performance issue","I am currently stuck in a performance issue about digital signature. The scenario is the following: There are up to 2000 files that need to be signed and each one of them need to be signed a hundred times, not the whole file but chunks of it. To do so I'm using Apache Santuario and SUNPKCS11 class and API. The certificate is A3, which means Token or SmartCard devices. I tried both of them, SmartCard and Token, but they're extremely slow to sign, even tough I used parallel processing. SmartCard is signing a hundred percent better than Token. It takes 30 seconds per file, and 70, respectively. I have no clue of why it's taking so long, does anyone have any idea to help me?
By the way, Token seems not to accept parallel signature, once it starts to throw exception randomly while signing the hundred chunks of a file, but it's slower even when signing sincronally.
","","379","<java><digital-signature><pkcs#11><xml-signature>","0","","0","2016-11-16 13:00:49","","5","1","","","","2016-11-16 13:00:49",""
"43208911","Where from i can get PKCS#11 library?","What library do I need in order to use all PKCS#11 functions (like C_INITIALIZE, C_FINALIZE).
I've searched a lot but did not find anything. 
Also my project must be in WINDOWS, Visual Studio.
","Library implementing PKCS#11 API is usually provided by the vendor of your cryptographic device (smartcard, token, HSM...). Alternatively you can also use pure software PKCS#11 implementation such as SoftHSM.
","376","<c#><visual-studio><pkcs#11>","1","2","1","2017-04-04 14:43:25","43210474","0","","","","","2017-04-04 13:38:23","2017-04-12 11:42:44"
"36088477","PKCS#11 library for ACR122U USB","I bought an ACR122U USB smartcard reader but it came without an SDK or anything that could be installed other than the x64 unified driver I found at the OEM in Hong Kong.
I want to use it to properly access the cards. I also tried several PKCS libraries like PKCS#11.NET which I managed to recompile for 4.5 but it requires some driver DLLs (providers) that are not installed on my system.
Where can I get one of those? It lists these: 
    eTPKCS11g.dll
    opensc-pkcs11.dll
    etpkcs11.dll
    siecap11.dll
    rtPKCS11.dll
THe PKCS test application of PKCS#11.NET has two eTPKCS11 DLLs in a separate directory but they cannot be added as references. And as usual the project comes with ZERO documentation
","Typically readers come without anything, since PCSC devices are mostly correctly recognized by Windows. Note, that the PKCS#11 driver depends to 100% on the card you use and to 0% on the reader, so the card supplier has to be queried next instead of the reader supplier, since the commands are quite different between several card manufacturers.
","373","<smartcard><pkcs#11><acr122>","0","4","1","2019-10-28 19:48:40","","1","2","","","","2016-03-18 15:37:18",""
"52339507","engine_pkcs11 and softhsm with ECC keys","I have softhsm-v2.5.0-rc1 which has ec keys imported in it. Now, when I try to use these keys from openssl CLI using the pkcs11 engine, it fails.

SoftHSM version
[]:~$ softhsm2-util --version
2.5.0rc1

SoftHSM token init
[]:~$ softhsm2-util --init-token --slot 0 --label ""token 2.5.0-rc1""
=== SO PIN (4-255 characters) ===
Please enter SO PIN: ****
Please reenter SO PIN: ****
=== User PIN (4-255 characters) ===
Please enter user PIN: ****
Please reenter user PIN: ****
The token has been initialized and is reassigned to slot 928024111

ECC key in pkcs8 format
[]:~$ openssl pkey -in ~/tmp/secp256k1-key.pem.pkcs8 -text
-----BEGIN PRIVATE KEY-----
MIGEAgEAMBAGByqGSM49AgEGBSuBBAAKBG0wawIBAQQgYCXpIJyEAexhkvrCMGlF
A4sQItcIp6wm83WVoeOFzEyhRANCAATMfAkLtsynHRmRyYLn+uRpJUm6bOZJBQhK
N81nJv06fN6MY0nEzWG9jJsvSNlf5jW7yecbje2wWQL/JYqviFwr
-----END PRIVATE KEY-----
Private-Key: (256 bit)
priv:
    60:25:e9:20:9c:84:01:ec:61:92:fa:c2:30:69:45:
    03:8b:10:22:d7:08:a7:ac:26:f3:75:95:a1:e3:85:
    cc:4c
pub:
    04:cc:7c:09:0b:b6:cc:a7:1d:19:91:c9:82:e7:fa:
    e4:69:25:49:ba:6c:e6:49:05:08:4a:37:cd:67:26:
    fd:3a:7c:de:8c:63:49:c4:cd:61:bd:8c:9b:2f:48:
    d9:5f:e6:35:bb:c9:e7:1b:8d:ed:b0:59:02:ff:25:
    8a:af:88:5c:2b
ASN1 OID: secp256k1

Import the key into softhsm
[]:~$ softhsm2-util --import ~/tmp/secp256k1-key.pem.pkcs8 --label ""ec key"" --id 1111 --token ""token 2.5.0-rc1""
Found slot 928024111 with matching token label.
=== User PIN (4-255 characters) ===
Please enter user PIN: ****
Please reenter user PIN: ****
The key pair has been imported.

Get the pkcs11 url for the private key
[]:~$ p11tool --login --provider=/usr/local/lib/softhsm/libsofthsm2.so --set-pin=1111 --list-all
Object 0:
                URL: pkcs11:model=SoftHSM%20v2;manufacturer=SoftHSM%20project;serial=6a160d52b750862f;token=token%202.5.0-rc1;id=%11%11;object=ec%20key;type=private
                Type: Private key
                Label: ec key
                Flags: CKA_PRIVATE; CKA_SENSITIVE;
                ID: 11:11

Object 1:
                URL: pkcs11:model=SoftHSM%20v2;manufacturer=SoftHSM%20project;serial=6a160d52b750862f;token=token%202.5.0-rc1;id=%11%11;object=ec%20key;type=public
                Type: Public key
                Label: ec key
                ID: 11:11

Try to access key with openssl engine.
[]:~$ openssl version
OpenSSL 1.1.1  11 Sep 2018

[]:~$ more ~/tmp/openssl.cnf
openssl_conf = openssl_init

[openssl_init]
engines=engine_section

[engine_section]
pkcs11 = pkcs11_section

[pkcs11_section]
engine_id = pkcs11
dynamic_path = /Users/parashah/Downloads/libp11-0.4.9/src/.libs/pkcs11.dylib
MODULE_PATH = /usr/local/lib/softhsm/libsofthsm2.so
init = 0

[]:~$ openssl pkey -in ""pkcs11:model=SoftHSM%20v2;manufacturer=SoftHSM%20project;serial=6a160d52b750862f;token=token%202.5.0-rc1;id=%11%11;object=ec%20key;type=private"" -inform ENGINE -engine pkcs11 -text
engine ""pkcs11"" set.
Enter PKCS#11 token PIN for token 2.5.0-rc1:
140736065815424:error:100C0010:elliptic curve routines:i2d_ECPrivateKey:EC lib:crypto/ec/ec_asn1.c:995:
140736065815424:error:100D6010:elliptic curve routines:eckey_priv_encode:EC lib:crypto/ec/ec_ameth.c:242:
140736065815424:error:06071092:digital envelope routines:EVP_PKEY2PKCS8:private key encode error:crypto/evp/evp_pkey.c:72:
140736065815424:error:0907E073:PEM routines:do_pk8pkey:error converting private key:crypto/pem/pem_pk8.c:73:


====
Just for completeness, doing the exact same steps but for a RSA key works fine
","","372","<openssl><pkcs#11><opensc><softhsm>","3","","0","2018-09-17 01:19:08","","4","","8408818","","2018-09-17 01:19:08","2018-09-14 21:38:30",""
"48658031","Java use SecureRandom with SunPKCS11 provider","I would like to use my PKCS#11 enabled device as a source of SecureRandom.
So I have done the following:
Provider pkcs11provider = new sun.security.pkcs11.SunPKCS11(pkcs11config);
Security.addProvider(pkcs11provider);

byte[] rb = new byte[100];
SecureRandom sr = SecureRandom.getInstance(""PKCS11"", pkcs11provider);
sr.nextBytes(rb);

And I always get an exception:
Exception in thread ""main"" java.security.NoSuchAlgorithmException: no such algorithm: PKCS11 for provider SunPKCS11-HSM
    at sun.security.jca.GetInstance.getService(GetInstance.java:101)
    at sun.security.jca.GetInstance.getInstance(GetInstance.java:218)
    at java.security.SecureRandom.getInstance(SecureRandom.java:383)

What I am doing wrong? According JDK PKCS#11 Reference Guide ""PKCS11"" should be supported algorithm for SecureRandom.
","""PKCS11"" doesn't sound like an algorithm name. It is the provider name. A provider can have their own algorithm names for specific crypto operations. To see what all algorithms they have, you can run this code snippet to see them.
Set<Provider.Service> services = pkcs11provider.getServices();

services.forEach(service ->
{
    // System.out.println(service.getType()); // --> Look for 'SecureRandom' type
    System.out.println(service.getAlgorithm());
});

Look for 'SecureRandom' type, and that's the algorithm you have to pass in as the first argument in SecureRandom.getInstance(.., ..).
","369","<java><pkcs#11><secure-random>","0","0","1","2018-02-07 15:23:06","48667358","0","","","","","2018-02-07 07:19:23",""
"34842524","PKCS#11 as storage for keyfiles","In the past I used a SmartCard to store a randomly generated keyfile, which was used by TrueCrypt to open its volume. TrueCrypt used PKCS#11 to read the SmartCard and access the keyfile.
Now I'd like to do something similar, with EncFS. I wanted to store its xml config in a SmartCard. EncFS xml config has 1KB, so it fits, I can even store a few different config files in one SmartCard.
But EncFS doesn't support PKCS#11, as long as I was able to search for it. So, my idea would be to use the SmartCard as a very small and secure storage pendrive. Its readonly content would be mounted as a normal Windows drive letter, and EncFS would read its files.
Any idea how to achieve that?
","This is a very interesting task. PKCS#11 devices usually are capable of holding generic BLOBs, although the size of those blobs is severely limited (usually a few hundred bytes). BLOBs have short text labels, so you can treat them as files. 
I know that this task can be accomplished fully user mode with our products (SecureBlackbox for PKCS#11 access and Callback File System to create a virtual drive) and maybe you will alternative options as well. I don't think you'd be able to access PKCS#11 from the pure kernel-mode driver because most PKCS#11 ""drivers"" are user-mode DLLs. 
The only problem with this approach is that common PKCS#11 devices (smartcards, USB tokens) are very slow AND also they require that you login before providing any information. 
Another possible problem is when exactly this file is needed to EncFS. If it's to be read after you login, that's ok. But if the file is to be read during system boot, then the task would become much more complicated (if possible at all -- that depends on what exactly stage of system booting the file is read by EncFS). 
","367","<security><smartcard><pkcs#11><truecrypt>","2","1","1","2016-01-18 01:31:20","","0","1","5128464","","2016-01-18 00:10:34","2016-01-17 19:16:32",""
"38500375","Get X509Certificates from smart card without authentication","I want to retrieve the list of X509Certificate from my smart card without logging in (without PIN).
My code is the following:
    String conf = args[0];
    Provider p = new sun.security.pkcs11.SunPKCS11(conf);
    Security.addProvider(p);

    KeyStore ks = KeyStore.getInstance(""PKCS11"");

    1) ks.load(null, null);
    2) ks.load(null, """".toCharArray());

The first test (1) fails with this StackTrace:
Exception in thread ""main"" java.io.IOException: load failed
    at sun.security.pkcs11.P11KeyStore.engineLoad(P11KeyStore.java:763)
    at java.security.KeyStore.load(Unknown Source)
    at TestPKCS11.main(TestPKCS11.java:29)
Caused by: javax.security.auth.login.LoginException: no password provided, and n
o callback handler available for retrieving password
        at sun.security.pkcs11.SunPKCS11.login(SunPKCS11.java:1184)
        at sun.security.pkcs11.P11KeyStore.login(P11KeyStore.java:849)
        at sun.security.pkcs11.P11KeyStore.engineLoad(P11KeyStore.java:751)

The second (2) fails with:
Exception in thread ""main"" java.io.IOException: load failed
    at sun.security.pkcs11.P11KeyStore.engineLoad(P11KeyStore.java:763)
    at java.security.KeyStore.load(Unknown Source)
    at TestPKCS11.main(TestPKCS11.java:30)
Caused by: javax.security.auth.login.LoginException
        at sun.security.pkcs11.SunPKCS11.login(SunPKCS11.java:1238)
        at sun.security.pkcs11.P11KeyStore.login(P11KeyStore.java:849)
        at sun.security.pkcs11.P11KeyStore.engineLoad(P11KeyStore.java:753)
        ... 2 more
Caused by: sun.security.pkcs11.wrapper.PKCS11Exception: CKR_PIN_INVALID
        at sun.security.pkcs11.wrapper.PKCS11.C_Login(Native Method)
        at sun.security.pkcs11.SunPKCS11.login(SunPKCS11.java:1222)

My config is the following:
name=SmartCard
slotListIndex = 0
library=C:\gclib.dll
attributes(*,CKO_PUBLIC_KEY,*)={ CKA_TOKEN=true } 

NB: I have a local tool (Classic Client ToolBox) that does not require the PIN to display the certificates.
","Looks like Sun's provider always calls Login, no matter if you want to login or not. Frankly speaking, it can be that the only option is to change the approach, e.g. use some other way to access PKCS#11 devices (we have such mechanisms in our SecureBlackbox, for example). 
On the other hand, possibility to retrieve information without logging in to the device, is a kind of information leak, and as such possibility to obtain the list or the certificates themselves depends on the particular device. What works on your device might not work on other devices. 
","367","<java><x509certificate><smartcard><pkcs#11>","1","0","1","2016-07-21 16:48:25","","0","1","","","","2016-07-21 09:32:36",""
"50924686","Pkcs11Exception: Method C_GetSessionInfo returned CKR_CRYPTOKI_NOT_INITIALIZED","We are using Thales nShield HSM for storing Private keys and the corresponding public key is stored in the Certificate store.
We have written the logic as below: 

Search for a valid slot and open a session for that on the first
call and it can serve multiple requests. 
It expires after half an
hours. During the time it is not expired, if it gets any request to
serve. 
Now even when it is not expired, when we try to check the
sessionInfo it is giving the below message:

Method C_GetSessionInfo returned CKR_CRYPTOKI_NOT_INITIALIZED
Please help. Thanks in Advance.
The below is the addition to the above query.
We created a class, which encapsulated all of the Pkcs11Interop usage and exposed few methods as shown below.
    /// <summary>
    /// Contains the information about Private key stored in HMS and Certificate to load from File System/Windows Certificates Store/HSM.
    /// </summary>
    public class HardwareSecureModule
    {
        /// <summary>
        /// CryptoApi reference
        /// </summary>
        public string CryptoApiPath { get; set; }

        /// <summary>
        /// Idenfitier of the Private Key
        /// </summary>
        public string KeyLabel { get; set; }

        /// <summary>
        /// Idenfitier type of the Private Key
        /// </summary>
        public string KeyIdentifier { get; set; }

        /// <summary>
        /// Idenfitier of the Token
        /// </summary>
        public string TokenLabel { get; set; }

        /// <summary>
        /// Token Pin 
        /// </summary>
        public string TokenPin { get; set; }

        /// <summary>
        /// Idenfitier of the Certificate
        /// </summary>
        public string CertificateLabel { get; set; }        
    }

    public interface IHsmSession : IDisposable
    {
        /// <summary>
        /// Find key encryption algorithm
        /// </summary>
        /// <returns></returns>
        string GetEncryptionAlgorithm();

        /// <summary>
        /// sign the digest
        /// </summary>
        /// <param name=""digest""></param>
        /// <returns></returns>
        byte[] Sign(byte[] digest, string encryptionAlgorithm, string hashAlgorithm);

        /// <summary>
        /// Indicates if thread within the pool is working
        /// to avoid disposal of the same
        /// </summary>
        bool Locked { get; set; }

        /// <summary>
        /// Unique identifier of the HSM Session
        /// </summary>
        Guid Id { get; }
    }
    /// <summary>
    /// Class for communicating with HSM
    /// </summary>
    public class Pkcs11HsmSession : IHsmSession
    {
        private Pkcs11 _pkcs11;
        private Slot _slot;
        private Session _session;
        private readonly HardwareSecureModule _certificateInformation = null;

        public bool Locked { get; set; }
        public Guid Id { get; }

        /// <summary>
        /// Constructor
        /// </summary>
        /// <param name=""certificateInformation""></param>
        public Pkcs11HsmSession(HardwareSecureModule certificateInformation)
        {
            Id = Guid.NewGuid();
            _certificateInformation = certificateInformation;
            if (_certificateInformation != null)
                InitializeVariables();
        }

        private void InitializeVariables()
        {
            _pkcs11 = GetPkcs11Instance(_certificateInformation.CryptoApiPath);
            if (_pkcs11 == null)
                throw new Exception(""Unable to create instance of Pkcs11"");
            _slot = FindSlot(_pkcs11, _certificateInformation.TokenLabel);
            if (_slot == null)
                throw new Exception(""Specified token not found: "" + _certificateInformation.TokenLabel);
            _session = _slot.OpenSession(true);
            if (_session == null)
                throw new Exception(""Unable to create session for the slot"");
            SessionLogin();            
        }

        private Pkcs11 GetPkcs11Instance(string hsmCryptoApi)
        {
            Pkcs11 pkcs11 = null;
            try
            {
                pkcs11 = CreatePkcs11Instance(hsmCryptoApi, true);
            }
            catch (Pkcs11Exception ex)
            {
                if (ex.RV == CKR.CKR_CANT_LOCK)
                    pkcs11 = CreatePkcs11Instance(hsmCryptoApi, false);
                else
                    throw ex;
            }
            return pkcs11;
        }

        private Pkcs11 CreatePkcs11Instance(string hsmCryptoApi, bool useOsLocking)
        {
            return new Pkcs11(hsmCryptoApi, useOsLocking);
        }

        private Slot FindSlot(Pkcs11 pkcs11, string tokenLabel)
        {
            if (string.IsNullOrEmpty(tokenLabel))
                throw new Exception(""Token label is not specified"");

            List<Slot> slots = pkcs11.GetSlotList(true);            

            if (slots != null && slots.Count > 0)
            {
                foreach (Slot slot in slots)
                {
                    TokenInfo tokenInfo = null;

                    try
                    {
                        tokenInfo = slot.GetTokenInfo();                        
                    }
                    catch (Pkcs11Exception ex)
                    {
                        if (ex.RV != CKR.CKR_TOKEN_NOT_RECOGNIZED && ex.RV != CKR.CKR_TOKEN_NOT_PRESENT)
                            throw;
                    }

                    if (tokenInfo == null)
                        continue;

                    if (!string.IsNullOrEmpty(tokenLabel))
                        if (0 !=
                            String.Compare(tokenLabel, tokenInfo.Label, StringComparison.InvariantCultureIgnoreCase))
                            continue;
                    return slot;
                }
            }
            return null;
        }

        /// <summary>
        /// HSM Signs the digest using private key 
        /// </summary>
        /// <param name=""message""></param>
        /// <param name=""encryptionAlgorithm""></param>
        /// <param name=""hashAlgorithm""></param>
        /// <returns></returns>
        public virtual byte[] Sign(byte[] message, string encryptionAlgorithm, string hashAlgorithm)
        {
            hashAlgorithm = hashAlgorithm.Replace(""-"", string.Empty);

            CKM signingMechanismType = GetSigningMechanismType(encryptionAlgorithm, hashAlgorithm);
            SessionLogin();

            ObjectHandle privateKeyHandle = GetPrivateKeyHandle();
            if (signingMechanismType == CKM.CKM_ECDSA)
            {
                message = GetMessageDigest(message, hashAlgorithm);
            }

            using (Mechanism mechanism = new Mechanism(signingMechanismType))
            {
                byte[] signedHash = _session.Sign(mechanism, privateKeyHandle, message);
                if (signingMechanismType == CKM.CKM_ECDSA)
                {
                    return ConstructEcdsaSigValue(signedHash);
                }

                return signedHash;
            }
        }

        private byte[] GetMessageDigest(byte[] message, string hashAlgorithm)
        {
            CKM hashMechanismType = (CKM)Enum.Parse(typeof(CKM), ""CKM_"" + hashAlgorithm.ToUpper());
            using (Mechanism mechanism = new Mechanism(hashMechanismType))
            {
                return _session.Digest(mechanism, message);
            }
        }

        /// <summary>
        /// Construct ECDSA der sequence
        /// </summary>
        /// <param name=""rs""></param>
        /// <returns></returns>
        /// <exception cref=""ArgumentNullException""></exception>
        /// <exception cref=""ArgumentException""></exception>
        public byte[] ConstructEcdsaSigValue(byte[] rs)
        {
            if (rs == null)
                throw new ArgumentNullException(""rs is null"");

            if (rs.Length < 2 || rs.Length % 2 != 0)
                throw new ArgumentException(""Invalid length of rs byte"");

            int halfLen = rs.Length / 2;

            byte[] half1 = new byte[halfLen];
            Array.Copy(rs, 0, half1, 0, halfLen);
            var r = new BigInteger(1, half1);

            byte[] half2 = new byte[halfLen];
            Array.Copy(rs, halfLen, half2, 0, halfLen);
            var s = new BigInteger(1, half2);

            var derSequence = new Org.BouncyCastle.Asn1.DerSequence(
                new Org.BouncyCastle.Asn1.DerInteger(r),
                new Org.BouncyCastle.Asn1.DerInteger(s));

            return derSequence.GetDerEncoded();
        }

        /// <summary>
        /// GetEncryptionAlgorithm for Interface
        /// </summary>
        /// <returns></returns>
        public string GetEncryptionAlgorithm()
        {
            SessionLogin();
            string objectAttributeValue = GetObjectAttribute().ToString();            

            switch ((CKK)Enum.Parse(typeof(CKK), objectAttributeValue))
            {
                case CKK.CKK_RSA:
                    return ""RSA"";

                case CKK.CKK_ECDSA: //CKK.CKK_EC has same value as CKK.CKK_ECDSA:
                    return ""ECDSA"";
                default:
                    throw new Exception(""Unknown Encryption Algorithm"");
            }
        }

        /// <summary>
        /// Get atrributes for object handle
        /// </summary>
        /// <returns></returns>
        private ulong GetObjectAttribute()
        {
            ObjectHandle objectHandle = GetPrivateKeyHandle();

            List<CKA> keyAttributes = new List<CKA>();
            keyAttributes.Add(CKA.CKA_KEY_TYPE);
            List<ObjectAttribute> keyObjectAttributes = _session.GetAttributeValue(objectHandle, keyAttributes);

            return keyObjectAttributes[0].GetValueAsUlong();
        }

        /// <summary>
        /// Extract private key handle from HSM
        /// </summary>
        /// <returns></returns>
        private ObjectHandle GetPrivateKeyHandle()
        {
            _logger.WriteTrace(""Inside GetPrivateKeyHandle()"", LogCategory.General);

            string keyLabel = _certificateInformation.KeyLabel;
            string keyIdentifier = _certificateInformation.KeyIdentifier;
            List<ObjectAttribute> searchTemplate = new List<ObjectAttribute>();
            searchTemplate.Add(new ObjectAttribute(CKA.CKA_CLASS, CKO.CKO_PRIVATE_KEY));

            CKA indentifierType;
            bool parseResult = Enum.TryParse(keyIdentifier, out indentifierType);
            if (!parseResult)
                throw new Exception(""Invalid Key Identifier '"" + keyIdentifier + ""'. Please provide a valid value (CKA_ID, CKA_LABEL etc)."");
            searchTemplate.Add(new ObjectAttribute(indentifierType, keyLabel));

            List<ObjectHandle> foundObjects = _session.FindAllObjects(searchTemplate);
            if (foundObjects.Count < 1)
            {
                throw new Exception(string.Format(""Private key with {0} '{1}' was not found"", keyIdentifier, keyLabel));
            }
            else if (foundObjects.Count > 1)
            {
                throw new Exception(string.Format(""More than one private key with {0} '{1}' was found"", keyIdentifier, keyLabel));
            }

            return foundObjects[0];
        }

        /// <summary>
        /// Get MechanismType CKM for Ecdsa
        /// </summary>
        /// <param name=""hashAlgorithm""></param>
        /// <returns></returns>
        private CKM GetEcdsaMechanismType(string hashAlgorithm)
        {
            switch (hashAlgorithm)
            {
                //Currently we don't have direct support for the below mechanism in HSM, however if supported this code can be uncommented and used
                //case ""SHA1"":
                //    return CKM.CKM_ECDSA_SHA1;
                //case ""SHA224"":
                //    return CKM.CKM_ECDSA_SHA224;
                //case ""SHA256"":
                //    return CKM.CKM_ECDSA_SHA256;
                //case ""SHA384"":
                //    return CKM.CKM_ECDSA_SHA384;
                //case ""SHA512"":
                //    return CKM.CKM_ECDSA_SHA512;
                default:
                    return CKM.CKM_ECDSA;
            }
        }

        /// <summary>
        /// Get CKM based upon hash algorithm
        /// </summary>
        /// <param name=""hashAlgorithm""></param>
        /// <returns></returns>
        private CKM GetRsaMechanismType(string hashAlgorithm)
        {
            switch (hashAlgorithm)
            {
                case ""SHA512"":
                    return CKM.CKM_SHA512_RSA_PKCS;
                case ""SHA256"":
                default:
                    return CKM.CKM_SHA256_RSA_PKCS;
            }
        }

        /// <summary>
        /// Get CKM based on encryption and hash algorithm
        /// </summary>
        /// <param name=""encryptionAlgorithm""></param>
        /// <param name=""hashAlgorithm""></param>
        /// <returns></returns>
        private CKM GetSigningMechanismType(string encryptionAlgorithm, string hashAlgorithm)
        {
            switch (encryptionAlgorithm)
            {
                case ""EC"":
                case ""ECDSA"":
                    return GetEcdsaMechanismType(hashAlgorithm);
                case ""RSA"":
                default:
                    return GetRsaMechanismType(hashAlgorithm);
            }
        }

        private void CloseSession()
        {
            if (_session != null)
            {
                try
                {
                    SessionLogout();
                }
                catch
                {
                    // Any exceptions can be safely ignored here
                }

                _session.Dispose();
                _session = null;
            }
            _slot = null;
            if (_pkcs11 != null)
            {
                _pkcs11.Dispose();
                _pkcs11 = null;
            }
        }

        public void Dispose()
        {
            CloseSession();
        }

        private void SessionLogout()
        {
            if (_session != null && GetSessionState() == CKS.CKS_RO_USER_FUNCTIONS)
            {
                ulong sessionId = _session.SessionId;
                _session.Logout();                
            }
        }

        private void SessionLogin()
        {
            if (_session != null && GetSessionState() != CKS.CKS_RO_USER_FUNCTIONS)
            {
                _session.Login(CKU.CKU_USER, _certificateInformation.TokenPin);                
            }
        }

        private CKS GetSessionState()
        {
            try
            {
                return _session.GetSessionInfo().State;
            }
            catch (Exception ex)
            {
                if (_certificateInformation != null)
                    InitializeVariables();
                return _session.GetSessionInfo().State;
            }
        }
    }

","PKCS#11 defines an application as a single process with single address space and one or multiple threads of control running in it.
Any application becomes a ""Cryptoki application"" by initializing PKCS#11 library in one of its threads with a call to C_Initialize function. After the library has been initialized, the application can call other functions of PKCS#11 API. When the application is done using PKCS#11 API, it finalizes PKCS#11 library with a call to C_Finalize function and ceases to be a ""Cryptoki application"". From application perspective, PKCS#11 library initialization and finalization are global events, so it is crucial to ensure that one thread does not finalize library while other threads are still working with it.
PKCS#11 function C_Initialize is called in constructor of HighLevelAPI.Pkcs11 class and C_Finalize function is called when instance of HighLevelAPI.Pkcs11 class is disposed. It is crucial to ensure that two instances of this class working with same PKCS#11 library do not overlap each other. My guess is that you are using more than one instance and you dispose it while you are still trying to use the other.
","367","<digital-signature><pkcs#11><hsm><pkcs11interop><softhsm>","0","1","1","2018-07-10 13:33:21","50955389","0","0","6344809","","2018-07-10 13:33:21","2018-06-19 09:16:12",""
"38284445","Python: Provide SSL socket with private key from PKCS#11 wrapper","I have a SSL server in python to which I defined the following SSLContext:
context = ssl.SSLContext(ssl.PROTOCOL_TLSv1)
context.verify_mode = ssl.CERT_REQUIRED
context.load_verify_locations(CACERTFILE)
context.load_cert_chain(CERTFILE,KEYFILE)

CERTFILE and KEYFILE contain a path to the server's certificate and private key. But you always have to provide a path to load_cert_chain().
I don't want to retrieve the private key from a file, but from a PKCS#11 wrapper like PyKCS11 or M2Crypto. 
How does the context of the SSL socket has to look like, if I want to load the private key as a session object from PyKCS11 or as a PKey() object from M2Crypto. Can you give me an example?
I don't want to store the private key object from PyKCS/M2Crypto as a PEM-file or something else, because the private key should never leave the HSM.
Thank you
","","366","<python><ssl><pkcs#11>","4","","0","2016-07-09 17:30:07","","0","3","","","","2016-07-09 17:30:07",""
"22764447","Linking error with opensc-pkcs","I am trying to use opensc-pkcs11.so which I have built on Redhat linux 5. However, when I try to use in a sample program it is giving a linking error:
main.cpp:(.text+0x265): undefined reference to `C_Initialize'

The sample code snippet is as follows:
int main()
{
CK_RV l_rv = 0;     
l_rv = C_Initialize(NULL_PTR);
//other staffs ...

}

If I see the nm output of opensc-pkcs11.so it is showing:
-bash-3.2$ nm opensc-pkcs11.so |grep C_Initialize
0000000000008c70 t C_Initialize

What is the meaning of 't'? I see it is not 'T'. But is also not 'U'.
Can anybody suggest what is happening? Thanks in advance.
","PKCS#11 library opensc-pkcs11.so developed as a part of OpenSC project exports only C_GetFunctionList function which provides pointers to all the other PKCS#11 functions. It is exceptionally helpful when you load PKCS#11 library dynamically with dlopen() because you don't need to acquire function pointer for all 60+ functions with dlsym() call.
In your case you need to call C_GetFunctionList first and then call rest of the functions via returned pointers. Here is the example from PKCS#11 v2.20 specification created by RSA Security Inc.:
CK_FUNCTION_LIST_PTR pFunctionList; 
CK_C_Initialize pC_Initialize; 
CK_RV rv; 

/* It’s OK to call C_GetFunctionList before calling 
C_Initialize */ 
rv = C_GetFunctionList(&pFunctionList); 
assert(rv == CKR_OK); 
pC_Initialize = pFunctionList -> C_Initialize; 

/* Call the C_Initialize function in the library */ 
rv = (*pC_Initialize)(NULL_PTR); 

","366","<pkcs#11><opensc>","0","1","1","2014-07-30 14:37:28","22769105","0","0","3325704","","2014-07-30 14:37:28","2014-03-31 14:35:46",""
"42587642","Verifying DSA Signature generated by PKCS#11 with OpenSSL","I want to sign a SHA-256 hash with DSA using PKCS#11 Java Wrapper for the PKCS#11 API of a hardware security module. For this purpose I selected the Mechanism CKM_DSA, load the corresponding DSA key from the token and have the data (read as byte-array) signed. The key I use for testing has 1024bit length. 
Everything seems to work fine: The key is loaded, the Session.sign() yields a byte[] array of length 40. This corresponds to the PKCS#11 Spec, which says:
""For the purposes of this mechanism, a DSA signature is a 40-byte string, 
corresponding to the concatenation of the DSA values r and s, each represented most significant byte first.""
Now I want to verify this signature using openSSL, i.e., using
openssl dgst -d -sha256 -verify ${PUBLIC_KEY} -signature signature.der <raw input file>

This works if I 
a) created the signature using OpenSSL
b) created the signature using bouncycastle and encoding the result as ASN1 encoded DER sequence.
Now I want to do the same with the PKCS#11 signature. My question is: how to format this 40 byte array? I tried the following:
        //sign data
        byte[] signedData = this.pkcs11Session.sign(dataToSign);
        //convert result
        byte[] r = new byte[20];
        byte[] s = new byte[20];
        System.arraycopy(signedData, 0, r, 0, 20);
        System.arraycopy(signedData, 19, s, 0, 20);

        //encode result
        ASN1EncodableVector v = new ASN1EncodableVector();
        v.add(new ASN1Integer(r));
        v.add(new ASN1Integer(s));
        return new DERSequence(v).getEncoded(ASN1Encoding.DER);

The encoding part seems to be correct, because it works if I produce r and s directly with bouncycastle and another software key. Besides, openssl does accept the input format but the verification fails sometimes with an error, sometimes just with ""Verification failure"". 
Thus, I assume the conversion of the PKCS#11 signature to r and s is wrong. Can someone help finding the mistake?
","You probably have to convert the r and s values to a BigInteger class before you do. The reason for this is that ASN.1 uses signed value encoding and DH results in unsigned value encoding. So you've got a pretty high chance of getting a negative value in your ASN.1, which will result in an error.
To perform the conversion, use new BigInteger(1, r) and new BigInteger(1, s) and put the result into the ASN1Integer instances. Here 1 indicates that the value needs to be converted to a positive value (i.e. the input is unsigned positive).
","365","<encryption><dsa><encoding><pkcs#11>","2","3","1","2017-03-06 17:42:33","","2","","","","","2017-03-03 14:39:15",""
"38381503","What is wrong in C++ struct reading from PKCS11?","I'm trying to use PKCS11 lib. I've got a wrong structure data on Windows10 x64 from C_GetInfo function.
My code
CK_C_GetInfo f_C_GetInfo = (CK_C_GetInfo)dlsym(__pkcs11->dlHandle, ""C_GetInfo"");
CK_C_Finalize f_C_Finalize = (CK_C_Finalize)dlsym(__pkcs11->dlHandle, ""C_Finalize"");

CK_INFO _info;
rv = f_C_GetInfo(&_info);

C++ declarations
/* an unsigned value, at least 32 bits long */
// typedef unsigned long int CK_ULONG;
typedef unsigned long int CK_ULONG;

/* at least 32 bits; each bit is a Boolean flag */
typedef CK_ULONG          CK_FLAGS;

typedef struct CK_VERSION {
    CK_BYTE       major;  /* integer portion of version number */
    CK_BYTE       minor;  /* 1/100ths portion of version number */
} CK_VERSION;

typedef CK_VERSION CK_PTR CK_VERSION_PTR;

typedef struct CK_INFO {
    CK_VERSION    cryptokiVersion;     /* Cryptoki interface ver */
    CK_UTF8CHAR   manufacturerID[32];  /* blank padded */
    CK_FLAGS      flags;               /* must be zero */

    CK_UTF8CHAR   libraryDescription[32];  /* blank padded */
    CK_VERSION    libraryVersion;          /* version of library */
} CK_INFO;

typedef CK_INFO CK_PTR    CK_INFO_PTR;

// Function C_GetInfo
CK_RV C_GetInfo ( CK_INFO_PTR pInfo );

Information from debugger


Wrong structure data starts from parameter flags, it MUST be 0 (Hex: 00 00 00 00). But it has hex value 00 00 52 75.
I can fix this error if I change type of parameter flags to char[4]
What is wrong? Why is PKCS11 interface wrong for this structure?
","The first two elements cryptokiVersion and manufacturerID take up 34 bytes.
manufacturerID mentions that its blank padded, if you look at the bytes, there is a series of 0x20 which is UTF-8 for .
Followed by 4 0x00
Followed by 52 75 74 ....
There is no padding in the data between manufacturerID and flags, but your structure definition contains 2 bytes of padding to align the unsigned long with the next boundary, which would be at 36 bytes. 
Try removing the padding from your structure.
#pragma pack(push, p1, 1)

typedef struct CK_INFO {
    CK_VERSION    cryptokiVersion;     /* Cryptoki interface ver */
    CK_UTF8CHAR   manufacturerID[32];  /* blank padded */
    CK_FLAGS      flags;               /* must be zero */

    CK_UTF8CHAR   libraryDescription[32];  /* blank padded */
    CK_VERSION    libraryVersion;          /* version of library */
} CK_INFO;

#pragma pack(pop, p1)

","365","<c++><struct><pkcs#11>","1","2","2","2016-07-15 12:59:12","38382664","1","0","827263","","2016-07-14 19:44:58","2016-07-14 18:21:51",""
"38381503","What is wrong in C++ struct reading from PKCS11?","I'm trying to use PKCS11 lib. I've got a wrong structure data on Windows10 x64 from C_GetInfo function.
My code
CK_C_GetInfo f_C_GetInfo = (CK_C_GetInfo)dlsym(__pkcs11->dlHandle, ""C_GetInfo"");
CK_C_Finalize f_C_Finalize = (CK_C_Finalize)dlsym(__pkcs11->dlHandle, ""C_Finalize"");

CK_INFO _info;
rv = f_C_GetInfo(&_info);

C++ declarations
/* an unsigned value, at least 32 bits long */
// typedef unsigned long int CK_ULONG;
typedef unsigned long int CK_ULONG;

/* at least 32 bits; each bit is a Boolean flag */
typedef CK_ULONG          CK_FLAGS;

typedef struct CK_VERSION {
    CK_BYTE       major;  /* integer portion of version number */
    CK_BYTE       minor;  /* 1/100ths portion of version number */
} CK_VERSION;

typedef CK_VERSION CK_PTR CK_VERSION_PTR;

typedef struct CK_INFO {
    CK_VERSION    cryptokiVersion;     /* Cryptoki interface ver */
    CK_UTF8CHAR   manufacturerID[32];  /* blank padded */
    CK_FLAGS      flags;               /* must be zero */

    CK_UTF8CHAR   libraryDescription[32];  /* blank padded */
    CK_VERSION    libraryVersion;          /* version of library */
} CK_INFO;

typedef CK_INFO CK_PTR    CK_INFO_PTR;

// Function C_GetInfo
CK_RV C_GetInfo ( CK_INFO_PTR pInfo );

Information from debugger


Wrong structure data starts from parameter flags, it MUST be 0 (Hex: 00 00 00 00). But it has hex value 00 00 52 75.
I can fix this error if I change type of parameter flags to char[4]
What is wrong? Why is PKCS11 interface wrong for this structure?
","It is extremely important to remember, that according to PKCS#11 all structures are packed to the minimal size, supported by the platform, and not aligned to 4 or 8 bytes. Not doing this makes PKCS#11 drivers incompatible with applications. PKCS#11 standard is strict on this. 
","365","<c++><struct><pkcs#11>","1","1","2","2016-07-15 12:59:12","38382664","1","0","827263","","2016-07-14 19:44:58","2016-07-14 18:21:51",""
"50273289","PKCS11Interop Hash with SHA256 and Sign with RSA in two steps","I have two applications, one that calculates the SHA-256 hash of a document and the other which makes the RSA signing.
Trying different things i came to the conclusion that making CKM_SHA256 and then making CKM_RSA_PKCS give a different result than just making the CKM_SHA256_RSA_PKCS of the document itself.
So my question is, what is the difference between this two implementations? 
What information is added to the hash in CKM_SHA256_RSA_PKCS mechanism that turns in a complete different signature?
","Mechanims CKM_SHA256_RSA_PKCS does following things:

Computes SHA256 hash of the data just like CKM_SHA256 does
Constructs DER encoded DigestInfo structure defined in RFC 8017
Signs DigestInfo structure with private key just like CKM_RSA_PKCS does

Several approaches are possible when it comes to construction of DER encoded DigestInfo structure:

In Pkcs11Admin application I did use BouncyCastle library:

public static byte[] CreateDigestInfo(byte[] hash, string hashOid)
{
    DerObjectIdentifier derObjectIdentifier = new DerObjectIdentifier(hashOid);
    AlgorithmIdentifier algorithmIdentifier = new AlgorithmIdentifier(derObjectIdentifier, null);
    DigestInfo digestInfo = new DigestInfo(algorithmIdentifier, hash);
    return digestInfo.GetDerEncoded();
}


In Pkcs11Interop.X509Store library I did use precomputed arrays:

/// <summary>
/// Creates DER encoded PKCS#1 DigestInfo structure defined in RFC 8017
/// </summary>
/// <param name=""hash"">Hash value</param>
/// <param name=""hashAlgorithm"">Hash algorithm</param>
/// <returns>DER encoded PKCS#1 DigestInfo structure or null</returns>
private static byte[] CreatePkcs1DigestInfo(byte[] hash, HashAlgorithmName hashAlgorithm)
{
    if (hash == null || hash.Length == 0)
        throw new ArgumentNullException(nameof(hash));

    byte[] pkcs1DigestInfo = null;

    if (hashAlgorithm == HashAlgorithmName.MD5)
    {
        if (hash.Length != 16)
            throw new ArgumentException(""Invalid lenght of hash value"");

        pkcs1DigestInfo = new byte[] { 0x30, 0x20, 0x30, 0x0C, 0x06, 0x08, 0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x02, 0x05, 0x05, 0x00, 0x04, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
        Array.Copy(hash, 0, pkcs1DigestInfo, pkcs1DigestInfo.Length - hash.Length, hash.Length);
    }
    else if (hashAlgorithm == HashAlgorithmName.SHA1)
    {
        if (hash.Length != 20)
            throw new ArgumentException(""Invalid lenght of hash value"");

        pkcs1DigestInfo = new byte[] { 0x30, 0x21, 0x30, 0x09, 0x06, 0x05, 0x2B, 0x0E, 0x03, 0x02, 0x1A, 0x05, 0x00, 0x04, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
        Array.Copy(hash, 0, pkcs1DigestInfo, pkcs1DigestInfo.Length - hash.Length, hash.Length);
    }
    else if (hashAlgorithm == HashAlgorithmName.SHA256)
    {
        if (hash.Length != 32)
            throw new ArgumentException(""Invalid lenght of hash value"");

        pkcs1DigestInfo = new byte[] { 0x30, 0x31, 0x30, 0x0D, 0x06, 0x09, 0x60, 0x86, 0x48, 0x01, 0x65, 0x03, 0x04, 0x02, 0x01, 0x05, 0x00, 0x04, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
        Array.Copy(hash, 0, pkcs1DigestInfo, pkcs1DigestInfo.Length - hash.Length, hash.Length);
    }
    else if (hashAlgorithm == HashAlgorithmName.SHA384)
    {
        if (hash.Length != 48)
            throw new ArgumentException(""Invalid lenght of hash value"");

        pkcs1DigestInfo = new byte[] { 0x30, 0x41, 0x30, 0x0D, 0x06, 0x09, 0x60, 0x86, 0x48, 0x01, 0x65, 0x03, 0x04, 0x02, 0x02, 0x05, 0x00, 0x04, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
        Array.Copy(hash, 0, pkcs1DigestInfo, pkcs1DigestInfo.Length - hash.Length, hash.Length);
    }
    else if (hashAlgorithm == HashAlgorithmName.SHA512)
    {
        if (hash.Length != 64)
            throw new ArgumentException(""Invalid lenght of hash value"");

        pkcs1DigestInfo = new byte[] { 0x30, 0x51, 0x30, 0x0D, 0x06, 0x09, 0x60, 0x86, 0x48, 0x01, 0x65, 0x03, 0x04, 0x02, 0x03, 0x05, 0x00, 0x04, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
        Array.Copy(hash, 0, pkcs1DigestInfo, pkcs1DigestInfo.Length - hash.Length, hash.Length);
    }

    return pkcs1DigestInfo;
}

","362","<rsa><sha><pkcs#11><pkcs11interop>","2","3","1","2018-05-11 21:17:01","50300381","0","","","","","2018-05-10 12:44:25",""
"11049695","A list of smartcards which support pkcs#11","I want to know is there exists a comprehensive list of smart cards that support pkcs#11 (or other standards like pkcs#15)?
I need a list like Rousseau's list.
","If you are looking for PKCS#11, you are probably looking for a cryptographic smart card. And if you are talking about cryptographic smart cards then I'm certain that 99% of smart card vendors do provide a PKCS#11 module for their cards. The functionality and availability of the  module can vary, of course.
","362","<smartcard><pkcs#11>","1","1","1","2012-06-21 11:16:41","","1","","275567","","2012-06-15 15:40:44","2012-06-15 11:19:05",""
"48123155","CKR_TEMPLATE_INCOMPLETE for X509 certificate C_CreateObject","I get a TEMPLETE_INCOMPLETE while creating a X509 cert object. 
FILL_ATTR(cert_templ[0], CKA_TOKEN, &_true, sizeof(_true));
FILL_ATTR(cert_templ[1], CKA_VALUE, contents, contents_len);
FILL_ATTR(cert_templ[2], CKA_CLASS, &clazz, sizeof(clazz));
FILL_ATTR(cert_templ[3], CKA_CERTIFICATE_TYPE, &cert_type, sizeof(cert_type));
FILL_ATTR(cert_templ[4], CKA_PRIVATE, &_false, sizeof(_false));
What am I missing here ?
","This is the minimal attribute template for certificate object creation that works for me in Pkcs11Admin application:
var certificateAttributes = new List<ObjectAttribute>()
{
    new ObjectAttribute(CKA.CKA_CLASS, CKO.CKO_CERTIFICATE),
    new ObjectAttribute(CKA.CKA_TOKEN, true),
    new ObjectAttribute(CKA.CKA_PRIVATE, false),
    new ObjectAttribute(CKA.CKA_MODIFIABLE, true),
    new ObjectAttribute(CKA.CKA_LABEL, privKeyAttributes[0].GetValueAsString()),
    new ObjectAttribute(CKA.CKA_CERTIFICATE_TYPE, CKC.CKC_X_509),
    new ObjectAttribute(CKA.CKA_SUBJECT, x509Certificate.SubjectDN.GetDerEncoded()),
    new ObjectAttribute(CKA.CKA_ID, privKeyAttributes[1].GetValueAsByteArray()),
    new ObjectAttribute(CKA.CKA_ISSUER, x509Certificate.IssuerDN.GetDerEncoded()),
    new ObjectAttribute(CKA.CKA_SERIAL_NUMBER, new DerInteger(x509Certificate.SerialNumber).GetDerEncoded()),
    new ObjectAttribute(CKA.CKA_VALUE, x509Certificate.GetEncoded())
};

It's written in C# but I'm sure you'll be able to read and understand it.
Note that you will most likely need to parse the certificate in order to get correct values of CKA_SUBJECT, CKA_ISSUER and CKA_SERIAL_NUMBER attributes.
Note also that CKA_LABEL and CKA_ID attributes are usually set to the same values as are set on corresponding private key object. This way certificate object gets ""paired"" with the private key object.
","360","<pkcs#11>","1","0","1","2018-01-06 17:33:45","48129991","0","","","","","2018-01-06 00:34:26",""
"48329378","OpenSession with WebExtension (pkcs11)","I am trying to do Web-extension to Mozilla, which will use pkcs11 to sign, encrypt or verify document, mail.
I am using this api to comunicate with  my eid cards and get slots from them.
https://developer.mozilla.org/en-US/Add-ons/WebExtensions/API/pkcs11
Is it somehow possible to OpenSession with this slots in WebExtension plugin?
Because this  pkcs11 seems like have not supported it yet.
I would like to call some function like C_OpenSession and then C_Login.
Thanks for help
","The only purpose of PKCS#11 javascript API in Mozilla nowadays is to register and unregister PKCS#11 libraries available to Firefox. It's even stated in the documentation: 

The pkcs11 API enables an extension to enumerate PKCS #11 security modules, and to make them accessible to the browser as sources of keys and certificates.

Firefox uses registered PKCS#11 libraries to access client SSL certificates. AFAIK there is no public javascript API that would allow you to call other PKCS#11 functions (such as C_OpenSession or C_Login) provided by these modules.
There used to be window.crypto.signText API available for easy signature creation but Mozilla killed it in Firefox 33. They didn't see it as a big deal because PKCS#11 signing could be implemented with extension and they provided signTextJS extension as a proof. Sadly Mozilla killed it in Firefox 57 when they migrated to WebExtensions and removed support for XPCOM-based add-ons.
If you want to use PKCS#11 API from Firefox nowadays then you need to use/create extension which will spawn local process and communicate with it via native messaging or you'll need to use/create application which will spawn local web server and communicate with it via web requests or web sockets.
","359","<javascript><mozilla><pkcs#11>","1","1","1","2018-01-20 15:39:00","48357920","0","1","","","","2018-01-18 19:59:42",""
"38707469","pkcs11 in python Thread","From within a single python thread, as shown below, I get the error ""Please insert a token in any slot"" and it seems to not see my token.  I change the code to not run from inside a multiprocessing Thread and it works.  To take the PyKCS11 library out of the equation I also tested by using ctypes and wrapping the standard pkcs11 functions implemented in opensc,  I still run into the same issue where it works except when run from a python Thread. What would cause this?
Using pkcs11 from inside a python Thread fails:
from PyKCS11 import LowLevel
import sys
from multiprocessing import Thread


class MyThread(Thread):
    def run(self):
        lib = ""/usr/local/lib/opensc-pkcs11.so"" # place here your PKCS#11 library
        pin = ""12345678"" # place here the pin of your token

        a = LowLevel.CPKCS11Lib()
        info = LowLevel.CK_INFO()
        slotList = LowLevel.ckintlist()

        loadRes = a.Load(lib, 1)
        print ""Load of library '%s' : %s "" % (lib, str(loadRes) )
        if not loadRes: 
            sys.exit(1)
        print ""C_GetInfo: rv="" , hex(a.C_GetInfo(info))
        print ""Library manufacturerID: "", info.GetManufacturerID()
        # listing only slots with a token inside.
        rv = a.C_GetSlotList(1, slotList)
        if (rv != LowLevel.CKR_OK): 
            sys.exit(1)
        if len(slotList) == 0:
            print ""Please insert a token in any slot""
            sys.exit(1)


mythread = MyThread()
mythread.start()
mythread.join()

Using pkcs11 outside of a Thread works:
from PyKCS11 import LowLevel
import sys

def run(self):
        lib = ""/usr/local/lib/opensc-pkcs11.so"" # place here your PKCS#11 library
        pin = ""12345678"" # place here the pin of your token

        a = LowLevel.CPKCS11Lib()
        info = LowLevel.CK_INFO()
        slotList = LowLevel.ckintlist()

        loadRes = a.Load(lib, 1)
        print ""Load of library '%s' : %s "" % (lib, str(loadRes) )
        if not loadRes: 
            sys.exit(1)
        print ""C_GetInfo: rv="" , hex(a.C_GetInfo(info))
        print ""Library manufacturerID: "", info.GetManufacturerID()
        # listing only slots with a token inside.
        rv = a.C_GetSlotList(1, slotList)
        if (rv != LowLevel.CKR_OK): 
            sys.exit(1)
        if len(slotList) == 0:
            print ""Please insert a token in any slot""
            sys.exit(1)

run()

Testing Environment:
OS: OSX Yosemite
pkcs11 middleware: opensc
","More info about multi-threading and PKCS#11 libraries can be found in chapter 6.6.2 of PKCS#11 v2.20 specification:

6.6.2 Applications and threads 
Some applications will access a Cryptoki library in a multi-threaded
  fashion. Cryptoki enables applications to provide information to
  libraries so that they can give appropriate support for
  multi-threading. In particular, when an application initializes a
  Cryptoki library with a call to C_Initialize, it can specify one of
  four possible multi-threading behaviors for the library:

The application can specify that it will not be accessing the library concurrently from multiple threads, and so the library need
  not worry about performing any type of locking for the sake of
  thread-safety.
The application can specify that it will be accessing the library concurrently from multiple threads, and the library must be able to
  use native operation system synchronization primitives to ensure
  proper thread-safe behavior.
The application can specify that it will be accessing the library concurrently from multiple threads, and the library must use a set of
  application-supplied synchronization primitives to ensure proper
  thread-safe behavior.
The application can specify that it will be accessing the library concurrently from multiple threads, and the library must use either
  the native operation system synchronization primitives or a set of
  application-supplied synchronization primitives to ensure proper
  thread-safe behavior.


IMO the most commonly used type in multi-threaded apps is the 2nd type. To activate it you need to pass CKF_OS_LOCKING_OK flag to C_Initialize function. Following code shows how this can be achieved in C# with Pkcs11Interop library:
Pkcs11 pkcs11 = new Pkcs11(libraryPath);

CK_C_INITIALIZE_ARGS initArgs = new CK_C_INITIALIZE_ARGS();
initArgs.Flags = CKF.CKF_OS_LOCKING_OK;

CKR rv = pkcs11.C_Initialize(initArgs);
if ((rv != CKR.CKR_OK) && (rv != CKR.CKR_CRYPTOKI_ALREADY_INITIALIZED))
    throw new Pkcs11Exception(""C_Initialize"", rv);

I believe you need to use similar code in Python. Just guessing here but maybe you need to pass some parameter to LowLevel.CPKCS11Lib() ?
","353","<multiprocessing><ctypes><smartcard><pkcs#11><opensc>","2","0","1","2016-08-02 11:07:46","","0","1","","","","2016-08-01 20:23:17",""
"44979671","HSM AES Key Extraction","I have a Thales nShield HSM in which I have created a (CKA_SENSATIVE, false) AES key that I want to extract but, I can not figure out how to do it in java at all. My Key creation looks just like this:
CK_ATTRIBUTE[] aesKeyObject = new CK_ATTRIBUTE[14];

    try
    {
        aesKeyObject[0] = new CK_ATTRIBUTE(CKA_CLASS, CKO_SECRET_KEY);
        aesKeyObject[1] = new CK_ATTRIBUTE(CKA_KEY_TYPE, CKK_AES);
        aesKeyObject[2] = new CK_ATTRIBUTE(CKA_VALUE_LEN, 32);
        aesKeyObject[3] = new CK_ATTRIBUTE(CKA_TOKEN, true);
        aesKeyObject[4] = new CK_ATTRIBUTE(CKA_LABEL, ""TestAES"".getBytes());
        aesKeyObject[5] = new CK_ATTRIBUTE(CKA_PRIVATE, true);
        aesKeyObject[6] = new CK_ATTRIBUTE(CKA_EXTRACTABLE, true);
        aesKeyObject[7] = new CK_ATTRIBUTE(CKA_WRAP, true);
        aesKeyObject[8] = new CK_ATTRIBUTE(CKA_UNWRAP, true);
        aesKeyObject[9] = new CK_ATTRIBUTE(CKA_ENCRYPT, true);
        aesKeyObject[10] = new CK_ATTRIBUTE(CKA_DECRYPT, true);
        aesKeyObject[11] = new CK_ATTRIBUTE(CKA_TRUSTED, true);
        aesKeyObject[12] = new CK_ATTRIBUTE(CKA_ID, 1550);
        aesKeyObject[13] = new CK_ATTRIBUTE(CKA_SENSITIVE, false);

        CK_MECHANISM mech = new CK_MECHANISM(CKM_AES_KEY_GEN);

        long newAESKeyHandle = p11.C_GenerateKey(hSession, mech, aesKeyObject);     
    }catch(Exception e)
    {
    }

","You need to read CKA_VALUE attribute of generated key object with C_GetAttributeValue function.
","346","<java><export><pkcs#11><hsm>","1","0","1","2017-07-07 21:39:54","","1","1","6490107","","2017-07-07 21:19:25","2017-07-07 21:10:03",""
"43433846","How to set HSM Provider in my CSR","I have a key pair in my hsm and I want to generate CSR from it. I use Open SSL and these code . when CSR is generated, It does not have hsm provider. how to set hsm provider in my csr?
 openssl_conf = openssl_def
[openssl_def]
engines = engine_section
[engine_section]
pkcs11 = pkcs11_section
[pkcs11_section]
engine_id = pkcs11
dynamic_path = enginepkcs11
MODULE_PATH =  cs2_pkcs11
PIN = 123456
init = 0
[req]
default_bits = 2048
prompt = no
default_md = sha256
distinguished_name = dn
[ dn ]

my question is edited. I explain .inf file in comment.
[NewRequest]
Subject=""""
Exportable=True
KeyLength=..
keyUsage=..
UserProtected=FALSE
MachineKeySet=..
ProviderName=""...CSP provider...""
UseExistingKeySet=..
RequestType=..

","A CSR (PKCS#10) cannot have provider information. A CSR is basically your public key + your data like (Subject DN) + signature algorithm, combined in a specific format, and signed by your private key.
More info about PKCS#10 here.
","344","<openssl><pkcs#11><csr><hsm>","1","0","2","2017-05-19 11:50:24","","1","","1039462","","2017-05-19 11:50:24","2017-04-16 04:54:31",""
"43433846","How to set HSM Provider in my CSR","I have a key pair in my hsm and I want to generate CSR from it. I use Open SSL and these code . when CSR is generated, It does not have hsm provider. how to set hsm provider in my csr?
 openssl_conf = openssl_def
[openssl_def]
engines = engine_section
[engine_section]
pkcs11 = pkcs11_section
[pkcs11_section]
engine_id = pkcs11
dynamic_path = enginepkcs11
MODULE_PATH =  cs2_pkcs11
PIN = 123456
init = 0
[req]
default_bits = 2048
prompt = no
default_md = sha256
distinguished_name = dn
[ dn ]

my question is edited. I explain .inf file in comment.
[NewRequest]
Subject=""""
Exportable=True
KeyLength=..
keyUsage=..
UserProtected=FALSE
MachineKeySet=..
ProviderName=""...CSP provider...""
UseExistingKeySet=..
RequestType=..

","Attributes for a CSR have to be specified in the openssl configuration file used. According to the man page you can specify an attribute section.
","344","<openssl><pkcs#11><csr><hsm>","1","0","2","2017-05-19 11:50:24","","1","","1039462","","2017-05-19 11:50:24","2017-04-16 04:54:31",""
"46387195","Empty result in loading certificates from SafeNet HSM","I have a certificate on SafeNet HSM and i can browse HSM slots and see certificates.
But when i try to load certificate with java keytool i get this message ""your keystore containes 0 entries"".
below is explanation how do i connect to HSM.
this is my safenet config file
name = SafeNetCA
library = D:/cryptoki.dll
slot = 1

and this is my java.security file where i add SunPKCS11 provider
security.provider.1=sun.security.provider.Sun
security.provider.2=sun.security.rsa.SunRsaSign
security.provider.3=sun.security.ec.SunEC
security.provider.4=com.sun.net.ssl.internal.ssl.Provider
security.provider.5=com.sun.crypto.provider.SunJCE
security.provider.6=sun.security.jgss.SunProvider
security.provider.7=com.sun.security.sasl.Provider
security.provider.8=org.jcp.xml.dsig.internal.dom.XMLDSigRI
security.provider.9=sun.security.smartcardio.SunPCSC
security.provider.10=sun.security.mscapi.SunMSCAPI
security.provider.10=org.bouncycastle.jce.provider.BouncyCastleProvider
security.provider.11=sun.security.pkcs11.SunPKCS11 C:/ocsp/safenet-provider.cfg

and below is the command i execute on java keytool
keytool -keystore NONE -storetype PKCS11 -list

then it asks HSM password and i enter it correctly.
and finally here is the 

","","341","<java><security><certificate><pkcs#11><hsm>","4","","0","2017-09-24 06:18:44","","1","2","","","","2017-09-24 06:18:44",""
"47723589","What is a good HSM to test with?","What is a good (and cheap) HSM to test my PKCS11 applications with ? I am currently using SoftHSM but would like a physical HSM to test with. 
","The reality is that there are so many variants in PKCS#11 library behaviors working with HSM1 does not mean your application will work with HSM2, they just do so many oddball things you more-or-less need to test with each one. 
With that said you can certainly get some confidence in your use of PKCS#11 by looking at other implementations.
Probably the cheapest way to get confidence your stuff will work with HSMs people actually use is using cloud offerings like those from Amazon (https://aws.amazon.com/cloudhsm/).
Some inexpensive (but probably not representative) devices you can look at include:
- https://www.yubico.com/products/yubihsm/
- https://www.smartcard-hsm.com/
- https://shop.nitrokey.com/shop/product/nitrokey-hsm-7
If you have time you can usually pick up used nShield Edge devices for around $150 on ebay, these are fully representative (API wise) to their big brother HSMs. Be sure only to get ones that come with recent middleware you will have a hard time finding it.
","337","<pkcs#11><hsm>","0","3","2","2018-01-03 18:38:57","47725976","0","2","","","","2017-12-08 23:27:15",""
"47723589","What is a good HSM to test with?","What is a good (and cheap) HSM to test my PKCS11 applications with ? I am currently using SoftHSM but would like a physical HSM to test with. 
","Although mostly U2F devices, but some have more advanced features: (Yubikey, Feitian, Fidesmo)?
https://github.com/hillbrad/U2FReviews
","337","<pkcs#11><hsm>","0","0","2","2018-01-03 18:38:57","47725976","0","2","","","","2017-12-08 23:27:15",""
"16959273","knowing wrap and encrypt","what is the diffrence between wrap and encrypt in pkcs11? I think both work similar.Is it right that wrap only needs a handle for a key while encrypt needs a key for encryption???
","Encryption is about data, wrap about keys.
When you wrap a key, you export it encrypted under another key (symmetric or asymmetric key), which you specify in the wrap operation through a handle.
After the wrap, you don't get a handle, but the key itself (i.e. encoded data).
","335","<pkcs#11>","1","0","1","2013-09-27 13:49:13","","0","","","","","2013-06-06 10:06:09",""
"27685855","Sign with eID remember PIN","I am trying to sign a series (thousands) of PDF with a Belgian eID token while only asking the user's PIN once. Something is wrong with giving my pin as an argument to the function:
        Dim pin As String = ""1234""
        Using pkcs11rsaSignature As Pkcs11RsaSignature = New Pkcs11RsaSignature(librarypath, tokenserial, tokenlabel, pin, ckalabel, ckaId, Net.Pkcs11Interop.PDF.HashAlgorithm.SHA1)
        Dim signingCertificate = pkcs11rsaSignature.GetSigningCertificate()
        Dim otherCertificates = pkcs11rsaSignature.GetAllCertificates()
        Dim certPath = CertUtils.BuildCertPath(signingCertificate, otherCertificates)

        Using pdfreader As PdfReader = New PdfReader(unsignedPdfPath)
            Using outputstream As FileStream = New FileStream(signedPdfPath, FileMode.Create)
                Using PdfStamper As PdfStamper = PdfStamper.CreateSignature(pdfreader, outputstream, ""0""c, Path.GetTempFileName(), True)
                    MakeSignature.SignDetached(PdfStamper.SignatureAppearance, pkcs11rsaSignature, certPath, Nothing, Nothing, Nothing, 0, CryptoStandard.CADES)
                End Using
            End Using
        End Using
    End Using

I am using this code but getting a FormatException: No recognizable numbers found. How can I solve my problem?
bdebaere
","You can safely reuse single instance of Pkcs11RsaSignature class to create multiple signatures. Take a look at Pkcs11RsaSignatureReuseTest which signs 100 PDF documents.
","333","<vb.net><itextsharp><pkcs#11>","0","0","2","2015-04-12 07:06:58","","0","0","","","","2014-12-29 08:49:41",""
"27685855","Sign with eID remember PIN","I am trying to sign a series (thousands) of PDF with a Belgian eID token while only asking the user's PIN once. Something is wrong with giving my pin as an argument to the function:
        Dim pin As String = ""1234""
        Using pkcs11rsaSignature As Pkcs11RsaSignature = New Pkcs11RsaSignature(librarypath, tokenserial, tokenlabel, pin, ckalabel, ckaId, Net.Pkcs11Interop.PDF.HashAlgorithm.SHA1)
        Dim signingCertificate = pkcs11rsaSignature.GetSigningCertificate()
        Dim otherCertificates = pkcs11rsaSignature.GetAllCertificates()
        Dim certPath = CertUtils.BuildCertPath(signingCertificate, otherCertificates)

        Using pdfreader As PdfReader = New PdfReader(unsignedPdfPath)
            Using outputstream As FileStream = New FileStream(signedPdfPath, FileMode.Create)
                Using PdfStamper As PdfStamper = PdfStamper.CreateSignature(pdfreader, outputstream, ""0""c, Path.GetTempFileName(), True)
                    MakeSignature.SignDetached(PdfStamper.SignatureAppearance, pkcs11rsaSignature, certPath, Nothing, Nothing, Nothing, 0, CryptoStandard.CADES)
                End Using
            End Using
        End Using
    End Using

I am using this code but getting a FormatException: No recognizable numbers found. How can I solve my problem?
bdebaere
","The Belgian eID middleware forces a PIN dialog for every signature operation, due to legal requirements.
","333","<vb.net><itextsharp><pkcs#11>","0","0","2","2015-04-12 07:06:58","","0","0","","","","2014-12-29 08:49:41",""
"49297967","Retargeting pkcs11 keys to jcecsp in nCipher HSM","Using PKCS11 api, I am able to generate symmetric keys (DES3) but now I need to retarget these keys to jcecsp for an application which only uses nCipher JCE provider  to access the HSM. I realise that jcecsp is not in the recognised app list of --retarget command.
So my questions is: is there a way to add jcecsp as an supported application for generatekey --retarget command? or this is simply not possible in nShield HSM?
I got this error output:
$ generatekey --retarget jcecsp
ERROR: sorry, application jcecsp is not currently usable

","jcecsp is a little weird in that operations need to go through Java's KeyStore API.  You might be able to use Java keytool's -importkeystore option with SunPKCS11 as source, and nCipher.sworld as destination.  If this works, you'll have effectively retargeted the key.  The Java layer, working through the keystore file, ensures that key can be found again when JCE tries to access it.
You'll be dancing with a lot of options... SunPKCS11 docs are here https://docs.oracle.com/javase/8/docs/technotes/guides/security/p11guide.html and see the Thales docs for what to feed it about the nCipherKM side.
","331","<pkcs#11><jce><hsm>","1","0","1","2018-04-06 00:39:57","","1","","","","","2018-03-15 11:12:03",""
"38881489","Attribute Type Invalid PyKCS11","I have python script that essentially mirrors what this Attribute Dump achieves. In my slot number 2 I have a smart card that is recognized by a card reader. The card contains an RSA keypair and an x509 cert, that can be displayed using openssl. There is no problem with the device reader because the session is opened and proper vendor information is displayed, along with [1] object found. While trying to get all the attributes available in attempt to sign a message using SHA1, I'm receiving an CKR_ATTRIBUTE_TYPE_INVALID exception. I'm not sure where the bad attribute types occures and I've tried to locate the culprit for quite some time, to no avail. 
print ""Found %d objects: %s"" % (len(objects), [x.value() for x in objects])

#-----------------------------CUTOFF FOR BAD ATTRIBUTE TYPE----------------------------
    all_attributes = PyKCS11.CKA.keys()
    # only use the integer values and not the strings like 'CKM_RSA_PKCS'
    all_attributes = [e for e in all_attributes if isinstance(e, int)]
    attributes = [
            [""CKA_ENCRYPT"", PyKCS11.CKA_ENCRYPT],
            [""CKA_CLASS"", PyKCS11.CKA_CLASS],
            [""CKA_DECRYPT"", PyKCS11.CKA_DECRYPT],
            [""CKA_SIGN"", PyKCS11.CKA_SIGN],
            [""CKA_VERIFY"", PyKCS11.CKA_VERIFY],
            [""CKA_ID"", PyKCS11.CKA_ID],
            [""CKA_MODULUS"", PyKCS11.CKA_MODULUS],
            [""CKA_MODULUS"", PyKCS11.CKA_MODULUS],
            [""CKA_MODULUS_BITS"", PyKCS11.CKA_MODULUS_BITS],
            [""CKA_PUBLIC_EXPONENT"", PyKCS11.CKA_PUBLIC_EXPONENT],
            [""CKA_PRIVATE_EXPONENT"", PyKCS11.CKA_PRIVATE_EXPONENT],
            ]
    for o in objects:
        print
        print (red + ""==================== Object: %d ===================="" + normal) % o.value()
        attributes = session.getAttributeValue(o, all_attributes)
        attrDict = dict(zip(all_attributes, attributes))
        if attrDict[PyKCS11.CKA_CLASS] == PyKCS11.CKO_PRIVATE \
           and attrDict[PyKCS11.CKA_KEY_TYPE] == PyKCS11.CKK_RSA:
            m = attrDict[PyKCS11.CKA_MODULUS]
            e = attrDict[PyKCS11.CKA_PUBLIC_EXPONENT]
            if m and e:
                mx = eval('0x%s' % ''.join(chr(c) for c in m).encode('hex'))
                ex = eval('0x%s' % ''.join(chr(c) for c in e).encode('hex'))
            if sign:
                try:
                    toSign = ""12345678901234567890""  # 20 bytes, SHA1 digest
                    print ""* Signing with object 0x%08X following data: %s"" % (o.value(), toSign)
                    signature = session.sign(o, toSign)
                    s = ''.join(chr(c) for c in signature).encode('hex')
                    sx = eval('0x%s' % s)
                    print ""Signature:""
                    print hexdump(''.join(map(chr, signature)), 16)
                    if m and e:
                        print ""Verifying using following public key:""
                        print ""Modulus:""
                        print hexdump(''.join(map(chr, m)), 16)
                        print ""Exponent:""
                        print hexdump(''.join(map(chr, e)), 16)
                        decrypted = pow(sx, ex, mx)  # RSA
                        print ""Decrypted:""
                        d = hexx(decrypted).decode('hex')
                        print hexdump(d, 16)
                        if toSign == d[-20:]:
                            print ""*** signature VERIFIED!\n""
                        else:
                            print ""*** signature NOT VERIFIED; decrypted value:""
                            print hex(decrypted), ""\n""
                    else:
                        print ""Unable to verify signature: MODULUS/PUBLIC_EXP not found""
                except:
                    print ""Sign failed, exception:"", str(sys.exc_info()[1])
            if decrypt:
                if m and e:
                    try:
                        toEncrypt = ""12345678901234567890""
                        # note: PKCS1 BT2 padding should be random data,
                        # but this is just a test and we use 0xFF...
                        padded = ""\x00\x02%s\x00%s"" % (""\xFF"" * (128 - (len(toEncrypt)) - 3), toEncrypt)
                        print ""* Decrypting with 0x%08X following data: %s"" % (o.value(), toEncrypt)
                        print ""padded:\n"", dump(padded, 16)
                        encrypted = pow(eval('0x%sL' % padded.encode('hex')), ex, mx)  # RSA
                        encrypted1 = hexx(encrypted).decode('hex')
                        print ""encrypted:\n"", dump(encrypted1, 16)
                        decrypted = session.decrypt(o, encrypted1)
                        decrypted1 = ''.join(chr(i) for i in decrypted)
                        print ""decrypted:\n"", dump(decrypted1, 16)
                        if decrypted1 == toEncrypt:
                            print ""decryption SUCCESSFULL!\n""
                        else:
                            print ""decryption FAILED!\n""
                    except:
                        print ""Decrypt failed, exception:"", str(sys.exc_info()[1])
                else:
                    print ""ERROR: Private key don't have MODULUS/PUBLIC_EXP""

        print ""Dumping attributes:""
        for q, a in zip(all_attributes, attributes):
            if a == None:
                # undefined (CKR_ATTRIBUTE_TYPE_INVALID) attribute
                continue
            if q == PyKCS11.CKA_CLASS:
                print format_long % (PyKCS11.CKA[q], PyKCS11.CKO[a], a)
            elif q == PyKCS11.CKA_CERTIFICATE_TYPE:
                print format_long % (PyKCS11.CKA[q], PyKCS11.CKC[a], a)
            elif q == PyKCS11.CKA_KEY_TYPE:
                print format_long % (PyKCS11.CKA[q], PyKCS11.CKK[a], a)
            elif session.isBin(q):
                print format_binary % (PyKCS11.CKA[q], len(a))
                if a:
                    print dump(''.join(map(chr, a)), 16),
            elif q == PyKCS11.CKA_SERIAL_NUMBER:
                print format_binary % (PyKCS11.CKA[q], len(a))
                if a:
                    print hexdump(a, 16),
            else:
                print format_normal % (PyKCS11.CKA[q], a)

The bad entry type in the attribute list is somewhere in the code above. I'm not sure which is causing it to fail. I have confused myself after learning the LowLevel API first.
Slot no: 2
   slotDescription: ONMIKEY CardMan 3111
  manufacturerID: OMNIKEY
TokenInfo
  label: SSS Card 001
  manufacturerID: Siemens
  model: Siem. OS V4.x
Opened session 0x00020001

Found 1 objects: [1]

==================== Object: 1 ====================
Error: CKR_ATTRIBUTE_TYPE_INVALID (0x00000012)

Is the best approach to construct my own attribute list?
","","327","<python><encryption><digital-signature><pkcs#11><hsm>","1","","0","2016-10-14 21:48:25","","4","1","5128464","","2016-10-14 21:48:25","2016-08-10 18:58:16",""
"34626585","How can I call a web applet method via JMeter","I have a java web applet which tries to connect to a hardware token through PKCS#11 and sign a String. When the web page is loaded the sign applet is loaded either. When a dialog comes up in the web form, the user should insert the hardware token's password and after clicking the sign button, the web form call applet's sign method and sign the sending String via the certificate on the token. 
Note that all these steps are executing on the dialog without any sending request to the server, so the JMeter can not sense what is happening until the signed text is sending through a request to the server to save in DB.
(The signed String is different each time and it's based on the different ID which is existed on the field of the web form)
The problem is how can I call the applet's sign method with JMeter because the signed String is based on the ID, It would be different in Load Test either. So The JMeter should not send a static signed String in each load and should sign the different String for every thread.
I tried to copy applet's jar file in the lib folder of JMeter and call Sign method via BSF Sampler but I get the PKCS#11 Exception in the line which I used doPrivilaged in applet's code. 
Is there any help?
","I found the solution,
Because PKCS#11 is in package sun.security.pkcs11.SunPKCS11 we should use JDK1.7. 
The problem was JMeter was not set to use the JDK7. So I edited JMeter.bat file and change 
set JM_LAUNCH=java.exe

with
set JM_LAUNCH=""C:\Java\jdk1.7.0_03\bin\java.exe""

Hurraaaay. The problem solved :)
","326","<applet><jmeter><sign><pkcs#11><signed-applet>","0","0","1","2016-01-06 06:57:03","34627350","0","","2922639","","2016-01-06 06:41:45","2016-01-06 05:59:22",""
"5858638","How to p/invoke this methode?","typedef CK_CALLBACK_FUNCTION(CK_RV, CK_CREATEMUTEX)(
CK_VOID_PTR_PTR ppMutex
);

regards,
/* I need also to get my hsm informaton via a C# application by P/Invoke PKCS#11*/
","Please see this PInvoke.net page:
http://www.pinvoke.net/default.aspx/kernel32.createmutex
The C# signature is:
[DllImport(""kernel32.dll"")]
static extern IntPtr CreateMutex(IntPtr lpMutexAttributes, bool bInitialOwner, string lpName);

","326","<c#><pkcs#11><hsm>","0","2","1","2011-05-02 15:08:49","","0","","71141","","2011-05-02 15:08:49","2011-05-02 14:50:58",""
"43749526","HSM via SunPKCS11 works on command line, fails in Tomcat-hosted webapp","I have an application running under Tomcat 9, using JDK 1.8.0_111 as the runtime, on Windows 7 x64, that's trying to use a NitroKey HSM through the SunPKCS11 CSP and the OpenSC driver.
This works fine from the command line, including from a shell running under the same account as the Tomcat service uses.
Under Tomcat, however, the SunPKCS11 constructor throws a ProviderException with the message ""Initialization failed"". So far I've debugged this down to C_GetSlotInfo returning CKR_GENERAL_ERROR; that becomes a PKCS11Exception (with no further detail) and that gets wrapped in the ProviderException.
The slot number is correct - the NitroKey only has a single slot, so the number is 0. Besides the application itself, I have no problems using the HSM with keytool, OpenSSL, etc through PKCS#11. (Or through CAPI, for that matter.) It only fails under Tomcat.
Any ideas? Some other people have posted queries about this sort of failure if the HSM (or smart card) has been removed and re-inserted - see for example remove and insert smartcard using sunpkcs#11 and tomcat - but that's not the case here. The token hasn't been removed and remains accessible to everything else. But those questions imply that there's no inherent restriction on using SunPKCS11 and OpenSC under Tomcat.
I'm going to grab the JDK sources and debug further into C_GetSlotInfo, and try some other experiments such as spawning keytool with the appropriate options to see if it can talk to the card. But if anyone has any other suggestions I'd be glad to hear them.
In case anyone wants details: I'm invoking the SunPKCS11 constructor with a single argument, the path to the configuration file. It's reading the file successfully (I get a different exception if the file path is bogus or the file is unreadable). The file is very simple:
# PKCS#11 configuration file for Java to use NitroKey in slot 0 on Windows
name = NitroKey
library = c:/Windows/System32/opensc-pkcs11.dll
slotListIndex = 0

At the point of failure, SunPKCS11 hasn't seen any other details yet, such as the key container name or HSM PIN. Those would come later if the constructor didn't throw the exception.
","Some users including me encountered similar problem on Microsoft IIS application server. Changing user account to LocalSystem or LocalService usually helped to resolve the problem.
","324","<java><tomcat><smartcard><pkcs#11>","0","0","1","2017-05-03 14:25:08","43762834","0","","-1","","2017-05-23 12:18:06","2017-05-03 01:13:24",""
"52135889","CreateObject PKCS#11 fail","I tried to comment on this link https://stackoverflow.com/a/39798597/448266, but could not due to the reputation #.
I have tried the sample and run well, but when I changed to arbitrary value it returns exception Message: Net.Pkcs11Interop.Common.Pkcs11Exception : Method C_CreateObject returned 2147483968
I am using safenet HSM SW.
plainKeyValue = Common.HelperFunctions.StringToByteArray(""112233445566778899001122334455665566998844335511"");

Below is the snapshot of the code, I changed slightly on the key value (as above).
 public static string generateAndCreateKeyObj()
    {
        using (IPkcs11 pkcs11 = Settings.Factories.Pkcs11Factory.CreatePkcs11(Settings.Factories, Configurations.Pkcs11LibraryPath, Settings.AppType))
        {
            // Find first slot with token present
            ISlot slot = Helpers.GetUsableSlot(pkcs11, Configurations.default_slot);

            // Open RW session
            using (Net.Pkcs11Interop.HighLevelAPI.ISession session = slot.OpenSession(SessionType.ReadWrite))
            {
                // Login as normal user
                session.Login(Configurations.user_type, ""1234"");

                // Prepare attribute template of new key
                List<IObjectAttribute> objectAttributes = new List<IObjectAttribute>();
                objectAttributes.Add(Settings.Factories.ObjectAttributeFactory.CreateObjectAttribute(CKA.CKA_TOKEN, false)); //not stored in token
                objectAttributes.Add(Settings.Factories.ObjectAttributeFactory.CreateObjectAttribute(CKA.CKA_CLASS, CKO.CKO_SECRET_KEY));
                objectAttributes.Add(Settings.Factories.ObjectAttributeFactory.CreateObjectAttribute(CKA.CKA_KEY_TYPE, CKK.CKK_DES3));
                objectAttributes.Add(Settings.Factories.ObjectAttributeFactory.CreateObjectAttribute(CKA.CKA_ENCRYPT, true));
                objectAttributes.Add(Settings.Factories.ObjectAttributeFactory.CreateObjectAttribute(CKA.CKA_DECRYPT, true));
                objectAttributes.Add(Settings.Factories.ObjectAttributeFactory.CreateObjectAttribute(CKA.CKA_WRAP, true));
                objectAttributes.Add(Settings.Factories.ObjectAttributeFactory.CreateObjectAttribute(CKA.CKA_UNWRAP, true));
                objectAttributes.Add(Settings.Factories.ObjectAttributeFactory.CreateObjectAttribute(CKA.CKA_EXTRACTABLE, true));

                // Specify key generation mechanism
                IMechanism mechanism = Settings.Factories.MechanismFactory.CreateMechanism(CKM.CKM_DES3_KEY_GEN);

                // Generate key
                IObjectHandle secret_key = session.GenerateKey(mechanism, objectAttributes);


                ////////////////////////////////////////////////////////////////////////////////////////

                // Export the key
                byte[] plainKeyValue = null;
                List<IObjectAttribute> readAttrs = session.GetAttributeValue(secret_key, new List<CKA>() { CKA.CKA_VALUE });
                if (readAttrs[0].CannotBeRead)
                    throw new Exception(""Key cannot be exported"");
                else
                    plainKeyValue = readAttrs[0].GetValueAsByteArray();

                plainKeyValue = Common.HelperFunctions.StringToByteArray(""112233445566778899001122334455665566998844335511"");

                // Prepare attribute template of new key
                List<IObjectAttribute> oa = new List<IObjectAttribute>();
                oa.Add(Settings.Factories.ObjectAttributeFactory.CreateObjectAttribute(CKA.CKA_LABEL, ""Imported key""));
                oa.Add(Settings.Factories.ObjectAttributeFactory.CreateObjectAttribute(CKA.CKA_CLASS, CKO.CKO_SECRET_KEY));
                oa.Add(Settings.Factories.ObjectAttributeFactory.CreateObjectAttribute(CKA.CKA_KEY_TYPE, CKK.CKK_DES3));
                oa.Add(Settings.Factories.ObjectAttributeFactory.CreateObjectAttribute(CKA.CKA_TOKEN, true));
                oa.Add(Settings.Factories.ObjectAttributeFactory.CreateObjectAttribute(CKA.CKA_ENCRYPT, true));
                oa.Add(Settings.Factories.ObjectAttributeFactory.CreateObjectAttribute(CKA.CKA_DECRYPT, true));
                oa.Add(Settings.Factories.ObjectAttributeFactory.CreateObjectAttribute(CKA.CKA_VALUE, plainKeyValue));


                IObjectHandle importedKey = session.CreateObject(oa);


                // Test encryption with generated key and decryption with imported key
                using (IMechanism mechanismx = Settings.Factories.MechanismFactory.CreateMechanism(CKM.CKM_DES3_CBC, session.GenerateRandom(8)))
                {
                    byte[] sourceData = ConvertUtils.Utf8StringToBytes(""Our new password"");
                    byte[] encryptedData = session.Encrypt(mechanismx, secret_key, sourceData);
                    byte[] decryptedData = session.Decrypt(mechanismx, importedKey, encryptedData);
                    if (Convert.ToBase64String(sourceData) != Convert.ToBase64String(decryptedData))
                        throw new Exception(""Encryption test failed"");
                }
                // Destroy object
                session.DestroyObject(importedKey);
                session.DestroyObject(secret_key);
                session.Logout();

                return HelperFunctions.ByteArrayToString(plainKeyValue);
            }
        }
    }

 // convert from string to array
    public static byte[] StringToByteArray(string hex)
    {
        byte[] result;
        try
        {
            result = Enumerable.Range(0, hex.Length)
                         .Where(x => x % 2 == 0)
                         .Select(x => Convert.ToByte(hex.Substring(x, 2), 16))
                         .ToArray();

            return result;
        }
        catch (Exception e)
        {
            throw new Exception(e.Message); ;
        }
    }

","Exception you are getting says that low level PKCS#11 function C_CreateObject returned vendor specific error 0x80000140. You will need to discuss documentation provided by the device vendor or contact vendor support to get better understanding how to handle or avoid this specific error.
","323","<c#><pkcs#11><hsm><pkcs11interop><cryptoki>","0","0","2","2018-09-24 15:02:35","52482223","0","0","","","","2018-09-02 10:02:20",""
"52135889","CreateObject PKCS#11 fail","I tried to comment on this link https://stackoverflow.com/a/39798597/448266, but could not due to the reputation #.
I have tried the sample and run well, but when I changed to arbitrary value it returns exception Message: Net.Pkcs11Interop.Common.Pkcs11Exception : Method C_CreateObject returned 2147483968
I am using safenet HSM SW.
plainKeyValue = Common.HelperFunctions.StringToByteArray(""112233445566778899001122334455665566998844335511"");

Below is the snapshot of the code, I changed slightly on the key value (as above).
 public static string generateAndCreateKeyObj()
    {
        using (IPkcs11 pkcs11 = Settings.Factories.Pkcs11Factory.CreatePkcs11(Settings.Factories, Configurations.Pkcs11LibraryPath, Settings.AppType))
        {
            // Find first slot with token present
            ISlot slot = Helpers.GetUsableSlot(pkcs11, Configurations.default_slot);

            // Open RW session
            using (Net.Pkcs11Interop.HighLevelAPI.ISession session = slot.OpenSession(SessionType.ReadWrite))
            {
                // Login as normal user
                session.Login(Configurations.user_type, ""1234"");

                // Prepare attribute template of new key
                List<IObjectAttribute> objectAttributes = new List<IObjectAttribute>();
                objectAttributes.Add(Settings.Factories.ObjectAttributeFactory.CreateObjectAttribute(CKA.CKA_TOKEN, false)); //not stored in token
                objectAttributes.Add(Settings.Factories.ObjectAttributeFactory.CreateObjectAttribute(CKA.CKA_CLASS, CKO.CKO_SECRET_KEY));
                objectAttributes.Add(Settings.Factories.ObjectAttributeFactory.CreateObjectAttribute(CKA.CKA_KEY_TYPE, CKK.CKK_DES3));
                objectAttributes.Add(Settings.Factories.ObjectAttributeFactory.CreateObjectAttribute(CKA.CKA_ENCRYPT, true));
                objectAttributes.Add(Settings.Factories.ObjectAttributeFactory.CreateObjectAttribute(CKA.CKA_DECRYPT, true));
                objectAttributes.Add(Settings.Factories.ObjectAttributeFactory.CreateObjectAttribute(CKA.CKA_WRAP, true));
                objectAttributes.Add(Settings.Factories.ObjectAttributeFactory.CreateObjectAttribute(CKA.CKA_UNWRAP, true));
                objectAttributes.Add(Settings.Factories.ObjectAttributeFactory.CreateObjectAttribute(CKA.CKA_EXTRACTABLE, true));

                // Specify key generation mechanism
                IMechanism mechanism = Settings.Factories.MechanismFactory.CreateMechanism(CKM.CKM_DES3_KEY_GEN);

                // Generate key
                IObjectHandle secret_key = session.GenerateKey(mechanism, objectAttributes);


                ////////////////////////////////////////////////////////////////////////////////////////

                // Export the key
                byte[] plainKeyValue = null;
                List<IObjectAttribute> readAttrs = session.GetAttributeValue(secret_key, new List<CKA>() { CKA.CKA_VALUE });
                if (readAttrs[0].CannotBeRead)
                    throw new Exception(""Key cannot be exported"");
                else
                    plainKeyValue = readAttrs[0].GetValueAsByteArray();

                plainKeyValue = Common.HelperFunctions.StringToByteArray(""112233445566778899001122334455665566998844335511"");

                // Prepare attribute template of new key
                List<IObjectAttribute> oa = new List<IObjectAttribute>();
                oa.Add(Settings.Factories.ObjectAttributeFactory.CreateObjectAttribute(CKA.CKA_LABEL, ""Imported key""));
                oa.Add(Settings.Factories.ObjectAttributeFactory.CreateObjectAttribute(CKA.CKA_CLASS, CKO.CKO_SECRET_KEY));
                oa.Add(Settings.Factories.ObjectAttributeFactory.CreateObjectAttribute(CKA.CKA_KEY_TYPE, CKK.CKK_DES3));
                oa.Add(Settings.Factories.ObjectAttributeFactory.CreateObjectAttribute(CKA.CKA_TOKEN, true));
                oa.Add(Settings.Factories.ObjectAttributeFactory.CreateObjectAttribute(CKA.CKA_ENCRYPT, true));
                oa.Add(Settings.Factories.ObjectAttributeFactory.CreateObjectAttribute(CKA.CKA_DECRYPT, true));
                oa.Add(Settings.Factories.ObjectAttributeFactory.CreateObjectAttribute(CKA.CKA_VALUE, plainKeyValue));


                IObjectHandle importedKey = session.CreateObject(oa);


                // Test encryption with generated key and decryption with imported key
                using (IMechanism mechanismx = Settings.Factories.MechanismFactory.CreateMechanism(CKM.CKM_DES3_CBC, session.GenerateRandom(8)))
                {
                    byte[] sourceData = ConvertUtils.Utf8StringToBytes(""Our new password"");
                    byte[] encryptedData = session.Encrypt(mechanismx, secret_key, sourceData);
                    byte[] decryptedData = session.Decrypt(mechanismx, importedKey, encryptedData);
                    if (Convert.ToBase64String(sourceData) != Convert.ToBase64String(decryptedData))
                        throw new Exception(""Encryption test failed"");
                }
                // Destroy object
                session.DestroyObject(importedKey);
                session.DestroyObject(secret_key);
                session.Logout();

                return HelperFunctions.ByteArrayToString(plainKeyValue);
            }
        }
    }

 // convert from string to array
    public static byte[] StringToByteArray(string hex)
    {
        byte[] result;
        try
        {
            result = Enumerable.Range(0, hex.Length)
                         .Where(x => x % 2 == 0)
                         .Select(x => Convert.ToByte(hex.Substring(x, 2), 16))
                         .ToArray();

            return result;
        }
        catch (Exception e)
        {
            throw new Exception(e.Message); ;
        }
    }

","Thanks @jariq for your response. 
I found out that in safenet hsm when creating a key object, the key plain value must be with odd parity bit, if not then the error mentioned above will occur.
Hope this will help anyone who stumbled the same error.
","323","<c#><pkcs#11><hsm><pkcs11interop><cryptoki>","0","0","2","2018-09-24 15:02:35","52482223","0","0","","","","2018-09-02 10:02:20",""
"49271512","PKCS#11 - creating ECDSA key","Consider i have sample sample ECDSA public key with the following parameters:
Point Value
03 42
00 04  C9 A3 63 92 24 9C 7C 3B
CD 6B 3D 89 F6 16 13 21  B9 AC 99 42 60 C7 4A E2
7D 4A 03 80 BE 80 47 C1  3D FA 08 70 F9 8F 9F 65
BB 81 A5 5B 7C 6B 21 ED  7F 18 82 D2 07 7A 89 5E
56 10 F6 EC AC 39 14 B5

and
secp256k1
30 81 A2 02 01 01 30 2C  06 07 2A 86 48 CE 3D 01
01 02 21 00 FF FF FF FF  FF FF FF FF FF FF FF FF
FF FF FF FF FF FF FF FF  FF FF FF FF FF FF FF FE
FF FF FC 2F 30 06 04 01  00 04 01 07 04 41 04 79
BE 66 7E F9 DC BB AC 55  A0 62 95 CE 87 0B 07 02
9B FC DB 2D CE 28 D9 59  F2 81 5B 16 F8 17 98 48
3A DA 77 26 A3 C4 65 5D  A4 FB FC 0E 11 08 A8 FD
17 B4 48 A6 85 54 19 9C  47 D0 8F FB 10 D4 B8 02
21 00 FF FF FF FF FF FF  FF FF FF FF FF FF FF FF
FF FE BA AE DC E6 AF 48  A0 3B BF D2 5E 8C D0 36
41 41 02 01 01 

These values are extracted directly private key with openssl and I belieive are ASN.1 encoded.
What values should I put in CKA_EC_POINT and CKA_EC_PARAMS when creating ECDSA public key on HSM? If I put these values directly to attribute is not working (I cannot f.e. validate signature).
","","322","<pkcs#11><ecdsa><hsm><softhsm>","2","","0","2018-03-14 07:02:11","","0","1","","","","2018-03-14 07:02:11",""
"49176348","Why can't I verify signature with PKCS#11?","Consider, I have created PKCS#7 message:
ContentInfo contentInfo = new ContentInfo(someByteArrayToSign);
SignedCms signedCms = new SignedCms(contentInfo);

var certificateFromFile = new X509Certificate2(""myCert.pfx"");

var signer = new CmsSigner(certificateFromFile);
signer.DigestAlgorithm = new Oid(""1.3.14.3.2.26"");
signedCms.ComputeSignature(signer);

var myCmsMessage = signedCms.Encode();
SendBytesOverNetwork(myCmsMessage);

Now, I'd like to very signature. The following scenario works (using BounceCastle and PKCS11.Interop):
var signedPayloadCms = new CmsSignedData(GetBytesFromNetwork());

var data = (byte[])signedPayloadCms.SignedContent.GetContent();
byte[] signature = null;

foreach (SignerInformation signer in signedPayloadCms.GetSignerInfos().GetSigners())
{
    if (signature != null)
    {
        throw new NotSupportedException(""Multiple signature"");
    }

    signature = signer.GetSignature();
}

var algCkm = CKM.CKM_SHA1_RSA_PKCS;
var mechanism = new Mechanism(algCkm);
Session.Verify(mechanism, somePublicKey.Handle, data, signature, out var isValid)
//isValid  == true

But when I use CKM_RSA_PKCS and manually calculate HASH, something is wrong:
var algHash = CKM.CKM_SHA_1;
var dataHash = Session.Digest(new Mechanism(algHash), data);

var algCkm = CKM.CKM_RSA_PKCS;
var mechanism = new Mechanism(algCkm);
Session.Verify(mechanism, somePublicKey.Handle, dataHash, signature, out var isValid)
//isValid  == false

What I am missing? Why manually calculated hash is not valid?
","It turned out, that hash needs to be wraped with DigestInfo structure. The simplest ways to do is to add prefix: (prefix valid only for SHA-1 hashes):
var dataHash = Session.Digest(new Mechanism(algHash), data);
dataHash = HexToByteArray(""30 21 30 09 06 05 2B 0E 03 02 1A 05 00 04 14"")
             .Concat(dataHash).ToArray();

 var algCkm = CKM.CKM_RSA_PKCS
...

Found in RF3447C: https://www.ietf.org/rfc/rfc3447.txt
How to create DigestInfo by self: C# - How to calculate ASN.1 DER encoding of a particular hash algorithm?
","320","<c#><.net-core><pkcs#11><pkcs#7><softhsm>","-1","0","1","2019-05-08 20:03:06","49191404","2","","10607772","","2019-05-08 20:03:06","2018-03-08 15:08:47",""
"48984988","crypto.dll error 'C_Initialize - This object is not connected to a module.'","I'm getting this error when I try to access. How to access HSM in .NET C# with crypto.dll library? 
signature.addKeyInfo(new ECertificate(cert.getEncoded()));
var c = HsmManager.getInstance().getSigner(""MyPassword"", cert);
static Module pkcs11Module = Module.getInstance(@""C:\Program Files\SafeNet\Protect Toolkit 5\Protect Toolkit C SDK\bin\sw\cryptoki.dll"");

[MethodImpl(MethodImplOptions.Synchronized)]
public static HsmManager getInstance() { 
   pkcs11Module.initialize(null);
   Slot[] slots = pkcs11Module.getSlotList(true);   
}

","I solved my problem.
Solution: HSM device drivers are x86bit. I tried to use x86bit PKCS#11 even client computer is x64. (I tried x64 before)
Then imported x86bit libraries to my project and it works!
","319","<c#><.net><pkcs#11><hsm>","0","0","1","2018-03-01 11:38:59","49048930","2","3","5128464","","2018-03-01 01:05:32","2018-02-26 09:17:54",""
"15001246","How to bind private key with certificate chain?","I'm implementing a PKCS#11 JCE provider for Android and there's a method from java.security.KeyStoreSpi which I don't understand:
public void engineSetKeyEntry(String name, Key key, char[] pin,
            Certificate[] certificateChain)
How can I bind private key with certificate chain? By CKA_ID attribute?
","I'm not sure to fully understand the question, but as far as I know, the PKCS#11 standard does not fully define how a Private Key / Public Key and a Certificate are linked all together. Rather, the standard (v3.01) does recommend to share the same CKA_ID between the 3 objects.
If you want to make a link between several obejct this is what I would also recommend. If we speak only about Asymetric keys, then you can find other means to link a public key to other related crypto materials (such as comparing the public Modulus for RSA world)
","317","<java><android><security><provider><pkcs#11>","3","1","1","2017-01-24 14:48:17","","2","","474189","","2013-02-21 11:40:47","2013-02-21 11:34:06",""
"18718176","Why iaik wrapper does not find the key pair?","I am using softhsm as pkcs11 provider, and my platform is ubuntu 64
I want to encrypt using softhsm, so I imported a key into slot 0, it told that the key is imported and when I try to import another key with that ID it says the ID is used, so the provider has imported the key. But when I try to find the key by code, the wrapper can not find any key. Is there any problem with my code? or what??
Module pkcs11Module = Module.getInstance(""libsofthsm.so"");
pkcs11Module.initialize(null  );
Info info = pkcs11Module.getInfo();
System.out.println(info);
Slot[] slotsWithToken = pkcs11Module.getSlotList(Module.SlotRequirement.TOKEN_PRESENT);
Token token = slotsWithToken[0].getToken();
Session session = token.openSession(Token.SessionType.SERIAL_SESSION,
                                                Token.SessionReadWriteBehavior.RO_SESSION,
                                                null,
                                                null);
RSAPrivateKey searchTemplate = new RSAPrivateKey();
searchTemplate.getSign().setBooleanValue(Boolean.TRUE);
session.findObjectsInit(searchTemplate);
Object[] matchingKeys;
RSAPrivateKey signatureKey;
if ((matchingKeys = session.findObjects(1)).length > 0) {
    signatureKey = (RSAPrivateKey) matchingKeys[0];
} else {
    signatureKey = null; //It goes here so no key was found.
}

","","314","<encryption><pkcs#11><softhsm>","0","","0","2015-06-11 21:34:37","","3","","3102264","","2015-06-11 21:34:37","2013-09-10 11:48:21",""
"52903154","HSM and custom module","We are implementing safety-critical system, where the FIPS 140-2 compliant HSM (hardware security module) is required to generate and store key material, perform encryption/decryption and run custom code with the following requirements set for the custom module:

Module is available over RPC
Module has access to all HSM keys and services
Module has in-memory and persistent storage (1+ MB both)
Module memory is secured (FIPS 140-2 level 3+)

As for the HSM services itself, it is required to:

Support AES, RSA and HMAC
Has aliases for keys
Generate new keys with alias over the PKCS11 interface
Retrieve public key and certificate with alias over the PKCS11 interface
Delete keys with alias over the PKCS11 interface

As there is very little information available about HSM products due the NDA, it is very hard to evaluate the requirements and options. Are these requirement met by any standards, or by vendor specific solutions, such as Utimaco?
","If you really need to run custom code inside the HSM device you have several choices across several vendors:
SafeNet ProtectServer (and SafeNet Luna Network/PCIe HSM since version 7.4)

SafeNet ProtectServer HSMs offer a unique level of flexibility for
  application developers to create their own firmware and execute it
  within the secure confines of the HSM. Known as functionality modules,
  the toolkits provide a comprehensive facility to develop and deploy
  custom firmware.

Thales nShield (CodeSafe)

Most nShield HSMs also support the unique ability to host critical
  applications within the hardened security boundary, so you can
  establish tamper-resistant business processes in addition to
  protecting cryptographic operations.

Utimaco CryptoServer (SDK)

The CryptoServer Software Development Kit (SDK) is the professional
  development environment for all Utimaco Hardware Security Modules. It
  enables integrators and end-users to create specific applications,
  e.g. proprietary algorithms, custom key derivation procedures or
  complex protocols that run in the tamper-proof environment of the
  CryptoServer Hardware Security Module. As the SDK provides full access
  to the Utimaco base firmware, custom firmware modules can be developed
  in a very short time frame.


My bet is that if you really need FIPS 140 certification you would need to certify your custom code running inside HSM as well (as such code is very powerful and can e.g. bypass access control, extract keys in plain text... -- thus it breaks any security assumptions easily).

Your requirements should be fulfillable by any of the products (even without running custom code inside the HSM -- it depends on the level of control your application needs).
Good luck!
Disclaimer: I am no crypto expert, so please do validate my thoughts.
","314","<security><encryption><pkcs#11><hsm><key-management>","-1","2","1","2019-09-19 08:35:37","","2","1","5705247","","2018-10-20 06:52:30","2018-10-20 06:47:29",""
"16384004","Using NSS for calling pkcs#11 functions","I want to use NSS (Network Security Services) for using AES functions through pkcs#11 interface, but I can not find any example. I use C++ for calling pkcs#11 functions.
How should I do it?
","After search on the internet, I found another soft token, so I use the new soft token instead of NSS. The new soft token is OpenCryptoki. You can see more about this token in the fallowing link:
http://www.ibm.com/developerworks/linux/library/s-pkcs/
","312","<c++><aes><pkcs#11><nss>","0","0","1","2013-05-11 13:03:00","","2","","892568","","2013-05-05 11:31:56","2013-05-05 11:24:26",""
"8091050","How to check certificate and key pair created by CSP or PKCS?","I have a problem with keypair and certificate generate in token using csp or pkcs, and i must to distict this then i want to know 
""How to check certificate and key pair created by CSP or PKCS ??"".
","You should check their respective API as the first step.
For PKCS, you should read PKCS11 standard as mentioned on: http://www.rsa.com/rsalabs/node.asp?id=2133
This API interface will contains the method to check on the certificate.
Take note that in general, CSP is used by only Microsoft Product, while PKCS is used by the other software vendors.
","310","<c><rsacryptoserviceprovider><pkcs#11>","0","1","1","2013-04-27 01:37:11","","0","","2125578","","2013-04-27 01:37:11","2011-11-11 07:46:03",""
"38730319","Need help using M2Crypto and USB Token","I am using M2Crypto (0.22.6rc4). I want to use engine_pkcs11 from the OpenSC project and the Aladdin PKI client for token based authentication to encrypt and decrypt data.
from M2Crypto import Engine, m2, RSA, BIO

slot_id = ""slot_01""
pin = ""password""
dynamic = Engine.load_dynamic_engine(""pkcs11"", ""/usr/lib/ssl/engines/libpkcs11.so"")
pkcs11 = Engine.Engine(""pkcs11"")
pkcs11.ctrl_cmd_string(""MODULE_PATH"", ""/usr/lib/watchdata/ICP/lib/libwdpkcs_icp.so"")
pkcs11.init()
r = pkcs11.ctrl_cmd_string(""PIN"", pin)

pubkey = pkcs11.load_public_key(slot_id, pin)
priv = pkcs11.load_private_key(slot_id, pin)
enc = pubkey.get_rsa().public_encrypt(""teste"", RSA.pkcs1_oaep_padding)
dec = priv.get_rsa().private_decrypt(enc, RSA.pkcs1_oaep_padding)
print dec

For some reason I can encrypt data, but when try to decrypt I get an instance of RSA_pub and this error:
    File ""pkcs11.py"", line 14, in <module>
    dec = priv.get_rsa().private_decrypt(enc, RSA.pkcs1_oaep_padding)
  File ""/usr/lib/python2.7/dist-packages/M2Crypto/RSA.py"", line 279, in private_decrypt
    raise RSAError, 'RSA_pub object has no private key'
M2Crypto.RSA.RSAError: RSA_pub object has no private key

Any help would be appreciated!
","There is a bug in the M2Crypto wrapping of RSA private keys.  A work around is use the low level M2Crypto API to directly access the private key object.
def decrypt(cipher_text):
    # Load the key using high level API
    engine = Engine.Engine('pkcs11')
    engine.init()
    key_slot = 'slot_1-id_01'
    privKey = engine.load_private_key(key_slot)

    # Get a pointer to the low level API object
    rsa_ptr = m2.pkey_get1_rsa(privKey.pkey)
    rsaWrapper = RSA.RSA(rsa_ptr, 1)

    # Decrypt with low level API
    results = m2.rsa_private_decrypt(rsaWrapper.rsa, ciphertext, 1)

","308","<python><encryption><pkcs#11><m2crypto><opensc>","0","0","1","2016-10-12 01:49:32","","0","1","1255289","","2016-08-02 21:07:56","2016-08-02 20:58:26",""
"53160052","JAVA XML Signature with PKCS11 provider HSM","I'm trying to sign a XML using a private key in my HSM but I'm getting an error because the private key contains ""sensitive"" information so now I'm trying to use my PKCS11 provider to sign.
I'm using Luna JSP provider.
That's how I generate my signature using a private key and from what I understand with my error com.safenetinc.luna.exception.LunaException: Cannot access sensitive attributes, I need to use a PKCS11 provider to be able to sign inside my HSM but I don't see how to implement it with a XMLSignatureFactory.
XMLSignatureFactory fac;
try {
  fac = XMLSignatureFactory.getInstance(""DOM"", (Provider) Class.forName(providerName).newInstance());
}
catch(InstantiationException | IllegalAccessException | ClassNotFoundException e) {
  e.printStackTrace();
}

Reference ref;
SignedInfo si;
try {
  ref = fac.newReference("""",
                         fac.newDigestMethod(xmldss.getDigestMethod(), null),
                         Collections.singletonList(fac.newTransform(Transform.ENVELOPED,
                                                                    (TransformParameterSpec) null)),
                         null,
                         null);

  si = fac.newSignedInfo(fac.newCanonicalizationMethod(xmldss.getCanonicalizationMethod(),
                                                       (C14NMethodParameterSpec) null),
                         fac.newSignatureMethod(xmldss.getSignatureMethod(), null),
                         Collections.singletonList(ref));
}
catch(NoSuchAlgorithmException | InvalidAlgorithmParameterException e) {
  e.printStackTrace();
}

DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
dbf.setNamespaceAware(true);
Document document;
try {
  document = (dbf.newDocumentBuilder().parse(xmlDocumentStream));
}
catch(SAXException | IOException | ParserConfigurationException e) {
  e.printStackTrace();
}

DOMSignContext dsc = new DOMSignContext(keyPair.getPrivate(), document.getDocumentElement());
dsc.setDefaultNamespacePrefix(xmldss.getDigitalSignerPrefix());

XMLSignature signature = fac.newXMLSignature(si, buildKeyInfo(fac, signatureInfos));
try {
  signature.sign(dsc);
}
catch(MarshalException | XMLSignatureException e) {
  e.printStackTrace();
}

","After digging in DOMXMLSignature I found that the property org.jcp.xml.dsig.internal.dom.SignatureProvider can be use to set a provider.
So my fix was to do 
Provider lunaProvider = Security.getProvider(""LunaProvider"");
dsc.setProperty(""org.jcp.xml.dsig.internal.dom.SignatureProvider"", lunaProvider);

","303","<java><pkcs#11><xml-signature>","0","1","1","2018-11-05 20:39:14","53161871","1","","7018308","","2018-11-05 20:14:07","2018-11-05 18:22:38",""
"45426149","Erroring out creating an ECDSA Key pair with pkcs11interop","I am connecting to Gemalto HSM which supports secp256r1. I have the following code to create an ECDSA key pair using Pkcs11interop. I am getting the paramsBytes using BouncyCastle NistNamedCurves and X962Parameters. 
The HSM keeps comming back with CKR_ATTRIBUTE_TYPE_INVALID. I am new to ECDSA so I may have missed something. Any ideas?
                X9ECParameters x9Ec = NistNamedCurves.GetByName(""P-256"");
                X962Parameters x962 = new X962Parameters(x9Ec);
                byte[] paramsBytes =  x962.GetDerEncoded();

                // The CKA_ID attribute is intended as a means of distinguishing multiple key pairs held by the same subject
                byte[] ckaId = session.GenerateRandom(20);

                // Prepare attribute template of new public key
                List<ObjectAttribute> publicKeyAttributes = new List<ObjectAttribute>();
                publicKeyAttributes.Add(new ObjectAttribute(CKA.CKA_PRIVATE, false));
                publicKeyAttributes.Add(new ObjectAttribute(CKA.CKA_LABEL, keyName));
                publicKeyAttributes.Add(new ObjectAttribute(CKA.CKA_ID, ckaId));
                publicKeyAttributes.Add(new ObjectAttribute(CKA.CKA_VERIFY, true));
                publicKeyAttributes.Add(new ObjectAttribute(CKA.CKA_ECDSA_PARAMS, paramsBytes));

                // Prepare attribute template of new private key
                List<ObjectAttribute> privateKeyAttributes = new List<ObjectAttribute>();
                privateKeyAttributes.Add(new ObjectAttribute(CKA.CKA_PRIVATE, true));
                privateKeyAttributes.Add(new ObjectAttribute(CKA.CKA_LABEL, keyName));
                privateKeyAttributes.Add(new ObjectAttribute(CKA.CKA_ID, ckaId));
                privateKeyAttributes.Add(new ObjectAttribute(CKA.CKA_SENSITIVE, true));
                privateKeyAttributes.Add(new ObjectAttribute(CKA.CKA_SIGN, true));
                privateKeyAttributes.Add(new ObjectAttribute(CKA.CKA_ECDSA_PARAMS, paramsBytes));

                // Generate key pair
                Mechanism mechanism = new Mechanism(CKM.CKM_ECDSA_KEY_PAIR_GEN);
                ObjectHandle publicKeyHandle = null;
                ObjectHandle privateKeyHandle = null;
                session.GenerateKeyPair(mechanism, publicKeyAttributes, privateKeyAttributes, out publicKeyHandle,
                    out privateKeyHandle);

","Found out what was going on. The HSM did not like the 
privateKeyAttributes.Add(new ObjectAttribute(CKA.CKA_ECDSA_PARAMS, paramsBytes));

on the private key. PKCS states that the ECDSA params need to be on the public key and can't be on the private key and this implementation enforced that.
","300","<pkcs#11><ecdsa><hsm><gemalto><pkcs11interop>","1","2","1","2017-08-01 18:23:07","45443263","0","0","","","","2017-07-31 22:20:04",""
"32760448","Net.Pkcs11 - Native Dll","I'm using Net.Pkcs11 in orther to work with BIT4ID miniLector EVO smartcard.
Net.Pkcs11 requires the native dll, usually provided with smartcard driver, however I don't know which dll I need, neither if that dll has been provided with the smartcard driver.
Can you help me?
","Well, I answer to my question by myself.
I've found the dll that incoming with smartcard driver.
Its name is FNMT_P11.dll and Net.Pkcs11 works properly.
","292","<c#><.net><smartcard><pkcs#11>","0","0","1","2015-09-24 19:45:37","32764237","0","","5128464","","2015-09-24 19:45:37","2015-09-24 11:42:48",""
"26258313","Sign multiple PDFs without calling login for each file","When I will sign multiple PDF's I have one problem.
My code is:
public void signPDF(X509Certificate cert, List<File> fInl, List<File> fOutl,
                    PrivateKey key)
            throws IOException, NoSuchAlgorithmException, 
                   NoSuchProviderException, InvalidParameterSpecException,
                   DocumentException, InvalidKeyException,
                   SignatureException, KeyStoreException,
                   CertificateException, UnrecoverableKeyException {

    Certificate[] cc = new Certificate []{cert};

    int i=0;

    for(i=0;i<fInl.size();i++){
        PdfReader reader = new PdfReader(fInl.get(i).getAbsolutePath());
        FileOutputStream outputFile = new FileOutputStream(fOutl.get(i).getAbsolutePath());
        PdfStamper stamper = PdfStamper.createSignature(reader, outputFile, '\0');
        PdfSignatureAppearance sap = stamper.getSignatureAppearance();
        sap.setVisibleSignature(new Rectangle(100, 100, 200, 200), 1, null);

        Calendar cal = Calendar.getInstance();
        PdfSignature dic = new PdfSignature(PdfName.ADOBE_PPKLITE, PdfName.ADBE_PKCS7_DETACHED);
        dic.setDate(new PdfDate(cal));
        dic.setName(PdfPKCS7.getSubjectFields((X509Certificate)cc[0]).getField(""CN""));
        sap.setCryptoDictionary(dic);
        sap.setLayer2Text(""Digitally signed by ""+ dic.get(PdfName.NAME) +""\n\nDate: "" + cal.getTime().toString());

        HashMap<PdfName,Object> exc = new HashMap<PdfName,Object>();
        exc.put(PdfName.CONTENTS, new Integer(0x2502));
        sap.preClose(exc);

        PdfPKCS7 pk7 = new PdfPKCS7(key, cc, null, ""SHA1"", null, false);
        MessageDigest messageDigest = MessageDigest.getInstance(""SHA1"");
        byte buf[] = new byte[8192];
        int n;
        InputStream inp = sap.getRangeStream();

        while ((n = inp.read(buf)) > 0) {
            messageDigest.update(buf, 0, n);
        }

        byte hash[] = messageDigest.digest();
        byte sh[] = pk7.getAuthenticatedAttributeBytes(hash, cal);
        pk7.update(sh, 0, sh.length);

        PdfDictionary dic2 = new PdfDictionary();
        byte sg[] = pk7.getEncodedPKCS7(hash, cal);
        byte out[] = new byte[0x2500 / 2];

        System.arraycopy(sg, 0, out, 0, sg.length);
        dic2.put(PdfName.CONTENTS, new PdfString(out).setHexWriting(true));
        sap.close(dic2);
    }
}

And it works, but calls ""login token"" for each file.
In this line byte sh[] = pk7.getEncodedPKCS7(hash, cal); the login of certificate installed is always called and I want to call it only once.
How can I fix it?
","You are getting this because you have that line in the for loop. So the line will be executed for each iteration. 
To solve this, you have to first authenticate and then loop the results.
Hope it helps! 
Keep on coding 
Ares.
","290","<java><pdf><itext><pkcs#11>","2","1","1","2014-10-20 09:57:14","","2","3","1416405","","2014-10-13 16:09:31","2014-10-08 13:36:38",""
"31064708","Is PKCS11 verify function supported in NSS 3.18.1 Public function","I am trying to call PK11_Verify inside a js.
let PK11_Verify = null;
PK11_Verify = declareFunction(""PK11_Verify"", nss3, [ SECStatus, SECKEYPublicKey, SECItem.ptr, SECItem.ptr, ctypes.voidptr_t ]);

// ...

let rv = PK11_Verify(tokenPublicKey, signature.address(), digest.address(), null);

I get message errors back as:

Couldn't find function PK11_Verify to declare
  loadLibraries failed: Error: Couldn't find function symbol in Library

I have checked the version NSS in the web browser NSS 3.18.1 Basic ECC and it supports PK11_Verify as public function. Any idea what will be the root cause?
Thank you
","This probably the reason why PK11_Verify is not listed as function in nss3.dll. The function simple not exist as public API.

","287","<javascript><firefox-addon><pkcs#11><jsctypes><nss>","1","2","1","2015-10-06 04:14:02","","3","","519413","","2015-06-26 08:36:48","2015-06-26 04:06:03",""
"32042981","Failing to add pkcs#11 module to secmod database","I am trying to install a PKCS#11 module into Mozilla Firefox via an MSI setup application. After doing some search through the internet, I bumped into the modutil tool which has a wide variety of responsibilities especially in my case for installing / uninstalling the PKCS#11 module to NSS security databases. I downloaded the latest source code of modutil and built it using MozillaBuild.
Also, I writing a C code to add module to database using secmod_addnewmodule, which returns ""-1"" as a error.
Following is my code to add module where configdir is the path to secmoddb database.
int rv = NSS_Initialize(configdir, """", """", SECMOD_DB, NSS_INIT_FORCEOPEN );
hr = SECMOD_AddNewModule(""test"",""D:\\Pkcs\\PKCS11_VSC.dll"",internalMechanismFlags,internalEnableFlags);

Does anybody know how I can overcome this issue, and is there any unseen aspect to work with this utility. Also, is there a solution to install/uninstall pkcs#11 module for all user profiles with one common process. Finally, is there a better solution to do the task of installation using my setup. I am using WiX Toolset to create MSI setup
","if NSS_Initialize fails to open secmod database we cannot add the module to database.
the nss library automatically takes the default flags required for adding database.
secmod _deletemodule deletes the module which is added to the database.
","286","<c><firefox><pki><msiexec><pkcs#11>","0","0","1","2015-09-24 05:10:04","32753795","0","2","1075324","","2015-08-17 05:51:14","2015-08-17 04:49:09",""
"55652246","Where to find luna safenet client logs?","We are using luna SDK to develop algorithms to perform cryptographic operations using HSM. In doing so, we installed Luna client software in our application. The problem is I am not able to find the logs generated by the client software. After my search, I found cklog.txt contains the logs but I can't find this file on the client installation.
","Normally, you can find cklog.txt in your luna client installation folder.  
eg : C:\Program Files\SafeNet\LunaClient\cklog.txt

If you don't find, you need to check the configuration file if you have the below entry:
Windows: 
C:\Program Files\SafeNet\LunaClient\crystoki.ini

[CkLog2]
Enabled=1
NewFormat=1
File=C:\Program Files\SafeNet\LunaClient\cklog.txt
FileSize=100
Error=C:\Program Files\SafeNet\LunaClient\cklog_error.txt
LibNT32=C:\Program Files\SafeNet\LunaClient\win32\cryptoki.dll
LibNT=C:\Program Files\SafeNet\LunaClient\cryptoki.dll

Linux: 
/etc/Chrystoki.conf

CkLog2 = {
    LibUNIX=/usr/lib/libCryptoki2.so;
    LibUNIX64=/usr/lib/libCryptoki2_64.so
    Enabled=1;
    File=/usr/safenet/lunaclient/cklog.txt;
    Error=/usr/safenet/lunaclient/error.txt;
    NewFormat=1;
    LoggingMask=ALL_FUNC;
}

","284","<pkcs#11><hsm><gemalto>","0","1","1","2019-04-15 20:16:18","","0","1","5128464","","2019-04-15 20:16:18","2019-04-12 13:03:35",""
"55327503","How to fix method C_GenerateKeyPair returned CKR_FUNCTION_FAILED","I am trying to use the Pkcs11Interop library to get my own certificate from HSM(Safenet inc) when i have generated public/private key i got error ""Method C_GenerateKeyPair returned CKR_FUNCTION_FAILED""
My code
if (Net.Pkcs11Interop.Common.Platform.Uses64BitRuntime)
{
    loggerLibraryPath = @""C:\inetpub\wwwroot\ETPkcs11\ETPkcsII\libs\pkcs11-logger-x64.dll"";
}
else
{
    loggerLibraryPath = @""C:\inetpub\wwwroot\ETPkcs11\ETPkcsII\libs\pkcs11-logger-x86.dll"";
}
System.Environment.SetEnvironmentVariable(""PKCS11_LOGGER_LIBRARY_PATH"", pkcs11LibraryPath);
System.Environment.SetEnvironmentVariable(""PKCS11_LOGGER_LOG_FILE_PATH"", loogerLogFilePath);
System.Environment.SetEnvironmentVariable(""PKCS11_LOGGER_FLAGS"", ""64"");

if (System.IO.File.Exists(loogerLogFilePath))
{
    System.IO.File.Delete(loogerLogFilePath);
}

using (Pkcs11 pkcs11 = new Pkcs11(loggerLibraryPath, AppType.SingleThreaded))
{
    LibraryInfo libraryInfo = pkcs11.GetInfo();
    var aviSlot = pkcs11.GetSlotList(SlotsType.WithTokenPresent).Where(slot => slot.GetSlotInfo().SlotFlags.TokenPresent).FirstOrDefault();

    using (Session session = aviSlot.OpenSession(SessionType.ReadWrite))
    {
        // Login as normal user
        session.Login(CKU.CKU_USER, ""xxxxxxxx"");
        byte[] ckaId = session.GenerateRandom(20);

        // Prepare attribute template of new public key
        List<ObjectAttribute> publicKeyAttributes = new List<ObjectAttribute>();
        publicKeyAttributes.Add(new ObjectAttribute(CKA.CKA_TOKEN, true));
        publicKeyAttributes.Add(new ObjectAttribute(CKA.CKA_PRIVATE, false));
        publicKeyAttributes.Add(new ObjectAttribute(CKA.CKA_LABEL, Settings.ApplicationName));
        publicKeyAttributes.Add(new ObjectAttribute(CKA.CKA_ID, ckaId));
        publicKeyAttributes.Add(new ObjectAttribute(CKA.CKA_ENCRYPT, true));
        publicKeyAttributes.Add(new ObjectAttribute(CKA.CKA_VERIFY, true));
        publicKeyAttributes.Add(new ObjectAttribute(CKA.CKA_VERIFY_RECOVER, true));
        publicKeyAttributes.Add(new ObjectAttribute(CKA.CKA_WRAP, true));
        publicKeyAttributes.Add(new ObjectAttribute(CKA.CKA_MODULUS_BITS, 1024));
        publicKeyAttributes.Add(new ObjectAttribute(CKA.CKA_PUBLIC_EXPONENT, new byte[] { 0x01, 0x00, 0x01 }));

        // Prepare attribute template of new private key
        List<ObjectAttribute> privateKeyAttributes = new List<ObjectAttribute>();
        privateKeyAttributes.Add(new ObjectAttribute(CKA.CKA_TOKEN, true));
        privateKeyAttributes.Add(new ObjectAttribute(CKA.CKA_PRIVATE, true));
        privateKeyAttributes.Add(new ObjectAttribute(CKA.CKA_LABEL, Settings.ApplicationName));
        privateKeyAttributes.Add(new ObjectAttribute(CKA.CKA_ID, ckaId));
        privateKeyAttributes.Add(new ObjectAttribute(CKA.CKA_SENSITIVE, true));
        privateKeyAttributes.Add(new ObjectAttribute(CKA.CKA_DECRYPT, true));
        privateKeyAttributes.Add(new ObjectAttribute(CKA.CKA_SIGN, true));
        privateKeyAttributes.Add(new ObjectAttribute(CKA.CKA_SIGN_RECOVER, true));
        privateKeyAttributes.Add(new ObjectAttribute(CKA.CKA_UNWRAP, true));

        // Specify key generation mechanism
        Mechanism mechanism = new Mechanism(CKM.CKM_RSA_PKCS_KEY_PAIR_GEN);

        // Generate key pair
        ObjectHandle publicKeyHandle = null;
        ObjectHandle privateKeyHandle = null;
        session.GenerateKeyPair(mechanism, publicKeyAttributes, privateKeyAttributes, out publicKeyHandle, out privateKeyHandle);

        // Do something interesting with generated key pair
        // Destroy keys
        session.DestroyObject(privateKeyHandle);
        session.DestroyObject(publicKeyHandle);

        session.Logout();
    }
}

Here are some of the log

0x00002478 : 0x00001af8 :   Attribute 7
  0x00002478 : 0x00001af8 :    Attribute: 265 (CKA_SIGN_RECOVER)
  0x00002478 : 0x00001af8 :    pValue: 0597E850
  0x00002478 : 0x00001af8 :    ulValueLen: 1
  0x00002478 : 0x00001af8 :    *pValue: HEX(01)
  0x00002478 : 0x00001af8 :   Attribute 8
  0x00002478 : 0x00001af8 :    Attribute: 263 (CKA_UNWRAP)
  0x00002478 : 0x00001af8 :    pValue: 0597E830
  0x00002478 : 0x00001af8 :    ulValueLen: 1
  0x00002478 : 0x00001af8 :    pValue: HEX(01)
  0x00002478 : 0x00001af8 :    End attribute template *
  0x00002478 : 0x00001af8 :  phPublicKey: 0643EA74
  0x00002478 : 0x00001af8 :  *phPublicKey: 0
  0x00002478 : 0x00001af8 :  phPrivateKey: 0643EA70
  0x00002478 : 0x00001af8 :  *phPrivateKey: 0
  0x00002478 : 0x00001af8 : Returning 6 (CKR_FUNCTION_FAILED)
  0x00002478 : 0x00001af8 : ****************************** 2019-03-22 16:37:32 *
  0x00002478 : 0x00001af8 : Calling C_CloseSession
  0x00002478 : 0x00001af8 : Input
  0x00002478 : 0x00001af8 :  hSession: 2490369
  0x00002478 : 0x00001af8 : Returning 0 (CKR_OK)
  0x00002478 : 0x00001af8 : ****************************** 2019-03-22 16:37:32 *
  0x00002478 : 0x00001af8 : Calling C_Finalize
  0x00002478 : 0x00001af8 : Input
  0x00002478 : 0x00001af8 :  pReserved: 00000000
  0x00002478 : 0x00001af8 : Returning 0 (CKR_OK)  

","Unfortunately PKCS#11 API does not provide any details on why C_GenerateKeyPair function failed but many PKCS#11 libraries support some kind of internal logging mechanism which may reveal the real cause of error. Exact steps needed to enable logging should be present in the documentation provided by the PKCS#11 library vendor.
","274","<c#><.net><pkcs#11><pkcs11interop>","1","-1","1","2019-04-07 21:14:36","","5","0","11242032","","2019-03-25 05:04:25","2019-03-24 19:12:13",""
"49203712","YubiHSM 2 PKCS11 Cant connect","I have a YubiHSM2 HSM device and want to access it via PKCS11. I have installed the YubiHSM2 drivers as well as Libp11 and OpenSC tools.
However, when I try to connect and generate a key via:
pkcs11-tool --module 'C:\Users\myUser\yubihsm2-sdk\bin\yubihsm_pkcs11.dll --login --pin 0001password \
    --keypairgen --key-type rsa:2048 --label ""my_key"" --usage-sign

I receive:
error: Failed to laod pkcs11 module
Aborting.

I am thinking maybe I am adressing the dll file wrong? I am trying to implement this on Windows, I had it working on Unix System where I had to address a xxx.so file.
Does anyone have an idea or similar experience with a HSM module?
Thanks for your help!
Best regards
LikeAKemper
","@everyone.
I found the issue. It only works if I am already in the directory where the DLL is located. Now I am not sure why this is an issue for the command so let me know if you something about that.
Anyway thank you.
","272","<security><openssl><pkcs#11><hsm><yubico>","0","1","1","2018-03-10 09:13:04","","3","","1945087","","2018-03-10 00:58:16","2018-03-09 23:32:44",""
"34438531","How can PKCS#11 find/read a data object by its ""Registered Identifier"", ""Object Identifier"", or ""Application Card URL""?","My employer wants me to use a PKCS#11 DLL to read the CHUID record from an older smartcard, which he thinks is a ""CAC NG"" card. I've found all sorts of information about the CHUID record on those cards...

The Registered Identifier (RID, A0 00 00 01 16);
The ""App ID"" and GSC-IS Object Identifier (both 30 00);
The ""Application Card URL"" (F3 10 A000000116 01 3000 3000 00 00 00000000);

...but I haven't found a way to use any of that through the PKCS11 interface, or at least I haven't found a way that will coax the card to give up that information. It seems to want either a label or some kind of DER-encoded ASN.1 object identifier (which the documentation I've found explicitly states is NOT the GSC-IS Object Identifier).
I've also tried listing ALL the objects on the card, hoping to find a label I could use, but before entering the PIN there are only six objects visible: two each of ""ID Certificate"", ""Signature Certificate"", and ""Encryption Certificate"". There are two objects with no labels that appear after entering the PIN, but the CHUID record is always supposed to be available, so I'm assuming those aren't related.
There are no data objects available on this card at all, according to the PKCS11 library.
Is this even a ""CAC NG"" card? Could it be the older ""CAC v1"" instead, and not have a CHUID record at all?
","Turns out that it wasn't a ""CAC NG"" card, but some much older specification that we still haven't been able to determine, and there was no CHUID record at all.
","271","<smartcard><pkcs#11><cac>","0","0","1","2016-01-07 16:12:10","34659931","1","1","","","","2015-12-23 15:08:51",""
"47277164","How to create PKCS#11 keystore","I have an activated partition on Luna HSM and configured the HSM. 
My server can talk to HSM, cert are exchanged and vtl verify works.
Installed OpenDJ(Directory server, or Could be any application) then I wanted to use an existing certificate on PCKS11 token. 
Could anyone please provide instructions to use the cert from HSM?
Error I get- 
 Could not access the PKCS#11 keystore. Check that the JVM security settings
have been configured to use a PKCS#11 keystore and that a valid password has
been provided if needed. Error details: PKCS11 not found
","","270","<jvm><pkcs#11><hsm><opendj>","0","","0","2017-11-14 03:28:24","","3","","","","","2017-11-14 03:28:24",""
"14229187","pkcs11engine doesn't logout after engine cleanup()","I want to do the following:

Generate key pair on security token (I use Aladdin tokens) (PyKCS11)
Generate PKCS#10 request (I use M2Crypto + engine_pkcs11 for it) and send it to CA.
Receive signed X.509 certificate from CA and write it to security token. 

Request generation is done like this:
    def generate_request(
        self, uid, cn=None, user_pin=None, keyid=TOKEN_TEMP_KEY_ID):
    """"""Generate PKCS#10 certificate request
    @param keyid: ID of key to use for certificate request generation
    @type keyid: str
    @param uid: UID to put in request subject distinguished name
    @type uid: str
    @param cn: Common name (if any) of subject to use for certificate
    request generation
    @type cn: str
    @param user_pin: user PIN code. User privileges are required for
    signing of certificate request
    @type user_pin: str
    @return PKCS10 request in PEM format signed by token's private key
    """"""
    Engine.load_dynamic()
    e = Engine.Engine('dynamic')
    e.ctrl_cmd_string('SO_PATH', PKCS11_ENGINE_PATH)
    e.ctrl_cmd_string('LIST_ADD', '1')
    e.ctrl_cmd_string('LOAD', None)
    e.ctrl_cmd_string('MODULE_PATH', PKCS11_LIBRARY_PATH)
    a = Engine.Engine('pkcs11')
    a.init()
    # Hex-encoded key id should be provided to that function
    k = a.load_private_key(hexlify(keyid), pin=user_pin)
    req = X509.Request()
    subject_name = PKCS10_DN_PREFIX + (('UID', MBSTRING_ASC, uid, -1, -1, 0),)
    if cn:
        subject_name = subject_name + (('CN', MBSTRING_ASC, cn, -1, -1, -1),)
    name = X509.X509_Name()
    for entry in subject_name:
        name.add_entry_by_txt(*entry)
    req.set_subject(name)
    req.set_pubkey(k)
    req.sign(k, 'sha1')
    reqpem = req.as_pem()
    Engine.cleanup()
    return reqpem

Here is the code that writes certificate to security token:
def write_certificate(self, cert_pem, so_pin):
    """"""Write certificate to token
    @param cert_pem: certificate in pem format
    @type cert_pem: str
    @param so_pin: PIN code of security officer
    @type so_pin: str
    """"""
    cert = X509.load_cert_string(cert_pem)
    if cert.check_ca(): # What label to use?
        label = TOKEN_CA_CERT_LABEL
    else:
        label = TOKEN_USER_CERT_LABEL
    tCert = (
        (PyKCS11.LowLevel.CKA_CLASS, PyKCS11.LowLevel.CKO_CERTIFICATE),
        (PyKCS11.LowLevel.CKA_CERTIFICATE_TYPE, PyKCS11.LowLevel.CKC_X_509),
        (PyKCS11.LowLevel.CKA_TOKEN, True),
        (PyKCS11.LowLevel.CKA_PRIVATE, False),
        (PyKCS11.LowLevel.CKA_LABEL, label),
        (PyKCS11.LowLevel.CKA_ID, make_key_id(cert.get_pubkey())),
        (PyKCS11.LowLevel.CKA_SUBJECT, cert.get_subject().as_der()),
        (PyKCS11.LowLevel.CKA_ISSUER, cert.get_issuer().as_der()),
        (PyKCS11.LowLevel.CKA_SERIAL_NUMBER, cert.get_serial_number()),
        (PyKCS11.LowLevel.CKA_VALUE, cert.as_der()))
    s = self.lib.openSession(self.slot, PyKCS11.CKF_RW_SESSION)
    s.login(so_pin, PyKCS11.LowLevel.CKU_SO)
    s.createObject(tCert)
    s.logout()
    s.closeSession()

The problem is that after request generation i get CKR_USER_ANOTHER_ALREADY_LOGGED_IN error. I looked into engine_pkcs11 source code and in engine_pkcs11.c (https://github.com/OpenSC/engine_pkcs11/blob/master/src/engine_pkcs11.c) file there is a function called static EVP_PKEY *pkcs11_load_key. It's quite long so here is a part of it:
    /* Now login in with the (possibly NULL) pin */
    if (PKCS11_login(slot, 0, pin)) {
        /* Login failed, so free the PIN if present */
        if (pin != NULL) {
            OPENSSL_cleanse(pin, pin_length);
            free(pin);
            pin = NULL;
            pin_length = 0;
        }
        fail(""Login failed\n"");
    }

So, as i understand login is performed when key is used (PKCS#10 request generation requires key). If login is performed then i believe corresponding logout should be performed also, but i couldn't find. Here is source of ENGINE_finish() function:
int pkcs11_finish(ENGINE * engine)
{
    if (ctx) {
    PKCS11_CTX_unload(ctx);
    PKCS11_CTX_free(ctx);
    ctx = NULL;
}
if (pin != NULL) {
    OPENSSL_cleanse(pin, pin_length);
    free(pin);
    pin = NULL;
    pin_length = 0;
}
return 1;
}

Is it possible to somehow (maybe implicitly) make logout from security token on step 2)?
","Finally I could do it like this:
Before loading engine I open new session and login into it
After i finished working i close sessions (using closeSession() is not enough)
So request generation is done like this.
    s = self.lib.openSession(self.slot, PyKCS11.CKF_RW_SESSION)
    s.login(user_pin)
    Engine.load_dynamic()

...
and i added after Engine cleanup
    a.finish()
    Engine.cleanup()        
    s.logout()
    s.closeAllSessions()

I also had to do some patching to Session class in PyKCS11 source code because there is a typo (closeAllSession instead of closeAllSessions):
def closeAllSessions(self):
    """"""
    C_CloseAllSessions
    """"""
    rv = self.lib.C_CloseAllSessions(self.slot)
    if rv != CKR_OK:
        raise PyKCS11Error(rv)

Hope that this helps
","268","<python><logout><m2crypto><pkcs#11>","0","1","1","2013-10-26 12:51:31","14243646","0","","321731","","2013-10-26 12:51:31","2013-01-09 06:05:33",""
"54549999","Module pkcs#11 from Python","I'm trying to use pkcs11 from Python and I have a problem. I had view many examples and all of them start with the same code. However, when I execute it, console raises error in the third line of the code. 
Code: 
import pkcs11
import os
# Initialise our PKCS#11 library
lib = pkcs11.lib(os.environ['PKCS11_MODULE'])
token = lib.get_token(token_label='DEMO')

Error in the line: 
lib = pkcs11.lib(os.environ['PKCS11_MODULE'])

Error:
Traceback (most recent call last):
File ""<stdin>"", line 1, in <module>
File ""/usr/lib/python2.7/UserDict.py"", line 40, in __getitem__
raise KeyError(key)
KeyError: 'PKCS11_MODULE'

","pkcs11 wraps a native library. It expects to find that library in a path given by the PKCS11_MODULE environment variable.
You should set that environment variable to where you have installed the native component.
$ export PKCS11_MODULE='/some/path'
$ python myscript.py

","265","<python><pkcs#11><keyerror>","0","0","1","2019-02-06 09:33:06","","1","","7851470","","2019-02-06 09:33:06","2019-02-06 09:10:03",""
"55902007","Digitally Signing a PDF in Modern Firefox/Chrome/Edge Browsers","I have been down several rabbit holes looking for an answer for this.
I have a web application, written in AngularJS, that currently requires IE11 and the Acrobat plugin to digitally sign a PDF form. However, the plugin is garbage on IE11 and is not supported on modern browsers (which I define as Firefox, Chrome, and Edge. Safari will not be supported by my company.)
Because the application is AngularJS (and NOT running on Node), I need a javascript solution to sign the PDF. Not only that, but signature certificates are held on a smart card, meaning that I need a crypto library that can access the certs through some sort of PKCS#11 interface. In Javascript. Opening the forms externally in Acrobat is currently not acceptable to the customer.
I've looked at multiple libraries without being able to figure out a straight answer:

PKI.js
pkcs11.js
hwcrypto.js
graphene.js

None of these packages provide enough information to me to know whether to research them further.
Can anyone out there provide me further information or direction?
Thanks,
Jason
","This answer aims at workarounds, rather than actual answers. 
This is because there's no API in the browser at the moment you could use to obtain smart card certificate's private key and use it. This has been supposedly discussed in the Web Crypto API and as far as I remember - the consensus was this should not be supported for security reasons (which I stronly disagree!). 
You, as hundreds or thousands other developers (us included), are out of luck.
First workaround involves a .NET ClickOnce desktop app that is deployed at the server and run from the server. The app gets the security context of the current user session in runtime arguments so that the session is shared between the browser and the app that runs beside the browser. In this sense, running this app independently (without the session in the browser) would cause authorization issues during the communication with the server. 
The app uses server's APIs to first retrieve the document user is about to sign. Then then app uses the local certificate store with no restrictions (as it's a regular desktop app), encrypts the document and sends it back to the server. 
Pros: ClickOnce apps can be invoked from within the browser.
Cons: this requires .NET runtime at the client.
Second workaround involves a Java desktop app that is installed independently at the client's machine. You provide install packages for selected OSes (say Windows, Linux, MacOS), the user downloads the install package and installs the app in their OS.
Then, when the browser is supposed to sign a document, you provide an instruction that tells the user to run the app in the background. The app, when run, exposes an HTTP listener on a localhost and fixed port with two services

a push service that accepts the document data to be signed
a pull service that exposes the signed document, when it's available

As you guess, it's the browser that does the request, the browser makes a request to the localhost:port and uploads the document data to the push service. The Java app switches from waiting for the document to signing the document state. The user is supposed to use the app - pick a cert from the store (no restrictions since is a regular Java desktop app) and sign the document. Your browser in the background pings the pull service of the app and when the data is ready, the browser downloads it. Then, the browser uploads the signed document to the actual server, using the actual authenticated session.
There's a potential security hole here, as any local app or any opened web page could ping the pull service and download the document (which of course you don't want). We are aware of two fixes to this.
First, you can have yet another service in the Java app that returns a one-time authentication token (a guid for example) that is meant to be read once and then supplied with every call to the pull service as an authentication token. If any other malicious app or webpage reads the token before your's app web page does, your page will get errors from the pull service (as the one-time token has been apparently stolen and was not available). The web page could signal a communication error here and warn the user of a potential security issue. 
Second way to fix the hole involve an argument to the pull service call that is provided by the application server and put in the page's script as a value, a token signed by the server's certificate. Your Java app can have the public key of the server's certificate so that the Java app is able to verify the argument's signature. But no other app (and no other page) will be able to forge the token (as the token's signature's private key is only available at your server) and there's no easy way to steal the valid token from the page's body. 
Pros: the Java app could possibly target multiple OSes
Cons: this still requires the Java runtime at the client
Both workarounds are tested in production and both work well for years. I hope this gives you one possible direction your final solution could be based on.
","264","<javascript><pkcs#11>","3","1","2","2019-05-18 00:06:03","55903142","6","","","","","2019-04-29 11:03:33",""
"55902007","Digitally Signing a PDF in Modern Firefox/Chrome/Edge Browsers","I have been down several rabbit holes looking for an answer for this.
I have a web application, written in AngularJS, that currently requires IE11 and the Acrobat plugin to digitally sign a PDF form. However, the plugin is garbage on IE11 and is not supported on modern browsers (which I define as Firefox, Chrome, and Edge. Safari will not be supported by my company.)
Because the application is AngularJS (and NOT running on Node), I need a javascript solution to sign the PDF. Not only that, but signature certificates are held on a smart card, meaning that I need a crypto library that can access the certs through some sort of PKCS#11 interface. In Javascript. Opening the forms externally in Acrobat is currently not acceptable to the customer.
I've looked at multiple libraries without being able to figure out a straight answer:

PKI.js
pkcs11.js
hwcrypto.js
graphene.js

None of these packages provide enough information to me to know whether to research them further.
Can anyone out there provide me further information or direction?
Thanks,
Jason
","@Json, you said ""it wasn't what I wanted to hear, but I'll accept your answer."" !!
I would suggest use of Browser Extensions for digitally signing pdf, file, or anything from modern browsers.  Browser extension will plug between browser providing JavaScript to browser connecting to extension host (application) running locally and accessing CertStore.
Our company has one such extension published and is free which uses .NET framework 3.5 which is generally available on all Windows clients. It does not use PKCS#11 simply eliminating need to provide PKCS#11 drivers etc and just works transparently once installed successfully. It uses Windows CertStore.
As per your comment, you have more clients running firefox, but we have Edge and Firefox extensions in development.
Setup (of host application running behind the chrome browser on windows) may be downloaded from https://download.cnet.com/Signer-Digital-Chrome-Extension/3000-33362_4-78042540.html
Installing this host and restarting Chrome will automatically add Signer.Digital Chrome Extension
The actual working of this extension is illustrated here
Javascript to call method from extension:
    //Calculate Sign for the Hash by Calling function from Extension SignerDigital
    SignerDigital.signPdfHash(hash, $(""#CertThumbPrint"").val(), ""SHA-256"")      //or ""SHA256""
     .then(
            function (signDataResp) {
              //Send signDataResp to Server
        },
            function (errmsg) {
                //Send errmsg to server or display the result in browser.
              }
     );

If success, returns Base64 encoded pkcs7 signature - use any suitable library to inject sign to pdf
If Failed, returns error msg starting with ""SDHost Error:""
I hope this helps!
","264","<javascript><pkcs#11>","3","1","2","2019-05-18 00:06:03","55903142","6","","","","","2019-04-29 11:03:33",""
"52709537","Signing a PDF with SmartCard and PKCS11","im using the examples of pkcs11interop.net 
but i have some problems to run this code.
The LibraryPath variable is my smartcard library path i think. 
What is TokenSerial and tokenlLabel? i dont understand. the ChkaLabel ? im a begginer programmer.
I only need to signing a PDF with my Citizen smartcard Certificate
Thanks to all after response.
public class Pkcs11RsaSignatureExample
    {
        /// <summary>
        /// Creates PKCS#1 v1.5 RSA signature of PDF document with the private key stored on PKCS#11 compatible device
        /// </summary>
        public void SignPdfDocument()
        {
            // Specify path to the unsigned PDF that will be created by this code
            string unsignedPdfPath = @""c:\Test\unsigned.pdf"";
            // Specify path to the signed PDF that will be created by this code
            string signedPdfPath = @""c:\Test\signed.pdf"";
            // Create simple PDF document with iText
            using (Document document = new Document(PageSize.A4, 50, 50, 50, 50))
            {
                using (FileStream outputStream = new FileStream(unsignedPdfPath, FileMode.Create))
                {
                    using (PdfWriter pdfWriter = PdfWriter.GetInstance(document, outputStream))
                    {
                        document.Open();
                        document.Add(new Paragraph(""Hello World!""));
                        document.Close();
                    }
                }
            }
            // Do something interesting with unsigned PDF document
            FileInfo unsignedPdfInfo = new FileInfo(unsignedPdfPath);
            // Specify path to the unmanaged PCKS#11 library
            string libraryPath = ""C:\\Program Files (x86)\\Gemalto\\Classic Client\\BIN\\gclib.dll"";
            // Specify serial number of the token that contains signing key. May be null if tokenLabel is specified.
            string tokenSerial = null;
            // Specify label of of the token that contains signing key. May be null if tokenSerial is specified
            string tokenLabel = @""Pkcs11Interop"";
            // Specify PIN for the token
            string pin = @""1234"";
            // Specify label (value of CKA_LABEL attribute) of the private key used for signing. May be null if ckaId is specified.
            string ckaLabel = @""John Doe"";
            // Specify hex encoded string with identifier (value of CKA_ID attribute) of the private key used for signing. May be null if ckaLabel is specified.
            string ckaId = null;
            // Specify hash algorihtm used for the signature creation
            HashAlgorithm hashAlgorithm = HashAlgorithm.SHA256;
            // Create instance of Pkcs11Signature class that allows iText to create PKCS#1 v1.5 RSA signature with the private key stored on PKCS#11 compatible device
            using (Pkcs11RsaSignature pkcs11RsaSignature = new Pkcs11RsaSignature(libraryPath, tokenSerial, tokenLabel, pin, ckaLabel, ckaId, hashAlgorithm))
            {
                // When signing certificate is stored on the token it can be usually read with GetSigningCertificate() method
                byte[] signingCertificate = pkcs11RsaSignature.GetSigningCertificate();
                // All certificates stored on the token can be usually read with GetAllCertificates() method
                List<byte[]> otherCertificates = pkcs11RsaSignature.GetAllCertificates();
                // Build certification path for the signing certificate
                ICollection<Org.BouncyCastle.X509.X509Certificate> certPath = CertUtils.BuildCertPath(signingCertificate, otherCertificates);
                // Read unsigned PDF document
                using (PdfReader pdfReader = new PdfReader(unsignedPdfPath))
                {
                    // Create output stream for signed PDF document
                    using (FileStream outputStream = new FileStream(signedPdfPath, FileMode.Create))
                    {
                        // Create PdfStamper that applies extra content to the PDF document
                        using (PdfStamper pdfStamper = PdfStamper.CreateSignature(pdfReader, outputStream, '\0', Path.GetTempFileName(), true))
                        {
                            // Sign PDF document
                            MakeSignature.SignDetached(pdfStamper.SignatureAppearance, pkcs11RsaSignature, certPath, null, null, null, 0, CryptoStandard.CADES);
                        }
                    }
                }
            }
            // Do something interesting with the signed PDF document
            FileInfo signedPdfInfo = new FileInfo(signedPdfPath);
        }
    }

","","263","<pkcs#11>","1","","0","2018-10-08 20:17:47","","1","","","","","2018-10-08 20:17:47",""
"52550385","Firefox Quantum ESR PKCS11 - How to Load via script or configuration settings","Is there any way to load a PKCS11 module via a script or config on Firefox Quantum ESR?
I've noticed that our smartcard authentication is no longer working since upgrading our environment from firefox 32 bit 38.x.x to Firefox quantum esr 64 bit.
I can manually go into the security devices area and load the PKCS11 module manually. This works.
But I can't expect all of our users to do this manually.
Is there any code or files i can push out to resolve this issue?
Any help would be appreciated.
","Have a look at file pkcs11.txt in user's profile. 
I have just added the module and found this lines inside:
library=etpkcs11.dll 
name=eToken PKCS#11 Module

","263","<firefox><module><pkcs#11>","1","1","1","2018-09-28 12:21:17","52554366","0","","","","","2018-09-28 07:25:18",""
"53611234","CKR_USER_NOT_LOGGED_IN when generating key pair using sunPKCS11 provider","When trying to generate rsa key pair with sun PKCS11 provider, method generateKeyPair() throws ProviderException: sun.security.pkcs11.wrapper.PKCS11Exception: CKR_USER_NOT_LOGGED_IN
My code looks like this:
Provider prov = ... // initialize provider

KeyStore ks = KeyStore.getInstance(""PKCS11"", prov);
ks.load(null, ""pass"".toCharArray());

KeyPairGenerator keyGen = KeyPairGenerator.getInstance(""RSA"", prov);
keyGen.initialize(2048);
KeyPair kp = keyGen.generateKeyPair();    // exception thrown here

I tried using AuthProvider right after provider initialization like so:
AuthProvider aprov = (AuthProvider) prov;
aprov.login(null, callbacks -> {
    log.error(""@@@ Inside callbacks {}"", callbacks.length);
});
aprov.setCallbackHandler(callbacks -> {
    log.error(""@@@ Inside setCallBackHandler {}"", callbacks.length);
});

But I don't see any logging output, so that means lambdas are not executed.
The ultimate goal is to generate RSA key pair and store it in keystore (HSM) via PKCS11.
I tried openjdk 8 and oracle jdk 8. Also when listing aliases from keystore, I get an empty list, but I know there is one entry. Adding -Djava.security.debug=sunpkcs11 changed nothing.
","The problem in my case was wrong slot number in provider configuration. The selected slot was labeled as ""accelerator"" which does not support the creation of ""private objects"" - from HSM documentation.
After switching to a different slot, key generation and storage into keystore works.
","261","<pkcs#11><hsm><sunpkcs11>","1","1","1","2018-12-05 13:30:23","53633487","0","","","","","2018-12-04 10:48:46",""
"48069842","How to display public/private key pair PKCS11?","How can I display a public/private key-pair generated via PKCS11 ? I use the CK_VALUE attribute template to display a Secret Key. That does not work for a key-pair. Any help is much appreciated. 
","","260","<pkcs#11>","0","","0","2018-01-03 00:54:02","","2","","","","","2018-01-03 00:54:02",""
"50240213","AES GCM mechanism parameters in C","I am having problem setting the parameters for the AES GCM mechanism.
I am receving the following error
#define CKR_MECHANISM_PARAM_INVALID           0x00000071UL

What am I doing wrong?
CK_BYTE iv[12] = { 0 };    
CK_MECHANISM mechanismAES = { CKM_AES_GCM, NULL_PTR, 0 };
CK_GCM_PARAMS params = {
    .pIv=iv,
    .ulIvLen=12,
    .ulIvBits=96,
    .pAAD=NULL,
    .ulAADLen=0,
    .ulTagBits=0
};
mechanismAES.pParameter = &params;
mechanismAES.ulParameterLen = sizeof(params);
C_EncryptInit(hSession, &mechanismAES, hKey);

",".ulTagBits=0 is very likely the issue. The tag size is the size of the authentication tag. You would not have an authenticated mode of encryption if you left it out. 
Valid tag sizes of GCM are 128, 120, 112, 104 or 96 bits. Smaller tag sizes such as 64 bits may be acceptable by some API's. You are however strongly encouraged to keep to the 128 bit tag size, as the security of GCM strongly depends on it.
You may also want to specify either the IV len or the IV bits if the error doesn't go away.
","259","<aes><pkcs#11><aes-gcm>","2","1","1","2018-05-10 00:55:12","","0","0","","","","2018-05-08 18:35:44",""
"41629400","HSM generate self-signed cert report ""wrapping key handle invalid"" error","Using HSM (with PKCS11 standard API) to generate self-signed cert reports ""wrapping key handle invalid"" error (Error Code 113, CKR_WRAPPING_KEY_HANDLE_INVALID). This happens both when using GUI ctbrowser tool to generate or using code similar to their demo.
Here is a code example to reproduce the issue, it generate a RSA keypair and then attempt to generate a self-signed cert with them.
int main()
{
    int rv;
    CK_CHAR pwd[] = ""password"";
    static char pubkeyLabel[256]=""demoPub"";
    static char prvkeyLabel[256]=""demoPrv"";
    static CK_BYTE id[256];
    static CK_BBOOL isTok = TRUE;
    static CK_BBOOL True = TRUE;
    static CK_BBOOL False = FALSE;

    CK_SESSION_HANDLE hSession;
    CK_OBJECT_HANDLE hPubKey;
    CK_OBJECT_HANDLE_PTR phPubKey = &hPubKey;
    CK_OBJECT_HANDLE hSignerKey;
    CK_OBJECT_HANDLE_PTR phSignerKey = &hSignerKey;
    CK_OBJECT_HANDLE hCert;
    CK_OBJECT_HANDLE_PTR phCert = &hCert;
    CK_MECHANISM mechanism = { 0, NULL, 0 };
    static CK_SIZE mBits=2048;

    static char edate[] = {'2','0','2','0','1','2','3','1'};
    static char certLabel[128]=""demo_cert"";
    static char subject[256]=""C=XX,ST=XX,L=XX,O=MEOW,OU=HSM,CN=TESTCERT"";

    CK_ATTRIBUTE publicKeyTemplate[] = {
      {CKA_TOKEN, &isTok, 1},
      {CKA_PRIVATE, &False, 1},
      {CKA_LABEL, pubkeyLabel, sizeof(pubkeyLabel)},
      {CKA_SUBJECT_STR, subject, sizeof(subject)},
      {CKA_MODULUS_BITS, &mBits, sizeof(mBits)},
      {CKA_ENCRYPT, &False, 1},
      {CKA_VERIFY, &True, 1},
      {CKA_WRAP, &False, 1},
      {CKA_DERIVE, &True, 1},
      {CKA_EXTRACTABLE, &True, 1},
      {CKA_EXPORTABLE, &True, 1}
    };
    CK_ATTRIBUTE privateKeyTemplate[] = {
      {CKA_TOKEN, &isTok, 1},
      {CKA_LABEL, prvkeyLabel, sizeof(prvkeyLabel)},
      {CKA_PRIVATE, &True, 1},
      {CKA_SUBJECT_STR, subject, sizeof(subject)},
      {CKA_ID, id, sizeof(id)},
      {CKA_SENSITIVE, &True, 1},
      {CKA_DECRYPT, &False, 1},
      {CKA_SIGN, &True, 1},
      {CKA_UNWRAP, &True, 1},
      {CKA_WRAP, &False, 1},
      {CKA_EXTRACTABLE, &False, 1},
      {CKA_EXPORTABLE, &False, 1}
    };

    CK_ATTRIBUTE certTemplate[] = {
      {CKA_TOKEN, &True, 1},
      {CKA_PRIVATE, &False, 1},
      {CKA_LABEL, certLabel, sizeof(certLabel)},
      {CKA_SUBJECT_STR, subject, sizeof(subject)},
      {CKA_ISSUER_STR, subject, sizeof(subject)},
      {CKA_END_DATE, edate, sizeof(edate)},
      {CKA_EXTRACTABLE, &True, 1},
      {CKA_EXPORTABLE, &True, 1}
    };

    printf(""Generate cert %s from %s, signed by %s.\n"", certLabel, pubkeyLabel, prvkeyLabel);
    rv = C_Initialize(NULL_PTR);
    if ( rv ) return rv;

    rv = C_OpenSession(0, CKF_RW_SESSION|CKF_SERIAL_SESSION, NULL, NULL, &hSession);

    rv = C_Login(hSession, CKU_USER, pwd, 8);

    publicKeyTemplate[2].valueLen = (CK_SIZE)strlen((char*)pubkeyLabel);
    publicKeyTemplate[3].valueLen = (CK_SIZE)strlen((char*)subject)+1;
    privateKeyTemplate[1].valueLen = (CK_SIZE)strlen((char*)prvkeyLabel);
    privateKeyTemplate[3].valueLen = (CK_SIZE)strlen((char*)subject)+1;
    mechanism.mechanism = CKM_RSA_PKCS_KEY_PAIR_GEN;
    rv = C_GenerateKeyPair(hSession, &mechanism,
                           publicKeyTemplate, NUMITEMS(publicKeyTemplate),
                           privateKeyTemplate, NUMITEMS(privateKeyTemplate),
                           phPubKey, phSignerKey);
    printf(""Keypair generated with rv=%x\n"", rv);

    mechanism.mechanism = CKM_SHA256_RSA_PKCS;
    rv = C_SignInit(hSession, &mechanism, hSignerKey);
    printf(""cert signer initiated with rv=%x\n"", rv);
    mechanism.mechanism = CKM_ENCODE_X_509;
    certTemplate[2].valueLen = (CK_SIZE)strlen((char*)certLabel);
    certTemplate[3].valueLen = (CK_SIZE)strlen((char*)subject)+1;
    certTemplate[4].valueLen = (CK_SIZE)strlen((char*)subject)+1;
    rv = C_DeriveKey(hSession, &mechanism,
                     hPubKey,
                     certTemplate, NUMITEMS(certTemplate),
                     phCert);
    printf(""cert generation finished with rv=%x\n"", rv);

    return 0;
}

Since the entire process do not involve any wrapping, I have no clue on how to debug this. Does anyone has any idea what's wrong with it? (NOTE: slot is pre-existing and initialized.)
","The issue is caused by the lack of CKA_SERIAL_NUMBER, according to a copyrighted PKCS11 API guide (ProtectToolkit C Programmers Manual, Copyright © Eracom Technologies), when serial number is not provided, error CKR_WRAPPING_KEY_HANDLE_INVALID will be returned.
Hence either add a CKA_USAGE_COUNT to the signing key, or indicate the serial number for the cert by indicating CKA_SERIAL_NUMBER/CKA_SERIAL_NUMBER_INT in cert template would solve the issue.
","258","<certificate><pkcs#11>","1","2","1","2017-01-13 07:26:25","41629401","3","1","","","","2017-01-12 14:35:18",""
"47789151","Is there any way to obtain pkcs#11 library path from windows csp","Earlier i was using certenroll to list csp and generate CSR and now i want use pkcs11Interop to do the same, but to initialize the pkcs11Interop we must provide the path of pkcs#11 library is there any way to get that path for available csp or pkcs#11 library.
","CSPs (Cryptographic Service Providers) are plugins for Microsoft Crypto API and they are first class citizens in Windows OS. They are centrally managed, one can acquire their list via native Windows APIs, you can access them via single CryptoAPI etc. It is sad but AFAIK no similar infrastructure exists in Windows OS for PKCS#11 modules.
If you are working with single card/token or small amount of different cards/tokens you can ""hardcode"" library paths/names and present predefined list to the user.
","256","<c#><pkcs#11><pkcs11interop>","0","1","1","2017-12-14 13:18:53","47789330","0","1","2487737","","2017-12-14 13:18:53","2017-12-13 09:04:44",""
"52269567","Digitally sign HTML-form using hwcrypto","I'm looking for a way to digitally sign an HTML-form with PKCS#11 (smart card) with hwcrypto. 
Context: at our company we use Combodo's iTop as CMDB. Company devices need to be registered and the employee needs to sign a proof of loan. I like to make this proof digitally. Since we use full PKI enabled company cards, employees can sign these proof digitally with their card (and pin). 
I've written a simple plugin for iTop to generate a proof (PDF) prefilled for the device. But when I want to save the signed PDF back to iTop (via REST API) it turned out to be such a hassle.
Now working on a way to generate a base64-encoded stream of HTML-fields and signing details to offer the REST-API of iTop.
I installed hwcrypto.js on the server. In Firefox I installed the Firefox PKCS11 loader plugin from ID. But I keep getting:

Debug: hwcrypto.js 0.0.13 with failing backend No implementation getCertificate() failed: Error: no_implementation

Does someone know how to connect the hwcrypto.js to the physical card reader? Firefox sees it (Options - Advanced - Security Devices.    
","","252","<javascript><cryptojs><pkcs#11><cmdb>","2","","0","2018-09-11 07:21:33","","0","","3187077","","2018-09-11 07:21:33","2018-09-11 06:02:10",""
"53754304","How to install AWS CloudHSM on Ubuntu 18.04 TLS? (requires libjson-c2 but only libjson-c3 available)","I am trying to install Amazon AWS CloudHSM on AWS EC2 instances running Ubuntu 18.04 LTS.
The instructions from Amazon seem to require an older library libjson-c2, but only the newer library libjson-c3 is available for Ubuntu 18.04 LTS.
Amazon link: https://docs.aws.amazon.com/cloudhsm/latest/userguide/install-and-configure-client-linux.html
I am wondering if anyone can suggest a workaround, since apt install libjson-c2 doesn't seem to work:
# apt install libjson-c2
...
E: Package 'libjson-c2' has no installation candidate

Has anyone had any success using AWS CloudHSM with Ubuntu 18.04 LTS ?
","As of today (2018-12-22), Amazon does not yet support Ubuntu 18.04 LTS (confirmed by AWS Support).  CloudHSM is only supported for Ubuntu 16.04 LTS.
","251","<amazon-ec2><ubuntu-18.04><pkcs#11><hsm><libjson>","1","1","1","2018-12-22 16:49:58","53897563","0","","","","","2018-12-13 02:40:18",""
"12840602","user sign in on token","Is login on the smart card implemented completely on the hardware chip Or it should be impelemented on both pkcs11 dll and smart card? and so how do they separated the chip functions for 3 type of user : user, CA, guest.
EDIT:
it helps me more, if you have a small sample code for both hardware and PKCS11 DLL as a start point
","
PKCS#11 has C_Login, which has to be implemented, obviously, for any reasonable interoperability.
Guest only opens a session, does not call C_Login. User vs CA is not really an option in PKCS#11 terms (they are both ""users"" of the token), there is arbitrary ""user"" vs ""admin"" in PKCS#11 (but you don't really have to implement both, if your model does not follow the PKCS#11 model)
The security device must implement any protective measures (the ability to ""log in"" or ""unlock"" some resources in the device being one of them) so yes, it is implemented in the chip.
Don't know what ""user"" means in your context but having three types of users in a single token and one of them being called ""CA"" sounds like a bad idea.
You actually answer your own question: a device is useless for an application without the middleware (PKCS#11) so both must implement ""something"".

","251","<token><smartcard><avr><pkcs#11><avr-studio5>","1","2","1","2012-10-18 07:37:32","","2","2","1333160","","2012-10-18 07:37:32","2012-10-11 13:24:55",""
"53230852","Creating tokens via softhsm2 as non-root user","Whilst initializing token via softhsm2-util as a non-root user         
$ softhsm2-util --init-token --slot 0  --label ""test"" --so-pin 5462 --pin 8764329

ERROR: Could not initialize the library.$ 

","Whilst initializing token as a non-root user, we invariably try access default /etc/softhsm/softhsm2.conf which points tokens to be staged under /var/lib/softhsm/tokens whose ownership/permission is limited to be used by root and it's associated groups. Changing ownership/permission of /var/lib/softhsm/tokens doesn't solve the problem as we cannot access /etc/softhsm/softhsm2.conf in first place given the access limitation, we should be doing this instead:-
cd $HOME
mkdir -p $HOME/lib/softhsm/tokens
cd $HOME/lib/softhsm/
echo ""directories.tokendir = $PWD/tokens"" > softhsm2.conf
export SOFTHSM2_CONF=$HOME/lib/softhsm/softhsm2.conf

$ softhsm2-util --init-token --slot 0 --label ""test"" --so-pin 5462 --pin 8764329
The token has been initialized.
$ 

","250","<pkcs#11><softhsm>","1","1","1","2018-11-10 11:19:49","","0","","10089811","","2018-11-10 11:19:49","2018-11-09 17:44:41",""
"36569940","Writing my own CSP (cryptographic service provider)","I have to implement my own csp for signing. I have access to remote certificate storage, which implements functions for signing. Server API has call for listing all certificates. I want to add those certificates to containers. I read csp cookbook, but there is no mention, when I should add those certificates to containers. I implemented pkcs11 module, which is functional on linux. Certificates are added to slots in C_Initialize function. 
I believe that the first function which is called is CryptAquiareContext so that´s probably the function I was looking for. Is that correct? And what is a difference between CryptAquireContext and CPAquireContext and which function should I use? I would take any advice to make it right. Thank you.
","CryptAquireContext is called by user code. CryptAquireContext  function-- enumerates the registred CSP in system registry, then loads appropriate image into memory and pass arguments to the CPAquireContext function. So of CP* function should be exported from your CSP-library. 
","248","<c><cryptoapi><pkcs#11>","3","1","1","2017-02-10 07:13:03","","0","2","761212","","2017-01-01 07:32:29","2016-04-12 10:02:06",""
"50313806","AWS CloudHSM AES-256 bit keys generation using PKCS#11 API","I am using the PKCS#11 API to generate AES-256 bit keys in AWS CloudHSM. 
I believe I can generate the key successfully using (C_GenerateKey) however, when I try to print the value of the key, I get a ""CKR_ATTRIBUTE_TYPE_INVALID"" error on the first call to C_GetAttributeValue. 
I do set the CKA_EXTRACTABLE option on the key while generating it. 
Here is a snippet of the code - 
 set_attr(keyTemplate[n_attr], CKA_EXTRACTABLE, &_true, sizeof(_true));

 set_ATTR(keyTemplate[n_attr], CKA_VALUE_LEN, &key_length, sizeof(key_length));

 rv = pfunc11->C_GenerateKey(session, &mechanism, keyTemplate, n_attr, &hSecretKey);
 if (rv != CKR_OK)
 {
    printf(""ERROR: rv=0x%08X: C_GenerateKey failed\n"", (unsigned int)rv);
    return false;
 }
 else
 {
    rv = pfunc11->C_GetAttributeValue(session, hSecretKey, dataTemplate, 1);
    if(rv != CKR_OK)
    {
     printf(""ERROR: rv=0x%08X: C_GetAttributeValue failed\n"", (unsigned int)rv);
     return false;
    }

If I set the ""CKA_SENSITIVE"" option to false, I get an error (CKR_TEMPLATE_INCONSISTENT) during generation of the key saying the template is invalid. 
How can I print the value of the AES key in my application ? 
","Handling of the CKA_SENSITIVE attribute has been fixed in v 1.1.1 of the CloudHSM v2 client libraries.
You should really contemplate why you want to get the plain text value of your AES key. The reason for using an HSM in the first place is to prevent exposing raw key data. If you are just testing then consider creating the key in software and then importing it into the HSM. You could also use key wrapping to unwrap the AES key.
","247","<amazon-web-services><pkcs#11><hsm>","0","2","1","2018-07-04 22:22:23","","2","1","9226886","","2018-05-13 07:45:55","2018-05-13 07:35:12",""
"45358919","Is it possible to connect with a HSM without PIN using PKCS11INTEROP library?","We are using PKCS11INTEROP library to connect with the NShield HSM. To perform any operation(generate/encrypt/decrypt) inside the HSM you need to first get the slot and then login to the slot using the PIN. This is all working as expected.
NShield HSM allows your keys to be protected in two ways Module Protection and Token Protection. The NShield client software provides you a utility KSAFE to manage keys in the HSM. If you are using KSAFE utility and you want to protect your keys by module protection then you do not have to provide a PIN whereas PIN becomes mandatory if the key is to protected by Token protection.
So my question is that : Can we perform operations within HSM using PKCS11INTEROP without the need of a PIN, ofcourse it would be module based protection?
","Yes you can. If I remember correctly module protected keys are located under the first accelerator slot. You can even perform login on accelerator slot if you set CKNFAST_FAKE_ACCELERATOR_LOGIN configuration variable. Look it up in nShield HSM user guide.
","244","<c#><pkcs#11><pkcs11interop>","1","1","1","2017-07-27 19:59:21","45359982","0","1","","","","2017-07-27 18:55:33",""
"48063467","How to manage a network down and avoid error with PKCS11Interop","Using PKCS11Interop on Safenet HSMs, I got this error
""Method C_OpenSession returned 2147484548""
the error, in my documentation, is CKR_SMS_ERROR: ""General error from secure messaging system - probably caused by HSM failure or network failure"".
This confirm the problem it happens when the connectivity is lacking.
The problem is when this happens, the service isn't able to resume the communication when the connectivity is back, until I restart manually the service managing the HSM access.
When the service starts, I call this:
private Pkcs11 _pkcs11 = null;
private Slot _slot = null;
private Session _session = null;

public async void InitPkcs11()
{
    try
    {
        _pkcs11 = new Pkcs11(pathCryptoki, Inter_Settings.AppType);
        _slot = Inter_Helpers.GetUsableSlot(_pkcs11, nSlot);
        _session = _slot.OpenSession(SessionType.ReadOnly);
        _session.Login(CKU.CKU_USER, Inter_Settings.NormalUserPin);
    }
    catch (Exception e)
    {
        ...
    }
}

When I have to use the HSM, I call something like:
using (var LocalSession = _slot.OpenSession(SessionType.ReadOnly))
{
    ...
}

And, when I fail the communication due to a connectivity lack, I call a function to reset the connection and try to change the slot:
private bool switching = false;

public async void SwitchSlot()
{
    try
    {
        if (!switching)
        {
            switching = true;
            if (nSlot == 0)
            {
                nSlot = 2;
            }
            else
            {
                nSlot = 0;
            }
            _session.Logout();
            _slot.CloseAllSessions();
            _pkcs11.Dispose();
            InitPkcs11();
            switching = false;
        }
    }
    catch (Exception e)
    {
        ...
    }
}

But, this last snippet doens't work as expected: it tries to change the slot, but it fails always to communicate with the HSM (after a network down). If I restart the service manually (when the connectivity is back), it works like charms. So, I'm sure I'm doing something wrong in the SwitchSlot function, when I try to close the _session and open a new one.
Do you see any errors/misunderstoonding here?
","","242","<c#><connectivity><pkcs#11><hsm><pkcs11interop>","2","","0","2018-01-02 15:20:12","","5","0","","","","2018-01-02 15:20:12",""
"47104711","Ncrytoki Error n 48 & 224","I have wcf web service that signs pdf documents when there is a request from my website. Everything works fine locally trying to sign few documents while development.
Once my code was deployed to production environment, it was working fine for few hours but suddenly i have started received Error n 48 followed by n 224.

Message : Error n. 48
  Source : NCryptoki
  Stack Trace :    at Cryptware.NCryptoki.Session.Sign(Byte[] data)
     at iTextSharp.text.pdf.security.MakeSignature.SignDetached(PdfSignatureAppearance sap, IExternalSignature externalSignature, ICollection1 chain, ICollection1 crlList, IOcspClient ocspClient, ITSAClient tsaClient, Int32 estimatedSize, CryptoStandard sigtype)
Message : Error n. 224
  Source : NCryptoki
  Stack Trace :    at Cryptware.NCryptoki.Session.Sign(Byte[] data)
     at iTextSharp.text.pdf.security.MakeSignature.SignDetached(PdfSignatureAppearance sap, IExternalSignature externalSignature, ICollection1 chain, ICollection1 crlList, IOcspClient ocspClient, ITSAClient tsaClient, Int32 estimatedSize, CryptoStandard sigtype)

I struggling to understand what could be happening and how can i replicate this issue locally so i can try to fix it. I thought it could be load issue but according to logs server was only signing about 4-5 request per min.
Here is the snippet of my signing code.
1) WCF SOAP Action
    public void TestSignPDF()
    {

        string fileName = Guid.NewGuid().ToString();
        String src = @""C:\tmp\singlepage.pdf"";
        String DEST = string.Format(@""C:\tmp\{0}.pdf"", fileName);

        MemoryStream ms = new MemoryStream();

        FileStream file = new FileStream(src, FileMode.Open, FileAccess.Read);
        byte[] bytes = new byte[file.Length];
        file.Read(bytes, 0, (int)file.Length);
        ms.Write(bytes, 0, (int)file.Length);
        file.Close();
        ms.Seek(0, SeekOrigin.Begin);

        HSMSignDocument x = new HSMSignDocument();
        Stream result = x.SignDocument(ms, ""334"", fileName);

        if (result != null)
        {
            FileStream file2 = new FileStream(DEST, FileMode.Create, System.IO.FileAccess.Write);
            byte[] bytes2 = new byte[result.Length];
            result.Read(bytes2, 0, (int)result.Length);
            file2.Write(bytes2, 0, bytes2.Length);
            file2.Close();
            result.Close();
        }

        ms.Close();
    }

2.) HSMSignDocument class (static)
public class HSMSignDocument :  IDisposable
{
    private static Cryptoki cryptoki = null;
    private static Session session = null;
    private static NLogger LOGGER = new NLogger();
    private static readonly string HSMPartitionPwd = ConfigurationManager.AppSettings[""HSMPartitionPassword""];

    private string TIME_STAMPING_SERVER_URL = ""xx"";
    private string TIME_STAMPING_SERVER_ACCOUNT = ""xx""; 
    private string TIME_STAMPING_SERVER_PASSWORD = ""xx""; 


    static HSMSignDocument()
    {
        Cryptoki.Licensee = ""xxx"";
        Cryptoki.ProductKey = ""xxx"";

        if (cryptoki == null)
        {
            cryptoki = new Cryptoki();
            cryptoki.Attach(@""C:\Program Files\SafeNet\LunaClient\cryptoki.dll"");
            cryptoki.Initialize();
        }

        if (session == null)
        {
            // Reads the set of slots containing a token
            SlotList slots = cryptoki.Slots;
            if (slots.Count == 0)
            {
                LOGGER.Error(""slots.Count == 0, no slots available"");
                return;
            }

            // Gets the first slot available
            Slot slot = slots[0];
            if (!slot.IsTokenPresent)
            {
                LOGGER.Error(""!slot.IsTokenPresent, no tokens present"");
                return;;
            }

            // Gets the first token available
            Token token = slot.Token;

            // Opens a read/write serial session
            session = token.OpenSession(Session.CKF_SERIAL_SESSION | Session.CKF_RW_SESSION, null, null);

            int nRes = session.Login(Session.CKU_USER, HSMPartitionPwd);
            if (nRes != 0)
            {
                LOGGER.Error(""Could not login to Session"");
            }
        }
    }

    private  IList<Org.BouncyCastle.X509.X509Certificate> GetKeyChain()
    {
        //Private key pointers have been installed in 
        X509Store x509Store = new X509Store(StoreName.My, StoreLocation.LocalMachine);

        x509Store.Open(OpenFlags.ReadOnly);
        X509Certificate2Collection certificates = x509Store.Certificates;
        IList<Org.BouncyCastle.X509.X509Certificate> chain = new List<Org.BouncyCastle.X509.X509Certificate>();
        X509Certificate2 pk = null;

        string HSMCertSerialNumber = ConfigurationManager.AppSettings[""HSMCertificateSerialNumber""];

        if (certificates.Count > 0)
        {
            foreach (X509Certificate2 mCert in x509Store.Certificates)
            {
                //GETS THE KEY WE ARE LOOKING - Private key for HSM
                if (String.Compare(mCert.SerialNumber, HSMCertSerialNumber, true) == 0) 
                {
                    pk = mCert;
                    break;
                }
            }

            X509Chain x509chain = new X509Chain();
            x509chain.Build(pk);

            foreach (X509ChainElement x509ChainElement in x509chain.ChainElements)
            {
                // Build up root chain
                chain.Add(DotNetUtilities.FromX509Certificate(x509ChainElement.Certificate)); 
            }
        }

        x509Store.Close();

        return chain; 
    }

    public bool ApplySignatureDetails(Session session, String alias, Stream inputFile, string tempWorkingFile)
    {
        IList<Org.BouncyCastle.X509.X509Certificate> chain = GetKeyChain();

        // creates a TSA client(Time Stampingserver)
        ITSAClient timeStampingClient = new TSAClientBouncyCastle(TIME_STAMPING_SERVER_URL, TIME_STAMPING_SERVER_ACCOUNT, TIME_STAMPING_SERVER_PASSWORD);

        IOcspClient ocspClient = new OcspClientBouncyCastle(); // Online Certificate Status Protocol  -  adobe requirement
        List<ICrlClient> crlList = new List<ICrlClient>(); //revocation list -  adobe requirement
        crlList.Add(new CrlClientOnline(chain));

        return PKCS11Signer.Sign(inputFile, String.Format(tempWorkingFile, alias), chain, session, alias, DigestAlgorithms.SHA256, CryptoStandard.CMS, ""Doc Signed"", ""My Company"", crlList, ocspClient, timeStampingClient, 0);
    }


    void IDisposable.Dispose()
    {
        if (session != null)
        {
            session.Logout();
            session.Close();
            session = null;
        }
        if (cryptoki != null)
        {
            cryptoki.Finalize(IntPtr.Zero);
            cryptoki = null;
        }
    }
}

3.) PKCS11Signer Class
class PKCS11Signer
{
    private static NLogger LOGGER = new NLogger();

    private static Semaphore Bouncer { get; set; }

    public static bool Sign(Stream inputFile, String dest, ICollection<Org.BouncyCastle.X509.X509Certificate> chain, Session session, String alias,
                     String digestAlgorithm, CryptoStandard subfilter, String reason, String location,
                     ICollection<ICrlClient> crlList, IOcspClient ocspClient, ITSAClient tsaClient, int estimatedSize)
    {

        // Creating the reader and the stamper
        PdfReader reader = null;
        PdfStamper stamper = null;
        FileStream outputStream = null;

        try
        {

            if (Bouncer ==  null)
            {
                Bouncer = new Semaphore(1, 1);
            }

            Bouncer.WaitOne();
            LOGGER.Info(""Start Actual Signing"");
            reader = new PdfReader(inputFile);

            outputStream = new FileStream(dest, FileMode.Create, FileAccess.Write);
            stamper = PdfStamper.CreateSignature(reader, outputStream, '\0');
            LOGGER.Info(""PDFStamper Created"");

            // Creating the appearance
            PdfSignatureAppearance appearance = stamper.SignatureAppearance;

            LOGGER.Info(""PdfSignatureAppearance Created"");

            appearance.Reason = reason;
            appearance.Location = location;

            //Uncomment to show signiture text
            //appearance.SetVisibleSignature(new iTextSharp.text.Rectangle(56, 128, 164, 160), 1, ""signature"");


            appearance.CertificationLevel = PdfSignatureAppearance.CERTIFIED_NO_CHANGES_ALLOWED;
            LOGGER.Info(""PdfSignatureAppearance Created"");

            // Creating the signature
            IExternalSignature pks = new PrivateKeySignature(session, alias);
            LOGGER.Info(""Encryption algorithm "" + pks.GetEncryptionAlgorithm());
            LOGGER.Info(""Hash algorithm "" + pks.GetHashAlgorithm());
            LOGGER.Info(""Hash code "" + pks.GetHashCode());
            LOGGER.Info(""pks : "" + pks.ToString());


            LOGGER.Info(""IExternalSignature Created perform sign"");
            MakeSignature.SignDetached(appearance, pks, chain, crlList, ocspClient, tsaClient, estimatedSize, subfilter);
            //System.Threading.Thread.Sleep(1000); //Globalsign requirement

            LOGGER.Info(""MakeSignature.SignDetached Completed"");
        }
        catch (Exception ex)
        {
            LOGGER.Error(ex);
            throw ex;
        }
        finally
        {
             Bouncer.Release();
            if (stamper != null)
                stamper.Close();
            if (reader != null)
                reader.Close();
            if (outputStream != null)
                outputStream.Close();
            if (inputFile != null)
                inputFile.Close();
        }
        return true;
    }
}

}
4.) PrivateKeySignature Class
class PrivateKeySignature : IExternalSignature
{

    private static NLogger LOGGER = new NLogger();
    private static ObjectCache cache = MemoryCache.Default;

    private readonly Session session;
    RSAPrivateKey privateKey;

    public PrivateKeySignature(Session session, String alias)
    {
        string HSMPrivateKeyCertReq = ConfigurationManager.AppSettings[""HSMPrivateKeyCertReq""];
        this.session = session;
        LOGGER.Info(""Starting to get PrivateKeySignature"");
        CryptokiCollection pkobjects = findTarget(session, HSMPrivateKeyCertReq);

        LOGGER.Info(""Search session for private key using template"");

        foreach(var keyObject in pkobjects)
        {
            LOGGER.Info(""RSA/CertReq:"" + HSMPrivateKeyCertReq);
            privateKey = (RSAPrivateKey)keyObject;
        }

        if (privateKey == null)
        {
            throw new Exception(""privateKey not found"");
        }

        LOGGER.Info(""Private Key Found"");
    }

    public String GetHashAlgorithm()
    {
        return ""SHA1"";
    }

    public String GetEncryptionAlgorithm()
    {
        return ""RSA"";
    }

    public byte[] Sign(byte[] message)
    {
        LOGGER.Info(""Start apply Private Key"");
        session.SignInit(Mechanism.SHA1_RSA_PKCS, privateKey);
        LOGGER.Info(""End apply Private Key"");
        return session.Sign(message);
    }

    public CryptokiCollection findTarget(Session session, string label)
    {
        if (cache.Contains(label))
        {
            return (CryptokiCollection)cache.Get(label);
        }
        else
        {
            CryptokiCollection template = new CryptokiCollection();

            template.Add(new ObjectAttribute(ObjectAttribute.CKA_LABEL, label));
            template.Add(new ObjectAttribute(ObjectAttribute.CKA_CLASS, CryptokiObject.CKO_PRIVATE_KEY));
            template.Add(new ObjectAttribute(ObjectAttribute.CKA_KEY_TYPE, Key.CKK_RSA));

            var pk = session.Objects.Find(template, 1);

            // Store data in the cache
            CacheItemPolicy cacheItemPolicy = new CacheItemPolicy();
            cacheItemPolicy.SlidingExpiration = TimeSpan.FromHours(4);
            cache.Add(label, pk, cacheItemPolicy);

            return pk;
        }
    }
}

}
","NCryptoki returns back the errors from the underlying PKCS#11 module.
The list of PKCS#11 errors is available here:
http://wiki.ncryptoki.com/How-NCryptoki-manages-PKCS-11-errors.ashx
In your case 48 (0x30) means:
CKR_DEVICE_ERROR
while 224 (0xE0) means:
CKR_TOKEN_NOT_PRESENT 
it seems as there is a configuration problem on your production HSM
","237","<c#><wcf><smartcard><pkcs#11><hsm>","0","1","1","2017-11-06 11:56:46","","0","","","","","2017-11-03 21:34:43",""
"52832071","PKCS#11 C_WrapKey returns CKR_GENERAL_ERROR","I have followed the example: https://pkcs11interop.net/doc/_high_level_a_p_i_2_24__wrap_and_unwrap_key_test_8cs-example.html
to wrap symmetric keys using rsa keys and it worked.
What I am trying to achieve is to wrap an asymmetric key (rsa private key) instead. All I did was replacing the ""secretKey"" variable with an ObjectHandle of the private key. However, I get CKR_GENERAL_ERROR each time I call Wrapkey function.
Can someone explain why this won't work? I couldn't find anything in the specifications that prevents wrapping asymmetric keys.
The private key was generated with the following attributes:
List<ObjectAttribute> privateKeyAttributes = new List<ObjectAttribute>();
privateKeyAttributes.Add(new ObjectAttribute(CKA.CKA_TOKEN, true));
privateKeyAttributes.Add(new ObjectAttribute(CKA.CKA_PRIVATE, true));
privateKeyAttributes.Add(new ObjectAttribute(CKA.CKA_ID, ConvertUtils.HexStringToBytes(id)));
privateKeyAttributes.Add(new ObjectAttribute(CKA.CKA_SENSITIVE, false));
privateKeyAttributes.Add(new ObjectAttribute(CKA.CKA_DECRYPT, true));
privateKeyAttributes.Add(new ObjectAttribute(CKA.CKA_SIGN, true));
privateKeyAttributes.Add(new ObjectAttribute(CKA.CKA_SIGN_RECOVER, true));
privateKeyAttributes.Add(new ObjectAttribute(CKA.CKA_EXTRACTABLE, true));

Best regards,
","You seem to be trying to wrap RSA private key using CKM_RSA_PKCS mechanim. Chapter 12.1.6 of PKCS#11 v2.20 specification states:

The PKCS#1 v1.5 RSA mechanism, denoted CKM_RSA_PKCS, is a
  multi-purpose mechanism based on the RSA public-key cryptosystem and
  the block formats initially defined in PKCS#1 v1.5.
...
This mechanism can wrap and unwrap any secret key of appropriate
  length. Of course, a particular token may not be able to wrap/unwrap
  every appropriate-length secret key that it supports. For wrapping, 
  the ""input"" to the encryption operation is the value of the CKA_VALUE 
  attribute of the key that is wrapped; similarly for unwrapping.

PKCS#11 specification uses term secret key only for symmetric keys. Moreover CKA_VALUE attribute is invalid for RSA private keys. This will not work.
Your best bet is to consolt the documentation of your device/library and choose different wrapping mechanism that suits your needs.
","235","<c#><token><pkcs#11>","1","1","1","2018-10-16 18:14:37","52841639","0","0","","","","2018-10-16 09:19:47",""
"56059386","DotNet Core: How to cross-platform Client Certificate TLS Authentication?","I'm trying to develop a cross-platform app (windows/mac os x) that needs to sign XML files and make web requests on a server using ClientCertificate authentication...
The main constraint is that I need to use a certificate on a smartcard...
I'm using dotnet core 2.1 for the moment.
First I did try to use dotnet core X509Store, but on MacOs I couln't access the PrivateKey object in any case (mandatory for XML signing.), then I discarded this lead.
Then I used pkcs11interop with the vendor-specific dlls to access the smartcard, and it worked well for XML signing (I wrapped pkcs11interop calls inside a RSA object, then I used this object as SigningKey inside SignedXml,) but it did not work for ClientCertificate connection.
Normally I use this method to connect to the server (dotnet framework 4.6.1, windows only) :
HttpWebRequest req = WebRequest.Create(""https://sometlsserver.com/"") as HttpWebRequest;
req.ClientCertificates.Add(cert);
HttpWebResponse res = req.GetResponse() as HttpWebResponse;
using (StreamReader sr = new StreamReader(res.GetResponseStream(), new UTF8Encoding(false)))
{
    return sr.ReadToEnd();
}

And the certificate is generated:
var certAttr = session.GetAttributeValue(handle, new List<CKA>
{
    CKA.CKA_VALUE,
};
var cert = new X509Certificate2(certAttr[0].GetValueAsByteArray());

When I try to connect with my classic method, I have several exceptions :
System.Net.WebException: The SSL connection could not be established, see inner exception. Authentication failed, see inner exception.
---> System.Net.Http.HttpRequestException: The SSL connection could not be established, see inner exception.
---> System.Security.Authentication.AuthenticationException: Authentication failed, see inner exception.
---> System.ComponentModel.Win32Exception: Le message reçu était inattendu ou formaté de façon incorrecte
   --- End of inner exception stack trace ---
   at System.Net.Security.SslState.StartSendAuthResetSignal(ProtocolToken message, AsyncProtocolRequest asyncRequest, ExceptionDispatchInfo exception)
   at System.Net.Security.SslState.CheckCompletionBeforeNextReceive(ProtocolToken message, AsyncProtocolRequest asyncRequest)
   at System.Net.Security.SslState.StartSendBlob(Byte[] incoming, Int32 count, AsyncProtocolRequest asyncRequest)
   at System.Net.Security.SslState.ProcessReceivedBlob(Byte[] buffer, Int32 count, AsyncProtocolRequest asyncRequest)
   at System.Net.Security.SslState.StartReadFrame(Byte[] buffer, Int32 readBytes, AsyncProtocolRequest asyncRequest)
   at System.Net.Security.SslState.PartialFrameCallback(AsyncProtocolRequest asyncRequest)
--- End of stack trace from previous location where exception was thrown ---
   at System.Net.Security.SslState.ThrowIfExceptional()
   at System.Net.Security.SslState.InternalEndProcessAuthentication(LazyAsyncResult lazyResult)
   at System.Net.Security.SslState.EndProcessAuthentication(IAsyncResult result)
   at System.Net.Security.SslStream.EndAuthenticateAsClient(IAsyncResult asyncResult)
   at System.Net.Security.SslStream.<>c.<AuthenticateAsClientAsync>b__47_1(IAsyncResult iar)
   at System.Threading.Tasks.TaskFactory`1.FromAsyncCoreLogic(IAsyncResult iar, Func`2 endFunction, Action`1 endAction, Task`1 promise, Boolean requiresSynchronization)
--- End of stack trace from previous location where exception was thrown ---
   at System.Net.Http.ConnectHelper.EstablishSslConnectionAsyncCore(Stream stream, SslClientAuthenticationOptions sslOptions, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.ConnectHelper.EstablishSslConnectionAsyncCore(Stream stream, SslClientAuthenticationOptions sslOptions, CancellationToken cancellationToken)
   at System.Threading.Tasks.ValueTask`1.get_Result()
   at System.Net.Http.HttpConnectionPool.CreateConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Threading.Tasks.ValueTask`1.get_Result()
   at System.Net.Http.HttpConnectionPool.WaitForCreatedConnectionAsync(ValueTask`1 creationTask)
   at System.Threading.Tasks.ValueTask`1.get_Result()
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncUnbuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)
   at System.Net.HttpWebRequest.SendRequest()
   at System.Net.HttpWebRequest.GetResponse()
   --- End of inner exception stack trace ---
   at System.Net.HttpWebRequest.GetResponse()
...

I think that the cryptographic operation made by the private key needed during the TLS handshake is missing and it simply fails...
I did try to add my RSA object used for XML signing in the private key property but with dotnet core it ends with a PlatformNotSupportedException...
cert.PrivateKey = myRSAObject; // simple

I'm wondering if that's possible to do that without using a third party library...
Note: Translation of the french error message ""Message was unexpected or incorrectly formatted.""
Thanks.
(edit: better formatting)
","X509Certificate2 is legacy class designed only for Windows that currently has no widely usable alternative or sane multiplatform replacement.
When you construct X509Certificate2 object using byte[] value of CKA_VALUE attribute you get just the certificate without the private key.
The closest you can get to "".NET compatible implementation"" is to implement class derived from RSA as I did in Pkcs11Interop.X509Store project. It will work with SignedXML class but as you already found out it won't be usable with most SSL classes that require X509Certificate2 object with correctly associated PrivateKey property.
IMO you have three options:

Switch to appropriate .NET Core version and create X509Certificate2 object associated with your RSA implementation using CopyWithPrivateKey extension method as pointed out by @FilipNavara in his comment. Such X509Certificate2 object might (or rather might not) work with SSL implementation.
Use PFX/PKCS#12 file that contains SSL client certificate with private key protected by user password. Such file can be loaded in X509Certificate2 object correctly associated PrivateKey property on most platforms supported by .NET Core.
Find or write SSL client implementation that will not require X509Certificate2 object with associated PrivateKey property. I'm currently not aware of any library with such design.

","235","<.net-core><smartcard><pkcs#11><hsm><pkcs11interop>","1","0","1","2019-05-10 09:20:09","","4","","","","","2019-05-09 12:24:15",""
"52766076","Generate Certificate with PKCS#11 in python","I write in Python 3, any libraries may be installed.
I have some root certificate and corresponding private key and I want to sign certificate request.
I can do this with pyopenssl easily if root certificate's private key is accessible directly.
However, I have root certificate in HSM and access it by PKCS#11. So I can ask to sign arbitrary data, but cannot read private key. Unfortunately pyopenssl does not support OpenSSL engines, so while native OpenSSL library can use PKCS#11, I cannot access engines from Python. I have found m2crypto library. Author states it supports engines, but I could not find any tutorial or documentation.
I need to somehow sign certificate request. What are my options?
UPDATE:
This
https://python-pkcs11.readthedocs.io/en/latest/applied.html#signing-verifying
is not useful, because these functions sign/verify arbitrary data, not certificates, which means I have to format certificate data by myself.
","","232","<python><openssl><x509certificate><x509><pkcs#11>","0","","0","2018-10-12 07:51:37","","3","2","460349","","2018-10-12 07:51:37","2018-10-11 17:43:24",""
"30279477","CryptUIDlgSelectCertificateFromStore for CSP. How about PKCS#11?","There exist a function called CryptUIDlgSelectCertificateFromStore in Windows library. It allows user to select a certificate from a list of certificates found in the cert store for Internet Explorer. 
I am searching for the equivalent function in NSS, PKCS#11, Xulrunner, where user can select a certificate in Mozilla Firefox browser.
Thank you.
","","231","<firefox><certificate><xulrunner><pkcs#11><nss>","1","","0","2015-05-16 20:01:24","","4","0","3325704","","2015-05-16 20:01:24","2015-05-16 18:47:41",""
"52801774","Exception while connecting to HSM using SunPKCS11","I'm using SunPKCS11 to connect to a HSM device. I have some unit tests which run perfectly(actually they do some signing and verification), however, when I deploy the application into tomcat or jetty I get this exception(this exception is thrown during deployment in jetty, tomcat's exception is alike):
java.security.ProviderException: Initialization failed
        at sun.security.pkcs11.SunPKCS11.<init>(SunPKCS11.java:376)
        at sun.security.pkcs11.SunPKCS11.<init>(SunPKCS11.java:103)
        at X.X.X.HsmUtil.<init>(HsmUtil.java:66)
        at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
        at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
        at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
        at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
        at org.springframework.beans.BeanUtils.instantiateClass(BeanUtils.java:142)
        at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:89)
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateBean(AbstractAutowireCapableBean
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableB
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFac
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFacto
        at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
        at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:23
        at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
        at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
        at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory
        at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContex
        at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:542)
        at org.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ContextLoader.java:444)
        at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:326)
        at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:107)
        at org.eclipse.jetty.server.handler.ContextHandler.callContextInitialized(ContextHandler.java:952)
        at org.eclipse.jetty.servlet.ServletContextHandler.callContextInitialized(ServletContextHandler.java:558)
        at org.eclipse.jetty.server.handler.ContextHandler.startContext(ContextHandler.java:917)
        at org.eclipse.jetty.servlet.ServletContextHandler.startContext(ServletContextHandler.java:370)
        at org.eclipse.jetty.webapp.WebAppContext.startWebapp(WebAppContext.java:1497)
        at org.eclipse.jetty.maven.plugin.JettyWebAppContext.startWebapp(JettyWebAppContext.java:360)
        at org.eclipse.jetty.webapp.WebAppContext.startContext(WebAppContext.java:1459)
        at org.eclipse.jetty.server.handler.ContextHandler.doStart(ContextHandler.java:847)
        at org.eclipse.jetty.servlet.ServletContextHandler.doStart(ServletContextHandler.java:287)
        at org.eclipse.jetty.webapp.WebAppContext.doStart(WebAppContext.java:545)
        at org.eclipse.jetty.maven.plugin.JettyWebAppContext.doStart(JettyWebAppContext.java:428)
        at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:68)
        at org.eclipse.jetty.util.component.ContainerLifeCycle.start(ContainerLifeCycle.java:138)
        at org.eclipse.jetty.util.component.ContainerLifeCycle.doStart(ContainerLifeCycle.java:117)
        at org.eclipse.jetty.server.handler.AbstractHandler.doStart(AbstractHandler.java:113)
        at org.eclipse.jetty.server.handler.ContextHandlerCollection.doStart(ContextHandlerCollection.java:168)
        at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:68)
        at org.eclipse.jetty.util.component.ContainerLifeCycle.start(ContainerLifeCycle.java:138)
        at org.eclipse.jetty.util.component.ContainerLifeCycle.doStart(ContainerLifeCycle.java:117)
        at org.eclipse.jetty.server.handler.AbstractHandler.doStart(AbstractHandler.java:113)
        at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:68)
        at org.eclipse.jetty.util.component.ContainerLifeCycle.start(ContainerLifeCycle.java:138)
        at org.eclipse.jetty.server.Server.start(Server.java:416)
        at org.eclipse.jetty.util.component.ContainerLifeCycle.doStart(ContainerLifeCycle.java:108)
        at org.eclipse.jetty.server.handler.AbstractHandler.doStart(AbstractHandler.java:113)
        at org.eclipse.jetty.server.Server.doStart(Server.java:383)
        at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:68)
        at org.eclipse.jetty.maven.plugin.AbstractJettyMojo.startJetty(AbstractJettyMojo.java:477)
        at org.eclipse.jetty.maven.plugin.AbstractJettyMojo.execute(AbstractJettyMojo.java:343)
        at org.eclipse.jetty.maven.plugin.JettyRunMojo.execute(JettyRunMojo.java:169)
        at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:134)
        at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:207)
        at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:153)
        at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:145)
        at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:116)
        at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:80)
        at org.apache.maven.lifecycle.internal.builder.singlethreaded.SingleThreadedBuilder.build(SingleThreadedBuilder.java:51)
        at org.apache.maven.lifecycle.internal.LifecycleStarter.execute(LifecycleStarter.java:128)
        at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:307)
        at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:193)
        at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:106)
        at org.apache.maven.cli.MavenCli.execute(MavenCli.java:863)
        at org.apache.maven.cli.MavenCli.doMain(MavenCli.java:288)
        at org.apache.maven.cli.MavenCli.main(MavenCli.java:199)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.lang.reflect.Method.invoke(Method.java:498)
        at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:289)
        at org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:229)
        at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:415)
        at org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:356)
Caused by: sun.security.pkcs11.wrapper.PKCS11Exception: CKR_FUNCTION_FAILED
        at sun.security.pkcs11.wrapper.PKCS11.C_Initialize(Native Method)
        at sun.security.pkcs11.wrapper.PKCS11$SynchronizedPKCS11.C_Initialize(PKCS11.java:1545)
        at sun.security.pkcs11.wrapper.PKCS11.getInstance(PKCS11.java:157)
        at sun.security.pkcs11.SunPKCS11.<init>(SunPKCS11.java:330)
        ... 74 more

and this is  how I instantiate SunPKCS11:
File f = new File(Pkcs11ConfigUtil.getDRIVERCFGPATH());
Provider provider = new sun.security.pkcs11.SunPKCS11(f.getPath()); //exception is thrown in this line
Security.addProvider(provider);

just to add a few details, I'm using a 64bit java8 on a windows server 2012.
update 1:
I just noticed that when I run the tests by maven similar exception occurs, previously I used to run tests using eclipse,
well, I'm not sure what's exactly happening :(
update 2:
I came up with the idea to write a very short piece of code (just a simple and clean class with a main method) to use sun.security.pkcs11.SunPKCS11, but I faced same problems (while code runs perfectly using eclipse, I get mentioned exceptions when I run the class using java command in cmd). It's quite confusing :|
update 3: This is the content of the configuration file
name=testname
library=C:\X\Y\Z\cs2_pkcs11.dll
slotListIndex=6

any help is appreciated.
","Trying to access classes within package space sun.* from within a webapp inside a Servlet container is unsupported by the Servlet spec.
If you read the Servlet spec (SRV.9.7.2) the only package namespace exposed from the JVM and Server container to your webapps are java.*, javax.*, org.xml.*, and org.w3c.*.
You'll have to use the sun.security.pkcs11.SunPKCS11 from outside of a webapp (perhaps as a server component) in order to have any success.
Or, if using something like embedded-jetty (and not a formal webapp, or jetty-home, or jetty-standalone, or jetty-maven-plugin) you can sidestep these servlet behaviors / requirements.
","229","<java><maven><jetty><pkcs#11><hsm>","0","0","1","2018-10-27 06:40:04","","2","","2062407","","2018-10-27 06:40:04","2018-10-14 10:36:06",""
"37293965","Support for PKCS11 on 64 bit JAVA","Is there any way I can make 64 bit java support PKCS11 module?
PKCS11 module is supported on 32 bit Java and it also works fine. My signing process always runs out of memory when I use the 32 bit Java. I currently have 128gb ram so I would like to allocate more than 4gb for my signing process which isn't possible on 32 bit version.
","First of all, you should be looking at why the memory process is that intensive. It could be that you are able to factor out the hashing from the operation with the private key (padding, modular exponentiation, encoding). That the signing process takes so much memory indicates that something is wrong. It could be as simple as calling Signature#update instead of Signature#doFinal directly.
As for the 32 bit .dll, no you cannot just load that into a 64 bit application such as the JVM. For instance, take a look here to see that this would not work. There are of course ways around it; create a separate 64 bit process, connect to that using your own SignatureSpi class in your own Java provider (which requires to be signed using  a key provided by Oracle). Needless to say, that's a lot of work for fixing something that should just work.
It's of course a shame to go through all this trouble while you have a very high end system without a valid upgrade strategy, using a deprecated version of Java. You should focus on fixing that first. You should also wonder why you cannot get a 64 bit PKCS#11 .dll for your situation.
","229","<java><digital-signature><pkcs#11>","0","0","1","2016-05-21 09:36:02","","9","","","","","2016-05-18 08:19:43",""
"53579161","What is the difference of SO_PATH and MODULE_PATH when in loading of OpenSSL Engine?","When trying to load an engine to openssl with the following command
openSSL> engine -t dynamic -pre\ SO_PATH:/usr/lib/engines/engine_pkcs11.so \
-pre ID:pkcs11 -pre\ LIST_ADD:1 -pre LOAD -pre \
MODULE_PATH:/usr/lib/libcs_pkcs11_R2.so

we must especify path to two shared objects,engine and module, Can anyone tell me what is the difference?
","SO_PATH tells OpenSSL where to find the engine.
MODULE_PATH is an engine-specific control that tells some engines where to find the module that they depend on. Basically, it's up to the engine to either execute the commands given it directly, or, in the case where third-party software is involved, pass them onto the third-party software, in which case the engine acts as a wrapper for the third-party module. It's up to the engine to figure out where this module is and load it, but some, like libp11, make this configurable through the MODULE_PATH control.
","227","<openssl><pkcs#11>","1","2","1","2018-12-02 17:23:42","","0","","","","","2018-12-02 09:58:11",""
"45413752","Keys created from one HSM client are not available for use in another client","I am building a solution to store keys and encrypt\decrypt data using an HSM. I am using a network HSM manufactured by Thales. The thing I have noticed is that a key generated in client machine 1 is inaccessible in client machine 2. The key can only be used to encrypt\decrypt data in client machine 1. Is there any thing that needs to be changed in my implementation or is there something to be changed in net-HSM configuration to enable this. I am using PKCS11Iterop library for all the key management operations.
I am using token based OCS protection.
","I suppose your client machine 1 has a new file in kmdata/local directory associated to the new key generated.
But your client machine 2 has not this file in his kmdata/local directory.
You have to find a way to share the kmdata/local directory, for instance, using NFS.
","223","<pkcs#11><hsm><pkcs11interop>","2","4","1","2017-07-31 15:28:03","","0","1","2601664","","2017-07-31 12:58:01","2017-07-31 10:45:00",""
"43358353","Attempted to read or write protected memory. PKCS11Interop","I am getting Access violation exception in the highlighed line.

Attempted to read or write protected memory. This is often an indication that other memory is corrupt.

I have the certificate on the hsm and the label . I am building my application as x64
public void getCertificateFromHSM(string certLabel) {

    List<ObjectAttribute> objectAttributes = new List<ObjectAttribute>();
    objectAttributes.Add(new ObjectAttribute(CKA.CKA_CLASS, CKO.CKO_CERTIFICATE));
    objectAttributes.Add(new ObjectAttribute(CKA.CKA_LABEL, certLabel));

    **session.FindObjectsInit(objectAttributes);** --Exception from here

    // Get search results
    List<ObjectHandle> foundObjects = session.FindObjects(2);

    // Terminate searching
    session.FindObjectsFinal();


    // Prepare list of empty attributes we want to read
    List<CKA> attributes = new List<CKA>();
    attributes.Add(CKA.CKA_LABEL);
    attributes.Add(CKA.CKA_VALUE);
}                                                                               

I am getting exception from this line session.FindObjectsInit();. I am new to pkcs11. 
Any help in this regard is appreciated. 
I also tried to build the application as 32 bit by passing the 32bit crypto.dll ,but in that case i am getting exception from this line in PKCS11Interop Net.Pkcs11Interop.LowLevelAPI81.Delegates.InitializeWithGetF‌​unctionList(IntPtr libraryHandle) and the exception is 

Value was either too large or too small for a UInt32. OverflowExcepiton was unhandled. 

","You seem to be using wrong set of HighLevelAPIs. You need to use classes from Net.Pkcs11Interop.HighLevelAPI namespace without any numbers at the end. 
In other words you need to use following line
using Net.Pkcs11Interop.HighLevelAPI;

in your code instead of
using Net.Pkcs11Interop.HighLevelAPI81;

See Pkcs11Interop library architecture for more info and you can also take a look at official code samples which are using Net.Pkcs11Interop.HighLevelAPI too.
","223","<pkcs#11><pkcs11interop>","1","1","1","2017-06-26 21:01:10","43362033","1","","3325704","","2017-06-26 21:01:10","2017-04-12 00:33:31",""
"24908297","Access to SmartCard with iText","I am testing electronic sign applications with a SmartCard D–TRUST certificate v 2.6.1.
I have developed a web service application that reads from the SmartCard, gets the availables SLOTS and the certificates with the purpose of signing documents.
I'm using Java, using iText(version 5.4.3) and BounceCastle (version 15on-1.48), but there is a problem when I am trying to get the availables slots: It returns 1000, 0 and 1 and when I want to access to the certificates, the application encountered a problem: 

Initialization failed in the method call
  Security.addProvider(providerPKCS11);

I use the library personal.dll, placed in C:\Program Files(x86)\Personal\ 
And the code in Java is :
public class SmartCard
{
    public static long[] getSlots (String libraryPath) throws IOException
    {
        CK_C_INITIALIZE_ARGS initArgs = new CK_C_INITIALIZE_ARGS();
        String functionList = ""C_GetFunctionList"";
        initArgs.flags = 0;
        PKCS11 tmpPKCS11 = null;
        long[] slotList = null;
        try
        {
            try
            {
                tmpPKCS11 = PKCS11.getInstance(libraryPath, functionList, initArgs, false);
            }
            catch (IOException ex)
            {
                ex.printStackTrace();
                throw ex;
            }
        }
        catch (PKCS11Exception e)
        {
            try
            {
                initArgs = null;
                tmpPKCS11 = PKCS11.getInstance(libraryPath, functionList, initArgs, true);
            }
            catch (IOException ex)
            {
                        ex.printStackTrace();
            }
            catch (PKCS11Exception ex)
            {
                        ex.printStackTrace();
            }
        }
        try
        {
            slotList = tmpPKCS11.C_GetSlotList(true);
            System.out.println(""****  SLOTS  ****"");
            System.out.println(String.format(""Hay %d slots."", slotList.length));
            System.out.println(""------"");
            for (long slot : slotList)
            {
                CK_TOKEN_INFO tokenInfo = tmpPKCS11.C_GetTokenInfo(slot);
                System.out.println(""slot: "" + slot + ""\nmanufacturerID: ""
                                + String.valueOf(tokenInfo.manufacturerID)
                                + ""\nmodel: "" + String.valueOf(tokenInfo.model));
                System.out.println(""----"");
            }
        }
        catch (PKCS11Exception ex)
        {
            ex.printStackTrace();
        }
        catch (Throwable t)
        {
            t.printStackTrace();
        }
        finally
        {
            tmpPKCS11 = null;
        }

        return slotList;
    }

    public static String getCertificadosInfo(String numeroPIN, String namePkcs11, String nameLibreria, long slotID) throws Exception
    {
        String strRetorno = """";
        KeyStore ks = null;
        Provider providerPKCS11 = null;

        try
        {
            BouncyCastleProvider providerBC = new BouncyCastleProvider();
            Security.addProvider(providerBC);

            String strPass = numeroPIN;
            char[] pass = null;
            if (strPass != null)
                        pass = strPass.toCharArray();

            String configFilePath = String.Format(""name=%s\nlibrary=%s\nslotListIndex=%d"", namePkcs11, nameLibreria, slotID);
            ByteArrayInputStream bais = new ByteArrayInputStream(configFilePath.getBytes());

            providerPKCS11 = new SunPKCS11(bais);
            Security.addProvider(providerPKCS11);  // HERE THE EXCEPTION IS THROWN: Initialization failed

            ks = KeyStore.getInstance(""PKCS11"");
            ks.load(null, pass);

            boolean bNoHayCertificados = true;
            Enumeration<String> oEnum = ks.aliases();

            .......

Anybody knows what could be the problem?
Thanks a lot, I will appreciate any help.
","I don't think there is anything wrong with the numbers returned. If you directly call the PKCS#11 module everything is fine. The number of available slots indicate the number of slots that may contain a token. As you can have any number of card readers, the number of slots is indeterminate. And you should not care, unless there is a token inside one of them.
It may be that you should not load the provider twice. You load it once directly in getSlots, then you let Sun PKCS#11 provider load it again. Otherwise, you should take a look at the Sun PKCS#11 logging to see why the .dll won't initialize. You can enable it by supplying -Djava.security.debug=sunpkcs11,pkcs11 to your call to the VM/runtime (java or javaw).
","218","<java><itext><bouncycastle><smartcard><pkcs#11>","1","0","1","2014-07-26 14:13:19","","1","","1726069","","2014-07-23 11:00:02","2014-07-23 10:43:15",""
"14106087","Incorparating SSO in addition/instead SSL","I have a system protected by SSL - and clients use a smartcard for accessing their certificate. I use java's pkcs11.
I have posted this question here (even with bounty):
pkcs11 sso (using prior windows login with smartcard)
The same smartcard is used for windows login - and I would like to save the client the touble of re-logging using the smartcard (PIN).
Many links I have read about this issue led me to the world of SSO: NTLM, Kerberose etc.
I feel SSO is a bit an overspec for what I wanted to acheive - And also by the looks of it - At least kerberose requires me to create a KDC server and other new components that will elongate my development time.
So - some introductory questions about SSO I couldn't find an answer to:

Will it actully solve the problem I presented? (The smartcards contain ""classic"" certificates signed by CA).
I would like a minimal solution (in terms of components) - which is the best implemnation for this? NTLM, Kerberose? I will probably have to use a jna wrapper like WAFFLE, right? By the way, I will use WINDOWS as OS.

Thank you for your help.
","The only way is to set up a Windows Active Directory (a KDC impl) to use the full power of SSO with Kerberos. There is no other option. Don't use NTLM, it has a lot of drawbacks. Waffle has its drawbacks. Due its different nature, it does not integrate into JGSS and makes it unusable comprehensively in Java.
If you want to avoid licensing fees for Windows server, you may try Samba 4 which is an OSS alternative to the AD.
I am doing this for years in a corporate environment from Windows client to a Unix-based server.
","217","<java><ssl><single-sign-on><kerberos><pkcs#11>","0","0","1","2013-01-09 08:12:31","","2","","-1","","2017-05-23 10:26:40","2012-12-31 21:11:08",""
"55697551","JDK11 TLS v1.2 negotiation fails when using NSS-Fips with SunPKCS11 java.security.InvalidKeyException: No installed provider supports key","When upgrading Java 8 to Java 11 - SSL TLSv1.2 Handshake fails with the following error when using SunPKCS11 and NSS with FIPS enabled. The SSL negotiation works when using TLSv1.1 or when using Java 8. 
javax.net.ssl|ERROR|41|https-jsse-nio-x.x.xx.xxx-8443-exec-10|2019-04-16 10:08:23.496 EDT|TransportContext.java:312|Fatal (INTERNAL_ERROR): Unsupported signature algorithm: rsa_pss_rsae_sha256 (
            ""throwable"" : {
              java.security.InvalidKeyException: No installed provider supports this key: sun.security.pkcs11.P11Key$P11PrivateKey
Attached is the output using -Djavax.net.debug=ssl:handshake   
javax.net.ssl|DEBUG|41|https-jsse-nio-x.x.xx.xxx-8443-exec-10|2019-04-16 10:08:23.468 EDT|ClientHello.java:809|Consuming ClientHello handshake message (
        ""ClientHello"": {
          ""client version""      : ""TLSv1.2"",
          ""random""              : ""AF 54 0F C4 94 E5 62 8D B4 A9 8D 2E 84 21 2D D0 B0 17 5A BB BB AD 9C B4 3C 66 0B 5A 4F 90 06 64"",
          ""session id""          : """",
          ""cipher suites""       : ""[TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA(0xC00A), TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256(0xC02B), TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA(0xC009), TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA(0xC014), TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256(0xC02F), TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA(0xC013), TLS_RSA_WITH_AES_256_CBC_SHA(0x0035), TLS_RSA_WITH_AES_256_CBC_SHA256(0x003D), TLS_RSA_WITH_AES_128_GCM_SHA256(0x009C), TLS_RSA_WITH_AES_128_CBC_SHA(0x002F), TLS_RSA_WITH_AES_128_CBC_SHA256(0x003C)]"",
          ""compression methods"" : ""00"",
          ""extensions""          : [
            ""server_name (0)"": {
              type=host_name (0), value=autotestsw.initia.com
            },
            ""renegotiation_info (65,281)"": {
              ""renegotiated connection"": [<no renegotiated connection>]
            },
            ""supported_groups (10)"": {
              ""versions"": [x25519, secp256r1, secp384r1, secp521r1]
            },
            ""ec_point_formats (11)"": {
              ""formats"": [uncompressed]
            },
            ""signature_algorithms (13)"": {
              ""signature schemes"": [ecdsa_secp256r1_sha256, ecdsa_secp384r1_sha384, ecdsa_secp521r1_sha512, ecdsa_sha1, rsa_pss_rsae_sha256, rsa_pss_rsae_sha384, rsa_pss_rsae_sha512, rsa_pkcs1_sha256, rsa_pkcs1_sha384, rsa_pkcs1_sha512, rsa_pkcs1_sha1, dsa_sha256, dsa_sha384, dsa_sha512, dsa_sha1]
            }
          ]
        }
        )

javax.net.ssl|DEBUG|41|https-jsse-nio-x.x.xx.xxx-8443-exec-10|2019-04-16 10:08:23.468 EDT|SSLExtensions.java:170|Ignore unavailable extension: supported_versions
javax.net.ssl|DEBUG|41|https-jsse-nio-x.x.xx.xxx-8443-exec-10|2019-04-16 10:08:23.469 EDT|ClientHello.java:839|Negotiated protocol version: TLSv1.2
javax.net.ssl|DEBUG|41|https-jsse-nio-x.x.xx.xxx-8443-exec-10|2019-04-16 10:08:23.469 EDT|ServerNameExtension.java:327|no server name matchers, ignore server name indication
javax.net.ssl|DEBUG|41|https-jsse-nio-x.x.xx.xxx-8443-exec-10|2019-04-16 10:08:23.469 EDT|SSLExtensions.java:189|Consumed extension: server_name
javax.net.ssl|DEBUG|41|https-jsse-nio-x.x.xx.xxx-8443-exec-10|2019-04-16 10:08:23.470 EDT|SSLExtensions.java:170|Ignore unavailable extension: max_fragment_length
javax.net.ssl|DEBUG|41|https-jsse-nio-x.x.xx.xxx-8443-exec-10|2019-04-16 10:08:23.470 EDT|SSLExtensions.java:170|Ignore unavailable extension: status_request
javax.net.ssl|DEBUG|41|https-jsse-nio-x.x.xx.xxx-8443-exec-10|2019-04-16 10:08:23.470 EDT|SSLExtensions.java:189|Consumed extension: supported_groups
javax.net.ssl|DEBUG|41|https-jsse-nio-x.x.xx.xxx-8443-exec-10|2019-04-16 10:08:23.470 EDT|SSLExtensions.java:189|Consumed extension: ec_point_formats
javax.net.ssl|DEBUG|41|https-jsse-nio-x.x.xx.xxx-8443-exec-10|2019-04-16 10:08:23.471 EDT|SSLExtensions.java:189|Consumed extension: signature_algorithms
javax.net.ssl|DEBUG|41|https-jsse-nio-x.x.xx.xxx-8443-exec-10|2019-04-16 10:08:23.471 EDT|SSLExtensions.java:170|Ignore unavailable extension: signature_algorithms_cert
javax.net.ssl|DEBUG|41|https-jsse-nio-x.x.xx.xxx-8443-exec-10|2019-04-16 10:08:23.472 EDT|SSLExtensions.java:170|Ignore unavailable extension: status_request_v2
javax.net.ssl|DEBUG|41|https-jsse-nio-x.x.xx.xxx-8443-exec-10|2019-04-16 10:08:23.472 EDT|SSLExtensions.java:170|Ignore unavailable extension: supported_versions
javax.net.ssl|DEBUG|41|https-jsse-nio-x.x.xx.xxx-8443-exec-10|2019-04-16 10:08:23.473 EDT|SSLExtensions.java:189|Consumed extension: renegotiation_info
javax.net.ssl|WARNING|41|https-jsse-nio-x.x.xx.xxx-8443-exec-10|2019-04-16 10:08:23.474 EDT|SSLExtensions.java:212|Ignore impact of unsupported extension: server_name
javax.net.ssl|DEBUG|41|https-jsse-nio-x.x.xx.xxx-8443-exec-10|2019-04-16 10:08:23.474 EDT|SSLExtensions.java:204|Ignore unavailable extension: max_fragment_length
javax.net.ssl|DEBUG|41|https-jsse-nio-x.x.xx.xxx-8443-exec-10|2019-04-16 10:08:23.474 EDT|SSLExtensions.java:204|Ignore unavailable extension: status_request
javax.net.ssl|WARNING|41|https-jsse-nio-x.x.xx.xxx-8443-exec-10|2019-04-16 10:08:23.475 EDT|SSLExtensions.java:212|Ignore impact of unsupported extension: supported_groups
javax.net.ssl|WARNING|41|https-jsse-nio-x.x.xx.xxx-8443-exec-10|2019-04-16 10:08:23.475 EDT|SSLExtensions.java:212|Ignore impact of unsupported extension: ec_point_formats
javax.net.ssl|WARNING|41|https-jsse-nio-x.x.xx.xxx-8443-exec-10|2019-04-16 10:08:23.476 EDT|SignatureScheme.java:379|Unsupported signature scheme: dsa_sha384
javax.net.ssl|WARNING|41|https-jsse-nio-x.x.xx.xxx-8443-exec-10|2019-04-16 10:08:23.476 EDT|SignatureScheme.java:379|Unsupported signature scheme: dsa_sha512
javax.net.ssl|DEBUG|41|https-jsse-nio-x.x.xx.xxx-8443-exec-10|2019-04-16 10:08:23.476 EDT|SSLExtensions.java:221|Populated with extension: signature_algorithms
javax.net.ssl|DEBUG|41|https-jsse-nio-x.x.xx.xxx-8443-exec-10|2019-04-16 10:08:23.477 EDT|SSLExtensions.java:204|Ignore unavailable extension: signature_algorithms_cert
javax.net.ssl|DEBUG|41|https-jsse-nio-x.x.xx.xxx-8443-exec-10|2019-04-16 10:08:23.477 EDT|SSLExtensions.java:204|Ignore unavailable extension: application_layer_protocol_negotiation
javax.net.ssl|DEBUG|41|https-jsse-nio-x.x.xx.xxx-8443-exec-10|2019-04-16 10:08:23.477 EDT|SSLExtensions.java:204|Ignore unavailable extension: status_request_v2
javax.net.ssl|DEBUG|41|https-jsse-nio-x.x.xx.xxx-8443-exec-10|2019-04-16 10:08:23.477 EDT|SSLExtensions.java:204|Ignore unavailable extension: extended_master_secret
javax.net.ssl|DEBUG|41|https-jsse-nio-x.x.xx.xxx-8443-exec-10|2019-04-16 10:08:23.478 EDT|SSLExtensions.java:204|Ignore unavailable extension: supported_versions
javax.net.ssl|WARNING|41|https-jsse-nio-x.x.xx.xxx-8443-exec-10|2019-04-16 10:08:23.478 EDT|SSLExtensions.java:212|Ignore impact of unsupported extension: renegotiation_info
javax.net.ssl|DEBUG|41|https-jsse-nio-x.x.xx.xxx-8443-exec-10|2019-04-16 10:08:23.488 EDT|ServerHello.java:439|use cipher suite TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256
javax.net.ssl|DEBUG|41|https-jsse-nio-x.x.xx.xxx-8443-exec-10|2019-04-16 10:08:23.489 EDT|StatusResponseManager.java:763|Staping disabled or is a resumed session
javax.net.ssl|ALL|41|https-jsse-nio-x.x.xx.xxx-8443-exec-10|2019-04-16 10:08:23.489 EDT|ServerNameExtension.java:450|No expected server name indication response
javax.net.ssl|DEBUG|41|https-jsse-nio-x.x.xx.xxx-8443-exec-10|2019-04-16 10:08:23.490 EDT|SSLExtensions.java:257|Ignore, context unavailable extension: server_name
javax.net.ssl|ALL|41|https-jsse-nio-x.x.xx.xxx-8443-exec-10|2019-04-16 10:08:23.490 EDT|MaxFragExtension.java:296|Ignore unavailable max_fragment_length extension
javax.net.ssl|DEBUG|41|https-jsse-nio-x.x.xx.xxx-8443-exec-10|2019-04-16 10:08:23.490 EDT|SSLExtensions.java:257|Ignore, context unavailable extension: max_fragment_length
javax.net.ssl|DEBUG|41|https-jsse-nio-x.x.xx.xxx-8443-exec-10|2019-04-16 10:08:23.490 EDT|SSLExtensions.java:257|Ignore, context unavailable extension: status_request
javax.net.ssl|WARNING|41|https-jsse-nio-x.x.xx.xxx-8443-exec-10|2019-04-16 10:08:23.491 EDT|SSLExtensions.java:243|Ignore, no extension producer defined: ec_point_formats
javax.net.ssl|DEBUG|41|https-jsse-nio-x.x.xx.xxx-8443-exec-10|2019-04-16 10:08:23.491 EDT|AlpnExtension.java:365|Ignore unavailable extension: application_layer_protocol_negotiation
javax.net.ssl|DEBUG|41|https-jsse-nio-x.x.xx.xxx-8443-exec-10|2019-04-16 10:08:23.491 EDT|SSLExtensions.java:257|Ignore, context unavailable extension: application_layer_protocol_negotiation
javax.net.ssl|DEBUG|41|https-jsse-nio-x.x.xx.xxx-8443-exec-10|2019-04-16 10:08:23.492 EDT|SSLExtensions.java:257|Ignore, context unavailable extension: status_request_v2
javax.net.ssl|DEBUG|41|https-jsse-nio-x.x.xx.xxx-8443-exec-10|2019-04-16 10:08:23.492 EDT|SSLExtensions.java:257|Ignore, context unavailable extension: extended_master_secret


    javax.net.ssl|DEBUG|41|https-jsse-nio-x.x.xx.xxx-8443-exec-10|2019-04-16 10:08:23.492 EDT|ServerHello.java:364|Produced ServerHello handshake message (
        ""ServerHello"": {
          ""server version""      : ""TLSv1.2"",
          ""random""      : ""A1 25 47 B4 A9 F7 DB 96 3B 59 84 EB 36 32 76 51 B5 49 11 B5 DC 41 46 25 68 AC 59 95 65 C3 B8 DA"",
          ""session id""  : ""E9 3F 42 FB C9 84 A2 55 FA DD 15 7E AD E7 08 86 BC 80 EC C1 F4 2C 64 69 E2 55 DA 0D 60 CA F5 13"",
          ""cipher suite"": ""TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256(0xC02F)"",
          ""compression methods"" : ""00"",
          ""extensions""          : [
            ""renegotiation_info (65,281)"": {
              ""renegotiated connection"": [<no renegotiated connection>]
            }
          ]
        }
        )

    javax.net.ssl|DEBUG|41|https-jsse-nio-x.x.xx.xxx-8443-exec-10|2019-04-16 10:08:23.495 EDT|CertificateMessage.java:262|Produced server Certificate handshake message (
    ""Certificates"": [
      ""certificate"" : {
        ""version""            : ""v3"",
        ""serial number""      : ""10 02"",
        ""signature algorithm"": ""SHA256withRSA"",
        ""issuer""             : ""CN= i2git Intermediate CA, OU= Certificate Authority, O=initia, ST=Virginia, C=US"",
        ""not before""         : ""2019-04-12 15:34:43.000 EDT"",
        ""not  after""         : ""2024-04-10 15:34:43.000 EDT"",
        ""subject""            : ""CN=autotestsw1.initia.com"",
        ""subject public key"" : ""RSA"",
        ""extensions""         : [
          {
            ObjectId: 2.16.840.1.113730.1.13 Criticality=false
          },
          {
            ObjectId: 2.5.29.35 Criticality=false
            AuthorityKeyIdentifier [
            KeyIdentifier [
            0000: 88 A9 E4 46 43 35 8B 10   D7 AF B5 D1 11 EA 06 5A  ...FC5.........Z
            0010: F9 C5 E9 27                                        ...'
            ]
            [CN= i2git Root CA, OU= Certificate Authority, O=initia, ST=Virginia, C=US]
            SerialNumber: [    1000]
            ]
          },
          {
            ObjectId: 2.5.29.19 Criticality=false
            BasicConstraints:[
              CA:false
              PathLen: undefined
            ]
          },
          {
            ObjectId: 2.5.29.37 Criticality=false
            ExtendedKeyUsages [
              serverAuth
            ]
          },
          {
            ObjectId: 2.5.29.15 Criticality=true
            KeyUsage [
              DigitalSignature
              Key_Encipherment
            ]
          },
          {
            ObjectId: 2.16.840.1.113730.1.1 Criticality=false
            NetscapeCertType [
               SSL server
            ]
          },
          {
            ObjectId: 2.5.29.17 Criticality=false
            SubjectAlternativeName [
              DNSName: autotestsw1-rel.initia.com
            ]
          },
          {
            ObjectId: 2.5.29.14 Criticality=false
            SubjectKeyIdentifier [
            KeyIdentifier [
            0000: FF D4 21 56 12 F3 F4 DF   DD A0 B4 FF D5 8C 46 A2  ..!V..........F.
            0010: 2D 04 E7 96                                        -...
            ]
            ]
          }
        ]},
      ""certificate"" : {
        ""version""            : ""v3"",
        ""serial number""      : ""10 00"",
        ""signature algorithm"": ""SHA256withRSA"",
        ""issuer""             : ""CN= i2git Root CA, OU= Certificate Authority, O=initia, ST=Virginia, C=US"",
        ""not before""         : ""2019-04-12 11:55:21.000 EDT"",
        ""not  after""         : ""2029-04-09 11:55:21.000 EDT"",
        ""subject""            : ""CN= i2git Intermediate CA, OU= Certificate Authority, O=initia, ST=Virginia, C=US"",
        ""subject public key"" : ""RSA"",
        ""extensions""         : [
          {
            ObjectId: 2.5.29.35 Criticality=false
            AuthorityKeyIdentifier [
            KeyIdentifier [
            0000: C5 A6 7D 48 E4 2E 7D E1   8D 28 E6 F9 28 BC 00 01  ...H.....(..(...
            0010: 10 7E E6 62                                        ...b
            ]
            ]
          },
          {
            ObjectId: 2.5.29.19 Criticality=true
            BasicConstraints:[
              CA:true
              PathLen:0
            ]
          },
          {
            ObjectId: 2.5.29.15 Criticality=true
            KeyUsage [
              DigitalSignature
              Key_CertSign
              Crl_Sign
            ]
          },
          {
            ObjectId: 2.5.29.14 Criticality=false
            SubjectKeyIdentifier [
            KeyIdentifier [
            0000: 88 A9 E4 46 43 35 8B 10   D7 AF B5 D1 11 EA 06 5A  ...FC5.........Z
            0010: F9 C5 E9 27                                        ...'
            ]
            ]
          }
        ]}
    ]
    )

javax.net.ssl|ERROR|41|https-jsse-nio-x.x.xx.xxx-8443-exec-10|2019-04-16 10:08:23.496 EDT|TransportContext.java:312|Fatal (INTERNAL_ERROR): Unsupported signature algorithm: rsa_pss_rsae_sha256 (
        ""throwable"" : {
          java.security.InvalidKeyException: No installed provider supports this key: sun.security.pkcs11.P11Key$P11PrivateKey
                at java.base/java.security.Signature$Delegate.chooseProvider(Signature.java:1163)
                at java.base/java.security.Signature$Delegate.engineInitSign(Signature.java:1204)
                at java.base/java.security.Signature.initSign(Signature.java:546)
                at java.base/sun.security.ssl.SignatureScheme.getSignature(SignatureScheme.java:473)
                at java.base/sun.security.ssl.ECDHServerKeyExchange$ECDHServerKeyExchangeMessage.<init>(ECDHServerKeyExchange.java:155)
                at java.base/sun.security.ssl.ECDHServerKeyExchange$ECDHServerKeyExchangeProducer.produce(ECDHServerKeyExchange.java:499)
                at java.base/sun.security.ssl.ClientHello$T12ClientHelloConsumer.consume(ClientHello.java:1102)
                at java.base/sun.security.ssl.ClientHello$ClientHelloConsumer.onClientHello(ClientHello.java:854)
                at java.base/sun.security.ssl.ClientHello$ClientHelloConsumer.consume(ClientHello.java:813)
                at java.base/sun.security.ssl.SSLHandshake.consume(SSLHandshake.java:392)
                at java.base/sun.security.ssl.HandshakeContext.dispatch(HandshakeContext.java:441)
                at java.base/sun.security.ssl.SSLEngineImpl$DelegatedTask$DelegatedAction.run(SSLEngineImpl.java:1074)
                at java.base/sun.security.ssl.SSLEngineImpl$DelegatedTask$DelegatedAction.run(SSLEngineImpl.java:1061)
                at java.base/java.security.AccessController.doPrivileged(AccessController.java:688)
                at java.base/sun.security.ssl.SSLEngineImpl$DelegatedTask.run(SSLEngineImpl.java:1008)
                at org.apache.tomcat.util.net.SecureNioChannel.tasks(SecureNioChannel.java:423)
                at org.apache.tomcat.util.net.SecureNioChannel.handshakeUnwrap(SecureNioChannel.java:483)
                at org.apache.tomcat.util.net.SecureNioChannel.handshake(SecureNioChannel.java:238)
                at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1392)
                at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
                at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
                at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
                at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
                at java.base/java.lang.Thread.run(Thread.java:835)}

)

javax.net.ssl|WARNING|41|https-jsse-nio-x.x.xx.xxx-8443-exec-10|2019-04-16 10:08:23.497 EDT|SSLEngineOutputRecord.java:168|outbound has closed, ignore outbound application data
javax.net.ssl|WARNING|40|https-jsse-nio-x.x.xx.xxx-8443-exec-9|2019-04-16 10:08:23.501 EDT|SSLEngineOutputRecord.java:168|outbound has closed, ignore outbound application data

","","217","<java-11><pkcs#11><nss>","1","","0","2019-04-16 15:40:54","","6","","11365446","","2019-04-16 15:40:54","2019-04-15 21:34:53",""
"51693695","PKCS#11 working on localhost, but it is not working on a live web server (client machine)","I am working with Net.Pkcs11Interop.HighLevelAPI.Pkcs11 to get my epass2003 smart card token details. My code is working fine on localhost; after running I am getting all token information, but whenever I publish my code on my demo server and run the website on my machine my code does not detect my smartcard USB token.
","As Jariq pointed out in his comment, PKCS#11 lib will be accessible on Server but not Client.  If you use PKCS#11, on client side, web application user need to know path to token driver which is different for different token brands.
Modern token drivers has CSP layer above PKCS#11 functions it provides which helps to make certificates (not private key) in token available in Certificate-Store. Thus I would suggest you to use any of the available Browser Extension which can get access to your local certificate store. CSP would handle the rest.
One such (free) extension is provided by my company. You may refer it here
","212","<c#><asp.net><smartcard><pkcs#11><pkcs11interop>","2","0","1","2019-05-21 13:57:29","","8","0","63550","","2018-08-05 19:32:51","2018-08-05 11:01:43",""
"40297492","itext- can't sign pdf with another usb token","so i wrote a programme that can sign pdf using usb token and everything is fine, i tried to sign using another token from the same company(same provider) but different style(no finger print) and i cant even get the login window to show up.
this is the error i get:
 SEVERE: null
java.io.IOException: load failed
    at sun.security.pkcs11.P11KeyStore.engineLoad(P11KeyStore.java:763)
    at java.security.KeyStore.load(KeyStore.java:1445)
Caused by: javax.security.auth.login.LoginException: no password provided, and no callback handler available for retrieving password
    at sun.security.pkcs11.SunPKCS11.login(SunPKCS11.java:1184)
    at sun.security.pkcs11.P11KeyStore.login(P11KeyStore.java:849)
    at sun.security.pkcs11.P11KeyStore.engineLoad(P11KeyStore.java:751)
    ... 40 more

","String pass="""";
KeyStore.PasswordProtection pp = new keyStore.PasswordProtection(pass.toCharArray());
    ks.load(null ,  pp.getPassword() );

that solved my problem
","211","<java><pdf><itext><pkcs#11>","1","4","1","2016-10-28 03:56:11","40297808","2","","","","","2016-10-28 03:13:24",""
"28627420","Create a .jks file from a Certificate and private Key","I wanted to create a .jks file using a Certificate and a private Key from an etoken programmatically.
I could access the etoken using the password but could not read the Certificate or the private key.
In an earlier question I had asked whether the private Key could be extracted from the etoken for which I was told it was not possible.
So, my question is whether I could get the reference of the private key using PKCS11..
Thank you.
","You can get the reference (object handle) of the PrivateKey using PKCS11. You can even get the public components of the PrivateKey. But you cannot extract the sensitive data that comprises the key.
","209","<java><ssl><x509certificate><pkcs#11>","1","0","1","2015-08-01 05:18:28","","0","","3901974","","2015-02-20 11:11:44","2015-02-20 11:02:28",""
"32092195","how to load own pkcs#11 shared library in thunderbird","Created shared library by defining some functionalities (using pkcs#11 library) like cryptographic operations.
.so file created successfully, but unable to load that module.
loading the library in Mozilla thunderbird:
Display the thunderbird Menu -> preferences -> Account Settings -> Security -> Security Devices(under 'certificates')
","loading the pkcs# library:
Display the thunderbird Menu -> options ->advanced ->select ""security devices"" so that device manager is displayed.
now load your pkcs library by clicking on load and give required name and location of library file.
restart thurderbird to show your certificates in certificate manager.
thank you.
","208","<ubuntu><thunderbird><pkcs#11>","0","0","1","2015-09-23 10:03:19","32736566","0","","","","","2015-08-19 09:54:12",""
"48537592","XADES4j : is not a valid Win32 application (pkcs11)?","I used the XADES4j project to sign electronic invoices using JavaSE-1.8 (jre1.8.0_121) 32-bit version + Windows32Bits + eclipse (32-bit Luna) + Gemalto token and it worked well.
Now I'm using the Windows64 bit system, I have not changed anything: I installed the JavaSE-1.8 (jre1.8.0_121) 32-bit version, the same version of eclipse (32-bit) and the token Gemalto (gclib. 64bit dll).
when running the signature from eclipse I encountered runtime errors at the pkcs11 security provider installation level :
0 [main] DEBUG org.apache.xml.security.Init  - Registering default 
algorithms
------------------------------------------------------------
...
profileCore.getInstance
SignerBES.class
profileCore.getInstance
SignerBES.class
Provider 0: SUN
Provider 1: SunRsaSign
Provider 2: SunEC
Provider 3: SunJSSE
Provider 4: SunJCE
Provider 5: SunJGSS
Provider 6: SunSASL
Provider 7: XMLDSig
Provider 8: SunPCSC
Provider 9: SunMSCAPI
INTALL PROVIDER .....

Exception in thread ""AWT-EventQueue-0"" java.security.ProviderException: 
Initialization failed
at sun.security.pkcs11.SunPKCS11.<init>(SunPKCS11.java:376)
at sun.security.pkcs11.SunPKCS11.<init>(SunPKCS11.java:103)
at xades4j.providers.impl.PKCS11KeyStoreKeyingDataProvider.createPkcs11Provider(PKCS11KeyStoreKeyingDataProvider.java:327)
at xades4j.providers.impl.PKCS11KeyStoreKeyingDataProvider.access$1(PKCS11KeyStoreKeyingDataProvider.java:322)
at xades4j.providers.impl.PKCS11KeyStoreKeyingDataProvider$1.getBuilder(PKCS11KeyStoreKeyingDataProvider.java:180)
at xades4j.providers.impl.KeyStoreKeyingDataProvider.ensureInitialized(KeyStoreKeyingDataProvider.java:277)
at xades4j.providers.impl.KeyStoreKeyingDataProvider.getSigningCertificateChain(KeyStoreKeyingDataProvider.java:423)
at xades4j.production.SignerBES.sign(SignerBES.java:183)
at xades4j.production.SignerBES.sign(SignerBES.java:145)
at FENETRE.PSD_SIGNATURE1(FENETRE.java:706)
at FENETRE.actionPerformed(FENETRE.java:983)
at javax.swing.AbstractButton.fireActionPerformed(Unknown Source)
at javax.swing.AbstractButton$Handler.actionPerformed(Unknown Source)
at javax.swing.DefaultButtonModel.fireActionPerformed(Unknown Source)
at javax.swing.DefaultButtonModel.setPressed(Unknown Source)
at javax.swing.plaf.basic.BasicButtonListener.mouseReleased(Unknown Source)
at java.awt.Component.processMouseEvent(Unknown Source)
at javax.swing.JComponent.processMouseEvent(Unknown Source)
at java.awt.Component.processEvent(Unknown Source)
at java.awt.Container.processEvent(Unknown Source)
at java.awt.Component.dispatchEventImpl(Unknown Source)
at java.awt.Container.dispatchEventImpl(Unknown Source)
at java.awt.Component.dispatchEvent(Unknown Source)
at java.awt.LightweightDispatcher.retargetMouseEvent(Unknown Source)
at java.awt.LightweightDispatcher.processMouseEvent(Unknown Source)
at java.awt.LightweightDispatcher.dispatchEvent(Unknown Source)
at java.awt.Container.dispatchEventImpl(Unknown Source)
at java.awt.Window.dispatchEventImpl(Unknown Source)
at java.awt.Component.dispatchEvent(Unknown Source)
at java.awt.EventQueue.dispatchEventImpl(Unknown Source)
at java.awt.EventQueue.access$500(Unknown Source)
at java.awt.EventQueue$3.run(Unknown Source)
at java.awt.EventQueue$3.run(Unknown Source)
at java.security.AccessController.doPrivileged(Native Method)
at java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(Unknown Source)
at java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(Unknown Source)
at java.awt.EventQueue$4.run(Unknown Source)
at java.awt.EventQueue$4.run(Unknown Source)
at java.security.AccessController.doPrivileged(Native Method)
at java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(Unknown Source)
at java.awt.EventQueue.dispatchEvent(Unknown Source)
at java.awt.EventDispatchThread.pumpOneEventForFilters(Unknown Source)
at java.awt.EventDispatchThread.pumpEventsForFilter(Unknown Source)
at java.awt.EventDispatchThread.pumpEventsForHierarchy(Unknown Source)
at java.awt.EventDispatchThread.pumpEvents(Unknown Source)
at java.awt.EventDispatchThread.pumpEvents(Unknown Source)
at java.awt.EventDispatchThread.run(Unknown Source)
Caused by: java.io.IOException: %1 is not a valid Win32 application.
C:\Program Files\Gemalto\Classic Client\BIN\gclib.dl
at sun.security.pkcs11.wrapper.PKCS11.connect(Native Method)
at sun.security.pkcs11.wrapper.PKCS11.<init>(PKCS11.java:138)
at sun.security.pkcs11.wrapper.PKCS11.getInstance(PKCS11.java:151)
at sun.security.pkcs11.SunPKCS11.<init>(SunPKCS11.java:313)
... 46 more

How to solve this problem ?
","Install the Gemalto driver in another location that does not contain special characters
","206","<java><sign><pkcs#11><gemalto>","0","1","1","2018-02-07 10:24:22","48661342","8","","8751810","","2018-02-02 07:12:41","2018-01-31 08:24:08",""
"56818371","What is the correct behavior of C_Decrypt in pkcs#11?","I am using C_Decrypt with the CKM_AES_CBC_PAD mechanism. I know that my ciphertext which is 272 bytes long should actually decrypt to 256 bytes, which means a full block of padding was added.
I know that according to the standard when invoking C_Decrypt with a NULL output buffer the function may return an output length which is somewhat longer than the actual required length, in particular when padding is used this is understandable, as the function can't know how many padding bytes are in the final block without carrying out the actual decryption.
So the question is whether if I know that I should get exactly 256 bytes back, such as in the scenario I explained above, does it make sense that I am still getting a CKR_BUFFER_TOO_SMALL error as a result, despite passing a 256 bytes buffer? (To make it clear: I am indicating that this is the length of the output buffer in the appropriate output buffer length parameter, see the parameters of C_Decrypt to observe what  I mean)
I am encountering this behavior with a Safenet Luna device and am not sure what to make of it. Is it my code's fault for not querying for the length first by passing NULL in the output buffer, or is this a bug on the HSM/PKCS11 library side?
One more thing I should perhaps mention is that when I provide a 272 (256+16) bytes output buffer, the call succeeds and I am noticing that I am getting back my expected plaintext, but also the padding block which means 16 final bytes with the value 0x10. However, the output length is updated correctly to 256, not 272 - this also proves that I am not using CKM_AES_CBC instead of CKM_AES_CBC_PAD accidentally, which I suspected for a moment as well :)
","I have used CKM.AES_CBC_PAD padding mechanism with C_Decrypt in past. You have to make 2 calls to C_Decrypt (1st ==> To get the size of the plain text, 2nd ==> Actual decryption). see the documentation here which talks about determining the length of the buffer needed to hold the plain-text. 
Below is the step-by-step code to show the behavior of decryption:
//Defining the decryption mechanism
CK_MECHANISM mechanism = new CK_MECHANISM(CKM.AES_CBC_PAD);

//Initialize to zero -> variable to hold size of plain text
LongRef lRefDec = new LongRef();

// Get ready to decrypt 
CryptokiEx.C_DecryptInit(session_1, mechanism, key_handleId_in_hsm);

// Get the size of the plain text -> 1st call to decrypt
CryptokiEx.C_Decrypt(session_1, your_cipher, your_cipher.length, null, lRefDec);

// Allocate space to the buffer to store plain text.  
byte[] clearText = new byte[(int)lRefDec.value];

// Actual decryption -> 2nd call to decrypt
CryptokiEx.C_Decrypt(session_1, eFileCipher, eFileCipher.length, eFileInClear,lRefDec);

Sometimes, decryption fails because your input encryption data was misleading (however, encryption is successful but corresponding decryption will fail) the decryption algorithm. So it is important not to send raw bytes directly to the encryption algorithm; rather encoding the input data with UTF-8/16 schema's preserves the data from getting misunderstood as network control bytes.  
","206","<pkcs#11><pkcs#7><hsm><cbc-mode><cryptoki>","2","1","1","2019-07-10 15:41:38","","9","1","1833599","","2019-06-30 12:13:05","2019-06-29 14:35:36",""
"55127259","Import PKCS11 public key in BouncyCastle","I'm using a HSM to generate a pair of public/private elliptic key using PKCS11 commands, but I need to use the public key in BouncyCastle.
I can read the attribute EC_POINT in DER format, but I can not figure out how to import it in BouncyCastle.
This is my EC_POINT attribute:
CKA_EC_POINT:  04-39-04-ED-48-AE-D9-F8-02-CA-80-E1-1C-F2-3D-C9-C4-7D-B4-C5-9E-D2-53-A6-FE-27-D7-12-EF-C3-7F-2D-FC-D2-D0-31-62-8F-AF-60-19-E4-33-0F-63-A7-E4-95-33-0C-0D-D5-94-6C-92-B9-44-D8-2B
This is my working solution (thanks to Dave)
public ECPublicKeyParameters GetPubKeyFromParms(string curve, string pub) {
    var pc = ToByteArray(pub);
    var x9ecpar = ECNamedCurveTable.GetByName(curve);
    var ecdp = new ECDomainParameters(x9ecpar.Curve, x9ecpar.G, x9ecpar.N);
    var basePoint = lsEccUtilities.ValidateECPublicKey(TlsEccUtilities.DeserializeECPublicKey(null, ecdp, pc));
    var subinfo = SubjectPublicKeyInfoFactory.CreateSubjectPublicKeyInfo(basePoint);
    var publicKey = (ECPublicKeyParameters)PublicKeyFactory.CreateKey(subinfo);
    return publicKey;
}

The conversion of the signature from PKCS11 format to BouncyCastle format:
var r = signature.Take(signature.Length / 2).ToArray();
var s = signature.Skip(signature.Length / 2).ToArray();
var dersignature = new Org.BouncyCastle.Asn1.DerSequence(
                    new Org.BouncyCastle.Asn1.DerInteger(new Org.BouncyCastle.Math.BigInteger(1, r)),
                    new Org.BouncyCastle.Asn1.DerInteger(new Org.BouncyCastle.Math.BigInteger(1, s))
                ).GetDerEncoded();

","Okay, that indeed seems to be a (DER) OCTET STRING (tag 04, length 39 hex) containing a point in standard (X9.62/SEC1 et seq) uncompressed format (first octet 04) for a 28-octet (224-bit) curve. This seems silly to me, since all standard ASN.1 structures I know put a (point or other) pubkey in BIT STRING and include metadata, but apparently this is known or at least heard of because asn1.x9.X9ECPoint has a constructor for it. (For brevity and formatting, I omit the outer package org.bouncycastle that applies to everything.) 
To use a point, you need to specify what curve it is on; I know of two 224-bit curves (more exactly, parameter sets) standardized by SECG and X9, secp224{k1,r1}, the latter of which (only) is adopted by NIST in FIPS 186-2+ as P-224, and two standardized by TeleTrusT as brainpool224{r1,t1}. Those are available built-in from asn1.x9.ECNamedCurveTable or jce.ECNamedCurveTable . There may be any number of nonstandard curves, which AFAICT you would have to create on your own. If you don't know what curve your uncompressed point is on, you can guess with effectively perfect accuracy by testing whether it satisfies the equations of candidate curves; I'm too lazy to do this for you. (A compressed point would be much harder to guess, perhaps impossible.) 
Given the curve (from parameter set or direct) convert the DER to ASN1OctetString with ASN1OctetString.getInstance(ASN1Primitive.fromByteArray(byte[])) or just ASN1OctetString.getInstance(Object/*byte[]*/) which does the former for you, and then you can directly construct an X9ECPoint and depending on what APIs you want to use it with, either call .getPoint to convert to a math.ec.ECPoint or construct related (more complicated) structures like crypto.params.ECPublicKeyParameters.

Added in response to comment since this is rather long, plus somewhat alters my answer:
I didn't realize you are using dotNET; my experience is with the Java version of Bouncy, and I'm impressed the two versions track closely enough your code even compiles. FWIW the Java equivalents of your revised code, with the one addition of explicitly building a BCECPublicKey from the parameters because JCE Signature takes only a Key type not a Parameters type, does work for me with a test keypair and data. You might try a similar exercise -- create a keypair and signature (for known data) in software and confirm if your code works for that case, then try to isolate the differences in the hardware-signed case. Although PKCS11 and other hardware devices are often designed to prevent device-generated keys from being exported to software, where they are presumably at greater risk of compromise, they are not always so strict on import -- you might be able to use your software-generated key in the hardware for comparison.
In addition to the generic reasons for any signature to not verify (wrong data, wrong hash -- which you apparently default, wrong key) another possibility might be the signature format. There are two commonly used formats (or encodings) for ECDSA (and DSA) signatures: either an ASN.1 SEQUENCE of INTEGERs in DER, or just the two integers in fixed binary format concatenated without any metadata. 'Standard' Java (more exactly, Java with the Sun/Oracle providers) uses only the ASN.1 format; Java with Bouncy defaults to ASN.1 but supports the fixed format for ECDSA if you change the algorithm name to [hash]WITH{PLAIN,CVC}-ECDSA, so I would expect Bouncy in dotNET (assuming your code is using it, though not explicitly stated) may do the same. I understand (but don't have personal experience) PKCS11 uses fixed format. If I feed Java Bouncy the wrong format it throws an exception rather than returning verify=false, but I don't know if dotNET could be different here. Look at your signature value in detail to check which format it is.
","203","<pkcs#11>","0","1","1","2019-03-25 09:39:23","55183325","2","","7084639","","2019-03-25 09:39:23","2019-03-12 13:38:42",""
"51501701","pkcs11 exception parsing configuration: Unexpected value Token['(']","I know this is not a new problem (see https://bugs.openjdk.java.net/browse/JDK-8023745 ), but I was hoping someone would have a good workaround we could roll out.
We are deploying an application, which is using pkcs11 and have encountered a problem with parsing config, which is located in ""Program Files (x86)"". What we're getting is:
sun.security.pkcs11.ConfigurationException: Unexpected value Token['('], line 2
In the dev environment, moving the location to a ""clean"" path solves the problem, so the issue is definitely the (x86).
What would be a good workaround, with, hopefully, minimum trouble to the end user?
","So the best solution was to copy the file to another location, with a ""valid"" path, using FileUtils.copyFileToDirectory(), from org.apache.commons.io.FileUtils .
","199","<java><java-8><pkcs#11>","1","1","2","2019-05-30 13:03:01","51727192","0","1","319645","","2018-07-25 07:20:53","2018-07-24 14:52:49",""
"51501701","pkcs11 exception parsing configuration: Unexpected value Token['(']","I know this is not a new problem (see https://bugs.openjdk.java.net/browse/JDK-8023745 ), but I was hoping someone would have a good workaround we could roll out.
We are deploying an application, which is using pkcs11 and have encountered a problem with parsing config, which is located in ""Program Files (x86)"". What we're getting is:
sun.security.pkcs11.ConfigurationException: Unexpected value Token['('], line 2
In the dev environment, moving the location to a ""clean"" path solves the problem, so the issue is definitely the (x86).
What would be a good workaround, with, hopefully, minimum trouble to the end user?
","I found a simple workaround for this problem in Windows. In my case I'm trying to load the nss native libraries from Mozilla 32 bits installation directory. If I configure the path this way:
name = NSS
library = C:\Program Files (x86)\Mozilla Firefox\softokn3.dll

I get the Unexpected value Token['('] exception. If instead I trying to add "" to enclose the library path:
name = NSS
library = ""C:\Program Files (x86)\Mozilla Firefox\softokn3.dll""

Then the error change and I get: 
Caused by: sun.security.pkcs11.ConfigurationException: Absolute path required for library value: C:Program Files (x86)Mozilla Firefoxsoftokn3.dll

So seems that "" bypass the parenthesis problem however seems that produce that file.separator is lost, so my last attempt was using "" and ""escaping"" file.separator (simply applying replace(""\\"",""\\\\"") to the path before putting in the config):
name = NSS
library = ""C:\\Program Files (x86)\\Mozilla Firefox\\softokn3.dll""

This way the library is correctly loaded. I test it for java 8 update 141.
","199","<java><java-8><pkcs#11>","1","1","2","2019-05-30 13:03:01","51727192","0","1","319645","","2018-07-25 07:20:53","2018-07-24 14:52:49",""
"22421672","CKM_CAST5_CBC_PAD on LunaSA","I have a LunaSA HSM and i'm trying to unwrap a PKCS#8 formatted private key with a CAST5 secret key? The mechanism to use is CKM_CAST5_CBC_PAD the OID of which is 1.2.840.113533.7.66.10.
Unfortunately when i run the C_UnwrapKey function using the above mechanism with the specified secret key, the HSM returns with CKM_MECHANISM_INVALID which according to PKCS11 means that the mechanism is not supported for the specified cryptographic operation.
How can I unwrap my PKCS#8 private key using CKM_CAST5_CBC_PAD?
","With CKR_MECHANISM_INVALID your PKCS#11 library is telling you that ""An invalid mechanism was specified to the cryptographic operation"".
Are you sure that your PKCS#11 library supports CKM_CAST5_CBC_PAD mechanism? You can check by simply calling C_GetMechanismList() and checking whether this mechanism is present in the returned list.
","196","<pkcs#11><hsm>","1","1","1","2014-04-14 19:15:41","","0","0","589259","","2014-04-14 19:14:41","2014-03-15 08:54:09",""
"50014991","How to reload keys of Java security KeyStore?","Provider p = new SunPKCS11(configName);
char[]pin = ""****"".toCharArray();
KeyStore ks = KeyStore.getInstance(""PKCS11"", p);
ks.load(null, this.pin);

if (-1 == Security.addProvider(this.p)) {
    throw new RuntimeException(""Could not add security provider"");
}

How can I reload the keys ? Every time I run the code, I get the same instance of a KeyStore object, so the same keys.
","Here, I see that you are not loading any keystore eg no JSK file. Please see the below sample code
File f = new File(kStoreName);
if(f.exists() && !f.isDirectory()){
   try(FileInputStream fis = new FileInputStream(f.getAbsolutePath())){
     ks.load(fis, storePassword.toCharArray());
  }
}

","194","<keystore><pkcs#11><hsm>","2","0","2","2019-04-10 15:08:23","","2","","","","","2018-04-25 06:00:26",""
"50014991","How to reload keys of Java security KeyStore?","Provider p = new SunPKCS11(configName);
char[]pin = ""****"".toCharArray();
KeyStore ks = KeyStore.getInstance(""PKCS11"", p);
ks.load(null, this.pin);

if (-1 == Security.addProvider(this.p)) {
    throw new RuntimeException(""Could not add security provider"");
}

How can I reload the keys ? Every time I run the code, I get the same instance of a KeyStore object, so the same keys.
","Basically the Sun Provider implementation caches the Provider instance. Hence you are getting the instance in your application. One way to overcome this is to manually finalize the PKCS11 provider. You can find it in my other answer here.
Add a property to your provider instance p:
p.setProperty(""pkcs11LibraryPath"", library);

And then finalize the PKCS provider manually before fetching the keys:
PKCS11 pkcs11 = PKCS11.getInstance(((sun.security.pkcs11.SunPKCS11) provider).getProperty(""pkcs11LibraryPath""), null, null, true);
pkcs11.C_Finalize(PKCS11Constants.NULL_PTR);

","194","<keystore><pkcs#11><hsm>","2","0","2","2019-04-10 15:08:23","","2","","","","","2018-04-25 06:00:26",""
"48208575","firefox PKCS11 WebExtesion ""An unexpected error occurred""","I am working on developer mozzilla v58 with my smart eid card.
I call this code:
var pkcs11 = browser.pkcs11.installModule(""linux_pkcs11"");

My menifest is setup corretly, it finds the library, but it return error code:
[Exception... ""Component returned failure code: 0x80004005 (NS_ERROR_FAILURE) [nsIPKCS11ModuleDB.addModule]""  nsresult: ""0x80004005 (NS_ERROR_FAILURE)""  location: ""JS frame :: chrome://browser/content/ext-pkcs11.js :: installModule :: line 76""  data: no]
thank you for your help.
","before you called ""installModule()"", you should firstly verify, if Module is not already installed with function: ""isModuleInstalled()""
","193","<javascript><firefox><smartcard><pkcs#11><eid>","1","1","1","2018-01-11 15:13:16","48209450","0","","","","","2018-01-11 13:47:45",""
"42942720","How to signing on computer with private key in Android's app data","I am using SoftHSMv2
as cryptoki library for both Android and PC. I want to using Android device to replace an USB token and signing on PC with a certificate and key pair stored in my Android app data.
Just import the certificate from Android into PC's cert store are enough to PKCS#11 perform signing?
Do I need modify PKCS#11 library to push data to Android or any other modify?
","Since you did not specify which operating systems on PC you are targeting I'm assuming that Windows one of them. 
Windows itself doesn't support PKCS#11 standard and it has its own interface called CryptoAPI. So, if you want to perfom signing operation in such programs as Microsoft Outlook you need to implement a Cryptographic Service Provider (CSP)
 or Key Storage Provider (KSP). Or if your android device represents in system as a smart card you could implement Smart Card Minidriver. Schematic it will be something like this:
Windows -> YOUR_CSP (or YOUR_KSP) -> pkcs11 -> anroid device

Windows -> Microsoft Base Smart Card Crypto Provider 
(or Microsoft Smart Card Key Storage Provider) -> SCMinidriver -> pkcs11 ->android device 

Here you can get the SDK.
Also you should know that still not all programms supports KSP (only CSP). 
Note that Windows 7 and below requires that CSP dll must be signed with Code Signing certificate.
","193","<android><certificate><private-key><signing><pkcs#11>","0","2","1","2017-03-22 21:08:31","42962689","2","0","","","","2017-03-22 04:24:38",""
"49234210","How to get password failure count of crypto token (Smartcard) using PKCS11Interop","I have .Net application to interact with the crypto token (Smartcard) using PKCS11Interop library where users can login to the token and generate keypair and sign.
If users enter the wrong password multiple time token will be locked, how can I get the remaining number of attempt to login to the token.
while searching on the internet I came across Net.Pkcs11Interop.HighLevelAPI.TokenInfo.TokenFlags which contains this information
CKF_USER_PIN_COUNT_LOW 0x00010000 True if an incorrect user login
PIN has been entered at least
once since the last successful
authentication.
CKF_USER_PIN_FINAL_TRY 0x00020000 True if supplying an incorrect
user PIN will cause it to
become locked.
CKF_USER_PIN_LOCKED 0x00040000 True if the user PIN has been locked. User login to the token
is not possible

but these are boolean values, I need the exact number of retry left.
","PKCS#11 API does not provide exact number of retries left. As you have correctly found out it does provide similar information via TokenFlags:
// Get token info
TokenInfo tokenInfo = slot.GetTokenInfo();

if (tokenInfo.TokenFlags.UserPinCountLow)
{
    // An incorrect user login PIN has been entered at least once since the last successful authentication
}

if (tokenInfo.TokenFlags.UserPinFinalTry)
{
    // Supplying an incorrect user PIN will make it to become locked
}

if (tokenInfo.TokenFlags.UserPinLocked)
{
    // User PIN has been locked. User login to the token is not possible.
}

","192","<pkcs#11><pkcs11interop>","2","3","1","2018-03-12 18:00:25","49241697","0","1","","","","2018-03-12 11:33:34",""
"53576311","How to reinitialize a SunPKCS11 provider in tomcat after a driver failure","I have a PDF signing application that runs in tomcat, using SunPKCS11 and a network-connected HSM. The provider is stored in the application context and retrieved from there when needed. All works fine, except that after connection is lost between tomcat and the HSM (eg. after a network outage) the PKCS11 provider does not recover and tomcat needs to be restarted. I am looking for a way to reinitialize the provider after a failure (which I catch and act upon).
public Provider loadProvider(Boolean forceReInit) {
  ServletContext ctx = getServletContext();
  Provider provider = null;
  Provider cached = (Provider)ctx.getAttribute(""cachedProvider"");
  if(cached == null || forceReInit) {
    for(Provider p: Security.getProviders()) {
      if(p.getName().contains(""PKCS11"")) {
        Security.removeProvider(p.getName());
        p.clear();
      }
    }

    String configPath = ""/path/to/pkcs11.cfg"";
    provider = new SunPKCS11(new FileInputStream(configPath)); // Exception here
    Security.addProvider(provider);
    ctx.setAttribute(""cachedProvider"", provider);
  } else {
    provider = cached;
  } 

  return provider;
}

Used like this:
public class Signer {
  ...
  for(int i=0; i<2; i++) {
    Boolean forceReInit = (i>0);
    try {
      Provider p = loadProvider(forceReInit);
      return signDocumentWithProvider(p);
    } catch(Exception ex) {
      if(forceReInit) {
        // bail out after second failure
        throw(ex);
      }
      continue;
    }
  }
}

I always get a java.security.ProviderException when trying to load a new SunPKCS11 if one was already loaded before, even if I unload it.
Depending on the type of error/outage that lead to the provider being reloaded, the exception differs, but remains constant afterwards (below is one example).
Caused by: java.security.ProviderException: Initialization failed
    at sun.security.pkcs11.SunPKCS11.<init>(SunPKCS11.java:376)
    at sun.security.pkcs11.SunPKCS11.<init>(SunPKCS11.java:107)
    at my.package.loadProvider(Signer.java:102)
    ... 28 more
Caused by: sun.security.pkcs11.wrapper.PKCS11Exception: CKR_GENERAL_ERROR
    at sun.security.pkcs11.wrapper.PKCS11.C_GetTokenInfo(Native Method)
    at sun.security.pkcs11.Token.<init>(Token.java:135)
    at sun.security.pkcs11.SunPKCS11.initToken(SunPKCS11.java:858)
    at sun.security.pkcs11.SunPKCS11.<init>(SunPKCS11.java:367)
    ... 30 more

Does anybody know how I can reinitialize the SunPKCS11 provider after a driver failure?
","","188","<java><pkcs#11>","0","","0","2018-12-04 07:39:29","","1","","6427954","","2018-12-04 07:39:29","2018-12-02 00:34:14",""
"47302468","PKCS11 - Delete prefix ""SunPKCS11-""?","It is possible to delete the prefix ""SunPKCS11-""?
because always I get a provider whose name is ""SunPKCS11-SmartCard"" and not ""SmartCard"" .
this my code :
String configName = ""pkcs11.cfg"";

Provider p = getInstalledProvider(providerName);
if (p == null)
{ 
    p = new sun.security.pkcs11.SunPKCS11(configName);
}

Security.addProvider(p);
return KeyStore.Builder.newInstance(""PKCS11"", p, loadProtection);

and this my configuration file :
name = SmartCard
description = configuration file
library =C:\Program Files\Gemalto\Classic Client\BIN\gclib.dll

","As @EJP pointed, you cannot change the provider name. When you are creating the provider instance, Java prepends the string SunPKCS11-prefix to the name you provide. You can look at the Java documentation about it here.
Once you have created your provider instance, it is recommended to get the name using the Provider.getName().
","188","<java><sign><pkcs#11><gemalto>","0","0","1","2017-11-16 11:28:56","47310977","2","0","1611874","","2017-11-16 11:28:56","2017-11-15 08:20:03",""
"56550036","How to get public key from private key stored in HSMs","I have some private keys stored in the HSM but without public keys. I want to get the corresponding public key using PKCS11 interface.
If the private key is a RSA key, I can extract the modulus from CKA_MODULUS and exponent from CKA_PUBLIC_EXPONENT, and then construct the public key with these two numbers.
However, when it comes to ECDSA(or DSA) keys, how can I achieve the same goal?
CKA_EC_POINT attribute is not available for private keys.
I think the only useful information I can get is its curve parameters from CKA_EC_PARAMS, which is not enough to get the public point. 
","If you're using PKCS#11 library that implements PKCS#11 specification v2.40 then CKA_PUBLIC_KEY_INFO attribute is what you are looking for.
If you're using PKCS#11 library that implements PKCS#11 specification older than 2.40 then you cannot read EC public key value from EC private key object unless your device vendor provides some vendor specific attribute similar to CKA_PUBLIC_KEY_INFO attribute.
","188","<hsm><pkcs#11>","2","1","1","2019-06-12 10:31:18","","4","1","10151783","","2019-06-12 10:31:18","2019-06-11 16:54:05",""
"37917179","Java Applet With DLL Files","I have a java program that use PKCS11 and read digital certificates from e-token. This program uses libpkcs11wrapper.dll file. Program runs perfectly fine on local machine. But when I access it via server it gave me error that libpkcs11wrapper.dll file not found. So my question is how I can load the dll file on client machine from server? I have signed the applet. And here is the code which is giving error 
File jarPath = new File(applicationPath);
        if (!jarPath.isDirectory()) {
            jarPath = jarPath.getParentFile();
        }

    File pkcs11wrapperFile = new File(jarPath, ""libpkcs11wrapper"" + arch + "".dll"");
    System.out.println(""Absolute path is ""+pkcs11wrapperFile.getAbsolutePath());
    Pkcs11Shell pkcs11Shell = new Pkcs11Shell(pkcs11wrapperFile.getAbsolutePath());

","","187","<java><dll><applet><digital-signature><pkcs#11>","0","","0","2017-10-05 12:29:56","","5","","1000551","","2017-10-05 12:29:56","2016-06-20 07:53:13",""
"49797721","I can't sign xml file with HSM device","I'm trying to sign a xml file using PKCS11 library but I got some errors when I'm trying to sign. Here is my code and I pointed exception line. ComputeSignature method returns me exception and I'm confused.
...
                ObjectHandle publicKey = null;
                ObjectHandle privateKey = null;

                List<ObjectAttribute> publicKeyAttributes = new List<ObjectAttribute>();
                publicKeyAttributes.Add(new ObjectAttribute(CKA.CKA_TOKEN, true));
                publicKeyAttributes.Add(new ObjectAttribute(CKA.CKA_LABEL, ""label""));
                session.FindObjectsInit(publicKeyAttributes);
                List<ObjectHandle> oObjCollection = session.FindObjects(1);

                List<ObjectHandle> foundPublicKeys = session.FindAllObjects(publicKeyAttributes);

                List<ObjectAttribute> objectAttributess = session.GetAttributeValue(foundPublicKeys[0], new List<CKA>() { CKA.CKA_ID, CKA.CKA_LABEL, CKA.CKA_VALUE });
                byte[] ckaIdd = objectAttributess[0].GetValueAsByteArray();
                string ckaLabel = objectAttributess[1].GetValueAsString();
                byte[] ckaValue = objectAttributess[2].GetValueAsByteArray();
                var _rawData = ckaValue ?? throw new ArgumentNullException(nameof(ckaValue));
                var _parsedCertificate = new X509Certificate2(_rawData);

                Cer c = new Cer();

                var Key = c.GetRSAPublicKey(_parsedCertificate);

                XmlDocument doc = new XmlDocument();
                doc.Load(@""C:\Users\MyUser\Desktop\SampleFile.xml"");

                SignedXml signedXml = new SignedXml(doc);

                signedXml.SigningKey = Key;

                Reference reference = new Reference();
                reference.Uri = """";

                XmlDsigEnvelopedSignatureTransform env = new XmlDsigEnvelopedSignatureTransform();
                reference.AddTransform(env);

                signedXml.AddReference(reference);

                signedXml.ComputeSignature(); // Error occurs in this line

}} 


signedXml.ComputeSignature() method occurs System.NotSupportedException

How can I sign xml file with key that I get from HSM Device?
","","187","<c#><.net><pkcs#11><hsm><pkcs11interop>","0","","0","2018-04-12 13:21:38","","14","","","","","2018-04-12 13:21:38",""
"52639772","PKCS#11: C_Decrypt retured CKR_OPERATION_NOT_INITIALIZED","I have been trying to decrypt a file with a smart card but I get weird message.
I am using PKCS11Interop to invoke C_Decrypt in the dll file that uses pkcs11.h
to communicate with smart cards.
This is the code:
public byte[] Decrypt(byte[] encData)
    {
        byte[] decrypt = null;

        using (Session session = _slot.OpenSession(SessionType.ReadOnly))
        using (Mechanism mechanism = new Mechanism(CKM.CKM_RSA_PKCS))
        {
            decrypt = session.Decrypt(mechanism, _privateKeyHandle, encData);
        }

        return decrypt;
    }

The weird thing is, when I use Yubico smart card with opensc-pkcs11.dll, it works fine. When I use HSID5000 with hsid-pkcs11.dll it fails with message ""C_Decrypt returned CKR_OPERATION_NOT_INITIALIZED""
When I use the same smart card (HSID5000) but in pkcs11-tool instead of Pkcs11Interop, it works:
pkcs11-tool --id 01 --decrypt -p ******** -m RSA-PKCS --module hsid-pkcs11.dll --input-file input.enc

Here is the pkcs11-logger file generated with Pkcs11Interop in both scenarios (Opensc smart card and HSID smart card)
Yubico opensc smart card log file:
0x00000b04 : 0x00000734 : Calling C_Decrypt
0x00000b04 : 0x00000734 : Input
0x00000b04 : 0x00000734 :  hSession: 35424832
0x00000b04 : 0x00000734 :  pEncryptedData: 0000000002E334C0
0x00000b04 : 0x00000734 :  *pEncryptedData: HEX(793...D99)
0x00000b04 : 0x00000734 :  ulEncryptedDataLen: 256
0x00000b04 : 0x00000734 :  pData: 0000000002E346E0
0x00000b04 : 0x00000734 :  pulDataLen: 000000000042EB48
0x00000b04 : 0x00000734 :  *pulDataLen: 7
0x00000b04 : 0x00000734 : Output
0x00000b04 : 0x00000734 :  pData: 0000000002E346E0
0x00000b04 : 0x00000734 :  pulDataLen: 000000000042EB48
0x00000b04 : 0x00000734 :  *pData: HEX(730D0A730D0A73)
0x00000b04 : 0x00000734 :  *pulDataLen: 7
0x00000b04 : 0x00000734 : Returning 0 (CKR_OK)

HSID smart card log file:
0x00001b90 : 0x00000d94 : Calling C_Decrypt
0x00001b90 : 0x00000d94 : Input
0x00001b90 : 0x00000d94 :  hSession: 12274064
0x00001b90 : 0x00000d94 :  pEncryptedData: 0000000002E6A300
0x00001b90 : 0x00000d94 :  *pEncryptedData: HEX(49B....527)
0x00001b90 : 0x00000d94 :  ulEncryptedDataLen: 256
0x00001b90 : 0x00000d94 :  pData: 0000000002E6B520
0x00001b90 : 0x00000d94 :  pulDataLen: 00000000004AE938
0x00001b90 : 0x00000d94 :  *pulDataLen: 256
0x00001b90 : 0x00000d94 : Returning 145 (CKR_OPERATION_NOT_INITIALIZED)

Can someone help me with this?
Update #1:
The Full log file for the hsid-pkcs11.dll is here
Update #2: (Solution!)
After the remarkable comment from jariq, the HSID token doesn't like multiple calls to C_Decrypt, so I used his wrapper but instead of using the HighLevel library, I used the Lowlevel one and called C_Decrypt only once. And it worked!
Thanks to all of you.
","When executed with --decrypt argument pkcs11-tool calls (see source code) following PKCS#11 functions:

C_DecryptInit to initialize operation
C_Decrypt with allocated output buffer to receive the decrypted data

Pkcs11Interop calls (see source code) following PKCS#11 functions in implementation of session.Decrypt():

C_DecryptInit to initialize operation
C_Decrypt without allocated output buffer to determine length of decrypted data
C_Decrypt with allocated output buffer to receive the decrypted data

It seems that hsid-pkcs11.dll does not like it when application calls C_Decrypt twice as Pkcs11Interop does. However calling C_Decrypt twice is completely fine and this technique is described in chapter 11.2 of PKCS#11 v2.20 specification.
Exactly the same specification states on page 145 that:

C_Decrypt uses the convention described in Section 11.2 on producing output.

IMO you need to contact vendor of your unmanaged PKCS#11 library and ask him for fix or at least explanation.
","175","<smartcard><pkcs#11>","1","2","1","2018-10-08 05:26:14","52653377","5","1","5472344","","2018-10-08 05:26:14","2018-10-04 05:43:52",""
"40785970","Can Turbo LockBox use certificates from smartcard PKCS11","There is nice Delphi cryptography library https://sourceforge.net/projects/tplockbox/ It is possible to sign and very documents with this library. The question is - can this library access certificates that are stored in smarcart or can this library otherwise can use smartcard for signing and verification of documents. Maybe Turbo Lockbox with smartcard capabilities can replace the commercial XMLBlackbox product from Eldos https://www.eldos.com/sbb/desc-xml.php 
","","175","<delphi><public-key-encryption><pkcs#11>","1","","0","2016-11-24 12:04:39","","1","","","","","2016-11-24 12:04:39",""
"52540843","Export data object from smartcard with OpenSC","I try to export a data object from a smartcard. For this I am using OpenSC 0.19.0. The command pkcs11-tool.exe --list-objects shows that the following data object resides on the token.
Data Object 12345678
label: 'mylabel'
application: ''
app_id: <empty>
flags: modifiable

pkcs15-tool.exe --dump shows a path and data value of this data object.
pkcs15-tool.exe --read-data-object mylabel outputs only the content of the data value. I want to export this content to a local file.
Any help will be appreciated, thanks!
","The two following commands write a data object's content to a local file:
pkcs11-tool.exe --module ../pkcs11/opensc-pkcs11.dll --login --pin 1234 --read-object --type data --label mylabel --output-file test

pkcs15-tool.exe -read-data-object mylabel -o test

","174","<pkcs#11><opensc><pkcs#15>","0","0","1","2018-09-28 10:04:59","52552961","0","","6615643","","2018-09-28 10:02:04","2018-09-27 15:54:22",""
"57141247","Signing a Certificate Signing Request using a CA stored on a Yubikey","I want to sign a Certificate Signing Request using the private key & the certificate stored in the PIV Digital Signature slot.
I'm using the latest release of OpenSC for MacOS(https://github.com/OpenSC/OpenSC/releases/tag/0.19.0).
I have tried the pkcs11-tool, pkcs15-tool & yubikey-piv-tool.
All three tools provide a --sign API but they sign a digest generated from the data.
My requirement is to sign the Certificate Signing Request to generate a certificate.
The only option I have is to use the PKCS#11 engine for OpenSSL.
PKCS#11 engine: brew install engine_pkcs11
PKCS#11 Module: opensc-pkcs11.so
I will sign the CSR using the regular OpenSSL commands giving the key & the cert stored on the Yubikey using the engine option.(Probably using the PKCS#11 URI)
Using OpenSSL 1.0.2, I tried the following command.
engine -t dynamic -pre SO_PATH:/usr/local/Cellar/engine_pkcs11/0.1.8/lib/engines/engine_pkcs11.so -pre ID:pkcs11 -pre LIST_ADD:1 -pre LOAD -pre MODULE_PATH:/Library/OpenSC/lib/opensc-pkcs11.so

Response:
(dynamic) Dynamic engine loading support
[Success]: SO_PATH:/usr/local/Cellar/engine_pkcs11/0.1.8/lib/engines/engine_pkcs11.so
[Success]: ID:pkcs11
[Success]: LIST_ADD:1
[Success]: LOAD
[Success]: MODULE_PATH:/Library/OpenSC/lib/opensc-pkcs11.so
Loaded: (pkcs11) pkcs11 engine
     [ available ]

To sign the CSR, I'm using this command,
req -engine pkcs11 -keyform engine -key 02 -new -x509 -in ~/Desktop/sample.csr -out cert.pem 

Response:
engine ""pkcs11"" set.
PKCS#11 token PIN:
You are about to be asked to enter information that will be incorporated
into your certificate request.
What you are about to enter is what is called a Distinguished Name or a DN.
There are quite a few fields but you can leave some blank
For some fields, there will be a default value,
If you enter '.', the field will be left blank.
-----
Country Name (2 letter code) [AU]:
State or Province Name (full name) [Some-State]:
Locality Name (eg, city) []:
Organization Name (eg, company) [Internet Widgits Pty Ltd]:
Organizational Unit Name (eg, section) []:
Common Name (e.g. server FQDN or YOUR name) []: a.com
Email Address []:
4536252012:error:8000A101:PKCS11 library:PKCS11_rsa_sign:User not logged in:p11_ops.c:131:
4536252012:error:0D0DC006:asn1 encoding routines:ASN1_item_sign_ctx:EVP lib:a_sign.c:306:

Even on inputting the right PIN, I'm getting this error. The CA key/cert on the Yubikey Certs have no passwords too.
Got a similar error in a PyKCS#11 example:
https://github.com/LudovicRousseau/PyKCS11/issues/61
With another similar OpenSSL command.
OPENSSL_CONF=engine.conf openssl x509 -req -engine pkcs11 -in ~/Desktop/sample.csr -CAkeyform engine -CAkey 02 -CA rootCA.pem -sha256 -out cert.pem

Response:
engine ""pkcs11"" set.
Signature ok
subject=/CN=C44F3320626D/C=IN/ST=MH/O=test
Getting CA Private Key
PKCS#11 token PIN:
4394223212:error:06067099:digital envelope routines:EVP_PKEY_copy_parameters:different parameters:p_lib.c:137:
4394223212:error:8000A101:PKCS11 library:PKCS11_rsa_sign:User not logged in:p11_ops.c:131:
4394223212:error:0D0DC006:asn1 encoding routines:ASN1_item_sign_ctx:EVP lib:a_sign.c:306:

I'm wondering if the issue is in macOS OpenSSL, Yubikey, PKCS#11 or OpenSSL-PKCS#11 engine.
I am expecting the CSR to be signed into a certificate on MacOS using the Yubikey. Please help.
","","172","<openssl><pkcs#11><csr><yubico><openssl-engine>","0","","0","2019-07-22 11:52:25","","1","2","11712317","","2019-07-22 11:52:25","2019-07-22 07:43:46",""
"32754744","signing transaction with pkcs#11 for firefox using c code","How can we do transaction signing in mozilla firefox by loading PKCS#11 library to database.
after some research i found about capicom library. but the thing is this library does not support with windows7 and higher versions. 
","Extension signTextJS does exactly what you need and can be easily modified if needed because its source code is available on GitHub.
","168","<c><firefox><digital-signature><pkcs#11>","1","1","2","2015-11-20 11:51:45","33826073","0","","","","","2015-09-24 06:28:43",""
"32754744","signing transaction with pkcs#11 for firefox using c code","How can we do transaction signing in mozilla firefox by loading PKCS#11 library to database.
after some research i found about capicom library. but the thing is this library does not support with windows7 and higher versions. 
","you cannot use c code but you can do the same by java applets which are to be signed. Please refer http://www.nakov.com/books/signatures/Java-for-Digitally-Signing-Documents-in-Web-book-Nakov.html
","168","<c><firefox><digital-signature><pkcs#11>","1","1","2","2015-11-20 11:51:45","33826073","0","","","","","2015-09-24 06:28:43",""
"38530502","Signing Data With Mechanism Python PyKCS11, LowLevel API","I'm trying to sign some data using CKM_SHA256_RSA_PKCS mechanism... I'm having trouble with the lowlevel-API, as there is virtually no documentation and almost no examples. I'm attempting to do something almost identical to Sign/verify PyKCS11 library 
I can't seem to properly convert the code using the lowlevel(awful) API.
Here's some short snippets of my attempt.
a = CPKCS11Lib()
info = CK_INFO()
m = PyKCS11.LowLevel.CK_MECHANISM()
signature = ckbytelist()
m.mechanism = PyKCS11.LowLevel.CKM_SHA256_RSA_PKCS
key = PyKCS11.LowLevel.CK_OBJECT_HANDLE()
slotInfo = CK_SLOT_INFO()
lib='/opt/PTK/lib/libcryptoki.so'
session = CK_SESSION_HANDLE()
sessionInfo = CK_SESSION_INFO()
tokenInfo = CK_TOKEN_INFO()
slotList = ckintlist()
objects = ckobjlist()

binaryData = ""XYZ""
sha256 = hashlib.sha256()
sha256.update(str(bytearray(binaryData)))
digest = sha256.digest()
binaryData2 = '\x30\x31\x30\x0d\x06\x09\x60\x86\x48\x01\x65\x03\x04\x02\x01\x05\x00\x04\x20' + digest
signMechanism = PyKCS11.Mechanism(PyKCS11.LowLevel.CKM_SHA256_RSA_PKCS, None)
signedData = str(a.C_Sign(CKA_PRIVATE, binaryData2, signMechanism))
print(signedData)

Getting this traceback for signedData 
def C_Sign(self, *args): return _LowLevel.CPKCS11Lib_C_Sign(self, *args)
TypeError: in method 'CPKCS11Lib_C_Sign', argument 2 of type 'CK_SESSION_HANDLE'

","","167","<python><c++><encryption><smartcard><pkcs#11>","1","","0","2016-07-24 21:40:57","","14","1","-1","","2017-05-23 11:44:19","2016-07-22 15:40:55",""
"39535387","PyKCS11 unhashable list","A python script of mine is designed to get detailed information of slots/tokens in a particular .so library. The output looks like this:
Library manufacturerID: Safenet, Inc.                   
Available Slots: 4
Slot no: 0
slotDescription: ProtectServer K5E:00045
manufacturerID: SafeNet Inc.
TokenInfo
label: CKM
manufacturerID: SafeNet Inc.
model: K5E:PL25
Opened session 0x00000002

Found 38 objects: [5021, 5022, 5014, 5016, 4, 5, 6, 7, 8, 9, 16, 18, 23, 24, 26, 27, 29, 30, 32, 33, 35, 36, 38, 39, 5313, 5314, 4982, 5325, 5326, 5328, 5329, 5331, 5332, 5335, 5018, 4962, 5020, 4963]

I am able to open the session and get the information. Where I run into dubious problems is retrieving the attributes of said keys in the library.
I created my own template for desired attributes needed for my specifications, the following:
    all_attributes = PyKCS11.CKA.keys()
    # only use the integer values and not the strings like 'CKM_RSA_PKCS'
    all_attributes = [e for e in all_attributes if isinstance(e, int)]
    attributes = [
            [""CKA_ENCRYPT"", PyKCS11.CKA_ENCRYPT],
            [""CKA_CLASS"", PyKCS11.CKA_CLASS],
            [""CKA_DECRYPT"", PyKCS11.CKA_DECRYPT],
            [""CKA_SIGN"", PyKCS11.CKA_SIGN],
            [""CKA_VERIFY"", PyKCS11.CKA_VERIFY],
            [""CKA_ID"", PyKCS11.CKA_ID],
            [""CKA_MODULUS"", PyKCS11.CKA_MODULUS],
            [""CKA_MODULUS"", PyKCS11.CKA_MODULUS],
            [""CKA_MODULUS_BITS"", PyKCS11.CKA_MODULUS_BITS],
            [""CKA_PUBLIC_EXPONENT"", PyKCS11.CKA_PUBLIC_EXPONENT],
            [""CKA_PRIVATE_EXPONENT"", PyKCS11.CKA_PRIVATE_EXPONENT],
            ]

I'm getting an unhashable type: 'list' TypeError when trying to dump the attributes on the following block: 
print ""Dumping attributes:""
        for q, a in zip(all_attributes, attributes):
            if a == None:
                # undefined (CKR_ATTRIBUTE_TYPE_INVALID) attribute
                continue
            if q == PyKCS11.CKA_CLASS:
                print format_long % (PyKCS11.CKA[q], PyKCS11.CKO[a], a)
            elif q == PyKCS11.CKA_CERTIFICATE_TYPE:
                print format_long % (PyKCS11.CKA[q], PyKCS11.CKC[a], a)
            elif q == PyKCS11.CKA_KEY_TYPE:
                print format_long % (PyKCS11.CKA[q], PyKCS11.CKK[a], a)
            elif session.isBin(q):
                print format_binary % (PyKCS11.CKA[q], len(a))
                if a:
                    print dump(''.join(map(chr, a)), 16),
            elif q == PyKCS11.CKA_SERIAL_NUMBER:
                print format_binary % (PyKCS11.CKA[q], len(a))
                if a:
                    print hexdump(a, 16),
            else:
                print format_normal % (PyKCS11.CKA[q], a)

This line specifically is generating the error: 
if q == PyKCS11.CKA_CLASS:
            print format_long % (PyKCS11.CKA[q], PyKCS11.CKO[a], a)

I understand that you can't use a list as the key in a dict, since dict keys need to be immutable. How would I use a tuple in this situation?
","(This answer was put together in the context of your other questions)
To read attributes of a PKCS#11 object o you can use the following code:
# List which attributes you want to read
attributeIds = [
    CKA_ENCRYPT,
    CKA_CLASS,
    CKA_DECRYPT,
    CKA_SIGN,
    CKA_VERIFY,
    CKA_ID,
    CKA_MODULUS,
    CKA_MODULUS_BITS,
    CKA_PUBLIC_EXPONENT,
    CKA_PRIVATE_EXPONENT
]

# Read them
attributeValues = session.getAttributeValue(o, attributeIds)

# Print them (variant 1 -- more readable)
for i in range(0,len(attributeIds)):
    attributeName = CKA[attributeIds[i]]
    print(""Attribute %s: %s"" % (attributeName, attributeValues[i]))

# Print them (variant 2 -- more consise)
for curAttrId, currAttrVale in zip(attributeIds,attributeValues):
    attributeName = CKA[curAttrId]
    print(""Attribute %s: %s"" % (attributeName, currAttrVale))

Some additional (random) notes:

the Session.getAttributeValue() method method requires a list of attribute ids. You are constructing a list of ""lists containing Attribute name (string) and Attribute id (int)"" -- without any conversion -- this can't work
the CKA_PRIVATE_EXPONENT attribute is sensitive for RSA private keys. You probably won't be able to read it unless the CKA_SENSITIVE attribute is set to False (see e.g. here)
be sure to read only valid attributes for specific object (based on type, mechanism, sensitivity...)
the snippet above does not use the PyKCS11. prefix to reference PyKCS11 object members as it assumes they are imported with from PyKCS11 import * directive (I am not enough into python to tell you which way is the good one)
the attribute id <-> attribute name mapping is based on fact, that the PKCS11.CKA dictionary contains both string keys with int values and int keys with string keys (you can dump this dictionary yourself or check the source code)
it might be much easier to dump the attributes with print(o)
I would recommend reading relevant parts of the PKCS#11 standard
(you might get your answer faster if you referenced the origins of your thoughts)

Good luck!
","166","<python><list><dictionary><typeerror><pkcs#11>","0","1","1","2016-10-14 21:11:41","40052063","7","1","5128464","","2016-10-09 13:13:48","2016-09-16 15:40:53",""
"31779912","Register a PKCS#11 library","I am trying to install a PKCS#11 module into Firefox browser via an MSI setup application. 
After doing some search through the internet, I bumped into the 'modutil' tool which has a wide variety of responsibilities especially in my case for = installing/uninstalling the PKCs#11 module to NSS security databases. 
I downloaded the latest source code and built it using MozillaBuild. 
Unfortunately, it shows me an error even when I try to create security databases = (3 with .db extension). The error says ""Function failed: The certificate/ke= y database is in an old, unsupported format""!. 
Does anybody know how I can overcome this issue, and is there any unseen aspect to work with this utility. Also, is there a solution to install/uninstall pkcs#11 module for all user profiles with one common process. 
Finally, is there a better solution to do the task of installation using mysetup. I use WiX Toolset to create MSI setup. -
","","163","<c#><xml><msiexec><pkcs#11>","0","","0","2015-08-06 06:34:47","","2","","5184280","","2015-08-06 06:34:47","2015-08-03 05:22:04",""
"47814195","pkcs11 interop GetSlotList(SlotsType.WithTokenPresent); returns empty list","I am using pkcs11 interop library to list available devices like this 
using (Pkcs11 pkcs11 = new Pkcs11(_libraryPath, AppType.SingleThreaded))
{
    List<Slot> slots =  pkcs11.GetSlotList(SlotsType.WithTokenPresent);
    //using slots
}

it works fine but when i use same code in web application or run it loop i am getting slots count as 0 even if device is connected.
","What is the PKCS#11 library? Does it happen to be for a network-based device or one what has a corresponding service on the box? I suspect you do not have permissions to LPC/RPC to its corresponding server.
","160","<c#><pkcs#11><pkcs11interop>","2","0","1","2017-12-16 06:50:42","","2","","","","","2017-12-14 13:09:51",""
"45046140","In the pkcs11interop project code, I see CKM_ECDSA_SHA256, but in the nuget package I added to my solution its not there","I need to use ECDSA with sha256 with a hsm and I am using c# with the http://www.pkcs11interop.net/ wrapper. The Github code has CKM_ECDSA_SHA256, but not the 3.3.0 release even though the release is the latest as of Jan 24 and the enum was added much earlier.
Why cannot I access the enum? I could use CKM_ECDSA and hash before signing, but that would defeat the purpose of using the hsm for its speed.
","CKM_ECDSA_SHA256 enum member was added on 1 March 2017 as a part of larger patch that added support for PKCS#11 v2.40. It was not present in Pkcs11Interop v3.3.0 but it is present in master branch on GitHub which is yet to be released as Pkcs11Interop v4.0.0.
Meanwhile you can use overloaded method which accepts ulong instead of CKM and define missing constant in your code:
const ulong CKM_ECDSA_SHA256 = 0x00001044;

","155","<c#><sha256><pkcs#11><ecdsa><pkcs11interop>","1","1","1","2017-07-12 17:10:34","45051663","0","","","","","2017-07-11 23:45:53",""
"58133548","How can I login to the windows 10 remotely by smart card With C#?","I already setup active directory to enable SmartCard logon, and could logon to the Windows through the login screen by PIN.
I'm looking to find the way to logon with new session or Unlock the active session remotely. I found http://www.pkcs11interop.net/ looks really cool tools. So I spent couple of times to read documents to find the solution. I implemented the service which could communicate remotley, also I could initialize the library and create session with login/logut, But couldn't find a way how to logon to the windows or unlock active session. Is anyone knows how I could reach this approach?
I need to do this through the C# code.
","I've never attempt to do it, but I point you to the documentation on MSDN:
Smart Card and Remote Desktop Services
In the specific, 

Remote Desktop redirection
  Notes about the redirection model:
This scenario is a remote sign-in session on a computer with Remote
  Desktop Services. In the remote session (labeled as ""Client session""),
  the user runs net use /smartcard.
Arrows represent the flow of the PIN after the user types the PIN at the command prompt until it reaches the user's smart card in a
  smart card reader that is connected to the Remote Desktop Connection
  (RDC) client computer.
The authentication is performed by the LSA in session 0.
The CryptoAPI processing is performed in the LSA (Lsass.exe). This is possible because RDP redirector (rdpdr.sys) allows per-session,
  rather than per-process, context.
The WinScard and SCRedir components, which were separate modules in operating systems earlier than Windows Vista, are now included in
  one module. The ScHelper library is a CryptoAPI wrapper that is
  specific to the Kerberos protocol.
The redirection decision is made on a per smart card context basis, based on the session of the thread that performs the
  SCardEstablishContext call.
  Changes to WinSCard.dll implementation were made in Windows Vista to improve smart card redirection.

","155","<pkcs#11><pkcs11interop>","3","1","1","2019-09-29 23:40:56","","8","1","461319","","2019-09-29 23:40:56","2019-09-27 11:21:44",""
"23829520","Signing and timestamping at the same time VS signing and timestamping later","I'm building a digital signature module that must conform to EU digital signature directives.
I'm starting from an old but well-working Java module to sign documents in CAdES format.
Also, the application is made by a client (desktop JAR executable) and a server part. The client has been developed only to interact with smart card that is connected to a USB reader, the rest happens on the web server.
Current signing clients support two ways of signing and timestamping a file: I can use ""Sign and timestamp"" function or I can first sign a document and then timestamp it.
From the legal point of view, both produce the same result.
My question is: from the techincal point of view, is it correct to state that when I sign a document with CAdES (RFC 5126, 140 pages I haven't been able to read all) the output file is the same both when I use a combined ""sign and timestamp"" function or use the two functions in sequence?
Let me rephrase: is it not possible according to the standard to have an enclosure that both represents a digital signature and a timestamp?
Does the standard require to timestamp the signed document or vice versa?
What I want to achieve is to sign the document on client side (using smartcard) and then timestamping the file on server (without touching old client code) and producing the same exact result as if I was signing and timestamping a file on the client.
","","150","<java><digital-signature><pkcs#11><trusted-timestamp>","1","","0","2014-05-23 12:38:50","","4","0","","","","2014-05-23 12:38:50",""
"52586453","i2d_X509_REQ_INFO doesn't convert req_info structure properly","We are working on tokens to generate CSR (certificate signing requests). Keypair is generating perfectly in token but we are unable to get proper csr.
I'm trying to create X509 certificate request signed inside smart card using PKCS11 interface. I’m using openssl-1.0.2.
To perform this task I have to perform following steps:
1, create certificate request (X509_new)
2, load public key (X509_REQ_set_pubkey)
3, set up subject name and extensions as required
4, export req_info structure (i2d_X509_REQ_INFO)
5, sign this structure using PKCS11
Unfortunately created request doesn't contain valid signature. After closer look at the openssl calls I've noticed, that the buffer exported using i2d_X509_REQ_INFO function doesn't contain properly encoded structure. 
Can somebody help me, what I'm doing wrong, or which parameter of the structure I forgot to initialize?
Relevant part of the code:

...
  X509_REQ *req;
  X509_NAME *subj;

  if (!(req = X509_REQ_new())) {
    printf(""Unable to initialize X509_REQ structure\n"");
    return -1;
  }

  RSA *rsa;
  rsa = RSA_new();
  rsa->e = BN_bin2bn( (unsigned char *) pub_publicExponent, (int) 3, NULL );
  rsa->n = BN_bin2bn( (unsigned char *) modulus, (int) (pub_modulusbits/8), NULL );

  if( (pkey = EVP_PKEY_new()) == NULL ) {
    printf(""Unable to initialize PKEY structure\n"");
    return -1;
  }

  EVP_PKEY_assign_RSA( pkey , rsa );
  X509_REQ_set_pubkey(req, pkey);

  subj=X509_REQ_get_subject_name(req);
  X509_NAME_add_entry_by_txt(subj,""C"",
                          MBSTRING_ASC, (unsigned char *)""SK"", -1, -1, 0);
  X509_NAME_add_entry_by_txt(subj,""CN"",
                          MBSTRING_ASC, (unsigned char *)""Test"", -1, -1, 0);

  int datasig_len;
  unsigned char *tobesigned;
  datasig_len = i2d_X509_REQ_INFO( req->req_info, NULL );
  tobesigned = (unsigned char *) malloc( datasig_len );
  if( !tobesigned ) {
    printf(""Unable to alloc mem buffer\n"");
    return -1;
  }
  int zzz = i2d_X509_REQ_INFO( req->req_info, &tobesigned );

","It seems like you have overlooked a part of the relevant documentation (which, admittedly, happens very easily):

i2d_X509() encodes the structure pointed to by x into DER format. If
  out is not NULL is writes the DER encoded data to the buffer at *out,
  and increments it to point after the data just written. If the return
  value is negative an error occurred, otherwise it returns the length
  of the encoded data.

(Note that this snippet takes i2d_X509() as the example, but it works the same for i2d_X509_REQ_INFO())
Before invoking the i2d function, you have to store the value of tobesigned so you can refer to it afterwards.
Recreating your example, it does seem to contain a valid DER-formatted representation of your structure, since it seems to go in the reverse direction without problems. This is illustrated by the following snippet:
  unsigned char *ptr = tobesigned;
  int zzz = i2d_X509_REQ_INFO( req->req_info, &ptr );
  const unsigned char *ptr2 = tobesigned;
  X509_REQ_INFO *deser = d2i_X509_REQ_INFO(NULL, &ptr2, zzz);
  printf(""Result of i2d|d2i_X509_REQ_INFO: \n""
         ""  zzz        = %d\n""
         ""  tobesigned = 0x%p\n""
         ""  ptr        = 0x%p\n""
         ""  ptr2       = 0x%p\n""
         ""  deser      = 0x%p\n"",
         zzz, tobesigned, ptr, ptr2, deser);

It yields:
Result of i2d|d2i_X509_REQ_INFO: 
  zzz        = 198
  tobesigned = 0x0x7fd09c403010
  ptr        = 0x0x7fd09c4030d6
  ptr2       = 0x0x7fd09c4030d6
  deser      = 0x0x7fd09c402f60

","150","<c++><c++11><visual-c++><openssl><pkcs#11>","1","2","1","2018-10-02 23:15:31","","0","","","","","2018-10-01 07:34:01",""
"51349876","CloudHSM login/logout error","So i was trying to login/logout from AWS CloudHSM multiple times. The flow is the following:

Have an open session (C_GetSessionInfo returns slot id 1, state 3, flags 6 while everything goes fine).
If i'm logged in to this session, call C_Logout on this session.
Call C_Login supplying the correct credentials.
Repeat.

After the first login, the first logout/login cycle goes fine but during the second logout a CKR_DEVICE_REMOVED error is returned and every subsequent calls return CKR_SESSION_HANDLE_INVALID. 
Calling C_GetSessionInfo after the error returns slot id, state and flags all set to 0 and C_GetSlotList with token present returns an empty list. This behavior (error on the second logout) is completely consistent and happens every single time. No operations are performed while being logged in.
Does anyone know the possible reason for this error and how to avoid it? Thanks in advance.
","","148","<pkcs#11><hsm>","4","","0","2018-07-18 09:45:31","","0","","9757925","","2018-07-15 18:50:21","2018-07-15 15:47:49",""
"51663622","do sunpkcs11 supports CK_sensitive attribute for derived key using ECDH","I am trying to generate a shared secret through ECDH using SUNpkcs11 with certain attributes:
CKA_TOKEN= false
CKA_SENSITIVE=true
CKA_EXTRACTABLE=true""
CKA_ENCRYPT=true""

While my base key has CKA_DERIVE, SENSITIVE etc set to true but while doing so error comes template inconsistent:
Performing ECDH key agreement
java.security.ProviderException: Could not derive key
    at sun.security.pkcs11.P11ECDHKeyAgreement.engineGenerateSecret(P11ECDHKeyAgreement.java:144)
    at javax.crypto.KeyAgreement.generateSecret(KeyAgreement.java:586)

Caused by: sun.security.pkcs11.wrapper.PKCS11Exception: CKR_ATTRIBUTE_SENSITIVE
    at sun.security.pkcs11.wrapper.PKCS11.C_GetAttributeValue(Native Method)
    at sun.security.pkcs11.P11ECDHKeyAgreement.engineGenerateSecret(P11ECDHKeyAgreement.java:139)

While the ECC keys are pre-generated using an HSM.
","The SunPKCS11 P11ECDHKeyAgreement class always wants to return the bytes of the derived shared secret as the result of the generateSecret() method. In order to do this the derived secret must be marked as non-sensitive and extractable, otherwise the HSM will refuse to reveal the raw bytes. This is what the CKR_ATTRIBUTE_SENSITIVE error message means - Java tried to access the raw bytes of the derived key, but it is marked as sensitive.
The Java KeyAgreement class does support a version of generateSecret() that will return a Key object, but you have to pass the algorithm string ""TlsPremasterSecret"" (anything else will be rejected by the P11ECDHKeyAgreement class). This will generally stop the key being useful because it will be rejected for having the wrong algorithm when you try to use it. (Not to mention that this key is the raw shared secret, which should really be passed through a KDF/hash before being used as a cryptographic key).
So really your only option is to mark derived keys as non-sensitive and extractable by adding lines like the following to your PKCS#11 configuration file:
attributes(generate,CKO_SECRET_KEY,CKK_GENERIC_SECRET) = {
  CKA_SENSITIVE = false
  CKA_EXTRACTABLE = true
}

","146","<java><pkcs#11><hsm><ecdh><sunpkcs11>","1","0","1","2019-04-16 19:23:41","","0","","-1","","2018-08-06 22:13:59","2018-08-02 23:59:05",""
"44423474","How to cast ""byte[] publicKey"" to ""Data Object"" (to use ObjectHandle)","I'm extracting the Public key for encryption from the sender's Certificate as byte[] array
    JObject o = JObject.Parse(reply);
    string certResponse = o.GetValue(""certificate"").Value<string>();
    byte[] certByteArray = Encoding.ASCII.GetBytes(certResponse);

    //Extract Public key from Certificate
    var certTest = new X509Certificate2(certByteArray);
    var certPublicKey = certTest.GetPublicKey();

I wish to use PKCS11Interop Encrypt() function which takes ObjectHandle of the key to Encrypt message/data. The only way I find is to set ObjectAttributes and session.CreateObject(objectAttributes); and eventually DestroyObject.
However I get CKR_FUNCTION_NOT_SUPPORTED calling CreateObject(). As clarified by jariq in this post that OpenSC PKCS#11 library does not support/implement some functions defined in PKCS#11 specification, What is the alternative/workaround to use the byte array publicKey for encryption?
","","146","<public-key-encryption><pkcs#11><opensc>","0","","0","2017-06-07 21:58:56","","5","0","","","","2017-06-07 21:58:56",""
"56388250","System.IO.FileLoadException: Could not load file or assembly 'Pkcs11Interop, Version=3.3.0.0","I want to develop Application which can read Token and perform PDF Signing. FYI i successfully signed pdf document, but after im update the Pkcs11Interop version from 3.3.0.0 to 4.1.1.0 Then the signed turn into failed. I've tried to enable AutoGenerateBindingRedirects but i still cant sign the PDF
Expecting the PDF is successfully signed, but i get this error

System.IO.FileLoadException: Could not load file or assembly
  'Pkcs11Interop, Version=3.3.0.0, Culture=neutral, PublicKeyToken=null'
  or one of its dependencies. The located assembly's manifest definition
  does not match the assembly reference. (Exception from HRESULT:
  0x80131040)

Screenshot error
what i understand is, this application was trying to call the Pkcs11interop version=3.3.0.0
However its already mention in the Nuget Repo about its dependencies. So it's suppose to be okay right?
Pkcs11Interop.PDF
/* App.config */

<?xml version=""1.0"" encoding=""utf-8"" ?>
<configuration>
    <startup> 
        <supportedRuntime version=""v4.0"" sku="".NETFramework,Version=v4.7.2"" />
    </startup>
    <dependentAssembly>
        <assemblyIdentity name=""Pkcs11Interop"" publicKeyToken=""c10e9c2d8c006d2a""/>
        <bindingRedirect oldVersion=""3.3.0.0"" newVersion=""4.1.1.0""/>
    </dependentAssembly>
</configuration>

what i must do to solve this dependencies error? 
","I see two problems in what you're trying to do:

Pkcs11Interop 3.3.0 is not strongly signed but all newer versions are. So you would need to redirect from unsigned to signed assembly which AFAIK is not possible.
Pkcs11Interop 4.x contains API changes that are not compatible with 3.x versions so even if you somehow made redirection work Pkcs11Interop.PDF would not be able to use newer version of Pkcs11Interop.

I might update Pkcs11Interop.PDF for newer versions of Pkcs11Interop but I have no ETA for that yet => currently it's best to just stick to Pkcs11Interop 3.3.0.
","144","<c#><pkcs#11><pkcs11interop>","2","0","1","2019-06-02 09:16:45","56413726","6","0","8888474","","2019-05-31 08:40:23","2019-05-31 03:19:52",""
"39845632","What is the PKCS#11 provider DLL for CAC Cards and where do I find it?","I want to use the PKCS#11 provider of my CAC card but don't know where to find the DLL for it. My CAC card did not come with any software and I cannot find enough information on the internet. Can anyone here tell me what is the name of the file and where I can get it from?
","","144","<java><dll><pkcs#11><cac>","1","","0","2016-10-04 06:35:44","","4","","","","","2016-10-04 06:35:44",""
"57265305","HSM decryption + encryption chaining","My application is acting as a switchboard to transfer very sensitive messages between two parties and I'm trying to figure out how I can do this without ""looking"" at the message they're trying to send. 
I have a HSM, and I've generated a keypair for the sender - they're going to encrypt the message with their public key that I gave them, and I can decrypt the message using the private key I have in the HSM. 
I'm going to then pass that message on by encrypting it with the public key of the ultimate receiver, which I have. 
Is there any way to chain these two operations inside the HSM, without having the decrypted message anywhere near my application memory? I would like the plaintext content to never leave the boundaries of the HSM.
I know that some HSMs have a CodeSafe / SEE machine feature that lets me write embedded system code and run it inside the HSM, before I get into that I'd like to see if there's a way using the general PKCS / JCE / CNG APIs to do this safely.
","If all you need is to re-encrypt the same secret under a different key, you can use C_Unwrap to create a temporal HSM object with value of the translated secret and then use C_Wrap to encrypt the value of this temporal HSM object for all the recipients.
This way the secret will never leave HSM.
Something like this (verified to be working on SafeNet Luna 7 with RSA-OAEP):
// Your private key for 'decrypting' secret. Must have key unwrapping allowed
CK_OBJECT_HANDLE hsmPrivateKey = ... ;

// Encrypted secret
byte[] wrappedKey = ... ; // 

// Template for temporal generic secret key with value of the secret
CK_ATTRIBUTE[] tempTemplate = new CK_ATTRIBUTE[] {
        new CK_ATTRIBUTE(CKA.CLASS, CKO.SECRET_KEY),
        new CK_ATTRIBUTE(CKA.KEY_TYPE, CKK.GENERIC_SECRET),
        new CK_ATTRIBUTE(CKA.TOKEN, false),
        new CK_ATTRIBUTE(CKA.PRIVATE, true),
        new CK_ATTRIBUTE(CKA.EXTRACTABLE, true),
        new CK_ATTRIBUTE(CKA.SENSITIVE, true),
        new CK_ATTRIBUTE(CKA.ENCRYPT, false),
        new CK_ATTRIBUTE(CKA.DECRYPT, false),
        new CK_ATTRIBUTE(CKA.WRAP, false),
        new CK_ATTRIBUTE(CKA.UNWRAP, false),
        new CK_ATTRIBUTE(CKA.SIGN, false),
        new CK_ATTRIBUTE(CKA.VERIFY, false),
        new CK_ATTRIBUTE(CKA.DERIVE, false)
};

// Unwrapping/decryption mechanism
CK_MECHANISM mechanism = ... ;

// Handle for temporal generic secret key with value of the secret
CK_OBJECT_HANDLE temporalValueHandle = new CK_OBJECT_HANDLE();

// Unwrap/decrypt the secret into temporal key
CryptokiEx.C_UnwrapKey(session, mechanism, hsmPrivateKey, wrappedKey, wrappedKey.length, tempTemplate, tempTemplate.length, temporalValueHandle);

// Wrap/encrypt the secret for recipients. Recipient public keys must have key wrapping allowed
for(CK_OBJECT_HANDLE recipientPublicKey : ... ) {
    LongRef resSize = new LongRef(0);
    CryptokiEx.C_WrapKey(session, mechanism, recipientPublicKey, temporalValueHandle, null, resSize);
    byte[] rewrappedKey = new byte[CryptokiUtils.safeIntCast(resSize.value)];
    CryptokiEx.C_WrapKey(session, mechanism, recipientPublicKey, temporalValueHandle, rewrappedKey, resSize);
    System.out.println(""Re-wrapped key: "" + bytesToHexString(rewrappedKey));
}

// Delete temporal generic secret key
CryptokiEx.C_DestroyObject(session, temporalValueHandle);

Good luck!
","143","<encryption><pkcs#11><jce><hsm><cng>","2","0","1","2019-08-04 15:12:06","","12","1","","","","2019-07-30 06:10:46",""
"27490272","PKCS#11 and application identification","In Cryptoki, all sessions that an application has with a token must have the same login/logout status. but how a token in a Network HSM can identify sessions related to an application? is there an application Id for this purpose? for example, by sending application id to each application after calling C_initailze and sending back id? There isn't anything about this in pkcs#11 spec. I want to implement pkcs11 for a network HSM. but i don't know how identify different applications in my cryptoki token.
Any advice will be greatly appreciated
","PKCS#11 defines an API usually implemented via the dynamically linked library. In run-time (when loaded) the library becomes the part of the process and gets requests from that process. So the library knows the ID of the process that it serves. Now it's up to you how your PKCS#11 library and your hardware communicates. Possibly you can store the process ID somewhere along the data passed to and from the hardware. 
","141","<pkcs#11>","0","0","1","2014-12-15 19:10:47","27491092","0","","608639","","2014-12-15 19:10:47","2014-12-15 18:05:27",""
"12956554","Looking for a revision control system which allows signatures with X.509 certificates","I am looking for a (distributed) revision control system which allows me to sign commits using X.509 certificates.
The systems that I am aware of which allow me to apply a digital signature to a commit (like git, bazaar, mercurial) only work with GnuPG.
One more thing I would be interested in ist to use a hardware token (via a PKCS#11 library) to sign my commits.
","Mercurial with CommitsigsExtension:

Embed GnuPG and OpenSSL signatures directly into changesets

","140","<version-control><dvcs><digital-signature><x509><pkcs#11>","1","1","1","2012-10-18 19:12:56","12962028","0","1","1039462","","2012-10-18 14:16:13","2012-10-18 14:04:59",""
"49449407","Python Paramiko: Use PKCS#11 compliant smart card","Is there a way to use PKCS#11 compliant smart card with Python Paramiko for SSH authentication ?
In OpenSSH, it supports option PKCS11Provider for ssh authentication via smart cards. However, Paramiko documentation does not mention support for PKCS#11.
OR, Is there any other way apart from Paramiko to use SSH Smart card for authentication.
","","139","<python><ssh><paramiko><ssh-keys><pkcs#11>","2","","0","2018-03-23 12:12:15","","0","1","","","","2018-03-23 12:12:15",""
"20543708","How to save a temporary value in a security token?","Is it possible to save a value in a security token memory by using PyKCS11 and M2Crypto?
I need to save an integer to token memory, so that the value can be carried out with the token
I know how to create objects, but is it possible to create attributes in a token, so whenever I read that attribute I will know the status of that token.
","using PKCS#11, the only way to store 'home made' data, it through the use of a CKO_DATA object type. Like any object, it can be persistent on the token (not lost when the token is powered off) or it can be a memory object (lost when the session to the token is closed).
To create a CKO_DATA object is similar to any other object creation:

open a r/w session on the slot
if the object is to be protected by user authentication (CKU_USER) then Login as user
create the object template with mandatory attributes such as CKA_CLASS etc. (refer to the PKCS#11 specifications for details)
set the CKA_TOKEN to TRUE if the object is to be persistent, or FALSE if it is a memory object
set the CKA_PRIVATE to TRUE* if you want this object to be read/writen only upon successfull user authentication or set it to **FALSE if anybody can access it.
set a CKA_LABEL and CKA_APPLICATION attributes with values you want to help you find the object next time
set the CKA_VALUE attribute to the value you want (your integer)
Call C_CreateObject, using this template will create the desired object.

HTH,
","137","<python><security><token><m2crypto><pkcs#11>","2","0","1","2017-01-24 15:02:57","","1","","3045128","","2013-12-12 13:00:38","2013-12-12 12:34:05",""
"55435124","How to use usb token pkcs#11 certificate for Nodejs https client?","If you have a client certificate pair (self signed) then you can make a https get call like this in nodejs;
request.get({
      url: 'https://example.com/list',
      key: certificate.key,
      cert: certificate.cert,
      ca: certificate.ca
    }, (error, response, body) => {
      ...
    });


How will we write this code if we are storing certificate pair in a hardware PKI token like ePass2003?
Will we read key & cert from PKI token? or
Will we use another method?
Please note that, in this scenario all clients must have a valid certificate in order to connect server.
Thanks,
","","136","<node.js><https><pkcs#11>","1","","0","2019-03-30 19:46:54","","1","2","","","","2019-03-30 19:46:54",""
"21799137","What is CKM_SSL3_SHA1_MAC in PKCS 11 ? (difference between CKM_SHA_1_HMAC and CKM_SSL3_SHA1_MAC )","I'm trying  to implement some function of PKCS 11 standard , In Sign functions group, When you call SignInit you send the mechanism type , I have conflict between two mechanisms:
1- CKM_SHA_1_HMAC: it is a sha1 with HMAC (use key) and the output is 20 byte long.
2- CKM_SSL3_SHA1_MAC : which i can't know what algorithm it use or how to implement it(by using openssl or polarssl) ?
","CKM_SSL3_SHA1_MAC and CKM_SSL3_MD5_MAC are not HMAC.
They are defined in SSL3.0 standard(RFC 6101).
You can find the algorithm in this document. 
Because CKM_SSL3_SHA1_MAC is part of SSL3.0 standard, both openssl and polarssl already implement it. 
","135","<sha1><sign><pkcs#11>","2","1","1","2014-08-15 02:17:52","","0","","","","","2014-02-15 14:54:23",""
"44017163","Ncryptoki error no 208 / 209 (importing certificates)","I have problems importing a certificate into Alladin eToken with NCryptoki.
X509Certificate2 cert = new X509Certificate2(test.cer);
byte[] id = Encoding.ASCII.GetBytes(""MyKeyPairID"");
CryptokiCollection template = new CryptokiCollection();
template.Add(new ObjectAttribute(ObjectAttribute.CKA_CLASS, CryptokiObject.CKO_CERTIFICATE));
template.Add(new ObjectAttribute(ObjectAttribute.CKA_CERTIFICATE_TYPE, Certificate.CKC_X_509));
template.Add(new ObjectAttribute(ObjectAttribute.CKA_TOKEN, true));
template.Add(new ObjectAttribute(ObjectAttribute.CKA_PRIVATE, false));
template.Add(new ObjectAttribute(ObjectAttribute.CKA_LABEL, ""MyLabel""));
template.Add(new ObjectAttribute(ObjectAttribute.CKA_ID, id));
template.Add(new ObjectAttribute(ObjectAttribute.CKA_SUBJECT, cert.SubjectName.RawData));
template.Add(new ObjectAttribute(ObjectAttribute.CKA_ISSUER, cert.Issuer));
template.Add(new ObjectAttribute(ObjectAttribute.CKA_SERIAL_NUMBER, cert.GetRawCertData()));
template.Add(new ObjectAttribute(ObjectAttribute.CKA_VALUE, cert.RawData));
CryptokiObject certificate = session.Objects.Create(template);

I get error 209 (0xD1) CKR_TEMPLATE_INCONSISTENT. If I delete this line:
template.Add(new ObjectAttribute(ObjectAttribute.CKA_VALUE, cert.RawData));

I get error 208 (0xD0) CKR_TEMPLATE_INCOMPLETE.
","It seems you are setting wrong values for CKA_SUBJECT, CKA_ISSUER and CKA_SERIAL_NUMBER attributes.
Following code with Pkcs11Interop and BouncyCastle libraries is usually working for me:
/// <summary>
/// Imports certificate into the PKCS#11 compatible device
/// </summary>
/// <param name=""session"">Session with user logged in</param>
/// <param name=""certificate"">Certificate that should be imported</param>
/// <param name=""ckaLabel"">Value of CKA_LABEL attribute</param>
/// <param name=""ckaId"">Value of CKA_ID attribute</param>
/// <returns>Handle of created certificate object</returns>
public static ObjectHandle ImportCertificate(Session session, byte[] certificate, string ckaLabel, byte[] ckaId)
{
    // Parse certificate
    X509CertificateParser x509CertificateParser = new X509CertificateParser();
    X509Certificate x509Certificate = x509CertificateParser.ReadCertificate(certificate);

    // Define attributes of new certificate object
    List<ObjectAttribute> certificateAttributes = new List<ObjectAttribute>();
    certificateAttributes.Add(new ObjectAttribute(CKA.CKA_CLASS, CKO.CKO_CERTIFICATE));
    certificateAttributes.Add(new ObjectAttribute(CKA.CKA_TOKEN, true));
    certificateAttributes.Add(new ObjectAttribute(CKA.CKA_PRIVATE, false));
    certificateAttributes.Add(new ObjectAttribute(CKA.CKA_MODIFIABLE, true));
    certificateAttributes.Add(new ObjectAttribute(CKA.CKA_LABEL, ckaLabel));
    certificateAttributes.Add(new ObjectAttribute(CKA.CKA_CERTIFICATE_TYPE, CKC.CKC_X_509));
    certificateAttributes.Add(new ObjectAttribute(CKA.CKA_TRUSTED, false));
    certificateAttributes.Add(new ObjectAttribute(CKA.CKA_SUBJECT, x509Certificate.SubjectDN.GetDerEncoded()));
    certificateAttributes.Add(new ObjectAttribute(CKA.CKA_ID, ckaId));
    certificateAttributes.Add(new ObjectAttribute(CKA.CKA_ISSUER, x509Certificate.IssuerDN.GetDerEncoded()));
    certificateAttributes.Add(new ObjectAttribute(CKA.CKA_SERIAL_NUMBER, new DerInteger(x509Certificate.SerialNumber).GetDerEncoded()));
    certificateAttributes.Add(new ObjectAttribute(CKA.CKA_VALUE, x509Certificate.GetEncoded()));

    // Create certificate object
    return session.CreateObject(certificateAttributes);
}

","135","<c#><pkcs#11>","0","0","2","2018-05-24 16:22:08","","0","0","3325704","","2017-05-17 06:55:21","2017-05-17 06:28:46",""
"44017163","Ncryptoki error no 208 / 209 (importing certificates)","I have problems importing a certificate into Alladin eToken with NCryptoki.
X509Certificate2 cert = new X509Certificate2(test.cer);
byte[] id = Encoding.ASCII.GetBytes(""MyKeyPairID"");
CryptokiCollection template = new CryptokiCollection();
template.Add(new ObjectAttribute(ObjectAttribute.CKA_CLASS, CryptokiObject.CKO_CERTIFICATE));
template.Add(new ObjectAttribute(ObjectAttribute.CKA_CERTIFICATE_TYPE, Certificate.CKC_X_509));
template.Add(new ObjectAttribute(ObjectAttribute.CKA_TOKEN, true));
template.Add(new ObjectAttribute(ObjectAttribute.CKA_PRIVATE, false));
template.Add(new ObjectAttribute(ObjectAttribute.CKA_LABEL, ""MyLabel""));
template.Add(new ObjectAttribute(ObjectAttribute.CKA_ID, id));
template.Add(new ObjectAttribute(ObjectAttribute.CKA_SUBJECT, cert.SubjectName.RawData));
template.Add(new ObjectAttribute(ObjectAttribute.CKA_ISSUER, cert.Issuer));
template.Add(new ObjectAttribute(ObjectAttribute.CKA_SERIAL_NUMBER, cert.GetRawCertData()));
template.Add(new ObjectAttribute(ObjectAttribute.CKA_VALUE, cert.RawData));
CryptokiObject certificate = session.Objects.Create(template);

I get error 209 (0xD1) CKR_TEMPLATE_INCONSISTENT. If I delete this line:
template.Add(new ObjectAttribute(ObjectAttribute.CKA_VALUE, cert.RawData));

I get error 208 (0xD0) CKR_TEMPLATE_INCOMPLETE.
","You set the serial number with the certificate raw data:
template.Add(new ObjectAttribute(ObjectAttribute.CKA_SERIAL_NUMBER, cert.GetRawCertData()));

You set it in the following way:
template.Add(new ObjectAttribute(ObjectAttribute.CKA_SERIAL_NUMBER, cert.SubjectDN.GetDerEncoded()

","135","<c#><pkcs#11>","0","0","2","2018-05-24 16:22:08","","0","0","3325704","","2017-05-17 06:55:21","2017-05-17 06:28:46",""
"55539699","PKCS11 unwrap private RSA key to eToken HSM","I am trying to transfer an RSA private key to my HSM (SafeNet eToken) via PKCS#11 interop, and and then unwrap it on the HSM. 
This is my code (updated):
            session.Login(CKU.CKU_USER, pin);
            var x509Certificate = new X509Certificate2(File.ReadAllBytes(path), """", X509KeyStorageFlags.Exportable);
            var privateKey = x509Certificate.PrivateKey as RSACryptoServiceProvider;
            var keyPair = DotNetUtilities.GetRsaKeyPair(privateKey);
            byte[] privateKeyBytes;
            using (var memoryStream = new MemoryStream())
            {
                using (TextWriter streamWriter = new StreamWriter(memoryStream))
                {
                    var pemWriter = new PemWriter(streamWriter);
                    pemWriter.WriteObject(keyPair.Private);
                    streamWriter.Flush();
                }
                privateKeyBytes = memoryStream.GetBuffer();
            }

            // Create temporary DES3 key for wrapping/unwrapping
            var tempKeyAttributes = new List<ObjectAttribute>
            {
                new ObjectAttribute(CKA.CKA_CLASS, CKO.CKO_SECRET_KEY),
                new ObjectAttribute(CKA.CKA_KEY_TYPE, CKK.CKK_DES3),
                new ObjectAttribute(CKA.CKA_ENCRYPT, true),
                new ObjectAttribute(CKA.CKA_UNWRAP, true)
            };
            var tempKey = session.GenerateKey(new Mechanism(CKM.CKM_DES3_KEY_GEN), tempKeyAttributes);

            var encrypted =
                session.Encrypt(new Mechanism(CKM.CKM_DES3_ECB), tempKey, privateKeyBytes);

            string label = ""private1"";

            // Define how the new RSA private key should look like on the HSM
            var privateKeyAttributes = new List<ObjectAttribute>
            {
                new ObjectAttribute(CKA.CKA_CLASS, CKO.CKO_PRIVATE_KEY),
                new ObjectAttribute(CKA.CKA_TOKEN, true),
                new ObjectAttribute(CKA.CKA_PRIVATE, true),
                new ObjectAttribute(CKA.CKA_MODIFIABLE, true),
                new ObjectAttribute(CKA.CKA_SENSITIVE, false),
                new ObjectAttribute(CKA.CKA_LABEL, label),
                new ObjectAttribute(CKA.CKA_ID, Encoding.ASCII.GetBytes(label)),
                new ObjectAttribute(CKA.CKA_ALWAYS_AUTHENTICATE, false),
                new ObjectAttribute(CKA.CKA_KEY_TYPE, CKK.CKK_RSA),

            };
            var privateKeyHandle = session.UnwrapKey(new Mechanism(CKM.CKM_DES3_ECB), tempKey,
                encrypted, privateKeyAttributes);


//results in: Method C_UnwrapKey returned CKR_WRAPPED_KEY_INVALID

But it does not work - fails with Net.Pkcs11Interop.Common.Pkcs11Exception: Method C_UnwrapKey returned CKR_TEMPLATE_INCONSISTENT.
(UPDATED) 
Now it results in CKR_WRAPPED_KEY_INVALID.
But if I import the same PFX file manuall using SafeNet, no errors occur - everything seems fine.
Any ideas? Maybe there are some parameters I used wrong?
","FINALLY the code that does the thing:
   var x509Certificate = new X509Certificate2(File.ReadAllBytes(path), """",
                X509KeyStorageFlags.Exportable);
            var privateKey = x509Certificate.PrivateKey as RSACryptoServiceProvider;
            if (privateKey == null) throw new Exception($""Private key is null for {x509Certificate.SerialNumber}"");
            var privateKeyParams = privateKey.ExportParameters(true);
            session.Login(CKU.CKU_USER, pin);
            // Create temporary DES3 key for wrapping/unwrapping
            var tempKeyAttributes = new List<ObjectAttribute>
            {
                new ObjectAttribute(CKA.CKA_CLASS, CKO.CKO_SECRET_KEY),
                new ObjectAttribute(CKA.CKA_KEY_TYPE, CKK.CKK_DES3),
                new ObjectAttribute(CKA.CKA_ENCRYPT, true),
                new ObjectAttribute(CKA.CKA_DECRYPT, true),
                new ObjectAttribute(CKA.CKA_UNWRAP, true),
                new ObjectAttribute(CKA.CKA_WRAP, true)
            };
            // Preparing unencrypted private key
            var unencryptedPrivateKey = PrivateKeyInfoFactory.CreatePrivateKeyInfo(
                new RsaPrivateCrtKeyParameters(
                    new BigInteger(1, privateKeyParams.Modulus),
                    new BigInteger(1, privateKeyParams.Exponent),
                    new BigInteger(1, privateKeyParams.D),
                    new BigInteger(1, privateKeyParams.P),
                    new BigInteger(1, privateKeyParams.Q),
                    new BigInteger(1, privateKeyParams.DP),
                    new BigInteger(1, privateKeyParams.DQ),
                    new BigInteger(1, privateKeyParams.InverseQ))).GetEncoded();
            var tempKey = session.GenerateKey(new Mechanism(CKM.CKM_DES3_KEY_GEN), tempKeyAttributes);
            var result = new MemoryStream();
            var stream = new MemoryStream(unencryptedPrivateKey);
            //Encrypting
            session.Encrypt(new Mechanism(CKM.CKM_DES3_ECB), tempKey, stream,
                result);
            var encrypted = result.ToArray();
            string label = x509Certificate.SerialNumber;
            // Define how the new RSA private key should look like on the HSM
            var privateKeyAttributes = new List<ObjectAttribute>
            {
                new ObjectAttribute(CKA.CKA_CLASS, CKO.CKO_PRIVATE_KEY),
                new ObjectAttribute(CKA.CKA_TOKEN, true),
                new ObjectAttribute(CKA.CKA_PRIVATE, true),
                new ObjectAttribute(CKA.CKA_MODIFIABLE, true),
                new ObjectAttribute(CKA.CKA_SENSITIVE, false),
                new ObjectAttribute(CKA.CKA_LABEL, label),
                new ObjectAttribute(CKA.CKA_ID, Encoding.ASCII.GetBytes(label)),
                new ObjectAttribute(CKA.CKA_KEY_TYPE, CKK.CKK_RSA)
            };
            var privateKeyHandle = session.UnwrapKey(new Mechanism(CKM.CKM_DES3_ECB), tempKey,
                encrypted, privateKeyAttributes);
            return privateKeyHandle;

","131","<pkcs#11><pkcs11interop>","2","3","1","2019-04-09 10:06:26","55590222","6","0","11318064","","2019-04-09 10:05:56","2019-04-05 16:20:53",""
"54345987","Error while extracting public key from PKCS11 and Asn1crypto signed certificate","In addition to this thread: Where is the trust chain? [python] asn1crypto and pkcs11 Aladdin USB eToken 
I tried:
openssl x509 -pubkey -noout -in cert.pem 
Error getting public key
140003854860736:error:0D0680A8:asn1 encoding routines:asn1_check_tlen:wrong tag:../crypto/asn1/tasn_dec.c:1129:
140003854860736:error:0D06C03A:asn1 encoding routines:asn1_d2i_ex_primitive:nested asn1 error:../crypto/asn1/tasn_dec.c:693:
140003854860736:error:0D08303A:asn1 encoding routines:asn1_template_noexp_d2i:nested asn1 error:../crypto/asn1/tasn_dec.c:626:Field=n, Type=RSA
140003854860736:error:0408B004:rsa routines:rsa_pub_decode:RSA lib:../crypto/rsa/rsa_ameth.c:51:
140003854860736:error:0B09407D:x509 certificate routines:x509_pubkey_decode:public key decode error:../crypto/x509/x_pubkey.c:124:

The contents of this file is:
-----BEGIN CERTIFICATE-----
MIIFXjCCBEigAwIBAQIEBHHhkjALBgkqhkiG9w0BAQswKjEoMCYGA1UEAwwfTW92
aW1lbnRvIEVzdHVkYW50aWwgQnJhc2lsZWlybzAiGA8yMDE5MDEwMTAwMDAwMVoY
DzIwMjAwMzMxMjM1OTU5WjAWMRQwEgYDVQQDDAtDTkUgVEVTVEUgMzCCAjgwCwYJ
KoZIhvcNAQEBA4ICJwAwggIiMA0GCSqGSIb3DQEBAQUAA4ICDwAwggIKAoICAQCd
YHeqD8rwL2AtAeX1CLVxVP3LF9sjRDlSY6/0nrkr+WxNICHP5FI6GFTTLlHvgkwW
P4JKCIsEe6q+w7KfY5/BUy5wC65+o9bG25KA+MrUyN1h1Lonn8/6AKb/h+cz7MI9
yalMl2iu28zeQJHNzzRVM0W9/lG7WANn14pwQHsMa6WYnRl9APoqAvvqj6tOgD04
qPUlkgQRhGYJizgB6ZHR4TVAGj/TCV0XEPZOJIpTrd7nsET+xCjMjBg8jT3qg7Vg
lghIn+72Yi0nKykmN5duZwlvcFTfKkNBvJicDExYZ7WXxu9PfJETdHyFQLLck+Cr
MlSDloI/K9qWfdd8iX6GzETspfPV+ZXkdvfIM8A4TdlCiVx5n+1xc6jk4NB5eHSu
S80oNO0ctg6qKBcHb8YwV5VnQFZE3WaOZTORUBq+bjQxci9g0MA7ZqTK0O0K1QOL
Gl38AbDFjHpdtLIl/LdmzhSFx3NR4lA8RE4AkMOOeNqcDrRT4/PlBWoPsqWYcpPL
6AGl0I8N6hrm1iOvIxTWU6zV40E4SJSViPNzlo3L5iK+Ej4G3/YSCB8850nc6j11
3QGUTUvX8a8ZoKE3BuCO3LtYWYAb/RxyGlCq9jMFwHTYqqHu9cA5CwilMfP31SZ4
bMKhwR2AI/iowcMqCVtSZYi/dUDk9wY89nqY+5I+7QIDAQABo4IBiDCCAYQwRgYF
YEwBCgEEPTE5OTgtMDMtMTY2NzE0ODUyNDYwMTAwNzQ0NjQyMjU2NTIzNTAwMDAw
MDAwMDAwMDAwMDAwMDAwMDAwMDAwQwYFYEwBCgIEOlVuaXZlcnNpZGFkZSBDYW5k
aWRvIE1lbmRlc1N1cGVyaW9yRGlyZWl0b1JpbyBkbyBKYW5laXJvUkowIgYFYEwB
BAMEGUx1aXMgSW5hY2lvIEx1bGEgZGEgU2lsdmEwYgYIKwYBBQUHAQEEVjBUMFIG
CCsGAQUFBzAFhkZodHRwczovL3ZhbGlkYS5zb3BhZ29tZWlhLmNvbS5ici9nZXRf
YXV0aG9yaXR5X2luZm9ybWF0aW9uX2FjY2Vzcy83NDU3MDgGA1UdHwQxMC8wLaAr
oCmGJ2h0dHBzOi8vZG9taW5pby5jb20vZ2V0X2NybC9jb2RpZ29fZWVhLzAzBgNV
HSMELDAqgCg4OGQwZGU4MmMxYzE4NjJlZjUzYjExMWIwMzE2ODRlYWE1YjAwM2Ri
MAsGCSqGSIb3DQEBCwOCAQEAAhxXh4ouoo3pv12/nYyIKWDNDuRdAXCVasAQtpn6
ZOfOzde1a2AnqMET04BrR5SSpBeBq+aVacXtIVQCPoBD7F8+NppEM+q/Gw8aGugP
dXGKTgMQZMGI1vHMsydNB3tg0MoepUyr3V6HmBSGQkRq8uLiQ2Ke3Fm6/I+BOdNl
oe6/VBcD3zOMM+qnqM/ucR2Lcje0deifGTVnP16bISBk8077PxzGq1Ds2jLrDj1+
KsVA4JKBCZgDT3BBCQrKbXnENDeCSZ9TVlzgcNBFnFQzWDga3UjLvhEj8SjSg9Rl
e1jK7e83C6A96ixfUDlD6pVPl57QHAaalnQ6aHONq2wamg==
-----END CERTIFICATE-----

What's wrong with this file or with the code from that thread? I can't extract the public key.
","","129","<python><ssl><pkcs#11><asn1><asn1crypto>","0","","0","2019-01-24 11:49:24","","4","1","","","","2019-01-24 11:49:24",""
"30866046","Searching for usable implementation of CSP on top of pkcs 11","I found a few dead projects on this title.
Some referenced here.
I need one. But why are they all dead?
Is it bad idea to use such design? do you know of any good implementation which does this?
","Some Smart Card vendors were providing CSP over PKCS#11 (not open source). In my opitnion, htis is not the best way of developping a CSP. These 2 standards are very different, and even more different since the venue of CNG and Credential Providers under 'recent' Windows OS.
","126","<pkcs#11>","1","0","1","2017-01-24 15:16:00","","1","0","15519","","2016-02-19 10:06:04","2015-06-16 11:16:36",""
"28969759","Is there a way to prevent dlsym (module, ""functionName"") every function?","I have a shared library (more precisely a PKCS#11 module) and I want to write an application that can load a library and use it.
Currently I'm using dlsym like this:
My_C_GetSlotList = (CK_C_GetSlotList) dlsym (module, ""C_GetSlotList"");
if (!My_C_GetSlotList)  printf(""Couldn't find function 'C_GetSlotList' in library: %s: %s\n"", filename, dlerror ());

But the library does have about 68 functions.
I guess the real question is: Do I really have to do this for every functions? Is there a struct with a list of all functions? Maybe I'm just using dlsym wrong ...
","
You may just link your app with a shared library and forget dlsym completely.
You don't have to dlsym all 68 functions, but only those ones you really need.

","125","<c><shared-libraries><pkcs#11><dlsym>","1","1","2","2016-02-11 08:55:08","28981350","0","0","3270244","","2016-02-11 08:55:08","2015-03-10 17:01:50",""
"28969759","Is there a way to prevent dlsym (module, ""functionName"") every function?","I have a shared library (more precisely a PKCS#11 module) and I want to write an application that can load a library and use it.
Currently I'm using dlsym like this:
My_C_GetSlotList = (CK_C_GetSlotList) dlsym (module, ""C_GetSlotList"");
if (!My_C_GetSlotList)  printf(""Couldn't find function 'C_GetSlotList' in library: %s: %s\n"", filename, dlerror ());

But the library does have about 68 functions.
I guess the real question is: Do I really have to do this for every functions? Is there a struct with a list of all functions? Maybe I'm just using dlsym wrong ...
","You need to use dlsym() only once to acquire function pointer for C_GetFunctionList() function which will return you structure with pointers to all the other functions.
You can find example code on page 106 in PKCS#11 v2.20 specification.
","125","<c><shared-libraries><pkcs#11><dlsym>","1","1","2","2016-02-11 08:55:08","28981350","0","0","3270244","","2016-02-11 08:55:08","2015-03-10 17:01:50",""
"45393469","IAIK session between 2 java processes","We have 2 Java processes each using IAIK (iaik.pkcs.pkcs11)to talk to a shared single token NSS/HSM/smartcard. 
Each of these Java processes creates the IAIK session and logs in:
session = token.openSession(Token.SessionType.SERIAL_SESSION,
                    Token.SessionReadWriteBehavior.RW_SESSION, null, null);
session.login(Session.UserType.USER, XXXX);

We were expecting that when a Java process updates the token (for example: adds the certificate, keys), the other java process would be able to see the changes as well( for example: session.findObjectsInit(certTemplate) would find the  certificate that was added by another Java process). 
Unfortunately, that doesn't seem to be the case. Once the session is opened and logged in, it seems to have captured the information of the token at the time.
Is there a way to get update/refresh the IAIK session?
","From looking at the IAIK's Session documentation here, looks like it doesn't provide an option to update/refresh the current session.
However, you can implement your own method that does the refresh for you. You can do it by closing the current session and logging back in with a new session.
","123","<java><session><token><pkcs#11>","2","0","1","2017-08-01 20:22:06","","1","1","2432317","","2017-07-29 19:54:50","2017-07-28 21:28:32",""
"53835191","aws cloudhsm C_FindObjectsInit CKR_ATTRIBUTE_TYPE_INVALID","Using iaik.pkcs.pkcs11 wrapper to communicate with cloudhsm on ubuntu.
When trying to retrieve all public keys of class RSAPublicKey I get this exception:
iaik.pkcs.pkcs11.wrapper.PKCS11Exception: CKR_ATTRIBUTE_TYPE_INVALID
at iaik.pkcs.pkcs11.wrapper.PKCS11Implementation.C_FindObjectsInit(Native Method)
at iaik.pkcs.pkcs11.Session.findObjectsInit(Session.java:642)

Using the logging pkcs11 wrapper I managed to find:
0x00002b8c : 0x438b4700 : Calling C_FindObjectsInit
0x00002b8c : 0x438b4700 : Input
0x00002b8c : 0x438b4700 :  hSession: 10240
0x00002b8c : 0x438b4700 :  pTemplate: 0x7f2a58031f60
0x00002b8c : 0x438b4700 :  ulCount: 4
0x00002b8c : 0x438b4700 :   *** Begin attribute template ***
0x00002b8c : 0x438b4700 :   Attribute 0
0x00002b8c : 0x438b4700 :    Attribute: 256 (CKA_KEY_TYPE)
0x00002b8c : 0x438b4700 :    pValue: 0x7f2a58011c10
0x00002b8c : 0x438b4700 :    ulValueLen: 8
0x00002b8c : 0x438b4700 :    *pValue: HEX(0000000000000000)
0x00002b8c : 0x438b4700 :   Attribute 1
0x00002b8c : 0x438b4700 :    Attribute: 1073743360 (CKA_ALLOWED_MECHANISMS)
0x00002b8c : 0x438b4700 :    pValue: 0x7f2a58031ed0
0x00002b8c : 0x438b4700 :    ulValueLen: 32
0x00002b8c : 0x438b4700 :    *pValue: HEX(4300000000000000440000000000000045000000000000000D00000000000000)
0x00002b8c : 0x438b4700 :   Attribute 2
0x00002b8c : 0x438b4700 :    Attribute: 264 (CKA_SIGN)
0x00002b8c : 0x438b4700 :    pValue: 0x7f2a5802f450
0x00002b8c : 0x438b4700 :    ulValueLen: 1
0x00002b8c : 0x438b4700 :    *pValue: HEX(01)
0x00002b8c : 0x438b4700 :   Attribute 3
0x00002b8c : 0x438b4700 :    Attribute: 0 (CKA_CLASS)
0x00002b8c : 0x438b4700 :    pValue: 0x7f2a5802f470
0x00002b8c : 0x438b4700 :    ulValueLen: 8
0x00002b8c : 0x438b4700 :    *pValue: HEX(0300000000000000)
0x00002b8c : 0x438b4700 :   *** End attribute template ***
0x00002b8c : 0x438b4700 : Returning 18 (CKR_ATTRIBUTE_TYPE_INVALID)

but cannot understand what's the problem. The mechanisms should all be allowed properly as well by cloudhsm.
","If I read output of pkcs11-logger correctly then this is your search template:
CKA_CLASS = CKO_PRIVATE_KEY
CKA_KEY_TYPE = CKK_RSA
CKA_SIGN = CK_TRUE
CKA_ALLOWED_MECHANISMS = { CKM_SHA256_RSA_PKCS_PSS, CKM_SHA384_RSA_PKCS_PSS, CKM_SHA512_RSA_PKCS_PSS, CKM_RSA_PKCS_PSS }

It seems completely fine to me. 
Unfortunately PKCS#11 API does not provide details which exact attribute from supplied template caused CKR_ATTRIBUTE_TYPE_INVALID error but many PKCS#11 libraries support some kind of internal logging mechanism which may reveal the real cause of error. Exact steps needed to enable logging should be present in the documentation provided by the PKCS#11 library vendor.
","121","<java><amazon-web-services><pkcs#11><hsm><iaik-jce>","2","2","2","2019-01-29 12:00:56","54420601","0","","","","","2018-12-18 14:27:58",""
"53835191","aws cloudhsm C_FindObjectsInit CKR_ATTRIBUTE_TYPE_INVALID","Using iaik.pkcs.pkcs11 wrapper to communicate with cloudhsm on ubuntu.
When trying to retrieve all public keys of class RSAPublicKey I get this exception:
iaik.pkcs.pkcs11.wrapper.PKCS11Exception: CKR_ATTRIBUTE_TYPE_INVALID
at iaik.pkcs.pkcs11.wrapper.PKCS11Implementation.C_FindObjectsInit(Native Method)
at iaik.pkcs.pkcs11.Session.findObjectsInit(Session.java:642)

Using the logging pkcs11 wrapper I managed to find:
0x00002b8c : 0x438b4700 : Calling C_FindObjectsInit
0x00002b8c : 0x438b4700 : Input
0x00002b8c : 0x438b4700 :  hSession: 10240
0x00002b8c : 0x438b4700 :  pTemplate: 0x7f2a58031f60
0x00002b8c : 0x438b4700 :  ulCount: 4
0x00002b8c : 0x438b4700 :   *** Begin attribute template ***
0x00002b8c : 0x438b4700 :   Attribute 0
0x00002b8c : 0x438b4700 :    Attribute: 256 (CKA_KEY_TYPE)
0x00002b8c : 0x438b4700 :    pValue: 0x7f2a58011c10
0x00002b8c : 0x438b4700 :    ulValueLen: 8
0x00002b8c : 0x438b4700 :    *pValue: HEX(0000000000000000)
0x00002b8c : 0x438b4700 :   Attribute 1
0x00002b8c : 0x438b4700 :    Attribute: 1073743360 (CKA_ALLOWED_MECHANISMS)
0x00002b8c : 0x438b4700 :    pValue: 0x7f2a58031ed0
0x00002b8c : 0x438b4700 :    ulValueLen: 32
0x00002b8c : 0x438b4700 :    *pValue: HEX(4300000000000000440000000000000045000000000000000D00000000000000)
0x00002b8c : 0x438b4700 :   Attribute 2
0x00002b8c : 0x438b4700 :    Attribute: 264 (CKA_SIGN)
0x00002b8c : 0x438b4700 :    pValue: 0x7f2a5802f450
0x00002b8c : 0x438b4700 :    ulValueLen: 1
0x00002b8c : 0x438b4700 :    *pValue: HEX(01)
0x00002b8c : 0x438b4700 :   Attribute 3
0x00002b8c : 0x438b4700 :    Attribute: 0 (CKA_CLASS)
0x00002b8c : 0x438b4700 :    pValue: 0x7f2a5802f470
0x00002b8c : 0x438b4700 :    ulValueLen: 8
0x00002b8c : 0x438b4700 :    *pValue: HEX(0300000000000000)
0x00002b8c : 0x438b4700 :   *** End attribute template ***
0x00002b8c : 0x438b4700 : Returning 18 (CKR_ATTRIBUTE_TYPE_INVALID)

but cannot understand what's the problem. The mechanisms should all be allowed properly as well by cloudhsm.
","From AWS support on this issue: cloudhsm does not accept any allowed mechanism attributes for the C_FindObjectsInit call.
","121","<java><amazon-web-services><pkcs#11><hsm><iaik-jce>","2","1","2","2019-01-29 12:00:56","54420601","0","","","","","2018-12-18 14:27:58",""
"56208198","Python: TLS session with Yubikey","I am setting up a rest client that must be trusted by a remote server using client certificate. Client written in python, running on windows 10. How can I use YubiKey 5 to store private key to encrypt SSL connection? 
It seems like there is no off-the-shelf solution / python package that supports using pkcs11 for ssl context. 
We were able to use https://github.com/square/ghostunnel with yubikeys with client certificates, but it makes solution less secure and more complicated to deploy.
","","120","<python-3.x><windows><ssl><pkcs#11><yubico>","3","","0","2019-05-20 15:09:46","","2","2","11523745","","2019-05-20 15:09:46","2019-05-19 13:18:26",""
"55142616","pkcs11-tool does not see card which is identified by pcsc","I am using a REINER SCT cyberJack RFID standard card reader and an estonian ID card.
pcsc_scan correctly identifies the card:
$ pcsc_scan
PC/SC device scanner
V 1.5.2 (c) 2001-2017, Ludovic Rousseau <ludovic.rousseau@free.fr>
Using reader plug'n play mechanism
Scanning present readers...
0: REINER SCT cyberJack RFID standard (9084002233) 00 00

Wed Mar 13 14:02:39 2019
 Reader 0: REINER SCT cyberJack RFID standard (9084002233) 00 00
  Card state: Card inserted, 
  ATR: 3B DB 96 00 80 B1 FE 45 1F 83 00 12 23 3F 53 65 49 44 0F 90 00 F1

ATR: 3B DB 96 00 80 B1 FE 45 1F 83 00 12 23 3F 53 65 49 44 0F 90 00 F1
+ TS = 3B --> Direct Convention
+ T0 = DB, Y(1): 1101, K: 11 (historical bytes)
  TA(1) = 96 --> Fi=512, Di=32, 16 cycles/ETU
    250000 bits/s at 4 MHz, fMax for Fi = 5 MHz => 312500 bits/s
  TC(1) = 00 --> Extra guard time: 0
  TD(1) = 80 --> Y(i+1) = 1000, Protocol T = 0 
-----
  TD(2) = B1 --> Y(i+1) = 1011, Protocol T = 1 
-----
  TA(3) = FE --> IFSC: 254
  TB(3) = 45 --> Block Waiting Integer: 4 - Character Waiting Integer: 5
  TD(3) = 1F --> Y(i+1) = 0001, Protocol T = 15 - Global interface bytes following 
-----
  TA(4) = 83 --> Clock stop: state H - Class accepted by the card: (3G) A 5V B 3V 
+ Historical bytes: 00 12 23 3F 53 65 49 44 0F 90 00
  Category indicator byte: 00 (compact TLV data object)
    Tag: 1, len: 2 (country code, ISO 3166-1)
      Country code: 23 3F
    Tag: 5, len: 3 (card issuer's data)
      Card issuer data: 65 49 44
    Mandatory status indicator (3 last bytes)
      LCS (life card cycle): 0F (unknown)
      SW: 9000 (Normal processing.)
+ TCK = F1 (correct checksum)

Possibly identified card (using /home/mag/.cache/smartcard_list.txt):
3B DB 96 00 80 B1 FE 45 1F 83 00 12 23 3F 53 65 49 44 0F 90 00 F1
    Estonia ID-card (eID)
    https://id.ee

however pkcs11-tool does not see the card:
$ pkcs11-tool --module /usr/lib/x86_64-linux-gnu/opensc-pkcs11.so -L
Available slots:
Slot 0 (0x0): REINER SCT cyberJack RFID standard (9084002233) 00 00
  (empty)

What can be the cause of the problem? What do I miss?
","Apparently the toolchain of the estonian card is not compatible with pkcs-11. However the chrome-token-signing package contains the needed code at least for authentication to their service both for chromium and firefox, and the qdigidoc4 package contains a tool to create and check signed/encrypted documents.
Their repo is here:
deb https://installer.id.ee/media/ubuntu/ bionic main

Another issue I have encountered that my cert is said to be invalid. That was because the certificate won't get enabled right away when you receive your ID.
","117","<pkcs#11><opensc>","1","0","1","2019-03-18 18:16:50","","0","","","","","2019-03-13 13:06:17",""
"53868043","What is CKA_VALUE used in AES secret key generation template?","I am trying to integrate safenet HSM with our application. I am writing the program in C. I am referring to the PKCS11 v2.20 cryptoki standard document from RSA labs. I need to generate an AES 256 bit key. While defining the template for key generation I am not sure what value needs to be passed for CKA_VALUE. While generating a DES3 key, I didn't provide this attribute and I was able to generate a key.
I searched for sample programs for CKA_LABEL but failed to find any solid examples in C. I found a couple of Java programs where they have used CKA_VALUE_LEN instead of CKA_VALUE. I am not sure if that will work.
This is the snippet given in the document. Most websites give only this snippet as an example. Nothing is specified for the array value. 
CK_OBJECT_CLASS class = CKO_SECRET_KEY;
CK_KEY_TYPE keyType = CKK_AES;
CK_UTF8CHAR label[] = “An AES secret key object”;
CK_BYTE value[] = {...};
CK_BBOOL true = CK_TRUE;
CK_ATTRIBUTE template[] = {
{CKA_CLASS, &class, sizeof(class)},
{CKA_KEY_TYPE, &keyType, sizeof(keyType)},
{CKA_TOKEN, &true, sizeof(true)},
{CKA_LABEL, label, sizeof(label)-1},
{CKA_ENCRYPT, &true, sizeof(true)},
{CKA_VALUE, value, sizeof(value)}
};

","The CKA_VALUE is the actual value of the key. When you tell the HSM to generate a secret key, it will generate a key for you on the hardware based on the attributes you pass in secret key template, and set the value generated in the CKA_VALUE. This attribute however cannot be read/extracted nor it can be set when generating the key, because the HSM won't allow you to inject a key (directly) from the software nor allow you to extract it from the HSM (directly).
The CKA_VALUE_LEN is the length of the key you can tell the HSM to generate. The AES key can be of length 128, 192 or 256 bits. Depending on the key size you want you would set the CKA_VALUE_LEN as 16, 24 or 32 (key size as bytes).
","115","<c><aes><public-key-encryption><pkcs#11>","0","2","1","2018-12-21 13:51:48","","2","2","2240243","","2018-12-20 12:04:43","2018-12-20 11:44:10",""
"47613646","How can I substitute my software application for an HSM to work with PKCS?","I am trying to replace HSM(s) with my software-only application and integrate with PKCS11. The problem I have with that is all of PKCS api functions deal with slots and tokens which are not a part of my software application. Are there examples out there that I can look up to see how a software application can be used to imitate an HSM and integrate with PKCS ?
","When you are dealing with HSM's you have to deal with slots and tokens. You have to modify your software slightly to accommodate this.
There are 2 ways you can use the PKCS#11, PKCS#11 Wrapper or PKCS#11 Provider. The Wrapper is the api that calls the native functions of the HSM library (.dll or .so) directly. The Provider uses the Wrapper under the hood, but gives you the convenience of using it with Java KeyStore api.
Considering your case, the Wrapper might not be fit for you, because it involves writing new classes to integrate with the HSM. You could use the provider.
Java has very good documentation of the PKCS11 Provider here. There is also a very good third-party library called IAIK, here is their provider documentation. Even though you use the Provider in your software application, trivial code changes are inevitable.
Where ever you have used the KeyStore api, you may have to make changes there. And initially, when your software loads, you have to load a configuration file for the PKCS11 provider that tells which slot number and the token to connect to.
IAIK has very good examples too, and their provider library is only free for development purposes.
","112","<pkcs#11><hsm>","0","0","1","2017-12-03 17:20:07","47621039","0","","","","","2017-12-02 23:19:04",""
"56860252","Problem with ENGINE_load_private_key and PKCS#11","Being stuck with signing (Authenticode) using PKCS#11 tokens, and given the amazingly poor driver support from the vendor (SafeNet), we're signing Windows code on Linux.
All of this is working fine using all of our tokens on several build servers.  However, I have one token that fails, depending on the mechanism being used.  From Java, using Jsign and the SunPKCS11 provider, everything works fine with this token.
However, from osslsigncode, signing fails with this token:
Unable to enumerate certificates
PKCS11_get_private_key returned NULL
Failed to load private key 9df65894eb084ba3140555614123992:error:26096080:engine routines:ENGINE_load_private_key:failed loading private key:eng_pkey.c:124:

Failed

The difference between the working token and the non-working token is that the non-working token includes not just the certificate, but also its trust chain:
# pkcs11-tool --module libeToken.so --list-objects
Using slot 0 with a present token (0x0)
Certificate Object, type = X.509 cert
  label:      te-69f298db-2f32-4a94-82ea-3e11829b26cd
  ID:         9df65894eb084ba3
Certificate Object, type = X.509 cert
  label:      
Certificate Object, type = X.509 cert
  label:      

Using p11tool, the two empty-looking certs above show as:
Type: X.509 Certificate
Label: 
Flags: CKA_CERTIFICATE_CATEGORY=CA; 
ID: 

My other tokens, all of which work fine, do not include these CA certs.  This token was created recently, so it may be that either the token firmware is different from my others, or the token installation process has changed since I created the other, working tokens.  The certificate is the same on all of them, working and non-working.
I've confirmed (via gdb) that the correct key ID is being passed into ENGINE_load_private_key.
I'm not sure who owns the ENGINE API in this case - is it a token driver issue?  (SafeNet)  Is it a problem with OpenSC? etc.  It would be helpful to find some other tool that uses the API in the same way so I could confirm whether the problem somehow lies with osslsigncode (which isn't actively supported) or one of the lower layers in this tower of cards.
P.S.  I used PKCS#11 Spy, and it shows enumeration of all of the certs in the chain, so it's finding the key pair (by ID), but then fails - no errors in PKCS#11 Spy - all CKR_OK.
P.P.S.  To address the question of whether this token also has a private key...
Using slot 0 with a present token (0x0)
Logging in to ""Code Signing Token 11"".
Please enter User PIN: 
Private Key Object; RSA 
  label:      
  ID:         9df65894eb084ba3
  Usage:      decrypt, sign, unwrap
Certificate Object, type = X.509 cert
  label:      te-69f298db-2f32-4a94-82ea-3e11829b26cd
  ID:         9df65894eb084ba3
Certificate Object, type = X.509 cert
  label:      
Certificate Object, type = X.509 cert
  label:      

","It seems that you did NOT login to the token. In pkcs11-tool, use --login --pin <your-pin-code> if you want to retrieve private objects.
It should be noted that the signing process needs an appropriate private key (not certificate).
","111","<pkcs#11><authenticode>","1","0","2","2019-07-22 12:37:30","57146231","0","1","1048117","","2019-07-03 13:50:11","2019-07-02 21:29:32",""
"56860252","Problem with ENGINE_load_private_key and PKCS#11","Being stuck with signing (Authenticode) using PKCS#11 tokens, and given the amazingly poor driver support from the vendor (SafeNet), we're signing Windows code on Linux.
All of this is working fine using all of our tokens on several build servers.  However, I have one token that fails, depending on the mechanism being used.  From Java, using Jsign and the SunPKCS11 provider, everything works fine with this token.
However, from osslsigncode, signing fails with this token:
Unable to enumerate certificates
PKCS11_get_private_key returned NULL
Failed to load private key 9df65894eb084ba3140555614123992:error:26096080:engine routines:ENGINE_load_private_key:failed loading private key:eng_pkey.c:124:

Failed

The difference between the working token and the non-working token is that the non-working token includes not just the certificate, but also its trust chain:
# pkcs11-tool --module libeToken.so --list-objects
Using slot 0 with a present token (0x0)
Certificate Object, type = X.509 cert
  label:      te-69f298db-2f32-4a94-82ea-3e11829b26cd
  ID:         9df65894eb084ba3
Certificate Object, type = X.509 cert
  label:      
Certificate Object, type = X.509 cert
  label:      

Using p11tool, the two empty-looking certs above show as:
Type: X.509 Certificate
Label: 
Flags: CKA_CERTIFICATE_CATEGORY=CA; 
ID: 

My other tokens, all of which work fine, do not include these CA certs.  This token was created recently, so it may be that either the token firmware is different from my others, or the token installation process has changed since I created the other, working tokens.  The certificate is the same on all of them, working and non-working.
I've confirmed (via gdb) that the correct key ID is being passed into ENGINE_load_private_key.
I'm not sure who owns the ENGINE API in this case - is it a token driver issue?  (SafeNet)  Is it a problem with OpenSC? etc.  It would be helpful to find some other tool that uses the API in the same way so I could confirm whether the problem somehow lies with osslsigncode (which isn't actively supported) or one of the lower layers in this tower of cards.
P.S.  I used PKCS#11 Spy, and it shows enumeration of all of the certs in the chain, so it's finding the key pair (by ID), but then fails - no errors in PKCS#11 Spy - all CKR_OK.
P.P.S.  To address the question of whether this token also has a private key...
Using slot 0 with a present token (0x0)
Logging in to ""Code Signing Token 11"".
Please enter User PIN: 
Private Key Object; RSA 
  label:      
  ID:         9df65894eb084ba3
  Usage:      decrypt, sign, unwrap
Certificate Object, type = X.509 cert
  label:      te-69f298db-2f32-4a94-82ea-3e11829b26cd
  ID:         9df65894eb084ba3
Certificate Object, type = X.509 cert
  label:      
Certificate Object, type = X.509 cert
  label:      

","The solution, at least for now, seems to be just deleting the CA certs from the token (via SAC Tools on Windows).  Once done, osslsigncode (via the PKCS#11 stack) has no problem finding the token.  The CA certs aren't needed for signing, so deleting them presents no problem.
","111","<pkcs#11><authenticode>","1","1","2","2019-07-22 12:37:30","57146231","0","1","1048117","","2019-07-03 13:50:11","2019-07-02 21:29:32",""
"55339451","ProviderException - CKR_TOKEN_NOT_RECOGNIZED","PKCS11 Api is throwing this exception when trying to instantiate, The driver specified is installed at windows32.
Code:
public static String configFile = ""C:\\path_to\\config.cfg"";
    public static void main(String[] args){
        Provider p = new sun.security.pkcs11.SunPKCS11(configFile);
        Security.addProvider(p);
    }

Config file:
name = PKTest
library = C:\Windows\System32\aetpkss1.dll

Exception:
Exception in thread ""main"" java.security.ProviderException: Initialization failed
    at sun.security.pkcs11.SunPKCS11.<init>(SunPKCS11.java:376)
    at sun.security.pkcs11.SunPKCS11.<init>(SunPKCS11.java:103)
    at br.com.keyworks.digitalsigner.test.SignerTest.main(SignerTest.java:19)
Caused by: sun.security.pkcs11.wrapper.PKCS11Exception: CKR_TOKEN_NOT_RECOGNIZED
    at sun.security.pkcs11.wrapper.PKCS11.C_GetTokenInfo(Native Method)
    at sun.security.pkcs11.Token.<init>(Token.java:135)
    at sun.security.pkcs11.SunPKCS11.initToken(SunPKCS11.java:858)
    at sun.security.pkcs11.SunPKCS11.<init>(SunPKCS11.java:367)
    ... 2 more


","","109","<java><pkcs#11>","0","","0","2019-03-25 13:55:41","","0","","","","","2019-03-25 13:55:41",""
"56688328","Setting pkcs11 cfg file","I am trying to run an example of how to use pkcs11 using the next code
import java.lang.reflect.Constructor;
import java.security.KeyStore;
import java.security.Provider;
import java.security.Security;
import java.util.Enumeration;

public class SignWithPKCS11
{
    public static void main (String [] args)
    {
            try
            {
                    Class<?> pkcs11Class = Class.forName(""sun.security.pkcs11.SunPKCS11"");
                    Constructor<?> construct = pkcs11Class.getConstructor(new Class[] {String.class});

                    String configName = ""pkcs11.cfg"";
                    Provider p = (Provider)construct.newInstance(new Object[] {configName});
                    Security.addProvider(p);
            }
            catch (Throwable t)
            {
                    t.printStackTrace();
            }

    }
}

The code above, calls the file pkcs11.cfg. The content of it is
name = JSignPdf
library = /home/grados-sanchez/grive/E-CONNECTING/david/opensc-pkcs11.so

using this command
java -cp . SignWithPKCS11
java -Djava.library.path="".:/home/grados-sanchez/grive/E-CONNECTING/david"" -cp . SignWithPKCS11

but I get
java.lang.reflect.InvocationTargetException
    at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
    at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
    at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
    at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
    at SignWithPKCS11.main(SignWithPKCS11.java:32)
Caused by: java.security.ProviderException: Initialization failed
    at sun.security.pkcs11.SunPKCS11.<init>(SunPKCS11.java:376)
    at sun.security.pkcs11.SunPKCS11.<init>(SunPKCS11.java:103)
Caused by: java.io.IOException: libopensc.so.6: cannot open shared object file: No such file or directory/home/grados-sanchez/grive/E-CONNECTING/david/opensc-pkcs11.so

Could you help me, to fix it, please? What is wrong?
NOTE: When I did:
 ls -l /home/grados-sanchez/grive/E-CONNECTING/david/opensc-pkcs11.so

I get 
 -rw-rw-r-- 1 user user 220232 Jun 19 01:59 /home/grados-sanchez/grive/E-CONNECTING/david/opensc-pkcs11.so

","","108","<java><pkcs#11>","1","","0","2019-06-20 14:42:32","","1","","1365798","","2019-06-20 14:42:32","2019-06-20 14:35:01",""
"41756218","check if dll is an implementation of pkcs11 version 2.20","I want to check that a dll is an implementation of pkcs11 version 2.20 or other version. So I find what are difference between pkcs11 version 2.20 and others (specialy version 2.30). Could you give me some suggest?
Thanks in advance!
","As per this link

Version 2.30 This is the draft of the v2.30 version of the standard. The RSA PKCS#11 development process did not move this beyond
  draft despite the 30 day public final draft review ending 28-Oct-2009.
  Many vendors have adopted various portions of the draft version. 
This version is the basis of the v2.40 OASIS standard version.
Version 2.20 Published 28 June 2004 this is the most widely used version of the PKCS#11 standard. Most supporting vendors have versions
  with various vendor-specific extensions based on v2.20.

And regarding the version, you can use the CK_VERSION to find out the PKCS#11 Implementation version, more [here].
","107","<pkcs#11>","-1","0","1","2019-10-21 12:40:54","","0","1","","","","2017-01-20 04:39:00",""
"52809655","I'm trying to create GOSTR3410 public key. CKR_ATTRIBUTE_TYPE_INVALID exeption","Good day!
I'm trying to create public key ObjectHandle based on hex string that comes from client via post request.
I'm doing it according to the documentation, but it returns me CKR_ATTRIBUTE_TYPE_INVALID exeption.
Full exeption message: Net.Pkcs11Interop.Common.Pkcs11Exception: 'Method C_CreateObject returned CKR_ATTRIBUTE_VALUE_INVALID'
Inner exeption is null
Can you please help me to figure out what i'm doing wrong?
Here is my code:
using (Pkcs11 pkcs11 = new Pkcs11(Settings.RutokenEcpDllDefaultPath, AppType.MultiThreaded))
{
    Slot slot = GetSlot(pkcs11);

    // This public key comes from client
    // But i put it here to show value. Maybe value is a reason. I'm not sure, 
    // but i hope you will help me

    var hexString = ""1c:ec:2d:4a:b3:51:51:07:f7:c4:f6:d9:09:a3:06:73:c2:06:42:7f:b2:11:fd:be:ad:12:5c:22:b9:df:cb:e5:08:7c:7c:48:a6:af:92:67:d3:56:63:29:0c:9e:1a:4a:0e:d1:08:d8:7a:28:61:bd:da:ed:be:aa:49:84:f2:64"";
    hexString = hexString.Replace("":"", string.Empty);
    var publicKeyValue = ConvertUtils.HexStringToBytes(hexString);

    using (Session session = slot.OpenSession(SessionType.ReadWrite))
    {
        session.Login(CKU.CKU_USER, Settings.TokenPin);
        List<ObjectAttribute> objectAttributes = new List<ObjectAttribute>();
        objectAttributes.Add(new ObjectAttribute(CKA.CKA_CLASS, CKO.CKO_PUBLIC_KEY));
        objectAttributes.Add(new ObjectAttribute(CKA.CKA_KEY_TYPE, CKK.CKK_GOSTR3410));
        objectAttributes.Add(new ObjectAttribute(CKA.CKA_LABEL, ""Verification Key""));
        objectAttributes.Add(new ObjectAttribute(CKA.CKA_VERIFY, true));
        objectAttributes.Add(new ObjectAttribute(CKA.CKA_VALUE, publicKeyValue));
        objectAttributes.Add(new ObjectAttribute(CKA.CKA_TOKEN, true));
        objectAttributes.Add(new ObjectAttribute(CKA.CKA_PRIVATE, false));
        objectAttributes.Add(new ObjectAttribute(CKA.CKA_GOSTR3410_PARAMS, new byte[] { 0x06, 0x07, 0x2a, 0x85, 0x03, 0x02, 0x02, 0x23, 0x00 }));

        // Create object
        ObjectHandle objectHandle = session.CreateObject(objectAttributes);

    }
}

","By returning CKR_ATTRIBUTE_VALUE_INVALID your PKCS#11 library tells you that your template specifies an invalid value for a valid attribute(s).
Unfortunately PKCS#11 API does not provide details which attribute caused the error but many PKCS#11 libraries support some kind of internal logging mechanism which may reveal the real cause of error. Exact steps needed to enable logging should be present in the documentation provided by the PKCS#11 library vendor.
","107","<c#><pkcs#11><pkcs11interop><gost3410>","2","0","2","2018-11-06 12:52:50","53170755","3","1","3868464","","2018-11-06 12:52:50","2018-10-15 04:11:41",""
"52809655","I'm trying to create GOSTR3410 public key. CKR_ATTRIBUTE_TYPE_INVALID exeption","Good day!
I'm trying to create public key ObjectHandle based on hex string that comes from client via post request.
I'm doing it according to the documentation, but it returns me CKR_ATTRIBUTE_TYPE_INVALID exeption.
Full exeption message: Net.Pkcs11Interop.Common.Pkcs11Exception: 'Method C_CreateObject returned CKR_ATTRIBUTE_VALUE_INVALID'
Inner exeption is null
Can you please help me to figure out what i'm doing wrong?
Here is my code:
using (Pkcs11 pkcs11 = new Pkcs11(Settings.RutokenEcpDllDefaultPath, AppType.MultiThreaded))
{
    Slot slot = GetSlot(pkcs11);

    // This public key comes from client
    // But i put it here to show value. Maybe value is a reason. I'm not sure, 
    // but i hope you will help me

    var hexString = ""1c:ec:2d:4a:b3:51:51:07:f7:c4:f6:d9:09:a3:06:73:c2:06:42:7f:b2:11:fd:be:ad:12:5c:22:b9:df:cb:e5:08:7c:7c:48:a6:af:92:67:d3:56:63:29:0c:9e:1a:4a:0e:d1:08:d8:7a:28:61:bd:da:ed:be:aa:49:84:f2:64"";
    hexString = hexString.Replace("":"", string.Empty);
    var publicKeyValue = ConvertUtils.HexStringToBytes(hexString);

    using (Session session = slot.OpenSession(SessionType.ReadWrite))
    {
        session.Login(CKU.CKU_USER, Settings.TokenPin);
        List<ObjectAttribute> objectAttributes = new List<ObjectAttribute>();
        objectAttributes.Add(new ObjectAttribute(CKA.CKA_CLASS, CKO.CKO_PUBLIC_KEY));
        objectAttributes.Add(new ObjectAttribute(CKA.CKA_KEY_TYPE, CKK.CKK_GOSTR3410));
        objectAttributes.Add(new ObjectAttribute(CKA.CKA_LABEL, ""Verification Key""));
        objectAttributes.Add(new ObjectAttribute(CKA.CKA_VERIFY, true));
        objectAttributes.Add(new ObjectAttribute(CKA.CKA_VALUE, publicKeyValue));
        objectAttributes.Add(new ObjectAttribute(CKA.CKA_TOKEN, true));
        objectAttributes.Add(new ObjectAttribute(CKA.CKA_PRIVATE, false));
        objectAttributes.Add(new ObjectAttribute(CKA.CKA_GOSTR3410_PARAMS, new byte[] { 0x06, 0x07, 0x2a, 0x85, 0x03, 0x02, 0x02, 0x23, 0x00 }));

        // Create object
        ObjectHandle objectHandle = session.CreateObject(objectAttributes);

    }
}

","GOST Public Key can't be imported onto ruToken - see docs note in the box.
Just change 
objectAttributes.Add(new ObjectAttribute(CKA.CKA_TOKEN, **true**));
to  
objectAttributes.Add(new ObjectAttribute(CKA.CKA_TOKEN, **false**));
Public key as a token object can only be 'created' as a result of C_GenerateKeyPair call.
","107","<c#><pkcs#11><pkcs11interop><gost3410>","2","0","2","2018-11-06 12:52:50","53170755","3","1","3868464","","2018-11-06 12:52:50","2018-10-15 04:11:41",""
"55346740","PDF signing PKCS11_get_private_key return NULL","I tried to signing pdf file with e-token in linux mint.
this is the cuestion:
When i run:
openssl engine pkcs11 -t -c
i got:
(pkcs11) pkcs11 engine
     [RSA]
        [ available ]

I think this is ok? in other cuestion I saw 
[RSA, rsaEncryption, id-ecPublicKey].

I looking for identify correctly name and type of object that contain the private key.
in 
pkcs11-tool --module /usr/lib/libeTPkcs11.so --login -O

i got
Using slot 0 with a present token (0x0)
Logging in to ""Mi dispositivo"".
Please enter User PIN: 
Certificate Object; type = X.509 cert
label:
Certificate Object; type = X.509 cert
 label: 
Private Key Object; RSA
label: 
ID:         ee0318bc9438a2be
Usage:      decrypt, sign, unwrap
Certificate Object; type = X.509 cert
label:      le-8ee1d222-1107-4c62-b6bf-655d5408b49a
 ID:         ee0318bc9438a2be

so....
openssl pkeyutl -sign -keyform ENGINE -engine pkcs11 -inkey ""pkcs11:id=ee0318bc9438a2be;type=private;pin-value=password"" -in prueba.pdf -out prueba_firmado.pdf

i got

engine ""pkcs11"" set.
No private keys found.
PKCS11_get_private_key returned NULL
cannot load Private Key from engine
140619720004032:error:80067065:pkcs11 engine:ctx_load_privkey:object not found:eng_back.c:876:
140619720004032:error:26096080:engine routines:ENGINE_load_private_key:failed loading private key:../crypto/engine/eng_pkey.c:78:
unable to load Private Key
pkeyutl: Error initializing context

I tried to read private key with URI of token.... and with ""slot_id"" method, both give me same results.
why pkcs11 engine say ""no object found""??
thanks in advice for take your time to read my problem!.
","","107","<ssl><openssl><x509certificate><pkcs#11>","0","","0","2019-03-26 17:34:18","","4","","2420325","","2019-03-26 17:34:18","2019-03-25 21:34:00",""
"55648389","Java Applet ""ClassNotFoundException"" on Firefox 52.4.1 - works on IE","We need to run an old web application which using Java 8 Applet (sick), on Firefox 52.4.1 (last version compatible with Java Applet) and Internet Explorer 11.
The applet is based on Java 8 and distributed by an Apache Tomcat server.
It is signed and obfuscated (Proguard).
The user connect to the website with SSL mutual authentication from a smartcard (The client needs a PKCS11 module to get the certificate from the smartcard).
The SSL mutual authentication is also done with the Java Applet.
All certificates are signed by an autority added in every browsers, windows and Java certificates stores.
Here the HTML code:
<object classid='clsid:8AD9C840-044E-11D1-B3E9-00805F499D93' id='AsapiObject'>
    <param name='archive' value='../../../applet/myapplet.jar'/>
    <param name='code' value='main.package.Main'/>
    <param name='name' value='My Applet'/>
    <param name='mayscript' value='true'/>
    <comment>
        <applet id='AsapiApplet'
                name='My Applet'
                archive='../../../applet/myapplet.jar'
                code='main.package.Main'
                MAYSCRIPT=""MAYSCRIPT"">
        </applet>
    </comment>
</object>

(Followed recommandations from https://docs.oracle.com/javase/8/docs/technotes/guides/jweb/applet/using_tags.html#applet)
It works fine on IE 11, not on Mozilla Firefox 52.4.1.
Its the same JRE on both.
On Mozilla Firefox 52.4.1, I have a Java exception :
java.lang.ClassNotFoundException: main.package.Main
    at sun.plugin2.applet.Applet2ClassLoader.findClass(Unknown Source)
    at sun.plugin2.applet.Plugin2ClassLoader.loadClass0(Unknown Source)
    at sun.plugin2.applet.Plugin2ClassLoader.loadClass(Unknown Source)
    at sun.plugin2.applet.Plugin2ClassLoader.loadClass(Unknown Source)
    at java.lang.ClassLoader.loadClass(ClassLoader.java:357)
    at sun.plugin2.applet.Plugin2ClassLoader.loadCode(Unknown Source)
    at sun.plugin2.applet.Plugin2Manager.initAppletAdapter(Unknown Source)
    at sun.plugin2.applet.Plugin2Manager$AppletExecutionRunnable.run(Unknown Source)
    at java.lang.Thread.run(Thread.java:748)

And before this exception, I have an handshake failure exception :
javax.net.ssl.SSLHandshakeException: Received fatal alert: handshake_failure
    at sun.security.ssl.Alerts.getSSLException(Alerts.java:192)
    at sun.security.ssl.Alerts.getSSLException(Alerts.java:154)
    at sun.security.ssl.SSLSocketImpl.recvAlert(SSLSocketImpl.java:2023)
    at sun.security.ssl.SSLSocketImpl.readRecord(SSLSocketImpl.java:1125)
    at sun.security.ssl.SSLSocketImpl.performInitialHandshake(SSLSocketImpl.java:1375)
    at sun.security.ssl.SSLSocketImpl.startHandshake(SSLSocketImpl.java:1403)
    at sun.security.ssl.SSLSocketImpl.startHandshake(SSLSocketImpl.java:1387)
    at sun.net.www.protocol.https.HttpsClient.afterConnect(HttpsClient.java:559)
    at sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection.connect(AbstractDelegateHttpsURLConnection.java:185)
    at sun.net.www.protocol.https.HttpsURLConnectionImpl.connect(HttpsURLConnectionImpl.java:153)
    at sun.plugin.PluginURLJarFileCallBack.connect(Unknown Source)
    at sun.plugin.PluginURLJarFileCallBack.retrieve(Unknown Source)
    at sun.net.www.protocol.jar.URLJarFile.retrieve(URLJarFile.java:205)
    at sun.net.www.protocol.jar.URLJarFile.getJarFile(URLJarFile.java:71)
    at sun.net.www.protocol.jar.JarFileFactory.get(JarFileFactory.java:109)
    at sun.net.www.protocol.jar.JarURLConnection.connect(JarURLConnection.java:122)
    at sun.plugin.net.protocol.jar.CachedJarURLConnection.connect(Unknown Source)
    at sun.plugin.net.protocol.jar.CachedJarURLConnection.getJarFileInternal(Unknown Source)
    at sun.plugin.net.protocol.jar.CachedJarURLConnection.getJarFile(Unknown Source)
    at com.sun.deploy.security.DeployURLClassPath$JarLoader.getJarFile(Unknown Source)
    at com.sun.deploy.security.DeployURLClassPath$JarLoader.access$800(Unknown Source)
    at com.sun.deploy.security.DeployURLClassPath$JarLoader$1.run(Unknown Source)
    at java.security.AccessController.doPrivileged(Native Method)
    at com.sun.deploy.security.DeployURLClassPath$JarLoader.ensureOpen(Unknown Source)
    at com.sun.deploy.security.DeployURLClassPath$JarLoader.<init>(Unknown Source)
    at com.sun.deploy.security.DeployURLClassPath$3.run(Unknown Source)
    at java.security.AccessController.doPrivileged(Native Method)
    at com.sun.deploy.security.DeployURLClassPath.getLoader(Unknown Source)
    at com.sun.deploy.security.DeployURLClassPath.getLoader(Unknown Source)
    at com.sun.deploy.security.DeployURLClassPath.getResource(Unknown Source)
    at sun.plugin2.applet.Plugin2ClassLoader$2.run(Unknown Source)
    at sun.plugin2.applet.Plugin2ClassLoader$2.run(Unknown Source)
    at java.security.AccessController.doPrivileged(Native Method)
    at sun.plugin2.applet.Plugin2ClassLoader.findClassHelper(Unknown Source)
    at sun.plugin2.applet.Applet2ClassLoader.findClass(Unknown Source)
    at sun.plugin2.applet.Plugin2ClassLoader.loadClass0(Unknown Source)
    at sun.plugin2.applet.Plugin2ClassLoader.loadClass(Unknown Source)
    at sun.plugin2.applet.Plugin2ClassLoader.loadClass(Unknown Source)
    at java.lang.ClassLoader.loadClass(ClassLoader.java:357)
    at sun.plugin2.applet.Plugin2ClassLoader.loadCode(Unknown Source)
    at sun.plugin2.applet.Plugin2Manager.initAppletAdapter(Unknown Source)
    at sun.plugin2.applet.Plugin2Manager$AppletExecutionRunnable.run(Unknown Source)
    at java.lang.Thread.run(Thread.java:748)

I think Firefox doesn't import properly client certificate from the smartcard.
Edit : there is also two other interesting lines in Java console :
security: Accessing keys and certificate in Mozilla user profile: null
security: JSS is not configured

By increasing debug mode (-Djavax.net.debug=all), I see :

Internet Explorer :
*** ServerHelloDone

[read] MD5 and SHA1 hashes:  len = 4
0000: 0E 00 00 00                                        ....
ssl: KeyMgr: getting aliases: [XXXXXXX (verified: OK), YYYYYYYYYYYYYY]
ssl: Ignoring alias XXXXXXX (1): key algorithm does not match
ssl: Ignoring alias XXXXXXX: key algorithm does not match
ssl: Ignoring alias XXXXXXX (2): key algorithm does not match
ssl: KeyMgr: no matching alias found
ssl: Ignoring alias XXXXXXX (1): key algorithm does not match
ssl: Ignoring alias XXXXXXX: key algorithm does not match
ssl: Ignoring alias XXXXXXX (2): key algorithm does not match
ssl: KeyMgr: no matching alias found
*** Certificate chain
chain [0] = [
...

Mozilla Firefox :
*** ServerHelloDone
[read] MD5 and SHA1 hashes:  len = 4
0000: 0E 00 00 00                                        ....
Warning: no suitable certificate found - continuing without client authentication
*** Certificate chain
<Empty>
***


I tried/checked a lot of things :

Checking if IAS_PKCS11 module is correctly installed on Firefox :



Tried to disableplugins.click_to_play (https://support.mozilla.org/fr/questions/933135)
Checked parameters order in <applet> (ClassNotFoundException in Java Applet using <object> tag)
Cleared cache, added JRE arguments, JRE reinstallation ... (https://support.mozilla.org/fr/questions/945083)
Enabled security.enterprise_roots.enabled (https://support.umbrella.com/hc/en-us/articles/115000669728-Configuring-Firefox-to-use-the-Windows-Certificate-Store)
Used <embed> or  <object> instead of  <applet>.
Tried a lot every combination in Advanced Security Parameter in Java Configuration
Disabled some Security Checks (CRL, etc.).
Edit : according to JDK-6975851, JSS doc, NSS versions, I have built JSS_4_4_20170313 based on NSS 3.28.3 and NSPR 4.13.1 with VS2019 + Windows Kit 10 tools and libs, Java 8. I have installed DLL files (jss4.dll, libplc4.dll, libnspr4.dll, libplds4.dll) in Mozilla Firefox directory and jss4.jar in jre_path/lib/ext directory. Without success after all those efforts ... :(

I really need help.
Any idea?
(I cannot switch applet to another thing - I do not have this choice)
","It looks as if the problem is with your webserver providing the https.
A random google throws up the Mozilla Security Blog. SHA-1 is disabled by default in the version of Firefox that you are using (52). MD5 is a worse hashing algorithm that SHA-1.
So presumably you should at least update the webserver. If you are desperate to keep using software that should have been binned, then I guess you there may still be a configuration option in Firefox, or use version 51, but I really wouldn't recommend it.
","105","<java><ssl><firefox><applet><pkcs#11>","5","0","1","2019-04-16 14:20:30","","3","1","7529228","","2019-04-16 14:20:30","2019-04-12 09:21:03",""
"50346314","PKCS#11 C_Encrypt fails with Bad Arguments for 128 bit AES key","I generate a 128-bit AES object using ""C_CreateObject"". 
I then do the following to encrypt a piece of data and get a ""Bad Argumnents"" error on the call to ""C_Encrypt"" to get the encrypted data length. 
char clear[] = ""My name is Eric!"";
buf_len = sizeof(clear) -1;

rv = pfunc11->C_EncryptInit(session, pMechanism, hObject);

if (rv != CKR_OK)    
{
    printf(""ERROR: rv=0x%08X: initializing encryption:\n"", (unsigned int)rv);
    return false;
}


rv = pfunc11->C_Encrypt(session, (CK_BYTE_PTR)clear, (CK_ULONG)buf_len, NULL, pulEncryptedDataLen);
if (rv != CKR_OK) 
{                                   
    printf(""ERROR: rv=0x%08X: derror getting encryption data buffer length:\n"", (unsigned int)rv);
    return false;
}

What am I doing wrong here ?
Here is my mechanism definition - 
CK_MECHANISM myMechanism = {CKM_AES_CBC_PAD, (CK_VOID_PTR)""01020304050607081122334455667788"", (CK_ULONG)16};
CK_MECHANISM_PTR pMechanism = &myMechanism;

","Your pulEncryptedDataLen is probably NULL which causes CKR_ARGUMENTS_BAD.
It is better to use e.g.:
CK_ULONG ulEncryptedDataLen;
...
rv = pfunc11->C_Encrypt(session, (CK_BYTE_PTR)clear, (CK_ULONG)buf_len, NULL, &ulEncryptedDataLen);

The number of bytes sufficient to store encryption result of a single-part encryption gets stored into ulEncryptedDataLen.
Also please note that your way of passing IV value is not correct as ""01020304050607081122334455667788"" results in an ASCII string (giving IV as 30313032303330343035303630373038 -- which is probably not what you want).
To get correct IV use ""\x01\x02\x03\x04\x05\x06\x07\x08\x11\x22\x33\x44\x55\x66\x77\x88"" instead.
Good luck!
","103","<pkcs#11>","0","0","1","2018-05-16 13:22:19","","1","","5128464","","2018-05-16 13:22:19","2018-05-15 09:08:24",""
"49423938","PBKDF2 key generation using pkcs11interop, c#, windows visual studio 2010","How to make attribute template for PBKDF2 key generation in pkcs11interop.
Below is my trial code :
byte[] randomSalt = session.GenerateRandom(20);

objectAttributes.Add(new ObjectAttribute(CKA.CKA_CLASS, CKZ.CKZ_SALT_SPECIFIED));    
objectAttributes.Add(new ObjectAttribute(CKA.CKA_VALUE, randomSalt));    
objectAttributes.Add(new ObjectAttribute(CKA.CKA_CLASS, 1000));
objectAttributes.Add(new ObjectAttribute(CKA.CKA_CLASS, 0x00000004));    
objectAttributes.Add(new ObjectAttribute(CKA.CKA_VALUE, new byte[] { }));    
objectAttributes.Add(new ObjectAttribute(CKA.CKA_VALUE, Encoding.UTF8.GetBytes(""password"")));

Mechanism mechanism = new Mechanism(CKM.CKM_PKCS5_PBKD2);
objectHandle objectHandle = session.GenerateKey(mechanism, objectAttributes);
With this I am getting CKR_MECHANISM_INVALID exception
","The first problem is that you are trying to provide parameters to CKM_PKCS5_PBKD2 mechanism via list of ObjectAttribute-s instead of CkPkcs5Pbkd2Params class instance. For more information take a look at chapter 12.26.9 of PKCS#11 v2.20 specification.
The second problem is that your unmanaged PKCS#11 library most likely does not support CKM_PKCS5_PBKD2 mechanism at all because by returning CKR_MECHANISM_INVALID error your unmanaged PKCS#11 library is telling you that ""An invalid mechanism was specified to the cryptographic operation"". You can use GetMechanismInfo() method to check whether the mechanism is supported:
if (!slot.GetMechanismList().Contains(CKM.CKM_PKCS5_PBKD2))
    throw new Exception(""Unmanaged PKCS#11 library does not support CKM_PKCS5_PBKD2 mechanism"");

","101","<c#><windows><visual-studio-2010><pkcs#11><pkcs11interop>","1","1","1","2018-03-22 23:10:08","49439883","0","","7720696","","2018-03-22 10:14:32","2018-03-22 08:37:05",""
"20474902","How do you change from software to token client authentication?","Hello and thanks for taking time to view my post.
I have a Client-Server suite with J2EE Applications on the server side and nothing but a browser (IE or Firefox) on the client side.  Currently I use x509 (PKCS#12) software certificates on the client for two-way authentication.
The server certificates are expiring at the end of the month, so I requested new certificates and received quite a surprise.  The new server certificate chain didn't match any part of my client certificates and are not interoperable.  After an in depth conversation with the Local Registration Authority (LRA) I found out that the network that these servers and the clients reside on are migrating away from software certificates and towards a hardware token (smart card).
I've spent the past few days scouring the web trying to figure out what it is that I need to do to change from PKCS#12 software certs to PKCS#11 token certs.  I have found a lot of information... actually too much information.  And that is my problem.
Pretty much all the information that I've found talks about the Common Access Card (CAC), and the token that I'll be using is very similar... but I haven't found any information that tells me how to make the client web browser prompt the user for a smart card instead of a software certificate.  I'm using WebLogic 12c servers and the server configuration is the same, regardless of what flavor of certificate I'm using.
I'm starting to suspect that it's the browser that makes the call as to what certificates to prompt for based upon certificates that it has 'seen' before.  I use my CAC to log onto several sites, but have never been prompted to use my CAC to log into my development servers.  The browsers only show me certificates that are compatible with the server certificate chain.
Is it possible that switching from software certificates to a smart card for client authentication is as simple as getting server certificates that are signed by the same Certificate Authority as the smart card?
This isn't something that I can just try... the process that I'd have to go through in order to get a server certificate signed by the same CA as my CAC is complex and I'd have to justify it.  It can be done, just not easily and I'm hoping for more information before I go that route.
Thanks in advance for any information you can provide.
v/r
Ace
","I decided to go ahead and climb the mountain of red tape and requested and received test server certificates, tokens, readers, token reader middleware, etc...
To answer my own question:  Yes, the act of changing out the server's certificate with one that contains a certificate signed by the same certificate authority chain causes the browser to prompt you for the token.
Note: You'll also need to install and configure whatever middleware that you need for the token reader... but you probably already knew that.  :)
-Ace
","101","<java-ee><ssl-certificate><pkcs#12><pkcs#11>","0","0","1","2013-12-17 19:01:44","20642481","0","","","","","2013-12-09 15:57:59",""
"48061087","PKCS 11 returns a wrong token info for my chip cards","I have two smart card readers connected to my computer and each has a card plugged in. Using the PKCS 11 API I want to find out if the user PIN of the smarts cards is locked. According to the API documentation we must retrieve an object of the struct CK_TOKEN_INFO which contains the flags field. There, the bit flag CKF_SO_PIN_LOCKED is set if the PIN is locked.
My problem is that the flags field does not change if I have a locked smart card and an unlocked one. I know that one of my two chip cards has a locked user PIN. I entered a wrong PIN 6 times and a program that we use to write on the smart cards tells me that the PIN is indeed locked. However the flags field is the same for both cards.
Here is a minimal program which demonstrates the issue:
  #include <iostream>
  #include <vector>
  #include ""cm-pkcs11.h""

  unsigned long slotCount = 0ul;
  CK_RV result;

  std::vector<CK_SLOT_ID> vecSlotIds;

  int main() {

    result = C_Initialize(nullptr);

    result = C_GetSlotList(CK_TRUE, nullptr, &slotCount);

    std::cout << ""Found "" << slotCount << "" slots"" << std::endl;

    vecSlotIds.resize(slotCount);
    result = C_GetSlotList(CK_TRUE, vecSlotIds.data(), &slotCount);

    for (const auto& id : vecSlotIds) {
      CK_TOKEN_INFO tokenInfo = {};
      result = C_GetTokenInfo(id, &tokenInfo);
      std::cout << ""id: "" << id << "", flags: "" << tokenInfo.flags << std::endl;
    }

    return 0;
  }

The output is:
Found 2 slots
id: 1, flags: 1037
id: 2, flags: 1037
As you can see, both flags are identical. Do I use the API incorrect here?
","I've tried the tool jariq mentioned in his comment and it seems the API implementation that we use has indeed a bug. You can see it in the image below. It says for both cards that they are not locked. But one of them is locked.
Thank you jariq.

","97","<smartcard><pkcs#11>","2","1","1","2018-01-02 15:44:51","","1","0","","","","2018-01-02 12:32:07",""
"44833879","Which one should I use: session vs _session in Pkcs11interop","I am facing the same issue as the owner of this thread:
Threadsafe usage of PKCS11Interop library in C#
Here you have provided a solution and given a link of https://github.com/jariq/Pkcs11Interop.PDF/blob/1.3.0/src/Pkcs11Interop.PDF/Pkcs11RsaSignature.cs
I have a small confusion, in this class I have seen many occurrences where you are using  
using (Session session = _slot.OpenSession(true))

statement. However inside it, you are using the predefined variable _session, you are not using this session. 
But in the Sign method you are using this session instead of _session.
Please help, in which cases I should use session and _session.
","Thanks for spotting this. Local variable session should always be preferred. Field _session should be used only to keep the login state. I've fixed the code in commit 179003b and fixed class is available in master branch.
","94","<c#><pkcs#11><hsm><pkcs11interop>","1","1","1","2017-06-29 22:29:00","44835929","0","","3325704","","2017-06-29 22:23:12","2017-06-29 19:55:08",""
"42543646","why is thrown this exception: cannot create signer: no such algorithm: SHA256WITHRSA for provider SunPKCS11?","This exception was thrown when i was trying to sign with a PKCS11. I tried changing the case of letters thinking that it could be the problem but it wasn´t.
","The real cause of this problem doesn´t correspond to the message of the exception in my case, in wich i then realized that it was just that the PKCS11 token was disconnected. If some day this happens to you, make sure to have a token connected. When you remove the token and try to sign, it throws the exception: Token was removed, but when you repeat the proccess that is the exception it throws.
I hope this help someone like me!
","94","<java><bouncycastle><sign><pkcs#11>","1","1","1","2017-03-01 22:55:55","","0","","","","","2017-03-01 22:51:46",""
"51518136","Will the Pkcs11Interop Cryptoki application, which is registered as HSM client to more than one HSMs) detects and sends requests to active HSM","We are using Pkcs11Interop API in our application to sign digest using the private keys stored in Thales nShield HSM.
To cater the DR Scenarios, our digital signatures application hosted server is enrolled as HSM client to both Primary Thales nShield HSM and DR(Secondary) Thales nShield HSM. Here, the IP Addresses for the both Thales nShield HSMs are different based on the assumption that the secure world software installed will detect the active HSM before creating HSM connection.
While we are testing the DR(fail-over) scenario by switching off the Primary Thales nShield HSM, the Pkcs11Interop is giving error:

Method C_Initialize returned CKR_FUNCTION_FAILED.

I would like to know whether the code written using Pkcs11Interop should check which HSM is active then send requests to active HSM OR the secure world software installed on the server should check the active HSM before opening active connection.
Please advise us the right direction to handle this scenario.
","
I would like to know whether the code written using Pkcs11Interop should check which HSM is active then send requests to active HSM OR the secure world software installed on the server should check the active HSM before opening active connection

IMO you should first ask Thales support whether their PKCS#11 library can perform automatic failover. If their answer is yes then you don't need to add any failover related code into your application.
","93","<c#><pkcs#11><pkcs11interop><nshield>","0","2","1","2018-08-01 21:08:12","51642285","1","1","5859957","","2018-07-26 02:33:27","2018-07-25 11:47:53",""
"51890546","PKCS Luna Support in new AWS Cloud HSM","We are planning to migrate from Classic HSM to New Cloud HSM offered by AWS. Does the New HSM also Support PKCS#11 luna libraries. What are the alternatives possible if it doesn't ?
","","92","<amazon-web-services><pkcs#11><hsm>","1","","0","2018-08-17 07:40:57","","3","","","","","2018-08-17 07:40:57",""
"45591468","etoken unaccessible after reading","I´m trying to read out the certificate of an etoken. I´ve followed the answer from Keystore from digital signature e-token using java. It´s giving me the certificates installed in the token but after that the token isn´t reachable anymore. Did somebody got something similar while accessing a token?
// Create instance of SunPKCS11 provider 
String pkcs11Config = ""name=eToken\nlibrary=C:\\path\\to\\your\\pkcs11.dll""; 
java.io.ByteArrayInputStream pkcs11ConfigStream = new java.io.ByteArrayInputStream(pkcs11Config.getBytes()); 
sun.security.pkcs11.SunPKCS11 providerPKCS11 = new sun.security.pkcs11.SunPKCS11(pkcs11ConfigStream); 
java.security.Security.addProvider(providerPKCS11);  // Get provider KeyStore and login with PIN String pin = ""11111111""; 
java.security.KeyStore keyStore = java.security.KeyStore.getInstance(""PKCS11"", providerPKCS11); 
keyStore.load(null, pin.toCharArray());  // Enumerate items (certificates and private keys) in the KeyStore 
java.util.Enumeration<String> aliases = keyStore.aliases(); 
while (aliases.hasMoreElements()) {
    String alias = aliases.nextElement();
    System.out.println(alias); 
}

The problem persists, after plugging out/in the token is reachable again, but after running the code, the token seems to be locked again. OS Win2k8 Server. 
","Finally got this clear. After disconnecting other USB devices the Token responds as usual.
The Token should be plugged in to a fully powered port. Best on a separate Host- Bus.
","92","<java><pkcs#11><e-token>","-2","0","1","2017-08-15 22:55:05","45702708","9","1","8321791","","2017-08-11 06:28:01","2017-08-09 13:02:14",""
"27426234","Decrypt bytestream with Smartcard in Windows","i created some encrypted bytestreams (files) with C# and BouncyCastle API. 
To be precise i created some CMSEnveloped data and stored that data on disk as bytestream.
Everything works as intended. SO far so good. 
Now i want to use the private key stored on a siemens smartcard to decrypt some files.
For Encryption i can use the certificate stored in the domain information of that user.
But for decryption i have to use the smartcard somehow.
At the moment i can only think of using Siemens HiPath Developer API to access the private key via PKCS#11. But i have a feeling that there is a possibility to access the key via built-in windows certification store like outlook does with encrypted mail since this is basically also CMSenvelop / SMIME.
Any thoughts?
","","91","<c#><encryption><smartcard><pkcs#11>","0","","0","2014-12-11 15:21:10","","2","0","","","","2014-12-11 15:21:10",""
"32568348","'error: ‘CKM_AES_CTR’ undeclared' while compiling libreswan-3.15","I am getting compilation error while compiling libreswan-3.15 source code.
make[3]: Entering directory /root/libreswan-3.15/OBJ.linux.i386/programs/pluto'
cc   -g -O2 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector-all -fno-strict-aliasing -fPIE -DPIE -DFORCE_PR_ASSERT -DDNSSEC -DFIPS_CHECK -DFIPSPRODUCTCHECK=\""/etc/system-fips\"" -DKLIPS -DLIBCURL -DUSE_LINUX_AUDIT -DUSE_MD5 -DHAVE_NM -DUSE_SHA2 -DUSE_SHA1 -DFIPSPRODUCTCHECK=\""/etc/system-fips\"" -DIPSEC_CONF=\""/etc/ipsec.conf\"" -DIPSEC_CONFDDIR=\""/etc/ipsec.d\"" -DIPSEC_NSSDIR=\""/etc/ipsec.d\"" -DIPSEC_CONFDIR=\""/etc\"" -DIPSEC_EXECDIR=\""/usr/local/libexec/ipsec\"" -DIPSEC_SBINDIR=\""/usr/local/sbin\"" -DIPSEC_VARDIR=\""/var\"" -DPOLICYGROUPSDIR=\""/etc/ipsec.d/policies\"" -DSHARED_SECRETS_FILE=\""/etc/ipsec.secrets\"" -DGCC_LINT -DALLOW_MICROSOFT_BAD_PROPOSAL  -Wall -Wextra -Wformat -Wformat-nonliteral -Wformat-security -Wundef -Wmissing-declarations -Wredundant-decls -Wnested-externs -I/root/libreswan-3.15/ports/linux/include -I/root/libreswan-3.15/ports/linux/include -I/root/libreswan-3.15/ports/linux/include -I/root/libreswan-3.15/ports/linux/include  -I/root/libreswan-3.15/programs/pluto/linux26 -I/root/libreswan-3.15/include -I/root/libreswan-3.15/lib/libcrypto -I/root/libreswan-3.15/linux/include   -DUSE_KEYRR   -DNETKEY_SUPPORT -DKERNEL26_HAS_KAME_DUPLICATES -DPFKEY  -DUSE_TWOFISH -DUSE_SERPENT -DKLIPS -DPFKEY    -DUSE_AES -DUSE_3DES -DUSE_SHA2 -DUSE_SHA1 -DUSE_MD5 -DUSE_CAMELLIA   -DXAUTH_HAVE_PAM -DLIBCURL    -DFIPS_CHECK -DHAVE_LIBCAP_NG -DHAVE_NM -I/usr/include/nss3 -I/usr/include/nspr4     \
                -MMD -MF ./ctr_test_vectors.d \
                -o ./ctr_test_vectors.o \
                -c /root/libreswan-3.15/programs/pluto/ctr_test_vectors.c
/root/libreswan-3.15/programs/pluto/ctr_test_vectors.c: In function ‘test_aes_ctr’:
/root/libreswan-3.15/programs/pluto/ctr_test_vectors.c:243: error: ‘CKM_AES_CTR’ undeclared (first use in this function)
/root/libreswan-3.15/programs/pluto/ctr_test_vectors.c:243: error: (Each undeclared identifier is reported only once
/root/libreswan-3.15/programs/pluto/ctr_test_vectors.c:243: error: for each function it appears in.)
make[3]: *** [ctr_test_vectors.o] Error 1
make[3]: Leaving directory/root/libreswan-3.15/OBJ.linux.i386/programs/pluto'
make[2]: * [local-base] Error 2
make[2]: Leaving directory /root/libreswan-3.15/programs/pluto'
make[1]: *** [all] Error 2
make[1]: Leaving directory/root/libreswan-3.15/programs'
make: * [all] Error 2
Tried searching on internet but did not find the solution. Please provide some pointers so that I can fix this issue.
","On my system the CKM_AES_CTR mechanism is declared in file /usr/include/nss/pkcs11t.h (which is included in the affected source file via pk11pub.h).
Check yours file /usr/include/nss3/pkcs11t.h (as your libnss might be outdated).
(I was unable to find which libnss version is required to build libreswan in their documentation)
","88","<linux><pkcs#11><ipsec><l2tp>","0","0","1","2015-09-15 19:54:10","","0","1","","","","2015-09-14 15:17:27",""
"34451237","ScardTransmit Blocks in OS X El Capitan 10.11","I have developed a PKCS#11 library and working fine in OS-X 10.10.5 Yosemite, but when I am loading the same library in OS-X El Capitan 10.11 it's getting blocked at ScardTransmit function. 
I have tried with both protocols ( SCARD_PCI_T0 and SCARD_PCI_T1 ) but it's always blocking. I am sending proper APDU commands to the card as well.  
Do we have any issues with ScardTransmit API in this particular (Capitan 10.11) Mac version?
","","88","<macos><smartcard><pkcs#11>","1","","0","2017-09-09 18:06:12","","2","3","1033581","","2017-09-09 18:06:12","2015-12-24 10:22:05",""
"54266459","Wrapping/Unwrapping private keys with CNG","PKCS #11 Defines a procedure for wrapping/unwrapping of private keys using symmetric keys PKCS #11 v2.20 (Section 12.6). The unwrapping procedure simply reverses the wrapping procedure; so there is a C_UnwrapKey function to complement C_WrapKey.
I was wondering if there is a similar procedure with CNG (or CAPI; but i prefer CNG). Importing PKCS#8 encrypted key to RSACng is the best i found to describe the capabilities of CNG with regard to accepting PKCS#8 encrypted private keys (to unwrap them). However, there it mentions only PKCS#8 keys that were encrypted using a password - i know Microsoft did this in order to be compatible with PKCS#12 to support PFX files, yet i want to be able to decrypt an encrypted PKCS#8 private key using an existing key in the CNG provider (i.e. to unwrap the key) just as described in PKCS#11.
Can anybody confirm whether such a capability exists anywhere within CNG and if it exists, then i would appreciate any directions.
","","88","<winapi><pkcs#11><cng>","2","","0","2019-01-19 11:11:09","","0","1","","","","2019-01-19 11:11:09",""
"54396640","Anyway to integrate with aws classic cloudHSM instead of java code","My app is running in a C# application and integrate with the aws classic HSM via Safenet-based and LunaAPI. The purpose is to retrieve private key from HSM and sign it into pdf document using itextsharp.
Because of the cumbersome on HSM integration at that time, we did choose Java for that part and create a .jar module which will be called inside C# application. 
Now, it's showing some bottleneck and I would prefer to move all of them to C# code where it can be easier to manage and develop. 
I've been researched and find some opensource like PKCS11Interop, but I dont find any clue to start with.
public class LunaClient extends CertificateProvider {
    private static LunaSlotManager sm = null;
public LunaClient(){}


private void loginHSM() throws Exception {
    // Login to HSM

    sm = LunaSlotManager.getInstance();
    // Login to slot #1
    sm.login(1, Property.Luna.CloudHSMPwd); 
}



@Override
public Certificate[] getCertificates() throws Exception {
    LunaCertificateX509[] CertChain = new LunaCertificateX509[3];

    loginHSM();

    // get LunaCertificateX509
    CertChain[0] = LunaCertificateX509.LocateCertByAlias(Property.Luna.DigicertAlias0);
    CertChain[1] = LunaCertificateX509.LocateCertByAlias(Property.Luna.DigicertAlias1);
    CertChain[2] = LunaCertificateX509.LocateCertByAlias(Property.Luna.DigicertAlias2);

    // return LunaCertificateX509
    return (Certificate[])CertChain;
}


@Override
public PrivateKey getPrivateKey() throws Exception {
    loginHSM();

    // Dynamically load security providers
    Class<?> providerClass = Class.forName(""com.safenetinc.luna.provider.LunaProvider"");
    java.security.Provider provider = (java.security.Provider) providerClass.newInstance();
    java.security.Security.removeProvider(provider.getName());
    java.security.Security.insertProviderAt(provider, 2);
    providerClass = Class.forName(""com.safenetinc.luna.provider.LunaProvider"");
    provider = (java.security.Provider) providerClass.newInstance();
    java.security.Security.removeProvider(provider.getName());
    java.security.Security.insertProviderAt(provider, 3);

    // This syntax gets an instance of a LunaKeystore
    KeyStore ks = KeyStore.getInstance(""Luna"");
    ks.load(null, null);

    providerName = provider.getName();

    return (PrivateKey) ks.getKey(Property.Luna.DigicertPrivateKeyalias, Property.Luna.CloudHSMPwd.toCharArray());
}

@Override
public void close() {
    sm.logout();
}

}
","","84","<java><c#><amazon-web-services><pkcs#11><hsm>","0","","0","2019-01-28 06:34:20","","0","1","","","","2019-01-28 06:34:20",""
"57403255","PKCS11_MODULE path to a file","I am working on a test program using the Nitrokey HSM:
import pkcs11

lib = pkcs11.lib(os.environ['PKCS11_MODULE'])
token = lib.get_token(token_label='smartcard')
    with token.open() as session:

print(session)

Question: what can be the pkcs11 library file name? I guessed opensc-hsm.so, and defined PKCS11_MODULE to that path, but was not successful.
So, what can be the name of a pkcs11 library to be loaded?
Thanks
","At least the Nitrokey Pro can be used with opensc-pkcs11.so.
","77","<python><pkcs#11><nitrokey>","1","0","2","2019-08-12 11:12:14","","0","","1039462","","2019-08-09 17:19:34","2019-08-07 23:05:58",""
"57403255","PKCS11_MODULE path to a file","I am working on a test program using the Nitrokey HSM:
import pkcs11

lib = pkcs11.lib(os.environ['PKCS11_MODULE'])
token = lib.get_token(token_label='smartcard')
    with token.open() as session:

print(session)

Question: what can be the pkcs11 library file name? I guessed opensc-hsm.so, and defined PKCS11_MODULE to that path, but was not successful.
So, what can be the name of a pkcs11 library to be loaded?
Thanks
","According to this pkcs11 page on Nitrokey HSM, the standard OpenSC module can be used:

The OpenSC PKCS #11 module is opensc-pkcs11.so.

Alternative is to use the HSM smart card vendor's module libsc-hsm-pkcs11.so:

Code: https://github.com/CardContact/sc-hsm-embedded
Documentation: https://github.com/CardContact/sc-hsm-embedded/wiki/PKCS11

For more information please look at these:

https://github.com/OpenSC/OpenSC/wiki/SmartCardHSM
https://www.smartcard-hsm.com/opensource.html
https://www.smartcard-hsm.com/support.html

","77","<python><pkcs#11><nitrokey>","1","2","2","2019-08-12 11:12:14","","0","","1039462","","2019-08-09 17:19:34","2019-08-07 23:05:58",""
"57982297","PKCS11 deriveKey returning different values every time","I have a master key and want to diversify/derive it into other keys (inside an HSM). After following this answer I have this code: 
final java.security.Key key = token.getKeyStore().getKey(baseKeyAlias, null);
iaik.pkcs.pkcs11.objects.Key baseKey = ((iaik.pkcs.pkcs11.provider.keys.IAIKPKCS11SecretKey) key).getKeyObject();

DESSecretKey derived3DESKeyTemplate = new DESSecretKey();
SecretKey derivedKeyTemplate = derived3DESKeyTemplate;
derivedKeyTemplate.getLabel().setCharArrayValue(derivedKeyAlias.toCharArray());
derivedKeyTemplate.getId().setByteArrayValue(derivedKeyAlias.getBytes());
derivedKeyTemplate.getToken().setBooleanValue(Boolean.TRUE);
derivedKeyTemplate.getKeyType().setLongValue(PKCS11Constants.CKK_DES2);
derivedKeyTemplate.getEncrypt().setBooleanValue(Boolean.TRUE);
derivedKeyTemplate.getDecrypt().setBooleanValue(Boolean.TRUE);
derivedKeyTemplate.getWrap().setBooleanValue(Boolean.TRUE);
derivedKeyTemplate.getUnwrap().setBooleanValue(Boolean.TRUE);
derivedKeyTemplate.getDerive().setBooleanValue(Boolean.TRUE);
derivedKeyTemplate.getExtractable().setBooleanValue(Boolean.TRUE);
derivedKeyTemplate.getPrivate().setBooleanValue(Boolean.FALSE);
derivedKeyTemplate.getSign().setBooleanValue(Boolean.TRUE);

byte[] derivationData = DatatypeConverter.parseHexBinary(""45525448555200749916"");
KeyDerivationStringDataParameters param = new KeyDerivationStringDataParameters(derivationData);
Mechanism mechanism = new Mechanism(PKCS11Constants.CKM_DES3_ECB);
mechanism.setParameters(param);
final Key deriveKey = session.deriveKey(mechanism, baseKey, derivedKeyTemplate);
System.out.println(""deriveKey successful!"");        

As you can see I am using a PKCS#11 wrapper (IAIK). The problem is the derivation generating different keys with the same derivation data. Is this an expected behaviour? 
I think the derived keys are different each time because I am encrypting a known value with this key and the results are different every time:
byte[] data = DatatypeConverter.parseHexBinary(""01020304050607080C7D8B973D588B478000000000000000"");
Mechanism m = new Mechanism(PKCS11Constants.CKM_DES3_ECB);
session.encryptInit(m, deriveKey);
byte[] bytes;
bytes = session.encrypt(data);
System.out.println(DatatypeConverter.printHexBinary(bytes));

first run of key derivation and value encription
deriveKey successful!
encrypt using deriveKey: 7C4BB979F26FC78831CC83AB378E7B1D8E2F2D73B140D25D

second run of key derivation and value encription
deriveKey successful!
encrypt using deriveKey: F1CE8649333EA10E63B13DB3733CD55FFB010A63C6CEC7F2

third run of key derivation and value encription
deriveKey successful!
encrypt using deriveKey: A8D801BC1C0142B9E77576AEA0FBE677915E47144B6DCF3C

As far as I know the derivation is the encryption of data (derivation data) with a base key. This encrypted value is then converted to another key (derived key) and thus this value should be the same if the derivation data and base key are the same, this answer explain this steps.
","You should be using CKM_DES3_ECB_ENCRYPT_DATA instead of CKM_DES3_ECB.
It is strange that you are not getting an error as CKM_DES3_ECB should not be allowed for key derivation (see table 68 in PKCS#11 v2.40).
Your presumptions are correct -- this key derivation algorithm must give the same key for the same derivation data (and master key).
Good luck with your project!

Just a note: Your example derivation data seem to have a fixed structure. This way (using DES in ECB mode) the third part of resulting DES key would be always the same (i.e. encryption of 8000000000000000). You might want to hash the derivation data (e.g. with SHA-256) before it is used for key derivation. Or completely re-consider this algorithm.
Disclaimer: I am no crypto expert so please do validate my thoughts.
","75","<encryption><smartcard><pkcs#11><hsm><cryptoki>","2","0","1","2019-09-24 21:54:27","","0","1","","","","2019-09-17 21:29:54",""
"56394825","How to fix ""Reconnect SunPKCS11 After connection timeout with Token has been removed""","I've problem about reconnect to SUNPKCS11 after connect was timeout and I want to reconnect to SUNPKCS11 again.
I use this Code for connect to SUNPKCS11 in first time.
public void getConnection(String name, String slot, String lib, String type, String password) throws Exception {
    if (type.contains(""PKCS11"")) {
        StringBuilder cfg = new StringBuilder();
        cfg.append(""name="" + name);
        cfg.append(System.getProperty(""line.separator""));
        cfg.append(""slot="" + slot);
        cfg.append(System.getProperty(""line.separator""));
        cfg.append(""library="" + lib);
        cfg.append(System.getProperty(""line.separator""));
        cfg.append(""disabledMechanisms = {"");
        cfg.append(System.getProperty(""line.separator""));
        cfg.append(""CKM_SHA1_RSA_PKCS"");
        cfg.append(System.getProperty(""line.separator""));
        cfg.append(""}"");
        InputStream isCfg = new ByteArrayInputStream(cfg.toString().getBytes());
        //Provider p = new SunPKCS11(isCfg);
        p = new SunPKCS11(isCfg);
        p.setProperty(""pkcs11LibraryPath"", lib);
        Security.addProvider(p);
        keyStore = KeyStore.getInstance(type, p);
        keyStore.load(null, password.toCharArray());


        providerName = p.getName();
        authProvider = (AuthProvider) keyStore.getProvider();
        //String alias = keyStore.aliases().nextElement();
        alias = keyStore.aliases().nextElement();
        privateKey = (PrivateKey) keyStore.getKey(alias, password.toCharArray());
        certificateChain = keyStore.getCertificateChain(alias);
        certificate = keyStore.getCertificate(alias);
        keyStorePrivateKeyEntry = (KeyStore.PrivateKeyEntry) keyStore.getEntry(alias,
                new KeyStore.PasswordProtection(password.toCharArray()));
        x509Certificate = (X509Certificate) keyStorePrivateKeyEntry.getCertificate();
    } else {
        throw new Exception(""PK Type Not support"");
    }
}

And it's timeout in 1 hour. So I create method reconnect for use reconnect to SUNPCKS11
public void reconnect() throws Exception {
    try {


        final String name = etaxProperties.getCs11_provider_name();
        final String library = etaxProperties.getCs11_lib_path();
        final String slot = etaxProperties.getCs11_slot_id();

        // SUN PKCS#11 Provider -------------------------------------------

        StringBuilder builder = new StringBuilder();
        builder.append(""name="" + name);
        builder.append(System.getProperty(""line.separator""));
        builder.append(""library=\"""" + library + ""\"""");
        builder.append(System.getProperty(""line.separator""));
        builder.append(""slot="" + slot);

        ByteArrayInputStream bais = new ByteArrayInputStream(builder.toString().getBytes());
        Provider provider = new sun.security.pkcs11.SunPKCS11(bais);
        provider.setProperty(""pkcs11LibraryPath"", library);
        Security.addProvider(provider);

        KeyStore ks = KeyStore.getInstance(""PKCS11"");
        ks.load(null, etaxProperties.getCs11_password().toCharArray());

        Enumeration<String> aliases = ks.aliases();
        while (aliases.hasMoreElements())
            System.out.println(aliases.nextElement());

        // ====================================
        // Solved it using the SUN PKCS#11 Wrapper

        PKCS11 pkcs11 = PKCS11.getInstance(((sun.security.pkcs11.SunPKCS11) provider).getProperty(""pkcs11LibraryPath""), null, null, true);
        pkcs11.C_Finalize(PKCS11Constants.NULL_PTR);

        // ====================================

        // IAIK PKCS#11 Wrapper -------------------------------------------

        Module pkcs11Module = Module.getInstance(library);
        pkcs11Module.initialize(null);

        Slot[] slots = pkcs11Module.getSlotList(true);

        Session session = slots[0].getToken().openSession(true, true, null, null);
        session.login(Session.UserType.USER, """".toCharArray());

        session.logout();
        session.closeSession();

        //slots[0].getToken().closeAllSessions();
        slots[0].getToken();

        pkcs11Module.finalize(null);

        }catch(Exception e){
            log.error(e.getMessage());
        }
    }

But have got a error message: 

java.security.InvalidKeyException: Private keys must be instance of RSAPrivate(Crt)Key or have PKCS#8 encoding""

And

Token was Remove.

","","73","<java><spring-boot><pkcs#11><hsm><sunpkcs11>","1","","0","2019-05-31 13:46:22","","1","","2110683","","2019-05-31 13:46:22","2019-05-31 12:07:05",""
"55098713","How to Update particular Attribute after finding an object. getting error Method C_SetAttributeValue returned CKR_ATTRIBUTE_READ_ONLY","I am trying to update an attribute after finding the object. Have tried out different cases.
My creation code:
using (var pkcs11 = new Pkcs11(@""C:\SoftHSM2\lib\softhsm2.dll"", AppType.SingleThreaded))
{
    var slot = pkcs11.GetSlotList(SlotsType.WithTokenPresent)[0];
    using (var session = slot.OpenSession(SessionType.ReadWrite))
    {
        session.Login(CKU.CKU_USER, ""1111"");
        var objectAttributes = new List<ObjectAttribute>
        {
            new ObjectAttribute(CKA.CKA_CLASS, CKO.CKO_DATA),
            new ObjectAttribute(CKA.CKA_TOKEN, true),
            new ObjectAttribute(CKA.CKA_MODIFIABLE, true),
            new ObjectAttribute(CKA.CKA_APPLICATION, txtTypeofData.Text),
            new ObjectAttribute(CKA.CKA_LABEL,txtMsisdn.Text),
            new ObjectAttribute(CKA.CKA_VALUE, ""Data object content original "" + DateTime.Now)
        };
        var result = session.CreateObject(objectAttributes);
        session.Logout();
    }
}

My modifying code is:
using (Pkcs11 pkcs11 = new Pkcs11(@""C:\SoftHSM2\lib\softhsm2.dll"", AppType.MultiThreaded))
{            
    var slot = pkcs11.GetSlotList(SlotsType.WithTokenPresent)[0];
    using (Session session = slot.OpenSession(SessionType.ReadWrite))
    {
        session.Login(CKU.CKU_USER, ""1111"");
        List<ObjectAttribute> objectAttributes = new List<ObjectAttribute>();
        objectAttributes.Add(new ObjectAttribute(CKA.CKA_CLASS, CKO.CKO_DATA));
        objectAttributes.Add(new ObjectAttribute(CKA.CKA_TOKEN, true));
        objectAttributes.Add(new ObjectAttribute(CKA.CKA_APPLICATION, txtTypeofData.Text));
        objectAttributes.Add(new ObjectAttribute(CKA.CKA_LABEL, txtMsisdn.Text));
        objectAttributes.Add(new ObjectAttribute(CKA.CKA_MODIFIABLE, true));

        var findA = session.FindAllObjects(objectAttributes);
        if(findA != null && findA.Count > 0)
        {
            List<ObjectAttribute> objectAttributesNew = new List<ObjectAttribute>();
            objectAttributesNew.Add(new ObjectAttribute(CKA.CKA_VALUE, ""Data object content two changed "" + DateTime.Now));
            session.SetAttributeValue(findA[0], objectAttributesNew);                        
        }                   
        session.Logout();
    }
}

","Check if CKA_MODIFIABLE is set to TRUE because this attribute indicates whether a Data Object is read-only or not. CKA_MODIFIABLE is by default TRUE and can only be changed by copying the object.
Also, pay attention to this note from the PKCS#11 standard:

attributes which Cryptoki specifies are modifiable may actually not be
  modifiable on some tokens. That is, if a Cryptoki attribute is described as being modifiable, that
  really means only that it is modifiable insofar as the Cryptoki specification is concerned. A
  particular token might not actually support modification of some such attributes.

So, it could be the case that the token is not allowing you to change the attribute and that it's not a problem from your code.
","71","<c#><.net><pkcs#11><pkcs11interop><softhsm>","1","0","2","2019-03-18 21:14:44","55230121","0","","3325704","","2019-03-18 21:14:44","2019-03-11 09:26:58",""
"55098713","How to Update particular Attribute after finding an object. getting error Method C_SetAttributeValue returned CKR_ATTRIBUTE_READ_ONLY","I am trying to update an attribute after finding the object. Have tried out different cases.
My creation code:
using (var pkcs11 = new Pkcs11(@""C:\SoftHSM2\lib\softhsm2.dll"", AppType.SingleThreaded))
{
    var slot = pkcs11.GetSlotList(SlotsType.WithTokenPresent)[0];
    using (var session = slot.OpenSession(SessionType.ReadWrite))
    {
        session.Login(CKU.CKU_USER, ""1111"");
        var objectAttributes = new List<ObjectAttribute>
        {
            new ObjectAttribute(CKA.CKA_CLASS, CKO.CKO_DATA),
            new ObjectAttribute(CKA.CKA_TOKEN, true),
            new ObjectAttribute(CKA.CKA_MODIFIABLE, true),
            new ObjectAttribute(CKA.CKA_APPLICATION, txtTypeofData.Text),
            new ObjectAttribute(CKA.CKA_LABEL,txtMsisdn.Text),
            new ObjectAttribute(CKA.CKA_VALUE, ""Data object content original "" + DateTime.Now)
        };
        var result = session.CreateObject(objectAttributes);
        session.Logout();
    }
}

My modifying code is:
using (Pkcs11 pkcs11 = new Pkcs11(@""C:\SoftHSM2\lib\softhsm2.dll"", AppType.MultiThreaded))
{            
    var slot = pkcs11.GetSlotList(SlotsType.WithTokenPresent)[0];
    using (Session session = slot.OpenSession(SessionType.ReadWrite))
    {
        session.Login(CKU.CKU_USER, ""1111"");
        List<ObjectAttribute> objectAttributes = new List<ObjectAttribute>();
        objectAttributes.Add(new ObjectAttribute(CKA.CKA_CLASS, CKO.CKO_DATA));
        objectAttributes.Add(new ObjectAttribute(CKA.CKA_TOKEN, true));
        objectAttributes.Add(new ObjectAttribute(CKA.CKA_APPLICATION, txtTypeofData.Text));
        objectAttributes.Add(new ObjectAttribute(CKA.CKA_LABEL, txtMsisdn.Text));
        objectAttributes.Add(new ObjectAttribute(CKA.CKA_MODIFIABLE, true));

        var findA = session.FindAllObjects(objectAttributes);
        if(findA != null && findA.Count > 0)
        {
            List<ObjectAttribute> objectAttributesNew = new List<ObjectAttribute>();
            objectAttributesNew.Add(new ObjectAttribute(CKA.CKA_VALUE, ""Data object content two changed "" + DateTime.Now));
            session.SetAttributeValue(findA[0], objectAttributesNew);                        
        }                   
        session.Logout();
    }
}

","The behavior you are observing seems to be specific to SoftHSM implementation. You can find following comment in its source code:
// NOTE: There is no mention in the PKCS#11 v2.40 spec that for a Data
//  Object the CKA_VALUE attribute may be modified after creation!
//  Therefore we assume it is not allowed to change the CKA_VALUE
//  attribute of a Data Object.

","71","<c#><.net><pkcs#11><pkcs11interop><softhsm>","1","2","2","2019-03-18 21:14:44","55230121","0","","3325704","","2019-03-18 21:14:44","2019-03-11 09:26:58",""
"53415183","Maven: Failed to execute goal org.codehaus.mojo:exec-maven-plugin:1.0.1:","I tied to build this  Open-SC Repository: https://github.com/OpenSC/OpenSC-Java/tree/master/pkcs11
but when I do 
mvn clean install

I get that Output:
C:\temp\SC-Java-master\pkcs11>mvn clean install

    [INFO] Scanning for projects...
    [WARNING]
    [WARNING] Some problems were encountered while building the effective model for org.opensc:opensc-PKCS11:jar:0.3.0-svn
    [WARNING] 'build.plugins.plugin.version' for org.apache.maven.plugins:maven-compiler-plugin is missing. @ line 39, column 15
    [WARNING] 'build.plugins.plugin.version' for org.apache.maven.plugins:maven-surefire-plugin is missing. @ line 147, column 15
    [WARNING] 'build.plugins.plugin.version' for org.codehaus.mojo:build-helper-maven-plugin is missing. @ line 125, column 15
    [WARNING] 'build.plugins.plugin.version' for org.apache.maven.plugins:maven-source-plugin is missing. @ line 47, column 15
    [WARNING]
    [WARNING] It is highly recommended to fix these problems because they threaten the stability of your build.
    [WARNING]
    [WARNING] For this reason, future Maven versions might no longer support building such malformed projects.
    [WARNING]
    [INFO]
    [INFO] ----------------------< org.opensc:opensc-PKCS11 >----------------------
    [INFO] Building opensc-PKCS11 0.3.0-svn
    [INFO] --------------------------------[ jar ]---------------------------------
    [INFO]
    [INFO] --- maven-clean-plugin:2.5:clean (default-clean) @ opensc-PKCS11 ---
    [INFO]
    [INFO] --- exec-maven-plugin:1.0.1:exec (exec-jniclean) @ opensc-PKCS11 ---
    [INFO] Der Befehl ""make"" ist entweder falsch geschrieben oder
    [INFO] konnte nicht gefunden werden.
    [INFO] ------------------------------------------------------------------------
    [INFO] BUILD FAILURE
    [INFO] ------------------------------------------------------------------------
    [INFO] Total time:  0.812 s
    [INFO] Finished at: 2018-11-21T15:07:34+01:00
    [INFO] ------------------------------------------------------------------------
    [ERROR] Failed to execute goal org.codehaus.mojo:exec-maven-plugin:1.0.1:exec (exec-jniclean) on project opensc-PKCS11: Result of make distclean execution is: '1'. -> [Help 1]
    [ERROR]
    [ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.
    [ERROR] Re-run Maven using the -X switch to enable full debug logging.
    [ERROR]
    [ERROR] For more information about the errors and possible solutions, please read the following articles:
    [ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoExecutionException

Can anybody help me how to fix that? I really have no idea what this means...
","","70","<java><maven><pkcs#11><opensc>","0","","0","2018-11-21 15:18:21","","0","","","","","2018-11-21 15:18:21",""
"56927756","Is there a way to get signature creation date in signature that was created by pkcs11Interop?","I verify certificate with X509Chain.Build(X509Certificate2) method. If certificate is valid i sign data using Pkcs11Interop library. Any users who are interested can download this signature to verify by themselves. But also they should be able to check validity of certificate.
I'm now writing some test tool that will get all this files and check for validity. But in order to verify certificate i need a signature creation date.
Is it possible to get this date from signature?
For now i store signature creation date in separate field in table. But i realy think that signature contains a creation date. At least i hope so.
I am verifying certificate then if it is ok i use next code to sign some data.
var privateKeys = session.FindAllObjects(SignSettings.PrivateKeyAttributes);

var mechanism = session.Factories.MechanismFactory.Create(CKM.CKM_GOSTR3411);

byte[] hash = session.Digest(mechanism, data);

var signMechanism = session.Factories.MechanismFactory.Create(CKM.CKM_GOSTR3410);

var signature = session.Sign(signMechanism, privateKeys[0], hash);

return signature;

Then i store this signature with signed data in database
In my test signature checker app i use X509Chain to check that certificate is valid.
var chain = X509Chain.Create();
var policy = chain.ChainPolicy;
policy.RevocationMode = X509RevocationMode.Offline;
policy.RevocationFlag = X509RevocationFlag.EndCertificateOnly;
policy.VerificationTime = @signatureDate;
policy.UrlRetrievalTimeout = UrlRetrievalTimeout;

chain.Build(cert);
return chain;

","You are getting plain signature without any extra attributes using regular PKCS#11 calls. 
To embed date of signing into signature you must use PKCS#7 messaging function. 
As far as I remember your previous question you are using ruToken.
Have a look at their own samples of using PKCS#11 extensions in .Net:
byte[] signature = session.PKCS7Sign(SampleData.PKCS7_SignDataBytes,
    certificates[0], privateKeys[0], null, SampleConstants.UseHardwareHash);

Then you can use EnvelopedCms or SignedCms to get signature properties SignerInfo.SignedAttributes one of which is signing time.
","70","<pkcs#11><pkcs11interop>","1","1","1","2019-07-10 12:19:10","","0","2","10493018","","2019-07-08 02:42:24","2019-07-08 02:37:02",""
"58412609","What is CAN and how to provide it","I'm working on Polish e-identity card which is protected by CAN code. It is required to provide this code to unlock the card and be able to list the tokens.
I'm not able to find any information about it.
When using official app https://www.gov.pl/web/e-dowod you are prompted for this number after inserting the card.
According to logs, mysterious function C_SetCAN from e-dowod-pkcs11-64.so is invoked. It is not documented in http://docs.oasis-open.org/pkcs11/pkcs11-base/v2.40/pkcs11-base-v2.40.html and also not present in https://github.com/OpenSC/OpenSC/blob/master/src/pkcs11/pkcs11-global.c#L320 where it should be according to the logs
0x7f9bca95c700 23:18:32.251 [opensc-pkcs11] pkcs11-global.c:320:C_SetCAN: C_SetCAN(0x5)
0x7f9bca95c700 23:18:32.251 [opensc-pkcs11] pkcs11-global.c:329:C_SetCAN: C_SetCAN() get slot rv 0

It make me thing that it might be some custom extension, but as opensc is on LGPL, sources of it should also be provided, right?
When I've tried to break on it with gdb, but I've landed in:
#0  0x00007fffeadd5b70 in C_SetCAN () from /opt/e-dowod/e-dowod-pkcs11-64.so
#1  0x000000000041d49c in ?? ()
#2  0x0000000000418907 in ?? ()
#3  0x00000000004199bc in ?? ()
#4  0x000000000041ed58 in ?? ()
#5  0x00007ffff686e0e1 in QObject::event(QEvent*) () from /opt/e-dowod/./libQt5Core.so.5
#6  0x00007ffff7691e2c in QApplicationPrivate::notify_helper(QObject*, QEvent*) () from /opt/e-dowod/./libQt5Widgets.so.5

Why there is no caller and arguments information?
I've also tried to use https://github.com/OpenSC/OpenSC/blob/master/src/tools/npa-tool.c which seems to have desired functionality, but quite probably without success.
P:91478; T:0x140627504822080 17:59:48.916 [npa-tool] sm-eac.c:643:eac_gen_auth_1_encrypted_nonce: 
General authenticate (Encrypted Nonce) response data (20 bytes):
00 02 7C 12 80 10 D1 0A 98 E5 3B DC 7C F5 DC FA ..|.......;.|...
58 60 24 BA                                     X`$.
P:91478; T:0x140627504822080 17:59:48.917 [npa-tool] sm-eac.c:647:eac_gen_auth_1_encrypted_nonce: Could not parse general authenticate response data.
P:91478; T:0x140627504822080 17:59:48.917 [npa-tool] sm-eac.c:648:eac_gen_auth_1_encrypted_nonce: error:0D0680A8:asn1 encoding routines:asn1_check_tlen:wrong tag
P:91478; T:0x140627504822080 17:59:48.917 [npa-tool] sm-eac.c:648:eac_gen_auth_1_encrypted_nonce: error:0D07803A:asn1 encoding routines:asn1_item_embed_d2i:nested asn1 error
P:91478; T:0x140627504822080 17:59:48.917 [npa-tool] sm-eac.c:648:eac_gen_auth_1_encrypted_nonce: error:0D08303A:asn1 encoding routines:asn1_template_noexp_d2i:nested asn1 error
P:91478; T:0x140627504822080 17:59:48.917 [npa-tool] sm-eac.c:1176:perform_pace: Could not get encrypted nonce from card (General Authenticate step 1 failed).
P:91478; T:0x140627504822080 17:59:48.917 [npa-tool] sm-eac.c:1364:perform_pace: returning with: -1400 (Internal error)

","
It make me thing that it might be some custom extension, but as opensc is on LGPL, sources of it should also be provided, right?

Yes, you are right that C_SetCAN seems to be vendor defined extension method. If PKCS#11 library distributed by your government is based on LGPL 2.1 licensed OpenSC code, then they have to provide source code with all the changes. IMO all you have to do is to ask for it. Did you?
","69","<gdb><nfc><pkcs#11><pcsc><opensc>","1","0","1","2019-10-21 16:17:20","","0","1","11684473","","2019-10-17 15:22:17","2019-10-16 11:50:44",""
"50339806","PKCS#11 API C_FindObjectsInit on a CKO_SECRET_KEY AES key segfaults","I am using PKCS#11 to create a AES 256 bit key using C_GenerateKey. I then use C_FindObjectsxxx to search for the key handle and get a segfault. 
Here is the code
static int find_object(CK_SESSION_HANDLE sess, CK_OBJECT_CLASS cls, CK_OBJECT_HANDLE_PTR ret, const unsigned char *id, size_t id_len, int obj_index)
{
      CK_ATTRIBUTE attrs[2];
      unsigned int nattrs = 0;
      CK_RV rv;

      attrs[0].type = CKA_CLASS;
      attrs[0].pValue = &cls;
      attrs[0].ulValueLen = sizeof(cls);
      nattrs++;

      rv = pfunc11->C_FindObjectsInit(sess, attrs, nattrs);    --> segfault

......
The call to C_GenerateKey appears successful or else this code would not have been called. 
This is the call to the above code - 
CK_OBJECT_HANDLE key;
if (find_object(session, CKO_SECRET_KEY, &key, id, sizeof(id), 0))
{
   printf(""Key handle found\n"");
}

","","68","<segmentation-fault><pkcs#11>","0","","0","2018-05-14 22:19:53","","2","1","","","","2018-05-14 22:19:53",""
"58584152","Encrypting a data with a public key using pkcs11 module fails","I am using Python's pkcs11 package to access an X.509 certificate stored on my Yubikey 5. Accessing the certificate, public and private keys using pkcs11 Objects work fine as is signing and signature verification. Howerver, for the life of me, I cannot figure out why encrypting with the public key does not work. Here is my code:
import pkcs11
from pkcs11 import Attribute, ObjectClass, KeyType, util
lib = pkcs11.lib('/usr/lib/x86_64-linux-gnu/pkcs11/onepin-opensc-pkcs11.so')
token = lib.get_token(token_label='PIV Card Holder pin (PIV_II)'
session = token.open(user_pin=pin)
# Getting a private and a public key as pkcs11 Object
private = next(session.get_objects({
    Attribute.CLASS: ObjectClass.PRIVATE_KEY, 
}))
public = next(session.get_objects({
    Attribute.CLASS: ObjectClass.PUBLIC_KEY, 
}))
data = 'Hello, world!'
sig = private.sign(data) # Works!
sig_verif = public.verify(data, sig) # Works!
print(""Signature is valid? ""+str(sig_verif)) # True
# So far, everything above worked fine.
# ----------
# Now, this is the part that does not work
encrypt_data = public.encrypt(data) # Fails!

The last line above fails with pkcs11.exceptions.FunctionNotSupported error. I did some research, and it the explanation I found seems to imply that this function (encrypt) is not supported by the openSC library file (*.so) that I am using. However, I find it hard to believe considering that signature feature works just fine. 
Just to make sure that I can use this particular public key outside of session context, I tried the following code using Crypto package:
from Crypto.Cipher import PKCS1_OAEP
public_key = RSA.importKey(public[Attribute.VALUE]) # The content of pkcs11 public key as DER
cipher = PKCS1_OAEP.new(public_key)
encr_data = cipher.encrypt(data) # This works!

So, it seems that using my stand-alone public key allows me to encrypt data. But why can't I do it in the context of a pkcs11 token session? 
Then, I tried using the pkcs11 Object decrypt function to try to decrypt the data generated using Crypto module above:
decrypted = private.decrypt(encr_data) # It fails!

The above failed with pkcs11.exceptions.MechanismInvalid error. I tried using different mechanisms, but all of them resulted in the same error. What is interesting -- it seems that pkcs11 object allows me to at least invoke decrypt function without complaining that it is not supported. 
One more thing I should mention. I checked my certificate and saw that under Extension -> Certificate Key Usage, it says:
Critical
Signing
Key Encipherment

I read on the difference between key encipherment and data encipherment and learned that key encipherment is used to encrypt a secret (symmetric) key instead of data. Can it be the reason I can't use encrypt function for this token session? 
Any feedback would be greatly appreciated! 
","I'm sorry, but I think this is just a shortcoming of the API. As encryption with the public key doesn't require any security, it doesn't make sense to implement it on the Yubikey. It is much faster to export the public key values and perform the encryption on the host.
To be fair, Yubikey could have been nice and implement the functionality in software within the Ubikey PKCS#11 library. If you really want to then you could create a new PKCS#11 ""wrapper"" library that does contain the missing functionality in software; all other commands that Yubikey does implement can be forwarded to the original Yubikey PKCS#11 library.
","67","<python><smartcard><public-key-encryption><pkcs#11><opensc>","2","1","2","2019-10-30 19:36:22","58628476","2","2","","","","2019-10-27 23:10:49",""
"58584152","Encrypting a data with a public key using pkcs11 module fails","I am using Python's pkcs11 package to access an X.509 certificate stored on my Yubikey 5. Accessing the certificate, public and private keys using pkcs11 Objects work fine as is signing and signature verification. Howerver, for the life of me, I cannot figure out why encrypting with the public key does not work. Here is my code:
import pkcs11
from pkcs11 import Attribute, ObjectClass, KeyType, util
lib = pkcs11.lib('/usr/lib/x86_64-linux-gnu/pkcs11/onepin-opensc-pkcs11.so')
token = lib.get_token(token_label='PIV Card Holder pin (PIV_II)'
session = token.open(user_pin=pin)
# Getting a private and a public key as pkcs11 Object
private = next(session.get_objects({
    Attribute.CLASS: ObjectClass.PRIVATE_KEY, 
}))
public = next(session.get_objects({
    Attribute.CLASS: ObjectClass.PUBLIC_KEY, 
}))
data = 'Hello, world!'
sig = private.sign(data) # Works!
sig_verif = public.verify(data, sig) # Works!
print(""Signature is valid? ""+str(sig_verif)) # True
# So far, everything above worked fine.
# ----------
# Now, this is the part that does not work
encrypt_data = public.encrypt(data) # Fails!

The last line above fails with pkcs11.exceptions.FunctionNotSupported error. I did some research, and it the explanation I found seems to imply that this function (encrypt) is not supported by the openSC library file (*.so) that I am using. However, I find it hard to believe considering that signature feature works just fine. 
Just to make sure that I can use this particular public key outside of session context, I tried the following code using Crypto package:
from Crypto.Cipher import PKCS1_OAEP
public_key = RSA.importKey(public[Attribute.VALUE]) # The content of pkcs11 public key as DER
cipher = PKCS1_OAEP.new(public_key)
encr_data = cipher.encrypt(data) # This works!

So, it seems that using my stand-alone public key allows me to encrypt data. But why can't I do it in the context of a pkcs11 token session? 
Then, I tried using the pkcs11 Object decrypt function to try to decrypt the data generated using Crypto module above:
decrypted = private.decrypt(encr_data) # It fails!

The above failed with pkcs11.exceptions.MechanismInvalid error. I tried using different mechanisms, but all of them resulted in the same error. What is interesting -- it seems that pkcs11 object allows me to at least invoke decrypt function without complaining that it is not supported. 
One more thing I should mention. I checked my certificate and saw that under Extension -> Certificate Key Usage, it says:
Critical
Signing
Key Encipherment

I read on the difference between key encipherment and data encipherment and learned that key encipherment is used to encrypt a secret (symmetric) key instead of data. Can it be the reason I can't use encrypt function for this token session? 
Any feedback would be greatly appreciated! 
","After doing a rather extensive research and taking into consideration this thread's replies, I found that encryption not working in this token session is due to the OpenSC API limitation. As a matter of fact there is a compatibility table on the python-pkcs11 page that shows (in plain text) that OpenSC does not support Encryption, Symmetric keys generation, key wrapping and other functionalities. It does fully support signing/verification and partially supports decryption. Had I done a better search, it would've saved me a lot of time.
As a matter of fact, it is very useful to do a hard token test using 'pkcs11-tool', as it will show the supported functionalities and mechanisms for each PIV slot. In my case, I invoked it as follows: 
pkcs11-tool -p $pin -t

and received the following report:
Using slot 0 with a present token (0x0)
C_SeedRandom() and C_GenerateRandom():
  seeding (C_SeedRandom) not supported
  seems to be OK
Digests:
  all 4 digest functions seem to work
  MD5: OK
  SHA-1: OK
  RIPEMD160: OK
Signatures (currently only for RSA)
  testing key 0 (PIV AUTH key) 
  all 4 signature functions seem to work
  testing signature mechanisms:
    RSA-X-509: OK
    RSA-PKCS: OK
    SHA1-RSA-PKCS: OK
    MD5-RSA-PKCS: OK
    RIPEMD160-RSA-PKCS: OK
    SHA256-RSA-PKCS: OK
  testing key 1 (2048 bits, label=SIGN key) with 1 signature mechanism
    RSA-X-509: OK
  testing key 2 (2048 bits, label=KEY MAN key) with 1 signature mechanism -- can't be used to sign/verify, skipping
Verify (currently only for RSA)
  testing key 0 (PIV AUTH key)
    RSA-X-509: OK
    RSA-PKCS: OK
    SHA1-RSA-PKCS: OK
    MD5-RSA-PKCS: OK
    RIPEMD160-RSA-PKCS: OK
  testing key 1 (SIGN key) with 1 mechanism
    RSA-X-509: OK
  testing key 2 (KEY MAN key) with 1 mechanism -- can't be used to sign/verify, skipping
Unwrap: not implemented
Decryption (currently only for RSA)
  testing key 0 (PIV AUTH key) 
    RSA-X-509: OK
    RSA-PKCS: OK
  testing key 1 (SIGN key) 
    RSA-X-509: OK
    RSA-PKCS: OK
  testing key 2 (KEY MAN key) 
    RSA-X-509: OK
    RSA-PKCS: OK
No errors

From there, we can see that decryption is supported for all three occupied slots but only with RSA-X-509 and RSA-PKCS mechanisms (no OAEP). 
Now, I am considering fusing the pkcs11-tool and openssl functionalities to do data encryption. I haven't figured out all the intricacies of this kind of flow, but I am thinking something of this sort:

(pkcs11-tool) Export a certificate from a desired PIV slot
(openssl) Create a symmetric (e.g., AES) secret key
(openssl) Encrypt the data with this secret key
(openssl) Use the certificate from step 1 to encrypt the secret key 
Send the [symmetrically] encrypted data and [asymmetrically] encrypted secret key to the recipient
(pkcs11-tool) Decrypt the secret key on the secure token
(openssl) Use the decrypted secret key to decrypt the actual data

It looks like I should be able to implement such a workaround either in Linux shell using pkcs11-tool and openssl utilities or in Python using pkcs11 and OpenSSL libraries. The latter seems more preferable if I decide to later do it through GUI. This all seems quite low level, so I am wondering if there is a easier way to encrypt/decrypt data. I know that PGP fuses the encrypted data and wrapped secret key together into one single file, so the end-users only have to execute one command on their end. 
","67","<python><smartcard><public-key-encryption><pkcs#11><opensc>","2","1","2","2019-10-30 19:36:22","58628476","2","2","","","","2019-10-27 23:10:49",""
"33803623","Digital signing in java applet using eclipse","I am trying to sign some data (a POST form) in a web based application using a Java Applet. The user's x509 certificate would be in a cryptoken/smart card. 
I am using this tutorial/code as a starting point in building the applet - http://www.developer.com/java/other/article.php/3587361/Java-Applet-for-Signing-with-a-Smart-Card.htm
I could build and run the applet in browser, but i get error while signing the file as ""Cannot open the file for reading""
any helps and suggestion?
","For signing from Browser as client, applets are no more supported by modern browsers.
Smartcard or Token driver (PKCS#11) library has an additional layer called CSP (Crypto Service Provider) which acts like bridge between the device driver and OS Crypto services. Token driver, once installed also adds this CSP and thus plunging the token or smartcard makes Certificates in it available in the Certificate Store (which acts as handle to private key stored securely on the crypto device).
You may use Browser Extension for the purposes which has a native application running behind the browser to access Certificate Store and provide signing function through JavaScript in the browser. Signer Digital Browser Extension offers various type of signing form browser using JavaScript. Refer to 3 different SO answer links on the page Digital Signing From Browser for various operations to be achieved using the Web Browser Extension.
","67","<java><digital-signature><pkcs#11>","2","0","1","2019-06-27 23:41:31","","0","1","","","","2015-11-19 12:11:19",""
"50375930","Session.GetOperationState() method is throwing exception ""Method C_GetOperationState returned CKR_FUNCTION_NOT_SUPPORTED in SoftHSM""","We are using SoftHSM in our application. We have generated tokens and imported keys in it. Now we have created one job which monitors if our SoftHSM is Up and running.
For that, It seems that the Session.GetOperationState() method should be able to work. However I am getting an error message as below:
Method C_GetOperationState returned CKR_FUNCTION_NOT_SUPPORTED.
Please help, if this method is suitable for my need or should I usew some other function.
Thanks in advance.
","Method Session::GetOperationState freezes cryptographic operation (e.g. after computation of hash for the first half of file) and method Session::SetOperationState resumes cryptographic operation (e.g. for the computation of hash for the second half of the file).
If you want to perform health check of your HSM it should be enough to open new session with Slot::OpenSession method, check its state with Session::GetSessionInfo method and close the session afterwards.
","66","<c#><pkcs#11><ecdsa><pkcs11interop><softhsm>","1","2","1","2018-05-16 19:36:52","50378717","0","1","","","","2018-05-16 16:33:05",""
"50379186","Sign vmlinuz with SoftHSM?","We are working on Secureboot to secure our system from evil maid attacks. As part of securing the system, we sign the kernel and associated drivers. We use pesign tool to sign the kernel (vmlinuz). I tried to invoke PKCS engine from openssl to sign the vmlinuz kernel with the private key stored in SoftHSM. But it failed complaining initialization is not done. Is it possible to sign kernel using keys in SoftHSM?
","","65","<security><openssl><pkcs#11><hsm><softhsm>","4","","0","2018-05-25 14:54:21","","0","","","","","2018-05-16 20:10:51",""
"57426291","Is OpenSC fully based on PC/SC or does it also use different commands?","I am trying to learn the basics of smart card programming and I would like to add support for PKCS#11 to a card. The vendor does not provide any PKCS#11 module, so I would like to use OpenSC (the card is not listed as compatible with OpenSC).
As far as I know, the scenario should be this:

The software on the computer uses PKCS#11 APIs implemented by OpenSC.
OpenSC works together with PC/SC in order to build and send APDUs to the card.
The card processes the command APDUs and replies with response APDUs.

I need to know if will be enough to implement an applet that is able to recognize and process all commands specified by ISO-7816 or not. 
In particular I can't figure out if the entire OpenSC implementation relies only on the commands specified by ISO-7816 or if it uses also particular commands (the fact that OpenSC is not compatible with all smart cards makes me think that it uses proprietary commands).
","The biggest problem with writing such implementations is how and where data is stored on the card. While the data typed and commands for accessing them are indeed standardised in ISO-7816, commands for writing are not. Further, the cards vary greatly in which file types the allow and they are also often requiring proprietary extensions to standard ISO commands.
What OpenSC is doing is trying to create a PKCS#15 application on the card to use for the PKCS#11 access. If you cannot write that or the data is already present in a proprietary format, things can get very complicated.
","62","<smartcard><javacard><pkcs#11><pcsc><opensc>","1","1","2","2019-08-22 13:58:06","","0","","","","","2019-08-09 08:34:59",""
"57426291","Is OpenSC fully based on PC/SC or does it also use different commands?","I am trying to learn the basics of smart card programming and I would like to add support for PKCS#11 to a card. The vendor does not provide any PKCS#11 module, so I would like to use OpenSC (the card is not listed as compatible with OpenSC).
As far as I know, the scenario should be this:

The software on the computer uses PKCS#11 APIs implemented by OpenSC.
OpenSC works together with PC/SC in order to build and send APDUs to the card.
The card processes the command APDUs and replies with response APDUs.

I need to know if will be enough to implement an applet that is able to recognize and process all commands specified by ISO-7816 or not. 
In particular I can't figure out if the entire OpenSC implementation relies only on the commands specified by ISO-7816 or if it uses also particular commands (the fact that OpenSC is not compatible with all smart cards makes me think that it uses proprietary commands).
","
the fact that OpenSC is not compatible with all smart cards makes me think that it uses proprietary commands

No, not really, it's rather the other way around. ISO 7816-4 lists many commands for file or record based smart cards. There are few if any cards that fully implement all the commands written in ISO 7816-4. Furthermore, even if they did, there are many gaps in the standard, such as not clearly describing error conditions, multiple options with regards even to what is at the ""root"" of the file system, proprietary parameters, proprietary commands, no clear secure messaging etc. etc. etc..
In that sense it is a horrible standard; you should see it as a poor attempt of the industry of file system card manufacturers to create something that they can all adhere to.

Supporting 7816-4 furthermore doesn't mean that any specific use case is supported. There are no descriptions on how you get to a signature. There is at least PKCS#15 (also reflected now as an ISO standard) which specifies where files and keys can be found. However, if you create a signature you also have to know what kind of signature is created and which command should be used to do that.
In other words, generally ""middleware"" such as OpenSC always has to do some stuff to support specific cards. That one card is not supported doesn't say that OpenSC is ""wrong"" in any way, it just means that support for the card - if it is indeed a file system card or programmable card - was not yet tested / implemented.

Note that PC/SC is just a standardized way of handling smart cards from within an operating system (starting with the Windows OS from which it originated). Those commands just have to have to comply with ISO 7816-4, but it doesn't care at all what kind of commands are send or in which order. There aren't any PC/SC compatible smart cards out there, there are only compatible readers (or, as they can not just read, smart card interface devices or IFD's) for ISO 7816-4 compatible smart cards.
Some hardware tokens may also be PC/SC compatible, simply because they emulate a combination of reader and chip or because they internally are a reader and chip (the cheaper / slower ones). Others work on a higher level and use PKCS#11 which defines an interface for cryptographic tokens directly and is arguably and objectively better defined than ISO 7816-4 or -15 combined.
","62","<smartcard><javacard><pkcs#11><pcsc><opensc>","1","1","2","2019-08-22 13:58:06","","0","","","","","2019-08-09 08:34:59",""
"56451192","How to query HSM slot for value ""key handle"" using (known) value ""key label""","Need to query HSM (in Python) using known values HSM ""slot #"", ""key label"" to obtain (unknown value) ""key handle"". 
Any suggestions?
","You can use pkcs11.Session.get_key() to get unique object in HSM by label.
An example to get an AES key with label ""Label"":
with token.open(user_pin='1234', rw=True) as session:
    key = session.get_key(object_class=ObjectClass.SECRET_KEY, key_type=KeyType.AES, label=""Label"")

Use pkcs11.Session.get_objects() for more complex searches.
Note: You do not need the ""key handle"" value at all as you can perform operations using returned key object.
Good luck!
","61","<python><pkcs#11><hsm><cryptoki>","0","0","2","2019-06-11 14:59:33","","0","","","","","2019-06-04 20:51:54",""
"56451192","How to query HSM slot for value ""key handle"" using (known) value ""key label""","Need to query HSM (in Python) using known values HSM ""slot #"", ""key label"" to obtain (unknown value) ""key handle"". 
Any suggestions?
","You put me on the right track. I ended up using c_find_objects_ex to grab the key handle and used slice to chop off the trailing ""L"" in the output. Thanks!
","61","<python><pkcs#11><hsm><cryptoki>","0","0","2","2019-06-11 14:59:33","","0","","","","","2019-06-04 20:51:54",""
"39040217","How to get the universalPrincipalName Object from smartcard?","I'm using the pkcs11 lib to do it, but I can't find a attribute corresponding to the universalPrincipalName I want to store in my program. 
Here is the result from dumpasn1 :
SEQUENCE {
   OBJECT IDENTIFIER subjectAltName (52 565 529 177) 
   OCTET STRING, encapsulates {
     SEQUENCE {
        [0] {
          OBJECT IDENTIFIER
            universalPrincipalName (1 783 756 578 457 155 473 200 654 565)
          [0] {
            UTF8String 'thefoo.bar@foo.com'
            }
          }

How can I get 'thefoo.bar@foo.com' to store that field in a variable.       
I think I need to use the CK_ATTRIBUTEs but none seems to correspond to the universalPrincipalName (ie. 'thefoo.bar@foo.com')  
CK_ATTRIBUTE getattribute[] = {
            {CKA_WHICH_ONE_TO_USE, NULL_PTR, 0}
    };

C_GetAttributeValue(hSession, privKeyObject, getattribute, size);

Is C_GetAttributeValue the right function to get this info or is there maybe another way to get the universalPrincipalName ?
","There is no standard PKCS#11 attribute defined for UPN. You need to read whole certificate (CKA_VALUE attribute of certificate object) and parse it yourself.
","61","<c><smartcard><pkcs#11>","1","1","1","2016-08-19 13:51:16","","0","","3510717","","2016-08-19 13:31:12","2016-08-19 13:24:02",""
"56824091","How a pair privatekey and certificate match together in IAIK PKCS11 Wrapper?","I want to work with a pkcs11 token in java. Thus, I used ""IAIK"" as a pkcs11 java wrapper. I can search for objects like keys and certificates but I can't find out which key belongs to which certificate. I used ""CryptoKi Manager"" for search objects in the token and it shows the connection between a certificate and key like below picture. Then I studied PKCS11 standard, it said there is a field called ""certId"" that declare this connection but I couldn't find it in ""IAIK"". Does ""IAIK"" support this feature in its Certificate object? How?
 
","This connection is via the CKA_ID attribute, citing PKCS#11 version 2.20:

The CKA_ID field is intended to distinguish among multiple keys. In the case of public
  and private keys, this field assists in handling multiple keys held by the same subject; the
  key identifier for a public key and its corresponding private key should be the same. The
  key identifier should also be the same as for the corresponding certificate, if one exists.
  Cryptoki does not enforce these associations, however. (See Section 10.6 for further
  commentary.)

Please note that this association is not enforced (YMMV), but sane implementations behave in this way.
Use Key.getId() and X509PublicKeyCertificate.getID() methods in the PKCS#11 wrapper.
With IAIK-provider (note that you need a license) use IAIKPKCS11Key.getKeyID() to pair public and private key objects. I don't know how to get CKA_ID value from certificates obtained from TokenKeyStore.
Good luck!
","59","<java><pkcs#11><iaik-jce>","2","2","1","2019-06-30 16:06:47","56826270","0","","","","","2019-06-30 10:26:14",""
"48291640","My usb HSM came initialized and now I do not know how to use it","I am new to HSM and seems like working with pkcs11 is the most popular approach. 
I plugged in a USB HSM and when I listed it, it shows it was already initialized. How can I log into it without knowing the user and SO pins ?
Slot 18446744073709551610
Slot info:
    Description:      Virtual hotplug slot                                            
    Manufacturer ID:  OpenSC (www.opensc-project.org) 
    Hardware version: 0.0
    Firmware version: 0.0
    Token present:    no

Slot 1
Slot info:
    Description:      Identiv uTrust 3512 SAM slot Token [CCID Interface] (55511725602

    Manufacturer ID:  OpenSC (www.opensc-project.org) 
    Hardware version: 0.0
    Firmware version: 0.0
    Token present:    yes
Token info:
    Manufacturer ID:  www.CardContact.de              
    Model:            PKCS#15 emulated
    Hardware version: 24.13
    Firmware version: 2.5
    Serial number:    DECC0300697     
    Initialized:      yes
    User PIN init.:   yes
    Label:            SmartCard-HSM (UserPIN)    

Can I get help for this ?     
","You need to contact your HSM supplier and ask him to provide you PIN values.
","57","<pkcs#11><hsm>","1","0","1","2018-01-17 00:00:57","48291718","0","","","","","2018-01-16 23:49:38",""
"58597489","How does PKCS#11 work in browsers to provide client authentication to a website?","I have a website that asks me to insert my PKCS#11 USB stick (SafeNet eToken 5110 if it matters) and press a button and it authenticates me with the stick automatically. This seems to work without any Chrome plugin or anything (on Windows). 
How does this work at the protocol and API level so that it's all completely automated? I'm interested in the flow between the browser and the website and between the browser and the Windows API that communicates with the token. I'm interested in this because I want to evaluate my options (libraries and how to use/integrate them) for performing a https request that can be authenticated with that stick.
Thanks!
","","57","<ssl><https><smartcard><pkcs#11>","1","","0","2019-10-29 06:50:58","","0","","","user519179","2019-10-29 05:59:59","2019-10-28 19:48:52",""
"56566655","Replacement for DialogCallbackHandler in Java 9","I'm using SunPKCS11 with NSS to obtain a client certificate from a smart card. For obtaining the PIN I use DialogCallbackHandler. These are both specified in the java.security file.
I need a way to prompt the user for their PIN. It cannot be stored, read from a file, passed as a command-line argument, etc.
Note that I have no control over the code used for authentication. It's using the standard Java security implementation. 
I've looked at all of the Java 11 implementations of CallbackHandler. None of them appear to do what I want.
Here are the relevant lines from java.security which work in Java 8 but not in Java 9:
security.provider.10=sun.security.pkcs11.SunPKCS11 /etc/pkcs11.cfg
auth.login.defaultCallbackHandler=com.sun.security.auth.callback.DialogCallbackHandler

When client certificate authentication is requested, the user should be prompted for their PIN like they were with DialogCallbackHandler.

Is there a drop-in replacement for DialogCallbackHandler?
If the answer to #1 is no, Java 8 had the endorsed directory where you could drop in extra JARs. Is there a similar facility in Java 9+? Can I simply create a JAR with DialogCallbackHandler and add it somewhere so that it takes effect system-wide?

","","55","<java><java-11><pkcs#11>","0","","0","2019-06-12 17:29:48","","4","","1119852","","2019-06-12 17:29:48","2019-06-12 16:25:47",""
"53738016","Programmatically add key from X509Certificate2 via PKCS#11 to a key store","We have a secure key store which features a PKCS#11 interface. We access keys on it using the PKCS#11 Interop Library for .NET. We also need to import keys from certificates. How to import the PrivateKey of an X509Certificate2 via our PKCS#11 interface into our key store?
var key = x509Certificate2.PrivateKey;

var attributes = new List<ObjectAttribute>();

// What to do here? How to fill in the key into those attributes?

pkcs11Session.CreateObject(attributes);

","If your question is about how to actually extract the private key details from an X509Certificate2.PrivateKey, here is an example with a PFX file:
var certificate = new X509Certificate2(@""self-signed.pfx"", ""password"", X509KeyStorageFlags.Exportable);
var rsaPrivateKey = certificate.GetRSAPrivateKey();
var parameters = rsaPrivateKey.ExportParameters(true);

However, the exact code depends on a few things, namely

how the certificate is created and whether it actually contains a private key reference (in this case, yes, imported from PFX),
whether the key is exportable (in this case, yes), and
the type of private key (in this case, RSA).

I can't help you about how to convert that into the attributes required by your library, though, maybe someone else can chime in here.
","52","<.net><pkcs#11>","0","0","1","2018-12-12 08:00:49","53738488","2","0","","","","2018-12-12 07:28:22",""
"55284513","Smart card reader authentication OpenSC Firefox MDN","for several days I have been trying to develop a simple web authentication such as a login on a site but the access credential must be a magnetic card.
I used OpenSC which, through a command, returns the output of the card and everything works.
https://github.com/OpenSC/OpenSC/wiki
I have therefore attached the .dll file as per guide on this link:
https://github.com/OpenSC/OpenSC/wiki/Installing-OpenSC-PKCS%2311-Module-in-Firefox,-Step-by-Step
And if I go now to Firefox Settings> Privacy, I can see the contents of my card

So I created a firefox extension to manage the loaded module
Like this: 
https://developer.mozilla.org/en-US/docs/Mozilla/Projects/NSS/PKCS11/Module_Installation
But in my .js file when i use this syntax:
var checking = browser.pkcs11.isModuleInstalled(name_of_my_module //string)

I get the following error:
Unable to load module: Error: ""no such PKCS#11 module *name_of_my_module*""

Has anyone ever dealt with this component or used other ways to accomplish what I need?
Thank you
","","51","<javascript><firefox><firefox-webextensions><pkcs#11>","0","","0","2019-03-21 15:57:52","","0","","","","","2019-03-21 15:57:52",""
"55023004","Softhsm2 with pkcs11interop error. Value was either too large or too small for a UInt32","I have following code for softhsm2 test via pkcs11interop library
using Net.Pkcs11Interop.Common;
using Net.Pkcs11Interop.HighLevelAPI;
using Net.Pkcs11Interop.HighLevelAPI80;
using System;
using System.Collections.Generic;
namespace ExportTest
{
    public class Softhsmtest
    {
        public static Pkcs11InteropFactories Factories = new Pkcs11InteropFactories();
        public static void Test()
        {

            using (Pkcs11 pkcs11 = new Pkcs11(Factories, @""C:\SoftHSM2\lib\softhsm2.dll"",AppType.MultiThreaded))
            {
                ISlot slot = pkcs11.GetSlotList(SlotsType.WithTokenPresent)[0];
                using (ISession session = slot.OpenSession(SessionType.ReadWrite))
                {
                    session.Login(CKU.CKU_USER, ""1111"");                    
                    session.Logout();
                }
            }
        }
    }
}

Error Stacktrace i am getting is 
   at System.Convert.ToUInt32(UInt64 value)
   at Net.Pkcs11Interop.Common.ConvertUtils.UInt64ToCKR(UInt64 value)
   at Net.Pkcs11Interop.LowLevelAPI80.Delegates.InitializeWithGetFunctionList(IntPtr libraryHandle)
   at Net.Pkcs11Interop.LowLevelAPI80.Delegates..ctor(IntPtr libraryHandle, Boolean useGetFunctionList)
   at Net.Pkcs11Interop.LowLevelAPI80.Pkcs11..ctor(String libraryPath)
   at Net.Pkcs11Interop.HighLevelAPI80.Pkcs11..ctor(Pkcs11InteropFactories factories, String libraryPath, AppType appType)
   at ExportTest.Softhsmtest.Test() in C:\Users\kashahid\Downloads

\Pkcs11Interop-master\Pkcs11Interop-master\src\PkcsTestWindowsApp\Class1.cs:line 15
   at PkcsTestWindowsApp.Form1.button1_Click(Object sender, EventArgs e) in C:\Users\kashahid\Downloads\Pkcs11Interop-master\Pkcs11Interop-master\src\PkcsTestWindowsApp\Form1.cs:line 27
   at System.Windows.Forms.Control.OnClick(EventArgs e)
   at System.Windows.Forms.Button.OnClick(EventArgs e)
   at System.Windows.Forms.Button.OnMouseUp(MouseEventArgs mevent)
   at System.Windows.Forms.Control.WmMouseUp(Message& m, MouseButtons button, Int32 clicks)
   at System.Windows.Forms.Control.WndProc(Message& m)
   at System.Windows.Forms.ButtonBase.WndProc(Message& m)
   at System.Windows.Forms.Button.WndProc(Message& m)
   at System.Windows.Forms.Control.ControlNativeWindow.OnMessage(Message& m)
   at System.Windows.Forms.Control.ControlNativeWindow.WndProc(Message& m)
   at System.Windows.Forms.NativeWindow.DebuggableCallback(IntPtr hWnd, Int32 msg, IntPtr wparam, IntPtr lparam)
   at System.Windows.Forms.UnsafeNativeMethods.DispatchMessageW(MSG& msg)
   at System.Windows.Forms.Application.ComponentManager.System.Windows.Forms.UnsafeNativeMethods.IMsoComponentManager.FPushMessageLoop(IntPtr dwComponentID, Int32 reason, Int32 pvLoopData)
   at System.Windows.Forms.Application.ThreadContext.RunMessageLoopInner(Int32 reason, ApplicationContext context)
   at System.Windows.Forms.Application.ThreadContext.RunMessageLoop(Int32 reason, ApplicationContext context)
   at System.Windows.Forms.Application.Run(Form mainForm)
   at PkcsTestWindowsApp.Program.Main() in C:\Users\kashahid\Downloads\Pkcs11Interop-master\Pkcs11Interop-master\src\PkcsTestWindowsApp\Program.cs:line 19
https://github.com/Pkcs11Interop/Pkcs11Interop
","I see two problems there:

You're using the current development version of Pkcs11Interop (master branch) that contains several API breaking changes and will change a LOT before it becomes stable version.
You're directly referencing types from Net.Pkcs11Interop.HighLevelAPI80 namespace which are supposed to be used only on Unix systems.

The solution:
You should use the current stable version - Pkcs11Interop 4.1.0 - with the following code:
using Net.Pkcs11Interop.Common;
using Net.Pkcs11Interop.HighLevelAPI;

namespace ExportTest
{
    public class Softhsmtest
    {
        public static void Test()
        {
            using (Pkcs11 pkcs11 = new Pkcs11(@""C:\SoftHSM2\lib\softhsm2.dll"", AppType.MultiThreaded))
            {
                Slot slot = pkcs11.GetSlotList(SlotsType.WithTokenPresent)[0];
                using (Session session = slot.OpenSession(SessionType.ReadWrite))
                {
                    session.Login(CKU.CKU_USER, ""1111"");
                    session.Logout();
                }
            }
        }
    }
}

","51","<c#><.net-4.5><pkcs#11><pkcs11interop><softhsm>","0","2","1","2019-03-06 19:56:25","55031239","0","","","","","2019-03-06 12:20:29",""
"48741922","Use of PEM format in RSA","What is the use of PEM format of the RSA key? Is there any specific reason why the PEM format was introduced in RSA? 
Note: My understanding is PEM format is the base 64 encoded values.
","","49","<rsa><pem><pkcs#11><der>","0","","0","2018-02-12 16:03:12","","4","","8240063","","2018-02-12 16:03:12","2018-02-12 08:08:33",""
"50343954","PKCS#11 C_CreateObject fails with bad arguments","I have a C_CreateObject PKCS#11 API call to generate a 128 bit AES-key that fails with bad arguments. 
Can anyone please help me figuring out what is wrong with the template ? 
                            CK_OBJECT_HANDLE hKey;
                            CK_OBJECT_CLASS keyClass = CKO_SECRET_KEY;
                            CK_KEY_TYPE keyType = CKK_AES;
                            CK_BBOOL _true = TRUE;
                            CK_BBOOL _false = FALSE;                              
                            CK_BYTE key_value[] = { 0x01, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef};

                            CK_ATTRIBUTE keyTemplate[] = {
                               {CKA_CLASS, &keyClass, sizeof(keyClass)},
                               {CKA_KEY_TYPE, &keyType, sizeof(keyType)},
                               {CKA_ENCRYPT, &_true, sizeof(_true)},
                               {CKA_DECRYPT, &_true, sizeof(_true)},
                               {CKA_TOKEN, &_true, sizeof(_true)},      /* token object  */
                               {CKA_PRIVATE, &_false, sizeof(_false)},  /* public object */
                               {CKA_VALUE, key_value, sizeof(key_value)},
                               {CKA_LABEL, CK_VOID_PTR(""key""), sizeof(""key"")}
                             };

                             rv =  pfunc11->C_CreateObject(session, keyTemplate, sizeof (keyTemplate)/sizeof (CK_ATTRIBUTE), &hKey);
                             if (rv != CKR_OK) {
                                printf(""ERROR: rv=0x%08X: C_CreateObject:\n"", (unsigned int)rv);
                                return false;
                             }

","Your key value is too short for AES key -- you need to provide 16 bytes (128 bits) or 32 bytes (256 bits) in key_value, e.g.:
CK_BYTE key_value[] = { 
        0x01, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef,
        0xcd, 0xef, 0x89, 0xab, 0x45, 0x67, 0x01, 0x23, 
};

Good luck!
","47","<pkcs#11>","1","1","1","2018-05-15 07:28:51","50344598","0","","9226886","","2018-05-15 06:59:39","2018-05-15 06:52:14",""
"57628729","How to create the object CKO_CERTIFICATE using pkcs11","I have the following error code:

0x12 (CKR_ATTRIBUTE_TYPE_INVALID) 

when I'm trying to create the object CreateObject CKO_CERTIFICATE
CK_OBJECT_CLASS  obj_class_cert = CKO_CERTIFICATE;
CK_CERTIFICATE_TYPE keyType_cert = CKC_X_509;

CK_BYTE X509certificate[2048];
CK_BYTE label[] = ""this is my certificate"";
CK_BYTE owner[] =""SWIFT_DPI"";
CK_BYTE subject[128];
CK_BYTE id[] = ""00721c67"";

memset(X509certificate, 0, 2048);
memset(subject, 0, 128);

CK_ATTRIBUTE certificate[8]{
    {CKA_CLASS, &obj_class_cert, sizeof(obj_class_cert)},
    {CKA_CERTIFICATE_TYPE, &keyType_cert, sizeof(keyType_cert)},
    {CKA_TOKEN, &ck_true, sizeof(ck_true)},
    {CKA_LABEL, label, sizeof(label)-1},
        {CKA_SUBJECT, &subject, sizeof(subject)},
    {CKA_ID, &id, sizeof(id)},
    {CKA_OWNER ,owner, sizeof(owner)},
    {CKA_VALUE, X509certificate,sizeof(X509certificate)}
    };

pPKCS11->C_CreateObject(hSession, pub_attrs, 7, &rsa_public_obj);


error code 0x12 (CKR_ATTRIBUTE_TYPE_INVALID)

","","47","<pkcs#11>","0","","0","2019-08-23 16:36:41","","1","","5881352","","2019-08-23 16:36:41","2019-08-23 14:57:42",""
"44115330","Use MS Virtual Smartcards as keystore on server","I'm currently trying to find a possibility to store priv. keys on a server in a secure way on hardware. Basically it is a requirement, that keys on a critical server are to be stored on secure hardware. The ""classical"" approach for this is to use a HSM, but since very few servers in different projects need to be secured that way, alwas buying a HSM is too expensive. 
So my idea was to use windows virtual smartcards to store the server keys and the software running on the server should use PKCS#11 to talk to this smartcard.
Is it possible to use virtual smartcards to store priv. keys for server applications and is there a possibility to use virtual smartcards without the necessity to enter the pin all the time? Afaik there is a possibility to encrypt a server with bitlocker but get the ""key"" at startup from the AD, maybe something the like is possible with virtual smartcards.
Thanks a lot
","I am not sure there is PKCS#11 library available for MS Virtual Smartcard but I've been using SoftHSM for the same purpose with a great success.
","47","<windows><smartcard><pkcs#11>","1","1","1","2017-05-22 14:38:57","","0","1","","","","2017-05-22 14:21:47",""
"54923803","PKCS#11 - How to protect smartcard owner, from malicious smartcard provider when writing new certificates on an already provisioned smartcard","I am currently learning PKCS#11 and there is a certain scenario that I don't know how to deal with. 
This is the scenario:

A client who would like to acquire certificates from a provider enters his data,
A client comes to a provider facility, where he can acquire ordered smartcard, with certificates (qualified, and commercial for example) written on it,
Two things have to happen with the smartcard: provider has to generate key pair for both certificates, and then write a certificate on card (which requires User PIN)

Smartcards, as far as I know have two types of user: normal user (User PIN), and SO (SO PIN).
So what is the problem? When provider uses the User PIN for generating keys, and writing certificates, we can change it programatically with SetPin interop operation, or let client change it later in home, with appropriate software. Problem occurs, when a client would want to acquire new certificates for his smart card, and at this stage, provider doesn't know the User PIN for the card (i.e. he is not able to use any cryptographic mechanisms on the card). If the client would provide the password for the providing person, he would be able to make the client sign some random documents with his certificates, instead of using the PIN for the right cause (utilizing PKCS#11 mechanisms for writing a new certificate)
So my question is:
Is there any way that we can have a second User PIN on the card (separate for provider, and client) for certain tokens? Can we make some PKCS#11 mechanisms available only to specific user (for example generating key pair only for provider, and signing documents with certificates only for the client)?
What would be standarized scenario for dealing with this kind of problem? I would be glad to hear your opinions.
","While you correctly describe user and SO-PINs, real cards may have significantly more PINs, and other authentication methods as well such as biometric authentications and challenge response tests (proving knowledge of a secret symmetric key). 
For an authentication against a system the PIN mechanism is inappropriate (can be attacked via replay) and challenge-response is the typical solution. This also has the advantage, that it will not allow to perform a signature.
Another option (if the key can only be generated once) would be via the life cycle of the certificate file. An un-initialized file may not require an authentication at all and only after writing the certificate the life cycle of the file is changed.
One can also re-order the complete process, so the User-PIN is not yet valid and therefore no signature can be created at the time of certificate writing. Only afterwards the user chooses a PIN value and establishes that.
","47","<smartcard><pkcs#11><pkcs11interop>","2","0","1","2019-02-28 16:36:54","","2","","11130189","","2019-02-28 11:24:37","2019-02-28 10:44:53",""
"58093823","Maximum number of try for PKCS#11 smart card token","I am tasked with finding the maximum number of tries to enter a PKCS#11 smart card token PIN number. I'm already aware of the flags in CK_TOKEN_INFO/TokenInfo as mentioned here i.e. CKF_USER_PIN_COUNT_LOW, CKF_USER_PIN_FINAL_TRY, CKF_USER_PIN_LOCKED. But somehow my supervisor insists there is somewhere inside the smart card that contains the information on the maximum number of tries to enter the PIN. 
Is it really somewhere in there?
","Of course: each PIN object in the card has a respective error counter. Otherwise one could not ensure, that the PIN really blocks after the given number of erroneous attempts, as soon as several clients are involved.
(PKCS is simply an additional layer for translating generic commands into the the special ones for the corresponding card type.)
The problem is, that there are few to none ways to extract that error counter in a standardized way. This depends one the card type and its configuration. The best chance is to send a VERIFY command with wrong PIN data and look for a '63 Cn' status code, where n represents the number of attempts remaining. In worst case, however, the card responds with '63 00' if there is one or more attempt remaining  and '69 83' if the PIN is blocked. For details you have to refer to the smart card operating system manual.
","43","<smartcard><pkcs#11>","0","0","1","2019-09-27 20:15:00","","0","1","11258241","","2019-09-26 01:33:06","2019-09-25 07:59:55",""
"57889863","Which private key using for CSR generated by TPM2?","I'm following guidline to generate CSR: https://github.com/irtimmer/tpm2-pk11/wiki
After get certificate which signed by server side, in my case, I have to use private key used for CSR generation to handshake with SSL connection with server. I tried to convert key.priv using base64 command but failed.
And my questions:
1) Can I use private key ""key.priv"" when created private key in TPM. If not which private key will be accepted?
tpm2_create -c po.ctx -g sha256 -G rsa -u key.pub -r key.priv

2) What are key.pub and key.priv used for?
Thank you very much.
","","43","<pkcs#11><tpm>","1","","0","2019-09-16 07:39:40","","0","1","3868464","","2019-09-16 07:39:40","2019-09-11 13:03:46",""
"57376906","How to read and generate X.509 certificate stored on usb token in js","I am using Gemalto usb token for my Javascript application.
I am accessing token's functionality through PKCS11 Javascript library.
I've been able to: 
Generate public and private key, encrypt/decrypt, sign/verify.
But the main problem is: 
How can i read attributes of certificate stored inside the token using Javascript code?, so that I can move on to the next step, which will be the signature of the pdf document via this certificate (always using javascript).
I thoroughly looked through the PKCS#11 documentation, and over the Internet, but I couldn't find answer to my question.
I would appreciate any hints to solve this problem.
Thanks...
","","42","<javascript><x509><pkcs#11>","0","","0","2019-08-06 13:13:01","","3","","","","","2019-08-06 13:13:01",""
"39786054","Reading dll from web page","I used Java applet in a web page to load a dll (Pkcs11Wrapper.dll). 
Now,
Chrome no longer supports NPAPI (technology required for Java applets.)
What can I use to read the dll on my web page?
Thanks for advices!
","","42","<java><google-chrome><dll><pkcs#11>","0","","0","2016-09-30 07:32:09","","4","","","","","2016-09-30 07:32:09",""
"57392811","How to sign .jar file using token (got from softhsm using pkcs11) by jarsigner?","I am running softhsm in Windows OS.I am getting token info using pkcs11js npm package.I want to know how i can use the token to sign my .jar file in nodejs?     
Token info getting from softhsm using pkcs11js 
'SoftHSM slot ID 0x2d88f571',
manufacturerID: 'SoftHSM project',
  flags: 1,
  hardwareVersion: {
    major: 2,
    minor: 5
  },
  firmwareVersion: {
    major: 2,
    minor: 5
  }
}
token_info-- -- -- -- -- -- -- -- -- -- -- -- -- - > {
  label: 'My token 2                          ',
  manufacturerID: 'SoftHSM project                 ',
  model: 'SoftHSM v2      ',
  serialNumber: 'ffbf344dad88f571',
  flags: 1069,
  maxSessionCount: 0,
  sessionCount: 4294967295

","","42","<node.js><pkcs#11><jarsigner><softhsm>","0","","0","2019-08-07 12:22:21","","2","","6388552","","2019-08-07 12:22:21","2019-08-07 10:56:43",""
"53762752","Why lists pksc11-tool seven Objects but Java Keystore has Only one","When I do  in the cmd line:
pkcs11-tool --login -O

I get seven Objects that are on my smartcard, 3 Public Key Objects, 3 Certificate Objects and one Private Key Object. 
But when I try to do the same with a small Java Code, I only find one Certificate:
 String pkcs11Config = ""name = SmartCard\nlibrary = opensc-pkcs11.dll\nslot=0"";
  ByteArrayInputStream confStream = new ByteArrayInputStream(pkcs11Config.getBytes());
  Provider prov = new sun.security.pkcs11.SunPKCS11(confStream);
  Security.addProvider(prov);
  String pin = ""0000000"";
  KeyStore cc = KeyStore.getInstance(""PKCS11"", prov);
  cc.load(null, pin.toCharArray());

  // Look for certificate
  Enumeration aliases = cc.aliases();
  for (Enumeration e = aliases; e.hasMoreElements();) {
    Object alias = aliases.nextElement();
    System.out.println(""Alias is : "" + alias);
  }

Why Do I found no Public key or other Certificate with this code?
","It's standard behavior of JAVA's SunPKCS11 provider. Its implementation is usually documented in ""PKCS#11 reference guide"":

JDK 7 PKCS#11 Reference Guide 
JDK 8 PKCS#11 Reference Guide
JDK 9 PKCS#11 Reference Guide
JDK 10 PKCS#11 Reference Guide

Pick a correct guide for your JAVA version and take a look at ""KeyStore requirements"" chapter.  You'll find out that SunPKCS11 provider returns aliases only for pairs of certificates and their matching private keys (that's one entry in your case) and ignores all other objects.
","37","<java><keystore><pkcs#11><opensc><sunpkcs11>","1","1","1","2018-12-13 20:07:09","53769334","0","","","","","2018-12-13 13:17:03",""
"58398697","How to establish TLS session in python using PKCS11","I’m trying to establish TLS channel between a client and a web server that are under my control. Both the client and server authenticates themselves using certificates that I’ve created under private PKI scheme. Client key and certificate are stored on usb dongle type HSM. Python is the main application language. 
I’m able to do all required crypto operations for my project using python-pkcs11 package such as AES encryption, HMAC signing, RSA signing, and etc. However, I couldn’t find a way to “bind” pkcs11 to any TLS library. What I mean is a “Pythonic” way of calling a function that handles pkcs11 layer and establishes a TLS channel. Requests does not support pkcs11. libcurl has support for pkcs11 but it’s not implemented in pycurl, neither pyopenssl. 
I’m able to do it openssl’s s_client CLI tool using engine api:
openssl s_client -engine pkcs11 -verify 2 -CAfile path/to/CA.pem -keyform engine -key ""pkcs11:...;object=rsa;type=private"" -cert path/to/client-cert.pem -connect localhost:8443
An example of what I’m looking for:
do_tls_with_pkcs(key=’pkcs11:URL’, cert=’cert.pem’, verify=’CA-cert.pem’)
As far as I could search around, no such library exists yet. Now I’m looking for a workaround.
I have read that if openssl, libp11, and python are compiled in such a way it is possible to abstract all of this, hence simple requests calls would go through HSM, transparent to application code. Although, I couldn’t find any material on how to do it.
","","35","<python><ssl><openssl><pkcs#11>","4","","0","2019-10-15 16:04:35","","0","","","","","2019-10-15 16:04:35",""
"57777359","Unwrapping of symmetric key throws Pkcs11Exception / CKR_GENERAL_ERROR","I'm trying to convert the Wrap / Unwrap example from a RSA key pair to a single AES key:
// Open RW session
using (ISession session = slot.OpenSession(SessionType.ReadWrite))
{
  string userPin = ""1234"";

  // Login as normal user
  session.Login(CKU.CKU_USER, userPin);

  // Generate symetric secret key
  IObjectHandle secretKey = Helpers.GenerateKey(session);

  // Generate symetric key
  IObjectHandle publicKey = Helpers.GenerateKey(session);

  // Specify wrapping mechanism
  IMechanism mechanism = session.Factories.MechanismFactory.Create(CKM.CKM_AES_KEY_WRAP);

  // Wrap key
  byte[] wrappedKey = session.WrapKey(mechanism, publicKey, secretKey);

  // Define attributes for unwrapped key
  List<IObjectAttribute> objectAttributes = new List<IObjectAttribute>();

  objectAttributes.Add(session.Factories.ObjectAttributeFactory.Create(CKA.CKA_CLASS, CKO.CKO_SECRET_KEY));
  objectAttributes.Add(session.Factories.ObjectAttributeFactory.Create(CKA.CKA_KEY_TYPE, CKK.CKK_AES));
  objectAttributes.Add(session.Factories.ObjectAttributeFactory.Create(CKA.CKA_ENCRYPT, true));
  objectAttributes.Add(session.Factories.ObjectAttributeFactory.Create(CKA.CKA_DECRYPT, true));
  objectAttributes.Add(session.Factories.ObjectAttributeFactory.Create(CKA.CKA_DERIVE, true));
  objectAttributes.Add(session.Factories.ObjectAttributeFactory.Create(CKA.CKA_EXTRACTABLE, true));
  objectAttributes.Add(session.Factories.ObjectAttributeFactory.Create(CKA.CKA_TOKEN, true));
  objectAttributes.Add(session.Factories.ObjectAttributeFactory.Create(CKA.CKA_LABEL, ""UnWrapperTest""));

  // Unwrap key
  IObjectHandle unwrappedKey = session.UnwrapKey(mechanism, secretKey, wrappedKey, objectAttributes);
  }
}

with
public static IObjectHandle GenerateKey(ISession session)
{
  // Prepare attribute template of new key
  List<IObjectAttribute> objectAttributes = new List<IObjectAttribute>();
  objectAttributes.Add(session.Factories.ObjectAttributeFactory.Create(CKA.CKA_CLASS, CKO.CKO_SECRET_KEY));
  objectAttributes.Add(session.Factories.ObjectAttributeFactory.Create(CKA.CKA_KEY_TYPE, CKK.CKK_AES));
  objectAttributes.Add(session.Factories.ObjectAttributeFactory.Create(CKA.CKA_TOKEN, true));
  objectAttributes.Add(session.Factories.ObjectAttributeFactory.Create(CKA.CKA_ENCRYPT, true));
  objectAttributes.Add(session.Factories.ObjectAttributeFactory.Create(CKA.CKA_DECRYPT, true));
  objectAttributes.Add(session.Factories.ObjectAttributeFactory.Create(CKA.CKA_DERIVE, true));
  objectAttributes.Add(session.Factories.ObjectAttributeFactory.Create(CKA.CKA_EXTRACTABLE, true));
  objectAttributes.Add(session.Factories.ObjectAttributeFactory.Create(CKA.CKA_VALUE_LEN, 32));
  objectAttributes.Add(session.Factories.ObjectAttributeFactory.Create(CKA.CKA_LABEL, ""WrapperTest""));

  // Specify key generation mechanism
  IMechanism mechanism = session.Factories.MechanismFactory.Create(CKM.CKM_AES_KEY_GEN);

  // Generate key
  return session.GenerateKey(mechanism, objectAttributes);
}

But the line IObjectHandle unwrappedKey = session.UnwrapKey(mechanism, secretKey, wrappedKey, objectAttributes); always throws a Net.Pkcs11Interop.Common.Pkcs11Exception: 'Method C_UnwrapKey returned CKR_GENERAL_ERROR' exception.
As 'HSM' I'm using a SoftHSM2 on Windows.
What am I doing wrong?
Disclosure: I'm cross-posting this question also in GitHub
","Found the problem:
IObjectHandle unwrappedKey = session.UnwrapKey(mechanism, secretKey, wrappedKey, objectAttributes);
should read
IObjectHandle unwrappedKey = session.UnwrapKey(mechanism, publicKey, wrappedKey, objectAttributes);
","34","<pkcs#11><pkcs11interop><softhsm>","2","1","1","2019-09-04 07:46:30","","0","1","","","","2019-09-03 18:58:45",""
"57307393","How to get al alias from hsm by SUNPKCS provider?","I want to get my all key aliases from hsm, but i get this error message : 
Exception in thread ""main"" java.io.IOException: load failed
    at sun.security.pkcs11.P11KeyStore.engineLoad(P11KeyStore.java:778)
    at java.security.KeyStore.load(KeyStore.java:1445)
    at eracom.provider.ProCrypt.main(ProCrypt.java:99)
    Caused by: sun.security.pkcs11.wrapper.PKCS11Exception: 
    CKR_OBJECT_HANDLE_INVALID
    at sun.security.pkcs11.wrapper.PKCS11.C_GetAttributeValue(Native Method)
    at sun.security.pkcs11.P11KeyStore.mapLabels(P11KeyStore.java:2415)
    at sun.security.pkcs11.P11KeyStore.engineLoad(P11KeyStore.java:770)

If i create just one secret key on hsm. there is no problem, i can get 
    the alia from hsm, but if i have 2 or more, i get the error. 
    How to solve it?
        KeyStore keyStore = KeyStore.getInstance(""PKCS11"", pkcs11);
        keyStore.load(null, slotPIN);

        SecretKey key = (SecretKey) keyStore.getKey(""KEY2"", slotPIN);
        System.out.println(""key's attributes: "" + key.toString());


        java.util.Enumeration<String> aliases = keyStore.aliases();
        String alias = null;
        while (aliases.hasMoreElements()) {
            alias = aliases.nextElement();
            System.out.println(""key label name : "" + alias);

        }

","","34","<pkcs#11><jce><hsm><jca><sunpkcs11>","0","","0","2019-08-01 10:52:54","","3","","","","","2019-08-01 10:52:54",""
"57053714","Why sign method returns only four bytes?","I am trying to implement pkcs 11 standard using pkcs11interop
I have some des2 keys (16 byte) and i want use sign method
my problem is that sign method returns only four bytes. but I want 8 byte sign.
what should i do?
PS 1: the four byte result is correct. that is first bytes of my expected result.
PS 2: I know sign method is same as encrypt method. so one of my solutions is that encrypt input and get first 8 bytes of result (that is what i am already doing). but I feel bad about it and I think it is better to use Sign method itself.
PS 3: there is a ""ICkMacGeneralParams"" interface that can be use to select MAC size. but seems to doesnt effect AT ALL! i set it to UInt32.MaxValue and 0 and result was not different.
PS 4: I know Sign method usually used with public and private keys. but I need to use it with one key
        var data = new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, };

        //macParams seems not to work at all! result remains same with any input of CreateCkMacGeneralParams method
        var macParams = session.Factories.MechanismParamsFactory.CreateCkMacGeneralParams(8);

        var signMechanism = session.Factories.MechanismFactory.Create(CKM.CKM_DES3_MAC, macParams);
        //handle references to some 16 byte key with CKK_DES2
        var signResult = session.Sign(signMechanism, handle, data);
        //result is always 4 bytes

","Mechanism CKM_DES3_MAC always gives 4 bytes of output for DES, citing ""PKCS #11 v2.20"", section 12.13.14:

It always produces an output of size half as large as <NAME>’s blocksize.

You need to use CKM_DES3_MAC_GENERAL which allows signature lengths up to DES blocksize (see section 12.13.13). Desired signature length is specified in mechanism parameter CK_MAC_GENERAL_PARAMS.
If your token supports this mechanism the following code should work:
var data = new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };

var macParams = session.Factories.MechanismParamsFactory.CreateCkMacGeneralParams(8);
var signMechanism = session.Factories.MechanismFactory.Create(CKM.CKM_DES3_MAC_GENERAL, macParams);
    var signResult = session.Sign(signMechanism, handle, data);

Good luck!
","33","<pkcs#11><pkcs11interop>","0","1","1","2019-07-16 11:46:28","57054423","0","","10138396","","2019-07-16 11:46:28","2019-07-16 09:04:33",""
"57705174","What is the right error code of C_DeriveKey if the derivation key has CKA_DERIVE=0","I am developer of the PKCS#11 library. I think that the function C_DeriveKey should fail with the error code

CKR_KEY_FUNCTION_NOT_PERMITTED

if the key has CKA_DERIVE=0.But this error code is not listed as a possible return value for C_DeriveKey in the specification document . What is the right error code to be returned by C_DeriveKey in this case?
","","32","<pkcs#11>","1","","0","2019-08-29 13:30:17","","0","1","9785060","","2019-08-29 13:30:17","2019-08-29 07:29:49",""
"58269637","How does the Openssl Engine PKCS11 work and how can I use it?","I don’t understand how the openssl engine pkcs11 works. 
I’m trying to connect a device with tpm2 to a device without tpm, via serial port. I want to create certificates from a Root CA that ist located in the linux device and get it to the other device, which has the tpm2.0. Therefore I want to use openssl and the engine pkcs11.  
https://github.com/OpenSC/libp11
","","31","<openssl><pkcs#11>","0","","0","2019-10-07 12:34:02","","0","","","","","2019-10-07 12:34:02",""
"57212361","While creating keyztore instance getting error as pkcs11 not found","I am trying to create and initialize the IBMPKCS11 provider using config file on java 1.8 64 bit on Linux environment:
While creating the instance of Keystore, getting an error as pkcs11
not  found.
pkcs11.cfg file details are as follows:
name = nCipher   
library=/opt/nfast/toolkits/pkcs11/libcknfast.so   
slotListIndex=1    
attributes=compatibility

Code:
private PrivateKey privateKey;
private static com.ibm.crypto.pkcs11impl.provider.IBMPKCS11Impl 
provider;
provider = new com.ibm.crypto.pkcs11impl.provider.IBMPKCS11Impl(pkcs11.cfg);
Security.addProvider (provider);
privateKey =getPrivateKey(trans.decode(CARDSET_PASSPHRASE).toCharArray(),trans.decode(KEY_ALIAS));

public PrivateKey getPrivateKey(char[] passPhrase, String alias)
throws KeyStoreException, NoSuchAlgorithmException,         
{
    System.out.println (""Inside getPrivateKey method"");
    PrivateKey pk = null;
    try{
        KeyStore ks = KeyStore.getInstance(""PKCS11"", _provider.getName());    
        ks.load(null, passPhrase);   
        pk= (PrivateKey ) ks.getKey(alias, passPhrase);
    }catch(Exception e){
        e.printStackTrace();
    }
    return pk;
}

","","30","<java><public-key-encryption><pkcs#11><encryption-symmetric>","0","","0","2019-07-26 05:13:10","","3","","207421","","2019-07-26 05:13:10","2019-07-26 02:24:14",""
"57924123","How to use client certificate in yubikey in git command on Ubuntu","I want to authenticate the client in git command.
The client certificate is stored on a smart card (Yubikey).
The git command could refer to a client certificate file in directory as follows:
# ~/.gitconfig
[http]
    sslCaInfo = /path/to/ca.cer
    sslCert = /path/to/my.crt
    sslKey = /path/to/my.key

$ git clone https://my.host/...
# success

The curl command could refer to a client certificate in Yubikey as follows:
$ sudo apt install libengine-pkcs11-openssl

# /etc/ssl/openssl.cnf
openssl_conf        = openssl_init

[openssl_init]
engines = engine_section

[engine_section]
pkcs11 = pkcs11_section

[pkcs11_section]
engine_id = pkcs11
dynamic_path = /usr/lib/x86_64-linux-gnu/engines-1.1/libpkcs11.so
MODULE_PATH = /usr/lib/x86_64-linux-gnu/opensc-pkcs11.so
init = 0
PIN = 000000

$ curl --engine pkcs11 --key-type ENG --cert-type ENG --cacert ca.cer https://my.host/
# success

But I can't find a way to refer a client certificate in Yubikey with Git command.
","","30","<git><ubuntu><ssl><pkcs#11><yubico>","0","","0","2019-09-13 13:00:05","","1","","","","","2019-09-13 13:00:05",""
"56327489","specify the subject in hexadecimal format","So I was able to create a key pair with a label on a usb smart token with the following command:
pkcs11-tool -l --pin 123456 --keypairgen --key-type rsa:2048 --id 75 --label orange-black-key

Am looking at making another key with the subject field as well but am not sure how to go about it given the way they present it in the help:
--issuer <arg>            Specify the issuer in hexadecimal format (use with --type cert)
--subject <arg>           Specify the subject in hexadecimal format (use with --type cert/privkey/pubkey)

How do you specify these things on the command line ""in hexadecimal format"" ?
","","28","<bash><pkcs#11>","0","","0","2019-05-27 14:21:37","","1","","4288043","","2019-05-27 14:21:37","2019-05-27 13:57:09",""
"56756141","Expose SoftHSM library to the code running in host machine","I am generating keypairs in SoftHSMv2 using the node-webcrypto-p11 package that is installed locally on my computer. I want to setup a docker container for SoftHSM so that any developer can build the image and run the container using docker file in repo without having to go through the entire steps of building SoftHSM. 
I'm currently using this https://github.com/psmiraglia/docker-softhsm to build image and run container for SoftHSM. But I'm not sure how can I access the library inside the container in my code. Currently I'm using the code given below. Is there a method I can access the library with in the container.
NOTE: This is just to make the life of other developers not to be used for deployment. 
import {
    Crypto
} from 'node-webcrypto-p11';
// Need to set the library path from container.
// The given below path is for host machine.
const crypto = new Crypto({
    library: ""/usr/local/lib/softhsm/libsofthsm2.so"",
    name: ""SoftHSMv2"",
    slot: 0,
    readWrite: true,
    pin: ""0987654321"",
});

","","25","<docker><pkcs#11><softhsm>","0","","0","2019-06-25 14:17:08","","1","","","","","2019-06-25 14:17:08",""
"57444272","Do i need to use different pkcs11 wrapper for different executables?","I have different executable(.exe,.docker,.apk,.jar,.rpm). I have to sign all these applications using hardware crypto token using pkcs11 wrapper.Now for .exe,the standard application to sign is signtool.For .jar and .apk the standard application to sign is jarsigner.Is one wrapper is good enough to sign using crypto token or for different executable different wrapper i have to use?currently I am using nodejs wrapper (pkcs11js) and softhsm2 for testing.
","","24","<node.js><pkcs#11><jarsigner><signtool><softhsm>","0","","0","2019-08-10 17:29:46","","0","","","","","2019-08-10 17:29:46",""
"58322473","Unable to derive keys using PKCS11 and OpenSSL (CKR_ARGUMENTS_BAD)","I'm struggling here with something that should be simple.
All I am attempting to do is derive a key using ECDH.
Am using OpenSSL 1.1.0i-fips on openSuSE LEAP 15.
sudo pkcs11-tool -l --id 30 --derive --input-file /home/foo/tmp/y.der -m ECDH1-DERIVE --output-file /home/foo/tmp/foo
Using slot 0 with a present token (0x0)
Logging in to ""UserPIN (SmartCard-HSM)"".
Please enter User PIN: 
Using derive algorithm 0x00001050 ECDH1-DERIVE
error: PKCS11 function C_DeriveKey failed: rv = CKR_ARGUMENTS_BAD (0x7)
Aborting.

sudo pkcs15-tool --dump
Private EC Key [foobar]                                                                                                                                                                      
        Object Flags   : [0x3], private, modifiable                                                                                                                                            
        Usage          : [0x10C], sign, signRecover, derive                                                                                                                                    
        Access Flags   : [0x1D], sensitive, alwaysSensitive, neverExtract, local                                                                                                               
        FieldLength    : 512                                                                                                                                                                   
        Key ref        : 5 (0x5)                                                                                                                                                               
        Native         : yes
        Auth ID        : 01
        ID             : 30
        MD:guid        : <REMOVED FOR SECURITY>

openssl ec -in /home/foo/tmp/y.der  -pubin -inform der -text -noout
read EC key
Public-Key: (512 bit)
pub:
    04:9b:1a:36:f4:a7:6d:f8:fe:7b:af:b3:24:76:d4:
    60:49:08:5b:cd:d8:35:bf:49:de:f1:b6:57:17:1d:
    1b:e0:07:8e:e8:09:d9:df:e7:80:41:b9:c2:1f:4c:
    03:4f:2f:54:92:dd:a9:c1:7b:08:5d:3a:dd:3a:e0:
    a7:27:9f:78:91:9e:cc:d5:08:d8:03:6e:a5:ad:e0:
    45:9f:17:c3:7e:69:01:4e:73:ba:2a:3a:69:bb:da:
    82:bd:f7:f1:8b:19:86:dc:48:1f:fa:ed:78:0f:a7:
    92:64:ac:72:39:62:ba:d2:f3:90:53:da:17:dc:4d:
    11:69:9a:f2:08:88:be:a4:c5
ASN1 OID: brainpoolP512r1

Key was generated using:
pkcs11-tool  --login  --keypairgen --key-type EC:brainpoolP512r1 --id 30 --label foobar --usage-sign --usage-decrypt --usage-derive
","","20","<openssl><pkcs#11><opensc>","0","","0","2019-10-10 12:02:05","","0","","","","","2019-10-10 12:02:05",""
"53410613","How to initialize HSM cryptoky after lose connction repeatedly","I have network HSM and when I call it for the first time it work fine, but after 5 hour I can't call it because connection is lost and I can't initialize cryptoky library  repeatedly...  How can I do that?? I haven't worker with HSM before and I don't know how  to do it
InputStream inputStream = null;
ClassPathResource resource = new here`ClassPathResource(""params.cfg"");
inputStream = resource.getInputStream();
SunPKCS11  provider = new SunPKCS11(inputStream);
Security.addProvider(provider);

","","18","<java><pkcs#11>","0","","0","2018-11-21 11:04:18","","1","","8406822","","2018-11-21 11:04:18","2018-11-21 10:57:21",""
"58201147","HSM - RSA Key Coefficient with one byte less","I'm generating some RSA Key pair in an HSM (PKCS#11) and retrieving some of the atributes of the private key, like the Modulus, Exponent, etc. But, sometimes the Coefficient comes with one byte less than expected (in my case, I'm generating a 1024 bits key - 128 bytes). I suspect it is skiping the first byte if it's ""00"", since I had this problem when using RSA in software with BigInt, but I thought that the HSM wouldn't had this problem.
Do you know if it's a behaviour of the HSM and if I have a configuration to fix this instead of adding a ""00"" to my bytearray, since I'm not sure it's the solution?
","","15","<rsa><private-key><pkcs#11><hsm>","0","","0","2019-10-02 12:04:45","","0","","","","","2019-10-02 12:04:45",""
