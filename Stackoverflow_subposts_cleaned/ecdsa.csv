post_link,title,body_question,body_answer,viewcount,tags,score,score_answer,answercount,LastActivityDate,AcceptedAnswerId,CommentCount,FavoriteCount,LastEditorUserId,LastEditorDisplayName,LastEditDate,CreationDate,ClosedDate
"34451214","How to sign and verify signature with ecdsa in python","I need to sign a hash of 256 bits with ECDSA using a private key of 256 bits, just as bitcoin does, and I am reaching desperation because of the lack of documentation of ecdsa in python.
I found a lot of codes on the internet, but there was nothing as easy as just ecdsa.sign(msg, privkey) or similar, everything I found is a lot of code of mathematical stuff I don't understand, but yet they use the ecdsa library (I don't know why they wouldn't add a signing function in a library that is going to be used to sign stuff, instead a page of code is needed when using the library?).
This is the best code I found so far:
def ecdsa_sign(val, secret_exponent):
    """"""Return a signature for the provided hash, using the provided
    random nonce. It is absolutely vital that random_k be an unpredictable
    number in the range [1, self.public_key.point.order()-1].  If
    an attacker can guess random_k, he can compute our private key from a
    single signature. Also, if an attacker knows a few high-order
    bits (or a few low-order bits) of random_k, he can compute our private
    key from many signatures. The generation of nonces with adequate
    cryptographic strength is very difficult and far beyond the scope
    of this comment.

    May raise RuntimeError, in which case retrying with a new
    random value k is in order.
    """"""
    G = ecdsa.SECP256k1
    n = G.order()
    k = deterministic_generate_k(n, secret_exponent, val)
    p1 = k * G
    r = p1.x()
    if r == 0: raise RuntimeError(""amazingly unlucky random number r"")
    s = ( ecdsa.numbertheory.inverse_mod( k, n ) * ( val + ( secret_exponent * r ) % n ) ) % n
    if s == 0: raise RuntimeError(""amazingly unlucky random number s"")

    return signature_to_der(r, s)

def deterministic_generate_k(generator_order, secret_exponent, val, hash_f=hashlib.sha256):
    """"""
    Generate K value according to https://tools.ietf.org/html/rfc6979
    """"""
    n = generator_order
    order_size = (bit_length(n) + 7) // 8
    hash_size = hash_f().digest_size
    v = b'\x01' * hash_size
    k = b'\x00' * hash_size
    priv = intbytes.to_bytes(secret_exponent, length=order_size)
    shift = 8 * hash_size - bit_length(n)
    if shift > 0:
        val >>= shift
    if val > n:
        val -= n
    h1 = intbytes.to_bytes(val, length=order_size)
    k = hmac.new(k, v + b'\x00' + priv + h1, hash_f).digest()
    v = hmac.new(k, v, hash_f).digest()
    k = hmac.new(k, v + b'\x01' + priv + h1, hash_f).digest()
    v = hmac.new(k, v, hash_f).digest()

    while 1:
        t = bytearray()

        while len(t) < order_size:
            v = hmac.new(k, v, hash_f).digest()
            t.extend(v)

        k1 = intbytes.from_bytes(bytes(t))

        k1 >>= (len(t)*8 - bit_length(n))
        if k1 >= 1 and k1 < n:
            return k1

        k = hmac.new(k, v + b'\x00', hash_f).digest()
        v = hmac.new(k, v, hash_f).digest()

But I just can't trust a code like that because I have no idea what it does. Also, the comments in ecdsa_sign says that returns a signature given the value, the secret exponent, and a nonce. It says its very important to have a nonce, but I just can't figure out where that nonce is.
Is there any simple, one-line way to sign and verify ECDSA signatures using whatever trusted library in python on windows?
","You can try using the python ecdsa package, using Python3:
pip3 install ecdsa

Usage:
import ecdsa

# SECP256k1 is the Bitcoin elliptic curve
sk = ecdsa.SigningKey.generate(curve=ecdsa.SECP256k1) 
vk = sk.get_verifying_key()
sig = sk.sign(b""message"")
vk.verify(sig, b""message"") # True

To verify an existing signature with a public key:
import ecdsa

message = b""message""
public_key = '98cedbb266d9fc38e41a169362708e0509e06b3040a5dfff6e08196f8d9e49cebfb4f4cb12aa7ac34b19f3b29a17f4e5464873f151fd699c2524e0b7843eb383'
sig = '740894121e1c7f33b174153a7349f6899d0a1d2730e9cc59f674921d8aef73532f63edb9c5dba4877074a937448a37c5c485e0d53419297967e95e9b1bef630d'

vk = ecdsa.VerifyingKey.from_string(bytes.fromhex(public_key), curve=ecdsa.SECP256k1)
vk.verify(bytes.fromhex(sig), message) # True

The package is compatible with Python 2 as well
","17155","<python><ecdsa>","13","25","3","2019-01-31 23:58:42","","4","","","","","2015-12-24 10:20:58",""
"34451214","How to sign and verify signature with ecdsa in python","I need to sign a hash of 256 bits with ECDSA using a private key of 256 bits, just as bitcoin does, and I am reaching desperation because of the lack of documentation of ecdsa in python.
I found a lot of codes on the internet, but there was nothing as easy as just ecdsa.sign(msg, privkey) or similar, everything I found is a lot of code of mathematical stuff I don't understand, but yet they use the ecdsa library (I don't know why they wouldn't add a signing function in a library that is going to be used to sign stuff, instead a page of code is needed when using the library?).
This is the best code I found so far:
def ecdsa_sign(val, secret_exponent):
    """"""Return a signature for the provided hash, using the provided
    random nonce. It is absolutely vital that random_k be an unpredictable
    number in the range [1, self.public_key.point.order()-1].  If
    an attacker can guess random_k, he can compute our private key from a
    single signature. Also, if an attacker knows a few high-order
    bits (or a few low-order bits) of random_k, he can compute our private
    key from many signatures. The generation of nonces with adequate
    cryptographic strength is very difficult and far beyond the scope
    of this comment.

    May raise RuntimeError, in which case retrying with a new
    random value k is in order.
    """"""
    G = ecdsa.SECP256k1
    n = G.order()
    k = deterministic_generate_k(n, secret_exponent, val)
    p1 = k * G
    r = p1.x()
    if r == 0: raise RuntimeError(""amazingly unlucky random number r"")
    s = ( ecdsa.numbertheory.inverse_mod( k, n ) * ( val + ( secret_exponent * r ) % n ) ) % n
    if s == 0: raise RuntimeError(""amazingly unlucky random number s"")

    return signature_to_der(r, s)

def deterministic_generate_k(generator_order, secret_exponent, val, hash_f=hashlib.sha256):
    """"""
    Generate K value according to https://tools.ietf.org/html/rfc6979
    """"""
    n = generator_order
    order_size = (bit_length(n) + 7) // 8
    hash_size = hash_f().digest_size
    v = b'\x01' * hash_size
    k = b'\x00' * hash_size
    priv = intbytes.to_bytes(secret_exponent, length=order_size)
    shift = 8 * hash_size - bit_length(n)
    if shift > 0:
        val >>= shift
    if val > n:
        val -= n
    h1 = intbytes.to_bytes(val, length=order_size)
    k = hmac.new(k, v + b'\x00' + priv + h1, hash_f).digest()
    v = hmac.new(k, v, hash_f).digest()
    k = hmac.new(k, v + b'\x01' + priv + h1, hash_f).digest()
    v = hmac.new(k, v, hash_f).digest()

    while 1:
        t = bytearray()

        while len(t) < order_size:
            v = hmac.new(k, v, hash_f).digest()
            t.extend(v)

        k1 = intbytes.from_bytes(bytes(t))

        k1 >>= (len(t)*8 - bit_length(n))
        if k1 >= 1 and k1 < n:
            return k1

        k = hmac.new(k, v + b'\x00', hash_f).digest()
        v = hmac.new(k, v, hash_f).digest()

But I just can't trust a code like that because I have no idea what it does. Also, the comments in ecdsa_sign says that returns a signature given the value, the secret exponent, and a nonce. It says its very important to have a nonce, but I just can't figure out where that nonce is.
Is there any simple, one-line way to sign and verify ECDSA signatures using whatever trusted library in python on windows?
","you can also use sep256k1 library in Python to ecdsa sign and verify. The public and private keys are the keys generated from Bip32 specifications and seed from Bip39 specifications.
 Private key  is  1149ab92fbc40993f21336206ca184a9dc2d5231eb575d2a0a6d56773bf0f356
 Public key  is  03c7ac999403591bceacca3d37598886f7c41943c8045c7e1cb5a9295d0003cc5b


from sawtooth_signing.secp256k1 import Secp256k1PrivateKey
from sawtooth_signing.secp256k1 import Secp256k1PublicKey

def sign_nonce(hex_private_key):
   nonce = random.randint(2**10, 2**32)
   checksum = hashlib.sha3_512(str(nonce).encode()).hexdigest()

   private_key = Secp256k1PrivateKey.from_hex(hex_private_key)
   message = private_key.secp256k1_private_key.ecdsa_sign(str(nonce).encode())
   serialized_message = private_key.secp256k1_private_key.ecdsa_serialize(message)
   hex_message = binascii.hexlify(serialized_message)
   return nonce, checksum, hex_message


def verify_nonce(nonce, checksum, message, hex_public_key):
   ##message is hex encoded
   message = binascii.unhexlify(message)
   public_key = Secp256k1PublicKey.from_hex(hex_public_key)
   unserialized = public_key.secp256k1_public_key.ecdsa_deserialize(message)
   result = public_key.secp256k1_public_key.ecdsa_verify(str(nonce).encode(),    unserialized)
  return result

The result will be True or False depending upon the verification.
i have used uint32(typings) or int as a nonce, but any byte array or string can be used. strings need to be converted to bytes. 
","17155","<python><ecdsa>","13","0","3","2019-01-31 23:58:42","","4","","","","","2015-12-24 10:20:58",""
"34451214","How to sign and verify signature with ecdsa in python","I need to sign a hash of 256 bits with ECDSA using a private key of 256 bits, just as bitcoin does, and I am reaching desperation because of the lack of documentation of ecdsa in python.
I found a lot of codes on the internet, but there was nothing as easy as just ecdsa.sign(msg, privkey) or similar, everything I found is a lot of code of mathematical stuff I don't understand, but yet they use the ecdsa library (I don't know why they wouldn't add a signing function in a library that is going to be used to sign stuff, instead a page of code is needed when using the library?).
This is the best code I found so far:
def ecdsa_sign(val, secret_exponent):
    """"""Return a signature for the provided hash, using the provided
    random nonce. It is absolutely vital that random_k be an unpredictable
    number in the range [1, self.public_key.point.order()-1].  If
    an attacker can guess random_k, he can compute our private key from a
    single signature. Also, if an attacker knows a few high-order
    bits (or a few low-order bits) of random_k, he can compute our private
    key from many signatures. The generation of nonces with adequate
    cryptographic strength is very difficult and far beyond the scope
    of this comment.

    May raise RuntimeError, in which case retrying with a new
    random value k is in order.
    """"""
    G = ecdsa.SECP256k1
    n = G.order()
    k = deterministic_generate_k(n, secret_exponent, val)
    p1 = k * G
    r = p1.x()
    if r == 0: raise RuntimeError(""amazingly unlucky random number r"")
    s = ( ecdsa.numbertheory.inverse_mod( k, n ) * ( val + ( secret_exponent * r ) % n ) ) % n
    if s == 0: raise RuntimeError(""amazingly unlucky random number s"")

    return signature_to_der(r, s)

def deterministic_generate_k(generator_order, secret_exponent, val, hash_f=hashlib.sha256):
    """"""
    Generate K value according to https://tools.ietf.org/html/rfc6979
    """"""
    n = generator_order
    order_size = (bit_length(n) + 7) // 8
    hash_size = hash_f().digest_size
    v = b'\x01' * hash_size
    k = b'\x00' * hash_size
    priv = intbytes.to_bytes(secret_exponent, length=order_size)
    shift = 8 * hash_size - bit_length(n)
    if shift > 0:
        val >>= shift
    if val > n:
        val -= n
    h1 = intbytes.to_bytes(val, length=order_size)
    k = hmac.new(k, v + b'\x00' + priv + h1, hash_f).digest()
    v = hmac.new(k, v, hash_f).digest()
    k = hmac.new(k, v + b'\x01' + priv + h1, hash_f).digest()
    v = hmac.new(k, v, hash_f).digest()

    while 1:
        t = bytearray()

        while len(t) < order_size:
            v = hmac.new(k, v, hash_f).digest()
            t.extend(v)

        k1 = intbytes.from_bytes(bytes(t))

        k1 >>= (len(t)*8 - bit_length(n))
        if k1 >= 1 and k1 < n:
            return k1

        k = hmac.new(k, v + b'\x00', hash_f).digest()
        v = hmac.new(k, v, hash_f).digest()

But I just can't trust a code like that because I have no idea what it does. Also, the comments in ecdsa_sign says that returns a signature given the value, the secret exponent, and a nonce. It says its very important to have a nonce, but I just can't figure out where that nonce is.
Is there any simple, one-line way to sign and verify ECDSA signatures using whatever trusted library in python on windows?
","How to install it:
pip install starkbank-ecdsa
How to use it:
# Generate Keys
privateKey = PrivateKey()
publicKey = privateKey.publicKey()

message = ""My test message""

# Generate Signature
signature = Ecdsa.sign(message, privateKey)

# Verify if signature is valid
print Ecdsa.verify(message, signature, publicKey)

Full reference: https://github.com/starkbank/ecdsa-python
","17155","<python><ecdsa>","13","2","3","2019-01-31 23:58:42","","4","","","","","2015-12-24 10:20:58",""
"17893579","https with ECDHE-ECDSA-AES256-GCM-SHA384 in windows 2012","I have been a long time reader but this is my first real post on a topic that I couldn't find a solution to.
I am currently hosting a website on Windows 2012 that I would like to get the latest TLS 1.2 ciphersuites running on.
I am aware of how to enable TLS 1.1 and TLS 1.2 in windows and have done so(via registry edits). I have also changed the cipher order to what I would like it to be.
My question is: How do i actually go through and set up my ECDHE / ECDSA portion of the cipher suite after this step?
When i view the site in the latest chrome beta (which supports ECDHE and ECDSA in TLS 1.2 provided you use the supported curves) it seems to skip all of the ECHDE ciphersuites.
Is there something else i need to do to get ECDHE/ECDSA properly enabled?
I have read around on the net trying to solve this myself and they mention making copies of your root cert and then modifying them to somehow support ECDHE. Am i barking up the wrong tree?
Thank you in advance for any and all support with this issue.
Edit: adding clarification/progress
After more research, I have found that in order to get ECDSA to work, you need an ECDSA certificate. The only way to get one at this time is to self-sign, as the cert-cartel has not yet come up with proper cross-licensing agreements and fee structures for Ellipic Curve Certificates yet.
Since self-signing is not an option for this site, I have removed all ECDSA suites from the cipher-order.
Unfortunately, because all of the AES Galois Counter Mode suites were also ECDSA, this rules those out for the time being.
This leaves me with a strongest cipher suite of ECDHE_RSA_WITH_AES_256_CBC_SHA384_P521 which I BELIEVE is supported by the latest version of Chrome beta correct? I can't seem to get Chrome to pick up anything beyond SHA-1. Is there no SHA-2 support? even in the latest beta?
","AES-GCM is about how you encrypt the data in your connexion, EC-DSA or RSA about how the server identifies itself to the client. There is therefore no reason why you couldn't do AES-GCM encryption with a RSA authentication.
RFC 5289 does define the needed suite for that :
http://tools.ietf.org/html/rfc5289#section-3.2

CipherSuite TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256    = {0xC0,0x2F};
CipherSuite TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384    = {0xC0,0x30};
CipherSuite TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256     = {0xC0,0x31};
CipherSuite TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384     = {0xC0,0x32};


It's not however necessarily easy to find both the client and the server that will support them.
","11743","<windows><security><ssl><ssl-certificate><ecdsa>","6","3","2","2014-11-12 14:24:50","","2","1","2555174","","2013-07-29 09:24:20","2013-07-27 02:09:04",""
"17893579","https with ECDHE-ECDSA-AES256-GCM-SHA384 in windows 2012","I have been a long time reader but this is my first real post on a topic that I couldn't find a solution to.
I am currently hosting a website on Windows 2012 that I would like to get the latest TLS 1.2 ciphersuites running on.
I am aware of how to enable TLS 1.1 and TLS 1.2 in windows and have done so(via registry edits). I have also changed the cipher order to what I would like it to be.
My question is: How do i actually go through and set up my ECDHE / ECDSA portion of the cipher suite after this step?
When i view the site in the latest chrome beta (which supports ECDHE and ECDSA in TLS 1.2 provided you use the supported curves) it seems to skip all of the ECHDE ciphersuites.
Is there something else i need to do to get ECDHE/ECDSA properly enabled?
I have read around on the net trying to solve this myself and they mention making copies of your root cert and then modifying them to somehow support ECDHE. Am i barking up the wrong tree?
Thank you in advance for any and all support with this issue.
Edit: adding clarification/progress
After more research, I have found that in order to get ECDSA to work, you need an ECDSA certificate. The only way to get one at this time is to self-sign, as the cert-cartel has not yet come up with proper cross-licensing agreements and fee structures for Ellipic Curve Certificates yet.
Since self-signing is not an option for this site, I have removed all ECDSA suites from the cipher-order.
Unfortunately, because all of the AES Galois Counter Mode suites were also ECDSA, this rules those out for the time being.
This leaves me with a strongest cipher suite of ECDHE_RSA_WITH_AES_256_CBC_SHA384_P521 which I BELIEVE is supported by the latest version of Chrome beta correct? I can't seem to get Chrome to pick up anything beyond SHA-1. Is there no SHA-2 support? even in the latest beta?
","I had similar experiences with Win2008 R2.
Depending on the certificate, GCM cipher is offered by the server or not.
With self-signed ECDSA certificate i got GCM to work but older browsers
or Windows XP can't connect to such a https-site.
Windows doesnt support any TLS_ECDHE_RSA...GCM... ciphers:
http://msdn.microsoft.com/en-us/library/aa374757(v=vs.85).aspx
Thus normal RSA-certificates don't work with GCM under Windows.
Browser compatibility:
http://www.g-sec.lu/sslharden/SSL_comp_report2011.pdf
","11743","<windows><security><ssl><ssl-certificate><ecdsa>","6","3","2","2014-11-12 14:24:50","","2","1","2555174","","2013-07-29 09:24:20","2013-07-27 02:09:04",""
"25261823","ECDSA signature generation using secp256r1 curve and SHA256 algorithm - BouncyCastle","I am trying to generate signature using ECDSA with secp256r1 curve (P256) and SHA256 algorithm for message hash. Also i am using Bouncy Castle libraries. 
Code below, 
public class MyTest {

    /**
     * @param args
     */
    public static void main(String[] args) {
        new MyTest().getSign();
    }

    void getSign() {
        // Get the instance of the Key Generator with ""EC"" algorithm

        try {
            KeyPairGenerator g = KeyPairGenerator.getInstance(""EC"");
            ECGenParameterSpec kpgparams = new ECGenParameterSpec(""secp256r1"");
            g.initialize(kpgparams);

            KeyPair pair = g.generateKeyPair();
            // Instance of signature class with SHA256withECDSA algorithm
            Signature ecdsaSign = Signature.getInstance(""SHA256withECDSA"");
            ecdsaSign.initSign(pair.getPrivate());

            System.out.println(""Private Keys is::"" + pair.getPrivate());
            System.out.println(""Public Keys is::"" + pair.getPublic());

            String msg = ""text ecdsa with sha256"";//getSHA256(msg)
            ecdsaSign.update((msg + pair.getPrivate().toString())
                    .getBytes(""UTF-8""));

            byte[] signature = ecdsaSign.sign();
            System.out.println(""Signature is::""
                    + new BigInteger(1, signature).toString(16));

            // Validation
            ecdsaSign.initVerify(pair.getPublic());
            ecdsaSign.update(signature);
            if (ecdsaSign.verify(signature))
                System.out.println(""valid"");
            else
                System.out.println(""invalid!!!!"");

        } catch (Exception e) {
            // TODO: handle exception
            e.printStackTrace();
        }

    }

}

Here key pairs are generated using KeyPair , but for my requirement I will be having a static privateKey and public key. Also, validation of signature is always returning false.
Need help, how can I have static private key and on validation part.
","Jackpot - nothing in your title is a problem!
First, you probably aren't actually using BouncyCastle. Sun/Oracle Java 7 and 8 now includes an EC provider (earlier versions did not) and the one-arg form of getInstance uses the first available provider, which is normally SunEC unless you or someone has altered the provider list.
TO VERIFY A SIGNATURE: pass the same data to the verifying Signature.update() as you passed to the signing Signature.update(). Exactly the same, byte for byte. Pass the signature value only to Signature.verify(). Putting PrivateKey.toString() in the data is silly; this value is specific to the running Java process, so you'll have to send it to the receiving process (if different, as it normally should be) where it is useless and a waste of space.
TO USE A STATIC KEY: do just that. Create a keypair and store it someplace, then read it in and use it. The easiest secure (password protected) store is a Java KeyStore (JKS) file, but that requires a certificate chain (perhaps a dummy one) which is a nuisance to code yourself; fortunately the keytool utility with -genkeypair generates a keypair with a dummy selfsigned certificate, and for -keyalg ec -keysize 256 it uses the (very popular) secp256r1 curve. Also specify -alias name of your choice, -keystore filename, any names you like for the dummy cert, and passwords. To use a keypair from a JKS file:

use java.security.KeyStore.getInstance(""JKS"") to create a store object and pass .load(InputStream,char[]) a FileInputStream on the file, and the password.
use .getKey(String alias,char[] password) and cast to get the PrivateKey. Use for signing.
use .getCertificateChain(String alias)[0].getPublicKey() to get the PublicKey from the first (only) cert. Use for verifying.

","11708","<java><bouncycastle><sha256><ecdsa>","3","7","1","2014-11-05 05:03:06","25263424","0","3","2432317","","2014-11-05 05:03:06","2014-08-12 10:18:30",""
"23176231","no module named ecdsa with Paramiko","I keep coming up with the error no module named ecdsa when I run a program with Paramiko. I have installed it using pip, and it says that it has installed, but when I run the program again, it comes up with the error again!
What can I do? I'm using Linux, by the way.
","Make sure you have ecdsa module installed in your linux system. Go to prompt, and try running the following commands:
    mamun@bobolink:~$ python
    Python 2.7.5+ (default, Feb 27 2014, 19:37:08)
    [GCC 4.8.1] on linux2
    Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.
    >>> from ecdsa import SigningKey
    >>> sk = SigningKey.generate() # uses NIST192p
    >>>

If you get error, then try installing the ecdsa module by the following command:
    mamun@bobolink:~$ sudo pip install ecdsa

And you will get the following output that would confirm that the package has been installed.
    Downloading/unpacking ecdsa
      Downloading ecdsa-0.11.tar.gz (45kB): 45kB downloaded
      Running setup.py egg_info for package ecdsa

    Installing collected packages: ecdsa
      Running setup.py install for ecdsa

    Successfully installed ecdsa
    Cleaning up...

","11549","<python><paramiko><ecdsa>","5","11","2","2016-05-03 15:35:38","23177224","0","","","","","2014-04-19 22:19:08",""
"23176231","no module named ecdsa with Paramiko","I keep coming up with the error no module named ecdsa when I run a program with Paramiko. I have installed it using pip, and it says that it has installed, but when I run the program again, it comes up with the error again!
What can I do? I'm using Linux, by the way.
","If you are on Python 3.x you might have to use pip3 instead of pip:
sudo pip3 install ecdsa

","11549","<python><paramiko><ecdsa>","5","2","2","2016-05-03 15:35:38","23177224","0","","","","","2014-04-19 22:19:08",""
"13791219","SSH fingerprint verification for Amazon AWS EC2 server with ECDSA?","When I create a new Amazon EC2 server, I connect to it using ssh as usual.
I see the typical warning:
$ ssh myserver  
The authenticity of host 'ec2-12-34-567-890.compute-1.amazonaws.com (12.34.567.890)'     can't be established.
ECDSA key fingerprint is 31:66:15:d2:19:41:2b:09:8a:8f:9f:bd:de:c6:ff:07.
Are you sure you want to continue connecting (yes/no)? 

How do I verify the fingerprint before I sign in? 
Ideally an answer is based on something besides the original creation console log -- because the log may get flushed out after a system restart, or during a large system installation script that generates a lot of output, or the connection is to an older system with keys that weren't tracked at creation time.
","Here are two solutions that worked for me during the creation of the EC2 system. 
Solution 1: Use the Amazon EC2 dashboard

Go to https://console.aws.amazon.com
Tap ""EC2"" link.
Tap ""Instances"" in the left column
Tap the instance name you want
Tap the select button ""Actions"" and choose ""Get System Log"" (a.k.a. ""Console Output"")
In the console output, you should see the keys being generated

Solution 2: Use the AWS EC2 command line
You can use the aws command or ec2-get-console-output command. Both are available for download from Amazon.
To use your EC2 private key pem file, certificate pem file, region, and instance:
ec2-get-console-output \
  --private-key pk-ABCDEF1234567890.pem \
  --cert cert-ABCDEF1234567890.pem \
  --region us-east-1c \
  i-e706689a   

The output shows the ssh host key fingerprints like this:
ec2: -----BEGIN SSH HOST KEY FINGERPRINTS-----
ec2: 1024 e0:79:1e:ba:2e:3c:71:87:2c:f5:62:2b:0d:1b:6d:7b  root@ip-10-243-118-182 (DSA)
ec2: 256 31:66:15:d2:19:41:2b:09:8a:8f:9f:bd:de:c6:ff:07  root@ip-10-243-118-182 (ECDSA)
ec2: 2048 ce:ec:3b:d3:34:3f:f3:45:76:81:9e:76:7a:d9:f5:e8  root@ip-10-243-118-182 (RSA)
ec2: -----END SSH HOST KEY FINGERPRINTS-----

The aws tool works similarly. 
Note: these solutions only work during creation time, or when you can get the console logs. For a broader solution that works any time, see Martin's answer.
","11482","<ssh><amazon-web-services><amazon-ec2><fingerprint><ecdsa>","32","18","2","2019-06-27 13:07:31","24773982","1","10","528726","","2014-07-22 17:04:52","2012-12-09 20:02:32",""
"13791219","SSH fingerprint verification for Amazon AWS EC2 server with ECDSA?","When I create a new Amazon EC2 server, I connect to it using ssh as usual.
I see the typical warning:
$ ssh myserver  
The authenticity of host 'ec2-12-34-567-890.compute-1.amazonaws.com (12.34.567.890)'     can't be established.
ECDSA key fingerprint is 31:66:15:d2:19:41:2b:09:8a:8f:9f:bd:de:c6:ff:07.
Are you sure you want to continue connecting (yes/no)? 

How do I verify the fingerprint before I sign in? 
Ideally an answer is based on something besides the original creation console log -- because the log may get flushed out after a system restart, or during a large system installation script that generates a lot of output, or the connection is to an older system with keys that weren't tracked at creation time.
","As @joelparkerhenderson's answer covers, you can collect host key fingerprint from server's initial start log, when host keys are generated (by the cloud-init script):


If you fail to collect the keys this way, you can get them by connecting to your target instance from another trusted instance within private Amazon network, thus keeping yourself safe from man-in-the-middle attacks. 
When on the trusted instance (the one you know fingerprints for) terminal, you can use following commands to collect fingerprints (172.33.31.199 is the private IP):
$ ssh-keyscan 172.33.31.199 > ec2key
$ ssh-keygen -l -f ec2key
256 SHA256:oZHeiMEPLKetRgd3M5Itgwaqr2zJJH93EvSdx5UoHbQ <ip> (ED25519)
2048 SHA256:8zg105EUFFrPFpVzdfTGsgXnxuSpTiQd85k0uNapUio <ip> (RSA)
256 SHA256:L7UXLw0djE5B9W7ZhvrkYVSTZyi1MEQ2dBaRtpkkUGY <ip> (ECDSA)


If you do not have another instance, whose fingerprints you know, create new temporary instance, just for the purpose of collecting the keys. First find keys for the new temporary instance, using it's initial start log. Connect to the temporary instance from public network. Then collect keys of the target instance by connecting to it from the temporary instance, over private Amazon network. After that you can discard the temporary instance.

I have prepared Guide for connecting to EC2 instance safely using WinSCP.
","11482","<ssh><amazon-web-services><amazon-ec2><fingerprint><ecdsa>","32","29","2","2019-06-27 13:07:31","24773982","1","10","528726","","2014-07-22 17:04:52","2012-12-09 20:02:32",""
"17269238","ECDSA signature length","What will the signature length for 256 bit EC key in ECDSA algorithm?
I wanted to validated signature length for the same. It will be great if some body can help me with one EC key set.
","It depends on how you encode the signature. This is the code segment from OpenSSL that measures the length of ECDSA signature in DER format. 
/** ECDSA_size
 * returns the maximum length of the DER encoded signature
 * \param  eckey pointer to a EC_KEY object
 * \return numbers of bytes required for the DER encoded signature
 */

int ECDSA_size(const EC_KEY *r)
{
    int ret,i;
    ASN1_INTEGER bs;
    BIGNUM  *order=NULL;
    unsigned char buf[4];
    const EC_GROUP *group;

    if (r == NULL)
        return 0;
    group = EC_KEY_get0_group(r);
    if (group == NULL)
        return 0;

    if ((order = BN_new()) == NULL) return 0;
    if (!EC_GROUP_get_order(group,order,NULL))
    {
        BN_clear_free(order);
        return 0;
    } 
    i=BN_num_bits(order);
    bs.length=(i+7)/8;
    bs.data=buf;
    bs.type=V_ASN1_INTEGER;
    /* If the top bit is set the asn1 encoding is 1 larger. */
    buf[0]=0xff;    

    i=i2d_ASN1_INTEGER(&bs,NULL);
    i+=i; /* r and s */
    ret=ASN1_object_size(1,i,V_ASN1_SEQUENCE);
    BN_clear_free(order);
    return(ret);
}

The result of the above function with an EC_KEY on prime256 curve as parameter is
sig_len = ECDSA_size(eckey);

where sig_len is 72.
You need 72 bytes for DER encoded ECDSA signature using a 256-bit EC key.
","9562","<elliptic-curve><ecdsa>","2","9","1","2013-06-26 06:19:24","","1","4","","","","2013-06-24 06:30:04",""
"16975842","How to convert an ECDSA key from hex to PEM format","I have a hex string that allegedly contains an EC public key. I need to convert this hex string to PEM format (""key.pem"" in following example) in order to investigate the contents which I plan to do with ""openssl ec -in key.pem -text -noout"". Is this possible? 
","I'm assuming by hex, you mean a binary (DER formatted) key?  Or is this hex string in a human readable file with a header beginning with ""-----BEGIN PUBLIC KEY-----""?  If you see that header, it is already in PEM format.
If it's in binary format, try this to convert a binary key to pem:
openssl ec -in key.der -inform DER -pubin -out keyout.pem -outform PEM

where ""key.der"" is your binary key.
But, you should also be able to investigate the contents without converting to PEM.  Just use:
openssl ec -in key.der -inform DER -pubin -text -noout

","8601","<openssl><format><public-key><ecdsa>","2","0","2","2013-11-12 04:54:02","","0","1","1883112","","2013-06-07 03:42:23","2013-06-07 03:36:57",""
"16975842","How to convert an ECDSA key from hex to PEM format","I have a hex string that allegedly contains an EC public key. I need to convert this hex string to PEM format (""key.pem"" in following example) in order to investigate the contents which I plan to do with ""openssl ec -in key.pem -text -noout"". Is this possible? 
","If you're starting with a hex string, you need to hex decode it to get the DER-encoding first.
The hex string should start with 30... which is indicates that it's an ASN.1 sequence.
This shell command will hex decode (using xxd), then use OpenSSL to parse the resulting DER public key:
echo ""30...."" | xxd -r -p - | openssl ec -inform der -pubin -noout -text

To output a PEM, remove -noout -text, add -pubout -out publickey.pem 
echo ""30...."" | xxd -r -p - | openssl ec -inform der -pubin -pubout -out publickey.pem

If it's actually a private key, just omit -pubin and -pubout.
","8601","<openssl><format><public-key><ecdsa>","2","2","2","2013-11-12 04:54:02","","0","1","1883112","","2013-06-07 03:42:23","2013-06-07 03:36:57",""
"28647272","OpenSSL on Mac OS X for SHA-256 signature algorithm","I want to create a self-signed certificate (root ca) with OpenSSL. The signature algorithm needs to be a ECDSA signature with SHA-256 hash. 
On my Mac OS X (Yosemite), I have OpenSSL version 0.9.8zc (from Oct 15, 2014) installed. When I call openssl ciphers -v on the command line, it seems that my current OpenSSL version does not support SHA2 (with SHA-256 etc.). 
DHE-RSA-AES256-SHA      SSLv3 Kx=DH       Au=RSA  Enc=AES(256)  Mac=SHA1
DHE-DSS-AES256-SHA      SSLv3 Kx=DH       Au=DSS  Enc=AES(256)  Mac=SHA1
AES256-SHA              SSLv3 Kx=RSA      Au=RSA  Enc=AES(256)  Mac=SHA1
EDH-RSA-DES-CBC3-SHA    SSLv3 Kx=DH       Au=RSA  Enc=3DES(168) Mac=SHA1
EDH-DSS-DES-CBC3-SHA    SSLv3 Kx=DH       Au=DSS  Enc=3DES(168) Mac=SHA1
DES-CBC3-SHA            SSLv3 Kx=RSA      Au=RSA  Enc=3DES(168) Mac=SHA1
DES-CBC3-MD5            SSLv2 Kx=RSA      Au=RSA  Enc=3DES(168) Mac=MD5 
DHE-RSA-AES128-SHA      SSLv3 Kx=DH       Au=RSA  Enc=AES(128)  Mac=SHA1
DHE-DSS-AES128-SHA      SSLv3 Kx=DH       Au=DSS  Enc=AES(128)  Mac=SHA1
AES128-SHA              SSLv3 Kx=RSA      Au=RSA  Enc=AES(128)  Mac=SHA1
DHE-RSA-SEED-SHA        SSLv3 Kx=DH       Au=RSA  Enc=SEED(128) Mac=SHA1
DHE-DSS-SEED-SHA        SSLv3 Kx=DH       Au=DSS  Enc=SEED(128) Mac=SHA1
SEED-SHA                SSLv3 Kx=RSA      Au=RSA  Enc=SEED(128) Mac=SHA1
RC2-CBC-MD5             SSLv2 Kx=RSA      Au=RSA  Enc=RC2(128)  Mac=MD5 
RC4-SHA                 SSLv3 Kx=RSA      Au=RSA  Enc=RC4(128)  Mac=SHA1
RC4-MD5                 SSLv3 Kx=RSA      Au=RSA  Enc=RC4(128)  Mac=MD5 
RC4-MD5                 SSLv2 Kx=RSA      Au=RSA  Enc=RC4(128)  Mac=MD5 
EDH-RSA-DES-CBC-SHA     SSLv3 Kx=DH       Au=RSA  Enc=DES(56)   Mac=SHA1
EDH-DSS-DES-CBC-SHA     SSLv3 Kx=DH       Au=DSS  Enc=DES(56)   Mac=SHA1
DES-CBC-SHA             SSLv3 Kx=RSA      Au=RSA  Enc=DES(56)   Mac=SHA1
DES-CBC-MD5             SSLv2 Kx=RSA      Au=RSA  Enc=DES(56)   Mac=MD5 
EXP-EDH-RSA-DES-CBC-SHA SSLv3 Kx=DH(512)  Au=RSA  Enc=DES(40)   Mac=SHA1 export
EXP-EDH-DSS-DES-CBC-SHA SSLv3 Kx=DH(512)  Au=DSS  Enc=DES(40)   Mac=SHA1 export
EXP-DES-CBC-SHA         SSLv3 Kx=RSA(512) Au=RSA  Enc=DES(40)   Mac=SHA1 export
EXP-RC2-CBC-MD5         SSLv3 Kx=RSA(512) Au=RSA  Enc=RC2(40)   Mac=MD5  export
EXP-RC2-CBC-MD5         SSLv2 Kx=RSA(512) Au=RSA  Enc=RC2(40)   Mac=MD5  export
EXP-RC4-MD5             SSLv3 Kx=RSA(512) Au=RSA  Enc=RC4(40)   Mac=MD5  export
EXP-RC4-MD5             SSLv2 Kx=RSA(512) Au=RSA  Enc=RC4(40)   Mac=MD5  export

The latest version of OpenSSL seems to be 1.0.2, but the source available at https://www.openssl.org/source/ does not seem to be compilable for OS X, since the file ""Install.MacOS"" says right at the beginning:
""Thanks to Roy Wood  initial support for Mac OS (pre
X) is now provided.""
My try to install it nevertheless resulted in some errors on the command line.
Can anyone tell me if it is somehow possible to use the SHA-256 signature algorithm with an OpenSSL installation on Yosemite? It seems odd to me if this would not be possible, but I am no expert in this field.
Hoping for a good hint!
","Finally found out how to do it:

Install homebrew (see http://brew.sh/index.html) with command
ruby -e ""$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)""
Install newest openssl version with command brew install openssl
Run brew link --force openssl in terminal, open a new one and run which openssl in it -> will show you /usr/local/bin/openssl 
Tada! Now if you run openssl version it will show OpenSSL 1.0.2 22 Jan 2015 (if you didn't run brew link --force openssl before it would have shown OpenSSL 0.9.8zc 15 Oct 2014)

:)
(Found hints on Update OpenSSL on OS X with Homebrew, didn't know about homebrew before or that I needed it to get the up-to-date openssl running.
","7579","<macos><openssl><sha256><ecdsa>","2","5","3","2017-12-07 17:09:30","","2","","","","","2015-02-21 15:07:11",""
"28647272","OpenSSL on Mac OS X for SHA-256 signature algorithm","I want to create a self-signed certificate (root ca) with OpenSSL. The signature algorithm needs to be a ECDSA signature with SHA-256 hash. 
On my Mac OS X (Yosemite), I have OpenSSL version 0.9.8zc (from Oct 15, 2014) installed. When I call openssl ciphers -v on the command line, it seems that my current OpenSSL version does not support SHA2 (with SHA-256 etc.). 
DHE-RSA-AES256-SHA      SSLv3 Kx=DH       Au=RSA  Enc=AES(256)  Mac=SHA1
DHE-DSS-AES256-SHA      SSLv3 Kx=DH       Au=DSS  Enc=AES(256)  Mac=SHA1
AES256-SHA              SSLv3 Kx=RSA      Au=RSA  Enc=AES(256)  Mac=SHA1
EDH-RSA-DES-CBC3-SHA    SSLv3 Kx=DH       Au=RSA  Enc=3DES(168) Mac=SHA1
EDH-DSS-DES-CBC3-SHA    SSLv3 Kx=DH       Au=DSS  Enc=3DES(168) Mac=SHA1
DES-CBC3-SHA            SSLv3 Kx=RSA      Au=RSA  Enc=3DES(168) Mac=SHA1
DES-CBC3-MD5            SSLv2 Kx=RSA      Au=RSA  Enc=3DES(168) Mac=MD5 
DHE-RSA-AES128-SHA      SSLv3 Kx=DH       Au=RSA  Enc=AES(128)  Mac=SHA1
DHE-DSS-AES128-SHA      SSLv3 Kx=DH       Au=DSS  Enc=AES(128)  Mac=SHA1
AES128-SHA              SSLv3 Kx=RSA      Au=RSA  Enc=AES(128)  Mac=SHA1
DHE-RSA-SEED-SHA        SSLv3 Kx=DH       Au=RSA  Enc=SEED(128) Mac=SHA1
DHE-DSS-SEED-SHA        SSLv3 Kx=DH       Au=DSS  Enc=SEED(128) Mac=SHA1
SEED-SHA                SSLv3 Kx=RSA      Au=RSA  Enc=SEED(128) Mac=SHA1
RC2-CBC-MD5             SSLv2 Kx=RSA      Au=RSA  Enc=RC2(128)  Mac=MD5 
RC4-SHA                 SSLv3 Kx=RSA      Au=RSA  Enc=RC4(128)  Mac=SHA1
RC4-MD5                 SSLv3 Kx=RSA      Au=RSA  Enc=RC4(128)  Mac=MD5 
RC4-MD5                 SSLv2 Kx=RSA      Au=RSA  Enc=RC4(128)  Mac=MD5 
EDH-RSA-DES-CBC-SHA     SSLv3 Kx=DH       Au=RSA  Enc=DES(56)   Mac=SHA1
EDH-DSS-DES-CBC-SHA     SSLv3 Kx=DH       Au=DSS  Enc=DES(56)   Mac=SHA1
DES-CBC-SHA             SSLv3 Kx=RSA      Au=RSA  Enc=DES(56)   Mac=SHA1
DES-CBC-MD5             SSLv2 Kx=RSA      Au=RSA  Enc=DES(56)   Mac=MD5 
EXP-EDH-RSA-DES-CBC-SHA SSLv3 Kx=DH(512)  Au=RSA  Enc=DES(40)   Mac=SHA1 export
EXP-EDH-DSS-DES-CBC-SHA SSLv3 Kx=DH(512)  Au=DSS  Enc=DES(40)   Mac=SHA1 export
EXP-DES-CBC-SHA         SSLv3 Kx=RSA(512) Au=RSA  Enc=DES(40)   Mac=SHA1 export
EXP-RC2-CBC-MD5         SSLv3 Kx=RSA(512) Au=RSA  Enc=RC2(40)   Mac=MD5  export
EXP-RC2-CBC-MD5         SSLv2 Kx=RSA(512) Au=RSA  Enc=RC2(40)   Mac=MD5  export
EXP-RC4-MD5             SSLv3 Kx=RSA(512) Au=RSA  Enc=RC4(40)   Mac=MD5  export
EXP-RC4-MD5             SSLv2 Kx=RSA(512) Au=RSA  Enc=RC4(40)   Mac=MD5  export

The latest version of OpenSSL seems to be 1.0.2, but the source available at https://www.openssl.org/source/ does not seem to be compilable for OS X, since the file ""Install.MacOS"" says right at the beginning:
""Thanks to Roy Wood  initial support for Mac OS (pre
X) is now provided.""
My try to install it nevertheless resulted in some errors on the command line.
Can anyone tell me if it is somehow possible to use the SHA-256 signature algorithm with an OpenSSL installation on Yosemite? It seems odd to me if this would not be possible, but I am no expert in this field.
Hoping for a good hint!
","
Can anyone tell me if it is somehow possible to use the SHA-256 signature algorithm with an OpenSSL installation on Yosemite? 

Yes, but you need to install a more recent version OpenSSL. OS X's 0.9.8 lacks elliptic curve support (among other things).


The latest version of OpenSSL seems to be 1.0.2, but the source available at https://www.openssl.org/source/ does not seem to be compilable for OS X, since the file ""Install.MacOS"" says right at the beginning:
""Thanks to Roy Wood initial support for Mac OS (pre X) is now provided.""

Ignore that because its wrong.
See the OpenSSL wiki on Compilation and Installation. The 30 second fly-by on 64-bit OS X:
export KERNEL_BITS=64
cd openssl
./config shared no-ssl2 no-ssl3 no-comp enable-ec_nistp_64_gcc_128 --openssldir=/usr/local
make all
sudo make install

Ignore the prompt about make depend since you don't need it.

Related: if you want to build a fat OpenSSL, then see this question: Build Multiarch OpenSSL on OS X. The short answer is, don't try because it won't work due to OpenSSL makefiles.
If you want a fat library, the perform the following steps:
export KERNL_BITS=64
./configure ...
...

mv libcrypto.a libcrypto-x86_64.a 
mv libssl.a libssl-x86_64.a

make clean && make dclean
export KERNL_BITS=32
./configure ...
...

mv libcrypto.a libcrypto-i386.a 
mv libssl.a libssl-i386.a

lipo -create libcrypto-x86_64.a libcrypto-i386.a -output libcrypto.a
lipo -create libssl-x86_64.a libssl-i386.a -output libssl.a

sudo make install

Lather, rinse and repeat for the dylibs before running make install. Note: i386 should not use enable-ec_nistp_64_gcc_128 (IIRC).

When you need to use OpenSSL in your programs, you will use /usr/local/ssl/include as a header path, and /usr/local/ssl/lib as a library path.
As a matter of fact, I don't use library paths because OS X's linker ignores your request for static linking. I use static linking to avoid LD_PRELOAD and DYLD_LIBRARY_PATH problems and tricks (like compiling against 1.0.2 in /usr/local/ssl, but loading 0.9.8 at runtime in /usr/lib). So my compile like looks something like:
gcc foo.c bar.c /usr/local/ssl/lib/libcrypto.a -o foobar.exe

An archive is a collection of object files (*.o), so you specify them just like any other object file.
","7579","<macos><openssl><sha256><ecdsa>","2","1","3","2017-12-07 17:09:30","","2","","","","","2015-02-21 15:07:11",""
"28647272","OpenSSL on Mac OS X for SHA-256 signature algorithm","I want to create a self-signed certificate (root ca) with OpenSSL. The signature algorithm needs to be a ECDSA signature with SHA-256 hash. 
On my Mac OS X (Yosemite), I have OpenSSL version 0.9.8zc (from Oct 15, 2014) installed. When I call openssl ciphers -v on the command line, it seems that my current OpenSSL version does not support SHA2 (with SHA-256 etc.). 
DHE-RSA-AES256-SHA      SSLv3 Kx=DH       Au=RSA  Enc=AES(256)  Mac=SHA1
DHE-DSS-AES256-SHA      SSLv3 Kx=DH       Au=DSS  Enc=AES(256)  Mac=SHA1
AES256-SHA              SSLv3 Kx=RSA      Au=RSA  Enc=AES(256)  Mac=SHA1
EDH-RSA-DES-CBC3-SHA    SSLv3 Kx=DH       Au=RSA  Enc=3DES(168) Mac=SHA1
EDH-DSS-DES-CBC3-SHA    SSLv3 Kx=DH       Au=DSS  Enc=3DES(168) Mac=SHA1
DES-CBC3-SHA            SSLv3 Kx=RSA      Au=RSA  Enc=3DES(168) Mac=SHA1
DES-CBC3-MD5            SSLv2 Kx=RSA      Au=RSA  Enc=3DES(168) Mac=MD5 
DHE-RSA-AES128-SHA      SSLv3 Kx=DH       Au=RSA  Enc=AES(128)  Mac=SHA1
DHE-DSS-AES128-SHA      SSLv3 Kx=DH       Au=DSS  Enc=AES(128)  Mac=SHA1
AES128-SHA              SSLv3 Kx=RSA      Au=RSA  Enc=AES(128)  Mac=SHA1
DHE-RSA-SEED-SHA        SSLv3 Kx=DH       Au=RSA  Enc=SEED(128) Mac=SHA1
DHE-DSS-SEED-SHA        SSLv3 Kx=DH       Au=DSS  Enc=SEED(128) Mac=SHA1
SEED-SHA                SSLv3 Kx=RSA      Au=RSA  Enc=SEED(128) Mac=SHA1
RC2-CBC-MD5             SSLv2 Kx=RSA      Au=RSA  Enc=RC2(128)  Mac=MD5 
RC4-SHA                 SSLv3 Kx=RSA      Au=RSA  Enc=RC4(128)  Mac=SHA1
RC4-MD5                 SSLv3 Kx=RSA      Au=RSA  Enc=RC4(128)  Mac=MD5 
RC4-MD5                 SSLv2 Kx=RSA      Au=RSA  Enc=RC4(128)  Mac=MD5 
EDH-RSA-DES-CBC-SHA     SSLv3 Kx=DH       Au=RSA  Enc=DES(56)   Mac=SHA1
EDH-DSS-DES-CBC-SHA     SSLv3 Kx=DH       Au=DSS  Enc=DES(56)   Mac=SHA1
DES-CBC-SHA             SSLv3 Kx=RSA      Au=RSA  Enc=DES(56)   Mac=SHA1
DES-CBC-MD5             SSLv2 Kx=RSA      Au=RSA  Enc=DES(56)   Mac=MD5 
EXP-EDH-RSA-DES-CBC-SHA SSLv3 Kx=DH(512)  Au=RSA  Enc=DES(40)   Mac=SHA1 export
EXP-EDH-DSS-DES-CBC-SHA SSLv3 Kx=DH(512)  Au=DSS  Enc=DES(40)   Mac=SHA1 export
EXP-DES-CBC-SHA         SSLv3 Kx=RSA(512) Au=RSA  Enc=DES(40)   Mac=SHA1 export
EXP-RC2-CBC-MD5         SSLv3 Kx=RSA(512) Au=RSA  Enc=RC2(40)   Mac=MD5  export
EXP-RC2-CBC-MD5         SSLv2 Kx=RSA(512) Au=RSA  Enc=RC2(40)   Mac=MD5  export
EXP-RC4-MD5             SSLv3 Kx=RSA(512) Au=RSA  Enc=RC4(40)   Mac=MD5  export
EXP-RC4-MD5             SSLv2 Kx=RSA(512) Au=RSA  Enc=RC4(40)   Mac=MD5  export

The latest version of OpenSSL seems to be 1.0.2, but the source available at https://www.openssl.org/source/ does not seem to be compilable for OS X, since the file ""Install.MacOS"" says right at the beginning:
""Thanks to Roy Wood  initial support for Mac OS (pre
X) is now provided.""
My try to install it nevertheless resulted in some errors on the command line.
Can anyone tell me if it is somehow possible to use the SHA-256 signature algorithm with an OpenSSL installation on Yosemite? It seems odd to me if this would not be possible, but I am no expert in this field.
Hoping for a good hint!
","On OSX El Capitan

Install homebrew (see http://brew.sh/index.html)
Install newest openssl version with command brew install openssl
Run /usr/local/opt/openssl/bin/openssl sha256

Brew now refuses to link openssh to /usr/local/bin even if you use the --force option so you have to run openssh from the brew install location or link to it yourself.
","7579","<macos><openssl><sha256><ecdsa>","2","0","3","2017-12-07 17:09:30","","2","","","","","2015-02-21 15:07:11",""
"48101258","How to convert an ECDSA key to PEM format","I have a private raw key of myetherwallet with a passphrase ""testwallet"", now I am trying to convert it to a PEM format using OpenSSL following this answer.
echo ""a140bd507a57360e2fa503298c035854f0dcb248bedabbe7a14db3920aaacf57"" | xxd -r -p - | openssl ec -inform der -pubin -noout -passin pass:testwallet -text

But this error appears:
read EC key
unable to load Key
140084694296480:error:0D06B08E:asn1 encoding routines:ASN1_D2I_READ_BIO:not enough data:a_d2i_fp.c:247:

UPDATE:
I don't have the public key, instead I want to generate it so later I can also generate the Ethereum address corresponds..
","You are claiming your raw key is in OpenSSL's DER format, which it isn't. Also you are claming a private key is a public key, which it isn't, and claiming it's password-encrypted which is wrong either way: public keys are never encrypted and private keys in OpenSSL's 'traditional' aka 'legacy' algorithm-specific DER formats (for ECC, defined by SECG SEC1) cannot be encrypted. (OTOH private keys in PKCS8 format can be password-encrypted in either DER or PEM, although PEM is more convenient. And FWIW PKCS12 format is always password-encrypted, and always DER.) 
An ECC (ECDSA, ECDH, ECMQV, etc) key is always relative to some 'curve' (more exactly, prime-order subgroup over a curve with an identified generator aka base point). For bitcoin this is secp256k1, but your question doesn't say it's limited to bitcoin and this answer would require modification for other applications using other curves.
If you also have the public key (as an uncompressed point), you can simply use the solution from https://bitcoin.stackexchange.com/questions/66594/signing-transaction-with-ssl-private-key-to-pem . Concatenate the hex strings:
  a pre_string : 30740201010420
  the privkey  : (32 bytes as 64 hexits) 
  a mid_string : a00706052b8104000aa144034200 (identifies secp256k1) 
  the pubkey   : (65 bytes as 130 hexits)

and then either convert the hex to binary and read as DER, or convert the hex (probably via binary) to base64 and wrap with -----BEGIN/END EC PRIVATE KEY----- lines to make it PEM.
If you don't have the public key, you can modify this slightly. Concatenate the hex strings 
302e0201010420 privkey_32bytes_64hexits a00706052b8104000a 

and convert to binary, then read into openssl ec -inform d . Note OpenSSL will derive the public key from the private key given the curve, but not actually store it in the PEM output, so reading with software other than OpenSSL is not guaranteed. You might need to use openssl ec -text [-noout] (on either PEM or DER input as convenient) to get the public key value, then go back and create the fuller encoding that includes the public key as above.

ADDED: since you seem not to comprehend the words in the answer, I'll lay this out in as much detail as I can.
The value a140bd507a57360e2fa503298c035854f0dcb248bedabbe7a14db3920aaacf57 is the raw private key represented in hex. A secp256k1 private value is 32 bytes in binary; when binary is represented in hex each byte takes two hex digits, so 32 bytes takes 64 hex digits. All of this value is the raw private key. There is no part consisting of 25 digits OR 25 bytes that has any useful meaning whatever. Do not take any 25-anything part of this value.
To construct the OpenSSL/SECG representation of a private key with no public key, put the hex string representing the private key -- all of it, without modification -- between the two other hex strings I showed as the second option:
 302e0201010420 a140bd507a57360e2fa503298c035854f0dcb248bedabbe7a14db3920aaacf57 a00706052b8104000a 

Then convert this combined hex string to binary, and read the result into openssl ec -inform d:
$ echo 302e0201010420 a140bd507a57360e2fa503298c035854f0dcb248bedabbe7a14db3920aaacf57 a00706052b8104000a | xxd -r -p >48101258.1
$ openssl ec -inform d <48101258.1
read EC key
writing EC key
-----BEGIN EC PRIVATE KEY-----
MC4CAQEEIKFAvVB6VzYOL6UDKYwDWFTw3LJIvtq756FNs5IKqs9XoAcGBSuBBAAK
-----END EC PRIVATE KEY-----

The result is PEM format -- but PEM format not including the public key, which you indicate you want. To see the fields including the derived public key, add -text; to see only the fields and not the PEM output, add -noout:
$ openssl ec -inform d <48101258.1 -text -noout
read EC key
Private-Key: (256 bit)
priv:
    a1:40:bd:50:7a:57:36:0e:2f:a5:03:29:8c:03:58:
    54:f0:dc:b2:48:be:da:bb:e7:a1:4d:b3:92:0a:aa:
    cf:57
pub:
    04:20:ea:6d:8c:e7:bc:bb:48:33:69:b2:91:1c:75:
    e5:60:2a:34:28:be:44:96:e9:7f:14:ad:52:fd:4a:
    6a:a0:e3:60:83:9c:6e:db:32:2a:22:55:7c:70:1e:
    d0:fa:1e:06:cf:57:4f:be:17:bd:6a:85:51:69:c5:
    65:96:72:cf:a9
ASN1 OID: secp256k1

Now if you want a PEM-format key including the public key, take both the hex strings for the private key (all 64 digits) AND the newly-shown hex value for the public key, and plug them in to my first option. Also note an ECC public key is a curve point which can be in two forms, compressed or uncompressed; the form generated here is uncompressed. If you need compressed, I'll add that later. A secp256k1 point in uncompressed form is 65 bytes, represented in hex as 130 hex digits. (Which openssl ec formats as 4 lines each of 15 bytes with 5 bytes left over.)
$ echo 30740201010420 a140bd507a57360e2fa503298c035854f0dcb248bedabbe7a14db3920aaacf57 a00706052b8104000aa144034200 \
> 04:20:ea:6d:8c:e7:bc:bb:48:33:69:b2:91:1c:75: e5:60:2a:34:28:be:44:96:e9:7f:14:ad:52:fd:4a: \
> 6a:a0:e3:60:83:9c:6e:db:32:2a:22:55:7c:70:1e: d0:fa:1e:06:cf:57:4f:be:17:bd:6a:85:51:69:c5: \
> 65:96:72:cf:a9 | xxd -r -p >48101258.2
$ # note xxd -r -p ignores the colons; other hex programs may need them removed instead
$ openssl ec -inform d <48101258.2
read EC key
writing EC key
-----BEGIN EC PRIVATE KEY-----
MHQCAQEEIKFAvVB6VzYOL6UDKYwDWFTw3LJIvtq756FNs5IKqs9XoAcGBSuBBAAK
oUQDQgAEIOptjOe8u0gzabKRHHXlYCo0KL5Elul/FK1S/UpqoONgg5xu2zIqIlV8
cB7Q+h4Gz1dPvhe9aoVRacVllnLPqQ==
-----END EC PRIVATE KEY-----


ADDED 2019-02 for DavidS: as correctly shown in k06a's answer

the first part of my midstring (or the entire suffix for my private-only option) a00706052b8104000a is a context-tag and length a007 for an OID tag and length 0605 containing 2b8104000a which is 1.3.132.0.10 which is secp256k1 and 
the remainder of my midstring a144034200 is a context tag and length containing the tag length and unused-bits header for a BITSTRING which is the raw publickey as an uncompressed point.

To do secp256r1 aka P-256 or prime256v1 instead, you need to change the AlgId.OID to 1.2.840.10045.3.1.7 which is encoded as a00a 0608 2a8648ce3d030107. The privatekey and publickey values for p256r1 are the same sizes as for p256k1, but the AlgId is longer, so you also need to change the length of the outer SEQUENCE giving
30770201010420 privatekey32bytes # note 77 
a00a06082a8648ce3d030107 a144034200 publicpoint65bytes 

","7337","<openssl><ecdsa>","7","12","2","2019-08-29 13:02:33","48102827","0","0","3261332","","2018-01-04 22:02:30","2018-01-04 18:17:01",""
"48101258","How to convert an ECDSA key to PEM format","I have a private raw key of myetherwallet with a passphrase ""testwallet"", now I am trying to convert it to a PEM format using OpenSSL following this answer.
echo ""a140bd507a57360e2fa503298c035854f0dcb248bedabbe7a14db3920aaacf57"" | xxd -r -p - | openssl ec -inform der -pubin -noout -passin pass:testwallet -text

But this error appears:
read EC key
unable to load Key
140084694296480:error:0D06B08E:asn1 encoding routines:ASN1_D2I_READ_BIO:not enough data:a_d2i_fp.c:247:

UPDATE:
I don't have the public key, instead I want to generate it so later I can also generate the Ethereum address corresponds..
","Elliptic Curve Private Key Format:
ECPrivateKey ::= SEQUENCE {
 version        INTEGER { ecPrivkeyVer1(1) } (ecPrivkeyVer1),
 privateKey     OCTET STRING,
 parameters [0] ECParameters {{ NamedCurve }} OPTIONAL,
 publicKey  [1] BIT STRING OPTIONAL
}

So publicKey is OPTIONAL and theoretically can be missed.
Here is example of my DER secp256k1 private key:
30740201 01042092 E768CB72 0DC16924 27D156DB 39630748 0D1507B9 A4958450
2574B9A0 922F4BA0 0706052B 8104000A A1440342 00041954 9737B704 D1789A57
82E3430E 8259F904 71326081 054854D2 A5D096F9 686D05B0 30D98BA3 C60C056E
204CEF61 C0AC5B53 A9A6B9A0 5AFF9DA2 6CA4B65B 2E84

Trying to decompose:
$ openssl asn1parse -inform DER -in <(echo ""30740201 01042092 E768CB72 0DC16924 27D156DB 39630748 0D1507B9 A4958450 2574B9A0 922F4BA0 0706052B 8104000A A1440342 00041954 9737B704 D1789A57 82E3430E 8259F904 71326081 054854D2 A5D096F9 686D05B0 30D98BA3 C60C056E 204CEF61 C0AC5B53 A9A6B9A0 5AFF9DA2 6CA4B65B 2E84"" | xxd -r -p)

ASN.1 parsing result:
 0:d=0  hl=2 l= 116 cons: SEQUENCE          
 2:d=1  hl=2 l=   1 prim: INTEGER           :01
 5:d=1  hl=2 l=  32 prim: OCTET STRING      [HEX DUMP]:92E768CB720DC1692427D156DB396307480D1507B9A49584502574B9A0922F4B
39:d=1  hl=2 l=   7 cons: cont [ 0 ]        
41:d=2  hl=2 l=   5 prim: OBJECT            :secp256k1
48:d=1  hl=2 l=  68 cons: cont [ 1 ]        
50:d=2  hl=2 l=  66 prim: BIT STRING  

Detailed (see https://bitcoin.stackexchange.com/a/66622/22979):
30 - ASN.1
74 - Length of all following bytes (116 bytes)

  02 - Type (integer)
  01 - Length of integer (1 byte)
  01 - Value of integer (1)

  04 - Type (octet string)
  20 - Length of string (32 bytes)
  92E768CB720DC1692427D156DB396307480D1507B9A49584502574B9A0922F4B - Private Key

  A0 - Tag 0
  07 - Length of tag (7 bytes)
  06 - Type (Object ID)
  05 - Length of the Object ID (5 bytes)
  2b 81 04 00 0a - The object ID of the curve secp256k1

  A1 - Tag 1
  44 - Length of tag (68 bytes)
  03 - Type – Bit string
  42 - Length of the bit string (66 bytes)
  00 - ???
  04 - Uncompressed Public Key
  19549737B704D1789A5782E3430E8259F90471326081054854D2A5D096F9686D - Public Key X coord
  05B030D98BA3C60C056E204CEF61C0AC5B53A9A6B9A05AFF9DA26CA4B65B2E84 - Public Key Y coord

I removed Public Key object and fixed ASN.1 length from 116 bytes (0x74) to 46 bytes (0x2e):
$ openssl asn1parse -inform DER -in <(echo ""302E020101042092E768CB720DC1692427D156DB396307480D1507B9A49584502574B9A0922F4BA00706052B8104000A"" | xxd -r -p)

Got result:
 0:d=0  hl=2 l=  46 cons: SEQUENCE          
 2:d=1  hl=2 l=   1 prim: INTEGER           :01
 5:d=1  hl=2 l=  32 prim: OCTET STRING      [HEX DUMP]:92E768CB720DC1692427D156DB396307480D1507B9A49584502574B9A0922F4B
39:d=1  hl=2 l=   7 cons: cont [ 0 ]        
41:d=2  hl=2 l=   5 prim: OBJECT            :secp256k1

Trying to get Public Key:
$ openssl ec -inform DER -in <(echo ""302E020101042092E768CB720DC1692427D156DB396307480D1507B9A49584502574B9A0922F4BA00706052B8104000A"" | xxd -r -p)

Result:
read EC key
writing EC key
-----BEGIN EC PRIVATE KEY-----
MC4CAQEEIJLnaMtyDcFpJCfRVts5YwdIDRUHuaSVhFAldLmgki9LoAcGBSuBBAAK
-----END EC PRIVATE KEY-----

One more try:
$ openssl ec -inform DER -text -in <(echo ""302E020101042092E768CB720DC1692427D156DB396307480D1507B9A49584502574B9A0922F4BA00706052B8104000A"" | xxd -r -p)

Result:
read EC key
Segmentation fault: 11

I used OSX system openssl – looks like it is LibreSSL 2.2.7.
Added: Reported a bug to LibreSSL: https://github.com/libressl-portable/portable/issues/395
Then I installed latest openssl: brew install openssl
/usr/local/Cellar/openssl/1.0.2n/bin/openssl ec -inform DER -text -noout -in <(echo ""302E020101042092E768CB720DC1692427D156DB396307480D1507B9A49584502574B9A0922F4BA00706052B8104000A"" | xxd -r -p)

And got:
read EC key
Private-Key: (256 bit)
priv:
    00:92:e7:68:cb:72:0d:c1:69:24:27:d1:56:db:39:
    63:07:48:0d:15:07:b9:a4:95:84:50:25:74:b9:a0:
    92:2f:4b
pub: 
    04:19:54:97:37:b7:04:d1:78:9a:57:82:e3:43:0e:
    82:59:f9:04:71:32:60:81:05:48:54:d2:a5:d0:96:
    f9:68:6d:05:b0:30:d9:8b:a3:c6:0c:05:6e:20:4c:
    ef:61:c0:ac:5b:53:a9:a6:b9:a0:5a:ff:9d:a2:6c:
    a4:b6:5b:2e:84
ASN1 OID: secp256k1

Final solution:
$ /usr/local/Cellar/openssl/1.0.2n/bin/openssl ec -inform DER -text -noout -in <(cat <(echo -n ""302e0201010420"") <(echo -n ""***"") <(echo -n ""a00706052b8104000a"") | xxd -r -p) 2>/dev/null | tail -6 | head -5 | sed 's/[ :]//g' | tr -d '\n' && echo

Replace *** with a hexademical private key.
","7337","<openssl><ecdsa>","7","2","2","2019-08-29 13:02:33","48102827","0","0","3261332","","2018-01-04 22:02:30","2018-01-04 18:17:01",""
"15269379","C implementation of ECDSA signature and verification with openssl","I am trying to create C program were I can choose from a menu which options I want from Signing a message and Verify a message. I have the code that signs the message and verifies at the same time. What I would like was to be able to parse a message and sign it and this to output the certificate for example. Next when I choose verify I would insert the same message and the certificate, so I could actually verify or not the message.
I am using the code from: 
Signing a message using ECDSA in OpenSSL
PS: Basically I don't know how to actually print the signature, private and public keys.
Thank you so much.
","I think I found out the way to print the r and s values. The key pair from the signature (r,s)
After we have the signature it self:
ECDSA_SIG *signature = ECDSA_do_sign(hash, strlen(hash), eckey);

We can print the r and s values this way:
printf(""(sig->r, sig->s): (%s,%s)\n"", BN_bn2hex(signature->r), BN_bn2hex(signature->s));

Thanks
Best Regards
","5743","<c><openssl><signature><verification><ecdsa>","0","2","2","2013-03-10 10:00:12","15320998","0","2","-1","","2017-05-23 12:28:22","2013-03-07 10:59:27",""
"15269379","C implementation of ECDSA signature and verification with openssl","I am trying to create C program were I can choose from a menu which options I want from Signing a message and Verify a message. I have the code that signs the message and verifies at the same time. What I would like was to be able to parse a message and sign it and this to output the certificate for example. Next when I choose verify I would insert the same message and the certificate, so I could actually verify or not the message.
I am using the code from: 
Signing a message using ECDSA in OpenSSL
PS: Basically I don't know how to actually print the signature, private and public keys.
Thank you so much.
","Use those functions:
int i2d_ECDSA_SIG(const ECDSA_SIG *sig, unsigned char **pp);

ECDSA_SIG* d2i_ECDSA_SIG(ECDSA_SIG **sig, const unsigned char **pp, long len);

As per OpenSSL docs:
"" i2d_ECDSA_SIG() creates the DER encoding of the ECDSA signature sig and writes the encoded signature to *pp (note: if pp is NULL i2d_ECDSA_SIG returns the expected length in bytes of the DER encoded signature). i2d_ECDSA_SIG returns the length of the DER encoded signature (or 0 on error).
d2i_ECDSA_SIG() decodes a DER encoded ECDSA signature and returns the decoded signature in a newly allocated ECDSA_SIG structure. *sig points to the buffer containing the DER encoded signature of size len. ""
If you want to printout the signature on the screen than you will have to Base64 it :)
","5743","<c><openssl><signature><verification><ecdsa>","0","1","2","2013-03-10 10:00:12","15320998","0","2","-1","","2017-05-23 12:28:22","2013-03-07 10:59:27",""
"21322182","How to store ECDSA private key in Go","I am using the ecdsa.GenerateKey method to generate a private/public key pair in Go. I would like to store the private key in a file on the users computer, and load it whenever the program starts. There is a method elliptic.Marshal that marshals the public key, but nothing for the private key. Should I simply roll my own, or is there a recommended way to store the private key?
","I believe the standard format for those keys is to use the X.509 ASN.1 DER representation. See http://golang.org/pkg/crypto/x509/#MarshalECPrivateKey and http://golang.org/pkg/crypto/x509/#ParseECPrivateKey.
","5726","<go><ecdsa>","16","6","3","2018-12-04 22:36:10","41315404","1","5","","","","2014-01-24 00:28:51",""
"21322182","How to store ECDSA private key in Go","I am using the ecdsa.GenerateKey method to generate a private/public key pair in Go. I would like to store the private key in a file on the users computer, and load it whenever the program starts. There is a method elliptic.Marshal that marshals the public key, but nothing for the private key. Should I simply roll my own, or is there a recommended way to store the private key?
","Here is a code sample that demonstrates encoding and decoding of keys in Go. It helps to know that you need to connect couple of steps. Crypto algorithm is the fist step, in this case ECDSA key. Then you need standard encoding, x509 is most commontly used standard. Finally you need a file format, PEM is again commonly used one. This is currently most commonly used combination, but feel free to substitute any other algoriths or encoding.
func encode(privateKey *ecdsa.PrivateKey, publicKey *ecdsa.PublicKey) (string, string) {
    x509Encoded, _ := x509.MarshalECPrivateKey(privateKey)
    pemEncoded := pem.EncodeToMemory(&pem.Block{Type: ""PRIVATE KEY"", Bytes: x509Encoded})

    x509EncodedPub, _ := x509.MarshalPKIXPublicKey(publicKey)
    pemEncodedPub := pem.EncodeToMemory(&pem.Block{Type: ""PUBLIC KEY"", Bytes: x509EncodedPub})

    return string(pemEncoded), string(pemEncodedPub)
}

func decode(pemEncoded string, pemEncodedPub string) (*ecdsa.PrivateKey, *ecdsa.PublicKey) {
    block, _ := pem.Decode([]byte(pemEncoded))
    x509Encoded := block.Bytes
    privateKey, _ := x509.ParseECPrivateKey(x509Encoded)

    blockPub, _ := pem.Decode([]byte(pemEncodedPub))
    x509EncodedPub := blockPub.Bytes
    genericPublicKey, _ := x509.ParsePKIXPublicKey(x509EncodedPub)
    publicKey := genericPublicKey.(*ecdsa.PublicKey)

    return privateKey, publicKey
}

func test() {
    privateKey, _ := ecdsa.GenerateKey(elliptic.P384(), rand.Reader)
    publicKey := &privateKey.PublicKey

    encPriv, encPub := encode(privateKey, publicKey)

    fmt.Println(encPriv)
    fmt.Println(encPub)

    priv2, pub2 := decode(encPriv, encPub)

    if !reflect.DeepEqual(privateKey, priv2) {
        fmt.Println(""Private keys do not match."")
    }
    if !reflect.DeepEqual(publicKey, pub2) {
        fmt.Println(""Public keys do not match."")
    }
}

","5726","<go><ecdsa>","16","19","3","2018-12-04 22:36:10","41315404","1","5","","","","2014-01-24 00:28:51",""
"21322182","How to store ECDSA private key in Go","I am using the ecdsa.GenerateKey method to generate a private/public key pair in Go. I would like to store the private key in a file on the users computer, and load it whenever the program starts. There is a method elliptic.Marshal that marshals the public key, but nothing for the private key. Should I simply roll my own, or is there a recommended way to store the private key?
","I adapted a really quick and dirty way to do it, as suggested by one of the geth team in late '15 in my library https://github.com/DaveAppleton/ether_go
it is a far simpler solution (but puts keys in plain sight)
","5726","<go><ecdsa>","16","0","3","2018-12-04 22:36:10","41315404","1","5","","","","2014-01-24 00:28:51",""
"29778852","How to create ECDSA keypair (256bit) for bitcoin curve (secp256k1) using spongy castle?","Currently, I am creating keyPair using this method
private  KeyPair getKeyPair() throws NoSuchAlgorithmException, NoSuchProviderException, InvalidAlgorithmParameterException {
    KeyPairGenerator keyGen = KeyPairGenerator.getInstance(""ECDsA"", ""SC"");
    ECGenParameterSpec ecSpec = new ECGenParameterSpec(""secp256k1"");
    keyGen.initialize(ecSpec, new SecureRandom());
    return keyGen.generateKeyPair();
}

KeyPairGenerator has another method, in which I can specify keySize but I am not sure how I will pass the keySpecs?
 public void initialize(int keysize, SecureRandom random)

","The documentation for KeyPairGenerator says that the initialize(int, SecureRandom) does this:

Initializes the key pair generator for a certain keysize with the given source of randomness (and a default parameter set).

KeyPairGenerator is an abstract class, and I assume that this ""default parameter set"" is determined by a specific subclass you are using.  You might try to figure out what class your KeyPairGenerator object really is, and then consult the documentation of that class to learn where you can set its default parameters.
","5515","<java><android><encryption><bouncycastle><ecdsa>","7","0","2","2019-04-21 12:16:15","29790666","2","","546896","","2019-04-21 12:16:15","2015-04-21 17:09:39",""
"29778852","How to create ECDSA keypair (256bit) for bitcoin curve (secp256k1) using spongy castle?","Currently, I am creating keyPair using this method
private  KeyPair getKeyPair() throws NoSuchAlgorithmException, NoSuchProviderException, InvalidAlgorithmParameterException {
    KeyPairGenerator keyGen = KeyPairGenerator.getInstance(""ECDsA"", ""SC"");
    ECGenParameterSpec ecSpec = new ECGenParameterSpec(""secp256k1"");
    keyGen.initialize(ecSpec, new SecureRandom());
    return keyGen.generateKeyPair();
}

KeyPairGenerator has another method, in which I can specify keySize but I am not sure how I will pass the keySpecs?
 public void initialize(int keysize, SecureRandom random)

","Your code is already sufficient, and specifying ""secp256k1"" already sets the correct size. The initialize(int, SecureRandom) method is an alternative to initialize(AlgorithmParameterSpec, SecureRandom); you call one or the other, not both. If you call the one specifying the keysize (say, 256), the BC provider will try to choose a default curve of the right size (for 256, it will be ""prime256v1"" a.k.a. ""P-256"" or ""secp256r1"").
","5515","<java><android><encryption><bouncycastle><ecdsa>","7","5","2","2019-04-21 12:16:15","29790666","2","","546896","","2019-04-21 12:16:15","2015-04-21 17:09:39",""
"30175149","Error when verifying ECDSA signature in Java with BouncyCastle","I have tested a solution to verify an ECDSA signature (How can I get a PublicKey object from EC public key bytes?) that works perfect with the given data.
This is the data:
byte[] pubKey = DatatypeConverter.parseHexBinary(""049a55ad1e210cd113457ccd3465b930c9e7ade5e760ef64b63142dad43a308ed08e2d85632e8ff0322d3c7fda14409eafdc4c5b8ee0882fe885c92e3789c36a7a"");
byte[] message = DatatypeConverter.parseHexBinary(""54686973206973206a75737420736f6d6520706f696e746c6573732064756d6d7920737472696e672e205468616e6b7320616e7977617920666f722074616b696e67207468652074696d6520746f206465636f6465206974203b2d29"");
byte[] signature = DatatypeConverter.parseHexBinary(""304402205fef461a4714a18a5ca6dce6d5ab8604f09f3899313a28ab430eb9860f8be9d602203c8d36446be85383af3f2e8630f40c4172543322b5e8973e03fff2309755e654"");

And this is the code (which prints true):
private static boolean isValidSignature(byte[] pubKey, byte[] message,byte[] signature) throws NoSuchAlgorithmException, NoSuchProviderException, InvalidKeyException, SignatureException, InvalidKeySpecException {
    Signature ecdsaVerify = Signature.getInstance(""SHA256withECDSA"", new BouncyCastleProvider());
    ecdsaVerify.initVerify(getPublicKeyFromBytes(pubKey));
    ecdsaVerify.update(message);
    return ecdsaVerify.verify(signature);
}

private static PublicKey getPublicKeyFromBytes(byte[] pubKey) throws NoSuchAlgorithmException, InvalidKeySpecException {
    ECNamedCurveParameterSpec spec = ECNamedCurveTable.getParameterSpec(""prime256v1"");
    KeyFactory kf = KeyFactory.getInstance(""ECDSA"", new BouncyCastleProvider());
    ECNamedCurveSpec params = new ECNamedCurveSpec(""prime256v1"", spec.getCurve(), spec.getG(), spec.getN());
    ECPoint point =  ECPointUtil.decodePoint(params.getCurve(), pubKey);
    ECPublicKeySpec pubKeySpec = new ECPublicKeySpec(point, params);
    ECPublicKey pk = (ECPublicKey) kf.generatePublic(pubKeySpec);
    return pk;
}

public static void main (String[] args) {
    System.out.println(isValidSignature(pubKey, message, signature));
}

My problem comes when I change the signature and data to an example input from an already implemented system:
final static byte[] pubKey = DatatypeConverter.parseHexBinary(""0447303876C6FED5550DF3EE1136989FCD87293D54A5D8E2F2F6D7FBE9A81089B889A5917443AF33E696178CEF4C9D6A4288B2745B29AF6C8BCAD1348F78EB9F9B"");
final static byte[] message = DatatypeConverter.parseHexBinary(""02158001f53611a06e2d1a270000013ed9305dc2780524015110500000002d0100140092569202017aa00c5dd30000000000000000000000000000000007d1000001020001b20788b80059f48d95cdefc8c6000200200030d41e0000012016840310a50733a9870fffd0430100"");
final static byte[] signature = DatatypeConverter.parseHexBinary(""531F8918FF250132959B01F7F56FDFD9E6CA3EC2144E12A6DA37C281489A3D96"");

New data outputs this error:
java.security.SignatureException: error decoding signature bytes.
    at org.bouncycastle.jcajce.provider.asymmetric.util.DSABase.engineVerify(Unknown Source)
    at java.security.Signature$Delegate.engineVerify(Signature.java:1178)
    at java.security.Signature.verify(Signature.java:612)
    at its.sec.exec.TestProgram.isValidSignature(TestProgram.java:168)
    at its.sec.exec.TestProgram.execution(TestProgram.java:101)
    at its.sec.exec.TestProgram.main(TestProgram.java:55)

I assume the problem is about the signature that comes with the secured message because:

The key pair is the same length and format that the example. And are correct since it comes from the certificate that signs the message.
The message itself (payload) shouldn't affect the security process.

Last thing worth mention is that my documentation says that the signature must be preceded by a field called ""R"" which ""contains the x coordinate of the elliptic curve point resulting from multiplying the generator element by the ephemeral private key"" and its length must be the same as the signature (32 byte).
Can someone point me out what I'm missing here?
EDIT: Solution
As Peter Dettman pointed in his answer, the signature was not correctly formatted (also content was incorrect too) in order to be computed by the verify() method. Here is a good explanation that mainly says that:

When encoded in DER, this (signature) becomes the following sequence of bytes:
0x30 b1 0x02 b2 (vr) 0x02 b3 (vs)
where:

b1 is a single byte value, equal to the length, in bytes, of the remaining list of bytes (from the first 0x02 to the end of the encoding);
b2 is a single byte value, equal to the length, in bytes, of (vr);
b3 is a single byte value, equal to the length, in bytes, of (vs);
(vr) is the signed big-endian encoding of the value ""r"", of minimal length;
(vs) is the signed big-endian encoding of the value ""s"", of minimal length.


Applying that change, signature grows to 70 bytes and the execution outputs no error.
","The expected ECDSA signature format that the BC (and other provider) implementations work with is a DER-encoded ASN.1 sequence containing two integer values r and s. This signature format has been specified in ANSI X9.62. This is the format in the first set of data you give (note that signature is a total of 70 bytes).
In the second set of data, signature is only 32 bytes, and is not an ASN.1 sequence at all. I would guess that this value is only the s value, and it is missing the r value and the ASN.1 INTEGER encoding for them both, instead encoding the values as a unsigned big integer value with the same size as the key.
","5362","<java><bouncycastle><signature><ecdsa>","9","8","2","2018-12-16 10:38:40","30256618","2","3","-1","","2017-05-23 12:02:46","2015-05-11 18:37:03",""
"30175149","Error when verifying ECDSA signature in Java with BouncyCastle","I have tested a solution to verify an ECDSA signature (How can I get a PublicKey object from EC public key bytes?) that works perfect with the given data.
This is the data:
byte[] pubKey = DatatypeConverter.parseHexBinary(""049a55ad1e210cd113457ccd3465b930c9e7ade5e760ef64b63142dad43a308ed08e2d85632e8ff0322d3c7fda14409eafdc4c5b8ee0882fe885c92e3789c36a7a"");
byte[] message = DatatypeConverter.parseHexBinary(""54686973206973206a75737420736f6d6520706f696e746c6573732064756d6d7920737472696e672e205468616e6b7320616e7977617920666f722074616b696e67207468652074696d6520746f206465636f6465206974203b2d29"");
byte[] signature = DatatypeConverter.parseHexBinary(""304402205fef461a4714a18a5ca6dce6d5ab8604f09f3899313a28ab430eb9860f8be9d602203c8d36446be85383af3f2e8630f40c4172543322b5e8973e03fff2309755e654"");

And this is the code (which prints true):
private static boolean isValidSignature(byte[] pubKey, byte[] message,byte[] signature) throws NoSuchAlgorithmException, NoSuchProviderException, InvalidKeyException, SignatureException, InvalidKeySpecException {
    Signature ecdsaVerify = Signature.getInstance(""SHA256withECDSA"", new BouncyCastleProvider());
    ecdsaVerify.initVerify(getPublicKeyFromBytes(pubKey));
    ecdsaVerify.update(message);
    return ecdsaVerify.verify(signature);
}

private static PublicKey getPublicKeyFromBytes(byte[] pubKey) throws NoSuchAlgorithmException, InvalidKeySpecException {
    ECNamedCurveParameterSpec spec = ECNamedCurveTable.getParameterSpec(""prime256v1"");
    KeyFactory kf = KeyFactory.getInstance(""ECDSA"", new BouncyCastleProvider());
    ECNamedCurveSpec params = new ECNamedCurveSpec(""prime256v1"", spec.getCurve(), spec.getG(), spec.getN());
    ECPoint point =  ECPointUtil.decodePoint(params.getCurve(), pubKey);
    ECPublicKeySpec pubKeySpec = new ECPublicKeySpec(point, params);
    ECPublicKey pk = (ECPublicKey) kf.generatePublic(pubKeySpec);
    return pk;
}

public static void main (String[] args) {
    System.out.println(isValidSignature(pubKey, message, signature));
}

My problem comes when I change the signature and data to an example input from an already implemented system:
final static byte[] pubKey = DatatypeConverter.parseHexBinary(""0447303876C6FED5550DF3EE1136989FCD87293D54A5D8E2F2F6D7FBE9A81089B889A5917443AF33E696178CEF4C9D6A4288B2745B29AF6C8BCAD1348F78EB9F9B"");
final static byte[] message = DatatypeConverter.parseHexBinary(""02158001f53611a06e2d1a270000013ed9305dc2780524015110500000002d0100140092569202017aa00c5dd30000000000000000000000000000000007d1000001020001b20788b80059f48d95cdefc8c6000200200030d41e0000012016840310a50733a9870fffd0430100"");
final static byte[] signature = DatatypeConverter.parseHexBinary(""531F8918FF250132959B01F7F56FDFD9E6CA3EC2144E12A6DA37C281489A3D96"");

New data outputs this error:
java.security.SignatureException: error decoding signature bytes.
    at org.bouncycastle.jcajce.provider.asymmetric.util.DSABase.engineVerify(Unknown Source)
    at java.security.Signature$Delegate.engineVerify(Signature.java:1178)
    at java.security.Signature.verify(Signature.java:612)
    at its.sec.exec.TestProgram.isValidSignature(TestProgram.java:168)
    at its.sec.exec.TestProgram.execution(TestProgram.java:101)
    at its.sec.exec.TestProgram.main(TestProgram.java:55)

I assume the problem is about the signature that comes with the secured message because:

The key pair is the same length and format that the example. And are correct since it comes from the certificate that signs the message.
The message itself (payload) shouldn't affect the security process.

Last thing worth mention is that my documentation says that the signature must be preceded by a field called ""R"" which ""contains the x coordinate of the elliptic curve point resulting from multiplying the generator element by the ephemeral private key"" and its length must be the same as the signature (32 byte).
Can someone point me out what I'm missing here?
EDIT: Solution
As Peter Dettman pointed in his answer, the signature was not correctly formatted (also content was incorrect too) in order to be computed by the verify() method. Here is a good explanation that mainly says that:

When encoded in DER, this (signature) becomes the following sequence of bytes:
0x30 b1 0x02 b2 (vr) 0x02 b3 (vs)
where:

b1 is a single byte value, equal to the length, in bytes, of the remaining list of bytes (from the first 0x02 to the end of the encoding);
b2 is a single byte value, equal to the length, in bytes, of (vr);
b3 is a single byte value, equal to the length, in bytes, of (vs);
(vr) is the signed big-endian encoding of the value ""r"", of minimal length;
(vs) is the signed big-endian encoding of the value ""s"", of minimal length.


Applying that change, signature grows to 70 bytes and the execution outputs no error.
","this is a sample code to write r and s in ASN1 DER encoded format
    // construct the ASN1Sequence with r and s
    ByteArrayOutputStream outs = new ByteArrayOutputStream();

    byte radd = (byte)(((signed[0] & 0x80) > 0) ? 1 : 0);
    byte sadd = (byte)(((signed[32] & 0x80) > 0) ? 1 : 0);

    byte length = (byte)(0x44 + radd + sadd);

    outs.write(0x30);
    outs.write(length); // length 68 bytes +
    outs.write(0x02); // ASN1Integer
    outs.write(0x20 + radd); // length 32 bytes
    if(radd > 0)
        outs.write(0x00); // positive val
    outs.write(signed, 0, 32);
    outs.write(0x02); // ASN1Integer
    outs.write(0x20 + sadd); // length 32 bytes
    if(sadd > 0)
        outs.write(0x00); // positive val
    outs.write(signed, 32, 32);

    signed = outs.toByteArray();

","5362","<java><bouncycastle><signature><ecdsa>","9","1","2","2018-12-16 10:38:40","30256618","2","3","-1","","2017-05-23 12:02:46","2015-05-11 18:37:03",""
"20525147","Python module ecdsa errors while running paramiko","I am trying to install paramiko module..it fails with the below error 
python ./test.py 
Traceback (most recent call last):
  File ""./test.py"", line 30, in <module>
    import paramiko
  File ""/tmp/build-paramiko/paramiko-1.12.0/paramiko/__init__.py"", line 64, in <module>
    from transport import SecurityOptions, Transport
  File ""/tmp/build-paramiko/paramiko-1.12.0/paramiko/transport.py"", line 45, in <module>
    from paramiko.ecdsakey import ECDSAKey
  File ""/tmp/build-paramiko/paramiko-1.12.0/paramiko/ecdsakey.py"", line 24, in <module>
    from ecdsa import SigningKey, VerifyingKey, der, curves
ImportError: No module named ecdsa

Any suggestions on how to proceed with the paramiko installation ?
","You can use easy_install to install the lost module ""ecdsa"" ,which like: easy_install ecdsa,
but you have to ready easy_install first! 
","5335","<python><paramiko><ecdsa>","6","0","3","2019-10-17 15:35:06","","6","","178163","","2016-11-06 19:49:58","2013-12-11 16:54:05",""
"20525147","Python module ecdsa errors while running paramiko","I am trying to install paramiko module..it fails with the below error 
python ./test.py 
Traceback (most recent call last):
  File ""./test.py"", line 30, in <module>
    import paramiko
  File ""/tmp/build-paramiko/paramiko-1.12.0/paramiko/__init__.py"", line 64, in <module>
    from transport import SecurityOptions, Transport
  File ""/tmp/build-paramiko/paramiko-1.12.0/paramiko/transport.py"", line 45, in <module>
    from paramiko.ecdsakey import ECDSAKey
  File ""/tmp/build-paramiko/paramiko-1.12.0/paramiko/ecdsakey.py"", line 24, in <module>
    from ecdsa import SigningKey, VerifyingKey, der, curves
ImportError: No module named ecdsa

Any suggestions on how to proceed with the paramiko installation ?
","Download the package from 'https://github.com/warner/python-ecdsa' and install it using command 
python setup.py install

Your problem will be solved.
","5335","<python><paramiko><ecdsa>","6","2","3","2019-10-17 15:35:06","","6","","178163","","2016-11-06 19:49:58","2013-12-11 16:54:05",""
"20525147","Python module ecdsa errors while running paramiko","I am trying to install paramiko module..it fails with the below error 
python ./test.py 
Traceback (most recent call last):
  File ""./test.py"", line 30, in <module>
    import paramiko
  File ""/tmp/build-paramiko/paramiko-1.12.0/paramiko/__init__.py"", line 64, in <module>
    from transport import SecurityOptions, Transport
  File ""/tmp/build-paramiko/paramiko-1.12.0/paramiko/transport.py"", line 45, in <module>
    from paramiko.ecdsakey import ECDSAKey
  File ""/tmp/build-paramiko/paramiko-1.12.0/paramiko/ecdsakey.py"", line 24, in <module>
    from ecdsa import SigningKey, VerifyingKey, der, curves
ImportError: No module named ecdsa

Any suggestions on how to proceed with the paramiko installation ?
","this:
    from ecdsa import SigningKey, VerifyingKey, der, curves
ImportError: No module named ecdsa

suggests that the python-ecdsa package is missing, you can install it with
pip install ecdsa

Though in general, you shouldn't need to install paramiko from sources. You can install it with
pip install paramiko

that has the benefit of automatically resolving the dependencies of a package
","5335","<python><paramiko><ecdsa>","6","0","3","2019-10-17 15:35:06","","6","","178163","","2016-11-06 19:49:58","2013-12-11 16:54:05",""
"30945722","Converting byte array to publickey ECDSA","I need to use ECDSA algorithm to sign a message and send to receiver in java. Then, receiver should verify sender's signature.
So, for this, receiver has sender's public key but in byte array format after converting java.security.PublicKey to byte array by the command bellow:
byte[] byteArrayPublicKey = publickey.getEncoded();

The format of public key in ECDSA algorithm (before converting it to byte array) is as follow:
Public Key:
X: 8a83c389e7bb817c17bf2db4ed71055f18342b630221b2a3a1ca752502dc2e21

Y: 3eaf48c9ab1700fe0966a0cde196b85af66bb8f0bacef711c9dca2368f9d8470

But, the problem is to convert this byte array to usable format to verify the signature that is java.security.PublicKey by receiver. 
In general, is there any solution to verify the signature without converting it to byte array? In the other word, the problem is to verify the signature by sender's public key, using any method.
","
But, the problem is to convert this byte array to usable format to verify the signature that is java.security.PublicKey by receiver.

You can solve the problem like this way:
public static ECPublicKey genEcPubKey() throws Exception {
    KeyFactory factory = KeyFactory.getInstance(""ECDSA"", ""BC"");
    java.security.PublicKey ecPublicKey = (ECPublicKey) factory
            .generatePublic(new X509EncodedKeySpec(Helper
                    .toByte(ecRemotePubKey))); // Helper.toByte(ecRemotePubKey)) is java.security.PublicKey#getEncoded()
    return (ECPublicKey) ecPublicKey;
}

Note that, you need BouncyCastle provider to do that.
But question remains, how you generate the private key?
public KeyPair ecKeyPairGenerator(String curveName) throws Exception {
    KeyPair keyPair;
    KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance(
            ""ECDSA"", ""BC"");
    ECGenParameterSpec ecGenParameterSpec = new ECGenParameterSpec(
            curveName);
    keyPairGenerator.initialize(ecGenParameterSpec, new SecureRandom());
    keyPair = keyPairGenerator.generateKeyPair();
    java.security.PublicKey ecPublicKey = (ECPublicKey) keyPair.getPublic();
    System.out.println(""JAVA EC PublicKey: ""
            + Helper.toHex(ecPublicKey.getEncoded()));

    // write private key into a file. Just for testing purpose
    FileOutputStream fileOutputStream = new FileOutputStream(
            ""ECPrivateKey.key"");
    ObjectOutputStream objectOutputStream = new ObjectOutputStream(
            fileOutputStream);
    objectOutputStream.writeObject(keyPair.getPrivate());
    objectOutputStream.close();
    return keyPair;
}

I have the full running code for EC sign/verify in github. You can take a look for better understanding.
","4753","<java><key><signature><public-key><ecdsa>","2","3","1","2015-06-20 18:06:40","30947243","1","0","5029509","","2015-06-20 18:06:40","2015-06-19 19:16:43",""
"25829939","Specification defining ECDSA signature data","I want to know what specification (or standard) define the data format of the ECDSA signature and public key?
I'm testing the ECDSA signature on java card. I found out that there is a TLV format in the signature and the public key value.
* Public key (TV format)
[Tag=04] [public key value 1] [public key value 2]
04 038A3F59E813995DAB730588CFCBB985F5A1ED90C0D62960AE0B274D 2E6B12672318E0B113DECC0406B62887B6BCB9B1583B1A50779EAB5A

* Signature (TLV format)
[Tag=30] [Length=3C~3E] [Tag=02] [Length=1C~1D] [signature value 1] [Tag=02] [Length=1C~1D] [signature value 2]

303C 021C 7EEB0B2596F74344B3D7B046EA0BD17C4461FC277658CE93509F1674      021C 4F5DBFB30D994664DA80528847A767F0194876B068E5958161797991
303E 021D 0080F20B82D407AE663F010F4990F12073631D653EA1D65DC75EBD4293    021D 00880DB667EF51AEA8E7C9BB012496C7C9ECE3BC5829B82B692B9211C3
303D 021D 00F77447EF326A4A49597D0B839F68F524891F3655DA4561F1AA10EF70    021C 152F7FF18644C5E5C9118736E1F7528F0B10C5FF641C7B7CDF012129
303D 021D 00A2EBCC5C5981341D0726F2E846CC3879C74EFD64D8698589A8CEAB60    021C 6E04FF884A451D7C0737A182BC2DE7F7D3008EE182B46A009BFFC9E8

I think that the data format is defined in some specification or standard. I just want to know the document name.
","It's in here:
https://www.ietf.org/rfc/rfc5480.txt
Also ANDI X9.62 might be important, but not freely available i think
For example:
ECDSA-Sig-Value ::= SEQUENCE {
     r  INTEGER,
     s  INTEGER
   }
","4580","<format><specifications><javacard><ecdsa>","4","2","3","2016-07-01 13:44:04","","0","2","4370109","","2015-11-21 17:12:29","2014-09-14 03:59:47",""
"25829939","Specification defining ECDSA signature data","I want to know what specification (or standard) define the data format of the ECDSA signature and public key?
I'm testing the ECDSA signature on java card. I found out that there is a TLV format in the signature and the public key value.
* Public key (TV format)
[Tag=04] [public key value 1] [public key value 2]
04 038A3F59E813995DAB730588CFCBB985F5A1ED90C0D62960AE0B274D 2E6B12672318E0B113DECC0406B62887B6BCB9B1583B1A50779EAB5A

* Signature (TLV format)
[Tag=30] [Length=3C~3E] [Tag=02] [Length=1C~1D] [signature value 1] [Tag=02] [Length=1C~1D] [signature value 2]

303C 021C 7EEB0B2596F74344B3D7B046EA0BD17C4461FC277658CE93509F1674      021C 4F5DBFB30D994664DA80528847A767F0194876B068E5958161797991
303E 021D 0080F20B82D407AE663F010F4990F12073631D653EA1D65DC75EBD4293    021D 00880DB667EF51AEA8E7C9BB012496C7C9ECE3BC5829B82B692B9211C3
303D 021D 00F77447EF326A4A49597D0B839F68F524891F3655DA4561F1AA10EF70    021C 152F7FF18644C5E5C9118736E1F7528F0B10C5FF641C7B7CDF012129
303D 021D 00A2EBCC5C5981341D0726F2E846CC3879C74EFD64D8698589A8CEAB60    021C 6E04FF884A451D7C0737A182BC2DE7F7D3008EE182B46A009BFFC9E8

I think that the data format is defined in some specification or standard. I just want to know the document name.
","The public key value is  an uncompressed point. It is defined by value 04, which is an identifier for an uncompressed point, followed by the X and Y coordinate, where the X and Y are encoded as unsigned big endian octet strings that have the same size as the key size (same as the size of the order of the curve in the parameters). Note that 04 is also the tag for an OCTET STRING in ASN.1, but that has nothing to do with the uncompressed point indicator.
The format of the domain parameters is unknown to me. It's certainly not encoded as  https://www.ietf.org/rfc/rfc5480.txt as Paul suggests. I presume it is some proprietary DER format, which uses multiple ASN.1 SEQUENCE values filled with two ASN.1 INTEGER values each. These integer values (after the length) are signed, unpadded, big endian encodings, which fortunately are completely compatible with the encoding of Java's BigInteger.
Paul Bastian is correct with regards to the signature generated, it's X9.42 compatible. Plain signatures are not yet supported by Java Card.
","4580","<format><specifications><javacard><ecdsa>","4","1","3","2016-07-01 13:44:04","","0","2","4370109","","2015-11-21 17:12:29","2014-09-14 03:59:47",""
"25829939","Specification defining ECDSA signature data","I want to know what specification (or standard) define the data format of the ECDSA signature and public key?
I'm testing the ECDSA signature on java card. I found out that there is a TLV format in the signature and the public key value.
* Public key (TV format)
[Tag=04] [public key value 1] [public key value 2]
04 038A3F59E813995DAB730588CFCBB985F5A1ED90C0D62960AE0B274D 2E6B12672318E0B113DECC0406B62887B6BCB9B1583B1A50779EAB5A

* Signature (TLV format)
[Tag=30] [Length=3C~3E] [Tag=02] [Length=1C~1D] [signature value 1] [Tag=02] [Length=1C~1D] [signature value 2]

303C 021C 7EEB0B2596F74344B3D7B046EA0BD17C4461FC277658CE93509F1674      021C 4F5DBFB30D994664DA80528847A767F0194876B068E5958161797991
303E 021D 0080F20B82D407AE663F010F4990F12073631D653EA1D65DC75EBD4293    021D 00880DB667EF51AEA8E7C9BB012496C7C9ECE3BC5829B82B692B9211C3
303D 021D 00F77447EF326A4A49597D0B839F68F524891F3655DA4561F1AA10EF70    021C 152F7FF18644C5E5C9118736E1F7528F0B10C5FF641C7B7CDF012129
303D 021D 00A2EBCC5C5981341D0726F2E846CC3879C74EFD64D8698589A8CEAB60    021C 6E04FF884A451D7C0737A182BC2DE7F7D3008EE182B46A009BFFC9E8

I think that the data format is defined in some specification or standard. I just want to know the document name.
","The ASN.1 structure is defined in SEC 1: Elliptic Curve Cryptography (part C: ASN.1 for Elliptic Curve Cryptography), from the SECG (Standards for Efficient Cryptography Group).
","4580","<format><specifications><javacard><ecdsa>","4","3","3","2016-07-01 13:44:04","","0","2","4370109","","2015-11-21 17:12:29","2014-09-14 03:59:47",""
"17439732","Recreating Keys (ECPublicKeyParameters) in C# with BouncyCastle","I generate an AsymmetricCipherKeyPair as follows:
string curveName = ""P-521"";
X9ECParameters ecP = NistNamedCurves.GetByName(curveName);
ECDomainParameters ecSpec = new ECDomainParameters(ecP.Curve, ecP.G, ecP.N, ecP.H, ecP.GetSeed());
IAsymmetricCipherKeyPairGenerator g = GeneratorUtilities.GetKeyPairGenerator(""ECDH"");
g.Init(new ECKeyGenerationParameters(ecSpec, new SecureRandom()));
AsymmetricCipherKeyPair aKeyPair = g.GenerateKeyPair();

My intention was to extract the public and private keys and then rebuild the keys later. I first extracted the keys as follows:
byte[] privateKey = ((ECPrivateKeyParameters)aKeyPair.Private).D.ToByteArray();
byte[] publicKey = ((ECPublicKeyParameters)aKeyPair.Public).Q.GetEncoded();

How do I recreate the public and private key parameters so that I can use them? In this example, I do recreate the private key and then sign the data byte array.
public static byte[] SignData(byte[] data, byte[] privateKey)
{
    string curveName = ""P-521"";
    X9ECParameters ecP = NistNamedCurves.GetByName(curveName);
    ECDomainParameters ecSpec = new ECDomainParameters(ecP.Curve, ecP.G, ecP.N, ecP.H, ecP.GetSeed());
    ISigner signer = SignerUtilities.GetSigner(""SHA-256withECDSA"");
    BigInteger biPrivateKey = new BigInteger(privateKey);
    ECPrivateKeyParameters keyParameters = new ECPrivateKeyParameters(biPrivateKey, ecSpec);
    signer.Init(true, keyParameters);
    signer.BlockUpdate(data, 0, data.Length);
    return signer.GenerateSignature();
}

Although it feels like a real hack, it works just fine. How can I do this with the Public Key? I set the variable xxx to (ECPublicKeyParameters)aKeyPair.Public and I can use the code below to verify the signature. Note that I could use xxx directly, but the point is to serialize xxx out and then back in, so, this code actually does convert the xxx variable and creates a new one, which is stored in xx. I then use xx to verify (which shows that I can round trip the key). 
var xx = PublicKeyFactory.CreateKey(Org.BouncyCastle.X509.SubjectPublicKeyInfoFactory.CreateSubjectPublicKeyInfo(xxx).GetDerEncoded());
ISigner signer = SignerUtilities.GetSigner(""SHA-256withECDSA"");
signer.Init(false, xx);
signer.BlockUpdate(data, 0, data.Length);
return signer.VerifySignature(signature);

I had hoped that I could create the key (xx) from Q.GetEncoded() similar to how I did it for the private key. 
Is there a better way to rebuild the private key? also using an ASN.1 encoding? If so, perhaps I should use that instead.
","I can do this as follows:
string curveName = ""P-521"";
X9ECParameters ecP = NistNamedCurves.GetByName(curveName);
FpCurve c = (FpCurve)ecP.Curve;
ECFieldElement x = new FpFieldElement(c.Q, xxx.Q.X.ToBigInteger());
ECFieldElement y = new FpFieldElement(c.Q, xxx.Q.Y.ToBigInteger());
ECPoint q = new FpPoint(c, x, y);
ECPublicKeyParameters xxpk = new ECPublicKeyParameters(""ECDH"", q, SecObjectIdentifiers.SecP521r1);

Then, I can use xxpk to verify the signature. 
Disclaimer: I do not claim that this is the best way to do this, just that it works!
","4323","<c#><bouncycastle><ecdsa>","5","3","1","2013-07-03 12:43:48","17448345","0","","2544747","","2013-07-03 04:46:41","2013-07-03 04:33:57",""
"40155888","How can I generate a valid ECDSA EC key pair?","I am trying to generate ECDSA key pair using SpongyCastle in Android.
This is the code:
static {
    Security.insertProviderAt(new org.spongycastle.jce.provider.BouncyCastleProvider(), 1);
}

public static KeyPair generate() {
        ECParameterSpec ecSpec = ECNamedCurveTable.getParameterSpec(""prime256v1"");
        KeyPairGenerator generator = KeyPairGenerator.getInstance(""ECDSA"", ""SC"");
        generator.initialize(ecSpec, new SecureRandom());
        KeyPair keyPair = g.generateKeyPair();
        Log.i(TAG, ""EC Pub Key generated: "" + utils.bytesToHex(keyPair.getPublic().getEncoded()));
        Log.i(TAG, ""EC Private Key generated: "" + utils.bytesToHex(keyPair.getPrivate().getEncoded()));            
       return generator.generateKeyPair();
}

Something is wrong since I always get something like that example of 
Public Key:

3059301306072A8648CE3D020106082A8648CE3D03010703420004483ABA9F322240010ECF00E818C041A60FE71A2BD64C64CD5A60519985F110AEDE6308027D2730303F5E2478F083C7F5BB683DCAC22BFEB62F3A48BD01009F40

and Private Key: 

308193020100301306072A8648CE3D020106082A8648CE3D030107047930770201010420219AB4B3701630973A4B2917D53F69A4BE6DAD61F48016BFEF147B2999575CB2A00A06082A8648CE3D030107A14403420004483ABA9F322240010ECF00E818C041A60FE71A2BD64C64CD5A60519985F110AEDE6308027D2730303F5E2478F083C7F5BB683DCAC22BFEB62F3A48BD01009F40

The site ECDSA sample give me ""Invalid ECDSA signature message"", and them seems really very different from that smaller Private Key and always starting with ""04"" Public Key generated in the same site.
Also, my backend verification gives me the error ""Invalid point encoding 0x30""
The backend Java method check is:
public ECPublicKey getPublicKeyFromHex(String publicKeyHex)
        throws NoSuchAlgorithmException, DecoderException, ApplicationGenericException {
    byte[] rawPublicKey = Hex.decodeHex(publicKeyHex.toCharArray());
    ECPublicKey ecPublicKey = null;
    KeyFactory kf = null;

    ECNamedCurveParameterSpec ecNamedCurveParameterSpec = ECNamedCurveTable.getParameterSpec(""prime256v1"");
    ECCurve curve = ecNamedCurveParameterSpec.getCurve();
    EllipticCurve ellipticCurve = EC5Util.convertCurve(curve, ecNamedCurveParameterSpec.getSeed());
    java.security.spec.ECPoint ecPoint = ECPointUtil.decodePoint(ellipticCurve, rawPublicKey);
    java.security.spec.ECParameterSpec ecParameterSpec = EC5Util.convertSpec(ellipticCurve,
            ecNamedCurveParameterSpec);
    java.security.spec.ECPublicKeySpec publicKeySpec = new java.security.spec.ECPublicKeySpec(ecPoint,
            ecParameterSpec);

    kf = KeyFactory.getInstance(""ECDSA"", new BouncyCastleProvider());

    try {
        ecPublicKey = (ECPublicKey) kf.generatePublic(publicKeySpec);
    } catch (Exception e) {
        throw new ApplicationGenericException(e.getMessage(), e.getCause());
    }

    return ecPublicKey;
}

","Java's default encoding for a PublicKey is ""X.509"" which is not just the EC point; it is an ASN.1 structure identifying the algorithm (EC) and parameters (here prime256v1) PLUS a BIT STRING wrapping the point; see rfc5280 section 4.2.1.7 and rfc3279 section 2.3.5. 
Similarly the default encoding for PrivateKey is ""PKCS#8"" (unencrypted) which is a structure containing an AlgorithmIdentifier plus an OCTET STRING wrapping the data which in this case contains both the private key value and a copy of the public key, see rfc5208 section 5 and C.4 of document SEC 1 at http://www.secg.org with tag [0] omitted but tag [1] present.
To read (either or both of) them back in to Java, get a KeyFactory.getInstance(""EC"") and use generate{Public,Private} on an X509EncodedKeySpec or PKCS8EncodedKeySpec respectively.
ECDSA and ECDH (and ECMQV etc) use the same key structures, unlike classic integer DSA and DH which use the same mathematical structure ($Z_p^*$) but slightly different representations.
PS: the javadoc for java.security.Key tells you most of this.
","4260","<bouncycastle><elliptic-curve><ecdsa><dsa><spongycastle>","2","5","2","2016-10-24 09:42:25","","0","","5962766","","2016-10-24 09:42:25","2016-10-20 03:02:33",""
"40155888","How can I generate a valid ECDSA EC key pair?","I am trying to generate ECDSA key pair using SpongyCastle in Android.
This is the code:
static {
    Security.insertProviderAt(new org.spongycastle.jce.provider.BouncyCastleProvider(), 1);
}

public static KeyPair generate() {
        ECParameterSpec ecSpec = ECNamedCurveTable.getParameterSpec(""prime256v1"");
        KeyPairGenerator generator = KeyPairGenerator.getInstance(""ECDSA"", ""SC"");
        generator.initialize(ecSpec, new SecureRandom());
        KeyPair keyPair = g.generateKeyPair();
        Log.i(TAG, ""EC Pub Key generated: "" + utils.bytesToHex(keyPair.getPublic().getEncoded()));
        Log.i(TAG, ""EC Private Key generated: "" + utils.bytesToHex(keyPair.getPrivate().getEncoded()));            
       return generator.generateKeyPair();
}

Something is wrong since I always get something like that example of 
Public Key:

3059301306072A8648CE3D020106082A8648CE3D03010703420004483ABA9F322240010ECF00E818C041A60FE71A2BD64C64CD5A60519985F110AEDE6308027D2730303F5E2478F083C7F5BB683DCAC22BFEB62F3A48BD01009F40

and Private Key: 

308193020100301306072A8648CE3D020106082A8648CE3D030107047930770201010420219AB4B3701630973A4B2917D53F69A4BE6DAD61F48016BFEF147B2999575CB2A00A06082A8648CE3D030107A14403420004483ABA9F322240010ECF00E818C041A60FE71A2BD64C64CD5A60519985F110AEDE6308027D2730303F5E2478F083C7F5BB683DCAC22BFEB62F3A48BD01009F40

The site ECDSA sample give me ""Invalid ECDSA signature message"", and them seems really very different from that smaller Private Key and always starting with ""04"" Public Key generated in the same site.
Also, my backend verification gives me the error ""Invalid point encoding 0x30""
The backend Java method check is:
public ECPublicKey getPublicKeyFromHex(String publicKeyHex)
        throws NoSuchAlgorithmException, DecoderException, ApplicationGenericException {
    byte[] rawPublicKey = Hex.decodeHex(publicKeyHex.toCharArray());
    ECPublicKey ecPublicKey = null;
    KeyFactory kf = null;

    ECNamedCurveParameterSpec ecNamedCurveParameterSpec = ECNamedCurveTable.getParameterSpec(""prime256v1"");
    ECCurve curve = ecNamedCurveParameterSpec.getCurve();
    EllipticCurve ellipticCurve = EC5Util.convertCurve(curve, ecNamedCurveParameterSpec.getSeed());
    java.security.spec.ECPoint ecPoint = ECPointUtil.decodePoint(ellipticCurve, rawPublicKey);
    java.security.spec.ECParameterSpec ecParameterSpec = EC5Util.convertSpec(ellipticCurve,
            ecNamedCurveParameterSpec);
    java.security.spec.ECPublicKeySpec publicKeySpec = new java.security.spec.ECPublicKeySpec(ecPoint,
            ecParameterSpec);

    kf = KeyFactory.getInstance(""ECDSA"", new BouncyCastleProvider());

    try {
        ecPublicKey = (ECPublicKey) kf.generatePublic(publicKeySpec);
    } catch (Exception e) {
        throw new ApplicationGenericException(e.getMessage(), e.getCause());
    }

    return ecPublicKey;
}

","More practical example. Convert generated public key to decoded bytes array or hex string:  
public String getPublicKeyAsHex(PublicKey publicKey){

    ECPublicKey ecPublicKey = (ECPublicKey)publicKey;
    ECPoint ecPoint = ecPublicKey.getW();

    byte[] publicKeyBytes = new byte[PUBLIC_KEY_LENGTH];
    writeToStream(publicKeyBytes, 0, ecPoint.getAffineX(), PRIVATE_KEY_LENGTH);
    writeToStream(publicKeyBytes, PRIVATE_KEY_LENGTH, ecPoint.getAffineY(), PRIVATE_KEY_LENGTH);

    String hex = Hex.toHexString(publicKeyBytes);

    logger.debug(""Public key bytes: "" + Arrays.toString(publicKeyBytes));
    logger.debug(""Public key hex: "" + hex);

    return hex;
}

private void writeToStream(byte[] stream, int start, BigInteger value, int size) {
    byte[] data = value.toByteArray();
    int length = Math.min(size, data.length);
    int writeStart = start + size - length;
    int readStart = data.length - length;
    System.arraycopy(data, readStart, stream, writeStart, length);
}

Convert decoded bytes array back to PublicKey:
KeyFactory factory = KeyFactory.getInstance(ALGORITHM, ALGORITHM_PROVIDER);

ECNamedCurveParameterSpec spec = ECNamedCurveTable.getParameterSpec(CURVE);

ECNamedCurveSpec params = new ECNamedCurveSpec(CURVE, spec.getCurve(), spec.getG(), spec.getN());

BigInteger xCoordinate = new BigInteger(1, Arrays.copyOfRange(decodedPublicKey, 0, PRIVATE_KEY_LENGTH));
BigInteger yCoordinate = new BigInteger(1, Arrays.copyOfRange(decodedPublicKey, PRIVATE_KEY_LENGTH, PUBLIC_KEY_LENGTH));
java.security.spec.ECPoint w = new java.security.spec.ECPoint(xCoordinate, yCoordinate);

PublicKey encodedPublicKey = factory.generatePublic(new java.security.spec.ECPublicKeySpec(w, params));

","4260","<bouncycastle><elliptic-curve><ecdsa><dsa><spongycastle>","2","1","2","2016-10-24 09:42:25","","0","","5962766","","2016-10-24 09:42:25","2016-10-20 03:02:33",""
"36968896","Openssl ECDSA : private key passphrase","I am new with Openssl i have generated a private key myprivatekey.pem and a publickey mypublickey.pem with :
openssl ecparam -genkey -name secp160k1 -noout -out myprivatekey.pem

and my public key with :
openssl -ec  -in myprivatekey.pem -pubout -out mypublickey.pem

What i want to do next is to encrypte my ecdsa with a passphrase private key and make a certification request for my public key and thank you for your help.  
","It would seem that ecparam doesn't have a built-in option for encrypting the generated key. Instead, you can simply do the following:
openssl ec -in myprivatekey.pem -out myprivatekey_encrypted.pem -aes256

Compared to genrsa, an extra step is required, but this basically does the same thing.

Now as far as the certificate request, the command is pretty much the same regardless of the type of private key used:
openssl req -new -sha256 -key myprivatekey.pem -out mycertrequest.pem

You can then take the resulting mycertrequest.pem and send it to a CA for signing.

Edit:
If you have concerns about writing the unencrypted private key to disk, you can do both the generation and encryption of the key in one step like so:
openssl ecparam -genkey -name secp256k1 | openssl ec -aes256 -out privatekey.pem

This generates a P-256 key, then prompts you for a passphrase. The key is then encrypted using AES256 and saved into privatekey.pem.
","4248","<security><encryption><openssl><ecdsa>","4","10","1","2017-07-25 17:39:59","39815131","1","","3337864","","2016-05-01 18:36:36","2016-05-01 16:18:03",""
"22003407","Bouncy Castle ESCDA Create Public Key from Private Key","I am trying to sign a bitcoin transaction in c#.  I have 2 bits of code I am trying to complete.  I can create a set of private and public keys using Bouncy castle.   I can convert this to wallet import format ok.
I can also generate a bitcoin address from the ECDSA public key.
However, I want to sign a transaction and all I have is my private key.  I don't want to have to import into a wallet and sign.  So how can I generate the public key, given only the private key?
I have found a javascript method that does this:
ecparams.getG().multiply(this.priv).getEncoded();

The only way I've seen in Bouncy Castle is to generate a random pair.
private static AsymmetricCipherKeyPair GenerateKeys(int keySize)
{
  ECKeyPairGenerator gen = new ECKeyPairGenerator();
  SecureRandom secureRandom = new SecureRandom();
  KeyGenerationParameters keyGenParam = new KeyGenerationParameters(secureRandom, keySize);
  gen.Init(keyGenParam);
  return gen.GenerateKeyPair();
}

","take a look at the following code. the private key is given by as base64 encoded string in this example and also a base64 encoded string is given back. the commented keyParameters are working, so use this one if you want to have key and curve.
private static readonly Org.BouncyCastle.Asn1.X9.X9ECParameters curve = Org.BouncyCastle.Asn1.Sec.SecNamedCurves.GetByName(""secp256r1"");
private static readonly Org.BouncyCastle.Crypto.Parameters.ECDomainParameters domain = new Org.BouncyCastle.Crypto.Parameters.ECDomainParameters(curve.Curve, curve.G, curve.N, curve.H);
public string GetPublicKey(string privKey)
{
      Org.BouncyCastle.Math.BigInteger d = new Org.BouncyCastle.Math.BigInteger(Convert.FromBase64String(privKey));
      //var privKeyParameters = new Org.BouncyCastle.Crypto.Parameters.ECPrivateKeyParameters(d, domain);
      Org.BouncyCastle.Math.EC.ECPoint q = domain.G.Multiply(d);
      //var pubKeyParameters = new Org.BouncyCastle.Crypto.Parameters.ECPublicKeyParameters(q, domain);
      return Convert.ToBase64String(q.GetEncoded());
}

","3905","<c#><bouncycastle><bitcoin><ecdsa>","2","1","3","2018-07-20 06:33:23","","0","","3204","","2014-03-18 10:09:48","2014-02-25 02:27:17",""
"22003407","Bouncy Castle ESCDA Create Public Key from Private Key","I am trying to sign a bitcoin transaction in c#.  I have 2 bits of code I am trying to complete.  I can create a set of private and public keys using Bouncy castle.   I can convert this to wallet import format ok.
I can also generate a bitcoin address from the ECDSA public key.
However, I want to sign a transaction and all I have is my private key.  I don't want to have to import into a wallet and sign.  So how can I generate the public key, given only the private key?
I have found a javascript method that does this:
ecparams.getG().multiply(this.priv).getEncoded();

The only way I've seen in Bouncy Castle is to generate a random pair.
private static AsymmetricCipherKeyPair GenerateKeys(int keySize)
{
  ECKeyPairGenerator gen = new ECKeyPairGenerator();
  SecureRandom secureRandom = new SecureRandom();
  KeyGenerationParameters keyGenParam = new KeyGenerationParameters(secureRandom, keySize);
  gen.Init(keyGenParam);
  return gen.GenerateKeyPair();
}

","From steininger's answer, I got the following to work with the sample keys I had.
using Org.BouncyCastle.Asn1.Sec;
using Org.BouncyCastle.Asn1.X9;
using Org.BouncyCastle.Crypto.Parameters;
using Org.BouncyCastle.Math;
using Org.BouncyCastle.Math.EC;

public static class Example
{
    private static X9ECParameters curve = SecNamedCurves.GetByName(""secp256k1"");
    private static ECDomainParameters domain = new ECDomainParameters(curve.Curve, curve.G, curve.N, curve.H);

    public static byte[] ToPublicKey(byte[] privateKey)
    {
        BigInteger d = new BigInteger(privateKey);
        ECPoint q = domain.G.Multiply(d);

        var publicParams = new ECPublicKeyParameters(q, domain);
        return publicParams.Q.GetEncoded();
    }
}

","3905","<c#><bouncycastle><bitcoin><ecdsa>","2","3","3","2018-07-20 06:33:23","","0","","3204","","2014-03-18 10:09:48","2014-02-25 02:27:17",""
"22003407","Bouncy Castle ESCDA Create Public Key from Private Key","I am trying to sign a bitcoin transaction in c#.  I have 2 bits of code I am trying to complete.  I can create a set of private and public keys using Bouncy castle.   I can convert this to wallet import format ok.
I can also generate a bitcoin address from the ECDSA public key.
However, I want to sign a transaction and all I have is my private key.  I don't want to have to import into a wallet and sign.  So how can I generate the public key, given only the private key?
I have found a javascript method that does this:
ecparams.getG().multiply(this.priv).getEncoded();

The only way I've seen in Bouncy Castle is to generate a random pair.
private static AsymmetricCipherKeyPair GenerateKeys(int keySize)
{
  ECKeyPairGenerator gen = new ECKeyPairGenerator();
  SecureRandom secureRandom = new SecureRandom();
  KeyGenerationParameters keyGenParam = new KeyGenerationParameters(secureRandom, keySize);
  gen.Init(keyGenParam);
  return gen.GenerateKeyPair();
}

","If you're dealing with DER encoded keys, it's even simpler:      
  var privateKey = PrivateKeyFactory.CreateKey(bytes) as ECPrivateKeyParameters;
  if (privateKey == null)
       return null;
  Org.BouncyCastle.Math.EC.ECPoint q = privateKey.Parameters.G.Multiply(privateKey.D);
  var publicParams = new ECPublicKeyParameters(privateKey.AlgorithmName, q, privateKey.PublicKeyParamSet);
  return SubjectPublicKeyInfoFactory.CreateSubjectPublicKeyInfo(publicParams).GetDerEncoded();

","3905","<c#><bouncycastle><bitcoin><ecdsa>","2","1","3","2018-07-20 06:33:23","","0","","3204","","2014-03-18 10:09:48","2014-02-25 02:27:17",""
"20386230","Implementing secp256k1 (ECDSA) in PHP (for Bitcoin)","To keen downvoters and/or closers: If you think this is offtopic for SO, kindly point me out other StackExchange site where this question would be more appropriate.

How to implement ECDSA curve secp256k1 in PHP?
Or rather: Are there any solutions - ie. includable specialized classes - already done?
I can see there are plenty of opensource libraries, classes and stuff available for other languages (JavaScript, Python,...) but I've just spent whole afternoon googling for some/any PHP solution and ... nothing!.
This is for a bitcoin project of mine and I need a way how to generate public key from private key ... and then I want to generate the final bitcoin address.
I know how to generate private key (don't worry about it being random or not - not an issue here) and I have both 256bit hexadecimal and WIF notations. But the next step: coming up with a public key and then final bitcoin address, is kind of a problem to me, as I have literally zero cryptograph-ish background and I know the solution is to utilize secp256k1 somehow.
This is what I have so far:
// Random bytes
// $private_key = bin2hex(openssl_random_pseudo_bytes(32));
// But using brainwallet.org style to have easy comparison
$passphrase = ""correct horse battery staple"";
$private_key = hash('sha256', $passphrase);
var_dump (""PrivKey: $private_key"");
// Bitcoin::privKeyToWIF from github.com/mikegogulski/bitcoin-php
$wif = Bitcoin::privKeyToWIF($private_key); 
var_dump (""WIF PrivKey: $wif"");
// And now I don't know where to even start ...

tl;dr How to implement this in PHP? (..and privKey->pubKey conversion before that)
http://i.stack.imgur.com/U2neg.png
I know about...

http://github.com/mikegogulski/bitcoin-php .. Which is pretty neat and has lots of useful methods and ways how to control bitcoind via RPC, but unfortunately pure PHP method that could handle privKey->pubKey mechanism is missing.
http://bitcoinphp.com/ .. I couldn't find it in there.
openssl extension in PHP, but unfortunately the only digest method OPENSSL-PHP documentation is mentioning is 'ecdsa-with-SHA1', and correct me if I'm wrong, but I'd need 'ecdsa-with-SHA256', or something like that (?)
I even tried to convert the algorithm from bitcoinjs.js, but with my crypto-knowledge I was unable to extract the gist of anything. I simply don't understand those curves and their bit operations and other spooky stuff.

I'm looking for PURE PHP solution. I'm not looking for using shell running bitcoind and then parse JSON for key pairs and then...
Why there is no piece of code that could handle this entirely in PHP? OR IS THERE?! :)
","","3494","<php><bitcoin><ecdsa><php-openssl>","6","","0","2014-06-15 13:48:23","","8","4","1285669","","2014-06-15 13:48:23","2013-12-04 21:21:01","2013-12-04 23:38:14"
"19955541","Generate elliptic curve key pairs (EC_KEY_generate_key) in multiple threads using OpenSSL C library","I want to generate many ec key pairs. Speeding up the process a bit, I rewrote my appication to use multiple threads for this job. Here is a code snippet of the way each thread wants to generate the keys:
(...)
EC_KEY* _ec_key = EC_KEY_new(); 
EC_GROUP* ec_group_new = EC_GROUP_new_by_curve_name(NID_X9_62_prime256v1); 
const EC_GROUP* ec_group = ec_group_new; 
if (!EC_KEY_set_group(ec_key,ec_group)) 
  DieWithError(""Error in initializeCrypto, EC_KEY_set_group failed!"");

// Segfault at this position
if(!EC_KEY_generate_key(ec_key))
  DieWithError (""Error in generateKeys, EC_KEY_generate_key failed!"");

(...)
EC_GROUP_free(ec_group_new); 
EC_KEY_free(ec_key);

Ok at the first glance, everything seemed to work fine. The applications ran twice as fast using four threads on my i5 520m. But then after 3-4 E6 key generations it suddenly segfaults. If I lock the EC_KEY_generate_key operation there is no segfault anymore, but the advantage of using multiple threads is gone. Now my questions. Is it possible split the creation of keys into multiple threads without corrupting memory? I didn't found any information using google. The SSL Docu doesn't mention anything about thread-safety, though. Any help is highly appreciated. thx
","// Segfault at this position
if(!EC_KEY_generate_key(ec_key))
  DieWithError (""Error in generateKeys, EC_KEY_generate_key failed!"");
...

... But then after 3-4 E6 key generations it suddenly segfaults.

You are using OpenSSL's random number generator, and its not thread safe. Below is from cryptlib.c around line 125. Notice the random number generators and the elliptic curve gear make the list.
/* real #defines in crypto.h, keep these upto date */
static const char* const lock_names[CRYPTO_NUM_LOCKS] =
    {
    ""<<ERROR>>"",
    ""err"",
    ""ex_data"",
    ""x509"",
    ""x509_info"",
    ""x509_pkey"",
    ""x509_crl"",
    ""x509_req"",
    ...
    ""ssl_ctx"",
    ""ssl_session"",
    ""ssl"",
    ""ssl_method"",
    ""rand"",
    ""rand2"",
    ...
    ""ecdsa"",
    ""ec"",
    ""ecdh"",
    ""bn"",
    ""ec_pre_comp"",
    ...
    };

You have to explicitly set the locks. See OpenSSL's threads(3).


Is it possible split the creation of keys into multiple threads without corrupting memory?

Yes, but you have to use OpenSSL's locking mechanism.
Here's what my OpenSSL initialization routine looks like in C++. It initializes the locks and sets the callbacks.
pthread_mutex_t s_locks[CRYPTO_NUM_LOCKS] = { };

void Initialize()
{    
    static once_flag init;
    std::call_once(init, []() {      

        // Standard OpenSSL library init
        OPENSSL_no_config();
        SSL_library_init();

        SSL_load_error_strings();
        OpenSSL_add_ssl_algorithms();

        // Lock setup
        LOCK_setup();
        CALLBACK_setup();
    });
}

void LOCK_setup()
{    
    ASSERT(CRYPTO_NUM_LOCKS == CRYPTO_num_locks());
    if(CRYPTO_NUM_LOCKS != CRYPTO_num_locks())
        throw runtime_error(""CRYPTO_NUM_LOCKS mismatch"");

    for(unsigned i = 0; i < CRYPTO_NUM_LOCKS; ++i)
    {
        int rc = pthread_mutex_init(&s_locks[i], NULL);
        ASSERT(rc == 0);
        if(!(rc == 0))
            throw runtime_error(""pthread_mutex_init"");
    }
}

void CALLBACK_setup()
{    
    CRYPTO_set_id_callback(&ThreadIdFnc);
    CRYPTO_set_locking_callback(&LockingFnc);
}

void LockingFnc(int mode, int idx, const char* file, int line)
{
    ASSERT(mode == CRYPTO_LOCK || mode == CRYPTO_UNLOCK);
    ASSERT(CRYPTO_NUM_LOCKS == CRYPTO_num_locks());
    ASSERT(idx >= 0 && idx < CRYPTO_NUM_LOCKS);

    if(!(idx >= 0 && idx < CRYPTO_NUM_LOCKS))
    {    
        ostringstream oss;
        oss << ""LockingFnc: lock failed with bad index "";
        oss << idx << "". File: "" << (file ? file : ""Unknown"");
        oss << "", line: "" << line;

        // Log oss.str()
        return;
    }

    if((mode & CRYPTO_LOCK) == CRYPTO_LOCK)
    {
        int rc = pthread_mutex_lock(&s_locks[idx]);
        int err = errno;
        ASSERT(rc == 0);

        if(!(rc == 0))
        {
            ostringstream oss;
            oss << ""LockingFnc: lock failed with error "";
            oss << err << "". File: "" << (file ? file : ""Unknown"");
            oss << "", line: "" << line;          

            throw runtime_error(oss.str());
        }
    }
    else if((mode & CRYPTO_UNLOCK) == CRYPTO_UNLOCK)
    {
        int rc = pthread_mutex_unlock(&s_locks[idx]);
        int err = errno;
        ASSERT(rc == 0);

        if(!(rc == 0))
        {
            ostringstream oss;
            oss << ""LockingFnc: unlock failed with error "";
            oss << err << "". File: "" << (file ? file : ""Unknown"");
            oss << "", line: "" << line;

            throw runtime_error(oss.str());
        }
    }
}

unsigned long ThreadIdFnc()
{
#if defined(AC_OS_APPLE)
    ASSERT(sizeof(unsigned long) >= sizeof(pid_t));
    return static_cast<unsigned long>(pthread_mach_thread_np(pthread_self()));
#elif defined(AC_OS_STARNIX)
    ASSERT(sizeof(unsigned long) >= sizeof(pid_t));
    return static_cast<unsigned long>(gettid());
#else
# error ""Unsupported platform""
#endif
}

If you are not using libssl, then forgo the call to SSL_library_init. All libcrypto needs is the call to OpenSSL_add_all_algorithms to initialize.


The SSL Documentation doesn't mention anything about thread-safety, though.

Yeah, the docs leave something to be desired at times. I know a bunch of folks are working on improving it through a wiki run by the OpenSSL Foundation. Matt Caswell has done a lot of work in simply documenting the elliptic curve stuff at http://wiki.openssl.org/index.php/Elliptic_Curve_Cryptography. He's also responsible for the POD files and MAN pages. Keep in mind that Matt did not write any of the code - he's just documenting it for others.
There's a page on initialization, but it does not have the code for the locks. Its on my TODO list. See http://wiki.openssl.org/index.php/Library_Initialization.
","3336","<c><multithreading><openssl><ecdsa>","3","5","1","2013-12-04 11:27:48","20318596","0","","","","","2013-11-13 13:50:25",""
"37572306","Verifying ECDSA signature with Bouncy Castle in C#","I have a problem when I try to verify the ECDSA signature in Bouncy Castle in C#. The code is adopted from Java example that I have, so I am 100% sure that the public key and signature are correct. But the C# implementation always returns that the signature is not valid. I checked the curve parameters and they are correct. I tried with DER and ""raw"" signature and again it did not work.
Can anybody spot what I am doing wrong:
namespace TestECDSA
{
    class Program
    {
    static void Main(string[] args)
    {
        byte[] b = new byte[] { 0x2B, 0xA1, 0x41, 0x00 };

        string pubKey = ""044F6D3F294DEA5737F0F46FFEE88A356EED95695DD7E0C27A591E6F6F65962BAF"";
        string signature = ""AAD03D3D38CE53B673CF8F1C016C8D3B67EA98CBCF72627788368C7C54AA2FC4"";

        X9ECParameters curve = SecNamedCurves.GetByName(""secp128r1"");
        ECDomainParameters curveSpec = new ECDomainParameters(curve.Curve, curve.G, curve.N, curve.H, curve.GetSeed());

        ECPublicKeyParameters key = new ECPublicKeyParameters(""ECDSA"", curve.Curve.DecodePoint(Hex.Decode(pubKey)), curveSpec);

        ISigner signer = SignerUtilities.GetSigner(""NONEwithECDSA"");             

        signer.Init(false, key);

        signer.BlockUpdate(b, 0, b.Length);

        if (signer.VerifySignature(derEncodeSignature(Hex.Decode(signature))))
            System.Console.WriteLine(""Verified Signature"");
        else
            System.Console.WriteLine(""Not Verified Signature"");
    }

    public static byte[] derEncodeSignature(byte[] signature)
    {
        byte[] encoded = new byte[6 + signature.Length];

        byte[] r = RangeSubset(signature, 0, 16);
        byte[] s = RangeSubset(signature, 16, 16);

        encoded[0] = 0x30;
        encoded[1] = 0x24;
        encoded[2] = 0x02;
        encoded[3] = 0x10;

        encoded[4 + r.Length] = 0x02;
        encoded[5 + r.Length] = 0x10;

        Array.Copy(r, 0, encoded, 4, r.Length);
        Array.Copy(s, 0, encoded, 6 + r.Length, r.Length);

        return encoded;
    }

    public static T[] RangeSubset<T>(T[] array, int startIndex, int length)
    {
        T[] subset = new T[length];
        Array.Copy(array, startIndex, subset, 0, length);
        return subset;
    }
}
}

","dbugger was right. DER encoding is wrong. The code in question should be replaced by:
    private static byte[] derEncodeSignature(byte[] signature)
    {
        byte[] r = signature.RangeSubset(0, (signature.Length / 2));
        byte[] s = signature.RangeSubset((signature.Length / 2), (signature.Length / 2));

        MemoryStream stream = new MemoryStream();
        DerOutputStream der = new DerOutputStream(stream);

        Asn1EncodableVector v = new Asn1EncodableVector();
        v.Add(new DerInteger(new BigInteger(1, r)));
        v.Add(new DerInteger(new BigInteger(1, s)));
        der.WriteObject(new DerSequence(v));

        return stream.ToArray();
    }

","3282","<c#><encryption><bouncycastle><ecdsa>","2","3","2","2017-09-14 15:09:13","","8","1","","","","2016-06-01 14:59:10",""
"37572306","Verifying ECDSA signature with Bouncy Castle in C#","I have a problem when I try to verify the ECDSA signature in Bouncy Castle in C#. The code is adopted from Java example that I have, so I am 100% sure that the public key and signature are correct. But the C# implementation always returns that the signature is not valid. I checked the curve parameters and they are correct. I tried with DER and ""raw"" signature and again it did not work.
Can anybody spot what I am doing wrong:
namespace TestECDSA
{
    class Program
    {
    static void Main(string[] args)
    {
        byte[] b = new byte[] { 0x2B, 0xA1, 0x41, 0x00 };

        string pubKey = ""044F6D3F294DEA5737F0F46FFEE88A356EED95695DD7E0C27A591E6F6F65962BAF"";
        string signature = ""AAD03D3D38CE53B673CF8F1C016C8D3B67EA98CBCF72627788368C7C54AA2FC4"";

        X9ECParameters curve = SecNamedCurves.GetByName(""secp128r1"");
        ECDomainParameters curveSpec = new ECDomainParameters(curve.Curve, curve.G, curve.N, curve.H, curve.GetSeed());

        ECPublicKeyParameters key = new ECPublicKeyParameters(""ECDSA"", curve.Curve.DecodePoint(Hex.Decode(pubKey)), curveSpec);

        ISigner signer = SignerUtilities.GetSigner(""NONEwithECDSA"");             

        signer.Init(false, key);

        signer.BlockUpdate(b, 0, b.Length);

        if (signer.VerifySignature(derEncodeSignature(Hex.Decode(signature))))
            System.Console.WriteLine(""Verified Signature"");
        else
            System.Console.WriteLine(""Not Verified Signature"");
    }

    public static byte[] derEncodeSignature(byte[] signature)
    {
        byte[] encoded = new byte[6 + signature.Length];

        byte[] r = RangeSubset(signature, 0, 16);
        byte[] s = RangeSubset(signature, 16, 16);

        encoded[0] = 0x30;
        encoded[1] = 0x24;
        encoded[2] = 0x02;
        encoded[3] = 0x10;

        encoded[4 + r.Length] = 0x02;
        encoded[5 + r.Length] = 0x10;

        Array.Copy(r, 0, encoded, 4, r.Length);
        Array.Copy(s, 0, encoded, 6 + r.Length, r.Length);

        return encoded;
    }

    public static T[] RangeSubset<T>(T[] array, int startIndex, int length)
    {
        T[] subset = new T[length];
        Array.Copy(array, startIndex, subset, 0, length);
        return subset;
    }
}
}

","Instead of DER-encoding the signature by yourself, you can use signer.GenerateSignature() like so:
        var signerAlgorithm = ""SHA256withECDSA"";

        ISigner signer = SignerUtilities.GetSigner(signerAlgorithm);
        signer.Init(true, privateSigningKey);
        signer.BlockUpdate(data, 0, data.Length);
        byte[] signature = signer.GenerateSignature();

        return signature;

","3282","<c#><encryption><bouncycastle><ecdsa>","2","4","2","2017-09-14 15:09:13","","8","1","","","","2016-06-01 14:59:10",""
"24467612","ECDSA Signature in Javacard","I'm implementing the signing code using ECDSA in Javacard.
My code outputs 0x0003(NO_SUCH_ALGORITHM) in exception part which means this card does not support the algorithm. I don't understand that because my vendor told me that it supports ECC. I concluded I don't know how to sign with ECDSA and I want to know that.
Here is my full source code
package MyECDSA;

import javacard.framework.*;
import javacard.security.*;
import javacardx.crypto.*;

public class MyECDSA extends Applet{

private byte[] PLAINTEXT ;
private ECPrivateKey            objECDSAPriKey=null;    // Object for ECDSA Private Key
private ECPublicKey             objECDSAPubKey=null;    // Object for ECDSA Public Key
private KeyPair                 objECDSAKeyPair=null;   // Object for ECDSA Key Pair
private Signature               objECDSASign=null;      // Object for ECDSA Signature

final static short  BAS     =  0;

public static void install(byte[] bArray, short bOffset, byte bLength){
    new MyECDSA(bArray, bOffset, bLength);
}

private MyECDSA(byte bArray[], short bOffset, byte bLength){    

    PLAINTEXT       = new byte[0x100] ;         // Data file

    Util.arrayFillNonAtomic(PLAINTEXT,  BAS, (short)0x100, (byte)0);

    register();
}

//======================================================================================
public void process(APDU apdu){
    byte buf[] = apdu.getBuffer();

    switch(buf[1])
    {
        //--------------------------------------------------------
        case (byte)0xA4:                    break;  

        case (byte)0x46:
            // Create ECDSA Keys and Pair
            try {
                // <<<<<<<<<<<<<<<< Here is the problem >>>>>>>>>>>>>>>>>
                objECDSAKeyPair = new KeyPair(KeyPair.ALG_EC_FP, KeyBuilder.LENGTH_EC_FP_192);
                //objECDSAKeyPair = new KeyPair(KeyPair.ALG_EC_F2M, KeyBuilder.LENGTH_EC_F2M_193);          
            }
            catch(CryptoException c)
            {    
                short reason = c.getReason();   
                ISOException.throwIt(reason);
            }
            ISOException.throwIt((short)0x9999);        // for check

            // Generate Key pair
            objECDSAKeyPair.genKeyPair();

            // Create Signature Object
            objECDSASign = Signature.getInstance(Signature.ALG_ECDSA_SHA, false);

            objECDSAPriKey = (ECPrivateKey)objECDSAKeyPair.getPrivate();
            objECDSAPubKey = (ECPublicKey)objECDSAKeyPair.getPublic();  

        break;

        case (byte)0x2E:                        
            short       Le              = apdu.setOutgoing();   
            short   sSignLen=0 ;

            // Init with Private Key
            objECDSASign.init(objECDSAPriKey, Signature.MODE_SIGN);

            // Sign Data
            sSignLen = objECDSASign.sign(PLAINTEXT, BAS, Le, buf, BAS);

            apdu.setOutgoingLength(sSignLen);
            apdu.sendBytes(BAS, sSignLen);

        break;      
        //--------------------------------------------------------
        default:
            ISOException.throwIt(ISO7816.SW_INS_NOT_SUPPORTED);
    }

    return; 
}

}

And APDU Command is as follows
[  Card  ] <==  00A4040007D4106509900090
[  Card  ] ==>  9000

[  Card  ] <==  0046000000
[  Card  ] ==>  0003

My Development Environment is as follows.

OS : Windows 7
JCDK Ver 2.2.1
JDK Ver 1.4.2
Chip : NXP
Terminal : ACR122 NFC Contactless Smart Card Reader


I've changed my code to set domain parameters. But the card still outputs the same result(0x0003). Here is my full source code.
package MyECDSA;

import javacard.framework.*;
import javacard.security.*;
import javacardx.crypto.*;

public class MyECDSA extends Applet{

private byte[] PLAINTEXT ;
private ECPrivateKey            objECDSAPriKey=null;    // Object for ECDSA Private Key
private ECPublicKey             objECDSAPubKey=null;    // Object for ECDSA Public Key
private KeyPair                 objECDSAKeyPair=null;   // Object for ECDSA Key Pair
private Signature               objECDSASign=null;      // Object for ECDSA Signature

final static short  BAS     =  0;

final static byte[] SecP192r1_P = {     // 24
    (byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF,
    (byte)0xFE,(byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF,
    (byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF};
final static byte[] SecP192r1_A = {     // 24
    (byte)0xFC,(byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF,
    (byte)0xFE,(byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF,
    (byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF};
final static byte[] SecP192r1_B = {     // 24
  (byte)0xB1,(byte)0xB9,(byte)0x46,(byte)0xC1,(byte)0xEC,(byte)0xDE,(byte)0xB8,(byte)0xFE,
  (byte)0x49,(byte)0x30,(byte)0x24,(byte)0x72,(byte)0xAB,(byte)0xE9,(byte)0xA7,(byte)0x0F,
  (byte)0xE7,(byte)0x80,(byte)0x9C,(byte)0xE5,(byte)0x19,(byte)0x05,(byte)0x21,(byte)0x64};
final static byte[] SecP192r1_S = {     // 20
  (byte)0xD5,(byte)0x96,(byte)0x21,(byte)0xE1,(byte)0xEA,(byte)0x20,(byte)0x81,(byte)0xD3,
  (byte)0x28,(byte)0x95,(byte)0x57,(byte)0xED,(byte)0x64,(byte)0x2F,(byte)0x42,(byte)0xC8,
  (byte)0x6F,(byte)0xAE,(byte)0x45,(byte)0x30};
final static byte[] SecP192r1_G = {     // 25
  (byte)0x12,(byte)0x10,(byte)0xFF,(byte)0x82,(byte)0xFD,(byte)0x0A,(byte)0xFF,(byte)0xF4,
  (byte)0x00,(byte)0x88,(byte)0xA1,(byte)0x43,(byte)0xEB,(byte)0x20,(byte)0xBF,(byte)0x7C,
  (byte)0xF6,(byte)0x90,(byte)0x30,(byte)0xB0,(byte)0x0E,(byte)0xA8,(byte)0x8D,(byte)0x18,(byte)0x03};
final static byte[] SecP192r1_N = {     // 24
  (byte)0x31,(byte)0x28,(byte)0xD2,(byte)0xB4,(byte)0xB1,(byte)0xC9,(byte)0x6B,(byte)0x14,
  (byte)0x36,(byte)0xF8,(byte)0xDE,(byte)0x99,(byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF,
  (byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF};
final static short  SecP192r1_H =  1;

//======================================================================================
public static void install(byte[] bArray, short bOffset, byte bLength){
    new MyECDSA(bArray, bOffset, bLength);
}

private MyECDSA(byte bArray[], short bOffset, byte bLength){    

    PLAINTEXT       = new byte[0x100] ;         // Data file

    Util.arrayFillNonAtomic(PLAINTEXT,  BAS, (short)0x100, (byte)0);

    register();
}

//======================================================================================
public void process(APDU apdu){
    byte buf[] = apdu.getBuffer();

    switch(buf[1])
    {
        //--------------------------------------------------------
        case (byte)0xA4:                    break;  

        case (byte)0x46:

            // Create ECDSA Keys and Pair
            try {
        // <<<<<<<<<<<<<<<< Here is the problem >>>>>>>>>>>>>>>>>
                objECDSAPriKey = (ECPrivateKey)KeyBuilder.buildKey(KeyBuilder.TYPE_EC_FP_PRIVATE, KeyBuilder.LENGTH_EC_FP_192, false);
                ISOException.throwIt((short)0x8888);        // for check
                objECDSAPubKey = (ECPublicKey)KeyBuilder.buildKey(KeyBuilder.TYPE_EC_FP_PUBLIC,  KeyBuilder.LENGTH_EC_FP_192, false);

                // set EC Domain Parameters
                objECDSAPubKey.setFieldFP(SecP192r1_P, BAS, (short)24);
                objECDSAPubKey.setA(SecP192r1_A, BAS, (short)24);
                objECDSAPubKey.setB(SecP192r1_B, BAS, (short)24);
                objECDSAPubKey.setG(SecP192r1_G, BAS, (short)25);
                objECDSAPubKey.setK(SecP192r1_H);
                objECDSAPubKey.setR(SecP192r1_N, BAS, (short)24);

                objECDSAKeyPair = new KeyPair(KeyPair.ALG_EC_FP, KeyBuilder.LENGTH_EC_FP_192);
            }
          catch(CryptoException c)
          {    
            short reason = c.getReason();   
            ISOException.throwIt(reason);       // for check
          }

            // On-Card Key Generation Process
            objECDSAKeyPair.genKeyPair();

            // Obtain Key References
            objECDSAPriKey = (ECPrivateKey)objECDSAKeyPair.getPrivate();
            objECDSAPubKey = (ECPublicKey)objECDSAKeyPair.getPublic();  

            // Create Signature Object
            objECDSASign = Signature.getInstance(Signature.ALG_ECDSA_SHA, false);

        break;

        case (byte)0x2E:                        
            short       Le              = apdu.setOutgoing();   
            short   sSignLen=0 ;

            // Init with Private Key
            objECDSASign.init(objECDSAPriKey, Signature.MODE_SIGN);

            // Sign Data
            sSignLen = objECDSASign.sign(PLAINTEXT, BAS, Le, buf, BAS);

            apdu.setOutgoingLength(sSignLen);
            apdu.sendBytes(BAS, sSignLen);

        break;      
        //--------------------------------------------------------
        default:
            ISOException.throwIt(ISO7816.SW_INS_NOT_SUPPORTED);
    }

    return; 
}

}

","There are no default EC domain parameters in Java Card. It is required to create the KeyPair using an ECPublicKey and a ECPrivateKey for which the domain parameters are set (so the point W and secret S may be kept empty). After that it is possible to call genKeyPair(), at least if the card has support for F(2m) or F(p) Elliptic Curve cryptography and the key size that is specified.

ADDED
Note that NXP JCOP chips may require these parameters set for the public and the private key. The parameters should have either the key size (for separate values) or an uncompressed Elliptic Curve point. The value of G in the question seems to be a compressed point. Only the cofactor (for setH) should just have the value 1.
Note that only the chips with an asymmetric coprocessor may support elliptic curves; not all cards are created / configured equally. Contact your vendor for details.
","3282","<java><javacard><ecdsa>","3","3","2","2016-04-12 10:54:43","24471491","4","","-1","","2016-04-12 10:54:43","2014-06-28 14:07:22",""
"24467612","ECDSA Signature in Javacard","I'm implementing the signing code using ECDSA in Javacard.
My code outputs 0x0003(NO_SUCH_ALGORITHM) in exception part which means this card does not support the algorithm. I don't understand that because my vendor told me that it supports ECC. I concluded I don't know how to sign with ECDSA and I want to know that.
Here is my full source code
package MyECDSA;

import javacard.framework.*;
import javacard.security.*;
import javacardx.crypto.*;

public class MyECDSA extends Applet{

private byte[] PLAINTEXT ;
private ECPrivateKey            objECDSAPriKey=null;    // Object for ECDSA Private Key
private ECPublicKey             objECDSAPubKey=null;    // Object for ECDSA Public Key
private KeyPair                 objECDSAKeyPair=null;   // Object for ECDSA Key Pair
private Signature               objECDSASign=null;      // Object for ECDSA Signature

final static short  BAS     =  0;

public static void install(byte[] bArray, short bOffset, byte bLength){
    new MyECDSA(bArray, bOffset, bLength);
}

private MyECDSA(byte bArray[], short bOffset, byte bLength){    

    PLAINTEXT       = new byte[0x100] ;         // Data file

    Util.arrayFillNonAtomic(PLAINTEXT,  BAS, (short)0x100, (byte)0);

    register();
}

//======================================================================================
public void process(APDU apdu){
    byte buf[] = apdu.getBuffer();

    switch(buf[1])
    {
        //--------------------------------------------------------
        case (byte)0xA4:                    break;  

        case (byte)0x46:
            // Create ECDSA Keys and Pair
            try {
                // <<<<<<<<<<<<<<<< Here is the problem >>>>>>>>>>>>>>>>>
                objECDSAKeyPair = new KeyPair(KeyPair.ALG_EC_FP, KeyBuilder.LENGTH_EC_FP_192);
                //objECDSAKeyPair = new KeyPair(KeyPair.ALG_EC_F2M, KeyBuilder.LENGTH_EC_F2M_193);          
            }
            catch(CryptoException c)
            {    
                short reason = c.getReason();   
                ISOException.throwIt(reason);
            }
            ISOException.throwIt((short)0x9999);        // for check

            // Generate Key pair
            objECDSAKeyPair.genKeyPair();

            // Create Signature Object
            objECDSASign = Signature.getInstance(Signature.ALG_ECDSA_SHA, false);

            objECDSAPriKey = (ECPrivateKey)objECDSAKeyPair.getPrivate();
            objECDSAPubKey = (ECPublicKey)objECDSAKeyPair.getPublic();  

        break;

        case (byte)0x2E:                        
            short       Le              = apdu.setOutgoing();   
            short   sSignLen=0 ;

            // Init with Private Key
            objECDSASign.init(objECDSAPriKey, Signature.MODE_SIGN);

            // Sign Data
            sSignLen = objECDSASign.sign(PLAINTEXT, BAS, Le, buf, BAS);

            apdu.setOutgoingLength(sSignLen);
            apdu.sendBytes(BAS, sSignLen);

        break;      
        //--------------------------------------------------------
        default:
            ISOException.throwIt(ISO7816.SW_INS_NOT_SUPPORTED);
    }

    return; 
}

}

And APDU Command is as follows
[  Card  ] <==  00A4040007D4106509900090
[  Card  ] ==>  9000

[  Card  ] <==  0046000000
[  Card  ] ==>  0003

My Development Environment is as follows.

OS : Windows 7
JCDK Ver 2.2.1
JDK Ver 1.4.2
Chip : NXP
Terminal : ACR122 NFC Contactless Smart Card Reader


I've changed my code to set domain parameters. But the card still outputs the same result(0x0003). Here is my full source code.
package MyECDSA;

import javacard.framework.*;
import javacard.security.*;
import javacardx.crypto.*;

public class MyECDSA extends Applet{

private byte[] PLAINTEXT ;
private ECPrivateKey            objECDSAPriKey=null;    // Object for ECDSA Private Key
private ECPublicKey             objECDSAPubKey=null;    // Object for ECDSA Public Key
private KeyPair                 objECDSAKeyPair=null;   // Object for ECDSA Key Pair
private Signature               objECDSASign=null;      // Object for ECDSA Signature

final static short  BAS     =  0;

final static byte[] SecP192r1_P = {     // 24
    (byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF,
    (byte)0xFE,(byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF,
    (byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF};
final static byte[] SecP192r1_A = {     // 24
    (byte)0xFC,(byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF,
    (byte)0xFE,(byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF,
    (byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF};
final static byte[] SecP192r1_B = {     // 24
  (byte)0xB1,(byte)0xB9,(byte)0x46,(byte)0xC1,(byte)0xEC,(byte)0xDE,(byte)0xB8,(byte)0xFE,
  (byte)0x49,(byte)0x30,(byte)0x24,(byte)0x72,(byte)0xAB,(byte)0xE9,(byte)0xA7,(byte)0x0F,
  (byte)0xE7,(byte)0x80,(byte)0x9C,(byte)0xE5,(byte)0x19,(byte)0x05,(byte)0x21,(byte)0x64};
final static byte[] SecP192r1_S = {     // 20
  (byte)0xD5,(byte)0x96,(byte)0x21,(byte)0xE1,(byte)0xEA,(byte)0x20,(byte)0x81,(byte)0xD3,
  (byte)0x28,(byte)0x95,(byte)0x57,(byte)0xED,(byte)0x64,(byte)0x2F,(byte)0x42,(byte)0xC8,
  (byte)0x6F,(byte)0xAE,(byte)0x45,(byte)0x30};
final static byte[] SecP192r1_G = {     // 25
  (byte)0x12,(byte)0x10,(byte)0xFF,(byte)0x82,(byte)0xFD,(byte)0x0A,(byte)0xFF,(byte)0xF4,
  (byte)0x00,(byte)0x88,(byte)0xA1,(byte)0x43,(byte)0xEB,(byte)0x20,(byte)0xBF,(byte)0x7C,
  (byte)0xF6,(byte)0x90,(byte)0x30,(byte)0xB0,(byte)0x0E,(byte)0xA8,(byte)0x8D,(byte)0x18,(byte)0x03};
final static byte[] SecP192r1_N = {     // 24
  (byte)0x31,(byte)0x28,(byte)0xD2,(byte)0xB4,(byte)0xB1,(byte)0xC9,(byte)0x6B,(byte)0x14,
  (byte)0x36,(byte)0xF8,(byte)0xDE,(byte)0x99,(byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF,
  (byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF};
final static short  SecP192r1_H =  1;

//======================================================================================
public static void install(byte[] bArray, short bOffset, byte bLength){
    new MyECDSA(bArray, bOffset, bLength);
}

private MyECDSA(byte bArray[], short bOffset, byte bLength){    

    PLAINTEXT       = new byte[0x100] ;         // Data file

    Util.arrayFillNonAtomic(PLAINTEXT,  BAS, (short)0x100, (byte)0);

    register();
}

//======================================================================================
public void process(APDU apdu){
    byte buf[] = apdu.getBuffer();

    switch(buf[1])
    {
        //--------------------------------------------------------
        case (byte)0xA4:                    break;  

        case (byte)0x46:

            // Create ECDSA Keys and Pair
            try {
        // <<<<<<<<<<<<<<<< Here is the problem >>>>>>>>>>>>>>>>>
                objECDSAPriKey = (ECPrivateKey)KeyBuilder.buildKey(KeyBuilder.TYPE_EC_FP_PRIVATE, KeyBuilder.LENGTH_EC_FP_192, false);
                ISOException.throwIt((short)0x8888);        // for check
                objECDSAPubKey = (ECPublicKey)KeyBuilder.buildKey(KeyBuilder.TYPE_EC_FP_PUBLIC,  KeyBuilder.LENGTH_EC_FP_192, false);

                // set EC Domain Parameters
                objECDSAPubKey.setFieldFP(SecP192r1_P, BAS, (short)24);
                objECDSAPubKey.setA(SecP192r1_A, BAS, (short)24);
                objECDSAPubKey.setB(SecP192r1_B, BAS, (short)24);
                objECDSAPubKey.setG(SecP192r1_G, BAS, (short)25);
                objECDSAPubKey.setK(SecP192r1_H);
                objECDSAPubKey.setR(SecP192r1_N, BAS, (short)24);

                objECDSAKeyPair = new KeyPair(KeyPair.ALG_EC_FP, KeyBuilder.LENGTH_EC_FP_192);
            }
          catch(CryptoException c)
          {    
            short reason = c.getReason();   
            ISOException.throwIt(reason);       // for check
          }

            // On-Card Key Generation Process
            objECDSAKeyPair.genKeyPair();

            // Obtain Key References
            objECDSAPriKey = (ECPrivateKey)objECDSAKeyPair.getPrivate();
            objECDSAPubKey = (ECPublicKey)objECDSAKeyPair.getPublic();  

            // Create Signature Object
            objECDSASign = Signature.getInstance(Signature.ALG_ECDSA_SHA, false);

        break;

        case (byte)0x2E:                        
            short       Le              = apdu.setOutgoing();   
            short   sSignLen=0 ;

            // Init with Private Key
            objECDSASign.init(objECDSAPriKey, Signature.MODE_SIGN);

            // Sign Data
            sSignLen = objECDSASign.sign(PLAINTEXT, BAS, Le, buf, BAS);

            apdu.setOutgoingLength(sSignLen);
            apdu.sendBytes(BAS, sSignLen);

        break;      
        //--------------------------------------------------------
        default:
            ISOException.throwIt(ISO7816.SW_INS_NOT_SUPPORTED);
    }

    return; 
}

}

","If an attempt to create instance of the particular algorithm (KeyPair.ALG_EC_FP & KeyBuilder.LENGTH_EC_FP_192 in your case) fails with NO_SUCH_ALGORITHM, it is either not supported by your card completely (e.g., old hardware) or disabled. 
Project JCAlgTester allows you to obtain complete list of the supported algorithms for your particular card. Database of results for multiple different cards is also available (but is better to check your particular card directly by uploading JCAlgTester applet). 
","3282","<java><javacard><ecdsa>","3","2","2","2016-04-12 10:54:43","24471491","4","","-1","","2016-04-12 10:54:43","2014-06-28 14:07:22",""
"43629265","Deriving an ECDSA uncompressed public key from a compressed one","I am currently trying to derive a Bitcoin uncompressed ECDSA public key from a compressed one.
According to this link on the Bitcoin wiki, it is possible to do so... But how?
To give you more details: as of now I have compressed keys (33-bytes-long) gathered on the bitcoin network.
They are of the following format: <1-byte-long prefix><32-bytes-long X>.
From there, I would like to obtain an uncompressed key (65-bytes-long) whose format is:
<1-byte-long prefix><32-bytes-long X><32-bytes-long Y>
According to this other link on the Bitcoin wiki, it should be as easy as solving the equation:
Y^2 = X^3 + 7 
However, I cannot seem to get there. My value for Y is simply far-off. Here is my code (the value for the public key come from the Bitcoin wiki example):
import binascii
from decimal import *

expected_uncompressed_key_hex = '0450863AD64A87AE8A2FE83C1AF1A8403CB53F53E486D8511DAD8A04887E5B23522CD470243453A299FA9E77237716103ABC11A1DF38855ED6F2EE187E9C582BA6'
expected_y_hex = expected_uncompressed_key_hex[-64:]
expected_y_dec = int(expected_y_hex, 16)
x_hex = expected_uncompressed_key_hex[2:66]
if expected_y_dec % 2 == 0:
    prefix = ""02""
else:
    prefix = ""03""

artificial_compressed_key = prefix + x_hex

getcontext().prec = 500
test_dec = Decimal(int(x_hex, 16))
y_square_dec = test_dec**3 + 7
if prefix == ""02"":
    y_dec = - Decimal(y_square_dec).sqrt()
else:
    y_dec = Decimal(y_square_dec).sqrt()

computed_y_hex = hex(int(y_dec))
computed_uncompressed_key = ""04"" + x + computed_y_hex

For information, my outputs are:
computed_y_hex = '0X2D29684BD207BF6D809F7D0EB78E4FD61C3C6700E88AB100D1075EFA8F8FD893080F35E6C7AC2E2214F8F4D088342951'
expected_y_hex = '2CD470243453A299FA9E77237716103ABC11A1DF38855ED6F2EE187E9C582BA6'

Thank you for your help!
","The field of the elliptic curve is not over the field of real numbers. It's over a finite field modulo some prime. 
For Secp256k1 the prime p = 2^256 - 2^32 - 2^9 - 2^8 - 2^7 - 2^6 - 2^4 - 1.
Thus: y^2= (x^3) + 7 (mod p)
There's no direct way to solve the equation, you would need to use Cipolla's algorithm: https://en.wikipedia.org/wiki/Cipolla%27s_algorithm
","2973","<python><bitcoin><public-key><ecdsa>","9","3","4","2019-03-31 16:39:03","43654055","1","1","","","","2017-04-26 08:49:48",""
"43629265","Deriving an ECDSA uncompressed public key from a compressed one","I am currently trying to derive a Bitcoin uncompressed ECDSA public key from a compressed one.
According to this link on the Bitcoin wiki, it is possible to do so... But how?
To give you more details: as of now I have compressed keys (33-bytes-long) gathered on the bitcoin network.
They are of the following format: <1-byte-long prefix><32-bytes-long X>.
From there, I would like to obtain an uncompressed key (65-bytes-long) whose format is:
<1-byte-long prefix><32-bytes-long X><32-bytes-long Y>
According to this other link on the Bitcoin wiki, it should be as easy as solving the equation:
Y^2 = X^3 + 7 
However, I cannot seem to get there. My value for Y is simply far-off. Here is my code (the value for the public key come from the Bitcoin wiki example):
import binascii
from decimal import *

expected_uncompressed_key_hex = '0450863AD64A87AE8A2FE83C1AF1A8403CB53F53E486D8511DAD8A04887E5B23522CD470243453A299FA9E77237716103ABC11A1DF38855ED6F2EE187E9C582BA6'
expected_y_hex = expected_uncompressed_key_hex[-64:]
expected_y_dec = int(expected_y_hex, 16)
x_hex = expected_uncompressed_key_hex[2:66]
if expected_y_dec % 2 == 0:
    prefix = ""02""
else:
    prefix = ""03""

artificial_compressed_key = prefix + x_hex

getcontext().prec = 500
test_dec = Decimal(int(x_hex, 16))
y_square_dec = test_dec**3 + 7
if prefix == ""02"":
    y_dec = - Decimal(y_square_dec).sqrt()
else:
    y_dec = Decimal(y_square_dec).sqrt()

computed_y_hex = hex(int(y_dec))
computed_uncompressed_key = ""04"" + x + computed_y_hex

For information, my outputs are:
computed_y_hex = '0X2D29684BD207BF6D809F7D0EB78E4FD61C3C6700E88AB100D1075EFA8F8FD893080F35E6C7AC2E2214F8F4D088342951'
expected_y_hex = '2CD470243453A299FA9E77237716103ABC11A1DF38855ED6F2EE187E9C582BA6'

Thank you for your help!
","You need to calculate in the field , which mostly means that you have to reduce your number to the remainder after dividing with p after each calculation. Calculating this is called taking the modulo and is written as % p in python.
Exponentiating in this field can be done more effectively than the naive way of just multiplying and reducing many times. This is called modular exponentiation.  Python's built-in exponentation function pow(n,e,p) can take care of this.
The remaining problem is to find the square root. Luckily secp256k1 is chosen in a special way (), so that taking square roots is easy: A square root of x is .
So a simplified version of your code becomes:
import binascii

p_hex = 'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F'
p = int(p_hex, 16)
compressed_key_hex = '0250863AD64A87AE8A2FE83C1AF1A8403CB53F53E486D8511DAD8A04887E5B2352'
x_hex = compressed_key_hex[2:66]
x = int(x_hex, 16)
prefix = compressed_key_hex[0:2]

y_square = (pow(x, 3, p)  + 7) % p
y_square_square_root = pow(y_square, (p+1)/4, p)
if (prefix == ""02"" and y_square_square_root & 1) or (prefix == ""03"" and not y_square_square_root & 1):
    y = (-y_square_square_root) % p
else:
    y = y_square_square_root

computed_y_hex = format(y, '064x')
computed_uncompressed_key = ""04"" + x_hex + computed_y_hex

print computed_uncompressed_key

","2973","<python><bitcoin><public-key><ecdsa>","9","6","4","2019-03-31 16:39:03","43654055","1","1","","","","2017-04-26 08:49:48",""
"43629265","Deriving an ECDSA uncompressed public key from a compressed one","I am currently trying to derive a Bitcoin uncompressed ECDSA public key from a compressed one.
According to this link on the Bitcoin wiki, it is possible to do so... But how?
To give you more details: as of now I have compressed keys (33-bytes-long) gathered on the bitcoin network.
They are of the following format: <1-byte-long prefix><32-bytes-long X>.
From there, I would like to obtain an uncompressed key (65-bytes-long) whose format is:
<1-byte-long prefix><32-bytes-long X><32-bytes-long Y>
According to this other link on the Bitcoin wiki, it should be as easy as solving the equation:
Y^2 = X^3 + 7 
However, I cannot seem to get there. My value for Y is simply far-off. Here is my code (the value for the public key come from the Bitcoin wiki example):
import binascii
from decimal import *

expected_uncompressed_key_hex = '0450863AD64A87AE8A2FE83C1AF1A8403CB53F53E486D8511DAD8A04887E5B23522CD470243453A299FA9E77237716103ABC11A1DF38855ED6F2EE187E9C582BA6'
expected_y_hex = expected_uncompressed_key_hex[-64:]
expected_y_dec = int(expected_y_hex, 16)
x_hex = expected_uncompressed_key_hex[2:66]
if expected_y_dec % 2 == 0:
    prefix = ""02""
else:
    prefix = ""03""

artificial_compressed_key = prefix + x_hex

getcontext().prec = 500
test_dec = Decimal(int(x_hex, 16))
y_square_dec = test_dec**3 + 7
if prefix == ""02"":
    y_dec = - Decimal(y_square_dec).sqrt()
else:
    y_dec = Decimal(y_square_dec).sqrt()

computed_y_hex = hex(int(y_dec))
computed_uncompressed_key = ""04"" + x + computed_y_hex

For information, my outputs are:
computed_y_hex = '0X2D29684BD207BF6D809F7D0EB78E4FD61C3C6700E88AB100D1075EFA8F8FD893080F35E6C7AC2E2214F8F4D088342951'
expected_y_hex = '2CD470243453A299FA9E77237716103ABC11A1DF38855ED6F2EE187E9C582BA6'

Thank you for your help!
","Here a sample code without any 3rd party python libs:
def pow_mod(x, y, z):
    ""Calculate (x ** y) % z efficiently.""
    number = 1
    while y:
        if y & 1:
            number = number * x % z
        y >>= 1
        x = x * x % z
    return number

# prime p = 2^256 - 2^32 - 2^9 - 2^8 - 2^7 - 2^6 - 2^4 - 1
p = 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f

# bitcoin's compressed public key of private key 55255657523dd1c65a77d3cb53fcd050bf7fc2c11bb0bb6edabdbd41ea51f641
compressed_key = '0314fc03b8df87cd7b872996810db8458d61da8448e531569c8517b469a119d267'

y_parity = int(compressed_key[:2]) - 2
x = int(compressed_key[2:], 16)

a = (pow_mod(x, 3, p) + 7) % p
y = pow_mod(a, (p+1)//4, p)

if y % 2 != y_parity:
    y = -y % p

uncompressed_key = '04{:x}{:x}'.format(x, y)
print(uncompressed_key) 
# should get 0414fc03b8df87cd7b872996810db8458d61da8448e531569c8517b469a119d267be5645686309c6e6736dbd93940707cc9143d3cf29f1b877ff340e2cb2d259cf

refer to bitcoin talk: https://bitcointalk.org/index.php?topic=644919.0
","2973","<python><bitcoin><public-key><ecdsa>","9","2","4","2019-03-31 16:39:03","43654055","1","1","","","","2017-04-26 08:49:48",""
"43629265","Deriving an ECDSA uncompressed public key from a compressed one","I am currently trying to derive a Bitcoin uncompressed ECDSA public key from a compressed one.
According to this link on the Bitcoin wiki, it is possible to do so... But how?
To give you more details: as of now I have compressed keys (33-bytes-long) gathered on the bitcoin network.
They are of the following format: <1-byte-long prefix><32-bytes-long X>.
From there, I would like to obtain an uncompressed key (65-bytes-long) whose format is:
<1-byte-long prefix><32-bytes-long X><32-bytes-long Y>
According to this other link on the Bitcoin wiki, it should be as easy as solving the equation:
Y^2 = X^3 + 7 
However, I cannot seem to get there. My value for Y is simply far-off. Here is my code (the value for the public key come from the Bitcoin wiki example):
import binascii
from decimal import *

expected_uncompressed_key_hex = '0450863AD64A87AE8A2FE83C1AF1A8403CB53F53E486D8511DAD8A04887E5B23522CD470243453A299FA9E77237716103ABC11A1DF38855ED6F2EE187E9C582BA6'
expected_y_hex = expected_uncompressed_key_hex[-64:]
expected_y_dec = int(expected_y_hex, 16)
x_hex = expected_uncompressed_key_hex[2:66]
if expected_y_dec % 2 == 0:
    prefix = ""02""
else:
    prefix = ""03""

artificial_compressed_key = prefix + x_hex

getcontext().prec = 500
test_dec = Decimal(int(x_hex, 16))
y_square_dec = test_dec**3 + 7
if prefix == ""02"":
    y_dec = - Decimal(y_square_dec).sqrt()
else:
    y_dec = Decimal(y_square_dec).sqrt()

computed_y_hex = hex(int(y_dec))
computed_uncompressed_key = ""04"" + x + computed_y_hex

For information, my outputs are:
computed_y_hex = '0X2D29684BD207BF6D809F7D0EB78E4FD61C3C6700E88AB100D1075EFA8F8FD893080F35E6C7AC2E2214F8F4D088342951'
expected_y_hex = '2CD470243453A299FA9E77237716103ABC11A1DF38855ED6F2EE187E9C582BA6'

Thank you for your help!
","I know that this question has been answered and I actually benefited from this answer, so thank you. The problem is that I found these answers 3 times while looking for the same solution in C# and I don't really code in python :). So for anybody trying to solve this here is a C# solution, have fun! :) (It uses BouncyCastle Library).
using System;
using System.Collections.Generic;
using System.Linq;
using MoreLinq;
using NBitcoin;
using Org.BouncyCastle.Asn1.X9;
using Org.BouncyCastle.Crypto;
using Org.BouncyCastle.Crypto.Parameters;
using Org.BouncyCastle.Math;
using Org.BouncyCastle.Math.EC;

namespace BitcoinPublicKeyDecompression
{
    public class Program
    {
        public static void Main()
        {
            const string cPubKey = ""0250863ad64a87ae8a2fe83c1af1a8403cb53f53e486d8511dad8a04887e5b2352"";
            var uPubKey = cPubKey.ToHexByteArray().BitcoinDecompressPublicKey().ToHexString();
            var expectedUPubKey = new PubKey(cPubKey).Decompress().ToString();

            Console.WriteLine($""Public Key:\n\n{cPubKey}\n\nhas been {(uPubKey == expectedUPubKey ? ""correctly"" : ""incorrectly"")} decompressed to:\n\n{uPubKey}"");

            Console.WriteLine(""\nPress any key to quit..."");
            Console.ReadKey();
        }
    }

    public static class Extensions
    {
        public static readonly byte[] EmptyByteArray = new byte[0];

        public static byte[] BitcoinDecompressPublicKey(this byte[] bPubC)
        {
            var ecPubKey = bPubC.BitcoinCompressedPublicKeyToECPublicKey();
            return ecPubKey.ToBitcoinUncompressedPublicKey();
        }

        public static ECPublicKeyParameters BitcoinCompressedPublicKeyToECPublicKey(this byte[] bPubC)
        {
            var pubKey = bPubC.Skip(1).ToArray();

            var curve = ECNamedCurveTable.GetByName(""secp256k1"");
            var domainParams = new ECDomainParameters(curve.Curve, curve.G, curve.N, curve.H, curve.GetSeed());

            var yParity = new BigInteger(bPubC.Take(1).ToArray()).Subtract(BigInteger.Two);
            var x = new BigInteger(1, pubKey);
            var p = ((FpCurve)curve.Curve).Q;
            var a = x.ModPow(new BigInteger(""3""), p).Add(new BigInteger(""7"")).Mod(p);
            var y = a.ModPow(p.Add(BigInteger.One).FloorDivide(new BigInteger(""4"")), p);

            if (!y.Mod(BigInteger.Two).Equals(yParity))
                y = y.Negate().Mod(p);

            var q = curve.Curve.CreatePoint(x, y);
            return new ECPublicKeyParameters(q, domainParams);
        }

        public static byte[] ToBitcoinUncompressedPublicKey(this AsymmetricKeyParameter ecPublicKey)
        {
            var publicKey = ((ECPublicKeyParameters)ecPublicKey).Q;
            var xs = publicKey.AffineXCoord.ToBigInteger().ToByteArrayUnsigned().PadStart(32);
            var ys = publicKey.AffineYCoord.ToBigInteger().ToByteArrayUnsigned().PadStart(32);
            return new byte[] { 0x04 }.ConcatMany(xs, ys).ToArray();
        }

        public static BigInteger FloorDivide(this BigInteger a, BigInteger b)
        {
            if (a.CompareTo(BigInteger.Zero) > 0 ^ b.CompareTo(BigInteger.Zero) < 0 && !a.Mod(b).Equals(BigInteger.Zero))
                return a.Divide(b).Subtract(BigInteger.One);

            return a.Divide(b);
        }

        public static byte[] ToHexByteArray(this string str)
        {
            byte[] bytes;
            if (string.IsNullOrEmpty(str))
                bytes = EmptyByteArray;
            else
            {
                var string_length = str.Length;
                var character_index = str.StartsWith(""0x"", StringComparison.Ordinal) ? 2 : 0;
                var number_of_characters = string_length - character_index;
                var add_leading_zero = false;

                if (0 != number_of_characters % 2)
                {
                    add_leading_zero = true;
                    number_of_characters += 1;
                }

                bytes = new byte[number_of_characters / 2];

                var write_index = 0;
                if (add_leading_zero)
                {
                    bytes[write_index++] = CharacterToByte(str[character_index], character_index);
                    character_index += 1;
                }

                for (var read_index = character_index; read_index < str.Length; read_index += 2)
                {
                    var upper = CharacterToByte(str[read_index], read_index, 4);
                    var lower = CharacterToByte(str[read_index + 1], read_index + 1);

                    bytes[write_index++] = (byte)(upper | lower);
                }
            }

            return bytes;
        }

        public static byte CharacterToByte(char character, int index, int shift = 0)
        {
            var value = (byte)character;
            if (0x40 < value && 0x47 > value || 0x60 < value && 0x67 > value)
            {
                if (0x40 != (0x40 & value))
                    return value;
                if (0x20 == (0x20 & value))
                    value = (byte)((value + 0xA - 0x61) << shift);
                else
                    value = (byte)((value + 0xA - 0x41) << shift);
            }
            else if (0x29 < value && 0x40 > value)
                value = (byte)((value - 0x30) << shift);
            else
                throw new InvalidOperationException($""Character '{character}' at index '{index}' is not valid alphanumeric character."");

            return value;
        }

        public static string ToHexString(this byte[] value, bool prefix = false)
        {
            var strPrex = prefix ? ""0x"" : """";
            return strPrex + string.Concat(value.Select(b => b.ToString(""x2"")).ToArray());
        }

        public static IEnumerable<T> ConcatMany<T>(this IEnumerable<T> enumerable, params IEnumerable<T>[] enums)
        {
            return enumerable.Concat(enums.SelectMany(x => x));
        }
    } 
}

Result:

","2973","<python><bitcoin><public-key><ecdsa>","9","0","4","2019-03-31 16:39:03","43654055","1","1","","","","2017-04-26 08:49:48",""
"36624105","generate certificate using ECDSA in c#","I'm trying to generate (self-signed) certificate with private key using ECDSA.
The goals is to get ""the same"" (pkcs12) certificate as when using openssl:
openssl ecparam -genkey -name secp256r1 -out mykey.key
openssl req -new -key mykey.key -out myreq.csr
openssl req -x509 -days 7 -key mykey.key -in myreq.csr -out mycert.crt
openssl pkcs12 -export -out mycert.pfx -inkey mykey.key -in mycert.crt

I already use BouncyCastle to help me with creating RSA-based certificate(s), so next steps more or less follow the way I use to create RSA certs.
(note that BC prefix is used for classes from BouncyCastle, MS for .NET classes)
1 generate key pair: private and public keys
BC.IAsymmetricCipherKeyPairGenerator bcKpGen = BC.GeneratorUtilities.GetKeyPairGenerator(""ECDSA"");
bcKpGen.Init(new BC.ECKeyGenerationParameters(BC.SecObjectIdentifiers.SecP256r1, new BC.SecureRandom()));
BC.AsymmetricCipherKeyPair bcSubjKeys = bcKpGen.GenerateKeyPair();

2 use private key to sign public key with some additional data (subject, validity period etc)
BC.X509V3CertificateGenerator bcXgen = new BC.X509V3CertificateGenerator();
// .. set subject, validity period etc
bcXgen.SetPublicKey(bcSubjKeys.Public);
BC.ISignatureFactory bcSigFac = new BC.Asn1SignatureFactory(""SHA256WITHECDSA"", bcSubjKeys.Private);
BC.X509Certificate bcCert = bcXgen.Generate(bcSigFac);

3 ""join"" private key from step1 and certificate from step2 to get certificate with private key.
If I'm ok with certificate without private key, I could do something like:
MS.X509Certificate mcCert = new MS.X509Certificate2(bcCert.GetEncoded(), null);

and I'm done.
The issue(s) come when trying to set private-key:
msCert.PrivateKey = ConvertBouncyToNetSomehow(bcSubjKeys.Private)

(note that typeof msCert.PrivateKey is MS.AsymmetricAlgorithm and the type of bcSubjKeys.Private is BC.ECPrivateKeyParameters)
It seems that suitable way is using MS.ECDsaCng class (which inherits from MS.AsymmetricAlgorithm), but:
1 The only way I found to convert BC.ECPrivateKeyParameters to MS.CngKey (required by MS.ECDsaCng) is via pkcs8 format:
BC.PrivateKeyInfo bcPKInfo = BC.PrivateKeyInfoFactory.CreatePrivateKeyInfo(bcSubjKeys.Private);
byte[] pkArr = bcPKInfo.GetDerEncoded();
MS.CngKey msPKCng = MS.CngKey.Import(pkArr, MS.CngKeyBlobFormat.Pkcs8PrivateBlob);

but using this approach some information is lost because value of msPKCng.AlgorithmGroup is ""ECDH"" while bcSubjKeys.Private.AlgorithmNamesays ""ECDSA"". Also ECDH-key cannot be used with MS.ECDsaCng.
Nevertheless.. I could continue with MS.ECDiffieHellmanCng instead of requested MS.ECDsaCng if..
2 implementation of MS.X509Certificate2.set_PrivateKey requires the object implements interface MS.ICspAsymmetricAlgorithm. But neither one of them (ECDsaCng, ECDiffieHellmanCng) implement it.
At this point it seems different approach must be used (because of MS.ICspAsymmetricAlgorithm condition), e.g. export certificate and private key to pkcs file and use X509Certificate2.Import(..).
Any hint?
Regards
","Unfortunately, it's not possible to do straight out of the box right now.  You can get the rest of the way with P/Invokes and .NET 4.6.2 (currently in preview). Or, with a detour through .NET Core you can build a PFX that works in .NET 4.6.1.
""ECDSA"" vs ""ECDH""
The Windows CNG libraries split ECC into ECDSA and ECDH. ECDSA key objects can only be used for ECDSA; but whenever Windows can't determine the usage during a PFX import (or PKCS#8 import) it calls a private key ECDH.  Why? Because Windows lets ECDH key objects do both key agreement (ECDH) and digital signature (ECDSA), so ECDH is more flexible.
But .NET 4.6.1 didn't know that.
.NET Core doesn't have this limitation (see https://github.com/dotnet/corefx/pull/5850), and .NET 4.6.2 has also removed the restriction (per https://github.com/Microsoft/dotnet/blob/master/releases/net462/dotnet462-changes.md#user-content-bcl).
Generating ""ECDSA"" keys, instead of ""ECDH""
.NET Core now has an ImportParameters method on ECDsa. If you can translate the BC.ECPrivateKeyProperty object to an MS.ECParameters structure you can import the blob into an ECDsaCng object. (Be sure to use it as a named curve, instead of explicitly copying all of the curve parameters).
Since it was purposefully imported into an ECDsa object it gets an ECDSA key, and that information will be embedded in the PFX.
Building the PFX (tying it all together)
With a bit of P/Invoking you can convince Windows to build a PFX using an ephemeral key. While .NET can't access ephemeral private keys from certificates, it will be able to make use of it if loaded from a PFX:
[DllImport(Libraries.Crypt32, CharSet = CharSet.Unicode, SetLastError = true)]
private static extern unsafe bool CertSetCertificateContextProperty(IntPtr pCertContext, CertContextPropId dwPropId, CertSetPropertyFlags dwFlags, SafeNCryptKeyHandle pvData);

internal enum CertContextPropId : int
{
    CERT_NCRYPT_KEY_HANDLE_PROP_ID = 78,
}

[Flags]
internal enum CertSetPropertyFlags : int
{
    None = 0,
}

private static X509Certificate2 MateECDsaPrivateKey(
    X509Certificate2 cert,
    CngKey privateKey)
{
    // Make a new certificate instance which isn't tied to the current one
    using (var tmpCert = new X509Certificate2(cert.RawData))
    {
        SafeNCryptKeyHandle keyHandle = privateKey.Handle;

        // Set the ephemeral key handle property
        if (!CertSetCertificateContextProperty(
            tmpCert.Handle,
            CertContextPropId.CERT_NCRYPT_KEY_HANDLE_PROP_ID,
            CertSetPropertyFlags.None,
            keyHandle))
        {
            throw new CryptographicException(Marshal.GetLastWin32Error());
        }

        // You could emit this, if you prefer.
        byte[] pfxBytes = tmpCert.Export(X509ContentType.Pkcs12);

        // Clear the key handle out again to prevent double-free
        keyHandle = new SafeNCryptKeyHandle();

        if (!CertSetCertificateContextProperty(
            tmpCert.Handle,
            CertContextPropId.CERT_NCRYPT_KEY_HANDLE_PROP_ID,
            CertSetPropertyFlags.None,
            keyHandle))
        {
            throw new CryptographicException(Marshal.GetLastWin32Error());
        }

        // Now load a new certificate which has a temporary keyfile on disk.
        // Note: If you don't want exportability here, don't request it.
        var matedCert = new X509Certificate2(pfxBytes, (string)null, X509KeyStorageFlags.Exportable);

        using (ECDsa ecdsa = matedCert.GetECDsaPrivateKey())
        {
            if (ecdsa == null)
            {
                throw new InvalidOperationException(""It didn't work"");
            }
        }

        return matedCert;
    }
}

You'll need .NET 4.6.1 (or newer) to have access to GetECDsaPrivateKey().
","2829","<c#><certificate><ecdsa>","3","5","1","2018-01-30 12:45:05","38165332","0","1","","","","2016-04-14 13:08:15",""
"40115286","Generating valid ECDSA secp256r1/prime256v1 key pair on Android, using Spongy Castle (Bouncy Castle distribution)","I am trying to generate ECDSA key pair using SpongyCastle in Android.
This is the code:
static {
    Security.insertProviderAt(new org.spongycastle.jce.provider.BouncyCastleProvider(), 1);
}

public static KeyPair generate() {
        ECParameterSpec ecSpec = ECNamedCurveTable.getParameterSpec(""prime256v1"");
        KeyPairGenerator generator = KeyPairGenerator.getInstance(""ECDSA"", ""SC"");
        generator.initialize(ecSpec, new SecureRandom());
        KeyPair keyPair = g.generateKeyPair();
        Log.i(TAG, ""EC Pub Key generated: "" + utils.bytesToHex(keyPair.getPublic().getEncoded()));
        Log.i(TAG, ""EC Private Key generated: "" + utils.bytesToHex(keyPair.getPrivate().getEncoded()));            
       return generator.generateKeyPair();
}

Something is wrong since I always get something like that example of 
Public Key:

3059301306072A8648CE3D020106082A8648CE3D03010703420004483ABA9F322240010ECF00E818C041A60FE71A2BD64C64CD5A60519985F110AEDE6308027D2730303F5E2478F083C7F5BB683DCAC22BFEB62F3A48BD01009F40

and Private Key: 

308193020100301306072A8648CE3D020106082A8648CE3D030107047930770201010420219AB4B3701630973A4B2917D53F69A4BE6DAD61F48016BFEF147B2999575CB2A00A06082A8648CE3D030107A14403420004483ABA9F322240010ECF00E818C041A60FE71A2BD64C64CD5A60519985F110AEDE6308027D2730303F5E2478F083C7F5BB683DCAC22BFEB62F3A48BD01009F40

The site ECDSA sample give Invalid ECDSA signature, and them seems really very different from that smaller Private Key and always starting with ""04"" Public Key generated in the same site.
Also, my backend verification gives me the error ""Invalid point encoding 0x30""
The backend Java method check is:
public ECPublicKey getPublicKeyFromHex(String publicKeyHex)
        throws NoSuchAlgorithmException, DecoderException, ApplicationGenericException {
    byte[] rawPublicKey = Hex.decodeHex(publicKeyHex.toCharArray());
    ECPublicKey ecPublicKey = null;
    KeyFactory kf = null;

    ECNamedCurveParameterSpec ecNamedCurveParameterSpec = ECNamedCurveTable.getParameterSpec(""prime256v1"");
    ECCurve curve = ecNamedCurveParameterSpec.getCurve();
    EllipticCurve ellipticCurve = EC5Util.convertCurve(curve, ecNamedCurveParameterSpec.getSeed());
    java.security.spec.ECPoint ecPoint = ECPointUtil.decodePoint(ellipticCurve, rawPublicKey);
    java.security.spec.ECParameterSpec ecParameterSpec = EC5Util.convertSpec(ellipticCurve,
            ecNamedCurveParameterSpec);
    java.security.spec.ECPublicKeySpec publicKeySpec = new java.security.spec.ECPublicKeySpec(ecPoint,
            ecParameterSpec);

    kf = KeyFactory.getInstance(""ECDSA"", new BouncyCastleProvider());

    try {
        ecPublicKey = (ECPublicKey) kf.generatePublic(publicKeySpec);
    } catch (Exception e) {
        throw new ApplicationGenericException(e.getMessage(), e.getCause());
    }

    return ecPublicKey;
}

","Convert generated public key to decoded bytes array or hex string:  
public String getPublicKeyAsHex(PublicKey publicKey){

    ECPublicKey ecPublicKey = (ECPublicKey)publicKey;
    ECPoint ecPoint = ecPublicKey.getW();

    byte[] publicKeyBytes = new byte[PUBLIC_KEY_LENGTH];
    writeToStream(publicKeyBytes, 0, ecPoint.getAffineX(), PRIVATE_KEY_LENGTH);
    writeToStream(publicKeyBytes, PRIVATE_KEY_LENGTH, ecPoint.getAffineY(), PRIVATE_KEY_LENGTH);

    String hex = Hex.toHexString(publicKeyBytes);

    logger.debug(""Public key bytes: "" + Arrays.toString(publicKeyBytes));
    logger.debug(""Public key hex: "" + hex);

    return hex;
}

private void writeToStream(byte[] stream, int start, BigInteger value, int size) {
    byte[] data = value.toByteArray();
    int length = Math.min(size, data.length);
    int writeStart = start + size - length;
    int readStart = data.length - length;
    System.arraycopy(data, readStart, stream, writeStart, length);
}

Convert decoded bytes array back to PublicKey:
KeyFactory factory = KeyFactory.getInstance(ALGORITHM, ALGORITHM_PROVIDER);

ECNamedCurveParameterSpec spec = ECNamedCurveTable.getParameterSpec(CURVE);

ECNamedCurveSpec params = new ECNamedCurveSpec(CURVE, spec.getCurve(), spec.getG(), spec.getN());

BigInteger xCoordinate = new BigInteger(1, Arrays.copyOfRange(decodedPublicKey, 0, PRIVATE_KEY_LENGTH));
BigInteger yCoordinate = new BigInteger(1, Arrays.copyOfRange(decodedPublicKey, PRIVATE_KEY_LENGTH, PUBLIC_KEY_LENGTH));
java.security.spec.ECPoint w = new java.security.spec.ECPoint(xCoordinate, yCoordinate);

PublicKey encodedPublicKey = factory.generatePublic(new java.security.spec.ECPublicKeySpec(w, params));

","2792","<android><bouncycastle><elliptic-curve><ecdsa><spongycastle>","1","0","1","2016-10-24 09:00:26","","1","0","5962766","","2016-10-24 09:00:26","2016-10-18 18:17:18",""
"20086121","Convert ECDSA private hex key to public key","I'm using the below two lines to generate a hex of an ECDSA private key:
openssl ecparam -genkey -name secp256k1 -out data.pem

openssl ec -in data.pem -outform DER|tail -c +8|head -c 32|xxd -p -c 32

Those output something like this:
059f2c8f5b1978bcc02d4b41e75c3aae99f3194fb06b53ffd256178e1367a2a6

How can I then use that hex key to generate a public ECDSA key, something like this?
043d6fa62769c10ceb28d3c13ae1e2329888e99d9c8bf854cc5bdcea0b7cd3002a0f5d244e35eec297c8eb4098b75295328cdeebe7e39a5ac7539f0fc146fa3c99

Any help is appreciated.
","Try this one
openssl ec -in data.pem -pubout -out pubkey.pem

","2652","<openssl><hex><ecdsa>","2","2","2","2014-04-07 19:55:40","","1","","","","","2013-11-20 02:22:42",""
"20086121","Convert ECDSA private hex key to public key","I'm using the below two lines to generate a hex of an ECDSA private key:
openssl ecparam -genkey -name secp256k1 -out data.pem

openssl ec -in data.pem -outform DER|tail -c +8|head -c 32|xxd -p -c 32

Those output something like this:
059f2c8f5b1978bcc02d4b41e75c3aae99f3194fb06b53ffd256178e1367a2a6

How can I then use that hex key to generate a public ECDSA key, something like this?
043d6fa62769c10ceb28d3c13ae1e2329888e99d9c8bf854cc5bdcea0b7cd3002a0f5d244e35eec297c8eb4098b75295328cdeebe7e39a5ac7539f0fc146fa3c99

Any help is appreciated.
","You can take the last 65 bytes of your private key you got from 
openssl ecparam -genkey -name secp256k1 -out data.pem
openssl ec -in data.pem -outform DER

That's your public key too.
","2652","<openssl><hex><ecdsa>","2","0","2","2014-04-07 19:55:40","","1","","","","","2013-11-20 02:22:42",""
"22293864","Ruby/openssl: convert Elliptic Curve point octet string into OpenSSL::PKey::EC::Point","I am trying to write Ruby code to check the Elliptic Curve Digital Signature Algorithm (ECDSA) signature on a particular message that I found here.
The problem is that I don't know how to convert the octet string for the public key into an OpenSSL::PKey::EC::Point object.  If I were writing this in C, I would just pass the octet string to OpenSSL's o2i_ECPublicKey, which does something close to what I would want and in fact is used by the reference implementation.  However, I searched the source code of Ruby (MRI) and it contains no calls to o2i_ECPublicKey so I don't know how I would use that function from Ruby without writing a C extension.
Here is the octet string, in hex.  It is just a 0x04 byte followed by two 32-byte integers that represent the x and y coordinates of the point on the elliptic curve:
04fc9702847840aaf195de8442ebecedf5b095cdbb9bc716bda9110971b28a49e0ead8564ff0db22209e0374782c093bb899692d524e9d6a6956e7c5ecbcd68284

So does anyone know how to convert that string into an in OpenSSL::PKey::EC::Point in Ruby?  Once I get the point object, I will use it in the following code which I believe will verify the signature:
key = OpenSSL::PKey::EC.new('secp256k1')
key.public_key = point
result = key.dsa_verify_asn1(digest, signature)

UPDATE:
Thanks to Jay-Ar Polidario I got it to work.  Here is the full code I have that verifies the signature using OpenSSL.  I also wrote a gem called ecdsa and I included code showing how to use my gem to do the same thing.
# coding: ASCII-8BIT

digest =
  ""\xbf\x91\xfb\x0b\x4f\x63\x33\x77\x4a\x02\x2b\xd3\x07\x8e\xd6\xcc"" \
  ""\xd1\x76\xee\x31\xed\x4f\xb3\xf9\xaf\xce\xb7\x2a\x37\xe7\x87\x86""

signature_der_string =
  ""\x30\x45"" \
  ""\x02\x21\x00"" \
  ""\x83\x89\xdf\x45\xf0\x70\x3f\x39\xec\x8c\x1c\xc4\x2c\x13\x81\x0f"" \
  ""\xfc\xae\x14\x99\x5b\xb6\x48\x34\x02\x19\xe3\x53\xb6\x3b\x53\xeb"" \
  ""\x02\x20"" \
  ""\x09\xec\x65\xe1\xc1\xaa\xee\xc1\xfd\x33\x4c\x6b\x68\x4b\xde\x2b"" \
  ""\x3f\x57\x30\x60\xd5\xb7\x0c\x3a\x46\x72\x33\x26\xe4\xe8\xa4\xf1""

public_key_octet_string =
  ""\x04"" \
  ""\xfc\x97\x02\x84\x78\x40\xaa\xf1\x95\xde\x84\x42\xeb\xec\xed\xf5"" \
  ""\xb0\x95\xcd\xbb\x9b\xc7\x16\xbd\xa9\x11\x09\x71\xb2\x8a\x49\xe0"" \
  ""\xea\xd8\x56\x4f\xf0\xdb\x22\x20\x9e\x03\x74\x78\x2c\x09\x3b\xb8"" \
  ""\x99\x69\x2d\x52\x4e\x9d\x6a\x69\x56\xe7\xc5\xec\xbc\xd6\x82\x84""

# Verifying with openssl.
require 'openssl'
ec = OpenSSL::PKey::EC.new('secp256k1')
key_bn = OpenSSL::BN.new(public_key_octet_string, 2)  # 2 means binary
ec.public_key = OpenSSL::PKey::EC::Point.new(ec.group, key_bn)
result = ec.dsa_verify_asn1(digest, signature_der_string)
puts result  # => true

# Verifying with the new ECDSA gem I wrote, version 0.1.5
require 'ecdsa'
group = ECDSA::Group::Secp256k1
point = ECDSA::Format::PointOctetString.decode(public_key_octet_string, group)
signature = ECDSA::Format::SignatureDerString.decode(signature_der_string)
result = ECDSA.valid_signature?(point, digest, signature)
puts result  # => true

I think it's weird that OpenSSL makes you represent the public key temporarily as a single BN (big number), because it is actually two big numbers.  My gem can directly convert octet strings (as defined in the SEC2 standard) into ECDSA::Point objects.
","OpenSSL allows you to create a point with a group and a bignum, so I tried this:
require 'openssl'
include OpenSSL
group = PKey::EC::Group.new('secp256k1')
bignum = BN.new('04fc9702847840...')
point = PKey::EC::Point.new(group, bignum)

But it raises OpenSSL::PKey::EC::Point::Error: invalid encoding.  I'm not quite sure how to troubleshoot it from here, but hopefully this helps you out a little bit.
","2618","<ruby><openssl><elliptic-curve><ecdsa>","9","2","2","2015-08-10 08:43:37","22476010","0","4","28128","","2014-03-21 06:24:12","2014-03-10 06:56:42",""
"22293864","Ruby/openssl: convert Elliptic Curve point octet string into OpenSSL::PKey::EC::Point","I am trying to write Ruby code to check the Elliptic Curve Digital Signature Algorithm (ECDSA) signature on a particular message that I found here.
The problem is that I don't know how to convert the octet string for the public key into an OpenSSL::PKey::EC::Point object.  If I were writing this in C, I would just pass the octet string to OpenSSL's o2i_ECPublicKey, which does something close to what I would want and in fact is used by the reference implementation.  However, I searched the source code of Ruby (MRI) and it contains no calls to o2i_ECPublicKey so I don't know how I would use that function from Ruby without writing a C extension.
Here is the octet string, in hex.  It is just a 0x04 byte followed by two 32-byte integers that represent the x and y coordinates of the point on the elliptic curve:
04fc9702847840aaf195de8442ebecedf5b095cdbb9bc716bda9110971b28a49e0ead8564ff0db22209e0374782c093bb899692d524e9d6a6956e7c5ecbcd68284

So does anyone know how to convert that string into an in OpenSSL::PKey::EC::Point in Ruby?  Once I get the point object, I will use it in the following code which I believe will verify the signature:
key = OpenSSL::PKey::EC.new('secp256k1')
key.public_key = point
result = key.dsa_verify_asn1(digest, signature)

UPDATE:
Thanks to Jay-Ar Polidario I got it to work.  Here is the full code I have that verifies the signature using OpenSSL.  I also wrote a gem called ecdsa and I included code showing how to use my gem to do the same thing.
# coding: ASCII-8BIT

digest =
  ""\xbf\x91\xfb\x0b\x4f\x63\x33\x77\x4a\x02\x2b\xd3\x07\x8e\xd6\xcc"" \
  ""\xd1\x76\xee\x31\xed\x4f\xb3\xf9\xaf\xce\xb7\x2a\x37\xe7\x87\x86""

signature_der_string =
  ""\x30\x45"" \
  ""\x02\x21\x00"" \
  ""\x83\x89\xdf\x45\xf0\x70\x3f\x39\xec\x8c\x1c\xc4\x2c\x13\x81\x0f"" \
  ""\xfc\xae\x14\x99\x5b\xb6\x48\x34\x02\x19\xe3\x53\xb6\x3b\x53\xeb"" \
  ""\x02\x20"" \
  ""\x09\xec\x65\xe1\xc1\xaa\xee\xc1\xfd\x33\x4c\x6b\x68\x4b\xde\x2b"" \
  ""\x3f\x57\x30\x60\xd5\xb7\x0c\x3a\x46\x72\x33\x26\xe4\xe8\xa4\xf1""

public_key_octet_string =
  ""\x04"" \
  ""\xfc\x97\x02\x84\x78\x40\xaa\xf1\x95\xde\x84\x42\xeb\xec\xed\xf5"" \
  ""\xb0\x95\xcd\xbb\x9b\xc7\x16\xbd\xa9\x11\x09\x71\xb2\x8a\x49\xe0"" \
  ""\xea\xd8\x56\x4f\xf0\xdb\x22\x20\x9e\x03\x74\x78\x2c\x09\x3b\xb8"" \
  ""\x99\x69\x2d\x52\x4e\x9d\x6a\x69\x56\xe7\xc5\xec\xbc\xd6\x82\x84""

# Verifying with openssl.
require 'openssl'
ec = OpenSSL::PKey::EC.new('secp256k1')
key_bn = OpenSSL::BN.new(public_key_octet_string, 2)  # 2 means binary
ec.public_key = OpenSSL::PKey::EC::Point.new(ec.group, key_bn)
result = ec.dsa_verify_asn1(digest, signature_der_string)
puts result  # => true

# Verifying with the new ECDSA gem I wrote, version 0.1.5
require 'ecdsa'
group = ECDSA::Group::Secp256k1
point = ECDSA::Format::PointOctetString.decode(public_key_octet_string, group)
signature = ECDSA::Format::SignatureDerString.decode(signature_der_string)
result = ECDSA.valid_signature?(point, digest, signature)
puts result  # => true

I think it's weird that OpenSSL makes you represent the public key temporarily as a single BN (big number), because it is actually two big numbers.  My gem can directly convert octet strings (as defined in the SEC2 standard) into ECDSA::Point objects.
","Try the following (Tested without errors):
key =  '04fc9702847840aaf195de8442ebecedf5b095cdbb9bc716bda9110971b28a49e0ead8564ff0db22209e0374782c093bb899692d524e9d6a6956e7c5ecbcd68284'
key_bn = OpenSSL::BN.new(key, 16) #Input: 16=Hexa, Output: BigNumber
group = OpenSSL::PKey::EC::Group.new('secp256k1')

point = OpenSSL::PKey::EC::Point.new(group, key_bn)
#--> <OpenSSL::PKey::EC::Point:0x5288178>

","2618","<ruby><openssl><elliptic-curve><ecdsa>","9","7","2","2015-08-10 08:43:37","22476010","0","4","28128","","2014-03-21 06:24:12","2014-03-10 06:56:42",""
"19466907","C# ecdsa signature - Which key specification can i choose?","i need to generate a ECDSA signature on C# side, and after reading and verify the signature on android application using (obviously) the relative public key. 
Well, to get a ECDSA key pair in java (with bouncy castle provider), the code is like that
kpg = KeyPairGenerator.getInstance(""ECDSA"", ""BC"");
            ecSpec = new ECGenParameterSpec(""secp224k1"");
kpg.initialize(ecSpec, new SecureRandom());

The string ""secp224k1"", is the curve name. And i can choose ""secp224k1"",""secp224r1"",""secp256k1"",""secp256r1"" and more others.
My questions is:

Which is the equivalent curve name in C# mentioned above?
Could somebody make me an example about how, in C#, i can generate a keyPair like the above java code?

Thanks in advance
","I've found something about my first question:

Which is the equivalent curve name in C# mentioned above?

The microsoft libraries support only P-256, P-384 and P-521 ""NIST-recommended elliptic curve ID"", that is the equivalent named curve, rispectively, secp256r1, secp384r1, secp521r1 of ""SEC 2 recommended elliptic curve domain parameters"" that are the equivalent of prime256v1, but not 384 and 521 in ANSI X9.62 ECDSA prime curve ID.
Bouncy castle libraries for C#, support more other curves like the secp224k1 that i was interested.
For the second question 

Could somebody make me an example about how, in C#, i can generate a keyPair like the above java code?

i've found an old example here
It says that the keys supported are only 3: 192 bit, 239 bit and 256 bit, but i think is referred to some old version of the library
this code can demonstrate it
ECKeyPairGenerator gen = new ECKeyPairGenerator(""ECDSA"");
        SecureRandom secureRandom = new SecureRandom();
        Org.BouncyCastle.Asn1.X9.X9ECParameters ecp = Org.BouncyCastle.Asn1.Sec.SecNamedCurves.GetByName(""secp224k1"");
        ECDomainParameters ecSpec = new ECDomainParameters(ecp.Curve, ecp.G, ecp.N, ecp.H, ecp.GetSeed());
        ECKeyGenerationParameters ecgp = new ECKeyGenerationParameters(ecSpec, secureRandom);
        gen.Init(ecgp);
        AsymmetricCipherKeyPair eckp = gen.GenerateKeyPair();

If somebody wants try to make it better, i think that this thread could be very precious for all. Im only a beginner with C# and this code isn't mine. :)
","2555","<c#><java><android><ecdsa>","2","2","1","2017-04-09 19:44:26","19545708","0","2","","","","2013-10-19 14:05:15",""
"23863299","ECC PHP Library","I've spent days trying to find more information on a specific PHP library with no success:
https://github.com/mdanter/phpecc
Does anyone have information on how to use this? All I want to do is:

Generate a private key and public key pair.
Get the public key from a given private key.
Verify signed messages.

Basically, the PHP equivalent of:
http://kjur.github.io/jsrsasign/sample-ecdsa.html
","After a lot of trial and error (and some help from the Bitcoin community) I was finally able to figure this out.
I've decided to share my work:
https://github.com/tuaris/PHPECC
","2535","<php><ecdsa>","1","4","1","2015-02-09 05:34:18","23877576","1","","","","","2014-05-26 05:31:16",""
"23865542","recover private key for bitcoin address","I did two stupid things:

I reinstalled Windows, but I missed a few things during backup
I forgot the password to my bitcoin address

So basically the wallet.dat is gone, and all I remember of the password are the first two letters and that it was 10 letters long (alphanumeric), generated by random.org.  This was a ""brain wallet"", so the sha256 hash of the password is the private key.  This leaves me with 218 trillion possibilities (62^8).  I've written a C# program that runs through all possible permutations and generates the address to check against.  With 4 cores, this will take tens of thousands of years.  I don't have access to a supercomputer so I was hoping to move to the GPU.
If this was just a simple sha256 hash, my two GPUs could crack this in less than 5 days.  However, the bitcoin security has multiple hashes and ECDSA, which is the slow part.  The Vanitygen program is able to use OpenSSL and OpenCL to run 25 million ECDSA keys/sec with just one of my GPUs, so moving to GPU should speed this up.  
I know what I need to do, but unfortunately, I don't know C++, OpenCL or OpenSSL.  As far as my research has shown, there is no good way to do this in C#, which is my language of choice.  Does anyone have any suggestions (other than forget it, which I'll probably have to do)?
","Nobody is going to help you crack a Bitcoin key, especially not for free. If it were easy to do, Bitcoin would be insecure and nobody would use it. You're better off removing the hard drive and attempting data recovery on the drive.
Start over, and keep your private key encrypted in multiple safe places.
","2445","<passwords><bitcoin><ecdsa>","0","3","1","2014-08-24 12:22:24","","2","","","","","2014-05-26 08:07:10",""
"27453271","Elliptic curve encryption - ECDSA on iOS and Android","I'm putting together an encryption strategy that will encrypt data shared between iOS and Android devices over BTLE. We would like to use a basic elliptic curve cryptography.
We're currently implementing our iOS app and our Android app will kick-off development in the next month or so. So, my question is as follows:
I know on iOS I can use Certificate, Key and Trust Services to generate a key pair of type kSecAttrKeyTypeECDSA. This is cool.
And I see that the go to encryption library for Android, BouncyCastle, also supports ECDSA. 
So, my question is.. can I count on key-pairs generated on either platform to operate the same in terms of encryption and decryption on both iOS and Android?
i.e. 
iOS User A 

generated their public/private key pair using iOS ECDSA
holds reference to user B's public key

Android User B

generated their public/private key pair using BouncyCastle ECDSA
holds reference to user A's public key

Can user B encode a message using user A's public key.. send the encoded data to user A and expect user A to be able to decode? 
","No, because ECDSA is only used to generate signatures - for instance to authenticate. ECIES should however be available using Bouncy Castle on Android and through CryptoPP on iOS. It's also possible to use ECDH with separate authentication or static-static ECDH but that might require a bit of a learning curve.
Note that ECIES introduces additional overhead, so don't forget to put that into your calculations...
","2428","<android><ios><encryption><ecdsa>","4","4","1","2014-12-13 00:25:08","","0","","","","","2014-12-12 22:43:50",""
"27201847","Error decoding signature bytes : ""java.security.SignatureException: error decoding signature bytes""","I got this error when trying to verify ECDSA Signature in my class. The error code is:
java.security.SignatureException: error decoding signature bytes.
at org.bouncycastle.jcajce.provider.asymmetric.util.DSABase.engineVerify(Unknown Source)
at java.security.Signature$Delegate.engineVerify(Signature.java:1172)
at java.security.Signature.verify(Signature.java:623)
at SDSGeneration.Signing.verify_signature(Signing.java:88)
at com.sdsweb.modele.VerificationBox.checkSignature(VerificationBox.java:121)
at com.sdsweb.modele.VerificationBox.verifieur(VerificationBox.java:84)
at com.sdsweb.servlet.Authentification.doGet(Authentification.java:55)
at javax.servlet.http.HttpServlet.service(HttpServlet.java:620)......

I'm calling the method as this in the VerificationBox.java Class :
public Map<Integer, String> checkSignature(String data_digest, Signature SignObject, PublicKey publicKey, byte[] Signaturebyte) throws InvalidKeyException, SignatureException, NoSuchProviderException, NoSuchAlgorithmException{

    Map<Integer, String> erreur_signature = new HashMap<Integer, String>();

    Signing SignVerifier = new Signing();

    SignVerifier.setEcdsa_signature();

    SignVerifier.verify_signature(publicKey, SignVerifier.getEcdsa_signature(), data_digest, Signaturebyte);

    if (SignVerifier.getVerify_result()){
        erreur_signature.put(j, ""SIGNATURE ÉRONNÉ, CODE SDS INVALIDE"");
        j++;
    }
    return null;

}

This is the SDSGeneration.Signing Class:
package SDSGeneration;

import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.security.NoSuchProviderException;
import java.security.PublicKey;
import java.security.Signature;
import java.security.KeyPair;
import java.security.SignatureException;

//This class provide an instance of all object which are needed to sign data
public class Signing {

    public Signing() {

    }

    public Signing(KeyPair keygen) {

    }

    //ECDSA Signature Object
    private Signature ecdsa_signature;
    //KeyPair object
    private KeyPair keygen;
    //Final data signature
    private byte[] signature;
    //Boolean variable telling if the signing proccess was succesfful or not
    private Boolean verify_result;

    public Boolean getVerify_result() {
        return verify_result;
    }

    public byte[] getSignature() {
        return signature;
    }


    public KeyPair getKeygen() {
        return keygen;
    }

    public Signature getEcdsa_signature() {
        return ecdsa_signature;
    }

    public void setEcdsa_signature() throws NoSuchAlgorithmException, NoSuchProviderException {

        this.ecdsa_signature = java.security.Signature.getInstance(""ECDSA"", ""BC"");
    }

    public void setKeygen(KeyPair keygen) {
        this.keygen = keygen;
    }



    //This method is use to sign data. A call to a  sign  method resets the signature object to the state it was in when previously initialized for signing via a call to  initSign. 
    //That is, the object is reset and available to generate another signature with the same private key, if desired, via new calls to  update  and  sign .
    public void generate_signature(KeyPair keygen, Signature ecdsa_signature, String data) throws InvalidKeyException, SignatureException{

        //inserting private key in signature object
        ecdsa_signature.initSign(keygen.getPrivate());

        //inserting data to sign
        ecdsa_signature.update(data.getBytes());

        //signing
        this.signature = ecdsa_signature.sign();
    }

    //This method is use to sign data. A call to the  verify  method resets the signature object to its state when it was initialized for verification via a call to initVerify . 
    //That is, the object is reset and available to verify another signature from the identity whose public key was specified in the call to  initVerify .
    public void verify_signature(PublicKey keygen, Signature ecdsa_signature, String data, byte[] signature) throws InvalidKeyException, SignatureException{

        //generating the signature
        ecdsa_signature.initVerify(keygen);

        //inserting data to verify
        ecdsa_signature.update(data.getBytes());

        //verifying
        this.verify_result = ecdsa_signature.verify(signature);
    }
}

I wrote a Test class for testing the SDSGeneration.Signing code and everything working well, signing and verifying data, but when importing and using it in my project, the error below occure. This is the Test Class code:
    package SDSGeneration;

import java.security.InvalidAlgorithmParameterException;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.security.NoSuchProviderException;
import java.security.SignatureException;

public class TestSigning {

    public TestSigning() {
        // TODO Auto-generated constructor stub
    }

    public static void main(String[] args) throws NoSuchAlgorithmException, NoSuchProviderException, InvalidAlgorithmParameterException, InvalidKeyException, SignatureException {
        // TODO Auto-generated method stub
        GenerateKeyPair new_keypair = new GenerateKeyPair();

        Signing testSign = new Signing();
        testSign.setKeygen(new_keypair.getKeygen());

        testSign.setEcdsa_signature();

        testSign.generate_signature(testSign.getKeygen(), testSign.getEcdsa_signature(), ""Fanfe Yvon"");

        testSign.verify_signature(testSign.getKeygen().getPublic(), testSign.getEcdsa_signature(), ""Fanfe Yvon"", testSign.getSignature());

        System.out.println(""Signature result : "" + testSign.getVerify_result() + "" ; signature of data : "" + testSign.getSignature());
    }

}

","The Problem was that i was using the wrong CHARSET to Encode the signature into the Storage.
I had to encode into convert it to Base64 and encode it in UTF-8 before storing it, like this:
String signTostring = DatatypeConverter.printBase64Binary(signature);
signTostring = URLEncoder.encode(signTostring, ""UTF-8"");

Whan i want to use it, i do the revrse actions to get the original signature 
String st = URLDecoder.decode(code.getSignature(), ""UTF-8"");
byte[] sign_byte = DatatypeConverter.parseBase64Binary(st); 

","2414","<java><eclipse><security><digital-signature><ecdsa>","0","0","1","2015-01-04 22:10:37","","8","","4173699","","2014-12-01 18:43:24","2014-11-29 11:46:38",""
"16973217","How can I validate an ECDSA signature using the signed data, signature and the signer ECDSA public key?","In theory it should be possible to validate the signature of a piece of data if in possesion of the public key, signature and data that was signed and the hash algorithm is known. 
I have all these components in binary format. Does anybody have an idea about the easiest way to validate this signature? OpenSSL? Python? An example would be great. Can it be done without writing code?
","Here's how you can do it in Ruby.
require 'openssl'

signature = File.read('/path/to/sig.der')
data = File.read('/path/to/data')
pub_key = File.read('/path/to/ecdsa_pub_key')
key = OpenSSL::PKey::EC.new(pub_key)
if key.dsa_verify_asn1(data, signature) == true
  puts 'verified'
end

This code requires that the OpenSSL linked against Ruby be compiled with elliptic curve support. (Red Hat flavored distributions of Linux do not satisfy this requirement)
If you're curious: dsa_verify_asn1 uses the ECSDA_verify function in the OpenSSL API.
","2362","<algorithm><openssl><digital-signature><ecdsa>","0","1","2","2015-12-17 02:07:19","","0","","","","","2013-06-06 22:21:56",""
"16973217","How can I validate an ECDSA signature using the signed data, signature and the signer ECDSA public key?","In theory it should be possible to validate the signature of a piece of data if in possesion of the public key, signature and data that was signed and the hash algorithm is known. 
I have all these components in binary format. Does anybody have an idea about the easiest way to validate this signature? OpenSSL? Python? An example would be great. Can it be done without writing code?
","You can use openssl to sign a message with a ECDSA signature, and then you can use openssl to verify the signature:
To sign a message (using SHA256 hashing, given the message and the signer's EC private key):
openssl dgst -sha256 -sign ec-privatekey.pem message.txt > signature.der

Then, to verify the signature (again using SHA256 hashing, given the message, the signer's EC public key, and the signature created above):
openssl dgst -sha256 -verify ec-publickey.pem -signature signature.der message.txt

","2362","<algorithm><openssl><digital-signature><ecdsa>","0","1","2","2015-12-17 02:07:19","","0","","","","","2013-06-06 22:21:56",""
"22762380","Importing ECC-based certificate from the Windows Certificate Store into CngKey","How can I get the public/private keys from an ECC-based X509Certificate2's into CngKey's for use with ECDsaCng and ECDiffieHellmanCng?
I'm currently using RSA 2048 bit key pairs to sign/encrypt stuff.  I'm doing this by pulling the certificates from the X509Store where they are securely stored with private keys marked as non-exportable.  I would like to convert the current implementation to use ECDSA and ECDH so that I can use smaller key sizes for equivalent security.
I've successfully generated ECC certs using openssl:

openssl ecparam -out private.pem -name prime256v1 -genkey
openssl req -new -key private.pem -x509 -nodes -days 365 -out public.cer
openssl pkcs12 -export -in public.cer -inkey private.pem -out export.pfx

I've successfully installed the above generated certs in to the cert store.  I can retrieve them by thumbprint, but the crypto providers for the private and public keys throw ""Algorithm not supported"" exceptions.  Instead, I understand I'm supposed to use ECDsaCng and ECDiffieHellmanCng to sign/encrypt.  But these deal in CngKey's.
Bouncy Castle isn't an option because it requires the private keys to be exportable.
CLR Security will return me a CngKey pair via GetCngPrivateKey but it cannot be used with ECDsa because the key returned by CLRSecurity is an ECDH key.  Furthermore CLR Security doesn't give me a way to get just the public key from an X509Certificate2 for signature verification (where I don't even have or need the private key of the signer).
Any ideas?  I'm at my wits end...  Any help would be much appreciated.
","You need to create the CngKey from the public key of the certificate:

certificate.PublicKey.EncodedKeyValue.RawData

The CngKey contains 8 additional bytes, the first 4 bytes are used for the name of the curve used (ECS1, ECS3 or ECS5), the last 4 are the length of the key incl. padding (32, 48 or 66).
The first byte of the public key from the certificate is removed (as it is always 0x04 for ECDSA public key). 
So for instance for ECDSA using P-256 curve and SHA-256 hash algorithm, you will get a public key of length 65 bytes. Discard the first byte, leaving 64 bytes, then prefix with 4 bytes for curve and 4 bytes for key length i.e. (Encoding.ASCII):

69 (E) 
67 (C) 
83 (S) 
49 (1) 
32 (Key length)
0 
0 
0

Now you have the public key (72 bytes) to create the CngKey from:

var cngKey = CngKey.Import([the byte array], CngKeyBlobFormat.EccPublicBlob);
var ecdsaCng = new ECDsaCng(cngKey);

And you can verify the signature:

return ecdsaCng.VerifyData(encodedBytes, signature);

","2289","<.net><security><x509certificate2><ecdsa><cng>","15","6","1","2015-06-12 18:16:00","24233060","0","1","464604","","2014-03-31 22:56:28","2014-03-31 13:07:31",""
"37720783","Create and verify signature in code and from the command line using ECDSA","Problem:
Using the written demo code (given below) I can create and verify without problems.
However, using the openssl command line tool, verifying a signature (created by the demo code)
always seems to fail.
What I have done:
The demo code creates a defined public/private key pair, then signs a defined hash and verifies it.
This is the program output:
Public key: 04DFEC134530603832A31F8885EF01888884483D611F87A698213F168534EC06D85D21F7C85795435BC9A7F78190126CC6E52E050CBDFD43E27175FB1DF3E3DEF6 
Hash: 000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f
Verified EC Signature
R: 383EB65E4A284CBCBA41A9777CE7C0816C5C23161EA9BC4EF8B1E668C7641A2A 
S: 608F4BAB9DFE6DC8F976C32D72508CD5BD68F9E325ADED69A9883CE487E6698B

It as well outputs the follwing files:

privkey.pem (private key in PEM format)
pubkey.pem (public Key in PEM format)
data.bin (the hash, nothing fancy)
data_sig.der (the DER encoded signature: R & S value)

All files seem to be created correctly.
Next, I try to verify data_sig.der with the openssl command line tool.
$ openssl dgst -verify pubkey.pem -signature data_sig.der data.bin
Verification Failure

Why does this fail? 
I can only assume, that one of the 4 files has been written incorrectly,
but I double-checked everything and cannot spot my error.
Furthermore, using the PEM files created by the demo program, 
sign & verify works fine from the command line: 
$openssl dgst -sign privkey.pem data.bin > data_sig2.der
$openssl dgst -verify pubkey.pem -signature data_sig2.der data.bin
Verified OK

Here is the demo code (compiles with gcc demo_code.c -lcrypto -lssl -o demo_code):
#include <stdio.h>
#include <stdlib.h>

#include <openssl/ec.h>
#include <openssl/ecdsa.h>
#include <openssl/obj_mac.h>
#include <openssl/bio.h>
#include <openssl/x509.h>
#include <openssl/ecdsa.h>
#include <openssl/pem.h>
#include <openssl/bn.h>

void createSignature()
{
    EC_KEY* eckey = EC_KEY_new();
    EC_GROUP* ecgroup = EC_GROUP_new_by_curve_name(NID_X9_62_prime256v1);
    EC_KEY_set_group(eckey,ecgroup);
    EC_KEY_set_asn1_flag(eckey, OPENSSL_EC_NAMED_CURVE);

    /* the private key value */
    const char *p_str = ""7D22AB6A1FD3FC1F5EBEDCA222151375683B733E9DDC9CA5B2485E202C55D25C"";
    BIGNUM* prv = BN_new();
    BN_hex2bn(&prv, p_str);
    EC_POINT* pub = EC_POINT_new(ecgroup);

    /* calculate the public key */
    EC_POINT_mul(ecgroup, pub, prv, NULL, NULL, NULL);

    /* add the private & public key to the EC_KEY structure */
    EC_KEY_set_private_key(eckey, prv);
    EC_KEY_set_public_key(eckey, pub);
    /* output public key in hex format */
    char* hexPKey = EC_POINT_point2hex( ecgroup, pub, POINT_CONVERSION_UNCOMPRESSED, NULL );
    printf(""Public key: %s \n"", hexPKey); 
    /* create hash */
    printf(""Hash: "");
    uint8_t hash[32];
    for(int i=0; i < 32; i++) {
        hash[i] = i;
        printf(""%02x"",hash[i]);
    }
    printf(""\n"");
    /* create and verify signature */
    ECDSA_SIG* signature = ECDSA_do_sign(hash, 32, eckey);
    //hash[0] = 0xff; // Uncomment to test if verification fails with a wrong hash
    if (1 != ECDSA_do_verify(hash, 32, signature, eckey)) {
        printf(""Failed to verify EC Signature\n"");
    } else {
        printf(""Verified EC Signature\n"");
    }
    /*print R & S value in hex format */
    char* hexR = BN_bn2hex(signature->r);
    char* hexS = BN_bn2hex(signature->s);
    printf(""R: %s \nS: %s\n"", hexR, hexS);
    /* export raw signature to DER-encoded format */
    int sigSize = i2d_ECDSA_SIG(signature, NULL);
    uint8_t* derSig = (uint8_t*)malloc(sigSize);
    uint8_t* p = derSig;    //memset(sig_bytes, 6, sig_size);
    sigSize= i2d_ECDSA_SIG(signature, &p);

    EVP_PKEY* pkey = EVP_PKEY_new();
    EVP_PKEY_set1_EC_KEY(pkey, eckey);

    /* write files */
    FILE* fp = fopen(""pubkey.pem"", ""w"");
    PEM_write_PUBKEY(fp, pkey);
    fclose(fp);
    fp = fopen(""privkey.pem"", ""w"");
    PEM_write_PrivateKey(fp, pkey, NULL, NULL, 0, 0, NULL);
    fclose(fp);
    fp = fopen(""data.bin"", ""w"");
    fwrite(hash, 1, sizeof(hash), fp);
    fclose(fp);
    fp = fopen(""data_sig.der"", ""w"");
    fwrite(derSig, 1, sigSize, fp);
    fclose(fp);

    /* free runtime allocated res */
    free(derSig);
    OPENSSL_free(hexPKey); OPENSSL_free(hexR); OPENSSL_free(hexS);
    BN_free(prv);
    EC_POINT_free(pub);
    EC_GROUP_free(ecgroup); 
    EC_KEY_free(eckey);
}

int main(int argc, char** argv) {
    createSignature();
    return (EXIT_SUCCESS);
}

","It seems you sign data rather than result of hashing data. But when you run:
$ openssl dgst -verify pubkey.pem -signature data_sig.der data.bin

openssl utility calculate sha256 hash from data.bin and try to verify signature on this hash.
So you need to calc sha256 from 000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f and sign result:
void createSignature()
{
    EC_KEY* eckey = EC_KEY_new();
    EC_GROUP* ecgroup = EC_GROUP_new_by_curve_name(NID_X9_62_prime256v1);
    EC_KEY_set_group(eckey,ecgroup);
    EC_KEY_set_asn1_flag(eckey, OPENSSL_EC_NAMED_CURVE);

    /* the private key value */
    const char *p_str = ""7D22AB6A1FD3FC1F5EBEDCA222151375683B733E9DDC9CA5B2485E202C55D25C"";
    BIGNUM* prv = BN_new();
    BN_hex2bn(&prv, p_str);
    EC_POINT* pub = EC_POINT_new(ecgroup);

    /* calculate the public key */
    EC_POINT_mul(ecgroup, pub, prv, NULL, NULL, NULL);

    /* add the private & public key to the EC_KEY structure */
    EC_KEY_set_private_key(eckey, prv);
    EC_KEY_set_public_key(eckey, pub);
    /* output public key in hex format */
    char* hexPKey = EC_POINT_point2hex( ecgroup, pub, POINT_CONVERSION_UNCOMPRESSED, NULL );
    printf(""Public key: %s \n"", hexPKey); 
    /* create hash */
    printf(""Data: "");
    uint8_t data[32];
    for(int i=0; i < 32; i++) {
        data[i] = i;
        printf(""%02x"",data[i]);
    }
    printf(""\n"");

    uint8_t hash[32];
    SHA256_CTX sha256;
    SHA256_Init(&sha256);
    SHA256_Update(&sha256, data, sizeof(data));
    SHA256_Final(hash, &sha256);

    printf(""Hash: "");
    for(int i=0; i < 32; i++) {
        data[i] = i;
        printf(""%02x"",hash[i]);
    }
    printf(""\n"");

    /* create and verify signature */
    ECDSA_SIG* signature = ECDSA_do_sign(hash, 32, eckey);
    /* hash[0] = 0xff; // Uncomment to test if verification fails with a wrong hash */
    if (1 != ECDSA_do_verify(hash, 32, signature, eckey)) {
        printf(""Failed to verify EC Signature\n"");
    } else {
        printf(""Verified EC Signature\n"");
    }
    /*print R & S value in hex format */
    char* hexR = BN_bn2hex(signature->r);
    char* hexS = BN_bn2hex(signature->s);
    printf(""R: %s \nS: %s\n"", hexR, hexS);
    /* export raw signature to DER-encoded format */
    int sigSize = i2d_ECDSA_SIG(signature, NULL);
    uint8_t* derSig = (uint8_t*)malloc(sigSize);
    uint8_t* p = derSig;    //memset(sig_bytes, 6, sig_size);
    sigSize= i2d_ECDSA_SIG(signature, &p);

    EVP_PKEY* pkey = EVP_PKEY_new();
    EVP_PKEY_set1_EC_KEY(pkey, eckey);

    /* write files */
    FILE* fp = fopen(""pubkey.pem"", ""w"");
    PEM_write_PUBKEY(fp, pkey);
    fclose(fp);
    fp = fopen(""privkey.pem"", ""w"");
    PEM_write_PrivateKey(fp, pkey, NULL, NULL, 0, 0, NULL);
    fclose(fp);
    fp = fopen(""data.bin"", ""w"");
    fwrite(data, 1, sizeof(data), fp);
    fclose(fp);
    fp = fopen(""data_sig.der"", ""w"");
    fwrite(derSig, 1, sigSize, fp);
    fclose(fp);

    /* free runtime allocated res */
    free(derSig);
    OPENSSL_free(hexPKey);
    OPENSSL_free(hexR); OPENSSL_free(hexS);
    BN_free(prv);
    EC_POINT_free(pub);
    EC_GROUP_free(ecgroup); 
    EC_KEY_free(eckey);
}

Now openssl check works:
$ openssl dgst -verify pubkey.pem -signature data_sig.der data.bin
Verified OK

","2043","<c><openssl><pem><ecdsa><der>","2","3","1","2017-01-30 11:54:31","37725832","0","","608639","","2016-06-10 05:24:30","2016-06-09 08:34:59",""
"39385718","DER Decode ECDSA Signature in Java","I have generated an ECDSA signature in Java and I would like to get the R and S values from it. It is my understanding that the signature I have generated is DER encoded. Can someone please provide me with some Java code (maybe using Bouncy Castle) to retrieve the R and S values as BigIntegers?
Note: In case it helps, I generated the signature using a built in provider via the JCE's Signature class and the signature lengths for my P_256 EC key pair hover between 70 and 72 bytes usually.
","I was able to solve this myself. In case it helps anyone here is how I did it (most exception handling has been stripped for readability):
import java.io.ByteArrayInputStream;
import java.math.BigInteger;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.Security;
import java.security.Signature;
import java.security.spec.ECGenParameterSpec;

import org.bouncycastle.asn1.ASN1Encodable;
import org.bouncycastle.asn1.ASN1InputStream;
import org.bouncycastle.asn1.ASN1Integer;
import org.bouncycastle.asn1.ASN1Primitive;
import org.bouncycastle.asn1.ASN1Sequence;
import org.bouncycastle.jce.provider.BouncyCastleProvider;

public class DecodeEcdsaSignature {

    public static void main(String[] args) throws Exception {
        Security.addProvider(new BouncyCastleProvider());

        byte[] signature = getSignature();      
        ASN1Primitive asn1 = toAsn1Primitive(signature);

        if (asn1 instanceof ASN1Sequence) {
            ASN1Sequence asn1Sequence = (ASN1Sequence) asn1;
            ASN1Encodable[] asn1Encodables = asn1Sequence.toArray();
            for (ASN1Encodable asn1Encodable : asn1Encodables) {
                ASN1Primitive asn1Primitive = asn1Encodable.toASN1Primitive();
                if (asn1Primitive instanceof ASN1Integer) {
                    ASN1Integer asn1Integer = (ASN1Integer) asn1Primitive;
                    BigInteger integer = asn1Integer.getValue();
                    System.out.println(integer.toString());
                }
            }
        }

    }

    private static ASN1Primitive toAsn1Primitive(byte[] data) throws Exception
    {
        try (ByteArrayInputStream inStream = new ByteArrayInputStream(data);
                ASN1InputStream asnInputStream = new ASN1InputStream(inStream);) 
        {
            return asnInputStream.readObject();
        }
    }

    private static byte[] getSignature() throws Exception {
        KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance(""ECDSA"");
        ECGenParameterSpec ecParameterSpec = new ECGenParameterSpec(""P-256"");
        keyPairGenerator.initialize(ecParameterSpec);
        KeyPair keyPair = keyPairGenerator.generateKeyPair();

        Signature signature = Signature.getInstance(""SHA256withECDSA"");
        signature.initSign(keyPair.getPrivate());
        signature.update(""message to sign"".getBytes(""UTF-8""));

        return signature.sign();
    }

}

","2042","<java><asn.1><ecdsa><der>","2","3","1","2016-09-11 08:34:55","39434271","0","","1596398","","2016-09-08 08:43:07","2016-09-08 08:08:46",""
"18204964","ECDSA for Android using SpongyCastle","I've just added SpongyCastle to Eclipse for my Android Project, however I don't seem to be able to find a single good/complete example of how to use ECDSA for encryption & decryption of plain texts. I would imagine this should be a 'hello world' for ecnryption libraries.
Can anyone help me with this? or direct me towards some other resource that can help me achieve the same goals?
Thanks.
","Here's the example from bouncycastle.org for generating a key, from there it's just standard use of the KeyPair.  Also @nelenkov wrote a great article (as usual) on Elliptic curve on Android
ECGenParameterSpec ecGenSpec = new ECGenParameterSpec(""prime192v1"");
//using spongycastle provider
KeyPairGenerator  g = KeyPairGenerator.getInstance(""ECDSA"", ""SC"");

g.initialize(ecGenSpec, new SecureRandom());

KeyPair pair = g.generateKeyPair();

","1926","<android><encryption-asymmetric><elliptic-curve><ecdsa><spongycastle>","1","0","1","2013-10-21 16:38:06","","1","1","","","","2013-08-13 09:08:21",""
"29303056","Java SSL/TLS Connection with ECC based certificates","I'm trying to build a Server which works with ECC-based certificates. So far I have taken the following steps:
1) creating the signed server-certificate with openssl:
openssl ecparam -param_enc explicit -out server\server.key.pem -name secp256k1 -genkey
openssl req -new -nodes -key server\server.key.pem -outform pem -out server\server.csr -sha256
openssl ca -keyfile CA\private\ca.key.pem -cert CA\ca.cert.pem -in server\server.csr -out server\server-cert.pem -md sha256 -outdir .\server
openssl pkcs12 -export -out server\server-cert.p12 -inkey server\server.key.pem -in server\server-cert.pem -certfile CA\ca.cert.pem

The ca.sert.pem is a self-signed CA-certificate to sign the server certificate with. It is generated likewise:
openssl ecparam -param_enc explicit -out CA\private\ca.key.pem -name secp256k1 -genkey 
openssl req -new -key CA\private\ca.key.pem -x509 -nodes -days 365 -outform pem -sha256 -out CA\ca.cert.pem

2) setting up the server
    public void startServer() {
    threadPool = (ThreadPoolExecutor) Executors.newCachedThreadPool();
    threadPool.setCorePoolSize(20);

    try {
        SSLContext sslContext = getSSLContext();
  SSLServerSocketFactory ssf = sslContext.getServerSocketFactory();
  SSLServerSocket serverSocket = (SSLServerSocket) ssf.createServerSocket(8888);
        String[] ciphers = {""TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256""};
  serverSocket.setEnabledCipherSuites(ciphers);
  serverSocket.setEnabledProtocols(new String[] {""TLSv1.2""});

  while (true) {
    SSLSocket clientSocket = (SSLSocket) serverSocket.accept();
    threadPool.execute(new ClientSession(clientSocket));
  }

    } catch (Exception e) {
        e.printStackTrace();
    }
}

    protected SSLContext getSSLContextForGWA() throws Exception {
    SSLContext sslContext = SSLContext.getInstance(""TLS"");
    try {
        KeyStore ks = KeyStore.getInstance(""PKCS12"", ""BC"");
        File keyFile = new File(System.getProperty(""user.dir"") + File.separator + ""certs"" + File.separator + ""server"" + File.separator + ""server-cert.p12"");
        FileInputStream keyInput = new FileInputStream(keyFile);
        ks.load(keyInput, keyStorePassword.toCharArray());
        keyInput.close();

        // Set up key manager factory to use our key store
        KeyManagerFactory kmf = KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());
        kmf.init(ks, keyStorePassword.toCharArray());

        // Initialize the SSLContext to work with our key managers.
        sslContext.init(kmf.getKeyManagers(), null, null);

        return sslContext;

    } catch (Exception e) {
        e.printStackTrace();
    }

    return null;
}

Remark: I only succeed to load the server certificate into the keystore using BouncyCastle. Otherwise I get ""Only named ECParameters supported"" Error.
3) Setting up the client
The client is set up likewise, except that the server certificate is imported into the truststore.
    SSLContext sslContext = getSSLContextForSMGW();
    SSLSocketFactory sf = sslContext.getSocketFactory();

    SSLSocket clientSocket = (SSLSocket) sf.createSocket(host, port);
    String[] ciphers = {""TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256""};
    clientSocket.setEnabledCipherSuites(ciphers);
    clientSocket.setEnabledProtocols(new String[] {""TLSv1.2""});
    printClientSocketInfo(clientSocket);
    BufferedReader in = new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));
    BufferedWriter out = new BufferedWriter(new OutputStreamWriter(clientSocket.getOutputStream()));

String line = null;
while (((line = in.readLine()) != null)) {
  System.out.println(line);
  break;
}

Now, when the client connects to the server I get the following error stack:
Caused by: java.io.IOException: Only named ECParameters supported
at sun.security.ec.ECParameters.engineInit(ECParameters.java:150)
at java.security.AlgorithmParameters.init(AlgorithmParameters.java:293)
at sun.security.x509.AlgorithmId.decodeParams(AlgorithmId.java:132)
at sun.security.x509.AlgorithmId.<init>(AlgorithmId.java:114)
at sun.security.x509.AlgorithmId.parse(AlgorithmId.java:372)
at sun.security.x509.X509Key.parse(X509Key.java:168)
at sun.security.x509.CertificateX509Key.<init>(CertificateX509Key.java:75)
at sun.security.x509.X509CertInfo.parse(X509CertInfo.java:667)
at sun.security.x509.X509CertInfo.<init>(X509CertInfo.java:167)
... 15 more

I guess, that the client is not capable to verify the servers certificate (same error as if I import the certificate not using BouncyCastle). 
I have printed the named EC-Curves with
        System.out.println(""Named EC-Curves:"");
    String[] curves = Security.getProvider(""SunEC"")
            .getProperty(""AlgorithmParameters.EC SupportedCurves"")
            .split(""\\|"");
    for (String curve : curves) {
        System.out.println(curve.substring(1, curve.indexOf("","")));
    }

And it clearly outputs the name 'secp256k1' among them. So what am I missing here? Or how can I make the SSLContext to use another implementation of CertificateX509Key?
The debug output at the client side is:
*** ClientHello, TLSv1.2
RandomCookie:  GMT: 1427463640 bytes = { 227, 188, 124, 163, 124, 55, 134, 199, 234, 241, 234, 51, 8, 208, 199, 117, 90, 125, 214, 134, 226, 110, 149, 92, 194, 25, 70, 59 }
Session ID:  {}
Cipher Suites: [TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256]
Compression Methods:  { 0 }
Extension elliptic_curves, curve names: {secp256r1, sect163k1, sect163r2, secp192r1, secp224r1, sect233k1, sect233r1, sect283k1, sect283r1, secp384r1, sect409k1, sect409r1, secp521r1, sect571k1, sect571r1, secp160k1, secp160r1, secp160r2, sect163r1, secp192k1, sect193r1, sect193r2, secp224k1, sect239k1, secp256k1}
Extension ec_point_formats, formats: [uncompressed]
Extension signature_algorithms, signature_algorithms: SHA512withECDSA, SHA512withRSA, SHA384withECDSA, SHA384withRSA, SHA256withECDSA, SHA256withRSA, SHA224withECDSA, SHA224withRSA, SHA1withECDSA, SHA1withRSA, SHA1withDSA, MD5withRSA
Extension renegotiation_info, renegotiated_connection: <empty>
***
main, WRITE: TLSv1.2 Handshake, length = 144
main, READ: TLSv1.2 Handshake, length = 1540
*** ServerHello, TLSv1.2
RandomCookie:  GMT: 1427463640 bytes = { 155, 184, 16, 18, 186, 249, 50, 70, 182, 75, 129, 217, 165, 78, 228, 255, 138, 98, 193, 58, 229, 70, 45, 1, 244, 84, 187, 235 }
Session ID:  {85, 21, 94, 216, 168, 186, 180, 208, 21, 40, 84, 147, 20, 244, 43, 97, 214, 18, 173, 27, 52, 175, 44, 1, 127, 20, 62, 126, 65, 229, 79, 1}
Cipher Suite: TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256
Compression Method: 0
Extension renegotiation_info, renegotiated_connection: <empty>
***
%% Initialized:  [Session-1, TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256]
** TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256
main, handling exception: javax.net.ssl.SSLProtocolException: java.io.IOException: Only named ECParameters supported
%% Invalidated:  [Session-1, TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256]
main, SEND TLSv1.2 ALERT:  fatal, description = unexpected_message
main, WRITE: TLSv1.2 Alert, length = 2
main, called closeSocket()
main, IOException in getSession():  javax.net.ssl.SSLProtocolException: java.io.IOException: Only named ECParameters supported
   Cipher suite = SSL_NULL_WITH_NULL_NULL
   Protocol = NONE

The curve is listed also among the curve-names. I have tried so many things now, I'm kind of stuck. Any help is highly appreciated.
","","1640","<java><ssl><ecdsa>","1","","0","2015-03-27 14:26:40","","2","2","","","","2015-03-27 14:26:40",""
"38269867","Reading and writing OpenSSL ECDSA keys to PEM file","I want to generate an ecdsa key pair and save it to PEM file. Here's the code that I generate the key.
#include <openssl/ec.h>      // for EC_GROUP_new_by_curve_name, EC_GROUP_free, EC_KEY_new, EC_KEY_set_group, EC_KEY_generate_key, EC_KEY_free
#include <openssl/ecdsa.h>   // for ECDSA_do_sign, ECDSA_do_verify
#include <openssl/obj_mac.h> // for NID_secp256k1

/*
* Function generate_eckey
* -----------------------
*
* This function generates an EC_Key object that stores the ECDSA key pair.
*
* return: ec key pair
*/
EC_KEY * generate_eckey() {
    EC_KEY *eckey=EC_KEY_new();
    EC_GROUP *ecgroup= EC_GROUP_new_by_curve_name(NID_secp256k1);
    EC_KEY_set_group(eckey, ecgroup);
    EC_KEY_generate_key(eckey);

    return eckey;
}


int main() {

    // generate a eckey used to produce signatures
    EC_KEY *eckey = generate_eckey();

    return 0;
}

Now I have this key pair that can be used to sign and verify messages. What I want to do is save the information to a file so next time I can simply load it and use it.
I want to know how can I write and load the keys to a PEM file? Does openssl have an existing function to do so? I have no preference whether the keys are encoded in any format, as long as after loading I can use it. Any example would be great.
","
I want to know how can I write and load the keys to a PEM file? Does openssl have an existing function to do so?

Yes, OpenSSL has existing functions. For ASN.1/DER, use d2i_ECPrivateKey and d2i_EC_PUBKEY; and for PEM use PEM_read_ECPrivateKey and PEM_read_EC_PUBKEY. The write functions are similar and documented in the man pages.
d2i_* is ""DER to internal"", and its used to read ASN.1/DER keys. The write functions use i2d_* and its ""internal to DER"". PEM does not use a cryptic prefix.
For an example of using d2i_* and PEM_* with RSA keys in a C++ program with the output, see Use OpenSSL RSA key with .Net. You can just swap-in your EC functions in place of the RSA ones.

EC_KEY * generate_eckey() {
    EC_KEY *eckey=EC_KEY_new();
    EC_GROUP *ecgroup= EC_GROUP_new_by_curve_name(NID_secp256k1);
    EC_KEY_set_group(eckey, ecgroup);
    EC_KEY_generate_key(eckey);

    return eckey;
}

Related, when you write your EC keys, be sure to use a named curve by callingEC_KEY_set_asn1_flag(ecKey, OPENSSL_EC_NAMED_CURVE). If you don't then the keys could be of limited use. Also see Elliptic Curve Cryptography | Named Curves on the OpenSSL wiki.
Also, you are ignoring return values from functions like EC_KEY_new and EC_KEY_generate_key. You might want to rethink that strategy since those function can fail for non-obvious reasons, like a policy setting. Also see EC_KEY_new man pages.
","1622","<c><openssl><pem><ecdsa>","3","1","1","2016-07-08 19:10:14","","1","","608639","","2016-07-08 17:52:50","2016-07-08 15:03:25",""
"43980660","Keys used with the ECDsaCng algorithm must have an algorithm group of ECDsa","I have the following problem, and cant find solution:
While consuming APN (Apple push notifications) API, i implemented tokenized authorization. It's apple's new way of authorization on their push notifications api. 
Apple provides me private key, which i use to create c# CngKey object, which then i use to sign data.
    CngKey key = CngKey.Import(
       Convert.FromBase64String(privateKey),
       CngKeyBlobFormat.Pkcs8PrivateBlob);

using (ECDsaCng dsa = new ECDsaCng(key))
{
    dsa.HashAlgorithm = CngAlgorithm.Sha256;
    var unsignedJwtData =
        Url.Base64urlEncode(Encoding.UTF8.GetBytes(header)) + ""."" + Url.Base64urlEncode(Encoding.UTF8.GetBytes(payload));
    var signature =
        dsa.SignData(Encoding.UTF8.GetBytes(unsignedJwtData));
    return unsignedJwtData + ""."" + Url.Base64urlEncode(signature);
}

The result is signed token, which i then use as authorization header while consuming API and sending push notifications. 
It works well on my dev machine, but when i deploy it to Windows Server, when this code runs i get next:
System.ArgumentException: Keys used with the ECDsaCng algorithm must have an algorithm group of ECDsa.
Parameter name: key
   at System.Security.Cryptography.ECDsaCng..ctor(CngKey key)
   at OTTCommon.Encryption.ECDSA.SignES256(String privateKey, String header, String payload, ILog log)

I cant find solution, it is something with windows key storage or something like that....
What should i do?
","This is fixed in the .NET Framework 4.6.2, so the easiest solution would perhaps be to get the server upgraded.
A workaround that works for NIST P-256, NIST P-384, and NIST P-521 is to change the dwMagic value in the blob export.  (It won't work for the Windows 10 Generic ECC, because the dwMagic values aren't aligned the same way).
byte[] blob = key.Export(CngKeyBlobFormat.EccPrivateBlob);
key.Dispose();

The first 4 bytes of this blob map to the dwMagic value in the BCRYPT_ECCKEY_BLOB structure.
BCRYPT_ECDH_PRIVATE_P256_MAGIC has value 0x324B4345, which is the Little-Endian representation of ""ECK2"" (Elliptic Curve Key-exchange 2).  BCRYPT_ECDSA_PRIVATE_P256_MAGIC has value 0x32534345, which is the Little-Endian representation of ""ECS2"" (Elliptic Curve Signing 2).
// Change it from Key-exchange (ECDH) to Signing (ECDSA)
blob[1] = 0x53;

key = CngKey.Import(blob, CngKeyBlobFormat.EccPrivateBlob);

And now it sees that it's an ECDSA key, and everything is happy.
","1618","<c#><apple-push-notifications><ecdsa><apn><cng>","4","5","1","2017-05-15 14:56:41","43982666","0","2","","","","2017-05-15 13:18:11",""
"16617153","ECDSA: How to get y coordinate from uncompressing x using openssl","What I am trying to do with ECDSA is take an x ""compressed"" coordinate and a y ""bit"" from values taken from external ECDSA hardware (it's really a public key) and then trying to recover the y coordinate (uncompressed) with OpenSSL function calls.
I am trying the following code, but it does not work as I expected (my xy[] array does not get populated with correct data).  Can anyone help?
I'm new to ECDSA and even newer to OpenSSL, but I was thinking I could do the following:
enter code here


EC_GROUP *curve_group = EC_GROUP_new_by_curve_name(NID_X9_62_prime192v1);
EC_POINT *point;
BIGNUM *x_compressed = BN_new();
int y_chooser_bit = 1;
int results = 0;
size_t returnsize = 0;

unsigned char x_compressed_byte_array[25] = {0x02, 0x71, 0xc0, 0x73, 0x73, 
                                             0x9b, 0xbf, 0xc2, 0x0a, 
                                             0x81, 0xcd, 0xdd, 0xf4, 
                                             0xcf, 0xca, 0xc7, 0xb5, 
                                             0xa9, 0x99, 0x61, 0x23, 
                                             0x2c, 0x5c, 0x63, 0x7a};

unsigned char xy[49];

// create a big number from the unsigned char array
BN_bin2bn(&x_compressed_byte_array[0],200,NULL); // length is in bits?

point = EC_POINT_new(curve_group);

results = EC_POINT_set_compressed_coordinates_GFp(curve_group, point, 
                                                  x_compressed,                                                               
                                                  y_chooser_bit, NULL);

returnsize = EC_POINT_point2oct(curve_group, point, 
                                POINT_CONVERSION_UNCOMPRESSED, 
                                &xy[0], 49, NULL); // 49

// clean up allocated memory
BN_free(x_compressed);
EC_POINT_free(point);
EC_GROUP_free(curve_group);

","In this line of your code
BN_bin2bn(&x_compressed_byte_array[0],200,NULL); // length is in bits?

You should pass bn_compressed, the BIGNUM you created, to hold the converted result. And the length is in bytes.
BN_bin2bn(&x_compressed_byte_array[0],sizeof(x_compressed_byte_array),x_compressed);

After you set_compressed_coordinates, you can verify if the point you just created locate correctly in the group.
if (!EC_POINT_is_on_curve(curve_group,point,NULL)) return 0;

To further examine the point coordinates (x,y), you can place this in your code.
if (!EC_POINT_get_affine_coordinates_GFp(curve_group, point, x, y, NULL)) return 0;
fprintf(stdout, ""\point = (x,y)\n"");
fprintf(stdout, ""     x = 0x"");
BN_print_fp(stdout, x);
fprintf(stdout, ""\n     y = 0x"");
BN_print_fp(stdout, y);
fprintf(stdout, ""\n"");

Just remember to new/free BIGNUM x and y at the first/end of your function.
BIGNUM *x, *y;
x = BN_new();
y = BN_new();

/* your code */

if(x) BN_free(x);
if(y) BN_free(y);

And it should work. The result xy[49] I have is
0x0471C073739BBFC20A81CDDDF4CFCAC7B7A99961232C5C637C388AB06AA7E43A2B5CFE2D7F3AC2DF910D6F8D8F209CD817
","1549","<openssl><compression><point><ecdsa>","4","2","1","2013-05-20 06:14:58","16643599","0","","","","","2013-05-17 20:13:22",""
"52004341","Create EC private key from hex string","I am wondering if this is a correct way to create PrivateKey object in Java from HEX string from this website: https://kjur.github.io/jsrsasign/sample/sample-ecdsa.html
Create a BigInteger from a HEX String:
BigInteger priv = new BigInteger(privateKeyFromSite, 16);

And pass to this method:
import java.math.BigInteger;
import java.security.KeyFactory;
import java.security.NoSuchAlgorithmException;
import java.security.PrivateKey;
import java.security.spec.InvalidKeySpecException;

import org.bouncycastle.jce.ECNamedCurveTable;
import org.bouncycastle.jce.spec.ECParameterSpec;
import org.bouncycastle.jce.spec.ECPrivateKeySpec;


public static PrivateKey getPrivateKeyFromECBigIntAndCurve(BigInteger s, String curveName) {

    ECParameterSpec ecParameterSpec = ECNamedCurveTable.getParameterSpec(curveName);

    ECPrivateKeySpec privateKeySpec = new ECPrivateKeySpec(s, ecParameterSpec);
    try {
        KeyFactory keyFactory = KeyFactory.getInstance(EC);
        return keyFactory.generatePrivate(privateKeySpec);
    } catch (NoSuchAlgorithmException | InvalidKeySpecException e) {
        e.printStackTrace();
        return null;
    }
}

","Yes it's correct, an EC private key is just a number. If you print out your PrivateKey, you'll see the X and Y coordinates of the corresponding public key.
For example, let's say the following key pair was generated (secp256r1):

EC Private Key:
1b9cdf53588f99cea61c6482c4549b0316bafde19f76851940d71babaec5e569
EC Public Key:
0458ff2cd70c9a0897eb90a7c43d6a656bd76bb8089d52c259db6d9a45bfb37eb9882521c3b1e20a8bae181233b939174ee95e12a47bf62f41a62f1a20381a6f03

We plug the private key bytes into your function:
BigInteger priv = new BigInteger(""1b9cdf53588f99cea61c6482c4549b0316bafde19f76851940d71babaec5e569"", 16);
PrivateKey privateKey = getPrivateKeyFromECBigIntAndCurve(priv, ""secp256r1"");
System.out.println(privateKey);

And print it:
EC Private Key [91:05:8a:28:94:f9:5c:cb:c4:34:b8:69:e4:39:d4:57:59:c7:51:35]
        X: 58ff2cd70c9a0897eb90a7c43d6a656bd76bb8089d52c259db6d9a45bfb37eb9
        Y: 882521c3b1e20a8bae181233b939174ee95e12a47bf62f41a62f1a20381a6f03

As you can see, if you concatenate 04 + X + Y, you'll get the original public key, (04 is the uncompressed EC point tag).
","1501","<java><bouncycastle><elliptic-curve><ecdsa>","3","3","1","2019-10-03 13:06:00","52006151","1","2","","","","2018-08-24 12:18:49",""
"29924145","How to sign the Certificates with Elliptic curve private keys and ECDSA algorithm?","I am able to sign the certificates using bouncy castle with RSA private Keys and ""SHA256withRSA "" algorithm.  I have used below link for reference to achieve this.
Sign CSR using Bouncy Castle
Now I have my CAs with Elliptic Curve keys signed with ECDSA. Hence I want to sign the certificates with EC key and ""SHA256withECDSA"" algorithm by these CAs. 
However I am stuck at below snippet specific to RSA key, I want to use EC key.
ContentSigner sigGen = new BcRSAContentSignerBuilder(sigAlgId, digAlgId).build(privateKeyParam);

Please help me how we can achieve Certificate signing with ECDSA and EC keys
","Below code used to sign the certificates with EC private keys 
ContentSigner sigGen = new JcaContentSignerBuilder(""SHA256withECDSA"").build(new JcaPEMKeyConverter().getPrivateKey(PrivateKeyInfo));

","1465","<java><ssl><bouncycastle><elliptic-curve><ecdsa>","3","1","1","2016-05-12 12:27:31","37186879","2","0","-1","","2017-05-23 11:44:10","2015-04-28 15:54:04",""
"27232053","Creation of ECDSA private key given curve and private exponent?","I am new to cryptopp and have been struggling for a while with the creation of  private keys for ECDSA signing.
I have a hex encoded private exponent E4A6CFB431471CFCAE491FD566D19C87082CF9FA7722D7FA24B2B3F5669DBEFB. This is stored as a string.
I want to use this to sign a text block using ECDSA.  My code looks a bit like this
string Sig::genSignature(const string& privKeyIn, const string& messageIn)
{
   AutoSeededRandomPool prng;
   ECDSA<ECP, SHA256>::PrivateKey privateKey;
   privateKey.AccessGroupParameters().Initialize(ASN1::secp256r1());
   privateKey.Load(StringSource(privKeyIn, true, NULL).Ref());
   ECDSA<ECP, SHA256>::Signer signer(privateKey);

   // Determine maximum size, allocate a string with that size
   size_t siglen = signer.MaxSignatureLength();
   string signature(siglen, 0x00);

   // Sign, and trim signature to actual size
   siglen = signer.SignMessage(prng, (const byte *) messageIn.data(), (size_t) messageIn.length(),       (byte*)signature.data());
   signature.resize(siglen);
   cout << signature.data() << endl;
   return signature;
}

This code generates the following error in Visual studio on the when I try to do privateKey.load(...)
First-chance exception at 0x7693C42D in DLLTest.exe: Microsoft C++ exception: CryptoPP::BERDecodeErr at memory location 0x0033EEA8.
Unhandled exception at 0x7693C42D in DLLTest.exe: Microsoft C++ exception: CryptoPP::BERDecodeErr at memory location 0x0033EEA8.

I am guessing I am doing something a bit stupid... any help would be great???
PS I had a similar issue using ECDH for GMAC generation but got round this by saving the key as a SECByteBlock but this 'trick' doesnt seem to work in this case.
","
DLLTest.exe: Microsoft C++ exception: CryptoPP::BERDecodeErr ...

You have a private exponent, and not a private key. So you should not call Load on it. That's causing the Crypto++ BERDecodeErr exception.
The answer is detailed on the ECDSA wiki page, but its not readily apparent. You need to perform the following to initialize the privateKey given the curve and exponent::
string exp = ""E4A6CFB431471CFCAE491FD566D19C87082CF9FA7722D7FA24B2B3F5669DBEFB"";
exp.insert(0, ""0x"");

Integer x(exp.c_str());
privateKey.Initialize(ASN1::secp256r1(), x);

Prepending the ""0x"" ensures the Integer class will parse the ASCII string correctly. You can also append a ""h"" character to the string. You can see the parsing code for Integer class at Integer.cpp around line 2960 in the StringToInteger function.

Here's another way to do the same thing:
string exp = ""E4A6CFB431471CFCAE491FD566D19C87082CF9FA7722D7FA24B2B3F5669DBEFB"";

HexDecoder decoder;
decoder.Put((byte*)exp.data(), exp.size());
decoder.MessageEnd();

Integer x;
x.Decode(decoder, decoder.MaxRetrievable());

privateKey.Initialize(ASN1::secp256r1(), x);

The HexDecoder will perform the ASCII to binary conversion for you. The buffer held by the HexDecoder will then be consumed by the Integer using its Decode (BufferedTransformation &bt, size_t inputLen, Signedness=UNSIGNED) method.

And here is another way using HexDecoder (Crypto++ is as bad as scripting languages at times :)...
string exp = ""E4A6CFB431471CFCAE491FD566D19C87082CF9FA7722D7FA24B2B3F5669DBEFB"";
StringSource ss(exp, true /*punpAll*/, new HexDecoder);

Integer x;
x.Decode(ss, ss.MaxRetrievable());

privateKey.Initialize(ASN1::secp256r1(), x);


After initializing the key, you should validate it:
bool result = privateKey.Validate( prng, 3 );
if( !result ) { /* Handle error */ }


This will output binary data:
cout << signature.data() << endl;

If you want something printable/readable, run it though a Crypto++ HexEncoder.
","1447","<c++><private-key><crypto++><ecdsa><signer>","2","2","2","2015-06-16 23:05:21","27232308","2","1","15541","","2014-12-02 05:22:13","2014-12-01 15:50:43",""
"27232053","Creation of ECDSA private key given curve and private exponent?","I am new to cryptopp and have been struggling for a while with the creation of  private keys for ECDSA signing.
I have a hex encoded private exponent E4A6CFB431471CFCAE491FD566D19C87082CF9FA7722D7FA24B2B3F5669DBEFB. This is stored as a string.
I want to use this to sign a text block using ECDSA.  My code looks a bit like this
string Sig::genSignature(const string& privKeyIn, const string& messageIn)
{
   AutoSeededRandomPool prng;
   ECDSA<ECP, SHA256>::PrivateKey privateKey;
   privateKey.AccessGroupParameters().Initialize(ASN1::secp256r1());
   privateKey.Load(StringSource(privKeyIn, true, NULL).Ref());
   ECDSA<ECP, SHA256>::Signer signer(privateKey);

   // Determine maximum size, allocate a string with that size
   size_t siglen = signer.MaxSignatureLength();
   string signature(siglen, 0x00);

   // Sign, and trim signature to actual size
   siglen = signer.SignMessage(prng, (const byte *) messageIn.data(), (size_t) messageIn.length(),       (byte*)signature.data());
   signature.resize(siglen);
   cout << signature.data() << endl;
   return signature;
}

This code generates the following error in Visual studio on the when I try to do privateKey.load(...)
First-chance exception at 0x7693C42D in DLLTest.exe: Microsoft C++ exception: CryptoPP::BERDecodeErr at memory location 0x0033EEA8.
Unhandled exception at 0x7693C42D in DLLTest.exe: Microsoft C++ exception: CryptoPP::BERDecodeErr at memory location 0x0033EEA8.

I am guessing I am doing something a bit stupid... any help would be great???
PS I had a similar issue using ECDH for GMAC generation but got round this by saving the key as a SECByteBlock but this 'trick' doesnt seem to work in this case.
","for others looking for this later 
string genSignature(const string& privKeyIn, const string& messageIn)
{
    CryptoPP::Integer secretNumber(genSecretNumber(privKeyIn, messageIn));
    AutoSeededRandomPool secretNumberGenerator;

    if (encryptBase::debug)
    {
        cout << ""secret number: "" << secretNumber << endl;
    }

    SecByteBlock message(convertHexStrToSecByteBlock(messageIn));
    ECDSA<ECP, SHA256>::PrivateKey privateKey;
    string exp(privKeyIn);
    exp.insert(0, ""0x"");
    Integer x(exp.c_str());
    privateKey.Initialize(ASN1::secp256r1(), x);
    AutoSeededRandomPool prng;
    if (!privateKey.Validate(prng, 3))
    {
        cout << ""unable to verify key"" << endl;
        return ""failed to verify key"";
    }

    ECDSA<ECP, SHA256>::Signer signer(privateKey);
    size_t siglen = signer.MaxSignatureLength();
    string signature(siglen, 0x00);
    siglen = signer.SignMessage(secretNumberGenerator, message.BytePtr(), message.size(),     (byte*)signature.data());
    signature.resize(siglen);

    string encoded;
    HexEncoder encoder;
    encoder.Put((byte *) signature.data(), signature.size());
    encoder.MessageEnd();
    word64 size = encoder.MaxRetrievable();
    if (size)
    {
        encoded.resize(size);
        encoder.Get((byte*)encoded.data(), encoded.size());
    }

    return encoded;
}

","1447","<c++><private-key><crypto++><ecdsa><signer>","2","0","2","2015-06-16 23:05:21","27232308","2","1","15541","","2014-12-02 05:22:13","2014-12-01 15:50:43",""
"36342812","cryptographicexception the parameter is incorrect","I am using ECDSA with SHA1 encryption because I am trying to make a licencing activation for a desktop application. For that I use a PHP server to which I give PC information and the server gives me the public the key and then I want to validate the data in C#.
I generated this public key in PHP:
""-----BEGIN PUBLIC KEY-----
MDIwEAYHKoZIzj0CAQYFK4EEAAYDHgAEKzL3PFVVo3IWftdEYmwiSO/4zULGM/wB
8BrLjQ==
-----END PUBLIC KEY-----"";

I used the code from here http://securitydriven.net/inferno/ To get to this
byte[] thePublicKeyToBytes = GetBytesFromPEM(thePublicKey2, ""PUBLIC KEY"");
CngKey dsaKeyPublic2 = thePublicKeyToBytes.ToPublicKeyFromBlob();

byte[] theRestToBytes = GetBytes(theRestInBinary);
byte[] meinData = GetBytes(""Blabla"");

using (var ecdsa = new ECDsaCng(dsaKeyPublic2) { HashAlgorithm = CngAlgorithm.Sha1 }) // verify DSA signature with public key
{
    if (ecdsa.VerifyData(meinData, theRestToBytes)) MessageBox.Show(""Signature verified."");
    else MessageBox.Show(""Signature verification failed."");
}

where the procedure is:
byte[] GetBytesFromPEM(string pemString, string section)
{
    var header = String.Format(""-----BEGIN {0}-----"", section);
    var footer = String.Format(""-----END {0}-----"", section);

    var start = pemString.IndexOf(header, StringComparison.Ordinal) + header.Length;
    var end = pemString.IndexOf(footer, start, StringComparison.Ordinal) - start;

    if (start < 0 || end < 0)
    {
        return null;
    }

    return Convert.FromBase64String(pemString.Substring(start, end));
}

The problem is that I get this exception ""cryptographicexception the parameter is incorrect"" at this line:
CngKey dsaKeyPublic2 = thePublicKeyToBytes.ToPublicKeyFromBlob();

I can't show the inferno's public key, but I saw that the length of their key is 384. Is this where I am doing it wrong? The length of the generated public key?
","Your public key is 52 bytes long - it is too short. How are you generating it?
The ToPublicKeyFromBlob() method is a shortcut for return CngKey.Import(byteArray, CngKeyBlobFormat.EccPublicBlob) - it works only on Ecc-based keys, and those generated by .NET. Inferno uses ECC keys over P384 curve, which means that each public key will have 48*2=96 bytes, plus 8 header bytes (as described here), for a total of 104 bytes.
","1411","<c#><php><ecdsa>","0","1","2","2016-04-04 21:30:07","","0","","","","","2016-03-31 20:10:14",""
"36342812","cryptographicexception the parameter is incorrect","I am using ECDSA with SHA1 encryption because I am trying to make a licencing activation for a desktop application. For that I use a PHP server to which I give PC information and the server gives me the public the key and then I want to validate the data in C#.
I generated this public key in PHP:
""-----BEGIN PUBLIC KEY-----
MDIwEAYHKoZIzj0CAQYFK4EEAAYDHgAEKzL3PFVVo3IWftdEYmwiSO/4zULGM/wB
8BrLjQ==
-----END PUBLIC KEY-----"";

I used the code from here http://securitydriven.net/inferno/ To get to this
byte[] thePublicKeyToBytes = GetBytesFromPEM(thePublicKey2, ""PUBLIC KEY"");
CngKey dsaKeyPublic2 = thePublicKeyToBytes.ToPublicKeyFromBlob();

byte[] theRestToBytes = GetBytes(theRestInBinary);
byte[] meinData = GetBytes(""Blabla"");

using (var ecdsa = new ECDsaCng(dsaKeyPublic2) { HashAlgorithm = CngAlgorithm.Sha1 }) // verify DSA signature with public key
{
    if (ecdsa.VerifyData(meinData, theRestToBytes)) MessageBox.Show(""Signature verified."");
    else MessageBox.Show(""Signature verification failed."");
}

where the procedure is:
byte[] GetBytesFromPEM(string pemString, string section)
{
    var header = String.Format(""-----BEGIN {0}-----"", section);
    var footer = String.Format(""-----END {0}-----"", section);

    var start = pemString.IndexOf(header, StringComparison.Ordinal) + header.Length;
    var end = pemString.IndexOf(footer, start, StringComparison.Ordinal) - start;

    if (start < 0 || end < 0)
    {
        return null;
    }

    return Convert.FromBase64String(pemString.Substring(start, end));
}

The problem is that I get this exception ""cryptographicexception the parameter is incorrect"" at this line:
CngKey dsaKeyPublic2 = thePublicKeyToBytes.ToPublicKeyFromBlob();

I can't show the inferno's public key, but I saw that the length of their key is 384. Is this where I am doing it wrong? The length of the generated public key?
","Andrei, Inferno uses the NIST P-384 curve only. More importantly, the only curves supported by .NET framework (out-of-the-box) are P-256, P-384, and P-521.
","1411","<c#><php><ecdsa>","0","0","2","2016-04-04 21:30:07","","0","","","","","2016-03-31 20:10:14",""
"32991501","How to verify ecdsa-with-SHA256 signature with PHP?","I have encountered the following issue while developing a secure system:
We receive some data which we have to verify by signature. The signature algorithm is ecdsa-with-SHA256, and openssl_verify() doesn't seem to have an option for that. Already tried searching for standalone PHP libraries like phpseclib - no luck either, ecdsa-with-SHA1 is the best option they seem to offer.
What would be an appropriate solution for that issue? Maybe I've missed some library that implements such functionality?
","PHP's openssl_ currently supports ECDSA only with SHA1 digest (reefer to openssl_get_md_methods() output, position [14]). You'll need a workaround for this. From comments of this question (closed as off topic, by the way), but it was focused on bitcoin implementations.
","1407","<php><sha><ecdsa>","2","2","1","2015-10-07 12:39:15","32992458","0","1","","","","2015-10-07 11:52:08",""
"21079564","How to verify ECDSA signature with Crypto++ without the verify function?","I made a Signer/Checker mechanisms with ECDSA using Crypto++.
The problem is when I want to check signature it doesn't work with Verify function.
Can you propose me a more manual way to verify signature?
","
How to verify ECDSA signature with Crypto++ without the verify function?

I'm not sure how you would verify code without a verify function. I'm probably not understanding the question.
Just in case, here's how Crypto++ implements its verification code.
First, ECDSA is a DL_Algorithm_ECDSA (from eccrypto.h):
//! ECDSA algorithm
template <class EC>
class DL_Algorithm_ECDSA : public DL_Algorithm_GDSA<typename EC::Point>
{
public:
    static const char * CRYPTOPP_API StaticAlgorithmName() {return ""ECDSA"";}
};
...

template <class EC, class H>
struct ECDSA :
    public DL_SS<DL_Keys_ECDSA<EC>, DL_Algorithm_ECDSA<EC>,
               DL_SignatureMessageEncodingMethod_DSA, H>
{
};

Next, here's verify function from DL_Algorithm_GDSA in gfcrypt.h:
bool Verify(const DL_GroupParameters<T> &params, const DL_PublicKey<T> &publicKey,
                const Integer &e, const Integer &r, const Integer &s) const
{
    const Integer &q = params.GetSubgroupOrder();
    if (r>=q || r<1 || s>=q || s<1)
        return false;

    Integer w = s.InverseMod(q);
    Integer u1 = (e * w) % q;
    Integer u2 = (r * w) % q;

    return r == params.ConvertElementToInteger(
                    publicKey.CascadeExponentiateBaseAndPublicElement(u1, u2)) % q;
}


The code below uses VerifyMessage, and its part of PK_Verifier declared in cryptolib.h:
virtual bool VerifyMessage(const byte *message, size_t messageLen, 
                 const byte *signature, size_t signatureLength) const;

PK_Verifier is the 'master' base class that objects like ECDSA, NR, and RSASS use to expose the consistent interface.
Objects like ECDSA, NR, and RSASS connect to PK_Verifier via the DL_SS:
template <class EC, class H>
struct ECDSA :
    public DL_SS<DL_Keys_ECDSA<EC>, DL_Algorithm_ECDSA<EC>, DL_SignatureMessageEncodingMethod_DSA, H>
{
};

Finally, here's how DL_SS relates to PK_Verifier (from pubkey.h):
//! Discrete Log Based Signature Scheme
template <class KEYS, class SA, class MEM, class H, class ALG_INFO = DL_SS<KEYS, SA, MEM, H, int> >
class DL_SS : public KEYS
{
    typedef DL_SignatureSchemeOptions<ALG_INFO, KEYS, SA, MEM, H> SchemeOptions;
    ...

    //! implements PK_Signer interface
    typedef PK_FinalTemplate<DL_SignerImpl<SchemeOptions> > Signer;
    //! implements PK_Verifier interface
    typedef PK_FinalTemplate<DL_VerifierImpl<SchemeOptions> > Verifier;
};



The problem is when I want to check signature it doesn't work with Verify function.

There's lots of code available on the Crypto++ wiki. For ECDSA, see Elliptic Curve Digital Signature Algorithm. Below is a signing a verification sample taken from the wiki.
Sign
AutoSeededRandomPool prng;

ECDSA<ECP, SHA1>::PrivateKey privateKey;
privateKey.Load(...);
privateKey.Validate(prng, 3);

ECDSA<ECP, SHA1>::Signer signer(privateKey);

string message = ""Do or do not. There is no try."";

// Determine maximum size, allocate a string with the maximum size
size_t siglen = signer.MaxSignatureLength();
string signature(siglen, 0x00);

// Sign, and trim signature to actual size
siglen = signer.SignMessage( prng, message.data(), message.size(), signature.data() );
signature.resize(siglen);

Verify
AutoSeededRandomPool prng;

ECDSA<ECP, SHA1>::PublicKey publicKey;
publicKey.Load(...);
publicKey.Validate(prng, 3);

ECDSA<ECP, SHA1>::Verifier verifier(publicKey);

bool result = verifier.VerifyMessage( message.data(), message.size(), signature.data(), signature.size() );
if(result)
  cout << ""Verified signature on message"" << endl;
else
  cerr << ""Failed to verify signature on message"" << endl;

","1358","<digital-signature><crypto++><ecdsa>","0","1","1","2014-01-13 10:26:56","","1","","","","","2014-01-12 19:58:04",""
"15113781","ECDSA Signatures always return false on verification","I have 3 test keys — RSA, DSA and ECDSA. The RSA and DSA key-based signatures return true when verified. But the ECDSA-based signature always returns false (even when the signatures match).
The same code is used to verify all 3 test keys (apart from the differences in the provider object passed to Signature.getInstance()). My code is as follows:
Signature ecdsa = Signature.getInstance(""SHA1withECDSA"");
ecdsa.initSign(pk);
ecdsa.update(rawKeyBytes);
byte[] signatureBytes = ecdsa.sign(); 

Signature ecdsa3 = Signature.getInstance(""SHA1WithECDSA"");
ecdsa3.initVerify(puk);  
ecdsa3.update(rawKeyBytes);
System.out.println(""Verifying: ""+ecdsa3.verify(signatureBytes));

The output of the program is always Verifying: false. When I change the provider to SHA1WithRSA and use an RSA key (using the same code above), the verification returns true, same with DSA-based keys. Someone mentioned it had something to do with the ECPoint passed to the ECPublicKeySpec() constructor, when trying to create a public key from the private key like this:
ECPrivateKey ec = (ECPrivateKey) privateKey;
ECPublicKeySpec ecKeySpec = new ECPublicKeySpec(
    ec.getParams().getGenerator(),
    ec.getParams()
);

Someone mentioned that signature verification (using the public key) would fail if a different ECPoint was used from the private key. But I actually get the ECPoint from the PrivateKey object (ec). Any solutions, please?
","","1357","<java><digital-signature><ecdsa>","1","","0","2015-06-18 15:53:35","","7","1","1816580","","2015-06-18 15:53:35","2013-02-26 12:22:52",""
"15966846","InvalidCastException on c# bouncy castle verify signature","I try to verify an ecdsa (256) signature, the only data I have to do it is the public key in the given format below, the original data and the signature:
        string pubKey_ecdsa = ""MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAE+noecsW+vdfd8DNo5dsAxU4DOaNt6PGmSCLFo/EvQG4xmVzv464qXvDPIrPN8GtLnubzoa9rtWJD52VlGOpFsA=="";

        string data_ecdsa = "";\""4399901526945\"";\""AAAA-BBBBBBBBB-123456789000\"";\""5010112544615\"";\""20130802063109143\"";"";

        string signature_ecdsa = @""BEcwRQIgJFwnCvm8lRjlRt+G+f4viJktDYVyOiXUd5BJ0V761eECIQDBTHLjJI7KK3FhczEHjunenYWXylDdW91jbS23EmeznA=="";

When I try to use bouncy castle to verify the signature by calling:
        //Create the public key from string
        AsymmetricKeyParameter pubKey = PublicKeyFactory.CreateKey(Convert.FromBase64String(pubKey_ecdsa));

        // create byte array from string
        byte[] b_signature = Convert.FromBase64String(signature_ecdsa);

        ASCIIEncoding encoder = new ASCIIEncoding();
        byte[] inputData = encoder.GetBytes(data_ecdsa);
        ISigner signer = SignerUtilities.GetSigner(""SHA-256withECDSA"");
        signer.Init(false, pubKey);
        signer.BlockUpdate(inputData, 0, inputData.Length);

        bool valid =  signer.VerifySignature(b_signature);

I receive an InvalidCastException: 
Unable to cast object of type 'Org.BouncyCastle.Asn1.DerOctetString'
to type 'Org.BouncyCastle.Asn1.Asn1Sequence'. 

at the following line:
bool valid =  signer.VerifySignature(b_signature);

So, something seems wrong with the signature, but I can not figure out. I hope anybody could help with an good idea.
By the way, the provided data in this example was modified, so the signature would be evaluated to false, if it would work.
","This may be too late to help, but for the benefit of later readers:
A DSA signature is expected to be the ASN.1 encoding of a SEQUENCE containing two INTEGERs. The problem here is that b_signature is actually an OCTET STRING, with the octets inside it being the correct encoding. So there is an extra ""outer"" wrapping around the real signature. You can see this by dumping out the structure:
Asn1OctetString outer =(Asn1OctetString)Asn1Object.FromByteArray(b_signature);
byte[] inner = outer.GetOctets();

Console.WriteLine(Asn1Dump.DumpAsString(outer));
Console.WriteLine(Asn1Dump.DumpAsString(Asn1Object.FromByteArray(inner)));

For me, this prints:

DER Octet String[71]
DER Sequence
      Integer(16446081942964531772961165410855935370418106604815444975891408706004345083361)
      Integer(87431453076334980518600256741994746667679967157867025465393185500427926877084)

So, the 'inner' octets look to be correctly encoded. Now:
bool valid = signer.VerifySignature(inner);

For me, this prints 'false', which you say is expected because the data has been modified.
","1354","<c#><bouncycastle><signature><ecdsa>","2","3","1","2013-06-24 12:00:59","17274982","2","","1371805","","2013-04-12 08:48:56","2013-04-12 08:45:04",""
"45107057","Creating X509Certificate2 from ECC X509Certificate throws 'System.NotSupportedException' in C#","I need to import ECC certificates into Windows Key Stores in C#.  As the first step, I am using BouncyCastle to generate an EC key pair, create an X509 certificate with the public key, and sign it with the ECDSA and private key, i.e.,:
            var ecKeyPairGenerator = new ECKeyPairGenerator(""ECDSA"");
            ECKeyGenerationParameters ecKeyGenParams =
                new ECKeyGenerationParameters(SecObjectIdentifiers.SecP384r1, new SecureRandom());
            ecKeyPairGenerator.Init(ecKeyGenParams);
            AsymmetricCipherKeyPair pair = ecKeyPairGenerator.GenerateKeyPair();
            PrivateKeyInfo privKeyInfo = PrivateKeyInfoFactory.CreatePrivateKeyInfo(pair.Private);
            SubjectPublicKeyInfo pubKeyInfo = SubjectPublicKeyInfoFactory.CreateSubjectPublicKeyInfo(pair.Public);

            X509V3CertificateGenerator bcX509Gen = new X509V3CertificateGenerator();
// set cert fields
...
            bcX509Gen.SetPublicKey(pair.Public);
            Asn1SignatureFactory bcSigFactory =
                    new Asn1SignatureFactory(X9ObjectIdentifiers.ECDsaWithSha384.Id, pair.Private);
            X509Certificate bcCert = bcX509Gen.Generate(bcSigFactory);

Then, I create an X509Certificate2 with the certificate created above, i.e.,:
    SystemX509.X509Certificate2 msCert2 = 
        new SystemX509.X509Certificate2(bcCert.GetEncoded(), (string)null);

However, an exception is raised in creating the X509Certificate2:
'msCert2.PublicKey.Key' threw an exception of type 'System.NotSupportedException'
""The certificate key algorithm is not supported.""

Using BC's DotNetUtilities.ToX509Certificate() results in the same exception.
I'm aware that the support for ECC certificates on Windows / .NET may not be complete, but my searches on the web seem to suggest that this should be possible?  Any ideas what I'm doing wrong?
FYI, I'm using VS Community 2017, and my project has the target of .NET Framework 4.6.2.
Thanks!
","PublicKey.Key is unofficially deprecated (along with PrivateKey).  It doesn't support ECC, and doesn't produce an RSA key that is capable of doing OAEP-SHA-2 encryption or DSA key capable of doing FIPS 186-3 DSA.
Instead you want to use the extension methods which don't require casting:
// GetECDsaPublicKey returns a unique object every call,
// so you're responsible for Disposing it (lest it end up on the Finalizer queue)
using (ECDsa ecdsa = msCert2.GetECDsaPublicKey())
{
    // do stuff with the public key object
}

","1352","<c#><.net><bouncycastle><x509certificate2><ecdsa>","2","3","1","2017-07-14 16:13:45","45107458","0","","","","","2017-07-14 15:49:02",""
"44808132","Using openssh public key (ecdsa-sha2-nistp256) with Java Security","Is there a Java library/example to read an openssh format ecdsa public key to a JCE PublicKey in Java? I want to use EC for JWT .
The format I'm trying to read is as per authorized_keys, or Github API (e.g. https://api.github.com/users/davidcarboni/keys):  ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBK8hPtB72/sfYgNw1WTska2DNOJFx+QhUxuV6OLINSD2ty+6gxcM8yZrvMqWdMePGRb2cGh8L/0bGOk+64IQ/pM=
I've found this answer, which is fine for RSA and DSS:
Using public key from authorized_keys with Java security, and this discussion of the openssh format for ECDSA: https://security.stackexchange.com/questions/129910/ecdsa-why-do-ssh-keygen-and-java-generated-public-keys-have-different-sizes 
However I'm getting lost trying to adapt the RSS/DSA code for ECDSA - I'm not sure how to set up an ECPublicKeySpec. It needs ECPoint, EllipticCurve, ECParameterSpec, ECField. The openssh format only contains two integers, which makes sense for ECPoint, but I don't know how to set up the rest.
I've been poking around a bunch of libraries, including jsch, sshj, ssh-tools and good old Bouncycastle. The closest I have is:
com.jcraft.jsch.KeyPair load = com.jcraft.jsch.KeyPair.load(jsch, null, bytes[openSshKey]);
Which loads the key fine, but doesn't get me to a JCE PublicKey - just a byte[] getPublicKeyBlob() method.
Am I missing something obvious?
","I've found a way to do this using Bouncycastle (but would like to find a JCE way).
Adapting the code from Using public key from authorized_keys with Java security, and refering to RFC 5656, section 3.1, the following block added to decodePublicKey will parse the single BigInt value Q, which is ""the public key encoded from an elliptic curve point"":
if (type.startsWith(""ecdsa-sha2-"") &&
            (type.endsWith(""nistp256"") || type.endsWith(""nistp384"") || type.endsWith(""nistp521""))) {

        // Based on RFC 5656, section 3.1 (https://tools.ietf.org/html/rfc5656#section-3.1)

        // The string [identifier] is the identifier of the elliptic curve
        // domain parameters.  The format of this string is specified in
        // Section 6.1 (https://tools.ietf.org/html/rfc5656#section-6.1).
        // Information on the REQUIRED and RECOMMENDED sets of
        // elliptic curve domain parameters for use with this algorithm can be
        // found in Section 10 (https://tools.ietf.org/html/rfc5656#section-10).
        String identifier = decodeType();
        if (!type.endsWith(identifier)) {
            throw new IllegalArgumentException(""Invalid identifier "" + identifier + "" for key type "" + type + ""."");
        }

        // Q is the public key encoded from an elliptic curve point into an
        // octet string as defined in Section 2.3.3 of [SEC1];
        // (https://tools.ietf.org/html/rfc5656#ref-SEC1)
        // point compression MAY be used.
        BigInteger q = decodeBigInt();

        ECPublicKey keyBC = getKeyBC(q, identifier);
        return keyBC;
    }

The solution I've found for getting from Q to an ECPublicKey is the following, using the Bouncycastle API (credit to Generate ECPublicKey from ECPrivateKey for providing the starting point):
ECPublicKey getKeyBC(BigInteger q, String identifier) {
    // https://stackoverflow.com/questions/42639620/generate-ecpublickey-from-ecprivatekey
    try {
        // This only works with the Bouncycastle library:
        Security.addProvider(new BouncyCastleProvider());
        // http://www.bouncycastle.org/wiki/pages/viewpage.action?pageId=362269#SupportedCurves(ECDSAandECGOST)-NIST(aliasesforSECcurves)
        String name = identifier.replace(""nist"", ""sec"") + ""r1"";
        KeyFactory keyFactory = KeyFactory.getInstance(""ECDSA"", ""BC"");
        ECNamedCurveParameterSpec ecSpec = ECNamedCurveTable.getParameterSpec(name);
        ECPoint point = ecSpec.getCurve().decodePoint(q.toByteArray());
        ECPublicKeySpec pubSpec = new ECPublicKeySpec(point, ecSpec);
        ECPublicKey publicKey = (ECPublicKey) keyFactory.generatePublic(pubSpec);
        return publicKey;
    } catch (NoSuchAlgorithmException | InvalidKeySpecException | NoSuchProviderException e) {
        throw new RuntimeException(e);
    }
}

That gets you from an openssh format elliptic curve public key (ssh-keygen -t ecdsa -b [256|384|521]) to a JCE ECPublicKey.
","1351","<java><openssh><jce><elliptic-curve><ecdsa>","1","0","2","2017-07-06 14:39:45","44907432","2","","723506","","2017-06-29 15:32:28","2017-06-28 16:34:46",""
"44808132","Using openssh public key (ecdsa-sha2-nistp256) with Java Security","Is there a Java library/example to read an openssh format ecdsa public key to a JCE PublicKey in Java? I want to use EC for JWT .
The format I'm trying to read is as per authorized_keys, or Github API (e.g. https://api.github.com/users/davidcarboni/keys):  ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBK8hPtB72/sfYgNw1WTska2DNOJFx+QhUxuV6OLINSD2ty+6gxcM8yZrvMqWdMePGRb2cGh8L/0bGOk+64IQ/pM=
I've found this answer, which is fine for RSA and DSS:
Using public key from authorized_keys with Java security, and this discussion of the openssh format for ECDSA: https://security.stackexchange.com/questions/129910/ecdsa-why-do-ssh-keygen-and-java-generated-public-keys-have-different-sizes 
However I'm getting lost trying to adapt the RSS/DSA code for ECDSA - I'm not sure how to set up an ECPublicKeySpec. It needs ECPoint, EllipticCurve, ECParameterSpec, ECField. The openssh format only contains two integers, which makes sense for ECPoint, but I don't know how to set up the rest.
I've been poking around a bunch of libraries, including jsch, sshj, ssh-tools and good old Bouncycastle. The closest I have is:
com.jcraft.jsch.KeyPair load = com.jcraft.jsch.KeyPair.load(jsch, null, bytes[openSshKey]);
Which loads the key fine, but doesn't get me to a JCE PublicKey - just a byte[] getPublicKeyBlob() method.
Am I missing something obvious?
","For completeness, here's the code I've gone with. It's nearly-pure JCE, with a sprinkling of Bouncycastle inside helper methods (this updates the example code in Using public key from authorized_keys with Java security):
...
        } else if (type.startsWith(""ecdsa-sha2-"") &&
                (type.endsWith(""nistp256"") || type.endsWith(""nistp384"") || type.endsWith(""nistp521""))) {
            // Based on RFC 5656, section 3.1 (https://tools.ietf.org/html/rfc5656#section-3.1)
            String identifier = decodeType();
            BigInteger q = decodeBigInt();
            ECPoint ecPoint = getECPoint(q, identifier);
            ECParameterSpec ecParameterSpec = getECParameterSpec(identifier);
            ECPublicKeySpec spec = new ECPublicKeySpec(ecPoint, ecParameterSpec);
            return KeyFactory.getInstance(""EC"").generatePublic(spec);
        } ...

/**
 * Provides a means to get from a parsed Q value to the X and Y point values.
 * that can be used to create and ECPoint compatible with ECPublicKeySpec.
 *
 * @param q          According to RFC 5656:
 *                   ""Q is the public key encoded from an elliptic curve point into an octet string""
 * @param identifier According to RFC 5656:
 *                   ""The string [identifier] is the identifier of the elliptic curve domain parameters.""
 * @return An ECPoint suitable for creating a JCE ECPublicKeySpec.
 */
ECPoint getECPoint(BigInteger q, String identifier) {
    String name = identifier.replace(""nist"", ""sec"") + ""r1"";
    ECNamedCurveParameterSpec ecSpec = ECNamedCurveTable.getParameterSpec(name);
    org.bouncycastle.math.ec.ECPoint point = ecSpec.getCurve().decodePoint(q.toByteArray());
    BigInteger x = point.getAffineXCoord().toBigInteger();
    BigInteger y = point.getAffineYCoord().toBigInteger();
    System.out.println(""BC x = "" + x);
    System.out.println(""BC y = "" + y);
    return new ECPoint(x, y);
}

/**
 * Gets the curve parameters for the given key type identifier.
 *
 * @param identifier According to RFC 5656:
 *                   ""The string [identifier] is the identifier of the elliptic curve domain parameters.""
 * @return An ECParameterSpec suitable for creating a JCE ECPublicKeySpec.
 */
ECParameterSpec getECParameterSpec(String identifier) {
    try {
        // http://www.bouncycastle.org/wiki/pages/viewpage.action?pageId=362269#SupportedCurves(ECDSAandECGOST)-NIST(aliasesforSECcurves)
        String name = identifier.replace(""nist"", ""sec"") + ""r1"";
        AlgorithmParameters parameters = AlgorithmParameters.getInstance(""EC"");
        parameters.init(new ECGenParameterSpec(name));
        return parameters.getParameterSpec(ECParameterSpec.class);
    } catch (InvalidParameterSpecException | NoSuchAlgorithmException e) {
        throw new IllegalArgumentException(""Unable to get parameter spec for identifier "" + identifier, e);
    }
}

","1351","<java><openssh><jce><elliptic-curve><ecdsa>","1","1","2","2017-07-06 14:39:45","44907432","2","","723506","","2017-06-29 15:32:28","2017-06-28 16:34:46",""
"25907802","Use X509Certificate2 to sign and validate ECDSA-SHA256 signatures","I used OpenSSL to create ECC certificates using SHA256. Now I want to use these certificates to sign data and to validate existing signatures.
I tried using the DSACryptoServiceProvider, but it only supports SHA1 or MD5. 
But it seems that ECDsaCng is able to support ECDSA-with-SHA256. The only problem that I have is that I don't know how to convert the Private and Public Key from my X509Certificate2 into the necessary CngKey. I read another question where someone described how to convert the Public Key. But in order to be able to sign data, I need the Private Key, too. 
So is there a way to get the CngKey of the Private and Public Key out of the X509Certificate2? The certificates are available in different formats. I have them as PFX file and separately as CER and PEM files. 
I would prefer to stick with the .NET Framework 4, but if it's not possible at all to use it, I would also switch to Bouncy Castle. 
","Support for this was added in .NET 4.6.1:
private static byte[] SignWithCert(X509Certificate2 cert, byte[] data)
{
    using (ECDsa ecdsa = cert.GetECDsaPrivateKey())
    {
        if (ecdsa == null)
            throw new ArgumentException(""Cert must have an ECDSA private key"", nameof(cert));

        return ecdsa.SignData(data, HashAlgorithmName.SHA256);
    }
}

private static bool VerifyWithCert(X509Certificate2 cert, byte[] data, byte[] signature)
{
    using (ECDsa ecdsa = cert.GetECDsaPublicKey())
    {
        if (ecdsa == null)
            throw new ArgumentException(""Cert must be an ECDSA cert"", nameof(cert));

        return ecdsa.VerifyData(data, signature, HashAlgorithmName.SHA256);
    }
}

","1345","<c#><ssl><sha256><x509certificate2><ecdsa>","4","4","1","2016-09-23 13:28:14","","0","2","","","","2014-09-18 08:31:04",""
"26325709","Generating ECDSA SSL wildcard certificate","I'm struggling with generating ECDSA SSL wildcard certificate signed with my own CA.
I'm using these commands:
# Generates CA private key
openssl ecparam -name secp521r1 -genkey -param_enc explicit -out server-ca.key

# Generates CA certificate
openssl req -x509 -sha256 -new -nodes -key server-ca.key -days 3650 -out server-ca.crt

# Generates private key
openssl ecparam -name secp521r1 -genkey -param_enc explicit -out server.key

# Generates certificate signing request
openssl req -new -key server.key -out server.csr -config server.conf -reqexts req_ext

# Generates certificate signed with my CA
openssl x509 -req -sha256 -days 3650 -in server.csr -CA server-ca.crt -CAkey server-ca.key -CAcreateserial -out server.crt -extfile server.conf -extensions req_ext

With this request configuration (server.conf):
[req]
req_extensions = req_ext
distinguished_name = req_dn
default_md = sha256

[req_ext]
keyUsage = keyEncipherment, dataEncipherment
extendedKeyUsage = serverAuth
subjectAltName = @alt_names

[req_dn]
CN=domain.my

[alt_names]
DNS.1 = domain.my
DNS.2 = *.domain.my

When I configure Apache or nginx with generated server-ca.crt, server.key and server.crt then I'm unable to connect using HTTPS.
This is output of openssl when I try to connect:
CONNECTED(00000003)
140500060243600:error:14077410:SSL routines:SSL23_GET_SERVER_HELLO:sslv3 alert handshake failure:s23_clnt.c:762:
---
no peer certificate available
---
No client certificate CA names sent
---
SSL handshake has read 7 bytes and written 308 bytes
---
New, (NONE), Cipher is (NONE)
Secure Renegotiation IS NOT supported
Compression: NONE
Expansion: NONE
---

No matter which curve I'm using, I'm always unable to connect. However, when I use RSA keys instead of ECDSA, everything works.
This is my nginx configuration:
ssl_certificate         server.crt;
ssl_certificate_key     server.key;
ssl_trusted_certificate server-ca.crt;
ssl_session_cache    shared:SSL:1m;
ssl_session_timeout  5m;
ssl_protocols TLSv1.2;
ssl_prefer_server_ciphers  on;
ssl_ciphers ""EECDH+ECDSA+AESGCM EECDH+aRSA+AESGCM EECDH+ECDSA+SHA384 EECDH+ECDSA+SHA256 EECDH+aRSA+SHA384 EECDH+aRSA+SHA256 EECDH+aRSA+RC4 EECDH EDH+aRSA RC4 !aNULL !eNULL !LOW !3DES !MD5 !EXP !PSK !SRP !DSS"";

What am I doing wrong ?
","
openssl ecparam -name secp521r1 -genkey -param_enc explicit -out server-ca.key

You must create your key pair without ""-param_enc explicit"".
Don't ask me why ;)
","1312","<ssl><nginx><certificate><wildcard><ecdsa>","2","1","1","2014-10-22 13:07:48","","0","","","","","2014-10-12 13:37:56",""
"36433799","PHP: openssl_verify not working with ECDSA keys","I need some help with the following ""pseudo"" code:
<?php

$stringToVerify = '50.009781OK101092014125505';
$ECDSA =     '3045022100b4b4064158cb12f5b3d902e1e4487e0c6dfafd96b5bb5ab9765fc088e054d67e0220153    f9bb5da20441c68ff0c3e8ba28cfe048e5c3152fc8c890def156cf09d5540';
$publicKey = ""-----BEGIN PUBLIC KEY-----
MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEaq6djyzkpHdX7kt8DsSt6IuSoXjp
WVlLfnZPoLaGKc/2BSfYQuFIO2hfgueQINJN3ZdujYXfUJ7Who+XkcJqHQ==
-----END PUBLIC KEY-----"";

var_dump(openssl_verify($stringToVerify, pack(""H*"", $ECDSA), $publicKey,     OPENSSL_ALGO_SHA256));
var_dump(openssl_error_string());

openssl_verify() will always return non-TRUE value and the openssl_error_string() will return error message: 'error:0906D06C:PEM routines:PEM_read_bio:no start line'
Where might be a problem? Why openssl_verify() won't return TRUE?
OpenSSL version is 1.0.1r  28 Jan 2016
","The error:0906D06C:PEM routines:PEM_read_bio:no start line is non-fatal.  That means it didn't find a certificate along with the private key which is okay since there is only a public/private key in this case.
openssl_verify() returns -1 on failure, 1 if the signature is correct and 0 if it is incorrect.  Because of this you should be checking for all 3 values, not just true or false.
You should check the return value of openssl_verify for -1 indicating failure.  If it returns 0, then the key is valid but either the signature is invalid, the data was tampered with, or the wrong public key was used for verification.
Here's a fully illustrated example:
<?php

$stringToSign = ""hey this is some data I want to sign to confirm I said it and no one else..."";
$privateKey =
""-----BEGIN RSA PRIVATE KEY-----
MIIEpQIBAAKCAQEA0PWnPjB5x8Xs+uV0GRCGGE8xlLU67sx6CDdAU7FBsBe8X7pt
065MAUwrtRQvIhyKhd9wRg8LvgWm7vYnYi5tkdodOhRyVw+jd7Id9CsQwUNNG+JZ
vrEmHKCTXvWbv/fmL5DTCkRxoJj3KdNqUYA6M+JcGahgpGnsRmvWQ2mz4IZZi5ur
vjSPPdrBSWgts5uIv5tNfEwuEzbJtIENn0tysoksIiG/n8edBbxlTqCo8OJVfy1n
h21TdBEHsi9V0NyEtqAFKdHaZscA3yj9k2mWuqSg1c0VnGJ/+OmOvgLkDlz3f7vH
t7ULJxV/iyNdugh5XUD1YKRwhMqBqfTNlKyFvwIDAQABAoIBABEsPyRjQ37hi0pL
VTFCJGMXDxITmtZJQ7YtJEI8jRN1v+t2HNSKvIBWzDjDgeQhyFicNlPrpKFnQYLe
A/qTqjmUXVaKm6MADAUoREHu0B+x8kJaZdnAIUu0/qeNM9GhA+/gzRdI7LWwHI/5
agFsslvVPJB3QAoDEoHvFtrPcxL+kY+wZu8RUYG6TCX/QxD45iZhQkWFH6I6tXh+
5wO1Dt0sx1iQJYkaI9/iHGkKS04hnNCQKPSdBLx0p+w87W9aF3+hoafRGMLsHL8S
mzQTFTHryYdrczjFhFypPhgCm+gdm8OlhjpuRHdmEV6jm40snnPyq9w9gm1Etge9
v0otEjECgYEA7z8WOw0NGb+UHx8F+YKyaaVigkN/Pal0tBbBG/XIF2hubbldr3Z8
/XCfmY8sIdQvxOusSfD1aFCxS34t8V6kAerQKZ6p4+W4xb7+dF9/qfCqJXzQttug
M8EujgAdqlS+G/3FKzHBWmfTDlymLsldH2dC2I6U+Jo5kAzPyS5SxLsCgYEA35ef
E79OaCKNFGpK9VgsLnEKd9DtZS3abzOkx5242VRjWIjrsvEgLfuvLSGGYgSaeCMY
edsCQ3mfmS2Yjiov0eZ4b2PcK+16ndaGQceHwuoP/eeH/BGe+eLcDF/xBFx7yRnn
sVgDhePthBCwOOJm7M26cCVdMmO3GMHxopXdNM0CgYEAlfQvxeFfRbU7bOov/3y4
wNjlTopp1UdCG6JrdU/vEyTkmidmHhUhMGUH0+LWIXnyWvXwbgP2fWSeS5gRycis
+Xqo8H0/NNWGo4Mbz+sPhH+Q1aBO3V35IpdBy8Us0tb8tWSw0WsFKtoKgmT10Dtr
/8PkNQHhQ5S+4Zf2IL3FKQMCgYEAy4A0SMTVl/HadbpIfwTBMYOxA1wktPIG3S8j
yorCswsbYHk+DJ9pqnBn/6uDo7KM5MsMe9vZM5B+sevN7ZZ375LUCo3Y1iJOd1nI
2BXCeqSN6YnROprPFqBjpt+rfUyvXVk2hzKUAkhw5MJLoXpuMxkLlwZqzHH1M5NR
WakMrAECgYEA4Ij7J3591daJbS5+pFK7MujrSg6TTi2etyyXcNO6xIkEbiX69MIU
DZh9GfAVkh6k/WaA2MuThI39TZJiF0nBU+irQttK6LeVhZ2MK+dEJh7rTy1b7zv1
WXLfkc1viK7cnC2ROOChmRm64GURupdf7ACsR2r+vbTSEoevWKfXwIk=
-----END RSA PRIVATE KEY-----"";

$publicKey =
""-----BEGIN PUBLIC KEY-----
MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA0PWnPjB5x8Xs+uV0GRCG
GE8xlLU67sx6CDdAU7FBsBe8X7pt065MAUwrtRQvIhyKhd9wRg8LvgWm7vYnYi5t
kdodOhRyVw+jd7Id9CsQwUNNG+JZvrEmHKCTXvWbv/fmL5DTCkRxoJj3KdNqUYA6
M+JcGahgpGnsRmvWQ2mz4IZZi5urvjSPPdrBSWgts5uIv5tNfEwuEzbJtIENn0ty
soksIiG/n8edBbxlTqCo8OJVfy1nh21TdBEHsi9V0NyEtqAFKdHaZscA3yj9k2mW
uqSg1c0VnGJ/+OmOvgLkDlz3f7vHt7ULJxV/iyNdugh5XUD1YKRwhMqBqfTNlKyF
vwIDAQAB
-----END PUBLIC KEY-----"";

$signature = null;
$alg       = OPENSSL_ALGO_SHA256;

if (openssl_sign($stringToSign, $signature, $privateKey, $alg)) {
    echo ""Successfully signed data.\n"";

    $signature = base64_encode($signature); // as might be done in transport

    // verify which should succeed
    $success = openssl_verify($stringToSign, base64_decode($signature), $publicKey, $alg);

    if ($success === -1) {
        echo ""openssl_verify() failed with error.  "" . openssl_error_string() . ""\n"";
    } elseif ($success === 1) {
        echo ""Signature verification was successful!\n"";
    } else {
        echo ""Signature verification failed.  Incorrect key or data has been tampered with\n"";
    }

    // verify which should fail because data has been tampered with
    $stringToSign .= ""\nI am evil and demand you wire $1,000,000,000 to me."";

    $success = openssl_verify($stringToSign, base64_decode($signature), $publicKey, $alg);

    if ($success === -1) {
        echo ""openssl_verify() failed with error.  "" . openssl_error_string() . ""\n"";
    } elseif ($success === 1) {
        echo ""Signature verification was successful!\n"";
    } else {
        echo ""Signature verification failed.  Incorrect key or data has been tampered with!\n"";
    }
} else {
    echo ""openssl_sign() failed.  "" . openssl_error_string() . ""\n"";
}

","1272","<php><openssl><sha256><ecdsa>","0","0","1","2016-04-05 18:56:38","36434803","0","","6039389","","2016-04-05 18:11:02","2016-04-05 18:04:35",""
"27315687","Creation of ECDSA public key given curve and public point?","I am struggling with the creation of a ECDSA public key from a string representation of a public key i.e 
string     devicePublicKey(""86FB5EB3CA0507226BE7197058B9EC041D3A3758D9D9C91902ACA3391F4E58AEF13AFF63CC4EF68942B9B94904DC1B890EDBEABD16B992110624968E894E560E"");

previously I found that I had to prefix this key with '04' so not sure if this is require this time?
I am trying to generate it to use in verifying a signature
string ecs04b2ExpSignature(""0199E984CEC75DDCA7F1DDF6E53E2E67352A2BE38A4B66F8ED596606FAB983FF300CAA76DE88CED9D563A5C03E8F3A7C000780F3F2061C611E9AA0B18B460D77"");

where the data to be signed is
string      ecs04b2SigningData(""020000000000000001FFFFFFFFFFFFFFFE123456789ABCDEF000B3DA2000000100000300000003030003000300"");

My rough code for now looks like this
SecByteBlock message(convertHexStrToSecByteBlock(messageIn));
SecByteBlock signature(convertHexStrToSecByteBlock(signatureIn));

ECDSA<ECP, SHA256>::PublicKey publicKey;
string inPublicKey(""04"");
inPublicKey.append(pubKeyIn);
SecByteBlock pubKey = encryptBase::convertHexStrToSecByteBlock(inPublicKey);



ECP::Point p;
publicKey.AccessGroupParameters().Initialize(CryptoPP::ASN1::secp256r1());
publicKey.GetGroupParameters().GetCurve().DecodePoint(p, pubKey, publicKey.GetGroupParameters().GetCurve().EncodedPointSize(true));
publicKey.SetPublicElement(p);

//ByteQueue qt;
//qt.Put((byte*)exp.c_str(),(size_t)exp.size());
AutoSeededRandomPool prng;
bool result = publicKey.Validate(prng, 3);
if (result) 
{  
    // Load public key (in ByteQueue, X509 format)
    ECDSA<ECP, SHA256>::Verifier verifier(publicKey);

    bool result = verifier.VerifyMessage(message.data(), messageIn.size(), signature.data(), signature.size());
    if (result)
        cout << ""Verified signature on message"" << endl;
    else
        cerr << ""Failed to verify signature on message"" << endl;
}
else
{
    cout << ""Failed to validate key"" << endl;
}

this is chopped together so wont build. Any help would be great
PS I asked a similar question relating to private keys here Creation of ECDSA private key given curve and private exponent?
","The answer is detailed on the ECDSA wiki page, but its not readily apparent. You need to perform the following to initialize the publicKey given the curve and public point:
string pt = ""2DB45A3F21889438B42C8F464C75292BACF5FDDB5DA0B492501B299CBFE92D8F""
            ""DB90FC8FF4026129838B1BCAD1402CAE47FE7D8084E409A41AFCE16D63579C5F"";

HexDecoder decoder;
decoder.Put((byte*)pt.data(), pt.size());
decoder.MessageEnd();

ECP::Point q;
size_t len = decoder.MaxRetrievable();
// len should be GetField().MaxElementByteLength()

q.identity = false;
q.x.Decode(decoder, len/2);
q.y.Decode(decoder, len/2);

ECDSA<ECP, SHA256>::PublicKey publicKey;
publicKey.Initialize(ASN1::secp256r1(), q);

bool result = publicKey.Validate( prng, 3 );
if( result )
{
    cout << ""Validated public key"" << endl;
}
else
{
    cerr << ""Failed to validate public key"" << endl;
    exit(1);
}

const ECP::Point& qq = publicKey.GetPublicElement();
cout << ""Q.x: "" << std::hex << qq.x << endl;
cout << ""Q.y: "" << std::hex << qq.y << endl;

The program above produces the following results.
$ ./cryptopp-test.exe
Validated public key
Q.x: 2db45a3f21889438b42c8f464c75292bacf5fddb5da0b492501b299cbfe92d8fh
Q.y: db90fc8ff4026129838b1bcad1402cae47fe7d8084e409a41afce16d63579c5fh


You can't use GetField().MaxElementByteLength() because the only thing available are the x and y coordinates. Things like field size won't be available until you initialize the underlying DL_GroupParameters_EC< EC > in the public key.
As an example, the following causes a segmentation fault:
ECDSA<ECP, SHA256>::PublicKey publicKey;
unsigned int u = publicKey.GetGroupParameters().GetCurve().GetField().MaxElementByteLength();
cout << ""Field element length: "" << u << endl;


You can tamper with the public key to ensure a validation failure with:
q.y.Decode(decoder, len/2);
q.y++;

","1230","<c++><hex><crypto++><ecdsa>","2","2","2","2019-10-22 18:21:14","27339240","0","1","-1","","2017-05-23 12:05:55","2014-12-05 12:15:11",""
"27315687","Creation of ECDSA public key given curve and public point?","I am struggling with the creation of a ECDSA public key from a string representation of a public key i.e 
string     devicePublicKey(""86FB5EB3CA0507226BE7197058B9EC041D3A3758D9D9C91902ACA3391F4E58AEF13AFF63CC4EF68942B9B94904DC1B890EDBEABD16B992110624968E894E560E"");

previously I found that I had to prefix this key with '04' so not sure if this is require this time?
I am trying to generate it to use in verifying a signature
string ecs04b2ExpSignature(""0199E984CEC75DDCA7F1DDF6E53E2E67352A2BE38A4B66F8ED596606FAB983FF300CAA76DE88CED9D563A5C03E8F3A7C000780F3F2061C611E9AA0B18B460D77"");

where the data to be signed is
string      ecs04b2SigningData(""020000000000000001FFFFFFFFFFFFFFFE123456789ABCDEF000B3DA2000000100000300000003030003000300"");

My rough code for now looks like this
SecByteBlock message(convertHexStrToSecByteBlock(messageIn));
SecByteBlock signature(convertHexStrToSecByteBlock(signatureIn));

ECDSA<ECP, SHA256>::PublicKey publicKey;
string inPublicKey(""04"");
inPublicKey.append(pubKeyIn);
SecByteBlock pubKey = encryptBase::convertHexStrToSecByteBlock(inPublicKey);



ECP::Point p;
publicKey.AccessGroupParameters().Initialize(CryptoPP::ASN1::secp256r1());
publicKey.GetGroupParameters().GetCurve().DecodePoint(p, pubKey, publicKey.GetGroupParameters().GetCurve().EncodedPointSize(true));
publicKey.SetPublicElement(p);

//ByteQueue qt;
//qt.Put((byte*)exp.c_str(),(size_t)exp.size());
AutoSeededRandomPool prng;
bool result = publicKey.Validate(prng, 3);
if (result) 
{  
    // Load public key (in ByteQueue, X509 format)
    ECDSA<ECP, SHA256>::Verifier verifier(publicKey);

    bool result = verifier.VerifyMessage(message.data(), messageIn.size(), signature.data(), signature.size());
    if (result)
        cout << ""Verified signature on message"" << endl;
    else
        cerr << ""Failed to verify signature on message"" << endl;
}
else
{
    cout << ""Failed to validate key"" << endl;
}

this is chopped together so wont build. Any help would be great
PS I asked a similar question relating to private keys here Creation of ECDSA private key given curve and private exponent?
","Here's the answer to your second question on how to use VerifyMessage:
...
publicKey.Initialize(ASN1::secp256r1(), q);

string msg = ""020000000000000001FFFFFFFFFFFFFFFE123456789ABCDEF000B3DA2000000100000300000003030003000300"";
string sig = ""0199E984CEC75DDCA7F1DDF6E53E2E67352A2BE38A4B66F8ED596606FAB983FF300CAA76DE88CED9D563A5C03E8F3A7C000780F3F2061C611E9AA0B18B460D77"";

string mm, ss;

decoder.Detach(new StringSink(mm));
decoder.Put((byte*)msg.data(), msg.size());
decoder.MessageEnd();

decoder.Detach(new StringSink(ss));
decoder.Put((byte*)sig.data(), sig.size());
decoder.MessageEnd();

ECDSA<ECP, SHA256>::Verifier verifier(publicKey);
result = verifier.VerifyMessage((byte*)mm.data(), mm.size(), (byte*)ss.data(), ss.size());

if( result )
{
    cout << ""Verified message"" << endl;
}
else
{ 
    cerr << ""Failed to verify message"" << endl;
    exit(1);
}

Calling Detach on the HexDecoder deletes the current filter, and replaces it with the new filter. In the code above, its the StringSink. You have to do it to ensure memory is not leaked.
Your message does not verify under the public key:
$ ./cryptopp-test.exe
Validated public key
Failed to verify message

You can also try to verify the ASCII message rather than the binary message, but it fails to verify too:
decoder.Attach(new StringSink(mm));
decoder.Put((byte*)msg.data(), msg.size());
decoder.MessageEnd();

// Swap in the ASCII message for the binary message
mm = msg;

So someone gave you the wrong message, the wrong signature or the wrong public key (or some combination).
","1230","<c++><hex><crypto++><ecdsa>","2","0","2","2019-10-22 18:21:14","27339240","0","1","-1","","2017-05-23 12:05:55","2014-12-05 12:15:11",""
"21954512","Parse EC Public Key with pyasn1","How to parse ec public with the use of pyasn1?
    from pyasn1.codec.der import decoder
    import base64
    raw2='''
    MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAE/FU6/Om2m5EnxDwGSVO+YNXorpDtzutLtCAMTZR5
    NIs6pfKx9oyjpS5aURx4BinuW8dr8K7N2oafY1TNvc41oQ==
    '''
    der = decoder.decode(base64.b64decode(raw2))
    print der
    '''
     der:
    (Sequence().setComponentByPosition(0, Sequence().setComponentByPosition(0, ObjectIdentifier(1.2.840.10045.2.1)).setComponentByPosition(1, ObjectIdentifier(1.2.840.10045.3.1.7))).setComponentByPosition(1, BitString
'''

Is it possible, to get something like this with pyasn1.
Edit:
I base myself on this to obtain the following:
class curve(univ.Sequence):

    componentType = namedtype.NamedTypes(
     namedtype.NamedType('public KeyType',univ.ObjectIdentifier()),
     namedtype.NamedType('curveName',univ.ObjectIdentifier())
    )

class EcPublicKey(univ.Sequence):
  componentType = namedtype.NamedTypes(
    namedtype.NamedType('curve', curve()),
    namedtype.NamedType('publicKeyValue', univ.BitString())
    )

pubKey,rest = decoder.decode(base64.b64decode(raw2), asn1Spec = EcPublicKey())

print(pubKey.prettyPrint())
'''
EcPublicKey:
 curve=curve:
  public KeyType=1.2.840.10045.2.1
  curveName=1.2.840.10045.3.1.7

 publicKeyValue=""'0000010011111100010101010011101011111100111010011011011010011011100100010010011111000100001111000000011001001001010100111011111001100000110101011110100010101110100100001110110111001110111010110100101110110100001000000000110001001101100101000111100100110100100010110011101010100101111100101011000111110110100011001010001110100101001011100101101001010001000111000111100000000110001010011110111001011011110001110110101111110000101011101100110111011010100001101001111101100011010101001100110110111101110011100011010110100001'B""

'''

","It seems that pyasn1 doen't provide better formatting, so you will have to implement it yourself by following the pattern from __repr__ method (see AbstractSimpleAsn1Item and AbstractConstructedAsn1Item from http://pyasn1.cvs.sourceforge.net/viewvc/pyasn1/pyasn1/pyasn1/type/base.py?revision=1.35&view=markup)
","1180","<python-2.7><asn.1><ecdsa>","1","0","3","2017-04-20 16:03:08","","0","","581084","","2014-02-25 16:02:54","2014-02-22 12:44:31",""
"21954512","Parse EC Public Key with pyasn1","How to parse ec public with the use of pyasn1?
    from pyasn1.codec.der import decoder
    import base64
    raw2='''
    MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAE/FU6/Om2m5EnxDwGSVO+YNXorpDtzutLtCAMTZR5
    NIs6pfKx9oyjpS5aURx4BinuW8dr8K7N2oafY1TNvc41oQ==
    '''
    der = decoder.decode(base64.b64decode(raw2))
    print der
    '''
     der:
    (Sequence().setComponentByPosition(0, Sequence().setComponentByPosition(0, ObjectIdentifier(1.2.840.10045.2.1)).setComponentByPosition(1, ObjectIdentifier(1.2.840.10045.3.1.7))).setComponentByPosition(1, BitString
'''

Is it possible, to get something like this with pyasn1.
Edit:
I base myself on this to obtain the following:
class curve(univ.Sequence):

    componentType = namedtype.NamedTypes(
     namedtype.NamedType('public KeyType',univ.ObjectIdentifier()),
     namedtype.NamedType('curveName',univ.ObjectIdentifier())
    )

class EcPublicKey(univ.Sequence):
  componentType = namedtype.NamedTypes(
    namedtype.NamedType('curve', curve()),
    namedtype.NamedType('publicKeyValue', univ.BitString())
    )

pubKey,rest = decoder.decode(base64.b64decode(raw2), asn1Spec = EcPublicKey())

print(pubKey.prettyPrint())
'''
EcPublicKey:
 curve=curve:
  public KeyType=1.2.840.10045.2.1
  curveName=1.2.840.10045.3.1.7

 publicKeyValue=""'0000010011111100010101010011101011111100111010011011011010011011100100010010011111000100001111000000011001001001010100111011111001100000110101011110100010101110100100001110110111001110111010110100101110110100001000000000110001001101100101000111100100110100100010110011101010100101111100101011000111110110100011001010001110100101001011100101101001010001000111000111100000000110001010011110111001011011110001110110101111110000101011101100110111011010100001101001111101100011010101001100110110111101110011100011010110100001'B""

'''

","repr() gives you Python code which would produce the same object(s) once evaluated. For a  human-oriented representation use .prettyPrint() method (of any pyasn1 object):
publicKey, restOfInput = decoder.decode(base64.b64decode(raw2))
print publicKey.prettyPrint()

Sequence:
 <no-name>=Sequence:
 <no-name>=1.2.840.10045.2.1
 <no-name>=1.2.840.10045.3.1.7
<no-name>=""'0000010011111100010101010011101011111100111010011011011010011011100100010010011111000100001111000000011001001001010100111011111001100000110101011110100010101110100100001110110111001110111010110100101110110100001000000000110001001101100101000111100100110100100010110011101010100101111100101011000111110110100011001010001110100101001011100101101001010001000111000111100000000110001010011110111001011011110001110110101111110000101011101100110111011010100001101001111101100011010101001100110110111101110011100011010110100001'B""
","1180","<python-2.7><asn.1><ecdsa>","1","2","3","2017-04-20 16:03:08","","0","","581084","","2014-02-25 16:02:54","2014-02-22 12:44:31",""
"21954512","Parse EC Public Key with pyasn1","How to parse ec public with the use of pyasn1?
    from pyasn1.codec.der import decoder
    import base64
    raw2='''
    MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAE/FU6/Om2m5EnxDwGSVO+YNXorpDtzutLtCAMTZR5
    NIs6pfKx9oyjpS5aURx4BinuW8dr8K7N2oafY1TNvc41oQ==
    '''
    der = decoder.decode(base64.b64decode(raw2))
    print der
    '''
     der:
    (Sequence().setComponentByPosition(0, Sequence().setComponentByPosition(0, ObjectIdentifier(1.2.840.10045.2.1)).setComponentByPosition(1, ObjectIdentifier(1.2.840.10045.3.1.7))).setComponentByPosition(1, BitString
'''

Is it possible, to get something like this with pyasn1.
Edit:
I base myself on this to obtain the following:
class curve(univ.Sequence):

    componentType = namedtype.NamedTypes(
     namedtype.NamedType('public KeyType',univ.ObjectIdentifier()),
     namedtype.NamedType('curveName',univ.ObjectIdentifier())
    )

class EcPublicKey(univ.Sequence):
  componentType = namedtype.NamedTypes(
    namedtype.NamedType('curve', curve()),
    namedtype.NamedType('publicKeyValue', univ.BitString())
    )

pubKey,rest = decoder.decode(base64.b64decode(raw2), asn1Spec = EcPublicKey())

print(pubKey.prettyPrint())
'''
EcPublicKey:
 curve=curve:
  public KeyType=1.2.840.10045.2.1
  curveName=1.2.840.10045.3.1.7

 publicKeyValue=""'0000010011111100010101010011101011111100111010011011011010011011100100010010011111000100001111000000011001001001010100111011111001100000110101011110100010101110100100001110110111001110111010110100101110110100001000000000110001001101100101000111100100110100100010110011101010100101111100101011000111110110100011001010001110100101001011100101101001010001000111000111100000000110001010011110111001011011110001110110101111110000101011101100110111011010100001101001111101100011010101001100110110111101110011100011010110100001'B""

'''

","If you want to have access to the value of the public key itself, you can use the pycryptodome library. Just format your data in the file public.pem:
-----BEGIN PUBLIC KEY-----
MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAE/FU6/Om2m5EnxDwGSVO+YNXorpDtzutLtCAMTZR5
NIs6pfKx9oyjpS5aURx4BinuW8dr8K7N2oafY1TNvc41oQ==
-----END PUBLIC KEY-----

And then in Python:
from Crypto.PublicKey import ECC
print(ECC.import_key(open('public.pem').read()))

EccKey(curve='P-256', x=114133426963296850915436792023241197556938624347236768937730916445384676553867, y=26527350004009046719864726291814153938182054558131723928772218772465776473505)
","1180","<python-2.7><asn.1><ecdsa>","1","0","3","2017-04-20 16:03:08","","0","","581084","","2014-02-25 16:02:54","2014-02-22 12:44:31",""
"35899969","how to use ECDSA to create a self signed digital certificate programatically","I am trying to create a digital certificate which to be self signed with EC keys instead of those from RSA and followed these SO link1 and link2. I replaced the signature algorithm from RSA given in link1 to EC as 
EC_KEY *ecc = NULL;
int eccgrp = OBJ_txt2nid(""secp256k1"");
ecc = EC_KEY_new_by_curve_name(eccgrp);
EC_KEY_set_asn1_flag(ecc, OPENSSL_EC_NAMED_CURVE);

if(!(EC_KEY_generate_key(ecc))) {
    BIO_printf(out, ""Error in generating key"");
    printf(""Error 1\n"");
}

if(!EVP_PKEY_assign_EC_KEY(pk, ecc)) {
    BIO_printf(out, ""Error assigning EC_KEY to EVP_PKEY"");
    printf(""Error 2\n"");
}
.
.
X509_set_pubkey(x,pk);
.
.
if (!X509_sign(x,pk,EVP_md5()))
    goto err;
.
.

Rest of the code is same as given in link1. No error is printed but i get a seg-fault when i try to print the x509 cert X509_print_fp(stdout,x509);. What is correct way of doing this?
","You changed that code more than you said because it doesn't have variables 'pk' or 'x'.
Anytime you get an error/failure return from a libcrypto routine you should always look at the error queue; see https://www.openssl.org/docs/faq.html#PROG6 and https://www.openssl.org/docs/faq.html#PROG7 . (For libssl routines you should do so depending on the return from SSL_get_error.) If you do so as in my code below for the 'bad' case, you see X509_sign fails with
140018941793960:error:100C508A:elliptic curve routines:PKEY_EC_CTRL:invalid digest type:ec_pmeth.c:388:

because standard ECDSA signature schemes don't include MD5. You must use SHA1 or SHA2, and you should use a hash matched in strength to the ECC key, which in this case is SHA256. Since the signature failed, the x509 structure does not contain valid data and can't be successfully printed. 
Also note: since 1.0.0 (in 2010) PEM_write_PrivateKey with enc nonnull uses 'new' (ca. 2000!) PKCS#8/PBES2 format, which needs a suitable variant of OpenSSL_add_all_algorithms.
Complete working demo-quality code:
/* SO #35899969 */
#include <stdio.h>
#include <stdlib.h>
#include <openssl/err.h>
#include <openssl/evp.h>
#include <openssl/pem.h>
#include <openssl/x509.h>
#ifdef _WIN32
#include <openssl/applink.c>
#endif

/* minimal error handling for demo; real code do better */
void err (const char *label)
{
  fprintf (stderr, ""Error in %s:\n"", label);
  ERR_print_errors_fp (stderr);
  exit (1);
}

int main (int argc, char**argv)
{
  int bad = argc>1;
  ERR_load_crypto_strings(); /* or SSL_load_error_strings */
  OPENSSL_add_all_algorithms_noconf(); /* for PKCS8 w PBES2 */

  EVP_PKEY * pkey = EVP_PKEY_new();
  EC_KEY *ecc = EC_KEY_new_by_curve_name(NID_secp256k1);
  /* simpler than going through OBJ_txt2nid */
  if(!ecc) err(""ECCnewbyname"");
  EC_KEY_set_asn1_flag(ecc, OPENSSL_EC_NAMED_CURVE);
  if(!(EC_KEY_generate_key(ecc))) err(""ECCgen"");
  if(!EVP_PKEY_assign_EC_KEY(pkey, ecc)) err(""PKEYassign"");

  X509 * x509 = X509_new();
  /* REALLY shouldn't use fixed serial if DN isn't unique */
  ASN1_INTEGER_set(X509_get_serialNumber(x509), 1);
  X509_gmtime_adj(X509_get_notBefore(x509), 0);
  X509_gmtime_adj(X509_get_notAfter(x509), 365L*86400);
  X509_set_pubkey(x509, pkey);
  X509_NAME * name = X509_get_subject_name(x509);
  X509_NAME_add_entry_by_txt(name, ""C"",  MBSTRING_ASC,
                           (unsigned char *)""CA"", -1, -1, 0);
  X509_NAME_add_entry_by_txt(name, ""O"",  MBSTRING_ASC,
                           (unsigned char *)""MyCompany Inc."", -1, -1, 0);
  X509_NAME_add_entry_by_txt(name, ""CN"", MBSTRING_ASC,
                           (unsigned char *)""localhost"", -1, -1, 0);
  X509_set_issuer_name(x509, name);
  if(!X509_sign(x509, pkey, bad? EVP_md5(): EVP_sha256())) err(""X509sign"");

  /* simplified */
  if(!PEM_write_PrivateKey(stdout, pkey, EVP_des_ede3_cbc(),
                          NULL,0,NULL,""passphrase"")) 
    err(""writeKey"");
  if(!PEM_write_X509(stdout, x509))
    err(""writeCert"");
  /* added */
  X509_print_fp (stdout, x509); 
  return 0;
}

","1175","<openssl><digital-signature><pki><ecdsa>","0","2","1","2016-03-09 23:53:48","35905028","0","1","-1","","2017-05-23 12:31:11","2016-03-09 18:41:56",""
"30237021","Elliptic curve brute forcing","I have all parameter of elliptic curve. And the coordinate of points Q and P. I want to solve Q=k*P (where k is the unknown) by testing all possible k.
So i used this class
then:
a=-1
b=0
p=134747661567386867366256408824228742802669457
curve = EllipticCurve(a,b,p)
P=[18185174461194872234733581786593019886770620,74952280828346465277451545812645059041440154]
Q=[76468233972358960368422190121977870066985660, 33884872380845276447083435959215308764231090]
for i in range(2902021510595963727029):
    result = curve.multPoint(i,P)
    if result[0]==Q[0] and result[1]==Q[1]:
        print (i)
        break

Is this the right approach to solve this problem?
","This is not a good approach because you are trying to do 2902021510595963727029 operations.  Even if you managed to do a billion operations per second, it would take 92 thousand years to finish.
You are basically trying to break the security of ECDSA.  If you figure out a way to do this, then it would be possible to figure out an ECDSA private key given the corresponding public key.  It would be a breakthrough in cryptography and you would be famous.  There are many smart people that have thought about this problem before you and failed to find a solution.
The problem you are trying to solve is called the discrete logarithm problem.
","1139","<python><brute-force><elliptic-curve><ecdsa>","1","2","2","2015-05-18 20:16:10","30312076","1","","4237058","","2015-05-14 12:35:25","2015-05-14 12:07:34",""
"30237021","Elliptic curve brute forcing","I have all parameter of elliptic curve. And the coordinate of points Q and P. I want to solve Q=k*P (where k is the unknown) by testing all possible k.
So i used this class
then:
a=-1
b=0
p=134747661567386867366256408824228742802669457
curve = EllipticCurve(a,b,p)
P=[18185174461194872234733581786593019886770620,74952280828346465277451545812645059041440154]
Q=[76468233972358960368422190121977870066985660, 33884872380845276447083435959215308764231090]
for i in range(2902021510595963727029):
    result = curve.multPoint(i,P)
    if result[0]==Q[0] and result[1]==Q[1]:
        print (i)
        break

Is this the right approach to solve this problem?
","The curve is vulnerable to both the MOV attack and the older FR attack that works similarly, So we can use Weil or Tate pairings (respectively).
q = 134747661567386867366256408824228742802669457
Zq = Zmod(q)
E = EllipticCurve(Zq, [0,0,0,-1,0])
P = E(18185174461194872234733581786593019886770620, 74952280828346465277451545812645059041440154)
Q = E(76468233972358960368422190121977870066985660, 33884872380845276447083435959215308764231090)
n = P.order()
k = GF(n)(q).multiplicative_order()
R = E.random_element()
w1 = P.tate_pairing(R, n, k)
w2 = Q.tate_pairing(R, n, k)
print w1, w2

with w2=w1^k we need to solve a discrete logarithm problem in a ring of integer mod p. It can take quite a while but is still feasible given the small modulus.
PS: This is eltrai answer.
","1139","<python><brute-force><elliptic-curve><ecdsa>","1","0","2","2015-05-18 20:16:10","30312076","1","","4237058","","2015-05-14 12:35:25","2015-05-14 12:07:34",""
"40552688","Generating a ECDSA Private key in bouncy castle returns a PUBLIC key","I am attempting to use bouncy castle to generate ECDSA keys. The code seems to work fine from the Java perspective; but, when I dump the file and try to validate the data, OpenSSL does not like the format of the data.
After some research, I figured that bouncy castle is encoding the private key as public key.
Here is my Java code:
public class Test {
    public static void main(String[] args) {
        Security.addProvider(new BouncyCastleProvider());
        System.out.println(""Starting..."");
        String name = ""prime256v1"";
        try {
            KeyPairGenerator kpg = KeyPairGenerator.getInstance(""ECDSA"", BouncyCastleProvider.PROVIDER_NAME);
            kpg.initialize(new ECGenParameterSpec(name));
            KeyPair keyPair = kpg.generateKeyPair();    
            FileOutputStream writer = new FileOutputStream(""private.key"");
            writer.write(keyPair.getPrivate().getEncoded());
            writer.close();
        } catch(Exception e) {
            e.printStackTrace();
        }
    }
}

The file private.key is generated in valid DER format; however, when I run the following command to see the ASN.1 structure of the key:
$ openssl asn1parse -inform DER -in /my/path/private.key
    0:d=0  hl=3 l= 147 cons: SEQUENCE          
    3:d=1  hl=2 l=   1 prim: INTEGER           :00
    6:d=1  hl=2 l=  19 cons: SEQUENCE          
    8:d=2  hl=2 l=   7 prim: OBJECT            :id-ecPublicKey
   17:d=2  hl=2 l=   8 prim: OBJECT            :prime256v1
   27:d=1  hl=2 l= 121 prim: OCTET STRING      [HEX DUMP]: <hex data>

For comparison, if I run the following commands to generate a ECDSA key using OpenSSL, I get  the following ASN.1 structure:
 $ openssl ecparam -name prime256v1 -genkey -noout -outform DER -out private.key
 $ openssl asn1parse -inform DER -in private.key
     0:d=0  hl=2 l= 119 cons: SEQUENCE          
     2:d=1  hl=2 l=   1 prim: INTEGER           :01
     5:d=1  hl=2 l=  32 prim: OCTET STRING      [HEX DUMP]: <hex data>
    39:d=1  hl=2 l=  10 cons: cont [ 0 ]        
    41:d=2  hl=2 l=   8 prim: OBJECT            :prime256v1
    51:d=1  hl=2 l=  68 cons: cont [ 1 ]        
    53:d=2  hl=2 l=  66 prim: BIT STRING        

So, I guess my questions are

Is there anything I am missing?
Or is this a known bug?
Is there anyway to get around it?

","Java outputs key in the encoded format. You should try:
private String getPrivateKeyAsHex(PrivateKey privateKey) {

    ECPrivateKey ecPrivateKey = (ECPrivateKey) privateKey;
    byte[] privateKeyBytes = new byte[PRIVATE_KEY_LENGTH];
    writeToStream(privateKeyBytes, 0, ecPrivateKey.getS(), PRIVATE_KEY_LENGTH);

    String hex = Hex.toHexString(privateKeyBytes);

    logger.debug(""Private key bytes: "" + Arrays.toString(privateKeyBytes));
    logger.debug(""Private key hex: "" + hex);

    return hex;
}

private String getPublicKeyAsHex(PublicKey publicKey) {

    ECPublicKey ecPublicKey = (ECPublicKey) publicKey;
    ECPoint ecPoint = ecPublicKey.getW();

    byte[] publicKeyBytes = new byte[PUBLIC_KEY_LENGTH];
    writeToStream(publicKeyBytes, 0, ecPoint.getAffineX(), PRIVATE_KEY_LENGTH);
    writeToStream(publicKeyBytes, PRIVATE_KEY_LENGTH, ecPoint.getAffineY(), PRIVATE_KEY_LENGTH);

    String hex = Hex.toHexString(publicKeyBytes);

    logger.debug(""Public key bytes: "" + Arrays.toString(publicKeyBytes));
    logger.debug(""Public key hex: "" + hex);

    return hex;
}

private void writeToStream(byte[] stream, int start, BigInteger value, int size) {
    byte[] data = value.toByteArray();
    int length = Math.min(size, data.length);
    int writeStart = start + size - length;
    int readStart = data.length - length;
    System.arraycopy(data, readStart, stream, writeStart, length);
}

","1138","<java><openssl><bouncycastle><ecdsa>","3","0","1","2016-11-21 08:57:11","","6","1","","","","2016-11-11 16:55:20",""
"33525489","How do I obtain the public key from an ECDSA private key in Java with Bouncy Castle?","I've read How do I obtain the public key from an ECDSA private key in OpenSSL?
and want to do the same thing, but in Java with Bouncy Castle.
I've also seen Bouncy Castle ESCDA Create Public Key from Private Key but it did not help.
","take a look at the following code, it's c# but in java it is similar. the private key is given by as base64 encoded string in this example and also a base64 encoded string is given back. the commented keyParameters are working, so use this one if you want to have key and curve.
private static readonly Org.BouncyCastle.Asn1.X9.X9ECParameters curve = Org.BouncyCastle.Asn1.Sec.SecNamedCurves.GetByName(""secp256r1"");
private static readonly Org.BouncyCastle.Crypto.Parameters.ECDomainParameters domain = new Org.BouncyCastle.Crypto.Parameters.ECDomainParameters(curve.Curve, curve.G, curve.N, curve.H);
public string GetPublicKey(string privKey)
{
      Org.BouncyCastle.Math.BigInteger d = new Org.BouncyCastle.Math.BigInteger(Convert.FromBase64String(privKey));
      //var privKeyParameters = new Org.BouncyCastle.Crypto.Parameters.ECPrivateKeyParameters(d, domain);
      Org.BouncyCastle.Math.EC.ECPoint q = domain.G.Multiply(d);
      //var pubKeyParameters = new Org.BouncyCastle.Crypto.Parameters.ECPublicKeyParameters(q, domain);
      return Convert.ToBase64String(q.GetEncoded());
}

","1135","<java><elliptic-curve><ecdsa>","0","0","1","2016-06-12 09:42:51","","0","1","","","","2015-11-04 15:20:01",""
"42915997","Import ECC key - CngKey.Import() - Parameter is incorrect","Purpose : Generate a ES256 signed JWT using jose-jwt 
Steps:
1.Generate a private key and certificate using openssl:
openssl ecparam -name prime256v1 -genkey > privateKey.pem
openssl req -new -key privateKey.pem -x509 -nodes -days 365 -out public.cer

2.Token generation:
var payload = new Dictionary<string, object>()
{
   { ""sub"", ""mr.x@contoso.com"" },
   { ""exp"", 1300819380   }
};
var certificate = X509Certificate.CreateFromCertFile(""public.cer"");
byte[] publicKey = certificate.GetPublicKey(); //public key has 65 bytes

//Below step is throwing an error:
var cng = CngKey.Import(publicKey, CngKeyBlobFormat.EccPublicBlob);
var token = JWT.Encode(claims, cng, JwsAlgorithm.ES256);

CngKey.Import() is throwing ""The parameter is incorrect"" error while trying to generate a CngKey required for the Jose.JWT.Encode function. Not sure what step I am missing. Thanks.
","The ""ECCPUBLICBLOB"" format isn't the same as the ""public key"" field from the certificate.
The format of the ECCPUBLICBLOB is explained in another question's answer, but here's a quick summary:
UINT32 Magic
UINT32 cbKey
<cbKey bytes of public key>

The value for Magic will depend on which curve and algorithm you're trying to import (some hints at https://referencesource.microsoft.com/#system.core/System/Security/Cryptography/BCryptNative.cs,fde0749a0a5f70d8,references).
cbKey is how many bytes are in the public key.
The public key bytes will be a bit different than what you get from GetPublicKey().  It'll be just the curve X coordinate, which will be (for NIST P-256) bytes 1..33  (the first byte of GetPublicKey() will be 0x04, which says that the payload is uncompressed, then 32 bytes of the X coordinate, then 32 bytes of the Y coordinate).
IEnumerable<byte> blobBytes = BitConverter.GetBytes(0x31534345);
blobBytes = blobBytes.Append(BitConverter.GetBytes(32));
blobBytes = blobBytes.Append(cert.GetPublicKey().Skip(1).Take(32));

byte[] eccblob = blobBytes.ToArray();

System.Linq extension methods used for brevity.
Though, if you just need an object instance, cert.GetECDsaPublicKey() should do the right thing for you (each call to that returns a new instance, so manage the lifetime appropriately)
","1123","<c#><jwt><x509certificate><ecdsa>","1","1","2","2017-03-23 19:49:20","42932855","0","","823800","","2017-03-21 16:40:50","2017-03-20 23:45:14",""
"42915997","Import ECC key - CngKey.Import() - Parameter is incorrect","Purpose : Generate a ES256 signed JWT using jose-jwt 
Steps:
1.Generate a private key and certificate using openssl:
openssl ecparam -name prime256v1 -genkey > privateKey.pem
openssl req -new -key privateKey.pem -x509 -nodes -days 365 -out public.cer

2.Token generation:
var payload = new Dictionary<string, object>()
{
   { ""sub"", ""mr.x@contoso.com"" },
   { ""exp"", 1300819380   }
};
var certificate = X509Certificate.CreateFromCertFile(""public.cer"");
byte[] publicKey = certificate.GetPublicKey(); //public key has 65 bytes

//Below step is throwing an error:
var cng = CngKey.Import(publicKey, CngKeyBlobFormat.EccPublicBlob);
var token = JWT.Encode(claims, cng, JwsAlgorithm.ES256);

CngKey.Import() is throwing ""The parameter is incorrect"" error while trying to generate a CngKey required for the Jose.JWT.Encode function. Not sure what step I am missing. Thanks.
","I was able to make the CngKey import working with help from the following post.
Now Jose.JWT.Encode() was throwing ""Unable to sign"" error at the following line:
return JWT.Encode(claims, cng, JwsAlgorithm.ES256)

And I ended up writing my own implementation of private key signing using .NET 4.6 GetECDsaPrivateKey(). 
You can see my final solution on the following post
Public key needs to be modified by discarding the first byte, leaving 64 bytes, then prefix with 4 bytes for curve and 4 bytes for key length. Here is the complete solution:
var payload = new Dictionary<string, object>()
{
   { ""sub"", ""mr.x@contoso.com"" },
   { ""exp"", 1300819380     }
};
var certificate = X509Certificate.CreateFromCertFile(""public.cer"");
byte[] publicKey = certificate.GetPublicKey(); //public key has 65 bytes

//Discard the first byte (it is always 0X04 for ECDSA public key)
publicKey = publicKey.Skip(1).ToArray();:

//Generate 4 bytes for curve and 4 bytes for key length [ 69(E), 67(C), 83(S), 49(1), 32(Key length), 0, 0, 0 ]
byte[] x = { 69, 67, 83, 49, 32, 0, 0, 0 };    

//Prefix above generated array to existing public key array
publicKey = x.Concat(publicKey).ToArray();

var cng = CngKey.Import(publicKey, CngKeyBlobFormat.EccPublicBlob); //This works
return JWT.Encode(claims, cng, JwsAlgorithm.ES256); //Fixed, see my final solution link above

","1123","<c#><jwt><x509certificate><ecdsa>","1","0","2","2017-03-23 19:49:20","42932855","0","","823800","","2017-03-21 16:40:50","2017-03-20 23:45:14",""
"45370591","ssh-add error with ECDSA and ED25519 identities","Linux environment: Debian 9.1, with Gnome desktop
I have both ECDSA and ED25519 identities, but from command line, ssh-add command gives error: 

Could not add identity

How to solve?
","according to:
https://bugzilla.gnome.org/show_bug.cgi?id=641082#c22
the bug is relative to gnome-keyring support with ECDSA keys.
The fix which works for me is:
mkdir -p ~/.config/autostart
cp /etc/xdg/autostart/gnome-keyring-ssh.desktop ~/.config/autostart/
echo ""X-GNOME-Autostart-enabled=false"" >> ~/.config/autostart/gnome-
keyring-ssh.desktop

After reboot, ssh-add works correctly from command line:
marco@cluster:~$ ssh-add
Enter passphrase for /home/marco/.ssh/id_rsa: 
Identity added: /home/marco/.ssh/id_ecdsa (/home/marco/.ssh/id_ecdsa)
Identity added: /home/marco/.ssh/id_ed25519 (marco@cluster)

","1112","<linux><ssh><ecdsa>","2","5","1","2017-07-28 10:04:52","45370592","0","","","","","2017-07-28 10:04:52",""
"49181750","ECDSA isn't suported in Java 1.8?","I think that on my machine (Debian 10, linux, JAVA 1.8 OpenJDK), ECDSA isn't supported by Java.
Why? Because this line throws exception:
KeyFactory kf = KeyFactory.getInstance(""ECDSA"");

However, if I change ECDSA to RSA for example, no exception is raised then.
I'm using Debian GNU/Linux as mentioned. Should I install some package or something like that?
Thanks
","As a KeyFactory, it appears that the name is just ""EC"", not ""ECDSA"".

You can list the available key factories using the following code (Java 5+):
for (Provider provider : Security.getProviders()) {
    System.out.println(provider.getName());
    for (Service service : provider.getServices()) {
        if (service.getType().equals(""KeyFactory""))
            System.out.println(""  "" + service.getAlgorithm());
    }
}

I've run it on various Java versions on my Windows 7 machine. As you can see below, Java for Windows comes with the following Key Factories:

DSA
RSA
EC   (Java 7+)
RSA
DiffieHellman

Java 9.0.1
SUN
  DSA
SunRsaSign
  RSA
SunEC
  EC
SunJSSE
  RSA
SunJCE
  DiffieHellman
SunJGSS
SunSASL
XMLDSig
SunPCSC
JdkLDAP
JdkSASL
SunMSCAPI
SunPKCS11

Java 1.8.0_151
SUN
  DSA
SunRsaSign
  RSA
SunEC
  EC
SunJSSE
  RSA
SunJCE
  DiffieHellman
SunJGSS
SunSASL
XMLDSig
SunPCSC
SunMSCAPI

Java 1.7.0_79
SUN
  DSA
SunRsaSign
  RSA
SunEC
  EC
SunJSSE
  RSA
SunJCE
  DiffieHellman
SunJGSS
SunSASL
XMLDSig
SunPCSC
SunMSCAPI

Java 1.6.0_45
SUN
  DSA
SunRsaSign
  RSA
SunJSSE
  RSA
SunJCE
  DiffieHellman
SunJGSS
SunSASL
XMLDSig
SunPCSC
SunMSCAPI

Java 1.5.0_22
SUN
  DSA
SunRsaSign
  RSA
SunJSSE
  RSA
SunJCE
  DiffieHellman
SunJGSS
SunSASL

","1101","<java><ecdsa>","1","4","1","2018-03-08 20:35:16","","4","","402884","","2018-03-08 20:35:16","2018-03-08 20:17:43",""
"34057395","Android verify CA signature in X.509 Certificate","I have a Root CA certificate and a User certificate that has been signed by the CA.  Under Windows using Certutil or OpenSSL I can verify that the CA's signature on the User certificate signature is OK.  Now I am trying to verify the same signature under Android.
I use Spongy Castle, though I am not sure that it is totally necessary for this step.  I use ECDH 384-bit key pairs.  The signature is ""SHA384WITHECDSA"".  I can generate a self-signed certificate and verify its signature either by the certificate.verify method or by calculating the signature:
public static byte[] GenerateMyClientCertificate()
            throws NoSuchAlgorithmException, NoSuchProviderException, InvalidAlgorithmParameterException
    {
        // Create the keys
        KeyPairGenerator ClientkeyPair = KeyPairGenerator.getInstance(""ECDH"", ""SC"");
        ECGenParameterSpec ecParamSpec2 = new ECGenParameterSpec(""P-384"");
        ClientkeyPair.initialize(ecParamSpec2);
        KeyPair clientKeyPair = ClientkeyPair.generateKeyPair();

        PublicKey publicKey = clientKeyPair.getPublic();
        PrivateKey privateKey = clientKeyPair.getPrivate();

        X509Certificate x509cert = null;
        byte[] derCert = null;
        // generate the certificate
        try {
            x509cert = generateV3Certificate(clientKeyPair);
            derCert = x509cert.getEncoded();

        //Certificate test using verify:
        x509cert.checkValidity(new Date());
        x509cert.verify(x509cert.getPublicKey(), ""SC"");  //This cert is self-signed...
        System.out.println(""valid certificate generated"");

        //Another test: (verify not using cert.verify but rather calculating the signature)
        Signature verifier = Signature.getInstance(""SHA384WITHECDSA"", ""SC"");
        boolean result=false;
        verifier.initVerify(x509cert.getPublicKey()); // This cert is self-signed
        verifier.update(x509cert.getTBSCertificate());  //TBS is to get the ""To Be Signed"" part of the certificate - .getEncoded() gets the whole cert, which includes the signature
        result = verifier.verify(x509cert.getSignature());
        if (result == false)
        {
            System.out.println(""signature validation failed"");
        }
        //end of another verification
    }
    catch (Exception e)
    {
        //
    }
    return derCert;
} //GenerateMyClientCertificate

In the same way, I can check the CA certificate, which is also a self-signed certificate:
//Certificate validity test using verify: -- This seems to work well for self-signed certificates...
        RootCaX509Cert.checkValidity(new Date());
        RootCaX509Cert.verify(RootCaX509Cert.getPublicKey(), ""SC"");  //This cert is self-signed...
        System.out.println(""valid certificate generated"");

        //Another test: (verify not using cert.verify but rather calculating the signature)
        Signature verifier = Signature.getInstance(""SHA384WITHECDSA"", ""SC"");
        boolean result=false;
        verifier.initVerify(RootCaX509Cert.getPublicKey()); // This cert is self-signed
        verifier.update(RootCaX509Cert.getTBSCertificate());  //TBS is to get the ""To Be Signed"" part of the certificate - .getEncoded() gets the whole cert, which includes the signature
        result = verifier.verify(RootCaX509Cert.getSignature());
        if (result == false)
        {
            System.out.println(""signature validation failed"");
        }

Now I want to check the User certificate, using the public key of the CA certificate.  But neither of the above verify methods work:
        //Certificate validity test using verify: -- This seems to work well for self-signed certificates...
        ServerX509Cert.checkValidity(new Date());
        ServerX509Cert.verify(RootCaX509Cert.getPublicKey(), ""SC"");  //This cert was signed by CA
        System.out.println(""valid certificate generated"");

        //Another test: (verify not using cert.verify but rather calculating the signature)
        Signature verifier = Signature.getInstance(""SHA384WITHECDSA"", ""SC"");
        boolean result=false;
        verifier.initVerify(RootCaX509Cert.getPublicKey()); // This cert is signed by CA
        verifier.update(ServerX509Cert.getTBSCertificate());  //TBS is to get the ""To Be Signed"" part of the certificate - .getEncoded() gets the whole cert, which includes the signature
        result = verifier.verify(ServerX509Cert.getSignature());
        if (result == false)
        {
            System.out.println(""signature validation failed"");
        }

So currently I can only check self-signed certificates :( 
I would have thought that using RootCaX509Cert.getPublicKey() as the key here would have worked, but it does not.  Maybe I misunderstand how this CA signature verification should be done?  
","","1098","<java><android><digital-signature><ecdsa><spongycastle>","2","","0","2015-12-07 16:41:24","","0","1","5632644","","2015-12-07 16:41:24","2015-12-03 03:30:42",""
"20205728","Hex encode ECDSA keys in node.js","I'm building a nodejs app that talks to an API server. The API server requires that each request I make to it includes a X-Signature header using the prime256v1 ECDSA curve and sha256 hash on a particular set of data. 
I looked through the crypto and tls documentation but didn't find anything suitable. I have successfully generated a private key with openssl ecparam -name prime256v1 -genkey but it is in PEM format. I have also generated a DER format key. Both of these include some extra metadata like the curve used and in the case of PEM, comments. 
I can use these keys for signing operations on my side, but the server requires that I upload a public key using hex encoding (so the server can verify the signatures I make on my requests.)
Specifically the server wants something like the output of the following Python code:
from ecdsa import SigningKey
from binascii import hexlify
hexlify(SigningKey.from_pem(content).to_string())

Sample output for a pubkey (no newlines): c5bd76cd0cd948de17a31261567d219576e992d9066fe1a6bca97496dec634e2c8e06f8949773b300b9f73fabbbc7710d5d6691e96bcf3c9145e15daf6fe07b9
I would prefer not adding python as a dependency to my node app... anyone know of a way I can extract the binary data representing my private key from the PEM or DER files, so I can put it in a buffer and call buffer.toString('hex')? Or a way I can use the native crypto library to generate the ECDSA keypair? Or a library that would do the same?
","openssl itself can print out the guts of things, in hex.
Doe the key change? sounds like you can just decode into hex one time, and use that?  No need for dependencies - just paste the hex into your node source?
","1085","<node.js><openssl><public-key-encryption><ecdsa>","0","0","1","2014-01-14 10:33:12","","0","","","","","2013-11-25 23:36:59",""
"48783809","ECDSA sign with BouncyCastle and verify with Crypto++","Here is the Java code:

public static String sign(String data) throws Exception {
    KeyPair keyPair = loadKeyPair(System.getProperty(""user.dir""), ""ECDSA"");
    Signature signature = Signature.getInstance(""SHA256withECDSA"", ""BC"");
    signature.initSign(keyPair.getPrivate(), new SecureRandom());

    byte[] message = data.getBytes();
    signature.update(message);

    byte[] sigBytes = signature.sign();        
    String signatureStr = new BigInteger(1, sigBytes).toString(16);
    return signatureStr;
}

Then the C++ Code to verify signatures

bool VerifyMessage( const ECDSA<ECP, SHA256>::PublicKey& key, const string& message, const string& signature )
{
    bool result = false;

    // Hexa encoding version, more readable
    std::string decodedSignature;
    StringSource(signature, true,
                    new HexDecoder(
                       new StringSink(decodedSignature)));

    StringSource(decodedSignature+message, true,
                    new SignatureVerificationFilter(ECDSA<ECP,SHA256>::Verifier(key),
                       new ArraySink((byte*)&result, sizeof(result))));

    return result;
}

I was thinking that I need to encode my signature to hexa but it didn't resolve my problem. I've written a c++ version of the sign method using crypto++ and it's verified. so why when I use the java code, the signature is not verified. Thanks
","
... why when I use the java code, the signature is not verified?

OpenSSL and Java use an ASN.1/DER encoding for the signature, and Crypto++ uses IEEE P1363's format for the signature.

ASN.1: SEQUENCE ::= { r INTEGER, s INTEGER }
P1363: [byte array r][byte array s]

You need to convert between the formats. Crypto++ provides DSAConvertSignatureFormat to convert between formats. There is an example on the Crypto++ wiki at Elliptic Curve Digital Signature Algorithm | OpenSSL and Java Interop.
Here is the Crypto++ code from the wiki. It uses OpenSSL and its command line tools rather than Java. There is no material difference because OpenSSL and Java output signatures in ASN.1/DER format.
#include ""cryptlib.h""
#include ""eccrypto.h""
#include ""files.h""
#include ""dsa.h""
#include ""sha.h""
#include ""hex.h""

#include <iostream>

using namespace CryptoPP;

int main(int argc, char* argv[])
{
    // Load DER encoded public key
    FileSource pubKey(""secp256k1-pub.der"", true /*binary*/);
    ECDSA<ECP, SHA1>::Verifier verifier(pubKey);

    // Java or OpenSSL created signature. It is ANS.1
    //   SEQUENCE ::= { r INTEGER, s INTEGER }.
    const byte derSignature[] = {
        0x30, 0x44, 0x02, 0x20, 0x08, 0x66, 0xc8, 0xf1,
        0x6f, 0x15, 0x00, 0x40, 0x8a, 0xe2, 0x1b, 0x40,
        0x56, 0x28, 0x9c, 0x17, 0x8b, 0xca, 0x64, 0x99,
        0x37, 0xdc, 0x35, 0xad, 0xad, 0x60, 0x18, 0x4d,
        0x63, 0xcf, 0x4a, 0x06, 0x02, 0x20, 0x78, 0x4c,
        0xb7, 0x0b, 0xa3, 0xff, 0x4f, 0xce, 0xd3, 0x01,
        0x27, 0x5c, 0x6c, 0xed, 0x06, 0xf0, 0xd7, 0x63,
        0x6d, 0xc6, 0xbe, 0x06, 0x59, 0xe8, 0xc3, 0xa5,
        0xce, 0x8a, 0xf1, 0xde, 0x01, 0xd5
    };

    // P1363 'r || s' concatenation. The size is 32+32 due to field
    // size for r and s in secp-256. It is not 20+20 due to SHA-1.
    SecByteBlock signature(verifier.SignatureLength());
    DSAConvertSignatureFormat(signature, signature.size(), DSA_P1363,
                              derSignature, sizeof(derSignature), DSA_DER);

    // Message ""Attack at dawn!""
    const byte message[] = {
        0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x20, 0x61,
        0x74, 0x20, 0x64, 0x61, 0x77, 0x6e, 0x21, 0x0a
    };

    // https://www.cryptopp.com/wiki/Elliptic_Curve_Digital_Signature_Algorithm
    bool result = verifier.VerifyMessage(message, sizeof(message), signature, signature.size());
    if (result)
        std::cout << ""Verified message"" << std::endl;
    else
        std::cout << ""Failed to verify message"" << std::endl;

    return 0;
}

And here is the result of running the test program.
$ ./test.exe
Signature (64):
0866C8F16F1500408AE21B4056289C178BCA649937DC35ADAD60184D63CF4A06784CB70BA3FF4FCE
D301275C6CED06F0D7636DC6BE0659E8C3A5CE8AF1DE01D5
Verified message


Here is the setup I used to reproduce cat test.txt | openssl dgst -ecdsa-with-SHA1 -sign sample.key -keyform DER > test.sig. It is from @DivB's question at ECDSA sign with OpenSSL, verify with Crypto++.
$ cat test.txt
Attack at dawn!

$ hexdump -C test.txt
00000000  41 74 74 61 63 6b 20 61  74 20 64 61 77 6e 21 0a  |Attack at dawn!.|
00000010

# Create private key in PEM format
$ openssl ecparam -name secp256k1 -genkey -noout -out secp256k1-key.pem

$ cat secp256k1-key.pem
-----BEGIN EC PRIVATE KEY-----
MHQCAQEEIO0D5Rjmes/91Nb3dHY9dxmbM7gVfxmB2+OVuLmWMbGXoAcGBSuBBAAK
oUQDQgAEgVNEuirUNCEVdf7nLSBUgU1GXLrtIBeglIbK54s91HlWKOKjk4CkJ3/B
wGAfcYKa+DgJ2IUQSD15K1T/ghM9eQ==
-----END EC PRIVATE KEY-----

# Convert private key to ASN.1/DER format
$ openssl ec -in secp256k1-key.pem -inform PEM -out secp256k1-key.der -outform DER

$ dumpasn1 secp256k1-key.der
  0 116: SEQUENCE {
  2   1:   INTEGER 1
  5  32:   OCTET STRING
       :     ED 03 E5 18 E6 7A CF FD D4 D6 F7 74 76 3D 77 19
       :     9B 33 B8 15 7F 19 81 DB E3 95 B8 B9 96 31 B1 97
 39   7:   [0] {
 41   5:     OBJECT IDENTIFIER secp256k1 (1 3 132 0 10)
       :     }
 48  68:   [1] {
 50  66:     BIT STRING
       :       04 81 53 44 BA 2A D4 34 21 15 75 FE E7 2D 20 54
       :       81 4D 46 5C BA ED 20 17 A0 94 86 CA E7 8B 3D D4
       :       79 56 28 E2 A3 93 80 A4 27 7F C1 C0 60 1F 71 82
       :       9A F8 38 09 D8 85 10 48 3D 79 2B 54 FF 82 13 3D
       :       79
       :     }
       :   }

# Create public key from private key
$ openssl ec -in secp256k1-key.der -inform DER -pubout -out secp256k1-pub.der -outform DER

$ dumpasn1 secp256k1-pub.der
  0  86: SEQUENCE {
  2  16:   SEQUENCE {
  4   7:     OBJECT IDENTIFIER ecPublicKey (1 2 840 10045 2 1)
 13   5:     OBJECT IDENTIFIER secp256k1 (1 3 132 0 10)
       :     }
 20  66:   BIT STRING
       :     04 81 53 44 BA 2A D4 34 21 15 75 FE E7 2D 20 54
       :     81 4D 46 5C BA ED 20 17 A0 94 86 CA E7 8B 3D D4
       :     79 56 28 E2 A3 93 80 A4 27 7F C1 C0 60 1F 71 82
       :     9A F8 38 09 D8 85 10 48 3D 79 2B 54 FF 82 13 3D
       :     79
       :   }

# Sign the message using the private key
$ cat test.txt | openssl dgst -ecdsa-with-SHA1 -sign secp256k1-key.der -keyform DER > test.sig

# Dump the signature as hex
$ hexdump -C test.sig
00000000  30 44 02 20 08 66 c8 f1  6f 15 00 40 8a e2 1b 40  |0D. .f..o..@...@|
00000010  56 28 9c 17 8b ca 64 99  37 dc 35 ad ad 60 18 4d  |V(....d.7.5..`.M|
00000020  63 cf 4a 06 02 20 78 4c  b7 0b a3 ff 4f ce d3 01  |c.J.. xL....O...|
00000030  27 5c 6c ed 06 f0 d7 63  6d c6 be 06 59 e8 c3 a5  |'\l....cm...Y...|
00000040  ce 8a f1 de 01 d5                                 |......|
00000046

# Dump the signature as ASN.1/DER
$ dumpasn1 test.sig
  0  68: SEQUENCE {
  2  32:   INTEGER
       :     08 66 C8 F1 6F 15 00 40 8A E2 1B 40 56 28 9C 17
       :     8B CA 64 99 37 DC 35 AD AD 60 18 4D 63 CF 4A 06
 36  32:   INTEGER
       :     78 4C B7 0B A3 FF 4F CE D3 01 27 5C 6C ED 06 F0
       :     D7 63 6D C6 BE 06 59 E8 C3 A5 CE 8A F1 DE 01 D5
       :   }

","1056","<java><c++><bouncycastle><crypto++><ecdsa>","2","2","2","2019-10-07 04:34:06","48784823","1","","608639","","2018-02-16 08:26:31","2018-02-14 09:36:16",""
"48783809","ECDSA sign with BouncyCastle and verify with Crypto++","Here is the Java code:

public static String sign(String data) throws Exception {
    KeyPair keyPair = loadKeyPair(System.getProperty(""user.dir""), ""ECDSA"");
    Signature signature = Signature.getInstance(""SHA256withECDSA"", ""BC"");
    signature.initSign(keyPair.getPrivate(), new SecureRandom());

    byte[] message = data.getBytes();
    signature.update(message);

    byte[] sigBytes = signature.sign();        
    String signatureStr = new BigInteger(1, sigBytes).toString(16);
    return signatureStr;
}

Then the C++ Code to verify signatures

bool VerifyMessage( const ECDSA<ECP, SHA256>::PublicKey& key, const string& message, const string& signature )
{
    bool result = false;

    // Hexa encoding version, more readable
    std::string decodedSignature;
    StringSource(signature, true,
                    new HexDecoder(
                       new StringSink(decodedSignature)));

    StringSource(decodedSignature+message, true,
                    new SignatureVerificationFilter(ECDSA<ECP,SHA256>::Verifier(key),
                       new ArraySink((byte*)&result, sizeof(result))));

    return result;
}

I was thinking that I need to encode my signature to hexa but it didn't resolve my problem. I've written a c++ version of the sign method using crypto++ and it's verified. so why when I use the java code, the signature is not verified. Thanks
","By the way, another way around your problem (especially allowing you to avoid the command line) would be to modify the Java code in order to have a way to produce the R and S values, as well as to reproduce the DER encoded values.
For example you can extract the R and S values from the Java signature using those:
public static BigInteger extractR(byte[] signature) throws Exception {
    int startR = (signature[1] & 0x80) != 0 ? 3 : 2;
    int lengthR = signature[startR + 1];
    return new BigInteger(Arrays.copyOfRange(signature, startR + 2, startR + 2 + lengthR));
}

public static BigInteger extractS(byte[] signature) throws Exception {
    int startR = (signature[1] & 0x80) != 0 ? 3 : 2;
    int lengthR = signature[startR + 1];
    int startS = startR + 2 + lengthR;
    int lengthS = signature[startS + 1];
    return new BigInteger(Arrays.copyOfRange(signature, startS + 2, startS + 2 + lengthS));
}

These methods are notably used in Wycheproof to play around with the BigIntegers directly.
These can allow you to reconstruct the P1363 encoding used by CryptoPP in Java, but be careful not to forget the left padding with 0s of the bytearrays. (Otherwise you may have problems when the R or S bytearray is smaller than the expected length.)
And you can also reconstruct the DER encoded signature from big integers using:
public static byte[] derSign(BigInteger r, BigInteger s) throws Exception {
    byte[] rb = r.toByteArray();
    byte[] sb = s.toByteArray();
    int off = (2 + 2) + rb.length;
    int tot = off + (2 - 2) + sb.length;
    byte[] der = new byte[tot + 2];
    der[0] = 0x30;
    der[1] = (byte) (tot & 0xff);
    der[2 + 0] = 0x02;
    der[2 + 1] = (byte) (rb.length & 0xff);
    System.arraycopy(rb, 0, der, 2 + 2, rb.length);
    der[off + 0] = 0x02;
    der[off + 1] = (byte) (sb.length & 0xff);
    System.arraycopy(sb, 0, der, off + 2, sb.length);
    return der;
}

As you can see, these methods might be translated into C++ code, since they are really basic byte manipulations, but that's another story ;)
","1056","<java><c++><bouncycastle><crypto++><ecdsa>","2","1","2","2019-10-07 04:34:06","48784823","1","","608639","","2018-02-16 08:26:31","2018-02-14 09:36:16",""
"48685191","Separating public and private keys of ECDSA keypair","I'm using c++ to try to generate a ECDSA key-pair following Elliptic_Curve_Cryptography from the OpenSSL wiki.
#include <iostream>

#include <openssl/obj_mac.h>
#include <openssl/ec.h>

int main()
{
    EC_KEY *key;

    if(NULL == (key = EC_KEY_new_by_curve_name(NID_secp224r1)))
        std::cout << ""error on new_curve_by_name"" << std::endl;

    if(1 != EC_KEY_generate_key(key)) std::cout << ""error in generating keys"" << std::endl;
}

The key pair is generated without errors, but I don't know how to extract public and private key in two different objects (EC_POINT and BIGNUM), any idea?
","I think you must do the following :
BIGNUM *privateKey;
EC_POINT *publicKey;

privateKey = BN_new();
EC_KEY_set_private_key(key, privateKey);
EC_KEY_set_public_key(key, publicKey);

EDIT : 
These two calls will set the privateKey and the publicKey respectively.
Open SSL Documentation claims that ""destination should be a newly allocated BIGNUM obtained via a call to BN_new(). It should not have been used for other purposes or initialised in any way."", hence i am adding the BN_new() call.
I don't see anything similar to create an EC_Point object( unless you use an EC_Group to create this way : EC_POINT *EC_POINT_new(const EC_GROUP *group);
So try this, if you still don't get it, then maybe you should look into how an EC_Point object is created correctly according to your usage.
","1017","<c++><openssl><ecdsa><key-pair>","2","0","3","2018-02-09 02:06:31","48688270","1","1","608639","","2018-02-09 01:54:27","2018-02-08 12:11:03",""
"48685191","Separating public and private keys of ECDSA keypair","I'm using c++ to try to generate a ECDSA key-pair following Elliptic_Curve_Cryptography from the OpenSSL wiki.
#include <iostream>

#include <openssl/obj_mac.h>
#include <openssl/ec.h>

int main()
{
    EC_KEY *key;

    if(NULL == (key = EC_KEY_new_by_curve_name(NID_secp224r1)))
        std::cout << ""error on new_curve_by_name"" << std::endl;

    if(1 != EC_KEY_generate_key(key)) std::cout << ""error in generating keys"" << std::endl;
}

The key pair is generated without errors, but I don't know how to extract public and private key in two different objects (EC_POINT and BIGNUM), any idea?
","This returns the private key as a BIGNUM
BIGNUM* bn = EC_KEY_get0_private_key(key);

For the public key not sure how to get an EC_POINT but you can get the raw bytes with something like: 
  // first call returns length of key
  int len = i2o_ECPublicKey(key, 0);  
  std::vector<unsigned char> bytes b(len, 0);
  unsigned char* p = &b[0];
  // second call copies key into p (and returns length if successful)
  if (i2o_ECPublicKey(key, &p)) != len)
  {
    // handle error
  }

","1017","<c++><openssl><ecdsa><key-pair>","2","0","3","2018-02-09 02:06:31","48688270","1","1","608639","","2018-02-09 01:54:27","2018-02-08 12:11:03",""
"48685191","Separating public and private keys of ECDSA keypair","I'm using c++ to try to generate a ECDSA key-pair following Elliptic_Curve_Cryptography from the OpenSSL wiki.
#include <iostream>

#include <openssl/obj_mac.h>
#include <openssl/ec.h>

int main()
{
    EC_KEY *key;

    if(NULL == (key = EC_KEY_new_by_curve_name(NID_secp224r1)))
        std::cout << ""error on new_curve_by_name"" << std::endl;

    if(1 != EC_KEY_generate_key(key)) std::cout << ""error in generating keys"" << std::endl;
}

The key pair is generated without errors, but I don't know how to extract public and private key in two different objects (EC_POINT and BIGNUM), any idea?
","I think the methods you want are:
EC_KEY_get0_private_key and 
EC_KEY_get0_public_key
This works for me:
EC_KEY* key = EC_KEY_new_by_curve_name(NID_secp224r1);

if(!key)
{
    std::cerr << ""Error creating curve key"" << '\n';
    return EXIT_FAILURE;
}

if(!EC_KEY_generate_key(key))
{
    std::cerr << ""Error generating curve key"" << '\n';
    EC_KEY_free(key);
    return EXIT_FAILURE;
}

BIGNUM const* prv = EC_KEY_get0_private_key(key);
if(!prv)
{
    std::cerr << ""Error getting private key"" << '\n';
    EC_KEY_free(key);
    return EXIT_FAILURE;
}

std::cout << ""Private key: "" << prv << '\n';

EC_POINT const* pub = EC_KEY_get0_public_key(key);
if(!pub)
{
    std::cerr << ""Error getting public key"" << '\n';
    EC_KEY_free(key);
    return EXIT_FAILURE;
}

std::cout << ""Public key: "" << pub << '\n';

// Use keys here ...

EC_KEY_free(key);

NOTE:
When using C libraries like this I often define a custom smart pointer to take care if the deletions. This makes the code less prone to memory leaks and ""exception safe"".
For example I would define something like this:
struct ec_key_dter{void operator()(EC_KEY* k)const{if(k) EC_KEY_free(k);}};
using  ec_key_uptr = std::unique_ptr<EC_KEY, ec_key_dter>;

And use it like this:
auto key = ec_key_uptr(EC_KEY_new_by_curve_name(NID_secp224r1));

if(!key)
    throw std::runtime_error(""Error creating curve key"");

if(!EC_KEY_generate_key(key.get()))
    throw std::runtime_error(""Error generating curve key"");

if(!EC_KEY_check_key(key.get()))
    throw std::runtime_error(""Error checking curve key"");

// ... etc ...

// Do not delete the key manually!!

","1017","<c++><openssl><ecdsa><key-pair>","2","3","3","2018-02-09 02:06:31","48688270","1","1","608639","","2018-02-09 01:54:27","2018-02-08 12:11:03",""
"44149608","Generate a VAPID keys in Java and pass them to JavaScript PushManager","I’m trying to use web push notifications with the web push protocol in my app. In order to use the Push API with VAPID I need an applicationServerKey. 
The PushManager subscribe method takes a VAPID key (public key alone) as a parameter and will give a subscription end point and keys to push messages.
To generate VAPID keys, I have been using node.js (google web-push package) and openssl till now. But in my use case VAPID keys should be generated within Java and passed to JavaScript to subscribe from the browser. 
I am trying with the code below in Java to generate VAPID keys. I am able to create keys successfully but when I pass the generated public key (base64-encoded string), the subscribe method returns an error saying: 

Unable to register service worker. DOMException: Failed to execute
  'subscribe' on 'PushManager': The provided applicationServerKey is not
  valid..

Please help me resolve this issue. Below is my Java code:
ECNamedCurveParameterSpec parameterSpec = 
ECNamedCurveTable.getParameterSpec(""prime256v1"");
KeyPairGenerator keyPairGenerator = 
KeyPairGenerator.getInstance(""ECDH"", ""BC"");
keyPairGenerator.initialize(parameterSpec);
KeyPair serverKey = keyPairGenerator.generateKeyPair();

PrivateKey priv = serverKey.getPrivate();
PublicKey pub = serverKey.getPublic();`
System.out.println(Base64.toBase64String(pub.getEncoded()));

","Please refer below link for answer from MartijnDwars.
https://github.com/web-push-libs/webpush-java/issues/30

you can use Utils.savePublicKey to convert your Java-generated
  PublicKey to a byte[]. This byte[] is then passed to the
  PushManager.subscribe method.
It may be more convenient to base64 encode the byte[] in Java and
  base64 decode the string in JavaScript. For example, after generating
  the keypair in Java:
KeyPair keyPair = generateKeyPair();
byte[] publicKey = Utils.savePublicKey((ECPublicKey) keyPair.getPublic());
String publicKeyBase64 = BaseEncoding.base64Url().encode(publicKey);
System.out.println(""PublicKey = "" + publicKeyBase64);
// PublicKey = BPf36QAqZNNvvnl9kkpTDerXUOt6Nm6P4x9GEvmFVFKgVyCVWy24KUTs6wLQtbV2Ug81utbNnx86_vZzXDyrl88=

Then in JavaScript:
function subscribe() {
    const publicKey = base64UrlToUint8Array('BPf36QAqZNNvvnl9kkpTDerXUOt6Nm6P4x9GEvmFVFKgVyCVWy24KUTs6wLQtbV2Ug81utbNnx86_vZzXDyrl88=');

    navigator.serviceWorker.ready.then(function (serviceWorkerRegistration) {
        serviceWorkerRegistration.pushManager.subscribe({
            userVisibleOnly: true,
            applicationServerKey: publicKey
        })
        .then(function (subscription) {
            return sendSubscriptionToServer(subscription);
        })
        .catch(function (e) {
            if (Notification.permission === 'denied') {
                console.warn('Permission for Notifications was denied');
            } else {
                console.error('Unable to subscribe to push.', e);
            }
        });
    });
}

function base64UrlToUint8Array(base64UrlData) {
    const padding = '='.repeat((4 - base64UrlData.length % 4) % 4);
    const base64 = (base64UrlData + padding)
        .replace(/\-/g, '+')
        .replace(/_/g, '/');

    const rawData = atob(base64);
    const buffer = new Uint8Array(rawData.length);

    for (let i = 0; i < rawData.length; ++i) {
        buffer[i] = rawData.charCodeAt(i);
    }

    return buffer;
}


","979","<java><bouncycastle><web-push><ecdsa><vapid>","0","2","1","2017-11-06 06:00:47","","1","","441757","","2017-05-24 05:57:16","2017-05-24 05:23:24",""
"39761249","What is the format of this private key?","I got a pem key like this:
 -----BEGIN PRIVATE KEY----- 

 MIGHAgEAMBMGByqGSM49AgEGCCqGSM49AwEHBG0wawIBAQQgDZUgDvKixfLi8cK8
 /TFLY97TDmQV3J2ygPpvuI8jSdihRANCAARRN3xgbPIR83dr27UuDaf2OJezpEJx
 UC3v06+FD8MUNcRAboqt4akehaNNSh7MMZI+HdnsM4RXN2y8NePUQsPL

 -----END PRIVATE KEY-----

I only know that this key is used for ecdsa signature.
Now I want to know the real value of the key, because I need it to calculate something, and I believe there is some kind of header in front of the real value.
I tried to use python-ecdsa to parse the key, but obviously didn't work. 
How can I get the real value?
","It looks like you have an ASN1 structure representing an ECDSA private key for the NIST P-256 curve, and it was encoded as a PEM file.
I was able to get your private and public key and the curve information using the OpenSSL command-line utility:
$ openssl ec -in test.pem -text -noout
read EC key
Private-Key: (256 bit)
priv:
    0d:95:20:0e:f2:a2:c5:f2:e2:f1:c2:bc:fd:31:4b:
    63:de:d3:0e:64:15:dc:9d:b2:80:fa:6f:b8:8f:23:
    49:d8
pub: 
    04:51:37:7c:60:6c:f2:11:f3:77:6b:db:b5:2e:0d:
    a7:f6:38:97:b3:a4:42:71:50:2d:ef:d3:af:85:0f:
    c3:14:35:c4:40:6e:8a:ad:e1:a9:1e:85:a3:4d:4a:
    1e:cc:31:92:3e:1d:d9:ec:33:84:57:37:6c:bc:35:
    e3:d4:42:c3:cb
ASN1 OID: prime256v1
NIST CURVE: P-256

You can also look at the ASN1 structure itself:
$ openssl asn1parse -in test.pem 
    0:d=0  hl=3 l= 135 cons: SEQUENCE          
    3:d=1  hl=2 l=   1 prim: INTEGER           :00
    6:d=1  hl=2 l=  19 cons: SEQUENCE          
    8:d=2  hl=2 l=   7 prim: OBJECT            :id-ecPublicKey
   17:d=2  hl=2 l=   8 prim: OBJECT            :prime256v1
   27:d=1  hl=2 l= 109 prim: OCTET STRING      [HEX DUMP]:306B02010104200D95200EF2A2C5F2E2F1C2BCFD314B63DED30E6415DC9DB280FA6FB88F2349D8A1440342000451377C606CF211F3776BDBB52E0DA7F63897B3A44271502DEFD3AF850FC31435C4406E8AADE1A91E85A34D4A1ECC31923E1DD9EC338457376CBC35E3D442C3CB

","923","<ecdsa>","1","1","1","2016-09-30 04:49:03","39783875","0","","1932092","","2016-09-29 05:33:14","2016-09-29 04:08:22",""
"24066444","How to sign using ECDSA in Javacard","I'm trying to implement the signing code using ECDSA.
But I always get a Error SW (6F00) during install phase.
I tried by changing parameters several times. (ex. ALG_EC_FP / ALG_EC_F2M, LENGTH_EC_FP_xxx / LENGTH_EC_F2M_xxx)
Could you tell me my mistake in my code below.
(Ver - JCDK 2.2.1, JDK 1.4.2)

package Test;

import javacard.framework.*;
import javacard.security.*;
import javacardx.crypto.*;

public class Test extends Applet{

private byte[] PLAINTEXT ;
private ECPrivateKey objECDSAPriKey=null;   // Object for ECDSA Private Key
private ECPublicKey objECDSAPubKey=null;    // Object for ECDSA Public Key
private KeyPair objECDSAKeyPair=null;       // Object for ECDSA Key Pair
private Signature objECDSASign=null;        // Object for ECDSA Signature

final static short BAS =  0;

//------------------------------------------------------------------------
public static void install(byte[] bArray, short bOffset, byte bLength){
  new Test(bArray, bOffset, bLength);
}

private Test(byte bArray[], short bOffset, byte bLength){ 
  PLAINTEXT = new byte[0x100] ; // Data file
  Util.arrayFillNonAtomic(PLAINTEXT,  BAS, (short)0x100, (byte)0);

  // Error position (6F00)
  objECDSAKeyPair= new KeyPair(KeyPair.ALG_EC_FP, KeyBuilder.LENGTH_EC_FP_192);          // Error position (6F00)

  // Create Signature Object
  objECDSASign = Signature.getInstance(Signature.ALG_ECDSA_SHA, false);

  register();
}

//------------------------------------------------------------------------
public void process(APDU apdu){
  byte buf[] = apdu.getBuffer();

  switch(buf[1])
  {
  case (byte)0xA4: break;

  case (byte)0x46:
  objECDSAKeyPair.genKeyPair();
  objECDSAPriKey = (ECPrivateKey)objECDSAKeyPair.getPrivate();
  objECDSAPubKey = (ECPublicKey)objECDSAKeyPair.getPublic();
  break;

  case (byte)0x2E:
  short Le = apdu.setOutgoing();
  short sSignLen=0 ;

  // Init with Private Key
  objECDSASign.init(objECDSAPriKey, Signature.MODE_SIGN);
  //objECDSASign.init(objECDSAKeyPair.getPrivate(), Signature.MODE_SIGN);

  // Sign Data
  sSignLen = objECDSASign.sign(PLAINTEXT, BAS, Le, buf, BAS);

  apdu.setOutgoingLength(sSignLen);
  apdu.sendBytes(BAS, sSignLen);
  break;

  default:
  ISOException.throwIt(ISO7816.SW_INS_NOT_SUPPORTED);
  }

  return;
} }


I got a JCOP card and its specification, and I read that the card support ECC in the spec.
But I doubt that the spec is the card's spec and the card really support ECC.
Is there any way to check that???
Thank you in advance.
","Please modify your code to
try
  {
     // Error position (6F00)
     objECDSAKeyPair= new KeyPair(KeyPair.ALG_EC_FP, KeyBuilder.LENGTH_EC_FP_192); 
  }
  catch(CryptoException c)
  {    
      //this line will give you the reason of problem ![see image][1]
      byte reason = c.getReason();   
  }

*image link : http://i.stack.imgur.com/dFXVd.png
","869","<signing><javacard><ecdsa>","1","2","1","2014-07-08 08:38:42","24074978","2","","2642459","","2014-06-06 03:37:39","2014-06-05 17:24:58",""
"39916578","Import an ECDSA public key from CngKey to BouncyCastle","I am trying to generate an x509 certificate from a pair of keys generated with CngKey. 
I create the keys with: 
        var parameters = new CngKeyCreationParameters 
        { 
            Provider = CngProvider.MicrosoftSoftwareKeyStorageProvider, 
            ExportPolicy = CngExportPolicies.AllowPlaintextExport, 
            KeyCreationOptions = CngKeyCreationOptions.OverwriteExistingKey, 
            KeyUsage = CngKeyUsages.AllUsages, 
            UIPolicy = new CngUIPolicy(CngUIProtectionLevels.None) 
        }; 
        var key = CngKey.Create(CngAlgorithm.ECDsaP384, container, parameters); 
        byte[] ecPriKey = key.Export(CngKeyBlobFormat.Pkcs8PrivateBlob); 
        byte[] ecPubKey = key.Export(CngKeyBlobFormat.EccPublicBlob); 

I get a BouncyCastle private key with: 
        AsymmetricKeyParameter akPrivate = PrivateKeyFactory.CreateKey(ecPriKey); 

And I have no trouble in it, so that I can see the proper curve's parameters from the key. 
However, when I try to get the public key with: 
          string publicKeyBase64 = Convert.ToBase64String(ecPubKey); 
          byte[] ecPubKey2 = Base64.Decode(publicKeyBase64); 
          byte[] ecPublicKey = new byte[ecPubKey.Length -7]; 
          ecPublicKey[0] = 0x04; 
          Array.Copy(ecPubKey, 8, ecPublicKey, 7, ecPublicKey.Length); 
          AsymmetricKeyParameter akPublic = PublicKeyFactory.CreateKey(ecPublicKey - 1); 

I read I have to erase the 8 first digits from CngKey and add the uncompressed const value 0x04. 
When I execute ""PublicKeyFactory.CreateKey(ecPublicKey)"" I get the exception: 
ex  {""extra data found after object""}   System.Exception {System.IO.IOException} 
Data    {System.Collections.ListDictionaryInternal} System.Collections.IDictionary {System.Collections.ListDictionaryInternal} 
            HResult 0x80131620  int 
            HelpLink    null    string 
InnerException  null    System.Exception 
            Message ""extra data found after object"" string 
            Source  ""BouncyCastle.Crypto""   string 
            StackTrace  ""   at Org.BouncyCastle.Asn1.Asn1Object.FromByteArray(Byte[] data)\r\n   at Org.BouncyCastle.Security.PublicKeyFactory.CreateKey(Byte[] keyInfoData)\r\n   at Plpm.Csp.Security.KeyTool.SecurityKeyTool.OpGenEc(String[] args) in ...""  string 
TargetSite  {Org.BouncyCastle.Asn1.Asn1Object FromByteArray(Byte[])}    System.Reflection.MethodBase {System.Reflection.RuntimeMethodInfo} 
Static members  
Non-Public members  

Anyway, I get the same exception if I do this directly with the key as:
        AsymmetricKeyParameter akPublic = PublicKeyFactory.CreateKey(ecPubKey); 

Can someone, please, give me some ideas about why is this error with public key? 
Thank you so much.
","","864","<c#><bouncycastle><ecdsa><cng>","3","","0","2016-10-07 11:51:22","","0","","","","","2016-10-07 11:51:22",""
"21128386","Is there public key initialization API with point compression?","I am tumbling around with CryptoPP and cannot find answer to this specific question. Here is sample source code (partial)
    AutoSeededRandomPool prng;

//Generate a private key
ECDSA<ECP, CryptoPP::SHA256>::PrivateKey privateKey;
privateKey.Initialize(prng, CryptoPP::ASN1::secp256r1());

// Generate publicKey
ECDSA<ECP, CryptoPP::SHA256>::PublicKey publicKey;
privateKey.MakePublicKey(publicKey);

// Extract Component values
Integer p   = privateKey.GetGroupParameters().GetCurve().GetField().GetModulus();
Integer a   = privateKey.GetGroupParameters().GetCurve().GetA();
Integer b   = privateKey.GetGroupParameters().GetCurve().GetB();
Integer Gx  = privateKey.GetGroupParameters().GetSubgroupGenerator().x;
Integer Gy  = privateKey.GetGroupParameters().GetSubgroupGenerator().y;
Integer n   = privateKey.GetGroupParameters().GetSubgroupOrder();
Integer h   = privateKey.GetGroupParameters().GetCofactor();
Integer Qx  = publicKey.GetPublicElement().x;
Integer Qy  = publicKey.GetPublicElement().y;
Integer x   = privateKey.GetPrivateExponent();

// Construct Point elelemt;
ECP curve(p,a,b);
ECP::Point G(Gx,Gy);
ECP::Point Q(Qx,Qy);

//Build publicKey using elements (no point compression)
ECDSA<ECP, CryptoPP::SHA256>::PublicKey GeneratedPublicKey;
GeneratedPublicKey.Initialize(curve,G,n,Q);
assert(GeneratedPublicKey.Validate(prng, 3));

//Build publicKey using elements (with point compression)?

With this way, I can generate publicKey using component values. However, I cannot
make it work with point compression-which means I don't have Qy value- Is there a 
way to do it? Initialize method has two overloading but none of them are for point
compression situation.
My question is specific with Crypto++ on ""PublicKey.Initialize(curve,G,n,Q)"". Since I cannot transfer whole publicKey with my current project-which I am force to specify domain
parameter as index value and can only transfer Qx value. So I should initialize publicKey
using something like ""PublicKey.Initialize(curve,G,n,Q)"" However, I cannot find such initialization API concerning point compression. 
So, this is not about ""how to do a point compression"" but ""Is there a way to initialize
public key without having Qy value?""
","
How to Construct ECDSA publicKey using only with x value (Point compression)?

x is the private exponent. The public key is a point on the curve; and it does not use the private exponent.
To get the public key: take the private exponent, and raise your base point to it. That is, Q = G^x.
If you want to set the private exponent on a private key or decryptor, then set the domain parameters (i.e., DL_GroupParameters_EC< ECP > or DL_GroupParameters_EC< EC2M >) and then call SetPrivateExponent(x);.

Have you reviewed your previous question at How can I recover compressed y value from sender?? The community took the time to provide you with an answer and sample code, but you did not acknowledge or follow up.
I think owlstead said it best here: 

Why would we care answer you if you are not inclined to accept answers
  or even follow up to them? Your questions are all right, but the way
  you treat the community is terrible.

","861","<crypto++><ecdsa>","1","1","2","2017-08-21 11:58:23","","1","","608639","","2016-04-11 07:42:17","2014-01-15 03:05:12",""
"21128386","Is there public key initialization API with point compression?","I am tumbling around with CryptoPP and cannot find answer to this specific question. Here is sample source code (partial)
    AutoSeededRandomPool prng;

//Generate a private key
ECDSA<ECP, CryptoPP::SHA256>::PrivateKey privateKey;
privateKey.Initialize(prng, CryptoPP::ASN1::secp256r1());

// Generate publicKey
ECDSA<ECP, CryptoPP::SHA256>::PublicKey publicKey;
privateKey.MakePublicKey(publicKey);

// Extract Component values
Integer p   = privateKey.GetGroupParameters().GetCurve().GetField().GetModulus();
Integer a   = privateKey.GetGroupParameters().GetCurve().GetA();
Integer b   = privateKey.GetGroupParameters().GetCurve().GetB();
Integer Gx  = privateKey.GetGroupParameters().GetSubgroupGenerator().x;
Integer Gy  = privateKey.GetGroupParameters().GetSubgroupGenerator().y;
Integer n   = privateKey.GetGroupParameters().GetSubgroupOrder();
Integer h   = privateKey.GetGroupParameters().GetCofactor();
Integer Qx  = publicKey.GetPublicElement().x;
Integer Qy  = publicKey.GetPublicElement().y;
Integer x   = privateKey.GetPrivateExponent();

// Construct Point elelemt;
ECP curve(p,a,b);
ECP::Point G(Gx,Gy);
ECP::Point Q(Qx,Qy);

//Build publicKey using elements (no point compression)
ECDSA<ECP, CryptoPP::SHA256>::PublicKey GeneratedPublicKey;
GeneratedPublicKey.Initialize(curve,G,n,Q);
assert(GeneratedPublicKey.Validate(prng, 3));

//Build publicKey using elements (with point compression)?

With this way, I can generate publicKey using component values. However, I cannot
make it work with point compression-which means I don't have Qy value- Is there a 
way to do it? Initialize method has two overloading but none of them are for point
compression situation.
My question is specific with Crypto++ on ""PublicKey.Initialize(curve,G,n,Q)"". Since I cannot transfer whole publicKey with my current project-which I am force to specify domain
parameter as index value and can only transfer Qx value. So I should initialize publicKey
using something like ""PublicKey.Initialize(curve,G,n,Q)"" However, I cannot find such initialization API concerning point compression. 
So, this is not about ""how to do a point compression"" but ""Is there a way to initialize
public key without having Qy value?""
","
""Is there a way to initialize public key without having Qy value?""

Yes, there is. Here is an crypto++ example:
#include <string>
#include <iostream>
#include <cryptopp/cryptlib.h>
#include <cryptopp/ecp.h>
#include <cryptopp/eccrypto.h>
#include <cryptopp/hex.h>
#include <cryptopp/oids.h>
#include <cryptopp/osrng.h>

using namespace CryptoPP;
using std::cout;
using std::endl;

int main() 
{
    OID curve = ASN1::secp256r1();
    ECDH<ECP>::Domain domain(curve);  

    SecByteBlock privKey(domain.PrivateKeyLength());
    SecByteBlock pubKey(domain.PublicKeyLength());
    AutoSeededRandomPool prng;
    domain.GenerateKeyPair(prng, privKey, pubKey); 

    // Convert public key to string representation
    std::string pub_str;
    HexEncoder encoder;
    encoder.Attach( new StringSink(pub_str) );
    encoder.Put( pubKey.data(), pubKey.size() );
    encoder.MessageEnd();

    // Uncompressed point - first byte '04' in front of the string. 
    std::cout << ""Uncompressed public key (point) "" << pub_str << endl;

    // Extract x value from the point  
    std::string public_point_x = pub_str.substr(2, 64);

    // Compressed - '02' byte in front of the string. 
    public_point_x = ""02"" + public_point_x;
    std::cout << ""Compressed public key (point)   "" << public_point_x << endl;

    // ----- reconstruct point from compressed point/value.
    StringSource ss(public_point_x, true, new HexDecoder);   
    ECP::Point point;
    domain.GetGroupParameters().GetCurve().DecodePoint(point, ss, ss.MaxRetrievable());

    cout << ""Result after decompression X: "" << std::hex << point.x << endl;
    cout << ""Result after decompression Y: "" << std::hex << point.y << endl;

    return 0;
}

I hope this is the answer to your question. I was using ECDH, but it should work equally well with ECDSA class.
","861","<crypto++><ecdsa>","1","1","2","2017-08-21 11:58:23","","1","","608639","","2016-04-11 07:42:17","2014-01-15 03:05:12",""
"37344128","How to generate same type of ecdsa keypair in java as generated by openssl?","I am executing the following command to generate ecdsa keypair on my machine:
openssl ecparam -genkey -name secp256k1 -noout -outform DER -out private.key and on executing this next command openssl ec -inform DER -in private.key -noout -text, I get the following output:
read EC key
Private-Key: (256 bit)
priv:
    //private key
pub: 
    04:64:0a:f7:e6:e1:a9:7f:d3:b2:ec:ad:f1:41:96:
    ee:c1:c2:e7:02:4a:54:42:ab:e8:da:9f:88:e1:02:
    46:aa:32:91:38:b5:9e:37:fc:96:d9:36:02:07:de:
    74:59:c4:a8:e0:2b:21:3a:d4:70:7d:5e:92:54:22:
    65:80:0f:df:fd
ASN1 OID: secp256k1

Now what I'm interested in is the above public key without colons i.e. 04640af7e6e1a97fd3b2ecadf14196eec1c2e7024a5442abe8da9f88e10246aa329138b59e37fc96d9360207de7459c4a8e02b213ad4707d5e92542265800fdffd. I need to send to this public key to an api call which validates whether the key is valid or not. The key generated by openssl when sent with the api call is accepted by the server as valid.
But the public ecdsa key generated in java when sent with the api call is rejected. I'm using following code to generate keypair
public KeyPair getECDSAKeyPair() throws NoSuchProviderException, NoSuchAlgorithmException,
        InvalidAlgorithmParameterException {
    KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance(""ECDSA"", ""SC"");
    ECGenParameterSpec spec = new ECGenParameterSpec(""secp256k1"");
    keyPairGenerator.initialize(spec, new SecureRandom());
    return keyPairGenerator.generateKeyPair();
}

public String getHexPublicKeyString(KeyPair keypair) {
    PublicKey publicKey =  keypair.getPublic();
    return Hex.toHexString(publicKey.getEncoded());
}

My question is how can I generate same type of ECDSA keypair as generated by the OpenSSL? And what is the difference between the keys generated by OpenSSL and the code generated by java such that key generated by OpenSSL is accepted whereas key generated by java is rejected?
","I was able to generate the required public through following method using SpongyCastle:
public static String getHexEncodedPublicKey(PublicKey publicKey) throws IOException, InvalidKeyException {
    ECPublicKeyParameters ecPublicKeyParameters
            = (ECPublicKeyParameters) ECUtil.generatePublicKeyParameter(publicKey);
    byte[] encoded = ecPublicKeyParameters.getQ().getEncoded(false);
    return Hex.toHexString(encoded);
}

","860","<java><android><openssl><ecdsa><spongycastle>","0","0","1","2016-05-28 10:18:25","37497786","4","","608639","","2016-05-20 14:54:18","2016-05-20 10:20:03",""
"30126646","Sending signature data in response APDU - Java Card","I would like to sign some data (the MESSAGE byte array) on my Java Card and then return the signature in a response APDU. My code works fine (or at least I think it does and it returns 9000) without the line apdu.sendBytes(BAS, sSignLen), but when I uncomment it I get an unknown error (0xC000002B (Unknown error.)).
When I try to send other data in a response APDU it works flawlessly.
apdu.setIncomingAndReceive();
Util.arrayCopyNonAtomic(MESSAGE, (short) 0, buffer, (short) 0, (short) MESSAGE.length);
apdu.setOutgoingAndSend((short) 0, (short) MESSAGE.length);

Here is my code. What am I doing wrong or missing? Thank you!
public class TestApplet extends Applet {

    ...

    private final static byte SIGN = (byte) 0x01;

    ...

    private final static byte[] MESSAGE = new byte[] { 'M', 'e', 's', 's', 'a', 'g', 'e' };

    final static short BAS = 0;

    public void process(APDU apdu) {
        if (this.selectingApplet())
            return;

        byte buffer[] = apdu.getBuffer();

        ...

        switch (buffer[ISO7816.OFFSET_INS]) {
        case SIGN:
            try {
                ECDSAKeyPair = Secp256k1Domain.getKeyPairParameter();
                ECDSAKeyPair.genKeyPair();

                ECDSAPublicKey = (ECPublicKey) ECDSAKeyPair.getPublic();
                ECDSAPrivateKey = (ECPrivateKey) ECDSAKeyPair.getPrivate();

                ECDSASignature = Signature.getInstance(Signature.ALG_ECDSA_SHA, false);

                short signLen = 0;

                byte[] signatureArray = new byte[70];

                ECDSASignature.init(ECDSAPrivateKey, Signature.MODE_SIGN);
                signLen = ECDSASignature.sign(MESSAGE, BAS, (short) MESSAGE.length, signatureArray, BAS);

                apdu.setIncomingAndReceive();
                Util.arrayCopyNonAtomic(signatureArray, (short) 0, buffer, (short) 0, (short) signatureArray.length);
                apdu.setOutgoingAndSend((short) 0, (short) signatureArray.length);
            } catch (CryptoException c) {
                short reason = c.getReason();
                ISOException.throwIt((short) ((short) (0x9C00) | reason));
            }

            break;

        ...

        return;
    }
}

","It's probably that signLen is larger than the Ne value (incorrectly called Le in the JavaCard specifications). You are also abusing the Le value to mean (short) MESSAGE.length by the way. Ne indicates the maximum number of bytes that are expected to be send back.
","839","<digital-signature><smartcard><javacard><apdu><ecdsa>","1","2","1","2015-05-09 21:25:49","30129738","0","2","4697483","","2015-05-09 21:25:49","2015-05-08 14:46:26",""
"40679178","ECDSA private and public keys - how to get SecretKey?","I have used generateKeyPair() method to generate 2 different KeyPair using ECDSA algorithm.
public KeyPair generateKeyPair(){           

    ECNamedCurveParameterSpec spec = ECNamedCurveTable.getParameterSpec(""secp192r1"");
    KeyPairGenerator g = KeyPairGenerator.getInstance(""ECDSA"", ""BC"");
    g.initialize(spec, new SecureRandom());

    return g.generateKeyPair(); 
}

Then I used PrivateKey and PublicKey from separate KeyPair to get combined SecretKey:
private SecretKey generateSecretKey(PrivateKey privateKey, PublicKey publicKey) {

    KeyAgreement ka = KeyAgreement.getInstance(""ECDH"");
    ka.init(privateKey);
    ka.doPhase(publicKey),
            true);

    return ka.generateSecret(""AES"");
}

But I get at ka.generateSecret(""AES""):
Exception in thread ""main"" java.lang.ArrayIndexOutOfBoundsException
    at java.lang.System.arraycopy(Native Method)
    at org.bouncycastle.jcajce.provider.asymmetric.util.BaseAgreementSpi.engineGenerateSecret(Unknown Source)
    at javax.crypto.KeyAgreement.generateSecret(KeyAgreement.java:648)

If I use ECDSA, I get:
Exception in thread ""main"" java.security.NoSuchAlgorithmException: Algorithm ECDSA not available
   at javax.crypto.KeyAgreement.getInstance(KeyAgreement.java:184)

Using DH throws:
Exception in thread ""main"" java.security.InvalidKeyException: DHKeyAgreement requires DHPrivateKey
    at org.bouncycastle.jcajce.provider.asymmetric.dh.KeyAgreementSpi.engineInit(Unknown Source)
    at javax.crypto.KeyAgreement.implInit(KeyAgreement.java:346)
    at javax.crypto.KeyAgreement.chooseProvider(KeyAgreement.java:378)
    at javax.crypto.KeyAgreement.init(KeyAgreement.java:470)

How to get combined SecretKey from PrivateKey and PublicKey which are generated using ECDSA algorithm?
","A key agreement protocol usually works between two parties each of them having an own ECDS public and private key (hence we have four different keys). Are you sure that is what you want?
Therefore when you agree to a key you need the private key of party A and the public key of party B. And on the other end of the connection you use the private key of party B and the public key of party A.
The ECDH key agreement algorithm you selected is described in RFC3278 - for details read it.
","838","<encryption><aes><bouncycastle><elliptic-curve><ecdsa>","1","0","2","2016-11-21 14:49:08","40722936","4","","5962766","","2016-11-21 14:42:41","2016-11-18 14:11:41",""
"40679178","ECDSA private and public keys - how to get SecretKey?","I have used generateKeyPair() method to generate 2 different KeyPair using ECDSA algorithm.
public KeyPair generateKeyPair(){           

    ECNamedCurveParameterSpec spec = ECNamedCurveTable.getParameterSpec(""secp192r1"");
    KeyPairGenerator g = KeyPairGenerator.getInstance(""ECDSA"", ""BC"");
    g.initialize(spec, new SecureRandom());

    return g.generateKeyPair(); 
}

Then I used PrivateKey and PublicKey from separate KeyPair to get combined SecretKey:
private SecretKey generateSecretKey(PrivateKey privateKey, PublicKey publicKey) {

    KeyAgreement ka = KeyAgreement.getInstance(""ECDH"");
    ka.init(privateKey);
    ka.doPhase(publicKey),
            true);

    return ka.generateSecret(""AES"");
}

But I get at ka.generateSecret(""AES""):
Exception in thread ""main"" java.lang.ArrayIndexOutOfBoundsException
    at java.lang.System.arraycopy(Native Method)
    at org.bouncycastle.jcajce.provider.asymmetric.util.BaseAgreementSpi.engineGenerateSecret(Unknown Source)
    at javax.crypto.KeyAgreement.generateSecret(KeyAgreement.java:648)

If I use ECDSA, I get:
Exception in thread ""main"" java.security.NoSuchAlgorithmException: Algorithm ECDSA not available
   at javax.crypto.KeyAgreement.getInstance(KeyAgreement.java:184)

Using DH throws:
Exception in thread ""main"" java.security.InvalidKeyException: DHKeyAgreement requires DHPrivateKey
    at org.bouncycastle.jcajce.provider.asymmetric.dh.KeyAgreementSpi.engineInit(Unknown Source)
    at javax.crypto.KeyAgreement.implInit(KeyAgreement.java:346)
    at javax.crypto.KeyAgreement.chooseProvider(KeyAgreement.java:378)
    at javax.crypto.KeyAgreement.init(KeyAgreement.java:470)

How to get combined SecretKey from PrivateKey and PublicKey which are generated using ECDSA algorithm?
","It works correctly and returns curve size shared secret after removing ""AES"" argument from return ka.generateSecret();:
private SecretKey generateSecretKey(PrivateKey privateKey, PublicKey publicKey) {

    KeyAgreement ka = KeyAgreement.getInstance(""ECDH"");
    ka.init(privateKey);
    ka.doPhase(publicKey, true);

    return ka.generateSecret();
}

","838","<encryption><aes><bouncycastle><elliptic-curve><ecdsa>","1","1","2","2016-11-21 14:49:08","40722936","4","","5962766","","2016-11-21 14:42:41","2016-11-18 14:11:41",""
"21531014","BouncyCastle ESDSA implementation","I'm implementing ECDSA in C# using the BouncyCastle library and I'm having a hard time understanding TestECDsa192bitPrime() example.
FpCurve curve = new FpCurve(
  new BigInteger(
    ""6277101735386680763835789423207666416083908700390324961279""), // q
  new BigInteger(
    ""fffffffffffffffffffffffffffffffefffffffffffffffc"", 16), // a
  new BigInteger(
    ""64210519e59c80e70fa7e9ab72243049feb8deecc146b9b1"", 16)); // b

ECDomainParameters parameters = new ECDomainParameters(curve,
  curve.DecodePoint(Hex.Decode(
    ""03188da80eb03090f67cbf20eb43a18800f4ff0afd82ff1012"")), // G
    new BigInteger(
      ""6277101735386680763835789423176059013767194773182842284081"")); // n

ECPrivateKeyParameters priKey = new ECPrivateKeyParameters(
  ""ECDSA"",
  new BigInteger(
    ""651056770906015076056810763456358567190100156695615665659""), // d
  parameters);

ParametersWithRandom param = new ParametersWithRandom(priKey, k);
ECDsaSigner ecdsa = new ECDsaSigner();
ecdsa.Init(true, param);
curve.DecodePoint(Hex.Decode(
  ""0262b12d60690cdcf330babab6e69763b471f994dd702d16a5"")), // Q
  parameters);

In the above example how BouncyCastle directly calculated G( Basepoint) and Q( public key).
","This is a test to ensure signature process is correct. The values of G and Q were taken from X9.62 standard from 1998, section J.3.1, page 152, ECDSA over the field Fp, an example with 192 bit prime. 
This paper is not public, but the same values can be found on page 26 of Mathematical routines for the NIST prime elliptic curves paper.
","834","<c#><bouncycastle><elliptic-curve><ecdsa>","1","2","1","2014-02-04 19:44:43","21561907","0","","642653","","2014-02-04 19:36:26","2014-02-03 15:20:17",""
"44010018","Signing PDF from Pkcs11Interop for CKM_ECDSA_SHA256 using SoftHSM 2.2.0 (ECDSA with SHA256) C# .net","I am trying to sign Pdf documents using Pkcs11Interop .net library.
I need to use ECDSA encryption algorithm with SHA256 hash algorithm.
And I am using SoftHSM 2.2.0 for storing private keys.
I found an CKM enum, CKM_ECDSA_SHA256, which I am passing while creating an object of class mechanism for calling the Sign method of Session.
I am getting the response from the ""Signdata"" method, however, on opening the Pdf files generated after signing give an error ""Signature Invalid"".
Here is the code snippet for Signdata method call. 
I don't get any error or exception in the code, however, the pdf as I have mentioned are showing signature invalid.
private Pkcs11 _pkcs11;
private Slot _slot;
private Session _session;

try
{
   _pkcs11 = new Pkcs11(hsmCryptoApi, true);
}
catch (Pkcs11Exception ex)
{
   if (ex.RV == CKR.CKR_CANT_LOCK)
      _pkcs11 = new Pkcs11(hsmCryptoApi, false);
   else
       throw ex;
}

_slot = FindSlot(_pkcs11, _certificateInformation.TokenLabel);
_session = _slot.OpenSession(true);

using (Mechanism mechanism = new Mechanism(CKM.CKM_ECDSA_SHA256))
{
  _session.Login(CKU.CKU_USER, passowrd);
  byte[] signedHash = _session.Sign(mechanism, GetPrivateKeyHandle(), message);
  _session.Logout();
  return signedHash;
}

private ObjectHandle GetPrivateKeyHandle()
{
  string keyLabel = _certificateInformation.KeyLabel;
  List<ObjectAttribute> searchTemplate = new List<ObjectAttribute>();
  searchTemplate.Add(new ObjectAttribute(CKA.CKA_CLASS, CKO.CKO_PRIVATE_KEY));
  searchTemplate.Add(new ObjectAttribute(CKA.CKA_LABEL, keyLabel));
  List<ObjectHandle> foundObjects = _session.FindAllObjects(searchTemplate);
  return foundObjects[0]; 
}


Please tell me if SoftHSM 2.2.0 supports ECDSA_P256 with SHA256 or not ?? 
If not, then is there any way to enable the support ?? 
If it does support, please help me how to fix this ??
It looks like it want me to pass ECDSA_Param, does anybody have any code snippet for passing the ECDSA_Param

","I think you need to construct ECDSA-Sig-Value structure and fill it with the data from your signedHash variable.
PKCS#11 v2.20 chapter 12.3.1:

For the purposes of these mechanisms, an ECDSA signature is an octet
  string of even length which is at most two times nLen octets, where
  nLen is the length in octets of the base point order n. The signature
  octets correspond to the concatenation of the ECDSA values r and s,
  both represented as an octet string of equal length of at most nLen
  with the most significant byte first. If r and s have different octet
  length, the shorter of both must be padded with leading zero octets
  such that both have the same octet length. Loosely spoken, the first
  half of the signature is r and the second half is s. For signatures
  created by a token, the resulting signature is always of length 2nLen.
  For signatures passed to a token for verification, the signature may
  have a shorter length but must be composed as specified before.

RFC5753 chapter 7.2:

When using ECDSA with SignedData, ECDSA signatures are encoded using
  the type:
ECDSA-Sig-Value ::= SEQUENCE {
    r INTEGER,
    s INTEGER }

ECDSA-Sig-Value is specified in [PKI-ALG].  Within CMS,
  ECDSA-Sig-Value is DER-encoded and placed within a signature field of
  SignedData.

Following method uses BouncyCastle library to constructs DER-encoded ECDSA-Sig-Value structure:
public static byte[] ConstructEcdsaSigValue(byte[] rs)
{
    if (rs == null)
        throw new ArgumentNullException(nameof(rs));

    if (rs.Length < 2 || rs.Length % 2 != 0)
        throw new ArgumentException(""Invalid length"", nameof(rs));

    int halfLen = rs.Length / 2;

    byte[] half1 = new byte[halfLen];
    Array.Copy(rs, 0, half1, 0, halfLen);
    var r = new Org.BouncyCastle.Math.BigInteger(1, half1);

    byte[] half2 = new byte[halfLen];
    Array.Copy(rs, halfLen, half2, 0, halfLen);
    var s = new Org.BouncyCastle.Math.BigInteger(1, half2);

    var derSequence = new Org.BouncyCastle.Asn1.DerSequence(
        new Org.BouncyCastle.Asn1.DerInteger(r),
        new Org.BouncyCastle.Asn1.DerInteger(s));

    return derSequence.GetDerEncoded();
}

","825","<c#><pkcs#11><ecdsa><softhsm><pkcs11interop>","3","2","2","2017-06-26 21:00:43","44018124","1","2","3325704","","2017-06-26 21:00:43","2017-05-16 19:28:42",""
"44010018","Signing PDF from Pkcs11Interop for CKM_ECDSA_SHA256 using SoftHSM 2.2.0 (ECDSA with SHA256) C# .net","I am trying to sign Pdf documents using Pkcs11Interop .net library.
I need to use ECDSA encryption algorithm with SHA256 hash algorithm.
And I am using SoftHSM 2.2.0 for storing private keys.
I found an CKM enum, CKM_ECDSA_SHA256, which I am passing while creating an object of class mechanism for calling the Sign method of Session.
I am getting the response from the ""Signdata"" method, however, on opening the Pdf files generated after signing give an error ""Signature Invalid"".
Here is the code snippet for Signdata method call. 
I don't get any error or exception in the code, however, the pdf as I have mentioned are showing signature invalid.
private Pkcs11 _pkcs11;
private Slot _slot;
private Session _session;

try
{
   _pkcs11 = new Pkcs11(hsmCryptoApi, true);
}
catch (Pkcs11Exception ex)
{
   if (ex.RV == CKR.CKR_CANT_LOCK)
      _pkcs11 = new Pkcs11(hsmCryptoApi, false);
   else
       throw ex;
}

_slot = FindSlot(_pkcs11, _certificateInformation.TokenLabel);
_session = _slot.OpenSession(true);

using (Mechanism mechanism = new Mechanism(CKM.CKM_ECDSA_SHA256))
{
  _session.Login(CKU.CKU_USER, passowrd);
  byte[] signedHash = _session.Sign(mechanism, GetPrivateKeyHandle(), message);
  _session.Logout();
  return signedHash;
}

private ObjectHandle GetPrivateKeyHandle()
{
  string keyLabel = _certificateInformation.KeyLabel;
  List<ObjectAttribute> searchTemplate = new List<ObjectAttribute>();
  searchTemplate.Add(new ObjectAttribute(CKA.CKA_CLASS, CKO.CKO_PRIVATE_KEY));
  searchTemplate.Add(new ObjectAttribute(CKA.CKA_LABEL, keyLabel));
  List<ObjectHandle> foundObjects = _session.FindAllObjects(searchTemplate);
  return foundObjects[0]; 
}


Please tell me if SoftHSM 2.2.0 supports ECDSA_P256 with SHA256 or not ?? 
If not, then is there any way to enable the support ?? 
If it does support, please help me how to fix this ??
It looks like it want me to pass ECDSA_Param, does anybody have any code snippet for passing the ECDSA_Param

","Just thought of sharing the solution which worked for me. In the above mentioned code snippet I added the below things:
   using (Mechanism mechanism = new Mechanism(CKM.CKM_ECDSA))
        {
          _session.Login(CKU.CKU_USER, passowrd);
          byte[] signedHash = _session.Sign(mechanism, GetPrivateKeyHandle(), GetMessageDigest(message));
          _session.Logout();
          return ConstructEcdsaSigValue(signedHash);
        }

    private byte[] GetMessageDigest(byte[] message)
    {
       using (Mechanism mechanism = new Mechanism(CKM_SHA256))
       {
         return _session.Digest(mechanism, message);
        }
    }

    public static byte[] ConstructEcdsaSigValue(byte[] rs)
    {
        if (rs == null)
            throw new ArgumentNullException(nameof(rs));

        if (rs.Length < 2 || rs.Length % 2 != 0)
            throw new ArgumentException(""Invalid length"", nameof(rs));

        int halfLen = rs.Length / 2;

        byte[] half1 = new byte[halfLen];
        Array.Copy(rs, 0, half1, 0, halfLen);
        var r = new Org.BouncyCastle.Math.BigInteger(1, half1);

        byte[] half2 = new byte[halfLen];
        Array.Copy(rs, halfLen, half2, 0, halfLen);
        var s = new Org.BouncyCastle.Math.BigInteger(1, half2);

        var derSequence = new Org.BouncyCastle.Asn1.DerSequence(
            new Org.BouncyCastle.Asn1.DerInteger(r),
            new Org.BouncyCastle.Asn1.DerInteger(s));

        return derSequence.GetDerEncoded();
    }

","825","<c#><pkcs#11><ecdsa><softhsm><pkcs11interop>","3","0","2","2017-06-26 21:00:43","44018124","1","2","3325704","","2017-06-26 21:00:43","2017-05-16 19:28:42",""
"40331595","ECC key pair - how to print private key?","I implement ""Key Pair Generation"" using secp192r1 curve. But private key did not display in string form like public key.

Here is my code:
package lam.bk;
import java.security.*;
import java.security.spec.*;

public class ECCKeyGeneration {
    public static void main(String[] args) throws Exception {
        KeyPairGenerator kpg;
        kpg = KeyPairGenerator.getInstance(""EC"",""SunEC"");
        ECGenParameterSpec ecsp;
        ecsp = new ECGenParameterSpec(""secp192r1"");
        kpg.initialize(ecsp);

        KeyPair kp = kpg.genKeyPair();
        PrivateKey privKey = kp.getPrivate();
        PublicKey pubKey = kp.getPublic();

        System.out.println(pubKey.toString());
        System.out.println(privKey.toString()); 
    }
}

","You will need to convert the Private Key to PEM format before you can get its openssl string representation. In java you can do this in a programmatic manner by using BouncyCastle library's PEMWriter
","805","<java><private-key><elliptic-curve><ecdsa><key-pair>","0","0","2","2018-07-08 08:21:47","","1","","472495","","2018-07-08 08:21:47","2016-10-30 17:18:07",""
"40331595","ECC key pair - how to print private key?","I implement ""Key Pair Generation"" using secp192r1 curve. But private key did not display in string form like public key.

Here is my code:
package lam.bk;
import java.security.*;
import java.security.spec.*;

public class ECCKeyGeneration {
    public static void main(String[] args) throws Exception {
        KeyPairGenerator kpg;
        kpg = KeyPairGenerator.getInstance(""EC"",""SunEC"");
        ECGenParameterSpec ecsp;
        ecsp = new ECGenParameterSpec(""secp192r1"");
        kpg.initialize(ecsp);

        KeyPair kp = kpg.genKeyPair();
        PrivateKey privKey = kp.getPrivate();
        PublicKey pubKey = kp.getPublic();

        System.out.println(pubKey.toString());
        System.out.println(privKey.toString()); 
    }
}

","The code below will output 24 bytes private key for secp192r1 curve:
private String getPrivateKeyAsHex(PrivateKey privateKey) {

    ECPrivateKey ecPrivateKey = (ECPrivateKey) privateKey;
    byte[] privateKeyBytes = new byte[24];
    writeToStream(privateKeyBytes, 0, ecPrivateKey.getS(), 24);

    return Hex.toHexString(privateKeyBytes);
}

private void writeToStream(byte[] stream, int start, BigInteger value, int size) {
    byte[] data = value.toByteArray();
    int length = Math.min(size, data.length);
    int writeStart = start + size - length;
    int readStart = data.length - length;
    System.arraycopy(data, readStart, stream, writeStart, length);
}

","805","<java><private-key><elliptic-curve><ecdsa><key-pair>","0","0","2","2018-07-08 08:21:47","","1","","472495","","2018-07-08 08:21:47","2016-10-30 17:18:07",""
"20992760","Understanding BCryptSignHash output signature","I have signed a hash value in windows using BCryptSignHash with ECDSA algorithm. The output signature buffer is of length 64 bytes. I also generated the public and private key blobs using BCryptGenerateKeyPair function (BCRYPT_ECDSA_P256_ALGORITHM algorithm) with which i signed the hash.
I have to verify this signature with this key pair in linux. I am able to decipher the public-private key pair that got generated, using the link ""http://msdn.microsoft.com/en-us/library/windows/desktop/aa375520%28v=vs.85%29.aspx"" and able to use the same in linux.
The 64-byte signature generated should ideally be signature pair (r,s) (http://en.wikipedia.org/wiki/Elliptic_Curve_DSA).
Is there a way to understand the 64-bytes signature generated so that i can map the signature blob contents to (r,s) pair in linux and verify it?
Or is there a simpler way to verify the generated signature in linux?
Thanks,
F
","
Is there a way to understand the 64-bytes signature generated so that I can map the signature blob contents to (r,s) pair in linux and verify it?

The r and s are in P1363 format, which is simply a concatenation of r and s in a 2's compliment format. That is, the signature is simply r || s.
You need to know the hash to use this format. For example, SHA1 will create a r of 20 bytes and an s of 20 bytes. If r or s is ""too short"", then it is padded on the left with 0's.
Java and OpenPGP are different than P1363. Java and OpenPGP use an ASN.1 encoding:
SEQUENCE ::= {
  r INTEGER,
  s INTEGER
}

Depending what library you use on Linux, you may have to convert between the formats. Cryptographic Interoperability: Digital Signatures gives examples of signing and verifying using a few different libraries.


Or is there a simpler way to verify the generated signature in linux?

Try Crypto++. I believe Microsoft and Crypto++ uses the same signature format, so you won't need to convert. See Elliptic Curve Digital Signature Algorithm for details.
","803","<linux><cryptoapi><ecdsa><cng>","1","2","1","2014-06-10 12:18:33","21048027","0","","","","","2014-01-08 10:20:42",""
"48392334","How to sign a message with an ECDSA string privateKey","I'm trying to sign a message with an ECDSA privateKey but with a type string.
The problem is in order to sign the message I need to use the ""Sign"" method from the ecdsa package.
func (priv *PrivateKey) Sign(rand io.Reader, msg []byte, opts crypto.SignerOpts) ([]byte, error)

This method can only take a PrivateKey type.
How can I convert my string private key to this type? Or is another method available ?
","You can parse DER-encoded elliptic curve private keys using the standard library's x509.ParseECPrivateKey.
derKey := []byte(keyString)
privKey, err := x509.ParseECPrivateKey(derKey)
if err != nil {
  panic(err)
}
signedMsg, err := privKey.Sign(randReader, msg, otps)

If your key is in PEM format, you must first decode it using pem.Decode:
var block *pem.Block
if block, _ = pem.Decode([]byte(keyString)); block == nil {
    panic(""expected pem block"")
}
privKey, err := x509.ParseECPrivateKey(block.Bytes)
// etc... the rest is the same

","787","<go><ecdsa>","1","1","1","2018-01-23 10:33:37","","0","","4966953","","2018-01-23 10:19:14","2018-01-23 00:21:35",""
"38934615","Not sure how to generate an ECDSA signature, given a private key and a message","I'm following Apple's guide towards composing a CloudKit Web Services request. The bit I'm having trouble with is Step 2, under ""Authenticate Web Service Requests"":


Compute the ECDSA signature of this message with your private key.


Before getting to this point, I generated my certificate, a .pem file, which when opening it in a text editor shows me my private key, so I have that in string format too.
I've also followed the steps for generating what it refers to as a message, which I now have as a string.
So given that I have a private key, (or the .pem file if required), and a message as a string, it should in theory be fairly simple for me to get a ECDSA signature of the message, computed with my private key. But here's where I'm struggling. Libraries that I've found online seem to take a far more complicated approach, with different moving parts, no reference to a .pem file and talk of generating new public/private keys.
Any help with this step would be greatly appreciated.
","It appears that the documentation and the actual API for Ruby’s OpenSSL EC support are both currently rather lacking. In particular, in Ruby <= 2.3.1 the OpenSSL::PKey::EC doesn’t follow the same API as RSA and DSA keys for signing and verifying. What you would want to do, but currently can’t with EC keys, is this (all the code here assumes you have called require 'openssl' somewhere):
# Get the key, here I'm reading the file
priv_key = OpenSSL::PKey.read(File.read('eckey.pem')) 

# This should be the appropriately formatted string
data = ""some data to sign""

# The hash algorithm, I assume SHA256 is being used
digest = OpenSSL::Digest::SHA256.new

# This doesn't work in 2.3.1, but does in 2.4.0-preview1
signature = priv_key.sign(digest, data)

As I note in the comments, this does work in Ruby 2.4.0-preview1, but that’s likely not much use to you.
To get it working with current Ruby, you need to do something like this:
# As before:
priv_key = OpenSSL::PKey.read(File.read('eckey.pem'))
data = ""some data to sign""

signature = priv_key.dsa_sign_asn1(OpenSSL::Digest::SHA256.digest(data))

Both these techniques give you a binary string. I think you will need to base64 encode it before adding it as your request header.
To extract the public key to check the signature verifies is also a bit tricky (although you could just use the openssl command line and read in the file). The public_key methods returns an OpenSSL::PKey::EC::Point object rather than an actual key, so we need to recreate one from the private key. The verify method does work on Ruby 2.3.1:
pub = OpenSSL::PKey::EC.new(priv_key.group)
pub.public_key = priv_key.public_key

data = ""some data to sign""
digest = OpenSSL::Digest::SHA256.new

puts pub.verify(digest, sig, data)

The Apple page doesn’t appear to specify the hash algorithm to use, but from what I’ve seen it looks like SHA-256 is right. (Also I could have got this completely wrong and Apple are using a completely different format. I’d be keen to know whether or not this code works you you).
","778","<ruby-on-rails><ruby><cloudkit><ecdsa><cloudkit-web-services>","5","4","1","2016-08-13 19:21:42","38936194","0","1","","","","2016-08-13 16:12:04",""
"31427253","ECDSA prime256v1 cross-platform signature verification fail","I need to verify a signature with Java/Android and an ATEC108A Chip which is created in a .Net environment. (Using SunEC and AndroidOpenSSL)
The signature is created in .Net using BCrypt, the keys are also created using BCrypt and stored on the Microsoft key store. The signature and public key can sent to the AT chip and it verifies, however it does not work on Android.
Key / Signature Process:

The public key is exported from BCrypt in the x.509 key format which includes the identifiers for SHA256-ECDSA and the curve prime256v1 resulting in:
3059301306072A8648CE3D020106082A
8648CE3D03010703420004368711132B
BDB4C6D03F7DF4F4688F5F4F21A3B30B
EB1016648555A25B27C915CAB5C26B98
0FF792A0090BF1E131C175D9C66C8D79
3476489770869E09273816
The signature from BCrypt is in the 64-byte format, but android requires the sequence and length identifiers resulting in the signature as follows:
304502201
BD91B39A7447724223A4B3E9070A6FD5
33360F96B072998058AA73E572F48D80
22100
ED0BDC731080CFC82C8B8FB37D74CC18
3820343C2756671F0E1D813E469DD3D7
The message that has been used to sign and verify is ""Hello World"" which hashed is:
A591A6D40BF420404A011733CFB7B190
D62C65BF0BCDA32B57B277D9AD9F146E

Android Process:

Create the X509 key spec and public key from the above key byte array:
X509EncodedKeySpec keySpec = new X509EncodedKeySpec(encoded);
KeyFactory kf = KeyFactory.getInstance(""EC"", ""AndroidOpenSSL"");
pubKey = kf.generatePublic(keySpec);
Create signature using the AndroidOpenSSL provider:
Signature signature;
signature = Signature.getInstance(""SHA256withECDSA"", ""AndroidOpenSSL"");
signature.initVerify(pubKey);
Load the above hash array:
signature.update(hash);
Verify the above signature:
signature.verify(sign);

The signature and key above checks out on the AT chip (Also verified on ECDSA Sample which runs JavaScript-OpenSSL) but does not verify with AndroidOpenSSL.
Am I missing something simple or where can the problem be? 
The public key structure checks out on ASN.1 decoder and load successfully within the code (extracted and checked from the public key), the signature is in the expected format for Java and the hash values are the same on both sides.
","","777","<android><openssl><bcrypt><ecdsa>","5","","0","2015-07-15 09:59:12","","0","","","","","2015-07-15 09:59:12",""
"18078873","How should I use crypto:sign/4 properly?","I tried to use crypto:sign/4 to sign a message but failed. Could anyone show me how to sign a message using ECDSA in Erlang? Thanks. (I'm using Erlang version R16B01.)
The module code:
-module(message).

-compile(export_all).

go() ->
    {_PubKey, PriKey} = crypto:generate_key(ecdh, secp256k1),
    SigBin = sign_message(PriKey, ""Hello""),
    SigBin.

sign_message(PriKey, Msg) ->
    Algorithm = ecdsa,
    DigestType = sha256,
    MsgBin = list_to_binary(Msg),
    SigBin = crypto:sign(Algorithm, DigestType, MsgBin, PriKey),
    SigBin.

But it failed on a test run:
1> message:go().
** exception error: no function clause matching crypto:sign(ecdsa,sha256,
                                                        {digest,

        <<24,95,141,179,34,113,254,37,245,97,166,252,147,
        139,46,38,67,6,236,48,78,218,81,128,...>>},
        <<189,38,200,204,95,248,54,69,42,65,216,165,242,228,100,
        54,158,5,61,174,58,198,191,161,9,...>>) (crypto.erl, line 462)


Thanks to Paul, this error can be fixed by making the following change.
change:
SigBin = crypto:sign(Algorithm, DigestType, MsgBin, PriKey),

to:
SigBin = crypto:sign(Algorithm, DigestType, MsgBin, [PriKey, secp256k1]),

","The crypto:sign/4 and crypto:generate_key/2 functions are quite confusing for ECDSA as ECDSA requires domain parameters, unlike the other two supported algorithms.
The error message simply tells you that the parameters you are passing do not match any clause of the crypto:sign/4 function. You are probably passing an argument of the wrong type.
You can look at the source code of the called function to find out why no clause match your parameters. This is typically what you would do for your own functions. Yet here, crypto:sign/4 is a system function which is properly documented.
The documentation reads as follows:

sign(Algorithm, DigestType, Msg, Key) -> binary()
Types:
Algorithm = rsa | dss | ecdsa
Msg = binary() | {digest,binary()}
The msg is either the binary ""cleartext"" data to be signed or it is the hashed value of ""cleartext"" i.e. the digest (plaintext).
DigestType = digest_type()
Key = rsa_private() | dss_private() | [ecdh_private(),ecdh_params()]

Your first three arguments are obviously ok. The issue is with the key. Indeed, your code goes like this:
{_PubKey, PriKey} = crypto:generate_key(ecdh, secp256k1)

Looking at the documentation of crypto:generate_key/2, you'll find out that in the case of ECDH, PrivKey is of type ecdh_private() and not [ecdh_private(),ecdh_params()] as crypto:sign/4 expects.
A fix would be to pass [PrivKey, secp256k1] to your sign_message function, as the sign function requires the identification of the curve domain parameters through the sign key parameter.
","766","<encryption><erlang><sign><ecdsa>","1","6","1","2013-08-06 12:40:44","18080075","0","1","1028974","","2013-08-06 12:40:44","2013-08-06 11:24:52",""
"42608548","Create PrivateKey from base64 string ECDSA private key","I have ECDSA private key string in base64 (i check this string with regexp from this https://stackoverflow.com/a/8571649/7661555 answer).
And i try to generate PrivateKey instance from this string.
I include SpongyCastle in my project, and try to generate it with this code:
        PKCS8EncodedKeySpec privKeySpec = new PKCS8EncodedKeySpec(encKey);

        KeyFactory keyFactory = KeyFactory.getInstance(""ECDSA"", ""SC"");

        PrivateKey priv = keyFactory.generatePrivate(privKeySpec);

But when i run this code, i get next Exception:
W/System.err: java.security.spec.InvalidKeySpecException: encoded key spec not recognised
Can you tell me what i do wrong ?
P.S.
After generating PrivateKey, i want sign another string with it.
For this purpose i find next code:
        Signature sig = Signature.getInstance(""SHA256withECDSA"");
        sig.initSign(priv);
        sig.update(token.getBytes());

Is this right way? Or something in this can lead to another exception ?
","The regex which you have mentioned in your question, just checks whether a string is base64 encoded or not.
Can you share, how you are generating the base64 string from the EC private key?
    private String getBase64Value(PrivateKey privateKey) {
    return Base64.encodeToString(privateKey.getEncoded(), Base64.NO_WRAP);
}

private PrivateKey reconstructPrivateKey(String base64Value) throws InvalidKeySpecException, NoSuchAlgorithmException {
    KeyFactory kf = KeyFactory.getInstance(""EC"");
    byte[] bytes = Base64.decode(base64Value, Base64.NO_WRAP);
    return kf.generatePrivate(new PKCS8EncodedKeySpec(bytes));
}

","764","<android><ecdsa><spongycastle>","0","0","1","2017-04-11 03:18:51","","0","","-1","","2017-05-23 11:54:06","2017-03-05 12:50:53",""
"46519778","How to generate a Bitcoin address in Python 3.5/6?","I've tried pybitcoin already, but I get a ModuleError for ""services"". I've tried multiple scripts from Google but they are all for Python2.
I tried to use this to get started
import ecdsa
return ecdsa.SigningKey.generate(curve=ecdsa.SECP256k1).to_string()

but it returns bytes not a string. I assume it's a version issue because it's GitHub only mentions 3.1 and 3.2.
I want the addresses to be completely random. 
","","757","<python><bitcoin><ecdsa>","2","","0","2018-03-01 06:47:17","","1","","","","","2017-10-02 05:05:40",""
"36260869","Creating openssh public keys from private keys with pycrypto","How do I create DSA openssh-formatted public key with a given private key?
The openssh public key format looks like this:
ssh-dss AAAAB3NzaC1kc3MAAACBAKFY7ysDwhMf5j3IOmPg1ztzAodBzQHua5m7/IM8nEYdCDeLzI+Jx24pRDUKseRVC5DUIHU7sRtRpCMDmGBcJwxHF9G4ofrP5hlUaDTHeKHrOKgGdRzPw5xtExImwYfCn97HMc6OpQrsAysL7KCxQHgD41t7IEaSQRjK8zK2IBqJAAAAFQD6Wjepos/lp0Vw8mrRLMIEhocZpQAAAIBXJ+E3J+dMOIHlYpEYm6BmI92/YhAT3+4rfDORQkUtcgmyQiAJ4CWvOBrcwK7zpLZ/pNNujv3cc4whigAqnZm9f+x8LDT7iIZ3FGdvHFDxYiTZVJTv2g1kaS/AABG5KfsVVkV2TP+XO12EjoEjoNvgjA1Z0fSeeKeP8YQNgMNjFgAAAIAobgPabsJCnFuazy+WOoo9SgfqeafXbrsxWPbKV4mjbUKXbOASV4F35Vuk1DAFRRP2/xYxv2QsiW4F2wsGSlsfnvb8bbmhzFHU81BrPRd1R60JUCDnvwVYJlJUqIvgfYbi3AXuxaqK3cLKWIFZGrYGyd2x8DRNpE7SLDMfWY7Jgw== root@Server

Using pycrypto, same thing with RSA works just fine:
key.publickey().exportKey('OpenSSH')

Unfortunately, There is no exportKey() func for a DSA object.
I also have a similar issue with an ecdsa key. Bottom line, I need a python equivalent (for both DSA and ecdsa) to:
ssh-keygen -y -f /path/to/private_key > /path/to/public_key

","The expression:
 key.publickey().exportKey('OpenSSH')

to get the DSA public key in the OpenSSH format is supported by PyCryptodome, a PyCrypto fork.
","745","<python><openssh><pycrypto><ecdsa><dsa>","1","0","1","2016-03-30 10:37:53","36306354","0","","6123837","","2016-03-28 14:00:05","2016-03-28 10:56:00",""
"43984535","ECDsa Signing in .Net Core on Linux","I'm trying to create a C# implementation to send Pushes to Apple via their HTTP/2 APNS Endpoint with .Net core in Docker. Part of this requires sending an encrypted JWT Authorization Token along with the payload. With .Net core, I can sign the token when running on Windows, but when running in the Linux Docker image, it tips over loading the Key. 
When running in the .net Core Docker Image, I get a platformnotsupported Exception on loading the key.
    public static string SignES256(string privateKey, string header, string payload)
    {

        // This is the failing Call
        CngKey key = CngKey.Import(Convert.FromBase64String(privateKey), CngKeyBlobFormat.Pkcs8PrivateBlob);

        using (ECDsaCng dsa = new ECDsaCng(key))
        {
            var unsignedJwtData =
                System.Convert.ToBase64String(Encoding.UTF8.GetBytes(header)) + ""."" + System.Convert.ToBase64String(Encoding.UTF8.GetBytes(payload));
            var unsignedJwtDataBytes = Encoding.UTF8.GetBytes(unsignedJwtData);

            var signature =
                dsa.SignData(unsignedJwtDataBytes, 0, unsignedJwtDataBytes.Length, HashAlgorithmName.SHA256 );
            return unsignedJwtData + ""."" + System.Convert.ToBase64String(signature);
        }
    }

How can I do this from .Net Core on Linux?
Thanks.
","ECDsaCng is an ECDSA implementation using Windows CNG.  It's specific to Windows, so not supported on Linux.
The cross-platform way to do this would be
using (ECDsa ecdsa = ECDsa.Create())
{
    ecdsa.ImportParameters(Pkcs8ToParameters(privateKey));

    // the stuff in your current using 
}

Of course, PKCS#8 to ECParameters isn't the easiest thing in the world.  But we can give it a go.  In another answer there's a breakdown of building a PKCS#8 for RSA.
Let's take this blob:
308187020100301306072A8648CE3D020106082A8648CE3D030107046D306B02
0101042070A12C2DB16845ED56FF68CFC21A472B3F04D7D6851BF6349F2D7D5B
3452B38AA144034200048101ECE47464A6EAD70CF69A6E2BD3D88691A3262D22
CBA4F7635EAFF26680A8D8A12BA61D599235F67D9CB4D58F1783D3CA43E78F0A
5ABAA624079936C0C3A9

It breaks down like
30 /* SEQUENCE */
   81 87 (payload is 0x87 bytes)

   02 /* INTEGER */ 01 (1 byte) 00 // Integer: 0. // validate this

   30 /* SEQUENCE */ 13 (0x13 bytes)

      06 /* OBJECT IDENTIFIER */ 07 (7 bytes)
         2A8648CE3D0201  (1.2.840.10045.2.1 / ecPublicKey) // validate this

      06 /* OBJECT IDENTIFIER */ 08 (8 bytes)
         2A8648CE3D030107 (1.2.840.10045.3.1.7 / secp256r1) // save this, curveName

   04 /* OCTET STREAM (byte[]) */ 6D (0x6D bytes)
      // Since the constructed (0x20) bit isn't set in the tag normally we stop here,
      // but we know from the ecPublicKey context that this is also DER data.

      30 /* SEQUENCE */ 6B (0x6B bytes)

         02 /* Integer */ 01 (1 byte) 01 // Integer: 1. // validate this.

         04 /* OCTET STREAM (byte[]) */ 20 (0x20 bytes / 256 bits)
            70A12C2DB16845ED56FF68CFC21A472B3F04D7D6851BF6349F2D7D5B3452B38A // save this: D

         A1 /* CONSTRUCTED CONTEXT SPECIFIC 1 */ 44 (0x44 bytes)

            03 /* BIT STRING (byte[] if the first byte is 0x00) */ 66 (0x66 bytes)

               00 // Oh, good, it's a normal byte[]. Validate this.

               // Formatting will become apparent. Save this.
               04
               8101ECE47464A6EAD70CF69A6E2BD3D88691A3262D22CBA4F7635EAFF26680A8
               D8A12BA61D599235F67D9CB4D58F1783D3CA43E78F0A5ABAA624079936C0C3A9

The BIT STRING at the end is ""the public key"". Since it starts with 04 (which it usually will, unless the sender is mad at you) it represents an ""uncompressed point"", meaning the first half of what's left is the X coordinate, and the remainder is the Y coordinate.  So from this structure you might get something like
string curveOid;

// You can decode the OID, or special case it.
switch (curveName)
{
    case ""2A8648CE3D030107"":
        // secp256r1
        curveOid = ""1.2.840.10045.3.1.7"";
        break;
    case ""2B81040022""
        // secp384r1
        curveOid = ""1.3.132.0.34"";
        break;
    case ""2B81040023"":
        // secp521r1
        curveOid = ""1.3.132.0.35"";
        break;
    default:
        throw new InvalidOperationException();
 }

 return new ECParameters
 {
     Curve = ECCurve.CreateFromValid(curveOid),

     // We saved this.
     D = d,

     Q = new ECPoint
     {
        X = x,
        Y = y
     },
 }

This happens to be the key used in section D.1 (NIST P-256 / secp256r1) of Suite B Implementer’s Guide to FIPS 186-3 (ECDSA).
Since the EC key format is mercifully short on INTEGER values (which can require padding bytes) you can build a manual extractor for each keysize you want to support.  Or you can go the live DER reading route.  Or you can try to get your private key serialized in a more friendly form for your application.
","743","<apple-push-notifications><.net-core><ecdsa>","1","2","2","2019-05-08 13:27:40","","0","","","","","2017-05-15 16:27:46",""
"43984535","ECDsa Signing in .Net Core on Linux","I'm trying to create a C# implementation to send Pushes to Apple via their HTTP/2 APNS Endpoint with .Net core in Docker. Part of this requires sending an encrypted JWT Authorization Token along with the payload. With .Net core, I can sign the token when running on Windows, but when running in the Linux Docker image, it tips over loading the Key. 
When running in the .net Core Docker Image, I get a platformnotsupported Exception on loading the key.
    public static string SignES256(string privateKey, string header, string payload)
    {

        // This is the failing Call
        CngKey key = CngKey.Import(Convert.FromBase64String(privateKey), CngKeyBlobFormat.Pkcs8PrivateBlob);

        using (ECDsaCng dsa = new ECDsaCng(key))
        {
            var unsignedJwtData =
                System.Convert.ToBase64String(Encoding.UTF8.GetBytes(header)) + ""."" + System.Convert.ToBase64String(Encoding.UTF8.GetBytes(payload));
            var unsignedJwtDataBytes = Encoding.UTF8.GetBytes(unsignedJwtData);

            var signature =
                dsa.SignData(unsignedJwtDataBytes, 0, unsignedJwtDataBytes.Length, HashAlgorithmName.SHA256 );
            return unsignedJwtData + ""."" + System.Convert.ToBase64String(signature);
        }
    }

How can I do this from .Net Core on Linux?
Thanks.
","As others have pointed out, BouncyCastle is a cross-platform alternative to Windows CNG. None of the other examples out there were quite working for me, though. Maybe this will help someone:
<Project Sdk=""Microsoft.NET.Sdk"">

  <PropertyGroup>
    <TargetFramework>netstandard2.0</TargetFramework>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include=""Portable.BouncyCastle"" Version=""1.8.5"" />
    <PackageReference Include=""System.IdentityModel.Tokens.Jwt"" Version=""5.4.0"" />
  </ItemGroup>

</Project>


using System;
using System.IdentityModel.Tokens.Jwt;
using System.Security.Cryptography;
using Microsoft.IdentityModel.Tokens;
using Org.BouncyCastle.Crypto.Parameters;
using Org.BouncyCastle.Security;

public class ApnsTokenProvider
{
    private readonly JwtSecurityTokenHandler _tokenHandler = new JwtSecurityTokenHandler();

    public string GetToken(string teamId, string keyId, string privateKey)
    {
        using (var algorithm = GetEllipticCurveAlgorithm(privateKey))
        {
            var credentials = new SigningCredentials(new ECDsaSecurityKey(algorithm)
            {
                KeyId = keyId
            }, SecurityAlgorithms.EcdsaSha256);

            return _tokenHandler.CreateEncodedJwt(new SecurityTokenDescriptor
            {
                Issuer = teamId,
                SigningCredentials = credentials
            });
        }
    }

    private static ECDsa GetEllipticCurveAlgorithm(string privateKey)
    {
        var keyParams = (ECPrivateKeyParameters)PrivateKeyFactory
            .CreateKey(Convert.FromBase64String(privateKey));

        var q = keyParams.Parameters.G.Multiply(keyParams.D).Normalize();

        return ECDsa.Create(new ECParameters
        {
            Curve = ECCurve.CreateFromValue(keyParams.PublicKeyParamSet.Id),
            D = keyParams.D.ToByteArrayUnsigned(),
            Q =
            {
                X = q.XCoord.GetEncoded(),
                Y = q.YCoord.GetEncoded()
            }
        });
    }
}

","743","<apple-push-notifications><.net-core><ecdsa>","1","0","2","2019-05-08 13:27:40","","0","","","","","2017-05-15 16:27:46",""
"21024399","Get ECDSA signature with Crypto++","I have to get ECDSA signature in variable using Crypto++.
I tried to get it after launching SignMessage but signature is empty.
How could i get it?  
","Have you had a look at the Crypto++ wiki? There's a lot of stuff on Elliptic Curve Digital Signature Algorithm.
Its not really clear what you are doing or where things went wrong, so here's a copy and paste from the wiki:
Signing:
ECDSA<ECP, SHA1>::PrivateKey privateKey;
privateKey.Load(...);

AutoSeededRandomPool prng;
string message = ""Yoda said, Do or do not. There is no try."";
string signature;

StringSource ss1( message, true /*pump all*/,
    new SignerFilter( prng,
        ECDSA<ECP,SHA1>::Signer( privateKey ),
        new StringSink( signature )
    ) // SignerFilter
); // StringSource

Verification:
ECDSA<ECP, SHA1>::PublicKey publicKey;
publicKey.Load(...);

// Result of the verification process
bool result = false;

// Exactly what was signed in the previous step
string message = ...;
// Output from the signing operation in the previous step
string signature = ...;

StringSource ss2( signature+message, true /*pump all*/,
    new SignatureVerificationFilter(
        ECDSA<ECP,SHA1>::Verifier(publicKey),
        new ArraySink( (byte*)&result, sizeof(result) )
    ) // SignatureVerificationFilter
);

// Verification failure?
if( !result ) {...}

If you would like the verifcation to throw on a failure, then try:
static const int VERIFICATION_FLAGS = SIGNATURE_AT_BEGIN | THROW_EXCEPTION;
StringSource ss3( signature+message, true /*pump all*/,
    new SignatureVerificationFilter(
        ECDSA<ECP,SHA1>::Verifier(publicKey),
        NULL, /* No need for attached filter */
        VERIFICATION_FLAGS
    ) // SignatureVerificationFilter
);

","742","<c++><crypto++><ecdsa>","0","0","1","2018-10-25 04:42:50","","0","","2509078","","2018-10-25 04:42:50","2014-01-09 15:31:12",""
"46546230","Error incomplete definition of type 'struct ec_key_st' using OpenSSL","I am trying to compute public key from given secret by openssl. I get this error:
main.c:27: error: incomplete definition of type 'struct ec_key_st'
  printf(""d: %s\n"", BN_bn2hex(eckey->priv_key));
                              ~~~~~^

Here is my code:
#include <stdio.h>

#include <openssl/ec.h>
#include <openssl/ecdsa.h>
#include <openssl/bn.h>
#include <openssl/obj_mac.h>

int main()
{
  BN_CTX *ctx = BN_CTX_new();

  EC_KEY *eckey = EC_KEY_new();
  EC_GROUP *group = EC_GROUP_new_by_curve_name(NID_secp256k1);
  EC_KEY_set_group(eckey, group);

  BIGNUM *prv = BN_new();
  BN_hex2bn(&prv, ""b14fac12b3fa7dd6f2562a18d554fcd6818137ebb7e0d119ab0776d6407664f9"");
  EC_KEY_set_private_key(eckey, prv);

  EC_POINT *Q = EC_POINT_new(group);
  EC_POINT_mul(group, Q, prv, NULL, NULL, ctx);
  EC_KEY_set_public_key(eckey, Q);

  if (EC_KEY_check_key(eckey))
    printf(""Key succesfully checked.\n"");

  printf(""d: %s\n"", BN_bn2hex(eckey->priv_key));
  printf(""X: %s\n"", BN_bn2hex(&eckey->pub_key->X));
  printf(""Y: %s\n"", BN_bn2hex(&eckey->pub_key->Y));

  EC_GROUP_free (group); group = NULL;
  EC_KEY_free (eckey); eckey = NULL;
  return 0;
}

What is wrong with the above code? If I remove printf lines, it works fine. I would appreciate if anybody helps me getting rid of this error.
","You need to get ""ec_lcl.h"" header file from openssl libarary, in order to access members of struct ""ec_key_st"". Notice that ""ECKEY"" is defined as:
typedef struct ec_key_st EC_KEY;

So you put ""ec_lcl.h"" in your project folder and then change your code to this:
#include <stdio.h>

#include <openssl/ec.h>
#include <openssl/ecdsa.h>
#include <openssl/bn.h>
#include <openssl/obj_mac.h>

#include ""ec_lcl.h""

int main()
{
  BN_CTX *ctx = BN_CTX_new();

  struct ec_key_st *eckey = EC_KEY_new();
  EC_GROUP *group = EC_GROUP_new_by_curve_name(NID_secp256k1);
  EC_KEY_set_group(eckey, group);

  BIGNUM *prv = BN_new();
  BN_hex2bn(&prv, ""b14fac12b3fa7dd6f2562a18d554fcd6818137ebb7e0d119ab0776d6407664f9"");
  EC_KEY_set_private_key(eckey, prv);

  EC_POINT *Q = EC_POINT_new(group);
  EC_POINT_mul(group, Q, prv, NULL, NULL, ctx);
  EC_KEY_set_public_key(eckey, Q);

  if (EC_KEY_check_key(eckey))
    printf(""Key succesfully checked.\n"");

  printf(""d: %s\n"", BN_bn2hex(eckey->priv_key));
  printf(""X: %s\n"", BN_bn2hex(&eckey->pub_key->X));
  printf(""Y: %s\n"", BN_bn2hex(&eckey->pub_key->Y));

  EC_GROUP_free (group); group = NULL;
  EC_KEY_free (eckey); eckey = NULL;
  return 0;
}

","740","<c><openssl><ecdsa>","2","0","2","2018-11-22 08:03:47","","0","","608639","","2018-11-22 08:03:47","2017-10-03 13:49:52",""
"46546230","Error incomplete definition of type 'struct ec_key_st' using OpenSSL","I am trying to compute public key from given secret by openssl. I get this error:
main.c:27: error: incomplete definition of type 'struct ec_key_st'
  printf(""d: %s\n"", BN_bn2hex(eckey->priv_key));
                              ~~~~~^

Here is my code:
#include <stdio.h>

#include <openssl/ec.h>
#include <openssl/ecdsa.h>
#include <openssl/bn.h>
#include <openssl/obj_mac.h>

int main()
{
  BN_CTX *ctx = BN_CTX_new();

  EC_KEY *eckey = EC_KEY_new();
  EC_GROUP *group = EC_GROUP_new_by_curve_name(NID_secp256k1);
  EC_KEY_set_group(eckey, group);

  BIGNUM *prv = BN_new();
  BN_hex2bn(&prv, ""b14fac12b3fa7dd6f2562a18d554fcd6818137ebb7e0d119ab0776d6407664f9"");
  EC_KEY_set_private_key(eckey, prv);

  EC_POINT *Q = EC_POINT_new(group);
  EC_POINT_mul(group, Q, prv, NULL, NULL, ctx);
  EC_KEY_set_public_key(eckey, Q);

  if (EC_KEY_check_key(eckey))
    printf(""Key succesfully checked.\n"");

  printf(""d: %s\n"", BN_bn2hex(eckey->priv_key));
  printf(""X: %s\n"", BN_bn2hex(&eckey->pub_key->X));
  printf(""Y: %s\n"", BN_bn2hex(&eckey->pub_key->Y));

  EC_GROUP_free (group); group = NULL;
  EC_KEY_free (eckey); eckey = NULL;
  return 0;
}

What is wrong with the above code? If I remove printf lines, it works fine. I would appreciate if anybody helps me getting rid of this error.
","You're using OpenSSL 1.1, and they have decided that you shouldn't be poking about at the innards of their structures anymore.
eckey->priv_key was a valid way of accessing the private key in OpenSSL 1.0.x, but now the only correct way is EC_KEY_get0_private_key(eckey)
Likewise, for the public key it's EC_KEY_get0_public_key(eckey).
Both of these functions were declared during OpenSSL 1.0.x, so you can write the code to be the same between them.
So
printf(""d: %s\n"", BN_bn2hex(eckey->priv_key));
printf(""X: %s\n"", BN_bn2hex(&eckey->pub_key->X));
printf(""Y: %s\n"", BN_bn2hex(&eckey->pub_key->Y));

would become
{
    const BIGNUM* d = EC_KEY_get0_private_key(eckey);
    const EC_POINT* Q = EC_KEY_get0_public_key(eckey);
    const EC_GROUP* group = EC_KEY_get0_group(eckey);
    BIGNUM* x = BN_new();
    BIGNUM* y = BN_new();

    if (!EC_POINT_get_affine_coordinates_GFp(group, Q, x, y, null))
    {
        error();
    }

    printf(""d: %s\n"", BN_bn2hex(d));
    printf(""X: %s\n"", BN_bn2hex(x));
    printf(""Y: %s\n"", BN_bn2hex(y));

    BN_free(x);
    BN_free(y);
}

This keeps your code working, even when OpenSSL 1.1.1 decides to redo the struct layout which was hidden within ec_lcl.h
","740","<c><openssl><ecdsa>","2","5","2","2018-11-22 08:03:47","","0","","608639","","2018-11-22 08:03:47","2017-10-03 13:49:52",""
"52255715","PHP create ECDSA signature and verify with Golang","I try to make the app with PHP that creates ECDSA signature for some document and that signature is verified with Golang app.
I use private keys generated with openssl tool. It is prime256v1 curve key. Created with the command:
openssl ecparam -name prime256v1 -genkey -noout -out prime256v1-key.pem

In PHP i create signature using openssl_sign function.
And all my attempts to verify the signature with Golang fail. In Golang  use the crypto/ecdsa, crypto/elliptic packages.
There is my code.
PHP  
<?php

$stringtosign = ""my test string to sign"";

// Privcate key was geerated with openssl tool with the command
// openssl ecparam -name prime256v1 -genkey -noout -out prime256v1-key.pem
$cert = file_get_contents('prime256v1-key.pem');

$prkey = openssl_pkey_get_private($cert);

// we sign only hashes, because Golang lib can wok with hashes only
$stringtosign = md5($stringtosign);

// we generate 64 length signature (r and s 32 bytes length)
while(1) {

    openssl_sign($stringtosign, $signature, $prkey, OPENSSL_ALGO_SHA256);

    $rlen = ord(substr($signature,3,1));

    $slen = ord(substr($signature,5+$rlen,1));

    if ($slen != 32 || $rlen != 32) {
        // try other signature if length is not 32 for both parts
        continue;
    }
    $r = substr($signature,4,$rlen);
    $s = substr($signature,6+$rlen,$slen);

    $signature = $r.$s;

    break;
}
openssl_free_key($prkey);

$signature = bin2hex($signature);

echo $signature.""\n"";

Golang
package main

import (
    ""crypto/ecdsa""
    ""crypto/elliptic""
    ""crypto/md5""
    ""encoding/hex""
    ""fmt""
    ""io""
    ""io/ioutil""
    ""math/big""

    ""crypto/x509""

    ""encoding/pem""
)

func main() {
    stringtosign := ""my test string to sign""

    // This is outpur of PHP app. Signature generated by PHP openssl_sign
    signature := ""18d5c1d044a4a752ad91bc06499c72a590b2842b3d3b4c4b1086bfd0eea3e7eb5c06b77e15542e5ba944f3a1a613c24eabaefa4e2b2251bd8c9355bba4d14640""

    // NOTE . Error verificaion is skipped here

    // Privcate key was geerated with openssl tool with the command
    // openssl ecparam -name prime256v1 -genkey -noout -out prime256v1-key.pem
    prikeybytes, _ := ioutil.ReadFile(""prime256v1-key.pem"")

    p, _ := pem.Decode(prikeybytes)

    prikey, _ := x509.ParseECPrivateKey(p.Bytes)

    signatureBytes, _ := hex.DecodeString(signature)

    // make MD5 hash
    h := md5.New()
    io.WriteString(h, stringtosign)
    data := h.Sum(nil)

    // build key and verify data
    r := big.Int{}
    s := big.Int{}
    // make signature numbers
    sigLen := len(signatureBytes)
    r.SetBytes(signatureBytes[:(sigLen / 2)])
    s.SetBytes(signatureBytes[(sigLen / 2):])

    curve := elliptic.P256()

    // make public key from private key
    x := big.Int{}
    y := big.Int{}
    x.SetBytes(prikey.PublicKey.X.Bytes())
    y.SetBytes(prikey.PublicKey.Y.Bytes())
    rawPubKey := ecdsa.PublicKey{Curve: curve, X: &x, Y: &y}

    v := ecdsa.Verify(&rawPubKey, data, &r, &s)

    if v {
        fmt.Println(""Success verify!"")
        return
    }

    fmt.Println(fmt.Sprintf(""Signatire doed not match""))

}

What do i do wrong? Can anyone show me working example where Golang verifies signatre created with PHP?
I tried to use different versions in openssl_sign instead of OPENSSL_ALGO_SHA256  . Tried OPENSSL_ALGO_SHA1, OPENSSL_ALGO_SHA512
","The problem with your code seems to be, that you hash the string in PHP using MD5 before signing it using OPENSSL_ALGO_SHA256, which hashes what you sign (the MD5 hash) again, while in your Go program, you only have the first of these 2 hashes. To fix this, I would remove the MD5 step in the PHP code and replace the h := md5.New() line in your code with the hash used by your signature algorithm (h := sha256.New() in your example).
To elaborate a bit more on what theses signing functions do, I would first like to break signing and verifying down into the following steps:

Signing:


Hash the message
Encrypt the message's hash using the private key (this encrypted hash is the signature)

Verifying:


Hash the message
Decrypt the signature using the public key (this yields the hash which was encrypted while signing).
Compare the calculated and decrypted hashes. If they match, then the signature is correct.


Now the call to openssl_sign in your PHP code, does all the signing steps, while the call to ecdsa.Verify in Go, only does the second and third step of the verification process. And this is why it takes a hash as the second argument. So to verify a signature, you must implement the first verification step yourself, namely generating the hash. 
You must use the same hashing algorithm while signing and verifying, therefore you must use SHA256, not MD5, in your Go code (as you sign using OPENSSL_ALGO_SHA256), otherwise the hashes will (generally) not match.
Also, I would recommend to not use MD5 for signatures, as it is no longer considered collision resistant (a hash collision is, when you have 2 different strings/files/... with the same hash). For more details about that, you can check the Wikipedia article on MD5, specifically the section ""Collision vulnerabilities"". This is a problem, as 2 messages with the same MD5 hash, will also have the same signature and an attacker could use the signature generated for one of the strings to trick you into thinking the other was signed (and therefore trust it).
Additionally, ecdsa.PrivateKey can give you the corresponding public key, and you can call ecdsa.Verify like this:
ecdsa.Verify(&prikey.PublicKey, data, &r, &s)

This saves you the trouble of copying all the data from the private key to a new object.
","730","<php><go><ecdsa>","5","1","1","2018-09-10 12:20:03","52257396","0","","","","","2018-09-10 10:23:30",""
"46182659","How to delay sign the certificate request using Bouncy Castle with ECDSA signature?","I am trying to implement delay signing of a certificate request (CSR) with ECDSA signature algorithm using Bouncy Castle in C#. So far I've managed to implement this with RSA but not ECDSA. I use Pkcs10CertificationRequestDelaySigned class from Bouncy Castle.
A snippet of my test code that fails when verifying signature (full code is available below):
        [TestMethod]
        public void ValidCsrWithoutPassword_Ecdsa_SignatureIsAppended()
        {
            DelayCsrProvider sut = CreateSut();

            const string signAlgorithm = ""ECDSA"";
            var keys = new Keys(signAlgorithm);

            // Create CSR
            var signatureAlgorithm = ""SHA256withECDSA"";
            byte[] octetData = CreateCsr(keys.SignKeyPair, signatureAlgorithm);

            // Append password to CSR
            byte[] csrWithPass = sut.AppendPassword(octetData, ""some-text-1"");

            // Calculate HASH
            var hashAlgorithm = CmsSignedGenerator.DigestSha256;
            byte[] hash = sut.BuildHash(csrWithPass, hashAlgorithm);

            // Sign using HASH
            byte[] signature = Sign(hash, signAlgorithm, hashAlgorithm, keys.SignKeyPair.Private);

            // Add signature to CSR
            byte[] csrSigned = sut.AppendSignature(csrWithPass, signature);

            // Just verify the signature matches CSR's public key + data,
            // public key should match the private key
            // this is where it fails

            Verify(csrSigned);
        }

The scenario is:
 There are two entities (programs running on separate machines).
One has both private and public key - call it Signer and the other has additional information (like password) for extending certificate request with that information but NO access to private key - call it DelayCsrProvider.
The sequence is: 

Signer creates CSR without password and signs the data, sends it to DelayCsrProvider in PKCS#10 format DER encoded.
DelayCsrProvider creates new CSR with all the information from received CSR plus adds additional attribute that contains password. 
Now we have to sign this new CSR but we don't have private key. Instead we calculate hash (SHA-256) of data and send the digest to Signer.
Signer receives the hash and signs the hash, sends the signature back to DelayCsrProvider.
DelayCsrProvider inserts received signature into CSR thus creating a full CSR that has valid signature.

I've created DelayCsrProvider class and unit test that is making all the steps described above. One unit-test for RSA works just fine, the other unit test for ECDSA fails when verifying the signature.
What else can be done here to resolve ECDSA hash signing ?
See main part of code below or download the whole example from GIT: https://github.com/DmitriNymi/Certificate-Enrollment.git
Note:
.Net Framework 4.6.2
Bouncy Castle nuget 
BouncyCastle.Crypto.dll FileVersion=1.8.15362.1 
This is full code example of test that fails in Assert ValidCsrWithoutPassword_Ecdsa_SignatureIsAppended() :
using System;
using System.Collections.Generic;
using System.Linq;
using Org.BouncyCastle.Asn1;
using Org.BouncyCastle.Asn1.Pkcs;
using Org.BouncyCastle.Crypto;
using Org.BouncyCastle.Pkcs;
using Org.BouncyCastle.Security;

namespace NEnrollment.Services.DelaySigning
{
public class DelayCsrProvider
{
    /// <summary>
    /// append password to CSR: csrWithPassword = (csr, password)
    /// </summary>
    /// <param name=""csr""></param>
    /// <param name=""password""></param>
    /// <returns>CSR that  contains password</returns>
    public byte[] AppendPassword(byte[] csr, string password)
    {
        if (csr == null) throw new ArgumentNullException(nameof(csr));
        if (string.IsNullOrEmpty(password)) throw new ArgumentNullException(nameof(password));

        var originalCsr = new Pkcs10CertificationRequest(csr);

        CertificationRequestInfo cri = originalCsr.GetCertificationRequestInfo();

        DerSet attributesSet = AddPasswordAttribute(password, cri.Attributes);

        AsymmetricKeyParameter publicKey = PublicKeyFactory.CreateKey(cri.SubjectPublicKeyInfo);

        string signatureAlgorithm = originalCsr.SignatureAlgorithm.Algorithm.Id;

        // build new CSR from original + password attribute
        var csrWithPassword =
            new Pkcs10CertificationRequestDelaySigned(signatureAlgorithm, cri.Subject, publicKey, attributesSet);

        // this signing key is not used for signing but here only to suppress exception thrown in ctor
        csrWithPassword.SignRequest(new byte[] { });

        var csrWithPasswordBytes = csrWithPassword.GetDerEncoded();

        return csrWithPasswordBytes;
    }

    private DerSet AddPasswordAttribute(string password, Asn1Set attributes)
    {
        if (attributes == null) attributes = new DerSet();

        List<AttributePkcs> attributesPkcs = attributes
            .OfType<DerSequence>()
            .Select(AttributePkcs.GetInstance)
            .ToList();

        bool hasPassword = attributesPkcs.Any(x => x.AttrType.Equals(PkcsObjectIdentifiers.Pkcs9AtChallengePassword));
        if (hasPassword) throw new Exception(""Cannot append password, already has password attribute in CSR."");

        AttributePkcs passwordAttribute = ChallengePasswordAttribute(password);

        attributesPkcs.Add(passwordAttribute);

        // ReSharper disable once CoVariantArrayConversion
        DerSet attributesSet = new DerSet(attributesPkcs.ToArray());
        return attributesSet;
    }

    private AttributePkcs ChallengePasswordAttribute(string password)
    {
        if (password == null) return null;

        Asn1EncodableVector attributeValues = new Asn1EncodableVector { new DerPrintableString(password) };

        return new AttributePkcs(PkcsObjectIdentifiers.Pkcs9AtChallengePassword, new DerSet(attributeValues));
    }

    /// <summary>
    /// Calculates hash (digest) of the given CSR using the specified hash algorithm OID
    /// </summary>
    /// <param name=""csr"">CSR without password</param>
    /// <param name=""algorithm"">digest algorithm OID, for example for SHA256 use: ""2.16.840.1.101.3.4.2.1""</param>
    /// <returns>Hash of csr</returns>
    public byte[] BuildHash(byte[] csr, string algorithm)
    {
        var originalCsr = new Pkcs10CertificationRequestDelaySigned(csr);

        // parse CSR to Org.BouncyCastle.Pkcs.Pkcs10CertificationRequestDelaySigned
        //  requires CSR to have:
        // 1. Subject
        //      a. X509Name
        //      b. subject public key
        //      c. attributes
        //          c1. password - should be empty
        //          c2. extensions - should contain ... doesn't matter - don't touch
        // 2. SignatureAlgorithmId - keep as it is defined by user request
        // 3. SignBits of user for the given CSR

        // hash = function(csrWithPassword without signature/signature algorithm)
        // for some hash algorithms Hash may depend on a random number, 
        // thus giving different Hash every time it is calculated even for the same Data, PrivateKey

        byte[] dataToSign = originalCsr.GetDataToSign();

        //byte[] digest = DigestUtilities.CalculateDigest(CmsSignedGenerator.DigestSha256, dataToSign);
        byte[] digest = DigestUtilities.CalculateDigest(algorithm, dataToSign);

        return digest;
    }

    /// <summary>
    /// Creates new csr from given CSR + signature
    /// </summary>
    /// <param name=""csr"">CSR to be used for appending signature</param>
    /// <param name=""signature"">signature to be appended to CSR</param>
    /// <returns>new CSR with signature appended inside</returns>
    public byte[] AppendSignature(byte[] csr, byte[] signature)
    {
        if (csr == null) throw new ArgumentNullException(nameof(csr));

        var originalCsr = new Pkcs10CertificationRequestDelaySigned(csr);

        originalCsr.SignRequest(signature);

        byte[] csrBytes = originalCsr.GetDerEncoded();

        return csrBytes;
    }
}
}

This is the test code that signs the hash and calls DelayCsrProvider.
The test fails when signing with ECDSA, see test method: ValidCsrWithoutPassword_Ecdsa_SignatureIsAppended
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Linq;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using NEnrollment.Services.DelaySigning;
    using Org.BouncyCastle.Asn1;
    using Org.BouncyCastle.Asn1.Sec;
    using Org.BouncyCastle.Asn1.X509;
    using Org.BouncyCastle.Cms;
    using Org.BouncyCastle.Crypto;
    using Org.BouncyCastle.Crypto.Operators;
    using Org.BouncyCastle.Crypto.Parameters;
    using Org.BouncyCastle.Math;
    using Org.BouncyCastle.Pkcs;
    using Org.BouncyCastle.Security;

    namespace NEnrollment.Tests
    {
    [TestClass]
    public class DelayCsrProviderTest
    {
        private readonly bool _enableWritingToFile = false;

        DelayCsrProvider CreateSut()
        {
            return new DelayCsrProvider();
        }

        [TestMethod]
        public void ValidCsrWithoutPassword_Rsa_SignatureIsAppended()
        {
            var sut = CreateSut();

            const string signAlgorithm = ""RSA"";
            var keys = new Keys(signAlgorithm);

            // Create CSR
            var signatureAlgorithm = ""SHA256withRSA"";
            byte[] octetData = CreateCsr(keys.SignKeyPair, signatureAlgorithm);
            ByteArrayToFile(@""Rsa\csrWithoutPass.csr"", octetData);

            // Append password to CSR
            byte[] csrWithPass = sut.AppendPassword(octetData, ""some-text-1"");
            ByteArrayToFile(@""Rsa\csrWithPass.csr"", csrWithPass);

            // Calculate HASH
            var hashAlgorithm = CmsSignedGenerator.DigestSha256;
            byte[] hash = sut.BuildHash(csrWithPass, hashAlgorithm);

            // Sign using HASH
            byte[] signature = Sign(hash, signAlgorithm, hashAlgorithm, keys.SignKeyPair.Private);

            // Add signature to CSR
            byte[] csrSigned = sut.AppendSignature(csrWithPass, signature);
            ByteArrayToFile(@""Rsa\csrSigned.csr"", csrSigned);

            // Just verify the signature matches CSR's public key + data,
            // public key should match the private key
            Verify(csrSigned);
            Verify2(csrSigned);
        }

        [TestMethod]
        public void ValidCsrWithoutPassword_Ecdsa_SignatureIsAppended()
        {
            var sut = CreateSut();

            const string signAlgorithm = ""ECDSA"";
            var keys = new Keys(signAlgorithm);

            // Create CSR
            var signatureAlgorithm = ""SHA256withECDSA"";
            byte[] octetData = CreateCsr(keys.SignKeyPair, signatureAlgorithm);
            ByteArrayToFile(@""Ecdsa\csrWithoutPass.csr"", octetData);
            Verify(octetData);

            // Append password to CSR
            byte[] csrWithPass = sut.AppendPassword(octetData, ""some-text-1"");
            ByteArrayToFile(@""Ecdsa\csrWithPass.csr"", csrWithPass);

            // Calculate HASH
            var hashAlgorithm = CmsSignedGenerator.DigestSha256;
            byte[] hash = sut.BuildHash(csrWithPass, hashAlgorithm);

            // Sign using HASH
            byte[] signature = Sign(hash, signAlgorithm, hashAlgorithm, keys.SignKeyPair.Private);

            // Add signature to CSR
            byte[] csrSigned = sut.AppendSignature(csrWithPass, signature);
            ByteArrayToFile(@""Ecdsa\csrSigned.csr"", csrSigned);

            // Just verify the signature matches CSR's public key + data,
            // public key should match the private key

            //Verify2(csrSigned);
            Verify(csrSigned);
        }

        private byte[] CreateCsr(AsymmetricCipherKeyPair signingKeyPair, string signatureAlgorithm)
        {
            var key = signingKeyPair;

            Dictionary<DerObjectIdentifier, string> values = CreateSubjectValues(""my common name"");

            var subject = new X509Name(values.Keys.Reverse().ToList(), values);

            DerSet attributes = null;

            var signatureFactory = new Asn1SignatureFactory(signatureAlgorithm, key.Private);

            var pkcs10Csr = new Pkcs10CertificationRequest(
                signatureFactory,
                subject,
                key.Public,
                attributes,
                key.Private);

            byte[] derEncoded = pkcs10Csr.GetDerEncoded();

            //string stringEncoded = Convert.ToBase64String(derEncoded);
            //return stringEncoded;
            return derEncoded;
        }

        private Dictionary<DerObjectIdentifier, string> CreateSubjectValues(string commonName)
        {
            var values = new Dictionary<DerObjectIdentifier, string>
            {
                {X509Name.CN, commonName}, //domain name inside the quotes
                /*
                {X509Name.CN, csrSubject.CommonName}, //domain name inside the quotes
                {X509Name.OU, csrSubject.OrganizationalUnit},
                {X509Name.O, csrSubject.Organization}, //Organisation's Legal name inside the quotes
                {X509Name.L, csrSubject.City},
                {X509Name.ST, csrSubject.Country},
                {X509Name.C, csrSubject.State},
                */
            };

            // remove empty values
            var emptyKeys = values.Keys.Where(key => string.IsNullOrEmpty(values[key])).ToList();

            emptyKeys.ForEach(key => values.Remove(key));

            return values;
        }

        /// <summary>
        /// Calculate signature using signer algorithm for the defined has algorithm
        /// </summary>
        /// <param name=""hash""></param>
        /// <param name=""signerAlgorithm""></param>
        /// <param name=""hashAlgorithmOid"">
        /// hash Algorithm Oid, for example:
        /// ""2.16.840.1.101.3.4.2.1""
        /// </param>
        /// <param name=""privateSigningKey"">private key for signing</param>
        /// <returns></returns>
        public static byte[] Sign(byte[] hash, string signerAlgorithm, string hashAlgorithmOid, AsymmetricKeyParameter privateSigningKey)
        {

            var digestAlgorithm = new AlgorithmIdentifier(new DerObjectIdentifier(hashAlgorithmOid), DerNull.Instance);
            var dInfo = new DigestInfo(digestAlgorithm, hash);
            byte[] digest = dInfo.GetDerEncoded();

            ISigner signer = SignerUtilities.GetSigner(signerAlgorithm);
            signer.Init(true, privateSigningKey);
            signer.BlockUpdate(digest, 0, digest.Length);
            byte[] signature = signer.GenerateSignature();
            return signature;

/*  // Another way of signing
            if (signerAlgorithm == ""RSA"")
            {
                // convert private key from BouncyCastle to System.Security :
                RSA key = DotNetUtilities.ToRSA((RsaPrivateCrtKeyParameters)privateSigningKey);
                using (var cryptoServiceProvider = new RSACryptoServiceProvider())
                {
                    cryptoServiceProvider.ImportParameters(key.ExportParameters(true));

                    //
                    // Hash and sign the data. Pass a new instance of SHA1CryptoServiceProvider
                    // to specify the use of SHA1 for hashing.
                    byte[] signedData = cryptoServiceProvider.SignHash(hash, hashAlgorithmOid);
                    return signedData;
                }
            }

            if (signerAlgorithm == ""ECDSA"")
            {
                // convert private key from BouncyCastle to System.Security :
                var bcKeyInfo = PrivateKeyInfoFactory.CreatePrivateKeyInfo(privateSigningKey);
                var pkcs8Blob = bcKeyInfo.GetDerEncoded();
                var key = CngKey.Import(pkcs8Blob, CngKeyBlobFormat.Pkcs8PrivateBlob);

                using (ECDsaCng cryptoServiceProvider = new ECDsaCng(key))
                {
                    cryptoServiceProvider.HashAlgorithm = CngAlgorithm.Sha256; //, hashAlgorithmOid);

                    byte[] signature = cryptoServiceProvider.SignHash(hash);
                    return signature;
                }
            }

            throw new NotImplementedException(signerAlgorithm);
*/
        }

        /// <summary>
        /// Verify signature using self verification of Pkcs10CertificationRequest
        /// </summary>
        /// <param name=""csrSigned""></param>
        private void Verify(byte[] csrSigned)
        {
            Assert.IsNotNull(csrSigned);

            var csr = new Pkcs10CertificationRequest(csrSigned);

            bool isValid = csr.Verify();

            Assert.IsTrue(isValid, ""Verification failed"");
        }

        /// <summary>
        /// Verify signature using specified signer
        /// </summary>
        /// <param name=""csrSigned""></param>
        private void Verify2(byte[] csrSigned)
        {
            var csr = new Pkcs10CertificationRequestDelaySigned(csrSigned);
            var sigBytes = csr.Signature.GetBytes();//.GetDerEncoded();
            var data = csr.GetDataToSign();
            AsymmetricKeyParameter publicSigningKey = csr.GetPublicKey();
            var signerAlgorithm = csr.SignatureAlgorithm.Algorithm.Id;

            var s = SignerUtilities.GetSigner(signerAlgorithm);
            s.Init(false, publicSigningKey);
            s.BlockUpdate(data, 0, data.Length);
            bool isValidSignature = s.VerifySignature(sigBytes);

            Assert.IsTrue(isValidSignature, ""ECDSA verification failed"");
        }

        private void ByteArrayToFile(string fileName, byte[] byteArray)
        {
            if (!_enableWritingToFile) return;

            try
            {
                fileName = @""C:\temp\delayCsrTest\"" + fileName;
                new FileInfo(fileName).Directory?.Create();
                File.WriteAllBytes(fileName, byteArray);
            }
            catch (Exception ex)
            {
                Console.WriteLine(""Exception caught in process: {0}"", ex);
                throw;
            }
        }
    }

    /// <summary>
    /// Helper that stores private and public key-pair as required for signing and verification of signature
    /// </summary>
    class Keys
    {
        private static readonly SecureRandom Rand;

        private readonly string _keyAlgorithm;

        private readonly KeyGenerationParameters _keyGenerationParameters;

        private readonly IAsymmetricCipherKeyPairGenerator _keyPairGenerator;

        private AsymmetricCipherKeyPair _signKeyPair;
        public AsymmetricCipherKeyPair SignKeyPair => _signKeyPair ?? (_signKeyPair = MakeKeyPair());

        static Keys()
        {
            try
            {
                Rand = new SecureRandom();
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString());
            }
        }

        public Keys(string keyAlgorithm)
        {
            _keyAlgorithm = keyAlgorithm;
            _keyGenerationParameters = CreateKeyGenerationParameters();
            _keyPairGenerator = CreateKeyPairGenerator();
        }

        private KeyGenerationParameters CreateKeyGenerationParameters()
        {
            SecureRandom random = Rand;
            //SecureRandom random = SecureRandom.GetInstance(""SHA256PRNG"");

            if (_keyAlgorithm == ""RSA"")
            {
                return new RsaKeyGenerationParameters(BigInteger.ValueOf(65537), random, 2048, 25);
            }

            if (_keyAlgorithm == ""ECDSA"")
            {
                return new ECKeyGenerationParameters(SecObjectIdentifiers.SecP256r1, random);
            }

            throw new NotSupportedException(_keyAlgorithm);
        }

        private IAsymmetricCipherKeyPairGenerator CreateKeyPairGenerator()
        {
            var keyPairGenerator = GeneratorUtilities.GetKeyPairGenerator(_keyAlgorithm);
            keyPairGenerator.Init(_keyGenerationParameters);

            return keyPairGenerator;
        }

        public AsymmetricCipherKeyPair MakeKeyPair()
        {
            return _keyPairGenerator.GenerateKeyPair();
        }
    }
    }

","I found the problem with the way I was calculating the signature. For some reason it doesn't work for ECDSA, so here is the solution that works both for ECDSA and RSA (with SHA-256 hash). 
In short when calculating signature use ""NONEwithECDSA"" or ""NONEwithRSA"" and also RSA requires adding DigestInfo instead of bair signature as in ECDSA (I am still wondering why ?) .
 [TestMethod]
 public void TestDelaySigning()
 {
            const string hashAlgorithm = ""SHA256"";
            const string signAlgorithm = ""ECDSA""; // or ""RSA"" 
            bool isRsa =false; // or true for RSA

           // Create CSR
            var signatureAlgorithm = hashAlgorithm + ""with"" + signAlgorithm; // ""SHA256withECDSA"" or ""SHA256withRSA""
            byte[] octetData = CreateCsr(keys.SignKeyPair, signatureAlgorithm);
            byte[] csrWithPass = AppendPassword(octetData, ""some-password"");

            byte[] hash = BuildHash(csrWithPass, hashAlgorithm);

            // Sign the hash
            string singingAlgorithm2 = ""NONEwith"" + signAlgorithm;
            byte[] signature = Sign(hash, singingAlgorithm2, hashAlgorithm, keys.SignKeyPair.Private, isRsa );

            byte[] csrSigned = AppendSignature(csrWithPass, signature);

            Verify(csrSigned);
 }

        public byte[] BuildHash(byte[] csr, string algorithm)
        {
            var originalCsr = new Pkcs10CertificationRequestDelaySigned(csr);
            byte[] dataToSign = originalCsr.GetDataToSign();
            byte[] digest = DigestUtilities.CalculateDigest(algorithm, dataToSign);
            return digest;
        }

        public static byte[] Sign(byte[] hash, string signerAlgorithm, string hashAlgorithm, 
                                                     AsymmetricKeyParameter privateSigningKey, bool isRsa)
        {
            if (isRsa)
        {
            var hashAlgorithmOid = DigestUtilities.GetObjectIdentifier(hashAlgorithm).Id;

            var digestAlgorithm = new AlgorithmIdentifier(new DerObjectIdentifier(hashAlgorithmOid), DerNull.Instance);
            var dInfo = new DigestInfo(digestAlgorithm, hash);
            byte[] digest = dInfo.GetDerEncoded();
            hash = digest;
        }

        ISigner signer = SignerUtilities.GetSigner(signerAlgorithm);
        signer.Init(true, privateSigningKey);
        signer.BlockUpdate(hash, 0, hash.Length);
        byte[] signature = signer.GenerateSignature();
        return signature;
      }
 }

","721","<c#><bouncycastle><csr><ecdsa><pkcs#10>","2","1","1","2018-04-06 15:38:17","","0","","8598794","","2017-09-14 14:13:51","2017-09-12 17:50:36",""
"48994344","Python ECDSA, sign with private key with curve secp224k1","I'm really having a hard time getting to get to grips with this 3rd party Python module.
I'm trying to sign a 28-byte SHA-224 digest using a 28-byte SHA-224 digest private key under secp224k1.
My attempt:
import ecdsa

private_key = int(""b89ea7fcd22cc059c2673dc24ff40b978307464686560d0ad7561b83"", 16).to_bytes(28, byteorder='big')
digest_msg = int(""d8af940293347bc348df1896b0d93bf3952399702cef4fbf199d1cf4"", 16).to_bytes(28, byteorder='big')

sk = SigningKey.generate(private_key, curve=ecdsa.secp224k1) 
sig = sk.sign_digest(digest_msg)

>> AttributeError: module 'ecdsa' has no attribute 'secp224k1'

Hopelessly, I can't even google my way out of this error. 
","I suggest using the fastecdsa for doing this type of task.
As far as I know, ecdsa does not support secp224k1 curve.
fastecdsa does not support importing the key from a string, but you can export it to a pem format and import it using keys.import_key().
Check it here.
from fastecdsa import keys, curve, ecdsa

#generating the private key over secp224k1 curve
private_key = keys.gen_private_key(curve=curve.secp224k1)

#get the public key from the corresponding private key
public_key = keys.get_public_key(private_key, curve=curve.secp224k1)

msg = ""Sign this message with secp224k1""

r, s = ecdsa.sign(msg, private_key, curve.secp224k1)

print(ecdsa.verify((r, s), msg, public_key, curve.secp224k1))

Output:
True

","715","<python><ecdsa>","1","1","1","2018-02-26 18:58:25","48995287","2","","","","","2018-02-26 17:55:49",""
"45508442","Golang HTTPS with ECDSA certificate from OpenSSL","I don't know if this is the correct place to ask it, but I will try.
I am trying to run http.ListenAndServeTLS with ECDSA certificate generated from OpenSSL.
It fail with this error message: tls: failed to parse private key
Go understand elliptic.P256(), in the code it has this comment See FIPS 186-3, section D.2.3.
In this link: http://www.ietf.org/rfc/rfc5480.txt, it says it is also called secp256r1.
As you can see below, OpenSSL undestand this as prime256v1.
$ openssl ecparam -name secp256r1 -text -noout
using curve name prime256v1 instead of secp256r1
ASN1 OID: prime256v1
NIST CURVE: P-256

So what is wrong?
How can I generate ECDSA certificate from OpenSSL and use it on my Go code?
Using generate_cert.go to generate a P256 ECDSA certificate, my code works, but if I try to read the key file with OpenSSL it fail also.
$ openssl ecparam -text -noout -in key.pem 
unable to load elliptic curve parameters
140377431725720:error:0906D06C:PEM routines:PEM_read_bio:no start line:pem_lib.c:701:Expecting: EC PARAMETERS

","I couldn't figured out what is the problem between OpenSSL and Go.
But my main problem is, how to generate ECDSA certificate to use with Go code!
Using CFSSL (https://cfssl.org/) I can generate ECDSA certificate and sign it with my internal CA certificate generated from OpenSSL. The certificate generated from CFSSL works fine with my Go code, so for me it solves my main problem!
I don't know if there is a format problem between OpenSSL and Go, but as CFSSL is written in Go, the certificate generated on it works fine in my code and in browser.
","711","<ssl><go><openssl><ecdsa>","1","0","3","2019-06-15 04:28:44","","0","","","","","2017-08-04 13:43:39",""
"45508442","Golang HTTPS with ECDSA certificate from OpenSSL","I don't know if this is the correct place to ask it, but I will try.
I am trying to run http.ListenAndServeTLS with ECDSA certificate generated from OpenSSL.
It fail with this error message: tls: failed to parse private key
Go understand elliptic.P256(), in the code it has this comment See FIPS 186-3, section D.2.3.
In this link: http://www.ietf.org/rfc/rfc5480.txt, it says it is also called secp256r1.
As you can see below, OpenSSL undestand this as prime256v1.
$ openssl ecparam -name secp256r1 -text -noout
using curve name prime256v1 instead of secp256r1
ASN1 OID: prime256v1
NIST CURVE: P-256

So what is wrong?
How can I generate ECDSA certificate from OpenSSL and use it on my Go code?
Using generate_cert.go to generate a P256 ECDSA certificate, my code works, but if I try to read the key file with OpenSSL it fail also.
$ openssl ecparam -text -noout -in key.pem 
unable to load elliptic curve parameters
140377431725720:error:0906D06C:PEM routines:PEM_read_bio:no start line:pem_lib.c:701:Expecting: EC PARAMETERS

","Here is an example of OpenSSL generated ECDSA keys working with Go.
https://play.golang.org/p/MS_FQ8cqqA8.
As clarified in this issue - https://github.com/golang/go/issues/23591, go does not recognize EC keys that are generated with the -param_enc explicit flag in Openssl.
# openssl ecparam -name prime256v1 -genkey -noout -out priv2.pem
# openssl req -new -x509 -key priv2.pem -out EC_server2.pem -days 365
Hope this solves your problem.
","711","<ssl><go><openssl><ecdsa>","1","0","3","2019-06-15 04:28:44","","0","","","","","2017-08-04 13:43:39",""
"45508442","Golang HTTPS with ECDSA certificate from OpenSSL","I don't know if this is the correct place to ask it, but I will try.
I am trying to run http.ListenAndServeTLS with ECDSA certificate generated from OpenSSL.
It fail with this error message: tls: failed to parse private key
Go understand elliptic.P256(), in the code it has this comment See FIPS 186-3, section D.2.3.
In this link: http://www.ietf.org/rfc/rfc5480.txt, it says it is also called secp256r1.
As you can see below, OpenSSL undestand this as prime256v1.
$ openssl ecparam -name secp256r1 -text -noout
using curve name prime256v1 instead of secp256r1
ASN1 OID: prime256v1
NIST CURVE: P-256

So what is wrong?
How can I generate ECDSA certificate from OpenSSL and use it on my Go code?
Using generate_cert.go to generate a P256 ECDSA certificate, my code works, but if I try to read the key file with OpenSSL it fail also.
$ openssl ecparam -text -noout -in key.pem 
unable to load elliptic curve parameters
140377431725720:error:0906D06C:PEM routines:PEM_read_bio:no start line:pem_lib.c:701:Expecting: EC PARAMETERS

","Run:
go run `go env GOROOT`/src/crypto/tls/generate_cert.go --host=localhost --ecdsa-curve=P256

This will generate cert.pem and key.pem in the current directory.
","711","<ssl><go><openssl><ecdsa>","1","0","3","2019-06-15 04:28:44","","0","","","","","2017-08-04 13:43:39",""
"34741881","ECDSA algorithm on JCOP 2.4.2 Java Card","I want to implement ECDSA algorithm on Java Card (JCOP 2.4.2). This is my source code:
package hashPack;

import javacard.framework.*;
import javacard.security.*;
import javacardx.crypto.*;

public class MyECDSA extends Applet{

    private byte[] PLAINTEXT ;

    private ECPrivateKey            objECDSAPriKey=null;    // Object for ECDSA Private Key
    private ECPublicKey             objECDSAPubKey=null;    // Object for ECDSA Public Key
    private KeyPair                 objECDSAKeyPair=null;   // Object for ECDSA Key Pair
    private Signature               objECDSASign=null;      // Object for ECDSA Signature

    final static short  BAS     =  0;

    final static byte[] SecP192r1_P = {     // 24
        (byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF,
        (byte)0xFE,(byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF,
        (byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF};
    final static byte[] SecP192r1_A = {     // 24
        (byte)0xFC,(byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF,
        (byte)0xFE,(byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF,
        (byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF};
    final static byte[] SecP192r1_B = {     // 24
      (byte)0xB1,(byte)0xB9,(byte)0x46,(byte)0xC1,(byte)0xEC,(byte)0xDE,(byte)0xB8,(byte)0xFE,
      (byte)0x49,(byte)0x30,(byte)0x24,(byte)0x72,(byte)0xAB,(byte)0xE9,(byte)0xA7,(byte)0x0F,
      (byte)0xE7,(byte)0x80,(byte)0x9C,(byte)0xE5,(byte)0x19,(byte)0x05,(byte)0x21,(byte)0x64};
    final static byte[] SecP192r1_S = {     // 20
      (byte)0xD5,(byte)0x96,(byte)0x21,(byte)0xE1,(byte)0xEA,(byte)0x20,(byte)0x81,(byte)0xD3,
      (byte)0x28,(byte)0x95,(byte)0x57,(byte)0xED,(byte)0x64,(byte)0x2F,(byte)0x42,(byte)0xC8,
      (byte)0x6F,(byte)0xAE,(byte)0x45,(byte)0x30};
    final static byte[] SecP192r1_G = {     // 25
      (byte)0x12,(byte)0x10,(byte)0xFF,(byte)0x82,(byte)0xFD,(byte)0x0A,(byte)0xFF,(byte)0xF4,
      (byte)0x00,(byte)0x88,(byte)0xA1,(byte)0x43,(byte)0xEB,(byte)0x20,(byte)0xBF,(byte)0x7C,
      (byte)0xF6,(byte)0x90,(byte)0x30,(byte)0xB0,(byte)0x0E,(byte)0xA8,(byte)0x8D,(byte)0x18,(byte)0x03};
    final static byte[] SecP192r1_N = {     // 24
      (byte)0x31,(byte)0x28,(byte)0xD2,(byte)0xB4,(byte)0xB1,(byte)0xC9,(byte)0x6B,(byte)0x14,
      (byte)0x36,(byte)0xF8,(byte)0xDE,(byte)0x99,(byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF,
      (byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF};
    final static short  SecP192r1_H =  1;

    //======================================================================================
    public static void install(byte[] bArray, short bOffset, byte bLength){
        new MyECDSA(bArray, bOffset, bLength);
    }

    private MyECDSA(byte bArray[], short bOffset, byte bLength){    

        PLAINTEXT       = new byte[0x100] ;         // Data file

        Util.arrayFillNonAtomic(PLAINTEXT,  BAS, (short)0x100, (byte)0);

        register();
    }

    //======================================================================================
    public void process(APDU apdu){
        byte buf[] = apdu.getBuffer();

        switch(buf[1])
        {
            //--------------------------------------------------------
            case (byte)0xA4:                    break;  

            case (byte)0x46:

                // Create ECDSA Keys and Pair
             /*   try {
            // <<<<<<<<<<<<<<<< Here is the problem >>>>>>>>>>>>>>>>>
                    objECDSAPriKey = (ECPrivateKey)KeyBuilder.buildKey(KeyBuilder.TYPE_EC_FP_PRIVATE,      KeyBuilder.LENGTH_EC_FP_192, true);
                }
            catch(CryptoException c)
            {    
              short reason = c.getReason();   
              ISOException.throwIt(reason);       // for check
            }     // for check*/
                   // objECDSAPubKey = (ECPublicKey)KeyBuilder.buildKey(KeyBuilder.TYPE_EC_FP_PUBLIC,      KeyBuilder.LENGTH_EC_FP_192, true);

                    // set EC Domain Parameters
                    objECDSAPubKey.setFieldFP(SecP192r1_P, BAS, (short)24);
                    objECDSAPubKey.setA(SecP192r1_A, BAS, (short)24);
                    objECDSAPubKey.setB(SecP192r1_B, BAS, (short)24);
                    objECDSAPubKey.setG(SecP192r1_G, BAS, (short)25);
                    objECDSAPubKey.setK(SecP192r1_H);
                    objECDSAPubKey.setR(SecP192r1_N, BAS, (short)24);

                    objECDSAKeyPair = new KeyPair(KeyPair.ALG_EC_FP, KeyBuilder.LENGTH_EC_FP_192);


                // On-Card Key Generation Process
                objECDSAKeyPair.genKeyPair();

                // Obtain Key References
                objECDSAPriKey = (ECPrivateKey)objECDSAKeyPair.getPrivate();
                objECDSAPubKey = (ECPublicKey)objECDSAKeyPair.getPublic();  

                // Create Signature Object
                objECDSASign = Signature.getInstance(Signature.ALG_ECDSA_SHA, false);

            break;

            case (byte)0x2E:                        
                short       Le              = apdu.setOutgoing();   
                short   sSignLen=0 ;

                // Init with Private Key
                objECDSASign.init(objECDSAPriKey, Signature.MODE_SIGN);

                // Sign Data
                sSignLen = objECDSASign.sign(PLAINTEXT, BAS, Le, buf, BAS);

                apdu.setOutgoingLength(sSignLen);
                apdu.sendBytes(BAS, sSignLen);

            break;      
            //--------------------------------------------------------
            default:
                ISOException.throwIt(ISO7816.SW_INS_NOT_SUPPORTED);
        }

        return; 
    }
}

I am running this source code using this script script code:
#/term SCComm:2
/mode trace=on
/atr
/card
/select |ecdsa
/send 00A4040007D4106509900090
/send 0046000000
/send 002E00000A30313233343031323334

When I am calling /send 0046000000 for signing the plain text message I get the response code 6F00.
Could you help me to find out what is wrong with this?
How to properly implement this algorithm on a JCOP card?
","I'm not an expert on JCOP but I have experience with ISO7816:
Statusword 0x6F00 means ""General Error"". I suppose a CryptoException is thrown, but the value of ""reason"" is between 1-5 (according to the documentation).
It's not possible to return arbitrary values as ISO7816 statusword.
Therefore I would suggest to send the reason using apdu.sendBytes(...), then you know what really is the problem
Best way would be to debug the code
","694","<smartcard><javacard><apdu><ecdsa><jcop>","2","2","3","2016-02-24 09:27:11","","3","","2425802","","2016-01-28 18:58:05","2016-01-12 11:00:54",""
"34741881","ECDSA algorithm on JCOP 2.4.2 Java Card","I want to implement ECDSA algorithm on Java Card (JCOP 2.4.2). This is my source code:
package hashPack;

import javacard.framework.*;
import javacard.security.*;
import javacardx.crypto.*;

public class MyECDSA extends Applet{

    private byte[] PLAINTEXT ;

    private ECPrivateKey            objECDSAPriKey=null;    // Object for ECDSA Private Key
    private ECPublicKey             objECDSAPubKey=null;    // Object for ECDSA Public Key
    private KeyPair                 objECDSAKeyPair=null;   // Object for ECDSA Key Pair
    private Signature               objECDSASign=null;      // Object for ECDSA Signature

    final static short  BAS     =  0;

    final static byte[] SecP192r1_P = {     // 24
        (byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF,
        (byte)0xFE,(byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF,
        (byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF};
    final static byte[] SecP192r1_A = {     // 24
        (byte)0xFC,(byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF,
        (byte)0xFE,(byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF,
        (byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF};
    final static byte[] SecP192r1_B = {     // 24
      (byte)0xB1,(byte)0xB9,(byte)0x46,(byte)0xC1,(byte)0xEC,(byte)0xDE,(byte)0xB8,(byte)0xFE,
      (byte)0x49,(byte)0x30,(byte)0x24,(byte)0x72,(byte)0xAB,(byte)0xE9,(byte)0xA7,(byte)0x0F,
      (byte)0xE7,(byte)0x80,(byte)0x9C,(byte)0xE5,(byte)0x19,(byte)0x05,(byte)0x21,(byte)0x64};
    final static byte[] SecP192r1_S = {     // 20
      (byte)0xD5,(byte)0x96,(byte)0x21,(byte)0xE1,(byte)0xEA,(byte)0x20,(byte)0x81,(byte)0xD3,
      (byte)0x28,(byte)0x95,(byte)0x57,(byte)0xED,(byte)0x64,(byte)0x2F,(byte)0x42,(byte)0xC8,
      (byte)0x6F,(byte)0xAE,(byte)0x45,(byte)0x30};
    final static byte[] SecP192r1_G = {     // 25
      (byte)0x12,(byte)0x10,(byte)0xFF,(byte)0x82,(byte)0xFD,(byte)0x0A,(byte)0xFF,(byte)0xF4,
      (byte)0x00,(byte)0x88,(byte)0xA1,(byte)0x43,(byte)0xEB,(byte)0x20,(byte)0xBF,(byte)0x7C,
      (byte)0xF6,(byte)0x90,(byte)0x30,(byte)0xB0,(byte)0x0E,(byte)0xA8,(byte)0x8D,(byte)0x18,(byte)0x03};
    final static byte[] SecP192r1_N = {     // 24
      (byte)0x31,(byte)0x28,(byte)0xD2,(byte)0xB4,(byte)0xB1,(byte)0xC9,(byte)0x6B,(byte)0x14,
      (byte)0x36,(byte)0xF8,(byte)0xDE,(byte)0x99,(byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF,
      (byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF};
    final static short  SecP192r1_H =  1;

    //======================================================================================
    public static void install(byte[] bArray, short bOffset, byte bLength){
        new MyECDSA(bArray, bOffset, bLength);
    }

    private MyECDSA(byte bArray[], short bOffset, byte bLength){    

        PLAINTEXT       = new byte[0x100] ;         // Data file

        Util.arrayFillNonAtomic(PLAINTEXT,  BAS, (short)0x100, (byte)0);

        register();
    }

    //======================================================================================
    public void process(APDU apdu){
        byte buf[] = apdu.getBuffer();

        switch(buf[1])
        {
            //--------------------------------------------------------
            case (byte)0xA4:                    break;  

            case (byte)0x46:

                // Create ECDSA Keys and Pair
             /*   try {
            // <<<<<<<<<<<<<<<< Here is the problem >>>>>>>>>>>>>>>>>
                    objECDSAPriKey = (ECPrivateKey)KeyBuilder.buildKey(KeyBuilder.TYPE_EC_FP_PRIVATE,      KeyBuilder.LENGTH_EC_FP_192, true);
                }
            catch(CryptoException c)
            {    
              short reason = c.getReason();   
              ISOException.throwIt(reason);       // for check
            }     // for check*/
                   // objECDSAPubKey = (ECPublicKey)KeyBuilder.buildKey(KeyBuilder.TYPE_EC_FP_PUBLIC,      KeyBuilder.LENGTH_EC_FP_192, true);

                    // set EC Domain Parameters
                    objECDSAPubKey.setFieldFP(SecP192r1_P, BAS, (short)24);
                    objECDSAPubKey.setA(SecP192r1_A, BAS, (short)24);
                    objECDSAPubKey.setB(SecP192r1_B, BAS, (short)24);
                    objECDSAPubKey.setG(SecP192r1_G, BAS, (short)25);
                    objECDSAPubKey.setK(SecP192r1_H);
                    objECDSAPubKey.setR(SecP192r1_N, BAS, (short)24);

                    objECDSAKeyPair = new KeyPair(KeyPair.ALG_EC_FP, KeyBuilder.LENGTH_EC_FP_192);


                // On-Card Key Generation Process
                objECDSAKeyPair.genKeyPair();

                // Obtain Key References
                objECDSAPriKey = (ECPrivateKey)objECDSAKeyPair.getPrivate();
                objECDSAPubKey = (ECPublicKey)objECDSAKeyPair.getPublic();  

                // Create Signature Object
                objECDSASign = Signature.getInstance(Signature.ALG_ECDSA_SHA, false);

            break;

            case (byte)0x2E:                        
                short       Le              = apdu.setOutgoing();   
                short   sSignLen=0 ;

                // Init with Private Key
                objECDSASign.init(objECDSAPriKey, Signature.MODE_SIGN);

                // Sign Data
                sSignLen = objECDSASign.sign(PLAINTEXT, BAS, Le, buf, BAS);

                apdu.setOutgoingLength(sSignLen);
                apdu.sendBytes(BAS, sSignLen);

            break;      
            //--------------------------------------------------------
            default:
                ISOException.throwIt(ISO7816.SW_INS_NOT_SUPPORTED);
        }

        return; 
    }
}

I am running this source code using this script script code:
#/term SCComm:2
/mode trace=on
/atr
/card
/select |ecdsa
/send 00A4040007D4106509900090
/send 0046000000
/send 002E00000A30313233343031323334

When I am calling /send 0046000000 for signing the plain text message I get the response code 6F00.
Could you help me to find out what is wrong with this?
How to properly implement this algorithm on a JCOP card?
","Since you indicate that your call to KeyBuilder.buildKey(...) fails, I would assume that this call throws a CryptoException with reason code NO_SUCH_ALGORITHM. As you do not handle that exception in your code, this results in the status word 0x6F00 being retuned by the card (0x6F00 is typically returned in case of unhandled exceptions).
So the CryptoException indicates that the requested key algorithm is not supported. Since you use the following parameters
KeyBuilder.buildKey(
    KeyBuilder.TYPE_EC_FP_PRIVATE,  // key type
    KeyBuilder.LENGTH_EC_FP_192,    // key length
    true);                          // key encryption

this could mean that

the card does not support the EC_FP (elliptic curve over large prime field) key type / algorithm,
the card does not support a key length of 192, or
the card does not support key encryption.

As the FIPS 140-2 Cryptographic Module Security Policy for both JCOP 2.4.2 R2 and JCOP 2.4.2 R3 indicate that ECDSA key pair generation is supported for P-192 (besides P-224 and P-256), I would assume that your card does not support key encryption. Hence, you could instead try
KeyBuilder.buildKey(
    KeyBuilder.TYPE_EC_FP_PRIVATE,  // key type
    KeyBuilder.LENGTH_EC_FP_192,    // key length
    false);                         // key encryption

","694","<smartcard><javacard><apdu><ecdsa><jcop>","2","1","3","2016-02-24 09:27:11","","3","","2425802","","2016-01-28 18:58:05","2016-01-12 11:00:54",""
"34741881","ECDSA algorithm on JCOP 2.4.2 Java Card","I want to implement ECDSA algorithm on Java Card (JCOP 2.4.2). This is my source code:
package hashPack;

import javacard.framework.*;
import javacard.security.*;
import javacardx.crypto.*;

public class MyECDSA extends Applet{

    private byte[] PLAINTEXT ;

    private ECPrivateKey            objECDSAPriKey=null;    // Object for ECDSA Private Key
    private ECPublicKey             objECDSAPubKey=null;    // Object for ECDSA Public Key
    private KeyPair                 objECDSAKeyPair=null;   // Object for ECDSA Key Pair
    private Signature               objECDSASign=null;      // Object for ECDSA Signature

    final static short  BAS     =  0;

    final static byte[] SecP192r1_P = {     // 24
        (byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF,
        (byte)0xFE,(byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF,
        (byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF};
    final static byte[] SecP192r1_A = {     // 24
        (byte)0xFC,(byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF,
        (byte)0xFE,(byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF,
        (byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF};
    final static byte[] SecP192r1_B = {     // 24
      (byte)0xB1,(byte)0xB9,(byte)0x46,(byte)0xC1,(byte)0xEC,(byte)0xDE,(byte)0xB8,(byte)0xFE,
      (byte)0x49,(byte)0x30,(byte)0x24,(byte)0x72,(byte)0xAB,(byte)0xE9,(byte)0xA7,(byte)0x0F,
      (byte)0xE7,(byte)0x80,(byte)0x9C,(byte)0xE5,(byte)0x19,(byte)0x05,(byte)0x21,(byte)0x64};
    final static byte[] SecP192r1_S = {     // 20
      (byte)0xD5,(byte)0x96,(byte)0x21,(byte)0xE1,(byte)0xEA,(byte)0x20,(byte)0x81,(byte)0xD3,
      (byte)0x28,(byte)0x95,(byte)0x57,(byte)0xED,(byte)0x64,(byte)0x2F,(byte)0x42,(byte)0xC8,
      (byte)0x6F,(byte)0xAE,(byte)0x45,(byte)0x30};
    final static byte[] SecP192r1_G = {     // 25
      (byte)0x12,(byte)0x10,(byte)0xFF,(byte)0x82,(byte)0xFD,(byte)0x0A,(byte)0xFF,(byte)0xF4,
      (byte)0x00,(byte)0x88,(byte)0xA1,(byte)0x43,(byte)0xEB,(byte)0x20,(byte)0xBF,(byte)0x7C,
      (byte)0xF6,(byte)0x90,(byte)0x30,(byte)0xB0,(byte)0x0E,(byte)0xA8,(byte)0x8D,(byte)0x18,(byte)0x03};
    final static byte[] SecP192r1_N = {     // 24
      (byte)0x31,(byte)0x28,(byte)0xD2,(byte)0xB4,(byte)0xB1,(byte)0xC9,(byte)0x6B,(byte)0x14,
      (byte)0x36,(byte)0xF8,(byte)0xDE,(byte)0x99,(byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF,
      (byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF};
    final static short  SecP192r1_H =  1;

    //======================================================================================
    public static void install(byte[] bArray, short bOffset, byte bLength){
        new MyECDSA(bArray, bOffset, bLength);
    }

    private MyECDSA(byte bArray[], short bOffset, byte bLength){    

        PLAINTEXT       = new byte[0x100] ;         // Data file

        Util.arrayFillNonAtomic(PLAINTEXT,  BAS, (short)0x100, (byte)0);

        register();
    }

    //======================================================================================
    public void process(APDU apdu){
        byte buf[] = apdu.getBuffer();

        switch(buf[1])
        {
            //--------------------------------------------------------
            case (byte)0xA4:                    break;  

            case (byte)0x46:

                // Create ECDSA Keys and Pair
             /*   try {
            // <<<<<<<<<<<<<<<< Here is the problem >>>>>>>>>>>>>>>>>
                    objECDSAPriKey = (ECPrivateKey)KeyBuilder.buildKey(KeyBuilder.TYPE_EC_FP_PRIVATE,      KeyBuilder.LENGTH_EC_FP_192, true);
                }
            catch(CryptoException c)
            {    
              short reason = c.getReason();   
              ISOException.throwIt(reason);       // for check
            }     // for check*/
                   // objECDSAPubKey = (ECPublicKey)KeyBuilder.buildKey(KeyBuilder.TYPE_EC_FP_PUBLIC,      KeyBuilder.LENGTH_EC_FP_192, true);

                    // set EC Domain Parameters
                    objECDSAPubKey.setFieldFP(SecP192r1_P, BAS, (short)24);
                    objECDSAPubKey.setA(SecP192r1_A, BAS, (short)24);
                    objECDSAPubKey.setB(SecP192r1_B, BAS, (short)24);
                    objECDSAPubKey.setG(SecP192r1_G, BAS, (short)25);
                    objECDSAPubKey.setK(SecP192r1_H);
                    objECDSAPubKey.setR(SecP192r1_N, BAS, (short)24);

                    objECDSAKeyPair = new KeyPair(KeyPair.ALG_EC_FP, KeyBuilder.LENGTH_EC_FP_192);


                // On-Card Key Generation Process
                objECDSAKeyPair.genKeyPair();

                // Obtain Key References
                objECDSAPriKey = (ECPrivateKey)objECDSAKeyPair.getPrivate();
                objECDSAPubKey = (ECPublicKey)objECDSAKeyPair.getPublic();  

                // Create Signature Object
                objECDSASign = Signature.getInstance(Signature.ALG_ECDSA_SHA, false);

            break;

            case (byte)0x2E:                        
                short       Le              = apdu.setOutgoing();   
                short   sSignLen=0 ;

                // Init with Private Key
                objECDSASign.init(objECDSAPriKey, Signature.MODE_SIGN);

                // Sign Data
                sSignLen = objECDSASign.sign(PLAINTEXT, BAS, Le, buf, BAS);

                apdu.setOutgoingLength(sSignLen);
                apdu.sendBytes(BAS, sSignLen);

            break;      
            //--------------------------------------------------------
            default:
                ISOException.throwIt(ISO7816.SW_INS_NOT_SUPPORTED);
        }

        return; 
    }
}

I am running this source code using this script script code:
#/term SCComm:2
/mode trace=on
/atr
/card
/select |ecdsa
/send 00A4040007D4106509900090
/send 0046000000
/send 002E00000A30313233343031323334

When I am calling /send 0046000000 for signing the plain text message I get the response code 6F00.
Could you help me to find out what is wrong with this?
How to properly implement this algorithm on a JCOP card?
","I can see two different issues:

JCOP (mistakenly) requires you to set the private key parameters as well;
base point G seems to be in compressed format, which may not be supported, it is required to convert to a 49 byte uncompressed point instead.

Furthermore it should be noted that:

you should indeed first build the public key using KeyBuilder (currently commented out);
there is no reason to have a parameter S in there (the seed is of no consequence - at least I presume it's not a private key with that size);
you should really wrap key generation with a try / catch statement and (in the end) convert to an ISOException with a valid status word;
having a debugger available is of vital importance.

","694","<smartcard><javacard><apdu><ecdsa><jcop>","2","1","3","2016-02-24 09:27:11","","3","","2425802","","2016-01-28 18:58:05","2016-01-12 11:00:54",""
"40880873","ECIES encryption/decryption Java","I am trying to use ECIES for encryption and decryption. This is what I have done:

generated ECC key pair
generated CSR
Generated X509 certificate, signed by intermediate CA
Server side, I need to use this certificate to encrypt data. So I have extracted PublicKey (which is showing BCECPublicKey format) from certificate.
I couldn't find a way to convert it into ECPublicKey format so after upgrading to bouncycastle 1.55, I am able to use directly BCECPublicKey for encryption.
Converted private key into ECPrivateKey and using it for decryption but now it's throwing BadPaddingException: Invalid MAC during decryption

I am new to cryptography, Please help to resolve this. Below is code I am using:
byte[] localcert = Base64.decode(
            ""MIID5TCCAc2gAwIBAgICEAEwDQYJKoZIhvcNAQELBQAwMzELMAkGA1UEBhMCc2cx"" +
                    ""CzAJBgNVBAgMAnNnMRcwFQYDVQQKDA5pbnRlcm1lZGlhdGVDQTAeFw0xNjExMjgw"" +
                    ""NDAzMjdaFw0xNzEyMDgwNDAzMjdaMDsxCzAJBgNVBAYTAnNnMQswCQYDVQQIEwJz"" +
                    ""ZzELMAkGA1UEBxMCc2cxEjAQBgNVBAoTCWxvY2FsaG9zdDBZMBMGByqGSM49AgEG"" +
                    ""CCqGSM49AwEHA0IABDuhAyMw6OilNmfWo1v6b8XwU8xbQm0Sy/I9qpdC4+qDToSl"" +
                    ""EOe+vw7GiVgONTJz2gwMW+VgoGp49aM5GTPo39ujgcUwgcIwCQYDVR0TBAIwADAR"" +
                    ""BglghkgBhvhCAQEEBAMCBaAwMwYJYIZIAYb4QgENBCYWJE9wZW5TU0wgR2VuZXJh"" +
                    ""dGVkIENsaWVudCBDZXJ0aWZpY2F0ZTAdBgNVHQ4EFgQUnbUGm/qaO1JbhY+qVlXw"" +
                    ""BewUI/swHwYDVR0jBBgwFoAUPSzKlcBTp0pCQ290SlDLmIQS+/0wDgYDVR0PAQH/"" +
                    ""BAQDAgXgMB0GA1UdJQQWMBQGCCsGAQUFBwMCBggrBgEFBQcDBDANBgkqhkiG9w0B"" +
                    ""AQsFAAOCAgEAJj0J2A3AAcrRw02ZzQsEC4nTyd05krF4oRFo0JODlzNiKaOhQt76"" +
                    ""Va427cpVUZwmjb/f1We+AjLJgQiEfnuD7JPSvXHLQTbXNDMgpZ9HXHZoXYfH+2h7"" +
                    ""MGvw6Qkj4lC10q9UC14rDSD/ZsR1J0mQCQuOIBRFNOkSPiSUu4zouCD3xv5uZVXR"" +
                    ""mimhJ1zgqSYF4LHegJAVwrowMsuaeQXybrIQ+/LJ8HXf8McvPZwtQTuoN/q5zHXz"" +
                    ""l+7q4nglyVY+TXPAdwyha0Yq2p0z0jdWm5UpEehmIpXtJghNtcCCRfb48flfZ/B7"" +
                    ""JW9VrlcjScOtQfSOrElYgwJ8MlUTzz7oWgbbVp9uNQZeAQQPeOQYLAvSNchPnLiP"" +
                    ""ftPuICW2siDeFC42lwYsDYR/9sYs7/gzL79i7bHrdMJ07brXw30hb1r6Vu9a+sHF"" +
                    ""D087NxHv33u22+W/2PMLDE89MynTC3H3gWvyzGIky0/kYSpZO/xZuFrg0jIJu0lH"" +
                    ""9b7jw1hQM1nDkTO5Gn2wJuaHaiZ22tMr47e4Xlkctal4hAA4Ya1uBXuMuwy0BC8q"" +
                    ""nLLxCLBcJJPAyIG2LvIT2vdWIP0Gz84mHKDbOPekHmXIF3bHE4pPeyDIJ+w00UoM"" +
                    ""xJdedT5BJarqEpiQtrGn4FBh3fsnHFXyNnNMCIylCvbg0Ij/AsQJCpg="");

    CertificateFactory cf = CertificateFactory.getInstance(""X.509"");
    X509Certificate x509Certificate= (X509Certificate) cf.generateCertificate(new ByteArrayInputStream(localcert));
    PublicKey publicKey=x509Certificate.getPublicKey();

    byte[] pkey=Base64.decode(""MHcCAQEEINmVG7z3YutAqRYZ5iAaJSXcP+GJWjtmSx3ba6RfKkJQoAoGCCqGSM49"" +
            ""AwEHoUQDQgAEO6EDIzDo6KU2Z9ajW/pvxfBTzFtCbRLL8j2ql0Lj6oNOhKUQ576/"" +
            ""DsaJWA41MnPaDAxb5WCganj1ozkZM+jf2w=="");
    Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
    ECNamedCurveParameterSpec spec = ECNamedCurveTable.getParameterSpec(""prime256v1"");
    KeyFactory kf = KeyFactory.getInstance(""ECDSA"", new BouncyCastleProvider());
    ECPrivateKeySpec ecPrivateKeySpec = new ECPrivateKeySpec(new BigInteger(1, pkey), spec);
    ECPrivateKey privkey= (ECPrivateKey) kf.generatePrivate(ecPrivateKeySpec);

    String name = ""prime256v1"";

    //  generate derivation and encoding vectors
    byte[]  d = new byte[] { 1, 2, 3, 4, 5, 6, 7, 8 };
    byte[]  e = new byte[] { 8, 7, 6, 5, 4, 3, 2, 1 };
    IESParameterSpec param = new IESParameterSpec(d, e, 256);

    Cipher iesCipher = Cipher.getInstance(""ECIES"", BouncyCastleProvider.PROVIDER_NAME);
    //Encrypt
    iesCipher.init(Cipher.ENCRYPT_MODE, publicKey, param);
    byte[] enc= iesCipher.doFinal(""TestECIES"".getBytes());
    System.out.println(new String(enc));
    //Decrypt
    iesCipher.init(Cipher.DECRYPT_MODE, privkey, param);
    byte[] decry=iesCipher.doFinal(enc);
    System.out.println(new String(decry));

","So finally I have solved it. ECC PrivateKey created by openssl was in this format:
-----BEGIN EC PARAMETERS-----
BggqhkjOPQMBBw==
-----END EC PARAMETERS-----
-----BEGIN EC PRIVATE KEY-----
MHcCAQEEINmVG7z3YutAqRYZ5iAaJSXcP+GJWjtmSx3ba6RfKkJQoAoGCCqGSM49
AwEHoUQDQgAEO6EDIzDo6KU2Z9ajW/pvxfBTzFtCbRLL8j2ql0Lj6oNOhKUQ576/
DsaJWA41MnPaDAxb5WCganj1ozkZM+jf2w==
-----END EC PRIVATE KEY-----

So I converted it into PKCS8 formate using command:
openssl pkcs8 -topk8 -nocrypt -in localhost.pem -out localhostpkcs8.pem

and loaded in Java using below code:
    Security.addProvider(new BouncyCastleProvider());
    KeyFactory kf = KeyFactory.getInstance(""EC"",""BC"");
    PKCS8EncodedKeySpec privateKeySpec = new PKCS8EncodedKeySpec(Base64.decode(localhostpkcs8.getBytes()));
    PrivateKey privateKey=kf.generatePrivate(privateKeySpec);

Everything worked perfectly.
","690","<java><x509certificate><bouncycastle><ecdsa><ecies>","0","0","1","2016-12-02 10:01:34","40929404","0","3","7208029","","2016-11-30 06:16:06","2016-11-30 05:21:32",""
"49825455","ECDSA signature Java vs Go","I am trying to learn some Go and blockchains.. Starting with ECDSA signatures. Trying to figure out how to test if I had a correctly working Go implementation of ECDSA signatures, I figured I would try to create a similar version in Java and compare the results to see if I can get them to match.
So Java attempt:
public static void main(String[] args) throws Exception {
    //the keys below are previously generated with ""generateKey();"" and base64 encoded
    generateKey();
    String privStr = ""MEECAQAwEwYHKoZIzj0CAQYIKoZIzj0DAQcEJzAlAgEBBCAQ7bMVIcWr9NpSD3hPkns5C0qET87UvyY5WI6UML2p0Q=="";
    String pubStr = ""MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAES8VdACZT/9u1NmaiQk0KIjEXxiaxms74nu/ps6bP0OvYMIlTdIWWU2s35LEKsNJH9u5QM2ocX53BPjwbsENXJw=="";
    PrivateKey privateKey = base64ToPrivateKey(privStr);
    PublicKey publicKey = base64ToPublicKey(pubStr);
    String str = ""This is string to sign"";
    byte[] signature = signMsg(str, privateKey);
    boolean ok = verifySignature(publicKey, str, signature);
    System.out.println(""signature ok:"" + ok);
    String privHex = getPrivateKeyAsHex(privateKey);
}

public static byte[] signMsg(String msg, PrivateKey priv) throws Exception {
    Signature ecdsa = Signature.getInstance(""SHA1withECDSA"");

    ecdsa.initSign(priv);

    byte[] strByte = msg.getBytes(""UTF-8"");
    ecdsa.update(strByte);

    byte[] realSig = ecdsa.sign();
    //the printed signature from here is what is used in the Go version (hex string)
    System.out.println(""Signature: "" + new BigInteger(1, realSig).toString(16));
    return realSig;
}

//https://stackoverflow.com/questions/30175149/error-when-verifying-ecdsa-signature-in-java-with-bouncycastle

private static boolean verifySignature(PublicKey pubKey, String msg, byte[] signature) throws Exception {
    byte[] message = msg.getBytes(""UTF-8"");
    Signature ecdsa = Signature.getInstance(""SHA1withECDSA"");
    ecdsa.initVerify(pubKey);
    ecdsa.update(message);
    return ecdsa.verify(signature);
}

public static String generateKey() throws Exception {
    KeyPairGenerator keyGen = KeyPairGenerator.getInstance(""EC"");
    SecureRandom random = SecureRandom.getInstance(""SHA1PRNG"");

    keyGen.initialize(256, random); //256 bit key size

    KeyPair pair = keyGen.generateKeyPair();
    PrivateKey priv = pair.getPrivate();
    ECPrivateKey ePriv = (ECPrivateKey) priv;
    PublicKey pub = pair.getPublic();

    //https://stackoverflow.com/questions/5355466/converting-secret-key-into-a-string-and-vice-versa
    String encodedPrivateKey = Base64.getEncoder().encodeToString(priv.getEncoded());
    byte[] pubEncoded = pub.getEncoded();
    String encodedPublicKey = Base64.getEncoder().encodeToString(pubEncoded);
    System.out.println(encodedPrivateKey);
    System.out.println(encodedPublicKey);
    return encodedPrivateKey;
}

public static PrivateKey base64ToPrivateKey(String encodedKey) throws Exception {
    byte[] decodedKey = Base64.getDecoder().decode(encodedKey);
    return bytesToPrivateKey(decodedKey);
}

public static PrivateKey bytesToPrivateKey(byte[] pkcs8key) throws GeneralSecurityException {
    PKCS8EncodedKeySpec spec = new PKCS8EncodedKeySpec(pkcs8key);
    KeyFactory factory = KeyFactory.getInstance(""EC"");
    PrivateKey privateKey = factory.generatePrivate(spec);
    return privateKey;
}

public static PublicKey base64ToPublicKey(String encodedKey) throws Exception {
    byte[] decodedKey = Base64.getDecoder().decode(encodedKey);
    return bytesToPublicKey(decodedKey);
}

public static PublicKey bytesToPublicKey(byte[] x509key) throws GeneralSecurityException {
    X509EncodedKeySpec spec = new X509EncodedKeySpec(x509key);
    KeyFactory factory = KeyFactory.getInstance(""EC"");
    PublicKey publicKey = factory.generatePublic(spec);
    return publicKey;
}

//https://stackoverflow.com/questions/40552688/generating-a-ecdsa-private-key-in-bouncy-castle-returns-a-public-key
private static String getPrivateKeyAsHex(PrivateKey privateKey) {
    ECPrivateKey ecPrivateKey = (ECPrivateKey) privateKey;
    byte[] privateKeyBytes = ecPrivateKey.getS().toByteArray();
    System.out.println(""S:""+ecPrivateKey.getS());

    String hex = bytesToHex(privateKeyBytes);

    System.out.println(""Private key bytes: "" + Arrays.toString(privateKeyBytes));
    System.out.println(""Private key hex: "" + hex);

    return hex;
}

private final static char[] hexArray = ""0123456789ABCDEF"".toCharArray();

public static String bytesToHex(byte[] bytes) {
    char[] hexChars = new char[bytes.length * 2];
    for (int j = 0 ; j < bytes.length ; j++) {
        int v = bytes[j] & 0xFF;
        hexChars[j * 2] = hexArray[v >>> 4];
        hexChars[j * 2 + 1] = hexArray[v & 0x0F];
    }
    return new String(hexChars);
}

Doing the signing and verification in Java works just fine. Easy to configure of course, since they are all the same libs, parameters, and all.
To verify the same signature in Go, I tried:
func TestSigning(t *testing.T) {
    privKey := hexToPrivateKey(""10EDB31521C5ABF4DA520F784F927B390B4A844FCED4BF2639588E9430BDA9D1"")
    pubKey := privKey.Public()
    sig := ""3045022071f06054f450f808aa53294d34f76afd288a23749628cc58add828e8b8f2b742022100f82dcb51cc63b29f4f8b0b838c6546be228ba11a7c23dc102c6d9dcba11a8ff2""
    sigHex, _ := hex.DecodeString(sig)
    ePubKey := pubKey.(*ecdsa.PublicKey)
    ok := verifyMySig(ePubKey, ""This is string to sign"", sigHex)
    println(ok)
}

func verifyMySig(pub *ecdsa.PublicKey, msg string, sig []byte) bool {
    r := new(big.Int).SetBytes(sig[:len(sig)/2])
    s := new(big.Int).SetBytes(sig[len(sig)/2:])
    return ecdsa.Verify(pub, []byte(msg), r, s)
}

func hexToPrivateKey(hexStr string)  *ecdsa.PrivateKey {
    bytes, _ := hex.DecodeString(hexStr)

    k := new(big.Int)
    k.SetBytes(bytes)
    println(""k:"")
    fmt.Println(k.String())

    priv := new(ecdsa.PrivateKey)
    curve := elliptic.P256()
    priv.PublicKey.Curve = curve
    priv.D = k
    priv.PublicKey.X, priv.PublicKey.Y = curve.ScalarBaseMult(k.Bytes())

    return priv
}

Initially, I tried to just export the Private key in Java as a base64 encoded string, and import that into Go. But I could not figure out how to get Go to load the key in the format Java stores if (X509EncodedKeySpec). So instead, I tried this way to copy the big integer of the private key only, and generate the public key from that. If I get that to work, then try to copy just the public key..
Anyway, the Go code fails to verify the signature. It is always false. Also, I cannot figure out where to put the SHA function in Go from ""SHA1withECDSA"" part.
I am sure I am missing some basic concepts here. How to do this properly?
","Managed to get this to work. So just to document it for myself and anyone interested..
As pointed by in comments, the signature from Java is in ASN1 format. Found a nice description of the format here: https://crypto.stackexchange.com/questions/1795/how-can-i-convert-a-der-ecdsa-signature-to-asn-1.
I also found some good examples on how to do SHAxx with ECDSA in Go at https://github.com/gtank/cryptopasta (sign.go and sign_test.go). Just need to run the relevant SHA function before the ECDSA code.
Found example code for building the public keys from parameters in Go at http://codrspace.com/supcik/golang-jwt-ecdsa/.
I paste the relevant code below, if someone finds an issue, please let me know..
Relevant Java code:
public static PublicKey bytesToPublicKey(byte[] x509key) throws GeneralSecurityException {
    X509EncodedKeySpec spec = new X509EncodedKeySpec(x509key);
    KeyFactory factory = KeyFactory.getInstance(""EC"");
    ECPublicKey publicKey = (ECPublicKey) factory.generatePublic(spec);
    //We should be able to use these X and Y in Go to build the public key
    BigInteger x = publicKey.getW().getAffineX();
    BigInteger y = publicKey.getW().getAffineY();
    System.out.println(publicKey.toString());
    return publicKey;
}

//we can either use the Java standard signature ANS1 format output, or just take the R and S parameters from it, and pass those to Go
//https://stackoverflow.com/questions/48783809/ecdsa-sign-with-bouncycastle-and-verify-with-crypto
public static BigInteger extractR(byte[] signature) throws Exception {
    int startR = (signature[1] & 0x80) != 0 ? 3 : 2;
    int lengthR = signature[startR + 1];
    return new BigInteger(Arrays.copyOfRange(signature, startR + 2, startR + 2 + lengthR));
}

public static BigInteger extractS(byte[] signature) throws Exception {
    int startR = (signature[1] & 0x80) != 0 ? 3 : 2;
    int lengthR = signature[startR + 1];
    int startS = startR + 2 + lengthR;
    int lengthS = signature[startS + 1];
    return new BigInteger(Arrays.copyOfRange(signature, startS + 2, startS + 2 + lengthS));
}

public static byte[] signMsg(String msg, PrivateKey priv) throws Exception {
    Signature ecdsa = Signature.getInstance(""SHA1withECDSA"");

    ecdsa.initSign(priv);

    byte[] strByte = msg.getBytes(""UTF-8"");
    ecdsa.update(strByte);

    byte[] realSig = ecdsa.sign();

    //this is the R and S we could also pass as the signature
    System.out.println(""R: ""+extractR(realSig));
    System.out.println(""S: ""+extractS(realSig));

    return realSig;
}

Relevant Go code:
func verifyMySig(pub *ecdsa.PublicKey, msg string, sig []byte) bool {
    //https://github.com/gtank/cryptopasta
    digest := sha1.Sum([]byte(msg))

    var esig ecdsaSignature
    asn1.Unmarshal(sig, &esig)
    //above is ASN1 decoding from the Java format. Alternatively, we can just transfer R and S parameters and set those
    //  esig.R.SetString(""89498588918986623250776516710529930937349633484023489594523498325650057801271"", 0)
    //  esig.S.SetString(""67852785826834317523806560409094108489491289922250506276160316152060290646810"", 0)
    fmt.Printf(""R: %d , S: %d"", esig.R, esig.S)
    println()
    return ecdsa.Verify(pub, digest[:], esig.R, esig.S)
}

func hexToPrivateKey(hexStr string)  *ecdsa.PrivateKey {
    bytes, err := hex.DecodeString(hexStr)
    print(err)

    k := new(big.Int)
    k.SetBytes(bytes)
    println(""k:"")
    fmt.Println(k.String())

    priv := new(ecdsa.PrivateKey)
    curve := elliptic.P256()
    priv.PublicKey.Curve = curve
    priv.D = k
    priv.PublicKey.X, priv.PublicKey.Y = curve.ScalarBaseMult(k.Bytes())
    //we can check these against the Java implementation to see if it matches to know key was transferred OK
    fmt.Printf(""X: %d, Y: %d"", priv.PublicKey.X, priv.PublicKey.Y)
    println()

    return priv
}

","683","<java><go><ecdsa>","2","2","1","2018-04-14 12:47:13","","2","1","","","","2018-04-13 21:37:10",""
"36452829","OpenSSL ECDSA signature validity","From OpenSSL documentation
Creating an ECDSA signature of a given SHA-256 hash value using the named curve prime256v1 (aka P-256).
Second step: compute the ECDSA signature of a SHA-256 hash value using ECDSA_do_sign():
sig = ECDSA_do_sign(digest, 32, eckey);
if (sig == NULL) {
   /* error */
}

or using ECDSA_sign():
unsigned char *buffer, *pp;
int            buf_len;
buf_len = ECDSA_size(eckey);
buffer  = OPENSSL_malloc(buf_len);
pp = buffer;
if (ECDSA_sign(0, dgst, dgstlen, pp, &buf_len, eckey) == 0) {
   /* error */
}

Third step: verify the created ECDSA signature using ECDSA_do_verify():
ret = ECDSA_do_verify(digest, 32, sig, eckey);

or using ECDSA_verify():
ret = ECDSA_verify(0, digest, 32, buffer, buf_len, eckey);

and finally evaluate the return value:
if (ret == 1) {
   /* signature ok */
} else if (ret == 0) {
   /* incorrect signature */
} else {
   /* error */
}

EOF
This brings me to an understanding that I need to verify every signature I create with ECDSA_do_sign or ECDSA_sign, do I? Can it happen that a created signature is not valid?
","From NIST PUB 186-4 - Digital Signature Standard section 4.7:

Signature verification may be performed by any party (i.e., the signatory, the intended recipient or any other party) using the signatory’s public key. A signatory may wish to verify that the computed signature is correct, perhaps before sending the signed message to the intended recipient. The intended recipient (or any other party) verifies the signature to determine its
  authenticity.

(where the signatory is the signature creator)
","660","<c><openssl><ecdsa>","0","0","1","2016-08-15 06:43:44","","1","","","","","2016-04-06 13:37:27",""
"47110770","Set ECDSA on Apache and get SSL_ERROR_NO_CYPHER_OVERLAP","thats my first post. 
I will set up an Apache with ECDSA.
I generates this keys
secp256k1 : SECG curve over a 256 bit prime field
secp384r1 : NIST/SECG curve over a 384 bit prime field
and generate a self-signed certificate.
openssl ecparam -name secp256k1 -genkey -param_enc explicit -out rootCA.key
openssl req -x509 -new -nodes -key server.key -sha256 -days 1024 -out rootCA.pem

At the ssl.conf I set
SSLCipherSuite ECDHE-ECDSA-AES128-SHA256:ECDHE-ECDSA-AES256-SHA384

Wireshark shows me that the client supports the cipher and i looked at firefox config
The same cipher but with RSA cert works without problems. 
I showed enough Tutorials but i cant find the problem.
www.ssllabs.com/ssltest/ this test fails also with ""Assessment failed: Failed to communicate with the secure server"" 
Have someone ideas what I can do? 
","You cannot use ECDSA ciphers if you don't present an ECDSA certificate.
openssl ecparam -name secp256k1 -genkey -param_enc explicit -out rootCA.key

Great this should have created an ECDSA private key. Now you need to make it into a certificate (possibly a self-signed certificate).
But in your following commands, you never use rootCA.key to make a certificate. Most probably you have generated an RSA certificate not ECDSA. Try to use -key rootCA.key in your openssl req command.
","644","<apache><ssl><encryption><ecdsa>","1","0","1","2017-11-04 16:43:02","","0","","","","","2017-11-04 12:33:26",""
"38702169","C# ECDsaCng.SignData use signature in OpenSSL?","I need to know what encoding
https://msdn.microsoft.com/en-us/library/bb347054(v=vs.110).aspx
ECDsaCng.SignData Method (Byte[])

is using for it's byte array by default and how to convert it to a DER format accepted by
https://www.openssl.org/docs/manmaster/crypto/i2d_ECDSA_SIG.html
so that I can verify my C# generated ECDSA signature in OpenSSL using the method ECDSA_do_verify.
I know its SHA1 and I know how to load that digest, I just don't know what the byte encoding is for the ECDsaCng.SignData method, nor how to convert it to DER format, if I even need to do that.
","An ECDSA signature is the value-pair (r, s).
Windows CNG emits this as a concatenation of the two values, and since .NET does not reinterpret the data, this is the de facto .NET format. (r is the first half of the array, s is the second half)
OpenSSL expects a DER encoded structure of SEQUENCE(INTEGER(r), INTEGER(s)).  This loosely means { 0x30, payload_length, 0x02, r_length, r_bytes[0]...r_bytes[r_length-1], 0x02, s_length, s_bytes[0]...s_bytes[s_length-1] }; though it's slightly trickier than that because padding bytes are required when r_bytes[0] or s_bytes[0] >= 0x80 (since that makes it appear as a negative number).
Unfortunately, there's not a general purpose DER encoder exposed in the framework by default.
If you're trying to run on Linux, you might be better served by using .NET Core, since the ECDSA implementation for Linux already does this data translation.
","643","<c#><c++><openssl><signing><ecdsa>","0","1","2","2019-02-27 08:23:33","38703188","4","","160074","","2019-02-07 11:59:38","2016-08-01 15:03:10",""
"38702169","C# ECDsaCng.SignData use signature in OpenSSL?","I need to know what encoding
https://msdn.microsoft.com/en-us/library/bb347054(v=vs.110).aspx
ECDsaCng.SignData Method (Byte[])

is using for it's byte array by default and how to convert it to a DER format accepted by
https://www.openssl.org/docs/manmaster/crypto/i2d_ECDSA_SIG.html
so that I can verify my C# generated ECDSA signature in OpenSSL using the method ECDSA_do_verify.
I know its SHA1 and I know how to load that digest, I just don't know what the byte encoding is for the ECDsaCng.SignData method, nor how to convert it to DER format, if I even need to do that.
","Here's TLSSigAPI.cs the code of generating sign with .Net and verifying with OpenSSL.
Maybe help you.
byte[] rawDataHash = SHA256(rawData);
byte[] rawSig = ecdsa.SignHash(rawDataHash);
int halfLength = rawSig.Length / 2;
byte[][] rEncoded = SegmentedEncodeUnsignedInteger(rawSig, 0, halfLength);
byte[][] sEncoded = SegmentedEncodeUnsignedInteger(rawSig, halfLength, halfLength);
List<byte[][]> items = new List<byte[][]>() { rEncoded, sEncoded };
byte[] opensslSig = ConstructSequence(items);

","643","<c#><c++><openssl><signing><ecdsa>","0","0","2","2019-02-27 08:23:33","38703188","4","","160074","","2019-02-07 11:59:38","2016-08-01 15:03:10",""
"39233560","Verify ECDSA signature from PyKCS11","I have a python program which uses PyKCS11, a python wrapper for pkcs11 interface. I can sign data with a ECC private key (Mechanism CKM_ECDSA) that is stored on a HSM and that is accessed by PyKCS11.
What I now want is to verify with openssl the ECDSA signature by the corresponding public key. This public key is contained in a x509 (NewCert.pem) which was created out of the private key in the HSM.
I tested many ways to verify the signature properly, but I didn't succeed.
openssl dgst -ecdsa-with-SHA1 -verify <(openssl x509 -noout -pubkey -in NewCert.pem) -signature <(cat sign | base64 -d) file

The file 'signature' contains the base64 encoded signature. And the file 'file' the plain data.
Thank you
","Finally I found a solution for my problem.
I)
The signature output of PyKCS11 is the concatenation of the r and s value of the ECDSA signature. It is not formatted in ASN1 style. This was the first problem why verification with openssl is not possible, because the latter requires this format.
II)
So I wrote a function that formats the PyKCS11 output to ASN1 conformity and saves the binary signature output to a file.
III)
In order to use hashing functions you first have to hash the data or the file to be signed. This can be done in Python with the command digest() of hashlib. After this you give this binary hash of the data as input to PyKCS11 and create the signature.
IV)
Verification of the hashed ECDSA signature can be done with the following command in openssl:
openssl dgst -sha384 -verify pubkey -signature file.sign file

Make sure that pubkey is the EC public key from the corresponding x509 certificate (not the x509 itself). And file.sign means to be the binary file which contains the ECDSA signature that represents the binary hash of the original data (see step III).
Hope this helps for somebody else.
","635","<pkcs#11><pyopenssl><ecdsa>","0","1","1","2016-09-06 14:32:22","39351631","1","1","608639","","2016-08-31 01:00:44","2016-08-30 17:22:43",""
"14198775","Why are these Botan public keys so similar?","I am using Botan to create public/private ECDSA keypairs.  The public keys that are generated (even on different machines using this code) are very similar... too similar to consider safe I would think.  Here is an example of two runs:
-----BEGIN PUBLIC KEY-----  
MIIBEzCB7AYHKoZIzj0CATCB4AIBATAsBgcqhkjOPQEBAiEA////////////////
/////////////////////v///C8wRAQgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAEIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHBEEEeb5m
fvncu6xVoGKVzocLBwKb/NstzijZWfKBWxb4F5hIOtp3JqPEZV2k+/wOEQio/Re0
SKaFVBmcR9CP+xDUuAIhAP////////////////////66rtzmr0igO7/SXozQNkFB
AgEBAyIAAneDBKm4ubKbv0hxgzhkh0oAI8WKFTs1Hz/Qqyl6qxzD  
-----END PUBLIC KEY-----

-----BEGIN PUBLIC KEY-----  
MIIBEzCB7AYHKoZIzj0CATCB4AIBATAsBgcqhkjOPQEBAiEA////////////////
/////////////////////v///C8wRAQgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAEIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHBEEEeb5m
fvncu6xVoGKVzocLBwKb/NstzijZWfKBWxb4F5hIOtp3JqPEZV2k+/wOEQio/Re0
SKaFVBmcR9CP+xDUuAIhAP////////////////////66rtzmr0igO7/SXozQNkFB
AgEBAyIAAtQr5BPT04pk/Ror6uIGRqEKeB8dwIteR8p/r+Nl7hql  
-----END PUBLIC KEY-----

I am using X509 encoding to encode the public key.  Here's the code to generate the ECDSA keys:
LibraryInitializer init;
AutoSeeded_RNG rng;
EC_Group ecGroup(""secp256k1"");
ECDSA_PrivateKey key(rng, ecGroup);

Why am I generating such similar public keys?  And am I right in assuming that isn't ""safe"" if multiple users were to use this code to generate their own keys?

UPDATE:
The answer below seems correct. I emailed the creator of XCA, Christian Hohnstaedt, to probe a little further into how XCA generates this public key and what it is. He replied that it is the EC_POINT and is obtained by using the command 
openssl ec -pubin -noout -text

Plugging in the X509 PEM encoded public keys indeed reveals different public EC Points.  It should be noted (for other newbs like me) that the public EC Points in the answer do no good for another party on their own - the other party needs to know which EC Group is being used, and that's why the X509 PEM encoding is much more helpful than just an EC Point.
","The actual public keys from these are:
02:77:83:04:A9:B8:B9:B2:9B:BF:48:71:83:38:64:87
4A:00:23:C5:8A:15:3B:35:1F:3F:D0:AB:29:7A:AB:1C
C3 

and
02:D4:2B:E4:13:D3:D3:8A:64:FD:1A:2B:EA:E2:06:46
A1:0A:78:1F:1D:C0:8B:5E:47:CA:7F:AF:E3:65:EE:1A
A5

These are not the same, so there is no apparent reason to worry on that front. The data that is the same is the key meta-data and encoding bumf (which you would expect to be the same for identical format keys).
Values obtained by importing into xca (linux). There are better tools for inspecting DER encoded data, but I couldn't find any easily.
","626","<security><public-key-encryption><x509><botan><ecdsa>","3","3","1","2013-01-09 21:33:21","14205433","4","","515412","","2013-01-09 21:33:21","2013-01-07 15:22:02",""
"43569748","whose performance is better digital signatures (ECDSA) or Hash based signatures in case of ad-hoc networks","i want to know performance wise which is better to provide message authenticity, ECDSA signatures or hash based signatures, although i have read the comparisons of ECDSA with RSA, but not found with hash based signatures. Can ECDSA signatures replaced  with Hash based signatures improves the message authenticity or not. 
","ECDSA is a hash based signature, in that the data gets hashed, then ECDSA is performed on the hash (not the whole data)
When it comes to data verification there are three main approaches:

Straight hash (e.g. SHA-2-256)

The fastest option to verify
If you are only protecting against line corruption this is a valid choice.
Otherwise, requires that the hash/digest value be sent over a secure (from tamper) channel, because the tampered can easily transmit the digest along with the tampered document
Provides no proof of origin

HMAC (e.g. HMACSHA256)

Requires that both the sender and receiver share the secret key
Either the sender or receiver having the key stolen puts both sides at risk
Secret key needs to come from key agreement algorithms (ECDH) or be transmitted in secret (encrypted)
Proves the document came from someone with the shared secret.

Digital Signature (e.g. ECDSA, RSA signature)


The sender is the only entity with the private key, receiver needs public key (non-secret)
Public key can be embedded in an X.509 certificate to provide a notarized association of public key to the signer
Or the public key can be transmitted raw over a secure (from tamper) channel.
Provides strong assurances about the document origin, since they shouldn't share their private key.


All three options use a hash algorithm to reduce the original data, the rest of the algorithms are what do you do with that data. There's not really a standard definition of ""secure"", you have to say ""secure against (something)"". ECDSA provides more assurances than HMAC as long as the private key isn't shared. But if HMAC provides enough assurance it is probably faster on average (specialty hardware aside).
","626","<hash><ecdsa>","0","1","1","2017-04-24 01:42:49","","0","","","","","2017-04-23 10:06:19",""
"30102116","How to convert ECDSA SIG signature to array of characters in C","I'm a beginner to cryptography (openssl library) and I wanted help on how to send an ECDSA signature through a C socket communication. My plan is: 

make socket connection
convert ECDSA SIG object into string
send signature in the form of a string
At the destination, convert the string back to SIG object and verify signing

Here is the code.
static ECDSA_SIG* sig = NULL;
static EC_KEY    *eckey = NULL;

 int main(int argc, char *argv[])
{         
    unsigned char* msgDigest = ""6df19ccf6b89397c9a9906bfd0848f061352e9b5"";
    if(ECDSAsign()) 
        printf(""signed successfully\n"");
    else
        printf(""signing failed\n""); 

    ...
}

int ECDSAsign()
{
    int ret;

    eckey = EC_KEY_new_by_curve_name(NID_secp192k1);
    if (eckey == NULL)
    {
        printf("" error "");
        return 0;
    }

    if (!EC_KEY_generate_key(eckey))
    {
        printf("" error "");
        return 0;
    }

     unsigned char *buffer, *pp;
     int bufLen;
     bufLen = ECDSA_size(eckey);
     buffer = OPENSSL_malloc(bufLen);
     pp = buffer;
     unsigned char *dgst = ""5df19ccf6b89397c9a9906bfd0848f061352e9ba"";
     sig = ECDSA_do_sign(dgst, strlen(dgst), eckey);
     if (sig == NULL)
     {
        printf("" Signature NOT generated\n "");
        return 0;
     }

    return 1;
}

","
How to convert ECDSA SIG signature to array of characters in C
  ...

The signature is already an array of bytes. That is what is returned from EVP_DigestSignFinal.

In general, you want to use the EVP_* interfaces for signing and verification. Below is from the OpenSSL wiki on EVP Signing and Verifying.
Your job below is to get the ECDSA into the EVP_PKEY*. The function will allocate the signature buffer with OPENSSL_malloc. The caller needs to free it with OPENSSL_free. The buffer is an array of bytes.
int sign_it(const byte* msg, size_t mlen, byte** sig, size_t* slen, EVP_PKEY* pkey)
{
    /* Returned to caller */
    int result = -1;

    if(!msg || !mlen || !sig || !pkey) {
        assert(0);
        return -1;
    }

    if(*sig)
        OPENSSL_free(*sig);

    *sig = NULL;
    *slen = 0;

    EVP_MD_CTX* ctx = NULL;

    do
    {
        ctx = EVP_MD_CTX_create();
        assert(ctx != NULL);
        if(ctx == NULL) {
            printf(""EVP_MD_CTX_create failed, error 0x%lx\n"", ERR_get_error());
            break; /* failed */
        }

        const EVP_MD* md = EVP_get_digestbyname(""SHA256"");
        assert(md != NULL);
        if(md == NULL) {
            printf(""EVP_get_digestbyname failed, error 0x%lx\n"", ERR_get_error());
            break; /* failed */
        }

        int rc = EVP_DigestInit_ex(ctx, md, NULL);
        assert(rc == 1);
        if(rc != 1) {
            printf(""EVP_DigestInit_ex failed, error 0x%lx\n"", ERR_get_error());
            break; /* failed */
        }

        rc = EVP_DigestSignInit(ctx, NULL, md, NULL, pkey);
        assert(rc == 1);
        if(rc != 1) {
            printf(""EVP_DigestSignInit failed, error 0x%lx\n"", ERR_get_error());
            break; /* failed */
        }

        rc = EVP_DigestSignUpdate(ctx, msg, mlen);
        assert(rc == 1);
        if(rc != 1) {
            printf(""EVP_DigestSignUpdate failed, error 0x%lx\n"", ERR_get_error());
            break; /* failed */
        }

        size_t req = 0;
        rc = EVP_DigestSignFinal(ctx, NULL, &req);
        assert(rc == 1);
        if(rc != 1) {
            printf(""EVP_DigestSignFinal failed (1), error 0x%lx\n"", ERR_get_error());
            break; /* failed */
        }

        assert(req > 0);
        if(!(req > 0)) {
            printf(""EVP_DigestSignFinal failed (2), error 0x%lx\n"", ERR_get_error());
            break; /* failed */
        }

        *sig = OPENSSL_malloc(req);
        assert(*sig != NULL);
        if(*sig == NULL) {
            printf(""OPENSSL_malloc failed, error 0x%lx\n"", ERR_get_error());
            break; /* failed */
        }

        *slen = req;
        rc = EVP_DigestSignFinal(ctx, *sig, slen);
        assert(rc == 1);
        if(rc != 1) {
            printf(""EVP_DigestSignFinal failed (3), return code %d, error 0x%lx\n"", rc, ERR_get_error());
            break; /* failed */
        }

        assert(req == *slen);
        if(rc != 1) {
            printf(""EVP_DigestSignFinal failed, mismatched signature sizes %ld, %ld"", req, *slen);
            break; /* failed */
        }

        result = 0;

    } while(0);

    if(ctx) {
        EVP_MD_CTX_destroy(ctx);
        ctx = NULL;
    }

    /* Convert to 0/1 result */
    return !!result;
}

","625","<c><sockets><openssl><sign><ecdsa>","1","0","1","2015-05-07 17:33:40","","0","","608639","","2015-05-07 17:20:21","2015-05-07 13:12:27",""
"34487145","Get list of supported cipher suites (to detect ECDSA support)","I'm considering the possibility of using a content delivery network for my websites. Because I'm such a cheapskate, I am trying to reduce the cost of doing so.
There is a fantastic CDN that is extremely low cost, but only supports browsers and operating systems that support SNI and ECDSA key exchange. (Bonus points for those who guess which one it is!)
I am therefore thinking of using ngx_pagespeed to rewrite resources to the CDN for web browsers that support ECDSA key exchange, and either not use a CDN or use a more expensive (but compatible) CDN for those who don't.
Unfortunately, I could not find a way to have nginx detect ECDSA support of browsers. Here is what I have considered so far:

User-agent sniffing - this is generally a bad idea, and would not be able to detect those behind bad corporate proxies
Use JavaScript to detect support and set a cookie - this would make the client download resources twice after the first pageview, and would not work if the user has JavaScript or cookies disabled.
Serve a blank interstitial page containing detection JavaScript - this would again not work without JavaScript or cookies, and would be harmful to SEO. Additionally, this would be slow, and even slower if detection takes a long time behind some strange proxies.

I see that it is possible for a server to read the cipher suites, such as in Qualys SSL Labs or this FREAK attack testing tool. How could I read the list of client supported cipher suites in nginx?
","","624","<encryption><nginx><https><cdn><ecdsa>","0","","0","2015-12-28 02:53:48","","5","","","","","2015-12-28 02:53:48",""
"39221123","Using ECDSA private key in Java with BouncyCastle","I'm trying to use ECDSA in Java with BouncyCastle library and the private key I get by reading the pkcs12 file in Java is different than what I see in the PEM file (which I got using openssl). I'm unsure if they should be the same but seems logical. Question is how do I get the same private key in Java using BC from a pkcs12 file as using openssl?
The cert and the key was generated with
openssl ecparam -name secp521r1 -genkey -param_enc explicit -out private-key.pem
openssl req -new -x509 -key private-key.pem -out server.pem -days 730              
openssl pkcs12 -export -clcerts -in server.pem -inkey private-key.pem -out ecdsaCertificate.p12

Java code:
 Public static void readCertificateData()
      throws KeyStoreException, NoSuchProviderException, NoSuchAlgorithmException, CertificateException,
      FileNotFoundException, IOException, UnrecoverableKeyException {

System.out.println(""Get KeyStore"");
KeyStore pkcs12Store = KeyStore.getInstance(""pkcs12"", ""BC"");
System.out.println(""Read File"");
pkcs12Store.load(new FileInputStream(CERT), PASSWORD.toCharArray());

Enumeration aliasEnum = pkcs12Store.aliases();
Key key = null;
Certificate cert = null;

while (aliasEnum.hasMoreElements()) {

      String keyName = (String) aliasEnum.nextElement();
      key = pkcs12Store.getKey(keyName, PASSWORD.toCharArray());
      ECPrivateKey ecKey = (ECPrivateKey) key;

      System.out.println(""ecKey : \n"" + ecKey.toString());
      System.out.println(""privKeyToDER:\n"" + privateKeyToDER((PrivateKey) key));
      cert = pkcs12Store.getCertificate(keyName);
      System.out.println(""cert2 :\n"" + Base64.toBase64String((cert.getEncoded())));

      StringToFile(DIR + ""tempCert.pem"", ""-----BEGIN CERTIFICATE-----\n""
              + Base64.toBase64String((cert.getEncoded())) + ""-----END CERTIFICATE-----\n"");
      System.out.println(""privKey Base64 : "" + Base64.toBase64String(key.getEncoded()));
      cert = pkcs12Store.getCertificate(keyName);
}
}
public static String privateKeyToDER(PrivateKey key) throws IOException {
    ByteArrayOutputStream bos = new ByteArrayOutputStream();
    JcaPEMWriter pemWriter = new JcaPEMWriter(new OutputStreamWriter(bos));

    pemWriter.writeObject(key);
    pemWriter.close();

    return new String(bos.toByteArray());
}

","","617","<java><bouncycastle><ecdsa>","0","","0","2016-08-30 07:16:11","","2","","","","","2016-08-30 07:16:11",""
"48542233","Translating Elliptic Curve parameters (BC to MS)","I'm trying to generate ECDSA self-signed certificate as described in generate certificate using ECDSA. Putting all pieces from bartonjs's answer together and using Net.Framework 4.7 (or Net.Core 2.0) following code seems to be working although there are some ambiguities (at least one) left:
I'm not sure how to properly convert private key ('D' parameter) from BC-BigInteger to MS-byte[]. Using BigInteger.ToByteArray() throws exception:

CryptographicException: The specified key parameters are not valid.
  Q.X and Q.Y are required fields. Q.X, Q.Y must be the same length. If
  D is specified it must be the same length as Q.X and Q.Y for named
  curves or the same length as Order for explicit curves.

while validating ECParameters (method ECParameters.Validate()). Using BigInteger.ToByteArrayUnsigned() provides much better results (one failure on several hundred generated key-pairs), but still...
When using ToByteArray() converted 'D' is usually one byte longer ('D' has 33 bytes vs D.X and D.Y has 32 bytes). Using ToByteArrayUnsigned() the 'D' is sometimes one byte shorter.
So my question is whether is is ok to use ToByteArrayUnsigned().
private const string NCryptExportPolicyProperty = ""Export Policy"";
private const string SignatureAlgorithm = ""Sha256WithECDSA"";
private static readonly ECCurve MsCurve = ECCurve.NamedCurves.nistP256;
private static readonly DerObjectIdentifier BcCurve = SecObjectIdentifiers.SecP256r1; // must correspond with MsCurve

public static X509Certificate2 Create()
{    
    // 1. generate keys:
    IAsymmetricCipherKeyPairGenerator bcKeyGen = GeneratorUtilities.GetKeyPairGenerator(""ECDSA"");
    bcKeyGen.Init(new ECKeyGenerationParameters(BcCurve, new SecureRandom()));

    ECPrivateKeyParameters bcPrivKey;
    ECPublicKeyParameters bcPublKey;

    bool validated;
    ECParameters msEcp;
    do
    {
        AsymmetricCipherKeyPair bcKeyPair = bcKeyGen.GenerateKeyPair();
        bcPrivKey = (ECPrivateKeyParameters)bcKeyPair.Private;
        bcPublKey = (ECPublicKeyParameters)bcKeyPair.Public;

        // 2. ensure generated bc-keys can be translated to cng (see exception below)
        msEcp = new ECParameters();
        msEcp.Curve = MsCurve;
        msEcp.D = bcPrivKey.D.ToByteArrayUnsigned(); // or bcPrivKey.D.ToByteArray() ??
        msEcp.Q.X = bcPublKey.Q.XCoord.GetEncoded();
        msEcp.Q.Y = bcPublKey.Q.YCoord.GetEncoded();

        try
        {
            msEcp.Validate();
            validated = true;
        }
        catch (Exception e)
        {
            // Validate() occasionally throws CryptographicException: 
            // The specified key parameters are not valid. Q.X and Q.Y are required fields. Q.X, Q.Y must be the same length. If D is specified it must be the same length as Q.X and Q.Y for named curves or the same length as Order for explicit curves.
            // e.g.: D = 31, Q.X = 32, Q.Y = 32.
            validated = false;
            Console.WriteLine(""D = {0}, Q.X = {1}, Q.Y = {2}. {3}: {4}"", msEcp.D.Length, msEcp.Q.X.Length, msEcp.Q.Y.Length, e.GetType().Name, e.Message);
        }
    } while (!validated);

    // 3. create x509 certificate:
    X509V3CertificateGenerator bcCertGen = new X509V3CertificateGenerator();
    bcCertGen.SetPublicKey(bcPublKey);
    // .. set subject, validity period etc
    ISignatureFactory sigFac = new Asn1SignatureFactory(SignatureAlgorithm, bcPrivKey);
    Org.BouncyCastle.X509.X509Certificate bcX509Cert = bcCertGen.Generate(sigFac);
    byte[] x509CertEncoded = bcX509Cert.GetEncoded();

    X509Certificate2 msNewCert;

    // 4. use translated (and validated) parameters:
    using (ECDsaCng msEcdsa = new ECDsaCng())
    {
        msEcdsa.ImportParameters(msEcp);

        CngKey msPrivateKey = msEcdsa.Key;

        // 5. make private key exportable:
        byte[] bytes = BitConverter.GetBytes((int)(CngExportPolicies.AllowExport | CngExportPolicies.AllowPlaintextExport));
        CngProperty pty = new CngProperty(NCryptExportPolicyProperty, bytes, CngPropertyOptions.Persist);
        msPrivateKey.SetProperty(pty);

        // 6. tie keys together:
        using (X509Certificate2 msPubCertOnly = new X509Certificate2(x509CertEncoded))
        {
            msNewCert = MateECDsaPrivateKey(msPubCertOnly, msPrivateKey); // method from bartonjs's answer
        }
    }

    return msNewCert;
}

Thank you in advance
","When you are getting too many bytes (33 in this case) the first byte should be 0x00, and you need to remove it.  When you are getting too few (technically speaking D=1 is valid) you need to insert zeros to fill the array out.
The reason is that .NET's structure expects D to look like it does to the underlying Windows CNG import API, which means that D is a fixed-with unsigned big endian big integer.  BouncyCastle is giving you the BER INTEGER encoding, which requires inserting a 0x00 byte when the high bit of the most significant byte (bytes[0], big endian) is set in a number that should be considered positive.
BER also has a rule that the minimum number of bytes be used, which is why sometimes BouncyCastle gives a number that's too small.
Q.X and Q.Y are okay because the ECPoint encoding rules specify a fixed size big endian integer whose size is determined by the curve; which is why BouncyCastle has the GetEncoded method instead of just ToByteArrayUnsigned.
private static byte[] FixSize(byte[] input, int expectedSize)
{
    if (input.Length == expectedSize)
    {
        return input;
    }

    byte[] tmp;

    if (input.Length < expectedSize)
    {
        tmp = new byte[expectedSize];
        Buffer.BlockCopy(input, 0, tmp, expectedSize - input.Length, input.Length);
        return tmp;
    }

    if (input.Length > expectedSize + 1 || input[0] != 0)
    {
        throw new InvalidOperationException();
    }

    tmp = new byte[expectedSize];
    Buffer.BlockCopy(input, 1, tmp, 0, expectedSize);
    return tmp;
}

...

msEcp = new ECParameters();
msEcp.Curve = MsCurve;
msEcp.Q.X = bcPublKey.Q.XCoord.GetEncoded();
msEcp.Q.Y = bcPublKey.Q.YCoord.GetEncoded();
msEcp.D = FixSize(bcPrivKey.D.ToByteArrayUnsigned(), msEcp.Q.X.Length);

","605","<c#><certificate><bouncycastle><ecdsa>","0","0","1","2018-01-31 16:42:49","48547186","2","1","","","","2018-01-31 12:28:53",""
"45819620","correct encoding in ecdsa, python","I am following technical instructions how to create a bitcoin wallet.
It says:
private_key = 18E14A7B6A307F426A94F8114701E7C8E774E7F9A47E2C2035DB29A206321725

1 - Take the corresponding public key generated with it (65 bytes, 1 byte 0x04, 32 bytes corresponding to X coordinate, 32 bytes corresponding to Y coordinate) 
public_key= 0450863AD64A87AE8A2FE83C1AF1A8403CB53F53E486D8511DAD8A04887E5B23522CD470243453A299FA9E77237716103ABC11A1DF38855ED6F2EE187E9C582BA6

and my code in python 3.5.2 :
from ecdsa import SigningKey, SECP256k1

private_key = '18E14A7B6A307F426A94F8114701E7C8E774E7F9A47E2C2035DB29A206321725'

x = SigningKey.from_string(private_key, curve=SECP256k1)
print(x)

The error: 
output = ERROR: assert len(string) == curve.baselen, (len(string), curve.baselen)
builtins.AssertionError: (64, 32)

I am not really sure what to do, because any manipulation would return different public_key. Any ideas how to solve this?
","The private key you are using in your example above seems to be in hex format. The function,
 from_string(private_key, curve=SECP256k1) 

takes a string private_key. So instead of passing the hex format private key you must pass it a string version
Below is what I tried and it seems to be working just fine,
 private_key = SigningKey.generate(curve=SECP256k1)
 string_private_key = private_key.to_string()
 SigningKey.from_string(string_private_key, curve=SECP256k1)

This successfully returns an ecdsa signing key object 
<ecdsa.keys.SigningKey object at 0x103a53f60>

","603","<python><ecdsa>","1","0","1","2018-03-13 07:08:57","","1","","5007059","","2018-03-13 07:08:57","2017-08-22 13:54:02",""
"56619355","ES256 JWT Signing in PHP for Apple AppStoreConenct API Auth","I'm trying to authenticate to Apple's AppStoreConnect API with an ES256 signed JWT (per their instructions at https://developer.apple.com/documentation/appstoreconnectapi) using PHP. 
Sending my request always results in a 401 NOT_AUTHORIZED error.
I've verified that the the contents of my header and claims are correct - I even found a Ruby script online for generating an ES256 signed JWT and using my Apple provided Issuer, Key ID, Private Key, it works swimmingly - Apple accepts the token. That tells me that my credentials are good and I'm doing something wrong in php.
Unless I've simply stared at this code for too long, the JWT format is correct, base64 encoded correctly, and the bearer token is set correctly in the header.
To rule out an issue with request sending I've tried both GuzzleHTTP and CLI cURL - both a 401.

Here's the relevant code. You'll see that the create method is encoding the header and claims, signing the ""payload"", and concatenating all 3.
public function create()
{
    $header = $this->encode(
        json_encode([
            'kid' => 'my_key_id',
            'alg' => 'ES256',
            'typ' => 'JWT',
        ])
    );

    $claims = $this->encode(
        json_encode([
            'iss' => 'my_issuer_uuid',
            'exp' => time() + (20 * 60),
            'aud' => 'appstoreconnect-v1',
        ])
    );

    $signature = $this->encode(
        $this->sign(""$header.$claims"")
    );

    return $header . '.' . $claims . '.' . $signature;
}

This code successfully returns an open ssl resource, $data has the expected contents.
public function sign($data)
{
    if (!$key = openssl_pkey_get_private('file://my_key_file.p8')) {
        throw new \Exception('Failed to read PEM');
    }

    if (!openssl_sign($data, $signature, $key, OPENSSL_ALGO_SHA256)) {
        throw new \Exception('Claims signing failed');
    }

    return $signature;
}

Base64 URL encoding... $data has the expected contents.
public function encode($data)
{
    return str_replace(['+', '/', '='], ['-', '_', ''], base64_encode($data));
}

At this point I'm stumped to what it is I'm doing wrong or missing. I'm hoping some extra eyes will find something! Using the token that my code dumps out: 
curl  https://api.appstoreconnect.apple.com/v1/users --Header ""Authorization: Bearer <token>”

...always returns a 401. I suspect there's something wrong in the signing portion of the code as it's the only part I haven't been able to verify (again, worked in Ruby), though looking at all the docs and examples for openssl_sign, I'm pretty sure it's right.
For reference, this is the Ruby script I mention https://shashikantjagtap.net/generating-jwt-tokens-for-app-store-connect-api/
","The signature returned by OpenSSL is an ASN.1 sequence that contains additional information. You have to remove the extra data before concatenation.
You can use that simple class I wrote (method fromDER) to convert the OpenSSL signature.
","588","<php><jwt><sha256><ecdsa><appstoreconnect>","1","0","2","2019-07-22 16:19:16","","0","1","","","","2019-06-16 13:37:45",""
"56619355","ES256 JWT Signing in PHP for Apple AppStoreConenct API Auth","I'm trying to authenticate to Apple's AppStoreConnect API with an ES256 signed JWT (per their instructions at https://developer.apple.com/documentation/appstoreconnectapi) using PHP. 
Sending my request always results in a 401 NOT_AUTHORIZED error.
I've verified that the the contents of my header and claims are correct - I even found a Ruby script online for generating an ES256 signed JWT and using my Apple provided Issuer, Key ID, Private Key, it works swimmingly - Apple accepts the token. That tells me that my credentials are good and I'm doing something wrong in php.
Unless I've simply stared at this code for too long, the JWT format is correct, base64 encoded correctly, and the bearer token is set correctly in the header.
To rule out an issue with request sending I've tried both GuzzleHTTP and CLI cURL - both a 401.

Here's the relevant code. You'll see that the create method is encoding the header and claims, signing the ""payload"", and concatenating all 3.
public function create()
{
    $header = $this->encode(
        json_encode([
            'kid' => 'my_key_id',
            'alg' => 'ES256',
            'typ' => 'JWT',
        ])
    );

    $claims = $this->encode(
        json_encode([
            'iss' => 'my_issuer_uuid',
            'exp' => time() + (20 * 60),
            'aud' => 'appstoreconnect-v1',
        ])
    );

    $signature = $this->encode(
        $this->sign(""$header.$claims"")
    );

    return $header . '.' . $claims . '.' . $signature;
}

This code successfully returns an open ssl resource, $data has the expected contents.
public function sign($data)
{
    if (!$key = openssl_pkey_get_private('file://my_key_file.p8')) {
        throw new \Exception('Failed to read PEM');
    }

    if (!openssl_sign($data, $signature, $key, OPENSSL_ALGO_SHA256)) {
        throw new \Exception('Claims signing failed');
    }

    return $signature;
}

Base64 URL encoding... $data has the expected contents.
public function encode($data)
{
    return str_replace(['+', '/', '='], ['-', '_', ''], base64_encode($data));
}

At this point I'm stumped to what it is I'm doing wrong or missing. I'm hoping some extra eyes will find something! Using the token that my code dumps out: 
curl  https://api.appstoreconnect.apple.com/v1/users --Header ""Authorization: Bearer <token>”

...always returns a 401. I suspect there's something wrong in the signing portion of the code as it's the only part I haven't been able to verify (again, worked in Ruby), though looking at all the docs and examples for openssl_sign, I'm pretty sure it's right.
For reference, this is the Ruby script I mention https://shashikantjagtap.net/generating-jwt-tokens-for-app-store-connect-api/
","After struggling alot, i finally got it working using https://github.com/lcobucci/jwt 
use Curl\Curl;
use Lcobucci\JWT\Builder;
use Lcobucci\JWT\Signer\Key;
use Lcobucci\JWT\Signer\Ecdsa\Sha256;

$signer = new Sha256();
$privateKey = new Key('file://AuthKey_XYZ.p8');
$time = time();

$Issuer_ID = ""FROM_APPLE_PAGE"";
$Key_ID = ""FROM_APPLE_PAGE"";

$token = (new Builder())->issuedBy($Issuer_ID)// Configures the issuer (iss claim)
->permittedFor(""appstoreconnect-v1"")// Configures the audience (aud claim)
->identifiedBy('XXYYZZ', true)// Configures the id (jti claim), replicating as a header item
->withHeader('kid', $Key_ID)
->withHeader('type', 'JWT')
    ->withHeader('alg', 'ES256')
    ->issuedAt($time)// Configures the time that the token was issue (iat claim)
    ->expiresAt($time + 1200)// Configures the expiration time of the token (exp claim)
    ->withClaim('uid', 1)// Configures a new claim, called ""uid""
    ->getToken($signer, $privateKey); // Retrieves the generated token


$token->getHeaders(); // Retrieves the token headers
$token->getClaims(); // Retrieves the token claims

","588","<php><jwt><sha256><ecdsa><appstoreconnect>","1","1","2","2019-07-22 16:19:16","","0","1","","","","2019-06-16 13:37:45",""
"45198652","C# - AsymmetricCipherKeyPair to hexadecimal","I would like an ECDSA AsymmetricCipherKeyPair that I generate in hexadecimal format.  Both the public and private keys.
Now I am doing this:
//Generate key pair
ECKeyPairGenerator gen = new ECKeyPairGenerator(""ECDSA"");
SecureRandom secureRandom = new SecureRandom();
KeyGenerationParameters keyGenParam = new KeyGenerationParameters(secureRandom, keySize);
gen.Init(keyGenParam);
AsymmetricCipherKeyPair keys = gen.GenerateKeyPair();

//Create a PEM and then extract the BASE64 part
var key = keys.Private;
TextWriter textWriter = new StringWriter();
PemWriter pemWriter = new PemWriter(textWriter);
pemWriter.WriteObject(key);
pemWriter.Writer.Flush();
string pem = textWriter.ToString();
var pem2 = pem.Split('\r').Skip(1).TakeWhile(i => !i.Contains(""-----"")).ToArray();
pem = string.Join("""",pem2);

//BASE64 to byte[] to hex
byte[] bytes = Convert.FromBase64String(pem);
string hex = BitConverter.ToString(bytes);

There must be an easier way to get the hexadecimal output.
","For the private key:
bytes = Org.BouncyCastle.Pkcs.PrivateKeyInfoFactory.CreatePrivateKeyInfo(keys.Private).ParsePrivateKey().GetDerEncoded();

and the public:
bytes = Org.BouncyCastle.X509.SubjectPublicKeyInfoFactory.CreateSubjectPublicKeyInfo(keys.Public).GetDerEncoded();

","577","<c#><bouncycastle><ecdsa>","0","3","1","2017-07-20 11:20:02","45213211","0","","","","","2017-07-19 18:43:14",""
"22012391","java.security.SignatureException: error decoding signature bytes","I am getting this exception when trying to verify the signature in an Android KitKat device (Nexus 5).
Using KeyFactory as the EC algorithm and signature instance as NONEwithECDSA.
Exception Log:
java.security.SignatureException: error decoding signature bytes. 
at com.android.org.bouncycastle.jcajce.provider.asymmetric.util.DSABase.engineVerify(DSABase.java:82)
at java.security.Signature$SignatureImpl.engineVerify(Signature.java:617)
    at java.security.Signature.verify(Signature.java:375)

Can anyone explain how to overcome this error? 
","","548","<android><exception><android-4.4-kitkat><ecdsa>","4","","0","2014-02-25 14:30:09","","0","1","752320","","2014-02-25 14:30:09","2014-02-25 11:09:53",""
"45565791","Create ECDSA DER Encoded Signature","I'm trying to create an ECDSA Signature in Java. When i create one in python it can be verified just fine in Java. But vice-versa gives me a BadSignatureException.Python is using the ECDSA library and Java is using SpongyCastle.
Python Implementation of Signing:
private_key = SigningKey.from_der(PRIVATE_KEY.decode('hex'))
private_key.sign(payload, hashfunc=hashlib.sha256, 
sigencode=sigencode_der).encode('hex'),

Python Implementation of Verifying
verifying_key = VerifyingKey.from_der(public_key.decode('hex'))
return vk.verify(signature.decode('hex'), payload, hashfunc=hashlib.sha256, sigdecode=sigdecode_der)

Java Implementation of Signing
signature = Signature.getInstance(""SHA256withECDSA"", ""SC"");
signature.initSign(this.privateKey);
signature.update(input.getBytes(""UTF-8""));
return new String(Hex.encode(signature.sign()));

Java Implementation of Verifying
signature = Signature.getInstance(""SHA256withECDSA"", ""SC"");
signature.initVerify(publicKey);
signature.update(input.getBytes(""UTF-8""));
return signature.verify(Hex.decode(expectedSignature));

","You can try to use verify_digest() and sign_digest() from python.
For example to verify the signature,
digest = SHA256.new() 
digest.update((message.encode('utf-8')))

verified = vk.verify_digest(bytes.fromhex(signature), digest.digest())

","534","<java><python><encoding><sign><ecdsa>","5","0","1","2019-09-13 14:12:27","","0","","","","","2017-08-08 10:25:02",""
"44969868","Java Signature.sign() with SHAwithECDSA produces different results on multiple runs","I am trying to sign a byte stream which does not change with a private key that does not change either, using the SHAwithECDSA. This should produce the same result, no matter how often you run the code. 
However, I experience some randomness which I can't explain as the resulting output changes with every run. 
Here is what I do (minimal example):
public byte[] sign() {
    Signature ecdsa = Signature.getInstance(""SHA256withECDSA"", ""SunEC"");

    // This is a hexadecimal byte sequence I need to sign
    String dataToBeSigned = ""808112B43A3A381D1797BBBBBB973B99"" + 
                         ""9737B93397AA2917B1B0B737B734B1B0"" + 
                         ""B616B2BC3497A1AB43A3A381D1797BBB"" +
                         ""BBB973B999737B933979918181897981"" +
                         ""A17BC36B63239B4B396B6B7B93291B2B"" +
                         ""1B239B096B9B430991A9B22062349443"" +
                         ""1025687474703A2F2F7777772E77332E"" +
                         ""6F72672F54522F63616E6F6E6963616C"" +
                         ""2D6578692F4852D0E8E8E0745E5EEEEE"" +
                         ""EE5CEE665CDEE4CE5E646060625E6068"" +
                         ""5EF0DAD8CADCC646E6D0C2646A6C841A"" +
                         ""36BC07A00CB7DCAD662F3088A60A3D6A"" +
                         ""99431F81C122C2E9F1678EF531E95523"" +
                         ""70"";

    String hexPrivKey = ""B9134963F51C4414738435057F97BBF1"" +
                        ""010CABCB8DBDE9C5D48138396AA94B9D"";
    byte[] privKey = DatatypeConverter.parseHexBinary(hexPrivKey);

    ecdsa.initSign(getPrivateKey(privKey));
    ecdsa.update(dataToBeSigned);
    byte[] signature = ecdsa.sign();

    System.out.println(""Signature: "" + DatatypeConverter.printHexBinary(signature));
}

public ECPrivateKey getPrivateKey(byte[] privateKeyBytes) {
    try {
        AlgorithmParameters parameters = AlgorithmParameters.getInstance(""EC"");
        parameters.init(new ECGenParameterSpec(""secp256r1""));

        ECParameterSpec ecParameterSpec = parameters.getParameterSpec(ECParameterSpec.class);
        ECPrivateKeySpec ecPrivateKeySpec = new ECPrivateKeySpec(new BigInteger(privateKeyBytes), ecParameterSpec);

        ECPrivateKey privateKey = (ECPrivateKey) KeyFactory.getInstance(""EC"").generatePrivate(ecPrivateKeySpec);

        return privateKey;
    } catch (NoSuchAlgorithmException | InvalidKeySpecException | InvalidParameterSpecException e) {
        System.out.println(e.getClass().getSimpleName() + "" occurred when trying to get private key from raw bytes"", e);
        return null;
    }
}

Do you have any hint why this would not result in the same signature output every time I run this code?
A similar question was raised here, but no real answer has been found yet.
Another question related to that: 
I see that there is another initSign method provided by the Signature class:
initSign(PrivateKey privateKey, SecureRandom random)
Why would I wanna insert a random source/seed when creating a signature? How is the receiving side supposed to verify that signature then if the random seed is not known?
Thanks for any valuable input!
Marc
","The specification of the algorithm explains it:

One characteristic of DSA and ECDSA is that they need to produce, for
     each signature generation, a fresh random value (hereafter designated
     as k).  For effective security, k must be chosen randomly and
     uniformly from a set of modular integers, using a cryptographically
     secure process.  Even slight biases in that process may be turned
     into attacks on the signature schemes.

So what you're seeing is perfectly normal. Of course, the designers of the algorithms made it possible for the receiver to verify the signature, otherwise it would be pointless. That's what your test should verify.
","524","<java><ecdsa>","2","2","1","2017-07-07 11:49:51","44970067","0","","","","","2017-07-07 11:38:53",""
"48788710","Verify signature using NIST P-256 type key and SHA-256 algorithm","I encounter a problem with validation of signature in Java using SHA-256 algorithm and NIST P-256 type key.
I have a X509 certificate (provided by Certificate Authority) which contains a public key and I should certify authenticity of the message that I receive.
Signature that I receive is encoded in Base32 (on 103 characters) and I decode it to binary. I obtain a bytes array of 64 octets.
Informations on public key :
Sun EC public key, 256 bits
  public x coord: 76693623628200764797317561328856095594448010045454057728566183687964056347177
  public y coord: 111784915166853162657631137717721670318464358783507947441022826650722573271612
  parameters: secp256r1 [NIST P-256, X9.62 prime256v1] (1.2.840.10045.3.1.7)

(EDIT) Method that I use to verify authenticity of my message :
public static void verify(String message, String signatureReceived, String pathToCertificate) {

    try {

        final X509Certificate certificat = getCertificate(pathToCertificate);
        final PublicKey publicKey = certificat.getPublicKey();

        final byte[] signatureReceivedInBinary = BaseEncoding.base32().decode(signatureReceived);

        byte[] rBytes = Arrays.copyOfRange(signatureReceivedInBinary, 0, 32);
        byte[] sBytes = Arrays.copyOfRange(signatureReceivedInBinary, 32, 64);

        BigInteger r = new BigInteger(1, rBytes);
        BigInteger s = new BigInteger(1, sBytes);

        ASN1Integer asn1R = new ASN1Integer(r);
        ASN1Integer asn1S = new ASN1Integer(s);

        DERSequence seq = new DERSequence(new ASN1Integer[]{asn1R, asn1S});
        byte[] encoded = seq.getEncoded();

        Signature signature = Signature.getInstance(""SHA256withECDSA"");

        signature.initVerify(publicKey);
        signature.update(message.getBytes(""UTF-8""));

        if (signature.verify(encoded)) {
            System.out.println(""Signature OK"");
        } else {
            System.out.println(""Signature KO"");
        }

    } catch (Exception e) {
        e.printStackTrace();
    }

}

Main class :
public static void main(String[] args)
        throws NoSuchAlgorithmException, CertificateException, IOException,
        KeyStoreException {

    final String message = ""MessageToValidate"";
    final String certificatPath = ""<PATH_TO_CERTIFICATE>\\public_certificat.crt"";
    final String signature = ""UBFF4NY7MIXQVUZYMRDRGXBTVWIVMCNP76TN7SA24QUJ4AAHG4WTLA2QZ5TSC54F2OQRMWOAKSHLXJLNHXH4GJPBHBWXBO3PMSDOVZI"";

    try {
        Test.verify(message, signature, certificatPath);
    } catch (final Exception e) {
        System.out.println(e.getMessage());
    }

}

When I execute my application, I obtain this error : 
Exception in thread ""main"" java.security.SignatureException: Could not verify signature
    at sun.security.ec.ECDSASignature.engineVerify(ECDSASignature.java:325)
    at java.security.Signature$Delegate.engineVerify(Signature.java:1219)
    at java.security.Signature.verify(Signature.java:652)
    at fr.altes.music.utils.Test.verify(Test.java:56)
    at fr.altes.music.Application.main(Application.java:54)
Caused by: java.security.SignatureException: Invalid encoding for signature
    at sun.security.ec.ECDSASignature.decodeSignature(ECDSASignature.java:400)
    at sun.security.ec.ECDSASignature.engineVerify(ECDSASignature.java:322)
    ... 4 more
Caused by: java.io.IOException: Sequence tag error
    at sun.security.util.DerInputStream.getSequence(DerInputStream.java:330)
    at sun.security.ec.ECDSASignature.decodeSignature(ECDSASignature.java:376)
    ... 5 more

","","504","<java><x509certificate><signature><sha256><ecdsa>","5","","0","2018-02-16 19:38:45","","1","","9360042","","2018-02-16 19:38:45","2018-02-14 13:44:58",""
"42483560","Determine protocol and cipher compatibility with server certificate","My server may be attached to a RSA or ECDSA certificate.
In my code I set the prtocol method as
sslmethod = SSLv23_server_method();

and setting the cipher using the SSL_CTX_set_cipher_list() API.
The problem is when the server is attached to ECDSA certificate and if I pass ""RSA"" cipher SSL_CTX_set_cipher_list() does not return any error though ""RSA"" cipher is not compatible with ECDSA certificates.
Is there any openssl API which I can use to find out if the cipher we are going to set is compatible with the certificate or with protocol or not?
","
Is there any openssl API which I can use to find out if the cipher we are going to set is compatible with the certificate or with protocol or not?

If you author the app and own the server, then YES, you do know what to expect. But the general case is NO, you don't know in advance and you can't query for it. You try to setup a channel and if it fails, then you try something else.
Generally speaking, there's no way to know in advance what cipher suites a server supports; or what type of public key is bound in the server's certificate. In fact, there's no way to know what protocol versions (SSLv2, SSLv3, TLS 1.0, TLS 1.1, TLS 1.2, etc) a server supports. Its the reason for RFC 7405, TLS Fallback Signaling Cipher Suite Value (SCSV) for Preventing Protocol Downgrade Attacks.
In 2016/2017, about the best you can do is assume:

No SSLv2, SSLv3; only TLS 1.0 and above
Cipher suites from the collection ""HIGH:!aNULL:!kRSA:!RC4:!MD5""

""!kRSA"" is ""no RSA key transport"", and it means you can only use ephemeral key exchanges. If a server has a RSA key, then it will only be used for authentication. That is, the key will be used to sign the server's ephemeral values during key exchange so the client knows they are authentic.
","497","<ssl><openssl><ecdsa>","2","3","1","2017-02-27 11:21:43","","0","","608639","","2017-02-27 11:10:55","2017-02-27 10:38:06",""
"51961749","Java - Create XML Digital Signature using ECDSA (Elliptic Curve)","We can create XML Digital Signature using RSA keys. But how do I use elliptic curve keys to sign xml files ? I get error messages such as -
Exception in thread ""main"" java.security.KeyException: ECKeyValue not supported
    at org.jcp.xml.dsig.internal.dom.DOMKeyValue$EC.<init>(DOMKeyValue.java:350)
    at org.jcp.xml.dsig.internal.dom.DOMKeyInfoFactory.newKeyValue(DOMKeyInfoFactory.java:71)
    at csr.ExtractEC.main(XMLSignatureECTest.java:57)
Caused by: java.lang.ClassNotFoundException: sun/security/ec/ECParameters
    at java.lang.Class.forName0(Native Method)
    at java.lang.Class.forName(Class.java:264)
    at org.jcp.xml.dsig.internal.dom.DOMKeyValue$EC.getMethods(DOMKeyValue.java:367)
    at org.jcp.xml.dsig.internal.dom.DOMKeyValue$EC$1.run(DOMKeyValue.java:343)
    at org.jcp.xml.dsig.internal.dom.DOMKeyValue$EC$1.run(DOMKeyValue.java:339)
    at java.security.AccessController.doPrivileged(Native Method)
    at org.jcp.xml.dsig.internal.dom.DOMKeyValue$EC.<init>(DOMKeyValue.java:338)
    ... 2 more

I used below code to create SignatureMethod and KeyInfo -
String url = ""http://www.w3.org/2001/04/xmldsig-more#ecdsa-sha256"";
        SignatureMethod signatureMethod = factory.newSignatureMethod(url, null);
        SignedInfo signedInfo = factory.newSignedInfo(c14n, signatureMethod, Collections.singletonList(reference));

        PrivateKey privateKey = Utils.generatePrivateEC(""e:\\certs\\ec\\ec.key.p8"");
        Certificate certificate = Utils.generatePublic(""e:\\certs\\ec\\ec.cer"");
        KeyInfoFactory keyInfoFactory = factory.getKeyInfoFactory();
        KeyValue keyValue = keyInfoFactory.newKeyValue(certificate.getPublicKey());
        KeyInfo keyInfo = keyInfoFactory.newKeyInfo(Collections.singletonList(keyValue));

JDK - Oracle JDK 8
Security Providers - BouncyCastle and Sun.
","It seems in this junit test someone is make an example for you.
","494","<java><digital-signature><elliptic-curve><ecdsa><xml-dsig>","7","1","1","2018-09-01 07:12:46","52125821","8","","2531191","","2018-08-22 07:47:12","2018-08-22 07:26:15",""
"49889096","C# Sign Data with SHA-256withECDSA using BouncyCastle produce different Signature everytime","I am following this tutorial to sign data with SHA-256withECDSA. 
Using the same private key and message, it generated different signature result every time. The only change I made is return Base64 encoded string instead of Base58
Is it supposed to be the same signature every time?
public static string GetSignature(string privateKey, string message)

{

    var curve = SecNamedCurves.GetByName(""secp256k1"");

    var domain = new ECDomainParameters(curve.Curve, curve.G, curve.N, curve.H);
    var keyParameters = new

            BC.Crypto.Parameters.ECPrivateKeyParameters(new BC.Math.BigInteger(privateKey),

            domain);

    ISigner signer = SignerUtilities.GetSigner(""SHA-256withECDSA"");

    signer.Init(true, keyParameters);

    signer.BlockUpdate(Encoding.ASCII.GetBytes(message), 0, Encoding.ASCII.GetBytes(message).Length);

    var signature = signer.GenerateSignature();

    return Convert.ToBase64String(signature);

}

Example result
MEQCIB0rqb8Dbrh+e2akoCVJaUS4tyJYqfRf8vdz/W2fUOomAiB3D2BaMYjwSgKRQyTd/W+YEn+wT0I4dq1hmgBfe/Sh7g==

MEUCIQDsWxG8Zr7MCemgGylAN+Y32qJYuDmqZMpaPwxTKosJ3AIgE3oSsBjcua/aCvfNXiMfcUM9U92p9aRlAIEopw/wvd0=

MEYCIQCjQ0EDHVFhASuUSPnCGjCb0O1sq3Op+aAl01afjIVviQIhAOnGyGN9cKswFn97de0o/Im9Hswo6AdnLhKIZSUcYbDY

MEYCIQCAqcHyhRcbLtuyimJ4XCHvJcz0p0Wd7FgJ1+07sOsC/gIhAKYwlhRv98C/3XeZE1TujkB9qMn2C99GaguJoWng9+2y

MEUCIQD7ObA0n0JpRNQDe+3udpeKGEk79KsrjHsjv/4Wlj2bigIgZERRSQBEN91HTJHqn+prlwSCKUT4AJx061Gi0tv8Xuw=

","So the answer is: it should be non deterministic - everytime is different
https://en.wikipedia.org/wiki/Nondeterministic_algorithm
","492","<c#><bouncycastle><sha256><ecdsa>","1","2","1","2018-04-23 03:22:41","49972959","2","","2680527","","2018-04-23 03:21:32","2018-04-17 23:52:00",""
"50235113","Generate ECDSA key pair in DER format","I want to generate a secp256r1 key pair in DER format using OpenSSL CLI.
I am using the following commands:
$ openssl ecparam -name prime256v1 -outform der -genkey -out privkey.der
$ openssl ec -inform der -in privkey.der -pubout -outform der -out pubkey.der

However, the second command triggers an unable to load Key error:
read EC key
unable to load Key
139911012984576:error:0D0680A8:asn1 encoding routines:asn1_check_tlen:wrong tag:crypto/asn1/tasn_dec.c:1112:
139911012984576:error:0D07803A:asn1 encoding routines:asn1_item_embed_d2i:nested asn1 error:crypto/asn1/tasn_dec.c:274:Type=EC_PRIVATEKEY
139911012984576:error:10092010:elliptic curve routines:d2i_ECPrivateKey:EC lib:crypto/ec/ec_asn1.c:925:

","ecparam -genkey by default outputs both the params and the key; in PEM the reader can separate these and select the key part, but not in DER. Add -noout to suppress the params. (Yes you want both -out file -noout even though it looks contradictory.)
(And I reproduced with 1.0.2l and 1.1.0f both built from upstream source.) 
","486","<openssl><ecdsa>","0","4","1","2018-05-08 16:20:40","50238164","1","","","","","2018-05-08 13:42:22",""
"15938880","Openssl Generate Public Asymmetric Key","I am trying to output the public EC key parameters Qx and Qy from OpenSSL CLI. Is this possible? 
","You can create an elliptic curve key with

openssl ecparam -out key.pem -name prime256v1 -genkey

Output the public and private key with

openssl ec -inform PEM -in key.pem -pubout -text -noout

","482","<ssl><openssl><rsa><dsa><ecdsa>","0","5","1","2013-04-11 01:44:16","","0","0","","","","2013-04-11 00:31:41",""
"47926228","How can I use keys from OpenSSL for ECDSA (prime256v1) with easy-ecc?","I am trying to use OpenSSL generated keys with Kenneth MacKay's easy-ecc library but I am struggling. 
To test, I've generated keys and dumped them:
$ openssl ec -in ec_private.pem -text -noout
read EC key
Private-Key: (256 bit)
priv:
    45:b7:1a:09:1c:2a:1c:78:f8:80:da:94:44:0f:0f:
    3f:f6:a8:93:2d:07:43:c8:2a:9c:58:25:49:1e:a5:
    b2:68
pub: 
    04:ae:ef:df:ff:85:ee:59:00:fd:43:52:10:14:77:
    23:c8:e3:ba:00:4d:82:4d:41:15:a4:c5:09:ec:96:
    ef:50:73:79:9d:a7:a6:1a:88:a9:b2:26:ac:1e:03:
    50:02:0d:93:47:83:9d:eb:f9:e7:d3:dd:7d:59:04:
    95:a8:fd:bb:cf
ASN1 OID: prime256v1
NIST CURVE: P-256

Imported them into a small harness based on a test in the pr using curve secp256r1,
#include <stdio.h>
#include <string.h>
#include ""ecc.h""

int main() {

    uint8_t privatek[] = { 
        0x45, 0xb7, 0x1a, 0x09, 0x1c, 0x2a, 0x1c, 0x78, 
        0xf8, 0x80, 0xda, 0x94, 0x44, 0x0f, 0x0f, 0x3f, 
        0xf6, 0xa8, 0x93, 0x2d, 0x07, 0x43, 0xc8, 0x2a, 
        0x9c, 0x58, 0x25, 0x49, 0x1e, 0xa5, 0xb2, 0x68
    };

    uint8_t publick[] = {
        0xae, 0xef, 0xdf, 0xff, 0x85, 0xee, 0x59, 0x00, 
        0xfd, 0x43, 0x52, 0x10, 0x14, 0x77, 0x23, 0xc8, 
        0xe3, 0xba, 0x00, 0x4d, 0x82, 0x4d, 0x41, 0x15, 
        0xa4, 0xc5, 0x09, 0xec, 0x96, 0xef, 0x50, 0x73, 
        0x79, 0x9d, 0xa7, 0xa6, 0x1a, 0x88, 0xa9, 0xb2, 
        0x26, 0xac, 0x1e, 0x03, 0x50, 0x02, 0x0d, 0x93, 
        0x47, 0x83, 0x9d, 0xeb, 0xf9, 0xe7, 0xd3, 0xdd, 
        0x7d, 0x59, 0x04, 0x95, 0xa8, 0xfd, 0xbb, 0xcf
    };

  uint8_t hash[ECC_BYTES];
  uint8_t sig[ECC_BYTES * 2];

  memcpy(hash, publick, ECC_BYTES);

  if (!ecdsa_sign(privatek, hash, sig)) {
      printf(""ECC_sign() failed\n"");
  }

  if (!ecdsa_verify(publick, hash, sig)) {
      printf(""ECC_verify() failed\n"");
  }  
}

but this never passes. I am not sure if I am doing something silly while importing the keys, or something else but this is not passing. 
Any ideas as to what I am doing wrong?
","I guess I should have waited an hour before posting that question. easy-ecc works with compressed points. I dumped a compressed public key and used that with success. 
There is also a fork by arekinath that supports uncompressed points. 
Now if only I could get my micro-ecc code working...
","465","<c><openssl><ecdsa>","2","0","1","2018-09-28 14:45:01","47926686","2","","","","","2017-12-21 13:41:43",""
"45161694","No ciphers availlable for specific ECDSA certificate","I'm building a prototype of an IOT device communicating through openssl with an online server.
The software uses  ECDSA certificate signed with my own subca. 
The problem seems there isn't a cipher availlable for that certificate.
To test the whole things i used openssl s_server on server side and nmap ssl-enum-ciphers script on client side. nmap returns a void list of ciphers.
The command given for the server is:
openssl s_server -accept 4433 -cert server1.crt -certform PEM -key server1.key

this is the certificate i use on server side.
Certificate:
Data:
    Version: 3 (0x2)
    Serial Number: 256 (0x100)
Signature Algorithm: ecdsa-with-SHA256
    Issuer: C=IT, O=wwwtech, CN=wwwtech Server CA
    Validity
        Not Before: Jul 17 12:11:31 2017 GMT
        Not After : Jul 17 12:11:31 2019 GMT
    Subject: C=IT, O=wwwtech, CN=server1
    Subject Public Key Info:
        Public Key Algorithm: id-ecPublicKey
            Public-Key: (160 bit)
            pub: 
                04:1c:e3:02:ec:bc:0f:88:7a:58:0b:36:b6:55:2c:
                e5:f1:67:5f:a0:7a:c3:c9:4b:7c:45:02:42:61:20:
                0c:4d:30:22:f6:c7:09:b5:ef:e1:8e
            ASN1 OID: brainpoolP160r1
    X509v3 extensions:
        X509v3 Basic Constraints: 
            CA:FALSE
        X509v3 Key Usage: 
            Key Encipherment
        Netscape Cert Type: 
            SSL Server
        Netscape Comment: 
            AreaWFI Server Certificate
        X509v3 Subject Key Identifier: 
            8D:92:1A:9F:6A:AB:D2:E5:6B:72:CB:25:A9:15:27:38:08:CE:DE:A9
        X509v3 Authority Key Identifier: 
            keyid:E7:2F:0E:A7:39:B4:85:46:FE:2A:EA:9F:0A:FE:54:F4:B9:A5:B6:AC

        X509v3 Subject Alternative Name: 
            IP Address:127.0.0.1
Signature Algorithm: ecdsa-with-SHA256
     30:44:02:20:32:f1:d1:90:08:f1:dc:a5:9d:30:d3:db:4b:05:
     6c:d2:41:cc:ac:6f:01:f8:90:0d:a5:25:27:4d:f9:38:62:14:
     02:20:19:37:c4:7c:07:e9:07:2d:c8:6e:1f:a4:db:4e:44:48:
     68:4a:e9:9d:03:68:b3:b0:c6:31:60:92:ed:54:5c:22

","Your certificate is using the brainpoolP160r1 curve. This curve is supported by libcrypto but not by libssl. Probably because this is insufficiently secure (it only offers the equivalent of 80 bits of security). Probably if you tried a different (more secure) curve you will get better results.
You don't say what version of OpenSSL you are using. Note that in OpenSSL 1.1.0 the ""default"" curves supported by OpenSSL are X25519, P-256, P-384 and P-512. If you want to use other curves you will probably have to explicitly state them using the ""-curves"" parameter to s_server. The only brainpool curves that libssl supports in OpenSSL 1.1.0 are brainpoolP256r1, brainpoolP384r1 and brainpoolP512r1.
Edit:
I also note that you have an X509v3 Key Usage of ""Key Encipherment"" which doesn't make any sense for an ECDSA cert (ECDSA can't ""encipher"" anything; its a digital signature algorithm). Change the key usage to ""Digital Signature"" (or drop it altogether).
","463","<ssl><openssl><ssl-certificate><ecdsa>","0","2","2","2017-07-18 19:34:43","45164696","0","","6116760","","2017-07-18 09:47:18","2017-07-18 08:42:34",""
"45161694","No ciphers availlable for specific ECDSA certificate","I'm building a prototype of an IOT device communicating through openssl with an online server.
The software uses  ECDSA certificate signed with my own subca. 
The problem seems there isn't a cipher availlable for that certificate.
To test the whole things i used openssl s_server on server side and nmap ssl-enum-ciphers script on client side. nmap returns a void list of ciphers.
The command given for the server is:
openssl s_server -accept 4433 -cert server1.crt -certform PEM -key server1.key

this is the certificate i use on server side.
Certificate:
Data:
    Version: 3 (0x2)
    Serial Number: 256 (0x100)
Signature Algorithm: ecdsa-with-SHA256
    Issuer: C=IT, O=wwwtech, CN=wwwtech Server CA
    Validity
        Not Before: Jul 17 12:11:31 2017 GMT
        Not After : Jul 17 12:11:31 2019 GMT
    Subject: C=IT, O=wwwtech, CN=server1
    Subject Public Key Info:
        Public Key Algorithm: id-ecPublicKey
            Public-Key: (160 bit)
            pub: 
                04:1c:e3:02:ec:bc:0f:88:7a:58:0b:36:b6:55:2c:
                e5:f1:67:5f:a0:7a:c3:c9:4b:7c:45:02:42:61:20:
                0c:4d:30:22:f6:c7:09:b5:ef:e1:8e
            ASN1 OID: brainpoolP160r1
    X509v3 extensions:
        X509v3 Basic Constraints: 
            CA:FALSE
        X509v3 Key Usage: 
            Key Encipherment
        Netscape Cert Type: 
            SSL Server
        Netscape Comment: 
            AreaWFI Server Certificate
        X509v3 Subject Key Identifier: 
            8D:92:1A:9F:6A:AB:D2:E5:6B:72:CB:25:A9:15:27:38:08:CE:DE:A9
        X509v3 Authority Key Identifier: 
            keyid:E7:2F:0E:A7:39:B4:85:46:FE:2A:EA:9F:0A:FE:54:F4:B9:A5:B6:AC

        X509v3 Subject Alternative Name: 
            IP Address:127.0.0.1
Signature Algorithm: ecdsa-with-SHA256
     30:44:02:20:32:f1:d1:90:08:f1:dc:a5:9d:30:d3:db:4b:05:
     6c:d2:41:cc:ac:6f:01:f8:90:0d:a5:25:27:4d:f9:38:62:14:
     02:20:19:37:c4:7c:07:e9:07:2d:c8:6e:1f:a4:db:4e:44:48:
     68:4a:e9:9d:03:68:b3:b0:c6:31:60:92:ed:54:5c:22

","Problem solved.
I changed brainpoolP160r1 with prime256v1 and removed keyUsage=KeyEncipherment from the openssl.conf of signing CA,
then it start working as espected. Now i guess why?
RFC 5280 section 4.2.1.3 says :

The keyEncipherment bit is asserted when the subject public key is
        used for enciphering private or secret keys, i.e., for key
        transport.  For example, this bit shall be set when an RSA public
        key is to be used for encrypting a symmetric content-decryption
        key or an asymmetric private key.

Is this appening during ssl handshake or not?
","463","<ssl><openssl><ssl-certificate><ecdsa>","0","0","2","2017-07-18 19:34:43","45164696","0","","6116760","","2017-07-18 09:47:18","2017-07-18 08:42:34",""
"42588786","How to Fingerprint a JWK?","Is there a standard, canonical method for creating a fingerprint (aka thumbprint) for a JWK?
From what I was reading it seems that the standard doesn't define how a kid should be specified, which I find odd. To me it makes the most since to have it be a deterministic value rather than one that requires a lookup table such that others could easily recreate the key id in by virtue of possessing the public key.
I am aware that SSH fingerprints and X.509 thumbprints are standardized, but those don't seem like a suitable solution for all environments where JWKs are used (especially browsers) because they are too complex for naive implementations and including the libraries capable of manipulating such (i.e. forge) would waste a lot of memory, bandwidth, and vm compile time.
Update
Officially it's called a ""thumbprint"" not a ""fingerprint"".
","I think the RFC7638 will answer your question.
This RFC describes a way to compute a hash value over a JWK.
It is really easy to implement:

Keep the required parameters only. For a RSA key: kty, n and e and for an EC key: crv, kty, x and y.
Sort those parameters in lexicographic order: e,kty and n
Compute the parameters and values into Json: {""e"":""AQAB"",""kty"":""RSA"",""n"":""0vx7agoebGcQSuuPiLJXZptN9nndrQmbXEps2
 aiAFbWhM78LhWx4cbbfAAtVT86zwu1RK7aPFFxuhDR1L6tSoc_BJECPebWKRXjBZCi
 FV4n3oknjhMstn64tZ_2W-5JsGY4Hc5n9yBXArwl93lqt7_RN5w6Cf0h4QyQ5v-65Y
 GjQR0_FDW2QvzqY368QQMicAtaSqzs8KJZgnYb9c7d0zgdAZHzu6qMQvRL5hajrn1n
 91CbOpbISD08qNLyrdkt-bFTWhAI4vMQFh6WeZu0fM4lFd2NcRwr3XPksINHaQ-G_x
 BniIqbw0Ls1jF44-csFCur-kEgU8awapJzKnqDKgw""}
Hash it using SHA-256 and encode it into Base64 Url Safe: NzbLsXh8uDCcd-6MNwXF4W_7noWXFZAfHkxZsRGC9Xs

","448","<ecdsa><rsa-key-fingerprint><jwk>","1","3","2","2017-03-22 07:55:54","42590106","0","1","151312","","2017-03-10 21:57:53","2017-03-03 21:33:06",""
"42588786","How to Fingerprint a JWK?","Is there a standard, canonical method for creating a fingerprint (aka thumbprint) for a JWK?
From what I was reading it seems that the standard doesn't define how a kid should be specified, which I find odd. To me it makes the most since to have it be a deterministic value rather than one that requires a lookup table such that others could easily recreate the key id in by virtue of possessing the public key.
I am aware that SSH fingerprints and X.509 thumbprints are standardized, but those don't seem like a suitable solution for all environments where JWKs are used (especially browsers) because they are too complex for naive implementations and including the libraries capable of manipulating such (i.e. forge) would waste a lot of memory, bandwidth, and vm compile time.
Update
Officially it's called a ""thumbprint"" not a ""fingerprint"".
","I don't believe there is a true standard, but this topic has been discussed in the IETF mailing archives. While the conversation seemed to get a little side-tracked by whether or not canonical JSON was a good idea in general, there was one method that seems reasonable as a standard fingerprinting method.

Remove all ""metadata"" fields from the JWK (where in this case ""metadata"" is defined as any non-required key, ie anything but ""kty"" and the parameters for the encryption algorithm defined by the JWA RFC-7518).
Convert stripped JWK into ""canonical"" JSON (sort keys lexicographically, no leading or trailing whitespace, and no whitespace between tokens).
Compute digest over created JSON string.

There is also no true standard that I am aware of for canonical JSON, but all the sources I've seen agree on at least the rules listed above (which are the only rules that should be relevant for the types of objects used for JWK's).
","448","<ecdsa><rsa-key-fingerprint><jwk>","1","0","2","2017-03-22 07:55:54","42590106","0","1","151312","","2017-03-10 21:57:53","2017-03-03 21:33:06",""
"52299691","Generation ecdsa 32-byte private key in java/scala","is it possible to generate ecdsa 32-byte private key in java using KeyPairGenerator? I mean that keys.getPublic.getEncoded.length will return 32
I've tried to generate private key, but size is 144 bytes
//keys.getPrivate.getEncoded.length - 144 bytes
val ecSpec: ECNamedCurveParameterSpec = ECNamedCurveTable.getParameterSpec(""secp256k1"")
val keyPairGenerator: KeyPairGenerator = KeyPairGenerator.getInstance(""ECDSA"", ""BC"")
val secRandom = new SecureRandom()
keyPairGenerator.initialize(ecSpec, secRandom)
val keys = keyPairGenerator.generateKeyPair

//keys.getPrivate.getEncoded.length - 67 bytes
val keyPairGenerator: KeyPairGenerator = KeyPairGenerator.getInstance(""EC"")
keyPairGenerator.initialize(256)
val keys = keyPairGenerator.generateKeyPair

","The value returned from Java PrivateKey.getEncoded() is an encoded privatekey, as the name says. Specifically as documented in the superclass Key it is an ASN.1 (DER) encoding of PKCS#8 = Public-Key Cryptography Standard #8, Private Key Information Syntax. PKCS#8 handles privatekeys for a wide variety of different public-key algorithms and contains metadata in addition to the actual key, namely an 'AlgorithmIdentifier' which identifies the algorithm and any parameters of the algorithm; for the ECC algorithm(s) (ECDSA, ECDH, ECMQV and more share one key format) these parameters specify the elliptic curve group used, and although there are several options for this specification, in practice everyone, including here Java, uses the 'namedCurve' option which defines the curve group by an ASN.1 OID aka Object Identifier. 
The PKCS#8 structure then contains the actual privatekey data, 'wrapped' in an OCTET STRING, in a format that varies depending on the algorithm. For ECC, this format is defined (AFAICT) in SEC1 by SECG/Certicom and contains the actual privatekey value (a number, expressed as an OCTET STRING) plus optionally the curve spec and the public key.
Your first code uses BouncyCastle, and Bouncy generates the encoding with the wrapped value including the optional curve spec and public key, making it longer.
Your second code uses by default the Oracle/Sun provider (SunEC), which generates the encoding without those options, but still including the required AlgorithmIdentifier making it longer than the actual privatekey value. It also uses a different curve: initializing a SunEC generator with the integer 256 chooses secp256r1 (aka P-256, prime256v1) NOT secp256k1. If you change this to use new ECGenParameterSpec(""secp256k1"") as the parameter then SunEC will also generate secp256k1, but without the options, giving a 64-byte encoding.
In both cases, if you want only the privatekey number, cast to java.security.interfaces.ECPrivateKey and use getS(). If you want the result in a byte/octet array, as is conventional, note BigInteger.toByteArray() returns a variable-length result and you often need to left zero trim or pad it.
And if you did want the publickey, it has a similar scheme using 'X.509' encoding which contains both an AlgorithmIdentifier and a BIT STRING wrapping the actual publickey value, and thus is longer than the raw publickey value. However in this case interfaces.ECPublicKey and spec.ECPoint won't construct the encoding for you; using the Bouncy-only types can be more convenient.
","430","<java><scala><ecdsa>","-3","1","1","2018-09-12 18:33:45","52301461","2","","9508555","","2018-09-12 16:55:10","2018-09-12 16:24:13",""
"50660187","Creating of ECDSA certficate signed by other ECDSA certificate","I need to create ""Client"" ECDSA certificate signed by ""Root"" certificate (self-signed, ECDSA).
""Root"" certificate was created as described in  Translating Elliptic Curve parameters (BC to MS).
To create ""Client"" certificate (signed by ""Root"") slightly modified algorithm can be used.
The difference is that the private key (used to sign public key from keypair generated for ""Client"" certificate) must be supplied from the ""outside"" - it is a private-key of ""Root"" certificate.
But this is the issue. I cannot find a way how to get and translate private key to type Org.BouncyCastle.Crypto.Parameters.ECPrivateKeyParameters that could be passed to signature-factory.
// 1. get private-key of ""Root"" certificate from existing certificate:
byte[] msRootCertData = File.ReadAllBytes(@""c:\root_ecdsa_cert.pfx"");
X509Certificate2 msRootCert = new X509Certificate2(msRootCertData);
ECDsaCng msRootPrivateKey = msRootCert.GetECDsaPrivateKey() as ECDsaCng;
ECParameters msRootPrivateKeyParameters = msRootPrivateKey.ExportParameters(true);

// here comes the issue:
ECPrivateKeyParameters bcRootPrivateKeysParameters = TranslateMSKeysToBouncy(msRootPrivateKeyParameters);

// 2. generate ""Client"" key-pair:
AsymmetricCipherKeyPair bcClientKeyPair = bcKeyGen.GenerateKeyPair();
ECPrivateKeyParameters bcClientPrivKey = (ECPrivateKeyParameters)bcClientKeyPair.Private;
ECPrivateKeyParameters bcClientPublKey = (ECPublicKeyParameters)bcClientKeyPair.Public;

// 3. create X509 certificate:
X509V3CertificateGenerator bcCertGen = new X509V3CertificateGenerator();
bcCertGen.SetPublicKey(bcClientPublKey);
// .. set subject, validity period etc
ISignatureFactory sigFac = new Asn1SignatureFactory(""Sha256WithECDSA"", bcRootPrivateKeysParameters);
Org.BouncyCastle.X509.X509Certificate bcClientX509Cert = bcCertGen.Generate(sigFac);
byte[] x509CertEncoded = bcClientX509Cert.GetEncoded();

// the rest is the same as in the mentioned example.
Any hints? 
Or is there other way? (for example: passing instance of X509Certificate2 directly to BouncyCastle library (avoid to translate private-keys to Cng), or generating ""Client"" certificate without BouncyCastle)
Thanks.
","If you can take a dependency on .NET Framework 4.7.2 (or .NET Core 2.0) you can do it without BouncyCastle, via the new CertificateRequest class:
X509Certificate2 publicPrivate;

using (ECDsa clientPrivateKey = ECDsa.Create())
{
    var request = new CertificateRequest(
        ""CN=Et. Cetera"",
        clientPrivateKey,
        HashAlgorithmName.SHA256);

    // Assuming this isn't another CA cert:
    request.CertificateExtensions.Add(
        new X509BasicConstraintsExtension(false, false, 0, false));

    // other CertificateExtensions as you desire.

    // Assign, or derive, a serial number.
    // RFC 3280 recommends that it have no more than 20 bytes encoded.
    // 12 random bytes seems long enough.
    byte[] serial = new byte[12];

    using (RandomNumberGenerator rng = RandomNumberGenerator.Create())
    {
        rng.GetBytes(serial);
    }

    DateTimeOffset notBefore = DateTimeOffset.UtcNow;
    DateTimeOffset notAfter = notBefore.AddMonths(15);

    using (X509Certificate2 publicOnly = request.Create(
        msRootCert,
        notBefore,
        notAfter,
        serial))
    {
        publicPrivate = publicOnly.CopyWithPrivateKey(clientPrivateKey);
    }
}

// The original key object was disposed,
// but publicPrivate.GetECDsaPrivateKey() still works.

If you want to add publicPrivate to an X509Store you need to either 1) export it to a PFX and re-import it, or 2) change the key creation to use a named key.  Otherwise, only the public portion will be saved (on Windows).
","429","<c#><certificate><ecdsa>","1","3","1","2019-05-17 00:08:37","50660387","0","","","","","2018-06-02 18:58:27",""
"45896699","ECDSA Android verify with Public Key always return false","I have some token and I need first to sign it with SHA256 and ECDSA based on private and public key from KeyStore.
Every time when I try to verify value I get false as result. I do not know why. 
Does someone have any idea how to solve this?
Here are my functions to generate and load keys:
private void generateKeys(){

    try {

        keyStore = KeyStore.getInstance(KEYSTORE_NAME);
        keyStore.load(null);

        if(!keyStore.containsAlias(KEY_NAME)) {
            KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance(KeyProperties.KEY_ALGORITHM_EC, KEYSTORE_NAME);
            keyPairGenerator.initialize(
                    new KeyGenParameterSpec.Builder(KEY_NAME,
                            KeyProperties.PURPOSE_SIGN | KeyProperties.PURPOSE_VERIFY)
                            .setDigests(KeyProperties.DIGEST_SHA256,
                                    KeyProperties.DIGEST_SHA512)
                            .setAlgorithmParameterSpec(new ECGenParameterSpec(""secp256r1""))
                            .setUserAuthenticationRequired(false)
                            .build());
            keyPairGenerator.generateKeyPair();

            setRegistred(true);
        }
    } catch (NoSuchAlgorithmException e) {
        e.printStackTrace();
    } catch (NoSuchProviderException e) {
        e.printStackTrace();
    } catch (InvalidAlgorithmParameterException e) {
        e.printStackTrace();
    } catch (CertificateException e) {
        e.printStackTrace();
    } catch (KeyStoreException e) {
        e.printStackTrace();
    } catch (IOException e) {
        e.printStackTrace();
    }
}



private void loadKeys(){
    try {
        keyStore = KeyStore.getInstance(KEYSTORE_NAME);
        keyStore.load(null);
        if(keyStore.containsAlias(KEY_NAME)) {
            publicKey = keyStore.getCertificate(KEY_NAME).getPublicKey();
            privateKey = (PrivateKey) keyStore.getKey(KEY_NAME, null);
        }
    } catch (IOException e) {
        e.printStackTrace();
    } catch (NoSuchAlgorithmException e) {
        e.printStackTrace();
    } catch (CertificateException e) {
        e.printStackTrace();
    } catch (KeyStoreException e) {
        e.printStackTrace();
    } catch (UnrecoverableKeyException e) {
        e.printStackTrace();
    }
}

This is how sign value:
 public String sign(String inputStr, FingerprintManager.CryptoObject cryptoObject){
    try {
        Signature signature = Signature.getInstance(SecurityConstants.SIGNATURE);
        signature.initSign(privateKey);
        signature.update(inputStr.getBytes());
        byte[] signedBytes = signature.sign();
        String result = Base64.encodeToString(signedBytes, Base64.DEFAULT);
        Log.d(""TAG"", result);
        return result;
    } catch (SignatureException e) {
        e.printStackTrace();
    } catch (InvalidKeyException e) {
        e.printStackTrace();
    } catch (NoSuchAlgorithmException e) {
        e.printStackTrace();
    }
    return null;
}

Here is my try to verify with Public Key:
public boolean verifyWithPublicKey(String input, FingerprintManager.CryptoObject cryptoObject){
    try {
        Signature signature = Signature.getInstance(SecurityConstants.SIGNATURE);
        keyStore = KeyStore.getInstance(KEYSTORE_NAME);
        keyStore.load(null);
        PublicKey pk  = getPublicKeyForVerification();
        signature.initVerify(pk);
        signature.update(input.getBytes());
        boolean isVerifed = signature.verify(input.getBytes());
        Log.d(""TAG"", String.valueOf(isVerifed));
        return isVerifed;
    } catch (SignatureException e) {
        e.printStackTrace();
    } catch (InvalidKeyException e) {
        e.printStackTrace();
    } catch (CertificateException e) {
        e.printStackTrace();
    } catch (NoSuchAlgorithmException e) {
        e.printStackTrace();
    } catch (KeyStoreException e) {
        e.printStackTrace();
    } catch (IOException e) {
        e.printStackTrace();
    }
    return false;
}

","The error is here, when you write the following code to verify the signature:
signature.update(input.getBytes());
boolean isVerifed = signature.verify(input.getBytes());

With this code, you try to verify that the signature has been signed with itself!
You should have:
signature.update(MY_BYTES_ARRAY_OF_DATA);
boolean isVerifed = signature.verify(MY_SIGNATURE);

Do not forget that the signature does not encapsulate the signed data by default.
If you want to have a format that includes signed data and associated signature, use S/MIME, OpenPGP, etc.
","424","<android><android-keystore><ecdsa>","0","1","1","2019-05-20 09:13:40","","0","","955836","","2019-05-20 09:13:40","2017-08-26 14:57:47",""
"52499457","Python code to recover private key from public key","Helllo,
I would like to use this code to generate/recover my private key, I'm using Python 3.6 and installed ecdsa package but how should I edit the code with my public key?
I'm quite new to python, tried some things but I get the following errors..
NameError: name 'addr' is not defined
TypeError: 'NoneType' object is not iterable
IndentationError: unexpected indent          (<-- I have many of this error)
Do I need anything else to download and install?
I'd appreciate for any kind of help!
","
how should I edit the code with my public key?

You can't.
Private keys cannot be generated from public keys. This is absolutely fundamental to public key cryptography.

I get the following errors..

...

NameError: name 'addr' is not defined

You must define or initialize addr before using it.

TypeError: 'NoneType' object is not iterable

See TypeError: 'NoneType' object is not iterable in Python

IndentationError: unexpected indent

Python depends on indentation as part of its syntax, for example indentation is used to define blocks where other languages might use { and } or begin and end.
If you have too much or too little indentation it alters the meaning of the code and may not make any sense. You must pay careful attention to indentation when using Python.
In particular, I suspect that if you set tab-spacing to other than 8 and irregularly mix tabs with spaces in indentation, you will have problems.
","404","<public-key><ecdsa>","0","1","1","2019-01-05 08:53:42","","0","","","","","2018-09-25 12:22:30",""
"51333111","openssl ""no shared cipher"" for ECDSA cert (RSA works fine)","When I try to test my ecdsa cert using openssl it says ""no cipher suite found"".  However, RSA works fine and I have actually used use another ECDSA certificate in my production test (AWS IoT) and it works fine.  I can't figure out why openssl isn't happy???  I have the terminal output from my two sessions including my certificate and key pem output (one client and one server running on the same PC).  Any ideas what could be wrong??? 
/////// Server terminal /////////////////////////
$ openssl.exe version
OpenSSL 1.0.2o  27 Mar 2018

$  openssl.exe s_server -key test.key -cert test.crt -verify 0 -accept 443 -WWW verify depth is 0
Using default temp DH parameters
ACCEPT
4294956672:error:1408A0C1:SSL routines:ssl3_get_client_hello:no shared cipher:s3_srvr.c:1427:
ACCEPT

/////// Same system in a second terminal ////////

$ openssl s_client -connect 127.0.0.1:443 -CAfile test.crt
CONNECTED(00000003)
4294956672:error:14077410:SSL routines:SSL23_GET_SERVER_HELLO:sslv3 alert handshake failure:s23_clnt.c:802:
---
no peer certificate available
---
No client certificate CA names sent
---
SSL handshake has read 7 bytes and written 308 bytes
---
New, (NONE), Cipher is (NONE)
Secure Renegotiation IS NOT supported
Compression: NONE
Expansion: NONE
No ALPN negotiated
SSL-Session:
    Protocol  : TLSv1.2
    Cipher    : 0000
    Session-ID:
    Session-ID-ctx:
    Master-Key:
    Key-Arg   : None
    PSK identity: None
    PSK identity hint: None
    SRP username: None
    Start Time: 1531517108
    Timeout   : 300 (sec)
    Verify return code: 0 (ok)
---


$ cat test.crt
-----BEGIN CERTIFICATE-----
MIIBzzCCAXagAwIBAgIJAMuakp0UdYoZMAoGCCqGSM49BAMCMDsxCzAJBgNVBAYT
AlVTMQwwCgYDVQQKDANPUkcxDDAKBgNVBAsMA0FGRzEQMA4GA1UEAwwHUm9vdCBD
QTAeFw0xODA3MTMyMTI0MzBaFw0xODA4MTIyMTI0MzBaMDsxCzAJBgNVBAYTAlVT
MQwwCgYDVQQKDANPUkcxDDAKBgNVBAsMA0FGRzEQMA4GA1UEAwwHUm9vdCBDQTBZ
MBMGByqGSM49AgEGCCqGSM49AwEHA0IABFWTAwcN5r6TQEOToRDjES2hKoofyv/w
GFn8qXwQIeRORn2LinquUMH770vt2SejlJR93nyV/XmQVu3aCVxjMvOjYzBhMB0G
A1UdDgQWBBRcUCv8D7HBeEQ7N6jbRCmJFiU4DTAfBgNVHSMEGDAWgBRcUCv8D7HB
eEQ7N6jbRCmJFiU4DTASBgNVHRMBAf8ECDAGAQH/AgEBMAsGA1UdDwQEAwIBBjAK
BggqhkjOPQQDAgNHADBEAiA8tY8ebuAhWSfRGPnd8S0ukMdGULHPP0T7zTfOdnsb
TQIgad3ML+vIa0kt+cdRLKvci0/fGWcQCbTaqgO0chyuT2g=
-----END CERTIFICATE-----

$ cat test.key
-----BEGIN EC PARAMETERS-----
BggqhkjOPQMBBw==
-----END EC PARAMETERS-----
-----BEGIN EC PRIVATE KEY-----
MHcCAQEEIMtuI/yMncCnlYB/7ev8NaUWR0WYeeuIX35QVjHtA2vaoAoGCCqGSM49
AwEHoUQDQgAEVZMDBw3mvpNAQ5OhEOMRLaEqih/K//AYWfypfBAh5E5GfYuKeq5Q
wfvvS+3ZJ6OUlH3efJX9eZBW7doJXGMy8w==
-----END EC PRIVATE KEY-----

","","393","<openssl><certificate><ecdsa>","0","","0","2018-07-14 23:49:42","","4","","10078130","","2018-07-14 23:20:42","2018-07-13 21:37:32",""
"46196312","ecdsa signature verification","next problem:
message is signed in python application and will be verified in erlang with public key
python can sign message in two ways:
1) with muttable length of signature - erlang verifies ok
2) with imuttable length of signatur - erlang cant verify it
some information from python lib:
There are also multiple ways to represent a signature. The default sk.sign() and vk.verify() methods present it as a short string, for simplicity and minimal overhead. To use a different scheme, use the sk.sign(sigencode=) and vk.verify(sigdecode=) arguments. There are helper funcions in the ""ecdsa.util"" module that can be useful here.
Examples:
DataToSign = 
<<96,0,0,0,0,0,253,0,254,128,131,0,33,1,255,255,48,142,92,131,100,75,214,244,255,60,0,0,0,0,0,0,0,0,0,0,0,0,0,25,0,0,16,92,17,66,0,1,0,0,0,0,0,0,3,9,89,185,3,24,89,185,5,112,0,0,123,3,0,3,253,100,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0>>.

PublicKey = {{'ECPoint',<<4,71,71,171,183,56,205,109,58,24,36,197,220,179,74,166,21,145,
              79,209,245,157,150,237,93,96,31,1,248,198,232,97,28,197,90,243,
              89,210,74,169,213,236,46,124,133,31,44,215,222,184,221,251,95,
              40,182,101,193,50,35,62,174,134,178,142,120>>},
 {namedCurve,{1,2,840,10045,3,1,7}}}.



Signature from python (with constant length):

ImmutableSign = 
<<179,160,225,5,1,154,246,29,57,97,160,132,95,35,135,238,69,21,136,152,51,104,224,126,124,226,168,143,253,213,37,233,196,67,254,155,60,218,45,8,60,140,76,44,20,189,213,143,42,231,4,177,62,124,141,95,236,20,59,20,28,10,58,232>>.

signed with sk.sign(data, hashfunc=hashlib.sha256)

MutableSign =



<<48,68,2,32,6,82,67,217,251,248,93,74,223,170,47,192,93,228,218,228,132,4,69,177,57,49,20,161,241,48,52,106,39,130,197,2,2,32,88,35,228,122,252,140,214,
191,187,117,10,187,54,106,16,36,198,155,49,78,198,58,103,57,124,212,244,31,9,242,101,169>>

signed with  sk.sign(data, hashfunc=hashlib.sha256, sigencode=ecdsa.util.sigencode_der)


public_key:verify(DataTosign, sha256, ImmutableSign, PublicKey) -> false

public_key:verify(DataTosign, sha256, MutableSign, PublicKey) -> true

also interesting thing if verify via openssl
Mutable length sign:
openssl dgst -ecdsa-with-SHA1 -verify ec-pub.pem -signature sig2.bin data
Verification Failure

fails (because sigh with sha256)
Immutable length sign:
openssl dgst -ecdsa-with-SHA1 -verify ec-pub.pem -signature sig.bin data
Error Verifying Data
33773:error:0D07207B:asn1 encoding routines:ASN1_get_object:header too long:/BuildRoot/Library/Caches/com.apple.xbs/Sources/OpenSSL098/OpenSSL098-64.50.6/src/crypto/asn1/asn1_lib.c:153:
33773:error:0D068066:asn1 encoding routines:ASN1_CHECK_TLEN:bad object header:/BuildRoot/Library/Caches/com.apple.xbs/Sources/OpenSSL098/OpenSSL098-64.50.6/src/crypto/asn1/tasn_dec.c:1331:
33773:error:0D07803A:asn1 encoding routines:ASN1_ITEM_EX_D2I:nested asn1 error:/BuildRoot/Library/Caches/com.apple.xbs/Sources/OpenSSL098/OpenSSL098-64.50.6/src/crypto/asn1/tasn_dec.c:387:Type=ECDSA_SIG

","so we needed to format short sign to DER which verifies crypto
fix_signed(<<First:8, _/bytes>> = Value) when First >= 16#80 -> <<0:8, Value/bytes>>;
fix_signed(Value) -> Value.

get_signed_big_endian(Value) ->
  Res = binary:encode_unsigned(Value),
  fix_signed(Res).

sign_to_der_format(<<R:256, S:256>>) ->

  RBin = get_signed_big_endian(R),
  SBin = get_signed_big_endian(S),

  RSize = byte_size(RBin),
  SSize = byte_size(SBin),

  Len = 4 + RSize + SSize,

  <<48:8, Len:8, 2:8, RSize:8, RBin/bytes, 2:8, SSize:8, SBin/bytes>>.

","391","<python><erlang><ecdsa><curves>","0","1","1","2017-09-14 11:12:33","46217575","3","","4460670","","2017-09-13 12:47:39","2017-09-13 11:25:59",""
"16198145","Combining ECDSA keys","How can I combine two ECDSA private/public keypairs into one? I know it's done with modular addition in openssl, I just don't understand how that works. Can anyone explain that to me?
","ECDSA private key - is just a number, order of base point.
You can just add two private keys (i.e. numbers), reducing sum modulo base point order, and exponentiating the base point to this order.
But why should you need this?
","391","<c++><openssl><addition><ecdsa><modular-arithmetic>","0","0","2","2013-07-31 19:40:37","16205796","0","","849891","","2013-07-31 19:40:37","2013-04-24 17:10:45",""
"16198145","Combining ECDSA keys","How can I combine two ECDSA private/public keypairs into one? I know it's done with modular addition in openssl, I just don't understand how that works. Can anyone explain that to me?
","You can do that by adding two private keys
privkey = privateA + privateB (mod order)

or, in OpenSSL code:
BN_mod_add_quick(privkey, privateA, privateB, order);

Here order is the smallest number where order = s - j, such that sP = jP for a point P on the elliptic curve. The public key of your new private key is pubkey = privkey * G, or:
EC_POINT_mul(group, pubkey, privkey, NULL, NULL, ctx);

The values of order and generator point G are curve parameters and are set when creating and setting group(an EC_GROUP object).
","391","<c++><openssl><addition><ecdsa><modular-arithmetic>","0","2","2","2013-07-31 19:40:37","16205796","0","","849891","","2013-07-31 19:40:37","2013-04-24 17:10:45",""
"31017408","Should elliptic curve for public key generation and signature computation be the same?","According to wiki public key in ECDSA is multiplication of private key (random number) to some base point G on elliptic curve C. And also we have usage of C in both signing and verification. 
May I use some G1 and C1 for public key generation and other curve C2 for signing and verification?
I know it sounds strange but my actual goal is to use GOST private keys in ECDSA (I already have them and have to use them). Hence, GOST public may be generated from special C1, G1 and Java's SHA256withECDSA probably uses other curve who knows.

How detect curve used by Signature ecdsaSign = Signature.getInstance(""SHA256withECDSA"", ""BC"");?
If sign and verify returns true, does it mean that GOST keys which I gave to ECDSA are compatible with ECDSA? 
  Signature ecdsaSign = Signature.getInstance(""SHA256withECDSA"", ""BC"");
  ecdsaSign.initSign(privateKeyGOST);
  ecdsaSign.update(""aaaa"".getBytes(""UTF-8""));
  byte[] signature = ecdsaSign.sign();

  Signature ecdsaVerify = Signature.getInstance(""SHA256withECDSA"", ""BC"");
  ecdsaVerify.initVerify(publicKeyGOST);
  ecdsaVerify.update(""aaaa"".getBytes(""UTF-8""));
  System.out.println();
  System.out.println(ecdsaVerify.verify(signature));  //TRUE


Note, that curve for GOST key generation and internal curve of SHA256withECDSA  may be not equal that's why I'm asking this question.
UPDATE
Answer to 

May I use some G1 and C1 for public key generation and other curve C2 for signing and verification?

No, C1 must be equal to C2. 
It's possible to detect BC curve - I looked in SignatureSpi sources of BC and saw that curve params taken from key. And discovered C2 equals to known C1. In other words, not SHA256withECDSA but prKey.getAlgorithm() decides. 
BUT!! Compability of keys doesn't mean that it's safe to use it. GOST curve has special invariants which may impact at some ECDSA steps - this is interesting but very hard question - is there any weak points of  GOST curves in ECDSA. So, answer is ""compatible but check carefully math staff before using"" 
Note, that KBKDF will not save from GOST curve weakness in ECDSA (if it really exists behind the ""math-crypto-scenes""
","I'll answer in order:


How detect curve used by Signature ecdsaSign = Signature.getInstance(""SHA256withECDSA"", ""BC"");


You can't because the public & private keys should contain the parameters, not the algorithm. However, only certain curve parameters will be supported by the underlying library. In the case of Bouncy Castle those are those for the F(p) and F(2^m) curves. These include at least the NIST and Brainpool curves.


If sign and verify returns true, does it mean that GOST keys which I gave to ECDSA are compatible with ECDSA?


Yes, you can safely assume that. If that wasn't the case then there would be something seriously wrong with the verification. As you may now understand this is because C1 = C2.

Note that you should not use secret keys like this, especially if the secret keys are also used for the GOST algorithm itself. It is good practice to not mix values. You should rather use the (leftmost) bytes of SHA-256 over the secret key value instead (if you have to use it). It would be even better to use a Key Based Key Derivation Function (KBKDF).
","388","<java><digital-signature><bouncycastle><ecdsa><gost3410>","3","3","1","2015-06-26 02:53:12","31031418","0","","2104560","","2015-06-26 02:53:12","2015-06-24 04:03:39",""
"29471315","Get the reason of CryptoException in JavaCard","I am trying to implement ECDSA in JavaCard (Eclipse 4.4.2, JC 2.2.1). My card is a Gemalto IDCore 3010, or at least it is supposed to be (after checking the ATR code it looks like, that it is a WM GX4 72 DHS TSA...).
Anyway, if I don't surround the objECDSAKeyPair = new KeyPair(KeyPair.ALG_EC_FP, KeyBuilder.LENGTH_EC_FP_192) line with try and catch I get an unknown error (send_APDU() returns 0x80206F00 (Unknown ISO7816 error: 0x6F00)), but when I do surround it, it returns no error (send_APDU() returns 0x80209000 (9000: Success. No error.)). However it must go to the catch block because the other three lines in the try block don't get executed.
How can I visualize the error message? If I go with ISOException.throwIt(reason), I get Communication error with the intelligent card. Please try it again. multiple times.
In this thread it suggests the byte reason = c.getReason() code, but it won't work, not even if I cast the right side to byte.
Thank you!
Here is the relevant part of my code.
public class ECDSATestApplet extends Applet {

    private final static byte CLS = (byte) 0xE0;
    private final static byte NOOP = (byte) 0x00;
    private final static byte GEN = (byte) 0x01;

    ...

    private final static byte[] HELLO_WORLD = new byte[] { 'H', 'e', 'l', 'l', 'o', ' ', 'W', 'o', 'r', 'l', 'd', '!' };

    private ECPrivateKey objECDSAPriKey = null;
    private ECPublicKey objECDSAPubKey = null;
    private KeyPair objECDSAKeyPair = null;
    private Signature objECDSASign = null;

    final static short BAS = 0;

    private ECDSATestApplet() {
    }

    public static void install(byte[] bArray, short bOffset, byte bLength) {
        new ECDSATestApplet().register();
    }

    public void process(APDU apdu) {
        if (this.selectingApplet())
            return;

        byte buffer[] = apdu.getBuffer();

        if (buffer[ISO7816.OFFSET_CLA] != CLS)
            ISOException.throwIt(ISO7816.SW_CLA_NOT_SUPPORTED);

        switch (buffer[ISO7816.OFFSET_INS]) {
        case NOOP:
            break;

        case GEN:
            try {
                // ------- ERROR LINE -------
                objECDSAKeyPair = new KeyPair(KeyPair.ALG_EC_FP, KeyBuilder.LENGTH_EC_FP_192);
//              objECDSASign = Signature.getInstance(Signature.ALG_ECDSA_SHA, false);
//              objECDSAKeyPair.genKeyPair();
//              objECDSAPriKey = (ECPrivateKey) objECDSAKeyPair.getPrivate();
//              objECDSAPubKey = (ECPublicKey) objECDSAKeyPair.getPublic();
                apdu.setIncomingAndReceive();
                Util.arrayCopyNonAtomic(HELLO_WORLD, (short) 0, buffer, (short) 0, (short) HELLO_WORLD.length);
                apdu.setOutgoingAndSend((short) 0, (short) HELLO_WORLD.length);
            } catch (CryptoException c) {
                short reason = c.getReason();
//              ISOException.throwIt(reason);
            }

            break;
        }
        return;
    }
}

","There are two possible reasons of your troubles:

Your status word does not follow status words recommended by ISO7816. Try
ISOException.throwIt((short) ((short) (0x9C00) | reason));

instead of
ISOException.throwIt(reason);

You forgot to set parameters of your elliptic curve before generating a new key pair. You should generate your EC key pair this way:
KeyPair keyPair = new KeyPair(KeyPair.ALG_EC_FP, KeyBuilder.LENGTH_EC_FP_192);
ECPrivateKey privKey = (ECPrivateKey) keyPair.getPrivate();
ECPublicKey pubKey = (ECPublicKey) keyPair.getPublic();
initDomainParams(pubKey);
initDomainParams(privKey);
keyPair.genKeyPair();

where
private void initDomainParams(ECKey key) {
    key.setFieldFP(F, (short)0, (short)F.length);
    key.setA(A, (short)0, (short)A.length);
    key.setB(B, (short)0, (short)B.length);
    key.setG(G, (short)0, (short)G.length);
    key.setR(R, (short)0, (short)R.length);
}

with F, A, B, G, R parameters of the elliptic curve you have chosen for your signature. See the list of recommended curves here: http://csrc.nist.gov/groups/ST/toolkit/documents/dss/NISTReCur.pdf

","387","<smartcard><javacard><ecdsa>","2","3","1","2015-04-12 18:01:11","29484934","14","3","-1","","2017-05-23 12:14:17","2015-04-06 12:26:37",""
"44829426","Can I create a JCE ECPublicKey from a Q value from an openssh public key and ECParameterSpec","I'm reading openssh format elliptic curve public keys (RFC 5656, section 3.1) and would like to get from a BigInteger Q value to an ECPublicKey instance using JCE (rather than say BouncyCastle). I want to do this to verify JWT signatures.
e.g. https://api.github.com/users/davidcarboni/keys: 
ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBK8hPtB72/sfYgNw1WTska2DNOJFx+QhUxuV6OLINSD2ty+6gxcM8yZrvMqWdMePGRb2cGh8L/0bGOk+64IQ/pM=

It looks like I can use ECPublicKeySpec. This takes two parameters. An ECPoint and an ECParameterSpec. I'm able to get the parameter spec using the following JCE code (and the openssh identifier from the key data, say ""nistp256""):
ECParameterSpec getECParameterSpec(String identifier) {
    try {
        AlgorithmParameters parameters = AlgorithmParameters.getInstance(""EC"");
        String name = identifier.replace(""nist"", ""sec"") + ""r1"";
        parameters.init(new ECGenParameterSpec(name));
        return parameters.getParameterSpec(ECParameterSpec.class);
    } catch (InvalidParameterSpecException | NoSuchAlgorithmException e) {
        throw new IllegalArgumentException(""Unable to get parameter spec for identifier "" + identifier, e);
    }
}

I've successfully parsed the Q value from the key data. RFC 5656 tells me that ""Q is the public key encoded from an elliptic curve point into an octet string"") however the constructor of JCE's ECPoint class takes two parameters, X and Y.
Can I get to X and Y from Q, or do I need to take a different approach? 
(NB I quite rightly don't have access to the private key)
","The base64 portion of your input has the equivalent hex of
00 00 00 13 65 63 64 73 61 2D 73 68 61 32 2D 6E 
69 73 74 70 32 35 36 00 00 00 08 6E 69 73 74 70 
32 35 36 00 00 00 41 04 AF 21 3E D0 7B DB FB 1F 
62 03 70 D5 64 EC 91 AD 83 34 E2 45 C7 E4 21 53 
1B 95 E8 E2 C8 35 20 F6 B7 2F BA 83 17 0C F3 26 
6B BC CA 96 74 C7 8F 19 16 F6 70 68 7C 2F FD 1B 
18 E9 3E EB 82 10 FE 93 

65 63 64 jumped out to me as ""ecd"" (sure enough, ""ecdsa-sha2-nistp256"").
So the blob looks to be

Big Endian length of a string/payload (19)
The string ""ecdsa-sha2-nistp256""
Big Endian length of a string/payload (8)
The string ""nistp256""
Big Endian length of a payload (0x41 == 65)
The encoded ECPoint Q (04 AF 21 ... 10 FE 93)

The encoded ECPoint starts with 04 indicating it is an uncompressed point (the most common encoding).  The 04 encoding rules (from http://www.secg.org/sec1-v2.pdf, 2.3.5, step 3) say that the remaining payload is X and Y, each left-padded with zeros to the encoding size of the curve field.
So your ECPoint looks like
04
Qx:
AF 21 3E D0 7B DB FB 1F 62 03 70 D5 64 EC 91 AD
83 34 E2 45 C7 E4 21 53 1B 95 E8 E2 C8 35 20 F6
Qy:
B7 2F BA 83 17 0C F3 26 6B BC CA 96 74 C7 8F 19
16 F6 70 68 7C 2F FD 1B 18 E9 3E EB 82 10 FE 93

In C# you'd need to a) reverse the bytes of each of Qx and Qy (because the .NET BigInteger expects Little Endian, and these are Big Endian) and b) put a padding 0x00 byte as more significant than the 0xAF and 0xB7 bytes, since they have their high bits set (and would be interpreted as negative numbers).  Don't know if Java has either of those quirks.
","384","<java><openssh><jce><elliptic-curve><ecdsa>","0","0","1","2017-06-30 14:57:18","44849385","0","","","","","2017-06-29 15:32:33",""
"31289849","Generating ECDSA public key at host side from W parameter","I want to send the public key of the private-public key pair (ECDSA) generated in my applet to the host application/terminal. 
In RSA normally i would send the modulus and exponent and will generate the public key at the host side.
In ECDSA i read from the link that we can do the same if you take the W parameter bytes outside the card Click here: Stackoverflow Answer: encode public key on Java
I have the W bytes from the card now. can someone suggest how to create the public key from this?
","I wrote this method to convert an EC Public key into java.security.interfaces.ECPublicKey key object. To do this I use Bouncy Castle provider (bcprov-ext-jdk16-1.46.jar). You can download the latest version from here.
/**
 * This method converts the EC public key (ECPublicKey#getW()) into ECPublicKey
 * @param cardPublicKey as W
 * @param curveName (for example ""P-224"")
 * @return java.security.interfaces.ECPublicKey
 */
public ECPublicKey ucPublicKeyToPublicKey(byte[] cardPublicKey, String curveName) {
    //for example curveName = ""P-224"";
    java.security.interfaces.ECPublicKey ecPublicKey = null; // java.security.interfaces.ECPublicKey
    java.security.KeyFactory kf = null;

    org.bouncycastle.jce.spec.ECNamedCurveParameterSpec ecNamedCurveParameterSpec = ECNamedCurveTable.getParameterSpec(curveName);
    org.bouncycastle.math.ec.ECCurve curve = ecNamedCurveParameterSpec.getCurve();
    java.security.spec.EllipticCurve ellipticCurve = EC5Util.convertCurve(curve, ecNamedCurveParameterSpec.getSeed());
    java.security.spec.ECPoint ecPoint = ECPointUtil.decodePoint(ellipticCurve, cardPublicKey);
    java.security.spec.ECParameterSpec ecParameterSpec = EC5Util.convertSpec(ellipticCurve, ecNamedCurveParameterSpec);
    java.security.spec.ECPublicKeySpec publicKeySpec = new java.security.spec.ECPublicKeySpec(ecPoint, ecParameterSpec);

    try {
        kf = java.security.KeyFactory.getInstance(""EC"", ""BC"");
    } catch (Exception e) {
        System.out.println(""Caught Exception kf : "" + e.toString());
    }

    try {
        ecPublicKey = (ECPublicKey) kf.generatePublic(publicKeySpec);
    } catch (Exception e) {
        System.out.println(""Caught Exception public key: "" + e.toString());
    }

    return ecPublicKey;
}

","376","<java><javacard><elliptic-curve><ecdsa>","3","2","1","2015-07-11 13:48:16","31301261","0","2","-1","","2017-05-23 12:29:46","2015-07-08 10:22:42",""
"45470941","Create ASN.1 from two big integers","I have a java program using an HSM that with the native API gives me and R and S value of an ECDSA signature which is just the two Big Integers. I need to take those Integers and create ASN.1 encoding. Any idea on how I could do that? I do have BouncyCastle up and running but, I am not familiar with the options available to me.
","A small example to illustrate:
import org.bouncycastle.asn1.ASN1Integer;
import org.bouncycastle.asn1.DERSequence;

import javax.xml.bind.DatatypeConverter;
import java.math.BigInteger;

public class Main {

    public static void main(String[] args) throws Exception {
        BigInteger r = new BigInteger(""29128391823901823918293108120938102381912839182390182391829310812093810238199"");
        BigInteger s = new BigInteger(""38663726871681756650018917824777578348866372687168175665001891782477757834811"");

        ASN1Integer asn1R = new ASN1Integer(r);
        ASN1Integer asn1S = new ASN1Integer(s);

        DERSequence seq = new DERSequence(new ASN1Integer[]{asn1R, asn1S});
        byte[] encoded = seq.getEncoded();
        System.out.println(DatatypeConverter.printHexBinary(encoded));
    }
}

","363","<java><bouncycastle><asn.1><ecdsa>","0","3","1","2017-08-03 00:54:42","45473131","0","","","","","2017-08-02 21:02:12",""
"51951185","Create any PrivateKey instance (RSA or DSA or EC) from PKCS8 encoded data","I have an unencrypted PKCS8 encoded file that represents a Private Key. It can be any of these private key types - RSA, DSA or EC. I viewed these files in an ASN1 decoder (https://lapo.it/asn1js/) and I could see the type (RSA, DSA or EC) in the data.
Is there a way to read the PKC8 private key data into the correct Private Key Java object without specifying the key type in code like this - 
PKCS8EncodedKeySpec spec = new PKCS8EncodedKeySpec(pkcs8key);
KeyFactory factory = KeyFactory.getInstance(""RSA""); // Avoid ""RSA"" here?
PrivateKey privateKey = factory.generatePrivate(spec);

Is there a way to avoid specifying the algorithm in KeyFactory.getInstance(""RSA"")? Shouldn't this be determined from the PKCS8EncodedKeySpec since it is available in the PKCS8 data?
Sample unencrypted PKCS8 data and their ASN1 decodings which show the key type - 
DSA - link
EC - link
RSA - link
","This can be achieved with the help of BouncyCastle APIs - 
/** Read a PKCS#8 format private key. */
private static PrivateKey readPrivateKey(InputStream input)
throws IOException, GeneralSecurityException {
    try {
        byte[] buffer = new byte[4096];
        int size = input.read(buffer);
        byte[] bytes = Arrays.copyOf(buffer, size);
        /* Check to see if this is in an EncryptedPrivateKeyInfo structure. */
        PKCS8EncodedKeySpec spec = new PKCS8EncodedKeySpec(bytes);
        /*
         * Now it's in a PKCS#8 PrivateKeyInfo structure. Read its Algorithm
         * OID and use that to construct a KeyFactory.
         */
        ASN1InputStream bIn = new ASN1InputStream(new ByteArrayInputStream(spec.getEncoded()));
        PrivateKeyInfo pki = PrivateKeyInfo.getInstance(bIn.readObject());
        String algOid = pki.getPrivateKeyAlgorithm().getAlgorithm().getId();
        return KeyFactory.getInstance(algOid).generatePrivate(spec);
    } finally {
        input.close();
    }
}

","355","<java><rsa><ecdsa><java-security><pkcs#8>","1","2","1","2018-08-29 10:01:50","52074721","6","","255872","","2018-08-22 09:10:09","2018-08-21 14:41:22",""
"51685529","Generating the 256bit ECDSA private key","I want to make an 256 bit ECDSA private key with secp256k1 curve by php.
I used this snippet:
$pk_Generate = openssl_pkey_new(array(
    'private_key_bits' => 256,
    'private_key_type' => OPENSSL_KEYTYPE_EC,
    'curve_name' => 'secp256k1'
));

while ($msg = openssl_error_string())
    echo $msg . ""<br />\n"";

openssl_pkey_export($pk_Generate, $pk_Generate_Private);
var_dump($pk_Generate_Private); // show me NULL

but it give me this error:
error:0E06D06C:configuration file routines:NCONF_get_string:no value
error:0E06D06C:configuration file routines:NCONF_get_string:no value
error:0E06D06C:configuration file routines:NCONF_get_string:no value
error:0E06D06C:configuration file routines:NCONF_get_string:no value

also if this code works fine, it shows me private key in PEM format but I want it in hex string format.
please guide me.
","Try this
$config = [
    ""config"" => getenv('OPENSSL_CONF'),
    'private_key_type' => OPENSSL_KEYTYPE_EC,
    'curve_name' => 'secp256k1'
];
$res = openssl_pkey_new($config);
if (!$res) {
    echo 'ERROR: Fail to generate private key. -> ' . openssl_error_string();
    exit;
}
// Generate Private Key
openssl_pkey_export($res, $priv_key, NULL, $config);
// Get The Public Key
$key_detail = openssl_pkey_get_details($res);
$pub_key = $key_detail[""key""];

echo ""priv_key:<br>"".$priv_key;
echo ""<br><br>pub_key:<br>"".$pub_key;

","351","<php><private-key><ecdsa>","0","0","1","2018-11-19 18:40:19","","0","","","","","2018-08-04 12:25:26",""
"27160792","openssh ecdsa sign verify but is wrong","I've written some C code witch should sign an hash.
It seems to work fine; sign, generate public key and verify correctly.
but then using the sign result into another know-working code give me a key verification error (the sign is used over a bitcoin transaction)
Testing code is working fine, it can sign and verify, also used a third library (bitcoin's own implementation) and again it works fine.
So there is a bug in how I use OpenSSH but I can't find it. Any help appreciated, thanks.
Here the sign generator compiled with gcc -g -lssl -lcrypto
#include <openssl/ec.h> // for EC_GROUP_new_by_curve_name, EC_GROUP_free, EC_KEY_new, EC_KEY_set_group, EC_KEY_generate_key, EC_KEY_free
#include <openssl/ecdsa.h>  // for ECDSA_do_sign, ECDSA_do_verify
#include <openssl/obj_mac.h>    // for NID_secp192k1
#include <openssl/sha.h>
#include <stdio.h>
#include <stdint.h>
#include <stddef.h>
int create_signature (uint8_t * hash, int len)
{
    /*
    / */ convert priv key from hexadecimal to BIGNUM
    uint8_t hex[] =
    { 0x0C, 0xAE, 0xCF, 0x01, 0xD7, 0x41, 0x02, 0xA2, 0x8A, 0xED, 0x6A, 0x64,
    0xDC, 0xF1, 0xCF, 0x7B, 0x0E, 0x41, 0xC4, 0xDD, 0x6C, 0x62, 0xF7, 0x0F, 0x46, 0xFE,
    0xBD, 0xC3, 0x25, 0x14, 0xF0, 0xBD };*/
    EC_KEY *eckey = NULL;
    EC_POINT *pub_key = NULL;
    const EC_GROUP *group = NULL;
    BIGNUM start;
    BIGNUM *res;
    BN_CTX *ctx;
    BN_init(&start);
    ctx = BN_CTX_new(); // ctx is an optional buffer to save time from allocating and deallocating memory whenever required
    res = &start;
    BN_hex2bn(&res,""0caecf01d74102a28aed6a64dcf1cf7b0e41c4dd6c62f70f46febdc32514f0bd"");
    eckey = EC_KEY_new_by_curve_name(NID_secp256k1);
    group = EC_KEY_get0_group(eckey);
    EC_KEY_set_private_key(eckey, res);
    int function_status = -1;
    if (NULL == eckey)
    {
        printf (""\nFailed to create new EC Key\n"");
        function_status = -1;
    } else {
        unsigned int nSize = ECDSA_size(eckey);
        uint8_t ris[nSize];
        if (!ECDSA_sign(0, hash, sizeof(hash), ris, &nSize, eckey)){
            printf (""\nFailed to generate EC Signature\n"");
        } else {
            printf (""\nOK to generate EC Signature len: %d \n"", nSize);
            for (int i=0;i<nSize; i++) {
                printf (""%02X"", ris[i]);
            }
            {
                pub_key = EC_POINT_new(group);
                if (!EC_POINT_mul(group, pub_key, res, NULL, NULL, ctx))
                    printf(""Error at EC_POINT_mul.\n"");
                EC_KEY_set_public_key(eckey, pub_key);
                char *cc = EC_POINT_point2hex(group, pub_key, 4, ctx);
                char *c=cc;
                int i;
                printf(""\npublic key:"");
                for (i=0; i<130; i++) // 1 byte 0x42, 32 bytes for X coordinate, 32 bytes for Y coordinate
                {
                    printf(""%c"", *c++);
                }
                free(cc);
            }
            int verify_status = ECDSA_verify(0, hash, sizeof(hash), ris, nSize, eckey);
            const int verify_success = 1;
            if (verify_success != verify_status)
            {
                printf(""\nFailed to verify EC Signature\n"");
                function_status = -1;
            } else {
                printf(""\nVerifed EC Signature\n"");
                function_status = 1;
            }
        }
        EC_KEY_free (eckey);
    }
    return function_status;
}

int main() {
    uint8_t double_hash[] = { 0x5f,0xda,0x68,0x72,0x9a,0x63,0x12,0xe1,0x7e,0x64,0x1e,0x9a,0x49,0xfa,0xc2,0xa4,0xa6,0xa6,0x80,0x12,0x66,0x10,0xaf,0x57,0x3c,0xaa,0xb2,0x70,0xd2,0x32,0xf8,0x50 };
    printf (""\nhash len: %d \n"", sizeof(double_hash));
    create_signature( double_hash, sizeof(double_hash) );
}

","","341","<c><openssl><bitcoin><ecdsa>","0","","0","2014-11-27 00:44:32","","8","","589259","","2014-11-27 00:44:32","2014-11-26 23:40:58",""
"43307000","ECDSA signature - Is a conclusion to the used key possible?","I noticed that if I used the ECDsa.SignData Method I always get different ECDSA signature.
So I wonder if it is possible to conclude from the ECDSA signature to the used key?
If Alice sends a message to Bob1 and Bob2, can Eve determine without the public from Alice that the signatures are from the same sender?
public static byte[] SignData(KeyPair privateKeyPair, byte[] data)
{
    var ecDsa = ECDsa.Create(ECCurve.NamedCurves.brainpoolP320r1);
    ecDsa.ImportParameters(privateKeyPair.CreateECParameters());
    return ecDsa.SignData(data, HashAlgorithmName.SHA512);
}

public static bool VerifyData(KeyPair signedKeyPair, byte[] data, byte[] signature)
{
    var ecDsa = ECDsa.Create(ECCurve.NamedCurves.brainpoolP320r1);
    ecDsa.ImportParameters(signedKeyPair.CreateECParameters());
    return ecDsa.VerifyData(data,signature, HashAlgorithmName.SHA512);
}

var plainMsg = Encoding.UTF8.GetBytes(""Hello World"");
var keyPair = BrainpoolKeyGenerator.CreateKeyPair(true);

var signature1 = SignData(keyPair, plainMsg);
var signature2 = SignData(keyPair, plainMsg);

Assert.That(signature1,Is.Not.EquivalentTo(signature2), ""Signature #1 and #2 are NOT equal"");

Assert.That(VerifyData(keyPair.ExportPublicKey(), plainMsg, signature1), ""Signature of #1 is valid"");
Assert.That(VerifyData(keyPair.ExportPublicKey(), plainMsg, signature2), ""Signature of #2 is valid"");

","No, having two ECDSA signatures over the same data doesn't reveal if it was signed by the same party twice or two different parties.
In order to talk about how ECDSA works we need some quick (loosely defined) terms:

G, the Generator, is a point on the curve.


The public key associated with a private key (d) for a curve is d * G, using curve math we won't talk about here.
For brainpoolP320r1 the G value is broken down as x and y in RFC5639, section 3.5.

n, the curve Order, is the biggest legal value for d given G.


RFC5639 calls this value q, but most everything else calls it n.


There's a breakdown of ECDSA on Wikipedia, but the gist of the formula is:

Create a random number k such that 0 < k < n
r is an integer equal to the X coordinate of the EC Point k * G
Let z be the message digest interpreted as a number (with some trimming/extension)
Let kInv be the inverse of k modulo n (see also the Extended Euclidean Algorithm).
Let s be kInv * (z + (r * d)) mod n
The signature is (r, s).


In .NET the (r, s) value is represented in the IEEE P1363 format, which means the first half is r and the second half is s, their lengths determined by the curve.


So, the first half of the signature is effectively a random number. Elliptic Curve Cryptography is based on the fact that it's hard to compute Q / G (where Q is the public key, aka a point on the curve), so recovering k from r is hard.
The second half of the signature (s) is the only part where the signer key is involved, but it gets beat up a lot by k.
The signature verification algorithm then checks if Q and z' (the verifier's version of z), combined with r and s make a formula balance.  If it doesn't, there's no indication of whether it was because the hash/digest was wrong or the public key was wrong.
","336","<c#><.net><ecdsa><.net-standard-1.6><.net-4.7>","0","1","1","2017-04-10 15:06:24","43326727","0","","","","","2017-04-09 13:04:14",""
"20815035","How to verify a ECC signature with OpenSSL command?","I have a public key, a 192 bit hash, and a 384 bit signature, all as .txt hex files, and the curve is prime192v1.
What command lines can I use to verify the message with OpenSSL?
","","332","<command-line><openssl><ecdsa>","1","","0","2013-12-28 13:20:48","","0","","","","","2013-12-28 13:20:48",""
"30356745","Encode publicKey on Java Card","How to encode an ECDSA PublicKey on Java Card so that after I can decode it on another platform (e.g. sending the encoded key in a response APDU and processing it in a standard Java application)? keyPair.getPublic().getEncoded() on Java would do the trick with PKCS#8 encoding, but as far as I know getEncoded() is not available on the Java Card platform.
","getEncoded() method returns the key in its primary encoding format, or null if the key does not support encoding. So you don't need to use it for your goal. you simply can use down-casting to ECPublicKey:
ECPublicKey pubKey = (ECPublicKey) keyPair.getPublic()

The pubKey in the above line, is equal with output of getEncoded() method in Java applications.
","327","<java><encoding><javacard><ecdsa><pkcs#8>","2","1","2","2016-01-08 15:58:25","30367105","0","2","288456","","2016-01-08 15:58:25","2015-05-20 17:41:20",""
"30356745","Encode publicKey on Java Card","How to encode an ECDSA PublicKey on Java Card so that after I can decode it on another platform (e.g. sending the encoded key in a response APDU and processing it in a standard Java application)? keyPair.getPublic().getEncoded() on Java would do the trick with PKCS#8 encoding, but as far as I know getEncoded() is not available on the Java Card platform.
","You can implement this function like this:
Card side:

1 KeyPair.getPublicKey() --> publicKey;
2 publicKey.getW() --> W;
3 Send W to outside;

Standard java application side:

1 get W data bytes;
2 W data bytes --> ECPoint;
3 Build PublicKey with the ECPoint generated in step 2 use the class ECPublicKeySpec;
4 Use the public key in your application;  

","327","<java><encoding><javacard><ecdsa><pkcs#8>","2","4","2","2016-01-08 15:58:25","30367105","0","2","288456","","2016-01-08 15:58:25","2015-05-20 17:41:20",""
"50685865","In C# How to verify JWT using ECDSA public key which was signed with ECDSA private key","I want to verify jwt which was signed through ECDSA SHA256 algorithm. Dot net library I am using is System.IdentityModel.Tokens.Jwt .
I have access to public key. 
","If you have the access to the public key, one way of doing it is to utilise JwtSecurityTokenHandler class which is also used to generate the Jwt. It is under the same namespace (System.IdentityModel.Tokens).
Sample code: 
bool ValidateEcdsa384JwtToken(string tokenString, ECDsa pubKey) 
{
    try
    {
        var securityToken = new JwtSecurityToken(tokenString);
        var securityTokenHandler = new JwtSecurityTokenHandler();
        var validationParameters = new TokenValidationParameters() {
            ValidIssuer = securityToken.Issuer,
            ValidAudience = securityToken.Audiences.First(),
            IssuerSigningKey = new ECDsaSecurityKey(pubKey)
        };

        SecurityToken stoken;
        var claims = securityTokenHandler.ValidateToken(tokenString, validationParameters, out stoken);
        return true;
    }
    catch (System.Exception e)
    {
        return false;
    }
}

","326","<c#><validation><jwt><ecdsa>","1","1","1","2018-08-17 01:14:07","","2","","","","","2018-06-04 17:30:30",""
"51932108","Failing to verify ECDSA signature","I have a signature:

3044022014d647cd08f1ea5b31d1e6539b6cbceb9182f6e7b2e29fb969354ef7e3434923022028bb4eda36af410149baa936322e7c0e46cc5540a3aa89c811bc3c360028bfd301

a hash

f27c6c3aa42563c958292922be1e53fe107f4db0dfadba11122f0b12bf77f3ab

and a pubkey

04b0bd634234abbb1ba1e986e884185c61cf43e001f9137f23c2c409273eb16e6537a576782eba668a7ef8bd3b3cfb1edb7117ab65129b8a2e681f3c1e0908ef7b

Below is my Go code to verify the signature but it fails! I have information that the three pieces should validate OK and some other person has verified them in other ways. So I want to kown what mistake in this Go code make me get the false result.
if you want more information，this link is about how i build my signature and how someone say he success verify in other ways. I feel helpless now:
https://bitcointalk.org/index.php?topic=4879014.msg43992837#msg43992837
package main

import (
    ""crypto/ecdsa""
    ""crypto/elliptic""
    ""encoding/hex""
    ""fmt""
    ""math/big""
)

func main() {
    pubkey, err := hex.DecodeString(""b0bd634234abbb1ba1e986e884185c61cf43e001f9137f23c2c409273eb16e6537a576782eba668a7ef8bd3b3cfb1edb7117ab65129b8a2e681f3c1e0908ef7b"")
    if err != nil {
        panic(err)
    }
    curve := elliptic.P256()
    // length
    keyLen := len(pubkey)

    x := big.Int{}
    y := big.Int{}
    x.SetBytes(pubkey[:(keyLen / 2)])
    y.SetBytes(pubkey[(keyLen / 2):])

    rawPubKey := ecdsa.PublicKey{curve, &x, &y}

    // hash
    hash, err := hex.DecodeString(""f27c6c3aa42563c958292922be1e53fe107f4db0dfadba11122f0b12bf77f3ab"")
    if err != nil {
        panic(err)
    }

    r := big.Int{}
    s := big.Int{}
    rr, err := hex.DecodeString(""14d647cd08f1ea5b31d1e6539b6cbceb9182f6e7b2e29fb969354ef7e3434923"")
    if err != nil {
        panic(err)
    }

    ss, err := hex.DecodeString(""28bb4eda36af410149baa936322e7c0e46cc5540a3aa89c811bc3c360028bfd3"")
    if err != nil {
        panic(err)
    }

    r.SetBytes(rr)
    s.SetBytes(ss)

    fmt.Printf(""%v\n"", ecdsa.Verify(&rawPubKey, hash[:], &r, &s))    
}

","You are trying to use the wrong curve. P-256, also known as secp256r1, is not the same as the curve used in Bitcoin, which is secp256k1. Your public key doesn’t correspond to a point on P-256 (you can check with curve.IsOnCurve(&x, &y)), but it is a point on secp256k1.
Golang doesn’t include support for the Bitcoin curve, so you will need to find a library that does ECDSA using it.
I can confirm that signature does verify that data for that key if you use the correct curve.
","325","<go><verify><ecdsa>","2","1","1","2019-01-28 12:47:08","","2","","7827687","","2019-01-28 12:47:08","2018-08-20 13:44:12",""
"49271512","PKCS#11 - creating ECDSA key","Consider i have sample sample ECDSA public key with the following parameters:
Point Value
03 42
00 04  C9 A3 63 92 24 9C 7C 3B
CD 6B 3D 89 F6 16 13 21  B9 AC 99 42 60 C7 4A E2
7D 4A 03 80 BE 80 47 C1  3D FA 08 70 F9 8F 9F 65
BB 81 A5 5B 7C 6B 21 ED  7F 18 82 D2 07 7A 89 5E
56 10 F6 EC AC 39 14 B5

and
secp256k1
30 81 A2 02 01 01 30 2C  06 07 2A 86 48 CE 3D 01
01 02 21 00 FF FF FF FF  FF FF FF FF FF FF FF FF
FF FF FF FF FF FF FF FF  FF FF FF FF FF FF FF FE
FF FF FC 2F 30 06 04 01  00 04 01 07 04 41 04 79
BE 66 7E F9 DC BB AC 55  A0 62 95 CE 87 0B 07 02
9B FC DB 2D CE 28 D9 59  F2 81 5B 16 F8 17 98 48
3A DA 77 26 A3 C4 65 5D  A4 FB FC 0E 11 08 A8 FD
17 B4 48 A6 85 54 19 9C  47 D0 8F FB 10 D4 B8 02
21 00 FF FF FF FF FF FF  FF FF FF FF FF FF FF FF
FF FE BA AE DC E6 AF 48  A0 3B BF D2 5E 8C D0 36
41 41 02 01 01 

These values are extracted directly private key with openssl and I belieive are ASN.1 encoded.
What values should I put in CKA_EC_POINT and CKA_EC_PARAMS when creating ECDSA public key on HSM? If I put these values directly to attribute is not working (I cannot f.e. validate signature).
","","322","<pkcs#11><ecdsa><hsm><softhsm>","2","","0","2018-03-14 07:02:11","","0","1","","","","2018-03-14 07:02:11",""
"49045873","C# - ecc-certificate requested with BouncyCastle seems to be invalid in .NET","As it turned out in the comments to this SO-question the source of the problem lies elsewhere so I decided to ask a new question.
I request a certificate from our PKI for a ecc keypair (curve is brainpoolP384r1).
This is done via registration authority that does the proof of possession. After that I attach the private key to the issued certificate using some of the code in this helpful questions/answers: generate-certificate-using-ecdsa-in-c-sharp and translating-elliptic-curve-parameters-bc-to-ms.
After that I store the certificate with the private key in the MY-Store. So far everything works and the certificate is shown as valid in the MMC console.
But if I look at it with certutil -user -store my it results in the following error (unfortunately it is in german but I will explain the errors below):
Seriennummer: 4cce6787580be9db
Aussteller: C=DE, O=TestIt, CN=ManagementCA
 Nicht vor: 01.03.2018 08:30
 Nicht nach: 29.02.2020 08:30
Antragsteller: CN=test@my.domain
Kein Stammzertifikat
Zertifikathash(sha1): 3cd94f55fa6d1c66eff9ed1cc45649006ac12616
  Schlüsselcontainer = {5C4E984A-D2DB-4BE5-BD82-7A6826C4A389}
  Eindeutiger Containername: 28083d7c2cef0143c31de128e470b486_6097f4ab-4eeb-4550-91e6-2c748bfb85d3
  Anbieter = Microsoft Software Key Storage Provider
Der private Schlüssel eignet sich nicht zum Nur-Text-Export.

Öffentlicher Schlüssel des Zertifikats:
Version: 3
Öffentlicher Schlüssel-Algorithmus:
    Algorithmus Objekt-ID: 1.2.840.10045.2.1 ECC
    Algorithmusparameter:
    0000  30 82 01 40 02 01 01 30  3c 06 07 2a 86 48 ce 3d
    0010  01 01 02 31 00 8c b9 1e  82 a3 38 6d 28 0f 5d 6f
    0020  7e 50 e6 41 df 15 2f 71  09 ed 54 56 b4 12 b1 da
    0030  19 7f b7 11 23 ac d3 a7  29 90 1d 1a 71 87 47 00
    0040  13 31 07 ec 53 30 64 04  30 7b c3 82 c6 3d 8c 15
    0050  0c 3c 72 08 0a ce 05 af  a0 c2 be a2 8e 4f b2 27
    0060  87 13 91 65 ef ba 91 f9  0f 8a a5 81 4a 50 3a d4
    0070  eb 04 a8 c7 dd 22 ce 28  26 04 30 04 a8 c7 dd 22
    0080  ce 28 26 8b 39 b5 54 16  f0 44 7c 2f b7 7d e1 07
    0090  dc d2 a6 2e 88 0e a5 3e  eb 62 d5 7c b4 39 02 95
    00a0  db c9 94 3a b7 86 96 fa  50 4c 11 04 61 04 1d 1c
    00b0  64 f0 68 cf 45 ff a2 a6  3a 81 b7 c1 3f 6b 88 47
    00c0  a3 e7 7e f1 4f e3 db 7f  ca fe 0c bd 10 e8 e8 26
    00d0  e0 34 36 d6 46 aa ef 87  b2 e2 47 d4 af 1e 8a be
    00e0  1d 75 20 f9 c2 a4 5c b1  eb 8e 95 cf d5 52 62 b7
    00f0  0b 29 fe ec 58 64 e1 9c  05 4f f9 91 29 28 0e 46
    0100  46 21 77 91 81 11 42 82  03 41 26 3c 53 15 02 31
    0110  00 8c b9 1e 82 a3 38 6d  28 0f 5d 6f 7e 50 e6 41
    0120  df 15 2f 71 09 ed 54 56  b3 1f 16 6e 6c ac 04 25
    0130  a7 cf 3a b6 af 6b 7f c3  10 3b 88 32 02 e9 04 65
    0140  65 02 01 01
Länge des öffentlichen Schlüssels: 384 Bits
Öffentlicher Schlüssel: Nicht verwendete Bits = 0
    0000  04 0e e2 21 a3 24 11 58  28 f9 12 fe 7a 2d 26 5f
    0010  ad 90 cc 79 1c b6 68 3a  b0 ff f2 df 68 17 84 cd
    0020  5f a7 9e 27 10 00 ea 6a  47 d2 74 9f c4 15 36 d1
    0030  98 5e 65 5b 2e 7e 61 d4  16 85 ed 3f 24 6b c1 2c
    0040  ef 48 b2 26 77 2b c3 61  05 44 e3 1c 2a 31 cb c1
    0050  f6 e1 cc a2 d6 3e d8 ac  36 8f ea e7 df 7d b0 9d
    0060  9d
Schlüssel-ID-Hash(rfc-sha1): e90f7f6c93e660db6742585d6dd5327f08e2469b
Schlüssel-ID-Hash(sha1): 1a0440ec89a6b951169c97d7d766c477c5a9128d
Schlüssel-ID-Hash(bcrypt-sha1): 66a3af2d30d59c36337fcf153693e6bc0111c14b
Schlüssel-ID-Hash(bcrypt-sha256): cfdf5d9b466f595f9c23dec4430a19b5134f41c882bea709ab120ed1c2496ce9

Container des öffentlichen Schlüssels:
Öffentlicher Schlüssel-Algorithmus:
    Algorithmus Objekt-ID: 1.2.840.10045.2.1 ECC
    Algorithmusparameter:
    06 09 2b 24 03 03 02 08  01 01 0b
        1.3.36.3.3.2.8.1.1.11 brainpoolP384r1
Länge des öffentlichen Schlüssels: 384 Bits
Öffentlicher Schlüssel: Nicht verwendete Bits = 0
    0000  04 0e e2 21 a3 24 11 58  28 f9 12 fe 7a 2d 26 5f
    0010  ad 90 cc 79 1c b6 68 3a  b0 ff f2 df 68 17 84 cd
    0020  5f a7 9e 27 10 00 ea 6a  47 d2 74 9f c4 15 36 d1
    0030  98 5e 65 5b 2e 7e 61 d4  16 85 ed 3f 24 6b c1 2c
    0040  ef 48 b2 26 77 2b c3 61  05 44 e3 1c 2a 31 cb c1
    0050  f6 e1 cc a2 d6 3e d8 ac  36 8f ea e7 df 7d b0 9d
    0060  9d
Schlüssel-ID-Hash(rfc-sha1): e90f7f6c93e660db6742585d6dd5327f08e2469b
Schlüssel-ID-Hash(sha1): 79d60ac0a75a30e1ba3f07ccc4dbace00610696c
Schlüssel-ID-Hash(bcrypt-sha1): 66a3af2d30d59c36337fcf153693e6bc0111c14b
Schlüssel-ID-Hash(bcrypt-sha256): cfdf5d9b466f595f9c23dec4430a19b5134f41c882bea709ab120ed1c2496ce9

FEHLER: Öffentlicher Schlüssel stimmt nicht mit gespeichertem Schlüsselsatz überein.
Das Testen der Signatur ist fehlgeschlagen.

The last part translates as:
ERROR: Certificate public key does NOT match stored keyset
Signature test FAILED 

You can see that the public key itself is identical, just the AlgorithmIdentifier is different. I do not know where the container public key comes from, the certification request matches the AlgorithmIdentifier from the certificate public key shown above.
If I try to create the csr with the AlgorithmIdentifier of the container public key shown above, I get an error in the PKI ""encoded key spec not recognized"".
All this leeds me to the conclusion that I am doing something wrong with the csr.
I will not post the whole code as it spawns mutliple classes just the part wher the SubjectPublicKeyInfo is constructed as this seems to be the part where things go wrong:
Code  that creates valid ASN1 but results in the error above (Signature test failed)
byte[] publicKey = ecPublicKeyParameters.Q.GetEncoded();
string base64PublicKey = Convert.ToBase64String(publicKey);
// This base64PublicKey is send to the server, that handles it with the code below:

var ecPars = TeleTrusTNamedCurves.GetByName(""brainpoolP384r1"");
ECDomainParameters ecDomPars = new ECDomainParameters(
    ecPars.Curve,
    ecPars.G,
    ecPars.N,
    ecPars.H,
    ecPars.GetSeed());
var curve = ecDomPars.Curve;
byte[] data = Convert.FromBase64String(base64PublicKey);
var ecPoint = curve.DecodePoint(data);
ECPublicKeyParameters publicKey = new ECPublicKeyParameters(ecPoint, ecDomPars);
SubjectPublicKeyInfo publicKeyInfo = SubjectPublicKeyInfoFactory.CreateSubjectPublicKeyInfo(ecPublicKeyParameters);

Code that creates valid ASN1 that makes the PKI complain:
// Using ECDsaCng directly in the hope that the certificate will be valid for windows:
 ECParameters ecParams = ecdsaPair.ExportParameters(false);
 ECPoint ecPoint = ecParams.Q;
 IEnumerable<byte> blobBytes = ecPoint.X.Concat(ecPoint.Y);
 byte[] eccblob = blobBytes.ToArray();
 // Sending this to the server where it will be used for SubjectPublicKeyInfo

AlgorithmIdentifier algorithmIdentifier = new AlgorithmIdentifier(new DerObjectIdentifier(""1.2.840.10045.2.1""), new DerObjectIdentifier(""1.3.36.3.3.2.8.1.1.11""));
SubjectPublicKeyInfo publicKeyInfo = new SubjectPublicKeyInfo(algorithmIdentifier, new DerBitString(eccblob));

How can I create a valid SubjectPublicKeyInfo that satisfies the PKI and the certutil validation?
","The problem with the cert-as-created seems to be that the certificate uses explicit curve domain parameters (which the RFCs frown on), and the private key did curve normalization to get back to a named curve, which you seem to have identified given the second approach.
In your ""more manual"" approach you didn't encode the public key correctly, you need a leading 04 to indicate that you're sending an uncompressed coordinate pair.  (04 [x coordinate] [y coordinate]).  The CA likely rejected your request because it didn't understand it.
04 0e e2 21 a3 24 11 58 28 f9 12 fe 7a 2d 26 5f
ad 90 cc 79 1c b6 68 3a b0 ff f2 df 68 17 84 cd
5f a7 9e 27 10 00 ea 6a 47 d2 74 9f c4 15 36 d1
98 5e 65 5b 2e 7e 61 d4 16 85 ed 3f 24 6b c1 2c
ef 48 b2 26 77 2b c3 61 05 44 e3 1c 2a 31 cb c1
f6 e1 cc a2 d6 3e d8 ac 36 8f ea e7 df 7d b0 9d
9d

Note the leading 04, and how it has odd length
FWIW: If you're on .NET Core 2.0 you can do this without BouncyCastle via System.Security.Cryptography.X509Certificates.CertificateRequest. That class is also available in the 4.7.2 early access release.
","316","<c#><certificate><bouncycastle><pki><ecdsa>","0","1","1","2018-03-01 14:33:04","49051933","0","","","","","2018-03-01 08:51:07",""
"40735653","Create PKCS 10 with Eliptic Curve in iOS","I'm on R&D to create PKCS 10 CSR, I googled and found very good help on github of this man done, I've done with RSA kSecAttrKeyTypeRSA, Now I want to done same with Eliptic Curve kSecAttrKeyTypeEC but I'm not able to find that need help on this.
EDITED:
I tried to convert SCCR.mfrom RSA to ECDSAwithSHA256

I get OID of ECDSAWithSHA256 and convert into hex.
Change SHA1 with 256 in whole class like CC_SHA256_CTX.
Created keypair with kSecAttrKeyTypeEC instead of kSecAttrKeyTypeRSA.

After all this i am getting PEM file in which signature isn't valid. 
Here below is my whole class.
SCCR.m
/*
This file is part of ios-csr.
Copyright (C) 2013-14 Ales Teska

ios-csr is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

ios-csr is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with ios-csr.  If not, see <http://www.gnu.org/licenses/>.
*/

#import ""SCCSR.h""
#include <CommonCrypto/CommonDigest.h>

/*

Certification Request Syntax Specification: http://www.ietf.org/rfc/rfc2986.txt

*/




static uint8_t OBJECT_commonName[5] = {0x06, 0x03, 0x55, 0x04, 0x03};
static uint8_t OBJECT_countryName[5] = {0x06, 0x03, 0x55, 0x04, 0x06};
static uint8_t OBJECT_organizationName[5] = {0x06, 0x03, 0x55, 0x04, 0x0A};
static uint8_t OBJECT_organizationalUnitName[5] = {0x06, 0x03, 0x55, 0x04, 0x0B};

//1.2.840.10045.4.3.2
//\x06\x08\x2A\x86\x48\xCE\x3D\x04\x03\x02
//http://www.oid-info.com/get/1.2.840.10045.4.3.2


static uint8_t OBJECT_ECEncryptionNULL[11] = {0x06, 0x08, 0x2A, 0x86, 0x48, 0xCE, 0x3D, 0x04, 0x03, 0x02, 0x00};

static uint8_t SEQUENCE_OBJECT_sha256WithECEncryption[] = {0x06, 0x08, 0x2A, 0x86, 0x48, 0xCE, 0x3D, 0x04, 0x03, 0x02, 0x00};

//static uint8_t OBJECT_rsaEncryptionNULL[13] = {0x06, 0x09, 0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01, 0x01, 0x01, 0x05, 0x00};

// See: http://oid-info.com/get/1.2.840.113549.1.1.5
//static uint8_t SEQUENCE_OBJECT_SHA256WithRSAEncryption[] = {0x30, 0x0D, 0x06, 0x09, 0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 1, 1, 5, 0x05, 0x00};

static uint8_t SEQUENCE_tag = 0x30;
static uint8_t SET_tag = 0x31;

///

@implementation SCCSR

@synthesize countryName;
@synthesize organizationName;
@synthesize organizationalUnitName;
@synthesize commonName;
@synthesize subjectDER;

-(SCCSR *)init
{
    self = [super init];
    if (!self) return self;

    countryName = nil;
    organizationName = nil;
    organizationalUnitName = nil;
    commonName = nil;

    subjectDER = nil;

    return self;
}

-(NSData *) build:(NSData *)publicKeyBits privateKey:(SecKeyRef)privateKey
{
    NSMutableData * CertificationRequestInfo = [self buildCertificationRequestInfo:publicKeyBits];

    // Build signature - step 1: SHA256 hash
    CC_SHA256_CTX SHA256;
    CC_SHA256_Init(&SHA256);
    CC_SHA256_Update(&SHA256, [CertificationRequestInfo mutableBytes], (unsigned int)[CertificationRequestInfo length]);
    unsigned char digest[CC_SHA256_DIGEST_LENGTH];
    CC_SHA256_Final(digest, &SHA256);

    // Build signature - step 2: Sign hash
    uint8_t signature[256];
    size_t signature_len = sizeof(signature);
    OSStatus osrc = SecKeyRawSign(
        privateKey,
        kSecPaddingPKCS1SHA256,
        digest, sizeof(digest),
        signature, &signature_len
    );
    assert(osrc == noErr);

    NSMutableData * CertificationRequest = [[NSMutableData alloc] initWithCapacity:1024];
    [CertificationRequest appendData:CertificationRequestInfo];
    [CertificationRequest appendBytes:SEQUENCE_OBJECT_sha256WithECEncryption length:sizeof(SEQUENCE_OBJECT_sha256WithECEncryption)];

    NSMutableData * signdata = [NSMutableData dataWithCapacity:257];
    uint8_t zero = 0;
    [signdata appendBytes:&zero length:1]; // Prepend zero
    [signdata appendBytes:signature length:signature_len];
    [SCCSR appendBITSTRING:signdata into:CertificationRequest];

    [SCCSR enclose:CertificationRequest by:SEQUENCE_tag]; // Enclose into SEQUENCE

    return CertificationRequest;
}


-(NSMutableData *)buildCertificationRequestInfo:(NSData *)publicKeyBits
{
    NSMutableData * CertificationRequestInfo = [[NSMutableData alloc] initWithCapacity:512];

    // Add version
    uint8_t version[3] = {0x02, 0x01, 0x00}; // ASN.1 Representation of integer with value 1
    [CertificationRequestInfo appendBytes:version length:sizeof(version)];


    // Add subject
    NSMutableData * Subject = [[NSMutableData alloc] initWithCapacity:256];
    if (countryName != nil) [SCCSR appendSubjectItem:OBJECT_countryName value:countryName into:Subject];
    if (organizationName != nil) [SCCSR appendSubjectItem:OBJECT_organizationName value:organizationName into:Subject];
    if (organizationalUnitName != nil) [SCCSR appendSubjectItem:OBJECT_organizationalUnitName value:organizationalUnitName into:Subject];
    if (commonName != nil) [SCCSR appendSubjectItem:OBJECT_commonName value:commonName into:Subject];
    [SCCSR enclose:Subject by:SEQUENCE_tag]; // Enclose into SEQUENCE

    subjectDER = [NSData dataWithData:Subject];

    [CertificationRequestInfo appendData:Subject];


    //Add public key info
    NSData * publicKeyInfo = [SCCSR buildPublicKeyInfo:publicKeyBits];
    [CertificationRequestInfo appendData:publicKeyInfo];

    // Add attributes
    uint8_t attributes[2] = {0xA0, 0x00};
    [CertificationRequestInfo appendBytes:attributes length:sizeof(attributes)];


    [SCCSR enclose:CertificationRequestInfo by:SEQUENCE_tag]; // Enclose into SEQUENCE

    return CertificationRequestInfo;
}

/// Utility class methods ...
+(NSData *)buildPublicKeyInfo:(NSData *)publicKeyBits
{
    NSMutableData * publicKeyInfo = [[NSMutableData alloc] initWithCapacity:390];

    [publicKeyInfo appendBytes:OBJECT_ECEncryptionNULL length:sizeof(OBJECT_ECEncryptionNULL)];
    [SCCSR enclose:publicKeyInfo by:SEQUENCE_tag]; // Enclose into SEQUENCE

    NSMutableData * publicKeyASN = [[NSMutableData alloc] initWithCapacity:260];

    NSData * mod = [SCCSR getPublicKeyMod:publicKeyBits];
    char Integer = 0x02; // Integer
    [publicKeyASN appendBytes:&Integer length:1];
    [SCCSR appendDERLength:[mod length] into:publicKeyASN];
    [publicKeyASN appendData:mod];

    NSData * exp = [SCCSR getPublicKeyExp:publicKeyBits];
    [publicKeyASN appendBytes:&Integer length:1];
    [SCCSR appendDERLength:[exp length] into:publicKeyASN];
    [publicKeyASN appendData:exp];

    [SCCSR enclose:publicKeyASN by:SEQUENCE_tag]; // Enclose into ??
    [SCCSR prependByte:0x00 into:publicKeyASN]; // Prepend 0 (?)

    [SCCSR appendBITSTRING:publicKeyASN into:publicKeyInfo];

    [SCCSR enclose:publicKeyInfo by:SEQUENCE_tag]; // Enclose into SEQUENCE

    return publicKeyInfo;
}

+(void)appendSubjectItem:(const uint8_t[5])what value:(NSString *)value into:(NSMutableData *)into
{
    NSMutableData * SubjectItem = [[NSMutableData alloc] initWithCapacity:128];
    [SubjectItem appendBytes:what length:5];
    [SCCSR appendUTF8String:value into:SubjectItem];
    [SCCSR enclose:SubjectItem by:SEQUENCE_tag]; // Enclose into SEQUENCE
    [SCCSR enclose:SubjectItem by:SET_tag]; // Enclose into SET

    [into appendData:SubjectItem];
}

+(void)appendUTF8String:(NSString *)string into:(NSMutableData *)into
{
    char strtype = 0x0C; //UTF8STRING
    [into appendBytes:&strtype length:1];
    [SCCSR appendDERLength:[string lengthOfBytesUsingEncoding:NSUTF8StringEncoding] into:into];
    [into appendData:[string dataUsingEncoding:NSUTF8StringEncoding]];
}

+(void)appendDERLength:(size_t)length into:(NSMutableData *)into
{
    assert(length < 0x8000);

    if (length < 128)
    {
        uint8_t d = length;
        [into appendBytes:&d length:1];
    }
    else if (length < 0x100)
    {
        uint8_t d[2] = {0x81, length & 0xFF};
        [into appendBytes:&d length:2];
    }
    else if (length < 0x8000)
    {
        uint8_t d[3] = {0x82, (length & 0xFF00) >> 8, length & 0xFF};
        [into appendBytes:&d length:3];
    }
}

+(void)appendBITSTRING:(NSData *)data into:(NSMutableData *)into
{
    char strtype = 0x03; //BIT STRING
    [into appendBytes:&strtype length:1];
    [SCCSR appendDERLength:[data length] into:into];
    [into appendData:data];
}


+(void)enclose:(NSMutableData *)data by:(uint8_t)by
{
    NSMutableData* newdata = [[NSMutableData alloc]initWithCapacity:[data length]+4];

    [newdata appendBytes:&by length:1];
    [SCCSR appendDERLength:[data length] into:newdata];
    [newdata appendData:data];

    [data setData:newdata];
}

+(void)prependByte:(uint8_t)byte into:(NSMutableData *)into
{
    NSMutableData* newdata = [[NSMutableData alloc]initWithCapacity:[into length]+1];

    [newdata appendBytes:&byte length:1];
    [newdata appendData:into];

    [into setData:newdata];
}

///

// From http://stackoverflow.com/questions/3840005/how-to-find-out-the-modulus-and-exponent-of-rsa-public-key-on-iphone-objective-c

+ (NSData *)getPublicKeyExp:(NSData *)publicKeyBits
{
    int iterator = 0;

    iterator++; // TYPE - bit stream - mod + exp
    [SCCSR derEncodingGetSizeFrom:publicKeyBits at:&iterator]; // Total size

    iterator++; // TYPE - bit stream mod
    int mod_size = [SCCSR derEncodingGetSizeFrom:publicKeyBits at:&iterator];
    iterator += mod_size;

    iterator++; // TYPE - bit stream exp
    int exp_size = [SCCSR derEncodingGetSizeFrom:publicKeyBits at:&iterator];
//  return publicKeyBits;
    return [publicKeyBits subdataWithRange:NSMakeRange(iterator, exp_size)];
}

+(NSData *)getPublicKeyMod:(NSData *)publicKeyBits
{
    int iterator = 0;

    iterator++; // TYPE - bit stream - mod + exp
    [SCCSR derEncodingGetSizeFrom:publicKeyBits at:&iterator]; // Total size

    iterator++; // TYPE - bit stream mod
    int mod_size = [SCCSR derEncodingGetSizeFrom:publicKeyBits at:&iterator];
//    return publicKeyBits;
    //TODO: Changed in Code
    return [publicKeyBits subdataWithRange:NSMakeRange(iterator, mod_size)];
}

+(int)derEncodingGetSizeFrom:(NSData*)buf at:(int*)iterator
{
    const uint8_t* data = [buf bytes];
    int itr = *iterator;
    int num_bytes = 1;
    int ret = 0;

    if (data[itr] > 0x80) {
        num_bytes = data[itr] - 0x80;
        itr++;
    }

    for (int i = 0 ; i < num_bytes; i++) ret = (ret * 0x100) + data[itr + i];

    *iterator = itr + num_bytes;
    return ret;
}

@end

Questions

When this OID 1.2.840.113549.1.1.5 convert into hex this become {0x06, 0x09, 0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01, 0x01, 0x01, 0x05, 0x00} which is defined in as static uint8_t OBJECT_rsaEncryptionNULL[13] = {0x06, 0x09, 0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01, 0x01, 0x01, 0x05, 0x00}; then what is SEQUENCE_OBJECT_RSAEncryption which is defined static uint8_t SEQUENCE_OBJECT_RSAEncryption[] = {0x30, 0x0D, 0x06, 0x09, 0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 1, 1, 5, 0x05, 0x00}; ?
What will be SEQUENCE_OBJECT_sha256WithECEncryption if it is SHA256withEC

CSR generated from OPENSSL
-----BEGIN CERTIFICATE REQUEST-----
MIIC8jCCAdoCAQAwfDELMAkGA1UEBhMCYXMxCzAJBgNVBAgTAnB1MQwwCgYDVQQH
EwNsaHIxDDAKBgNVBAoTA3BhazERMA8GA1UECxMIYXNjZXJ0aWExDjAMBgNVBAMT
BWFsZWVtMSEwHwYJKoZIhvcNAQkBFhJhbGVlbS5yekBnbWFpbC5jb20wggEiMA0G
CSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCzvlvXGw4/YPYbiiCQE2pmqu0x9Ib3
nHk3yMy8ewJIXWOuewVmB7ISBoiAaJ01ON9H/szYUvCGoU5fzz7UFgxCI7biypuy
ixo74w7Bd2jRMsH7baZ2W0bhvGoBxN1IMJZHI53J2KF9P5tayLz7OyGQ4Qz8p63A
A6Ag3rblIDEBiDr6Xkyxd2atUf4EwB4JcrsLx66RyGDWadXcyO8P39Jg6bgauBMh
OW2tq3Y7WsnOnYrYj4m1r9Z1ZFZEIHtHJX9u0qtuHH8yZD/saP5RkUcjIZPHU6Yh
gNByRAXCl5YAMTV9yah/AGq6SMwvSRbhX6zgCpI0/eIhvyuzFW/poRlvAgMBAAGg
MTAWBgkqhkiG9w0BCQIxCRMHYXNjdGVzdDAXBgkqhkiG9w0BCQcxChMIODc2NTQz
MjEwDQYJKoZIhvcNAQELBQADggEBADdv9TOQAV7hEtFsviyp9G08BJgSDBjdP63I
Efplt2B1POGvdOKvR1OI5r/qgZZ8E7BTBaFyArUT4+sEdybpmXV9PdO8R7zawD/j
7vmKShYThlPxi/UDrZT8kAwrnBAKgChJ/KMSB6LGdM2wvZKvoN14LFj/KUHtTI97
LYRfhIKFk28yyeSQxK8a3zkPawiTWBYYay9GU13NiKXedps00eV14S7/jAzhL/bk
e94LfFybyDcOa2zDWKZOwOGAEStCq4O+7A+t8wrA=
-----END CERTIFICATE REQUEST-----
","","310","<ios><csr><ecdsa><key-pair>","0","","0","2017-10-20 12:27:04","","8","","671060","","2016-11-28 18:58:41","2016-11-22 07:03:12",""
"54548803","Retrieve ECDSA public key from only x-compressed coordinate using Crypto++ library","I'm implementing a security daemon on the vehicular communication scope.
I could receive a message with a signature and the compressed X coordinate of a point to verify that signature. The elliptic curve can be either the secp256 or the brainpoolp256r1 and the algorithm is ECDSA.
My question is: how can I recover the ECC Point (and so the public key) given only the compressed X coordinate with the Crypto++ library?
I followed some links which explain it (and many others) https://www.cryptopp.com/wiki/Point_Compression Crypto++ and Compressed EC keys but they don't fit my problem.
I tried to produce code to resolve the problem, but it won't work:
#include <string>
#include <iostream>
#include <cryptopp/cryptlib.h>
#include <cryptopp/ecp.h>
#include <cryptopp/eccrypto.h>
#include <cryptopp/hex.h>
#include <cryptopp/oids.h>
#include <cryptopp/osrng.h>

using namespace CryptoPP;
using std::cout;
using std::endl;
using std::string;

int main() 
{
    string compactPoint = ""937120662418500f3ad7c892b1db7e7c2d85ec48c74e99d64dcb7083082bb4f3"";

    AutoSeededRandomPool generator;
    ECDSA<ECP, SHA256>::PublicKey pubKey;
    OID curve       = ASN1::secp256r1();


    StringSource ss (compactPoint, true, new CryptoPP::HexDecoder);
    ECP::Point point;

    pubKey.GetGroupParameters().GetCurve().DecodePoint (point, ss, ss.MaxRetrievable());

    std::cout << ""Result after decompression X: "" << std::hex << point.x << std::endl;
    std::cout << ""Result after decompression Y: "" << std::hex << point.y << std::endl;

    return 0;
}

Can you help me please?
","The easiest solution is probably to prepend ""02"" oe ""03"" to the compact representation. Crypto++ will then decode it as a compressed public key.
$ cat test.cxx

#include ""cryptlib.h""
#include ""eccrypto.h""
#include ""ecp.h""
#include ""hex.h""
#include ""oids.h""

#include <string>
#include <iostream>
#include <iomanip>

int main(int argc, char* argv[])
{
    using namespace CryptoPP;

    ECDSA<ECP, SHA256>::PublicKey pubKey;
    pubKey.AccessGroupParameters().Initialize(ASN1::secp256r1());

    std::string compactPoint = ""02"" /* compressed */
        ""937120662418500f3ad7c892b1db7e7c""
        ""2d85ec48c74e99d64dcb7083082bb4f3"";

    StringSource ss (compactPoint, true, new HexDecoder);
    ECP::Point point;

    pubKey.GetGroupParameters().GetCurve().DecodePoint (point, ss, ss.MaxRetrievable());

    std::cout << ""Result after decompression X: "" << std::hex << point.x << std::endl;
    std::cout << ""Result after decompression Y: "" << std::hex << point.y << std::endl;

    return 0;
}

And then building and running the program. Notice the library solves for the y portion of the coordinate.
cryptopp$ g++ test.cxx ./libcryptopp.a -o test.exe
cryptopp$ ./test.exe
Result after decompression X: 937120662418500f3ad7c892b1db7e7c2d85ec48c74e99d64dcb7083082bb4f3h
Result after decompression Y: cfcaf74eae3ceec5993928f04970cfef343b9a6b22727fa81926bd21f256ec56h


And to save you the trouble of looking it up, you can set the public element for publicKey using:
pubKey.SetPublicElement(point);

std::cout << ""X: "" << std::hex << pubKey.GetPublicElement().x << std::endl;
std::cout << ""Y: "" << std::hex << pubKey.GetPublicElement().y << std::endl;

Running with the additional code produces the expected result:
$ ./test.exe
Result after decompression X: 937120662418500f3ad7c892b1db7e7c2d85ec48c74e99d64dcb7083082bb4f3h
Result after decompression Y: cfcaf74eae3ceec5993928f04970cfef343b9a6b22727fa81926bd21f256ec56h
X: 937120662418500f3ad7c892b1db7e7c2d85ec48c74e99d64dcb7083082bb4f3h
Y: cfcaf74eae3ceec5993928f04970cfef343b9a6b22727fa81926bd21f256ec56h


If interested, here is the code you are using to decode the point from ecp.cpp:
bool ECP::DecodePoint(ECP::Point &P, BufferedTransformation &bt, size_t encodedPointLen) const
{
    byte type;
    if (encodedPointLen < 1 || !bt.Get(type))
        return false;

    switch (type)
    {
    case 0:
        P.identity = true;
        return true;
    case 2:
    case 3:
    {
        if (encodedPointLen != EncodedPointSize(true))
            return false;

        Integer p = FieldSize();

        P.identity = false;
        P.x.Decode(bt, GetField().MaxElementByteLength());
        P.y = ((P.x*P.x+m_a)*P.x+m_b) % p;

        if (Jacobi(P.y, p) !=1)
            return false;

        P.y = ModularSquareRoot(P.y, p);

        if ((type & 1) != P.y.GetBit(0))
            P.y = p-P.y;

        return true;
    }
    case 4:
    {
        if (encodedPointLen != EncodedPointSize(false))
            return false;

        unsigned int len = GetField().MaxElementByteLength();
        P.identity = false;
        P.x.Decode(bt, len);
        P.y.Decode(bt, len);
        return true;
    }
    default:
        return false;
    }
}

I mention it in case you want to solve for the y coordinate yourself, populate the point, and then call SetPublicElement directly.

You can also prepend 03 instead of 02. The difference is, the decoding returns either y or p-y. The variability is introduced due to the modular square root shown above. We need to see the generation algorithm to determine what the value should be.
Here is the difference when using 03 instead of 02:
$ ./test.exe
X: 937120662418500f3ad7c892b1db7e7c2d85ec48c74e99d64dcb7083082bb4f3h
Y: 303508b051c3113b66c6d70fb68f3010cbc46595dd8d8057e6d942de0da913a9h

Notice 03 produces the y coordinate 303508b051c3113b66c6d70fb68f3010cbc46595dd8d8057e6d942de0da913a9h instead of 02 and cfcaf74eae3ceec5993928f04970cfef343b9a6b22727fa81926bd21f256ec56h.
","310","<c++><compression><public-key><crypto++><ecdsa>","1","0","1","2019-02-07 17:44:58","54550787","2","1","4359602","","2019-02-06 08:59:53","2019-02-06 07:47:47",""
"50410102","Implemented Finger Print Authentication in Application with signature","I am getting the issue when running the application below android 6.0
if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
    KeyguardManager keyguardManager = (KeyguardManager) getSystemService(KEYGUARD_SERVICE);
    FingerprintManager fingerprintManager = (FingerprintManager) getSystemService(FINGERPRINT_SERVICE);


    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
        if (!fingerprintManager.isHardwareDetected()) {
            /**
             * An error message will be displayed if the device does not contain the fin.gerprint hardware.
             * However if you plan to implement a default authentication method,
             * you can redirect the user to a default authentication ctivity from here.
             * Example:
             * 
             */

        } else {


            // Checks whether fingerprint permission is set on manifest
            if (ActivityCompat.checkSelfPermission(this, Manifest.permission.USE_FINGERPRINT) != PackageManager.PERMISSION_GRANTED) {

               // permission not granted
            } else {

                // Check whether at least one fingerprint is registered
                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {

                    // Checks whether lock screen security is enabled or not
                    if (!keyguardManager.isKeyguardSecure()) {
                        // finger print not support

                    } else {

                        if (!fingerprintManager.hasEnrolledFingerprints()) {
                        // finger print not enrolled

                        } else {

                            /*Amit Verma  EC signature*/
                            createKeyPair();
                            if (initSignature()) {
                                ConstantDeclaration.mCryptoObject = new FingerprintManager.CryptoObject(mSignature);
                            }
                        }
                    }
                }
            }
        }
    }
}

Here is code for key-pair Generation
@TargetApi(Build.VERSION_CODES.M)
    private void createKeyPair() {
        // The enrolling flow for fingerprint. This is where you ask the user to set up fingerprint
        // for your flow. Use of keys is necessary if you need to know if the set of
        // enrolled fingerprints has changed.

        try {
            // Set the alias of the entry in Android KeyStore where the key will appear
            // and the constrains (purposes) in the constructor of the Builder

            KeyPairGenerator mKeyPairGenerator = KeyPairGenerator.getInstance(KeyProperties.KEY_ALGORITHM_EC, ""AndroidKeyStore"");
            mKeyPairGenerator.initialize(
                    new KeyGenParameterSpec.Builder(KEY_NAME,
                            KeyProperties.PURPOSE_SIGN)
                            .setDigests(KeyProperties.DIGEST_SHA1)
                            .setAlgorithmParameterSpec(new ECGenParameterSpec(""secp256r1""))
                            // Require the user to authenticate with a fingerprint to authorize
                            // every use of the private key
//                            .setUserAuthenticationRequired(true)
                            .setUserAuthenticationRequired(false)
                            .build());
            mKeyPairGenerator.generateKeyPair();
        } catch (InvalidAlgorithmParameterException e) {
            throw new RuntimeException(e);
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        } catch (NoSuchProviderException e) {
            e.printStackTrace();
        }

    }

here is the code for signature initiate. 
 @TargetApi(Build.VERSION_CODES.M)
    private boolean initSignature() {
        try {
            mKeyStore = KeyStore.getInstance(""AndroidKeyStore"");
            mKeyStore.load(null);
            PrivateKey key = (PrivateKey) mKeyStore.getKey(KEY_NAME, null);
//            String strKey = Base64.encodeToString(key.getEncoded(),Base64.DEFAULT);

//            System.out.println(""PrivateKey::""+strKey);
            mSignature = Signature.getInstance(""SHA1withECDSA"");
            mSignature.initSign(key);

            PublicKey publicKey = mKeyStore.getCertificate(KEY_NAME).getPublicKey();
            String strPublicKey = Base64.encodeToString(publicKey.getEncoded(), Base64.DEFAULT);
            Singleton.getInstance().public_key_fp = strPublicKey;

            return true;
        } catch (KeyPermanentlyInvalidatedException e) {
            return false;
        } catch (Exception e) {
            throw new RuntimeException(""Failed to init Cipher"", e);
        }/*catch (KeyStoreException | CertificateException | UnrecoverableKeyException | IOException
                | NoSuchAlgorithmException | InvalidKeyException e) {
            throw new RuntimeException(""Failed to init Cipher"", e);
        }*/
    }

This code is working fine but when I am running my application in below Android 6.0  getting the exception on the launching the app.
Android version: 19
Device: samsung SM-J100ML
App version: 7
Line Number1: java.lang.Class.newInstanceImpl(Native Method)
Description : java.lang.VerifyError: launcherActivity
    at java.lang.Class.newInstanceImpl(Native Method)
    at java.lang.Class.newInstance(Class.java:1208)
    at android.app.Instrumentation.newActivity(Instrumentation.java:1068)
    at android.app.ActivityThread.performLaunchActivity(ActivityThread.java:2288)
    at android.app.ActivityThread.handleLaunchActivity(ActivityThread.java:2493)
    at android.app.ActivityThread.access$800(ActivityThread.java:166)
    at android.app.ActivityThread$H.handleMessage(ActivityThread.java:1283)
    at android.os.Handler.dispatchMessage(Handler.java:102)
    at android.os.Looper.loop(Looper.java:136)
    at android.app.ActivityThread.main(ActivityThread.java:5584)
    at java.lang.reflect.Method.invokeNative(Native Method)
    at java.lang.reflect.Method.invoke(Method.java:515)
    at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:1268)
    at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:1084)
    at dalvik.system.NativeStart.main(Native Method)

I think the problem with Signature import is import java.security.Signature;
","I figured out the problem by reading logcat as said above in comment,
Could not find class 'android.security.keystore.KeyGenParameterSpec$Builder'

and 
Could not find class 'android.hardware.fingerprint.FingerprintManager'

I googled above classes and found this link here
So I removed catch block InvalidAlgorithmParameterException ,**KeyPermanentlyInvalidatedException** and replaced with parent class ""Exception"" only.
","304","<android><ecdsa><android-fingerprint-api>","1","2","1","2018-05-19 15:25:29","50412776","11","","6296561","","2018-05-19 15:25:29","2018-05-18 11:15:18",""
"29987302","Creating a private/public key with 64 characters that are already known using bitcoinjs","So I'm trying to create a private/public key from 64 characters that I already know using bitcoinjs with the code below:
key = Bitcoin.ECKey.makeRandom();

// Print your private key (in WIF format)
document.write(key.toWIF());
// => Kxr9tQED9H44gCmp6HAdmemAzU3n84H3dGkuWTKvE23JgHMW8gct

// Print your public key (toString defaults to a Bitcoin address)
document.write(key.pub.getAddress().toString());
// => 14bZ7YWde4KdRb5YN7GYkToz3EHVCvRxkF

If I try to set ""key"" to my 64 characters instead of ""Bitcoin.ECKey.makeRandom();"" it fails. Is there a method or library that I overlooked that would allow me to use the known 64 characters in order to generate the private key in wif format and the public address?
Thanks in advance to anyone that may be able to offer some help.
","You should use fromWIF method to pass your own data.
from source code of eckey.js
// Static constructors
ECKey.fromWIF = function(string) {
  var payload = base58check.decode(string)
  var compressed = false

  // Ignore the version byte
  payload = payload.slice(1)

  if (payload.length === 33) {
    assert.strictEqual(payload[32], 0x01, 'Invalid compression flag')

    // Truncate the compression flag
    payload = payload.slice(0, -1)
    compressed = true
  }

To create WIF from your key please follow https://en.bitcoin.it/wiki/Wallet_import_format
Here is interactive tool http://gobittest.appspot.com/PrivateKey
","301","<bitcoin><ecdsa>","0","0","2","2015-05-15 22:06:22","","0","","","","","2015-05-01 13:00:25",""
"29987302","Creating a private/public key with 64 characters that are already known using bitcoinjs","So I'm trying to create a private/public key from 64 characters that I already know using bitcoinjs with the code below:
key = Bitcoin.ECKey.makeRandom();

// Print your private key (in WIF format)
document.write(key.toWIF());
// => Kxr9tQED9H44gCmp6HAdmemAzU3n84H3dGkuWTKvE23JgHMW8gct

// Print your public key (toString defaults to a Bitcoin address)
document.write(key.pub.getAddress().toString());
// => 14bZ7YWde4KdRb5YN7GYkToz3EHVCvRxkF

If I try to set ""key"" to my 64 characters instead of ""Bitcoin.ECKey.makeRandom();"" it fails. Is there a method or library that I overlooked that would allow me to use the known 64 characters in order to generate the private key in wif format and the public address?
Thanks in advance to anyone that may be able to offer some help.
","The solution to generate private and public key:
//public-key
var address = eckey.getBitcoinAddress().toString();

var privateKeyBytesCompressed = privateKeyBytes.slice(0); 
privateKeyBytesCompressed.push(0x01);
var privateKeyWIFCompressed = new Bitcoin.Address(privateKeyBytesCompressed);
privateKeyWIFCompressed.version = 0x80;


//private-key
privateKeyWIFCompressed = privateKeyWIFCompressed.toString();

Take a look at moneyart.info for beautifully designed paperwallets.
","301","<bitcoin><ecdsa>","0","0","2","2015-05-15 22:06:22","","0","","","","","2015-05-01 13:00:25",""
"47138729","openSSL: Import ECDSA signature from raw data with compressed CurvePoint R instead of r","I want to verify some data packets which contain an ECDSA signature that is not ASN.1 DER encoded.
I am trying to perform the task with openSSL (version 1.1.0) as it seems to bring all the required functionality.
Currently I am stuck with importing the signature from the data packet.
The signature looks like this:

(The last 4 bytes should not be marked as part of the signature)
TShark shows the relevant part like this:

    ""gn.sh.sig"": {
      ""gn.st.pka"": ""0"",
      ""gn.st.eccpointtype"": ""3"",
      ""gn.st.opaque"": ""1f:f8:ad:a7:fd:99:b2:a8:a2:69:d4:d6:67:e5:ee:5b:3f:8b:e8:7f:49:fc:b4:79:95:98:15:0d:cb:bd:06:3c"",
      ""gn.st.opaque"": ""61:a4:6a:c9:a7:dd:bd:0d:9c:0a:0e:73:db:52:06:bb:79:53:99:51:16:45:45:81:4e:df:94:5c:58:59:40:14""
    }


The encoding is according ETSI TS 103 097 v1.2.1
The first entry opaque together with the ECC Point type form an EccPoint named R while the second field opaque is named s.
My first step is to create a signature in openSSL and import the data into it. 
My code (error handling removed to reduce size) looks like this:
#include <openssl/conf.h>
#include <openssl/evp.h>
#include <openssl/err.h>
#include <openssl/ec.h>
#include <openssl/ecdsa.h>
#include <openssl/bn.h>

#include <stdlib.h>
#include <stdio.h>
#include <stdint.h>
#include <string.h>

void verify_signature(void)
{
  int res;

  // Which value is correct for r-part?
  static const char sig_r_hex[] = ""1ff8ada7fd99b2a8a269d4d667e5ee5b3f8be87f49fcb4799598150dcbbd063c"";
  static const char sig_s_hex[] = ""61a46ac9a7ddbd0d9c0a0e73db5206bb79539951164545814edf945c58594014"";

  BN_CTX *bn_ctx = BN_CTX_new();
  BN_CTX_start(bn_ctx);

  // Create signature and import from packet.
  BIGNUM *bn_r = BN_CTX_get(bn_ctx);
  BIGNUM *bn_s = BN_CTX_get(bn_ctx);

  res = BN_hex2bn(&bn_r, sig_r_hex);
  res = BN_hex2bn(&bn_s, sig_s_hex);

  ECDSA_SIG *signature = ECDSA_SIG_new();
  res = ECDSA_SIG_set0(signature, bn_r, bn_s);
  printf(""ECDSA_SIG_set0(): %d\n"", res);

  // ...
  // Create hash of message and verify signature with public key
  //...
}

int main(int arc, char *argv[])
{ 
  ERR_load_crypto_strings();
  OpenSSL_add_all_algorithms();
  OPENSSL_config(NULL);

  verify_signature();

  EVP_cleanup();
  CRYPTO_cleanup_all_ex_data();
  ERR_free_strings();
  return 0;
}

What I am currently missing is how I should handle the value R properly. 
Which parts of the compressed CurvePoint should be used as r to initialize the signature?
Do I need to uncompress y part?
Do I have to add some indication for the compressed y value?
Any hints are welcome.
Edit:
From what I read in IEEE1609.2 and SEC-1 it is possible to add additional information to allow for faster computation of R from r. This may the the point R itself.
As r = xR mod n it should be possible to calculate r from the EccPoint.
Does openSSL support this mechanism to speed up verification or do I really have to remove the extra information (and find out how to do it) to feed r into openSSL?
","Sections 4.2.5 -- 4.2.8 in http://www.etsi.org/deliver/etsi_ts/103000_103099/103097/01.02.01_60/ts_103097v010201p.pdf, give the following structures (where extern means not literally represented in the data'):
enum {
     x_coordinate_only(0),
     compressed_lsb_y_0(2),
     compressed_lsb_y_1(3),
     uncompressed(4),
     (2^8-1)
} EccPointType;

struct {
 extern PublicKeyAlgorithm algorithm;
 extern uint8 field_size;
 EccPointType type;
 opaque x[field_size];
 select(type) {
     case x_coordinate_only:
     case compressed_lsb_y_0:
     case compressed_lsb_y_1:
         ;
     case uncompressed:
         opaque y[field_size];
     unknown:
         opaque data<var>;
     }
} EccPoint;

struct {  
    extern PublicKeyAlgorithm algorithm;  
    extern uint8 field_size;  
    EccPoint R;  
    opaque s[field_size]; 
} EcdsaSignature;

struct {
    PublicKeyAlgorithm algorithm;
    select(algorithm) {
        case ecdsa_nistp256_with_sha256:
            EcdsaSignature ecdsa_signature;
        unknown:
            opaque signature<var>;
    }
} Signature;

You know that it's ECDSA on P-256, using SHA256, and that we've got a ""compressed y-1"" point.  Lets first resolve all of the 'select' portions of these structs using what we know, and eliminate all of the 'extern' fields:
struct {
    PublicKeyAlgorithm algorithm; // 1 byte = 0x00 (""ecdsa, P-256, sha256"")
    {                             //EcdsaSignature ecdsa_signature
        {                         //EccPoint R
            EccPointType type;        //1 byte = 0x03 (""compressed lsb y-1"")
            opaque x[field_size];     //these are the first 32 opaque bytes
            ;                         // select(type) resolves to nothing.
        }  
        opaque s[field_size];     //these are the second 32 opaque bytes
    }
} Signature;

Okay. That's simpler.  Now we know what all of the bytes are.  So what's all this business about ""compressed points""?  At its heart, point-compression is really about minimizing the amount of data that has to be sent over the network.  It turns out that, given the X coordinate of a point on a NIST curve, you can solve for the Y coordinate, but there are 2 possible answers.  Some clever people at Certicom noticed that the two possible Y coordinates that go with a given X coordinate always differ in their least-significant bit---thus while they have to send all of X, they could get away with only sending the LSb of Y (i.e., just enough info so you know which of the two solutions for Y is correct).  So that EccPointType of ""compressed lsb y-1"" tells you that for your X coordinate, the correct Y coordinate is the one that has a 1 in the LSb. 
The best news about this is that you don't have to care.  ECDSA only uses the X coordinate of R, which is sitting there in the first opaque blob labeled 'x'.
So this was a long-winded explanation to say ""you don't have to do anything.  You're already holding the right r (= X coord of R) and s to feed into OpenSSL's ECDSA_do_verify.
","300","<c><openssl><ecdsa>","0","0","1","2017-11-22 05:09:07","","0","","6782754","","2017-11-08 15:40:40","2017-11-06 14:03:55",""
"45426149","Erroring out creating an ECDSA Key pair with pkcs11interop","I am connecting to Gemalto HSM which supports secp256r1. I have the following code to create an ECDSA key pair using Pkcs11interop. I am getting the paramsBytes using BouncyCastle NistNamedCurves and X962Parameters. 
The HSM keeps comming back with CKR_ATTRIBUTE_TYPE_INVALID. I am new to ECDSA so I may have missed something. Any ideas?
                X9ECParameters x9Ec = NistNamedCurves.GetByName(""P-256"");
                X962Parameters x962 = new X962Parameters(x9Ec);
                byte[] paramsBytes =  x962.GetDerEncoded();

                // The CKA_ID attribute is intended as a means of distinguishing multiple key pairs held by the same subject
                byte[] ckaId = session.GenerateRandom(20);

                // Prepare attribute template of new public key
                List<ObjectAttribute> publicKeyAttributes = new List<ObjectAttribute>();
                publicKeyAttributes.Add(new ObjectAttribute(CKA.CKA_PRIVATE, false));
                publicKeyAttributes.Add(new ObjectAttribute(CKA.CKA_LABEL, keyName));
                publicKeyAttributes.Add(new ObjectAttribute(CKA.CKA_ID, ckaId));
                publicKeyAttributes.Add(new ObjectAttribute(CKA.CKA_VERIFY, true));
                publicKeyAttributes.Add(new ObjectAttribute(CKA.CKA_ECDSA_PARAMS, paramsBytes));

                // Prepare attribute template of new private key
                List<ObjectAttribute> privateKeyAttributes = new List<ObjectAttribute>();
                privateKeyAttributes.Add(new ObjectAttribute(CKA.CKA_PRIVATE, true));
                privateKeyAttributes.Add(new ObjectAttribute(CKA.CKA_LABEL, keyName));
                privateKeyAttributes.Add(new ObjectAttribute(CKA.CKA_ID, ckaId));
                privateKeyAttributes.Add(new ObjectAttribute(CKA.CKA_SENSITIVE, true));
                privateKeyAttributes.Add(new ObjectAttribute(CKA.CKA_SIGN, true));
                privateKeyAttributes.Add(new ObjectAttribute(CKA.CKA_ECDSA_PARAMS, paramsBytes));

                // Generate key pair
                Mechanism mechanism = new Mechanism(CKM.CKM_ECDSA_KEY_PAIR_GEN);
                ObjectHandle publicKeyHandle = null;
                ObjectHandle privateKeyHandle = null;
                session.GenerateKeyPair(mechanism, publicKeyAttributes, privateKeyAttributes, out publicKeyHandle,
                    out privateKeyHandle);

","Found out what was going on. The HSM did not like the 
privateKeyAttributes.Add(new ObjectAttribute(CKA.CKA_ECDSA_PARAMS, paramsBytes));

on the private key. PKCS states that the ECDSA params need to be on the public key and can't be on the private key and this implementation enforced that.
","300","<pkcs#11><ecdsa><hsm><gemalto><pkcs11interop>","1","2","1","2017-08-01 18:23:07","45443263","0","0","","","","2017-07-31 22:20:04",""
"46198335","How to extract ephemeral and static private keys from ecc private key using openssl","I am using the following openssl command to generate an ECC key for SECp384:
openssl ecparam -genkey -name secp384r1 -out private.pem

Can someone please let me know how to extract ephemeral(k) and static(k) private keys from generated ecc private key using openssl?
In the link https://www.ietf.org/rfc/rfc4754.txt these are mentioned as w and k.
","An ephemeral key is a key you generate, use, then throw away.
A static key is a key you use for a long time, perhaps by putting it into an X.509 Public Key Certificate.
Each of those are concept words, and behind the concept would be an ECC key like the one you generated.
        key
       /   \
static       ephemeral
   |             |
 cert          keyGenerator
   |
 getAssociatedKey

","299","<openssl><ecdsa>","0","0","1","2017-09-13 16:05:54","","0","","2810305","","2017-09-13 13:34:11","2017-09-13 13:02:12",""
"20781563","How can I recover compressed y value from sender?","I am working on following scenario:

Generate private and public key
Generate compressed public key with:
PublicKey.AccessGroupParameters().SetPointCompression(true)
Sign some data and send to other end with compressed public key.
[At other end] verify signature using public key

For step 4, I need recover y value. Is there some API I can use among Crypto++?
","
For step 4, I need recover y value. Is there some API I can use among Crypto++?

During verification, you will load the persisted or serialized key after setting point compression to true.

Below is a little program to experiment with point compression. You can find it on the Crypto++ wiki under Point Compression.
It generates a random key, then creates two public key - one with and and without compression. They two public keys are serialized. Then, it loads two new public keys with the serialized values.
Key 1 (no compress) and Key 2 (compress) and saved, then Key 3 (no compress) and Key 4 (no compress) are loaded from saved values. The keys are the same, and the output is:
$ ./cryptopp-test.exe
Key 1 size (no compression): 214
  3081D33081A406072A8648CE3D0201308198020101302006072A8648CE3D0101021500FFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFF7FFFFFFF302C0414FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFFFFC0414
1C97BEFC54BD7A8B65ACF89F81D4D4ADC565FA450429044A96B5688EF573284664698968C38BB913CB
FC8223A628553168947D59DCC912042351377AC5FB3202150100000000000000000001F4C8F927AED3
CA752257020101032A0004CBFD13CEB20D677D9D3781AFA2E66B7BD5BC0E3C4EB8702144AA62BE5235
DFC691567AA2A7101AB1

Key 2 size (compression): 174
  3081AB30819006072A8648CE3D0201308184020101302006072A8648CE3D0101021500FFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFF7FFFFFFF302C0414FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFFFFC0414
1C97BEFC54BD7A8B65ACF89F81D4D4ADC565FA450415024A96B5688EF573284664698968C38BB913CB
FC8202150100000000000000000001F4C8F927AED3CA75225702010103160003CBFD13CEB20D677D9D
3781AFA2E66B7BD5BC0E3C

Key 3 (after deserialization of Key 1):
  y3.x: cbfd13ceb20d677d9d3781afa2e66b7bd5bc0e3ch
  y3.y: 4eb8702144aa62be5235dfc691567aa2a7101ab1h
Key 4 (after deserialization of Key 2):
  y4.x: cbfd13ceb20d677d9d3781afa2e66b7bd5bc0e3ch
  y4.y: 4eb8702144aa62be5235dfc691567aa2a7101ab1h

Here's the program to create, copy, save, load, compress, uncompress and serialize the keys and points.
#include <iostream>
using std::cout;
using std::endl;

#include <string>
using std::string;

#include <cryptopp/osrng.h>
using CryptoPP::AutoSeededRandomPool;

#include <cryptopp/secblock.h>
using CryptoPP::SecByteBlock;

#include <cryptopp/filters.h>
using CryptoPP::StringSource;
using CryptoPP::StringSink;

#include <cryptopp/hex.h>
using CryptoPP::HexEncoder;

#include <cryptopp/sha.h>
using CryptoPP::SHA1;

#include <cryptopp/integer.h>
using CryptoPP::Integer;

#include <cryptopp/eccrypto.h>
using CryptoPP::ECP;
using CryptoPP::ECDSA;

#include <cryptopp/oids.h>
using CryptoPP::ASN1::secp160r1;

int main(int argc, char* argv[])
{
    AutoSeededRandomPool prng;

    // Generate a private key, and two public keys.
    //   One with and one without compression
    ECDSA<ECP, SHA1>::PrivateKey privateKey;
    privateKey.Initialize(prng, secp160r1());

    ECDSA<ECP, SHA1>::PublicKey publicKey1;
    privateKey.MakePublicKey(publicKey1);

    ECDSA<ECP, SHA1>::PublicKey publicKey2;
    privateKey.MakePublicKey(publicKey2);
    publicKey2.AccessGroupParameters().SetPointCompression(true);

    // Save the public keys
    string p1, p2;
    publicKey1.Save(StringSink(p1).Ref());
    publicKey2.Save(StringSink(p2).Ref());

    // Print some stuff about them
    string s3, s4;
    StringSource ss3(p1, true, new HexEncoder(new StringSink(s3)));
    StringSource ss4(p2, true, new HexEncoder(new StringSink(s4)));

    cout << ""Key 1 (not compressed): "" << p1.size() << "" bytes"" << endl;
    cout << ""  "" << s3 << endl;
    cout << ""Key 2 (compressed): "" << p2.size() << "" bytes"" << endl;
    cout << ""  "" << s4 << endl;
    cout << endl;

    // Two new keys to load up the persisted keys
    ECDSA<ECP, SHA1>::PublicKey publicKey3, publicKey4;
    publicKey4.AccessGroupParameters().SetPointCompression(true);

    publicKey3.Load(StringSource(p1, true).Ref());
    publicKey4.Load(StringSource(p2, true).Ref());

    // And validate them
    publicKey3.Validate(prng, 3);
    publicKey4.Validate(prng, 3);

    // Get the public elements of the loaded keys
    const ECP::Point& y3 = publicKey3.GetPublicElement();
    const Integer& y3_x = y3.x;
    const Integer& y3_y = y3.y;

    const ECP::Point& y4 = publicKey4.GetPublicElement();
    const Integer& y4_x = y4.x;
    const Integer& y4_y = y4.y;

    // Print some stuff about them
    cout << ""Key 3 (after deserialization of Key 1):"" << endl;
    cout << ""  y3.x: "" << std::hex << y3_x << endl;
    cout << ""  y3.y: "" << std::hex << y3_y << endl;
    cout << ""Key 4 (after deserialization of Key 2):"" << endl;
    cout << ""  y4.x: "" << std::hex << y4_x << endl;
    cout << ""  y4.y: "" << std::hex << y4_y << endl;
    cout << endl;

    return 0;
}


You can even cross wires when loading the serialized keys and it just works. Below, the compressed key was loaded from a non-compressed serialization (and vice-versa):
//////////////////////////////////////////////////////////////////////
// Two new keys to load up the persisted keys, but crossing wires
//   so so there's a compress/uncompressed mismatch
ECDSA<ECP, SHA1>::PublicKey publicKey5, publicKey6;
publicKey6.AccessGroupParameters().SetPointCompression(true);

// This should be `p1`
publicKey5.Load(StringSource(p2, true).Ref());
// This should be `p2`
publicKey6.Load(StringSource(p1, true).Ref());

// Get the public elemnts of the loaded keys
const ECP::Point& y5 = publicKey5.GetPublicElement();
const Integer& y5_x = y5.x;
const Integer& y5_y = y5.y;

const ECP::Point& y6 = publicKey6.GetPublicElement();
const Integer& y6_x = y6.x;
const Integer& y6_y = y6.y;

// Print some stuff about them
cout << ""Key 5 (after deserialization of Key 1):"" << endl;
cout << ""  y5.x: "" << std::hex << y5_x << endl;
cout << ""  y5.y: "" << std::hex << y5_y << endl;
cout << ""Key 6 (after deserialization of Key 2):"" << endl;
cout << ""  y6.x: "" << std::hex << y6_x << endl;
cout << ""  y6.y: "" << std::hex << y6_y << endl;
cout << endl;


If you want to get at the underlying domain parameters (like the base point), use:
const DL_GroupParameters_EC< ECP >& params = publicKey.GetGroupParameters()

","297","<signing><elliptic-curve><crypto++><ecdsa><compression>","1","3","1","2019-02-01 11:30:57","21036981","0","","608639","","2015-10-19 17:42:13","2013-12-26 08:23:25",""
"41046577","ECIES with Inferno: Signing with ECDSA","I'm trying to sign a text file encrypted with ECIES, using Inferno. The encryption and key exchange parts work well but I'm left with a few questions regarding ECDSA.
1- I guess that the ECDSA signature must be stored in the sent file, so that receiver can use it to verify data integrity, right?
2- I have read many times that signing should be performed on hashed data, yet the data sent with ECIES is encrypted, not hashed else how can receiver retrieve it?
3- Where in the following code example should the signing take place? The current attempt does not work since although the signature is accepted upon decryption, an empty string is returned(instead of decrypted text).
    internal static void EncryptText(string text, Keyring k, string file, bool forSender)
    {
        // never mind the Keyring class, it has no methods and only exposes
        // a few properties to store the session keys conveniently

        SharedEphemeralBundle ephemeralBundle;
        if (forSender) ephemeralBundle = k.SenderDHM.GetSharedEphemeralDhmSecret();
        else ephemeralBundle = k.ReceiverDHM.GetSharedEphemeralDhmSecret();

        var ephemeralPublic = ephemeralBundle.EphemeralDhmPublicKeyBlob;
        var ephemeralSymmetric = ephemeralBundle.SharedSecret;
        var textBytes = Utils.SafeUTF8.GetBytes(text);

        byte[] signature;            
        using (var ecdsa = new ECDsaCng(k.SenderDSA) { HashAlgorithm = CngAlgorithm.Sha384 })
            signature = ecdsa.SignData(textBytes);

        using (FileStream fs = new FileStream(file, FileMode.Create, FileAccess.Write))
        {
            fs.Write(signature, 0, signature.Length);
            fs.Write(ephemeralPublic, 0, ephemeralPublic.Length);

            EtM_EncryptTransform etm = new EtM_EncryptTransform(ephemeralSymmetric);
            using (CryptoStream cs = new CryptoStream(fs, etm, CryptoStreamMode.Write))                
                cs.Write(textBytes, 0, textBytes.Length);                                   
        }            
    }

    internal static string DecryptText(string file, Keyring k)
    {
        string decrypted = null;            
        var ephemeralPublic = new byte[104];
        var signature = new byte[96];            

        using (FileStream fs = new FileStream(file, FileMode.Open, FileAccess.Read))
        {
            fs.Read(signature, 0, 96);
            fs.Read(ephemeralPublic, 0, 104);

            var ephemeralSymmetric = k.SenderDHM.GetSharedDhmSecret(ephemeralPublic.ToPublicKeyFromBlob());
            EtM_DecryptTransform etm = new EtM_DecryptTransform(ephemeralSymmetric);
            using (CryptoStream cs = new CryptoStream(fs, etm, CryptoStreamMode.Read))
            {
                byte[] decrypt = new byte[fs.Length - 200];
                cs.Read(decrypt, 0, decrypt.Length);
                using (var ecdsa = new ECDsaCng(k.SenderDSA))
                {
                    // signature is accepted but returns an empty string!?
                    if (ecdsa.VerifyData(decrypt, signature))
                        decrypted = Utils.SafeUTF8.GetString(decrypt);                        
                }                        
            }                                                                                       
        }
        return decrypted;
    }

","Okay never mind, after closer inspection it looks like in my scenario, I can fortunately go with HMAC alone:
    private static bool Authenticate(string file, byte[] key, bool masterKey = false)
    {
        int position = 104;
        if (masterKey) position = 48; 
        using (var fs = new FileStream(file, FileMode.Open, FileAccess.Read))
        using (var etm = new EtM_DecryptTransform(key, authenticateOnly: true))
        {
            fs.Position = position;
            using (var cs = new CryptoStream(fs, etm, CryptoStreamMode.Read))
                cs.CopyTo(Stream.Null);

            if (!etm.IsComplete) throw new Exception(""Some blocks were not authenticated"");
        }
        return true;
    }        

    internal static void EncryptText(string text, Keyring k, string file, bool forSender)
    {
        SharedEphemeralBundle ephemeralBundle;
        if (forSender) ephemeralBundle = k.SenderDHM.GetSharedEphemeralDhmSecret();
        else ephemeralBundle = k.ReceiverDHM.GetSharedEphemeralDhmSecret();

        var ephemeralPublic = ephemeralBundle.EphemeralDhmPublicKeyBlob;
        var ephemeralSymmetric = ephemeralBundle.SharedSecret;
        var textBytes = text.ToBytes();                       

        using (var fs = new FileStream(file, FileMode.Create, FileAccess.Write))
        {                
            fs.Write(ephemeralPublic, 0, ephemeralPublic.Length);
            using (var etm = new EtM_EncryptTransform(ephemeralSymmetric))
            using (var cs = new CryptoStream(fs, etm, CryptoStreamMode.Write))
                cs.Write(textBytes, 0, textBytes.Length);                                                                                       
        }            
    }

    internal static string DecryptText(string file, Keyring k)
    {
        string decrypted = null;            
        var ephemeralPublic = new byte[104];

        using (var fs = new FileStream(file, FileMode.Open, FileAccess.Read))
        {                
            fs.Read(ephemeralPublic, 0, 104);
            var ephemeralSymmetric = k.SenderDHM.GetSharedDhmSecret(ephemeralPublic.ToPublicKeyFromBlob());
            if (Authenticate(file, ephemeralSymmetric))
            {
                using (var etm = new EtM_DecryptTransform(ephemeralSymmetric))
                using (var cs = new CryptoStream(fs, etm, CryptoStreamMode.Read))
                {
                    var decrypt = new byte[fs.Length - 104];
                    cs.Read(decrypt, 0, decrypt.Length);
                    decrypted = decrypt.FromBytes();
                }
            }                                                                                                          
        }
        return decrypted;
    }

","292","<c#><ecdsa><ecies>","0","0","1","2016-12-09 05:49:04","","0","","5795643","","2016-12-08 18:56:27","2016-12-08 18:39:48",""
"55710561","Validate JWT signature with ECDSA public key - Error decoding signature bytes","i need some help to validate a jwt signature with a ECDSA public key. I'm reading the key from a .pem file with bouncy castle and using jjwt to do the validation. I'm getting an error while validating the signature.
Security.addProvider(new BouncyCastleProvider());
String jwt = ""eyJ0eXAiOiJKV1QiLCJhbGciOiJFUzI1NiJ9.eyJtc2kiOiI5NzE1NTA5ODc2NTUiLCJmZWEiOiJzaWdudXAtZGF0YSIsImlzcyI6IkNEUCIsImV4cCI6MTU1NDU2NjMzNiwiaWF0IjoxNTU0MzkzNTM2LCJzaWQiOiIwNDI0MDMwMDg5NzI4MTg3QG5haS5lcGMubW5jMTMwLm1jYzMxMC4zZ3BwbmV0d29yay5vcmcifQ.RwxoGmFd1_dQPeGN-0gnWIW79xXvGHoyJKBbCKajgO75UooceS6tskxwqViEuP1gZD66UE8Bd2L0FaeI2aS_IA"";
PemReader pemReader = new PemReader(new FileReader(""/publickey.pem""));
X509EncodedKeySpec spec = new X509EncodedKeySpec(pemReader.readPemObject().getContent());
KeyFactory kf = KeyFactory.getInstance(""ECDSA"",""BC"");
PublicKey publicKey = kf.generatePublic(spec);
Jws<Claims> claims = Jwts.parser().setSigningKey(publicKey).parseClaimsJws(jwt);

I'm getting a Signature Exception with: Unable to verify Elliptic Curve signature using configured ECPublicKey. error decoding signature bytes.
","Problem found, i was using an old jjwt lib (0.6). Changed to 0.9 with the same code and it works as expected.
Thanks
","285","<java><jwt><bouncycastle><ecdsa>","2","1","2","2019-05-01 03:39:40","","4","","","","","2019-04-16 14:28:12",""
"55710561","Validate JWT signature with ECDSA public key - Error decoding signature bytes","i need some help to validate a jwt signature with a ECDSA public key. I'm reading the key from a .pem file with bouncy castle and using jjwt to do the validation. I'm getting an error while validating the signature.
Security.addProvider(new BouncyCastleProvider());
String jwt = ""eyJ0eXAiOiJKV1QiLCJhbGciOiJFUzI1NiJ9.eyJtc2kiOiI5NzE1NTA5ODc2NTUiLCJmZWEiOiJzaWdudXAtZGF0YSIsImlzcyI6IkNEUCIsImV4cCI6MTU1NDU2NjMzNiwiaWF0IjoxNTU0MzkzNTM2LCJzaWQiOiIwNDI0MDMwMDg5NzI4MTg3QG5haS5lcGMubW5jMTMwLm1jYzMxMC4zZ3BwbmV0d29yay5vcmcifQ.RwxoGmFd1_dQPeGN-0gnWIW79xXvGHoyJKBbCKajgO75UooceS6tskxwqViEuP1gZD66UE8Bd2L0FaeI2aS_IA"";
PemReader pemReader = new PemReader(new FileReader(""/publickey.pem""));
X509EncodedKeySpec spec = new X509EncodedKeySpec(pemReader.readPemObject().getContent());
KeyFactory kf = KeyFactory.getInstance(""ECDSA"",""BC"");
PublicKey publicKey = kf.generatePublic(spec);
Jws<Claims> claims = Jwts.parser().setSigningKey(publicKey).parseClaimsJws(jwt);

I'm getting a Signature Exception with: Unable to verify Elliptic Curve signature using configured ECPublicKey. error decoding signature bytes.
","This will work as well without mentioning any algorithm.
public boolean isTokenValid(String token) {
    try {
        String certificate = ""GET_YOUR_PUBLIC_CERTIFICATE_HERE""; //Either from REST call or reading from a cert file.
        getPublicKeyAndParseToken(token, certificate);
        return true;
    } catch (IOException e) {
        log.error("""", e);
    } catch (Exception e) {
        log.error("""", e);
        log.error(""JWT Not-Verified"");
    }
    return false;
}

private void getPublicKeyAndParseToken(String token, String certificate) throws IOException, CertificateException {
    log.debug(""Certificate:: "" + certificate); //Only for debugging purpose
    InputStream is = new ByteArrayInputStream(certificate.getBytes(StandardCharsets.UTF_8));
    CertificateFactory cf = CertificateFactory.getInstance(""X.509"");
    Certificate cert = cf.generateCertificate(is);
    PublicKey publicKey = cert.getPublicKey();

    Jws parsedClaimsJws = Jwts.parser().setSigningKey(publicKey).parseClaimsJws(token);
    log.debug(""Header:: "" + parsedClaimsJws.getHeader()); //Only for debugging purpose
    log.debug(""Body:: "" + parsedClaimsJws.getBody()); //Only for debugging purpose
}

Don't forget to use version '0.9.x' of jjwt library. I've below dependency in my build.gradle:
compile('io.jsonwebtoken:jjwt:0.9.1')

","285","<java><jwt><bouncycastle><ecdsa>","2","4","2","2019-05-01 03:39:40","","4","","","","","2019-04-16 14:28:12",""
"53813353","Javascript: Generating ECDSA public key from private key","Is there any library that supports deriving the ecdsa public key from the private key for javascript (frontend)?  (With the private key, we can generate the corresponding public key)
I studied the localethereum white paper, and I would like to implement the crypto layer.
It says: 

AccountKeyIdentityPublic — Using the SECP‐256k1 curve, an ECDSA public key that corresponds to AccountKeyIdentityPrivate.

However, it seems that lots of libraries 
(1,
2)  do not support this function.
Anyone can provide me some advise? Thanks!
","You can do such thing with a library that support point multiplication.
To get your public key, you just have to multiply a generation point G by your private key.  
For example with elliptic package : 
var EC = require('elliptic').ec;

// Create and initialize EC context
// (better do it once and reuse it)
var ec = new EC('secp256k1');

// Then generate the public point/key corresponding to your secret key.
var pubPoint = ec.keyFromSecret(secret).getPublic();

","283","<javascript><frontend><ecdsa>","0","2","1","2018-12-17 11:09:02","53813990","2","","4225449","","2018-12-17 10:58:07","2018-12-17 10:33:31",""
"30950856","BAD_ACCESS (code=EXC_I386_GPFLT) when signing with ECDSA","I am trying to use Crypto++ on iOS. I downloaded a prebuilt version of the library from Marek Kotewicz's GitHub.
I am struggling hard to run this sample code from the Crypto++ wiki.
ECDSA<ECP, CryptoPP::SHA256>::PrivateKey privateKey;
ECDSA<ECP, CryptoPP::SHA256>::PublicKey publicKey;

AutoSeededRandomPool prng, rrng;

privateKey.Initialize(prng, CryptoPP::ASN1::secp256k1());    
privateKey.MakePublicKey(publicKey);

string signature;       
string message = ""Do or do not. There is no try."";

StringSource s(message, true,
             new SignerFilter(rrng,
                              ECDSA<ECP, CryptoPP::SHA256>::Signer(privateKey),
                              new StringSink(signature)));

Its crashing with the following. Its showing up in Xcode output window:
BAD_ACCESS (code=EXC_I386_GPFLT)  

This is the code snippet from memory.h of c++ file where it is pointing the BAD_ACCESS
 _LIBCPP_INLINE_VISIBILITY ~auto_ptr() throw() {delete __ptr_;}

I am getting BAD_ACCESS(code=1 , address=0x0) error
pointing to this line of code of library
 ->  0x1065dfa8d <+85>:  movq   -0x58(%rbp), %rdi


","
Its crashing with the following. Its showing up in Xcode output window:
BAD_ACCESS(code=EXC_I386_GPFLT)  


The code looks OK to me.


I am trying to use Crypto++ on iOS. I downloaded a prebuilt version of the library from Marek Kotewicz's GitHub.

I'm just taking a stab in the dark. It presumes the code you showed above is really all you are doing in, say, a test ViewController.
The precompiled library appears to be using GNU's Standard C++ library. I would switch to LLVM's Standard C++ library by building Crypto++ with -stdlib=c++ (and not GNU's -stdlib=stdc++). Apple switched to it years ago, and Xcode uses it by default.
You can find a GitHub with the fat library using LLVM Standard C++ at noloader/cryptopp-5.6.2-ios.
Or, you can build the fat library yourself. For that, see iOS (Command Line) on the Crypto++ wiki. The prebuilt library at cryptopp-5.6.2-ios uses those instructions.


AutoSeededRandomPool prng, rrng;


You only need one of these.


StringSource s(message, true,
               new SignerFilter(rrng,
                   ECDSA<ECP, CryptoPP::SHA256>::Signer(privateKey),
                       new StringSink(signature)));


Over the years, I've come to wonder about the temporary signer created for the pipeline. I've changed the Crypto++ wiki to stop using them. Use this code instead:
ECDSA<ECP, CryptoPP::SHA256>::PrivateKey privateKey;
...
ECDSA<ECP, CryptoPP::SHA256>::Signer signer(privateKey);
...

StringSource s(message, true,
               new SignerFilter(prng, signer,
                   new StringSink(signature)));

","277","<c++><ios><crypto++><ecdsa>","0","0","1","2019-10-11 09:34:25","","10","","3632958","","2015-06-21 09:05:58","2015-06-20 06:04:37",""
"49647305","Signature Algorithm sha256RSA with ECC Pubkey","Quite by chance, I ran into Google certificate. Now questions come to my mind which I haven't find answers yet:
From the certificate, it seems RSA signature algorithm is used, but the public key is an ECC key. Can we possibly do RSA encryption/decryption with an ECC key? How can we make a certificate like this using openssl? (I've created certificates of RSA SA/RSA key, ECDSA SA/ECC key, but not like this one.)
Any answer is appreciated!
Screenshot of Google certificate
Google Certificate
","RSA signrature in the certificate means that Issuing CA (i.e. Google Internet Authority G3) used this algorithm to sign the End Entity certificate (google.com). It does not matter if the key pair was RSA or ECC.
You can not use RSA encryption with this End Entity certificate because it has ECC public key in it and AFAIK it is not possible to do encryption with ECC keys. Well, according to this wiki link you can.
If you want to make similar End entity certificate then make RSA CA then make ECC keypair and PKCS#10 request and issue the certificate using this request.
","276","<openssl><certificate><rsa><x509><ecdsa>","1","2","1","2018-04-04 11:10:15","49649491","2","","","","","2018-04-04 09:23:14",""
"49102277","Extract ECPublicKey from a X509 certicate","I'm having trouble extracting an ECPublicKey from an X509 certifcate using Java.
The keys and certificate were created as follows
ssh-keygen -t ecdsa -f id_ecdsa
openssl pkcs8 -topk8 -in id_ecdsa -out id_ecdsa.p8
openssl req -new x509 -key id_ecdsa.p8 -out id_ecdsa.crt.der -outform der

The code used to extract the public key from the certificate is
FileInputStream fin = new FileInputStream(""<path to id_ecdsa.crt.der>"");
CertificateFactory cf = CertificateFactory.getInstance(""X.509"");
X509Certificate cert = (X509Certificate) cf.generateCertificate(fin);
PublicKey pk = cert.getPublicKey();

if (pk instanceof ECPublicKey) {
  ECPublicKey key = (ECPublicKey) pk;
  ...
} else if (pk instanceof RSAPublicKey) {
  RSAPublicKey key = (RSAPublicKey) pk;
  ...
}

For a certificate containing an RSA key all is ok. However if an ECDSA key is used the if(pk instanceof ECPublicKey) block is ignored.
A call to pk.getAlgorithm() yields ""EC"" which suggests the key is an ECDSA key.
Examination of pk with a debugger yields a type X509Key for ECDSA. For an RSA key the debugger yields RSAPublicKeyImpl.
N.B. java.security.* is used as the library.
Any help solving my problem would be greatly appreciated.
","I found that adding Bouncy Castle as a provider appears to have fixed my issue. It appears JDK is not fitted with EC support by default.
Security.addProvider(new BouncyCastleProvider());
CertificateFactory cf = CertificateFactory.getInstance(""X.509"", ""BC"");

","273","<java><public-key><ecdsa>","0","-1","1","2018-03-11 14:23:03","","0","","238704","","2018-03-11 14:23:03","2018-03-05 01:26:09",""
"19853372","What will be the behaviour if chosen cipher suite is ECDSA but the chosen client certificate is RSA","In case of TLS1.1 and TLS 1.0, what will be the behavior in the following scenario ?
Suppose the server and client both are capable of handling RSA and ECDSA, the client sends a list of cipher suites and server chooses ECDSA for authentication. Then the server requests for client certificate. The client has both RSA and ECDSA certificates for client authentication. If the client chooses an RSA certificate now. What will happen in this case.
","The client has to supply a certificate that matches the server-specified certificate type and accepted issuers. ""The certificate type must be appropriate for the selected cipher suite's key exchange algorithm"". RFC 2246.
","270","<ssl><encryption><rsa><ecdsa>","0","2","1","2013-11-08 11:22:58","","0","","238704","","2013-11-08 11:22:58","2013-11-08 07:06:36",""
"52134521","Java's BouncyCastle doesn't always verify OpenSSL ECDSA signature","I sign text using OpenSSL (in C++) however my Java program doesn't always validate signed messages (only ~1 out of 5 gets verified). Interestingly https://kjur.github.io/jsrsasign/sample/sample-ecdsa.html doesn't verify any of them:
Curve name: secp256k1
Signature algorithm: SHA256withECDSA
privateKey
431313701ec60d303fa7d027d5f1579eaa57f0e870b23e3a25876e61bed2caa3

publicKey
035bcefc4a6ca257e394e82c20027db2af368474afb8917273713644f11a7cecb3

Failed:
text to sign=
    pcax2727gRo8M6vf9Vjhr1JDrQ3rdPYu6xx81000pcax273z8kaV5Ugsiqz3tvWGo8Gg6sch6V4912341535867163229

signature=
    3044022061dff8e39f9324b0794ec2c58abda971898f694ca980baf3c2a4045a9048b441022054a2fb8ef3d383fd7eeb31425dba440e2fd2053778d4ab3725046385c7845cff0000

Successful:
text to sign=
    pcax2727gRo8M6vf9Vjhr1JDrQ3rdPYu6xx81000pcax273z8kaV5Ugsiqz3tvWGo8Gg6sch6V4912341535867122614

signature=
    3046022100f200d0fb9e86a16bd46ee2dd11f1840a436d0a5c6823001a516e975a44906fcf022100d062a60611fc0f21d81fa3140741c8b6e650fff33d2c48aef69a3a40d7c7b3ca

Java
private static final String SHA256WITH_ECDSA = ""SHA256withECDSA"";

public static boolean isValidSignature(PublicKey pub, byte[] dataToVerify, byte[] signature) {

    try {

        Signature sign = Signature.getInstance(SHA256WITH_ECDSA, BouncyCastleProvider.PROVIDER_NAME);

        sign.initVerify(pub);

        sign.update(dataToVerify);

        return sign.verify(signature);

    } catch (Exception e) {
        log.error(""Error: "" + e.getMessage());
    }

    return false;

}

C++
std::vector<unsigned char> utils::crypto::sign(std::string& private_key_58, std::string& message) {

    auto priv_bytes = utils::base58::decode_base(private_key_58);

    auto digest = utils::crypto::sha256(message);

    auto key = utils::crypto::ec_new_keypair(priv_bytes);

    auto signature = ECDSA_do_sign(digest.data(), digest.size(), key);

    auto der_len = ECDSA_size(key);
    auto der = (uint8_t*) calloc(der_len, sizeof(uint8_t));
    auto der_copy = der;
    i2d_ECDSA_SIG(signature, &der_copy);

    std::vector<unsigned char> s (der, der+der_len);

    return s;

}

std::vector<unsigned char> utils::crypto::sha256(std::string& str) {

    unsigned char hash[SHA256_DIGEST_LENGTH];
    SHA256_CTX sha256;
    SHA256_Init(&sha256);
    SHA256_Update(&sha256, str.c_str(), str.size());
    SHA256_Final(hash, &sha256);

    std::vector<unsigned char> data(hash, hash + SHA256_DIGEST_LENGTH);

    return data;

}

EC_KEY *utils::crypto::ec_new_keypair(std::vector<unsigned char>& priv_bytes) {

    EC_KEY *key = nullptr;
    BIGNUM *priv = nullptr;
    BN_CTX *ctx = nullptr;
    const EC_GROUP *group = nullptr;
    EC_POINT *pub = nullptr;

    key = EC_KEY_new_by_curve_name(NID_secp256k1);

    if (!key) {
        std::cerr << ""Can't generate curve secp256k1\n"";
        std::abort();
    }

    priv = BN_new();
    BN_bin2bn(priv_bytes.data(), 32, priv);
    EC_KEY_set_private_key(key, priv);

    ctx = BN_CTX_new();
    BN_CTX_start(ctx);

    group = EC_KEY_get0_group(key);
    pub = EC_POINT_new(group);
    EC_POINT_mul(group, pub, priv, NULL, NULL, ctx);
    EC_KEY_set_public_key(key, pub);

    EC_POINT_free(pub);
    BN_CTX_end(ctx);
    BN_CTX_free(ctx);
    BN_clear_free(priv);

    return key;
}

","Neardupes ECDSA signature length and how to specify signature length for java.security.Signature sign method (and more links there) 
ASN.1 DER encoding is variable size for all but certain very limited data, and in particular for ECDSA (or DSA) signatures. ECDSA_size returns the maximum length possible for the given key, but each actual signature may be either that length or shorter, depending on the binary representations of the values r and s in the signature, which for your purposes can be treated essentially as random numbers.
In cases where an actual signature is shorter than ECDSA_size you still encode the entire buffer and pass it to your Java; notice the two bytes of zero (0000 in hex) at the end of your 'failed' example? A DER decoder can ignore trailing garbage, and when I test such a case on older BouncyCastle and SunEC providers it actually works okay, but it fails for me starting at BouncyCastle 1.54 -- with a rather clear exception, 
java.security.SignatureException: error decoding signature bytes.
-- and SunEC starting at 8u121 with cause or exception similar to java.security.SignatureException: Invalid encoding for signature. 
Many implementations have recently made DER decoding stricter, after some successful attacks on 'lax' encodings, including the secp256k1 signatures in Bitcoin -- see https://bitcoin.stackexchange.com/questions/51706/what-can-be-changed-in-signed-bitcoin-transaction and https://en.bitcoin.it/wiki/Transaction_malleability . This is mentioned in the Oracle Java 8u121 release notes item ""More checks added to DER encoding parsing code"" although I don't see anything similar for Bouncy.
Since secp256k1 is a Certicom/X9 'prime' (Fp) curve group, its cofactor is 1 and its order is very close to the underlying field size which in turn is very close to 256 bits which is a multiple of 8, so signatures in this group will DER-encode to the maximum length (and work) almost exactly 1/4 (25%) of the time; the rest of the time they will fail.
The official and best solution is to use the updated value in the pointer, here der_copy, output by (any) i2d* routine, to determine the length of the encoding, and use that length. If you can't handle variable length for some reason, you can transmit the whole buffer but then truncate it before passing to BouncyCastle (or SunEC) by using 2+signature[1] as the valid length -- but not if you change to a curve larger than about 480 bits; above that it is different and more complicated.
","265","<java><openssl><bouncycastle><ecdsa>","1","3","1","2018-09-02 14:18:47","52135544","0","0","238704","","2018-09-02 14:18:47","2018-09-02 06:24:20",""
"53924783","How to use ECDSA function in the medtls library","I am using the mbedtls library (https://github.com/ARMmbed/mbedtls) on an ARM micro-controller (Ambiq).
I need to use the function mbedtls_ecdsa_sign_det() to sign a bitcoin transaction.
Actually, I am not sure if this is the right function.
Here is the documentation of the function:
Compute ECDSA signature of a previously hashed message, deterministic version (RFC 6979).

Parameters:
grp ECP group
r   First output integer
s   Second output integer
d   Private signing key
buf Message hash
blen    Length of buf
md_alg  MD algorithm used to hash the message
Returns:
0 if successful, or a MBEDTLS_ERR_ECP_XXX or MBEDTLS_MPI_XXX error code

The header file includes the following description:
/**
 * \brief           This function computes the ECDSA signature of a
 *                  previously-hashed message, deterministic version.
 *
 *                  For more information, see <em>RFC-6979: Deterministic
 *                  Usage of the Digital Signature Algorithm (DSA) and Elliptic
 *                  Curve Digital Signature Algorithm (ECDSA)</em>.
 *
 * \note            If the bitlength of the message hash is larger than the
 *                  bitlength of the group order, then the hash is truncated as
 *                  defined in <em>Standards for Efficient Cryptography Group
 *                  (SECG): SEC1 Elliptic Curve Cryptography</em>, section
 *                  4.1.3, step 5.
 *
 * \see             ecp.h
 *
 * \param grp       The context for the elliptic curve to use.
 *                  This must be initialized and have group parameters
 *                  set, for example through mbedtls_ecp_group_load().
 * \param r         The MPI context in which to store the first part
 *                  the signature. This must be initialized.
 * \param s         The MPI context in which to store the second part
 *                  the signature. This must be initialized.
 * \param d         The private signing key. This must be initialized
 *                  and setup, for example through mbedtls_ecp_gen_privkey().
 * \param buf       The hashed content to be signed. This must be a readable
 *                  buffer of length \p blen Bytes. It may be \c NULL if
 *                  \p blen is zero.
 * \param blen      The length of \p buf in Bytes.
 * \param md_alg    The hash algorithm used to hash the original data.
 *
 * \return          \c 0 on success.
 * \return          An \c MBEDTLS_ERR_ECP_XXX or \c MBEDTLS_MPI_XXX
 *                  error code on failure.
 */
int mbedtls_ecdsa_sign_det( mbedtls_ecp_group *grp, mbedtls_mpi *r,
                            mbedtls_mpi *s, const mbedtls_mpi *d,
                            const unsigned char *buf, size_t blen,
                            mbedtls_md_type_t md_alg );

Besides, I do not find any example how to use this function.
I do not know how to initialize the passed pointers, grp, r, s and d.
","Mathematically speaking, an ECDSA signature is a pair of two integers (r, s). The function mbedtls_ecdsa_sign_det gives you the two integers r and s as outputs and it's up to you to decide how you want to output those integers. There are two common representations of ECDSA signatures: take a fixed-size representation of r and s and put those two together, or assemble them in an ASN.1 sequence, generally in DER form (ASN.1 admits multiple representations, e.g. with or without leading zeros, and DER is a specific ASN.1 representation, without leading zeros). Bitcoin uses the DER representation. Fortunately for you, Mbed TLS has a function that directly outputs this DER representation: mbedtls_ecdsa_write_signature.
There are two variants of ECDSA: randomized and deterministic. They produce compatible signatures anyway (the deterministic variant uses a specific choice for the random parameter). mbedtls_ecdsa_write_signature uses the deterministic variant if your build supports it and the randomized variant otherwise.
Here's how a call to this function looks like. It takes the following inputs:

An ECDSA private key key.
A SHA-256 hash to sign hash.
The random number generator which you must initialize at the start of your program (not at each signature generation!). See https://tls.mbed.org/kb/how-to/generate-an-aes-key for an example.

unsigned char signature[2 * 32 + 9]; // ""at least twice as large as the size of the curve used, plus 9""
size_t signature_length;
ret = mbedtls_ecdsa_write_signature(key, MBEDTLS_MD_SHA256, hash, 32,
                                    signature, &signature_length,
                                    mbedtls_ctr_drbg_random, &ctr_drbg);
if (ret == 0) {
    // The signature is in the signature array. It is signature_length bytes long. 
} else ERROR();

","262","<bitcoin><ecdsa><mbedtls>","0","1","1","2018-12-25 20:48:02","","0","","1068283","","2018-12-25 20:22:19","2018-12-25 18:42:13",""
"30170929","Segmentation fault when signing a message using OpenSSL, SWIG, and Perl","We were using SWIG to make a C cryptographic utility library available to Perl. We are able to generate keys, create digests, but the signing code causes a segmentation fault, which we believe may be in the OpenSSL code itself but it's difficult to be sure.
This problem only comes up when running the code with SWIG, the native C code works.
In Perl, we call this: 
$signature = key_utils::mysignMessageWithPem($pem, $message);

Which calls this code in the .i file:
%newobject mysignMessageWithPem;                                                                                                                                                                                                                                                                                              

%inline %{                                                                                                                                                                                                                                                                                                                    
  char *mysignMessageWithPem(char *pem, char *message) {                                                                                                                                                                                                                                                                      
    char *ret = malloc(145);                                                                                                                                                                                                                                                                                                  
    char *err = malloc(5);                                                                                                                                                                                                                                                                                                    
    int errorCode;                                                                                                                                                                                                                                                                                                            

    memcpy(err, ""ERROR"", 5);                                                                                                                                                                                                                                                                                                  

    errorCode = signMessageWithPem(pem, message, &ret);                                                                                                                                                                                                                                                                       
    char *signature = ret;                                                                                                                                                                                                                                                                                                    

    if (errorCode == NOERROR) {                                                                                                                                                                                                                                                                                               
      return signature;                                                                                                                                                                                                                                                                                                       
    } else {                                                                                                                                                                                                                                                                                                                  
      return err;                                                                                                                                                                                                                                                                                                             
    }                                                                                                                                                                                                                                                                                                                         

  }                                                                                                                                                                                                                                                                                                                           
%}                     

Which calls this C code:
int signMessageWithPem(char *message, char *pem, char **signature) {                                                                                                                                                                                                                                                          

unsigned int meslen = strlen(message);                                                                                                                                                                                                                                                                                    
unsigned char *messagebytes = calloc(meslen, sizeof(unsigned char));                                                                                                                                                                                                                                                      
ECDSA_SIG *sig = NULL;                                                                                                                                                                                                                                                                                                    
memcpy(messagebytes, message, meslen);                                                                                                                                                                                                                                                                                    

EC_KEY *key = NULL;                                                                                                                                                                                                                                                                                                       
BIO *in = NULL;                                                                                                                                                                                                                                                                                                           
unsigned char *buffer = NULL;                                                                                                                                                                                                                                                                                             

char *sha256ofMsg = calloc(SHA256_HEX_STRING, sizeof(char));                                                                                                                                                                                                                                                              
unsigned char *outBytesOfsha256ofMsg = calloc(SHA256_STRING, sizeof(unsigned char));                                                                                                                                                                                                                                      

digestOfBytes(messagebytes, &sha256ofMsg, ""sha256"", meslen);                                                                                                                                                                                                                                                              
sha256ofMsg[64] = '\0';                                                                                                                                                                                                                                                                                                   
createDataWithHexString(sha256ofMsg, &outBytesOfsha256ofMsg);                                                                                                                                                                                                                                                             

in = BIO_new(BIO_s_mem());                                                                                                                                                                                                                                                                                                
BIO_puts(in, pem);                                                                                                                                                                                                                                                                                                        
PEM_read_bio_ECPrivateKey(in, &key, NULL, NULL);                                                                                                                                                                                                                                                                          

sig = ECDSA_do_sign((const unsigned char*)outBytesOfsha256ofMsg, SHA256_DIGEST_LENGTH, key);                                                                                                                                                                                                                              
int verify = ECDSA_do_verify((const unsigned char*)outBytesOfsha256ofMsg, SHA256_DIGEST_LENGTH, sig, key);                                                                                                                                                                                                                

if(verify != 1) {                                                                                                                                                                                                                                                                                                         
    return ERROR;                                                                                                                                                                                                                                                                                                         
}                                                                                                                                                                                                                                                                                                                         

int buflen = ECDSA_size(key);                                                                                                                                                                                                                                                                                             
buffer = OPENSSL_malloc(buflen);                                                                                                                                                                                                                                                                                          

int derSigLen = i2d_ECDSA_SIG(sig, &buffer);                                                                                                                                                                                                                                                                              

char *hexData = calloc(derSigLen, sizeof(char));                                                                                                                                                                                                                                                                          
memcpy(hexData, buffer-derSigLen, derSigLen);                                                                                                                                                                                                                                                                             

char *hexString = calloc(derSigLen*2+1, sizeof(char));                                                                                                                                                                                                                                                                    

hexString[derSigLen * 2] = '\0';                                                                                                                                                                                                                                                                                          
toHexString(hexData, derSigLen, hexString);                                                                                                                                                                                                                                                                               

memcpy(*signature, hexString, derSigLen*2);                                                                                                                                                                                                                                                                               
signature[derSigLen * 2] = '\0';                                                                                                                                                                                                                                                                                          

EC_KEY_free(key);                                                                                                                                                                                                                                                                                                         

BIO_free_all(in);                                                                                                                                                                                                                                                                                                         
free(sha256ofMsg);                                                                                                                                                                                                                                                                                                        
free(outBytesOfsha256ofMsg);                                                                                                                                                                                                                                                                                              
free(hexData);                                                                                                                                                                                                                                                                                                            
free(hexString);                                                                                                                                                                                                                                                                                                          

return NOERROR;
}                  

And returns Segmentation Fault. The most informative error we have gotten is perl crashed with SIGSEGV in EC_KEY_get_key_method_data()
The full code is here: https://github.com/aleitner/bitpay-perl/tree/stack-overflow-question
Is this a bug with SSL, or are we doing this wrong?
","The answer to this question is: we were calling the arguments in the wrong order.
Seriously. The line: 
$signature = key_utils::mysignMessageWithPem($pem, $message);
needed to be:
$signature = key_utils::mysignMessageWithPem($message, $pem);
We were in fact doing something wrong. I was tempted to remove the question, but maybe the answer can serve as a cautionary tale or something.
","246","<c><perl><openssl><swig><ecdsa>","2","2","1","2015-05-11 17:33:32","30174049","0","1","","","","2015-05-11 14:52:28",""
"29170086","Create keys with python and use it in .net","I try to create keys with the python package ecdsa, export it to der and use them with BouncyCastle under .Net (and vice versa).
This is my code in Python:
import base64
from ecdsa.keys import SigningKey
from ecdsa.curves import NIST521p, NIST384p, NIST256p

@classmethod
def CreateKey(self) -> SigningKey:
    privateKey = SigningKey.generate(NIST256p) 
    return privateKey

@classmethod     
def GetPublicKey(self, privateKey: SigningKey) -> str:
    publicKey = privateKey.get_verifying_key()
    der = publicKey.to_der()
    return base64.b64encode(der)

I get two strings that I want to import in .Net:
        Const plainDerBase64Pub = ""MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEyJW32bO4wswhE9ZC5klCjRNDJQSB0lIBphe9wIa/W2n3fBJ0cDpSpy9qlq2L6sa4W5lgRHYD9IyfETom6YOH/g==""
    Const plainDerBase64Priv = ""MHcCAQEEIKjIPCG9CGMunu34jXnDZg1LmNYrcJo8EqzKbRu2E24MoAoGCCqGSM49AwEHoUQDQgAEyJW32bO4wswhE9ZC5klCjRNDJQSB0lIBphe9wIa/W2n3fBJ0cDpSpy9qlq2L6sa4W5lgRHYD9IyfETom6YOH/g==""

    Dim keyPriv = PrivateKeyFactory.DecryptKey({}, Base64.Decode(plainDerBase64Priv))
    Dim keyPub = PrivateKeyFactory.DecryptKey({}, Base64.Decode(plainDerBase64Pub))

But I get an exception:
Test method LicenseProtectorTest.KeyManagementTest.ImportKeyFromPythonTest threw exception: 
System.ArgumentException: Wrong number of elements in sequence
Parametername: seq
Result StackTrace:  
bei Org.BouncyCastle.Asn1.Pkcs.EncryptedPrivateKeyInfo..ctor(Asn1Sequence seq) in C:\BouncyCastle\crypto\src\asn1\pkcs\EncryptedPrivateKeyInfo.cs:Zeile 18.
   bei Org.BouncyCastle.Asn1.Pkcs.EncryptedPrivateKeyInfo.GetInstance(Object obj) in C:\BouncyCastle\crypto\src\asn1\pkcs\EncryptedPrivateKeyInfo.cs:Zeile 42.
   bei Org.BouncyCastle.Security.PrivateKeyFactory.DecryptKey(Char[] passPhrase, Asn1Object asn1Object) in C:\BouncyCastle\crypto\src\security\PrivateKeyFactory.cs:Zeile 196.
   bei Org.BouncyCastle.Security.PrivateKeyFactory.DecryptKey(Char[] passPhrase, Byte[] encryptedPrivateKeyInfoData) in C:\BouncyCastle\crypto\src\security\PrivateKeyFactory.cs:Zeile 182.
   bei LicenseProtectorTest.KeyManagementTest.ImportKeyFromPythonTest() in ...

Any idea what I'm doing wrong here?
","I'm not familiar with the python library, but I was able to guess at the formats and the following code will parse the example data:
using System;

using Org.BouncyCastle.Asn1.Sec;
using Org.BouncyCastle.Asn1.X9;
using Org.BouncyCastle.Crypto.Parameters;
using Org.BouncyCastle.Security;
using Org.BouncyCastle.Utilities.Encoders;

namespace BCTests
{
    class MainClass
    {
        public static void Main(string[] args)
        {
            var plainDerBase64Pub = ""MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEyJW32bO4wswhE9ZC5klCjRNDJQSB0lIBphe9wIa/W2n3fBJ0cDpSpy9qlq2L6sa4W5lgRHYD9IyfETom6YOH/g=="";
            var plainDerBase64Priv = ""MHcCAQEEIKjIPCG9CGMunu34jXnDZg1LmNYrcJo8EqzKbRu2E24MoAoGCCqGSM49AwEHoUQDQgAEyJW32bO4wswhE9ZC5klCjRNDJQSB0lIBphe9wIa/W2n3fBJ0cDpSpy9qlq2L6sa4W5lgRHYD9IyfETom6YOH/g=="";

            var pubKeyBytes = Base64.Decode(plainDerBase64Pub);
            var privKeyBytes = Base64.Decode(plainDerBase64Priv);

            var pubKey = PublicKeyFactory.CreateKey(pubKeyBytes);

            var privKeyStruct = ECPrivateKeyStructure.GetInstance(privKeyBytes);
            var x9 = ECNamedCurveTable.GetByName(""P-256"");
            var ec = new ECDomainParameters(x9.Curve, x9.G, x9.N, x9.H, x9.GetSeed());
            var privKey = new ECPrivateKeyParameters(privKeyStruct.GetKey(), ec);
        }
    }
}

pubKey and privKey are then ECPublicKeyParameters and ECPrivateKeyParameters that you can use with various algorithms.
Note that DER is an encoding, not really a format. For the public key, the python code is producing a SubjectPublicKeyInfo, which is the standard X.509 format for public keys.
There ought to be an option with the private key of generating a PrivateKeyInfo (or EncryptedPrivateKeyInfo using a password), both of these are formats from the PKCS#8 standard. If the python code can output one of these, then decoding the private key would be easier as just PrivateKeyFactory.CreateKey(bytes) or .DecryptKey(password, bytes).
","240","<python><.net><python-3.x><bouncycastle><ecdsa>","0","1","1","2015-04-16 08:28:05","29669297","0","","","","","2015-03-20 15:23:36",""
"33977131","How to do ECDHE handshake without exportable private key","I'm building an OpenSSL engine that implements ECDSA_METHOD, which includes signature creation and signature verification functions. Since the only usage of ECDHE private key is related to signature creation, having the key exported from the engine and presenting it anywhere else is not required.
However, if I don't supply the private key to SSL_Context through SSL_set_private_key function SSL handshake fails with the error below:
error:14094410:SSL routines:ssl3_read_bytes:sslv3 alert handshake failure

I've also tried to provide a mock key (one that is not related to a public key in the cert) to SSL_set_private_key function, but this function does verify if private/public keys match and throws an error about bad certificate if they don't.
It looks like openssl allows by-passing this validation in some cases, e.g. this is what I found in ssl/ssl_rsa.c
#ifndef OPENSSL_NO_RSA
    /*
     * Don't check the public/private key, this is mostly for smart
     * cards.
     */
    if ((pkey->type == EVP_PKEY_RSA) &&
        (RSA_flags(pkey->pkey.rsa) & RSA_METHOD_FLAG_NO_CHECK)) ;
    else
#endif
    if (!X509_check_private_key(c->pkeys[i].x509, pkey)) {
        X509_free(c->pkeys[i].x509);
        c->pkeys[i].x509 = NULL;
        return 0;
    }

I think, I need something similar for an EC key, but I didn't find it anywhere. Any other solutions are appreciated as well.
","
Any other solutions are appreciated as well.

This might not be the only option you have, but I think that you can achieve what you are looking for by creating your own EVP_PKEY_METHOD and implementing its functions as required. That way, you can store a handle to your own, for example, smart card based key and then invoke the proper sign methods at the right moment. You have to set the proper methods with the EVP_PKEY_meth_set_Xyz() functions, like EVP_PKEY_meth_set_sign(<yourSigningFunction>). For example, if you were using the Windows crypto API, you would have to invoke NCryptSignHash() from your signing function. That way, you do not have to export the private key from the Windows key store to obtain a signature.
I have done this before and the only big thing I ran into (apart from lack of documentation and examples) was a missing key store functionality at the EVP level. There seems to be some work in progress as you can see here. As a work around, I had to select keys/certificates from the a store as part of the key generation mechanism and it is not really intended for that.
If you decide to go this route, then be prepared for a few weeks of trial and error.
","230","<ssl><openssl><ecdsa><openssl-engine><ecdhe>","1","1","2","2015-12-07 21:39:41","","0","","1152643","","2015-11-30 19:46:32","2015-11-28 22:26:06",""
"33977131","How to do ECDHE handshake without exportable private key","I'm building an OpenSSL engine that implements ECDSA_METHOD, which includes signature creation and signature verification functions. Since the only usage of ECDHE private key is related to signature creation, having the key exported from the engine and presenting it anywhere else is not required.
However, if I don't supply the private key to SSL_Context through SSL_set_private_key function SSL handshake fails with the error below:
error:14094410:SSL routines:ssl3_read_bytes:sslv3 alert handshake failure

I've also tried to provide a mock key (one that is not related to a public key in the cert) to SSL_set_private_key function, but this function does verify if private/public keys match and throws an error about bad certificate if they don't.
It looks like openssl allows by-passing this validation in some cases, e.g. this is what I found in ssl/ssl_rsa.c
#ifndef OPENSSL_NO_RSA
    /*
     * Don't check the public/private key, this is mostly for smart
     * cards.
     */
    if ((pkey->type == EVP_PKEY_RSA) &&
        (RSA_flags(pkey->pkey.rsa) & RSA_METHOD_FLAG_NO_CHECK)) ;
    else
#endif
    if (!X509_check_private_key(c->pkeys[i].x509, pkey)) {
        X509_free(c->pkeys[i].x509);
        c->pkeys[i].x509 = NULL;
        return 0;
    }

I think, I need something similar for an EC key, but I didn't find it anywhere. Any other solutions are appreciated as well.
","Here is how you can by-pass openssl validation rules by providing an EC_KEY with a public key set equal to that of public cert and the private key set to any non-zero value (in my example I've just set it equal to the X coordinate of the public key). After the key is created and stored in a file, it can be passed as a regular private key to SSL_Context. 
I think, idealistically openssl should address this issue in a more systematic and transparent way, but until it's done, the suggested solution can be used as a work around:
#include <string.h>
#include <stdio.h>
#include <openssl/ssl.h>
#include <openssl/x509v3.h>


static char * my_prog = ""dummykey"";
static char * key_file = NULL;
static char * cert_file = NULL;
int verbose = 0;

static void print_help() {

    fprintf(stderr,""Version: %s\nUSAGE: %s -cert in_cert_file -key out_key_file\n"",
             VERSION, my_prog);
}

static void parse_args(int argc, char** argv) {

    argc--;
    argv++;

    while (argc >= 1) {
        if (!strcmp(*argv,""-key"")) {
            key_file = *++argv;
            argc--;
        }
        else if (!strcmp(*argv,""-cert"")) {
            cert_file = *++argv;
            argc--;
        }
        else if (!strcmp(*argv,""-v"")) {
            verbose = 1;
        }
        else {
            fprintf(stderr, ""%s: Invalid param: %s\n"", my_prog, *argv);
            print_help();
            exit(1);
        }
        argc--;
        argv++;
    }

    if (key_file == NULL || cert_file == NULL ) {
        print_help();
        exit(1);
    }
}

int get_curve_nid(X509 *c) {
    int ret = 0;

    if (c->cert_info->key->algor->parameter) {
        ASN1_TYPE *p = c->cert_info->key->algor->parameter;
        if (p && p->type == V_ASN1_OBJECT) {
            ret = OBJ_obj2nid(c->cert_info->key->algor->parameter->value.object);
        }
    }
    return ret;
}

int main(int argc, char** argv) {
    X509 *c=NULL;
    FILE *fp=NULL;
    FILE *ofp=NULL;
    EC_POINT *ec_point = NULL;
    BIGNUM *x = NULL;
    BIGNUM *y = NULL;
    EC_KEY *ec_key = NULL;
    EC_GROUP *grp = NULL;

    parse_args(argc, argv);

    fp = fopen(cert_file, ""r"");
    if (!fp) {
        fprintf(stderr,""%s: Can't open %s\n"", my_prog, cert_file);
        return 1;
    }
    c = PEM_read_X509 (fp, NULL, (int (*) ()) 0, (void *) 0);
    if (c) {
        x = BN_new();
        y = BN_new();
        int len = c->cert_info->key->public_key->length-1;
        BN_bin2bn(c->cert_info->key->public_key->data+1, len/2, x);
        BN_bin2bn(c->cert_info->key->public_key->data+1+len/2, len/2, y);

        EC_GROUP *grp = EC_GROUP_new_by_curve_name(get_curve_nid(c));

        ec_key = EC_KEY_new();
        int sgrp = EC_KEY_set_group(ec_key, grp);
        int sprk = EC_KEY_set_private_key(ec_key, x);
        if (sgrp && sprk) {
           ec_point = EC_POINT_new(grp);
            int ac = EC_POINT_set_affine_coordinates_GFp(grp, ec_point, x, y, BN_CTX_new());
            int spub =EC_KEY_set_public_key(ec_key, ec_point);

            ofp = fopen(key_file, ""w"");
            int r = 0;
            if (ofp) {
                r = PEM_write_ECPrivateKey(ofp, ec_key, NULL, NULL, 0, NULL, NULL);
                if (!r)
                        fprintf(stderr,""%s: Can't write EC key %p to %s\n"", my_prog, ec_key, key_file);
            }
            else {
                        fprintf(stderr,""%s: Can't open %s\n"", my_prog, key_file);
            }
        }
    }
    if (ec_key)
        EC_KEY_free(ec_key);
    if (grp)
        EC_GROUP_free(grp);
    if (x)
        BN_free(x);
    if (y)
        BN_free(y);
    if (c)
        X509_free (c);
    if (fp)
        fclose(fp);
    if (ofp)
        fclose(ofp);
    return 0;
}

","230","<ssl><openssl><ecdsa><openssl-engine><ecdhe>","1","0","2","2015-12-07 21:39:41","","0","","1152643","","2015-11-30 19:46:32","2015-11-28 22:26:06",""
"41447919","OpenSSL ECDSA verification performance issue","I'm working on a project where I use ECDSA cryptography. For signature and key generation I use a hardware module, and I do the verification stuff using openssl.
My problem is that a single verification take 12 milliseconds. This is an ARM device (i.MX6 Quad, 4x1Ghz, 2Gb ram), but still, it looks very slow.
I compile using ""arm-poky-linux-gnueabi-g++"", provided by the hardware provider. Using -O3 vs -O0 does not radically change the time needed to verify.
std::vector<unsigned char> digest = sha256(content);
ECDSA_SIG* sig = ...
EC_KEY* ec_key = ...

auto tref = getTimeInMillis();
int result = ECDSA_do_verify(&(digest[0]),digest.size(), sig , ec_key);
auto duration = getTimeInMillis() - tref;
LOG(""call to ECDSA_do_verify "" + std::to_string(duration)+ ""ms"");

This line ECDSA_do_verify take 12ms (the test is done in a batch, this is stable). Do you think this is a reasonable time ?
","","228","<c++><performance><openssl><ecdsa>","0","","0","2017-01-03 16:25:14","","2","","","","","2017-01-03 16:25:14",""
"55742269","Java Exception during signature verification (error decoding signature bytes)","I have to verify a certificate. I'm not an expert of cryptography, so probably I did something (or everything :) ) wrong.
When the code reach the last step (boolean b = sig.verify(CertSign);), it fires an exception: java.security.SignatureException: error decoding signature bytes.
Could someone help me to figure out what I'm doing wrong?
The following is a test code that shows the problem:
    private void test() {
        byte [] CertBody = new byte[]{(byte)0x7F,(byte)0x4E,(byte)0x81,(byte)0x82,
                               (byte)0x5F,(byte)0x29,(byte)0x01,(byte)0x00,
                               (byte)0x42,(byte)0x08,(byte)0xFB,(byte)0x55,
                               (byte)0x54,(byte)0x4F,(byte)0x02,(byte)0xFF,
                               (byte)0xFF,(byte)0x01,(byte)0x5F,(byte)0x4C,
                               (byte)0x07,(byte)0xFF,(byte)0x53,(byte)0x4D,
                               (byte)0x52,(byte)0x44,(byte)0x54,(byte)0x02,
                               (byte)0x7F,(byte)0x49,(byte)0x4E,(byte)0x06,
                               (byte)0x09,(byte)0x2B,(byte)0x24,(byte)0x03,
                               (byte)0x03,(byte)0x02,(byte)0x08,(byte)0x01,
                               (byte)0x01,(byte)0x07,(byte)0x86,(byte)0x41,
                               (byte)0x04,(byte)0x6C,(byte)0x17,(byte)0x5B,
                               (byte)0xB9,(byte)0xEF,(byte)0x5D,(byte)0x02,
                               (byte)0x20,(byte)0x51,(byte)0xCC,(byte)0xB2,
                               (byte)0x89,(byte)0x09,(byte)0x42,(byte)0x15,
                               (byte)0x85,(byte)0xD3,(byte)0x1A,(byte)0xCD,
                               (byte)0xA7,(byte)0x1B,(byte)0x08,(byte)0x4A,
                               (byte)0x48,(byte)0x8F,(byte)0x7B,(byte)0x77,
                               (byte)0x5B,(byte)0x57,(byte)0x9B,(byte)0xB7,
                               (byte)0x41,(byte)0x3B,(byte)0xDA,(byte)0x4C,
                               (byte)0xDE,(byte)0x70,(byte)0x11,(byte)0x17,
                               (byte)0xE0,(byte)0xD9,(byte)0xD1,(byte)0x0F,
                               (byte)0x74,(byte)0xD6,(byte)0x25,(byte)0xB2,
                               (byte)0x86,(byte)0xCA,(byte)0x04,(byte)0x64,
                               (byte)0x54,(byte)0x4F,(byte)0x1B,(byte)0x53,
                               (byte)0xF3,(byte)0x24,(byte)0x02,(byte)0xD3,
                               (byte)0xB3,(byte)0x74,(byte)0xEF,(byte)0xA6,
                               (byte)0xC7,(byte)0x5F,(byte)0x20,(byte)0x08,
                               (byte)0xEA,(byte)0xF4,(byte)0xBE,(byte)0xCC,
                               (byte)0x03,(byte)0x18,(byte)0x02,(byte)0xA3,
                               (byte)0x5F,(byte)0x25,(byte)0x04,(byte)0x5A,
                               (byte)0xAF,(byte)0xA9,(byte)0xDF,(byte)0x5F,
                               (byte)0x24,(byte)0x04,(byte)0x5C,(byte)0x90,
                               (byte)0xDD,(byte)0x5F};

        byte [] CertSign = new byte[]{(byte)0x3D,(byte)0x61,(byte)0x23,
                                      (byte)0xBE,(byte)0x6C,(byte)0x0B,
                                      (byte)0xC1,(byte)0x3E,(byte)0x7A,
                                      (byte)0x2D,(byte)0x60,(byte)0x3D,
                                      (byte)0x28,(byte)0xF0,(byte)0x29,
                                      (byte)0xCC,(byte)0x8C,(byte)0x55,
                                      (byte)0xF1,(byte)0x9A,(byte)0x5C,
                                      (byte)0x7E,(byte)0xBE,(byte)0xFD,
                                      (byte)0x43,(byte)0x27,(byte)0x1A,
                                      (byte)0x9D,(byte)0xA1,(byte)0x7C,
                                      (byte)0x81,(byte)0x09,(byte)0x5C,
                                      (byte)0x1D,(byte)0x26,(byte)0x27,
                                      (byte)0x76,(byte)0x73,(byte)0x74,
                                      (byte)0x87,(byte)0xF9,(byte)0x6C,
                                      (byte)0x2A,(byte)0xC9,(byte)0xA3,
                                      (byte)0x32,(byte)0x3C,(byte)0x60,
                                      (byte)0x51,(byte)0x71,(byte)0x6D,
                                      (byte)0x2F,(byte)0xC0,(byte)0xF6,
                                      (byte)0x89,(byte)0x14,(byte)0x93,
                                      (byte)0xB2,(byte)0xB6,(byte)0x87,
                                      (byte)0x21,(byte)0xAF,(byte)0x01,
                                      (byte)0x42};


        String Algorithm = ""brainpoolP256r1"";

        byte [] PublicPoint = new byte[]{(byte)0x04,(byte)0x68,(byte)0xF8,
                                         (byte)0xD6,(byte)0xB3,(byte)0x94,
                                         (byte)0xD2,(byte)0x8E,(byte)0x2B,
                                         (byte)0x4D,(byte)0xFA,(byte)0x36,
                                         (byte)0x52,(byte)0xAE,(byte)0xAC,
                                         (byte)0xDA,(byte)0xD3,(byte)0x19,
                                         (byte)0x21,(byte)0xC2,(byte)0x12,
                                         (byte)0x8D,(byte)0x58,(byte)0x9F,
                                         (byte)0x4E,(byte)0xF1,(byte)0xB1,
                                         (byte)0xC4,(byte)0x10,(byte)0x97,
                                         (byte)0x29,(byte)0xDC,(byte)0xA8,
                                         (byte)0xA1,(byte)0xC9,(byte)0x53,
                                         (byte)0x04,(byte)0xC8,(byte)0x77,
                                         (byte)0x4F,(byte)0x57,(byte)0xFA,
                                         (byte)0xFB,(byte)0x15,(byte)0x59,
                                         (byte)0xB9,(byte)0x2F,(byte)0x72,
                                         (byte)0x6A,(byte)0xE4,(byte)0x22,
                                         (byte)0x64,(byte)0x3E,(byte)0x1B,
                                         (byte)0x11,(byte)0x8D,(byte)0x69,
                                         (byte)0xAC,(byte)0x36,(byte)0x25,
                                         (byte)0xAD,(byte)0x1C,(byte)0x30,
                                         (byte)0x04,(byte)0xA9};

        if (Security.getProvider(BouncyCastleProvider.PROVIDER_NAME) == null) {
           Security.addProvider(new BouncyCastleProvider());
        }

        ECNamedCurveParameterSpec params1 = ECNamedCurveTable.getParameterSpec(Algorithm);
        try {
            KeyFactory fact = KeyFactory.getInstance(""ECDSA"", ""BC"");
            ECCurve curve = params1.getCurve();
            java.security.spec.EllipticCurve ellipticCurve = EC5Util.convertCurve(curve, params1.getSeed());
            java.security.spec.ECPoint point=ECPointUtil.decodePoint(ellipticCurve, PublicPoint);
            java.security.spec.ECParameterSpec params2=EC5Util.convertSpec(ellipticCurve, params1);
            java.security.spec.ECPublicKeySpec keySpec = new java.security.spec.ECPublicKeySpec(point,params2);
            ECPublicKey PK = (ECPublicKey)fact.generatePublic(keySpec);
            Signature sig;
            sig = Signature.getInstance(""ECDSA"", ""BC"");
            sig.initVerify(PK);
            sig.update(CertBody);
            boolean b = sig.verify(CertSign);
            if (b)
            {
                Logger.getLogger(CardManager.class.getName()).log(Level.INFO, ""verificato"");
            }
        } catch (NoSuchAlgorithmException | NoSuchProviderException | InvalidKeySpecException | InvalidKeyException | SignatureException ex) {
            Logger.getLogger(""test"").log(Level.SEVERE, null, ex);
        }
    } 

I Expected to have the b equals true (or false) but instead I get the following exception:
_java.security.SignatureException: error decoding signature bytes.
    at org.bouncycastle.jcajce.provider.asymmetric.util.DSABase.engineVerify(DSABase.java:80)
    at java.security.Signature$Delegate.engineVerify(Signature.java:1223)
    at java.security.Signature.verify(Signature.java:656)_

","Reason for the Exception
As already mentioned in the comments to the question, the length of the signature differs from the expected length.
The exception happens, since a DER encoded signature with 70 bytes is expected, but your CertSign contains only 64 bytes. 
Assumptions
Since it is 64 bytes, one could assume that it is an ECDSA signature consisting of two concatenated BigInteger numbers with 32 bytes each.  
Conversion of ECDSA signature to DER encoded signature
To convert that to a DER encoded signature one can use sth like:
private byte[] DEREncodeSignature(byte [] signature) throws IOException {
    BigInteger r = new BigInteger(1, Arrays.copyOfRange(signature, 0, 32));
    BigInteger s = new BigInteger(1, Arrays.copyOfRange(signature, 32, 64));
    ASN1EncodableVector v = new ASN1EncodableVector();
    v.add(new ASN1Integer(r));
    v.add(new ASN1Integer(s));
    return new DERSequence(v).getEncoded(ASN1Encoding.DER);
}

Then the lines in your code where you use the signature needs to be adjusted, e.g. to sth like this:
    boolean b = sig.verify(DEREncodeSignature(CertSign));
    if (b) {
        Logger.getLogger(CardManager.class.getName()).log(Level.INFO, ""verificato"");
    }
    else {
        Logger.getLogger(CardManager.class.getName()).log(Level.INFO, ""controllo fallito"");
    }

Quick Test
The exception is then gone, the output in the debug console looks like this:
May 11, 2019 5:09:48 PM CardManager test
INFO: controllo fallito

So the verification actually fails, but you mention that you expect b to be either true or false, so maybe it's the right result. But without having more data this is not possible to validate. 
Further Tests
I also quickly tried different signature algorithms with your code. For each of them one gets a false. 
String[] signatureAlgorithms = new String[] {""RIPEMD160withECDSA"", ""SHA224withECDDSA"", ""SHA256withECDDSA"", ""SHA384withECDDSA"", ""SHA512withECDDSA"", ""SHA1withECDSA"", ""NONEwithECDSA"", ""SHA224withECDSA"", ""SHA256withECDSA"", ""SHA384withECDSA"", ""SHA512withECDSA"", ""SHA3-224withECDSA"", ""SHA3-256withECDSA"", ""SHA3-384withECDSA"", ""SHA3-512withECDSA""};
for(String algorithm : signatureAlgorithms) {
    Signature sig;
    Logger.getLogger(CardManager.class.getName()).log(Level.INFO, ""trying aloorithm "" + algorithm + "": "");
    sig = Signature.getInstance(algorithm, ""BC"");
    ...

Still - without further data (e.g. used signature algorithm etc.) it is difficult to say what the reason for the mismatch is. 
Use Different Test Data
To verify that the routines including the new DEREncodeSignature is working correctly I signed the message 'Hello world!' with ECDSA generator using the brainpoolP256r1 parameter spec and SHA256withECDDSA signature algorithm, then the data looks like this: 
byte[] CertBody = new byte[]{(byte) 0x48,
        (byte) 0x65, (byte) 0x6C, (byte) 0x6C,
        (byte) 0x6F, (byte) 0x20, (byte) 0x77,
        (byte) 0x6F, (byte) 0x72, (byte) 0x6C,
        (byte) 0x64, (byte) 0x21};

byte[] CertSign = new byte[]{
        (byte)0x0C,(byte)0x5B,(byte)0xE9,
        (byte)0xA4,(byte)0xF7,(byte)0xC9,
        (byte)0x5A,(byte)0x69,(byte)0x8E,
        (byte)0x91,(byte)0x50,(byte)0xB4,
        (byte)0x4E,(byte)0x33,(byte)0x14,
        (byte)0x7C,(byte)0x2F,(byte)0x15,
        (byte)0x93,(byte)0x97,(byte)0x8B,
        (byte)0xD8,(byte)0x65,(byte)0x20,
        (byte)0x1B,(byte)0x1D,(byte)0xF4,
        (byte)0x8A,(byte)0xB3,(byte)0x81,
        (byte)0x55,(byte)0x6A,

        (byte)0x96,
        (byte)0xE4,(byte)0x89,(byte)0x05,
        (byte)0x80,(byte)0xAA,(byte)0x34,
        (byte)0x3A,(byte)0x86,(byte)0x11,
        (byte)0x5F,(byte)0x0B,(byte)0x8F,
        (byte)0xF7,(byte)0xE7,(byte)0xA6,
        (byte)0x7D,(byte)0xCC,(byte)0x9C,
        (byte)0xD0,(byte)0xC8,(byte)0x94,
        (byte)0xCA,(byte)0x78,(byte)0x9C,
        (byte)0xFE,(byte)0x41,(byte)0x2A,
        (byte)0xB0,(byte)0xE1,(byte)0x7E,
        (byte)0x29,
};

byte[] PublicPoint = new byte[]{
        (byte) 0x04,
        (byte) 0x1E, (byte) 0xC8, (byte) 0xB7,
        (byte) 0x00, (byte) 0xF1, (byte) 0xFD,
        (byte) 0x06, (byte) 0x97, (byte) 0x73,
        (byte) 0x71, (byte) 0x09, (byte) 0x12,
        (byte) 0xF2, (byte) 0xB7, (byte) 0xEF,
        (byte) 0xA5, (byte) 0x23, (byte) 0xA1,
        (byte) 0xC1, (byte) 0x6C, (byte) 0xA7,
        (byte) 0xD1, (byte) 0x0C, (byte) 0x25,
        (byte) 0x6E, (byte) 0x04, (byte) 0x09,
        (byte) 0x7A, (byte) 0x62, (byte) 0xC3,
        (byte) 0x0E, (byte) 0x93, (byte) 0x54,
        (byte) 0x7F, (byte) 0x0C, (byte) 0xE4,
        (byte) 0x0F, (byte) 0xF8, (byte) 0x63,
        (byte) 0x82, (byte) 0x6D, (byte) 0x0B,
        (byte) 0x50, (byte) 0xC0, (byte) 0x59,
        (byte) 0x1F, (byte) 0xFC, (byte) 0x36,
        (byte) 0x1B, (byte) 0x0E, (byte) 0x2A,
        (byte) 0xA3, (byte) 0xD4, (byte) 0x29,
        (byte) 0x4E, (byte) 0x30, (byte) 0x91,
        (byte) 0x44, (byte) 0x28, (byte) 0x2E,
        (byte) 0x15, (byte) 0x76, (byte) 0x48,
        (byte) 0xE7
};

If that data is taken and run through the routines incl. DEREncodeSignature then the following output is shown in the debug console:
May 12, 2019 12:13:42 AM CardManager test
INFO: verificato

(using sig = Signature.getInstance(""SHA256withECDDSA"", ""BC""); of course)
This means that for ECDSA generated data with brainpoolP256r1 parameter spec and SHA256withECDDSA it would work with the alternative test data. 
","226","<java><security><digital-signature><ecdsa><der>","0","2","1","2019-05-11 22:32:55","56091579","4","","2855231","","2019-04-19 12:03:41","2019-04-18 08:42:20",""
"48933231","Is there any ECDSA Attack if I have millions of signatures?","I have been given the task to test the security of our company software. Our company software generates ecdsa signed supply order files. One can generate as many files as he wants.
so my question is Is there any ECDSA Attack if I have millions of signatures?
we are using 112bit prime curve order: 4451685225093714776491891542548933
I have calculated 1 million signatures using the following method:
public void GenerateSignature()
{
    //curve order
    BigInteger n = ec.N;

    Ramdom rand = new Random();

    //private key
    BigInteger d = ((ECPrivateKeyParameters)key).D;

    //loop for 1 million signatures
    for (int i = 1; i <= 1000000; i++)
    {
        //random k and e
        BigInteger e = new BigInteger(112, rand).Mod(n);        //new biginteger by giving bitlength and random
        BigInteger k = new BigInteger(112, rand).Mod(n);

        //calculate r
        BigInteger r = key.Parameters.G.Multiply(k).X.ToBigInteger().Mod(n);

        //calculate s
        BigInteger s = k.ModInverse(n).Multiply(e.Add(d.Multiply(r))).Mod(n);

        //save generated signatures to database
        new DBCon().ExecuteNonQuery(""Insert into signatures values ('"" + e.ToString() + ""', '"" + r.ToString() + ""', '"" + s.ToString() + ""')"");
    }   
}

I am using BouncyCastle crypto library with C#.
I know private key can be calculated if k values is known by d = (sk - e) / r
I also know private key can be calculated if two signatures have identical r value then we can calculate k by k = (e1 - e2) / (s1 - s2) and then d by using above formula.
I also know that private key can be calculated if some bits of k are known using about 100 signatures with lattice attacks, but in this case bits of k are unknown.
any help will be appreciated.
Thanks.
","","225","<c#><bouncycastle><ecdsa><signatures>","1","","0","2018-03-25 22:40:05","","2","","2679518","","2018-03-25 22:40:05","2018-02-22 17:02:40",""
"51700529","BouncyCastle implematetion on iOS","I have implemented ECDSA on android using bouncyCastle with the help of this link: https://snipplr.com/view/18368/
Now I am stuck in iOS implementation as bouncyCastle doesn't support on iOS and I want to develop similar input and output relationship for digital verification module for SHA256 and particular curve. 
please help.
","","224","<ios><swift><ecdsa>","0","","0","2018-08-06 04:24:12","","2","1","","","","2018-08-06 04:24:12",""
"32151835","How to create ECDSA key pair without openssl","I am writing a cross-platform application in c++. I would like to know if it is possible to create an ECDSA key pair (public key and private key) without using any external library, just pure c++. Any answer leading me to the right path would be much appreciated.
","","222","<c++><public-key-encryption><ecdsa>","1","","0","2015-08-22 03:01:42","","2","","","","","2015-08-22 03:01:42",""
"50874497","SSH Server sending different Keys for authentication (RSA & ECDSA) & in RSA mode unable to login","Came across an SSH key based issue : 
SSH Client : HALP-GRDB
SSH Server (has 2 IPs for management & service) : 10.100.113.55 and 
                                                  10.100.114.55
SSH to the Server IP 10.100.113.55
[root@HALP-GRDB .ssh]# ssh rapid@10.100.113.55
The authenticity of host '10.100.113.55 (10.100.113.55)' can't be established.
ECDSA key fingerprint is c8:d7:70:6c:1b:13:99:d8:76:0b:dc:25:84:a1:e7:86.
Are you sure you want to continue connecting (yes/no)? yes
Warning: Permanently added '10.100.113.55' (ECDSA) to the list of known hosts.
rapid@10.100.113.55's password:
[rapid@HALP-MSERV1 ~]$

All is good and am able to login via ECDSA Key
Now SSH to the alternate IP 10.100.114.55
Things get weirder ,
And RSA key has been asked for auth 
> [root@HALP-GRDB .ssh]# ssh rapid@10.100.114.55 The authenticity of
> host '10.100.114.55 (10.100.114.55)' can't be established. RSA key
> fingerprint is c8:b7:31:02:75:b5:48:12:ef:9a:d7:95:91:0d:c0:f5. Are
> you sure you want to continue connecting (yes/no)? yes Warning:
> Permanently added '10.100.114.55' (RSA) to the list of known hosts.
> ################################################################################
>                                 !!!!! WARNING !!!!!
>                               For authorized use only!
>                    Any unauthorized use of this system is unlawful.
>     Any use of this system may be logged or monitored without further notice.
>                                 !!!!! WARNING !!!!!
> ################################################################################                            User Authentication Password:  User Authentication Password: User
> Authentication Password:
  Authentication Password:
  Authentication Password:
Received disconnect from 10.100.114.55: 2:
> The connection is closed by SSH server

And even after entering the correct password , am kicked out
Server side sshd_config file :
cat /etc/ssh/sshd_config
#       $OpenBSD: sshd_config,v 1.100 2016/08/15 12:32:04 naddy Exp $

# This is the sshd server system-wide configuration file.  See
# sshd_config(5) for more information.

# This sshd was compiled with PATH=/usr/local/bin:/usr/bin

# The strategy used for options in the default sshd_config shipped with
# OpenSSH is to specify options with their default value where
# possible, but leave them commented.  Uncommented options override the
# default value.

# If you want to change the port on a SELinux system, you have to tell
# SELinux about this change.
# semanage port -a -t ssh_port_t -p tcp #PORTNUMBER
#
#Port 22
#AddressFamily any
#ListenAddress 0.0.0.0
#ListenAddress ::

HostKey /etc/ssh/ssh_host_rsa_key
#HostKey /etc/ssh/ssh_host_dsa_key
HostKey /etc/ssh/ssh_host_ecdsa_key
HostKey /etc/ssh/ssh_host_ed25519_key

# Ciphers and keying
#RekeyLimit default none

# Logging
#SyslogFacility AUTH
SyslogFacility AUTHPRIV
#LogLevel INFO

# Authentication:

#LoginGraceTime 2m
PermitRootLogin no
#StrictModes yes
#MaxAuthTries 6
#MaxSessions 10

#PubkeyAuthentication yes

# The default is to check both .ssh/authorized_keys and .ssh/authorized_keys2
# but this is overridden so installations will only check .ssh/authorized_keys
AuthorizedKeysFile      .ssh/authorized_keys

#AuthorizedPrincipalsFile none

#AuthorizedKeysCommand none
#AuthorizedKeysCommandUser nobody

# For this to work you will also need host keys in /etc/ssh/ssh_known_hosts
#HostbasedAuthentication no
# Change to yes if you don't trust ~/.ssh/known_hosts for
# HostbasedAuthentication
#IgnoreUserKnownHosts no
# Don't read the user's ~/.rhosts and ~/.shosts files
#IgnoreRhosts yes

# To disable tunneled clear text passwords, change to no here!
#PasswordAuthentication yes
#PermitEmptyPasswords no
PasswordAuthentication yes

# Change to no to disable s/key passwords
#ChallengeResponseAuthentication yes
ChallengeResponseAuthentication no

# Kerberos options
#KerberosAuthentication no
#KerberosOrLocalPasswd yes
#KerberosTicketCleanup yes
#KerberosGetAFSToken no
#KerberosUseKuserok yes

# GSSAPI options
GSSAPIAuthentication yes
GSSAPICleanupCredentials no
#GSSAPIStrictAcceptorCheck yes
#GSSAPIKeyExchange no
#GSSAPIEnablek5users no

# Set this to 'yes' to enable PAM authentication, account processing,
# and session processing. If this is enabled, PAM authentication will
# be allowed through the ChallengeResponseAuthentication and
# PasswordAuthentication.  Depending on your PAM configuration,
# PAM authentication via ChallengeResponseAuthentication may bypass
PermitRootLogin no
# If you just want the PAM account and session checks to run without
# PAM authentication, then enable this but set PasswordAuthentication
# and ChallengeResponseAuthentication to 'no'.
# WARNING: 'UsePAM no' is not supported in Red Hat Enterprise Linux and may cause several
# problems.
UsePAM yes

#AllowAgentForwarding yes
#AllowTcpForwarding yes
#GatewayPorts no
X11Forwarding yes
#X11DisplayOffset 10
#X11UseLocalhost yes
#PermitTTY yes
#PrintMotd yes
#PrintLastLog yes
#TCPKeepAlive yes
#UseLogin no
#UsePrivilegeSeparation sandbox
#PermitUserEnvironment no
#Compression delayed
ClientAliveInterval 600
#ClientAliveCountMax 3
#ShowPatchLevel no
#UseDNS yes
#PidFile /var/run/sshd.pid
#MaxStartups 10:30:100
#PermitTunnel no
#ChrootDirectory none
#VersionAddendum none

# no default banner path
#Banner none

# Accept locale-related environment variables
AcceptEnv LANG LC_CTYPE LC_NUMERIC LC_TIME LC_COLLATE LC_MONETARY LC_MESSAGES
AcceptEnv LC_PAPER LC_NAME LC_ADDRESS LC_TELEPHONE LC_MEASUREMENT
AcceptEnv LC_IDENTIFICATION LC_ALL LANGUAGE
AcceptEnv XMODIFIERS

# override default of no subsystems
Subsystem       sftp    /usr/libexec/openssh/sftp-server

# Example of overriding settings on a per-user basis
#Match User anoncvs
#       X11Forwarding no
#       AllowTcpForwarding no
#       PermitTTY no
#       ForceCommand cvs server

Server side ssh_config file :
[root@HALP-MSERV1 .ssh]# cat /etc/ssh/ssh_config
#       $OpenBSD: ssh_config,v 1.30 2016/02/20 23:06:23 sobrado Exp $

# This is the ssh client system-wide configuration file.  See
# ssh_config(5) for more information.  This file provides defaults for
# users, and the values can be changed in per-user configuration files
# or on the command line.

# Configuration data is parsed as follows:
#  1. command line options
#  2. user-specific file
#  3. system-wide file
# Any configuration value is only changed the first time it is set.
# Thus, host-specific definitions should be at the beginning of the
# configuration file, and defaults at the end.

# Site-wide defaults for some commonly used options.  For a comprehensive
# list of available options, their meanings and defaults, please see the
# ssh_config(5) man page.

# Host *
#   ForwardAgent no
#   ForwardX11 no
#   RhostsRSAAuthentication yes
#   RSAAuthentication yes
#   PasswordAuthentication yes
#   HostbasedAuthentication no
#   GSSAPIAuthentication no
#   GSSAPIDelegateCredentials no
#   GSSAPIKeyExchange no
#   GSSAPITrustDNS no
#   BatchMode no
#   CheckHostIP yes
#   AddressFamily any
#   ConnectTimeout 0
#   StrictHostKeyChecking ask
#   IdentityFile ~/.ssh/identity
#   IdentityFile ~/.ssh/id_rsa
#   IdentityFile ~/.ssh/id_dsa
#   IdentityFile ~/.ssh/id_ecdsa
#   IdentityFile ~/.ssh/id_ed25519
#   Port 22
#   Protocol 2
#   Cipher 3des
#   Ciphers aes128-ctr,aes192-ctr,aes256-ctr,arcfour256,arcfour128,aes128-cbc,3des-cbc
#   MACs hmac-md5,hmac-sha1,umac-64@openssh.com,hmac-ripemd160
#   EscapeChar ~
#   Tunnel no
#   TunnelDevice any:any
#   PermitLocalCommand no
#   VisualHostKey no
#   ProxyCommand ssh -q -W %h:%p gateway.example.com
#   RekeyLimit 1G 1h
#
# Uncomment this if you want to use .local domain
# Host *.local
#   CheckHostIP no

Host *
        GSSAPIAuthentication yes
# If this option is set to yes then remote X11 clients will have full access
# to the original X11 display. As virtually no X11 client supports the untrusted
# mode correctly we set this to yes.
        ForwardX11Trusted yes
# Send locale-related environment variables
        SendEnv LANG LC_CTYPE LC_NUMERIC LC_TIME LC_COLLATE LC_MONETARY LC_MESSAGES
        SendEnv LC_PAPER LC_NAME LC_ADDRESS LC_TELEPHONE LC_MEASUREMENT
        SendEnv LC_IDENTIFICATION LC_ALL LANGUAGE
        SendEnv XMODIFIERS

Appreciate your expert opinions for the rectification of the same .
Thanks !! 
","","220","<ssh><rsa><ecdsa>","0","","0","2018-06-15 11:34:37","","2","","9730164","","2018-06-15 11:34:37","2018-06-15 11:17:17",""
"53734440","How to sign ECDSA with pem private key?","I have private key with pem format.
-----BEGIN EC PRIVATE KEY-----
MHQCAQEEIBAFWFAlCWPb8IvM4yHLLKBIN/mEJU9cZnM5JD2U2EmAoAcGBSuBBAAK
oUQDQgAErMGUjbHcEf7Gk9gVOOlWdqSaGc0YhE5HBPqhoniBUG8MTx5AT7mxtuyn
QkydMeOciHyvvyU0gf81UW9udef2nA==
-----END EC PRIVATE KEY-----

I want to sign with ruby code like following.
require 'ecdsa'
def sign(str)
    digest = Digest::SHA256.digest(str) 
    temp_key = str.size 
    signature = ECDSA.sign($group, $private_key, digest, temp_key)
end

I want to know how to code for reading PEM private key file and using to sign.
","To parse your key stored in PEM format, you can use the openssl module: sudo gem install openssl
Using this module, you will extract the private key this way: OpenSSL::PKey::EC.new(pemcontent).private_key
Note that your private key is based on the secp256k1 elliptic curve:
% openssl ec -text 2>&1 << EOF | grep OID
-----BEGIN EC PRIVATE KEY-----
MHQCAQEEIBAFWFAlCWPb8IvM4yHLLKBIN/mEJU9cZnM5JD2U2EmAoAcGBSuBBAAK
oUQDQgAErMGUjbHcEf7Gk9gVOOlWdqSaGc0YhE5HBPqhoniBUG8MTx5AT7mxtuyn
QkydMeOciHyvvyU0gf81UW9udef2nA==
-----END EC PRIVATE KEY-----
EOF
ASN1 OID: secp256k1

Therefore, the first parameter to give to EDSA.sign() must be ECDSA::Group::Secp256k1. This is an object that contains the parameters that define this curve.
Finally, here is your code, on which I've made the changes needed to make it work:
require 'ecdsa'
require 'openssl'

def sign(str)
  pemcontent = ""-----BEGIN EC PRIVATE KEY-----
MHQCAQEEIBAFWFAlCWPb8IvM4yHLLKBIN/mEJU9cZnM5JD2U2EmAoAcGBSuBBAAK
oUQDQgAErMGUjbHcEf7Gk9gVOOlWdqSaGc0YhE5HBPqhoniBUG8MTx5AT7mxtuyn
QkydMeOciHyvvyU0gf81UW9udef2nA==
-----END EC PRIVATE KEY-----""
  digest = Digest::SHA256.digest(str)
  temp_key = str.size
  signature = ECDSA.sign(ECDSA::Group::Secp256k1, OpenSSL::PKey::EC.new(pemcontent).private_key, digest, temp_key)
  return signature
end

Note: the value of temp_key should be generated with a more random way than using the length of the message to sign, like you did in your example code (it is a very very bad idea since soon or later, you will sign two messages with the same length, and this could let your private key been discovered).
","216","<digital-signature><ruby><ecdsa>","0","0","1","2018-12-19 23:09:22","","1","","","","","2018-12-09 15:10:49",""
"46730753","How to change the key length of ECDSA?","Recently, I was trying to do something with the code of ECDSA.  I want to change the key length of it but in vain. I checked the internet and found some source code of ECDSA, but somehow it only allows 32 bytes.
For example, I found this:
var crypto = require(""crypto"");
var eccrypto = require(""eccrypto"");     

// A new random 32-byte private key.
var privateKey = crypto.randomBytes(32);

// Corresponding uncompressed (65-byte) public key.
var publicKey = eccrypto.getPublic(privateKey);

var str = ""message to sign"";

// Always hash you message to sign!    
var msg = crypto.createHash(""sha256"").update(str).digest();

eccrypto.sign(privateKey, msg).then(function(sig) {
   console.log(""Signature in DER format:"", sig);
   eccrypto.verify(publicKey, msg, sig).then(function() {    
      console.log(""Signature is OK"");
   }).catch(function() {    
      console.log(""Signature is BAD"");
   });
});

from this website. I tried to change the privateKey from 32 bytes to 16 bytes and other values. It ended up giving me errors.
Recently I discovered that to have different key length you need different curves. Does anybody know how to change the curve in the above code? If not, would someone provide source code that can use different key lengths of ECDSA?
(I'm quite new to ECC, so if I used wrong terms or I completely misunderstood the concept of it, please forgive).
","According to https://github.com/bitchan/eccrypto#implementation-details (which looks like the right library for your code) the library only supports the secp256k1 curve.
Most other libraries, if given no context other than the curve being a 256-bit curvespace, will assume it is secp256r1 (r instead of k), meaning that the library you chose doesn't interoperate with a lot of libraries.  (For example, Windows 7, 8, and 8.1 cannot do secp256k1 using the OS-provided cryptographic libraries)
So for ""how do I use a different sized key with this library?"" the answer is ""you can't, sorry"".  And for ""what library can I use, then?"" the answer is ""sorry, that's outside the scope of StackOverflow"".
","210","<javascript><digital-signature><elliptic-curve><ecdsa>","-1","1","1","2017-10-13 16:30:02","","1","","472495","","2017-10-13 16:30:02","2017-10-13 13:09:24",""
"43213932","Different output while using openssl_sign() in PHP","I recent tried to use PHP openssl extension with an ecdsa self signed certificate that i've issued using this tutorial create-a-self-signed-ecc-certificate. I have used function openssl_sign() as described in PHP manual. I've notice every time i refresh the web page , i got different signature output. Can anyone explain what happen? And is there any manner to get the same signature output every time with ecdsa certificate?
","A component of generating an ECDSA signature is generating a random number (k).
Since each call to sign will generate a distinct random number, there's no way to produce a deterministic certificate with ECDSA (aside from doing all of the ECC math yourself, and choosing k; or finding a library somewhere which lets k be specified).
","210","<php><openssl><ecdsa>","0","0","1","2017-04-06 15:47:47","43259952","0","","","","","2017-04-04 17:31:23",""
"50115208","Verify SHA1withECDSA signature on Scala","I am trying to write simple code for creating public/private keys, signing and verifying ECDSA signature. I have no idea why verification returns false. Please help me.
** I also tried to set provider to ""SunEC"" but it still doesn't work
val signatureECDSA = ""SHA1withECDSA""

val signatureInstance = Signature.getInstance(signatureECDSA)

def sign(text: String, privateKey: PrivateKey): Array[Byte] = {

  signatureInstance.initSign(privateKey)
  signatureInstance.update(text.getBytes(""UTF-8""))
  signatureInstance.sign
}

def verify(signature: Array[Byte], publicKey: PublicKey): Boolean = {

  signatureInstance.initVerify(publicKey)
  signatureInstance.verify(signature)
}

def createPrivatePublicKeyPair(): Unit = {

  val keyGen = KeyPairGenerator.getInstance(""EC"")
  val ecSpec = new ECGenParameterSpec(""secp256k1"")
  keyGen.initialize(ecSpec)

  val keyPair = keyGen.generateKeyPair
  val publicKey = keyPair.getPublic
  val privateKey = keyPair.getPrivate

  val ecPrivateKey = privateKey.asInstanceOf[ECPrivateKey]
  val ecPublicKey = publicKey.asInstanceOf[ECPublicKey]

  val msg = ""This is a message""

  val signature = sign(msg, ecPrivateKey)

  System.out.println(""Signature: "" + new BigInteger(1, signature).toString(16))

  val result = verify(signature, ecPublicKey)
  System.out.println(""public key matched with signature "" + result)
}

","The signature does encapsulate the hash over the data in some way or other. In the case of RSA signatures the hash is simply contained in the signature. In the case of ECDSA the hash is used within the signature calculation and cannot be retrieved, but it can of course still be used to verify the signature.
What is not included in the signature is the data over which the signature is calculated. Instead you need to provide the data using signatureInstance.update(text.getBytes(""UTF-8"")) in the verification method, just as in the method that generates the signature.
","208","<java><scala><digital-signature><ecdsa><key-pair>","1","1","1","2018-05-11 19:15:07","50298874","2","","2332830","","2018-05-01 14:43:00","2018-05-01 10:49:44",""
"47145179","how I can make public key from private (ecdsa) in java without Bouncy Castle?","I have private key (ecdsa,secp256r1).  
private final static String SHA = ""SHA-256"";
        private final static String MODE = ""EC"";
        private final static String PROV = ""SunEC"";
        private final static String ECC_ALGO = ""secp256r1"";

public static KeyPair eccKeyGen() {


                KeyPairGenerator kpg;
                KeyPair kp = null;
                try {
                        kpg = KeyPairGenerator.getInstance(MODE, PROV);
                        ECGenParameterSpec ecsp;
                        ecsp = new ECGenParameterSpec(ECC_ALGO);
                        kpg.initialize(ecsp);
                        kp = kpg.genKeyPair();
                        return kp;
                } catch (Exception e) {
                        System.out.println(""Key generation error."");
                        e.printStackTrace();
                }
                return kp;

How I can make public key from it in java without Bouncy Castle?
","Assuming your private key is in an OpenSSH format, you can use the -y option for ssh-keygen. For example, if your private is contained in mykeythe following command will generate its public key
ssh-keygen -y -f mykey > mykey.pub

","205","<java><ecdsa>","-1","0","1","2017-11-06 20:42:35","","1","","8896360","","2017-11-06 20:42:35","2017-11-06 20:26:55",""
"51970086","Android Java Spongycastle ECDSA Signature to subtle.crypto Javascript","I'm importing a set of values from my website which is writen in Javascript using subtle.crypto for signing messages. In the QR Code I put the X, Y and D values of the key from Javascript, this is my code to replicate the key:
public static KeyPair GenerateExistingKeyPair(String d, String x, String y) throws NoSuchProviderException, NoSuchAlgorithmException, InvalidKeySpecException {
    Security.insertProviderAt(new org.spongycastle.jce.provider.BouncyCastleProvider(), 1);
    Log.d(TAG, ""GenerateExistingKeyPair: PrivateKey D: "" + d);
    Log.d(TAG, ""GenerateExistingKeyPair: PublicKey X: "" + x);
    Log.d(TAG, ""GenerateExistingKeyPair: PublicKey Y: "" + y);

    BigInteger privateD = decode(d);
    BigInteger publicX = decode(x);
    BigInteger publicY = decode(y);

    KeyFactory keyFactory = KeyFactory.getInstance(""ECDSA"", BouncyCastleProvider.PROVIDER_NAME);;
    ECParameterSpec ecSpec = ECNamedCurveTable.getParameterSpec(""P-256"");
    ECPoint Q = ecSpec.getG().multiply(privateD);

    ECPrivateKeySpec privSpec = new ECPrivateKeySpec(privateD, ecSpec);
    ECPublicKeySpec pubSpec = new ECPublicKeySpec(Q, ecSpec);

    PrivateKey privKey = keyFactory.generatePrivate(privSpec);
    PublicKey pubKey = keyFactory.generatePublic(pubSpec);

    KeyPair keyPair = new KeyPair(pubKey, privKey);
    Log.d(TAG, ""GenerateExistingKeyPair: KeyPair: "" + keyPair.getPrivate().toString());
    Log.d(TAG, ""GenerateExistingKeyPair: "" + Hex.toHexString(privKey.getEncoded()));
    return keyPair;

}

The ""decode"" I use because those values are stored in Base64 within Javascript.
public static BigInteger decode(String value) {
    byte[] decoded = android.util.Base64.decode(value, android.util.Base64.URL_SAFE);
    BigInteger bigInteger = new BigInteger(Hex.toHexString(decoded), 16);
    return bigInteger;
}

Now here is the output from that.
    D/ECDSA:: GenerateExistingKeyPair: PrivateKey D: m-lI_bV8YoNgAgNGpccXPdNtRJ4I6k0hdMdKD7NDYlI
          GenerateExistingKeyPair: PublicKey X: BadCycqeFycXoL4ONkATL7vu1ZxlF66JmrSgbE2A4eY
          GenerateExistingKeyPair: PublicKey Y: obTA6W6xluIdXcqRjnvq0Nh-_IfiWKV4FWziJFxXHUo
D/ECDSA:: GenerateExistingKeyPair: KeyPair: EC Private Key [ed:66:72:8b:8c:1d:97:b9:82:0b:11:c8:1f:6e:db:aa:0e:bd:67:43]
                      X: 5a742c9ca9e172717a0be0e3640132fbbeed59c6517ae899ab4a06c4d80e1e6
                      Y: a1b4c0e96eb196e21d5dca918e7bead0d87efc87e258a578156ce2245c571d4a

As far as I can tell, the X and Y are correct, converting them back using Base64 gives me the exact same value as those I received. Now I get to the part to Hash a message and send the transaction thruough JSON using WebRTC.
public static byte[] signTransaction(Wallet wallet, byte[] msgHash) throws Exception {

    Security.insertProviderAt(new org.spongycastle.jce.provider.BouncyCastleProvider(), 1);
    Signature ecdsaSign = Signature.getInstance(""SHA256withECDSA"", BouncyCastleProvider.PROVIDER_NAME);
    ecdsaSign.initSign(wallet.getKeyPair().getPrivate());
    ecdsaSign.update(msgHash);
    byte[] signature = ecdsaSign.sign();
    Log.d(TAG, ""signTransaction: "" + new BigInteger(1, signature).toString(16));

    return signature;

}

This is the signature I receive:
3045022026728f6d621689955126e52ca04e5ad7d3f5633111c32ca79979022fc48f7155022100ed94989a8f9fb6bb804ee041cb2923b6ecc17876fbc55c559c93ab9becac415f

After a bit of research I found out that ECDSA signatures in Java are ANS1 DER encoded and signatures in javascript uses P1363 format which are just the R and S of the signature.
So after some research I found out how to extract those values from the signature.
public static BigInteger extractR(byte[] signature) throws Exception {
    int startR = (signature[1] & 0x80) != 0 ? 3 : 2;
    int lengthR = signature[startR + 1];
    return new BigInteger(Arrays.copyOfRange(signature, startR + 2, startR + 2 + lengthR));
}

public static BigInteger extractS(byte[] signature) throws Exception {
    int startR = (signature[1] & 0x80) != 0 ? 3 : 2;
    int lengthR = signature[startR + 1];
    int startS = startR + 2 + lengthR;
    int lengthS = signature[startS + 1];
    return new BigInteger(Arrays.copyOfRange(signature, startS + 2, startS + 2 + lengthS));
}

Which gave me the following values:
26728f6d621689955126e52ca04e5ad7d3f5633111c32ca79979022fc48f7155
ed94989a8f9fb6bb804ee041cb2923b6ecc17876fbc55c559c93ab9becac415f

In a last attempt I tried to put those two strings togheter and send them to the Javascript side, but it couldnt validate, these two values side by side are the same size in characters as the signatures generated in Javascript, but the method 
await window.crypto.subtle.verify({name: ""ECDSA"", hash: {name: ""SHA-256""},}, publicKey, signature, data)

In javascript still returns false.
My question is, how can I make the signatures compatible between Java and Javascript? Can I convert it from ASN1 DER to P1363 within Javascript? Or can I convert the other way around in Java?
Any help would be appreciated...
","You're performing the hashing twice, as you perform:
ecdsaSign.update(msgHash);

while the ecdsaSign object already performs the SHA-256 hashing.
","204","<java><encryption><bouncycastle><ecdsa>","0","0","2","2018-08-24 16:45:06","52008698","2","","","","","2018-08-22 15:19:40",""
"51970086","Android Java Spongycastle ECDSA Signature to subtle.crypto Javascript","I'm importing a set of values from my website which is writen in Javascript using subtle.crypto for signing messages. In the QR Code I put the X, Y and D values of the key from Javascript, this is my code to replicate the key:
public static KeyPair GenerateExistingKeyPair(String d, String x, String y) throws NoSuchProviderException, NoSuchAlgorithmException, InvalidKeySpecException {
    Security.insertProviderAt(new org.spongycastle.jce.provider.BouncyCastleProvider(), 1);
    Log.d(TAG, ""GenerateExistingKeyPair: PrivateKey D: "" + d);
    Log.d(TAG, ""GenerateExistingKeyPair: PublicKey X: "" + x);
    Log.d(TAG, ""GenerateExistingKeyPair: PublicKey Y: "" + y);

    BigInteger privateD = decode(d);
    BigInteger publicX = decode(x);
    BigInteger publicY = decode(y);

    KeyFactory keyFactory = KeyFactory.getInstance(""ECDSA"", BouncyCastleProvider.PROVIDER_NAME);;
    ECParameterSpec ecSpec = ECNamedCurveTable.getParameterSpec(""P-256"");
    ECPoint Q = ecSpec.getG().multiply(privateD);

    ECPrivateKeySpec privSpec = new ECPrivateKeySpec(privateD, ecSpec);
    ECPublicKeySpec pubSpec = new ECPublicKeySpec(Q, ecSpec);

    PrivateKey privKey = keyFactory.generatePrivate(privSpec);
    PublicKey pubKey = keyFactory.generatePublic(pubSpec);

    KeyPair keyPair = new KeyPair(pubKey, privKey);
    Log.d(TAG, ""GenerateExistingKeyPair: KeyPair: "" + keyPair.getPrivate().toString());
    Log.d(TAG, ""GenerateExistingKeyPair: "" + Hex.toHexString(privKey.getEncoded()));
    return keyPair;

}

The ""decode"" I use because those values are stored in Base64 within Javascript.
public static BigInteger decode(String value) {
    byte[] decoded = android.util.Base64.decode(value, android.util.Base64.URL_SAFE);
    BigInteger bigInteger = new BigInteger(Hex.toHexString(decoded), 16);
    return bigInteger;
}

Now here is the output from that.
    D/ECDSA:: GenerateExistingKeyPair: PrivateKey D: m-lI_bV8YoNgAgNGpccXPdNtRJ4I6k0hdMdKD7NDYlI
          GenerateExistingKeyPair: PublicKey X: BadCycqeFycXoL4ONkATL7vu1ZxlF66JmrSgbE2A4eY
          GenerateExistingKeyPair: PublicKey Y: obTA6W6xluIdXcqRjnvq0Nh-_IfiWKV4FWziJFxXHUo
D/ECDSA:: GenerateExistingKeyPair: KeyPair: EC Private Key [ed:66:72:8b:8c:1d:97:b9:82:0b:11:c8:1f:6e:db:aa:0e:bd:67:43]
                      X: 5a742c9ca9e172717a0be0e3640132fbbeed59c6517ae899ab4a06c4d80e1e6
                      Y: a1b4c0e96eb196e21d5dca918e7bead0d87efc87e258a578156ce2245c571d4a

As far as I can tell, the X and Y are correct, converting them back using Base64 gives me the exact same value as those I received. Now I get to the part to Hash a message and send the transaction thruough JSON using WebRTC.
public static byte[] signTransaction(Wallet wallet, byte[] msgHash) throws Exception {

    Security.insertProviderAt(new org.spongycastle.jce.provider.BouncyCastleProvider(), 1);
    Signature ecdsaSign = Signature.getInstance(""SHA256withECDSA"", BouncyCastleProvider.PROVIDER_NAME);
    ecdsaSign.initSign(wallet.getKeyPair().getPrivate());
    ecdsaSign.update(msgHash);
    byte[] signature = ecdsaSign.sign();
    Log.d(TAG, ""signTransaction: "" + new BigInteger(1, signature).toString(16));

    return signature;

}

This is the signature I receive:
3045022026728f6d621689955126e52ca04e5ad7d3f5633111c32ca79979022fc48f7155022100ed94989a8f9fb6bb804ee041cb2923b6ecc17876fbc55c559c93ab9becac415f

After a bit of research I found out that ECDSA signatures in Java are ANS1 DER encoded and signatures in javascript uses P1363 format which are just the R and S of the signature.
So after some research I found out how to extract those values from the signature.
public static BigInteger extractR(byte[] signature) throws Exception {
    int startR = (signature[1] & 0x80) != 0 ? 3 : 2;
    int lengthR = signature[startR + 1];
    return new BigInteger(Arrays.copyOfRange(signature, startR + 2, startR + 2 + lengthR));
}

public static BigInteger extractS(byte[] signature) throws Exception {
    int startR = (signature[1] & 0x80) != 0 ? 3 : 2;
    int lengthR = signature[startR + 1];
    int startS = startR + 2 + lengthR;
    int lengthS = signature[startS + 1];
    return new BigInteger(Arrays.copyOfRange(signature, startS + 2, startS + 2 + lengthS));
}

Which gave me the following values:
26728f6d621689955126e52ca04e5ad7d3f5633111c32ca79979022fc48f7155
ed94989a8f9fb6bb804ee041cb2923b6ecc17876fbc55c559c93ab9becac415f

In a last attempt I tried to put those two strings togheter and send them to the Javascript side, but it couldnt validate, these two values side by side are the same size in characters as the signatures generated in Javascript, but the method 
await window.crypto.subtle.verify({name: ""ECDSA"", hash: {name: ""SHA-256""},}, publicKey, signature, data)

In javascript still returns false.
My question is, how can I make the signatures compatible between Java and Javascript? Can I convert it from ASN1 DER to P1363 within Javascript? Or can I convert the other way around in Java?
Any help would be appreciated...
","Answering my own question just to close it, I found the reason why I was not being authenticated by the JS side. All my methods to create and replicate the Public/Private keys are working. My code for transforming ASN1 DER signature to R||S value are working aswell.
I was signing transactions on top of the Hash String, like I tought the browser did. It turns out the browser were not signing the raw hash string, but he did this with the hash string before signing:
async sign(msg) {
    const encoder = new TextEncoder('utf-8');
    const msgBuffer = encoder.encode(msg.toString());
    const signedBuffer = await ECDSA.sign(this.keys.privateKey, msgBuffer);
    const signedArray = Array.from(new Uint8Array(signedBuffer));
    return Encryption.byteToHexString(signedArray);
}

note the lines:
As it turns out, the browser was encoding the hash string to UTF-8 and signing that byte array of size 64 and not the string which would have 20 or so bytes. So before when the browser tried to verify my signature, it actually did the same thing with my hash string, converted to UTF-8 and thats why my signature was failing, because I was not signing the same message as the browser was trying to verify.
If I did this dive into the JS cove more carefully it could have saved me like 2 days.
Thanks Maarten Bodewes for trying to help me, you actually pointed out a few flaws in my code and sorry for my lack of JS-side code that I presented to you, you could probably spot this issue and helped me 2 days ago.
","204","<java><encryption><bouncycastle><ecdsa>","0","0","2","2018-08-24 16:45:06","52008698","2","","","","","2018-08-22 15:19:40",""
"30249086","elliptic curve discrete logarithm","I am trying to Solve elliptic curve discrete logarithm using  Pollard rho (find k where G=kp), So i searched for implementation in c and i found one after adding problem specific data in the main function i got  segmentation fault (core dumped)
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <gmp.h>
#include <limits.h>
#include <sys/time.h>

#include <openssl/ec.h>
#include <openssl/bn.h>
#include <openssl/obj_mac.h> // for NID_secp256k1

#define POLLARD_SET_COUNT 16

#if defined(WIN32) || defined(_WIN32)
#define EXPORT __declspec(dllexport)
#else
#define EXPORT
#endif

#define MAX_RESTART 100

int ec_point_partition(const EC_GROUP *ecgrp, const EC_POINT *x) {  

    size_t len = EC_POINT_point2oct( ecgrp, x, POINT_CONVERSION_UNCOMPRESSED, NULL, 0, NULL );
    unsigned char ret[len]; 
    EC_POINT_point2oct( ecgrp, x, POINT_CONVERSION_UNCOMPRESSED, ret, len, NULL );

    int id = ( ret[len - 1] & 0xFF ) % POLLARD_SET_COUNT;

    return id;
}

// P generator 
// Q result*P
// order of the curve
// result
//Reference: J. Sattler and C. P. Schnorr, ""Generating random walks in groups""

int elliptic_pollard_rho_dlog(const EC_GROUP *group, const EC_POINT *P, const EC_POINT *Q, const BIGNUM *order, BIGNUM *res) {

    printf(""Pollard rho discrete log algorithm... \n"");

    BN_CTX* ctx;
    ctx = BN_CTX_new();

    int i, j;
    int iterations = 0;

    if ( !EC_POINT_is_on_curve(group, P, ctx ) || !EC_POINT_is_on_curve(group, Q, ctx ) ) return 1;

    EC_POINT *X1 = EC_POINT_new(group);
    EC_POINT *X2 = EC_POINT_new(group);

    BIGNUM *c1 = BN_new();
    BIGNUM *d1 = BN_new();
    BIGNUM *c2 = BN_new();
    BIGNUM *d2 = BN_new();

    BIGNUM* a[POLLARD_SET_COUNT];
    BIGNUM* b[POLLARD_SET_COUNT];
    EC_POINT* R[POLLARD_SET_COUNT];

    BN_zero(c1); BN_zero(d1);
    BN_zero(c2); BN_zero(d2);


    for (i = 0; i < POLLARD_SET_COUNT; i++) {   

        a[i] = BN_new();
        b[i] = BN_new();
        R[i] = EC_POINT_new(group);

        BN_rand_range(a[i], order);     
        BN_rand_range(b[i], order);

        // R = aP + bQ

        EC_POINT_mul(group, R[i], a[i], Q, b[i], ctx);
        //ep_norm(R[i], R[i]);
    }

    BN_rand_range(c1, order);       
    BN_rand_range(d1, order);       


    // X1 = c1*P + d1*Q
    EC_POINT_mul(group, X1, c1, Q, d1,  ctx);  
    //ep_norm(X1, X1);

    BN_copy(c2, c1);
    BN_copy(d2, d1);
    EC_POINT_copy(X2, X1);


    double work_time = (double) clock();
    do {
        j = ec_point_partition(group, X1);
        EC_POINT_add(group, X1, X1, R[j], ctx);

        BN_mod_add(c1, c1, a[j], order, ctx); 

        BN_mod_add(d1, d1, b[j], order, ctx); 

        for (i = 0; i < 2; i++) {
            j = ec_point_partition(group, X2);

            EC_POINT_add(group, X2, X2, R[j], ctx);

            BN_mod_add(c2, c2, a[j], order, ctx); 

            BN_mod_add(d2, d2, b[j], order, ctx);
        }

        iterations++;
        printf(""Iteration %d \r"",iterations );
    } while ( EC_POINT_cmp(group, X1, X2, ctx) != 0 ) ;


    printf(""\n "");

    work_time = ( (double) clock() - work_time ) / (double)CLOCKS_PER_SEC;

    printf(""Number of iterations %d %f\n"",iterations, work_time );

    BN_mod_sub(c1, c1, c2, order, ctx);
    BN_mod_sub(d2, d2, d1, order, ctx);

    if (BN_is_zero(d2) == 1) return 1;


    //d1 = d2^-1 mod order  
    BN_mod_inverse(d1, d2, order, ctx);

    BN_mod_mul(res, c1, d1, order, ctx);

    for (int k = 0; k < POLLARD_SET_COUNT; ++k) {
        BN_free(a[k]); 
        BN_free(b[k]);
        EC_POINT_free(R[k]);
    }
    BN_free(c1); BN_free(d1);
    BN_free(c2); BN_free(d2);
    EC_POINT_free(X1); EC_POINT_free(X2);

    BN_CTX_free(ctx);
    return 0;
}


int main(int argc, char *argv[])
{
    unsigned char *p_str=""134747661567386867366256408824228742802669457"";
    unsigned char *a_str=""-1"";
    unsigned char *b_str=""0"";
    BIGNUM *p = BN_bin2bn(p_str, sizeof(p_str), NULL);
    BIGNUM *a = BN_bin2bn(a_str, sizeof(a_str), NULL);
    BIGNUM *b = BN_bin2bn(b_str, sizeof(b_str), NULL);
    BN_CTX* ctx;
    ctx = BN_CTX_new();
    EC_GROUP* g = EC_GROUP_new(EC_GFp_simple_method());
    EC_GROUP_set_curve_GFp(g,p,a,b,ctx);    
    unsigned char *XP_str=""18185174461194872234733581786593019886770620"";
    unsigned char *YP_str=""74952280828346465277451545812645059041440154"";

    BN_CTX* ctx1;
    ctx1 = BN_CTX_new();
    BIGNUM *XP = BN_bin2bn(XP_str, sizeof(XP_str), NULL);
    BIGNUM *YP = BN_bin2bn(YP_str, sizeof(YP_str), NULL);
    EC_POINT* P = EC_POINT_new(g);
    EC_POINT_set_affine_coordinates_GFp(g,P,XP,YP,ctx1);

    unsigned char *XQ_str=""76468233972358960368422190121977870066985660"";
    unsigned char *YQ_str=""33884872380845276447083435959215308764231090"";
    BIGNUM* XQ = BN_bin2bn(XQ_str, sizeof(XQ_str), NULL);
    BIGNUM* YQ = BN_bin2bn(YQ_str, sizeof(YQ_str), NULL);
    EC_POINT *Q = EC_POINT_new(g);
    BN_CTX* ctx2;
    ctx2 = BN_CTX_new();
    EC_POINT_set_affine_coordinates_GFp(g,Q,XQ,YQ,ctx2);
    char * str;


    unsigned char *N_str=""2902021510595963727029"";
    BIGNUM *N = BN_bin2bn(N_str, sizeof(N_str), NULL);
    BIGNUM *res;
    elliptic_pollard_rho_dlog (g,P,Q,N,res);
    BN_bn2mpi(res,str); 
    printf(""%s\n"", str);


  return 0;
}

This is the statement that cause segmentation fault
    BN_bn2mpi(res,str); 

","","202","<c><segmentation-fault><elliptic-curve><ecdsa>","1","","0","2015-05-14 23:24:04","","1","","","","","2015-05-14 23:24:04",""
"34309528","KeyPair size is wrong for ECDSA using BouncyCastle's API","Am using BouncyCastle API to generate a signing Keypair which normally should be 32 bytes for privateKey size and 64 bytes for publicKey  size, but actually am getting 150 bytes privateKey size and 91 bytes for publicKey size ,the source code is like bellow : 
KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance(""ECDSA"", ""BC""); 
org.bouncycastle.jce.spec.ECParameterSpec ecSpec=ECNamedCurveTable.getParameterSpec(""secp256r1""); keyPairGenerator.initialize(ecSpec, new SecureRandom());
KeyPair keyPair = keyPairGenerator.generateKeyPair();

And even if I specify the domain params ( the recommended ones for NIST P-256 Curve ) the given result is also wrong, am I missing something ?
","","200","<bouncycastle><ecdsa>","2","","0","2015-12-16 10:27:27","","3","0","","","","2015-12-16 10:27:27",""
"55369670","ECDSA signature generation and verification implementation using Javascript","I have some code below that will be used to verify the authenticity of a message using javascript. The key pair generation using the elliptic curve secp256k1 is pretty straight forward however I am failing to understand why my signature implementation is not working (why the message is not being successfully verified). Here is my code:
https://pastebin.com/k1WT6apV
/**
* Signature Generation
*/
var g = bigInt('55066263022277343669578718895168534326250603453777594175500187360389116729240');
var n = bigInt('115792089237316195423570985008687907852837564279074904382605163141518161494337');
var p = bigInt('115792089237316195423570985008687907853269984665640564039457584007908834671663');      
var k = bigInt.randBetween(""1"", n.subtract(1));
var r = bigInt(""0"");
var s = bigInt(""0"");
var privateKey = bigInt('5943918703142138746985297990399309008462887494775678462183405629775262082646');
var publicKey = bigInt(privateKey.multiply(g)).mod(p); 


while(s.equals(""0"")){
    while(r.equals(""0"")){
        k = bigInt.randBetween(""1"", n.subtract(1));
        while(bigInt(k).isPrime() == false){
            k = bigInt.randBetween(""1"", n.subtract(1));
        }
        var xCoord = bigInt(k.multiply(g)).mod(p);
        r = xCoord.mod(n);
    }
    var kInverse = k.modInv(n);
    var hashedMessage = bigInt(sha1('hello'),16); 
    s = bigInt(kInverse*(hashedMessage.add(privateKey.multiply(r)))).mod(n)        
}
var signatureParams = {
    ""publicKey"": publicKey.toString(),
    ""r"": r.toString(),
    ""sign"": s.toString()
}

/**
* Signature Verification
*/
var sInverse = bigInt(signatureParams.sign).modInv(n);
var publicKey = bigInt(signatureParams.publicKey);
var w = sInverse.mod(n);
var hashedMessage = bigInt(sha1('hello'),16);
var u1 = bigInt(hashedMessage.multiply(w)).mod(n);
var u2 = bigInt(bigInt(r).multiply(w)).mod(n);
var P = bigInt(u1.multiply(g)).add(u2.multiply(publicKey));
P == r

It can be tested easily using the browser console.
I have used an amalgamation of information from the following guides:
https://www.maximintegrated.com/en/app-notes/index.mvp/id/5767
http://www.cs.miami.edu/home/burt/learning/Csc609.142/ecdsa-cert.pdf
https://pdfs.semanticscholar.org/c06a/d6512775be1076e4abd43e3f2928729da776.pdf
What is wrong with my implementation? Am I missing something? Did I do something wrong?
EDIT:
After doing some revision I came up with the following:
var g = bigInt('55066263022277343669578718895168534326250603453777594175500187360389116729240');
var n = bigInt('115792089237316195423570985008687907852837564279074904382605163141518161494337');
var p = bigInt('115792089237316195423570985008687907853269984665640564039457584007908834671663'); 
var privateKey = bigInt('90436540941140970165633788406609967146985661161263948799654498545867952662296');
var publicKey = bigInt(privateKey.multiply(g)).mod(p);

var generateSignature = function(hashedMessage){
    hashedMessage = bigInt(hashedMessage,16);
    var k = bigInt.randBetween(""1"", n.subtract(1));
    var r = bigInt(""0"");
    var s = bigInt(""0"");
    while(s.equals(""0"")){
        r = bigInt(""0"");
        while(r.equals(""0"")){
            k = bigInt.randBetween(""1"", n.subtract(1));
            r = bigInt(bigInt(k.multiply(g)).mod(p)).mod(n);
        }
        var kInverse = k.modInv(n); 
        var pr = privateKey.multiply(r);
        hashedMessage = hashedMessage.add(pr);
        kInverse = kInverse.multiply(hashedMessage);
        s = kInverse.mod(n);
    }  
    return [r.toString(),s.toString()];
}

var validateSignature = function(hashedMessage, signature){
    hashedMessage = bigInt(hashedMessage,16);
    var r = bigInt(signature[0]);
    var s = bigInt(signature[1]);
    var w = s.modInv(n);
    var u1 = bigInt(hashedMessage.multiply(w)).mod(n);
    var u2 = bigInt(r.multiply(w)).mod(n);
    var u1g = u1.multiply(g);
    var u2pu = u2.multiply(publicKey);
    var xCoord =u1g.add(u2pu);
    var v = xCoord.mod(n);   
    if(v.equals(r))
        return true;
    return false;
}

However it still fails to validate the signature. Hope it makes it a bit clearer.
","part of your problem is that g is actually not a number but a point
this is a rough translation of what you wrote:
g = 55066263022277343669578718895168534326250603453777594175500187360389116729240
privateKey = 90436540941140970165633788406609967146985661161263948799654498545867952662296
k = <random number>
r = k*g%p%n
e = sha(m)

ki = k^-1%n
pr = privateKey*r
ki*e
s = ki%n

i wrote an implmentation of this however over the last few weeks something like this:
g = {
    x: 55066263022277343669578718895168534326250603453777594175500187360389116729240,
    y: 32670510020758816978083085130507043184471273380659243275938904335757337482424
}
k = <random number>
r = <random number>
e = sha(m)

privateKey = 90436540941140970165633788406609967146985661161263948799654498545867952662296
r = g * k
s = ((privateKey * r.x + e) * (k^-1%n)) % n
r = r.x

it might help you to understand how the point multiplication works check out these links:
https://github.com/Azero123/simple-js-ec-math
https://www.npmjs.com/package/simple-js-ec-math
https://eng.paxos.com/blockchain-101-foundational-math
also perhaps take a look at my simple-js-ecdsa implementation as well
just another note, you likely should not use sha1 as it is consider ""officially insecure"" and there are formulas for collisions using it. perhaps try sha2 or sha3
","188","<javascript><digital-signature><verification><elliptic-curve><ecdsa>","2","0","1","2019-03-29 19:44:09","","2","1","4500996","","2019-03-27 20:40:40","2019-03-27 04:08:51",""
"54945941","Exporting EC_POINT using point2hex in ASN1.DER and recreate with Java as an X.509","I am generating ECDSA Prime256 keypair using OpenSSL with C++ and trying to import the hex version of the public key using Java. I pass the byte array I obtain from C++ to the following function in java which expects the byte array to be in an X.509 encoded format.
public static PublicKey getPublicKey(byte[] pk) throws NoSuchAlgorithmException, InvalidKeySpecException {
    EncodedKeySpec publicKeySpec = new X509EncodedKeySpec(pk);
    KeyFactory kf = KeyFactory.getInstance(Constant.KEY_FACTORY_TYPE);
    PublicKey pub = kf.generatePublic(publicKeySpec);
    return pub;
}

I create an elliptic curve key pair using the following function which retuns an EC_KEY*
EC_KEY* generate_keypair() {
    EC_KEY *eckey = EC_KEY_new();
    EC_GROUP *ecgroup = EC_GROUP_new_by_curve_name(NID_X9_62_prime256v1);
    EC_KEY_set_group(eckey, ecgroup);
    EC_KEY_set_asn1_flag(eckey, OPENSSL_EC_NAMED_CURVE);
    int kpGenerationStatus = EC_KEY_generate_key(eckey);
    if (kpGenerationStatus) {
        return eckey;
    }
    return nullptr;
}

Given the keypair returned by the function above, I want to export the public key to an ASN1.DER format which can be imported using the java method above.
I convert the public key which is of type EC_POINT* to its hex form using EC_POINT_point2hex() by doing the following:
EC_GROUP *ecgroup = EC_GROUP_new_by_curve_name(NID_X9_62_prime256v1);
EC_KEY *keypair = generate_keypair();
char *result = NULL;
BN_CTX *ctx;
ctx = BN_CTX_new();
const EC_POINT *pub = EC_KEY_get0_public_key(keypair);
result = EC_POINT_point2hex(ecgroup, pub, POINT_CONVERSION_UNCOMPRESSED, ctx);
printf(""%s\n"", result);

Which return the following:
04F588CD1D7103A993D47E53D58C3F40BE8F570604CF2EA01A7657C1423EB19C51BC379F0BEE1FAA60BB9A07DE73EA9BEF7709C1C6429D4051B44F73A458FFB80D
When I inspect this with the ASN.1 decoder I see a message which says Length over 48 bits not supported at position 1 and trying to import it using the java method I receive an error as follows:
java.security.spec.InvalidKeySpecException: java.security.InvalidKeyException: IOException: DerInputStream.getLength(): Should use short form for length

Is there something I am missing while exporting the public key from EC_POINT* to a X.509 Encoded hex string that I can import for validating any signatures?
","You are going in the incorrect direction as you want ASN1 base64 value.  
EC_POINT_point2hex is converting the internal public key value to hex.  It's not in ASN1 format.
You can produce what you want from the command line like so:

Generate EC private key:
openssl ecparam -name prime256v1 -genkey -noout -out key.pem
Extra public key in DER(ASN1) format:
openssl ec -in key.pem -pubout -outform der -out public.cer
Convert to base64
openssl base64 -in .\public.cer

If you take that output and paste it into ASN.1 decoder link it works fine.
Now to turn this into code, you have the EC key generation, but what you want is the steps to:

Generate ASN1 formatted public key
Convert it to base64

To generate the ASN1 formatted public key you want to use the i2d_EC_PUBKEY set of methods and then convert to base64 using BIO_f_base64 filter.
So here is an example problem that when I copy the output to ASN.1 decoder link it works fine.
#include <openssl/bio.h>
#include <openssl/ec.h>
#include <openssl/evp.h>
#include <openssl/x509.h>

EC_KEY* generate_keypair() {
    EC_KEY *eckey = EC_KEY_new();
    EC_GROUP *ecgroup = EC_GROUP_new_by_curve_name(NID_X9_62_prime256v1);
    EC_KEY_set_group(eckey, ecgroup);
    EC_KEY_set_asn1_flag(eckey, OPENSSL_EC_NAMED_CURVE);
    int kpGenerationStatus = EC_KEY_generate_key(eckey);
    if (kpGenerationStatus) {
        return eckey;
    }
    return nullptr;
}

int main()
{
    EC_GROUP *ecgroup = EC_GROUP_new_by_curve_name(NID_X9_62_prime256v1);
    EC_KEY *keypair = generate_keypair();
    BIO* out = BIO_new(BIO_s_mem());
    BIO* b64 = BIO_new(BIO_f_base64());
    BIO_push(b64, out);

    i2d_EC_PUBKEY_bio(b64, keypair);

    BIO_flush(b64);


    // do what you want this the output in out memory BIO

    char* p;
    long length = BIO_get_mem_data(out, &p);

    // ensure null terminated but copying the buffer into a string to output...
    puts(std::string(p, length).c_str());

    BIO_free_all(out);
}

I can't complete on the Java side, but if it works with the manual openssl generated base64 string then it will work with the sample application.
","184","<c++><openssl><x509><ecdsa><asn1>","2","0","1","2019-03-08 01:07:03","","0","","7255359","","2019-03-01 16:48:44","2019-03-01 13:46:16",""
"20268653","How to handle short hash with longer order of base point in ECDSA","I am using CVC certificates (If you haven't heard about them, pretend they are X509) with Elliptic curve signature with brainpool256r1 curve and SHA1 hash. In java with bouncycastle, I simply verify them like this:
Signature sign = Signature.getInstance(""SHA1withECDSA"", ""BC"");
sign.initVerify(key);
sign.update(certificate_data_to_be_verified);
sign.verify(signature);

And everything works fine. However, I need to verify them also in an embedded device, and I have encountered a problem, because I am supposed to use leftmost 256bits of hash to get the value of z  at least according to wikipedia ECDSA article. But SHA1 has only 160bits.
How is this solved by bouncycastle, and is there some general theory on how to handle this?
","You are confusing an order of base point with a key length.
Here is how Bouncy Castle code performs ECDSA digital signature verification.
private BigInteger calculateE(BigInteger n, byte[] message)
{
    /* n is curve order value */
    int log2n = n.bitLength();
    /* and message is a hash */
    int messageBitLength = message.length * 8;

    BigInteger e = new BigInteger(1, message);
    /* If message is longer than curve order */
    if (log2n < messageBitLength)
    {
        /* only log2n bits are taken from the left */
        e = e.shiftRight(messageBitLength - log2n);
    }
    return e;
}

","183","<java><security><bouncycastle><elliptic-curve><ecdsa>","1","2","1","2014-01-29 17:44:25","20273488","0","","642653","","2014-01-29 17:44:25","2013-11-28 14:29:42",""
"50592110","Converting a hex String to x509 encoding","I'm working with some Android Java code that uses ECDSA keys. The code compiles and runs fine, but has some logic errors during the verification process. I want to try using a constant key pair (that's known to be valid) to troubleshoot the program.
Using an online generator, I got an EC public key in hex,

0x044fb7cebbb1f4a1e0412c8e0b6f2d675ebfee000c5e860a81ffd795b5743033dec0e114abfba3de8db8705fc8ed985c5550c66a6ee9fdd258d058a2ef749eba78

As well as a valid private key to complete the pair,

0x0c84e7e707b31ecf0254e8cb3040513883d92d81e977ad4754a409a6ab18ee51

I can convert the hex string to a primitive byte array, but that byte array appears to be invalid. I cannot figure out how to convert a hex representation of my keys to a X509 representation so that I can make a Java key object.
KeyFactory mFactory = KeyFactory.getInstance(""EC"");
X509EncodedKeySpec mPublicKey = new X509EncodedKeySpec(publicKeyBytes);
PublicKey publicKey = mFactory.generatePublic(mPublicKey);

That code results in:
java.security.spec.InvalidKeySpecException: com.android.org.conscrypt.OpenSSLX509CertificateFactory$ParsingException: Error parsing public key

I am reasonably sure that my conversion from hex string to byte array is working, but I'll include that method as well for a sanity check.
private static byte[] hexStringToByteArray(String s) throws IllegalArgumentException {
    int len = s.length();
    if (len % 2 == 1) {
        throw new IllegalArgumentException(""Hex string must have even number of characters"");
    }
    byte[] data = new byte[len / 2]; // Allocate 1 byte per 2 hex characters
    for (int i = 0; i < len; i += 2) {
        // Convert each character into a integer (base-16), then bit-shift into place
        data[i / 2] = (byte) ((Character.digit(s.charAt(i), 16) << 4)
                + Character.digit(s.charAt(i+1), 16));
    }
    return data;
}

The end goal is to have a constant, valid PublicKey/PrivateKey object for testing. Any advice about how to generate those objects would be greatly appreciated. 
","","175","<java><android><public-key-encryption><ecdsa>","0","","0","2018-05-29 20:02:40","","2","","","","","2018-05-29 20:02:40",""
"53711729","How to generate an Ethereum public key from a private key using rust-secp256k1?","I found rust-secp256k1 and it seems to be what I need, but there are no examples in the documentation.
I tried to use this crate in my code:
extern crate secp256k1;

use secp256k1::key::SecretKey;

fn main() {
    let context = secp256k1::Secp256k1::without_caps();

    let private_key: String = String::from(""d500266f7d37f0957564e4ce1a1dcc8bb3408383634774a2f4a94a35f4bc53e0"");

    let secret_key = SecretKey::new(&context, &mut private_key);

    println!(""{:?}"", secret_key);
}

I got an error:
error[E0277]: the trait bound `std::string::String: secp256k1::rand::Rng` is not satisfied
  --> src/main.rs:10:22
   |
10 |     let secret_key = SecretKey::new(&context, &mut private_key);
   |                      ^^^^^^^^^^^^^^ the trait `secp256k1::rand::Rng` is not implemented for `std::string::String`
   |
   = note: required by `secp256k1::key::SecretKey::new`

","The following code generates a public key from a private key:
extern crate secp256k1;
extern crate hex;

use secp256k1::key::{SecretKey, PublicKey};

fn main() {
    let context = secp256k1::Secp256k1::new();

    let private_key: &[u8] = ""d500266f7d37f0957564e4ce1a1dcc8bb3408383634774a2f4a94a35f4bc53e0"".as_bytes();

    let secret_key = SecretKey::from_slice(&hex::decode(private_key).unwrap());

    let public_key = PublicKey::from_secret_key(&context, &secret_key.unwrap());

    println!(""{:?}"", public_key.unwrap()); // PublicKey(a423c05d32e3385bb2930e42ebbf104567215761e166c3ae3dd91d9c8bee0adcfc4f9e4ec43998eae8000de6b166014c5921c6d4545675f4f9205e7bc3d4401e)
}

Instead of using SecretKey::new, which expects a random number generator as the second parameter, I needed to use SecretKey::from_slice. from_slice takes a 32-byte key, which I can parse from my string into a compatible slice of bytes.
","173","<rust><ecdsa>","0","1","1","2019-06-20 19:36:38","53713063","1","","155423","","2018-12-10 20:27:32","2018-12-10 18:40:01",""
"50971023","ECDSA key size difference between OpenSSL and BouncyCastle","I am implementing a 192 bit ECDSA signature in C# using BouncyCastle.  It was specified in text by my customer.  They sent me a spec in OpenSSL after I started implementing in BouncyCastle.  Now I'm having trouble moving keys between OpenSSL and BouncyCastle.  I think I must be missing the point of something, and am asking your help to understand how ECDSA 192 works across the two libraries.
The first line of the spec is:

openssl ecparam -name secp192r1 -genkey -noout -out priv.pem

The resulting priv.pem contains a Base64 string that decodes to 97 bytes.  When I feed that key to BouncyCastle using a 192 bit curve, I get exceptions.
ECDomainParameters spec = GetEcdsaCurveParamsForInit();
// D is the Private Key
BigInteger d = new BigInteger(tbSigKeyHex.Text, 16);
ECPrivateKeyParameters sKey = new ECPrivateKeyParameters(""ECDSA"", d, spec);
ECPublicKeyParameters vKey = GL_ECKeyPairGenerator.GetCorrespondingPublicKey(sKey); // EXCEPT on d > 24byte max value

The specific exception is System.InvalidOperationException on this line of EcKeyPairGenerator.cs:

ECPoint q = new FixedPointCombMultiplier().Multiply(ec.G, privKey.D);

If I truncate the Ascii-hex input string to 48 bytes, so privKey.D is never more than the max value of 24 bytes, everything runs ok.  But now my code differs from spec.
I also notice that BouncyCastle makes 24 byte keys with 192 bit curves:
AsymmetricCipherKeyPair keyPair = GenerateKeys(192); // bit length selects curve in GL_ECKeyPairGenerator
ECPrivateKeyParameters sKey = (ECPrivateKeyParameters)keyPair.Private;
string szD = sKey.D.ToString(16);
PrintToFeedback(string.Format(""Generated Private D Key {0} bytes: {1}"", szD.Length/2, szD));
ECPublicKeyParameters vKey = (ECPublicKeyParameters)keyPair.Public;

prints out:

Generated Private D Key 24 bytes: 92e67f4a42c3031349f7e88d082a8e1f122eaee8d8b0823d

When I break and inspect sKey, I don't see anything that looks like a 97 byte number.  I see how 24 bytes maps to 192 bits, but not 97.  Since my customer says OpenSSL is the spec, I have to assume that's correct.  But I'm a little lost.  Before they sent me the OpenSSL spec, I had convinced myself that ECDSA192 uses 24 byte private keys (and 48 byte public keys, more or less), but this 97 byte OpenSSL key throws everything into doubt again.  My expertise is in realtime and RFID, not so much crypto.
Can someone help me understand how to use the OpenSSL 97 byte key with BouncyCastle?  Or should I just rip up BouncyCastle and rewrite with OpenSSL.Net?
I am running in a Cygwin bash window under Win10, openssl version is:

OpenSSL 1.0.2o  27 Mar 2018

Thank you.
","The file priv.pem that results from your openssl ecparam command contains more than just the bytes that make up the private part of the key. In particular, it also includes the public part of the key pair, and some information about what kind of curve the key is on. You can see this when you do
$ openssl ec -in priv.pem -noout -text

read EC key
Private-Key: (192 bit)
priv:
    74:6b:13:17:a5:6e:bb:8e:76:b1:65:a2:c2:59:16:
    72:36:56:ee:42:b9:91:26:53
pub: 
    04:9b:d5:f3:61:6b:06:86:c2:d2:1b:c8:1f:86:ae:
    ee:58:8a:ac:b3:04:2b:93:c5:8c:1b:24:6e:90:2d:
    9c:aa:69:7e:30:15:86:48:06:97:b6:78:35:a6:48:
    46:1a:2c:4e
ASN1 OID: prime192v1

So to use the private part separately, you will have to extract it first.
To get a lower level understanding about what is exactly stored in priv.pem, you can use the asn1parse application:
$ openssl asn1parse -in priv.pem -dump
    0:d=0  hl=2 l=  95 cons: SEQUENCE          
    2:d=1  hl=2 l=   1 prim: INTEGER           :01
    5:d=1  hl=2 l=  24 prim: OCTET STRING      
      0000 - 74 6b 13 17 a5 6e bb 8e-76 b1 65 a2 c2 59 16 72   tk...n..v.e..Y.r
      0010 - 36 56 ee 42 b9 91 26 53-                          6V.B..&S
   31:d=1  hl=2 l=  10 cons: cont [ 0 ]        
   33:d=2  hl=2 l=   8 prim: OBJECT            :prime192v1
   43:d=1  hl=2 l=  52 cons: cont [ 1 ]        
   45:d=2  hl=2 l=  50 prim: BIT STRING        
      0000 - 00 04 9b d5 f3 61 6b 06-86 c2 d2 1b c8 1f 86 ae   .....ak.........
      0010 - ee 58 8a ac b3 04 2b 93-c5 8c 1b 24 6e 90 2d 9c   .X....+....$n.-.
      0020 - aa 69 7e 30 15 86 48 06-97 b6 78 35 a6 48 46 1a   .i~0..H...x5.HF.
      0030 - 2c 4e                                             ,N

Or if you are on Windows, try this excellent ASN.1 Editor tool.
","172","<openssl><bouncycastle><ecdsa>","1","1","1","2018-06-22 15:18:26","50990951","0","","","","","2018-06-21 14:28:34",""
"34706822","Why can't python ECDSA support negative numbers yet?","I am trying to write a python script that verifies an ECDSA signature and I am having a terrible time trying to do it.
This is the code I use:
public_key = ecdsa.VerifyingKey.from_string(pubkey, curve=ecdsa.SECP256k1)
verified = public_key.verify_digest(signature, val, sigdecode=ecdsa.util.sigdecode_der)

If the signature r and s are positive, it works well, but if either of them is negative, an assertion error raises. I have checked the ecdsa sourcecode, and I saw this line:
nbytes = numberbytes[0] if isinstance(numberbytes[0], integer_types) else ord(numberbytes[0])
assert nbytes < 0x80 # can't support negative numbers yet

https://github.com/warner/python-ecdsa/blob/master/ecdsa/der.py#L105
Why does this happen? Isn't this library something ""oficial""? What alternatives do I have? Is it safe to just remove that assertion line?
","ECDSA itself does not use negative numbers, so I would not expect a Python implementation of it to support negative numbers.  The types of numbers used by ECDSA are between 0 and some large prime number, and they obey the laws of modular arithmetic.
","165","<python><openssl><ecdsa>","0","2","1","2016-01-10 19:34:41","34709900","2","1","","","","2016-01-10 14:56:00",""
"35687711","(Erlang) Got error while parsing ecsda public key pem file","I made private and public keys files as
openssl ecparam -name secp256k1 -genkey -out gen.pem

openssl ec -in gen.pem -pubout -out gen.pub

then I checked .pub file
openssl pkey -in gen.pub  -pubin -text -noout

Public-Key: (256 bit)
pub: 
    04:fc:de:4f:2a:77:bd:c4:f2:74:2b:ba:b5:fc:85:
    e4:aa:96:a7:8e:86:14:bc:0d:fa:8e:d2:dd:50:3c:
    5d:fa:f4:07:f4:17:80:49:06:19:0c:72:03:63:4e:
    07:37:e9:10:64:c8:33:a4:a3:7e:26:d8:df:79:21:
    d7:2d:a6:01:80
ASN1 OID: secp256k1

After that start erl
erl
Erlang/OTP 18 [erts-7.2] [source-e6dd627] [64-bit] [smp:3:3] [async-threads:10] [hipe] [kernel-poll:false]

After execution of commands
1>rr(public_key),
  {ok,RawData} = file:read_file(""gen.pub""),
  Decoded = public_key:pem_decode(RawData),
  [public_key:pem_entry_decode(X) || X <- Decoded ].

I got exception
** exception error: no match of right hand side value 
                    {error,{asn1,{invalid_length,1}}}
     in function  public_key:der_decode/2 (public_key.erl, line 229)

I know that there are workarounds, but I'm wondering if I do something wrong or there are errors in public key modules ?
UPD 1.
When we look at result 
{ok,#'SubjectPublicKeyInfo'{algorithm = #'AlgorithmIdentifier'{algorithm = {1,2,840,10045,2,1},
                                                           parameters = <<6,5,43,129,4,0,10>>},
                        subjectPublicKey = <<4,241,200,19,168,25,25,81,43,216,
                                             89,201,37,62,66,39,166,231,161,98,
                                             223,133,119,12,...>>}}

we can see next :
{1,2,840,10045,2,1} is oid of ecPublicKey http://oid-info.com/get/1.2.840.10045.2.1
parameters = <<6,5,43,129,4,0,10>>
'OTP-PUB-KEY':decode('EcpkParameters',<<6,5,43,129,4,0,10>>).

gives us
{ok,{namedCurve,{1,3,132,0,10}}}

and
pubkey_cert_records:namedCurves({1,3,132,0,10}).

gives us our source curve  - secp256k1, and 
 subjectPublicKey = <<4,241,200,19,168,25,25,81,43,216,
                    89,201,37,62,66,39,166,231,161,98,
                    223,133,119,12,...>>

is public key itself. But this is workaround how I said before. 
","I tried your steps and it worked for me straight away:
g@crayon2:~/test % openssl ecparam -name secp256k1 -genkey -out gen.pem

g@crayon2:~/test % openssl ec -in gen.pem -pubout -out gen.pub
read EC key
writing EC key

g@crayon2:~/test % openssl pkey -in gen.pub -pubin -text -noout
Public-Key: (256 bit)
pub: 
    04:f1:c8:13:a8:19:19:51:2b:d8:59:c9:25:3e:42:
    27:a6:e7:a1:62:df:85:77:0c:ef:f7:0e:0e:19:93:
    df:e6:f5:42:66:7e:ee:02:07:76:85:19:a4:a8:2d:
    03:11:73:0c:b2:d4:4c:c7:0e:42:d3:30:b5:51:e3:
    97:45:f8:b5:6a
ASN1 OID: secp256k1

g@crayon2:~/test % erl
Erlang/OTP 18 [erts-7.2.1] [source] [64-bit] [smp:4:4] [async-threads:10] [hipe] [kernel-poll:false]

Eshell V7.2.1  (abort with ^G)

1> rr(public_key).
['AAControls','ACClearAttrs','AccessDescription',
 'Algorithm','AlgorithmIdentifier',
 'AlgorithmIdentifierPKCS-10','AlgorithmIdentifierPKCS-8',
 'AlgorithmIdentifierPKCS5v2-0','AlgorithmIdentifierPKSC-7',
 'AlgorithmNull','AnotherName','AttCertValidityPeriod',
 'Attribute','AttributeCertificate',
 'AttributeCertificateInfo','AttributePKCS-10',
 'AttributePKCS-7','AttributeTypeAndValue',
 'Attributes_SETOF',
 'Attributes_SETOF_valuesWithContext_SETOF',
 'AuthorityKeyIdentifier','BasicConstraints',
 'BuiltInDomainDefinedAttribute','BuiltInStandardAttributes',
 'Certificate','CertificateList','CertificationRequest',
 'CertificationRequestInfo',
 'CertificationRequestInfo_attributes_SETOF'|...]

2> {ok,Data}=file:read_file(""gen.pub"").
{ok,<<""-----BEGIN PUBLIC KEY-----\nMFYwEAYHKoZIzj0CAQYFK4EEAAoDQgAE8cgTqBkZUSvYWcklPkInpuehYt+Fdwzv\n9w4OGZPf5vVCZn7u""...>>}

3> Dec=public_key:pem_decode(Data).
[#'SubjectPublicKeyInfo'{algorithm = <<48,86,48,16,6,7,42,
                                       134,72,206,61,2,1,
                                       6,5,43,129,4,0,10,
                                       3,66,0,4,241,200,
                                       ...>>,
                         subjectPublicKey = not_encrypted}]

My OpenSSL version:
g@crayon2:~/test % openssl version
OpenSSL 1.0.1p-freebsd 9 Jul 2015

System is FreeBSD 10.2-RELEASE. Erlang version is in the shell output above. The gen.pub key that it generated for me (if you want to try to load it) is:
g@crayon2:~/test % cat gen.pub
-----BEGIN PUBLIC KEY-----
MFYwEAYHKoZIzj0CAQYFK4EEAAoDQgAE8cgTqBkZUSvYWcklPkInpuehYt+Fdwzv
9w4OGZPf5vVCZn7uAgd2hRmkqC0DEXMMstRMxw5C0zC1UeOXRfi1ag==
-----END PUBLIC KEY-----

Do you maybe want to paste your key so that I can try to load it?
Edit:
Sorry, I missed the last step. This seems to be a bug in the OTP code. The der_decode/2 function is called with KeyType set to ECPoint, see the pem_entry_decode/1 function. But der_decode/2 expects Asn1Type. Calling the 'OTP-PUB-KEY' module directly seems to be working:
8> Bin = hd(Dec)#'SubjectPublicKeyInfo'.algorithm.
32> 'OTP-PUB-KEY':decode('SubjectPublicKeyInfo', Bin).
{ok,#'SubjectPublicKeyInfo'{algorithm = #'AlgorithmIdentifier'{algorithm = {1,
                                                                            2,840,10045,2,1},
                                                               parameters = <<6,5,43,129,4,0,10>>},
                            subjectPublicKey = <<4,241,200,19,168,25,25,81,43,216,
                                                 89,201,37,62,66,39,166,231,161,98,
                                                 223,133,119,12,...>>}}

However I am not sure if it returns anything sensible. Maybe worth raising a bug in OTP with the code that you posted in this question as steps to reproduce. Then at least someone competent would verify why it doesn't work. I am sure the steps you followed are fine and the types returned and passed to further functions are OK as far as the documentation is concerned.
","165","<erlang><public-key><pem><ecdsa>","1","1","2","2016-03-01 20:54:11","35698900","0","0","3182373","","2016-02-29 19:27:26","2016-02-28 20:14:39",""
"35687711","(Erlang) Got error while parsing ecsda public key pem file","I made private and public keys files as
openssl ecparam -name secp256k1 -genkey -out gen.pem

openssl ec -in gen.pem -pubout -out gen.pub

then I checked .pub file
openssl pkey -in gen.pub  -pubin -text -noout

Public-Key: (256 bit)
pub: 
    04:fc:de:4f:2a:77:bd:c4:f2:74:2b:ba:b5:fc:85:
    e4:aa:96:a7:8e:86:14:bc:0d:fa:8e:d2:dd:50:3c:
    5d:fa:f4:07:f4:17:80:49:06:19:0c:72:03:63:4e:
    07:37:e9:10:64:c8:33:a4:a3:7e:26:d8:df:79:21:
    d7:2d:a6:01:80
ASN1 OID: secp256k1

After that start erl
erl
Erlang/OTP 18 [erts-7.2] [source-e6dd627] [64-bit] [smp:3:3] [async-threads:10] [hipe] [kernel-poll:false]

After execution of commands
1>rr(public_key),
  {ok,RawData} = file:read_file(""gen.pub""),
  Decoded = public_key:pem_decode(RawData),
  [public_key:pem_entry_decode(X) || X <- Decoded ].

I got exception
** exception error: no match of right hand side value 
                    {error,{asn1,{invalid_length,1}}}
     in function  public_key:der_decode/2 (public_key.erl, line 229)

I know that there are workarounds, but I'm wondering if I do something wrong or there are errors in public key modules ?
UPD 1.
When we look at result 
{ok,#'SubjectPublicKeyInfo'{algorithm = #'AlgorithmIdentifier'{algorithm = {1,2,840,10045,2,1},
                                                           parameters = <<6,5,43,129,4,0,10>>},
                        subjectPublicKey = <<4,241,200,19,168,25,25,81,43,216,
                                             89,201,37,62,66,39,166,231,161,98,
                                             223,133,119,12,...>>}}

we can see next :
{1,2,840,10045,2,1} is oid of ecPublicKey http://oid-info.com/get/1.2.840.10045.2.1
parameters = <<6,5,43,129,4,0,10>>
'OTP-PUB-KEY':decode('EcpkParameters',<<6,5,43,129,4,0,10>>).

gives us
{ok,{namedCurve,{1,3,132,0,10}}}

and
pubkey_cert_records:namedCurves({1,3,132,0,10}).

gives us our source curve  - secp256k1, and 
 subjectPublicKey = <<4,241,200,19,168,25,25,81,43,216,
                    89,201,37,62,66,39,166,231,161,98,
                    223,133,119,12,...>>

is public key itself. But this is workaround how I said before. 
","I found that lines in public_key.erl ( lines 136-137 )
'ECPoint' ->
     der_decode(KeyType, Key0)

have to be replaced with
'ECPoint' ->
     {{KeyType,Key0},der_decode('EcpkParameters', Params)}

","165","<erlang><public-key><pem><ecdsa>","1","0","2","2016-03-01 20:54:11","35698900","0","0","3182373","","2016-02-29 19:27:26","2016-02-28 20:14:39",""
"45037979","Matching sec256k1 keys in JS and PHP","I'm having trouble with uniting the ionux/phactor PHP library, and the indutny/elliptic JS library.
One library is being used at a LAMP server, the other via Nodejs at Amazon Lambda.
I generate one key pair with the PHP library; sign sha256 hash data and save results as JSON output.
$ec = KeyManager::instance()->getECKeysByHash($k = '122e43fd75dd0492a259146ab5dfd5c6');

return $response = [
    'source' => [
        'message' => $m = 'asd',
        'hash' => $h = hash('sha256', $m),
        'hash_signed' => $ec->sign($h),
     ],
     'ec' => [
        'key' => $k,
        'keys' => config(KeyManager::EC_DIR_NAME.'.'.$k)
     ]

];

Outputs:
{  
   ""source"":{  
      ""message"":""asd"",
      ""hash"":""688787d8ff144c502c7f5cffaafe2cc588d86079f9de88304c26b0cb99ce91c6"",
      ""hash_signed"":""30460221009a8c0c55ddc3ab3dc3b1e944a92c94fb215b7ed8ac332d398a6acb9d543a5d06022100e87f295c537fb2d14a52476e56b4c3a214be97e421510cbb46cb2059bed342bf""
   },
   ""ec"":{  
      ""key"":""122e43fd75dd0492a259146ab5dfd5c6"",
      ""keys"":{  
         ""private_key_hex"":""0xde1a1c2734cc1e65b46946cfeb7cad28e48e8efbce5e36d859a4aa06ca9bb3f8"",
         ""private_key_dec"":""100459584715065215111848758376288522810407133161466091883119287856242863354872"",
         ""public_key"":""043876c88178bb7e386bbdb6325e201ec8e0e1ab75fc6c7713ed04051e029cb94b9d01c3b6aee0e6c5c92d7456f16667b08b4121526e97f5c704a19f7e9b3cd6c"",
         ""public_key_compressed"":""023876c88178bb7e386bbdb6325e201ec8e0e1ab75fc6c7713ed04051e029cb94b"",
         ""public_key_x"":""3876c88178bb7e386bbdb6325e201ec8e0e1ab75fc6c7713ed04051e029cb94b"",
         ""public_key_y"":""9d01c3b6aee0e6c5c92d7456f16667b08b4121526e97f5c704a19f7e9b3cd6c""
      }
   }
};

I saved the output to a JS variable tests, and trying to check if the hash generated on the PHP side, equals the JS algorithm in this way:
var ecc = new EC('secp256k1');
var my_hash_word_array = CryptoJS.SHA256(tests.source.message);
var my_hash = my_hash_word_array.toString();

console.log('hash equals:',tests.source.hash == my_hash);

I can that in this case it's equal!
Now, I want to check if the generated PHP side signature tests.source.hash_signed (from tests.source.hash) relates to the known public key using JS:
var key = ecc.keyFromPublic(tests.ec.keys.public_key_compressed, 'hex'); // <<< problem line
console.log('signOk:', key.verify(my_hash, tests.source.hash_signed));

The result is ""signOk: false"", why? What am I doing wrong? 
","I've spent quite some time trying to track this down, and I'm pretty sure your issue has to do with the key encoding:
var key = ecc.keyFromPublic(tests.ec.keys.public_key_compressed, 'hex');

This line is apparently looking for a Hexadecimal encoded key.
Looking at your loaded values:
""public_key_compressed"":""023876c88178bb7e386bbdb6325e201ec8e0e1ab75fc6c7713ed04051e029cb94b"",

public_key_compressed is not in Hexadecimal encoding (hint: doesn't start with ""0x"")
You should make sure to encode this value as Hexadecimal and try again.
","164","<javascript><php><sign><ecdsa>","6","1","1","2017-07-29 01:57:09","45384464","2","","23200","","2017-07-29 01:57:09","2017-07-11 14:52:14",""
"53456433","Python Script for Extracting R & S Values from Scriptsig","I have read a few posts and I am familiar with how scriptsig is formatted and how to extract relevant information from it. The problem I am having is putting it into code.  I have read these posts:
https://bitcoin.stackexchange.com/questions/58853/how-do-you-figure-out-the-r-and-s-out-of-a-signature-using-python
https://bitcoin.stackexchange.com/questions/2376/ecdsa-r-s-encoding-as-a-signature
I have a list of scriptsigs and I have a function (so far) that uses slicing on the scriptsig string:
def scriptsig_to_ecdsa_sig(asn_sig):
        strip1 = asn_sig[6:] #Remove first 6 characters
                if strip1[:2] == ""20"" #Read next two characters to determine length of r

    return { 
        'r': some list,
        's': some list}

Would this be the best route? If so, how would the best way to finish it be?
","Figured it out:
from pyasn1.codec.der import decoder as asn1der
int_value = asn1der.decode(asn_sig.decode('hex')[1:]) #asn_sig is the scriptsig hex
long(int_value[0][0]) #R Value in int form
long(int_value[0][1]) #S Value in int form

","161","<python><transactions><ecdsa><bitcoind>","0","0","1","2018-11-26 02:52:06","53474194","0","","2525781","","2018-11-24 20:38:34","2018-11-24 08:20:57",""
"46236765","Which order is correct? ECDSA runs before ECDH or after ECDH?","I am confused about the execution order of ECDSA and ECDH, which one runs first ?
Since ECDH can not avoid MITM attach, therefore ECDSA is used to verify the entity. So ECDSA should run before ECDH ?
Or it doens't matter at all?
","
Since ECDH can not avoid MITM attack

First, here is one of the many ways you could solve this difficulty using RSA instead of DSA (or ECDSA): the client, before sending its ECDH (or DH) public key on the wire, could encrypt this ECDH (or DH) public key with the public RSA key of the server. And this way, the server is the only peer that knows the client ECDH key. Therefore, both sides are protected against man in the middle attacks. Of course, using RSA to encrypt another key may need OAEP.

Or it doens't matter at all?

In your case, using ECDSA instead of RSA, you can not encrypt anything. So you need to have mutual authentication in the protocol you will design: your server and your client must have previously exchanged their public ECDSA keys or must have some kind of PKI with some kind of root certificate to authenticate the remote public ECDSA key. Finally, the client and the server just need to follow those steps, in this order:

sign their ECDH public key with their ECDSA private key,
send this information to the other host,
receive this information from the other host,
check the signature,
if the check failed, stop talking,
if the signature is correctly checked, perform the end of the DH algorithm.

","159","<ecdsa><ecdh>","0","0","1","2018-08-20 22:40:46","46238109","0","","","","","2017-09-15 09:54:22",""
"22902823","I need some help against the money mis in sha256","Having a private ECDSA key 18E14A7B6A307F426A94F8114701E7C8E774E7F9A47E2C2035DB29A206321725
1 - Take the corresponding public key generated with it 0450863AD64A87AE8A2FE83C1AF1A8403CB53F53E486D8511DAD8A04887E5B23522CD470243453A299FA9E77237716103ABC11A1DF38855ED6F2EE187E9C582BA6
2 - Perform SHA-256 hashing on the public key 600FFE422B4E00731A59557A5CCA46CC183944191006324A447BDB2D98D4B408
but when I run a sha256 on 0450863AD64A87AE8A2FE83C1AF1A8403CB53F53E486D8511DAD8A04887E5B23522CD470243453A299FA9E77237716103ABC11A1DF38855ED6F2EE187E9C582BA6
I don't get
600FFE422B4E00731A59557A5CCA46CC183944191006324A447BDB2D98D4B408
What I get is
32511e82d56dcea68eb774094e25bab0f8bdd9bc1eca1ceeda38c7a43aceddce
what am I doing wrong?   
","You have to:

Hash with SHA-256 the public key: 0450863AD64A87AE8A2FE83C1AF1A8403CB53F53E486D8511DAD8A04887E5B23522CD470243453A299FA9E77237716103ABC11A1DF38855ED6F2EE187E9C582BA6
Hash with RIPEMD-160 the key: 600FFE422B4E00731A59557A5CCA46CC183944191006324A447BDB2D98D4B408

Which should result in 010966776006953D5567439E5E39F86A0D273BEE.

","156","<key><sha256><bitcoin><ecdsa>","0","0","1","2014-04-09 15:52:28","22925519","0","","1413338","","2014-04-09 15:52:28","2014-04-07 02:50:13",""
"45046140","In the pkcs11interop project code, I see CKM_ECDSA_SHA256, but in the nuget package I added to my solution its not there","I need to use ECDSA with sha256 with a hsm and I am using c# with the http://www.pkcs11interop.net/ wrapper. The Github code has CKM_ECDSA_SHA256, but not the 3.3.0 release even though the release is the latest as of Jan 24 and the enum was added much earlier.
Why cannot I access the enum? I could use CKM_ECDSA and hash before signing, but that would defeat the purpose of using the hsm for its speed.
","CKM_ECDSA_SHA256 enum member was added on 1 March 2017 as a part of larger patch that added support for PKCS#11 v2.40. It was not present in Pkcs11Interop v3.3.0 but it is present in master branch on GitHub which is yet to be released as Pkcs11Interop v4.0.0.
Meanwhile you can use overloaded method which accepts ulong instead of CKM and define missing constant in your code:
const ulong CKM_ECDSA_SHA256 = 0x00001044;

","155","<c#><sha256><pkcs#11><ecdsa><pkcs11interop>","1","1","1","2017-07-12 17:10:34","45051663","0","","","","","2017-07-11 23:45:53",""
"50408019","Crypto++ Ed448 unknown oid","I have been trying to generate an Ed448 ECDSA key using crypto++ 7 from debian experimental. My code is as follows:
AutoSeededRandomPool rng;
ECIES<ECP>::Decryptor d(rng, ASN1::curve448());

I can compile this code without errors, but when it runs, I get the following exception:
terminate called after throwing an instance of 'CryptoPP::UnknownOID'
  what():  BER decode error: unknown object identifier

Looking through the interwebs, It appears that curve448 was implemented last version. How can I fix this?
","
I have been trying to generate an Ed448 ECDSA key... It appears that curve448 was implemented last version.

We added the OIDs for the 25519 and 448 curves some time ago. They were added to ease testing of curve25519 and ed25519. You can see the OIDs at oids.h.
They OIDs were added at Commit 7ca5f7d3b53f on on Apr 11, 2016, and then subsequently fixed on the same day at Commit 29e9bd2b27a9. Apr 11, 2016 made them available to Crypto++ 5.6.4.


I can compile this code without errors, but when it runs, I get the following exception

You are getting the exception because there are no domain parameters for curve448 in eccrypto.cpp. You are hitting the exception below because it == end.
template <class EC> void DL_GroupParameters_EC<EC>::Initialize(const OID &oid)
{
    const EcRecommendedParameters<EllipticCurve> *begin, *end;
    GetRecommendedParameters(begin, end);
    const EcRecommendedParameters<EllipticCurve> *it = std::lower_bound(begin, end, oid, OIDLessThan());
    if (it == end || it->oid != oid)
        throw UnknownOID();

    const EcRecommendedParameters<EllipticCurve> &param = *it;
    m_oid = oid;
    ...
}


Here's the back story...
According to curve25519's A state-of-the-art Diffie-Hellman function, the source code for the curve is at SUPERCOP. SUPERCOP is a benchmarking program for cryptographic algorithms.
We have curve25519 and ed25519 on a testing fork. We ripped the implementation from SUPERCOP. SUPERCOP has the optimized reference implementations of curve25519, curve448, and lots of other stuff. Once curve25519 and ed25519 were added we planned on curve448.
We added curve25519 based on Andrew Moon's implementation. That provides x25519 and ed25519. Also see Issue 761 (x25519) and Issue 764 (ed25519).
At this point the Crypto++ implementations of curve448 are stalled. I think your options are roll your own based on SUPERCOP, or use a library like libsodium, Botan or OpenSSL.
","152","<crypto++><ecdsa>","1","2","1","2019-02-19 17:10:59","50429065","0","","2670194","","2018-05-18 11:15:47","2018-05-18 09:24:26",""
"53669673","Diffie Hellman Key Exchange using ECDSA x509 certificates","I am trying to perform a Diffie-Hellman key exchange using 2 ECDSA x509 certificates.
Here is the method where I extract the keys from the certificates for computation of the derived key.
private byte[] GetDerivedKey(X509Certificate2 publicCertificate, X509Certificate2 privateCertificate)
    {
        byte[] derivedKey;

        using (var privateKey = privateCertificate.GetECDsaPrivateKey())
        using (var publicKey = publicCertificate.GetECDsaPublicKey())
        {
            var privateParams = privateKey.ExportParameters(true);  //This line is failing
            var publicParams = publicKey.ExportParameters(false);

            using (var privateCng = ECDiffieHellmanCng.Create(privateParams))
            using (var publicCng = ECDiffieHellmanCng.Create(publicParams))
            {
                derivedKey = privateCng.DeriveKeyMaterial(publicCng.PublicKey);
            }
        }


        return derivedKey;
    }

I've commented on the line that is failing privateKey.ExportParameters(true) with the error:

System.Security.Cryptography.CryptographicException : The requested operation is not supported.  
at System.Security.Cryptography.NCryptNative.ExportKey(SafeNCryptKeyHandle key, String format)
     at System.Security.Cryptography.CngKey.Export(CngKeyBlobFormat format)
     at System.Security.Cryptography.ECCng.ExportParameters(CngKey key, Boolean includePrivateParameters, ECParameters& ecparams)
     at System.Security.Cryptography.ECDsaCng.ExportParameters(Boolean includePrivateParameters)

Because this is a self signed certificate that I am generating, I assume I am doing something wrong.
I first create a root CA certificate and pass in the private key to sign my certificate.
private X509Certificate2 CreateECSDACertificate(string certificateName,
        string issuerCertificateName,
        TimeSpan lifetime,
        AsymmetricKeyParameter issuerPrivateKey,
        string certificateFriendlyName = null)
    {
        // Generating Random Numbers
        var randomGenerator = new CryptoApiRandomGenerator();
        var random = new SecureRandom(randomGenerator);

        var signatureFactory = new Asn1SignatureFactory(""SHA256WithECDSA"", issuerPrivateKey, random);

        // The Certificate Generator
        var certificateGenerator = new X509V3CertificateGenerator();

        // Serial Number
        var serialNumber = BigIntegers.CreateRandomInRange(BigInteger.One, BigInteger.ValueOf(Int64.MaxValue), random);
        certificateGenerator.SetSerialNumber(serialNumber);

        // Issuer and Subject Name
        var subjectDistinguishedName = new X509Name($""CN={certificateName}"");
        var issuerDistinguishedName = new X509Name($""CN={issuerCertificateName}"");
        certificateGenerator.SetSubjectDN(subjectDistinguishedName);
        certificateGenerator.SetIssuerDN(issuerDistinguishedName);

        // Valid For
        var notBefore = DateTime.UtcNow.Date;
        var notAfter = notBefore.Add(lifetime);

        certificateGenerator.SetNotBefore(notBefore);
        certificateGenerator.SetNotAfter(notAfter);

        //key generation
        var keyGenerationParameters = new KeyGenerationParameters(random, _keyStrength);
        var keyPairGenerator = new ECKeyPairGenerator();
        keyPairGenerator.Init(keyGenerationParameters);
        var subjectKeyPair = keyPairGenerator.GenerateKeyPair();

        certificateGenerator.SetPublicKey(subjectKeyPair.Public);

        var certificate = certificateGenerator.Generate(signatureFactory);

        var store = new Pkcs12Store();
        var certificateEntry = new X509CertificateEntry(certificate);
        store.SetCertificateEntry(certificateName, certificateEntry);
        store.SetKeyEntry(certificateName, new AsymmetricKeyEntry(subjectKeyPair.Private), new[] { certificateEntry });

        X509Certificate2 x509;

        using (var pfxStream = new MemoryStream())
        {
            store.Save(pfxStream, null, new SecureRandom());
            pfxStream.Seek(0, SeekOrigin.Begin);
            x509 = new X509Certificate2(pfxStream.ToArray());
        }

        x509.FriendlyName = certificateFriendlyName;

        return x509;
    }

The .HasPrivateKey() method returns true, which I've read can return a false positive.  
When I add my certificates to the store, I can verify the cert chain.
    [Test]
    public void CreateSelfSignedCertificate_AfterAddingToStore_CanBuildChain()
    {
        var result = _target.CreateSelfSignedCertificate(_subject, _issuer, TimeSpan.FromDays(356), _certificateFriendlyName, _issuerFriendlyName);

        _store.TryAddCertificateToStore(result.CertificateAuthority, _caStoreName, _location);
        _store.TryAddCertificateToStore(result.Certificate, _certStoreName, _location);

        var chain = new X509Chain
        {
            ChainPolicy =
            {
                RevocationMode = X509RevocationMode.NoCheck
            }
        };

        var chainBuilt = chain.Build(result.Certificate);

        if (!chainBuilt)
        {
            foreach (var status in chain.ChainStatus)
            {
                Assert.Warn(string.Format(""Chain error: {0} {1}"", status.Status, status.StatusInformation));
            }
        }

        Assert.IsTrue(chainBuilt, ""Chain"");
    }

I thought at first that maybe the private cert had to come from the cert store, so I imported it and then pulled it back out, but I get the same error, which is another reason I believe I'm not doing something quite right.
EDIT:
I have another class generating RSA x509's using the same code for putting the private key into the certificate.  It allows me to export the RSA private key.  
The variable _keyStrength is 384 and my signature factory is using ""SHA256withECDSA"".  I have also tried using ""SHA384withECDSA"" but I get the same error.
","OK. It's a blind shot but after looking at your code I noticed two things:

When you create PFX you set null password. But when you load the PFX into X509Certificate2 class you are using wrong constructor. You should use one with a password parameter and give a null into it
When you load PFX into X509Certificate2 class you do not specify, if the private key should be exportable. I think that this is the reason why privateKey.ExportParameters(true) gives you an exception. You should use this constructor and specify null as password


Made it working
I thought it was a bug. It's possible that it is. We clearly stated in X509Constructor that the private key should be exportable. I used X509KeyStorageFlags.EphemeralKeySet | X509KeyStorageFlags.Exportable flags too. But when I looked at the CngKey it had ExportPolicy set to AllowExport but not AllowPlaintextExport. 
It was exportable in some way. privateKey.Key.Export(CngKeyBlobFormat.OpaqueTransportBlob) worked. But privateKey.ExportParameters(true) did not.
I've searched for a solution how to change ExportPolicy of CngKey. I found this SO question that helped me to change it. After that the ExportParameters worked.
The fixed version of your GetDerivedKey method is
private byte[] GetDerivedKey(X509Certificate2 publicCertificate, X509Certificate2 privateCertificate)
{
    byte[] derivedKey;

    using (var privateKey = privateCertificate.GetECDsaPrivateKey())
    using (var publicKey = privateCertificate.GetECDsaPublicKey())
    {
        var myPrivateKeyToMessWith = privateKey as ECDsaCng;

        // start - taken from https://stackoverflow.com/q/48542233/3245057 
        // make private key exportable:
        byte[] bytes = BitConverter.GetBytes((int)(CngExportPolicies.AllowExport | CngExportPolicies.AllowPlaintextExport));
        CngProperty pty = new CngProperty(NCryptExportPolicyProperty, bytes, CngPropertyOptions.Persist);
        myPrivateKeyToMessWith.Key.SetProperty(pty);
        // end - taken from https://stackoverflow.com/q/48542233/3245057

        var privateParams = myPrivateKeyToMessWith.ExportParameters(true);  //This line is NOT failing anymore
        var publicParams = publicKey.ExportParameters(false);

        using (var privateCng = ECDiffieHellmanCng.Create(privateParams))
        using (var publicCng = ECDiffieHellmanCng.Create(publicParams))
        {
            derivedKey = privateCng.DeriveKeyMaterial(publicCng.PublicKey);
        }
    }

    return derivedKey;
}

","146","<c#><bouncycastle><x509certificate2><ecdsa><diffie-hellman>","1","2","2","2018-12-07 16:34:19","53670577","0","","107455","","2018-12-07 14:27:20","2018-12-07 12:35:42",""
"53669673","Diffie Hellman Key Exchange using ECDSA x509 certificates","I am trying to perform a Diffie-Hellman key exchange using 2 ECDSA x509 certificates.
Here is the method where I extract the keys from the certificates for computation of the derived key.
private byte[] GetDerivedKey(X509Certificate2 publicCertificate, X509Certificate2 privateCertificate)
    {
        byte[] derivedKey;

        using (var privateKey = privateCertificate.GetECDsaPrivateKey())
        using (var publicKey = publicCertificate.GetECDsaPublicKey())
        {
            var privateParams = privateKey.ExportParameters(true);  //This line is failing
            var publicParams = publicKey.ExportParameters(false);

            using (var privateCng = ECDiffieHellmanCng.Create(privateParams))
            using (var publicCng = ECDiffieHellmanCng.Create(publicParams))
            {
                derivedKey = privateCng.DeriveKeyMaterial(publicCng.PublicKey);
            }
        }


        return derivedKey;
    }

I've commented on the line that is failing privateKey.ExportParameters(true) with the error:

System.Security.Cryptography.CryptographicException : The requested operation is not supported.  
at System.Security.Cryptography.NCryptNative.ExportKey(SafeNCryptKeyHandle key, String format)
     at System.Security.Cryptography.CngKey.Export(CngKeyBlobFormat format)
     at System.Security.Cryptography.ECCng.ExportParameters(CngKey key, Boolean includePrivateParameters, ECParameters& ecparams)
     at System.Security.Cryptography.ECDsaCng.ExportParameters(Boolean includePrivateParameters)

Because this is a self signed certificate that I am generating, I assume I am doing something wrong.
I first create a root CA certificate and pass in the private key to sign my certificate.
private X509Certificate2 CreateECSDACertificate(string certificateName,
        string issuerCertificateName,
        TimeSpan lifetime,
        AsymmetricKeyParameter issuerPrivateKey,
        string certificateFriendlyName = null)
    {
        // Generating Random Numbers
        var randomGenerator = new CryptoApiRandomGenerator();
        var random = new SecureRandom(randomGenerator);

        var signatureFactory = new Asn1SignatureFactory(""SHA256WithECDSA"", issuerPrivateKey, random);

        // The Certificate Generator
        var certificateGenerator = new X509V3CertificateGenerator();

        // Serial Number
        var serialNumber = BigIntegers.CreateRandomInRange(BigInteger.One, BigInteger.ValueOf(Int64.MaxValue), random);
        certificateGenerator.SetSerialNumber(serialNumber);

        // Issuer and Subject Name
        var subjectDistinguishedName = new X509Name($""CN={certificateName}"");
        var issuerDistinguishedName = new X509Name($""CN={issuerCertificateName}"");
        certificateGenerator.SetSubjectDN(subjectDistinguishedName);
        certificateGenerator.SetIssuerDN(issuerDistinguishedName);

        // Valid For
        var notBefore = DateTime.UtcNow.Date;
        var notAfter = notBefore.Add(lifetime);

        certificateGenerator.SetNotBefore(notBefore);
        certificateGenerator.SetNotAfter(notAfter);

        //key generation
        var keyGenerationParameters = new KeyGenerationParameters(random, _keyStrength);
        var keyPairGenerator = new ECKeyPairGenerator();
        keyPairGenerator.Init(keyGenerationParameters);
        var subjectKeyPair = keyPairGenerator.GenerateKeyPair();

        certificateGenerator.SetPublicKey(subjectKeyPair.Public);

        var certificate = certificateGenerator.Generate(signatureFactory);

        var store = new Pkcs12Store();
        var certificateEntry = new X509CertificateEntry(certificate);
        store.SetCertificateEntry(certificateName, certificateEntry);
        store.SetKeyEntry(certificateName, new AsymmetricKeyEntry(subjectKeyPair.Private), new[] { certificateEntry });

        X509Certificate2 x509;

        using (var pfxStream = new MemoryStream())
        {
            store.Save(pfxStream, null, new SecureRandom());
            pfxStream.Seek(0, SeekOrigin.Begin);
            x509 = new X509Certificate2(pfxStream.ToArray());
        }

        x509.FriendlyName = certificateFriendlyName;

        return x509;
    }

The .HasPrivateKey() method returns true, which I've read can return a false positive.  
When I add my certificates to the store, I can verify the cert chain.
    [Test]
    public void CreateSelfSignedCertificate_AfterAddingToStore_CanBuildChain()
    {
        var result = _target.CreateSelfSignedCertificate(_subject, _issuer, TimeSpan.FromDays(356), _certificateFriendlyName, _issuerFriendlyName);

        _store.TryAddCertificateToStore(result.CertificateAuthority, _caStoreName, _location);
        _store.TryAddCertificateToStore(result.Certificate, _certStoreName, _location);

        var chain = new X509Chain
        {
            ChainPolicy =
            {
                RevocationMode = X509RevocationMode.NoCheck
            }
        };

        var chainBuilt = chain.Build(result.Certificate);

        if (!chainBuilt)
        {
            foreach (var status in chain.ChainStatus)
            {
                Assert.Warn(string.Format(""Chain error: {0} {1}"", status.Status, status.StatusInformation));
            }
        }

        Assert.IsTrue(chainBuilt, ""Chain"");
    }

I thought at first that maybe the private cert had to come from the cert store, so I imported it and then pulled it back out, but I get the same error, which is another reason I believe I'm not doing something quite right.
EDIT:
I have another class generating RSA x509's using the same code for putting the private key into the certificate.  It allows me to export the RSA private key.  
The variable _keyStrength is 384 and my signature factory is using ""SHA256withECDSA"".  I have also tried using ""SHA384withECDSA"" but I get the same error.
","I started using the solution @pepo posted which lead me to discover 'GetECDsaPrivateKey' does not return an ECDsa object but an ECDsaCng.  I simplified the key derivation to this.
byte[] derivedKey;

using (var privateKey = (ECDsaCng)certificate.GetECDsaPrivateKey())
using (var publicKey = (ECDsaCng)certificate.GetECDsaPublicKey())
{
    var publicParams = publicKey.ExportParameters(false);

    using (var publicCng = ECDiffieHellmanCng.Create(publicParams))
    using (var diffieHellman = new ECDiffieHellmanCng(privateKey.Key))
    {
        derivedKey = diffieHellman.DeriveKeyMaterial(publicCng.PublicKey);
    }
}

return derivedKey;

","146","<c#><bouncycastle><x509certificate2><ecdsa><diffie-hellman>","1","0","2","2018-12-07 16:34:19","53670577","0","","107455","","2018-12-07 14:27:20","2018-12-07 12:35:42",""
"49024466","AuthenticatAsClient fails with CRYPT_E_ASN1_BADTAG","I have written a .NET application that tries to do mutual authentication with an ECC client certificate (curve is brainpoolP384r1).
The certificate is signed by a PKI and when I look at it in an ASN1 viewer it seems to be perfectly valid. 
I get the certificate byte data for this the following way:
Console.WriteLine($""Certificate:{BitConverter.ToString(cert.RawData).Replace(""-"","""")}"");

Looking at the certificate in the MMC console it also appears to be valid.
However, when I try to use it to authenticate as a client it fails with CRYPT_E_ASN1_BADTAG.
The code-snippet where I try to authenticate:
TcpClient client = new TcpClient(serverName, 9909);
Console.WriteLine(""Client connected."");
SslStream sslStream = new SslStream(
    client.GetStream(),
    false,
    new RemoteCertificateValidationCallback(ValidateServerCertificate),
    null
);

try
{
    var certificates = new X509CertificateCollection();
    certificates.Add(cert);
    sslStream.AuthenticateAsClient(serverName, certificates, SslProtocols.Tls12, false);
}
catch (Exception e)
{
    Console.WriteLine(""Exception: {0} \n{1}"", e.Message, e.StackTrace);
    if (e.InnerException != null)
    {
        Console.WriteLine(""Inner exception: {0}"", e.InnerException.Message);
    }

    Console.WriteLine(""Authentication failed - closing the connection."");
    client.Close();
    return;
}

The exception:

Exception: ASN1 Ungültiger Kennzeichenwert
         at System.Net.SSPIWrapper.AcquireCredentialsHandle(SSPIInterface
  secModule, String package, CredentialUse intent, SCHANNEL_CRED scc)
         at System.Net.Security.SslStreamPal.AcquireCredentialsHandle(CredentialUse
  credUsage, SCHANNEL_CRED secureCredential)
         at System.Net.Security.SslStreamPal.AcquireCredentialsHandle(X509Certificate
  certificate, SslProtocols protocols, EncryptionPolicy policy, Boolean
  isServer)
         at System.Net.Security.SecureChannel.AcquireClientCredentials(Byte[]&
  thumbPrint)
         at System.Net.Security.SecureChannel.GenerateToken(Byte[] input, Int32 offset, Int32 count, Byte[]& output)
         at System.Net.Security.SecureChannel.NextMessage(Byte[] incoming, Int32 offset, Int32 count)
         at System.Net.Security.SslState.StartSendBlob(Byte[] incoming, Int32 count, AsyncProtocolRequest asyncRequest)
         at System.Net.Security.SslState.ProcessReceivedBlob(Byte[] buffer, Int32 count, AsyncProtocolRequest asyncRequest)
         at System.Net.Security.SslState.StartReadFrame(Byte[] buffer, Int32 readBytes, AsyncProtocolRequest asyncRequest)
         at System.Net.Security.SslState.StartReceiveBlob(Byte[] buffer, AsyncProtocolRequest asyncRequest)
         at System.Net.Security.SslState.CheckCompletionBeforeNextReceive(ProtocolToken
  message, AsyncProtocolRequest asyncRequest)
         at System.Net.Security.SslState.StartSendBlob(Byte[] incoming, Int32 count, AsyncProtocolRequest asyncRequest)
         at System.Net.Security.SslState.ForceAuthentication(Boolean receiveFirst, Byte[] buffer, AsyncProtocolRequest asyncRequest)
         at System.Net.Security.SslState.ProcessAuthentication(LazyAsyncResult
  lazyResult)
         at System.Net.Security.SslStream.AuthenticateAsClient(String targetHost, X509CertificateCollection clientCertificates, SslProtocols
  enabledSslProtocols, Boolean checkCertificateRevocation)

As usual for MS the reason for the failure is not detailed enough to fix the issue. Is there any way to find out which of the approximately 70 tags in the certificate is invalid?
One more piece of information: The keypair and the csr are created using bouncycastle as I did not find a way to do a cmp-request with .NET only. Could this be the reason? But why is the certificate displayed as valid in the mmc console?
Sorry for not providing a complete verifiable example but even the stripped down code for creating the csr, sending it, attaching the private key to the certificate and storing it in the MYStore is way to long and without a PKI absolutely useless.
UPDATE
The code to load the certificate from the store is as follows:
static X509Certificate2 LoadFromStore(string commonName)
{
    var distinguishedName = ""CN="" + commonName;
    var store = new X509Store(StoreName.My, StoreLocation.CurrentUser);
    store.Open(OpenFlags.ReadOnly);

    X509Certificate2 result = null;

    foreach (var cert in store.Certificates)
    {
        if (cert.SubjectName.Name != null && cert.SubjectName.Name.Equals(distinguishedName))
        {
           Console.WriteLine(""Found certificate in local store: "" + cert.SubjectName.Name);

            result = cert;
            break;
        }
    }

    store.Close();
    return result;
}

","As usual when working with microsoft APIs the error has nothing to do with the real reason... :-(
The cause of all this was a wrong csr that made the received certificate have valid ASN1 structure (verified with http://lapo.it/asn1js/) with invalid content. How to do it right can be found in the answer to this SO question. 
User pepo helped me a lot to get on the right track (Thank you once again!). 
His comment suggesting to use certutil -user -store my instead of looking at the MMC console was the hint I needed to sort this out.
","145","<c#><.net><bouncycastle><x509certificate2><ecdsa>","0","0","1","2018-03-02 08:00:09","49064935","12","","5841337","","2018-02-28 08:36:15","2018-02-28 07:51:58",""
"48636004","Get ECDSA key by id for openssl_verify function","I need a little help.
I have a txt file with ecdsa public keys:
KEY_ID: 1
STATUS: VALID
-----BEGIN PUBLIC KEY-----
MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAE+Y5mYZL/EEY9zGji+hrgGkeoyccK
D0/oBoSDALHc9+LXHKsxXiEV7/h6d6+fKRDb6Wtx5cMzXT9HyY+TjPeuTg==
-----END PUBLIC KEY-----

KEY_ID: 2
STATUS: VALID
-----BEGIN PUBLIC KEY-----
MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEaq6djyzkpHdX7kt8DsSt6IuSoXjp
WVlLfnZPoLaGKc/2BSfYQuFIO2hfgueQINJN3ZdujYXfUJ7Who+XkcJqHQ==
-----END PUBLIC KEY-----

KEY_ID: 3
STATUS: VALID
-----BEGIN PUBLIC KEY-----
MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEkvgJ6sc2MM0AAFUJbVOD/i34YJJ8
ineqTN+DMjpI5q7fQNPEv9y2z/ecPl8qPus8flS4iLOOxdwGoF1mU9lwfA==
-----END PUBLIC KEY-----

Now I need use key by ID in openssl_verify function.
My code:
$ecdsa_url_string = 'ECDSA_URL_STRING';
$stringToVerify = 'MY_STRING';
$ecdsa_keys = openssl_pkey_get_public(file_get_contents(PATH . '/ecdsa_keys.txt'));

$verified = openssl_verify($stringToVerify,pack(""H*"",$ecdsa_url_string ),$ecdsa_keys,""sha256"");

if($verified === 1){
.....
}

Now my question/problem:
I also have the KEY_ID parameter in the return URL. When ID is 1, everything is OK because openssl_pkey_get_public function always returns only the ID 1 key. 
Q1: I can not retrieve the other keys.
Q2: How do I specify which ID I want use for openssl_pkey_get_public?
I am ashamed of my ignorance and my stupidity.
Can anyone please help me with this?
thx
","@Lawrence Cherone answer work for me.
Parse public keys from .txt file by php
my code:
$ecdsa_keys = file_get_contents(PATH . '/ecdsa_keys.txt');
$ecdsa_key_id = 'KEY_FROM_URL';

function getKeyById($id, $ecdsa_keys){
    if(preg_match(""~KEY_ID: $id\s+STATUS: VALID\s+(-{5}BEGIN PUBLIC KEY-{5}.+?-{5}END PUBLIC KEY-{5})~s"", $ecdsa_keys, $match)){
        $result = $match[1];
        return $result;
    }
    return null;
}

if(($ecdsa_key = getKeyById($ecdsa_key_id, $ecdsa_keys)) !== null){
    echo ""<pre>"".$ecdsa_key.""</pre>"";
} else {
    echo ""not found"";
}

thx for help
","137","<php><verify><php-openssl><ecdsa>","1","0","1","2018-02-08 10:23:36","","5","1","608639","","2018-02-06 05:34:11","2018-02-06 05:24:33",""
"57225736","Unknown 116-byte ECDSA private key format","iOS 13's CryptoKit framework provides a .rawRepresentation value for ECDSA public and private keys. I've been trying to reverse-engineer the rawRepresentation data type to convert between it and JWK. Judging by the 64-byte length of the public key representation, it seems to be a simple x || y concatenation. I would guess that the private key would then be x || y || d, but this doesn't seem to be the case, as doing so should yield a 96-byte string, while the actual rawRepresentation is 144 bytes. It also doesn't seem to be a valid DER/ASN.1 string either. I haven't managed to find a spec that lines up with the actual values I'm getting.
As you could guess, Apple's docs are very descriptive.

rawRepresentation: A representation of the private key as a collection of bytes.

An example key pair in hex is provided.
Private: 988f8187ff7f00007466815b0d6b02ae1a063198fd1e4923fb1e413195126cc00d30483284186b435726c0c69cc774274ea32eb6a17cbaf2ea88dd7f3a5a2a3ce637bc4b96523c2795035bd2fbeb093b010000000000000000000000000000000000000000000000000000000000000012b2b61abe8beae5aeb6d0bda739235364de96c7f498813cfb0336198dcf9063
Public:  2774c79cc6c02657436b18843248300dc06c129531411efb23491efd9831061a3b09ebfbd25b0395273c52964bbc37e63c2a5a3a7fdd88eaf2ba7ca1b62ea34e

What format could this be?
","I was unable to figure out rawRepresentation, so I ended up using x963Representation, which is 0x04 + x + y + d for the private key (97 bytes), and 04 + x + y for the public key (65 bytes).
","137","<swift><binary-data><ecdsa><key-pair><apple-cryptokit>","9","0","1","2019-08-13 16:24:11","","5","1","2694431","","2019-07-31 19:02:10","2019-07-26 19:02:52",""
"52951136","ECDSA verification with BouncyCastle: SignatureException: error decoding signature bytes","While trying to verify a signature persisted on a database as a String i get this exception:
java.security.SignatureException: error decoding signature bytes.
at org.bouncycastle.jcajce.provider.asymmetric.util.DSABase.engineVerify(Unknown Source)
at java.base/java.security.Signature$Delegate.engineVerify(Signature.java:1245)
at java.base/java.security.Signature.verify(Signature.java:674)
at SignCheck.ValidateSignature(SignCheck.java:65)
at SignCheck.main(SignCheck.java:26)

What I am making wrong?
This is the simplified application:
String signature = ""308194024802ce15a95958817cf7ac8086332d0eb7e5a7faed71c225845251514ddf3ca56246498169a27a814f62f457a4336338e9931e4b12dda0e8cf221f83c4a33c31c907a4b3520d0c3c3b0248012801b7f51e810165762ff2848752cefb4dcef1e862d9783740d40d6436e7b45c151bce9ea19c2dce205351115cb3b753af611fdc8dfc19ac11e49f29d81c1699e9f38cdb1ba45d"";
String stringToCheck = ""CCCCBBBBTue Oct 23 15:26:02 CEST 2018"";
String publicKey = ""3081a7301006072a8648ce3d020106052b81040027038192000406dbfdc0ccf5cc8230b773b4c21059c3c47e2e832a962a0015f9f440cccc80ca1d4af9f3e39f96dffcd09f6015373e4373a764c2aadac8db8db62e28196a7f7a6cacb971f0cfee570292eb0c8c78b14054ce5b7e85f616b10571044dcfad51c271f09746577aa6068f94d395533f2a8f723a112e72962117fef2e5c6ce4b32d8217a86e96ddec7f8241d4b30941b8f78"";

try {
        Security.addProvider(new BouncyCastleProvider());
        Signature ecdsaVerify = Signature.getInstance(""SHA256withECDSA"", ""BC"");

        KeyFactory fact = KeyFactory.getInstance(""ECDSA"", ""BC"");
        PublicKey pub= fact.generatePublic(new X509EncodedKeySpec(Hex.decode(publicKey)));
        ecdsaVerify.initVerify(pub);


        ecdsaVerify.update(stringToCheck.getBytes(""UTF-8""));
        boolean result = ecdsaVerify.verify(signature.getBytes());

       return result;
    } catch (InvalidKeySpecException | NoSuchAlgorithmException | NoSuchProviderException | InvalidKeyException | UnsupportedEncodingException | SignatureException e) {
        e.printStackTrace();
        System.out.println(""FALSIFICATION DETECTED!"");
    }

","The signature that you're trying to verify is in hex format and the .getBytes() doesn't do what you expect it to do. You need to convert the signature hex string into a byte[] and then validate with this result in the ecdsaVerify.verify(signatureBytes) where signatureBytes is the Hex.decode(signature).
","134","<java><bouncycastle><signature><ecdsa>","0","0","1","2019-04-05 05:48:21","","0","","","","","2018-10-23 14:08:24",""
"40103133","JSch Exception while using ecdh as kex algorithm","I am working on FIPS requirement for which i have to use ecdh-sha2-nistp384 as kex algorithm. I changed the config by using 
        session.setConfig(""StrictHostKeyChecking"", ""no"");
        session.setConfig(""CheckKexes"", """");
        session.setConfig(""kex"", ""ecdh-sha2-nistp384"");
        session.setConfig(""ssh-rsa"", ""ecdsa-sha2-nistp384"");

When I am putting this in the code the issue is I am getting the following exception.
com.jcraft.jsch.JSchException: verify: false

which seems like too generic to me. I serached a lot but did not find any person using ecdh for kex using JSch any help will be appreciated.
","","133","<java><ssh><jsch><ecdsa>","0","","0","2016-11-03 14:51:56","","4","1","3180409","","2016-11-03 14:51:56","2016-10-18 08:22:13",""
"55519943","Parse CMS base64 encrypted signature into PKCS7 file and get certs using nodejs","I'm working with apple pay token decryption and am having some difficulties with the signature verification part. Step 1 is to take the CMS base64 encoded signature, parse it to a PEM file and get the attached certificates. I saw some examples on github in other languages and it seems like I should be able to base64 decode the signature and parse it to a PKCS7 file and it should have a certificates property to get the certificates from, but I can't seem to figure out how to do that with javscript/nodejs. I've tried using node-forge and calling  forge.pkcs7.createSignedData() and then setting the content to the base64 decoded signature string, and while that does create a PKCS7 file, I can't seem to figure out how to get the certs from it. What I'm trying to do is essentially the openssl command 'openssl pkcs7 -in test.pem -inform -print_certs -out test.crt', where test.pem is the PEM file containing the PKCS7 content and test.crt is the newly created file containing the attached certificates. I think part of the reason node-forge isn't helping me too much is because from my understanding, node-forge doesn't support ECDSA, but I'm not an expert in cryptography so I may be mistaken. Can anyone help point me in the right direction or to a different npm package that can help me accomplish this? Thanks!
","","130","<javascript><node.js><ssl-certificate><digital-signature><ecdsa>","0","","0","2019-04-08 21:32:28","","0","","4086990","","2019-04-08 21:32:28","2019-04-04 15:38:34",""
"29520209","How do I check if a server is using an ECDSA fingerprint in SSH otherwise quit?","How do I make my expect script check if a server is using an ECDSA key and if it is continue with the script otherwise if it's something like RSA quit immediately?
#!/usr/bin/expect

#Usage sshsudologin.expect <host> <ssh user> <ssh password>

set timeout 60

spawn ssh [lindex $argv 1]@[lindex $argv 0]

 expect ""yes/no"" {
     send ""yes\r""
     expect ""*?assword"" { send ""[lindex $argv 2]\r"" }
    } ""*?assword"" { send ""[lindex $argv 2]\r"" }

 expect "" "" { send ""sudo su -\r"" }
 expect "" "" { send ""commands\r"" }
 expect "" "" { send ""exit\r"" }
 expect "" "" { send ""exit\r"" }
 interact

","To elaborate on the Donal's comment, you seem to want to override the HostKeyAlgorithms client's configuration variable on the command line (or by other means) when connecting as described here.  If you only specify ECDSA mechanisms, the connection will supposedly fail, if the server only will only offer you an RSA-, DSA- or FIPS-based key.
","128","<ssh><tcl><expect><ecdsa>","0","0","1","2015-04-09 13:36:28","","1","","301832","","2015-04-08 22:09:03","2015-04-08 16:24:39",""
"50347455","OpenSSL DER ECDSA encoding error","I am trying to encode ECDSA Curve448 key into a small and portable byte array. I am trying to use DER to accomplish this, as the low-level APIs do not work with Curve448. However, when I use the following code:
std::vector<std::vector<uint8_t>> vecs;
uint8_t* buf = nullptr;

EVP_PKEY_CTX *pctx = EVP_PKEY_CTX_new_id(EVP_PKEY_ED448, NULL);
EVP_PKEY_keygen_init(pctx);
EVP_PKEY* pkey;
EVP_PKEY_keygen(pctx, &pkey);
EVP_PKEY_CTX_free(pctx);

size_t n = i2d_PublicKey(pkey, &buf);

ERR_print_errors_fp(stderr);

vecs.emplace_back(buf, buf + n);

n is set to -1, and so vecs.emplace_back fails. ERR_print_errors_fp prints:
140691149055104:error:0D0A40A7:asn1 encoding routines:i2d_PublicKey:unsupported public key type:../crypto/asn1/i2d_pu.c:35

How do I solve this problem, or is there a better way I should go about this?
I am using openssl v1.1.1 from debian experimental.
","Are you trying to write out a private key or a public key? I ask because your code above has size_t n = i2d_PrivateKey(pkey, &buf);, i.e. attempting to encode a private key, but the error message says i2d_PublicKey:unsupported public key type.
Anyway i2d_PublicKey is for writing out public keys in old-style ""traditional"" format. Since ED448 is a new algorithm, there is no such format defined for it. Instead you must use SubjectPublicKeyInfo format. The OpenSSL function for that is the (confusingly similar) i2d_PUBKEY(). The man page is here:
https://www.openssl.org/docs/man1.1.1/man3/i2d_PUBKEY.html
","128","<c++><openssl><ecdsa><der>","0","1","1","2018-05-15 11:58:42","50348955","1","","2670194","","2018-05-15 11:58:42","2018-05-15 10:04:48",""
"50550697","SHA256withECDSA Signature not Verifying, Android","Update: The critical aspect is that kp (keypair) is generated ""outside"" this code. This code is an onclick function whereas kp is defined in the code that sets up the onclick. Shouldn't matter but that's what seems to be the problem and that's inexplicable.
What's wrong with the following code? It always prints (logs) false for the verification b even though the data is the same string ""foo"" and the signature is the same one that was generateded earlier in the code sig
val sig = Signature.getInstance(""SHA256withECDSA"").run {
    initSign(kp.private)
    update(""foo"".toByteArray())
    sign()
}
Log.d(tag, ""sig: "" + sig.toString())
val o = Signature.getInstance(""SHA256withECDSA"")
o.initVerify(kp.public)
o.update(""foo"".toByteArray())
val b = o.verify(sig)
Log.d(tag, b.toString())

","","123","<java><android><kotlin><digital-signature><ecdsa>","0","","0","2018-05-27 17:54:08","","3","","2297550","","2018-05-27 17:54:08","2018-05-27 09:17:32",""
"51760361","ECDSA How to convert the private and public byte to single Shared key in c#","I am trying to implement the ecdsa in C#. I am able to generate the key from
ECKeyPairGenerator but I need to do in reverse. I already have the keys need to make a single key.
Can anyone help me out in this? I write code in c#.
public static AsymmetricCipherKeyPair LoadPublicKey(byte[] publickey)
        {
            string curveName = ""prime192v1"";
            //Here I m generating the key I need to replace but load the public key of byte
            var gen = new ECKeyPairGenerator();
            X9ECParameters ecP = X962NamedCurves.GetByOid(X9ObjectIdentifiers.Prime192v1);
            // var ecP21 = TeleTrusTNamedCurves.GetByName(""brainpoolp512t1"");
            //  X9ECParameters ecP = NistNamedCurves.GetByName(curveName);

            ECDomainParameters keyGenParam = new ECDomainParameters(ecP.Curve, ecP.G, ecP.N, ecP.H, ecP.GetSeed());
            var secureRandom = new SecureRandom();
            ECKeyGenerationParameters genParam = new ECKeyGenerationParameters(keyGenParam, secureRandom);
            gen.Init(genParam);
            return gen.GenerateKeyPair();//only want to return public key
        }

","You can try this
    var keyParams = new ECParameters
    {
        Curve = jwk.Curve.ToECCurve(), #your curve name
        Q = new ECPoint #Define X and Y
        {
            X = jwk.X.FromBase64UrlSafe(),
            Y = jwk.Y.FromBase64UrlSafe()
        }
    };

ECDsa.Create(keyParams);

","122","<c#><bouncycastle><ecdsa>","0","1","1","2019-02-25 08:41:13","","0","","6326344","","2018-08-09 06:44:10","2018-08-09 06:40:45",""
"52081185","ECDSA byte array into Private Key Error","I want to save my private key in json file ( hex format ) then read it as PrivateKey.
Here Keys generate function
public void generateKeyPair() {
    try {
        Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
        KeyPairGenerator keyGen = KeyPairGenerator.getInstance(""ECDSA"", ""BC"");
        SecureRandom random = SecureRandom.getInstance(""SHA1PRNG"");
        ECGenParameterSpec ecSpec = new ECGenParameterSpec(""secp256k1"");
        keyGen.initialize(ecSpec,random);
        KeyPair keyPair = keyGen.generateKeyPair();
        privateKey = keyPair.getPrivate();
        publicKey = keyPair.getPublic();
    } catch (Exception e) {
        throw new RuntimeException(e);
    }
}

This is how i save it into json file
        a.generateKeyPair();
        byte[] enc_key = a.privateKey.getEncoded();

        StringBuilder key_builder = new StringBuilder();
        for(byte b : enc_key){
            key_builder.append(String.format( ""%02X"",b));
        }

        String serialized_key = key_builder.toString();
        account.privateKey=serialized_key;
        try (Writer writer = new FileWriter(""Output.json"")) {
            Gson gson = new GsonBuilder().create();
            gson.toJson(account, writer);
        } catch (IOException e) {
            e.printStackTrace();
        }

And read it from file
        Gson gson = new GsonBuilder().create();
        try (Reader read1 = new FileReader(""Output.json"")) {
            account=gson.fromJson(read1,account.getClass());
            byte[] encoded_key=account.privateKey.getBytes();
            a.privateKey = getPrivateKey(encoded_key);

    public static PrivateKey getPrivateKey(byte[] privkey) throws NoSuchAlgorithmException, InvalidKeySpecException {
    Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
    EncodedKeySpec privateKeySpec = new PKCS8EncodedKeySpec(privkey);
    KeyFactory kf = null;
    try {
        kf = KeyFactory.getInstance(""ECDSA"", ""BC"");
    } catch (NoSuchProviderException e) {
        e.printStackTrace();
    }
    PrivateKey privateKey = kf.generatePrivate(privateKeySpec);
    return privateKey;
}

Function fail and i get error
java.security.spec.InvalidKeySpecException: encoded key spec not recognized: failed to construct sequence from byte[]: unknown tag 19 encountered

","You are forgetting to hex decode the private key. Just performing getBytes won't do that.
The encoded byte starts with a SEQUENCE, tag 0x30. This in hex will of course be ""30"" or, in ASCII: 0x33, 0x30: these are the two first bytes returned by getBytes. Now the decoder looks at the first byte with bit value 0b001_10011. The last 5 bits encode the tag value, which is 16 + 2 + 1 = 19. Hence the specific error.
","122","<java><encryption><ecdsa>","0","0","1","2018-08-30 01:42:07","52088129","0","0","","","","2018-08-29 15:29:18",""
"47598339","U2F register signature verification fails","With one of my U2F tokens, NIST P-256 ECDSA signature verification fails on the U2F_REGISTER response.
I'm working according to this protocol description: https://fidoalliance.org/specs/fido-u2f-v1.0-nfc-bt-amendment-20150514/fido-u2f-raw-message-formats.html
U2F_REGISTER request:
  b852c99d386769a3289d45708680efcc2350c0a7c152adb93c708b22a55c5d11: challenge
  8adb4559abbea4a68754314e64aa6785901b6a236db5a14d040916799865e290: application
U2F_REGISTER response:
  05: reserved byte
  user_public_key (NIST P-256):
    04: key format (uncompressed)
    db3ca8b3863f2fed19dada227aa8a51dba9bd0ecafcb5313225c04618c9329df: x
    e540eb5c58d24704e899eaa72feef06722ad4669c5a3d5537ab88dc6a712f96d: y
  keyhandle
    40: length (64 bytes)
    96e7d09341237e1c306a71ed9d59eeb16be621dbb34eb346ca999301ad0bee28f62876fced320734b4f139b89b8608bb4b4cef0f864064c2b3af1966167c4278
  attestation certificate in X.509 DER format
    30: sequence
    82: length (130 bytes) ??
      01433081ea...
  ECDSA signature in X.509 DER format
    30: sequence
    44: length (68 bytes)
      02: integer
      20: length (32 bytes)
        6d090eefac83a67f9361adcd391395ab3636470e1eb479dc94e1194dc1f25259: r
      02: integer
      20: length (32 bytes)
        660f7d23cd6b1c74e8499503fd21f6662a3270e916a57096037001baad5c7064: s

I compute the SHA-256 hash of 00 (1 byte) + application (32 bytes) + challenge (32 bytes) + keyhandle (64 bytes this time) + user_public_key (1 + 32 + 32 bytes).
Then I call ecdsa.Verify(user_public_key, hash, r, s).
For one of the U2F tokens I have, ecdsa.Verify returns true (good), but for another one (see the bytes above), it returns false. What am I doing wrong in the example above?
","I was using the wrong public key for verifying the signature. I should have been using the public key within the attestation certificate (rather than the public key directly in the response). By doing so the signature verified correctly.
Here is a code example in Python which does the signature verification: https://github.com/concise/lightu2f.py/blob/20540f75ee5f86a4b2ad4bffe34074760978cbf9/lightu2f.py#L100 . It runs correctly on the data in the question.
","120","<digital-signature><ecdsa><fido-u2f>","0","1","1","2017-12-02 00:59:58","47603504","0","","","","","2017-12-01 17:17:03",""
"54412567","How to verify ECDSA signature in ASN.1 format and public key in DER using BouncyCastle?","I have a byte array that contains the public key, and a byte array that contains the ASN.1 formatted signature. Using ECDSA P-256.
The following code loads the public key:
var publicKey = PublicKeyFactory.CreateKey(publicKeyDERBytes);

And the following code verifies the signature:
var signer = SignerUtilities.GetSigner(""ECDSA"");

signer.Init(false, publicKey);
signer.BlockUpdate(signatureASN1Bytes, 0, signatureASN1Bytes.Length);
Console.WriteLine(signer.VerifySignature(signature));

But it always writes false. What could be wrong?
Using BouncyCastle.NetCore 1.8.3 on .NET Core.
","Turns out I was not getting the correct signer.
Instaead of:
var signer = SignerUtilities.GetSigner(""ECDSA"");

It should be:
var signer = SignerUtilities.GetSigner(""SHA256withECDSA"");

","119","<c#><.net-core><bouncycastle><ecdsa>","0","0","1","2019-01-29 14:40:00","","0","","","","","2019-01-29 01:18:50",""
"55699933","ImportError: cannot import name 'SECP256kl' from 'ecdsa'","I'm trying to use this code:
from ecdsa import SigningKey, SECP256kl

But I got this error:
ImportError: cannot import name 'SECP256kl' from 'ecdsa' (C:\Python\Python37\lib\site-packages\ecdsa\__init__.py)

","The correct name is SECP256k1 (the number ""1"", not the letters ""l"" or ""I"").
>>> import ecdsa
>>> dir(ecdsa)
[...,'SECP256k1',...]

You can also check it from the docs and codes in ecdsa github page:
 # python-ecdsa/src/ecdsa/__init__.py
...
from .curves import NIST192p, NIST224p, NIST256p, NIST384p, NIST521p, SECP256k1
...

","107","<python><ecdsa>","0","0","1","2019-04-16 06:48:45","","0","","2745495","","2019-04-16 05:39:17","2019-04-16 02:59:50",""
"57067241","C# bouncycastle AsymmetricCipherKeyPair to byte array ECDSA","I generate key pair like this.
ECKeyPairGenerator gen = new ECKeyPairGenerator(""ECDSA"");
SecureRandom secureRandom = new SecureRandom();
Org.BouncyCastle.Asn1.X9.X9ECParameters ecp = Org.BouncyCastle.Asn1.Nist.NistNamedCurves.GetByName(""P-256"");
ECDomainParameters ecSpec = new ECDomainParameters(ecp.Curve, ecp.G, ecp.N, ecp.H, ecp.GetSeed());
ECKeyGenerationParameters ecgp = new ECKeyGenerationParameters(ecSpec, secureRandom);
gen.Init(ecgp);
AsymmetricCipherKeyPair eckp = gen.GenerateKeyPair();

and I want to convert AsymmetricCipherKeyPair to byte array.
so I add code.
ECPublicKeyParameters ecPub = (ECPublicKeyParameters)eckp.Public;
ECPrivateKeyParameters ecPri = (ECPrivateKeyParameters)eckp.Private;

But I know there were two ways for convert AsymmetricCipherKeyPair to byte array.
first,
byte[] pubs = ecPub.Q.GetEncoded();

Second,
byte[] pubX = ecPub.Q.XCoord.ToBigInteger().ToByteArray();
byte[] pubY = ecPub.Q.YCoord.ToBigInteger().ToByteArray();

The results of both methods are slightly different.
first way, pubs[0] is always 0x04, and it make array length to 65 bytes.
like this
04 F0 9E 70 EB ED 52 4B 56 E8 64 9C 9A D9 1C 97 6F F1 92 86 BA 87 FC F5 AB E4 CC 72 C6 EA 77 FA 0D 30 4C 39 0F 38 BE E3 C7 3E 8B 4D 2F 05 C3 55 3F 78 DB 8E DD 77 DF 24 D4 3B 56 88 33 D7 CB 0B 9E 

seconde way, pubX[0] is sometimes 0x00, and it make array length to 65 bytes.
like this
pubX = 00 F0 9E 70 EB ED 52 4B 56 E8 64 9C 9A D9 1C 97 6F F1 92 86 BA 87 FC F5 AB E4 CC 72 C6 EA 77 FA 0D
pubY = 30 4C 39 0F 38 BE E3 C7 3E 8B 4D 2F 05 C3 55 3F 78 DB 8E DD 77 DF 24 D4 3B 56 88 33 D7 CB 0B 9E

Except for the value of index 0, the rest are the same.
Why does this difference occur?
What value do I actually use?
p.s.
I convert private key like this
byte[] pri = ecPri.D.ToByteArray();

Is this the right way?
And private key also has 0x00 on index 0. Why?
","","105","<c#><bouncycastle><ecdsa>","0","","0","2019-07-17 14:17:04","","2","1","238704","","2019-07-17 14:17:04","2019-07-17 01:09:42",""
"56685916","How to put this in python so it can loop random with the mask?","How would I put this in python so it can loop generate random with mask leading zeros?   
std::string min = ""000000000000000000000000000000000000000000000000000000000000000F"";
std::string max = ""FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364140"";
std::string get_random_ecdsa_key() {
   while (true) { 
     std::string s = get_random_hex(64);
     if (s >= min && s < max) {
        return s;
    }
  }
}        



import random

while True: 

   x = random.randint(0xF,0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364140)
   print hex (x) [2:66].lower()

","The code you've shared is pretty trivial to convert into Python. The logic structure is the same, you just have to port the syntax. The only challenge is implementing get_random_hex. I don't know what it actually does since you didn't include that part in your question, but I assume it randomly generates a string that is a certain length and contains hex digits.
import random

def get_random_hex(n):
    chars = ""0123456789ABCDEF""
    return """".join(random.choice(chars) for _ in range(n))

def get_random_ecdsa_key():
    min = ""000000000000000000000000000000000000000000000000000000000000000F""
    max = ""FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364140""
    while True:
        s = get_random_hex(64)
        if min <= s < max:
            return s

print(get_random_ecdsa_key())

","100","<python><hex><ecdsa>","0","1","2","2019-07-15 17:42:58","","0","","11673327","","2019-07-15 17:42:58","2019-06-20 12:22:39",""
"56685916","How to put this in python so it can loop random with the mask?","How would I put this in python so it can loop generate random with mask leading zeros?   
std::string min = ""000000000000000000000000000000000000000000000000000000000000000F"";
std::string max = ""FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364140"";
std::string get_random_ecdsa_key() {
   while (true) { 
     std::string s = get_random_hex(64);
     if (s >= min && s < max) {
        return s;
    }
  }
}        



import random

while True: 

   x = random.randint(0xF,0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364140)
   print hex (x) [2:66].lower()

","import random
min_bound = 0x000000000000000000000000000000000000000000000000000000000000000F
max_bound = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364140

def get_random_ecdsa_key():
    r = random.randint(min_bound,max_bound)
    return ""{:X}"".format(r)

Here you go! The interesting parts are 

random.randint(min, max) - returns an integer between min and max
return ""{:X}"".format(r) - just converts r from an integer to a hex string. The format string is equivalent to something like  printf(""%X"", r) in C++

","100","<python><hex><ecdsa>","0","0","2","2019-07-15 17:42:58","","0","","11673327","","2019-07-15 17:42:58","2019-06-20 12:22:39",""
"53451378","Need help reading/writing ECDSA Keys in GoLang","Currently, I have:
// generate keys
priv, err := ecdsa.GenerateKey(elliptic.P256(), rand.Reader)
// get public key
pub := priv.Public()

I, however, need help on getting the raw byte data and using the correct encoding to read/write these public and private keys to files.
","Just marshal them to a []byte using x509.MarshalECPrivateKey.  You can just read and write the binary to a file.
You might find in future you want to store the keys in PEM format, as is common.  You can do that with the encoding/pem package.
","99","<go><encryption><ecdsa>","1","1","1","2018-11-23 19:45:49","","2","","","","","2018-11-23 18:18:10",""
"50234953","Own random (not the private key) in the ECDSA","I'm trying to debug my own implementation of the ECDSA signature. To compare the intermediate results I would like to force the OpenSSL, Crypto++ or whatever else package to use a known ""random"" number instead of generating it each time the signature is created. Is there a way to do so? 
Since I'm working with the brainpool curves I can't use the microsoft crypto API. This doesn't support the brainpool curves in the Crypto API until Windows 10.
Another way could to be retrieve the random used after the ECDSA signature creation from one of the popular packages.
I appreciate any help
","Yes, this is possible with OpenSSL. OpenSSL provides the ability to override the default source of random numbers. To do this use the RAND_set_rand_method() function documented here:
https://www.openssl.org/docs/man1.1.0/crypto/RAND_set_rand_method.html
This function takes as an argument a RAND_METHOD structure which contains function pointers to the implementations of the OpenSSL random capabilities. Replace the bytes element with your own implementation.
For example
RAND_METHOD myrand, *oldrand;

oldrand = RAND_get_rand_method();
myrand = *oldrand;
myrand.bytes = mybytes;
RAND_set_rand_method(myrand);

Where mybytes is defined like this:
static int mybytes(unsigned char *buf, int num)
{
    /* Replace with however you want the random function to work */
    memset(buf, 0, num);
    return 1;
}

OpenSSL's own ecdsatest code does exactly this. For example see:
https://github.com/openssl/openssl/blob/OpenSSL_1_1_0-stable/test/ecdsatest.c#L65
","96","<openssl><bouncycastle><elliptic-curve><ecdsa>","-1","3","1","2018-05-09 06:41:25","50235200","5","","608639","","2018-05-09 01:08:49","2018-05-08 13:35:52",""
"45616506","What object same as Signature (java.security.signature) on Python?","I want to verify ECDSA signature generate on android by using python.
But I can't found object or any thing same as Signature object in Python.
Here is my verify code if using Java
String origin = txtOrigin.getText().toString();
try {
    sig = Signature.getInstance(""NONEwithECDSA"",""SC"");
    sig.initVerify(publicKey);
    byte[] stringInput = origin.getBytes(""UTF-8"");
    sig.update(stringInput);
    txtVerify.setText(sig.verify(signatureBytes)+"""");
} catch (Exception e) {
    e.printStackTrace();
}

","","95","<java><python><python-2.7><m2crypto><ecdsa>","0","","0","2018-04-21 21:44:12","","2","","1602555","user8332899","2018-04-21 21:44:12","2017-08-10 14:27:44",""
"56206075","How to validate a certificate chain of certificates using SHA256 ECDSA algorithm using JDK 11","I am trying to validate a certificate chain of certificates based on SHA256withECDSA algorithm.
I am using Java JDK 11.
When running the CertPathValidator.getInstance(""PKIX"").validate method, I get a crash Unrecognized algorithm for signature parameters SHA256withECDSA.
The root cause seems to be the following:
// null
providerSunEC.getService(""AlgorithmParameters"", ""SHA256withECDSA"");

There is no such signature parameters, though: the X509CertImpl instance contains an AlgorithmId with algid 1.2.840.10045.4.3.2 and params OID.1.2.840.10045.3.1.7 (DER Encoded, it should be prime256v1), which should be the default and only supported one.
My feeling, which may be highly wrong, is that the redundant prime256v1 could and should be omitted but I do not know how to implement it, as it is inside the Java code.
This is the stacktrace:
Caused by: java.security.cert.CertPathValidatorException: signature check failed
    at java.base/sun.security.provider.certpath.PKIXMasterCertPathValidator.validate(PKIXMasterCertPathValidator.java:135)
    at java.base/sun.security.provider.certpath.PKIXCertPathValidator.validate(PKIXCertPathValidator.java:233)
    at java.base/sun.security.provider.certpath.PKIXCertPathValidator.validate(PKIXCertPathValidator.java:141)
    at java.base/sun.security.provider.certpath.PKIXCertPathValidator.engineValidate(PKIXCertPathValidator.java:80)
    at java.base/java.security.cert.CertPathValidator.validate(CertPathValidator.java:309)
    at net.corda.core.internal.InternalUtils.validate(InternalUtils.kt:469)
    ... 64 more
Caused by: java.security.cert.CertificateException: Unrecognized algorithm for signature parameters SHA256withECDSA
    at java.base/sun.security.x509.X509CertImpl.verify(X509CertImpl.java:445)
    at java.base/sun.security.provider.certpath.BasicChecker.verifySignature(BasicChecker.java:166)
    at java.base/sun.security.provider.certpath.BasicChecker.check(BasicChecker.java:147)
    at java.base/sun.security.provider.certpath.PKIXMasterCertPathValidator.validate(PKIXMasterCertPathValidator.java:125)
    ... 69 more

This is the certificate chain:
-----BEGIN CERTIFICATE-----
MIICDjCCAaugAwIBAgIIL8JlejRD9+AwFAYIKoZIzj0EAwIGCCqGSM49AwEHMDcx
CzAJBgNVBAYTAkNIMQ8wDQYDVQQHDAZadXJpY2gxFzAVBgNVBAoMDk5vdGFyeSBT
ZXJ2aWNlMB4XDTE5MDUxODAwMDAwMFoXDTI3MDUyMDAwMDAwMFowNzELMAkGA1UE
BhMCQ0gxDzANBgNVBAcMBlp1cmljaDEXMBUGA1UECgwOTm90YXJ5IFNlcnZpY2Uw
WTATBgcqhkjOPQIBBggqhkjOPQMBBwNCAATQ5/8MzkZLIrlCmJwW36VFYN8qs/Qh
O4VVdsU54u/NvXr4ZHdvuhUshPusxger2tmTQ1G74JeHasiYuXRK7w5+o4GWMIGT
MB0GA1UdDgQWBBQU0zTXsjkN2A97z/YWgIat6XynDDAMBgNVHRMBAf8EAjAAMAsG
A1UdDwQEAwIDqDAjBgNVHSUEHDAaBggrBgEFBQcDAQYIKwYBBQUHAwIGBFUdJQAw
HwYDVR0jBBgwFoAU93fYF/b7cP07vc/w+joyfiG/AR0wEQYKKwYBBAGDimIBAQQD
AgEFMBQGCCqGSM49BAMCBggqhkjOPQMBBwNHADBEAiBwb2uZZjD8qAoxHOxpbajB
RQ6LCIjkbUN2f8my0X00lAIge/qClByuVWeAkibOLM0rxs9tdpU8JMBKlFCQltXj
iBM=
-----END CERTIFICATE-----
-----BEGIN CERTIFICATE-----
MIICjTCCAimgAwIBAgIIfN0wQLUbHR8wFAYIKoZIzj0EAwIGCCqGSM49AwEHMGMx
CzAJBgNVBAYTAlVTMREwDwYDVQQHEwhOZXcgWW9yazEOMAwGA1UECxMFQ29yZGEx
FjAUBgNVBAoTDVIzIEhvbGRDbyBMTEMxGTAXBgNVBAMTEENvcmRhIERvb3JtYW4g
Q0EwHhcNMTkwNTE4MDAwMDAwWhcNMjcwNTIwMDAwMDAwWjA3MQswCQYDVQQGEwJD
SDEPMA0GA1UEBwwGWnVyaWNoMRcwFQYDVQQKDA5Ob3RhcnkgU2VydmljZTBZMBMG
ByqGSM49AgEGCCqGSM49AwEHA0IABNrSB6SrX1F//yNl58QWH14ittAcPs0KIcGg
2KFzF6Y1aHzHdZPvE9M1ErJW3A/ElrfXBtYeVqUch9155ZvL0gyjgegwgeUwHQYD
VR0OBBYEFPd32Bf2+3D9O73P8Po6Mn4hvwEdMA8GA1UdEwEB/wQFMAMBAf8wCwYD
VR0PBAQDAgGGMCMGA1UdJQQcMBoGCCsGAQUFBwMBBggrBgEFBQcDAgYEVR0lADAf
BgNVHSMEGDAWgBTr7i4wFSlArhmYHthv431/B6LCEzARBgorBgEEAYOKYgEBBAMC
AQQwTQYDVR0eAQH/BEMwQaA9MDukOTA3MQswCQYDVQQGEwJDSDEPMA0GA1UEBwwG
WnVyaWNoMRcwFQYDVQQKDA5Ob3RhcnkgU2VydmljZaEAMBQGCCqGSM49BAMCBggq
hkjOPQMBBwNIADBFAiEA7RJ9ofluL3ainww+zUbKBpAMgbdjE/54EkCy2wZJVRQC
IBq7Hb1jUa5VlpMWiB1LjkzUX7Zyovv3i14d+iRkjIIW
-----END CERTIFICATE-----
-----BEGIN CERTIFICATE-----
MIICXjCCAfugAwIBAgIIHVb6wd3RHhIwFAYIKoZIzj0EAwIGCCqGSM49AwEHMFgx
GzAZBgNVBAMMEkNvcmRhIE5vZGUgUm9vdCBDQTELMAkGA1UECgwCUjMxDjAMBgNV
BAsMBWNvcmRhMQ8wDQYDVQQHDAZMb25kb24xCzAJBgNVBAYTAlVLMB4XDTE4MDcx
MDAwMDAwMFoXDTI3MDUyMDAwMDAwMFowYzELMAkGA1UEBhMCVVMxETAPBgNVBAcT
CE5ldyBZb3JrMQ4wDAYDVQQLEwVDb3JkYTEWMBQGA1UEChMNUjMgSG9sZENvIExM
QzEZMBcGA1UEAxMQQ29yZGEgRG9vcm1hbiBDQTBZMBMGByqGSM49AgEGCCqGSM49
AwEHA0IABAPL3qAm4WZms5ciBVoxMQXfK7uTmHRVvWfWQ+QVYP3bMHSguHZRzB3v
7EOE8RZpGDan+w007Xj7XR0+xG9SxmCjgZkwgZYwHQYDVR0OBBYEFOvuLjAVKUCu
GZge2G/jfX8HosITMA8GA1UdEwEB/wQFMAMBAf8wCwYDVR0PBAQDAgGGMCMGA1Ud
JQQcMBoGCCsGAQUFBwMBBggrBgEFBQcDAgYEVR0lADAfBgNVHSMEGDAWgBR8rqnf
uUgBKxOJC5rmRYUcORcHczARBgorBgEEAYOKYgEBBAMCAQEwFAYIKoZIzj0EAwIG
CCqGSM49AwEHA0cAMEQCIBmzQXpnCo9eAxkhwMt0bBr1Q0APJXF0KuBRsFBWAa6S
AiBgx6G8G9Ij7B8+y65ItLKVcs7Kh6Rdnr5/1zB/yPwfrg==
-----END CERTIFICATE-----
-----BEGIN CERTIFICATE-----
MIICCTCCAbCgAwIBAgIIcFe0qctqSucwCgYIKoZIzj0EAwIwWDEbMBkGA1UEAwwS
Q29yZGEgTm9kZSBSb290IENBMQswCQYDVQQKDAJSMzEOMAwGA1UECwwFY29yZGEx
DzANBgNVBAcMBkxvbmRvbjELMAkGA1UEBhMCVUswHhcNMTcwNTIyMDAwMDAwWhcN
MjcwNTIwMDAwMDAwWjBYMRswGQYDVQQDDBJDb3JkYSBOb2RlIFJvb3QgQ0ExCzAJ
BgNVBAoMAlIzMQ4wDAYDVQQLDAVjb3JkYTEPMA0GA1UEBwwGTG9uZG9uMQswCQYD
VQQGEwJVSzBZMBMGByqGSM49AgEGCCqGSM49AwEHA0IABGlm6LFHrVkzfuUHin36
Jrm1aUMarX/NUZXw8n8gSiJmsZPlUEplJ+f/lzZMky5EZPTtCciG34pnOP0eiMd/
JTCjZDBiMB0GA1UdDgQWBBR8rqnfuUgBKxOJC5rmRYUcORcHczALBgNVHQ8EBAMC
AYYwIwYDVR0lBBwwGgYIKwYBBQUHAwEGCCsGAQUFBwMCBgRVHSUAMA8GA1UdEwEB
/wQFMAMBAf8wCgYIKoZIzj0EAwIDRwAwRAIgDaL4SguKsNeTT7SeUkFdoCBACeG8
GqO4M1KlfimphQwCICiq00hDanT5W8bTLqE7GIGuplf/O8AABlpWrUg6uiUB
-----END CERTIFICATE-----

","","93","<java><ssl><java-11><ecdsa><pkix>","1","","0","2019-05-19 08:43:02","","2","","3127812","","2019-05-19 08:43:02","2019-05-19 08:34:06",""
"55976645","ECDSA Signature Verification Failed on Javascript(Elliptic)","I have an issue with verification of a ECDSA Signature made on javacard. I am trying to verify the signature in Javascript(Elliptic) but the verification always fails.
My applet(javacard) looks like:
//initialization
ecdsa = Signature.getInstance(Signature.ALG_ECDSA_SHA_256, false);
eccKey=SecP256k1.newKeyPair(); //in SecP256k1 the p,a,b,g,r,k are set
eccKey.genKeyPair();

//singing method
ecdsa.init(eccKey.getPrivate(), Signature.MODE_SIGN);

//Generates the signature of all input data.
short lenTmp = ecdsa.sign(buffer, ISO7816.OFFSET_CDATA, (short)1, buffer, 
(short)0);
//I tried also to sigh precomputed hash - same result
/*short lenTmp = ecdsa.signPreComputedHash(buffer, ISO7816.OFFSET_CDATA, 
len, buffer, (short)0); */

apdu.setOutgoingAndSend((short)0, lenTmp);

I get a private key 
(e.g. : 3E05E289911E66A8153EE9C15A0AFC109C49207DB9DC4656CC4D092323EA65BC)
When I sign a message (e.g : 0x01)
I get the signature in DER format:
304402205F376BB2B2D48BBB0275099C3B9591F18ECA424DD953EB27FDE37BA819B98F980220539A85B91491E977F6B31B5A76BEF6805BBC3B6481A51C23B9E7C6F39FB70569
Also its verification is successful on javacard..
But when I try to verify it on nodejs, it always fails.
My code looks like:
let elliptic = require('elliptic');
let ec = new elliptic.ec('secp256k1');
let keyPair = ec.keyFromPrivate(""3E05E289911E66A8153EE9C15A0AFC109C49207DB9DC4656CC4D092323EA65BC"");
let privKey = keyPair.getPrivate(""hex"");
let pubKey = keyPair.getPublic();
let signature = ""304402205F376BB2B2D48BBB0275099C3B9591F18ECA424DD953EB27FDE37BA819B98F980220539A85B91491E977F6B31B5A76BEF6805BBC3B6481A51C23B9E7C6F39FB70569"";
let msg = 0x01;
let validSig = ec.verify(msg, signature, pubKey);
console.log(""Signature valid?"", validSig);//returns always false

Also, if I sign the same message with the same key on nodejs, the verification is successful.
Moreover, I noticed that the signature is always different in javacard, while the signature on elliptic is always the same, maybe it always chosses the same random k.
","This is most likely caused due to the fact that standard ecdsa libraries in java/go/python/etc. generate the signature der encoded where as the javascript library simply concatenates the R and S values of the signature. Here is how I deal with this issue in my own library HERE. Sorry the example is golang to typescript, but hopefully you can reverse engineer this to java/javascript. Event within Node.js this issue exists. Here is a LINK to a discussion that ultimately helped me figure out how to breach the gap between the implementations within my own work.
","93","<javascript><signature><javacard><ecdsa>","1","1","1","2019-05-03 23:20:51","","2","","5953575","","2019-05-03 23:20:51","2019-05-03 20:24:35","2019-05-07 08:58:44"
"54274765","Load public key with openssl - invalid encoding","I start using openssl.
I want to use a public key to check a signature. But for now, I can not read my public key with openssl.
Here is my source code:
#include <iostream>

#include <openssl/ec.h>
#include <openssl/evp.h>
#include <openssl/err.h>

bool verifyPublicKey(const std::string &sRawPublicKey);
void printAllError();


int main(int argc, char* argv[])
{
    if (argc < 2) {
        std::cerr << ""Usage: "" << argv[0] << "" PUBLIC KEY"" << std::endl;
        return EXIT_FAILURE;
    }

    std::string sPublicKey = argv[1];

    std::cout << ""Key: "" << sPublicKey << std::endl;

    bool bRes = verifyPublicKey(sPublicKey);

    if (!bRes)
    {
        std::cerr << ""verifyPublicKey failled"" << std::endl;
        return EXIT_FAILURE;
    }

    return EXIT_SUCCESS;
}

bool verifyPublicKey(const std::string &sRawPublicKey)
{
    bool bRes = false;

    EC_KEY *eckey = EC_KEY_new_by_curve_name(NID_X9_62_prime256v1);
    EC_KEY_set_conv_form(eckey, POINT_CONVERSION_UNCOMPRESSED);

    unsigned char *p_RawPublicKey = new unsigned char[sRawPublicKey.length() + 1];
    std::copy(sRawPublicKey.begin(), sRawPublicKey.end(), p_RawPublicKey);
    const unsigned char *pubkey_raw_p = p_RawPublicKey;

    o2i_ECPublicKey(&eckey, &pubkey_raw_p, sRawPublicKey.size());

    if (!EC_KEY_check_key(eckey))
    {
        EC_KEY_free(eckey);
        bRes = false;
        printAllError();
    }
    else
    {
        EC_KEY_free(eckey);
        bRes = true;
    }

    return bRes;
}

void printAllError()
{
    while (ERR_peek_last_error() != 0)
    {
        std::cerr << ERR_error_string(ERR_get_error(), nullptr) << std::endl;
    }
}

I run it with the following public key:

3059301306072A8648CE3D020106082A8648CE3D03010703420004E297417036EB4C6404CC9C2AC4F28468DD0A92F2C9496D187D2BCA784DB49AB540B9FD9ACE0BA49C8532825954755EC10246A71AF2AEE9AEC34BE683CDDFD212

ASN.1 Decoder:
SEQUENCE {    
    SEQUENCE {
        OBJECTIDENTIFIER 1.2.840.10045.2.1 (ecPublicKey)
        OBJECTIDENTIFIER 1.2.840.10045.3.1.7 (P-256)    
    }
    BITSTRING 0x04E297417036EB4C6404CC9C2AC4F28468DD0A92F2C9496D187D2BCA784DB49AB540B9FD9ACE0BA49C8532825954755EC10246A71AF2AEE9AEC34BE683CDDFD212
    : 0 unused bit(s) 
}

With the ASN.1, I notice that the key I use is in the correct format: 0x04 || HEX(x) || HEX(y) with z = 0x04.
The output of the program is as follows:

Key: 3059301306072A8648CE3D020106082A8648CE3D03010703420004E297417036EB4C6404CC9C2AC4F28468DD0A92F2C9496D187D2BCA784DB49AB540B9FD9ACE0BA49C8532825954755EC10246A71AF2AEE9AEC34BE683CDDFD212
error:10067066:elliptic curve routines:ec_GFp_simple_oct2point:invalid encoding
error:10098010:elliptic curve routines:o2i_ECPublicKey:EC lib
error:1010206A:elliptic curve routines:ec_key_simple_check_key:point at infinity verifyPublicKey failed

I'm lost. Do you have explanations? 
Moreover, is it possible to go further by giving only x and y (without ASN.1 header).
Thank you
","Looks like you should feed the raw point to function o2i_ECPublicKey(), without the ASN.1 framing.
","91","<c++11><openssl><public-key><ecdsa>","1","0","1","2019-01-20 11:01:38","54275800","0","","","","","2019-01-20 08:29:41",""
"44812974","Create authorized keys from ECDSA public key","I'm using Bouncy Castle API and I have ECPublicKey object but I'm not sure exactly how to construct a OpenSSH authorized key from there. I don't know what the format looks like. I'm thinking my solution would be similar to how it's done for RSA and DSA.. Decoding RSA/DSA Public Key
Does anyone have any suggestions?
","The format of ECDSA keys is described in the RFC5656:
In short:

The ""ecdsa-sha2-*"" key formats all have the following encoding:
string   ""ecdsa-sha2-[identifier]""
byte[n]  ecc_key_blob

The ecc_key_blob value has the following specific encoding:
string   [identifier]
string   Q


","90","<bouncycastle><public-key-encryption><openssh><ecdsa>","0","0","1","2017-06-29 07:06:29","","0","","","","","2017-06-28 21:39:54",""
"56366726","AWS cloudHSM ECDSA-SHA256 signature output to DER","I am attempting to use an AWS cloudHSM to sign a message that needs to be converted to DER to be verified by another application. The output signature file from AWS is binary and I am struggling to convert to DER.
I can verify the signature is correct in OpenSSL as it will accept the signature as binary
$ openssl dgst -sha256 -verify public.pem -signature signedMessage message
Verified OK

Struggling to find the correct procedure to convert to DER. I tried
openssl enc -base64 -in signedMessage

But verification fails.
Thanks
","","89","<openssl><asn.1><ecdsa><der>","0","","0","2019-05-30 03:01:11","","6","","481815","","2019-05-30 03:01:11","2019-05-29 18:38:36",""
"58076132","Encryption in swift using Diffie Hellman key exchange and an elliptic curve encryption","I've been trying to encrypt and decrypt a string in swift using a Diffie Hellman key exchange and an elliptic curve encryption. 
Following is the code that I followed.
SWIFT Code :
 let attributes: [String: Any] = [kSecAttrKeySizeInBits as String: 256,
                                     kSecAttrKeyType as String: kSecAttrKeyTypeEC,
                                     kSecPrivateKeyAttrs as String: [kSecAttrIsPermanent as String: false]]
 var error: Unmanaged<CFError>?
 if #available(iOS 10.0, *) {
 **// Step 1:  Generating the Public & Private Key**
        guard let privateKey1 = SecKeyCreateRandomKey(attributes as CFDictionary, &error) else {return false}

        let publicKey1 = SecKeyCopyPublicKey(privateKey1)
        guard let privateKey2 = SecKeyCreateRandomKey(attributes as CFDictionary, &error) else {return false}

        let publicKey2 = SecKeyCopyPublicKey(privateKey2)

        let dict: [String: Any] = [:]
 **// Step 2:  Generating Shared Key**   
        guard let shared1 = SecKeyCopyKeyExchangeResult(privateKey1, SecKeyAlgorithm.ecdhKeyExchangeStandardX963SHA256, publicKey2!, dict as CFDictionary, &error) else {return false}

**// Step 3:  Encrypt string using Sharedkey**
        let options: [String: Any] = [kSecAttrKeyType as String: kSecAttrKeyTypeEC,
                                      kSecAttrKeyClass as String: kSecAttrKeyClassPrivate,
                                      kSecAttrKeySizeInBits as String : 256]
        // Stuck from this line on
        guard let key = SecKeyCreateWithData(shared1 ,
                                             options as CFDictionary,
                                             &error) else {return false}
        print(key)


        let str = ""Hello""
        let byteStr: [UInt8] = Array(str.utf8)
        let cfData = CFDataCreate(nil, byteStr, byteStr.count)


        guard let encrypted = SecKeyCreateEncryptedData(publicKey1!,
                                                        SecKeyAlgorithm.ecdsaSignatureDigestX962SHA256,
                                                        cfData!,
                                                        &error) else {return false}
        print(encrypted)

    } else {
        print(""unsupported"")
    }

JAVA Code :
public static Map<String, Object> ecEncrypt(String deviceData, String serverPubKey, String dsTranID)
throws DataEncryptionException {
provider = new BouncyCastleProvider();
HashMap<String, Object> result = null;
JWEObject jweObject = null;
JWK jwk = null;
SecretKey Z = null;
JWEHeader header = null;
ECPublicKey ecpubkey = null;
byte[] byte_pubkey = null;

try {

result = new HashMap<String, Object>();
/*
 * Generate Ephemeral keypair for SDk which constitute Public and
 * Private key of SDK
 */
STEP 1:
sdkKeyPair = Crypto.generateEphemeralKeyPair();

/*
 * Compute Secrete Key Z from SDKs Private Key(pSDK),DS Public
 * key(serverPubKey) and DS ID
 */
//converting string to Bytes
STEP 2:
byte_pubkey = Base64.decode(serverPubKey, android.util.Base64.DEFAULT);

//converting it back to EC public key
STEP 3:
KeyFactory factory = KeyFactory.getInstance(""ECDSA"", provider);
ecpubkey = (ECPublicKey) factory.generatePublic(new X509EncodedKeySpec(byte_pubkey));
System.out.println(""FINAL OUTPUT"" + ecpubkey);

STEP 4:
Z = Crypto.generateECDHSecret(ecpubkey,
(ECPrivateKey) sdkKeyPair.getPrivate(), dsTranID,
""A128CBC_HS256"");

System.out.println(""****Secrete key Z for SDK Computed succesfully *****"");
/*
 * Build JWK to construct header
 */
STEP 5:
jwk = new ECKey.Builder(Curve.P_256,
(ECPublicKey) sdkKeyPair.getPublic()).build();

STEP 6:
header = new JWEHeader.Builder(JWEAlgorithm.ECDH_ES,
EncryptionMethod.A128CBC_HS256).ephemeralPublicKey(
ECKey.parse(jwk.toJSONString())).build();

System.out.println(""****Header for SDK Computed  succesfully*****"");

/*
 * Add Header and payload before encrypting payload using secret key
 * Z
 */

STEP 7:
jweObject = new JWEObject(header, new Payload(deviceData));
jweObject.encrypt(new DirectEncrypter(Z));
/*
 * serialize JWEobject which contains
 * [header-base64url].[encryptedKey
 * -base64url].[iv-base64url].[cipherText
 * -base64url].[authTag-base64url]
 */
System.out
.println(""****Payload of SDK encrypted succesfully *****"");

return result;
} catch (Exception e) {
e.printStackTrace();
throw new DataEncryptionException();
} finally {
sdkKeyPair = null;
jweObject = null;
jwk = null;
Z = null;
header = null;
}
}

I included Java code as well. I have to do the same in Swift. How to do EC Encryption using the Shared key(Shared1) to encrypt the string? I need to do Step 3. Anyone please help on this?
","First of all, you're trying to implement ECIES. Knowing the actual name is important if you want to look up information about the scheme.
So lets assume that key pair 1 is from the sender of the ciphertext and key pair 2 is then from the receiver of the ciphertext. In that case key pair 1 should be ephemeral (created on the spot, tied to one encrypted message) and key pair 2 is static (created beforehand and kept). Furthermore, public key 2 is trusted to be from the receiving party. This is all not clear from your simplified code, and in your code you could still switch around the sender and receiver.
So with the public key (2) of the receiver the sender can use their private key to create a shared secret, called shared1 in your code. You can now use shared1 to perform symmetric encryption of the data. Then you just have to send the ephemeral public key of the sender and the ciphertext to the receiver. The receiver uses the public key of the sender (1) and their static private key (2) to create shared2. This is identical to shared1 and can thus be used as a key to decrypt the data.
So that's it, other than to note that since the private key (1) of the sender is tied to the data, it isn't needed anymore once shared1 is calculated, and may be discarded even before the message is encrypted.

If you read above then you can see that having all of this in one method is not a good idea:

create the static key pair of the receiver;
send the public key of the receiver to the sender and make sure that the sender can trust the public key to be from the receiver (e.g. using certificate infrastructure);

Now for the encryption and sending:

create the key pair of the sender;
derive the symmetric key;
throw away the private key;
encrypt the data;
send the public key and the data;

and for the receiving:

use the private key to derive the symmetric key;
decrypt the data.

And that's it. You probably want to have these steps made explicit in your code.
","89","<ios><swift><encryption><ecdsa><ecdh>","1","1","1","2019-11-03 20:21:44","58089797","0","","13302","","2019-11-03 20:21:44","2019-09-24 08:30:51",""
"27144097","Which elliptic curves does jarsigner support?","I will be signing JARs with an ECDSA key, and I can choose now which elliptic curve I will use. I at least need to be able to generate the signature with jarsigner. Where can I see, what elliptic curves jarsigner supports?
I tested that out of 65 elliptic curves supported by my OpenSSL installation, my jarsigner supports 46. Oracle documentation on jarsigner does not say anything about what is supported. Is it documented anywhere at all?
","Here is an answer: ""Support for elliptic curves by jarsigner"". To quote the conclusion:
Support of elliptic curves by jarsigner depends on jarsigner itself and on the JRE configuration. There is no command-line option to list all supported curves.
","89","<elliptic-curve><jarsigner><jar-signing><ecdsa>","1","0","1","2015-01-02 19:51:11","27747754","0","","3608247","","2014-11-26 09:41:15","2014-11-26 08:12:05",""
"52836472","OpenSSL occasionally generates wrong signature","I have a C++ programme, ECDSA key pair and some string to sign. The programme generates signature and saves it into a file (signature.bin). Then I check the validity of the signature via the following command:
openssl dgst -verify ec_public.pem -signature signature.bin ToSign.txt

the problem is that the programme sometimes generates wrong signature. 16 times out of 21 the above command outputs:
Error Verifying Data

while in the remaining 5 occurrences it outputs:
Verified OK

How can it be possible?
Here is the programme:
SSL_library_init();
OPENSSL_config(nullptr);
SSL_load_error_strings();
OpenSSL_add_all_algorithms();
ERR_load_BIO_strings();
CRYPTO_set_id_callback(ThreadIdFunction);
CRYPTO_set_locking_callback(LockingFunction);

const TString pk = ""-----BEGIN EC PRIVATE KEY-----\n""
                       ""MHcCAQEEIG90zmo1o3NWNFa8wp2z4rdQXGSN8xAP/OATLpwlgi+1oAoGCCqGSM49\n""
                       ""AwEHoUQDQgAE5TwpzBhjUWZoOf629GfwGG5WlRJD7TSuz+ZTHUaiK5mj2qgxBOPk\n""
                       ""eqOrTYXsiPwnaWe23zHjIM8NOhAm1BiGgA==\n""
                       ""-----END EC PRIVATE KEY-----\n"";

const TString ToSign = ""eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJhc2RmIn0"";

EVP_MD_CTX *Ctx    = EVP_MD_CTX_create();
BIO *       Bio    = BIO_new_mem_buf(pk.data(), pk.size());
EVP_PKEY *  EVPKey = PEM_read_bio_PrivateKey(Bio, nullptr, nullptr, nullptr);

EVP_DigestSignInit(Ctx, nullptr, EVP_sha256(), nullptr, EVPKey);
EVP_DigestSignUpdate(Ctx, ToSign.data(), ToSign.size());
size_t SignatureLength;
EVP_DigestSignFinal(Ctx, nullptr, &SignatureLength);

TString Result;
Result.resize(SignatureLength);
EVP_DigestSignFinal(Ctx, reinterpret_cast<unsigned char *>(const_cast<char *>(Result.data())), &SignatureLength);

// Saving to file...

","You are invoking the right OpenSSL methods. However, you did not explain in detail how you save the Result to file. Based on its name, TString probably behaves as a 0-terminated string. If so, then the signature will not be written to the file correctly but truncated too early whenever the it contains a 0-byte. Note that the ECDSA signing steps include a random component so the signature is different every time you run your code.
The following reasoning supports this guess and roughly explains why your code fails and succeeds as often as it does. If you read this explanation about the format of the ECDSA signature, you will see that the 0-byte is very common in such signatures. The probability is about 3/4 for the first bytes of the r and s components combined. Then there is an additional probability of 1-(255/256)^64, about 1/4, that the remaining 64 bytes will contain a 0. So the probability of failure is roughly 3/4 + 1/4*1/4, about 80%.
Your sample space is small, but with that string-mistake taken into account, 5 successes out of 21 attempts is a likely result.
","86","<openssl><sign><ecdsa>","2","1","1","2018-10-17 05:43:01","","0","","","","","2018-10-16 13:22:22",""
"53456211","How to separate marshalled ecdsa public and private keys in GoLang","So far, I have:
key, err := ecdsa.GenerateKey(elliptic.P521(), rand.Reader)
if err != nil {
    os.Exit(-1)
}
marshalled, err := x509.MarshalECPrivateKey(key) // marshalls data to byte stream
if err != nil {
    os.Exit(-1)
}

Basically, what I am having trouble with has to do with the fact that when a key pair is generated, it is stored in an *ecdsa.PrivateKey, in which the public key is stored in the *ecdsa.PrivateKey.PublicKey, and when I marshall the key pair data (stored in the *ecdsa.PrivateKey) using x509.MarshalECPrivateKey(key), a single byte slice is returned. I am therefore having trouble determining which are the public and private keys in the byte slice itself.
","The private key is a superset of the public key.  It always contains the public key.  Usually a public key is stored as part of a certificate.
If you really want to get the public key by itself, you can grab the X and Y big integers from the ecdsa public key struct and store the binary representation of them.
You might benefit from a bit of retrospect on your design here.  There aren't too many situations where you need to communicate a public key alone.
","83","<go><encryption><public-key-encryption><ecdsa>","0","0","1","2018-11-24 07:55:33","","0","","10033867","","2018-11-24 07:50:57","2018-11-24 07:45:40",""
"55330120","How to sign SAML 2.0 AuthnRequest with ECDSA (​NIST Curve P-256/​ SHA-256) in PHP","I need to sign SAML 2.0 AuthnRequest with ECDSA (​NIST Curve P-256/​ SHA-256) in PHP.
To create SAML 2.0 AuthnRequest I'm using https://github.com/simplesamlphp/simplesamlphp
I have a private key
Private-Key: (256 bit)
priv:
    0d:.....
pub:
    04:....
ASN1 OID: prime256v1
NIST CURVE: P-256

To create signature, I'm using https://github.com/phpecc/phpecc because https://github.com/robrichards/xmlseclibs does not seem to support NIST Curve P-256/​ SHA-256
I've implemented this example exactly how it is https://github.com/phpecc/phpecc/blob/HEAD/examples/creating_signature.php but I'm getting error from request reciver. 
Where do I get from or how can I create <ds:DigestValue>...</ds:DigestValue>
What am I doing this wrong?
Am I using wrong libraries?
Is there one vendor to support this case?
","","83","<php><saml-2.0><elliptic-curve><ecdsa><xml-dsig>","1","","0","2019-03-25 01:07:36","","0","","","","","2019-03-25 01:07:36",""
"55886692","bouncycsatle ecdsa verify signature failed though passing on openssl","I have generated EC curve keys using openssl and generated the signature using sha256 digest  
The data: 265a33bf7a514b6671e6e02aaee2383759348d9f
openssl dgst -sha256 -sign key1.pem data > sig1

The public key file pubkey1.pem
   -----BEGIN PUBLIC KEY-----
    MFYwEAYHKoZIzj0CAQYFK4EEAAoDQgAE/2CznS1gXRaO6z8UvF1SOs97Dwp5HUdo
    1Y9OW91lfLl1NA8uXUFY7wJYvTl2dbnuZ1muh7htsxMVgEEbn+XCdQ==
    -----END PUBLIC KEY-----

The signature file base64 encoded
MEUCIQDqUv33+c3svyYOXPVZCYx49TE2Vxq4uP5kSV2ZJ4o/JwIgEqWkxdSMNuQNuzL4KXTEeH/O
ZBFjyErxvHgdHTCjeh0=

Singature verification passed 
[bash]$ base64 -d sig1b64  > sig1d
[bash]$ openssl dgst -sha256 -verify pubkey1.pem -signature sig1d 
data
Verified OK

When i verify this using the Java Bouncycastle library it fails to verify the signature, here is the code snippet, 
    public boolean verifyMessage (final String param,final String message , final String signature , final String algo ) throws Exception
{

    byte[] content = param.getBytes();
    InputStream is = new ByteArrayInputStream(content);
    InputStreamReader isr = new InputStreamReader(is);

    Reader br = new BufferedReader(isr);
    PEMParser parser = new PEMParser(br);

    Object obj = parser.readObject();
    PublicKey thepubKeyofA = null;

    if (obj instanceof org.bouncycastle.asn1.x509.SubjectPublicKeyInfo) {
        SubjectPublicKeyInfo eckey = (SubjectPublicKeyInfo) obj;
        thepubKeyofA = new JcaPEMKeyConverter().setProvider(""BC"").getPublicKey(eckey);
        Signature ecdsaVerify = Signature.getInstance(""SHA256withECDSA"", ""BC"");
        ecdsaVerify.initVerify(thepubKeyofA);
        ecdsaVerify.update(message.getBytes());
        boolean result = ecdsaVerify.verify(Utils.decodeBASE64(signature));
        return result;

    }

","","83","<java><openssl><bouncycastle><ecdsa>","1","","0","2019-04-28 13:04:36","","5","1","911576","","2019-04-28 13:04:36","2019-04-28 03:09:01",""
"44545281","ECDSA_do_verify is throwing error","ECDSA verify signature failed 
 if (ECDSA_do_verify(digest.data, digest.len, sig, ec_key)) {
      printf(""successful"");
    } else {
         printf(""Error in signing"");
        while ((l=ERR_get_error_line_data(&file,&line,&data,&flags)) != 0) { 
            syslog(LOG_ERR, ""ECDSA_do_verify Error %x : %s : %s : %d"",
                    l, ERR_error_string(l,buf), file,line);
        }
}    

Error:-

ECDSA_do_verify Error 3208408d :
  error:3208408D:lib(50):func(132):reason(141) : fec_crypto_api.c : 249 
ECDSA_do_verify Error 320c308d :
  error:320C308D:lib(50):func(195):reason(141) : fec_key.c : 111 
ECDSA_do_verify Error 320af066 :
  error:320AF066:lib(50):func(175):reason(102) : fec_crypto.c : 2090 
ECDSA_do_verify Error 3206807b :
  error:3206807B:lib(50):func(104):reason(123) : fec_crypto_api.c : 587

How to fix this?
","","80","<openssl><ecdsa>","0","","0","2017-06-14 14:39:53","","3","","6535399","","2017-06-14 14:39:53","2017-06-14 12:48:18",""
"35301483","CloudKit Server-to-Server authentication with delphi?","I saw the article yesterday on Apple CloudKit and the new server to server solution. See link here.
Is there anyone who knows an up-to-date way how to calculate ECDSA in Delphi 10 Seattle ?
I did not find yet any particular unit to do so.
","","78","<delphi><cloudkit><ecdsa><server-to-server>","1","","0","2016-02-09 22:57:17","","1","","-1","","2017-05-23 10:28:24","2016-02-09 20:25:19",""
"49495570","Cannot verify signature using C-style function calls","The following prints FAIL and I cannot understand why:
#include <cryptopp/eccrypto.h>
#include <cryptopp/oids.h>
#include <cryptopp/osrng.h>
#include <iostream>
using namespace std;
using namespace CryptoPP;
int main() {
    AutoSeededRandomPool prng;
    ECDSA<ECP, SHA256>::PrivateKey private_key;
    ECDSA<ECP, SHA256>::PublicKey public_key;
    private_key.Initialize( prng, ASN1::secp160r1() );
    private_key.MakePublicKey(public_key);
    ECDSA<ECP, SHA256>::Signer signer(private_key);
    ECDSA<ECP, SHA256>::Verifier verifier(public_key);
    signer.AccessKey().Initialize(prng, ASN1::secp160r1());
    string signature(signer.MaxSignatureLength(), 0);
    string message = ""asdf"";
    auto signature_length = signer.SignMessage(
        prng, (const byte*)message.data(),
        message.size(), (byte*)signature.data());
    signature.resize(signature_length);
    bool verified = verifier.VerifyMessage(
        (const byte*)message.data(), message.size(),
        (const byte*)signature.data(), signature.size());
    if (verified)
        cout << ""PASS"" << endl;
    else
        cout << ""FAIL"" << endl;
}

It follows the instructions in crypto++ wiki: https://www.cryptopp.com/wiki/ECDSA#Message_Signing and verifies with a public key derived from the private used to sign the same message. Should I switch to filters?
","
The following prints FAIL and I cannot understand why:

You are close. Looking at the wiki page there are a few problems. First, this is undefined behavior (it has been fixed on the wiki):
auto signature_length = signer.SignMessage(
    prng, (const byte*)message.data(),
    message.size(), (byte*)signature.data());

To get the non-const pointer you need this instead (but it is not the cause of your issue):
auto signature_length = signer.SignMessage(
    prng, (const byte*)&message[0],
    message.size(), (byte*)&signature[0]);

Second, when you call Initialize twice you whack the old configuration. ""Whack"" means you generate new parameters. Effectively you overwrote the other private key:
private_key.Initialize( prng, ASN1::secp160r1() );
...
signer.AccessKey().Initialize(prng, ASN1::secp160r1());

It is not readily apparent, but the Initialize that takes a prng generates a new key. You want an Initialize that does not take a prng:
private_key.Initialize( prng, ASN1::secp160r1() );
...
signer.AccessKey().Initialize(private_key);

Third, the page is not clear how to move between Signers/Verifiers and PublicKey/PrivateKey. Here are some other ways to do it for illustration purposes:
cryptopp $ cat test.cxx
#include ""eccrypto.h""
#include ""oids.h""
#include ""osrng.h""
#include <string>
#include <iostream>

int main()
{
    using namespace CryptoPP;
    AutoSeededRandomPool prng;

    ECDSA<ECP, SHA256>::Signer signer;
    ECDSA<ECP, SHA256>::Verifier verifier;

    signer.AccessKey().Initialize(prng, ASN1::secp160r1());
    signer.AccessKey().MakePublicKey(verifier.AccessKey());

    std::string signature(signer.MaxSignatureLength(), 0);
    std::string message = ""asdf"";

    auto signature_length = signer.SignMessage(
        prng, (const byte*)&message[0],
        message.size(), (byte*)&signature[0]);
    signature.resize(signature_length);

    bool verified = verifier.VerifyMessage(
        (const byte*)&message[0], message.size(),
        (const byte*)&signature[0], signature.size());

    if (verified)
        std::cout << ""PASS"" << std::endl;
    else
        std::cout << ""FAIL"" << std::endl;

    return 0;
}

I'm working from Crypto++ directory so the includes and command line are a little different:
cryptopp$ g++ -I . test.cxx ./libcryptopp.a -o test.exe
cryptopp$ ./test.exe
PASS


If you want to use both Signers/Verifiers and PublicKey/PrivateKey then try something like:
cryptopp$ cat test.cxx
#include ""eccrypto.h""
#include ""oids.h""
#include ""osrng.h""
#include <string>
#include <iostream>

int main()
{
    using namespace CryptoPP;
    AutoSeededRandomPool prng;

    ECDSA<ECP, SHA256>::Signer signer;
    ECDSA<ECP, SHA256>::Verifier verifier;

    ECDSA<ECP, SHA256>::PrivateKey& sKey = signer.AccessKey();
    sKey.Initialize(prng, ASN1::secp160r1());
    ECDSA<ECP, SHA256>::PublicKey& pKey = verifier.AccessKey();
    sKey.MakePublicKey(pKey);

    std::string signature(signer.MaxSignatureLength(), 0);
    std::string message = ""asdf"";

    auto signature_length = signer.SignMessage(
        prng, (const byte*)&message[0],
        message.size(), (byte*)&signature[0]);
    signature.resize(signature_length);

    bool verified = verifier.VerifyMessage(
        (const byte*)&message[0], message.size(),
        (const byte*)&signature[0], signature.size());

    if (verified)
        std::cout << ""PASS"" << std::endl;
    else
        std::cout << ""FAIL"" << std::endl;

    return 0;
}


This looks a little unusual:
ECDSA<ECP, SHA256>::Signer signer;
...
signer.AccessKey().Initialize(prng, ASN1::secp160r1());

Typically you use {secp160r1, SHA1} or {secp256k1, SHA256}. That maintains the Security Levels of the system as a whole. When you use {secp160r1, SHA256} you are reducing the security level to about 80-bits because of secp160r1.
","76","<c++><crypto++><ecdsa>","-1","0","1","2018-03-27 16:29:08","49498017","4","","","","","2018-03-26 15:48:30",""
"55691841","Convert from plain signature to der encoded signature","I don't know how to encode my raw ecdsa signature to der encoded signature to verify it in EVP_DigestVerifyFinal. I receive the signature from the client in what I believe are raw bytes because doing d2i_ECDSA_SIG returns NULL. 
I've seen this solution Creating a DER formatted ECDSA signature from raw r and s
and this one 
https://security.stackexchange.com/questions/174095/convert-ecdsa-signature-from-plain-to-der-format
but  neither worked for me. 
The first one because I cant get the ECDSA_SIG structure and the second one I dont understand.
","","75","<c><digital-signature><ecdsa><der>","0","","0","2019-04-15 18:10:40","","0","","8239061","","2019-04-15 18:10:40","2019-04-15 14:52:25",""
"56316652","Converting an ECDSA private key into PEM format","I haven't tested enough to know if it's sure, but C# Export Private/Public RSA key from RSACryptoServiceProvider to PEM string 
Seems to get me an RSA key into PEM format. 
Looking to do similar for an ECDSA ( private key for an ECC certificate ) - Does that answer have most of what I need or would this be very different? I'm using as much default .net as possible - I know chillkat or bouncy castle might have something but was not able to infer how to do this without including them as dependencies.
Tried the same function by passing different cryptographic objects able to hold the ecdsa key ( and changing the parameters/arguments ) but the parameters aren't nearly the same for this type of key - Not sure which order to put these in, wouldn't know if the encoder function would work for this either.
","","74","<c#><x509certificate2><ecdsa>","0","","0","2019-05-26 19:55:32","","1","","6512996","","2019-05-26 19:55:32","2019-05-26 19:18:09",""
"57385412","ECDSA_do_verify fails to verify for some hash only","I have a device for which I know its public key. The device is capable to signing a random number with its private key and returning the signature. In my workflow, I take a random number and give the device to sign this number. The device calculates the SHA256 hash of this random number and signs it with its private key. I have to verify this signature with the random number and device's public key. I am using openssl to achieve this. I also calculate the hash of the random number and use ECDSA_do_verify function to verify the signature. The problem is that, I can verify this signature most of the time.. But sometimes ECDSA_do_verify fails to verify the signature. I tried generating 100 random numbers and verify their signature. I could verify the signature 86 times and other 14 times the verification failed. Any idea what could be missing. 
bool verify_signature(const unsigned char* hash, const ECDSA_SIG* signature, EC_KEY* eckey)
{
    int verify_status = ECDSA_do_verify(hash, strlen((const char*)hash), signature, eckey);
    if (1 != verify_status)
    {
        printf(""Failed to verify EC Signature\n"");
        return false;
    }

    printf(""Verifed EC Signature\n"");

    return true;
}



void SetOpensslSignature(const std::string& sSignatureInHex, ECDSA_SIG* pSign)
{
    std::unique_ptr< BIGNUM, std::function<void(BIGNUM*)>> rr(NULL, [](BIGNUM* b) { BN_free(b); });
    BIGNUM* r_ptr = rr.get();
    std::unique_ptr< BIGNUM, std::function<void(BIGNUM*)>> ss(NULL, [](BIGNUM* b) { BN_free(b); });
    BIGNUM* s_ptr = ss.get();

    std::string sSignatureR = sSignatureInHex.substr(0, sSignatureInHex.size() / 2);
    std::string sSignatureS = sSignatureInHex.substr(sSignatureInHex.size() / 2);

    BN_hex2bn(&r_ptr, sSignatureR.c_str());
    BN_hex2bn(&s_ptr, sSignatureS.c_str());

    ECDSA_SIG_set0(pSign, r_ptr, s_ptr);

    return;
}

bool SetOpensslPublicKey(const std::string& sPublicKeyInHex, EC_KEY* pKey)
{
    const char* sPubKeyString = sPublicKeyInHex.c_str();

    char cx[65];

    std::unique_ptr< BIGNUM, std::function<void(BIGNUM*)>> gx(NULL, [](BIGNUM* b) { BN_free(b); });
    std::unique_ptr< BIGNUM, std::function<void(BIGNUM*)>> gy(NULL, [](BIGNUM* b) { BN_free(b); });

    BIGNUM* gx_ptr = gx.get();
    BIGNUM* gy_ptr = gy.get();

    EC_KEY_set_asn1_flag(pKey, OPENSSL_EC_NAMED_CURVE);
    memcpy(cx, sPubKeyString, 64);
    cx[64] = 0;

    if (!BN_hex2bn(&gx_ptr, cx)) {
        std::cout << ""Error getting to binary format"" << std::endl;
    }

    if (!BN_hex2bn(&gy_ptr, &sPubKeyString[64])) {
        std::cout << ""Error getting to binary format"" << std::endl;
    }

    if (!EC_KEY_set_public_key_affine_coordinates(pKey, gx_ptr, gy_ptr)) {
        std::cout << ""setting public key attributes"" << std::endl;
    }

    if (EC_KEY_check_key(pKey) == 1)
    {
        printf(""EC Key valid.\n"");
        return true;
    }
    else {
        printf(""EC Key Invalid!\n"");
        return false;
    }
}

std::string sha256(const std::string str)
{
    unsigned char hash[SHA256_DIGEST_LENGTH];
    SHA256_CTX sha256;
    SHA256_Init(&sha256);
    SHA256_Update(&sha256, str.c_str(), str.size());
    SHA256_Final(hash, &sha256);
    std::stringstream ss;
    for (int i = 0; i < SHA256_DIGEST_LENGTH; i++)
    {
        ss << hash[i];
    }
    return ss.str();
}


bool Verify(const std::string& sRandomNumber, const std::string& sSignature, const std::string& sDevicePubKeyInHex)
{
    std::unique_ptr< ECDSA_SIG, std::function<void(ECDSA_SIG*)>> zSignature(ECDSA_SIG_new(), [](ECDSA_SIG* b) { ECDSA_SIG_free(b); });
    // Set up the signature... 
    SetOpensslSignature(sSignature, zSignature.get());

    std::unique_ptr< EC_KEY, std::function<void(EC_KEY*)>> zPublicKey(EC_KEY_new_by_curve_name(NID_X9_62_prime256v1), [](EC_KEY* b) { EC_KEY_free(b); });
    if (!SetOpensslPublicKey(sDevicePubKeyInHex, zPublicKey.get()))
        std::cout << ""Failed to get the public key from the hex input"" << std::endl;

    std::string sHash = sha256(sRandomNumber);

    return verify_signature((const unsigned char*)sHash.c_str(), zSignature.get(), zPublicKey.get());
}


int main(int argc, char* argv[])
{
    std::string sSignatureInHex = ""228B756444CFF74453ABA22BF1FD052965682FDFDC915647F8B07068636BE6827938ED61B6C388551A6D4CCF3397858E14F5EA648FE13454C13292364BB40C1C"";
    std::string sPublicKeyInHex = ""94E62E0C77A2955B1FB3EE98AEAA99AACAD742F20E45B727EACDD10487C2F7D0D8257C6102921880ABE953245D573D7E33EC88A67E2BA930980CB9C3D6722F8A"";
    std::string sRandomNumber = ""65560886818773090201885807838738706912015073749623293202319529"";

    if (!Verify(sRandomNumber, sSignatureInHex, sPublicKeyInHex))
        std::cout << ""Verification failed."" << std::endl;
    else
        std::cout << ""Verification succeeded"" << std::endl;
}

These are some of the sets which verify correctly.  
random number: 65560886818773090201885807838738706912015073749623293202319529 
Signature: D506D976EC17DD3717C40329E28FD8DB4F32D6A3773454A6427FD12E69728157508086B661D91E07ADF5B57E787EA1EEA526A84500436E430E89B1C1F8532A41
random number: 99740602803090660927832030976281034564516575306436870967722262 
Signature: C46E17807113A4000E703FA96266CF3A00765BB8AC207C9A4D424AAF1AB8ABF9BA2B4972D72DA1457953B1C44E16DED1C363AEFBC28DCE1D4A498972C41AB922
random number: 72678600666159100061395904673222749914485786786827057090965704 
Signature: 539D94A976B417E1577581B73E2C0926BAE1D4DFE120CC2BD04405D6AE16E9CBD2E50343A69881A9AC13C23E5E68A9ECCA8F2CF41FC3AEC219B03F948482121B
============================================================================================================================================
These are some of the sets which fails verification. 
random number: 71953998552024151452665049464440435681055869491222530611033199 
Signature: CDD5274A1CB429FD3F78095B0262973ACDEAD85338F46E772F3095C816ADF4D25F8EDC7C916E91EFF753ABE6DE0287878E4CBD6E1B59F7D5D122C8B85D20CF1C
random number: 58079150817698947252033239072161198505487375300964223454033169 
Signature: D3C90D47D15DF8E066CDB09F7B218A24D69066E8B896F3013DFB4B6A9CBBA555AB2A0F07BDE9915DD48A42BCB2164CB969045C31D2035FC0DB8B4FA9877C2FFD
random number: 53433823585580925787026650456476141879880067601547801597683336 
Signature: 6EFD052EB961D089B4CA16CAF0818711F02500CD0540B2BE1A7426B5126E1C45D200E3C61970D49508173C7024A729A53ADF87CD2A6AF26A2D0CD3BF9EB2C0C1
","The SHA256 hashes of all signatures whose verification fails contain one or more 0x00 values.
Example:
Random number: 71953998552024151452665049464440435681055869491222530611033199
SHA256 Hash:   63 dd ae d4 11 be a8 b6 9c 00 75 5c 8d 90 bc e0 11 b0 50 16 7f 94 fd fc ac e5 ed 00 68 34 0b b6

0x00 values occur at index positions 9 and 27.
When ECDSA_do_verify is called in the verify_signature-method, strlen((const char*)hash) is passed as 2nd parameter. This expression calculates the length up to the first 0x00 value (exclusive). Therefore, only part of the hash is used for verification and verification fails.
The problem can easily be solved by replacing strlen((const char*)hash) with SHA256_DIGEST_LENGTH because a SHA256 hash has a fixed length (of 32 bytes). 
","74","<c++><openssl><ecdsa>","1","2","1","2019-08-07 13:35:56","57394918","3","","","","","2019-08-07 00:11:51",""
"50742676","Why do not use ECDSA with PSK in TLS?","I noticed that there are cipher suits,such as ""RSA-PSK-AES256-GCM-SHA384"",""RSA-PSK-AES128-GCM-SHA256"", in OpenSSL. But there is no cipher suits,such as ""ECDSA-PSK-AES256-GCM-SHA384"",""ECDSA-PSK-AES128-GCM-SHA256"". Both RSA and ECDSA can be used to make a certificate. Why cannot use ECDSA with PSK in TLS? Is it for a cryptographic reason? 
","The way TLS is designed is there is only a single method for server authentication within a TLS handshake. This is just because of protocol design and not because of cryptographic reasons. ECDSA is one way to authenticate the server (using certificates with ECC key), RSA is another (using certificates with RSA key) and PSK is yet another one. The same way you cannot combine ECDSA and RSA based authentication you cannot combine ECDSA and PSK.
","73","<ssl><ecdsa>","-2","0","1","2018-06-07 13:51:35","","0","","","","","2018-06-07 13:35:46",""
"53364096","iCloud Web Service Server-to-Server Authentication in PHP","Was it just me, or is there a wider need for a PHP implementation of Apple's iCloud JS library? Specifically the parts needed for server-to-server integration with iCloud not relying on Javascript on the server.
As my recent research and experiences have shown, it has become impossible to do a third party implementation of the server-to-server iCloud web-service based on Apple's documentation, examples and most of what had been written about it at (CloudKit Server-to-Server authentication and not in the most upvoted answers either, shockingly).
Despite being a raw PHP noob (C and Erlang are my languages,) I have managed to put together a few classes that successfully authenticates with an iCloud container using server-to-server keys registered in that container through the iCloud dashboard.
If anyone wants to use the code, or preferably take it a bit further into an actual library that brings the server-to-server parts of iCloud JS to the PHP server environment, I'd be happy to share. I'm just a little shy about my ineptitude with the new language, so you'd need to work around that. 
","","71","<php><icloud><restful-authentication><ecdsa><icloud-api>","0","","0","2018-11-18 18:20:09","","4","","","","","2018-11-18 18:20:09",""
"57872901","How to get signature length from signature body in Crypto++ ECDSA","I use Crypto++ (libcrypto++ 1.11) to embed JWT in my application. I made methods to sign and verify messages with CryptoPP::ECDSA<CryptoPP::ECP, CryptoPP::SHA256> algorithm (with secp256r1 curve). Tokens for verification can come from the outer world, so I need to verify token contents (textual data) signature knowing the public key.
The problem is that Crypto++ can cause SegFault on invalid signatures, which gives me a lot of pain in my web server.
I hoped that signatures in BER format (default serialization format in the library) have fixed length, so all I need is to compare the length of signature with some constant. However, I found out larger contents enables larger signatures, so a deeper approach is needed.
bool ES256Verifier::Verify(const std::string& data,
                           const std::string& signature) {
    bool result = false;
    try {
      CryptoPP::StringSource ss(
          signature + data, true,
          new CryptoPP::SignatureVerificationFilter(
              verifier_,
              new CryptoPP::ArraySink((byte*)&result, sizeof(result))));
    } catch (const CryptoPP::BERDecodeErr& err) {
      LOG_WARNING() << ""Signature `"" << signature << ""` has invalid (non-BER) format"";
    } catch (const CryptoPP::Exception& ex) {
      LOG_WARNING() << ""Signature verification has failed: "" << ex.what();
    }
    return result;
}

Verifier verifier_ is initialized correctly (and verifies tokens successfully apart from SegFaults), but given data = """" and signature = """", for example, I always get SegFault:
__memmove_avx_unaligned_erms 0x00007fb4b9da6b38
CryptoPP::ArraySink::Put2(unsigned char const*, unsigned long, int, bool) 0x00007fb4ba414fb2
CryptoPP::BufferedTransformation::ChannelPut2(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned char const*, unsigned long, int, bool) 0x00007fb4ba3acedc
CryptoPP::StringStore::CopyRangeTo2(CryptoPP::BufferedTransformation&, unsigned long long&, unsigned long long, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, bool) const 0x00007fb4ba414e02
CryptoPP::BufferedTransformation::Peek(unsigned char*, unsigned long) const 0x00007fb4ba3ad74a
CryptoPP::Integer::Decode(CryptoPP::BufferedTransformation&, unsigned long, CryptoPP::Integer::Signedness) 0x00007fb4ba45885c
CryptoPP::Integer::Decode(unsigned char const*, unsigned long, CryptoPP::Integer::Signedness) 0x00007fb4ba458c16
CryptoPP::DL_VerifierBase<CryptoPP::ECPPoint>::InputSignature pubkey.h:1560
CryptoPP::SignatureVerificationFilter::LastPut(unsigned char const*, unsigned long) 0x00007fb4ba4159a0
CryptoPP::FilterWithBufferedInput::PutMaybeModifiable(unsigned char*, unsigned long, int, bool, bool) 0x00007fb4ba418107
CryptoPP::BufferedTransformation::ChannelPut2(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned char const*, unsigned long, int, bool) 0x00007fb4ba3acedc
CryptoPP::BufferedTransformation::TransferMessagesTo2(CryptoPP::BufferedTransformation&, unsigned int&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, bool) 0x00007fb4ba3ad8fa
CryptoPP::BufferedTransformation::TransferAllTo2(CryptoPP::BufferedTransformation&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, bool) 0x00007fb4ba3adb21
CryptoPP::SourceTemplate<CryptoPP::StringStore>::PumpAll2 filters.h:1238
CryptoPP::Source::PumpAll filters.h:1182
CryptoPP::Source::SourceInitialize filters.h:1215
CryptoPP::StringSource::StringSource filters.h:1271
jwt::signature::algorithm::ES256Verifier::Verify es256_verifier.cpp:40
ES256_SignatureTest_Test::TestBody es256_test.cpp:29
...

So, is there a way to look at the data and signature and decide if this particular combination is going to cause SegFault due to invalid signature length?
","Here's some sample code to determine the signature length using the Field Element, Signer and Verifier. The first output prints the element length and r||s length because r||s is the signature in P1363 format.
The second and third output just print the result of SignatureLength(). Your program should reject a signature shorter than SignatureLength(). There is no sense in even trying to verify a short signature since it is no good.
Note well: this only work for the DL_* signature schemes (based on discrete logs). It does not apply to TF_* signature schemes (based on trapdoor functions).
#include ""cryptlib.h""
#include ""eccrypto.h""
#include ""osrng.h""
#include ""oids.h""

#include <iostream>

int main(int argc, char* argv[])
{
    using namespace CryptoPP;
    AutoSeededRandomPool prng;

    ///// Element
    DL_GroupParameters_EC<ECP> params(ASN1::secp256r1());

    unsigned int elemLength = params.GetCurve().GetField().MaxElementByteLength();
    std::cout << ""Element length: "" << elemLength << std::endl;
    std::cout << ""r||s length: "" << 2*elemLength << std::endl;

    ///// Signer
    ECDSA<ECP, SHA256>::Signer signer;
    signer.AccessKey().Initialize(prng, params);

    unsigned int signerLength = signer.SignatureLength();
    std::cout << ""Signer signature length: "" << signerLength << std::endl;

    ///// Verifier
    ECDSA<ECP, SHA256>::Verifier verifier(signer);

    unsigned int verifierLength = verifier.SignatureLength();
    std::cout << ""Verifier signature length: "" << verifierLength << std::endl;

    return 0;
}

Running the program results in the following.
$ ./test.exe
Element length: 32
r||s length: 64
Signer signature length: 64
Verifier signature length: 64

And if you switch curves to ASN1::secp521r1(), then running the program results in the following.
$ ./test.exe
Element length: 66
r||s length: 132
Signer signature length: 132
Verifier signature length: 132

","69","<c++><crypto++><ecdsa>","1","1","1","2019-10-07 02:52:16","57949305","5","","3995009","","2019-09-10 14:46:33","2019-09-10 14:24:31",""
"50375930","Session.GetOperationState() method is throwing exception ""Method C_GetOperationState returned CKR_FUNCTION_NOT_SUPPORTED in SoftHSM""","We are using SoftHSM in our application. We have generated tokens and imported keys in it. Now we have created one job which monitors if our SoftHSM is Up and running.
For that, It seems that the Session.GetOperationState() method should be able to work. However I am getting an error message as below:
Method C_GetOperationState returned CKR_FUNCTION_NOT_SUPPORTED.
Please help, if this method is suitable for my need or should I usew some other function.
Thanks in advance.
","Method Session::GetOperationState freezes cryptographic operation (e.g. after computation of hash for the first half of file) and method Session::SetOperationState resumes cryptographic operation (e.g. for the computation of hash for the second half of the file).
If you want to perform health check of your HSM it should be enough to open new session with Slot::OpenSession method, check its state with Session::GetSessionInfo method and close the session afterwards.
","66","<c#><pkcs#11><ecdsa><pkcs11interop><softhsm>","1","2","1","2018-05-16 19:36:52","50378717","0","1","","","","2018-05-16 16:33:05",""
"53948137","Crypto NFC microchip: JavaCard or dedicated firmware?","I would like to implement some ECDSA functionalities into an NFC microchip (generating keypairs, signing, etc.), with NDEF communication.
I am wondering if JavaCards suits that need (size, power, protocol, performances, ECDSA acceleration, etc.), or if I'd rather use more dedicated hardware (e.g. banking secure element) with lower level software layer such as a dedicated firmware (the one I'm targeting is http://www.tiempo-secure.com/product/dual-interface-secure-chips/).
Thank you very much!
Mario.
","","65","<nfc><javacard><ndef><ecdsa>","1","","0","2018-12-27 16:36:16","","5","1","","","","2018-12-27 16:36:16",""
"55161121","Extract Private Key from ECDSa certificate","I've created a self signed ECDSA certificate using openssl. I need to get it's private key information and it's certificate information as base64 bytes. The latter is easy. The first appears to be very difficult. I know I can't get it right because the private key is of length of 256. I know its length because I've created it, and I verified it using:
openssl ec -in C:\OpenSSLx64\flir\newcerts\ecd.key.pem  -text -noout

All of my attempts yield a different length of bytes. Here they are:
X509Certificate2 certificate = new X509Certificate2(certificateBytes, password, X509KeyStorageFlags.Exportable | X509KeyStorageFlags.EphemeralKeySet);
if (certificate.GetECDsaPrivateKey() is ECDsaCng ecdKeyWrapper)
{
    CngKey key = ecdKeyWrapper.Key;
    key.SetProperty(pty);
    ECParameters parameters = ecdKeyWrapper.ExportParameters(true);
    privateKey = parameters.D;
    byte[] otherPKey = key.Export(CngKeyBlobFormat.GenericPrivateBlob);
    byte[] otherPKey2 = key.Export(CngKeyBlobFormat.EccPrivateBlob);
    byte[] otherPKey3 = key.Export(CngKeyBlobFormat.EccFullPrivateBlob);
    byte[] otherPKey4 = key.Export(CngKeyBlobFormat.Pkcs8PrivateBlob);
}

I know that with RSA and DSA I can use bouncyCastle but it won't work here:
keyPair = DotNetUtilities.GetKeyPair(dsaKeyWrapper);

So I guess I have two problems:

I can't extract the private key properly.
I've read the private key is supposed defined as D. Apparently, it's not (the size doesn't fit). What is D in this context then?

","","64","<c#><ecdsa><cng>","0","","0","2019-03-14 11:17:16","","0","","","","","2019-03-14 11:17:16",""
"50416655","python ECDSA implementation miscalculation on big integers","I'm trying to implement ECDSA using python as part of my homework, I have a function named multiplication which takes two arguments Point P and t calculates B= tP.I have implemented this algorith based on iterative double and add algorithm on this wikipedia page the problem is when p coordination is small(one or two digits), the algorithm works fine but when coordination is large (about 70 digits) the result is different than what it supposed to be. here is the part of my code which calculates multiplication:
def addition(self, p, q):
    if p.is_infinite:
        return q
    elif q.is_infinite:
        return p
    else :
        if (q.x - p.x) == 0:
            point = Point.Point(0, 0)
            point.is_infinite = True
            return point
        s = int(((q.y - p.y) * Utils.Utils.mode_inverse(q.x - p.x, self.prime)) % self.prime)
    xr = int((math.pow(s, 2) - p.x - q.x) % self.prime)
    yr = int(((s * (p.x - xr)) - p.y) % self.prime)
    r = Point.Point(xr, yr)
    return r

def double(self, p):
    if p.is_infinite:
        return p
    if p.y == 0:
        point = Point.Point(0, 0)
        point.is_infinite = True
        return point
    s = int((((3 * math.pow(p.x, 2)) + self.a) * Utils.Utils.mode_inverse(2 * p.y, self.prime)) % self.prime)
    xr = int((math.pow(s, 2) - p.x - p.x) % self.prime)
    yr = int(((s * (p.x - xr)) - p.y) % self.prime)
    r = Point.Point(xr, yr)
    return r

def multiplication(self, p, t):
    bin_t = bin(t)[2:]
    Q = Point.Point(p.x, p.y)
    Q.is_infinite = True
    for i, digit in enumerate(bin_t):
        Q = self.double(Q)
        if digit == '1':
            Q = self.addition(Q, p)
    return Q

Here is my Util class:
class Utils(object):
    @staticmethod
    def mode_inverse(a, m):
        return pow(a, m - 2, m)

Here is my Point class:
class Point(object):

    def __init__(self, x, y):
        self.x = x
        self.y = y
        self.is_infinite = False

I use Curve P-224 parameters which are:
p = 26959946667150639794667015087019630673557916260026308143510066298881
a = -3
b = 18958286285566608000408668544493926415504680968679321075787234672564
Gx = 19277929113566293071110308034699488026831934219452440156649784352033
Gy = 19926808758034470970197974370888749184205991990603949537637343198772
according to calculator http://www.christelbach.com/eccalculator.aspx I should get this result for calculating 2G:
Px = 11838696407187388799350957250141035264678915751356546206913969278886
Py = 2966624012289393637077209076615926844583158638456025172915528198331
but what I actually get is:
Px = 15364035107168693070617763393106849380516103015030577748254379737088
Py = 7033137909116168824469040716130881489351924269422358605872723100109
Is there any way to fix this?
","This was just a guess: 
math.pow returns a floating point number (which has finite precision).  I'd suggest using e.g. s.x * s.x instead of math.pow(s.x,2) in case the issue is hitting precision issues with bigger numbers.
","63","<python><algorithm><ecdsa>","1","2","1","2018-05-18 18:30:48","50417314","2","","","","","2018-05-18 17:38:18",""
"57421392","Using Google Cloud Key Management Service to sign an Ethereum transaction","I've been working on writing a signer service for an Ethereum transaction manager and I need to sign Ethereum transactions using Google KMS Golang APIs. I'll try and summarise the problems I'm facing below.
Ethereum requires compact RLP encoded 65-byte ECDSA signatures in R || S || V format. ECDSA signatures by Google KMS on the other hand have extra header components (R length, S length, etc) along with variable length R and S components. This makes these signatures incompatible for use with Ethereum transaction signing.
A way to get around this is parsing the R and S bytes from the ecdsa signature obtained from Google KMS, compute and add the V byte to the end and use this signature to get a signed Ethereum transaction. Something like this:
var parsedSig struct{ R, S *big.Int }
_, err = asn1.Unmarshal(body, &parsedSig)
if err != nil {
    logger.WithError(err).Error(""failed to parse signature bytes"")
    return err
}

However this would possibly fail due to one or more of the following reasons:

Creating compact ECDSA signatures of 65-byte length by parsing out the R and S components and adding the V component is possibly as distrustful as it sounds. R and S components as mentioned above are not always of 32 byte length for standard ECDSA signatures, which means that the ECDSA signature created by concatenating the components might not always result in 64 bytes.
Currently signed transactions in Ethereum are created from Keccak-256 digest hashes after RLP encoding transactions as shown below:

// from go-ethereum
func rlpHash(x interface{}) (h common.Hash) {
    hw := sha3.NewLegacyKeccak256()
    rlp.Encode(hw, x)
    hw.Sum(h[:0])
    return h
}

Asymmetric ECDSA key signing in Google KMS doesn’t have support for Keccak-256 SHA3 message digests. Would using a SHA-256 digest for ethereum transactions work? IMO this would fail since all transaction signature verification happens on RLP encoded Keccak hashes.
At this point I am not very sure how to compute the V component of the ECDSA signature after having checked the secp256k1 implementation of the secp256k1_ecdsa_sign_recoverable() function.

How do I go about solving these above issues to be able to create verifiable signed Ethereum transactions using asymmetric elliptic curve signing algorithm by Google KMS?
","","63","<ecdsa><go-ethereum><google-cloud-kms><sha-3><keccak>","1","","0","2019-08-08 22:27:34","","0","","","","","2019-08-08 22:27:34",""
"58499196","ECDSA: Convert a binary public key of 60 bytes into PEM format for using it with PHP openssl_verify()","I want to proof a Wii signature in PHP. I have 60 bytes of the public key as binary data plus 4 additional bytes. And I know that it is ECDSA (most likely B-233). I already implement it in C, but the PHP interpreter is too slow for my implementation. So I call the external C tool to confirm the signature.
But I want to use openssl_verify($data,$sig,$pubkey). My problem is the third parameter (public key). So I have to convert ECDSA info plus the public key into an accepted format. 
Any ideas?
Progress
I tried more and created keys with different algorithms (e.g. sect233k1, sect233r1). My plan is to inject a so generated public key with my key. Now I get the error message:
error:0906D06C:PEM routines:PEM_read_bio:no start line

The public key looks like this:
-----BEGIN PUBLIC KEY-----
MFIwEAYHKoZIzj0CAQYFK4EEABoDPgAEAS+URvH1x1GXfTw6VZh8tLVPq3bgYwl8
g8OHtCKuADoZ8YayIHkJuYEqTJZBgI8YMX8FtrI8BOlBiBLF
-----END PUBLIC KEY-----

","Yeah, you're on the right track. Assuming that the curve is known, you can derive the public key as follows (which is essentially based on an idea of this answer):

In the following, curve NIST B-233 (aka sect233r1) is assumed whose raw public key has a size of 60 bytes. If the curve is different, the curve ID must be exchanged accordingly and the size of the curves's public key must be used instead. 
Use any public key in DER-format that matches your curve.
If you don't have one, use OpenSSL to create a private key in PEM-format that matches your curve. The private key has the SEC1-format:
openssl ecparam -out <path to private key file> -genkey -name sect233r1 -noout

From this private key, derive the public key as DER. The public key has the X.509 format:
openssl ec -in <path to private key file> -pubout -outform der -out <path to public key file>

Determine the binary data of the public key with a hex-editor, e.g. online.  At this point it is made use of the fact that the raw public key is located directly at the end of the public key. In the case of B-233, the raw public key has a length of 60 bytes, i.e. the last 60 bytes of the generated public key must be exchanged with the 60 bytes of your current raw public key. This is the searched public key as DER, which contains your raw public key.
For the verification process with OpenSSL, the DER-format is sufficient if the -keyform DER option is used, e.g. 
openssl dgst -ecdsa-with-SHA1 -keyform DER -verify <path to public key file> -signature <path to signature file> <path to file for which signature is>

For the verification process in PHP with openssl_verify the PEM-format is required. A conversion to the PEM-format is easiest if the DER-data are Base64-encoded, e.g. online. Finally you have to add header (-----BEGIN PUBLIC KEY-----\n) and footer (\n-----END PUBLIC KEY-----). Please make sure that there is exactly one line break immediately after the header and immediately before the footer. In the last parameter, the hash algorithm used to create the signature must be specified, e.g.: 
$data = hex2bin(<binary data from file for which signature is>); 
$signature = hex2bin(<binary data from signature file>);
$pub_key_id = ""-----BEGIN PUBLIC KEY-----\nMFIwEAYHKoZIzj0CAQYFK4EEABsDPgAEAfERAiIKyPaby4+efUcRmv8ucekCFMnjc6fN1IeQAO6EMcKCcFLhKRJUHijUNp0Dv/CWYLUdeN0qNOI6\n-----END PUBLIC KEY-----"";
$result = openssl_verify($data, $signature, $pub_key_id, OPENSSL_ALGO_SHA1);
print($result);


","62","<php><ecdsa>","1","1","1","2019-10-23 09:32:02","","4","","8783885","","2019-10-23 07:34:56","2019-10-22 07:35:00",""
"54769099","Non deterministic Ecdsa signature verification in solidity","Please help me. How can i verify a non deterministic ecdsa signature(same message signed with same private key outputs random signature) in solidity? I have searched the whole web, tried many libraries but could'nt find a solution. I know ecrecover but it verifies deterministic signatures only. 
I am generating ecdsa secp256k1 signature from frontend with this library - https://github.com/kjur/jsrsasign
Frontend Demo - https://kjur.github.io/jsrsasign/sample/sample-ecdsa.html
","","61","<javascript><ethereum><signature><solidity><ecdsa>","0","","0","2019-02-19 15:11:31","","0","","11085091","","2019-02-19 15:11:31","2019-02-19 14:56:43",""
"48920965","difference in xamarin vs java documentation for ECPublicKey","in andorid xamarin project I am generating key pair using EC curves 
generator = KeyPairGenerator.GetInstance(KeyProperties.KeyAlgorithmEc, AndroidKeyStoreContants.AndroidKeyStore);

            paramSpec = new KeyGenParameterSpec.Builder(
                    alias,
                    KeyStorePurpose.Sign | KeyStorePurpose.Verify)
                        .SetAlgorithmParameterSpec(new ECGenParameterSpec(""secp256r1""))
                        .SetDigests(KeyProperties.DigestSha256)
                        .Build();

            generator.Initialize(paramSpec);


            var keyPair = generator.GenerateKeyPair();

which is fine, problem starts when I want to access the public key, keyPair.Public. This gives me an IPublicKey interface. On java, you will just cast it to ECPublicKey and on Xamarin you just can't do it.
I also noticed there is a missing member - the importat one for me - getW()- on xamarin representation of ECPublicKey vs java ECPublicKey.
xamarin ECPublicKey
java ECPublicKey 
My question is - how to access - and cast the public key to ECPublicKey in Xamarin? I want to access the X and Y coordinates.
Is there a way to add this missing declaration? 
","Instead of casting to ECPublicKey, cast it to ECPublicKeySpec. IE,
var pubKeySpec = (Java.Security.Spec.ECPublicKeySpec)keyPair.Public;
var w = pubKeySpec.GetW();

","61","<java><android><xamarin><xamarin.android><ecdsa>","1","0","1","2018-02-22 09:31:23","","0","","","","","2018-02-22 06:28:15",""
"43958913","How to decrypt ECDHM SSL traffic?","I am trying to decrypt some TLSv1.2 traffic with Java. I have some information from Wireshark like so...

Any advice on how i might approach this? Let's assume i already have packet data in java i want to decrypt.
","","60","<java><ssl><tls1.2><ecdsa>","0","","0","2017-05-13 23:30:50","","2","","5552705","","2017-05-13 23:30:50","2017-05-13 23:24:05",""
"56217625","How to verify ECDSA with Public Key?","I have the following methods for generating keys and signing the password message.
public void generateKeys() {
try {
  keyStore = KeyStore.getInstance(KEYSTORE_NAME);
  keyStore.load(null);

  if (!keyStore.containsAlias(KEY_NAME)) {
    KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance(KeyProperties.KEY_ALGORITHM_EC, KEYSTORE_NAME);
    keyPairGenerator.initialize(
        new KeyGenParameterSpec.Builder(KEY_NAME,
                                        KeyProperties.PURPOSE_SIGN)
            .setDigests(KeyProperties.DIGEST_SHA256)
            .setAlgorithmParameterSpec(new ECGenParameterSpec(""secp256r1""))
            // Require the user to authenticate with a fingerprint to authorize
            // every use of the private key
            .setUserAuthenticationRequired(true)
            .build());
    keyPairGenerator.generateKeyPair();
  }

  loadKeys();
} catch (NoSuchAlgorithmException e) {
  e.printStackTrace();
} catch (NoSuchProviderException e) {
  e.printStackTrace();
} catch (InvalidAlgorithmParameterException e) {
  e.printStackTrace();
} catch (CertificateException e) {
  e.printStackTrace();
} catch (KeyStoreException e) {
  e.printStackTrace();
} catch (IOException e) {
  e.printStackTrace();
}

}
public BiometricPrompt.CryptoObject getCryptoObject() {
cryptoObject = new BiometricPrompt.CryptoObject(signature);
return cryptoObject;
}

private void loadKeys() {
try {
  keyStore = KeyStore.getInstance(KEYSTORE_NAME);
  keyStore.load(null);
  if (keyStore.containsAlias(KEY_NAME)) {
    publicKey = keyStore.getCertificate(KEY_NAME).getPublicKey();
    privateKey = (PrivateKey) keyStore.getKey(KEY_NAME, null);
    signature = Signature.getInstance(Constants.SIGNATURE);
    signature.initSign(privateKey);
  }
} catch (IOException e) {
  e.printStackTrace();
} catch (NoSuchAlgorithmException e) {
  e.printStackTrace();
} catch (CertificateException e) {
  e.printStackTrace();
} catch (KeyStoreException e) {
  e.printStackTrace();
} catch (UnrecoverableKeyException e) {
  e.printStackTrace();
} catch (InvalidKeyException e) {
  e.printStackTrace();
}
}

public String sign(String inputStr) {
try {
  Signature signature = cryptoObject.getSignature();
  signature.update(inputStr.getBytes());
  byte[] signedBytes = signature.sign();
  String result = HexManager.bytesToHex(signedBytes);
  Log.d(""TAG"", result);
  return result;
} catch (SignatureException e) {
  e.printStackTrace();
}
return null;

}
After that, I saved the signed password in Shared Preferences. Later, I want to verify the saved password with a new password that is verified with the fingerprint.
Here is my method to verify:
public boolean verify(String inputStr, String savedStr) {
try {
  Signature signature = cryptoObject.getSignature();
  signature.initVerify(publicKey);
  signature.update(inputStr.getBytes());
  boolean isVerified = signature.verify(savedStr.getBytes());
  return isVerified;
} catch (InvalidKeyException e) {
  e.printStackTrace();
} catch (SignatureException e) {
  e.printStackTrace();
}
return false;
}

But it always return false.
Does anybody knows why?

","It looks like in your sign() method you're returning the Hex of the byte[] obtained from the signature.sign() method. If this is what you're saving as savedStr. Then the verification method should be changed to convert the Hex encoded string to a byte[]. You could use HexManager.hexToBytes() (or equivalent) if it exists to convert the savedStr to a byte[] savedStrBytes.
public boolean verify(String inputStr, String savedStr) {
    try {
        byte[] savedStrBytes = HexManager.hexToByes(savedStr);
        Signature signature = cryptoObject.getSignature();
        signature.initVerify(publicKey);
        signature.update(inputStr.getBytes());
        boolean isVerified = signature.verify(savedStrBytes);
        return isVerified;
    } catch (InvalidKeyException e) {
        e.printStackTrace();
    } catch (SignatureException e) {
        e.printStackTrace();
    }
    return false;
}

","58","<android><android-keystore><ecdsa>","0","1","1","2019-05-31 04:32:36","56388702","1","","955836","","2019-05-20 10:02:05","2019-05-20 09:07:30",""
"51699354","Unable to use ssh - public key issue","I am new to programming and am trying to ssh to my server as that may be needed later to edit code.
My ~/.ssh/id_rsa.pub is 
ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQD3UP7ryN33fuzwg5wfXSsTDtcRc+jTsrU2+IYI0yrGqPZ7F4+LesO+1/delLvQuhr8O+YJPgAZK6mRoY+ruWPEf/hGsJkrR76kNeOSFkXP/QgSN7aWPhgRFs0EaUk+fgHcri1mOOgxcNto7Mwo8U+YuuMf3CMxMqBcWKccPvPSNMmL91cs56pTM6VXP+rNYBGEFiEqjZdYrUncICmgOO2fIgpcLOIBYsgBcWdl+vycc0oMhLtRPy6ALgzujI3FSMhRxwi8Oy0UjCHNJowcb+XFZrDk8qRUucp1/IYGXBgjS7jJVTejseIKZvnf1qEyRYY8p7pltfqrGKdPNRT5zSun mrinmaykalita@MacBook-Pro-77.local
and
my ~/.ssh/known_hosts has an entry as
173...** ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBMIkfmRuMEdyptRu11rW+3qlokDq3B5HDruYGow1fJTTQrPhL7YLAabAek97jChU09VcdBzr2x8+v3HsUfT6Blc=
What should I use for ***** in
ssh-copy-id -i ***** root@173...** to send public key to that server so I can ssh after that? And what is the significance of the other?
I am a newbie, so a dumb question.
Please help.
Thanks and Regards
","
What should I use for ***** in ssh-copy-id -i ***** root@173...46 to send public key to that server so I can ssh after that?

Use a path to the public key file:
ssh-copy-id -i $HOME/.ssh/id_rsa.pub root@173...46 to send public key to that server so I can ssh after that?

Be careful with the access modes of files and directories (as said in a comment): as a general rule, do not set group or world access or modification rights to the corresponding inodes.
","55","<ssh><rsa><ssh-keys><public-key><ecdsa>","-2","0","1","2018-08-06 15:55:56","","10","1","9612623","","2018-08-06 15:49:57","2018-08-06 00:47:03",""
"55386633","Veins simulation terminates calling openssl ECDSA_SIG_get0 function","I am using the virtual machine instant-veins-4-7-1-i1 on VirtualBox with Omnet++-5.3 and Sumo-0.32.0.
I have installed the library openssl version 1.1.0. When I try to access to the struct ECDSA_SIG that store the signature with the function ECDSA_SIG_get0 the simulation terminate suddenly with the following error 

This is a snippet of the code that generate the error:
ECDSA_SIG * signed_hash;
s->generateSignature(message, messageLength, signed_hash);
const BIGNUM **pr;
const BIGNUM **ps;
ECDSA_SIG_get0(signed_hash, pr, ps);

The generateSignature function code is:
void SignatureOpenSSL::generateSignature(const unsigned char* message, int messageLength, ECDSA_SIG * signed_hash)
{

    unsigned char *md;
    unsigned char *hash;
    hash = SHA256(message, messageLength, md);

    // Computes the ECDSA signature of the given message using the supplied private key and returns the created signature
    signed_hash = ECDSA_do_sign(hash, 32, eckey);

    if (signed_hash == NULL){
        std::cout <<"" ko signature "" << std::endl;
    }else{
        std::cout <<"" ok signature"" << std::endl;
    }

}

I have upgraded the openssl library to version 1.1.1 but the error keeps occurring.
What am I doing wrong?
Thanks
","Your problem has nothing to do with openssl, but your ""C"" code and your misuse of pointers.
Your problem line is:
signed_hash = ECDSA_do_sign(hash, 32, eckey);

Your code assumes it's changing the pointer in the calling function, it is not.  It's only changing the ""copy"" of the pointer.  You want to either return the pointer or pass in a pointer to a pointer and set it that way.
e.g.
ECDSA_SIG *SignatureOpenSSL::generateSignature(const unsigned char* message, int messageLength)
{
    ...
    ECDSA_SIG *  signed_hash = ECDSA_do_sign(hash, 32, eckey);
    ...
    return signed_hash;
}


ECDSA_SIG * signed_hash = s->generateSignature(message, messageLength);

or
void SignatureOpenSSL::generateSignature(const unsigned char* message, int messageLength, ECDSA_SIG ** signed_hash)
{
    ...
    *signed_hash = ECDSA_do_sign(hash, 32, eckey);

    if (*signed_hash == NULL){
        std::cout <<"" ko signature "" << std::endl;
    }else{
        std::cout <<"" ok signature"" << std::endl;
    }
}

ECDSA_SIG * signed_hash;
s->generateSignature(message, messageLength, &signed_hash);

","54","<c++><openssl><omnet++><veins><ecdsa>","0","2","1","2019-03-27 23:23:29","55387989","0","","","","","2019-03-27 21:20:26",""
"56474860","How to verify in c# an openssl ecdsa signature?","I'm trying to verify in C# a signature of ECDSA done with openssl in C.
I'm forced to change the language since the device signing the documents works on linux and the one checking the signatures works on .NET.
As far as I understand an easy way to implement the algorithm in C is to use the command line to create a priv.pem, a pub.pem and a signature.bin file.
What I miss is a way to verify in C# what I wrote in C using the same curve and the same keys. 
I tried to import pub key, but the system returns exception for not correct parameters.
Thank you in advance for your help!
Marta
$ openssl ecparam -genkey -name secp384r1 -noout -out private.pem

$ openssl ec -in private.pem -pubout -out public.pem

$ openssl dgst -sha256 -sign private.pem < disp.cfg > signature.txt

$ openssl dgst -sha256 -verify public.pem -signature signature.txt < disp.cfg

","","53","<c#><openssl><ecdsa>","0","","0","2019-06-06 09:39:04","","0","","","","","2019-06-06 09:39:04",""
"33595873","Does Domain Parameters in ECDSA are same?","In ECDSA,
Signer and Verifier should have same a, b and G?
such that y^2 = x^3 + ax + b, G is starting point.
","Yes, the signer and verifier of an ECDSA message must agree on the curve parameters ahead of time.  Several curves are named and defined in SEC2.
","53","<ecdsa>","-1","1","1","2015-11-08 18:05:39","33597222","0","","","","","2015-11-08 15:57:55","2015-11-23 14:18:52"
"54840966","How to convert ECDSA private key to ASCII Armored key?","I need to generate an ASCII Armored Key(as we have in PGP) from ECDSA private key.
I'm using OpenSSL to generate the ECDSA private key. 
ref:
Convert ECDSA private hex key to public key
Currently I'm using the OpenPGP node module for encryption/decryption using PGP ASCII Armored keys.I want to implement above functionality using Node.js
","","50","<node.js><encryption><openssl><pgp><ecdsa>","0","","0","2019-02-23 11:12:23","","2","","","","","2019-02-23 11:12:23",""
"33886973","Exception in thread ""main"" java.lang.ArrayIndexOutOfBoundsException: 12 in PointMultiplication class","I'm working to generate pointmultiplication in ECDSA class. I'm using window method for PM Scalar.
Window Method Algorithm
Here is my code
public class PointMultiplication {

private BigInteger X;
private BigInteger Y;
private BigInteger Z;
private BigInteger zinv;
private static BigInteger zero = BigInteger.ZERO;
private boolean infinity;

//Nilai yang dihitung terlebih dahulu (precomputed points)
static PointMultiplication[] precompute = {};


 public PointMultiplication Scalar(BigInteger kin) {
    String K = kin.toString(16);
    PointMultiplication q = new PointMultiplication(zero, zero, null);
    int a = Integer.parseInt(K.substring(0, 1), 16);
    //jika d1>0, q = d1.P (precomputed value)
    if (a > 0) {
        q = precompute[a];
    }
    // untuk i=1 ke n
    for (int i = 1; i < K.length(); i++) {
        // q =2^4P=16P=DoublePoint(DoublePoint(DoublePoint(DoublePoint(q)))).
        q = q.DoublePoint();
        q = q.DoublePoint();
        q = q.DoublePoint();
        q = q.DoublePoint();
        //Jika di>0, q = q+diP (precomputed value)
        int di = Integer.parseInt(K.substring(i, i + 1),16);
        if (di>0) {
            q = q.AddPoint(precompute [di]);
            }        
        }
        return q;

The output:
Exception in thread ""main"" java.lang.ArrayIndexOutOfBoundsException: 12
    at PointMultiplication.Scalar(PointMultiplication.java:173)
    at ECDSA.Sign(ECDSA.java:58)
    at ECDSA.main(ECDSA.java:146)

The error is in precompute[a], I'm using projective coordinates.
","","50","<ecdsa>","1","","0","2015-11-24 06:44:22","","0","","5494132","","2015-11-24 06:44:22","2015-11-24 06:37:34",""
"58616145","How to encrypt and decrypt using ECDSA private key and public key generated in Hyperledger fabric","I am working on a basic-network project on Hyperledeger Fabric V-1.4.1. I have enrolled an admin and created a user using enrollAdmin.js and registerUser.js. A public Key and a private key is generated for user1. Now I want to use that private key to sign simple data and later verify using the public Key. I have tried using URSA node module which works fine with RSA keys generated through OpenSSL but isn't working with these two keys. Probably because these keys are not RSA, they are ECDSA keys. I have also read the documentation of the Crypto node module and it seems I need to have .pem files as keys to use in Crypto module. But In fabric, I have key files as -priv and -pub format.

Is there any node module that can encrypt decrypt using ECDSA keys?

Is there any specific way in hyperledger fabric to do this?

Or is there any other way I can do this thing? Please ask any questions if necessary.
Thank you.
","The two formats you see

priv 
pub 

Are wallet formate of filestorage
Try to register an identity and enroll with fabric-CA by importing identity service then you will receive certificate and private key just put it in a file and mark the extension as pem and it will work 
","49","<node.js><encryption><hyperledger-fabric><digital-signature><ecdsa>","0","1","1","2019-10-30 03:46:29","58618469","0","","","","","2019-10-29 22:16:35",""
"55042329","What cryptographic librairies will help calculate shared point and derive keys?","We need to perform some cryptographic operations and I want to know what cryptographic librairies can fit my need. 
The following is the context:
Given the fact that we have:

An EC Private Key stored in the HSM 
An EC Public Key (public point)
Encrypted AES key
MAC calculated with the EC public key ECDH

We need to perform the following:

Calculate a shared point (K~X~, K~Y~) using ECKA-DH algorithm from the EC Private and EC Public Keys. (See BSI TR 03111)
Derive K~ENC~ and K~MAC~ using KDF2(x, l) with SHA-256. K~ENC~ is first 8 bytes of output. K~MAC~ is last 8 bytes of output. (See ISO/IEC 18033-2)
Verify the MAC over the encrypted AES key against MAC ==> MAC = AES-CMAC(Encrypted AES key || ValueA || ValueB, K~MAC~).
Decrypt the encrypted AES key ==> AES key = AES-CBC(encrypted AES key, K~ENC~).


What cryptographic librairies will help calculate shared point baed on
  the fact that the Private key is stored in the HSM?
Can Bouncy Castle be used jointly with IAIK PKCS#11 wrapper?
Can IAIK-JCE a commercial product from IAIK help on that?

Thank you for your help.
Best regards.
","Since you are using HSM (your Elliptic Curve private is store on HSM) you can use API's from hsm vendors to perform your cryptographic operations. For eg: In case of Safenet HSM, Gemalto provides crystoki library like JSP and JCProv API's in java to perform all the operations you have stated.
","48","<ecdsa><hsm><ecdh>","0","0","1","2019-04-10 13:53:36","","0","","","","","2019-03-07 11:06:06",""
"56308084","Which curve is SHA1withECDSA using?","I am using SHA1withECDSA to verify signed messages in my java application. Now I want to create a second application in another programming language (node/js) which creates those signed messages. 
However I could not find any api which has ""SHA1withECDSA"". All of them only support ECDSA with a selected curve. So my question: Which ec curve is java using?
Keyfactory:
final KeyFactory keyFactory = KeyFactory.getInstance(""EC"");
Signature:
final Signature dsa = Signature.getInstance(""SHA1withECDSA"");
","The {hash}withECDSA algorithms in Java support any curve that can be expressed in an ECPrivateKey object passed to Signature.initSign(key) or (your case) an ECPublicKey object passed to Signature.initVerify(key) which for the standard SunEC provider are any curve expressed in X9.62 (Weierstrass) form. This is basically everything used nowadays except Bernstein et al's {Curve,X,Ed}{25519,448} (EdDSA is an elliptic-curve signature algorithm but not the algorithm named ECDSA). 
The standard X9/NIST and TLS curves are predefined, although (edit) accessing them other than for key generation is a bit clumsy; see How does one convert a public EC code point and curve name into a PublicKey? .
Normally the keypair should be generated by the signer, and (only) the publickey distributed to the verifier(s) either in advance of or along with the signature(s) and signed data; often this is done in the form of a certificate, which avoids manual effort and manual mistakes that create vulnerabilities. Java directly supports X.509 certificates, and the publickey format used by them (SubjectPublicKeyInfo aka SPKI); see the javadoc for java.security.spec.X509EncodedKeySpec and java.security.Key. For EC, the SPKI includes the curve identification, but unfortunately the Java API provides no convenient way to get it back out. 
If you have an X.509 certificate or just the X.509 SPKI for the publickey in a file, in either DER or PEM format, and have OpenSSL, it can decode and display this info:
 openssl x509 -in certfile -inform {der|pem} -text 
 openssl pkey -in spkifile -inform {der|pem} -pubin -text # 1.0.0 up
 openssl ec -in spkifile -inform {der|pem} -pubin -text # 0.9.x 
 # look at the line labelled ASN1 OID:

","48","<java><ecdsa>","0","0","1","2019-05-26 04:23:05","56310400","1","","","","","2019-05-25 19:34:38",""
"55283370","Get java.security.PrivateKey from private key file generated by hyperledger ca","Using hyperledger-fabric-ca tool I got private key like following
-----BEGIN PRIVATE KEY-----
MIGHAgEAMBMGByqGSM49AgEGCCqGSM49AwEHBG0wawIBAQQgrECQDuXL87QJKYDO
O/Z1TT+vzVPqF3106wT75dJF5OqhRANCAASsFuneE46/9JmUJCiQ14zWDKcFn6TL
kYl6mirTXefU7yYglu5hmehU0pD/PKKLkoTLNbPLn5RMdUe8aum3N1sZ
-----END PRIVATE KEY-----

By default that software uses ecdsa-with-SHA256 (prime256v1) Signature Algorithm 
In my java application i need to have instance of java.security.PrivateKey that based on private key above.
I have tried following code 
 public static void main(String[] args) throws Exception {

        String privateKeyString = ""-----BEGIN PRIVATE KEY-----\n"" +
                ""MIGHAgEAMBMGByqGSM49AgEGCCqGSM49AwEHBG0wawIBAQQgrECQDuXL87QJKYDO\n"" +
                ""O/Z1TT+vzVPqF3106wT75dJF5OqhRANCAASsFuneE46/9JmUJCiQ14zWDKcFn6TL\n"" +
                ""kYl6mirTXefU7yYglu5hmehU0pD/PKKLkoTLNbPLn5RMdUe8aum3N1sZ\n"" +
                ""-----END PRIVATE KEY-----\n"";


        String privateKeyContent = privateKeyString.replaceAll(""\\n|-----BEGIN PRIVATE KEY-----|-----END PRIVATE KEY-----"", """");
        PKCS8EncodedKeySpec spec = new PKCS8EncodedKeySpec(privateKeyContent.getBytes());
        KeyFactory factory = KeyFactory.getInstance(""EC"");
        PrivateKey privateKey = factory.generatePrivate(spec);
    }

but I am getting 
Exception in thread ""main"" java.security.spec.InvalidKeySpecException: java.security.InvalidKeyException: invalid key format
    at sun.security.ec.ECKeyFactory.engineGeneratePrivate(ECKeyFactory.java:169)
    at java.security.KeyFactory.generatePrivate(KeyFactory.java:372)
    at QueryApp.main(QueryApp.java:36)
Caused by: java.security.InvalidKeyException: invalid key format
    at sun.security.pkcs.PKCS8Key.decode(PKCS8Key.java:330)
    at sun.security.pkcs.PKCS8Key.decode(PKCS8Key.java:356)
    at sun.security.ec.ECPrivateKeyImpl.<init>(ECPrivateKeyImpl.java:73)
    at sun.security.ec.ECKeyFactory.implGeneratePrivate(ECKeyFactory.java:237)
    at sun.security.ec.ECKeyFactory.engineGeneratePrivate(ECKeyFactory.java:165)
    ... 2 more

","You must base64-decode the contents, e.g.
String privateKeyContent = privateKeyString.replaceAll(""\\n|-----BEGIN PRIVATE KEY-----|-----END PRIVATE KEY-----"", """");
PKCS8EncodedKeySpec spec = new PKCS8EncodedKeySpec(Base64.getDecoder().decode(privateKeyContent));
KeyFactory factory = KeyFactory.getInstance(""EC"");

","46","<java><hyperledger-fabric><bouncycastle><ecdsa>","0","1","1","2019-03-21 17:27:03","55286055","0","","","","","2019-03-21 14:59:19",""
"54517928","Logging into SFTP server using ECDSA client certificate using phpseclib","I'm trying to log into an SSH server using a ECDSA client certificate in PHP. I'm using the master dev branch of phpseclib which includes support for ECDSA since October 2018.
I've taken the sample script for logging into an ssh server, and adapted it to use my certificate:
use phpseclib\Crypt\ECDSA;
use phpseclib\Net\SFTP;

$sftp = new SFTP('server.ssh');
$key = new ECDSA();

echo $key->load(file_get_contents('/path/to/clientkey'));

if (!$sftp->login('username', $key)) {
    print_r($sftp->getErrors());
    echo 'Login Failed';
} else {
    echo 'Login Succeeded!';
}

This code yields the following pretty much instantaneously (so no timeout):
1 // so the key loads successfully

Array
(
) // no errors that we know of
Login Failed // but no success either

The same login data works using sftp command line on the same machine. The remote server only supports SFTP connections, so I can't try a regular SSH2 connection.
Is this supposed to work yet? Is this how it's supposed to work, or is there an error in my code?
","","45","<php><phpseclib><ecdsa>","0","","0","2019-02-04 14:07:12","","1","","","","","2019-02-04 14:07:12",""
"53835920","OpenSSH ecdsa to BCECPublicKey","I would like to convert an OpenSSH ecdsa public key string(.pub file) to a BCECPublicKey instance.
What I want to achieve it the reverse of this code:
BCECPublicKey publicKey = ...;

byte[] point = SubjectPublicKeyInfo.getInstance(ASN1Sequence.getInstance(publicKey.getEncoded())).getPublicKeyData().getOctets();

ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
DataOutputStream dataOutputStream = new DataOutputStream(byteArrayOutputStream);

dataOutputStream.writeInt(""ecdsa-sha2-nistp256"".getBytes().length);
dataOutputStream.write(""ecdsa-sha2-nistp256"".getBytes());
dataOutputStream.writeInt(""nistp256"".getBytes().length);
dataOutputStream.write(""nistp256"".getBytes());
dataOutputStream.writeInt(point.length);
dataOutputStream.write(point);

String base64 = Base64.getEncoder().encodeToString(byteArrayOutputStream.toByteArray());

This is what I've tried:
    // Valid ecdsa-sha2-nistp256 public key string from a .pub file.
    String base64 = ""AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBG93uDMAjwxpPFXgLFFs7FzWZXrQRaXnBMqmHaRN/5JRzljuqYAUAkW98HvFxGKrnb2JdW3X785AxLNzVhiiw+4="";
    byte[] bytes = Base64.getDecoder().decode(base64);
    ECNamedCurveParameterSpec ecSpec = ECNamedCurveTable.getParameterSpec(""secp256r1"");

    // java.lang.IllegalArgumentException: Incorrect length for infinity encoding
    ECPoint point = ecSpec.getCurve().decodePoint(bytes);
    ECPublicKeySpec publicKeySpec = new ECPublicKeySpec(point, ecSpec);
    KeyFactory keyFactory = KeyFactory.getInstance(""ECDSA"", ""BC"");
    PublicKey pk = keyFactory.generatePublic(publicKeySpec);

But this doesn't seem to work.
Is there an easy way to do this with bouncy castle?
","You know you created the blob by concatenating six things, only the sixth of which was the actual point encoding, so how on Earth could you imagine that using all of the blob as a point encoding would be correct? 
The clean and robust way is to parse the blob back into its pieces and extract the point encoding; the dirty way is to just assume the blob is, as expected, for ecdsa-sha2-nistp256 (and uncompressed) so the last 65 bytes are the point encoding:
String base64 = ""AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBG93uDMAjwxpPFXgLFFs7FzWZXrQRaXnBMqmHaRN/5JRzljuqYAUAkW98HvFxGKrnb2JdW3X785AxLNzVhiiw+4="";
byte[] bytes = Base64.getDecoder().decode(base64), temp;

if( clean ){
    DataInputStream instr = new DataInputStream (new ByteArrayInputStream (bytes));
    temp = new byte[instr.readInt()]; instr.read(temp);
    if( !Arrays.equals(temp,""ecdsa-sha2-nistp256"".getBytes())) throw new Exception (""bad key"");
    temp = new byte[instr.readInt()]; instr.read(temp);
    if( !Arrays.equals(temp,""nistp256"".getBytes())) throw new Exception (""bad key"");
    temp = new byte[instr.readInt()]; instr.read (temp);
}else{
    temp = Arrays.copyOfRange(bytes, bytes.length-65, bytes.length);
}
ECNamedCurveParameterSpec ecSpec = ECNamedCurveTable.getParameterSpec (""secp256r1"");
org.bouncycastle.math.ec.ECPoint point = ecSpec.getCurve().decodePoint (temp);
KeyFactory keyFactory = KeyFactory.getInstance(""ECDSA"", ""BC"");
PublicKey pk = keyFactory.generatePublic(new org.bouncycastle.jce.spec.ECPublicKeySpec(point, ecSpec));

","43","<java><bouncycastle><openssh><ecdsa>","0","2","1","2018-12-19 00:09:15","53842880","0","","2735398","","2018-12-18 16:17:09","2018-12-18 15:08:33",""
"58755669","How to get an elliptic curve public key from a private key","So, I need to get a public key from a corresponding 256 bit number using ECC spec256k1. 
So, lets say I get a private key using a sha256 from any passphrase, like this:
>>> import hashlib
>>> private_key = hashlib.sha3_256(b""Led Zeppelin - No Quarter"").hexdigest()
>>> private_key
'c0b279f18074de51d075b152c8ce78b7bddb284e8cfde19896162abec0a0acce'

How do I get a public key from that private key? I need to print the public key as a string. 
","pip install fastecdsa

from fastecdsa import keys, curve,ecdsa
priv_key, pub_key = keys.gen_keypair(curve.secp256k1) 

print(pub_key)

yield
X: 0xcc228e1a4c8e187a0deeabcd6e43bc8f7b6bdd91b8f823912f2de188fba054e6
Y: 0x7995a9d3866a8fa11a9af933c76216a908995ec5cec6ed7d3056b787fa7d39d7

Supported Primitives
Curves over Prime Fields - Source
Name                      Class

P192 / secp192r1          fastecdsa.curve.P192  
P224 / secp224r1          fastecdsa.curve.P224  
P256 / secp256r1          fastecdsa.curve.P256  
P384 / secp384r1          fastecdsa.curve.P384  
P521 / secp521r1          fastecdsa.curve.P521 
secp192k1                 fastecdsa.curve.secp192k1     
secp224k1                 fastecdsa.curve.secp224k1     
secp256k1 (bitcoin curve) fastecdsa.curve.secp256k1     
brainpoolP160r1           fastecdsa.curve.brainpoolP160r1   
brainpoolP192r1           fastecdsa.curve.brainpoolP192r1   
brainpoolP224r1           fastecdsa.curve.brainpoolP224r1   
brainpoolP256r1           fastecdsa.curve.brainpoolP256r1   
brainpoolP320r1           fastecdsa.curve.brainpoolP320r1   
brainpoolP384r1           fastecdsa.curve.brainpoolP384r1
brainpoolP512r1           fastecdsa.curve.brainpoolP512r1

","41","<python><public-key-encryption><elliptic-curve><ecdsa>","1","3","1","2019-11-08 17:31:24","58756097","3","1","1968","","2019-11-07 20:11:41","2019-11-07 19:27:43",""
"55902526","Using ssh ecdsa public key in libssl","I am connecting via SSH to a (homemade) server, and I want to use the ECDSA public key in .ssh/authorized_keys to sign some packets.
The key looks like this : 
ecdsa-sha2-nistp256 AAAA...Kw= foo@bar

And my code is : 
std::string pubkey = ""ecdsa-sha2-nistp256 AAAA...Kw= foo@bar"";
std::string ecdsa = ""ecdsa-sha2-nistp256 "";
size_t begin = pubkey.find(ecdsa);
size_t end = pubkey.find("" "", begin + ecdsa.size() );
pubkey = pubkey.substr(begin + ecdsa.size(), end - (begin + ecdsa.size()) ); //pubkey is now : AAAA...Kw=

EC_GROUP *ecgroup = EC_GROUP_new_by_curve_name(NID_X9_62_prime256v1);
EC_POINT *point = EC_POINT_new(ecgroup);
int res = EC_POINT_oct2point(ecgroup, point, (unsigned char *)pubkey.c_str(), pubkey.size(), NULL); //Return 0 here, but OK should be 1
eckey = EC_KEY_new();
res = EC_KEY_set_group(eckey, ecgroup);
res = EC_KEY_set_public_key(eckey, point);

The function EC_POINT_oct2point returns me an error, and I don't know why/ how to fix it. Does anyone have ever encountered this problem?
Thank you !
","","41","<c++><ssh><ecdsa><libssl>","0","","0","2019-04-29 11:36:21","","1","","1413395","","2019-04-29 11:36:21","2019-04-29 11:35:47",""
"35562739","Distinguishing start of digitally signed message digest","Since I just created this crude test using the functions from IETF RFC 4634, I don't know for certain whether I've used them correctly for HMAC-SHA-384-192, so I'll start with that code here:
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>
#include ""sha.h""

int main(int argc, char *argv[]) {
        HMACContext hmac;
        const unsigned char *keyarr = ""0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef"";
        int err = hmacReset(&hmac, SHA384, keyarr, 48);
        if (err != shaSuccess) {
                printf(""err 1\n"");
                exit(1);
        }
        const uint8_t testarray[65] = {'I',' ','a','m',' ','n','o','t',' ','a',' ','c','r','o','o','k','!'};
        const unsigned char *prfkey = ""abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789"";
        memcpy((void *)testarray + 17, (void *)prfkey, 48);
        const int testlen = 65;
        err = hmacInput(&hmac, testarray, testlen);
        if (err != shaSuccess) {
                printf(""err 2\n"");
                exit(1);
        }
        uint8_t Message_Digest[USHAMaxHashSize];
        err = hmacResult(&hmac, Message_Digest);
        if (err != shaSuccess) {
                printf(""err 3\n"");
                exit(1);
        }
        int i;
        for(i = 0; i < 24; i++) printf("" %02X"", Message_Digest[i]);
        putchar('\n');
}

If I've done everything right (other than selecting good keys) so far, I would ordinarily have a 24-byte (i.e., 192-bit) digest, but if I digitally sign the digest prior to appending it, my experience is that the signature block isn't a predictable length.  I'm sure I could come up with any number of ways to identify the end of the message portion, but I don't want to make this a hack.  What is the accepted way of doing this?  (The signature will use ECDSA.)
I should also mention that this will be a multicast message using UDP inside ESP, since that puts constraints on message economy.  (That's also the main reason for the problem--keeping it binary.  The other is the practice of appending, rather than prefixing it with a byte count in front of it.)
","","40","<digital-signature><hmac><digest><ecdsa>","0","","0","2016-02-22 21:05:39","","8","","1879439","","2016-02-22 21:05:39","2016-02-22 20:02:18",""
"56989912","ECDSA verification duration with mbedTLS","I'm integrating mbedTLS on a project on STM32H753.
Environnement is STM32CubeIDE (arm-none-eabi-gcc). I've compiled in -Ofast.
I'm comparing the computation time of RSA2048 PKCS1 and ECDSA224 (curve SECP224R1) signature verification.
I've reused the example code from mbedTLS ( in mbedTLS\programs\pkey\ecdsa.c and rsa_verify.c ), I didn't modify anything.
I measured the computing time of functions mbedtls_rsa_pkcs1_verify and mbed_ecdsa_read_signature with DBG_CYCCNT and there is no exception or interrupt whatsoever. it does not include the computation of SHA256.
Here are the results I get:

RSA 2048 signature verification: 850 000 cycles
ECDSA 224 signature verification: 200 000 000 cycles

I can't understand the difference. I was indeed expecting a computing time slightly higher with ECDSA than with RSA. But here it's more than 200 times slower. On the other hand the signature generation is way faster with ECDSA, as expected.
Does it make sense ? 
Is there a setting I could have missed that would explain the difference ?
","","40","<rsa><stm32><ecdsa><mbedtls>","0","","0","2019-07-11 13:20:31","","0","1","5836577","","2019-07-11 13:20:31","2019-07-11 13:03:12",""
"55800819","Bouncycastle ECDSA signature verification is OK after signing but fails at next run when reloading public key, message and signatue","I am testing a bouncy castle signature verification. Interestingly it verifies ok after the signing, but when running a new instance with the public key, message and signature if always fails. I am using the same verification routine right after signature generation and the next run which is a simple java code. (The whole story might not be relevant, but I am trying to crate a CA certificate of a javacard public key, and need to sign the resulting certificate. Right after generating the certificate and signing, the verification always passes, but when running the next instance to verify the public key certificate it fails.)
I would kindly ask for a feedback if this has happened to any one else. I am pretty much assume that the code is correct since it works right after signing.
If code is nevertheless required I will clean it up and post it, but it is similar to code examples found on the net.
public class VerifyEccSignature {
public static void main(String[] args) throws NoSuchAlgorithmException, InvalidKeySpecException {
    boolean verify;
    Provider prov=new BouncyCastleProvider();
    Signature ecdsaSign;
    Security.addProvider(prov);

    // Card Public Key
    byte[] pubKey = HexAdapter.toBin(""04cd7a82795bf691232e409ebe10039be6167d15b07e19da0c417c830d4db8b9d8f6919113468a1f650125545cc0bca619ec3be88723889fb439b71dee3e1dbad3"");

    // Certificate to sign ()
    byte[] cert=HexAdapter.toBin(""48656C6C6F576F726C64"");

    // Signature returned by chip
    byte[] sigBytes=HexAdapter.toBin(""30450220459408F84F45A1F960C3260D8191083617C016ADC721E5162F667D8E01BAEBCD0221008BE3EFD1F09363653B699CA39174D265218911023DA0DCBD04C1F44228D5E5FD"");

    try {            
        // Get rpivate key
        KeyFactory keyFactory = KeyFactory.getInstance(""ECDSA"",prov);
        PKCS8EncodedKeySpec spec=new PKCS8EncodedKeySpec(HexAdapter.toBin(""308193020100301306072A8648CE3D020106082A8648CE3D0301070479307702010104200BF4B825E8B758853A49E01EAA45905E249B580421C7306A8EC85B4F4229675DA00A06082A8648CE3D030107A14403420004CD7A82795BF691232E409EBE10039BE6167D15B07E19DA0C417C830D4DB8B9D8F6919113468A1F650125545CC0BCA619EC3BE88723889FB439B71DEE3E1DBAD3""));
        PrivateKey priv = keyFactory.generatePrivate(spec);
        ecdsaSign = java.security.Signature.getInstance(""SHA256withECDSA"",prov);

        // Generate signature of first run
        byte[] cc=""HelloWorld"".getBytes();
        ecdsaSign.initSign(priv);
        ecdsaSign.update(cc);            
        byte[] signature=ecdsaSign.sign();
        System.out.println(""data "" + HexAdapter.toHex(cc));
        System.out.println(""signature= ""+HexAdapter.toHex(signature));

        // Convert it to export format required for Tachograph certificate
        byte[] rawSignature=VerifySignature.getRawSignature(signature);

        // Setup verifing class
        VerifySignature vv=new VerifySignature(prov);

        // Verify current run
        verify=vv.verify(pubKey, ByteBuffer.wrap(cc), rawSignature);
        System.out.println(""cc verify signature. Result: ""+verify);

        // Verify previous run whre signature is copied into cert from output of previous run
        verify=vv.verify(pubKey, ByteBuffer.wrap(cert), sigBytes);

        // Output information required for verification and to copy over to next run
        System.out.println(""pubkey ""+HexAdapter.toHex(pubKey));
        System.out.println(""cert ""+HexAdapter.toHex(cert));     
        System.out.println(""sig ""+HexAdapter.toHex(sigBytes));

    } catch (NoSuchAlgorithmException ex) {
        Logger.getLogger(TestCaSignerEcc.class.getName()).log(Level.SEVERE, null, ex);
    } catch (InvalidKeyException ex) {
        Logger.getLogger(VerifyEccSignature.class.getName()).log(Level.SEVERE, null, ex);
    } catch (SignatureException ex) {
        Logger.getLogger(VerifyEccSignature.class.getName()).log(Level.SEVERE, null, ex);
    } catch (Exception ex) {
        Logger.getLogger(VerifyEccSignature.class.getName()).log(Level.SEVERE, null, ex);
    }

}

}
Verifying:
public class VerifySignature {
Provider prov;
Signature ecdsaSign;

public VerifySignature(Provider prov) {
    this.prov = prov;
}

public boolean verify(byte[] pubKey, ByteBuffer plainCert, byte[] rawSignature){

    boolean verify=false;

    try {              
        ECPublicKey pp= decodeKey(prov,pubKey);

        ASN1EncodableVector v = new ASN1EncodableVector();
        v.add(/*r*/new ASN1Integer(new BigInteger(1, Arrays.copyOfRange(rawSignature,0,32))));
        v.add(/*s*/new ASN1Integer(new BigInteger(1, Arrays.copyOfRange(rawSignature,32,32*2))));
        byte[] sigDer = new DERSequence(v).getEncoded();
        System.out.println(""v ""+v);

        // Verify signature
        ecdsaSign = java.security.Signature.getInstance(""SHA256withECDSA"",prov);
        ecdsaSign.initVerify(pp);
        ecdsaSign.update(plainCert);
        verify = ecdsaSign.verify(sigDer);
        System.out.println("" - Singnature verified: ""+verify);

    } catch (NoSuchAlgorithmException ex) {
        Logger.getLogger(TestCaSignerEcc.class.getName()).log(Level.SEVERE, null, ex);
    } catch (InvalidKeySpecException | SignatureException | InvalidKeyException | IOException ex) {
        Logger.getLogger(VerifyEccSignature.class.getName()).log(Level.SEVERE, null, ex);
    } catch (NoSuchProviderException ex) {
        Logger.getLogger(VerifySignature.class.getName()).log(Level.SEVERE, null, ex);
    }
    return verify;
}

public static ECPublicKey decodeKey(Provider prov, byte[] encoded) throws InvalidKeySpecException, NoSuchAlgorithmException, NoSuchProviderException{
    java.security.spec.ECPoint point = new java.security.spec.ECPoint(  new BigInteger(1, Arrays.copyOfRange(encoded,1,33)), 
                                                                        new BigInteger(1, Arrays.copyOfRange(encoded,33,65))
                                                                        );

    ECNamedCurveParameterSpec params = ECNamedCurveTable.getParameterSpec(/*""secp256r1""""prime256v1*/""P-256"");
    KeyFactory fact = KeyFactory.getInstance(""ECDSA"",prov);
    ECCurve curve = params.getCurve();
    java.security.spec.EllipticCurve ellipticCurve = EC5Util.convertCurve(curve, params.getSeed());

    java.security.spec.ECParameterSpec params2=EC5Util.convertSpec(ellipticCurve, params);
    java.security.spec.ECPublicKeySpec keySpec = new java.security.spec.ECPublicKeySpec(point,params2);
    ECPublicKey pubKey=(ECPublicKey) fact.generatePublic(keySpec);
    return pubKey;
}

private static ASN1Primitive toAsn1Primitive(byte[] data) throws Exception
{
    try (ByteArrayInputStream inStream = new ByteArrayInputStream(data);
            ASN1InputStream asnInputStream = new ASN1InputStream(inStream);) 
    {
        return asnInputStream.readObject();
    }
}

public static byte[] getRawSignature(byte[] signed)throws Exception{
        ASN1Primitive asn1 = toAsn1Primitive(signed);
        byte[] rawSignature=new byte[0x40];
        byte[] tt;
        int ptr=0;
        if (asn1 instanceof ASN1Sequence) {
            ASN1Sequence asn1Sequence = (ASN1Sequence) asn1;
            ASN1Encodable[] asn1Encodables = asn1Sequence.toArray();
            for (ASN1Encodable asn1Encodable : asn1Encodables) {
                ASN1Primitive asn1Primitive = asn1Encodable.toASN1Primitive();
                if (asn1Primitive instanceof ASN1Integer) {
                    ASN1Integer asn1Integer = (ASN1Integer) asn1Primitive;
                    BigInteger integer = asn1Integer.getValue();
                    tt=BigIntegers.asUnsignedByteArray(asn1Integer.getValue());
                    System.arraycopy(tt, 0, rawSignature, ptr,  0x20);
                    ptr+=0x20;
                }
            }
        }
    return rawSignature;
}

}
","Sorry to bother you all. 
It seems I have been injecting the signature directly, intsead of converting it to raw format before converting it back to ASN1 during verification. My oversight. 
Peter
","40","<java><signature><verify><ecdsa>","-1","0","1","2019-04-22 21:40:02","","2","","11396626","","2019-04-22 21:31:37","2019-04-22 20:37:20",""
"58361756","How to validate a signature in Java if the public key's algorithm is EC?","Given an X509 certificate object of a person. (The object's type is sun.security.x509.X509CertImpl). This person signed a String with his private key. Given the signature that was made by this person, when he signed the above mentioned String object.
My task is to verify this signature, but have difficulties with it.
When I try to verify the signature with the below code:
    ...
    X509Certificate x509Certificate = getCertificate(certificate);

    Signature signature = Signature.getInstance(""SHA256withECDSA"");

    signature.initVerify(x509Certificate.getPublicKey());

    signature.update(unsignedData);
    boolean bool = signature.verify(signatureToVerify);
    System.out.println(""The signature is "" + (bool ? """" : ""NOT"") + "" valid"");

I get java.security.SignatureException: Could not verify signature
Do you have an idea, how can I make it working?
Edited:
At the end, I managed to make it working, but do not understand the reason yet:
Before passing the signature to the verify method, i needed to do the following modification on it:
    byte[] rBytes = Arrays.copyOfRange(signatureHash, 0, 32);
    byte[] sBytes = Arrays.copyOfRange(signatureHash, 32, 64);

    BigInteger r = new BigInteger(1, rBytes);
    BigInteger s = new BigInteger(1, sBytes);

    ASN1Integer asn1R = new ASN1Integer(r);
    ASN1Integer asn1S = new ASN1Integer(s);

    DERSequence seq = new DERSequence(new ASN1Integer[]{asn1R, asn1S});
    byte[] signatureToVerify2 = seq.getEncoded();
    // verifying the signatureToVerify2 instead of the original brings success
    boolean bool = signature.verify(signatureToVerify2);

","Here is a (semi)working app for further reference that verifies a signature, when ECDSA is involved in the story:
import org.bouncycastle.asn1.ASN1Integer;
import org.bouncycastle.asn1.DERSequence;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.security.Signature;
import java.security.SignatureException;
import java.security.cert.CertificateException;
import java.security.cert.CertificateFactory;
import java.security.cert.X509Certificate;
import java.util.Arrays;

public class SignatureTest {

    public static void main(String[] args) throws CertificateException, InvalidKeyException, SignatureException, NoSuchAlgorithmException, IOException {
        byte[] certificateAsByteArray = ...;
        byte[] dataToVerifyAsByteArray = ...;
        byte[] signatureHashAsByteArray = ...;

        CertificateFactory certFactory = CertificateFactory.getInstance(""X.509"");
        InputStream in = new ByteArrayInputStream(certificateBytes);
        X509Certificate x509Certificate = (X509Certificate) certFactory.generateCertificate(in);

        Signature signature = Signature.getInstance(""SHA256withECDSA"");

        signature.initVerify(x509Certificate.getPublicKey());

        signature.update(dataToVerifyAsHexaString);

        byte[] rBytes = Arrays.copyOfRange(signatureHash, 0, 32);
        byte[] sBytes = Arrays.copyOfRange(signatureHash, 32, 64);

        ASN1Integer asn1R = new ASN1Integer(rBytes);
        ASN1Integer asn1S = new ASN1Integer(sBytes);

        DERSequence seq = new DERSequence(new ASN1Integer[] {asn1R, asn1S});

        boolean isSignatureOK = signature.verify(seq.getEncoded());

        System.out.println(""The signature is "" + (isSignatureOK ? """" : ""NOT "") + ""VALID"");
    }
}

","40","<java><signature><public-key><elliptic-curve><ecdsa>","1","0","1","2019-10-14 13:47:57","58378193","9","","1203728","","2019-10-14 13:30:42","2019-10-13 08:19:00",""
"54056902","How to fix this issue of adding two points in curve secp256k1 of ECDSA?","I got this error:
ava.lang.ClassCastException:            org.bouncycastle.math.ec.ECFieldElement$Fp cannot be cast to org.bouncycastle.math.ec.custom.sec.SecP256K1FieldElement
once trying to read a public key as a string in android which is retrieved from .pem file as 
-----BEGIN PUBLIC KEY-----\n
MIH1MIGuBgcqhkjOPQIBMIGiAgEBMCwGByqGSM49AQECIQD/////////////////
///////////////////+///8LzAGBAEABAEHBEEEeb5mfvncu6xVoGKVzocLBwKb
/NstzijZWfKBWxb4F5hIOtp3JqPEZV2k+/wOEQio/Re0SKaFVBmcR9CP+xDUuAIh
AP////////////////////66rtzmr0igO7/SXozQNkFBAgEBA0IABK5F1KgwnBG3
jVLqtqJ9+uesDOzP00s88bgGyYQen86xLn1iUJxy/qPPmn9WZyfQ+b27UaHNAa09
83BuGKHERAE=
\n-----END PUBLIC KEY-----
This key from type secp256k1 
and this is the code part of reading a public key :
       Security.removeProvider(BouncyCastleProvider.PROVIDER_NAME);

       Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());                                                
        Reader rdr = new StringReader (keys[seletedTFE]);
        Object parsed = new     org.bouncycastle.openssl.PEMParser(rdr).readObject();
        ECPublicKey key = (ECPublicKey) new    org.bouncycastle.openssl.jcajce.JcaPEMKeyConverter().getPublicKey((Subje.ctPublicKeyInfo) parsed);

         ECPoint P = key.getQ();

and the error because of this point: of adding C1 with C2 and it says that C2 of type ECpointfp while C2 of type ECElementFieldsecp256k1
     ECPoint C1;
     ECPoint C2;
     ECPoint C3;
     C2 = P.multiply(beta);
     C3 = C1.add(C2)   ;                    

and this code works with prime256v1 and secp256r1 ,but I need to use secp256k1,so  how to solve this issue ?
","","38","<android><ecdsa>","1","","0","2019-01-05 22:34:03","","0","","","","","2019-01-05 22:34:03",""
"57894607","Is my leaf certificate truly invalid, or am I using `openssl verify` incorrectly?","I thought I created my leaf certificate (device.cert.pem) correctly but it's not validating correctly with my software. I'm therefore trying to use OpenSSL on the command-line to verify said certificate before I debug my software any further.
The chain is: root (CN=Halo HSM CA) signs signer (CN=Halo Signing Server 0003) signs device (CN=Halo).
Here's how I'm invoking OpenSSL on the command line:
$ openssl verify -show_chain -trusted <path>/devel_root.cert.pem signing_server.curly-0003.cert.pem device.cert.pem 
signing_server.curly-0003.cert.pem: OK
Chain:
depth=0: C = US, ST = Pennsylvania, L = York, O = Red Lion Controls, CN = Halo Signing Server 0003 (untrusted)
depth=1: C = US, ST = Pennsylvania, L = York, O = Red Lion Controls, CN = Halo HSM CA
C = US, ST = Pennsylvania, L = York, O = Red Lion Controls, CN = Halo
error 20 at 0 depth lookup: unable to get local issuer certificate
error device.cert.pem: verification failed

And the root cert:
$ openssl x509 -in <path>/devel_root.cert.pem -text
Certificate:
    Data:
        Version: 3 (0x2)
        Serial Number:
            4e:81:59:83:f3:e5:3d:ff:70:ed:92:b4:48:9a:d3:64:5a:bf:1c:82
        Signature Algorithm: ecdsa-with-SHA256
        Issuer: C = US, ST = Pennsylvania, L = York, O = Red Lion Controls, CN = Halo HSM CA
        Validity
            Not Before: Sep  6 22:09:48 2019 GMT
            Not After : Oct  6 22:09:48 2019 GMT
        Subject: C = US, ST = Pennsylvania, L = York, O = Red Lion Controls, CN = Halo HSM CA
        Subject Public Key Info:
            Public Key Algorithm: id-ecPublicKey
                Public-Key: (256 bit)
                pub:
                    04:a3:8a:fd:87:aa:36:67:5c:e0:f7:49:5c:cd:4e:
                    86:96:53:9a:5a:9f:23:a3:3b:67:e2:76:87:e6:b6:
                    ab:ea:fc:2f:46:24:d7:7a:ce:ee:76:da:42:b4:e6:
                    a4:8b:48:d4:c7:59:cc:01:62:08:37:3f:ec:30:55:
                    76:3d:19:7b:c2
                ASN1 OID: prime256v1
                NIST CURVE: P-256
        X509v3 extensions:
            X509v3 Subject Key Identifier: 
                E0:1D:B4:40:9A:BA:F3:3F:ED:AC:6B:33:F4:8D:60:CE:C3:05:89:EA
            X509v3 Authority Key Identifier: 
                keyid:E0:1D:B4:40:9A:BA:F3:3F:ED:AC:6B:33:F4:8D:60:CE:C3:05:89:EA

            X509v3 Basic Constraints: critical
                CA:TRUE, pathlen:1
            X509v3 Key Usage: 
                Certificate Sign, CRL Sign
    Signature Algorithm: ecdsa-with-SHA256
         30:44:02:20:2b:48:6e:f2:ec:76:ad:88:85:52:74:fe:45:c8:
         93:7e:bc:4c:b6:d8:37:ff:26:fa:05:91:2c:13:a6:7c:e3:cc:
         02:20:61:7c:e1:23:8d:c6:93:b5:4e:c8:4b:46:8e:02:1f:67:
         04:82:a6:b0:98:b5:4b:09:7d:05:0c:aa:22:b2:16:01
-----BEGIN CERTIFICATE-----
MIICLjCCAdWgAwIBAgIUToFZg/PlPf9w7ZK0SJrTZFq/HIIwCgYIKoZIzj0EAwIw
ZTELMAkGA1UEBhMCVVMxFTATBgNVBAgMDFBlbm5zeWx2YW5pYTENMAsGA1UEBwwE
WW9yazEaMBgGA1UECgwRUmVkIExpb24gQ29udHJvbHMxFDASBgNVBAMMC0hhbG8g
SFNNIENBMB4XDTE5MDkwNjIyMDk0OFoXDTE5MTAwNjIyMDk0OFowZTELMAkGA1UE
BhMCVVMxFTATBgNVBAgMDFBlbm5zeWx2YW5pYTENMAsGA1UEBwwEWW9yazEaMBgG
A1UECgwRUmVkIExpb24gQ29udHJvbHMxFDASBgNVBAMMC0hhbG8gSFNNIENBMFkw
EwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEo4r9h6o2Z1zg90lczU6GllOaWp8joztn
4naH5rar6vwvRiTXes7udtpCtOaki0jUx1nMAWIINz/sMFV2PRl7wqNjMGEwHQYD
VR0OBBYEFOAdtECauvM/7axrM/SNYM7DBYnqMB8GA1UdIwQYMBaAFOAdtECauvM/
7axrM/SNYM7DBYnqMBIGA1UdEwEB/wQIMAYBAf8CAQEwCwYDVR0PBAQDAgEGMAoG
CCqGSM49BAMCA0cAMEQCICtIbvLsdq2IhVJ0/kXIk368TLbYN/8m+gWRLBOmfOPM
AiBhfOEjjcaTtU7IS0aOAh9nBIKmsJi1Swl9BQyqIrIWAQ==
-----END CERTIFICATE-----

And the signing cert
$ openssl x509 -in signing_server.curly-0003.cert.pem -text
Certificate:
    Data:
        Version: 3 (0x2)
        Serial Number:
            4e:3a:0c:d6:4d:64:d7:15:19:ee:f2:05:1b:99:0f:74
        Signature Algorithm: ecdsa-with-SHA256
        Issuer: C = US, ST = Pennsylvania, L = York, O = Red Lion Controls, CN = Halo HSM CA
        Validity
            Not Before: Sep 10 19:00:00 2019 GMT
            Not After : Dec 31 23:59:59 9999 GMT
        Subject: C = US, ST = Pennsylvania, L = York, O = Red Lion Controls, CN = Halo Signing Server 0003
        Subject Public Key Info:
            Public Key Algorithm: id-ecPublicKey
                Public-Key: (256 bit)
                pub:
                    04:14:df:32:ce:4f:a6:4d:9c:08:7d:35:d6:57:1a:
                    b6:95:07:7c:5e:72:d1:68:5a:ba:9e:28:47:62:fa:
                    ee:3a:04:19:03:86:7e:41:7b:8b:7d:33:8a:6f:3f:
                    88:27:6c:89:fc:9a:cd:c5:26:72:53:cc:92:b4:41:
                    5e:ad:c2:c0:e6
                ASN1 OID: prime256v1
                NIST CURVE: P-256
        X509v3 extensions:
            X509v3 Basic Constraints: critical
                CA:TRUE, pathlen:0
            X509v3 Key Usage: critical
                Digital Signature, Certificate Sign, CRL Sign
            X509v3 Subject Key Identifier: 
                57:55:32:18:99:54:20:30:1C:73:6F:08:46:0C:C9:86:EC:F6:E8:DB
            X509v3 Authority Key Identifier: 
                keyid:E0:1D:B4:40:9A:BA:F3:3F:ED:AC:6B:33:F4:8D:60:CE:C3:05:89:EA

    Signature Algorithm: ecdsa-with-SHA256
         30:45:02:20:73:f5:44:7b:be:b1:62:c5:89:28:f4:94:5a:85:
         f3:c1:67:60:c9:4a:63:f2:f5:4b:5d:f1:1a:26:89:5d:e2:04:
         02:21:00:b7:14:5f:30:e8:b9:24:4b:0f:73:9b:94:3c:a0:25:
         de:35:59:5d:c1:fd:af:76:25:81:13:0d:02:d8:95:aa:ef
-----BEGIN CERTIFICATE-----
MIICPTCCAeOgAwIBAgIQTjoM1k1k1xUZ7vIFG5kPdDAKBggqhkjOPQQDAjBlMQsw
CQYDVQQGEwJVUzEVMBMGA1UECAwMUGVubnN5bHZhbmlhMQ0wCwYDVQQHDARZb3Jr
MRowGAYDVQQKDBFSZWQgTGlvbiBDb250cm9sczEUMBIGA1UEAwwLSGFsbyBIU00g
Q0EwIBcNMTkwOTEwMTkwMDAwWhgPOTk5OTEyMzEyMzU5NTlaMHIxCzAJBgNVBAYT
AlVTMRUwEwYDVQQIDAxQZW5uc3lsdmFuaWExDTALBgNVBAcMBFlvcmsxGjAYBgNV
BAoMEVJlZCBMaW9uIENvbnRyb2xzMSEwHwYDVQQDDBhIYWxvIFNpZ25pbmcgU2Vy
dmVyIDAwMDMwWTATBgcqhkjOPQIBBggqhkjOPQMBBwNCAAQU3zLOT6ZNnAh9NdZX
GraVB3xectFoWrqeKEdi+u46BBkDhn5Be4t9M4pvP4gnbIn8ms3FJnJTzJK0QV6t
wsDmo2YwZDASBgNVHRMBAf8ECDAGAQH/AgEAMA4GA1UdDwEB/wQEAwIBhjAdBgNV
HQ4EFgQUV1UyGJlUIDAcc28IRgzJhuz26NswHwYDVR0jBBgwFoAU4B20QJq68z/t
rGsz9I1gzsMFieowCgYIKoZIzj0EAwIDSAAwRQIgc/VEe76xYsWJKPSUWoXzwWdg
yUpj8vVLXfEaJold4gQCIQC3FF8w6LkkSw9zm5Q8oCXeNVldwf2vdiWBEw0C2JWq
7w==
-----END CERTIFICATE-----

And the device cert
$ openssl x509 -in device.cert.pem -text
Certificate:
    Data:
        Version: 3 (0x2)
        Serial Number:
            46:f1:16:55:c4:bb:56:27:ab:36:75:00:7e:bb:60:b1
        Signature Algorithm: ecdsa-with-SHA256
        Issuer: C = US, ST = Pennsylvania, L = York, O = Red Lion Controls, CN = Halo Signing Server 0003
        Validity
            Not Before: Sep 10 19:00:00 2019 GMT
            Not After : Dec 31 23:59:59 3000 GMT
        Subject: C = US, ST = Pennsylvania, L = York, O = Red Lion Controls, CN = Halo
        Subject Public Key Info:
            Public Key Algorithm: id-ecPublicKey
                Public-Key: (256 bit)
                pub:
                    04:2b:dd:82:0b:59:e3:d7:c1:04:ce:d4:9c:bb:74:
                    4c:94:5c:c7:9f:41:21:b8:24:96:39:9c:43:ea:dc:
                    6a:31:7b:58:54:ee:c2:a9:b7:0f:ea:34:ef:72:45:
                    cd:2e:2e:d7:1f:0a:74:eb:79:2d:e0:5d:16:ab:89:
                    5e:a3:52:99:7a
                ASN1 OID: prime256v1
                NIST CURVE: P-256
        X509v3 extensions:
            X509v3 Authority Key Identifier: 
                keyid:A7:A9:0B:27:B4:0D:28:84:26:F0:64:70:B5:27:DD:0B:05:4A:25:46

            X509v3 Subject Key Identifier: 
                7E:0E:12:66:F0:CA:6C:D2:53:C3:0D:D3:40:6B:33:9A:91:C0:44:94
    Signature Algorithm: ecdsa-with-SHA256
         30:45:02:21:00:89:00:7e:64:03:1c:c3:8a:b1:17:30:ee:7b:
         29:41:15:95:8e:1d:98:49:87:16:67:b8:4c:fc:d4:dc:d5:af:
         c6:02:20:37:c8:09:39:ec:75:e2:4c:68:b5:b0:06:00:12:e8:
         61:57:8b:57:ce:1e:7b:b4:81:cb:e2:c0:1f:de:b5:0c:cf
-----BEGIN CERTIFICATE-----
MIICEjCCAbigAwIBAgIQRvEWVcS7VierNnUAfrtgsTAKBggqhkjOPQQDAjByMQsw
CQYDVQQGEwJVUzEVMBMGA1UECAwMUGVubnN5bHZhbmlhMQ0wCwYDVQQHDARZb3Jr
MRowGAYDVQQKDBFSZWQgTGlvbiBDb250cm9sczEhMB8GA1UEAwwYSGFsbyBTaWdu
aW5nIFNlcnZlciAwMDAzMCAXDTE5MDkxMDE5MDAwMFoYDzMwMDAxMjMxMjM1OTU5
WjBeMQswCQYDVQQGEwJVUzEVMBMGA1UECAwMUGVubnN5bHZhbmlhMQ0wCwYDVQQH
DARZb3JrMRowGAYDVQQKDBFSZWQgTGlvbiBDb250cm9sczENMAsGA1UEAwwESGFs
bzBZMBMGByqGSM49AgEGCCqGSM49AwEHA0IABCvdggtZ49fBBM7UnLt0TJRcx59B
IbgkljmcQ+rcajF7WFTuwqm3D+o073JFzS4u1x8KdOt5LeBdFquJXqNSmXqjQjBA
MB8GA1UdIwQYMBaAFKepCye0DSiEJvBkcLUn3QsFSiVGMB0GA1UdDgQWBBR+DhJm
8Mps0lPDDdNAazOakcBElDAKBggqhkjOPQQDAgNIADBFAiEAiQB+ZAMcw4qxFzDu
eylBFZWOHZhJhxZnuEz81NzVr8YCIDfICTnsdeJMaLWwBgAS6GFXi1fOHnu0gcvi
wB/etQzP
-----END CERTIFICATE-----

I've also tried combining the root and intermediate certs into a single file and using the -CAfile argument, but that yields the same result.
$ cp <path>/devel_root.cert.pem trusted_certs.txt
$ cat signing_server.curly-0003.cert.pem >> trusted_certs.txt 
$ openssl verify -show_chain -CAfile trusted_certs.txt device.cert.pem 
C = US, ST = Pennsylvania, L = York, O = Red Lion Controls, CN = Halo
error 20 at 0 depth lookup: unable to get local issuer certificate
error device.cert.pem: verification failed

","At minimum, your device certificate has the wrong authority key identifier for the certificate you claim issued it.
The issuing CA:

    X509v3 extensions:
        X509v3 Basic Constraints: critical
            CA:TRUE, pathlen:0
        X509v3 Key Usage: critical
            Digital Signature, Certificate Sign, CRL Sign
        X509v3 Subject Key Identifier: 
            57:55:32:18:99:54:20:30:1C:73:6F:08:46:0C:C9:86:EC:F6:E8:DB


57:55:32:...
The device certificate:

    X509v3 extensions:
        X509v3 Authority Key Identifier: 
            keyid:A7:A9:0B:27:B4:0D:28:84:26:F0:64:70:B5:27:DD:0B:05:4A:25:46


A7:A9:0B:...
Since the device certificate Authority Key Identifier does not match the issuing CA Subject Key Identifier, the issuing CA certificate is eliminated as a candidate.
","38","<openssl><ssl-certificate><ecdsa>","0","0","1","2019-09-12 15:00:49","57909559","3","","2784641","","2019-09-11 20:32:33","2019-09-11 18:07:45",""
"55407006","Cannot correctly encode string when reading from text file (encoding into sha256...)","Basically what I want to accomplish (simplified...):
I want to make 100 bitcoin addresses from my own password that look kind of like:
password_1
password_2
password_3
So when I do this in the program, I am getting the correct result: 
def public_key(src):
    privatekey = (int(hashlib.sha256(src).hexdigest(), 16))
    return generate_address(privatekey)
def private_key(src):
    privatekey = hashlib.sha256(src).hexdigest()
    return str(privatekey)
herewego = ""password_1"".encode('utf-8')
somevariable = public_key(herewego)
print somevariable 

^ This works as intended...but if I put ""password_1"" in a txt file and try to read this line, it gives totally different result? 
for addr in file:
 address =  addr.encode('utf-8')
 print public_key(address)

So the issue is obviously that Notepad encodes the text file in say ansi or utf-8, it doesn't matter but the line read from there must be looking different to python than when I enter the "" ...."" within python? So what coding to use or if it's impossible: what alternative to Notepad? This is for Python 2.7 in windows by the way.
","There might be newline characters, you could try 
for addr in file:
address =  addr.rstrip('\n').encode('utf-8')
print public_key(address)

","37","<python><blockchain><bitcoin><sha256><ecdsa>","1","0","1","2019-03-28 21:33:33","55407176","0","","","","","2019-03-28 21:19:56",""
"58432805","iOS FIDO2 BLE Authenticator: Invalid encoding for signature","I'm developing an iOS BLE authenticator. As of now, I can register using NONE attestation. When I try to authenticate getting ""Invalid encoding for signature"".
As I want to do NONE and SURROGATE,  followed https://www.w3.org/TR/webauthn/ section 6.4.5. Signature Formats for Packed Attestation, FIDO U2F Attestation, and Assertion Signatures. It states the following things,
For COSEAlgorithmIdentifier -7 (ES256), and other ECDSA-based algorithms, a signature value is encoded as an ASN.1 DER Ecdsa-Sig-Value, as defined in [RFC3279] section 2.2.3.
    Example:
    30 44; SEQUENCE (68 Bytes)             02 20; INTEGER (32 Bytes)
        |  3d 46 28 7b 8c 6e 8c 8c  26 1c 1b 88 f2 73 b0 9a
        |  32 a6 cf 28 09 fd 6e 30  d5 a7 9f 26 37 00 8f 54
        02 20                            ; INTEGER (32 Bytes)
        |  4e 72 23 6e a3 90 a9 a1  7b cf 5f 7a 09 d6 3a b2
        |  17 6c 92 bb 8e 36 c0 41  98 a2 7b 90 9b 6e 8f 13

My iOS encoded signature:
30450221008dec31cc36160522df4419935dd0aa6b5c198b946a90b19a47fd8927d57ceb6502201de973a69e7927e7eadace24bf7de352f38f5e0280c2364f3c108d28ec1d7fa1
Android encoded signature:
304502200ea2e7de7c97c4594148b9a0bc6bd8dcffdf3a5e4cbab2d20f186039768db75d022100e627ac5c71c082f85d5bea2afd212fddd80438e5cfebf1d3d02e149512ebc528
When I pass the android signature to Java server, it is verified successfully. But iOS always throws the following error.
at com.xxx.fido2.processor.TestSignature.main(TestSignature.java:21) . 
Caused by: java.security.SignatureException: Invalid encoding for signature . 
at sun.security.ec.ECDSASignature.decodeSignature(ECDSASignature.java:468) . 
Caused by: java.security.SignatureException: Invalid encoding for signature . 

at sun.security.ec.ECDSASignature.engineVerify(ECDSASignature.java:390) . 
... 4 more . 
Caused by: java.io.IOException: Sequence tag error . 
Caused by: java.io.IOException: Sequence tag error . 
Caused by: java.security.SignatureException: Invalid encoding for signature . 

at sun.security.ec.ECDSASignature.engineVerify(ECDSASignature.java:390) . 
... 4 more . 
Caused by: java.io.IOException: Sequence tag error . 
Caused by: java.io.IOException: Sequence tag error .

Any help would be appreciated. Thanks in advance.
","","37","<ios><ecdsa><webauthn><fido>","0","","0","2019-10-21 16:29:25","","0","1","","","","2019-10-17 12:35:08",""
"55225677","C# BouncyCastle-How can I create a sha512ECDSA certificate and a valid certificate revocation list for this certificate?","How can I create a sha512ECDSA certificate and a valid certificate revocation list for this certificate using the latest version of BouncyCastle? I did not find any hints and the documentation does not seem to be well maintained either...
","I did this now using OpenSSL directly. Here you can see the result: https://gist.github.com/SeppPenner/2e423b06904615255c05fe9056e8704b
","35","<c#><certificate><bouncycastle><sha512><ecdsa>","0","0","1","2019-03-19 13:10:05","","3","1","","","","2019-03-18 16:14:25",""
"58338993","Application crashes when signing message with Crypto++ ECDSA under Xcode?","I am performing ECDSA signing on Mac OS with Crypto++. The command line is OK, but under Xcode EXC_BAD_ACCESS error occurs on signing message.
The tests in cryptest.exe from the command line passes. cryptest.exe is the library's validation program.
I have tried to build the library using clang++ and libc++, and build it with XCode, all have this issue.
clang++ -DNDEBUG -g2 -O2 -stdlib=libc++ -DCRYPTOPP_DISABLE_MIXED_ASM -fPIC -pthread -pipe -c 

Here is the code.
AutoSeededRandomPool prng;

ECDSA<ECP, SHA256>::PrivateKey k1;   
k1.Initialize( prng, ASN1::secp256r1() );

ECDSA<ECP, SHA256>::PublicKey pKey;
k1.MakePublicKey( pKey );

const ECP::Point& q = pKey.GetPublicElement();    
const Integer& qx = q.x;
const Integer& qy = q.y;

std::cout << ""x: "" << std::hex << qx << std::endl;    
std::cout << ""y: "" << std::hex << qy << std::endl;

const Integer& x = k1.GetPrivateExponent();
std::cout << ""K1: "" << std::hex << x << std::endl;

ByteQueue queue;
k1.Save(queue);

ECDSA<ECP, SHA256>::Signer signer(k1);

std::string message = ""Do or do not. There is no try."";
size_t siglen = signer.MaxSignatureLength();
std::string signature(siglen, 0x00);

siglen = signer.SignMessage( prng, (const byte*)&message[0], message.size(), (byte*)&signature[0] );
signature.resize(siglen);

I'm attaching stack trace below:
* thread #1: tid = 0x15fc20, 0x00007fff910a9d26 libsystem_platform.dylib`_platform_bzero$VARIANT$Merom + 22, queue = 'com.apple.main-thread', stop reason = EXC_BAD_ACCESS (code=1, address=0x0)
  frame #0: 0x00007fff910a9d26 libsystem_platform.dylib`_platform_bzero$VARIANT$Merom + 22  
* frame #1: 0x00000001000ccc23 testCrypto`CryptoPP::DL_SignatureMessageEncodingMethod_DSA::ComputeMessageRepresentative(this=<unavailable>, rng=<unavailable>, recoverableMessage=<unavailable>,   
  recoverableMessageLength=<unavailable>, hash=0x0000000104e7df30, hashIdentifier=<unavailable>, messageEmpty=false, representative=0x0000000000000000, representativeBitLength=<unavailable>) const + 83 at gfpcrypt.cpp:96  
  frame #2: 0x0000000100019ae8 testCrypto`CryptoPP::DL_VerifierBase<CryptoPP::EC2NPoint>::VerifyAndRestart(this=0x00007fff5fbfdab8, messageAccumulator=0x0000000104e7de40) const + 568 at pubkey.h:1693 
  frame #3: 0x0000000100034c1e testCrypto`CryptoPP::PK_Verifier::VerifyMessage(this=0x00007fff5fbfdab8, message=<unavailable>, messageLen=<unavailable>, signature=<unavailable>, signatureLen=<unavailable>) const + 94 at cryptlib.cpp:942
  frame #4: 0x000000010000464a testCrypto`ValidateECDSA() + 2762 at main.cpp:257
  frame #5: 0x0000000100004a35 testCrypto`main(argc=1, argv=0x00007fff5fbff9e0) + 53 at main.cpp:272
  frame #6: 0x00007fff8fec95c9 libdyld.dylib`start + 1

","I use Xcode to build the project to create a library, then can call the library without errors.
","35","<xcode><macos><crypto++><ecdsa>","1","0","1","2019-10-21 08:48:05","","4","","608639","","2019-10-16 10:59:46","2019-10-11 10:08:59",""
"58482869","What is the correct way to use ECDSA in Crypto++","When I verify a signature using ECDSA verifier in Crypto++, if the public key is incorrect the method just crash the application. Should I try catch the exception? What is the best way to handle this?
Thanks!
","
... should I try catch the exception? What is the best way to handle this?

It depends on how you want to do it. I think there are three options.
The information below is from Elliptic Curve Digital Signature Algorithm and SignatureVerificationFilter on the Crypto++ wiki.
First, you can catch the SignatureVerificationFailed exception if you like:
try
{
    DSA::Verifier verifier(publicKey);
    StringSource ss2(message+signature, true,
        new SignatureVerificationFilter(
            verifier, NULL, THROW_EXCEPTION
            /* SIGNATURE_AT_END */
       )
    );

    std::cout << ""Verified signature on message"" << std::endl;
}
catch (SignatureVerificationFailed& ex)
{
    std::cerr << ""Failed to verify signature on message"" << std::endl;
}

Second, you can get the result as a boolean value. Notice lack of THROW_EXCEPTION:
bool result = false;
StringSource ss(message+signature, true,
    new SignatureVerificationFilter(
        verifier,
        new ArraySink(
            (byte*)&result, sizeof(result)),
        PUT_RESULT | SIGNATURE_AT_END
   )
);

if(result)
    std::cout << ""Verified signature on message"" << std::endl;
else
    std::cerr << ""Failed to verify signature on message"" << std::endl;

Third, you can forgo pipelines and just call VerifyMessage on the Verifier object:
bool result = verifier.VerifyMessage(ConstBytePtr(message), BytePtrSize(message), ConstBytePtr(signature), BytePtrSize(signature));
if(result)
    std::cout << ""Verified signature on message"" << std::endl;
else
    std::cerr << ""Failed to verify signature on message"" << std::endl;

","34","<c++><crypto++><ecdsa>","1","0","1","2019-10-21 16:28:37","58486296","1","","608639","","2019-10-21 12:27:42","2019-10-21 08:54:46",""
"57218017","How to Ethereum wallet address generated by derived ECDSA Public key in Android","I'm new to Ethereum and for learning purposes,How to Ethereum wallet address generated by derived ECDSA Public key in Android .
","","32","<android><ethereum><ecdsa>","1","","0","2019-07-26 10:43:40","","1","","1000551","","2019-07-26 10:43:40","2019-07-26 10:20:57",""
"56865047","How to use my pkcs#8 file to get ecdsa string","I am trying to get a signature string locally from the file PKCS#8 file which is in .p8 format. When I open it I can see a string between the statement
 -----BEGIN PRIVATE KEY-----
// strings line 64 characters
// strings line 64 characters
// strings line 64 characters
// strings line 8 characters
-----END PRIVATE KEY-----

I want to convert this file and sign in ecdsa to get the signature.
How can I achieve this in c language using openssl
","Read the key data from your PKCS#8 file using PEM_read_PrivateKey() (or PEM_read_bio_PrivateKey(). This will give you the key as an EVP_PKEY object. Documentation for those functions is here:
https://www.openssl.org/docs/man1.1.1/man3/PEM_read_PrivateKey.html
Typically when signing you normally want to digest the data to be signed first using some digest function (e.g. SHA256) followed by the signature operation (ECDSA in this case). Assuming that's what you want to do you should use the EVP_DigestSign* family of functions. Documentation for those functions is here:
https://www.openssl.org/docs/man1.1.1/man3/EVP_DigestSign.html
The code might look something like this (untested):
EVP_PKEY *pkey = PEM_read_PrivateKey(myfile, NULL, NULL, NULL);
EVP_MD_CTX *mdctx = EVP_MD_CTX_new();
size_t siglen = 0;
unsigned char *sig;

if (mdctx == NULL || pkey == NULL)
    goto err;

if (!EVP_DigestSignInit(mdctx, NULL, EVP_sha256(), NULL, pkey))
    goto err;

 if(!EVP_DigestSignUpdate(mdctx, tobesigned, tobesignedlen))
    goto err;

 /* Find out the signature length */
 if(!EVP_DigestSignFinal(mdctx, NULL, &siglen))
    goto err;

 /* Allocate memory for the signature length */
 sig = OPENSSL_malloc(siglen);
 if (sig == NULL)
     goto err;

 /* Now get the signature */
 if(!EVP_DigestSignFinal(mdctx, sig, &siglen))
     goto err;

 EVP_MD_CTX_free(mdctx);
 EVP_PKEY_free(pkey);
/* Free ""sig"" when you've finished with it */

","31","<c><openssl><ecdsa>","0","1","1","2019-07-03 08:50:17","","0","","","","","2019-07-03 07:28:18",""
"53466649","How to automate ssh ECDSA key update when needed or avoid remote host identification changed messages?","I am looking for a way to ease ECDSA key update on my lan as I have a local environment with very high recycle rate on VMs (cloud provisioning and PXE baremetal provisioning).
I do not not want to disable completely the SSH key verification as this would impose risks.
Still I do want to either make ssh prompt me about the key change and allow me to press ""y"" to fix it or fully automate it based on the IP subnet. 
Another aproach that I am consiring is if it would be possible to assure that the ECDSA keys survive between reprovisionign of the machines via kickstart install scripts... mainly how big of an issue it would be to hardcode the key and share it betwen instances (or something similar).
This is a home-office development-testing environment so security requirements are lesser than on production but still I do not want to fully downgrate the security just to accomodate this issue. 
","","31","<security><ssh><ecdsa>","0","","0","2018-11-25 10:38:04","","0","","","","","2018-11-25 10:38:04",""
"57522698","Javascript convert ECDH keys into ECDSA keys","I generate the ECDH keys in this way
let _this = this;
window.crypto.subtle.generateKey(
        {
            name: ""ECDH"",
            namedCurve: ""P-256"", // the curve name
        },
        true, // <== Here if you want it to be exportable !!
        [""deriveKey"", ""deriveBits""] // usage
    )
    .then(key => {
        _this.keys = key;
        // export
        return window.crypto.subtle.exportKey(
            ""raw"", //can be ""jwk"" (public or private), ""raw"" (public only), ""spki"" (public only), or ""pkcs8"" (private only)
            _this.keys.publicKey
        )
        .then(rawPublicKey => {
            _this.publicKey = rawPublicKey;
            return rawPublicKey;
        })
    })

In this way i have the cryptokeys and the raw (x,y coords) public key.
I would use the keys for using it for ECDSA
How can I do that?
","window.crypto.subtle.generateKey({
                name: ""ECDSA"",
                namedCurve: curve, //can be ""P-256"", ""P-384"", or ""P-521""
            },
            true, //whether the key is extractable (i.e. can be used in exportKey)
            [""sign"", ""verify""] //can be any combination of ""sign"" and ""verify""
        )
        .then(function(key) {

        publicKey = key.publicKey;
        privateKey = key.privateKey;
        // For Demo Purpos Only Exported in JWK format
        window.crypto.subtle.exportKey(""jwk"", key.publicKey).then(
            function(keydata) {
                publicKeyhold = keydata;
                publicKeyJson = JSON.stringify(publicKeyhold);
                document.getElementById(""ecdsapublic"").value = publicKeyJson;
            }
        );

        window.crypto.subtle.exportKey(""jwk"", key.privateKey).then(
            function(keydata) {
                privateKeyhold = keydata;
                privateKeyJson = JSON.stringify(privateKeyhold);
                document.getElementById(""ecdsaprivate"").value = privateKeyJson;

as you can see you can generate ECDSA keys using global method
they will be different , you can't use ECDH keys
                }
            );
","30","<javascript><elliptic-curve><ecdsa><ecdh>","0","0","1","2019-08-16 10:30:18","57523044","2","","","","","2019-08-16 10:04:12",""
"58664536","Python Script for Extracting R, S and Public Key Values from Hexadecimal Scriptsig","I have the following Sigscript in Hexadecimal:
""483045022100da43201760bda697222002f56266bf65023fef2094519e13077f777baed553b102205ce35d05eabda58cd50a67977a65706347cc25ef43153e309ff210a134722e9e0141042daa93315eebbe2cb9b5c3505df4c6fb6caca8b756786098567550d4820c09db988fe9997d049d687292f815ccd6e7fb5c1b1a91137999818d17c73d0f80aef9""
Now i need to obtain the values of R, S and the public key using a PYTHON script.
","","29","<python><transactions><ecdsa>","0","","0","2019-11-01 19:03:11","","1","","","","","2019-11-01 19:03:11",""
"57797544","How to compress the public key to 33bytes with public-key object in java (secp256k1 algorithm used)","I'm trying to get compressed public-key from the PublicKey Object. 
I used ECDSA secp256k1 algorithm at bouncy castle library to generate a key pair.
by getPublic() method, I could get PublicKey object and when I printed it out it showed me like this,
EC Public Key [bd:e1:53:71:35:6a:f0:74:cb:b4:a1:b5:9d:60:26:81:1f:d0:22:32]
 X: 6da8d1d2732329fe207216ecf1dcaf45baf00eb02c55b97762ec014d4e71ccdd
 Y: f9c91e4a0c755ba905f0ed80939f7c73640be790da025fc44baee1f45363a1ef
I would like to compress it so I could have
  information of Y(1byte) + X(32byte) in byte array or Hex.
Can anyone please let me know how to compress the public key? so I could get
33byte of compressed public key? 
I'd really appreciate your help.
public static KeyPair getKeyPair()
        throws NoSuchAlgorithmException, NoSuchProviderException, InvalidAlgorithmParameterException {
    Security.addProvider(new BouncyCastleProvider());

    KeyPairGenerator keyGen = KeyPairGenerator.getInstance(KEY_FACTORY_ALGORITHM, ""BC"");
    ECGenParameterSpec ecSpec = new ECGenParameterSpec(""secp256k1"");

    keyGen.initialize(ecSpec, new SecureRandom());
    KeyPair keypair = keyGen.generateKeyPair();

    return keypair;

System.out.println(keyPair.getPublic());

","","28","<java><bouncycastle><public-key><ecdsa>","0","","0","2019-09-05 02:04:52","","1","","","","","2019-09-05 02:04:52",""
"57304452","In which file in the bitcoin source code is the signature verification process done?","I'm looking for the transaction signature verification process in the bitcoin source code (from https://github.com/bitcoin/bitcoin) but I can't find it. Where is it done ?
","A bitcoin transaction does not have a signature. Instead, it references outputs from previous transactions by supplying an unlocking script for each of the referenced outputs. 
For more information about the transaction layout see here
The transaction verification code can be found in tx_check.cpp and tx_verify.cpp here. 
The actual script execution code can be found in EvalScript here
","28","<digital-signature><bitcoin><ecdsa>","0","0","1","2019-08-05 07:41:14","","0","","6174553","","2019-08-01 08:11:29","2019-08-01 08:05:19",""
"41465379","Getting xml document from url with ECDSA certificate","I need the XML from an Url that has an ECDSA certifcate.
When I try to get this, I get the error:

The request was aborted: Could not create SSL/TLS secure channel

I tried:
ServicePointManager.ServerCertificateValidationCallback = (snder, cert, chain, error) => true;

and 
ServicePointManager.ServerCertificateValidationCallback = delegate { return true; };

and
ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls;

but still the same error.
","Finally fixed it by adding this row:
//Set the security protocol to SL12 otherwise it returns an error
ServicePointManager.SecurityProtocol = SecurityProtocolType.Ssl3 | (SecurityProtocolType)3072;
","27","<c#><xml><ecdsa>","1","1","1","2017-01-20 08:02:16","41758736","0","1","1768343","","2017-01-04 14:26:05","2017-01-04 13:48:20",""
"57841226","ECDsaCng key generated longer than expected 32-bytes","I was playing around with the ECDsaCng, and I realised that the key size doesn't seem to be correct. From the code below, the privateKey variable, for instance, was a 104-long byte array, whereas I didn't expect it to be larger than 32. 
What am I doing wrong?
        ECDsaCng dsa = new ECDsaCng(256);
        dsa.HashAlgorithm = CngAlgorithm.Sha256;
        dsa.GenerateKey(ECCurve.NamedCurves.nistP256);
        var privateKey = dsa.Key.Export(CngKeyBlobFormat.EccPrivateBlob);
        var publicKey = dsa.Key.Export(CngKeyBlobFormat.EccPublicBlob);

Thank you in advance.
","The private key d is a random integer in [1, n - 1], where n is the order of the base point G. The public key is the curve point (x, y) = d * G, here. For NIST P-256 (secp256r1) d, x and y are encoded to 32 bytes (the values cannot be larger). 
MS stores both keys in a specific format described here. The format for the public key has an 8 bytes header, followed by the 32 bytes x-value and the 32 bytes y-value, so that the total length is 72 bytes. The format for the private key has a (different) 8-byte header, followed by the 32 byte x-value, the 32 byte y-value, and the 32 byte d-value, so that the total length is 104 bytes, in accordance with the value you found. A detailed description of the headers can be found here.
","26","<c#><ecdsa>","1","2","1","2019-09-08 19:06:46","57844965","0","","","","","2019-09-08 10:46:03",""
"43581574","how can we improve message authenticity in ad-hoc networks , without using traditional methods of encryption and digital signatures","usually we are using public-key encryption, or functional encryption along with ECDSA signatures to provide message authenticity and integrity  in Ad-hoc networks, but both these techniques have inherent drawbacks, what else can we use to improve the message authenticity and integrity in ad-hoc networks. 
","regarding ""without using traditional methods of encryption and digital signatures"", i can not say the following more clearly:
STOP ... right here... right now ...
when we are talking about vehicular data exchange the cryptographic needs are mission critical. when you ask about what can be done without well established methods, you are thinking about breaking rule number one in cryptography: designing your own system. 
you do not want your own crypto system / protocol ... you want a well tested, reliable, publicly available, system that has been audited by the crypto community
","23","<encryption><functional-programming><ecdsa>","0","0","1","2017-04-25 07:51:26","","2","","","","","2017-04-24 06:53:04",""
"54689827","Using ECDSA for signing api requests","Is it a good choice to use ECDSA for signing API requests, given the following conditions:

Only clients must be able to create signatures
Requests integrity must be verifiable, eg. we should know if a replay-attack was initiated
If the keys database would be compromised, the client keys should still be valid.

Signature is made from the request endpoint + params + timestamp. Hashed and signed.
What do you guys think? 
","","21","<api><authentication><ecdsa>","3","","0","2019-02-14 11:54:45","","0","","","","","2019-02-14 11:54:45",""
"56793733","How to sign Bitcoin transactions using JCE?","I need to sign Bitcoin transactions using JCE primitives(no bitcoinj), but my signatures are not considered valid by bitcoinj.
I tried to simulate this process. I created a random hash and signed it using both JCE and bitcoinj. Signatures are not equal.
Here is the code
import org.bitcoinj.core.ECKey;
import org.bitcoinj.core.Sha256Hash;
import org.spongycastle.crypto.digests.SHA256Digest;
import org.spongycastle.crypto.params.ECPrivateKeyParameters;
import org.spongycastle.crypto.signers.ECDSASigner;
import org.spongycastle.crypto.signers.HMacDSAKCalculator;
import sun.security.ec.ECPrivateKeyImpl;
import sun.security.ec.ECPublicKeyImpl;

import java.math.BigInteger;
import java.security.*;
import java.security.spec.ECGenParameterSpec;

public class ECDSABitcoin {

    private static final String SIGN_ALGORITHM = ""SHA256withECDSA"";

    public static void main(String[] args) throws Exception {

        KeyPairGenerator keyPairGenerator = createGenerator();
        final KeyPair keyPair = keyPairGenerator.generateKeyPair();
        ECPrivateKeyImpl privateKey = (ECPrivateKeyImpl) keyPair.getPrivate();
        ECPublicKeyImpl publicKey = (ECPublicKeyImpl) keyPair.getPublic();
        try {
            Sha256Hash hashOut = Sha256Hash.wrap(toSha256(""abc"".getBytes()));
            byte[] signatureBytes = sign(hashOut.getBytes(), keyPair);

            ECKey.ECDSASignature mySignature = ECKey.ECDSASignature.decodeFromDER(signatureBytes).toCanonicalised();
            ECKey.ECDSASignature bitcoinSignature = sign(privateKey.getS(), hashOut.getBytes()).toCanonicalised();
            System.out.println(""My signature s "" + mySignature.s + "" r "" + mySignature.r + "" canonical "" + mySignature.isCanonical());
            System.out.println(""Verify my "" + verify(keyPair, hashOut.getBytes(), signatureBytes));
            System.out.println(""Bitcoinj signature s "" + bitcoinSignature.s + "" r "" + bitcoinSignature.r + "" canonical "" + bitcoinSignature.isCanonical());
            System.out.println(""Verify Bitcoinj "" + verify(keyPair, hashOut.getBytes(), bitcoinSignature.encodeToDER()));
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private static boolean verify(KeyPair keyPair, byte[] message, byte[] signatureBytes) throws NoSuchAlgorithmException, InvalidKeyException, SignatureException {
        final Signature verifySignature = Signature.getInstance(SIGN_ALGORITHM);
        verifySignature.initVerify(keyPair.getPublic());
        verifySignature.update(message);
        return verifySignature.verify(signatureBytes);
    }

    private static byte[] sign(byte[] message, KeyPair keyPair) throws InvalidKeyException, NoSuchAlgorithmException, SignatureException {
        final Signature signature = Signature.getInstance(SIGN_ALGORITHM);
        signature.initSign(keyPair.getPrivate());
        signature.update(message);
        return signature.sign();
    }

    private static KeyPairGenerator createGenerator() throws NoSuchAlgorithmException, InvalidAlgorithmParameterException {
        final KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance(""EC"");
        ECGenParameterSpec ecParam = new ECGenParameterSpec(""secp256k1"");
        keyPairGenerator.initialize(ecParam);
        return keyPairGenerator;
    }

    private static ECKey.ECDSASignature sign(BigInteger privateKeyForSigning, byte[] data) {
        ECDSASigner signer = new ECDSASigner(new HMacDSAKCalculator(new SHA256Digest()));
        ECPrivateKeyParameters privKey = new ECPrivateKeyParameters(privateKeyForSigning, ECKey.CURVE);
        signer.init(true, privKey);
        BigInteger[] components = signer.generateSignature(data);
        return new ECKey.ECDSASignature(components[0], components[1]).toCanonicalised();
    }

    private static byte[] toSha256(byte[] message) throws NoSuchAlgorithmException {
        MessageDigest crypt = MessageDigest.getInstance(""SHA-256"");
        crypt.reset();
        crypt.update(message);
        return crypt.digest();
    }
}

The result is:
My signature s 45669553786690215047884329722902825758089042579493437816717142987836102849876 r 14778973653615637448416336446742229796258878351047437829727432860950944374049 canonical true
Verify my true
Bitcoinj signature s 24278043061766196831119988370534304503511938256487950554838614741011144316017 r 26413727078831382349368962255251267289169651926313668837949728205557969096319 canonical true
Verify Bitcoinj false

As you see, signatures are completely different, even though I use the same private key. What is wrong with my code? I just don't get it.
","","19","<bitcoin><jce><ecdsa><spongycastle>","0","","0","2019-06-27 14:52:57","","0","","","","","2019-06-27 14:52:57",""
"58209245","Validate a certificate chain (ecdsa)","I need to validate a certificate chain, and I just have the certificates, is that possible?
I'm trying in OpenSSL with the command verify, so when I ran:
OpenSSL> verify -CAfile testeroot.cer testesub.cer

testesub.cer: OK
However when I try with the ending certificate, I get a error:
OpenSSL> verify -CAfile testeroot.cer testesub.cer testeapp.cer
testesub.cer: OK
CN = ecc-crypto-services-encipherment_UC6-InMemory, OU = ApplePay, O = Apple Inc., C = US
error 20 at 0 depth lookup: unable to get local issuer certificate
error testeapp.cer: verification failed
error in verify

here is the certificates:
to be validated (the last - testeapp.cer):
-----BEGIN CERTIFICATE-----
MIIEEzCCA7igAwIBAgIIEvD9KtxTuV0wCgYIKoZIzj0EAwIwgYExOzA5BgNVBAMM
MlRlc3QgQXBwbGUgV29ybGR3aWRlIERldmVsb3BlcnMgUmVsYXRpb25zIENBIC0g
RUNDMSAwHgYDVQQLDBdDZXJ0aWZpY2F0aW9uIEF1dGhvcml0eTETMBEGA1UECgwK
QXBwbGUgSW5jLjELMAkGA1UEBhMCVVMwHhcNMTcwNTIwMDQxNTU3WhcNMTkwNjE5
MDQxNTU3WjBtMTYwNAYDVQQDDC1lY2MtY3J5cHRvLXNlcnZpY2VzLWVuY2lwaGVy
bWVudF9VQzYtSW5NZW1vcnkxETAPBgNVBAsMCEFwcGxlUGF5MRMwEQYDVQQKDApB
cHBsZSBJbmMuMQswCQYDVQQGEwJVUzBZMBMGByqGSM49AgEGCCqGSM49AwEHA0IA
BC4+XM9rmrBL56IvP6zP3nPIfocVU5SjSBVAiolsoYo3TaxmmvO/YiD8hjdn9K9H
UHxbwiH8ShmHTa85tAdOPrijggIrMIICJzBPBggrBgEFBQcBAQRDMEEwPwYIKwYB
BQUHMAGGM2h0dHA6Ly9vY3NwLXVhdC5jb3JwLmFwcGxlLmNvbS9vY3NwMDQtdGVz
dHd3ZHJjYWVjYzAdBgNVHQ4EFgQUrS6jy340wu3uQ2hOJxEfzEkzOdAwDAYDVR0T
AQH/BAIwADAfBgNVHSMEGDAWgBTW1tVa5f/9wnw0w0PevWh2XDapvjCCAR0GA1Ud
IASCARQwggEQMIIBDAYJKoZIhvdjZAUBMIH+MIHDBggrBgEFBQcCAjCBtgyBs1Jl
bGlhbmNlIG9uIHRoaXMgY2VydGlmaWNhdGUgYnkgYW55IHBhcnR5IGFzc3VtZXMg
YWNjZXB0YW5jZSBvZiB0aGUgdGhlbiBhcHBsaWNhYmxlIHN0YW5kYXJkIHRlcm1z
IGFuZCBjb25kaXRpb25zIG9mIHVzZSwgY2VydGlmaWNhdGUgcG9saWN5IGFuZCBj
ZXJ0aWZpY2F0aW9uIHByYWN0aWNlIHN0YXRlbWVudHMuMDYGCCsGAQUFBwIBFipo
dHRwOi8vd3d3LmFwcGxlLmNvbS9jZXJ0aWZpY2F0ZWF1dGhvcml0eS8wQQYDVR0f
BDowODA2oDSgMoYwaHR0cDovL2NybC11YXQuY29ycC5hcHBsZS5jb20vYXBwbGV3
d2RyY2FlY2MuY3JsMA4GA1UdDwEB/wQEAwIDKDASBgkqhkiG92NkBicBAf8EAgUA
MAoGCCqGSM49BAMCA0kAMEYCIQCMvUq2YUxY/RqTWE4FqsPTr9zGyilCunIU3FSo
btep7gIhAN7Vdx3B0p7DTCqXHd05IPsZGLdIDG1NTxOk2Oj/N7GG
-----END CERTIFICATE-----

======================================================================
The intermediate (testesub.cer)
-----BEGIN CERTIFICATE-----
MIIC5zCCAoygAwIBAgIIR1pCSszYnvcwCgYIKoZIzj0EAwIwZzEhMB8GA1UEAwwY
VGVzdCBBcHBsZSBSb290IENBIC0gRUNDMSAwHgYDVQQLDBdDZXJ0aWZpY2F0aW9u
IEF1dGhvcml0eTETMBEGA1UECgwKQXBwbGUgSW5jLjELMAkGA1UEBhMCVVMwHhcN
MTQwMjA2MTYxODI5WhcNMjQwMjA0MTYxODI5WjCBgTE7MDkGA1UEAwwyVGVzdCBB
cHBsZSBXb3JsZHdpZGUgRGV2ZWxvcGVycyBSZWxhdGlvbnMgQ0EgLSBFQ0MxIDAe
BgNVBAsMF0NlcnRpZmljYXRpb24gQXV0aG9yaXR5MRMwEQYDVQQKDApBcHBsZSBJ
bmMuMQswCQYDVQQGEwJVUzBZMBMGByqGSM49AgEGCCqGSM49AwEHA0IABDzb9Lsn
a4XrUdRwIjl36m9hTGhxQrW5Ls3wYr07kaZ/5tMOEG5jOBeHtI+x8YHmkgp0Ry43
nmZTik3vosay+6ajggEFMIIBATBUBggrBgEFBQcBAQRIMEYwRAYIKwYBBQUHMAGG
OGh0dHA6Ly9vY3NwLXVhdC5jb3JwLmFwcGxlLmNvbS9vY3NwMDQtdGVzdGFwcGxl
cm9vdGNhZWNjMB0GA1UdDgQWBBTW1tVa5f/9wnw0w0PevWh2XDapvjASBgNVHRMB
Af8ECDAGAQH/AgEAMB8GA1UdIwQYMBaAFNJH4sU0ccYQjZPuBEMf4RsP4c0RMEUG
A1UdHwQ+MDwwOqA4oDaGNGh0dHA6Ly9jcmwtdWF0LmNvcnAuYXBwbGUuY29tL3Rl
c3RhcHBsZXJvb3RjYWVjYy5jcmwwDgYDVR0PAQH/BAQDAgEGMAoGCCqGSM49BAMC
A0kAMEYCIQCd4eDjSiTu55mDKWCaD7Tqe4hp86pJ1Fsw7SlPKmH+bQIhAJ5coaJ3
uarz81Im19NGcrU45h1A8hNDTz55QPEHujS5
-----END CERTIFICATE-----

======================================================================
the root (CA) - testeroot.cer:
-----BEGIN CERTIFICATE-----
MIICJzCCAc2gAwIBAgIIWdHsEJJBx8QwCgYIKoZIzj0EAwIwZzEhMB8GA1UEAwwY
VGVzdCBBcHBsZSBSb290IENBIC0gRUNDMSAwHgYDVQQLDBdDZXJ0aWZpY2F0aW9u
IEF1dGhvcml0eTETMBEGA1UECgwKQXBwbGUgSW5jLjELMAkGA1UEBhMCVVMwHhcN
MTQwMTMxMjE0NjQ2WhcNMzQwMTI2MjE0NjQ2WjBnMSEwHwYDVQQDDBhUZXN0IEFw
cGxlIFJvb3QgQ0EgLSBFQ0MxIDAeBgNVBAsMF0NlcnRpZmljYXRpb24gQXV0aG9y
aXR5MRMwEQYDVQQKDApBcHBsZSBJbmMuMQswCQYDVQQGEwJVUzBZMBMGByqGSM49
AgEGCCqGSM49AwEHA0IABHs4ENAKoxt8HST7OdZrHAqXSDD/THBJPSFmT/WJAK+T
73Sa6EwnPb6VUFI9U5DzMquDtl5zyOcXixgJk5+X1RajYzBhMB0GA1UdDgQWBBTS
R+LFNHHGEI2T7gRDH+EbD+HNETAPBgNVHRMBAf8EBTADAQH/MB8GA1UdIwQYMBaA
FNJH4sU0ccYQjZPuBEMf4RsP4c0RMA4GA1UdDwEB/wQEAwIBBjAKBggqhkjOPQQD
AgNIADBFAiEA3AYrcocg7PfcyPL4iQpXY5qSSoRu3RdQ7m8BTKGgdNECIB81erUL
eYDUnJ8x3DYcxv1lckBnuvxvWV7v6l6HrDAN
-----END CERTIFICATE-----

I've already tried to concatenate the certificates, but it seems that it's just verified the first certificate of the concatenated exit.
","There are two possible scenarios we need to consider here.
1) The intermediate certificate is trusted by the verifier
2) The intermediate certificate is not trusted by the verifier
In the first case the intermediate certificate is in the trust store for the verifier. The simplest way to achieve that is to concatenate the root and sub files together:
$ cat testeroot.cer testesub.cer >testerootandsub.cer

Next we verify like this:
$ openssl verify -CAfile testerootandsub.cer testeapp.cer

Unfortunately when I try this I get some errors:
CN = ecc-crypto-services-encipherment_UC6-InMemory, OU = ApplePay, O = Apple Inc., C = US
error 34 at 0 depth lookup: unhandled critical extension
CN = ecc-crypto-services-encipherment_UC6-InMemory, OU = ApplePay, O = Apple Inc., C = US
error 10 at 0 depth lookup: certificate has expired
error testeapp.cer: verification failed

So the first one is an ""unhandled critical extension"" and the second one is ""certificate has expired"". Lets look at the certificate:
$ openssl x509 -in testeapp.cer -noout -text
Certificate:
    Data:
        Version: 3 (0x2)
        Serial Number: 1364869047620188509 (0x12f0fd2adc53b95d)
        Signature Algorithm: ecdsa-with-SHA256
        Issuer: CN = Test Apple Worldwide Developers Relations CA - ECC, OU = Certification Authority, O = Apple Inc., C = US
        Validity
            Not Before: May 20 04:15:57 2017 GMT
            Not After : Jun 19 04:15:57 2019 GMT
        Subject: CN = ecc-crypto-services-encipherment_UC6-InMemory, OU = ApplePay, O = Apple Inc., C = US
        Subject Public Key Info:
            Public Key Algorithm: id-ecPublicKey
                Public-Key: (256 bit)
                pub:
                    04:2e:3e:5c:cf:6b:9a:b0:4b:e7:a2:2f:3f:ac:cf:
                    de:73:c8:7e:87:15:53:94:a3:48:15:40:8a:89:6c:
                    a1:8a:37:4d:ac:66:9a:f3:bf:62:20:fc:86:37:67:
                    f4:af:47:50:7c:5b:c2:21:fc:4a:19:87:4d:af:39:
                    b4:07:4e:3e:b8
                ASN1 OID: prime256v1
                NIST CURVE: P-256
        X509v3 extensions:
            Authority Information Access: 
                OCSP - URI:http://ocsp-uat.corp.apple.com/ocsp04-testwwdrcaecc

            X509v3 Subject Key Identifier: 
                AD:2E:A3:CB:7E:34:C2:ED:EE:43:68:4E:27:11:1F:CC:49:33:39:D0
            X509v3 Basic Constraints: critical
                CA:FALSE
            X509v3 Authority Key Identifier: 
                keyid:D6:D6:D5:5A:E5:FF:FD:C2:7C:34:C3:43:DE:BD:68:76:5C:36:A9:BE

            X509v3 Certificate Policies: 
                Policy: 1.2.840.113635.100.5.1
                  User Notice:
                    Explicit Text: Reliance on this certificate by any party assumes acceptance of the then applicable standard terms and conditions of use, certificate policy and certification practice statements.
                  CPS: http://www.apple.com/certificateauthority/

            X509v3 CRL Distribution Points: 

                Full Name:
                  URI:http://crl-uat.corp.apple.com/applewwdrcaecc.crl

            X509v3 Key Usage: critical
                Key Encipherment, Key Agreement
            1.2.840.113635.100.6.39: critical
                ..
    Signature Algorithm: ecdsa-with-SHA256
         30:46:02:21:00:8c:bd:4a:b6:61:4c:58:fd:1a:93:58:4e:05:
         aa:c3:d3:af:dc:c6:ca:29:42:ba:72:14:dc:54:a8:6e:d7:a9:
         ee:02:21:00:de:d5:77:1d:c1:d2:9e:c3:4c:2a:97:1d:dd:39:
         20:fb:19:18:b7:48:0c:6d:4d:4f:13:a4:d8:e8:ff:37:b1:86

First we can see that the certificate has indeed expired (""Not After"" is ""Jun 19 04:15:57 2019 GMT""). Secondly there is a critical extension that OpenSSL does not recognise:
            1.2.840.113635.100.6.39: critical
                ..

We can get OpenSSL to ignore these two errors like this:
$ openssl verify -ignore_critical -no_check_time -CAfile testerootandsub.cer testeapp.cer 
testeapp.cer: OK

The second scenario I talked about is where the intermediate certificate is not trusted by the verifier. In this case the verifier is assumed to have the root in their trust store, and the intermediate and end entity certificates will have been supplied to them. In that case the verification command looks like this:
$ openssl verify -ignore_critical -no_check_time -CAfile testeroot.cer -untrusted testesub.cer testeapp.cer 
testeapp.cer: OK

","19","<openssl><certificate><chain><ecdsa>","0","0","1","2019-10-03 07:55:28","","0","","","","","2019-10-02 20:56:57",""
"58753715","Extract ECDSA parameters from Bitcoin Blockchain Block","I am trying to extract the parameters of ECDSA signature used in bitcoin to run some tests. For that i need to obtain :
  --- r and s ,  i.e., the ECDSA signature

  --- H(m) , the hash of the message used to generate the ECDSA signature

  --- the random integer k used in ECDSA signature generation, 
      this is, the k such that  s = k*(H(m) + x*r) mod q  where x is 
      the private key

I already was able to obtain the r and the s of a very specific type of block, the ones where len(inp.script_sig) == 214 ).
So i need to obtain these parameters for all blocks and also need to know how to do this for Ethereum and LiteCoin.

from blockchain import blockexplorer
from binascii import unhexlify
from pyasn1.codec.der import decoder as asn1der
import time, os, codecs
import numpy as np
from bitcoin_tools.bitcoin_tools.core.transaction import TX


# returns the blocks of given day
# if day = 0 , returns blocks of today
# if day = 1 , returns blocks of yesterday , and so on ....
def getBlocksofDay( day ):

    # get blocks from blockchain from given day
    # if we want the day before just subtract 86400000
    return blockexplorer.get_blocks(int(round(time.time() * 1000)) - 86400000*day)


# print SimpleBlock
def printSimpleBlock( block ):

    print(""\nHeight : "", block.height )
    print(""Hash : "", block.hash )
    print(""Time : "", block.time)
    print(""Main Chain :"",  block.main_chain, ""\n"" )


# print Block
def printBlock( block ):

    print(""\nHash : "", block.hash )
    print(""Version : "", block.version )
    print(""Previous Block : "", block.previous_block )
    print(""Merkle Root : "", block.merkle_root )
    print(""Time : "", block.time)
    print(""Bits : "", block.bits)
    print(""Fee : "", block.fee)
    print(""Nonce : "", block.nonce)
    print(""Number of transaction : "", block.n_tx)
    print(""Size : "", block.size )
    print(""Block Index : "" , block.block_index )
    print(""Main Chain :"",  block.main_chain )
    print(""Height : "", block.height )
    print(""Received Time : "", block.received_time )
    print(""Relayed By : "", block.relayed_by )

    if( block.n_tx > 50):
        print(""Transactions : NOT PRINTING TX TOO MANY \n""  )
    else:
        print(""Transactions : "", block.transactions )


# print Transaction
def printTransaction( tx ):

    print(""\nDouble Spend : "", tx.double_spend )
    print(""Block height : "", tx.block_height )
    print(""Time : "", tx.time )
    print(""Relayed By : "", tx.relayed_by )
    print(""Hash : "", tx.hash )
    print(""Tx Index : "" , tx.tx_index )
    print(""Version : "", tx.version )
    print(""Size : "", tx.size )
    print(""Inputs : "", tx.inputs )
    print(""Outputs : "", tx.outputs, ""\n"" )


# print Input
def printInput( inp ):

    try:
        if( len(inp.script_sig) == 214 ):
            '''
            print(""\nN : "", inp.n )
            print(""Value : "", inp.value )
            print(""Address : "", inp.address )
            print(""Tx_Index : "", inp.tx_index )
            print(""Type : "", inp.type )
            print(""Script : "", inp.script )
            print(""Script_Sig : "", inp.script_sig )
            print(""Sequence : "", inp.sequence )
            '''
            return 0
    except:
        return -1


# print XPub
def printXPub( xpub ):

    print(""\nAddress : "", xpub.address)
    print(""Number of Transaction : "", xpub.n_tx )
    print(""Total Received : "", xpub.total_received / 100000000, ""BTC"" )
    print(""Total Sent : "", xpub.total_sent / 100000000, ""BTC"" )
    print(""Final Balance : "", xpub.final_balance )
    print(""Change Index : "", xpub.change_index )
    print(""Account Index : "", xpub.account_index, ""\n\n"" )

    for tx in xpub.transactions:
        printTransaction(tx)



def printR_S_PK(script_sig_hex):

    #script_sig_hex is the scriptsig hex
    values = asn1der.decode(unhexlify(script_sig_hex)[1:])
    '''
    #R Value in int form
    print( ""\nR value:"", values[0][0] )

    #S Value in int form
    print( ""S value:"", values[0][1]  )

    # X coordinate of Public Key
    print( ""X coordinate of PK:"",  int(values[1].hex()[4:],16) )
    '''

    return [ int(values[1].hex()[6:],16), int(values[1].hex()[4:6],16), int(values[0][0]), int(values[0][1]) ]






#if __name__ == ""__main__"":


def getThemBlocks(day):


    simpleBlocksofDay = getBlocksofDay(day)
    pubKeys = np.array([[-1], [-1], [-1], [-1], [-1], [-1]])

    print(""LEN : "", len(simpleBlocksofDay), ""\n"")

    # run through all blocks of this day
    for block in [simpleBlocksofDay[0]]:
        blocksofDay = blockexplorer.get_block( block.hash )
        txs = blocksofDay.transactions

        # run through all tx of this day
        for txofDay in txs:
            inpofTx = txofDay.inputs

            # run through all inputs of this day
            for inp in inpofTx:

                # if input has format we want
                if( printInput(inp) == 0 ):

                    numLines, numColumns = len(pubKeys), pubKeys[0].size

                    script_sig_hex = inp.script_sig
                    xC, sig, r, s = printR_S_PK(script_sig_hex)

                    aux = np.where(pubKeys[2]==xC)

                    columnToAdd = [ -1 for i in range(0,numLines) ]
                    columnToAdd[0], columnToAdd[1], columnToAdd[2], columnToAdd[3] = 6, 1, xC, sig
                    columnToAdd[4], columnToAdd[5] = r, s

                    lineToAdd = [ -1 for i in range(0,numColumns) ]


                    # xC it's not repeated
                    if( aux[0].size == 0 ):
                        pubKeys = np.c_[pubKeys, np.array(columnToAdd)]

                    # again xC it's not repeated
                    elif( (aux[0].size == 1) and (pubKeys[3][aux[0][0]] != sig) ):
                        pubKeys = np.c_[pubKeys, np.array(columnToAdd)]

                    # xC it's repeated
                    else:
                        if( pubKeys[3][aux[0][0]] == sig ):
                            column = aux[0][0]
                        else:
                            column = aux[0][1]

                        # need to add 2 new lines
                        if( pubKeys[0][column]+1 > numLines ):
                            aux = np.array(lineToAdd)
                            pubKeys = np.r_[pubKeys, [aux]]
                            pubKeys = np.r_[pubKeys, [aux]]
                            pubKeys = np.r_[pubKeys, [aux]]

                        line = pubKeys[0][column]
                        pubKeys[line][column] = r
                        pubKeys[line+1][column] = s
                        pubKeys[line+2][column] = txofDay.hash

                        # increase the number of elements in that columns by 2
                        pubKeys[0][column] += 3

                        # increase the number of signatures by 1
                        pubKeys[1][column] += 1



    for j in range(1, pubKeys[0].size):

        if(pubKeys[1][j] > 40):
            for i in range(0, len(pubKeys)):

                print(pubKeys[i][j])

            print(""\n\n"")




if __name__ == ""__main__"":

    '''
    for i in range(0,3):
        getThemBlocks(i)
    '''

    # First a transaction object is created (through the deserialize constructor) by deserializing the hex transaction we have selected.
    hex_tx = ""01000000013ca58d2f6fac36602d831ee0cf2bc80031c7472e80a322b57f614c5ce9142b71000000006b483045022100f0331d85cb7f7ec1bedc41f50c695d654489458e88aec0076fbad5d8aeda1673022009e8ca2dda1d6a16bfd7133b0008720145dacccb35c0d5c9fc567e52f26ca5f7012103a164209a7c23227fcd6a71c51efc5b6eb25407f4faf06890f57908425255e42bffffffff0241a20000000000001976a914e44839239ab36f5bc67b2079de00ecf587233ebe88ac74630000000000001976a914dc7016484646168d99e49f907c86c271299441c088ac00000000""

    tx = TX.deserialize(hex_tx)

    # Then, the transaction can be displayed using the display method to analyze how it's been constructed.
    tx.display()





","","17","<bitcoin><ecdsa>","0","","0","2019-11-07 17:02:09","","0","","","","","2019-11-07 17:02:09",""
"57984822","ecdsa key pair from a user chosen public key","Let's say that I have a random number 'x', I want to generate a ecdsa key pair with 'x' as the private key. Is it possible to generate such a key pair?
","","14","<bitcoin><ecdsa>","0","","0","2019-09-18 03:47:31","","1","","","","","2019-09-18 03:47:31",""
"57154756","Digital signing and verifying using prime256v1 in Node","I want to generate digital signatures in Node using ECDSA (prime256v1 curve) 
The private key is generated with this OpenSSL command:
$ openssl ecparam -name prime256v1 -genkey -out private_key.pem

Would the following be the correct Node code to sign a message:
import crypto from 'crypto'

const sign = (privateKey, messageString) => {
  const buffer = Buffer.from(messageString, 'utf8')
  const signature = crypto.sign('sha256', buffer, privateKey)
  return signature.toString('base64')
}

","","13","<node.js><openssl><cryptojs><ecdsa>","0","","0","2019-07-22 23:04:35","","0","","","","","2019-07-22 23:04:35",""
"58708473","Best practice for uploading HMAC secretKey and RSA/ECDSA public key in a RESTful web application","Imagine a web application with RESTful endpoint accepting HMAC secret keys / RSA or ECDSA public keys (for storage).
What would be the best user experience to submit such a key ?
Presumably the request body attribute is a String, so it can be convenient for using through curl for instance
I guess for HMAC it would be Base64#encode(keyBytes).
For RSA/ECDSA I'm kinda confused.
https://www.cryptosys.net/pki/rsakeyformats.html
Specifies that RSA public key may be either X.509, XML or PKCS#1.
So, is base64 a good choice here as well ? or it should be some kind of US_ASCCI / iso-8859-1 string ?

The assumption is that the user may come later and GET the keys, so it would be nice if he see the same values he submitted earlier (avoiding any string alteration due different text encoding)
","","12","<rest><rsa><submit><public-key-encryption><ecdsa>","0","","0","2019-11-05 09:41:10","","1","","","","","2019-11-05 09:41:10",""
"58769996","libsodiums secret key contains public key?","I noticed that libsodiums secret signing keys contain a copy of the public key?
What is the reason for this?
Does it have to do with how the ecdsa algorithm works or is it just for convenience?
","","6","<ecdsa><libsodium>","0","","0","2019-11-08 16:00:42","","0","","","","","2019-11-08 16:00:42",""
